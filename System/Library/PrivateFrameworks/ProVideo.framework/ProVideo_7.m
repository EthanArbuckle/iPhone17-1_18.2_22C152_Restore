const char *Gettype4_nice_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000487\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 2.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xy = half2(hg_Params[1].xy);\n"
             "    r1.zw = c0.zw;\n"
             "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
             "    r2.xyz = fmin(r2.xyz, r2.www);\n"
             "    r3.xyz = r2.xyz + half3(hg_Params[0].yyy);\n"
             "    r3.xyz = pow(r3.xyz, half3(hg_Params[0].xxx));\n"
             "    r3.xyz = r3.xyz*half3(hg_Params[0].www) + half3(hg_Params[0].zzz);\n"
             "    r4.xyz = r2.xyz*half3(hg_Params[1].xxx);\n"
             "    r2.xyz = r2.xyz - half3(hg_Params[1].yyy);\n"
             "    r3.xyz = select(r3.xyz, r4.xyz, r2.xyz < 0.00000h);\n"
             "    r0.xyz = r3.xyz;\n"
             "    r0.xyz = r0.xyz + half3(hg_Params[2].xxx);\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=62c5fdab:7fc3593f:783cebb6:5506e6ba\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0003:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000420\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 2.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.w = c0.w;\n"
             "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
             "    r2.xyz = fmin(r2.xyz, r1.www);\n"
             "    r1.xyz = r2.xyz + hg_Params[0].yyy;\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
             "    r1.xyz = r1.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
             "    r3.xyz = r2.xyz*hg_Params[1].xxx;\n"
             "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
             "    r1.xyz = select(r1.xyz, r3.xyz, r2.xyz < 0.00000f);\n"
             "    r0.xyz = r1.xyz;\n"
             "    r0.xyz = r0.xyz + hg_Params[2].xxx;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=95965de2:ec2450ed:740ba24d:a0be43a6\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0003:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000047c\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 2.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.w = c0.w;\n"
           "    r2.xyz = max(r0.xyz, c0.zzz);\n"
           "    r2.xyz = min(r2.xyz, r1.www);\n"
           "    r1.xyz = r2.xyz + hg_ProgramLocal0.yyy;\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal0.xxx);\n"
           "    r1.xyz = r1.xyz*hg_ProgramLocal0.www + hg_ProgramLocal0.zzz;\n"
           "    r3.xyz = r2.xyz*hg_ProgramLocal1.xxx;\n"
           "    r2.xyz = r2.xyz - hg_ProgramLocal1.yyy;\n"
           "    r1.xyz = vec3(r2.x < 0.00000 ? r3.x : r1.x, r2.y < 0.00000 ? r3.y : r1.y, r2.z < 0.00000 ? r3.z : r1.z);\n"
           "    r0.xyz = r1.xyz;\n"
           "    r0.xyz = r0.xyz + hg_ProgramLocal2.xxx;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=2bdf62e0:beb95f57:b2bb1cfc:ecf85b8d\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0003:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Gettype4_float_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000487\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 2.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xy = half2(hg_Params[1].xy);\n"
             "    r1.zw = c0.zw;\n"
             "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
             "    r2.xyz = fmin(r2.xyz, r2.www);\n"
             "    r3.xyz = r2.xyz + half3(hg_Params[0].yyy);\n"
             "    r3.xyz = pow(r3.xyz, half3(hg_Params[0].xxx));\n"
             "    r3.xyz = r3.xyz*half3(hg_Params[0].www) + half3(hg_Params[0].zzz);\n"
             "    r4.xyz = r2.xyz*half3(hg_Params[1].xxx);\n"
             "    r2.xyz = r2.xyz - half3(hg_Params[1].yyy);\n"
             "    r3.xyz = select(r3.xyz, r4.xyz, r2.xyz < 0.00000h);\n"
             "    r0.xyz = r3.xyz;\n"
             "    r0.xyz = r0.xyz + half3(hg_Params[2].xxx);\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=62c5fdab:7fc3593f:783cebb6:5506e6ba\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0003:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000420\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 2.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.w = c0.w;\n"
             "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
             "    r2.xyz = fmin(r2.xyz, r1.www);\n"
             "    r1.xyz = r2.xyz + hg_Params[0].yyy;\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
             "    r1.xyz = r1.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
             "    r3.xyz = r2.xyz*hg_Params[1].xxx;\n"
             "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
             "    r1.xyz = select(r1.xyz, r3.xyz, r2.xyz < 0.00000f);\n"
             "    r0.xyz = r1.xyz;\n"
             "    r0.xyz = r0.xyz + hg_Params[2].xxx;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=95965de2:ec2450ed:740ba24d:a0be43a6\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0003:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000047c\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 2.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.w = c0.w;\n"
           "    r2.xyz = max(r0.xyz, c0.zzz);\n"
           "    r2.xyz = min(r2.xyz, r1.www);\n"
           "    r1.xyz = r2.xyz + hg_ProgramLocal0.yyy;\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal0.xxx);\n"
           "    r1.xyz = r1.xyz*hg_ProgramLocal0.www + hg_ProgramLocal0.zzz;\n"
           "    r3.xyz = r2.xyz*hg_ProgramLocal1.xxx;\n"
           "    r2.xyz = r2.xyz - hg_ProgramLocal1.yyy;\n"
           "    r1.xyz = vec3(r2.x < 0.00000 ? r3.x : r1.x, r2.y < 0.00000 ? r3.y : r1.y, r2.z < 0.00000 ? r3.z : r1.z);\n"
           "    r0.xyz = r1.xyz;\n"
           "    r0.xyz = r0.xyz + hg_ProgramLocal2.xxx;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=2bdf62e0:beb95f57:b2bb1cfc:ecf85b8d\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0003:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getrec709_fast_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002de\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r0.xyz = sqrt(r1.xyz);\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=71371cbe:526a992c:7aa37843:1294333d\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002d2\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r0.xyz = sqrt(r1.xyz);\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=d6a33776:ea9d46d1:7b701ce4:2b02f2f0\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000273\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp lowp   \n"
           "uniform lowp sampler2D hg_Texture0;\n"
           "varying mediump vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r0.xyz = sqrt(r1.xyz);\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=366ef5c6:9018d21a:09aca884:96379d9d\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getrec709_fixed_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003ef\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.4499999881, 1.098999977);\n"
             "    const half4 c1 = half4(-0.09899999946, 4.500000000, 0.01799999923, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=596deb76:9164d0a8:2f3e089d:582cf7bf\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003e5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.098999977);\n"
             "    const float4 c1 = float4(-0.09899999946, 4.500000000, 0.01799999923, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=7e4f848a:2cb60a58:1e95b028:52cd143e\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003bf\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp lowp   \n"
           "uniform lowp sampler2D hg_Texture0;\n"
           "varying mediump vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.4499999881, 1.098999977);\n"
           "    const mediump vec4 c1 = vec4(-0.09899999946, 4.500000000, 0.01799999923, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=9d8bc3ce:ba133db6:ac894ecf:201a875d\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getrec709_nice_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003ef\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.4499999881, 1.098999977);\n"
             "    const half4 c1 = half4(-0.09899999946, 4.500000000, 0.01799999923, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=596deb76:9164d0a8:2f3e089d:582cf7bf\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003e5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.098999977);\n"
             "    const float4 c1 = float4(-0.09899999946, 4.500000000, 0.01799999923, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=7e4f848a:2cb60a58:1e95b028:52cd143e\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003b8\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 1.000000000, 0.4499999881, 1.098999977);\n"
           "    const highp vec4 c1 = vec4(-0.09899999946, 4.500000000, 0.01799999923, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=5ca60ddb:9e6b7047:f8e5d9d8:b8b75fb0\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getrec709_half_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003ef\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.4499999881, 1.098999977);\n"
             "    const half4 c1 = half4(-0.09899999946, 4.500000000, 0.01799999923, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=596deb76:9164d0a8:2f3e089d:582cf7bf\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003e5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.098999977);\n"
             "    const float4 c1 = float4(-0.09899999946, 4.500000000, 0.01799999923, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=7e4f848a:2cb60a58:1e95b028:52cd143e\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003c1\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.4499999881, 1.098999977);\n"
           "    const mediump vec4 c1 = vec4(-0.09899999946, 4.500000000, 0.01799999923, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=3aa98d3f:c4638eae:63ae3b60:dd9955f6\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getrec709_half_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004f1\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
             "    const half4 c1 = half4(0.4499999881, 1.098999977, -0.09899999946, 4.500000000);\n"
             "    const half4 c2 = half4(0.01799999923, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000h);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
             "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*c1.www;\n"
             "    r1.xyz = r1.xyz - c2.xxx;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz*r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=6aab1881:29f77204:f1b685a8:61116330\n"
             "//SIG=00400000:00000001:00000001:00000001:0003:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004e9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
             "    const float4 c1 = float4(0.4499999881, 1.098999977, -0.09899999946, 4.500000000);\n"
             "    const float4 c2 = float4(0.01799999923, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
             "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*c1.www;\n"
             "    r1.xyz = r1.xyz - c2.xxx;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz*r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=dc7a742f:53a3e169:5f36b38d:56ae6c74\n"
             "//SIG=00000000:00000001:00000001:00000000:0003:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000533\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
           "    const mediump vec4 c1 = vec4(0.4499999881, 1.098999977, -0.09899999946, 4.500000000);\n"
           "    const mediump vec4 c2 = vec4(0.01799999923, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.y : c0.z, r0.y < 0.00000 ? c0.y : c0.z, r0.z < 0.00000 ? c0.y : c0.z);\n"
           "    r2.xyz = r1.xyz*r0.xyz;\n"
           "    r2.xyz = min(r2.xyz, c0.www);\n"
           "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
           "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
           "    r1.xyz = r1.xyz*r0.xyz;\n"
           "    r3.xyz = r1.xyz*c1.www;\n"
           "    r1.xyz = r1.xyz - c2.xxx;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.x : c0.z, r0.y < 0.00000 ? c0.x : c0.z, r0.z < 0.00000 ? c0.x : c0.z);\n"
           "    r0.xyz = r2.xyz*r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=2a49f7b8:cd3037fd:e1ea1b48:caf698d9\n"
           "//SIG=00000000:00000001:00000001:00000000:0003:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getrec709_nice_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004f1\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
             "    const half4 c1 = half4(0.4499999881, 1.098999977, -0.09899999946, 4.500000000);\n"
             "    const half4 c2 = half4(0.01799999923, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000h);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
             "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*c1.www;\n"
             "    r1.xyz = r1.xyz - c2.xxx;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz*r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=6aab1881:29f77204:f1b685a8:61116330\n"
             "//SIG=00400000:00000001:00000001:00000001:0003:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004e9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
             "    const float4 c1 = float4(0.4499999881, 1.098999977, -0.09899999946, 4.500000000);\n"
             "    const float4 c2 = float4(0.01799999923, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
             "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*c1.www;\n"
             "    r1.xyz = r1.xyz - c2.xxx;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz*r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=dc7a742f:53a3e169:5f36b38d:56ae6c74\n"
             "//SIG=00000000:00000001:00000001:00000000:0003:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000528\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
           "    const highp vec4 c1 = vec4(0.4499999881, 1.098999977, -0.09899999946, 4.500000000);\n"
           "    const highp vec4 c2 = vec4(0.01799999923, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.y : c0.z, r0.y < 0.00000 ? c0.y : c0.z, r0.z < 0.00000 ? c0.y : c0.z);\n"
           "    r2.xyz = r1.xyz*r0.xyz;\n"
           "    r2.xyz = min(r2.xyz, c0.www);\n"
           "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
           "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
           "    r1.xyz = r1.xyz*r0.xyz;\n"
           "    r3.xyz = r1.xyz*c1.www;\n"
           "    r1.xyz = r1.xyz - c2.xxx;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.x : c0.z, r0.y < 0.00000 ? c0.x : c0.z, r0.z < 0.00000 ? c0.x : c0.z);\n"
           "    r0.xyz = r2.xyz*r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=8236f966:82710f38:6ac9571a:80f55067\n"
           "//SIG=00000000:00000001:00000001:00000000:0003:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_rec709_fast_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002df\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r0.xyz = r1.xyz*r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=79fbc4d4:3000f291:f4e8ca38:00f5497f\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002d3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r0.xyz = r1.xyz*r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=64865123:71308dc6:6f589b45:024bcb37\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000026e\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp lowp   \n"
           "uniform lowp sampler2D hg_Texture0;\n"
           "varying mediump vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const lowp vec4 c0 = vec4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    lowp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r0.xyz = r1.xyz*r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=f55ad575:d6e4a08d:c419384d:6702d386\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_rec709_fixed_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000404\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.09899999946, 2.220000029);\n"
             "    const half4 c1 = half4(0.8108000159, 0.2220000029, 0.08120000362, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c88b9c32:b270bb6c:61f28474:3eae048f\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003fa\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.09899999946, 2.220000029);\n"
             "    const float4 c1 = float4(0.8108000159, 0.2220000029, 0.08120000362, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=ab1e5c77:80702e68:d7a02002:c3f3bd86\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003d4\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp lowp   \n"
           "uniform lowp sampler2D hg_Texture0;\n"
           "varying mediump vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.09899999946, 2.220000029);\n"
           "    const mediump vec4 c1 = vec4(0.8108000159, 0.2220000029, 0.08120000362, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = r1.xyz + c0.zzz;\n"
           "    r2.xyz = pow(r2.xyz, c0.www);\n"
           "    r2.xyz = r2.xyz*c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=c25197b6:d7275bee:d47c1785:36c049a6\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_rec709_nice_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000404\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.09899999946, 2.220000029);\n"
             "    const half4 c1 = half4(0.8108000159, 0.2220000029, 0.08120000362, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c88b9c32:b270bb6c:61f28474:3eae048f\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003fa\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.09899999946, 2.220000029);\n"
             "    const float4 c1 = float4(0.8108000159, 0.2220000029, 0.08120000362, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=ab1e5c77:80702e68:d7a02002:c3f3bd86\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003cd\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 1.000000000, 0.09899999946, 2.220000029);\n"
           "    const highp vec4 c1 = vec4(0.8108000159, 0.2220000029, 0.08120000362, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = r1.xyz + c0.zzz;\n"
           "    r2.xyz = pow(r2.xyz, c0.www);\n"
           "    r2.xyz = r2.xyz*c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=0028a9f8:5f19df0d:6c2b2f26:e062f7ac\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_rec709_half_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000404\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.09899999946, 2.220000029);\n"
             "    const half4 c1 = half4(0.8108000159, 0.2220000029, 0.08120000362, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c88b9c32:b270bb6c:61f28474:3eae048f\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003fa\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.09899999946, 2.220000029);\n"
             "    const float4 c1 = float4(0.8108000159, 0.2220000029, 0.08120000362, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=ab1e5c77:80702e68:d7a02002:c3f3bd86\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003d6\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.09899999946, 2.220000029);\n"
           "    const mediump vec4 c1 = vec4(0.8108000159, 0.2220000029, 0.08120000362, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = r1.xyz + c0.zzz;\n"
           "    r2.xyz = pow(r2.xyz, c0.www);\n"
           "    r2.xyz = r2.xyz*c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=b3973609:7b3f330a:954f2d12:2d8a6069\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_rec709_half_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000506\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
             "    const half4 c1 = half4(0.09899999946, 2.220000029, 0.8108000159, 0.2220000029);\n"
             "    const half4 c2 = half4(0.08120000362, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000h);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz + c1.xxx;\n"
             "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
             "    r2.xyz = r2.xyz*c1.zzz;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*c1.www;\n"
             "    r1.xyz = r1.xyz - c2.xxx;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz*r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=fa4f7f81:31a3eb5d:0e3af884:72b21e79\n"
             "//SIG=00400000:00000001:00000001:00000001:0003:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004fe\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
             "    const float4 c1 = float4(0.09899999946, 2.220000029, 0.8108000159, 0.2220000029);\n"
             "    const float4 c2 = float4(0.08120000362, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz + c1.xxx;\n"
             "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
             "    r2.xyz = r2.xyz*c1.zzz;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*c1.www;\n"
             "    r1.xyz = r1.xyz - c2.xxx;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz*r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=852efa7c:0e34cb02:774102e7:8ed7d417\n"
             "//SIG=00000000:00000001:00000001:00000000:0003:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000548\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
           "    const mediump vec4 c1 = vec4(0.09899999946, 2.220000029, 0.8108000159, 0.2220000029);\n"
           "    const mediump vec4 c2 = vec4(0.08120000362, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.y : c0.z, r0.y < 0.00000 ? c0.y : c0.z, r0.z < 0.00000 ? c0.y : c0.z);\n"
           "    r2.xyz = r1.xyz*r0.xyz;\n"
           "    r2.xyz = min(r2.xyz, c0.www);\n"
           "    r2.xyz = r2.xyz + c1.xxx;\n"
           "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
           "    r2.xyz = r2.xyz*c1.zzz;\n"
           "    r1.xyz = r1.xyz*r0.xyz;\n"
           "    r3.xyz = r1.xyz*c1.www;\n"
           "    r1.xyz = r1.xyz - c2.xxx;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.x : c0.z, r0.y < 0.00000 ? c0.x : c0.z, r0.z < 0.00000 ? c0.x : c0.z);\n"
           "    r0.xyz = r2.xyz*r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=4813d1cd:56899d9d:03f3d94f:9d4c7064\n"
           "//SIG=00000000:00000001:00000001:00000000:0003:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_rec709_nice_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000506\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
             "    const half4 c1 = half4(0.09899999946, 2.220000029, 0.8108000159, 0.2220000029);\n"
             "    const half4 c2 = half4(0.08120000362, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000h);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz + c1.xxx;\n"
             "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
             "    r2.xyz = r2.xyz*c1.zzz;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*c1.www;\n"
             "    r1.xyz = r1.xyz - c2.xxx;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz*r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=fa4f7f81:31a3eb5d:0e3af884:72b21e79\n"
             "//SIG=00400000:00000001:00000001:00000001:0003:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004fe\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
             "    const float4 c1 = float4(0.09899999946, 2.220000029, 0.8108000159, 0.2220000029);\n"
             "    const float4 c2 = float4(0.08120000362, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz + c1.xxx;\n"
             "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
             "    r2.xyz = r2.xyz*c1.zzz;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*c1.www;\n"
             "    r1.xyz = r1.xyz - c2.xxx;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz*r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=852efa7c:0e34cb02:774102e7:8ed7d417\n"
             "//SIG=00000000:00000001:00000001:00000000:0003:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000053d\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
           "    const highp vec4 c1 = vec4(0.09899999946, 2.220000029, 0.8108000159, 0.2220000029);\n"
           "    const highp vec4 c2 = vec4(0.08120000362, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.y : c0.z, r0.y < 0.00000 ? c0.y : c0.z, r0.z < 0.00000 ? c0.y : c0.z);\n"
           "    r2.xyz = r1.xyz*r0.xyz;\n"
           "    r2.xyz = min(r2.xyz, c0.www);\n"
           "    r2.xyz = r2.xyz + c1.xxx;\n"
           "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
           "    r2.xyz = r2.xyz*c1.zzz;\n"
           "    r1.xyz = r1.xyz*r0.xyz;\n"
           "    r3.xyz = r1.xyz*c1.www;\n"
           "    r1.xyz = r1.xyz - c2.xxx;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.x : c0.z, r0.y < 0.00000 ? c0.x : c0.z, r0.z < 0.00000 ? c0.x : c0.z);\n"
           "    r0.xyz = r2.xyz*r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=72b3ec65:d0158182:14cc14f1:da364b12\n"
           "//SIG=00000000:00000001:00000001:00000000:0003:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getrec601_fast_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002de\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r0.xyz = sqrt(r1.xyz);\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=71371cbe:526a992c:7aa37843:1294333d\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002d2\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r0.xyz = sqrt(r1.xyz);\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=d6a33776:ea9d46d1:7b701ce4:2b02f2f0\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000273\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp lowp   \n"
           "uniform lowp sampler2D hg_Texture0;\n"
           "varying mediump vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r0.xyz = sqrt(r1.xyz);\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=366ef5c6:9018d21a:09aca884:96379d9d\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getrec601_fixed_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003ee\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.4499999881, 1.111500025);\n"
             "    const half4 c1 = half4(-0.1115000024, 4.000000000, 0.02280000038, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=db453a6f:a444ef71:2866b30e:6aac7219\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003e4\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.111500025);\n"
             "    const float4 c1 = float4(-0.1115000024, 4.000000000, 0.02280000038, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=15a28e7a:79c07734:f177076f:5fe81d05\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003be\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp lowp   \n"
           "uniform lowp sampler2D hg_Texture0;\n"
           "varying mediump vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.4499999881, 1.111500025);\n"
           "    const mediump vec4 c1 = vec4(-0.1115000024, 4.000000000, 0.02280000038, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=a9a40871:0e0e0f0a:f4187270:12acff8d\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getrec601_nice_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003ee\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.4499999881, 1.111500025);\n"
             "    const half4 c1 = half4(-0.1115000024, 4.000000000, 0.02280000038, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=db453a6f:a444ef71:2866b30e:6aac7219\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003e4\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.111500025);\n"
             "    const float4 c1 = float4(-0.1115000024, 4.000000000, 0.02280000038, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=15a28e7a:79c07734:f177076f:5fe81d05\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003b7\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 1.000000000, 0.4499999881, 1.111500025);\n"
           "    const highp vec4 c1 = vec4(-0.1115000024, 4.000000000, 0.02280000038, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=4d9361bc:170de0f7:0b31a991:275e089a\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getrec601_half_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003ee\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.4499999881, 1.111500025);\n"
             "    const half4 c1 = half4(-0.1115000024, 4.000000000, 0.02280000038, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=db453a6f:a444ef71:2866b30e:6aac7219\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003e4\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.111500025);\n"
             "    const float4 c1 = float4(-0.1115000024, 4.000000000, 0.02280000038, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=15a28e7a:79c07734:f177076f:5fe81d05\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003c0\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.4499999881, 1.111500025);\n"
           "    const mediump vec4 c1 = vec4(-0.1115000024, 4.000000000, 0.02280000038, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=36373057:7825bc00:61a895a4:bb953c61\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getrec601_half_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004a1\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
             "    const half4 c1 = half4(0.4499999881, 1.111500025, -0.1115000024, 0.02280000038);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000h);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
             "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*-c0.yyy;\n"
             "    r1.xyz = r1.xyz - c1.www;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz*r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=1ee6f629:03660d51:273f8305:e1d73d59\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000497\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
             "    const float4 c1 = float4(0.4499999881, 1.111500025, -0.1115000024, 0.02280000038);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
             "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*-c0.yyy;\n"
             "    r1.xyz = r1.xyz - c1.www;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz*r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=ee1fc169:6bca4dbb:e14a0e2a:0c373c5c\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004dd\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
           "    const mediump vec4 c1 = vec4(0.4499999881, 1.111500025, -0.1115000024, 0.02280000038);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.y : c0.z, r0.y < 0.00000 ? c0.y : c0.z, r0.z < 0.00000 ? c0.y : c0.z);\n"
           "    r2.xyz = r1.xyz*r0.xyz;\n"
           "    r2.xyz = min(r2.xyz, c0.www);\n"
           "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
           "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
           "    r1.xyz = r1.xyz*r0.xyz;\n"
           "    r3.xyz = r1.xyz*-c0.yyy;\n"
           "    r1.xyz = r1.xyz - c1.www;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.x : c0.z, r0.y < 0.00000 ? c0.x : c0.z, r0.z < 0.00000 ? c0.x : c0.z);\n"
           "    r0.xyz = r2.xyz*r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=22760808:b0121326:154c3e20:4d6403b5\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getrec601_nice_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004a1\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
             "    const half4 c1 = half4(0.4499999881, 1.111500025, -0.1115000024, 0.02280000038);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000h);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
             "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*-c0.yyy;\n"
             "    r1.xyz = r1.xyz - c1.www;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz*r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=1ee6f629:03660d51:273f8305:e1d73d59\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000497\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
             "    const float4 c1 = float4(0.4499999881, 1.111500025, -0.1115000024, 0.02280000038);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
             "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*-c0.yyy;\n"
             "    r1.xyz = r1.xyz - c1.www;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz*r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=ee1fc169:6bca4dbb:e14a0e2a:0c373c5c\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004d4\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
           "    const highp vec4 c1 = vec4(0.4499999881, 1.111500025, -0.1115000024, 0.02280000038);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.y : c0.z, r0.y < 0.00000 ? c0.y : c0.z, r0.z < 0.00000 ? c0.y : c0.z);\n"
           "    r2.xyz = r1.xyz*r0.xyz;\n"
           "    r2.xyz = min(r2.xyz, c0.www);\n"
           "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
           "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
           "    r1.xyz = r1.xyz*r0.xyz;\n"
           "    r3.xyz = r1.xyz*-c0.yyy;\n"
           "    r1.xyz = r1.xyz - c1.www;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.x : c0.z, r0.y < 0.00000 ? c0.x : c0.z, r0.z < 0.00000 ? c0.x : c0.z);\n"
           "    r0.xyz = r2.xyz*r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=7d925446:286db01f:d2c0c230:f4f6e683\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_rec601_fast_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002df\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r0.xyz = r1.xyz*r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=79fbc4d4:3000f291:f4e8ca38:00f5497f\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002d3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r0.xyz = r1.xyz*r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=64865123:71308dc6:6f589b45:024bcb37\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000026e\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp lowp   \n"
           "uniform lowp sampler2D hg_Texture0;\n"
           "varying mediump vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const lowp vec4 c0 = vec4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    lowp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r0.xyz = r1.xyz*r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=f55ad575:d6e4a08d:c419384d:6702d386\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_rec601_fixed_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000403\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.1115000024, 2.220000029);\n"
             "    const half4 c1 = half4(0.7906000018, 0.2500000000, 0.09130000323, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a44fc0b7:ea328a33:cf4a9db3:4bd6b6dd\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003f9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.1115000024, 2.220000029);\n"
             "    const float4 c1 = float4(0.7906000018, 0.2500000000, 0.09130000323, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=d8185069:3af0b32a:4fe1d9b1:829cf334\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003d3\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp lowp   \n"
           "uniform lowp sampler2D hg_Texture0;\n"
           "varying mediump vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.1115000024, 2.220000029);\n"
           "    const mediump vec4 c1 = vec4(0.7906000018, 0.2500000000, 0.09130000323, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = r1.xyz + c0.zzz;\n"
           "    r2.xyz = pow(r2.xyz, c0.www);\n"
           "    r2.xyz = r2.xyz*c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=256671af:933a634c:c4e8abd9:c32315fa\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_rec601_nice_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000403\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.1115000024, 2.220000029);\n"
             "    const half4 c1 = half4(0.7906000018, 0.2500000000, 0.09130000323, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a44fc0b7:ea328a33:cf4a9db3:4bd6b6dd\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003f9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.1115000024, 2.220000029);\n"
             "    const float4 c1 = float4(0.7906000018, 0.2500000000, 0.09130000323, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=d8185069:3af0b32a:4fe1d9b1:829cf334\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003cc\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 1.000000000, 0.1115000024, 2.220000029);\n"
           "    const highp vec4 c1 = vec4(0.7906000018, 0.2500000000, 0.09130000323, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = r1.xyz + c0.zzz;\n"
           "    r2.xyz = pow(r2.xyz, c0.www);\n"
           "    r2.xyz = r2.xyz*c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=1c2425c4:5b28bf97:affb265b:71b50146\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_rec601_half_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000403\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.1115000024, 2.220000029);\n"
             "    const half4 c1 = half4(0.7906000018, 0.2500000000, 0.09130000323, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a44fc0b7:ea328a33:cf4a9db3:4bd6b6dd\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003f9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.1115000024, 2.220000029);\n"
             "    const float4 c1 = float4(0.7906000018, 0.2500000000, 0.09130000323, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=d8185069:3af0b32a:4fe1d9b1:829cf334\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003d5\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.1115000024, 2.220000029);\n"
           "    const mediump vec4 c1 = vec4(0.7906000018, 0.2500000000, 0.09130000323, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = r1.xyz + c0.zzz;\n"
           "    r2.xyz = pow(r2.xyz, c0.www);\n"
           "    r2.xyz = r2.xyz*c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=446de1ea:6f10c75f:8184103c:b4f68d5a\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_rec601_half_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004b5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
             "    const half4 c1 = half4(0.1115000024, 2.220000029, 0.7906000018, 0.09130000323);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000h);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz + c1.xxx;\n"
             "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
             "    r2.xyz = r2.xyz*c1.zzz;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*-c0.xxx;\n"
             "    r1.xyz = r1.xyz - c1.www;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz*r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=316ddc5b:0affc1f7:1f1d5328:c24e9963\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004ab\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
             "    const float4 c1 = float4(0.1115000024, 2.220000029, 0.7906000018, 0.09130000323);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz + c1.xxx;\n"
             "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
             "    r2.xyz = r2.xyz*c1.zzz;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*-c0.xxx;\n"
             "    r1.xyz = r1.xyz - c1.www;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz*r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=34e08d69:0b18bc5f:7e701567:ce89af42\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004f1\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
           "    const mediump vec4 c1 = vec4(0.1115000024, 2.220000029, 0.7906000018, 0.09130000323);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.y : c0.z, r0.y < 0.00000 ? c0.y : c0.z, r0.z < 0.00000 ? c0.y : c0.z);\n"
           "    r2.xyz = r1.xyz*r0.xyz;\n"
           "    r2.xyz = min(r2.xyz, c0.www);\n"
           "    r2.xyz = r2.xyz + c1.xxx;\n"
           "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
           "    r2.xyz = r2.xyz*c1.zzz;\n"
           "    r1.xyz = r1.xyz*r0.xyz;\n"
           "    r3.xyz = r1.xyz*-c0.xxx;\n"
           "    r1.xyz = r1.xyz - c1.www;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.x : c0.z, r0.y < 0.00000 ? c0.x : c0.z, r0.z < 0.00000 ? c0.x : c0.z);\n"
           "    r0.xyz = r2.xyz*r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=9fc1cd11:dd7aec9f:5ffae8d6:30ffe3ff\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_rec601_nice_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004b5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
             "    const half4 c1 = half4(0.1115000024, 2.220000029, 0.7906000018, 0.09130000323);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000h);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz + c1.xxx;\n"
             "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
             "    r2.xyz = r2.xyz*c1.zzz;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*-c0.xxx;\n"
             "    r1.xyz = r1.xyz - c1.www;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz*r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=316ddc5b:0affc1f7:1f1d5328:c24e9963\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004ab\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
             "    const float4 c1 = float4(0.1115000024, 2.220000029, 0.7906000018, 0.09130000323);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz + c1.xxx;\n"
             "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
             "    r2.xyz = r2.xyz*c1.zzz;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*-c0.xxx;\n"
             "    r1.xyz = r1.xyz - c1.www;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz*r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=34e08d69:0b18bc5f:7e701567:ce89af42\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004e8\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
           "    const highp vec4 c1 = vec4(0.1115000024, 2.220000029, 0.7906000018, 0.09130000323);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.y : c0.z, r0.y < 0.00000 ? c0.y : c0.z, r0.z < 0.00000 ? c0.y : c0.z);\n"
           "    r2.xyz = r1.xyz*r0.xyz;\n"
           "    r2.xyz = min(r2.xyz, c0.www);\n"
           "    r2.xyz = r2.xyz + c1.xxx;\n"
           "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
           "    r2.xyz = r2.xyz*c1.zzz;\n"
           "    r1.xyz = r1.xyz*r0.xyz;\n"
           "    r3.xyz = r1.xyz*-c0.xxx;\n"
           "    r1.xyz = r1.xyz - c1.www;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.x : c0.z, r0.y < 0.00000 ? c0.x : c0.z, r0.z < 0.00000 ? c0.x : c0.z);\n"
           "    r0.xyz = r2.xyz*r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=5fe13b13:05915c49:459d1234:50462cd6\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getsrgb_fast_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000328\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 1.200000048, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz*c0.zzz;\n"
             "    r2.xyz = mix(r2.xyz, r1.xyz, r1.xyz);\n"
             "    r0.xyz = sqrt(r2.xyz);\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=d2eda416:bd402552:ac770787:37d9c71e\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000031c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 1.200000048, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz*c0.zzz;\n"
             "    r2.xyz = mix(r2.xyz, r1.xyz, r1.xyz);\n"
             "    r0.xyz = sqrt(r2.xyz);\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=961474ec:b4189c15:289b1cb2:8eee082b\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002bd\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp lowp   \n"
           "uniform lowp sampler2D hg_Texture0;\n"
           "varying mediump vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 1.200000048, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = r1.xyz*c0.zzz;\n"
           "    r2.xyz = mix(r2.xyz, r1.xyz, r1.xyz);\n"
           "    r0.xyz = sqrt(r2.xyz);\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=5bb900e4:bbd57169:51eec8b3:8c45d843\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getsrgb_fixed_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003f0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.4165999889, 1.054999948);\n"
             "    const half4 c1 = half4(-0.05499999970, 12.92000008, 0.003130800091, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=67ea82e5:d8d4d03f:005f5db3:df7ef241\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003e6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.4165999889, 1.054999948);\n"
             "    const float4 c1 = float4(-0.05499999970, 12.92000008, 0.003130800091, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=fe5592fa:c679203d:75fdd5d7:4852933e\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003c0\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp lowp   \n"
           "uniform lowp sampler2D hg_Texture0;\n"
           "varying mediump vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.4165999889, 1.054999948);\n"
           "    const mediump vec4 c1 = vec4(-0.05499999970, 12.92000008, 0.003130800091, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=f4f49178:9ac2d53b:8513dad5:2ecb27f1\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getsrgb_nice_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003f0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.4165999889, 1.054999948);\n"
             "    const half4 c1 = half4(-0.05499999970, 12.92000008, 0.003130800091, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=67ea82e5:d8d4d03f:005f5db3:df7ef241\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003e6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.4165999889, 1.054999948);\n"
             "    const float4 c1 = float4(-0.05499999970, 12.92000008, 0.003130800091, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=fe5592fa:c679203d:75fdd5d7:4852933e\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003b9\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 1.000000000, 0.4165999889, 1.054999948);\n"
           "    const highp vec4 c1 = vec4(-0.05499999970, 12.92000008, 0.003130800091, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=270746a4:889949e0:e0f01346:90962527\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getsrgb_half_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003f0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.4165999889, 1.054999948);\n"
             "    const half4 c1 = half4(-0.05499999970, 12.92000008, 0.003130800091, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=67ea82e5:d8d4d03f:005f5db3:df7ef241\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003e6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.4165999889, 1.054999948);\n"
             "    const float4 c1 = float4(-0.05499999970, 12.92000008, 0.003130800091, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=fe5592fa:c679203d:75fdd5d7:4852933e\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003c2\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.4165999889, 1.054999948);\n"
           "    const mediump vec4 c1 = vec4(-0.05499999970, 12.92000008, 0.003130800091, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=42250c82:0fede816:5327b276:cd676e5b\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getsrgb_half_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000488\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.5299999714, -1.000000000, 1.679999948, 0.4165999889);\n"
             "    const half4 c1 = half4(1.054999948, -0.05499999970, 12.92000008, 0.003130800091);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000h);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.zzz);\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx + c1.yyy;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*c1.zzz;\n"
             "    r1.xyz = r1.xyz - c1.www;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = select(r2.xyz, -r2.xyz, r0.xyz < 0.00000h);\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=add5a51f:0abea880:ca4bf929:e553a4b0\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000047e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.5299999714, -1.000000000, 1.679999948, 0.4165999889);\n"
             "    const float4 c1 = float4(1.054999948, -0.05499999970, 12.92000008, 0.003130800091);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.zzz);\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx + c1.yyy;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*c1.zzz;\n"
             "    r1.xyz = r1.xyz - c1.www;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = select(r2.xyz, -r2.xyz, r0.xyz < 0.00000f);\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=56b3d24b:4d3b2603:66eaa036:ff760bcf\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004c8\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(-0.5299999714, -1.000000000, 1.679999948, 0.4165999889);\n"
           "    const mediump vec4 c1 = vec4(1.054999948, -0.05499999970, 12.92000008, 0.003130800091);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.y : -c0.y, r0.y < 0.00000 ? c0.y : -c0.y, r0.z < 0.00000 ? c0.y : -c0.y"
           ");\n"
           "    r2.xyz = r1.xyz*r0.xyz;\n"
           "    r2.xyz = min(r2.xyz, c0.zzz);\n"
           "    r2.xyz = pow(r2.xyz, c0.www);\n"
           "    r2.xyz = r2.xyz*c1.xxx + c1.yyy;\n"
           "    r1.xyz = r1.xyz*r0.xyz;\n"
           "    r3.xyz = r1.xyz*c1.zzz;\n"
           "    r1.xyz = r1.xyz - c1.www;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = vec3(r0.x < 0.00000 ? -r2.x : r2.x, r0.y < 0.00000 ? -r2.y : r2.y, r0.z < 0.00000 ? -r2.z : r2.z"
           ");\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=74457ba2:761def36:20a0914a:92023896\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getsrgb_nice_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000488\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.5299999714, -1.000000000, 1.679999948, 0.4165999889);\n"
             "    const half4 c1 = half4(1.054999948, -0.05499999970, 12.92000008, 0.003130800091);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000h);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.zzz);\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx + c1.yyy;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*c1.zzz;\n"
             "    r1.xyz = r1.xyz - c1.www;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = select(r2.xyz, -r2.xyz, r0.xyz < 0.00000h);\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=add5a51f:0abea880:ca4bf929:e553a4b0\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000047e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.5299999714, -1.000000000, 1.679999948, 0.4165999889);\n"
             "    const float4 c1 = float4(1.054999948, -0.05499999970, 12.92000008, 0.003130800091);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.zzz);\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx + c1.yyy;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*c1.zzz;\n"
             "    r1.xyz = r1.xyz - c1.www;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = select(r2.xyz, -r2.xyz, r0.xyz < 0.00000f);\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=56b3d24b:4d3b2603:66eaa036:ff760bcf\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004bf\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-0.5299999714, -1.000000000, 1.679999948, 0.4165999889);\n"
           "    const highp vec4 c1 = vec4(1.054999948, -0.05499999970, 12.92000008, 0.003130800091);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.y : -c0.y, r0.y < 0.00000 ? c0.y : -c0.y, r0.z < 0.00000 ? c0.y : -c0.y"
           ");\n"
           "    r2.xyz = r1.xyz*r0.xyz;\n"
           "    r2.xyz = min(r2.xyz, c0.zzz);\n"
           "    r2.xyz = pow(r2.xyz, c0.www);\n"
           "    r2.xyz = r2.xyz*c1.xxx + c1.yyy;\n"
           "    r1.xyz = r1.xyz*r0.xyz;\n"
           "    r3.xyz = r1.xyz*c1.zzz;\n"
           "    r1.xyz = r1.xyz - c1.www;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = vec3(r0.x < 0.00000 ? -r2.x : r2.x, r0.y < 0.00000 ? -r2.y : r2.y, r0.z < 0.00000 ? -r2.z : r2.z"
           ");\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=f708cbc1:705d1338:9da8cb64:4a35ae28\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_srgb_fast_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000032a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.8600000143, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz*c0.zzz;\n"
             "    r2.xyz = mix(r2.xyz, r1.xyz, r1.xyz);\n"
             "    r0.xyz = r2.xyz*r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=fef801fc:065b21af:97d6bea1:750cfbd7\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000031e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.8600000143, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz*c0.zzz;\n"
             "    r2.xyz = mix(r2.xyz, r1.xyz, r1.xyz);\n"
             "    r0.xyz = r2.xyz*r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=4d5faa0d:df2a1278:84bcfdbe:e32e0991\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002b9\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp lowp   \n"
           "uniform lowp sampler2D hg_Texture0;\n"
           "varying mediump vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const lowp vec4 c0 = vec4(0.000000000, 1.000000000, 0.8600000143, 0.000000000);\n"
           "    lowp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = r1.xyz*c0.zzz;\n"
           "    r2.xyz = mix(r2.xyz, r1.xyz, r1.xyz);\n"
           "    r0.xyz = r2.xyz*r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=de27b81a:55a16102:0abe5b0f:dcabf045\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_srgb_fixed_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000405\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.05499999970, 2.400000095);\n"
             "    const half4 c1 = half4(0.8790000081, 0.07739999890, 0.04044999927, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=309170bb:e0ac4821:a673360c:bad45e77\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003fb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.05499999970, 2.400000095);\n"
             "    const float4 c1 = float4(0.8790000081, 0.07739999890, 0.04044999927, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=9e74fc88:710456d9:84af040a:1a03bf93\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003d5\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp lowp   \n"
           "uniform lowp sampler2D hg_Texture0;\n"
           "varying mediump vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.05499999970, 2.400000095);\n"
           "    const mediump vec4 c1 = vec4(0.8790000081, 0.07739999890, 0.04044999927, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = r1.xyz + c0.zzz;\n"
           "    r2.xyz = pow(r2.xyz, c0.www);\n"
           "    r2.xyz = r2.xyz*c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=f9be4ebe:3f53fafc:c8fc0842:99e12788\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_srgb_nice_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000405\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.05499999970, 2.400000095);\n"
             "    const half4 c1 = half4(0.8790000081, 0.07739999890, 0.04044999927, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=309170bb:e0ac4821:a673360c:bad45e77\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003fb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.05499999970, 2.400000095);\n"
             "    const float4 c1 = float4(0.8790000081, 0.07739999890, 0.04044999927, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=9e74fc88:710456d9:84af040a:1a03bf93\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003ce\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 1.000000000, 0.05499999970, 2.400000095);\n"
           "    const highp vec4 c1 = vec4(0.8790000081, 0.07739999890, 0.04044999927, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = r1.xyz + c0.zzz;\n"
           "    r2.xyz = pow(r2.xyz, c0.www);\n"
           "    r2.xyz = r2.xyz*c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=0945d6b6:a9c32d34:ec75fcd7:04a6b9d5\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_srgb_half_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000405\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.05499999970, 2.400000095);\n"
             "    const half4 c1 = half4(0.8790000081, 0.07739999890, 0.04044999927, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=309170bb:e0ac4821:a673360c:bad45e77\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003fb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.05499999970, 2.400000095);\n"
             "    const float4 c1 = float4(0.8790000081, 0.07739999890, 0.04044999927, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r2.xyz = r1.xyz + c0.zzz;\n"
             "    r2.xyz = pow(r2.xyz, c0.www);\n"
             "    r2.xyz = r2.xyz*c1.xxx;\n"
             "    r3.xyz = r1.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz - c1.zzz;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = r2.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=9e74fc88:710456d9:84af040a:1a03bf93\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003d7\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.05499999970, 2.400000095);\n"
           "    const mediump vec4 c1 = vec4(0.8790000081, 0.07739999890, 0.04044999927, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r2.xyz = r1.xyz + c0.zzz;\n"
           "    r2.xyz = pow(r2.xyz, c0.www);\n"
           "    r2.xyz = r2.xyz*c1.xxx;\n"
           "    r3.xyz = r1.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz - c1.zzz;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = r2.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=bd16cf6b:adfe6607:a9981257:5e3f8b0c\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_srgb_half_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000049d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.7500000000, -1.000000000, 1.250000000, 0.05499999970);\n"
             "    const half4 c1 = half4(2.400000095, 0.8790000081, 0.07739999890, 0.04044999927);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000h);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz + c0.www;\n"
             "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
             "    r2.xyz = r2.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*c1.zzz;\n"
             "    r1.xyz = r1.xyz - c1.www;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = select(r2.xyz, -r2.xyz, r0.xyz < 0.00000h);\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=94e4126c:912bd7d3:18975cf6:90abe4dd\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000493\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.7500000000, -1.000000000, 1.250000000, 0.05499999970);\n"
             "    const float4 c1 = float4(2.400000095, 0.8790000081, 0.07739999890, 0.04044999927);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz + c0.www;\n"
             "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
             "    r2.xyz = r2.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*c1.zzz;\n"
             "    r1.xyz = r1.xyz - c1.www;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = select(r2.xyz, -r2.xyz, r0.xyz < 0.00000f);\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=87cfd56b:8f2725b7:a29eb854:c8e353be\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004dd\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(-0.7500000000, -1.000000000, 1.250000000, 0.05499999970);\n"
           "    const mediump vec4 c1 = vec4(2.400000095, 0.8790000081, 0.07739999890, 0.04044999927);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.y : -c0.y, r0.y < 0.00000 ? c0.y : -c0.y, r0.z < 0.00000 ? c0.y : -c0.y"
           ");\n"
           "    r2.xyz = r1.xyz*r0.xyz;\n"
           "    r2.xyz = min(r2.xyz, c0.zzz);\n"
           "    r2.xyz = r2.xyz + c0.www;\n"
           "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
           "    r2.xyz = r2.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz*r0.xyz;\n"
           "    r3.xyz = r1.xyz*c1.zzz;\n"
           "    r1.xyz = r1.xyz - c1.www;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = vec3(r0.x < 0.00000 ? -r2.x : r2.x, r0.y < 0.00000 ? -r2.y : r2.y, r0.z < 0.00000 ? -r2.z : r2.z"
           ");\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=a249e16d:662fadca:69da4b2e:b5c48b75\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_srgb_nice_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000049d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.7500000000, -1.000000000, 1.250000000, 0.05499999970);\n"
             "    const half4 c1 = half4(2.400000095, 0.8790000081, 0.07739999890, 0.04044999927);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000h);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz + c0.www;\n"
             "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
             "    r2.xyz = r2.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*c1.zzz;\n"
             "    r1.xyz = r1.xyz - c1.www;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000h);\n"
             "    r0.xyz = select(r2.xyz, -r2.xyz, r0.xyz < 0.00000h);\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=94e4126c:912bd7d3:18975cf6:90abe4dd\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000493\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.7500000000, -1.000000000, 1.250000000, 0.05499999970);\n"
             "    const float4 c1 = float4(2.400000095, 0.8790000081, 0.07739999890, 0.04044999927);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
             "    r2.xyz = r1.xyz*r0.xyz;\n"
             "    r2.xyz = fmin(r2.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz + c0.www;\n"
             "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
             "    r2.xyz = r2.xyz*c1.yyy;\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r3.xyz = r1.xyz*c1.zzz;\n"
             "    r1.xyz = r1.xyz - c1.www;\n"
             "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
             "    r0.xyz = select(r2.xyz, -r2.xyz, r0.xyz < 0.00000f);\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=87cfd56b:8f2725b7:a29eb854:c8e353be\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004d4\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-0.7500000000, -1.000000000, 1.250000000, 0.05499999970);\n"
           "    const highp vec4 c1 = vec4(2.400000095, 0.8790000081, 0.07739999890, 0.04044999927);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.y : -c0.y, r0.y < 0.00000 ? c0.y : -c0.y, r0.z < 0.00000 ? c0.y : -c0.y"
           ");\n"
           "    r2.xyz = r1.xyz*r0.xyz;\n"
           "    r2.xyz = min(r2.xyz, c0.zzz);\n"
           "    r2.xyz = r2.xyz + c0.www;\n"
           "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
           "    r2.xyz = r2.xyz*c1.yyy;\n"
           "    r1.xyz = r1.xyz*r0.xyz;\n"
           "    r3.xyz = r1.xyz*c1.zzz;\n"
           "    r1.xyz = r1.xyz - c1.www;\n"
           "    r2.xyz = vec3(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z);\n"
           "    r0.xyz = vec3(r0.x < 0.00000 ? -r2.x : r2.x, r0.y < 0.00000 ? -r2.y : r2.y, r0.z < 0.00000 ? -r2.z : r2.z"
           ");\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=c0dc8aa3:f61b8cf0:f53695f9:9eb99125\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0000:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getquicktime_fast_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002de\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r0.xyz = sqrt(r1.xyz);\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=71371cbe:526a992c:7aa37843:1294333d\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002d2\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r0.xyz = sqrt(r1.xyz);\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=d6a33776:ea9d46d1:7b701ce4:2b02f2f0\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000273\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp lowp   \n"
           "uniform lowp sampler2D hg_Texture0;\n"
           "varying mediump vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r0.xyz = sqrt(r1.xyz);\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=366ef5c6:9018d21a:09aca884:96379d9d\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getquicktime_fixed_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002fb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.5112500191, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r0.xyz = r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=6c87b179:931a7f82:2e7d93b9:6b7e838f\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002ef\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.5112500191, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r0.xyz = r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=9a27762e:e48ffb09:7625bd98:1087a6a4\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000290\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp lowp   \n"
           "uniform lowp sampler2D hg_Texture0;\n"
           "varying mediump vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.5112500191, 0.000000000);\n"
           "    mediump vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r0.xyz = r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=256d38f7:d8a55347:9de06529:49ce2800\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getquicktime_nice_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002fb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.5112500191, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r0.xyz = r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=6c87b179:931a7f82:2e7d93b9:6b7e838f\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002ef\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.5112500191, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r0.xyz = r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=9a27762e:e48ffb09:7625bd98:1087a6a4\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000028b\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 1.000000000, 0.5112500191, 0.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r0.xyz = r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=e5f2ac3f:98b9a102:02813f98:70ef968a\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getquicktime_half_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002fb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.5112500191, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r0.xyz = r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=6c87b179:931a7f82:2e7d93b9:6b7e838f\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002ef\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.5112500191, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r0.xyz = r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=9a27762e:e48ffb09:7625bd98:1087a6a4\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000292\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.5112500191, 0.000000000);\n"
           "    mediump vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r0.xyz = r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=4e475cbc:5a55909e:9bd0936c:5f882794\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getquicktime_half_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000377\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.2500000000, -1.000000000, 1.330000043, 0.5112500191);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000h);\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r1.xyz = fmin(r1.xyz, c0.zzz);\n"
             "    r1.xyz = pow(r1.xyz, c0.www);\n"
             "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000h);\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=493a7313:1f860720:3cbff05e:044e50ab\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000036b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.2500000000, -1.000000000, 1.330000043, 0.5112500191);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r1.xyz = fmin(r1.xyz, c0.zzz);\n"
             "    r1.xyz = pow(r1.xyz, c0.www);\n"
             "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=65cb7d50:6b4deded:b009e9aa:332eb294\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000037c\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(-0.2500000000, -1.000000000, 1.330000043, 0.5112500191);\n"
           "    mediump vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.y : -c0.y, r0.y < 0.00000 ? c0.y : -c0.y, r0.z < 0.00000 ? c0.y : -c0.y"
           ");\n"
           "    r1.xyz = r1.xyz*r0.xyz;\n"
           "    r1.xyz = min(r1.xyz, c0.zzz);\n"
           "    r1.xyz = pow(r1.xyz, c0.www);\n"
           "    r0.xyz = vec3(r0.x < 0.00000 ? -r1.x : r1.x, r0.y < 0.00000 ? -r1.y : r1.y, r0.z < 0.00000 ? -r1.z : r1.z"
           ");\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=e4e6fb8a:78a157d4:087b3095:98f8a653\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getquicktime_nice_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000377\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.2500000000, -1.000000000, 1.330000043, 0.5112500191);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000h);\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r1.xyz = fmin(r1.xyz, c0.zzz);\n"
             "    r1.xyz = pow(r1.xyz, c0.www);\n"
             "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000h);\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=493a7313:1f860720:3cbff05e:044e50ab\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000036b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.2500000000, -1.000000000, 1.330000043, 0.5112500191);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r1.xyz = fmin(r1.xyz, c0.zzz);\n"
             "    r1.xyz = pow(r1.xyz, c0.www);\n"
             "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=65cb7d50:6b4deded:b009e9aa:332eb294\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000375\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-0.2500000000, -1.000000000, 1.330000043, 0.5112500191);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.y : -c0.y, r0.y < 0.00000 ? c0.y : -c0.y, r0.z < 0.00000 ? c0.y : -c0.y"
           ");\n"
           "    r1.xyz = r1.xyz*r0.xyz;\n"
           "    r1.xyz = min(r1.xyz, c0.zzz);\n"
           "    r1.xyz = pow(r1.xyz, c0.www);\n"
           "    r0.xyz = vec3(r0.x < 0.00000 ? -r1.x : r1.x, r0.y < 0.00000 ? -r1.y : r1.y, r0.z < 0.00000 ? -r1.z : r1.z"
           ");\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=4caa96c5:80eab27c:24257f6b:03530b0d\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_quicktime_fast_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002df\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r0.xyz = r1.xyz*r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=79fbc4d4:3000f291:f4e8ca38:00f5497f\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002d3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r0.xyz = r1.xyz*r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=64865123:71308dc6:6f589b45:024bcb37\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000026e\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp lowp   \n"
           "uniform lowp sampler2D hg_Texture0;\n"
           "varying mediump vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const lowp vec4 c0 = vec4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    lowp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r0.xyz = r1.xyz*r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=f55ad575:d6e4a08d:c419384d:6702d386\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_quicktime_fixed_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002fa\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 1.955999970, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r0.xyz = r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b94e5a6d:a57d1749:ab36e45c:e1699a4f\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002ee\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 1.955999970, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r0.xyz = r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=e29c192e:d60afaaa:96bfb94b:c6295363\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000028f\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp lowp   \n"
           "uniform lowp sampler2D hg_Texture0;\n"
           "varying mediump vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 1.955999970, 0.000000000);\n"
           "    mediump vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r0.xyz = r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=731b047d:567e4b62:b8616393:f8c0d1ab\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_quicktime_nice_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002fa\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 1.955999970, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r0.xyz = r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b94e5a6d:a57d1749:ab36e45c:e1699a4f\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002ee\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 1.955999970, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r0.xyz = r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=e29c192e:d60afaaa:96bfb94b:c6295363\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000028a\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 1.000000000, 1.955999970, 0.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r0.xyz = r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=625c3c87:60b34443:dc7f6036:8e0bdc42\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_quicktime_half_sat_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002fa\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 1.955999970, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r0.xyz = r1.xyz;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b94e5a6d:a57d1749:ab36e45c:e1699a4f\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002ee\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 1.955999970, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r0.xyz = r1.xyz;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=e29c192e:d60afaaa:96bfb94b:c6295363\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000291\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 1.955999970, 0.000000000);\n"
           "    mediump vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r0.xyz = r1.xyz;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=90d4bf0f:6ecf2069:2e0a9113:b447053f\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_quicktime_half_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000376\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.2500000000, -1.000000000, 1.149999976, 1.955999970);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000h);\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r1.xyz = fmin(r1.xyz, c0.zzz);\n"
             "    r1.xyz = pow(r1.xyz, c0.www);\n"
             "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000h);\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=19bd766f:80d76f2e:a4240bb7:64de5c0d\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000036a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.2500000000, -1.000000000, 1.149999976, 1.955999970);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r1.xyz = fmin(r1.xyz, c0.zzz);\n"
             "    r1.xyz = pow(r1.xyz, c0.www);\n"
             "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=b48d2ef7:b3a26fa4:aeddfc2d:626e715c\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000037b\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(-0.2500000000, -1.000000000, 1.149999976, 1.955999970);\n"
           "    mediump vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.y : -c0.y, r0.y < 0.00000 ? c0.y : -c0.y, r0.z < 0.00000 ? c0.y : -c0.y"
           ");\n"
           "    r1.xyz = r1.xyz*r0.xyz;\n"
           "    r1.xyz = min(r1.xyz, c0.zzz);\n"
           "    r1.xyz = pow(r1.xyz, c0.www);\n"
           "    r0.xyz = vec3(r0.x < 0.00000 ? -r1.x : r1.x, r0.y < 0.00000 ? -r1.y : r1.y, r0.z < 0.00000 ? -r1.z : r1.z"
           ");\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=0e382641:74972844:02f4fa3b:b4115f62\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *Getinv_quicktime_nice_unpremultProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000376\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.2500000000, -1.000000000, 1.149999976, 1.955999970);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000h);\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r1.xyz = fmin(r1.xyz, c0.zzz);\n"
             "    r1.xyz = pow(r1.xyz, c0.www);\n"
             "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000h);\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=19bd766f:80d76f2e:a4240bb7:64de5c0d\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000036a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.2500000000, -1.000000000, 1.149999976, 1.955999970);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
             "    r1.xyz = r1.xyz*r0.xyz;\n"
             "    r1.xyz = fmin(r1.xyz, c0.zzz);\n"
             "    r1.xyz = pow(r1.xyz, c0.www);\n"
             "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=b48d2ef7:b3a26fa4:aeddfc2d:626e715c\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000374\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-0.2500000000, -1.000000000, 1.149999976, 1.955999970);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = vec3(r0.x < 0.00000 ? c0.y : -c0.y, r0.y < 0.00000 ? c0.y : -c0.y, r0.z < 0.00000 ? c0.y : -c0.y"
           ");\n"
           "    r1.xyz = r1.xyz*r0.xyz;\n"
           "    r1.xyz = min(r1.xyz, c0.zzz);\n"
           "    r1.xyz = pow(r1.xyz, c0.www);\n"
           "    r0.xyz = vec3(r0.x < 0.00000 ? -r1.x : r1.x, r0.y < 0.00000 ? -r1.y : r1.y, r0.z < 0.00000 ? -r1.z : r1.z"
           ");\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=d4976673:e7ba6629:3824413f:09fec661\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void Inittype0_fast_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type0_fast_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000222\n[[ visible ]] FragmentOut type0_fast_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.yyy);\n"
    "    r1.xyz = fmin(r1.xyz, c0.www);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type0_fast_sat");
}

void sub_1B786A5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786A620(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786A618);
}

void Inittype0_fixed_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type0_fixed_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000223\n[[ visible ]] FragmentOut type0_fixed_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.yyy);\n"
    "    r1.xyz = fmin(r1.xyz, c0.www);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type0_fixed_sat");
}

void sub_1B786A82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786A85C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786A854);
}

void Inittype0_nice_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type0_nice_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000222\n[[ visible ]] FragmentOut type0_nice_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.yyy);\n"
    "    r1.xyz = fmin(r1.xyz, c0.www);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type0_nice_sat");
}

void sub_1B786AA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786AA98(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786AA90);
}

void Inittype0_half_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type0_half_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000222\n[[ visible ]] FragmentOut type0_half_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.yyy);\n"
    "    r1.xyz = fmin(r1.xyz, c0.www);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type0_half_sat");
}

void sub_1B786ACA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786ACD4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786ACCCLL);
}

void Inittype0_halfProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type0_half_hgc_visible", "//Metal1.0     \n//LEN=0000000274\n[[ visible ]] FragmentOut type0_half_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = select(c0.www, -c0.www, r0.xyz < 0.00000f);\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type0_half");
}

void sub_1B786AEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786AF10(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786AF08);
}

void Inittype0_niceProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type0_nice_hgc_visible", "//Metal1.0     \n//LEN=0000000274\n[[ visible ]] FragmentOut type0_nice_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = select(c0.www, -c0.www, r0.xyz < 0.00000f);\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type0_nice");
}

void sub_1B786B11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786B14C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786B144);
}

void Inittype0_floatProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type0_float_hgc_visible", "//Metal1.0     \n//LEN=0000000275\n[[ visible ]] FragmentOut type0_float_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = select(c0.www, -c0.www, r0.xyz < 0.00000f);\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type0_float");
}

void sub_1B786B358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786B388(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786B380);
}

void Inittype1_fast_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type1_fast_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000304\n[[ visible ]] FragmentOut type1_fast_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.x = c0.z;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type1_fast_sat");
}

void sub_1B786B594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786B5C4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786B5BCLL);
}

void Inittype1_fixed_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type1_fixed_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000305\n[[ visible ]] FragmentOut type1_fixed_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.x = c0.z;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type1_fixed_sat");
}

void sub_1B786B7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786B800(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786B7F8);
}

void Inittype1_nice_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type1_nice_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000304\n[[ visible ]] FragmentOut type1_nice_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.x = c0.z;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type1_nice_sat");
}

void sub_1B786BA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786BA3C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786BA34);
}

void Inittype1_half_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type1_half_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000304\n[[ visible ]] FragmentOut type1_half_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.x = c0.z;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type1_half_sat");
}

void sub_1B786BC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786BC78(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786BC70);
}

void Inittype1_halfProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type1_half_hgc_visible", "//Metal1.0     \n//LEN=00000002e7\n[[ visible ]] FragmentOut type1_half_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xw = c0.zx;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r3.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type1_half");
}

void sub_1B786BE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786BEB4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786BEACLL);
}

void Inittype1_niceProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type1_nice_hgc_visible", "//Metal1.0     \n//LEN=00000002e7\n[[ visible ]] FragmentOut type1_nice_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xw = c0.zx;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r3.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type1_nice");
}

void sub_1B786C0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786C0F0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786C0E8);
}

void Inittype1_floatProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type1_float_hgc_visible", "//Metal1.0     \n//LEN=00000002e8\n[[ visible ]] FragmentOut type1_float_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xw = c0.zx;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r3.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type1_float");
}

void sub_1B786C2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786C32C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786C324);
}

void Inittype2_fast_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type2_fast_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000347\n[[ visible ]] FragmentOut type2_fast_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.x = c0.z;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz + hg_Params[2].xxx, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type2_fast_sat");
}

void sub_1B786C538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786C568(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786C560);
}

void Inittype2_fixed_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type2_fixed_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000348\n[[ visible ]] FragmentOut type2_fixed_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.x = c0.z;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz + hg_Params[2].xxx, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type2_fixed_sat");
}

void sub_1B786C774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786C7A4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786C79CLL);
}

void Inittype2_nice_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type2_nice_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000347\n[[ visible ]] FragmentOut type2_nice_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.x = c0.z;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz + hg_Params[2].xxx, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type2_nice_sat");
}

void sub_1B786C9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786C9E0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786C9D8);
}

void Inittype2_half_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type2_half_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000347\n[[ visible ]] FragmentOut type2_half_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.x = c0.z;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz + hg_Params[2].xxx, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type2_half_sat");
}

void sub_1B786CBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786CC1C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786CC14);
}

void Inittype2_halfProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type2_half_hgc_visible", "//Metal1.0     \n//LEN=000000030f\n[[ visible ]] FragmentOut type2_half_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xw = c0.zx;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r3.xyz;\n"
    "    r0.xyz = r0.xyz + hg_Params[2].xxx;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type2_half");
}

void sub_1B786CE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786CE58(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786CE50);
}

void Inittype2_niceProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type2_nice_hgc_visible", "//Metal1.0     \n//LEN=000000030f\n[[ visible ]] FragmentOut type2_nice_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xw = c0.zx;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r3.xyz;\n"
    "    r0.xyz = r0.xyz + hg_Params[2].xxx;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type2_nice");
}

void sub_1B786D064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786D094(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786D08CLL);
}

void Inittype2_floatProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type2_float_hgc_visible", "//Metal1.0     \n//LEN=0000000310\n[[ visible ]] FragmentOut type2_float_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xw = c0.zx;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r3.xyz;\n"
    "    r0.xyz = r0.xyz + hg_Params[2].xxx;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type2_float");
}

void sub_1B786D2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786D2D0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786D2C8);
}

void Inittype3_fast_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type3_fast_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000319\n[[ visible ]] FragmentOut type3_fast_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
    "    r2.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[0].xxx);\n"
    "    r2.xyz = r2.xyz*hg_Params[0].www;\n"
    "    r3.xyz = r1.xyz*hg_Params[1].xxx;\n"
    "    r1.xyz = r1.xyz - hg_Params[1].yyy;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type3_fast_sat");
}

void sub_1B786D4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786D50C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786D504);
}

void Inittype3_fixed_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type3_fixed_sat_hgc_visible", "//Metal1.0     \n//LEN=000000031a\n[[ visible ]] FragmentOut type3_fixed_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
    "    r2.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[0].xxx);\n"
    "    r2.xyz = r2.xyz*hg_Params[0].www;\n"
    "    r3.xyz = r1.xyz*hg_Params[1].xxx;\n"
    "    r1.xyz = r1.xyz - hg_Params[1].yyy;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type3_fixed_sat");
}

void sub_1B786D718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786D748(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786D740);
}

void Inittype3_nice_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type3_nice_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000319\n[[ visible ]] FragmentOut type3_nice_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
    "    r2.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[0].xxx);\n"
    "    r2.xyz = r2.xyz*hg_Params[0].www;\n"
    "    r3.xyz = r1.xyz*hg_Params[1].xxx;\n"
    "    r1.xyz = r1.xyz - hg_Params[1].yyy;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type3_nice_sat");
}

void sub_1B786D954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786D984(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786D97CLL);
}

void Inittype3_half_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type3_half_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000319\n[[ visible ]] FragmentOut type3_half_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
    "    r2.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[0].xxx);\n"
    "    r2.xyz = r2.xyz*hg_Params[0].www;\n"
    "    r3.xyz = r1.xyz*hg_Params[1].xxx;\n"
    "    r1.xyz = r1.xyz - hg_Params[1].yyy;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type3_half_sat");
}

void sub_1B786DB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786DBC0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786DBB8);
}

void Inittype3_halfProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type3_half_hgc_visible", "//Metal1.0     \n//LEN=000000030b\n[[ visible ]] FragmentOut type3_half_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.w = c0.x;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r1.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r1.xyz = r1.xyz*hg_Params[0].www;\n"
    "    r3.xyz = r2.xyz*hg_Params[1].xxx;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r1.xyz = select(r1.xyz, r3.xyz, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type3_half");
}

void sub_1B786DDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786DDFC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786DDF4);
}

void Inittype3_niceProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type3_nice_hgc_visible", "//Metal1.0     \n//LEN=000000030b\n[[ visible ]] FragmentOut type3_nice_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.w = c0.x;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r1.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r1.xyz = r1.xyz*hg_Params[0].www;\n"
    "    r3.xyz = r2.xyz*hg_Params[1].xxx;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r1.xyz = select(r1.xyz, r3.xyz, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type3_nice");
}

void sub_1B786E008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786E038(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786E030);
}

void Inittype3_floatProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type3_float_hgc_visible", "//Metal1.0     \n//LEN=000000030c\n[[ visible ]] FragmentOut type3_float_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.w = c0.x;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r1.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r1.xyz = r1.xyz*hg_Params[0].www;\n"
    "    r3.xyz = r2.xyz*hg_Params[1].xxx;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r1.xyz = select(r1.xyz, r3.xyz, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type3_float");
}

void sub_1B786E244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786E274(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786E26CLL);
}

void Inittype4_fast_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type4_fast_sat_hgc_visible", "//Metal1.0     \n//LEN=000000036f\n[[ visible ]] FragmentOut type4_fast_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r1.xyz = fmin(r1.xyz, c0.www);\n"
    "    r2.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[0].xxx);\n"
    "    r2.xyz = r2.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
    "    r3.xyz = r1.xyz*hg_Params[1].xxx;\n"
    "    r1.xyz = r1.xyz - hg_Params[1].yyy;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz + hg_Params[2].xxx, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type4_fast_sat");
}

void sub_1B786E480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786E4B0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786E4A8);
}

void Inittype4_fixed_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type4_fixed_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000370\n[[ visible ]] FragmentOut type4_fixed_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r1.xyz = fmin(r1.xyz, c0.www);\n"
    "    r2.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[0].xxx);\n"
    "    r2.xyz = r2.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
    "    r3.xyz = r1.xyz*hg_Params[1].xxx;\n"
    "    r1.xyz = r1.xyz - hg_Params[1].yyy;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz + hg_Params[2].xxx, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type4_fixed_sat");
}

void sub_1B786E6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786E6EC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786E6E4);
}

void Inittype4_nice_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type4_nice_sat_hgc_visible", "//Metal1.0     \n//LEN=000000036f\n[[ visible ]] FragmentOut type4_nice_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r1.xyz = fmin(r1.xyz, c0.www);\n"
    "    r2.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[0].xxx);\n"
    "    r2.xyz = r2.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
    "    r3.xyz = r1.xyz*hg_Params[1].xxx;\n"
    "    r1.xyz = r1.xyz - hg_Params[1].yyy;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz + hg_Params[2].xxx, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type4_nice_sat");
}

void sub_1B786E8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786E928(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786E920);
}

void Inittype4_half_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type4_half_sat_hgc_visible", "//Metal1.0     \n//LEN=000000036f\n[[ visible ]] FragmentOut type4_half_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r1.xyz = fmin(r1.xyz, c0.www);\n"
    "    r2.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[0].xxx);\n"
    "    r2.xyz = r2.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
    "    r3.xyz = r1.xyz*hg_Params[1].xxx;\n"
    "    r1.xyz = r1.xyz - hg_Params[1].yyy;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz + hg_Params[2].xxx, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type4_half_sat");
}

void sub_1B786EB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786EB64(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786EB5CLL);
}

void Inittype4_halfProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type4_half_hgc_visible", "//Metal1.0     \n//LEN=0000000346\n[[ visible ]] FragmentOut type4_half_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 2.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.w = c0.w;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r1.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r1.xyz = r1.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
    "    r3.xyz = r2.xyz*hg_Params[1].xxx;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r1.xyz = select(r1.xyz, r3.xyz, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz + hg_Params[2].xxx;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type4_half");
}

void sub_1B786ED70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786EDA0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786ED98);
}

void Inittype4_niceProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type4_nice_hgc_visible", "//Metal1.0     \n//LEN=0000000346\n[[ visible ]] FragmentOut type4_nice_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 2.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.w = c0.w;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r1.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r1.xyz = r1.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
    "    r3.xyz = r2.xyz*hg_Params[1].xxx;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r1.xyz = select(r1.xyz, r3.xyz, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz + hg_Params[2].xxx;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type4_nice");
}

void sub_1B786EFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786EFDC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786EFD4);
}

void Inittype4_floatProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type4_float_hgc_visible", "//Metal1.0     \n//LEN=0000000347\n[[ visible ]] FragmentOut type4_float_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 2.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.w = c0.w;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r1.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r1.xyz = r1.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
    "    r3.xyz = r2.xyz*hg_Params[1].xxx;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r1.xyz = select(r1.xyz, r3.xyz, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz + hg_Params[2].xxx;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type4_float");
}

void sub_1B786F1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786F218(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786F210);
}

void Initrec709_fast_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec709_fast_sat_hgc_visible", "//Metal1.0     \n//LEN=00000001fd\n[[ visible ]] FragmentOut rec709_fast_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r0.xyz = sqrt(r1.xyz);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec709_fast_sat");
}

void sub_1B786F424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786F454(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786F44CLL);
}

void Initrec709_fixed_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec709_fixed_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000311\n[[ visible ]] FragmentOut rec709_fixed_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.098999977);\n"
    "    const float4 c1 = float4(-0.09899999946, 4.500000000, 0.01799999923, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec709_fixed_sat");
}

void sub_1B786F660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786F690(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786F688);
}

void Initrec709_nice_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec709_nice_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000310\n[[ visible ]] FragmentOut rec709_nice_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.098999977);\n"
    "    const float4 c1 = float4(-0.09899999946, 4.500000000, 0.01799999923, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec709_nice_sat");
}

void sub_1B786F89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786F8CC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786F8C4);
}

void Initrec709_half_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec709_half_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000310\n[[ visible ]] FragmentOut rec709_half_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.098999977);\n"
    "    const float4 c1 = float4(-0.09899999946, 4.500000000, 0.01799999923, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec709_half_sat");
}

void sub_1B786FAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786FB08(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786FB00);
}

void Initrec709_halfProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec709_half_hgc_visible", "//Metal1.0     \n//LEN=0000000410\n[[ visible ]] FragmentOut rec709_half_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
    "    const float4 c1 = float4(0.4499999881, 1.098999977, -0.09899999946, 4.500000000);\n"
    "    const float4 c2 = float4(0.01799999923, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
    "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*c1.www;\n"
    "    r1.xyz = r1.xyz - c2.xxx;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz*r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec709_half");
}

void sub_1B786FD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786FD44(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786FD3CLL);
}

void Initrec709_niceProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec709_nice_hgc_visible", "//Metal1.0     \n//LEN=0000000410\n[[ visible ]] FragmentOut rec709_nice_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
    "    const float4 c1 = float4(0.4499999881, 1.098999977, -0.09899999946, 4.500000000);\n"
    "    const float4 c2 = float4(0.01799999923, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
    "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*c1.www;\n"
    "    r1.xyz = r1.xyz - c2.xxx;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz*r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec709_nice");
}

void sub_1B786FF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B786FF80(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B786FF78);
}

void Initinv_rec709_fast_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec709_fast_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000202\n[[ visible ]] FragmentOut inv_rec709_fast_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r0.xyz = r1.xyz*r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec709_fast_sat");
}

void sub_1B787018C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78701BC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78701B4);
}

void Initinv_rec709_fixed_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec709_fixed_sat_hgc_visible", "//Metal1.0     \n//LEN=000000032a\n[[ visible ]] FragmentOut inv_rec709_fixed_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.09899999946, 2.220000029);\n"
    "    const float4 c1 = float4(0.8108000159, 0.2220000029, 0.08120000362, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec709_fixed_sat");
}

void sub_1B78703C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78703F8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78703F0);
}

void Initinv_rec709_nice_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec709_nice_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000329\n[[ visible ]] FragmentOut inv_rec709_nice_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.09899999946, 2.220000029);\n"
    "    const float4 c1 = float4(0.8108000159, 0.2220000029, 0.08120000362, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec709_nice_sat");
}

void sub_1B7870604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7870634(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787062CLL);
}

void Initinv_rec709_half_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec709_half_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000329\n[[ visible ]] FragmentOut inv_rec709_half_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.09899999946, 2.220000029);\n"
    "    const float4 c1 = float4(0.8108000159, 0.2220000029, 0.08120000362, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec709_half_sat");
}

void sub_1B7870840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7870870(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7870868);
}

void Initinv_rec709_halfProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec709_half_hgc_visible", "//Metal1.0     \n//LEN=0000000429\n[[ visible ]] FragmentOut inv_rec709_half_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
    "    const float4 c1 = float4(0.09899999946, 2.220000029, 0.8108000159, 0.2220000029);\n"
    "    const float4 c2 = float4(0.08120000362, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz + c1.xxx;\n"
    "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
    "    r2.xyz = r2.xyz*c1.zzz;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*c1.www;\n"
    "    r1.xyz = r1.xyz - c2.xxx;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz*r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec709_half");
}

void sub_1B7870A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7870AAC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7870AA4);
}

void Initinv_rec709_niceProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec709_nice_hgc_visible", "//Metal1.0     \n//LEN=0000000429\n[[ visible ]] FragmentOut inv_rec709_nice_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
    "    const float4 c1 = float4(0.09899999946, 2.220000029, 0.8108000159, 0.2220000029);\n"
    "    const float4 c2 = float4(0.08120000362, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz + c1.xxx;\n"
    "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
    "    r2.xyz = r2.xyz*c1.zzz;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*c1.www;\n"
    "    r1.xyz = r1.xyz - c2.xxx;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz*r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec709_nice");
}

void sub_1B7870CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7870CE8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7870CE0);
}

void Initrec601_fast_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec601_fast_sat_hgc_visible", "//Metal1.0     \n//LEN=00000001fd\n[[ visible ]] FragmentOut rec601_fast_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r0.xyz = sqrt(r1.xyz);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec601_fast_sat");
}

void sub_1B7870EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7870F24(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7870F1CLL);
}

void Initrec601_fixed_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec601_fixed_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000310\n[[ visible ]] FragmentOut rec601_fixed_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.111500025);\n"
    "    const float4 c1 = float4(-0.1115000024, 4.000000000, 0.02280000038, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec601_fixed_sat");
}

void sub_1B7871130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7871160(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7871158);
}

void Initrec601_nice_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec601_nice_sat_hgc_visible", "//Metal1.0     \n//LEN=000000030f\n[[ visible ]] FragmentOut rec601_nice_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.111500025);\n"
    "    const float4 c1 = float4(-0.1115000024, 4.000000000, 0.02280000038, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec601_nice_sat");
}

void sub_1B787136C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787139C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7871394);
}

void Initrec601_half_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec601_half_sat_hgc_visible", "//Metal1.0     \n//LEN=000000030f\n[[ visible ]] FragmentOut rec601_half_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.111500025);\n"
    "    const float4 c1 = float4(-0.1115000024, 4.000000000, 0.02280000038, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec601_half_sat");
}

void sub_1B78715A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78715D8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78715D0);
}

void Initrec601_halfProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec601_half_hgc_visible", "//Metal1.0     \n//LEN=00000003be\n[[ visible ]] FragmentOut rec601_half_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
    "    const float4 c1 = float4(0.4499999881, 1.111500025, -0.1115000024, 0.02280000038);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
    "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*-c0.yyy;\n"
    "    r1.xyz = r1.xyz - c1.www;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz*r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec601_half");
}

void sub_1B78717E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7871814(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787180CLL);
}

void Initrec601_niceProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec601_nice_hgc_visible", "//Metal1.0     \n//LEN=00000003be\n[[ visible ]] FragmentOut rec601_nice_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
    "    const float4 c1 = float4(0.4499999881, 1.111500025, -0.1115000024, 0.02280000038);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
    "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*-c0.yyy;\n"
    "    r1.xyz = r1.xyz - c1.www;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz*r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec601_nice");
}

void sub_1B7871A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7871A50(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7871A48);
}

void Initinv_rec601_fast_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec601_fast_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000202\n[[ visible ]] FragmentOut inv_rec601_fast_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r0.xyz = r1.xyz*r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec601_fast_sat");
}

void sub_1B7871C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7871C8C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7871C84);
}

void Initinv_rec601_fixed_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec601_fixed_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000329\n[[ visible ]] FragmentOut inv_rec601_fixed_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.1115000024, 2.220000029);\n"
    "    const float4 c1 = float4(0.7906000018, 0.2500000000, 0.09130000323, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec601_fixed_sat");
}

void sub_1B7871E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7871EC8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7871EC0);
}

void Initinv_rec601_nice_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec601_nice_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000328\n[[ visible ]] FragmentOut inv_rec601_nice_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.1115000024, 2.220000029);\n"
    "    const float4 c1 = float4(0.7906000018, 0.2500000000, 0.09130000323, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec601_nice_sat");
}

void sub_1B78720D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7872104(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78720FCLL);
}

void Initinv_rec601_half_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec601_half_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000328\n[[ visible ]] FragmentOut inv_rec601_half_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.1115000024, 2.220000029);\n"
    "    const float4 c1 = float4(0.7906000018, 0.2500000000, 0.09130000323, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec601_half_sat");
}

void sub_1B7872310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7872340(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7872338);
}

void Initinv_rec601_halfProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec601_half_hgc_visible", "//Metal1.0     \n//LEN=00000003d6\n[[ visible ]] FragmentOut inv_rec601_half_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
    "    const float4 c1 = float4(0.1115000024, 2.220000029, 0.7906000018, 0.09130000323);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz + c1.xxx;\n"
    "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
    "    r2.xyz = r2.xyz*c1.zzz;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*-c0.xxx;\n"
    "    r1.xyz = r1.xyz - c1.www;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz*r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec601_half");
}

void sub_1B787254C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787257C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7872574);
}

void Initinv_rec601_niceProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec601_nice_hgc_visible", "//Metal1.0     \n//LEN=00000003d6\n[[ visible ]] FragmentOut inv_rec601_nice_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
    "    const float4 c1 = float4(0.1115000024, 2.220000029, 0.7906000018, 0.09130000323);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz + c1.xxx;\n"
    "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
    "    r2.xyz = r2.xyz*c1.zzz;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*-c0.xxx;\n"
    "    r1.xyz = r1.xyz - c1.www;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz*r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec601_nice");
}

void sub_1B7872788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78727B8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78727B0);
}

void Initsrgb_fast_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "srgb_fast_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000245\n[[ visible ]] FragmentOut srgb_fast_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 1.200000048, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz*c0.zzz;\n"
    "    r2.xyz = mix(r2.xyz, r1.xyz, r1.xyz);\n"
    "    r0.xyz = sqrt(r2.xyz);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "srgb_fast_sat");
}

void sub_1B78729C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78729F4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78729ECLL);
}

void Initsrgb_fixed_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "srgb_fixed_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000310\n[[ visible ]] FragmentOut srgb_fixed_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4165999889, 1.054999948);\n"
    "    const float4 c1 = float4(-0.05499999970, 12.92000008, 0.003130800091, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "srgb_fixed_sat");
}

void sub_1B7872C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7872C30(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7872C28);
}

void Initsrgb_nice_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "srgb_nice_sat_hgc_visible", "//Metal1.0     \n//LEN=000000030f\n[[ visible ]] FragmentOut srgb_nice_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4165999889, 1.054999948);\n"
    "    const float4 c1 = float4(-0.05499999970, 12.92000008, 0.003130800091, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "srgb_nice_sat");
}

void sub_1B7872E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7872E6C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7872E64);
}

void Initsrgb_half_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "srgb_half_sat_hgc_visible", "//Metal1.0     \n//LEN=000000030f\n[[ visible ]] FragmentOut srgb_half_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4165999889, 1.054999948);\n"
    "    const float4 c1 = float4(-0.05499999970, 12.92000008, 0.003130800091, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "srgb_half_sat");
}

void sub_1B7873078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78730A8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78730A0);
}

void Initsrgb_halfProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "srgb_half_hgc_visible", "//Metal1.0     \n//LEN=00000003a3\n[[ visible ]] FragmentOut srgb_half_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.5299999714, -1.000000000, 1.679999948, 0.4165999889);\n"
    "    const float4 c1 = float4(1.054999948, -0.05499999970, 12.92000008, 0.003130800091);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.zzz);\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx + c1.yyy;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*c1.zzz;\n"
    "    r1.xyz = r1.xyz - c1.www;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = select(r2.xyz, -r2.xyz, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "srgb_half");
}

void sub_1B78732B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78732E4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78732DCLL);
}

void Initsrgb_niceProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "srgb_nice_hgc_visible", "//Metal1.0     \n//LEN=00000003a3\n[[ visible ]] FragmentOut srgb_nice_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.5299999714, -1.000000000, 1.679999948, 0.4165999889);\n"
    "    const float4 c1 = float4(1.054999948, -0.05499999970, 12.92000008, 0.003130800091);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.zzz);\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx + c1.yyy;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*c1.zzz;\n"
    "    r1.xyz = r1.xyz - c1.www;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = select(r2.xyz, -r2.xyz, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "srgb_nice");
}

void sub_1B78734F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7873520(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7873518);
}

void Initinv_srgb_fast_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_srgb_fast_sat_hgc_visible", "//Metal1.0     \n//LEN=000000024b\n[[ visible ]] FragmentOut inv_srgb_fast_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.8600000143, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz*c0.zzz;\n"
    "    r2.xyz = mix(r2.xyz, r1.xyz, r1.xyz);\n"
    "    r0.xyz = r2.xyz*r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_srgb_fast_sat");
}

void sub_1B787372C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787375C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7873754);
}

void Initinv_srgb_fixed_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_srgb_fixed_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000329\n[[ visible ]] FragmentOut inv_srgb_fixed_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.05499999970, 2.400000095);\n"
    "    const float4 c1 = float4(0.8790000081, 0.07739999890, 0.04044999927, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_srgb_fixed_sat");
}

void sub_1B7873968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7873998(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7873990);
}

void Initinv_srgb_nice_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_srgb_nice_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000328\n[[ visible ]] FragmentOut inv_srgb_nice_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.05499999970, 2.400000095);\n"
    "    const float4 c1 = float4(0.8790000081, 0.07739999890, 0.04044999927, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_srgb_nice_sat");
}

void sub_1B7873BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7873BD4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7873BCCLL);
}

void Initinv_srgb_half_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_srgb_half_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000328\n[[ visible ]] FragmentOut inv_srgb_half_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.05499999970, 2.400000095);\n"
    "    const float4 c1 = float4(0.8790000081, 0.07739999890, 0.04044999927, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_srgb_half_sat");
}

void sub_1B7873DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7873E10(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7873E08);
}

void Initinv_srgb_halfProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_srgb_half_hgc_visible", "//Metal1.0     \n//LEN=00000003bc\n[[ visible ]] FragmentOut inv_srgb_half_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.7500000000, -1.000000000, 1.250000000, 0.05499999970);\n"
    "    const float4 c1 = float4(2.400000095, 0.8790000081, 0.07739999890, 0.04044999927);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz + c0.www;\n"
    "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
    "    r2.xyz = r2.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*c1.zzz;\n"
    "    r1.xyz = r1.xyz - c1.www;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = select(r2.xyz, -r2.xyz, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_srgb_half");
}

void sub_1B787401C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787404C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7874044);
}

void Initinv_srgb_niceProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_srgb_nice_hgc_visible", "//Metal1.0     \n//LEN=00000003bc\n[[ visible ]] FragmentOut inv_srgb_nice_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.7500000000, -1.000000000, 1.250000000, 0.05499999970);\n"
    "    const float4 c1 = float4(2.400000095, 0.8790000081, 0.07739999890, 0.04044999927);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz + c0.www;\n"
    "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
    "    r2.xyz = r2.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*c1.zzz;\n"
    "    r1.xyz = r1.xyz - c1.www;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = select(r2.xyz, -r2.xyz, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_srgb_nice");
}

void sub_1B7874258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7874288(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7874280);
}

void Initquicktime_fast_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "quicktime_fast_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000200\n[[ visible ]] FragmentOut quicktime_fast_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r0.xyz = sqrt(r1.xyz);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "quicktime_fast_sat");
}

void sub_1B7874494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78744C4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78744BCLL);
}

void Initquicktime_fixed_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "quicktime_fixed_sat_hgc_visible", "//Metal1.0     \n//LEN=000000021e\n[[ visible ]] FragmentOut quicktime_fixed_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.5112500191, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "quicktime_fixed_sat");
}

void sub_1B78746D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7874700(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78746F8);
}

void Initquicktime_nice_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "quicktime_nice_sat_hgc_visible", "//Metal1.0     \n//LEN=000000021d\n[[ visible ]] FragmentOut quicktime_nice_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.5112500191, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "quicktime_nice_sat");
}

void sub_1B787490C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787493C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7874934);
}

void Initquicktime_half_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "quicktime_half_sat_hgc_visible", "//Metal1.0     \n//LEN=000000021d\n[[ visible ]] FragmentOut quicktime_half_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.5112500191, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "quicktime_half_sat");
}

void sub_1B7874B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7874B78(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7874B70);
}

void Initquicktime_halfProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "quicktime_half_hgc_visible", "//Metal1.0     \n//LEN=0000000295\n[[ visible ]] FragmentOut quicktime_half_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -1.000000000, 1.330000043, 0.5112500191);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r1.xyz = fmin(r1.xyz, c0.zzz);\n"
    "    r1.xyz = pow(r1.xyz, c0.www);\n"
    "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "quicktime_half");
}

void sub_1B7874D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7874DB4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7874DACLL);
}

void Initquicktime_niceProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "quicktime_nice_hgc_visible", "//Metal1.0     \n//LEN=0000000295\n[[ visible ]] FragmentOut quicktime_nice_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -1.000000000, 1.330000043, 0.5112500191);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r1.xyz = fmin(r1.xyz, c0.zzz);\n"
    "    r1.xyz = pow(r1.xyz, c0.www);\n"
    "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "quicktime_nice");
}

void sub_1B7874FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7874FF0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7874FE8);
}

void Initinv_quicktime_fast_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_quicktime_fast_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000205\n[[ visible ]] FragmentOut inv_quicktime_fast_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r0.xyz = r1.xyz*r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_quicktime_fast_sat");
}

void sub_1B78751FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787522C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7875224);
}

void Initinv_quicktime_fixed_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_quicktime_fixed_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000221\n[[ visible ]] FragmentOut inv_quicktime_fixed_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 1.955999970, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_quicktime_fixed_sat");
}

void sub_1B7875438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7875468(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7875460);
}

void Initinv_quicktime_nice_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_quicktime_nice_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000220\n[[ visible ]] FragmentOut inv_quicktime_nice_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 1.955999970, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_quicktime_nice_sat");
}

void sub_1B7875674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78756A4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787569CLL);
}

void Initinv_quicktime_half_satProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_quicktime_half_sat_hgc_visible", "//Metal1.0     \n//LEN=0000000220\n[[ visible ]] FragmentOut inv_quicktime_half_sat_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 1.955999970, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_quicktime_half_sat");
}

void sub_1B78758B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78758E0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78758D8);
}

void Initinv_quicktime_halfProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_quicktime_half_hgc_visible", "//Metal1.0     \n//LEN=0000000298\n[[ visible ]] FragmentOut inv_quicktime_half_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -1.000000000, 1.149999976, 1.955999970);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r1.xyz = fmin(r1.xyz, c0.zzz);\n"
    "    r1.xyz = pow(r1.xyz, c0.www);\n"
    "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_quicktime_half");
}

void sub_1B7875AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7875B1C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7875B14);
}

void Initinv_quicktime_niceProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_quicktime_nice_hgc_visible", "//Metal1.0     \n//LEN=0000000298\n[[ visible ]] FragmentOut inv_quicktime_nice_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -1.000000000, 1.149999976, 1.955999970);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r1.xyz = fmin(r1.xyz, c0.zzz);\n"
    "    r1.xyz = pow(r1.xyz, c0.www);\n"
    "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_quicktime_nice");
}

void sub_1B7875D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7875D58(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7875D50);
}

void Inittype0_fast_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type0_fast_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000001da\n[[ visible ]] FragmentOut type0_fast_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.yyy);\n"
    "    r1.xyz = fmin(r1.xyz, c0.www);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r0.xyz = r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type0_fast_sat_unpremult");
}

void sub_1B7875F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7875F94(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7875F8CLL);
}

void Inittype0_fixed_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type0_fixed_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000001db\n[[ visible ]] FragmentOut type0_fixed_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.yyy);\n"
    "    r1.xyz = fmin(r1.xyz, c0.www);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r0.xyz = r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type0_fixed_sat_unpremult");
}

void sub_1B78761A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78761D0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78761C8);
}

void Inittype0_nice_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type0_nice_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=0000000256\n[[ visible ]] FragmentOut type0_nice_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r1.xyz = r1.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
    "    r0.xyz = clamp(r1.xyz, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type0_nice_sat_unpremult");
}

void sub_1B78763DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787640C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7876404);
}

void Inittype0_half_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type0_half_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000001da\n[[ visible ]] FragmentOut type0_half_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.yyy);\n"
    "    r1.xyz = fmin(r1.xyz, c0.www);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r0.xyz = r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type0_half_sat_unpremult");
}

void sub_1B7876618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7876648(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7876640);
}

void Inittype0_half_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type0_half_unpremult_hgc_visible", "//Metal1.0     \n//LEN=000000022c\n[[ visible ]] FragmentOut type0_half_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = select(c0.www, -c0.www, r0.xyz < 0.00000f);\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type0_half_unpremult");
}

void sub_1B7876854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7876884(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787687CLL);
}

void Inittype0_nice_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type0_nice_unpremult_hgc_visible", "//Metal1.0     \n//LEN=000000022c\n[[ visible ]] FragmentOut type0_nice_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = select(c0.www, -c0.www, r0.xyz < 0.00000f);\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type0_nice_unpremult");
}

void sub_1B7876A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7876AC0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7876AB8);
}

void Inittype0_float_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type0_float_unpremult_hgc_visible", "//Metal1.0     \n//LEN=000000022d\n[[ visible ]] FragmentOut type0_float_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = select(c0.www, -c0.www, r0.xyz < 0.00000f);\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type0_float_unpremult");
}

void sub_1B7876CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7876CFC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7876CF4);
}

void Inittype1_fast_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type1_fast_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002bc\n[[ visible ]] FragmentOut type1_fast_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.x = c0.z;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type1_fast_sat_unpremult");
}

void sub_1B7876F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7876F38(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7876F30);
}

void Inittype1_fixed_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type1_fixed_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002bd\n[[ visible ]] FragmentOut type1_fixed_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.x = c0.z;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type1_fixed_sat_unpremult");
}

void sub_1B7877144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7877174(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787716CLL);
}

void Inittype1_nice_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type1_nice_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002bc\n[[ visible ]] FragmentOut type1_nice_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.x = c0.z;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type1_nice_sat_unpremult");
}

void sub_1B7877380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78773B0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78773A8);
}

void Inittype1_half_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type1_half_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002bc\n[[ visible ]] FragmentOut type1_half_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.x = c0.z;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type1_half_sat_unpremult");
}

void sub_1B78775BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78775EC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78775E4);
}

void Inittype1_half_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type1_half_unpremult_hgc_visible", "//Metal1.0     \n//LEN=000000029f\n[[ visible ]] FragmentOut type1_half_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xw = c0.zx;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r3.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type1_half_unpremult");
}

void sub_1B78777F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7877828(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7877820);
}

void Inittype1_nice_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type1_nice_unpremult_hgc_visible", "//Metal1.0     \n//LEN=000000029f\n[[ visible ]] FragmentOut type1_nice_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xw = c0.zx;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r3.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type1_nice_unpremult");
}

void sub_1B7877A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7877A64(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7877A5CLL);
}

void Inittype1_float_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type1_float_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002a0\n[[ visible ]] FragmentOut type1_float_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xw = c0.zx;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r3.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type1_float_unpremult");
}

void sub_1B7877C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7877CA0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7877C98);
}

void Inittype2_fast_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type2_fast_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002ff\n[[ visible ]] FragmentOut type2_fast_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.x = c0.z;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz + hg_Params[2].xxx, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type2_fast_sat_unpremult");
}

void sub_1B7877EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7877EDC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7877ED4);
}

void Inittype2_fixed_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type2_fixed_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=0000000300\n[[ visible ]] FragmentOut type2_fixed_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.x = c0.z;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz + hg_Params[2].xxx, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type2_fixed_sat_unpremult");
}

void sub_1B78780E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7878118(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7878110);
}

void Inittype2_nice_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type2_nice_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002ff\n[[ visible ]] FragmentOut type2_nice_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.x = c0.z;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz + hg_Params[2].xxx, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type2_nice_sat_unpremult");
}

void sub_1B7878324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7878354(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787834CLL);
}

void Inittype2_half_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type2_half_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002ff\n[[ visible ]] FragmentOut type2_half_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.x = c0.z;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz + hg_Params[2].xxx, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type2_half_sat_unpremult");
}

void sub_1B7878560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7878590(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7878588);
}

void Inittype2_half_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type2_half_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002c7\n[[ visible ]] FragmentOut type2_half_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xw = c0.zx;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r3.xyz;\n"
    "    r0.xyz = r0.xyz + hg_Params[2].xxx;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type2_half_unpremult");
}

void sub_1B787879C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78787CC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78787C4);
}

void Inittype2_nice_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type2_nice_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002c7\n[[ visible ]] FragmentOut type2_nice_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xw = c0.zx;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r3.xyz;\n"
    "    r0.xyz = r0.xyz + hg_Params[2].xxx;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type2_nice_unpremult");
}

void sub_1B78789D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7878A08(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7878A00);
}

void Inittype2_float_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type2_float_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002c8\n[[ visible ]] FragmentOut type2_float_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xw = c0.zx;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r3.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[0].xxx);\n"
    "    r3.xyz = r3.xyz*hg_Params[0].www;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r3.xyz = select(r3.xyz, r1.xxx, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r3.xyz;\n"
    "    r0.xyz = r0.xyz + hg_Params[2].xxx;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type2_float_unpremult");
}

void sub_1B7878C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7878C44(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7878C3CLL);
}

void Inittype3_fast_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type3_fast_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002d1\n[[ visible ]] FragmentOut type3_fast_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
    "    r2.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[0].xxx);\n"
    "    r2.xyz = r2.xyz*hg_Params[0].www;\n"
    "    r3.xyz = r1.xyz*hg_Params[1].xxx;\n"
    "    r1.xyz = r1.xyz - hg_Params[1].yyy;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type3_fast_sat_unpremult");
}

void sub_1B7878E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7878E80(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7878E78);
}

void Inittype3_fixed_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type3_fixed_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002d2\n[[ visible ]] FragmentOut type3_fixed_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
    "    r2.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[0].xxx);\n"
    "    r2.xyz = r2.xyz*hg_Params[0].www;\n"
    "    r3.xyz = r1.xyz*hg_Params[1].xxx;\n"
    "    r1.xyz = r1.xyz - hg_Params[1].yyy;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type3_fixed_sat_unpremult");
}

void sub_1B787908C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78790BC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78790B4);
}

void Inittype3_nice_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type3_nice_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002d1\n[[ visible ]] FragmentOut type3_nice_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
    "    r2.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[0].xxx);\n"
    "    r2.xyz = r2.xyz*hg_Params[0].www;\n"
    "    r3.xyz = r1.xyz*hg_Params[1].xxx;\n"
    "    r1.xyz = r1.xyz - hg_Params[1].yyy;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type3_nice_sat_unpremult");
}

void sub_1B78792C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78792F8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78792F0);
}

void Inittype3_half_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type3_half_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002d1\n[[ visible ]] FragmentOut type3_half_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
    "    r2.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[0].xxx);\n"
    "    r2.xyz = r2.xyz*hg_Params[0].www;\n"
    "    r3.xyz = r1.xyz*hg_Params[1].xxx;\n"
    "    r1.xyz = r1.xyz - hg_Params[1].yyy;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type3_half_sat_unpremult");
}

void sub_1B7879504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7879534(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787952CLL);
}

void Inittype3_half_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type3_half_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002c3\n[[ visible ]] FragmentOut type3_half_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.w = c0.x;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r1.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r1.xyz = r1.xyz*hg_Params[0].www;\n"
    "    r3.xyz = r2.xyz*hg_Params[1].xxx;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r1.xyz = select(r1.xyz, r3.xyz, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type3_half_unpremult");
}

void sub_1B7879740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7879770(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7879768);
}

void Inittype3_nice_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type3_nice_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002c3\n[[ visible ]] FragmentOut type3_nice_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.w = c0.x;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r1.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r1.xyz = r1.xyz*hg_Params[0].www;\n"
    "    r3.xyz = r2.xyz*hg_Params[1].xxx;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r1.xyz = select(r1.xyz, r3.xyz, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type3_nice_unpremult");
}

void sub_1B787997C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78799AC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78799A4);
}

void Inittype3_float_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type3_float_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002c4\n[[ visible ]] FragmentOut type3_float_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.w = c0.x;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r1.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r1.xyz = r1.xyz*hg_Params[0].www;\n"
    "    r3.xyz = r2.xyz*hg_Params[1].xxx;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r1.xyz = select(r1.xyz, r3.xyz, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type3_float_unpremult");
}

void sub_1B7879BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7879BE8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7879BE0);
}

void Inittype4_fast_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type4_fast_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=0000000327\n[[ visible ]] FragmentOut type4_fast_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r1.xyz = fmin(r1.xyz, c0.www);\n"
    "    r2.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[0].xxx);\n"
    "    r2.xyz = r2.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
    "    r3.xyz = r1.xyz*hg_Params[1].xxx;\n"
    "    r1.xyz = r1.xyz - hg_Params[1].yyy;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz + hg_Params[2].xxx, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type4_fast_sat_unpremult");
}

void sub_1B7879DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7879E24(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7879E1CLL);
}

void Inittype4_fixed_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type4_fixed_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=0000000328\n[[ visible ]] FragmentOut type4_fixed_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r1.xyz = fmin(r1.xyz, c0.www);\n"
    "    r2.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[0].xxx);\n"
    "    r2.xyz = r2.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
    "    r3.xyz = r1.xyz*hg_Params[1].xxx;\n"
    "    r1.xyz = r1.xyz - hg_Params[1].yyy;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz + hg_Params[2].xxx, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type4_fixed_sat_unpremult");
}

void sub_1B787A030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787A060(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787A058);
}

void Inittype4_nice_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type4_nice_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=0000000327\n[[ visible ]] FragmentOut type4_nice_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r1.xyz = fmin(r1.xyz, c0.www);\n"
    "    r2.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[0].xxx);\n"
    "    r2.xyz = r2.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
    "    r3.xyz = r1.xyz*hg_Params[1].xxx;\n"
    "    r1.xyz = r1.xyz - hg_Params[1].yyy;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz + hg_Params[2].xxx, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type4_nice_sat_unpremult");
}

void sub_1B787A26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787A29C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787A294);
}

void Inittype4_half_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type4_half_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=0000000327\n[[ visible ]] FragmentOut type4_half_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r1.xyz = fmin(r1.xyz, c0.www);\n"
    "    r2.xyz = r1.xyz + hg_Params[0].yyy;\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[0].xxx);\n"
    "    r2.xyz = r2.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
    "    r3.xyz = r1.xyz*hg_Params[1].xxx;\n"
    "    r1.xyz = r1.xyz - hg_Params[1].yyy;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz + hg_Params[2].xxx, 0.00000f, 1.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type4_half_sat_unpremult");
}

void sub_1B787A4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787A4D8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787A4D0);
}

void Inittype4_half_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type4_half_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002fe\n[[ visible ]] FragmentOut type4_half_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 2.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.w = c0.w;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r1.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r1.xyz = r1.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
    "    r3.xyz = r2.xyz*hg_Params[1].xxx;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r1.xyz = select(r1.xyz, r3.xyz, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz + hg_Params[2].xxx;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type4_half_unpremult");
}

void sub_1B787A6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787A714(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787A70CLL);
}

void Inittype4_nice_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type4_nice_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002fe\n[[ visible ]] FragmentOut type4_nice_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 2.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.w = c0.w;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r1.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r1.xyz = r1.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
    "    r3.xyz = r2.xyz*hg_Params[1].xxx;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r1.xyz = select(r1.xyz, r3.xyz, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz + hg_Params[2].xxx;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type4_nice_unpremult");
}

void sub_1B787A920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787A950(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787A948);
}

void Inittype4_float_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "type4_float_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002ff\n[[ visible ]] FragmentOut type4_float_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 2.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.w = c0.w;\n"
    "    r2.xyz = fmax(r0.xyz, c0.zzz);\n"
    "    r2.xyz = fmin(r2.xyz, r1.www);\n"
    "    r1.xyz = r2.xyz + hg_Params[0].yyy;\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[0].xxx);\n"
    "    r1.xyz = r1.xyz*hg_Params[0].www + hg_Params[0].zzz;\n"
    "    r3.xyz = r2.xyz*hg_Params[1].xxx;\n"
    "    r2.xyz = r2.xyz - hg_Params[1].yyy;\n"
    "    r1.xyz = select(r1.xyz, r3.xyz, r2.xyz < 0.00000f);\n"
    "    r0.xyz = r1.xyz;\n"
    "    r0.xyz = r0.xyz + hg_Params[2].xxx;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "type4_float_unpremult");
}

void sub_1B787AB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787AB8C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787AB84);
}

void Initrec709_fast_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec709_fast_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000001b5\n[[ visible ]] FragmentOut rec709_fast_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r0.xyz = sqrt(r1.xyz);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec709_fast_sat_unpremult");
}

void sub_1B787AD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787ADC8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787ADC0);
}

void Initrec709_fixed_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec709_fixed_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002c9\n[[ visible ]] FragmentOut rec709_fixed_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.098999977);\n"
    "    const float4 c1 = float4(-0.09899999946, 4.500000000, 0.01799999923, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec709_fixed_sat_unpremult");
}

void sub_1B787AFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787B004(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787AFFCLL);
}

void Initrec709_nice_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec709_nice_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002c8\n[[ visible ]] FragmentOut rec709_nice_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.098999977);\n"
    "    const float4 c1 = float4(-0.09899999946, 4.500000000, 0.01799999923, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec709_nice_sat_unpremult");
}

void sub_1B787B210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787B240(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787B238);
}

void Initrec709_half_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec709_half_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002c8\n[[ visible ]] FragmentOut rec709_half_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.098999977);\n"
    "    const float4 c1 = float4(-0.09899999946, 4.500000000, 0.01799999923, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec709_half_sat_unpremult");
}

void sub_1B787B44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787B47C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787B474);
}

void Initrec709_half_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec709_half_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000003c8\n[[ visible ]] FragmentOut rec709_half_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
    "    const float4 c1 = float4(0.4499999881, 1.098999977, -0.09899999946, 4.500000000);\n"
    "    const float4 c2 = float4(0.01799999923, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
    "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*c1.www;\n"
    "    r1.xyz = r1.xyz - c2.xxx;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz*r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec709_half_unpremult");
}

void sub_1B787B688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787B6B8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787B6B0);
}

void Initrec709_nice_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec709_nice_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000003c8\n[[ visible ]] FragmentOut rec709_nice_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
    "    const float4 c1 = float4(0.4499999881, 1.098999977, -0.09899999946, 4.500000000);\n"
    "    const float4 c2 = float4(0.01799999923, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
    "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*c1.www;\n"
    "    r1.xyz = r1.xyz - c2.xxx;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz*r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec709_nice_unpremult");
}

void sub_1B787B8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787B8F4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787B8ECLL);
}

void Initinv_rec709_fast_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec709_fast_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000001ba\n[[ visible ]] FragmentOut inv_rec709_fast_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r0.xyz = r1.xyz*r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec709_fast_sat_unpremult");
}

void sub_1B787BB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787BB30(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787BB28);
}

void Initinv_rec709_fixed_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec709_fixed_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002e2\n[[ visible ]] FragmentOut inv_rec709_fixed_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.09899999946, 2.220000029);\n"
    "    const float4 c1 = float4(0.8108000159, 0.2220000029, 0.08120000362, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec709_fixed_sat_unpremult");
}

void sub_1B787BD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787BD6C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787BD64);
}

void Initinv_rec709_nice_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec709_nice_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002e1\n[[ visible ]] FragmentOut inv_rec709_nice_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.09899999946, 2.220000029);\n"
    "    const float4 c1 = float4(0.8108000159, 0.2220000029, 0.08120000362, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec709_nice_sat_unpremult");
}

void sub_1B787BF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787BFA8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787BFA0);
}

void Initinv_rec709_half_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec709_half_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002e1\n[[ visible ]] FragmentOut inv_rec709_half_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.09899999946, 2.220000029);\n"
    "    const float4 c1 = float4(0.8108000159, 0.2220000029, 0.08120000362, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec709_half_sat_unpremult");
}

void sub_1B787C1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787C1E4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787C1DCLL);
}

void Initinv_rec709_half_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec709_half_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000003e1\n[[ visible ]] FragmentOut inv_rec709_half_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
    "    const float4 c1 = float4(0.09899999946, 2.220000029, 0.8108000159, 0.2220000029);\n"
    "    const float4 c2 = float4(0.08120000362, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz + c1.xxx;\n"
    "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
    "    r2.xyz = r2.xyz*c1.zzz;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*c1.www;\n"
    "    r1.xyz = r1.xyz - c2.xxx;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz*r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec709_half_unpremult");
}

void sub_1B787C3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787C420(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787C418);
}

void Initinv_rec709_nice_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec709_nice_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000003e1\n[[ visible ]] FragmentOut inv_rec709_nice_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
    "    const float4 c1 = float4(0.09899999946, 2.220000029, 0.8108000159, 0.2220000029);\n"
    "    const float4 c2 = float4(0.08120000362, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz + c1.xxx;\n"
    "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
    "    r2.xyz = r2.xyz*c1.zzz;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*c1.www;\n"
    "    r1.xyz = r1.xyz - c2.xxx;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz*r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec709_nice_unpremult");
}

void sub_1B787C62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787C65C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787C654);
}

void Initrec601_fast_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec601_fast_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000001b5\n[[ visible ]] FragmentOut rec601_fast_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r0.xyz = sqrt(r1.xyz);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec601_fast_sat_unpremult");
}

void sub_1B787C868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787C898(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787C890);
}

void Initrec601_fixed_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec601_fixed_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002c8\n[[ visible ]] FragmentOut rec601_fixed_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.111500025);\n"
    "    const float4 c1 = float4(-0.1115000024, 4.000000000, 0.02280000038, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec601_fixed_sat_unpremult");
}

void sub_1B787CAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787CAD4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787CACCLL);
}

void Initrec601_nice_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec601_nice_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002c7\n[[ visible ]] FragmentOut rec601_nice_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.111500025);\n"
    "    const float4 c1 = float4(-0.1115000024, 4.000000000, 0.02280000038, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec601_nice_sat_unpremult");
}

void sub_1B787CCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787CD10(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787CD08);
}

void Initrec601_half_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec601_half_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002c7\n[[ visible ]] FragmentOut rec601_half_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4499999881, 1.111500025);\n"
    "    const float4 c1 = float4(-0.1115000024, 4.000000000, 0.02280000038, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec601_half_sat_unpremult");
}

void sub_1B787CF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787CF4C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787CF44);
}

void Initrec601_half_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec601_half_unpremult_hgc_visible", "//Metal1.0     \n//LEN=0000000376\n[[ visible ]] FragmentOut rec601_half_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
    "    const float4 c1 = float4(0.4499999881, 1.111500025, -0.1115000024, 0.02280000038);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
    "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*-c0.yyy;\n"
    "    r1.xyz = r1.xyz - c1.www;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz*r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec601_half_unpremult");
}

void sub_1B787D158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787D188(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787D180);
}

void Initrec601_nice_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "rec601_nice_unpremult_hgc_visible", "//Metal1.0     \n//LEN=0000000376\n[[ visible ]] FragmentOut rec601_nice_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.330000043);\n"
    "    const float4 c1 = float4(0.4499999881, 1.111500025, -0.1115000024, 0.02280000038);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
    "    r2.xyz = r2.xyz*c1.yyy + c1.zzz;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*-c0.yyy;\n"
    "    r1.xyz = r1.xyz - c1.www;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz*r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "rec601_nice_unpremult");
}

void sub_1B787D394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787D3C4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787D3BCLL);
}

void Initinv_rec601_fast_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec601_fast_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000001ba\n[[ visible ]] FragmentOut inv_rec601_fast_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r0.xyz = r1.xyz*r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec601_fast_sat_unpremult");
}

void sub_1B787D5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787D600(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787D5F8);
}

void Initinv_rec601_fixed_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec601_fixed_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002e1\n[[ visible ]] FragmentOut inv_rec601_fixed_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.1115000024, 2.220000029);\n"
    "    const float4 c1 = float4(0.7906000018, 0.2500000000, 0.09130000323, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec601_fixed_sat_unpremult");
}

void sub_1B787D80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787D83C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787D834);
}

void Initinv_rec601_nice_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec601_nice_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002e0\n[[ visible ]] FragmentOut inv_rec601_nice_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.1115000024, 2.220000029);\n"
    "    const float4 c1 = float4(0.7906000018, 0.2500000000, 0.09130000323, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec601_nice_sat_unpremult");
}

void sub_1B787DA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787DA78(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787DA70);
}

void Initinv_rec601_half_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec601_half_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002e0\n[[ visible ]] FragmentOut inv_rec601_half_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.1115000024, 2.220000029);\n"
    "    const float4 c1 = float4(0.7906000018, 0.2500000000, 0.09130000323, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec601_half_sat_unpremult");
}

void sub_1B787DC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787DCB4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787DCACLL);
}

void Initinv_rec601_half_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec601_half_unpremult_hgc_visible", "//Metal1.0     \n//LEN=000000038e\n[[ visible ]] FragmentOut inv_rec601_half_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
    "    const float4 c1 = float4(0.1115000024, 2.220000029, 0.7906000018, 0.09130000323);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz + c1.xxx;\n"
    "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
    "    r2.xyz = r2.xyz*c1.zzz;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*-c0.xxx;\n"
    "    r1.xyz = r1.xyz - c1.www;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz*r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec601_half_unpremult");
}

void sub_1B787DEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787DEF0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787DEE8);
}

void Initinv_rec601_nice_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_rec601_nice_unpremult_hgc_visible", "//Metal1.0     \n//LEN=000000038e\n[[ visible ]] FragmentOut inv_rec601_nice_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -4.000000000, 1.000000000, 1.149999976);\n"
    "    const float4 c1 = float4(0.1115000024, 2.220000029, 0.7906000018, 0.09130000323);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(c0.zzz, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz + c1.xxx;\n"
    "    r2.xyz = pow(r2.xyz, c1.yyy);\n"
    "    r2.xyz = r2.xyz*c1.zzz;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*-c0.xxx;\n"
    "    r1.xyz = r1.xyz - c1.www;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r1.xyz = select(c0.zzz, c0.xxx, r0.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz*r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_rec601_nice_unpremult");
}

void sub_1B787E0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787E12C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787E124);
}

void Initsrgb_fast_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "srgb_fast_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000001fd\n[[ visible ]] FragmentOut srgb_fast_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 1.200000048, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz*c0.zzz;\n"
    "    r2.xyz = mix(r2.xyz, r1.xyz, r1.xyz);\n"
    "    r0.xyz = sqrt(r2.xyz);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "srgb_fast_sat_unpremult");
}

void sub_1B787E338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787E368(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787E360);
}

void Initsrgb_fixed_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "srgb_fixed_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002c8\n[[ visible ]] FragmentOut srgb_fixed_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4165999889, 1.054999948);\n"
    "    const float4 c1 = float4(-0.05499999970, 12.92000008, 0.003130800091, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "srgb_fixed_sat_unpremult");
}

void sub_1B787E574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787E5A4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787E59CLL);
}

void Initsrgb_nice_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "srgb_nice_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002c7\n[[ visible ]] FragmentOut srgb_nice_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4165999889, 1.054999948);\n"
    "    const float4 c1 = float4(-0.05499999970, 12.92000008, 0.003130800091, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "srgb_nice_sat_unpremult");
}

void sub_1B787E7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787E7E0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787E7D8);
}

void Initsrgb_half_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "srgb_half_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002c7\n[[ visible ]] FragmentOut srgb_half_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.4165999889, 1.054999948);\n"
    "    const float4 c1 = float4(-0.05499999970, 12.92000008, 0.003130800091, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz*c0.www + c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "srgb_half_sat_unpremult");
}

void sub_1B787E9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787EA1C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787EA14);
}

void Initsrgb_half_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "srgb_half_unpremult_hgc_visible", "//Metal1.0     \n//LEN=000000035b\n[[ visible ]] FragmentOut srgb_half_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.5299999714, -1.000000000, 1.679999948, 0.4165999889);\n"
    "    const float4 c1 = float4(1.054999948, -0.05499999970, 12.92000008, 0.003130800091);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.zzz);\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx + c1.yyy;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*c1.zzz;\n"
    "    r1.xyz = r1.xyz - c1.www;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = select(r2.xyz, -r2.xyz, r0.xyz < 0.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "srgb_half_unpremult");
}

void sub_1B787EC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787EC58(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787EC50);
}

void Initsrgb_nice_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "srgb_nice_unpremult_hgc_visible", "//Metal1.0     \n//LEN=000000035b\n[[ visible ]] FragmentOut srgb_nice_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.5299999714, -1.000000000, 1.679999948, 0.4165999889);\n"
    "    const float4 c1 = float4(1.054999948, -0.05499999970, 12.92000008, 0.003130800091);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.zzz);\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx + c1.yyy;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*c1.zzz;\n"
    "    r1.xyz = r1.xyz - c1.www;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = select(r2.xyz, -r2.xyz, r0.xyz < 0.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "srgb_nice_unpremult");
}

void sub_1B787EE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787EE94(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787EE8CLL);
}

void Initinv_srgb_fast_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_srgb_fast_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=0000000203\n[[ visible ]] FragmentOut inv_srgb_fast_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.8600000143, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz*c0.zzz;\n"
    "    r2.xyz = mix(r2.xyz, r1.xyz, r1.xyz);\n"
    "    r0.xyz = r2.xyz*r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_srgb_fast_sat_unpremult");
}

void sub_1B787F0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787F0D0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787F0C8);
}

void Initinv_srgb_fixed_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_srgb_fixed_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002e1\n[[ visible ]] FragmentOut inv_srgb_fixed_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.05499999970, 2.400000095);\n"
    "    const float4 c1 = float4(0.8790000081, 0.07739999890, 0.04044999927, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_srgb_fixed_sat_unpremult");
}

void sub_1B787F2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787F30C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787F304);
}

void Initinv_srgb_nice_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_srgb_nice_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002e0\n[[ visible ]] FragmentOut inv_srgb_nice_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.05499999970, 2.400000095);\n"
    "    const float4 c1 = float4(0.8790000081, 0.07739999890, 0.04044999927, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_srgb_nice_sat_unpremult");
}

void sub_1B787F518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787F548(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787F540);
}

void Initinv_srgb_half_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_srgb_half_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000002e0\n[[ visible ]] FragmentOut inv_srgb_half_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.05499999970, 2.400000095);\n"
    "    const float4 c1 = float4(0.8790000081, 0.07739999890, 0.04044999927, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r2.xyz = r1.xyz + c0.zzz;\n"
    "    r2.xyz = pow(r2.xyz, c0.www);\n"
    "    r2.xyz = r2.xyz*c1.xxx;\n"
    "    r3.xyz = r1.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz - c1.zzz;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = r2.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_srgb_half_sat_unpremult");
}

void sub_1B787F754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787F784(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787F77CLL);
}

void Initinv_srgb_half_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_srgb_half_unpremult_hgc_visible", "//Metal1.0     \n//LEN=0000000374\n[[ visible ]] FragmentOut inv_srgb_half_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.7500000000, -1.000000000, 1.250000000, 0.05499999970);\n"
    "    const float4 c1 = float4(2.400000095, 0.8790000081, 0.07739999890, 0.04044999927);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz + c0.www;\n"
    "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
    "    r2.xyz = r2.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*c1.zzz;\n"
    "    r1.xyz = r1.xyz - c1.www;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = select(r2.xyz, -r2.xyz, r0.xyz < 0.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_srgb_half_unpremult");
}

void sub_1B787F990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787F9C0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787F9B8);
}

void Initinv_srgb_nice_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_srgb_nice_unpremult_hgc_visible", "//Metal1.0     \n//LEN=0000000374\n[[ visible ]] FragmentOut inv_srgb_nice_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.7500000000, -1.000000000, 1.250000000, 0.05499999970);\n"
    "    const float4 c1 = float4(2.400000095, 0.8790000081, 0.07739999890, 0.04044999927);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r2.xyz = r1.xyz*r0.xyz;\n"
    "    r2.xyz = fmin(r2.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz + c0.www;\n"
    "    r2.xyz = pow(r2.xyz, c1.xxx);\n"
    "    r2.xyz = r2.xyz*c1.yyy;\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r3.xyz = r1.xyz*c1.zzz;\n"
    "    r1.xyz = r1.xyz - c1.www;\n"
    "    r2.xyz = select(r2.xyz, r3.xyz, r1.xyz < 0.00000f);\n"
    "    r0.xyz = select(r2.xyz, -r2.xyz, r0.xyz < 0.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_srgb_nice_unpremult");
}

void sub_1B787FBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787FBFC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787FBF4);
}

void Initquicktime_fast_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "quicktime_fast_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000001b8\n[[ visible ]] FragmentOut quicktime_fast_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r0.xyz = sqrt(r1.xyz);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "quicktime_fast_sat_unpremult");
}

void sub_1B787FE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B787FE38(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B787FE30);
}

void Initquicktime_fixed_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "quicktime_fixed_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000001d6\n[[ visible ]] FragmentOut quicktime_fixed_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.5112500191, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r0.xyz = r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "quicktime_fixed_sat_unpremult");
}

void sub_1B7880044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7880074(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B788006CLL);
}

void Initquicktime_nice_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "quicktime_nice_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000001d5\n[[ visible ]] FragmentOut quicktime_nice_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.5112500191, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r0.xyz = r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "quicktime_nice_sat_unpremult");
}

void sub_1B7880280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78802B0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78802A8);
}

void Initquicktime_half_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "quicktime_half_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000001d5\n[[ visible ]] FragmentOut quicktime_half_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.5112500191, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r0.xyz = r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "quicktime_half_sat_unpremult");
}

void sub_1B78804BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78804EC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78804E4);
}

void Initquicktime_half_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "quicktime_half_unpremult_hgc_visible", "//Metal1.0     \n//LEN=000000024d\n[[ visible ]] FragmentOut quicktime_half_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -1.000000000, 1.330000043, 0.5112500191);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r1.xyz = fmin(r1.xyz, c0.zzz);\n"
    "    r1.xyz = pow(r1.xyz, c0.www);\n"
    "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "quicktime_half_unpremult");
}

void sub_1B78806F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7880728(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7880720);
}

void Initquicktime_nice_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "quicktime_nice_unpremult_hgc_visible", "//Metal1.0     \n//LEN=000000024d\n[[ visible ]] FragmentOut quicktime_nice_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -1.000000000, 1.330000043, 0.5112500191);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r1.xyz = fmin(r1.xyz, c0.zzz);\n"
    "    r1.xyz = pow(r1.xyz, c0.www);\n"
    "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "quicktime_nice_unpremult");
}

void sub_1B7880934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7880964(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B788095CLL);
}

void Initinv_quicktime_fast_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_quicktime_fast_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000001bd\n[[ visible ]] FragmentOut inv_quicktime_fast_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r0.xyz = r1.xyz*r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_quicktime_fast_sat_unpremult");
}

void sub_1B7880B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7880BA0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7880B98);
}

void Initinv_quicktime_fixed_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_quicktime_fixed_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000001d9\n[[ visible ]] FragmentOut inv_quicktime_fixed_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 1.955999970, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r0.xyz = r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_quicktime_fixed_sat_unpremult");
}

void sub_1B7880DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7880DDC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7880DD4);
}

void Initinv_quicktime_nice_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_quicktime_nice_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000001d8\n[[ visible ]] FragmentOut inv_quicktime_nice_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 1.955999970, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r0.xyz = r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_quicktime_nice_sat_unpremult");
}

void sub_1B7880FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7881018(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7881010);
}

void Initinv_quicktime_half_sat_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_quicktime_half_sat_unpremult_hgc_visible", "//Metal1.0     \n//LEN=00000001d8\n[[ visible ]] FragmentOut inv_quicktime_half_sat_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 1.955999970, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r0.xyz = r1.xyz;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_quicktime_half_sat_unpremult");
}

void sub_1B7881224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7881254(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B788124CLL);
}

void Initinv_quicktime_half_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_quicktime_half_unpremult_hgc_visible", "//Metal1.0     \n//LEN=0000000250\n[[ visible ]] FragmentOut inv_quicktime_half_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -1.000000000, 1.149999976, 1.955999970);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r1.xyz = fmin(r1.xyz, c0.zzz);\n"
    "    r1.xyz = pow(r1.xyz, c0.www);\n"
    "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_quicktime_half_unpremult");
}

void sub_1B7881460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B7881490(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B7881488);
}

void Initinv_quicktime_nice_unpremultProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "inv_quicktime_nice_unpremult_hgc_visible", "//Metal1.0     \n//LEN=0000000250\n[[ visible ]] FragmentOut inv_quicktime_nice_unpremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(-0.2500000000, -1.000000000, 1.149999976, 1.955999970);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = select(-c0.yyy, c0.yyy, r0.xyz < 0.00000f);\n"
    "    r1.xyz = r1.xyz*r0.xyz;\n"
    "    r1.xyz = fmin(r1.xyz, c0.zzz);\n"
    "    r1.xyz = pow(r1.xyz, c0.www);\n"
    "    r0.xyz = select(r1.xyz, -r1.xyz, r0.xyz < 0.00000f);\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "inv_quicktime_nice_unpremult");
}

void sub_1B788169C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78816CC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78816C4);
}

uint64_t Gettype0_fast_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 6);
    while (v5 < 4)
    {
      LODWORD(v79) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v7 += v8;
      v6 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 32;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 32);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v11);
      float32x4_t v15 = *(float32x4_t *)(v7 + v11 + 16);
      int8x16_t v17 = *((int8x16_t *)a2 + 15);
      float32x4_t v16 = *((float32x4_t *)a2 + 16);
      int8x16_t v18 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v16));
      int8x16_t v19 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v16));
      int8x16_t v20 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v16));
      int8x16_t v21 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v16));
      int8x16_t v22 = *((int8x16_t *)a2 + 17);
      float32x4_t v23 = *((float32x4_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(vandq_s8(v22, v18), (int8x16_t)v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v22, v19), (int8x16_t)v23));
      float32x4_t v26 = vmulq_f32(v14, (float32x4_t)vorrq_s8(vandq_s8(v22, v20), (int8x16_t)v23));
      float32x4_t v27 = vmulq_f32(v15, (float32x4_t)vorrq_s8(vandq_s8(v22, v21), (int8x16_t)v23));
      float32x4_t v28 = *((float32x4_t *)a2 + 5);
      float32x4_t v29 = *((float32x4_t *)a2 + 6);
      float32x4_t v30 = vmulq_f32(v29, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v24, v23), v28)));
      float32x4_t v31 = vmulq_f32(v29, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v25, v23), v28)));
      float32x4_t v32 = vmulq_f32(v29, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v26, v23), v28)));
      float32x4_t v33 = vmulq_f32(v29, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v27, v23), v28)));
      float32x4_t v34 = vcvtq_f32_s32(vcvtq_s32_f32(v30));
      float32x4_t v35 = vcvtq_f32_s32(vcvtq_s32_f32(v31));
      float32x4_t v36 = vcvtq_f32_s32(vcvtq_s32_f32(v32));
      float32x4_t v37 = vcvtq_f32_s32(vcvtq_s32_f32(v33));
      float32x4_t v38 = *((float32x4_t *)a2 + 7);
      float32x4_t v39 = *((float32x4_t *)a2 + 8);
      float32x4_t v40 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v30, v34), v38));
      float32x4_t v41 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v31, v35), v38));
      float32x4_t v42 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v32, v36), v38));
      float32x4_t v43 = vrsqrteq_f32(vaddq_f32(v38, vsubq_f32(v33, v37)));
      float32x4_t v44 = vaddq_f32(v39, v34);
      float32x4_t v45 = vaddq_f32(v39, v35);
      float32x4_t v46 = vaddq_f32(v39, v36);
      float32x4_t v47 = vaddq_f32(v39, v37);
      float32x4_t v48 = *((float32x4_t *)a2 + 9);
      float32x4_t v49 = *((float32x4_t *)a2 + 10);
      float32x4_t v50 = vmulq_n_f32(vsubq_f32(v44, vmulq_f32(v40, v48)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v51 = vmulq_n_f32(vsubq_f32(v45, vmulq_f32(v41, v48)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v52 = vmulq_n_f32(vsubq_f32(v46, vmulq_f32(v42, v48)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v53 = vmulq_n_f32(vsubq_f32(v47, vmulq_f32(v43, v48)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v54 = vcvtq_f32_s32(vcvtq_s32_f32(v50));
      float32x4_t v55 = vcvtq_f32_s32(vcvtq_s32_f32(v51));
      float32x4_t v56 = vcvtq_f32_s32(vcvtq_s32_f32(v52));
      float32x4_t v57 = vcvtq_f32_s32(vcvtq_s32_f32(v53));
      float32x4_t v58 = vsubq_f32(v54, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v54, v50)));
      float32x4_t v59 = vsubq_f32(v55, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v55, v51)));
      float32x4_t v60 = vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v56, v52)));
      float32x4_t v61 = vsubq_f32(v57, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v57, v53)));
      float32x4_t v62 = *((float32x4_t *)a2 + 11);
      float32x4_t v63 = *((float32x4_t *)a2 + 12);
      float32x4_t v64 = vmulq_f32(vrecpeq_f32(vsubq_f32(v62, vsubq_f32(v50, v58))), v63);
      float32x4_t v65 = vmulq_f32(vrecpeq_f32(vsubq_f32(v62, vsubq_f32(v51, v59))), v63);
      float32x4_t v66 = vmulq_f32(vrecpeq_f32(vsubq_f32(v62, vsubq_f32(v52, v60))), v63);
      float32x4_t v67 = vmulq_f32(vrecpeq_f32(vsubq_f32(v62, vsubq_f32(v53, v61))), v63);
      float32x4_t v68 = vmaxq_f32(vaddq_f32(vaddq_f32(v58, v49), vmulq_f32(v64, v64)), v23);
      float32x4_t v69 = vmaxq_f32(vaddq_f32(vaddq_f32(v49, v59), vmulq_f32(v65, v65)), v23);
      float32x4_t v70 = vmaxq_f32(vaddq_f32(vaddq_f32(v49, v60), vmulq_f32(v66, v66)), v23);
      float32x4_t v71 = vmaxq_f32(vaddq_f32(vaddq_f32(v49, v61), vmulq_f32(v67, v67)), v23);
      float32x4_t v72 = *((float32x4_t *)a2 + 13);
      float32x4_t v73 = *((float32x4_t *)a2 + 14);
      float32x4_t v74 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v24, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v68, v72), v73)));
      float32x4_t v75 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v25, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v69, v72), v73)));
      float32x4_t v76 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v26, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v70, v72), v73)));
      float32x4_t v77 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v27, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v71, v72), v73)));
      v78 = (int8x16_t *)(v6 + v11);
      v78[-2] = vbslq_s8(v17, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v74, v74, 3));
      v78[-1] = vbslq_s8(v17, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v75, v75, 3));
      int8x16_t *v78 = vbslq_s8(v17, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v76, v76, 3));
      v78[1] = vbslq_s8(v17, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v77, v77, 3));
      v10 -= 4;
      v11 += 64;
    }
    while (v5 + v10 > 3);
    LODWORD(v79) = -v10;
    if ((int)v79 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v79 = v79;
    do
    {
      int8x16_t v80 = *((int8x16_t *)a2 + 15);
      float32x4_t v81 = *((float32x4_t *)a2 + 3);
      float32x4_t v82 = vmulq_f32(*(float32x4_t *)(v7 + 16 * v79), (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v7 + 16 * v79), 3), *((float32x4_t *)a2 + 16)))), (int8x16_t)v81));
      float32x4_t v83 = *((float32x4_t *)a2 + 5);
      float32x4_t v84 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v82, v81), v83)));
      float32x4_t v85 = vcvtq_f32_s32(vcvtq_s32_f32(v84));
      float32x4_t v86 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v85), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v84, v85))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v87 = vcvtq_f32_s32(vcvtq_s32_f32(v86));
      float32x4_t v88 = vsubq_f32(v87, (float32x4_t)vandq_s8((int8x16_t)v83, (int8x16_t)vcgtq_f32(v87, v86)));
      float32x4_t v89 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v86, v88))), *((float32x4_t *)a2 + 12));
      float32x4_t v90 = (float32x4_t)vbslq_s8(v80, (int8x16_t)v82, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v88), vmulq_f32(v89, v89)), v81), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))));
      *(int8x16_t *)(v6 + 16 * v79++) = vbslq_s8(v80, (int8x16_t)v82, (int8x16_t)vmulq_laneq_f32(v90, v90, 3));
    }
    while (v79 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype0_fixed_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 6);
    while (v5 < 4)
    {
      LODWORD(v84) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v7 += v8;
      v6 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 32;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 32);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v11);
      float32x4_t v15 = *(float32x4_t *)(v7 + v11 + 16);
      int8x16_t v17 = *((int8x16_t *)a2 + 15);
      float32x4_t v16 = *((float32x4_t *)a2 + 16);
      float32x4_t v18 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v16));
      float32x4_t v19 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v16));
      float32x4_t v20 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v16));
      float32x4_t v21 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      float32x4_t v22 = *((float32x4_t *)a2 + 18);
      int8x16_t v24 = (int8x16_t)vmulq_f32(v21, v22);
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v18, v22));
      int8x16_t v26 = vandq_s8(v23, (int8x16_t)vmulq_f32(v19, v22));
      int8x16_t v27 = vandq_s8(v23, (int8x16_t)vmulq_f32(v20, v22));
      float32x4_t v28 = *((float32x4_t *)a2 + 3);
      float32x4_t v29 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v25, (int8x16_t)v28));
      float32x4_t v30 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v26, (int8x16_t)v28));
      float32x4_t v31 = vmulq_f32(v14, (float32x4_t)vorrq_s8(v27, (int8x16_t)v28));
      float32x4_t v32 = vmulq_f32(v15, (float32x4_t)vorrq_s8(vandq_s8(v23, v24), (int8x16_t)v28));
      float32x4_t v33 = *((float32x4_t *)a2 + 5);
      float32x4_t v34 = *((float32x4_t *)a2 + 6);
      float32x4_t v35 = vmulq_f32(v34, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v29, v28), v33)));
      float32x4_t v36 = vmulq_f32(v34, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v30, v28), v33)));
      float32x4_t v37 = vmulq_f32(v34, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v31, v28), v33)));
      float32x4_t v38 = vmulq_f32(v34, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v32, v28), v33)));
      float32x4_t v39 = vcvtq_f32_s32(vcvtq_s32_f32(v35));
      float32x4_t v40 = vcvtq_f32_s32(vcvtq_s32_f32(v36));
      float32x4_t v41 = vcvtq_f32_s32(vcvtq_s32_f32(v37));
      float32x4_t v42 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
      float32x4_t v43 = *((float32x4_t *)a2 + 7);
      float32x4_t v44 = *((float32x4_t *)a2 + 8);
      float32x4_t v45 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v35, v39), v43));
      float32x4_t v46 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v36, v40), v43));
      float32x4_t v47 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v37, v41), v43));
      float32x4_t v48 = vrsqrteq_f32(vaddq_f32(v43, vsubq_f32(v38, v42)));
      float32x4_t v49 = vaddq_f32(v44, v39);
      float32x4_t v50 = vaddq_f32(v44, v40);
      float32x4_t v51 = vaddq_f32(v44, v41);
      float32x4_t v52 = vaddq_f32(v44, v42);
      float32x4_t v53 = *((float32x4_t *)a2 + 9);
      float32x4_t v54 = *((float32x4_t *)a2 + 10);
      float32x4_t v55 = vmulq_n_f32(vsubq_f32(v49, vmulq_f32(v45, v53)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v56 = vmulq_n_f32(vsubq_f32(v50, vmulq_f32(v46, v53)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v57 = vmulq_n_f32(vsubq_f32(v51, vmulq_f32(v47, v53)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v58 = vmulq_n_f32(vsubq_f32(v52, vmulq_f32(v48, v53)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v59 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
      float32x4_t v60 = vcvtq_f32_s32(vcvtq_s32_f32(v56));
      float32x4_t v61 = vcvtq_f32_s32(vcvtq_s32_f32(v57));
      float32x4_t v62 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v63 = vsubq_f32(v59, (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v59, v55)));
      float32x4_t v64 = vsubq_f32(v60, (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v60, v56)));
      float32x4_t v65 = vsubq_f32(v61, (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v61, v57)));
      float32x4_t v66 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v62, v58)));
      float32x4_t v67 = *((float32x4_t *)a2 + 11);
      float32x4_t v68 = *((float32x4_t *)a2 + 12);
      float32x4_t v69 = vmulq_f32(vrecpeq_f32(vsubq_f32(v67, vsubq_f32(v55, v63))), v68);
      float32x4_t v70 = vmulq_f32(vrecpeq_f32(vsubq_f32(v67, vsubq_f32(v56, v64))), v68);
      float32x4_t v71 = vmulq_f32(vrecpeq_f32(vsubq_f32(v67, vsubq_f32(v57, v65))), v68);
      float32x4_t v72 = vmulq_f32(vrecpeq_f32(vsubq_f32(v67, vsubq_f32(v58, v66))), v68);
      float32x4_t v73 = vmaxq_f32(vaddq_f32(vaddq_f32(v63, v54), vmulq_f32(v69, v69)), v28);
      float32x4_t v74 = vmaxq_f32(vaddq_f32(vaddq_f32(v54, v64), vmulq_f32(v70, v70)), v28);
      float32x4_t v75 = vmaxq_f32(vaddq_f32(vaddq_f32(v54, v65), vmulq_f32(v71, v71)), v28);
      float32x4_t v76 = vmaxq_f32(vaddq_f32(vaddq_f32(v54, v66), vmulq_f32(v72, v72)), v28);
      float32x4_t v77 = *((float32x4_t *)a2 + 13);
      float32x4_t v78 = *((float32x4_t *)a2 + 14);
      float32x4_t v79 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v29, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v73, v77), v78)));
      float32x4_t v80 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v30, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v74, v77), v78)));
      float32x4_t v81 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v31, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v75, v77), v78)));
      float32x4_t v82 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v32, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v76, v77), v78)));
      float32x4_t v83 = (int8x16_t *)(v6 + v11);
      v83[-2] = vbslq_s8(v17, (int8x16_t)v29, (int8x16_t)vmulq_laneq_f32(v79, v79, 3));
      v83[-1] = vbslq_s8(v17, (int8x16_t)v30, (int8x16_t)vmulq_laneq_f32(v80, v80, 3));
      *float32x4_t v83 = vbslq_s8(v17, (int8x16_t)v31, (int8x16_t)vmulq_laneq_f32(v81, v81, 3));
      v83[1] = vbslq_s8(v17, (int8x16_t)v32, (int8x16_t)vmulq_laneq_f32(v82, v82, 3));
      v10 -= 4;
      v11 += 64;
    }
    while (v5 + v10 > 3);
    LODWORD(v84) = -v10;
    if ((int)v84 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v84 = v84;
    do
    {
      int8x16_t v85 = *((int8x16_t *)a2 + 15);
      float32x4_t v86 = *((float32x4_t *)a2 + 3);
      float32x4_t v87 = vmulq_f32(*(float32x4_t *)(v7 + 16 * v84), (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v7 + 16 * v84), 3), *((float32x4_t *)a2 + 16))), *((float32x4_t *)a2 + 18))), (int8x16_t)v86));
      float32x4_t v88 = *((float32x4_t *)a2 + 5);
      float32x4_t v89 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v87, v86), v88)));
      float32x4_t v90 = vcvtq_f32_s32(vcvtq_s32_f32(v89));
      float32x4_t v91 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v90), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v89, v90))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v92 = vcvtq_f32_s32(vcvtq_s32_f32(v91));
      float32x4_t v93 = vsubq_f32(v92, (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v92, v91)));
      float32x4_t v94 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v91, v93))), *((float32x4_t *)a2 + 12));
      float32x4_t v95 = (float32x4_t)vbslq_s8(v85, (int8x16_t)v87, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v93), vmulq_f32(v94, v94)), v86), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))));
      *(int8x16_t *)(v6 + 16 * v84++) = vbslq_s8(v85, (int8x16_t)v87, (int8x16_t)vmulq_laneq_f32(v95, v95, 3));
    }
    while (v84 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype0_nice_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v88 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17));
      int8x16_t v24 = *((int8x16_t *)a2 + 17);
      float32x4_t v25 = *((float32x4_t *)a2 + 3);
      float32x4_t v26 = vmulq_f32(v12, (float32x4_t)vorrq_s8(vandq_s8(v24, v22), (int8x16_t)v25));
      float32x4_t v27 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v24, v23), (int8x16_t)v25));
      float32x4_t v28 = *((float32x4_t *)a2 + 5);
      int8x16_t v29 = (int8x16_t)vminq_f32(vmaxq_f32(v26, v25), v28);
      int8x16_t v30 = (int8x16_t)vminq_f32(vmaxq_f32(v27, v25), v28);
      int8x16_t v31 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v25)), v25);
      float32x4_t v32 = (float32x4_t)vbslq_s8(v31, (int8x16_t)v28, v29);
      float32x4_t v33 = (float32x4_t)vbslq_s8(v31, (int8x16_t)v28, v30);
      int8x16_t v35 = *((int8x16_t *)a2 + 19);
      float32x4_t v34 = *((float32x4_t *)a2 + 20);
      float32x4_t v36 = (float32x4_t)vorrq_s8(vandq_s8(v35, (int8x16_t)v32), (int8x16_t)v28);
      float32x4_t v37 = (float32x4_t)vorrq_s8(vandq_s8(v35, (int8x16_t)v33), (int8x16_t)v28);
      int8x16_t v38 = *((int8x16_t *)a2 + 21);
      float32x4_t v39 = *((float32x4_t *)a2 + 22);
      float32x4_t v40 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v33, 0x17uLL)), (float32x4_t)vandq_s8(v38, (int8x16_t)vcgtq_f32(v34, v33)));
      float32x4_t v41 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v32, 0x17uLL)), (float32x4_t)vandq_s8(v38, (int8x16_t)vcgtq_f32(v34, v32))), v39);
      float32x4_t v42 = *((float32x4_t *)a2 + 23);
      float32x4_t v43 = *((float32x4_t *)a2 + 24);
      float32x4_t v44 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v36, v42));
      float32x4_t v45 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v37, v42));
      float32x4_t v46 = vaddq_f32(v41, v44);
      float32x4_t v47 = vaddq_f32(vsubq_f32(v40, v39), v45);
      float32x4_t v48 = vsubq_f32(vsubq_f32(v36, v28), vmulq_f32(vmulq_f32(v43, v44), v36));
      float32x4_t v49 = vsubq_f32(vsubq_f32(v37, v28), vmulq_f32(vmulq_f32(v43, v45), v37));
      float32x4_t v50 = vmulq_f32(v48, v48);
      float32x4_t v51 = *((float32x4_t *)a2 + 37);
      float32x4_t v52 = *((float32x4_t *)a2 + 38);
      float32x4_t v53 = *((float32x4_t *)a2 + 39);
      float32x4_t v54 = *((float32x4_t *)a2 + 40);
      float32x4_t v55 = vaddq_f32(v51, vmulq_f32(v52, v48));
      float32x4_t v56 = vaddq_f32(v53, vmulq_f32(v54, v48));
      float32x4_t v57 = vaddq_f32(v53, vmulq_f32(v54, v49));
      float32x4_t v58 = vaddq_f32(v51, vmulq_f32(v52, v49));
      float32x4_t v59 = *((float32x4_t *)a2 + 41);
      float32x4_t v60 = *((float32x4_t *)a2 + 42);
      float32x4_t v61 = vaddq_f32(v59, vmulq_f32(v60, v48));
      float32x4_t v62 = vaddq_f32(v59, vmulq_f32(v60, v49));
      float32x4_t v63 = vmulq_f32(v49, v49);
      float32x4_t v64 = vaddq_f32(v61, vmulq_f32(v50, vaddq_f32(v55, vmulq_f32(v50, v56))));
      float32x4_t v65 = vaddq_f32(v62, vmulq_f32(v63, vaddq_f32(v58, vmulq_f32(v63, v57))));
      float32x4_t v66 = *((float32x4_t *)a2 + 43);
      float32x4_t v67 = *((float32x4_t *)a2 + 44);
      float32x4_t v68 = vmulq_n_f32(vaddq_f32(v47, vmulq_f32(v49, vaddq_f32(v66, vmulq_f32(v49, v65)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v69 = *((float32x4_t *)a2 + 29);
      float32x4_t v70 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v46, vmulq_f32(v48, vaddq_f32(v66, vmulq_f32(v48, v64)))), COERCE_FLOAT(*(_OWORD *)a2)), v69);
      float32x4_t v71 = vmaxq_f32(v68, v69);
      float32x4_t v72 = vcvtq_f32_s32(vcvtq_s32_f32(v70));
      float32x4_t v73 = vcvtq_f32_s32(vcvtq_s32_f32(v71));
      float32x4_t v74 = vsubq_f32(v72, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v72, v70)));
      float32x4_t v75 = vsubq_f32(v73, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v73, v71)));
      float32x4_t v76 = vsubq_f32(v70, v74);
      float32x4_t v77 = vsubq_f32(v71, v75);
      float32x4_t v78 = *((float32x4_t *)a2 + 45);
      float32x4_t v79 = *((float32x4_t *)a2 + 46);
      float32x4_t v80 = vaddq_f32(v67, vmulq_f32(v78, v76));
      float32x4_t v81 = vaddq_f32(v67, vmulq_f32(v78, v77));
      float32x4_t v82 = *((float32x4_t *)a2 + 47);
      float32x4_t v83 = *((float32x4_t *)a2 + 48);
      int32x4_t v84 = *((int32x4_t *)a2 + 33);
      float32x4_t v85 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v26, (int8x16_t)vmulq_f32(vaddq_f32(v28, vmulq_f32(v76, vaddq_f32(v83, vmulq_f32(v76, vaddq_f32(vaddq_f32(v79, vmulq_f32(v76, v82)), vmulq_f32(vmulq_f32(v76, v76), v80)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v84, vcvtq_s32_f32(v74)), 0x17uLL)));
      float32x4_t v86 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vmulq_f32(vaddq_f32(v28, vmulq_f32(v77, vaddq_f32(v83, vmulq_f32(v77, vaddq_f32(vaddq_f32(v79, vmulq_f32(v82, v77)), vmulq_f32(vmulq_f32(v77, v77), v81)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v84, vcvtq_s32_f32(v75)), 0x17uLL)));
      float32x4_t v87 = (int8x16_t *)(v6 + v11);
      v87[-1] = vbslq_s8(v15, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v85, v85, 3));
      *float32x4_t v87 = vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v86, v86, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v88 = -v10;
    if (v88 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v89 = 16 * v88;
    float32x4_t v90 = *(float32x4_t *)(v7 + v89);
    int8x16_t v91 = *((int8x16_t *)a2 + 15);
    float32x4_t v92 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v90, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v93 = vrecpeq_f32(v92);
    float32x4_t v94 = vmulq_f32(v93, vrecpsq_f32(v93, v92));
    int8x16_t v95 = vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v94, vrecpsq_f32(v94, v92)));
    float32x4_t v96 = *((float32x4_t *)a2 + 3);
    float32x4_t v97 = vmulq_f32(v90, (float32x4_t)vorrq_s8(v95, (int8x16_t)v96));
    float32x4_t v98 = *((float32x4_t *)a2 + 5);
    float32x4_t v99 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v98, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v96)), v96), (int8x16_t)v98, (int8x16_t)vminq_f32(vmaxq_f32(v97, v96), v98));
    float32x4_t v100 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v99), (int8x16_t)v98);
    float32x4_t v101 = (float32x4_t)vandq_s8((int8x16_t)v98, (int8x16_t)vcgtq_f32(v100, *((float32x4_t *)a2 + 23)));
    float32x4_t v102 = vsubq_f32(vsubq_f32(v100, v98), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v101), v100));
    float32x4_t v103 = vmulq_f32(v102, v102);
    float32x4_t v104 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v99, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v99))), *((float32x4_t *)a2 + 22)), v101), vmulq_f32(v102, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v102, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v102)),
                         vmulq_f32(v103, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v102)), vmulq_f32(v103, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v102)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
    float32x4_t v105 = vcvtq_f32_s32(vcvtq_s32_f32(v104));
    float32x4_t v106 = vsubq_f32(v105, (float32x4_t)vandq_s8((int8x16_t)v98, (int8x16_t)vcgtq_f32(v105, v104)));
    float32x4_t v107 = vsubq_f32(v104, v106);
    float32x4_t v108 = (float32x4_t)vbslq_s8(v91, (int8x16_t)v97, (int8x16_t)vmulq_f32(vaddq_f32(v98, vmulq_f32(v107, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v107, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v107)), vmulq_f32(vmulq_f32(v107, v107), vaddq_f32(*((float32x4_t *)a2 + 44),
                                                     vmulq_f32(*((float32x4_t *)a2 + 45), v107)))))))),
                                       (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v106)), 0x17uLL)));
    *(int8x16_t *)(v6 + v89) = vbslq_s8(v91, (int8x16_t)v97, (int8x16_t)vmulq_laneq_f32(v108, v108, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype0_half_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v73 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      float32x4_t v23 = *((float32x4_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, (int8x16_t)v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), (int8x16_t)v23));
      float32x4_t v26 = vmaxq_f32(v24, v23);
      float32x4_t v27 = vmaxq_f32(v25, v23);
      float32x4_t v28 = *((float32x4_t *)a2 + 5);
      float32x4_t v29 = vminq_f32(v26, v28);
      float32x4_t v30 = vminq_f32(v27, v28);
      int8x16_t v31 = *((int8x16_t *)a2 + 19);
      float32x4_t v32 = *((float32x4_t *)a2 + 20);
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8(v31, (int8x16_t)v29), (int8x16_t)v28);
      float32x4_t v34 = (float32x4_t)vorrq_s8(vandq_s8(v31, (int8x16_t)v30), (int8x16_t)v28);
      int8x16_t v35 = *((int8x16_t *)a2 + 21);
      float32x4_t v36 = *((float32x4_t *)a2 + 22);
      float32x4_t v37 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v32, v30)));
      float32x4_t v38 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v29, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v32, v29))), v36);
      float32x4_t v39 = *((float32x4_t *)a2 + 23);
      float32x4_t v40 = *((float32x4_t *)a2 + 24);
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v33, v39));
      float32x4_t v42 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v34, v39));
      float32x4_t v43 = vaddq_f32(v38, v41);
      float32x4_t v44 = vaddq_f32(vsubq_f32(v37, v36), v42);
      float32x4_t v45 = vsubq_f32(vsubq_f32(v33, v28), vmulq_f32(vmulq_f32(v40, v41), v33));
      float32x4_t v46 = vsubq_f32(vsubq_f32(v34, v28), vmulq_f32(vmulq_f32(v40, v42), v34));
      float32x4_t v47 = *((float32x4_t *)a2 + 25);
      float32x4_t v48 = *((float32x4_t *)a2 + 26);
      float32x4_t v49 = vaddq_f32(v47, vmulq_f32(v48, v45));
      float32x4_t v50 = vaddq_f32(v47, vmulq_f32(v48, v46));
      float32x4_t v51 = *((float32x4_t *)a2 + 27);
      float32x4_t v52 = *((float32x4_t *)a2 + 28);
      float32x4_t v53 = vmulq_n_f32(vaddq_f32(v44, vmulq_f32(v46, vaddq_f32(vaddq_f32(v51, vmulq_f32(v46, v52)), vmulq_f32(vmulq_f32(v46, v46), v50)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v54 = *((float32x4_t *)a2 + 29);
      float32x4_t v55 = *((float32x4_t *)a2 + 30);
      float32x4_t v56 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v43, vmulq_f32(v45, vaddq_f32(vaddq_f32(v51, vmulq_f32(v45, v52)), vmulq_f32(vmulq_f32(v45, v45), v49)))), COERCE_FLOAT(*(_OWORD *)a2)), v54);
      float32x4_t v57 = vmaxq_f32(v53, v54);
      float32x4_t v58 = vcvtq_f32_s32(vcvtq_s32_f32(v56));
      float32x4_t v59 = vcvtq_f32_s32(vcvtq_s32_f32(v57));
      float32x4_t v60 = vsubq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v58, v56)));
      float32x4_t v61 = vsubq_f32(v59, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v59, v57)));
      float32x4_t v62 = vsubq_f32(v56, v60);
      float32x4_t v63 = vsubq_f32(v57, v61);
      float32x4_t v64 = *((float32x4_t *)a2 + 31);
      float32x4_t v65 = *((float32x4_t *)a2 + 32);
      float32x4_t v66 = vmulq_f32(v63, vaddq_f32(v65, vmulq_f32(v63, vaddq_f32(v55, vmulq_f32(v64, v63)))));
      float32x4_t v67 = vaddq_f32(v28, vmulq_f32(v62, vaddq_f32(v65, vmulq_f32(v62, vaddq_f32(v55, vmulq_f32(v64, v62))))));
      int32x4_t v68 = vcvtq_s32_f32(v61);
      int32x4_t v69 = *((int32x4_t *)a2 + 33);
      float32x4_t v70 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vmulq_f32(v67, (float32x4_t)vshlq_n_s32(vaddq_s32(v69, vcvtq_s32_f32(v60)), 0x17uLL)));
      float32x4_t v71 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vmulq_f32(vaddq_f32(v28, v66), (float32x4_t)vshlq_n_s32(vaddq_s32(v69, v68), 0x17uLL)));
      float32x4_t v72 = (int8x16_t *)(v6 + v11);
      v72[-1] = vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v70, v70, 3));
      *float32x4_t v72 = vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v71, v71, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v73 = -v10;
    if (v73 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v74 = 16 * v73;
    float32x4_t v75 = *(float32x4_t *)(v7 + v74);
    int8x16_t v76 = *((int8x16_t *)a2 + 15);
    float32x4_t v77 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v78 = vmulq_f32(vrecpeq_f32(v77), *((float32x4_t *)a2 + 18));
    int8x16_t v79 = vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v78, vrecpsq_f32(v78, v77)));
    float32x4_t v80 = *((float32x4_t *)a2 + 3);
    float32x4_t v81 = vmulq_f32(v75, (float32x4_t)vorrq_s8(v79, (int8x16_t)v80));
    float32x4_t v82 = vmaxq_f32(v81, v80);
    float32x4_t v83 = *((float32x4_t *)a2 + 5);
    float32x4_t v84 = vminq_f32(v82, v83);
    float32x4_t v85 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v84), (int8x16_t)v83);
    float32x4_t v86 = (float32x4_t)vandq_s8((int8x16_t)v83, (int8x16_t)vcgtq_f32(v85, *((float32x4_t *)a2 + 23)));
    float32x4_t v87 = vsubq_f32(vsubq_f32(v85, v83), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v86), v85));
    float32x4_t v88 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v84, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v84))), *((float32x4_t *)a2 + 22)), v86), vmulq_f32(v87, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v87, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v87, v87), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v87)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v89 = vcvtq_f32_s32(vcvtq_s32_f32(v88));
    float32x4_t v90 = vsubq_f32(v89, (float32x4_t)vandq_s8((int8x16_t)v83, (int8x16_t)vcgtq_f32(v89, v88)));
    float32x4_t v91 = vsubq_f32(v88, v90);
    float32x4_t v92 = (float32x4_t)vbslq_s8(v76, (int8x16_t)v81, (int8x16_t)vmulq_f32(vaddq_f32(v83, vmulq_f32(v91, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v91, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v91)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v90)), 0x17uLL)));
    *(int8x16_t *)(v6 + v74) = vbslq_s8(v76, (int8x16_t)v81, (int8x16_t)vmulq_laneq_f32(v92, v92, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype0_halfTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v71 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      float32x4_t v23 = *((float32x4_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, (int8x16_t)v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), (int8x16_t)v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 5);
      int32x4_t v28 = *((int32x4_t *)a2 + 33);
      int8x16_t v27 = *((int8x16_t *)a2 + 34);
      float32x4_t v29 = vmulq_f32(v24, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v23, v24), v27, (int8x16_t)v26));
      float32x4_t v30 = vmulq_f32(v25, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v23, v25), v27, (int8x16_t)v26));
      float32x4_t v31 = *((float32x4_t *)a2 + 35);
      int8x16_t v32 = *((int8x16_t *)a2 + 36);
      float32x4_t v33 = vminq_f32(v29, v31);
      float32x4_t v34 = vminq_f32(v30, v31);
      int8x16_t v35 = *((int8x16_t *)a2 + 19);
      float32x4_t v36 = *((float32x4_t *)a2 + 20);
      float32x4_t v37 = (float32x4_t)vorrq_s8(vandq_s8(v35, (int8x16_t)v33), (int8x16_t)v26);
      float32x4_t v38 = (float32x4_t)vorrq_s8(vandq_s8(v35, (int8x16_t)v34), (int8x16_t)v26);
      int8x16_t v39 = *((int8x16_t *)a2 + 21);
      float32x4_t v40 = *((float32x4_t *)a2 + 22);
      float32x4_t v41 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v33, 0x17uLL)), (float32x4_t)vandq_s8(v39, (int8x16_t)vcgtq_f32(v36, v33)));
      float32x4_t v42 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v34, 0x17uLL)), (float32x4_t)vandq_s8(v39, (int8x16_t)vcgtq_f32(v36, v34)));
      float32x4_t v43 = *((float32x4_t *)a2 + 23);
      float32x4_t v44 = *((float32x4_t *)a2 + 24);
      float32x4_t v45 = (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v37, v43));
      float32x4_t v46 = (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v38, v43));
      float32x4_t v47 = vsubq_f32(v42, v40);
      float32x4_t v48 = vaddq_f32(vsubq_f32(v41, v40), v45);
      float32x4_t v49 = vsubq_f32(vsubq_f32(v37, v26), vmulq_f32(vmulq_f32(v44, v45), v37));
      float32x4_t v50 = vsubq_f32(vsubq_f32(v38, v26), vmulq_f32(vmulq_f32(v44, v46), v38));
      float32x4_t v51 = *((float32x4_t *)a2 + 25);
      float32x4_t v52 = *((float32x4_t *)a2 + 26);
      float32x4_t v53 = *((float32x4_t *)a2 + 27);
      float32x4_t v54 = *((float32x4_t *)a2 + 28);
      float32x4_t v55 = vmulq_n_f32(vaddq_f32(vaddq_f32(v47, v46), vmulq_f32(v50, vaddq_f32(vaddq_f32(v53, vmulq_f32(v50, v54)), vmulq_f32(vmulq_f32(v50, v50), vaddq_f32(v51, vmulq_f32(v52, v50)))))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v57 = *((float32x4_t *)a2 + 29);
      float32x4_t v56 = *((float32x4_t *)a2 + 30);
      float32x4_t v58 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v48, vmulq_f32(v49, vaddq_f32(vaddq_f32(v53, vmulq_f32(v49, v54)), vmulq_f32(vmulq_f32(v49, v49), vaddq_f32(v51, vmulq_f32(v52, v49)))))), COERCE_FLOAT(*(_OWORD *)a2)), v57);
      float32x4_t v59 = vmaxq_f32(v55, v57);
      float32x4_t v60 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v61 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v62 = vsubq_f32(v60, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v60, v58)));
      float32x4_t v63 = vsubq_f32(v61, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v61, v59)));
      float32x4_t v64 = vsubq_f32(v58, v62);
      float32x4_t v65 = vsubq_f32(v59, v63);
      float32x4_t v66 = *((float32x4_t *)a2 + 31);
      float32x4_t v67 = *((float32x4_t *)a2 + 32);
      float32x4_t v68 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v24, veorq_s8(vandq_s8(v32, (int8x16_t)v24), (int8x16_t)vmulq_f32(vaddq_f32(v26, vmulq_f32(v64, vaddq_f32(v67, vmulq_f32(v64, vaddq_f32(v56, vmulq_f32(v66, v64)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v28, vcvtq_s32_f32(v62)), 0x17uLL))));
      float32x4_t v69 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v25, veorq_s8(vandq_s8(v32, (int8x16_t)v25), (int8x16_t)vmulq_f32(vaddq_f32(v26, vmulq_f32(v65, vaddq_f32(v67, vmulq_f32(v65, vaddq_f32(v56, vmulq_f32(v66, v65)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v28, vcvtq_s32_f32(v63)), 0x17uLL))));
      float32x4_t v70 = (int8x16_t *)(v6 + v11);
      v70[-1] = vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v68, v68, 3));
      *float32x4_t v70 = vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v69, v69, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v71 = -v10;
    if (v71 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v72 = 16 * v71;
    float32x4_t v73 = *(float32x4_t *)(v7 + v72);
    int8x16_t v74 = *((int8x16_t *)a2 + 15);
    float32x4_t v75 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v76 = vmulq_f32(vrecpeq_f32(v75), *((float32x4_t *)a2 + 18));
    int8x16_t v77 = vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v76, vrecpsq_f32(v76, v75)));
    float32x4_t v78 = *((float32x4_t *)a2 + 3);
    float32x4_t v79 = vmulq_f32(v73, (float32x4_t)vorrq_s8(v77, (int8x16_t)v78));
    int8x16_t v80 = (int8x16_t)vcgtq_f32(v78, v79);
    float32x4_t v81 = *((float32x4_t *)a2 + 5);
    float32x4_t v82 = vminq_f32(vmulq_f32(v79, (float32x4_t)vbslq_s8(v80, *((int8x16_t *)a2 + 34), (int8x16_t)v81)), *((float32x4_t *)a2 + 35));
    float32x4_t v83 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v82), (int8x16_t)v81);
    float32x4_t v84 = (float32x4_t)vandq_s8((int8x16_t)v81, (int8x16_t)vcgtq_f32(v83, *((float32x4_t *)a2 + 23)));
    float32x4_t v85 = vsubq_f32(vsubq_f32(v83, v81), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v84), v83));
    float32x4_t v86 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v82, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v82))), *((float32x4_t *)a2 + 22)), v84), vmulq_f32(v85, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v85, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v85, v85), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v85)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v87 = vcvtq_f32_s32(vcvtq_s32_f32(v86));
    float32x4_t v88 = vsubq_f32(v87, (float32x4_t)vandq_s8((int8x16_t)v81, (int8x16_t)vcgtq_f32(v87, v86)));
    float32x4_t v89 = vsubq_f32(v86, v88);
    float32x4_t v90 = (float32x4_t)vbslq_s8(v74, (int8x16_t)v79, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v79), (int8x16_t)vmulq_f32(vaddq_f32(v81, vmulq_f32(v89, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v89, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v89)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v88)), 0x17uLL))));
    *(int8x16_t *)(v6 + v72) = vbslq_s8(v74, (int8x16_t)v79, (int8x16_t)vmulq_laneq_f32(v90, v90, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype0_niceTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v92 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      int8x16_t v24 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      float32x4_t v25 = *((float32x4_t *)a2 + 3);
      float32x4_t v26 = vmulq_f32(v12, (float32x4_t)vorrq_s8(vandq_s8(v23, v22), (int8x16_t)v25));
      float32x4_t v27 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v24, (int8x16_t)v25));
      float32x4_t v28 = *((float32x4_t *)a2 + 5);
      int32x4_t v29 = *((int32x4_t *)a2 + 33);
      int8x16_t v30 = *((int8x16_t *)a2 + 34);
      float32x4_t v31 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v25, v27), v30, (int8x16_t)v28);
      float32x4_t v33 = *((float32x4_t *)a2 + 35);
      int8x16_t v32 = *((int8x16_t *)a2 + 36);
      int8x16_t v34 = (int8x16_t)vminq_f32(vmulq_f32(v26, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v25, v26), v30, (int8x16_t)v28)), v33);
      int8x16_t v35 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v25)), v25);
      float32x4_t v36 = (float32x4_t)vbslq_s8(v35, (int8x16_t)v28, v34);
      float32x4_t v37 = (float32x4_t)vbslq_s8(v35, (int8x16_t)v28, (int8x16_t)vminq_f32(vmulq_f32(v27, v31), v33));
      int8x16_t v38 = *((int8x16_t *)a2 + 19);
      float32x4_t v39 = *((float32x4_t *)a2 + 20);
      float32x4_t v40 = (float32x4_t)vorrq_s8(vandq_s8(v38, (int8x16_t)v36), (int8x16_t)v28);
      int8x16_t v41 = *((int8x16_t *)a2 + 21);
      float32x4_t v42 = *((float32x4_t *)a2 + 22);
      float32x4_t v43 = (float32x4_t)vorrq_s8(vandq_s8(v38, (int8x16_t)v37), (int8x16_t)v28);
      float32x4_t v44 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v37, 0x17uLL)), (float32x4_t)vandq_s8(v41, (int8x16_t)vcgtq_f32(v39, v37)));
      float32x4_t v45 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x17uLL)), (float32x4_t)vandq_s8(v41, (int8x16_t)vcgtq_f32(v39, v36))), v42);
      float32x4_t v46 = *((float32x4_t *)a2 + 23);
      float32x4_t v47 = *((float32x4_t *)a2 + 24);
      float32x4_t v48 = vsubq_f32(v44, v42);
      float32x4_t v49 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v40, v46));
      float32x4_t v50 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v43, v46));
      float32x4_t v51 = vaddq_f32(v45, v49);
      float32x4_t v52 = vsubq_f32(vsubq_f32(v40, v28), vmulq_f32(vmulq_f32(v47, v49), v40));
      float32x4_t v53 = vsubq_f32(vsubq_f32(v43, v28), vmulq_f32(vmulq_f32(v47, v50), v43));
      float32x4_t v54 = vmulq_f32(v52, v52);
      float32x4_t v55 = *((float32x4_t *)a2 + 37);
      float32x4_t v56 = *((float32x4_t *)a2 + 38);
      float32x4_t v57 = vaddq_f32(v55, vmulq_f32(v56, v52));
      float32x4_t v58 = vaddq_f32(v55, vmulq_f32(v56, v53));
      float32x4_t v59 = *((float32x4_t *)a2 + 39);
      float32x4_t v60 = *((float32x4_t *)a2 + 40);
      float32x4_t v61 = vaddq_f32(v59, vmulq_f32(v60, v52));
      float32x4_t v62 = vaddq_f32(v59, vmulq_f32(v60, v53));
      float32x4_t v63 = *((float32x4_t *)a2 + 41);
      float32x4_t v64 = *((float32x4_t *)a2 + 42);
      float32x4_t v65 = vaddq_f32(v63, vmulq_f32(v64, v52));
      float32x4_t v66 = vaddq_f32(v63, vmulq_f32(v64, v53));
      float32x4_t v67 = vmulq_f32(v53, v53);
      float32x4_t v68 = vaddq_f32(v66, vmulq_f32(v67, vaddq_f32(v58, vmulq_f32(v67, v62))));
      float32x4_t v69 = vmulq_f32(v52, vaddq_f32(v65, vmulq_f32(v54, vaddq_f32(v57, vmulq_f32(v54, v61)))));
      float32x4_t v70 = *((float32x4_t *)a2 + 43);
      float32x4_t v71 = *((float32x4_t *)a2 + 44);
      float32x4_t v72 = vaddq_f32(vaddq_f32(v48, v50), vmulq_f32(v53, vaddq_f32(v70, vmulq_f32(v53, v68))));
      float32x4_t v73 = vmulq_n_f32(vaddq_f32(v51, vmulq_f32(v52, vaddq_f32(v70, v69))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v74 = *((float32x4_t *)a2 + 29);
      float32x4_t v75 = vmaxq_f32(v73, v74);
      float32x4_t v76 = vmaxq_f32(vmulq_n_f32(v72, COERCE_FLOAT(*(_OWORD *)a2)), v74);
      float32x4_t v77 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
      float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v76));
      float32x4_t v79 = vsubq_f32(v77, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v77, v75)));
      float32x4_t v80 = vsubq_f32(v78, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v78, v76)));
      float32x4_t v81 = vsubq_f32(v75, v79);
      float32x4_t v82 = vsubq_f32(v76, v80);
      float32x4_t v83 = *((float32x4_t *)a2 + 45);
      float32x4_t v84 = *((float32x4_t *)a2 + 46);
      float32x4_t v85 = *((float32x4_t *)a2 + 47);
      float32x4_t v86 = *((float32x4_t *)a2 + 48);
      int32x4_t v87 = vaddq_s32(v29, vcvtq_s32_f32(v79));
      int8x16_t v88 = (int8x16_t)vmulq_f32(vaddq_f32(v28, vmulq_f32(v82, vaddq_f32(v86, vmulq_f32(v82, vaddq_f32(vaddq_f32(v84, vmulq_f32(v85, v82)), vmulq_f32(vmulq_f32(v82, v82), vaddq_f32(v71, vmulq_f32(v83, v82)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v29, vcvtq_s32_f32(v80)), 0x17uLL));
      float32x4_t v89 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v26, veorq_s8(vandq_s8(v32, (int8x16_t)v26), (int8x16_t)vmulq_f32(vaddq_f32(v28, vmulq_f32(v81, vaddq_f32(v86, vmulq_f32(v81, vaddq_f32(vaddq_f32(v84, vmulq_f32(v81, v85)), vmulq_f32(vmulq_f32(v81, v81), vaddq_f32(v71, vmulq_f32(v83, v81)))))))), (float32x4_t)vshlq_n_s32(v87, 0x17uLL))));
      float32x4_t v90 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, veorq_s8(vandq_s8(v32, (int8x16_t)v27), v88));
      float32x4_t v91 = (int8x16_t *)(v6 + v11);
      v91[-1] = vbslq_s8(v15, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v89, v89, 3));
      *float32x4_t v91 = vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v90, v90, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v92 = -v10;
    if (v92 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v93 = 16 * v92;
    float32x4_t v94 = *(float32x4_t *)(v7 + v93);
    int8x16_t v95 = *((int8x16_t *)a2 + 15);
    float32x4_t v96 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v94, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v97 = vrecpeq_f32(v96);
    float32x4_t v98 = vmulq_f32(v97, vrecpsq_f32(v97, v96));
    int8x16_t v99 = vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v98, vrecpsq_f32(v98, v96)));
    float32x4_t v100 = *((float32x4_t *)a2 + 3);
    float32x4_t v101 = vmulq_f32(v94, (float32x4_t)vorrq_s8(v99, (int8x16_t)v100));
    float32x4_t v102 = *((float32x4_t *)a2 + 5);
    float32x4_t v103 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v102, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v100)), v100), (int8x16_t)v102, (int8x16_t)vminq_f32(vmulq_f32(v101, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v100, v101), *((int8x16_t *)a2 + 34), (int8x16_t)v102)), *((float32x4_t *)a2 + 35)));
    float32x4_t v104 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v103), (int8x16_t)v102);
    float32x4_t v105 = (float32x4_t)vandq_s8((int8x16_t)v102, (int8x16_t)vcgtq_f32(v104, *((float32x4_t *)a2 + 23)));
    float32x4_t v106 = vsubq_f32(vsubq_f32(v104, v102), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v105), v104));
    float32x4_t v107 = vmulq_f32(v106, v106);
    float32x4_t v108 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v103, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v103))), *((float32x4_t *)a2 + 22)), v105), vmulq_f32(v106, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v106, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v106)),
                         vmulq_f32(v107, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v106)), vmulq_f32(v107, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v106)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
    float32x4_t v109 = vcvtq_f32_s32(vcvtq_s32_f32(v108));
    float32x4_t v110 = vsubq_f32(v109, (float32x4_t)vandq_s8((int8x16_t)v102, (int8x16_t)vcgtq_f32(v109, v108)));
    float32x4_t v111 = vsubq_f32(v108, v110);
    float32x4_t v112 = (float32x4_t)vbslq_s8(v95, (int8x16_t)v101, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v101), (int8x16_t)vmulq_f32(vaddq_f32(v102, vmulq_f32(v111, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v111, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v111)), vmulq_f32(vmulq_f32(v111, v111),
                                                     vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v111)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v110)), 0x17uLL))));
    *(int8x16_t *)(v6 + v93) = vbslq_s8(v95, (int8x16_t)v101, (int8x16_t)vmulq_laneq_f32(v112, v112, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype0_floatTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = 16 * *((int *)a1 + 22);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        float32x4_t v12 = *((float32x4_t *)a2 + 71);
        float32x4_t v13 = *((float32x4_t *)a2 + 72);
        float32x4_t v14 = *((float32x4_t *)a2 + 73);
        float32x4_t v15 = vminq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v11, v12), 3), v13), v14);
        float32x4_t v16 = vminq_f32(vmaxq_f32(vrecpeq_f32(v15), v13), v14);
        float32x4_t v17 = vminq_f32(vmaxq_f32(vmulq_f32(v16, vrecpsq_f32(v15, v16)), v13), v14);
        float32x4_t v18 = vmulq_f32(v17, vrecpsq_f32(v15, v17));
        v18.i32[3] = 1.0;
        float32x4_t v19 = vmulq_f32(v11, v18);
        float32x4_t v20 = *((float32x4_t *)a2 + 50);
        float32x4_t v21 = *((float32x4_t *)a2 + 5);
        float32x4_t v22 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v20)), v20), (int8x16_t)v21, (int8x16_t)vminq_f32(vmulq_f32(v19, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v20, v19), *((int8x16_t *)a2 + 34), (int8x16_t)v21)), *((float32x4_t *)a2 + 35)));
        int8x16_t v23 = *((int8x16_t *)a2 + 52);
        int8x16_t v24 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v22);
        int8x16_t v25 = (int8x16_t)vmulq_f32(v22, vaddq_f32(v21, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 49), v24)));
        float32x4_t v26 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), v25), (int8x16_t)v21);
        float32x4_t v27 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v22, *((float32x4_t *)a2 + 21))), vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v22, v20), *((int8x16_t *)a2 + 51)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v22, v20))), (float32x4_t)vandq_s8(v23, v24))), *((float32x4_t *)a2 + 22)), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v25, 0x17uLL)));
        float32x4_t v28 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v26, *((float32x4_t *)a2 + 23)));
        float32x4_t v29 = vaddq_f32(v27, v28);
        float32x4_t v30 = vsubq_f32(vsubq_f32(v26, v21), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v28), v26));
        float32x4_t v31 = vmulq_f32(v30, v30);
        float32x4_t v32 = vmulq_n_f32(vaddq_f32(v29, vmulq_f32(v30, vaddq_f32(*((float32x4_t *)a2 + 61), vmulq_f32(v30, vaddq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 59), vmulq_f32(*((float32x4_t *)a2 + 60), v30)), vmulq_f32(v31, vaddq_f32(*((float32x4_t *)a2 + 57), vmulq_f32(*((float32x4_t *)a2 + 58), v30)))), vmulq_f32(vmulq_f32(v31, v31), vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 55), vmulq_f32(*((float32x4_t *)a2 + 56), v30)), vmulq_f32(
                                v31,
                                vaddq_f32(*((float32x4_t *)a2 + 53), vmulq_f32(*((float32x4_t *)a2 + 54), v30)))))))))),
                COERCE_FLOAT(*(_OWORD *)a2));
        float32x4_t v33 = vminq_f32(vmaxq_f32(v32, *((float32x4_t *)a2 + 62)), *((float32x4_t *)a2 + 63));
        float32x4_t v34 = vcvtq_f32_s32(vcvtq_s32_f32(v33));
        float32x4_t v35 = vsubq_f32(v34, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v34, v33)));
        float32x4_t v36 = vsubq_f32(v33, v35);
        float32x4_t v37 = vmulq_f32(v36, v36);
        int8x16_t v38 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 70), v35);
        int8x16_t v39 = veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v19), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, vorrq_s8((int8x16_t)vcltzq_f32(v32), (int8x16_t)vcgezq_f32(v32))), v20), (int8x16_t)vmulq_f32(vaddq_f32(v21, (float32x4_t)vandq_s8(v38, (int8x16_t)v12)), vmulq_f32(vaddq_f32(v21, vmulq_f32(v36, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 68), vmulq_f32(v36, *((float32x4_t *)a2 + 69))), vmulq_f32(v37, vaddq_f32(
                                           vaddq_f32(*((float32x4_t *)a2 + 66), vmulq_f32(*((float32x4_t *)a2 + 67), v36)), vmulq_f32(v37, vaddq_f32(*((float32x4_t *)a2 + 64), vmulq_f32(*((float32x4_t *)a2 + 65), v36)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(vaddq_f32(v35, (float32x4_t)vandq_s8(v23, v38)))), 0x17uLL))), (int8x16_t)v32));
        int8x16_t v40 = *((int8x16_t *)a2 + 15);
        float32x4_t v41 = (float32x4_t)vbslq_s8(v40, (int8x16_t)v19, v39);
        *(int8x16_t *)(v6 + v10) = vbslq_s8(v40, (int8x16_t)v19, (int8x16_t)vmulq_laneq_f32(v41, v41, 3));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v7;
      v6 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Gettype1_fast_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v65 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      int8x16_t v17 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14));
      int8x16_t v18 = *((int8x16_t *)a2 + 17);
      int8x16_t v19 = vandq_s8(v18, v17);
      int8x16_t v20 = vandq_s8(v18, (int8x16_t)vrecpeq_f32(v16));
      int8x16_t v21 = *((int8x16_t *)a2 + 3);
      float32x4_t v22 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v19, v21));
      float32x4_t v23 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v20, v21));
      float32x4_t v24 = *((float32x4_t *)a2 + 50);
      float32x4_t v25 = *((float32x4_t *)a2 + 5);
      float32x4_t v26 = *((float32x4_t *)a2 + 6);
      float32x4_t v27 = vminq_f32(vmaxq_f32(v22, v24), v25);
      float32x4_t v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v29 = vminq_f32(vmaxq_f32(v23, v24), v25);
      float32x4_t v30 = vmulq_f32(v26, vcvtq_f32_s32((int32x4_t)vaddq_f32(v27, v28)));
      float32x4_t v31 = vmulq_f32(v26, vcvtq_f32_s32((int32x4_t)vaddq_f32(v29, v28)));
      float32x4_t v32 = vcvtq_f32_s32(vcvtq_s32_f32(v30));
      float32x4_t v33 = vcvtq_f32_s32(vcvtq_s32_f32(v31));
      float32x4_t v34 = *((float32x4_t *)a2 + 7);
      float32x4_t v35 = *((float32x4_t *)a2 + 8);
      float32x4_t v36 = vaddq_f32(v34, vsubq_f32(v30, v32));
      float32x4_t v37 = vaddq_f32(v34, vsubq_f32(v31, v33));
      int8x16_t v38 = *((int8x16_t *)a2 + 74);
      v13.i64[0] = vbslq_s8(v38, (int8x16_t)v13, v21).u64[0];
      float32x4_t v39 = vaddq_f32(v35, v32);
      float32x4_t v40 = vaddq_f32(v35, v33);
      v12.i64[0] = vbslq_s8(v38, (int8x16_t)v12, v21).u64[0];
      float32x4_t v42 = *((float32x4_t *)a2 + 9);
      float32x4_t v41 = *((float32x4_t *)a2 + 10);
      float32x4_t v43 = vmulq_n_f32(vsubq_f32(v39, vmulq_f32(vrsqrteq_f32(v36), v42)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v44 = vmulq_n_f32(vsubq_f32(v40, vmulq_f32(vrsqrteq_f32(v37), v42)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v45 = vcvtq_f32_s32(vcvtq_s32_f32(v43));
      float32x4_t v46 = vcvtq_f32_s32(vcvtq_s32_f32(v44));
      float32x4_t v47 = vsubq_f32(v45, (float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vcgtq_f32(v45, v43)));
      float32x4_t v48 = vsubq_f32(v46, (float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vcgtq_f32(v46, v44)));
      float32x4_t v49 = vsubq_f32(v43, v47);
      float32x4_t v50 = vsubq_f32(v44, v48);
      float32x4_t v51 = vaddq_f32(v41, v47);
      float32x4_t v52 = vaddq_f32(v41, v48);
      float32x4_t v53 = *((float32x4_t *)a2 + 11);
      float32x4_t v54 = *((float32x4_t *)a2 + 12);
      float32x4_t v55 = vmulq_f32(vrecpeq_f32(vsubq_f32(v53, v49)), v54);
      float32x4_t v56 = vmulq_f32(vrecpeq_f32(vsubq_f32(v53, v50)), v54);
      float32x4_t v57 = vaddq_f32(v52, vmulq_f32(v56, v56));
      float32x4_t v58 = vmaxq_f32(vaddq_f32(v51, vmulq_f32(v55, v55)), v24);
      float32x4_t v59 = *((float32x4_t *)a2 + 13);
      float32x4_t v60 = *((float32x4_t *)a2 + 14);
      float32x4_t v61 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1);
      float32x4_t v62 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v22, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v24, vsubq_f32(v27, v61)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v58, v59), v60)), *(float32x4_t *)a2, 3)), v25));
      float32x4_t v63 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v23, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v24, vsubq_f32(v29, v61)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0), (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(v57, v24), v59), v60)), *(float32x4_t *)a2, 3)), v25));
      float32x4_t v64 = (int8x16_t *)(v6 + v11);
      v64[-1] = vbslq_s8(v15, (int8x16_t)v22, (int8x16_t)vmulq_laneq_f32(v62, v62, 3));
      *float32x4_t v64 = vbslq_s8(v15, (int8x16_t)v23, (int8x16_t)vmulq_laneq_f32(v63, v63, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v65 = -v10;
    if (v65 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v66 = 16 * v65;
    float32x4_t v67 = *(float32x4_t *)(v7 + v66);
    int8x16_t v68 = *((int8x16_t *)a2 + 15);
    int8x16_t v69 = *((int8x16_t *)a2 + 3);
    float32x4_t v70 = vmulq_f32(v67, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 3), *((float32x4_t *)a2 + 16)))), v69));
    v67.i64[0] = vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v67, v69).u64[0];
    float32x4_t v71 = *((float32x4_t *)a2 + 50);
    float32x4_t v72 = *((float32x4_t *)a2 + 5);
    float32x4_t v73 = vminq_f32(vmaxq_f32(v70, v71), v72);
    float32x4_t v74 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1))));
    float32x4_t v75 = vcvtq_f32_s32(vcvtq_s32_f32(v74));
    float32x4_t v76 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v75), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v74, v75))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
    float32x4_t v77 = vcvtq_f32_s32(vcvtq_s32_f32(v76));
    float32x4_t v78 = vsubq_f32(v77, (float32x4_t)vandq_s8((int8x16_t)v72, (int8x16_t)vcgtq_f32(v77, v76)));
    float32x4_t v79 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v76, v78))), *((float32x4_t *)a2 + 12));
    float32x4_t v80 = (float32x4_t)vbslq_s8(v68, (int8x16_t)v70, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v71, vsubq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 0), (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v79, v79),
                                                                                         vaddq_f32(*((float32x4_t *)a2 + 10), v78)), v71), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))), *(float32x4_t *)a2, 3)), v72));
    *(int8x16_t *)(v6 + v66) = vbslq_s8(v68, (int8x16_t)v70, (int8x16_t)vmulq_laneq_f32(v80, v80, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype1_fixed_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v66 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14));
      float32x4_t v17 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14));
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      int8x16_t v20 = vandq_s8(v19, (int8x16_t)vmulq_f32(v16, v18));
      int8x16_t v21 = vandq_s8(v19, (int8x16_t)vmulq_f32(v17, v18));
      int8x16_t v22 = *((int8x16_t *)a2 + 3);
      float32x4_t v23 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v20, v22));
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v21, v22));
      float32x4_t v25 = *((float32x4_t *)a2 + 50);
      float32x4_t v26 = *((float32x4_t *)a2 + 5);
      float32x4_t v27 = *((float32x4_t *)a2 + 6);
      float32x4_t v28 = vminq_f32(vmaxq_f32(v23, v25), v26);
      float32x4_t v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v30 = vminq_f32(vmaxq_f32(v24, v25), v26);
      float32x4_t v31 = vmulq_f32(v27, vcvtq_f32_s32((int32x4_t)vaddq_f32(v28, v29)));
      float32x4_t v32 = vmulq_f32(v27, vcvtq_f32_s32((int32x4_t)vaddq_f32(v30, v29)));
      float32x4_t v33 = vcvtq_f32_s32(vcvtq_s32_f32(v31));
      float32x4_t v34 = vcvtq_f32_s32(vcvtq_s32_f32(v32));
      float32x4_t v35 = *((float32x4_t *)a2 + 7);
      float32x4_t v36 = *((float32x4_t *)a2 + 8);
      float32x4_t v37 = vaddq_f32(v35, vsubq_f32(v31, v33));
      float32x4_t v38 = vaddq_f32(v35, vsubq_f32(v32, v34));
      int8x16_t v39 = *((int8x16_t *)a2 + 74);
      v13.i64[0] = vbslq_s8(v39, (int8x16_t)v13, v22).u64[0];
      float32x4_t v40 = vaddq_f32(v36, v33);
      float32x4_t v41 = vaddq_f32(v36, v34);
      v12.i64[0] = vbslq_s8(v39, (int8x16_t)v12, v22).u64[0];
      float32x4_t v43 = *((float32x4_t *)a2 + 9);
      float32x4_t v42 = *((float32x4_t *)a2 + 10);
      float32x4_t v44 = vmulq_n_f32(vsubq_f32(v40, vmulq_f32(vrsqrteq_f32(v37), v43)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v45 = vmulq_n_f32(vsubq_f32(v41, vmulq_f32(vrsqrteq_f32(v38), v43)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v46 = vcvtq_f32_s32(vcvtq_s32_f32(v44));
      float32x4_t v47 = vcvtq_f32_s32(vcvtq_s32_f32(v45));
      float32x4_t v48 = vsubq_f32(v46, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v46, v44)));
      float32x4_t v49 = vsubq_f32(v47, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v47, v45)));
      float32x4_t v50 = vsubq_f32(v44, v48);
      float32x4_t v51 = vsubq_f32(v45, v49);
      float32x4_t v52 = vaddq_f32(v42, v48);
      float32x4_t v53 = vaddq_f32(v42, v49);
      float32x4_t v54 = *((float32x4_t *)a2 + 11);
      float32x4_t v55 = *((float32x4_t *)a2 + 12);
      float32x4_t v56 = vmulq_f32(vrecpeq_f32(vsubq_f32(v54, v50)), v55);
      float32x4_t v57 = vmulq_f32(vrecpeq_f32(vsubq_f32(v54, v51)), v55);
      float32x4_t v58 = vaddq_f32(v53, vmulq_f32(v57, v57));
      float32x4_t v59 = vmaxq_f32(vaddq_f32(v52, vmulq_f32(v56, v56)), v25);
      float32x4_t v60 = *((float32x4_t *)a2 + 13);
      float32x4_t v61 = *((float32x4_t *)a2 + 14);
      float32x4_t v62 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1);
      float32x4_t v63 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v23, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v25, vsubq_f32(v28, v62)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v59, v60), v61)), *(float32x4_t *)a2, 3)), v26));
      float32x4_t v64 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v25, vsubq_f32(v30, v62)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0), (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(v58, v25), v60), v61)), *(float32x4_t *)a2, 3)), v26));
      int v65 = (int8x16_t *)(v6 + v11);
      v65[-1] = vbslq_s8(v15, (int8x16_t)v23, (int8x16_t)vmulq_laneq_f32(v63, v63, 3));
      *int v65 = vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v64, v64, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v66 = -v10;
    if (v66 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v67 = 16 * v66;
    float32x4_t v68 = *(float32x4_t *)(v7 + v67);
    int8x16_t v69 = *((int8x16_t *)a2 + 15);
    int8x16_t v70 = *((int8x16_t *)a2 + 3);
    float32x4_t v71 = vmulq_f32(v68, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 3), *((float32x4_t *)a2 + 16))), *((float32x4_t *)a2 + 18))), v70));
    v68.i64[0] = vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v68, v70).u64[0];
    float32x4_t v72 = *((float32x4_t *)a2 + 50);
    float32x4_t v73 = *((float32x4_t *)a2 + 5);
    float32x4_t v74 = vminq_f32(vmaxq_f32(v71, v72), v73);
    float32x4_t v75 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1))));
    float32x4_t v76 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
    float32x4_t v77 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v76), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v75, v76))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
    float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v77));
    float32x4_t v79 = vsubq_f32(v78, (float32x4_t)vandq_s8((int8x16_t)v73, (int8x16_t)vcgtq_f32(v78, v77)));
    float32x4_t v80 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v77, v79))), *((float32x4_t *)a2 + 12));
    float32x4_t v81 = (float32x4_t)vbslq_s8(v69, (int8x16_t)v71, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v72, vsubq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 0), (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v80, v80),
                                                                                         vaddq_f32(*((float32x4_t *)a2 + 10), v79)), v72), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))), *(float32x4_t *)a2, 3)), v73));
    *(int8x16_t *)(v6 + v67) = vbslq_s8(v69, (int8x16_t)v71, (int8x16_t)vmulq_laneq_f32(v81, v81, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype1_nice_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = 16 * *((int *)a1 + 22);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        int8x16_t v12 = *((int8x16_t *)a2 + 15);
        float32x4_t v13 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), *((float32x4_t *)a2 + 16));
        float32x4_t v14 = vrecpeq_f32(v13);
        float32x4_t v15 = vrecpsq_f32(v14, v13);
        float32x4_t v16 = vmulq_f32(v14, v15);
        int8x16_t v17 = vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v16, vrecpsq_f32(v16, v13)));
        int8x16_t v18 = *((int8x16_t *)a2 + 3);
        float32x4_t v19 = vmulq_f32(v11, (float32x4_t)vorrq_s8(v17, v18));
        v17.i64[0] = vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v15, v18).u64[0];
        float32x4_t v20 = *((float32x4_t *)a2 + 75);
        float32x4_t v21 = *((float32x4_t *)a2 + 5);
        float32x4_t v22 = vminq_f32(vmaxq_f32(v19, v20), v21);
        float32x4_t v23 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v20)), v20), (int8x16_t)v21, (int8x16_t)vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
        float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v23), (int8x16_t)v21);
        float32x4_t v25 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v24, *((float32x4_t *)a2 + 23)));
        float32x4_t v26 = vsubq_f32(vsubq_f32(v24, v21), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v25), v24));
        float32x4_t v27 = vmulq_f32(v26, v26);
        float32x4_t v28 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v23, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v23))), *((float32x4_t *)a2 + 22)), v25), vmulq_f32(v26, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v26, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v26)),
                            vmulq_f32(v27, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v26)), vmulq_f32(v27, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v26)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
        float32x4_t v29 = vcvtq_f32_s32(vcvtq_s32_f32(v28));
        float32x4_t v30 = vsubq_f32(v29, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v29, v28)));
        float32x4_t v31 = vsubq_f32(v28, v30);
        float32x4_t v32 = (float32x4_t)vbslq_s8(v12, (int8x16_t)v19, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v20, vsubq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v17.i8, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v21, vmulq_f32(v31, vaddq_f32(
                                                                              *((float32x4_t *)a2 + 48),
                                                                              vmulq_f32(v31, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v31)), vmulq_f32(vmulq_f32(v31, v31), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v31)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v30)), 0x17uLL)),
                                                                      *(float32x4_t *)a2,
                                                                      3)),
                                          v21));
        *(int8x16_t *)(v7 + v10) = vbslq_s8(v12, (int8x16_t)v19, (int8x16_t)vmulq_laneq_f32(v32, v32, 3));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v6;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Gettype1_half_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v83 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      float32x4_t v22 = vrecpsq_f32(v20, v16);
      float32x4_t v23 = vrecpsq_f32(v21, v17);
      int8x16_t v24 = (int8x16_t)vmulq_f32(v20, v22);
      int8x16_t v25 = vandq_s8(v19, (int8x16_t)vmulq_f32(v21, v23));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(vandq_s8(v19, v24), v26));
      float32x4_t v28 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 50);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = vminq_f32(vmaxq_f32(v27, v29), v30);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v28, v29), v30);
      float32x4_t v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v34 = vaddq_f32(v31, v33);
      float32x4_t v35 = vaddq_f32(v32, v33);
      int8x16_t v36 = *((int8x16_t *)a2 + 19);
      float32x4_t v37 = *((float32x4_t *)a2 + 20);
      float32x4_t v38 = (float32x4_t)vorrq_s8(vandq_s8(v36, (int8x16_t)v34), (int8x16_t)v30);
      float32x4_t v39 = (float32x4_t)vorrq_s8(vandq_s8(v36, (int8x16_t)v35), (int8x16_t)v30);
      int8x16_t v40 = *((int8x16_t *)a2 + 21);
      float32x4_t v41 = *((float32x4_t *)a2 + 22);
      float32x4_t v42 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v35, 0x17uLL)), (float32x4_t)vandq_s8(v40, (int8x16_t)vcgtq_f32(v37, v35)));
      float32x4_t v43 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v34, 0x17uLL)), (float32x4_t)vandq_s8(v40, (int8x16_t)vcgtq_f32(v37, v34))), v41);
      float32x4_t v44 = *((float32x4_t *)a2 + 23);
      float32x4_t v45 = *((float32x4_t *)a2 + 24);
      float32x4_t v46 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v38, v44));
      float32x4_t v47 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v39, v44));
      float32x4_t v48 = vaddq_f32(v43, v46);
      float32x4_t v49 = vaddq_f32(vsubq_f32(v42, v41), v47);
      float32x4_t v50 = vsubq_f32(vsubq_f32(v38, v30), vmulq_f32(vmulq_f32(v45, v46), v38));
      float32x4_t v51 = vsubq_f32(vsubq_f32(v39, v30), vmulq_f32(vmulq_f32(v45, v47), v39));
      float32x4_t v52 = *((float32x4_t *)a2 + 25);
      float32x4_t v53 = *((float32x4_t *)a2 + 26);
      float32x4_t v54 = vaddq_f32(v52, vmulq_f32(v53, v50));
      float32x4_t v55 = vaddq_f32(v52, vmulq_f32(v53, v51));
      float32x4_t v56 = *((float32x4_t *)a2 + 27);
      float32x4_t v57 = *((float32x4_t *)a2 + 28);
      float32x4_t v58 = vaddq_f32(v56, vmulq_f32(v57, v50));
      float32x4_t v59 = vaddq_f32(v56, vmulq_f32(v57, v51));
      int8x16_t v60 = *((int8x16_t *)a2 + 74);
      v22.i64[0] = vbslq_s8(v60, (int8x16_t)v22, v26).u64[0];
      float32x4_t v61 = vmulq_n_f32(vaddq_f32(v49, vmulq_f32(v51, vaddq_f32(v59, vmulq_f32(vmulq_f32(v51, v51), v55)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v62 = *((float32x4_t *)a2 + 29);
      float32x4_t v63 = *((float32x4_t *)a2 + 30);
      float32x4_t v64 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v48, vmulq_f32(v50, vaddq_f32(v58, vmulq_f32(vmulq_f32(v50, v50), v54)))), COERCE_FLOAT(*(_OWORD *)a2)), v62);
      float32x4_t v65 = vmaxq_f32(v61, v62);
      float32x4_t v66 = vcvtq_f32_s32(vcvtq_s32_f32(v64));
      float32x4_t v67 = vcvtq_f32_s32(vcvtq_s32_f32(v65));
      float32x4_t v68 = vsubq_f32(v66, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v66, v64)));
      float32x4_t v69 = vsubq_f32(v67, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v67, v65)));
      v23.i64[0] = vbslq_s8(v60, (int8x16_t)v23, v26).u64[0];
      float32x4_t v70 = vsubq_f32(v64, v68);
      float32x4_t v71 = vsubq_f32(v65, v69);
      float32x4_t v72 = *((float32x4_t *)a2 + 31);
      float32x4_t v73 = *((float32x4_t *)a2 + 32);
      float32x4_t v74 = vmulq_f32(v71, vaddq_f32(v73, vmulq_f32(v71, vaddq_f32(v63, vmulq_f32(v72, v71)))));
      float32x4_t v75 = vaddq_f32(v30, vmulq_f32(v70, vaddq_f32(v73, vmulq_f32(v70, vaddq_f32(v63, vmulq_f32(v72, v70))))));
      int32x4_t v76 = *((int32x4_t *)a2 + 33);
      float32x4_t v77 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1);
      int8x16_t v78 = (int8x16_t)vcgtq_f32(v29, vsubq_f32(v31, v77));
      float32x4_t v79 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v77)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v30, v74), (float32x4_t)vshlq_n_s32(vaddq_s32(v76, vcvtq_s32_f32(v69)), 0x17uLL)), *(float32x4_t *)a2, 3));
      float32x4_t v80 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v78, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(v75, (float32x4_t)vshlq_n_s32(vaddq_s32(v76, vcvtq_s32_f32(v68)), 0x17uLL)), *(float32x4_t *)a2, 3)), v30));
      float32x4_t v81 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vminq_f32(v79, v30));
      float32x4_t v82 = (int8x16_t *)(v6 + v11);
      v82[-1] = vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v80, v80, 3));
      *float32x4_t v82 = vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v81, v81, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v83 = -v10;
    if (v83 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v84 = 16 * v83;
    float32x4_t v85 = *(float32x4_t *)(v7 + v84);
    int8x16_t v86 = *((int8x16_t *)a2 + 15);
    float32x4_t v87 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v88 = vmulq_f32(vrecpeq_f32(v87), *((float32x4_t *)a2 + 18));
    float32x4_t v89 = vrecpsq_f32(v88, v87);
    int8x16_t v90 = *((int8x16_t *)a2 + 3);
    float32x4_t v91 = vmulq_f32(v85, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v88, v89)), v90));
    v89.i64[0] = vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v89, v90).u64[0];
    float32x4_t v92 = *((float32x4_t *)a2 + 50);
    float32x4_t v93 = *((float32x4_t *)a2 + 5);
    float32x4_t v94 = vminq_f32(vmaxq_f32(v91, v92), v93);
    float32x4_t v95 = vaddq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1));
    float32x4_t v96 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v95), (int8x16_t)v93);
    float32x4_t v97 = (float32x4_t)vandq_s8((int8x16_t)v93, (int8x16_t)vcgtq_f32(v96, *((float32x4_t *)a2 + 23)));
    float32x4_t v98 = vsubq_f32(vsubq_f32(v96, v93), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v97), v96));
    float32x4_t v99 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v95, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v95))), *((float32x4_t *)a2 + 22)), v97), vmulq_f32(v98, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(*((float32x4_t *)a2 + 28), v98)), vmulq_f32(vmulq_f32(v98, v98), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v98)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v100 = vcvtq_f32_s32(vcvtq_s32_f32(v99));
    float32x4_t v101 = vsubq_f32(v100, (float32x4_t)vandq_s8((int8x16_t)v93, (int8x16_t)vcgtq_f32(v100, v99)));
    float32x4_t v102 = vsubq_f32(v99, v101);
    float32x4_t v103 = (float32x4_t)vbslq_s8(v86, (int8x16_t)v91, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v92, vsubq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v93, vmulq_f32(v102, vaddq_f32(
                                                                           *((float32x4_t *)a2 + 32),
                                                                           vmulq_f32(v102, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v102)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v101)), 0x17uLL)), *(float32x4_t *)a2, 3)), v93));
    *(int8x16_t *)(v6 + v84) = vbslq_s8(v86, (int8x16_t)v91, (int8x16_t)vmulq_laneq_f32(v103, v103, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype1_halfTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v83 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      float32x4_t v22 = vrecpsq_f32(v20, v16);
      float32x4_t v23 = vrecpsq_f32(v21, v17);
      int8x16_t v24 = (int8x16_t)vmulq_f32(v20, v22);
      int8x16_t v25 = vandq_s8(v19, (int8x16_t)vmulq_f32(v21, v23));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(vandq_s8(v19, v24), v26));
      float32x4_t v28 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      int32x4_t v30 = (int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v22, (int8x16_t)v29);
      int32x4_t v31 = (int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v23, (int8x16_t)v29);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v27, v29), (float32x4_t)vdupq_laneq_s32(v30, 3));
      float32x4_t v33 = vminq_f32(vmaxq_f32(v28, v29), (float32x4_t)vdupq_laneq_s32(v31, 3));
      float32x4_t v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v35 = vaddq_f32(v32, v34);
      int8x16_t v36 = *((int8x16_t *)a2 + 19);
      float32x4_t v37 = *((float32x4_t *)a2 + 20);
      float32x4_t v38 = vaddq_f32(v33, v34);
      float32x4_t v39 = *((float32x4_t *)a2 + 5);
      float32x4_t v40 = (float32x4_t)vorrq_s8(vandq_s8(v36, (int8x16_t)v35), (int8x16_t)v39);
      float32x4_t v41 = (float32x4_t)vorrq_s8(vandq_s8(v36, (int8x16_t)v38), (int8x16_t)v39);
      int8x16_t v42 = *((int8x16_t *)a2 + 21);
      float32x4_t v43 = *((float32x4_t *)a2 + 22);
      float32x4_t v44 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v38, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v37, v38)));
      float32x4_t v45 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v35, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v37, v35))), v43);
      float32x4_t v46 = *((float32x4_t *)a2 + 23);
      float32x4_t v47 = *((float32x4_t *)a2 + 24);
      float32x4_t v48 = vsubq_f32(v44, v43);
      float32x4_t v49 = (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v40, v46));
      float32x4_t v50 = (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v41, v46));
      float32x4_t v51 = vaddq_f32(v45, v49);
      float32x4_t v52 = vsubq_f32(vsubq_f32(v40, v39), vmulq_f32(vmulq_f32(v47, v49), v40));
      float32x4_t v53 = vsubq_f32(vsubq_f32(v41, v39), vmulq_f32(vmulq_f32(v47, v50), v41));
      float32x4_t v54 = *((float32x4_t *)a2 + 25);
      float32x4_t v55 = *((float32x4_t *)a2 + 26);
      float32x4_t v56 = vaddq_f32(v54, vmulq_f32(v55, v52));
      float32x4_t v57 = vaddq_f32(v54, vmulq_f32(v55, v53));
      float32x4_t v58 = *((float32x4_t *)a2 + 27);
      float32x4_t v59 = *((float32x4_t *)a2 + 28);
      float32x4_t v60 = vmulq_n_f32(vaddq_f32(vaddq_f32(v48, v50), vmulq_f32(v53, vaddq_f32(vaddq_f32(v58, vmulq_f32(v53, v59)), vmulq_f32(vmulq_f32(v53, v53), v57)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v61 = *((float32x4_t *)a2 + 29);
      float32x4_t v62 = *((float32x4_t *)a2 + 30);
      float32x4_t v63 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v51, vmulq_f32(v52, vaddq_f32(vaddq_f32(v58, vmulq_f32(v52, v59)), vmulq_f32(vmulq_f32(v52, v52), v56)))), COERCE_FLOAT(*(_OWORD *)a2)), v61);
      float32x4_t v64 = vmaxq_f32(v60, v61);
      float32x4_t v65 = vcvtq_f32_s32(vcvtq_s32_f32(v63));
      float32x4_t v66 = vcvtq_f32_s32(vcvtq_s32_f32(v64));
      float32x4_t v67 = vsubq_f32(v65, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v65, v63)));
      float32x4_t v68 = vsubq_f32(v66, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v66, v64)));
      float32x4_t v69 = vsubq_f32(v63, v67);
      float32x4_t v70 = vsubq_f32(v64, v68);
      float32x4_t v71 = *((float32x4_t *)a2 + 31);
      float32x4_t v72 = *((float32x4_t *)a2 + 32);
      float32x4_t v73 = vmulq_f32(v70, vaddq_f32(v72, vmulq_f32(v70, vaddq_f32(v62, vmulq_f32(v71, v70)))));
      float32x4_t v74 = vaddq_f32(v39, vmulq_f32(v69, vaddq_f32(v72, vmulq_f32(v69, vaddq_f32(v62, vmulq_f32(v71, v69))))));
      int32x4_t v75 = vcvtq_s32_f32(v68);
      int32x4_t v76 = *((int32x4_t *)a2 + 33);
      float32x4_t v77 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1);
      int8x16_t v78 = (int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v77));
      int8x16_t v79 = vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v33, v77)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v31.i8, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v39, v73), (float32x4_t)vshlq_n_s32(vaddq_s32(v76, v75), 0x17uLL)), *(float32x4_t *)a2, 3));
      float32x4_t v80 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, vbslq_s8(v78, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v30.i8, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(v74, (float32x4_t)vshlq_n_s32(vaddq_s32(v76, vcvtq_s32_f32(v67)), 0x17uLL)), *(float32x4_t *)a2, 3)));
      float32x4_t v81 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v28, v79);
      float32x4_t v82 = (int8x16_t *)(v6 + v11);
      v82[-1] = vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v80, v80, 3));
      *float32x4_t v82 = vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v81, v81, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v83 = -v10;
    if (v83 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v84 = 16 * v83;
    float32x4_t v85 = *(float32x4_t *)(v7 + v84);
    int8x16_t v86 = *((int8x16_t *)a2 + 15);
    float32x4_t v87 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v88 = vmulq_f32(vrecpeq_f32(v87), *((float32x4_t *)a2 + 18));
    float32x4_t v89 = vrecpsq_f32(v88, v87);
    float32x4_t v90 = vmulq_f32(v85, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v88, v89)), *((int8x16_t *)a2 + 3)));
    float32x4_t v91 = *((float32x4_t *)a2 + 75);
    int32x4_t v92 = (int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v89, (int8x16_t)v91);
    float32x4_t v93 = vminq_f32(vmaxq_f32(v90, v91), (float32x4_t)vdupq_laneq_s32(v92, 3));
    float32x4_t v94 = vaddq_f32(v93, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1));
    float32x4_t v95 = *((float32x4_t *)a2 + 5);
    float32x4_t v96 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v94), (int8x16_t)v95);
    float32x4_t v97 = (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v96, *((float32x4_t *)a2 + 23)));
    float32x4_t v98 = vsubq_f32(vsubq_f32(v96, v95), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v97), v96));
    float32x4_t v99 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v94, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v94))), *((float32x4_t *)a2 + 22)), v97), vmulq_f32(v98, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v98, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v98, v98), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v98)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v100 = vcvtq_f32_s32(vcvtq_s32_f32(v99));
    float32x4_t v101 = vsubq_f32(v100, (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v100, v99)));
    float32x4_t v102 = vsubq_f32(v99, v101);
    float32x4_t v103 = (float32x4_t)vbslq_s8(v86, (int8x16_t)v90, vbslq_s8((int8x16_t)vcgtq_f32(v91, vsubq_f32(v93, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v92.i8, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v95, vmulq_f32(v102, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v102, vaddq_f32(*((float32x4_t *)a2 + 30),
                                                     vmulq_f32(*((float32x4_t *)a2 + 31), v102)))))),
                                           (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v101)), 0x17uLL)), *(float32x4_t *)a2, 3)));
    *(int8x16_t *)(v6 + v84) = vbslq_s8(v86, (int8x16_t)v90, (int8x16_t)vmulq_laneq_f32(v103, v103, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype1_niceTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = 16 * *((int *)a1 + 22);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        int8x16_t v12 = *((int8x16_t *)a2 + 15);
        float32x4_t v13 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), *((float32x4_t *)a2 + 16));
        float32x4_t v14 = vrecpeq_f32(v13);
        float32x4_t v15 = vrecpsq_f32(v14, v13);
        float32x4_t v16 = vmulq_f32(v14, v15);
        float32x4_t v17 = vmulq_f32(v11, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v16, vrecpsq_f32(v16, v13))), *((int8x16_t *)a2 + 3)));
        float32x4_t v18 = *((float32x4_t *)a2 + 75);
        int32x4_t v19 = (int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v15, (int8x16_t)v18);
        float32x4_t v20 = vminq_f32(vmaxq_f32(v17, v18), (float32x4_t)vdupq_laneq_s32(v19, 3));
        float32x4_t v21 = *((float32x4_t *)a2 + 5);
        float32x4_t v22 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v18)), v18), (int8x16_t)v21, (int8x16_t)vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
        float32x4_t v23 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v22), (int8x16_t)v21);
        float32x4_t v24 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v23, *((float32x4_t *)a2 + 23)));
        float32x4_t v25 = vsubq_f32(vsubq_f32(v23, v21), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v24), v23));
        float32x4_t v26 = vmulq_f32(v25, v25);
        float32x4_t v27 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v22, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v22))), *((float32x4_t *)a2 + 22)), v24), vmulq_f32(v25, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v25, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v25)),
                            vmulq_f32(v26, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v25)), vmulq_f32(v26, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v25)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
        float32x4_t v28 = vcvtq_f32_s32(vcvtq_s32_f32(v27));
        float32x4_t v29 = vsubq_f32(v28, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v28, v27)));
        float32x4_t v30 = vsubq_f32(v27, v29);
        float32x4_t v31 = (float32x4_t)vbslq_s8(v12, (int8x16_t)v17, vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v21, vmulq_f32(v30, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v30,
                                                      vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v30)), vmulq_f32(vmulq_f32(v30, v30), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v30)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v29)), 0x17uLL)), *(float32x4_t *)a2, 3)));
        *(int8x16_t *)(v7 + v10) = vbslq_s8(v12, (int8x16_t)v17, (int8x16_t)vmulq_laneq_f32(v31, v31, 3));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v6;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Gettype1_floatTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = 16 * *((int *)a1 + 22);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        float32x4_t v12 = *((float32x4_t *)a2 + 72);
        float32x4_t v13 = *((float32x4_t *)a2 + 73);
        float32x4_t v14 = vminq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v11, v12), 3), v12), v13);
        float32x4_t v15 = vminq_f32(vmaxq_f32(vrecpeq_f32(v14), v12), v13);
        float32x4_t v16 = vrecpsq_f32(v14, v15);
        float32x4_t v17 = vminq_f32(vmaxq_f32(vmulq_f32(v15, v16), v12), v13);
        float32x4_t v18 = vmulq_f32(v17, vrecpsq_f32(v14, v17));
        v18.i32[3] = 1.0;
        float32x4_t v19 = vmulq_f32(v11, v18);
        float32x4_t v20 = *((float32x4_t *)a2 + 75);
        int32x4_t v21 = (int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v16, (int8x16_t)v20);
        float32x4_t v22 = vminq_f32(vmaxq_f32(v19, v20), (float32x4_t)vdupq_laneq_s32(v21, 3));
        float32x4_t v23 = *((float32x4_t *)a2 + 5);
        float32x4_t v24 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v20)), v20), (int8x16_t)v23, (int8x16_t)vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
        int8x16_t v25 = *((int8x16_t *)a2 + 52);
        int8x16_t v26 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v24);
        int8x16_t v27 = (int8x16_t)vmulq_f32(v24, vaddq_f32(v23, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 49), v26)));
        float32x4_t v28 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), v27), (int8x16_t)v23);
        float32x4_t v29 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v24, *((float32x4_t *)a2 + 21))), vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v24, *((float32x4_t *)a2 + 50)), *((int8x16_t *)a2 + 51)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v24, *((float32x4_t *)a2 + 50)))), (float32x4_t)vandq_s8(v25, v26))), *((float32x4_t *)a2 + 22)), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v27, 0x17uLL)));
        float32x4_t v30 = (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v28, *((float32x4_t *)a2 + 23)));
        float32x4_t v31 = vaddq_f32(v29, v30);
        float32x4_t v32 = vsubq_f32(vsubq_f32(v28, v23), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v30), v28));
        float32x4_t v33 = vmulq_f32(v32, v32);
        float32x4_t v34 = vmulq_n_f32(vaddq_f32(v31, vmulq_f32(v32, vaddq_f32(*((float32x4_t *)a2 + 61), vmulq_f32(v32, vaddq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 59), vmulq_f32(*((float32x4_t *)a2 + 60), v32)), vmulq_f32(v33, vaddq_f32(*((float32x4_t *)a2 + 57), vmulq_f32(*((float32x4_t *)a2 + 58), v32)))), vmulq_f32(vmulq_f32(v33, v33), vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 55), vmulq_f32(*((float32x4_t *)a2 + 56), v32)), vmulq_f32(
                                v33,
                                vaddq_f32(*((float32x4_t *)a2 + 53), vmulq_f32(*((float32x4_t *)a2 + 54), v32)))))))))),
                COERCE_FLOAT(*(_OWORD *)a2));
        float32x4_t v35 = vminq_f32(vmaxq_f32(v34, *((float32x4_t *)a2 + 62)), *((float32x4_t *)a2 + 63));
        float32x4_t v36 = vcvtq_f32_s32(vcvtq_s32_f32(v35));
        float32x4_t v37 = vsubq_f32(v36, (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v36, v35)));
        float32x4_t v38 = vsubq_f32(v35, v37);
        float32x4_t v39 = vmulq_f32(v38, v38);
        int8x16_t v40 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 70), v37);
        int8x16_t v41 = vbslq_s8((int8x16_t)vcgtq_f32(v20, vsubq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 0), (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v23, vorrq_s8((int8x16_t)vcltzq_f32(v34), (int8x16_t)vcgezq_f32(v34))), v20), (int8x16_t)vmulq_f32(vaddq_f32(v23, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 71), v40)), vmulq_f32(vaddq_f32(
                                                             v23,
                                                             vmulq_f32(v38, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 68), vmulq_f32(v38, *((float32x4_t *)a2 + 69))), vmulq_f32(v39, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 66), vmulq_f32(*((float32x4_t *)a2 + 67), v38)), vmulq_f32(v39, vaddq_f32(*((float32x4_t *)a2 + 64), vmulq_f32(*((float32x4_t *)a2 + 65), v38)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33),
                                                                            vcvtq_s32_f32(vaddq_f32(v37, (float32x4_t)vandq_s8(v25, v40)))), 0x17uLL))), (int8x16_t)v34), *(float32x4_t *)a2, 3));
        int8x16_t v42 = *((int8x16_t *)a2 + 15);
        float32x4_t v43 = (float32x4_t)vbslq_s8(v42, (int8x16_t)v19, v41);
        *(int8x16_t *)(v6 + v10) = vbslq_s8(v42, (int8x16_t)v19, (int8x16_t)vmulq_laneq_f32(v43, v43, 3));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v7;
      v6 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Gettype2_fast_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v69 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      int8x16_t v16 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14));
      int8x16_t v17 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14));
      int8x16_t v18 = *((int8x16_t *)a2 + 17);
      int8x16_t v19 = vandq_s8(v18, v16);
      int8x16_t v20 = vandq_s8(v18, v17);
      int8x16_t v21 = *((int8x16_t *)a2 + 3);
      float32x4_t v22 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v19, v21));
      float32x4_t v23 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v20, v21));
      int8x16_t v24 = *((int8x16_t *)a2 + 74);
      float32x4_t v25 = *((float32x4_t *)a2 + 75);
      float32x4_t v26 = *((float32x4_t *)a2 + 5);
      float32x4_t v27 = *((float32x4_t *)a2 + 6);
      float32x4_t v28 = vminq_f32(vmaxq_f32(v22, v25), v26);
      float32x4_t v29 = vminq_f32(vmaxq_f32(v23, v25), v26);
      float32x4_t v30 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v31 = vmulq_f32(v27, vcvtq_f32_s32((int32x4_t)vaddq_f32(v28, v30)));
      float32x4_t v32 = vmulq_f32(v27, vcvtq_f32_s32((int32x4_t)vaddq_f32(v29, v30)));
      v13.i64[0] = vbslq_s8(v24, (int8x16_t)v13, v21).u64[0];
      float32x4_t v33 = vcvtq_f32_s32(vcvtq_s32_f32(v31));
      float32x4_t v34 = vcvtq_f32_s32(vcvtq_s32_f32(v32));
      v12.i64[0] = vbslq_s8(v24, (int8x16_t)v12, v21).u64[0];
      float32x4_t v36 = *((float32x4_t *)a2 + 7);
      float32x4_t v35 = *((float32x4_t *)a2 + 8);
      float32x4_t v37 = vrsqrteq_f32(vaddq_f32(v36, vsubq_f32(v31, v33)));
      float32x4_t v38 = vaddq_f32(v35, v33);
      float32x4_t v39 = vrsqrteq_f32(vaddq_f32(v36, vsubq_f32(v32, v34)));
      float32x4_t v40 = vaddq_f32(v35, v34);
      float32x4_t v41 = *((float32x4_t *)a2 + 9);
      float32x4_t v42 = *((float32x4_t *)a2 + 10);
      float32x4_t v43 = vmulq_n_f32(vsubq_f32(v38, vmulq_f32(v37, v41)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v44 = vmulq_n_f32(vsubq_f32(v40, vmulq_f32(v39, v41)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v45 = vcvtq_f32_s32(vcvtq_s32_f32(v43));
      float32x4_t v46 = vcvtq_f32_s32(vcvtq_s32_f32(v44));
      float32x4_t v47 = vsubq_f32(v45, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v45, v43)));
      float32x4_t v48 = vsubq_f32(v46, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v46, v44)));
      float32x4_t v49 = vsubq_f32(v43, v47);
      float32x4_t v50 = vsubq_f32(v44, v48);
      float32x4_t v51 = vaddq_f32(v42, v47);
      float32x4_t v52 = vaddq_f32(v42, v48);
      float32x4_t v53 = *((float32x4_t *)a2 + 11);
      float32x4_t v54 = *((float32x4_t *)a2 + 12);
      float32x4_t v55 = vmulq_f32(vrecpeq_f32(vsubq_f32(v53, v49)), v54);
      float32x4_t v56 = vmulq_f32(vrecpeq_f32(vsubq_f32(v53, v50)), v54);
      float32x4_t v57 = vmaxq_f32(vaddq_f32(v51, vmulq_f32(v55, v55)), v25);
      float32x4_t v58 = vmaxq_f32(vaddq_f32(v52, vmulq_f32(v56, v56)), v25);
      float32x4_t v59 = *((float32x4_t *)a2 + 13);
      float32x4_t v60 = *((float32x4_t *)a2 + 14);
      float32x4_t v61 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v57, v59), v60));
      float32x4_t v62 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v58, v59), v60));
      float32x4_t v63 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1);
      float32x4_t v64 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v23, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v25, vsubq_f32(v29, v63)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0), (int8x16_t)vmulq_laneq_f32(v62, *(float32x4_t *)a2, 3)), v26));
      float32x4_t v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      float32x4_t v66 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v22, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v65, (float32x4_t)vbslq_s8(v15, (int8x16_t)v22, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v25, vsubq_f32(v28, v63)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), (int8x16_t)vmulq_laneq_f32(v61,
                                                                                                    *(float32x4_t *)a2,
                                                                                                    3)),
                                                                        v26))),
                                          v25),
                                        v26));
      float32x4_t v67 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v23, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v65, v64), v25), v26));
      float32x4_t v68 = (int8x16_t *)(v6 + v11);
      v68[-1] = vbslq_s8(v15, (int8x16_t)v22, (int8x16_t)vmulq_laneq_f32(v66, v66, 3));
      *float32x4_t v68 = vbslq_s8(v15, (int8x16_t)v23, (int8x16_t)vmulq_laneq_f32(v67, v67, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v69 = -v10;
    if (v69 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v70 = 16 * v69;
    float32x4_t v71 = *(float32x4_t *)(v7 + v70);
    int8x16_t v72 = *((int8x16_t *)a2 + 15);
    int8x16_t v73 = *((int8x16_t *)a2 + 3);
    float32x4_t v74 = vmulq_f32(v71, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 3), *((float32x4_t *)a2 + 16)))), v73));
    v71.i64[0] = vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v71, v73).u64[0];
    float32x4_t v75 = *((float32x4_t *)a2 + 75);
    float32x4_t v76 = *((float32x4_t *)a2 + 5);
    float32x4_t v77 = vminq_f32(vmaxq_f32(v74, v75), v76);
    float32x4_t v78 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v77, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1))));
    float32x4_t v79 = vcvtq_f32_s32(vcvtq_s32_f32(v78));
    float32x4_t v80 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v79), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v78, v79))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
    float32x4_t v81 = vcvtq_f32_s32(vcvtq_s32_f32(v80));
    float32x4_t v82 = vsubq_f32(v81, (float32x4_t)vandq_s8((int8x16_t)v76, (int8x16_t)vcgtq_f32(v81, v80)));
    float32x4_t v83 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v80, v82))), *((float32x4_t *)a2 + 12));
    float32x4_t v84 = (float32x4_t)vbslq_s8(v72, (int8x16_t)v74, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(v72, (int8x16_t)v74, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v75, vsubq_f32(v77, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 0),
                                                                                     (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v83, v83), vaddq_f32(*((float32x4_t *)a2 + 10), v82)), v75), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))), *(float32x4_t *)a2, 3)), v76))), v75), v76));
    *(int8x16_t *)(v6 + v70) = vbslq_s8(v72, (int8x16_t)v74, (int8x16_t)vmulq_laneq_f32(v84, v84, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype2_fixed_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v70 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14));
      float32x4_t v17 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14));
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      int8x16_t v20 = vandq_s8(v19, (int8x16_t)vmulq_f32(v16, v18));
      int8x16_t v21 = vandq_s8(v19, (int8x16_t)vmulq_f32(v17, v18));
      int8x16_t v22 = *((int8x16_t *)a2 + 3);
      float32x4_t v23 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v20, v22));
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v21, v22));
      int8x16_t v25 = *((int8x16_t *)a2 + 74);
      float32x4_t v26 = *((float32x4_t *)a2 + 75);
      float32x4_t v27 = *((float32x4_t *)a2 + 5);
      float32x4_t v28 = *((float32x4_t *)a2 + 6);
      float32x4_t v29 = vminq_f32(vmaxq_f32(v23, v26), v27);
      float32x4_t v30 = vminq_f32(vmaxq_f32(v24, v26), v27);
      float32x4_t v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v32 = vmulq_f32(v28, vcvtq_f32_s32((int32x4_t)vaddq_f32(v29, v31)));
      float32x4_t v33 = vmulq_f32(v28, vcvtq_f32_s32((int32x4_t)vaddq_f32(v30, v31)));
      v13.i64[0] = vbslq_s8(v25, (int8x16_t)v13, v22).u64[0];
      float32x4_t v34 = vcvtq_f32_s32(vcvtq_s32_f32(v32));
      float32x4_t v35 = vcvtq_f32_s32(vcvtq_s32_f32(v33));
      v12.i64[0] = vbslq_s8(v25, (int8x16_t)v12, v22).u64[0];
      float32x4_t v37 = *((float32x4_t *)a2 + 7);
      float32x4_t v36 = *((float32x4_t *)a2 + 8);
      float32x4_t v38 = vrsqrteq_f32(vaddq_f32(v37, vsubq_f32(v32, v34)));
      float32x4_t v39 = vaddq_f32(v36, v34);
      float32x4_t v40 = vrsqrteq_f32(vaddq_f32(v37, vsubq_f32(v33, v35)));
      float32x4_t v41 = vaddq_f32(v36, v35);
      float32x4_t v42 = *((float32x4_t *)a2 + 9);
      float32x4_t v43 = *((float32x4_t *)a2 + 10);
      float32x4_t v44 = vmulq_n_f32(vsubq_f32(v39, vmulq_f32(v38, v42)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v45 = vmulq_n_f32(vsubq_f32(v41, vmulq_f32(v40, v42)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v46 = vcvtq_f32_s32(vcvtq_s32_f32(v44));
      float32x4_t v47 = vcvtq_f32_s32(vcvtq_s32_f32(v45));
      float32x4_t v48 = vsubq_f32(v46, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v46, v44)));
      float32x4_t v49 = vsubq_f32(v47, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v47, v45)));
      float32x4_t v50 = vsubq_f32(v44, v48);
      float32x4_t v51 = vsubq_f32(v45, v49);
      float32x4_t v52 = vaddq_f32(v43, v48);
      float32x4_t v53 = vaddq_f32(v43, v49);
      float32x4_t v54 = *((float32x4_t *)a2 + 11);
      float32x4_t v55 = *((float32x4_t *)a2 + 12);
      float32x4_t v56 = vmulq_f32(vrecpeq_f32(vsubq_f32(v54, v50)), v55);
      float32x4_t v57 = vmulq_f32(vrecpeq_f32(vsubq_f32(v54, v51)), v55);
      float32x4_t v58 = vmaxq_f32(vaddq_f32(v52, vmulq_f32(v56, v56)), v26);
      float32x4_t v59 = vmaxq_f32(vaddq_f32(v53, vmulq_f32(v57, v57)), v26);
      float32x4_t v60 = *((float32x4_t *)a2 + 13);
      float32x4_t v61 = *((float32x4_t *)a2 + 14);
      float32x4_t v62 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v58, v60), v61));
      float32x4_t v63 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v59, v60), v61));
      float32x4_t v64 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1);
      float32x4_t v65 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v30, v64)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0), (int8x16_t)vmulq_laneq_f32(v63, *(float32x4_t *)a2, 3)), v27));
      float32x4_t v66 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      float32x4_t v67 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v23, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v66, (float32x4_t)vbslq_s8(v15, (int8x16_t)v23, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v29, v64)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0), (int8x16_t)vmulq_laneq_f32(v62,
                                                                                                    *(float32x4_t *)a2,
                                                                                                    3)),
                                                                        v27))),
                                          v26),
                                        v27));
      float32x4_t v68 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v66, v65), v26), v27));
      int v69 = (int8x16_t *)(v6 + v11);
      v69[-1] = vbslq_s8(v15, (int8x16_t)v23, (int8x16_t)vmulq_laneq_f32(v67, v67, 3));
      *int v69 = vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v68, v68, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v70 = -v10;
    if (v70 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v71 = 16 * v70;
    float32x4_t v72 = *(float32x4_t *)(v7 + v71);
    int8x16_t v73 = *((int8x16_t *)a2 + 15);
    int8x16_t v74 = *((int8x16_t *)a2 + 3);
    float32x4_t v75 = vmulq_f32(v72, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 3), *((float32x4_t *)a2 + 16))), *((float32x4_t *)a2 + 18))), v74));
    v72.i64[0] = vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v72, v74).u64[0];
    float32x4_t v76 = *((float32x4_t *)a2 + 75);
    float32x4_t v77 = *((float32x4_t *)a2 + 5);
    float32x4_t v78 = vminq_f32(vmaxq_f32(v75, v76), v77);
    float32x4_t v79 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1))));
    float32x4_t v80 = vcvtq_f32_s32(vcvtq_s32_f32(v79));
    float32x4_t v81 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v80), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v79, v80))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
    float32x4_t v82 = vcvtq_f32_s32(vcvtq_s32_f32(v81));
    float32x4_t v83 = vsubq_f32(v82, (float32x4_t)vandq_s8((int8x16_t)v77, (int8x16_t)vcgtq_f32(v82, v81)));
    float32x4_t v84 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v81, v83))), *((float32x4_t *)a2 + 12));
    float32x4_t v85 = (float32x4_t)vbslq_s8(v73, (int8x16_t)v75, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(v73, (int8x16_t)v75, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v76, vsubq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 0),
                                                                                     (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v84, v84), vaddq_f32(*((float32x4_t *)a2 + 10), v83)), v76), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))), *(float32x4_t *)a2, 3)), v77))), v76), v77));
    *(int8x16_t *)(v6 + v71) = vbslq_s8(v73, (int8x16_t)v75, (int8x16_t)vmulq_laneq_f32(v85, v85, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype2_nice_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = 16 * *((int *)a1 + 22);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        int8x16_t v12 = *((int8x16_t *)a2 + 15);
        float32x4_t v13 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), *((float32x4_t *)a2 + 16));
        float32x4_t v14 = vrecpeq_f32(v13);
        float32x4_t v15 = vrecpsq_f32(v14, v13);
        float32x4_t v16 = vmulq_f32(v14, v15);
        int8x16_t v17 = vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v16, vrecpsq_f32(v16, v13)));
        int8x16_t v18 = *((int8x16_t *)a2 + 3);
        float32x4_t v19 = vmulq_f32(v11, (float32x4_t)vorrq_s8(v17, v18));
        v17.i64[0] = vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v15, v18).u64[0];
        float32x4_t v20 = *((float32x4_t *)a2 + 75);
        float32x4_t v21 = *((float32x4_t *)a2 + 5);
        float32x4_t v22 = vminq_f32(vmaxq_f32(v19, v20), v21);
        float32x4_t v23 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v20)), v20), (int8x16_t)v21, (int8x16_t)vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
        float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v23), (int8x16_t)v21);
        float32x4_t v25 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v24, *((float32x4_t *)a2 + 23)));
        float32x4_t v26 = vsubq_f32(vsubq_f32(v24, v21), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v25), v24));
        float32x4_t v27 = vmulq_f32(v26, v26);
        float32x4_t v28 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v23, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v23))), *((float32x4_t *)a2 + 22)), v25), vmulq_f32(v26, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v26, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v26)),
                            vmulq_f32(v27, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v26)), vmulq_f32(v27, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v26)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
        float32x4_t v29 = vcvtq_f32_s32(vcvtq_s32_f32(v28));
        float32x4_t v30 = vsubq_f32(v29, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v29, v28)));
        float32x4_t v31 = vsubq_f32(v28, v30);
        float32x4_t v32 = (float32x4_t)vbslq_s8(v12, (int8x16_t)v19, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(v12, (int8x16_t)v19, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v20, vsubq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v17.i8, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v21, vmulq_f32(v31, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v31, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v31)), vmulq_f32(vmulq_f32(v31, v31), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v31)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v30)), 0x17uLL)), *(float32x4_t *)a2, 3)), v21))), v20), v21));
        *(int8x16_t *)(v7 + v10) = vbslq_s8(v12, (int8x16_t)v19, (int8x16_t)vmulq_laneq_f32(v32, v32, 3));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v6;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Gettype2_half_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v88 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      float32x4_t v22 = vrecpsq_f32(v20, v16);
      float32x4_t v23 = vrecpsq_f32(v21, v17);
      int8x16_t v24 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, v22));
      int8x16_t v25 = vandq_s8(v19, (int8x16_t)vmulq_f32(v21, v23));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v26));
      float32x4_t v28 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v27, v29), v30);
      float32x4_t v33 = vminq_f32(vmaxq_f32(v28, v29), v30);
      float32x4_t v34 = vaddq_f32(v32, v31);
      float32x4_t v35 = vaddq_f32(v33, v31);
      int8x16_t v36 = *((int8x16_t *)a2 + 19);
      float32x4_t v37 = *((float32x4_t *)a2 + 20);
      float32x4_t v38 = (float32x4_t)vorrq_s8(vandq_s8(v36, (int8x16_t)v34), (int8x16_t)v30);
      int8x16_t v39 = *((int8x16_t *)a2 + 21);
      float32x4_t v40 = *((float32x4_t *)a2 + 22);
      float32x4_t v41 = (float32x4_t)vorrq_s8(vandq_s8(v36, (int8x16_t)v35), (int8x16_t)v30);
      float32x4_t v42 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v35, 0x17uLL)), (float32x4_t)vandq_s8(v39, (int8x16_t)vcgtq_f32(v37, v35)));
      float32x4_t v43 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v34, 0x17uLL)), (float32x4_t)vandq_s8(v39, (int8x16_t)vcgtq_f32(v37, v34))), v40);
      float32x4_t v44 = *((float32x4_t *)a2 + 23);
      float32x4_t v45 = *((float32x4_t *)a2 + 24);
      float32x4_t v46 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v38, v44));
      float32x4_t v47 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v41, v44));
      float32x4_t v48 = vaddq_f32(v43, v46);
      float32x4_t v49 = vmulq_f32(v45, v46);
      float32x4_t v50 = vmulq_f32(vmulq_f32(v45, v47), v41);
      float32x4_t v51 = vaddq_f32(vsubq_f32(v42, v40), v47);
      float32x4_t v52 = vsubq_f32(vsubq_f32(v38, v30), vmulq_f32(v49, v38));
      float32x4_t v53 = vsubq_f32(vsubq_f32(v41, v30), v50);
      float32x4_t v54 = *((float32x4_t *)a2 + 25);
      float32x4_t v55 = *((float32x4_t *)a2 + 26);
      float32x4_t v56 = vaddq_f32(v54, vmulq_f32(v55, v52));
      float32x4_t v57 = *((float32x4_t *)a2 + 27);
      float32x4_t v58 = *((float32x4_t *)a2 + 28);
      float32x4_t v59 = vaddq_f32(v54, vmulq_f32(v55, v53));
      float32x4_t v60 = vaddq_f32(vaddq_f32(v57, vmulq_f32(v58, v52)), vmulq_f32(vmulq_f32(v52, v52), v56));
      int8x16_t v61 = *((int8x16_t *)a2 + 74);
      float32x4_t v62 = vmulq_n_f32(vaddq_f32(v48, vmulq_f32(v52, v60)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v63 = vmulq_n_f32(vaddq_f32(v51, vmulq_f32(v53, vaddq_f32(vaddq_f32(v57, vmulq_f32(v58, v53)), vmulq_f32(vmulq_f32(v53, v53), v59)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v64 = *((float32x4_t *)a2 + 29);
      float32x4_t v65 = *((float32x4_t *)a2 + 30);
      v22.i64[0] = vbslq_s8(v61, (int8x16_t)v22, v26).u64[0];
      float32x4_t v66 = vmaxq_f32(v62, v64);
      float32x4_t v67 = vmaxq_f32(v63, v64);
      float32x4_t v68 = vcvtq_f32_s32(vcvtq_s32_f32(v66));
      float32x4_t v69 = vcvtq_f32_s32(vcvtq_s32_f32(v67));
      float32x4_t v70 = vsubq_f32(v68, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v68, v66)));
      float32x4_t v71 = vsubq_f32(v69, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v69, v67)));
      float32x4_t v72 = vsubq_f32(v66, v70);
      float32x4_t v73 = vsubq_f32(v67, v71);
      float32x4_t v74 = *((float32x4_t *)a2 + 31);
      float32x4_t v75 = *((float32x4_t *)a2 + 32);
      v26.i64[0] = vbslq_s8(v61, (int8x16_t)v23, v26).u64[0];
      float32x4_t v76 = vaddq_f32(v65, vmulq_f32(v74, v72));
      float32x4_t v77 = vmulq_f32(v73, vaddq_f32(v75, vmulq_f32(v73, vaddq_f32(v65, vmulq_f32(v74, v73)))));
      int32x4_t v78 = *((int32x4_t *)a2 + 33);
      float32x4_t v79 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1);
      float32x4_t v80 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      float32x4_t v81 = vaddq_f32(v80, (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v79)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v30, vmulq_f32(v72, vaddq_f32(v75, vmulq_f32(v72, v76)))), (float32x4_t)vshlq_n_s32(vaddq_s32(v78, vcvtq_s32_f32(v70)),
                                                                                       0x17uLL)),
                                                                      *(float32x4_t *)a2,
                                                                      3)),
                                          v30)));
      float32x4_t v82 = vaddq_f32(v80, (float32x4_t)vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v33, v79)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v30, v77), (float32x4_t)vshlq_n_s32(vaddq_s32(v78, vcvtq_s32_f32(v71)), 0x17uLL)), *(float32x4_t *)a2, 3)), v30)));
      float32x4_t v83 = vmaxq_f32(v81, v29);
      float32x4_t v84 = vmaxq_f32(v82, v29);
      float32x4_t v85 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vminq_f32(v83, v30));
      float32x4_t v86 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vminq_f32(v84, v30));
      float32x4_t v87 = (int8x16_t *)(v6 + v11);
      v87[-1] = vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v85, v85, 3));
      *float32x4_t v87 = vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v86, v86, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v88 = -v10;
    if (v88 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v89 = 16 * v88;
    float32x4_t v90 = *(float32x4_t *)(v7 + v89);
    int8x16_t v91 = *((int8x16_t *)a2 + 15);
    float32x4_t v92 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v90, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v93 = vmulq_f32(vrecpeq_f32(v92), *((float32x4_t *)a2 + 18));
    float32x4_t v94 = vrecpsq_f32(v93, v92);
    int8x16_t v95 = *((int8x16_t *)a2 + 3);
    float32x4_t v96 = vmulq_f32(v90, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v93, v94)), v95));
    v94.i64[0] = vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v94, v95).u64[0];
    float32x4_t v97 = *((float32x4_t *)a2 + 75);
    float32x4_t v98 = *((float32x4_t *)a2 + 5);
    float32x4_t v99 = vminq_f32(vmaxq_f32(v96, v97), v98);
    float32x4_t v100 = vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1));
    float32x4_t v101 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v100), (int8x16_t)v98);
    float32x4_t v102 = (float32x4_t)vandq_s8((int8x16_t)v98, (int8x16_t)vcgtq_f32(v101, *((float32x4_t *)a2 + 23)));
    float32x4_t v103 = vsubq_f32(vsubq_f32(v101, v98), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v102), v101));
    float32x4_t v104 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v100, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v100))), *((float32x4_t *)a2 + 22)), v102), vmulq_f32(v103, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(*((float32x4_t *)a2 + 28), v103)), vmulq_f32(vmulq_f32(v103, v103), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v103)))))), COERCE_FLOAT(*(_OWORD *)a2)),
             *((float32x4_t *)a2 + 29));
    float32x4_t v105 = vcvtq_f32_s32(vcvtq_s32_f32(v104));
    float32x4_t v106 = vsubq_f32(v105, (float32x4_t)vandq_s8((int8x16_t)v98, (int8x16_t)vcgtq_f32(v105, v104)));
    float32x4_t v107 = vsubq_f32(v104, v106);
    float32x4_t v108 = (float32x4_t)vbslq_s8(v91, (int8x16_t)v96, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(v91, (int8x16_t)v96, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v97, vsubq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v94.f32, 0),
                                                                                      (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v98, vmulq_f32(v107, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v107, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v107)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v106)), 0x17uLL)), *(float32x4_t *)a2, 3)), v98))), v97), v98));
    *(int8x16_t *)(v6 + v89) = vbslq_s8(v91, (int8x16_t)v96, (int8x16_t)vmulq_laneq_f32(v108, v108, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype2_halfTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v83 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      float32x4_t v22 = vrecpsq_f32(v20, v16);
      float32x4_t v23 = vrecpsq_f32(v21, v17);
      int8x16_t v24 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, v22));
      int8x16_t v25 = *((int8x16_t *)a2 + 3);
      float32x4_t v26 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v25));
      float32x4_t v27 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, v23)), v25));
      float32x4_t v28 = *((float32x4_t *)a2 + 75);
      int32x4_t v29 = (int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v22, (int8x16_t)v28);
      int32x4_t v30 = (int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v23, (int8x16_t)v28);
      float32x4_t v31 = vminq_f32(vmaxq_f32(v26, v28), (float32x4_t)vdupq_laneq_s32(v29, 3));
      float32x4_t v32 = vminq_f32(vmaxq_f32(v27, v28), (float32x4_t)vdupq_laneq_s32(v30, 3));
      float32x4_t v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v34 = vaddq_f32(v31, v33);
      int8x16_t v35 = *((int8x16_t *)a2 + 19);
      float32x4_t v36 = *((float32x4_t *)a2 + 20);
      float32x4_t v37 = vaddq_f32(v32, v33);
      float32x4_t v38 = *((float32x4_t *)a2 + 5);
      float32x4_t v39 = (float32x4_t)vorrq_s8(vandq_s8(v35, (int8x16_t)v34), (int8x16_t)v38);
      float32x4_t v40 = (float32x4_t)vorrq_s8(vandq_s8(v35, (int8x16_t)v37), (int8x16_t)v38);
      int8x16_t v41 = *((int8x16_t *)a2 + 21);
      float32x4_t v42 = *((float32x4_t *)a2 + 22);
      float32x4_t v43 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v37, 0x17uLL)), (float32x4_t)vandq_s8(v41, (int8x16_t)vcgtq_f32(v36, v37)));
      float32x4_t v44 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v34, 0x17uLL)), (float32x4_t)vandq_s8(v41, (int8x16_t)vcgtq_f32(v36, v34))), v42);
      float32x4_t v45 = *((float32x4_t *)a2 + 23);
      float32x4_t v46 = *((float32x4_t *)a2 + 24);
      float32x4_t v47 = vsubq_f32(v43, v42);
      float32x4_t v48 = (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v39, v45));
      float32x4_t v49 = (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v40, v45));
      float32x4_t v50 = vaddq_f32(v44, v48);
      float32x4_t v51 = vsubq_f32(vsubq_f32(v39, v38), vmulq_f32(vmulq_f32(v46, v48), v39));
      float32x4_t v52 = vsubq_f32(vsubq_f32(v40, v38), vmulq_f32(vmulq_f32(v46, v49), v40));
      float32x4_t v53 = *((float32x4_t *)a2 + 25);
      float32x4_t v54 = *((float32x4_t *)a2 + 26);
      float32x4_t v55 = vaddq_f32(v53, vmulq_f32(v54, v51));
      float32x4_t v56 = vaddq_f32(v53, vmulq_f32(v54, v52));
      float32x4_t v57 = *((float32x4_t *)a2 + 27);
      float32x4_t v58 = *((float32x4_t *)a2 + 28);
      float32x4_t v59 = vmulq_n_f32(vaddq_f32(vaddq_f32(v47, v49), vmulq_f32(v52, vaddq_f32(vaddq_f32(v57, vmulq_f32(v52, v58)), vmulq_f32(vmulq_f32(v52, v52), v56)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v60 = *((float32x4_t *)a2 + 29);
      float32x4_t v61 = *((float32x4_t *)a2 + 30);
      float32x4_t v62 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v50, vmulq_f32(v51, vaddq_f32(vaddq_f32(v57, vmulq_f32(v51, v58)), vmulq_f32(vmulq_f32(v51, v51), v55)))), COERCE_FLOAT(*(_OWORD *)a2)), v60);
      float32x4_t v63 = vmaxq_f32(v59, v60);
      float32x4_t v64 = vcvtq_f32_s32(vcvtq_s32_f32(v62));
      float32x4_t v65 = vcvtq_f32_s32(vcvtq_s32_f32(v63));
      float32x4_t v66 = vsubq_f32(v64, (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v64, v62)));
      float32x4_t v67 = vsubq_f32(v65, (float32x4_t)vandq_s8((int8x16_t)v38, (int8x16_t)vcgtq_f32(v65, v63)));
      float32x4_t v68 = vsubq_f32(v62, v66);
      float32x4_t v69 = vsubq_f32(v63, v67);
      float32x4_t v70 = *((float32x4_t *)a2 + 31);
      float32x4_t v71 = *((float32x4_t *)a2 + 32);
      float32x4_t v72 = vmulq_f32(v69, vaddq_f32(v71, vmulq_f32(v69, vaddq_f32(v61, vmulq_f32(v70, v69)))));
      float32x4_t v73 = vaddq_f32(v38, vmulq_f32(v68, vaddq_f32(v71, vmulq_f32(v68, vaddq_f32(v61, vmulq_f32(v70, v68))))));
      int32x4_t v74 = vcvtq_s32_f32(v67);
      int32x4_t v75 = *((int32x4_t *)a2 + 33);
      float32x4_t v76 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1);
      int8x16_t v77 = (int8x16_t)vcgtq_f32(v28, vsubq_f32(v31, v76));
      float32x4_t v78 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      int8x16_t v79 = (int8x16_t)vaddq_f32(v78, (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, vbslq_s8((int8x16_t)vcgtq_f32(v28, vsubq_f32(v32, v76)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v30.i8, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v38, v72), (float32x4_t)vshlq_n_s32(vaddq_s32(v75, v74), 0x17uLL)), *(float32x4_t *)a2, 3))));
      float32x4_t v80 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v26, (int8x16_t)vaddq_f32(v78, (float32x4_t)vbslq_s8(v15, (int8x16_t)v26, vbslq_s8(v77, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v29.i8, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(v73, (float32x4_t)vshlq_n_s32(vaddq_s32(v75, vcvtq_s32_f32(v66)), 0x17uLL)), *(float32x4_t *)a2,
                                                                      3)))));
      float32x4_t v81 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, v79);
      float32x4_t v82 = (int8x16_t *)(v6 + v11);
      v82[-1] = vbslq_s8(v15, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v80, v80, 3));
      *float32x4_t v82 = vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v81, v81, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v83 = -v10;
    if (v83 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v84 = 16 * v83;
    float32x4_t v85 = *(float32x4_t *)(v7 + v84);
    int8x16_t v86 = *((int8x16_t *)a2 + 15);
    float32x4_t v87 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v88 = vmulq_f32(vrecpeq_f32(v87), *((float32x4_t *)a2 + 18));
    float32x4_t v89 = vrecpsq_f32(v88, v87);
    float32x4_t v90 = vmulq_f32(v85, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v88, v89)), *((int8x16_t *)a2 + 3)));
    float32x4_t v91 = *((float32x4_t *)a2 + 75);
    int32x4_t v92 = (int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v89, (int8x16_t)v91);
    float32x4_t v93 = vminq_f32(vmaxq_f32(v90, v91), (float32x4_t)vdupq_laneq_s32(v92, 3));
    float32x4_t v94 = vaddq_f32(v93, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1));
    float32x4_t v95 = *((float32x4_t *)a2 + 5);
    float32x4_t v96 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v94), (int8x16_t)v95);
    float32x4_t v97 = (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v96, *((float32x4_t *)a2 + 23)));
    float32x4_t v98 = vsubq_f32(vsubq_f32(v96, v95), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v97), v96));
    float32x4_t v99 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v94, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v94))), *((float32x4_t *)a2 + 22)), v97), vmulq_f32(v98, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v98, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v98, v98), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v98)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v100 = vcvtq_f32_s32(vcvtq_s32_f32(v99));
    float32x4_t v101 = vsubq_f32(v100, (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v100, v99)));
    float32x4_t v102 = vsubq_f32(v99, v101);
    float32x4_t v103 = (float32x4_t)vbslq_s8(v86, (int8x16_t)v90, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(v86, (int8x16_t)v90, vbslq_s8((int8x16_t)vcgtq_f32(v91, vsubq_f32(v93, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v92.i8, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(
                                                                         v95,
                                                                         vmulq_f32(v102, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v102, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v102)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v101)), 0x17uLL)), *(float32x4_t *)a2, 3)))));
    *(int8x16_t *)(v6 + v84) = vbslq_s8(v86, (int8x16_t)v90, (int8x16_t)vmulq_laneq_f32(v103, v103, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype2_niceTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = 16 * *((int *)a1 + 22);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        int8x16_t v12 = *((int8x16_t *)a2 + 15);
        float32x4_t v13 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), *((float32x4_t *)a2 + 16));
        float32x4_t v14 = vrecpeq_f32(v13);
        float32x4_t v15 = vrecpsq_f32(v14, v13);
        float32x4_t v16 = vmulq_f32(v14, v15);
        float32x4_t v17 = vmulq_f32(v11, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v16, vrecpsq_f32(v16, v13))), *((int8x16_t *)a2 + 3)));
        float32x4_t v18 = *((float32x4_t *)a2 + 75);
        int32x4_t v19 = (int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v15, (int8x16_t)v18);
        float32x4_t v20 = vminq_f32(vmaxq_f32(v17, v18), (float32x4_t)vdupq_laneq_s32(v19, 3));
        float32x4_t v21 = *((float32x4_t *)a2 + 5);
        float32x4_t v22 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v18)), v18), (int8x16_t)v21, (int8x16_t)vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
        float32x4_t v23 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v22), (int8x16_t)v21);
        float32x4_t v24 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v23, *((float32x4_t *)a2 + 23)));
        float32x4_t v25 = vsubq_f32(vsubq_f32(v23, v21), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v24), v23));
        float32x4_t v26 = vmulq_f32(v25, v25);
        float32x4_t v27 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v22, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v22))), *((float32x4_t *)a2 + 22)), v24), vmulq_f32(v25, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v25, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v25)),
                            vmulq_f32(v26, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v25)), vmulq_f32(v26, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v25)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
        float32x4_t v28 = vcvtq_f32_s32(vcvtq_s32_f32(v27));
        float32x4_t v29 = vsubq_f32(v28, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v28, v27)));
        float32x4_t v30 = vsubq_f32(v27, v29);
        float32x4_t v31 = (float32x4_t)vbslq_s8(v12, (int8x16_t)v17, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(v12, (int8x16_t)v17, vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(
                                                                            v21,
                                                                            vmulq_f32(v30, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v30, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v30)), vmulq_f32(vmulq_f32(v30, v30), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v30)))))))), (float32x4_t)vshlq_n_s32(
                                                                                         vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v29)), 0x17uLL)), *(float32x4_t *)a2, 3)))));
        *(int8x16_t *)(v7 + v10) = vbslq_s8(v12, (int8x16_t)v17, (int8x16_t)vmulq_laneq_f32(v31, v31, 3));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v6;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Gettype2_floatTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = 16 * *((int *)a1 + 22);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        float32x4_t v12 = *((float32x4_t *)a2 + 72);
        float32x4_t v13 = *((float32x4_t *)a2 + 73);
        float32x4_t v14 = vminq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v11, v12), 3), v12), v13);
        float32x4_t v15 = vminq_f32(vmaxq_f32(vrecpeq_f32(v14), v12), v13);
        float32x4_t v16 = vrecpsq_f32(v14, v15);
        float32x4_t v17 = vminq_f32(vmaxq_f32(vmulq_f32(v15, v16), v12), v13);
        float32x4_t v18 = vmulq_f32(v17, vrecpsq_f32(v14, v17));
        v18.i32[3] = 1.0;
        float32x4_t v19 = vmulq_f32(v11, v18);
        float32x4_t v20 = *((float32x4_t *)a2 + 75);
        int32x4_t v21 = (int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 74), (int8x16_t)v16, (int8x16_t)v20);
        float32x4_t v22 = vminq_f32(vmaxq_f32(v19, v20), (float32x4_t)vdupq_laneq_s32(v21, 3));
        float32x4_t v23 = *((float32x4_t *)a2 + 5);
        float32x4_t v24 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v20)), v20), (int8x16_t)v23, (int8x16_t)vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
        int8x16_t v25 = *((int8x16_t *)a2 + 52);
        int8x16_t v26 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v24);
        int8x16_t v27 = (int8x16_t)vmulq_f32(v24, vaddq_f32(v23, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 49), v26)));
        float32x4_t v28 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), v27), (int8x16_t)v23);
        float32x4_t v29 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v24, *((float32x4_t *)a2 + 21))), vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v24, *((float32x4_t *)a2 + 50)), *((int8x16_t *)a2 + 51)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v24, *((float32x4_t *)a2 + 50)))), (float32x4_t)vandq_s8(v25, v26))), *((float32x4_t *)a2 + 22)), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v27, 0x17uLL)));
        float32x4_t v30 = (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v28, *((float32x4_t *)a2 + 23)));
        float32x4_t v31 = vaddq_f32(v29, v30);
        float32x4_t v32 = vsubq_f32(vsubq_f32(v28, v23), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v30), v28));
        float32x4_t v33 = vmulq_f32(v32, v32);
        float32x4_t v34 = vmulq_n_f32(vaddq_f32(v31, vmulq_f32(v32, vaddq_f32(*((float32x4_t *)a2 + 61), vmulq_f32(v32, vaddq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 59), vmulq_f32(*((float32x4_t *)a2 + 60), v32)), vmulq_f32(v33, vaddq_f32(*((float32x4_t *)a2 + 57), vmulq_f32(*((float32x4_t *)a2 + 58), v32)))), vmulq_f32(vmulq_f32(v33, v33), vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 55), vmulq_f32(*((float32x4_t *)a2 + 56), v32)), vmulq_f32(
                                v33,
                                vaddq_f32(*((float32x4_t *)a2 + 53), vmulq_f32(*((float32x4_t *)a2 + 54), v32)))))))))),
                COERCE_FLOAT(*(_OWORD *)a2));
        float32x4_t v35 = vminq_f32(vmaxq_f32(v34, *((float32x4_t *)a2 + 62)), *((float32x4_t *)a2 + 63));
        float32x4_t v36 = vcvtq_f32_s32(vcvtq_s32_f32(v35));
        float32x4_t v37 = vsubq_f32(v36, (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v36, v35)));
        float32x4_t v38 = vsubq_f32(v35, v37);
        float32x4_t v39 = vmulq_f32(v38, v38);
        int8x16_t v40 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 70), v37);
        int8x16_t v41 = vbslq_s8((int8x16_t)vcgtq_f32(v20, vsubq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 0), (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v23, vorrq_s8((int8x16_t)vcltzq_f32(v34), (int8x16_t)vcgezq_f32(v34))), v20), (int8x16_t)vmulq_f32(vaddq_f32(v23, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 71), v40)), vmulq_f32(vaddq_f32(
                                                             v23,
                                                             vmulq_f32(v38, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 68), vmulq_f32(v38, *((float32x4_t *)a2 + 69))), vmulq_f32(v39, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 66), vmulq_f32(*((float32x4_t *)a2 + 67), v38)), vmulq_f32(v39, vaddq_f32(*((float32x4_t *)a2 + 64), vmulq_f32(*((float32x4_t *)a2 + 65), v38)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33),
                                                                            vcvtq_s32_f32(vaddq_f32(v37, (float32x4_t)vandq_s8(v25, v40)))), 0x17uLL))), (int8x16_t)v34), *(float32x4_t *)a2, 3));
        int8x16_t v42 = *((int8x16_t *)a2 + 15);
        float32x4_t v43 = (float32x4_t)vbslq_s8(v42, (int8x16_t)v19, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(v42, (int8x16_t)v19, v41)));
        *(int8x16_t *)(v6 + v10) = vbslq_s8(v42, (int8x16_t)v19, (int8x16_t)vmulq_laneq_f32(v43, v43, 3));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v7;
      v6 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Gettype3_fast_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v81) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v10 + 32);
      int8x16_t v16 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      int8x16_t v17 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15));
      int8x16_t v18 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15));
      int8x16_t v19 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v15));
      int8x16_t v20 = *((int8x16_t *)a2 + 17);
      int8x16_t v21 = vandq_s8(v20, v17);
      int8x16_t v22 = vandq_s8(v20, v18);
      int8x16_t v23 = vandq_s8(v20, v19);
      int8x16_t v24 = *((int8x16_t *)a2 + 3);
      float32x4_t v25 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v21, v24));
      float32x4_t v26 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v22, v24));
      float32x4_t v27 = vmulq_f32(v14, (float32x4_t)vorrq_s8(v23, v24));
      float32x4_t v28 = *((float32x4_t *)a2 + 75);
      float32x4_t v29 = *((float32x4_t *)a2 + 5);
      float32x4_t v30 = *((float32x4_t *)a2 + 6);
      float32x4_t v31 = vminq_f32(vmaxq_f32(v25, v28), v29);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v26, v28), v29);
      long long v33 = *((_OWORD *)a2 + 1);
      float32x4_t v34 = vminq_f32(vmaxq_f32(v27, v28), v29);
      float32x4_t v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v36 = vmulq_f32(v30, vcvtq_f32_s32((int32x4_t)vaddq_f32(v31, v35)));
      float32x4_t v37 = vmulq_f32(v30, vcvtq_f32_s32((int32x4_t)vaddq_f32(v32, v35)));
      float32x4_t v38 = vmulq_f32(v30, vcvtq_f32_s32((int32x4_t)vaddq_f32(v34, v35)));
      float32x4_t v39 = vcvtq_f32_s32(vcvtq_s32_f32(v36));
      float32x4_t v40 = vcvtq_f32_s32(vcvtq_s32_f32(v37));
      float32x4_t v41 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
      float32x4_t v42 = *((float32x4_t *)a2 + 7);
      float32x4_t v43 = *((float32x4_t *)a2 + 8);
      float32x4_t v44 = vrsqrteq_f32(vaddq_f32(v42, vsubq_f32(v36, v39)));
      float32x4_t v45 = vrsqrteq_f32(vaddq_f32(v42, vsubq_f32(v37, v40)));
      float32x4_t v46 = vaddq_f32(v43, v39);
      float32x4_t v47 = vrsqrteq_f32(vaddq_f32(v42, vsubq_f32(v38, v41)));
      float32x4_t v48 = vaddq_f32(v43, v40);
      float32x4_t v49 = vaddq_f32(v43, v41);
      float32x4_t v50 = *((float32x4_t *)a2 + 9);
      float32x4_t v51 = *((float32x4_t *)a2 + 10);
      float32x4_t v52 = vmulq_n_f32(vsubq_f32(v46, vmulq_f32(v44, v50)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v53 = vmulq_n_f32(vsubq_f32(v48, vmulq_f32(v45, v50)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v54 = vmulq_n_f32(vsubq_f32(v49, vmulq_f32(v47, v50)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v55 = vcvtq_f32_s32(vcvtq_s32_f32(v52));
      float32x4_t v56 = vcvtq_f32_s32(vcvtq_s32_f32(v53));
      float32x4_t v57 = vcvtq_f32_s32(vcvtq_s32_f32(v54));
      float32x4_t v58 = vsubq_f32(v55, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v55, v52)));
      float32x4_t v59 = vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v56, v53)));
      float32x4_t v60 = vsubq_f32(v57, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v57, v54)));
      float32x4_t v61 = *((float32x4_t *)a2 + 11);
      float32x4_t v62 = *((float32x4_t *)a2 + 12);
      float32x4_t v63 = vmulq_f32(vrecpeq_f32(vsubq_f32(v61, vsubq_f32(v52, v58))), v62);
      float32x4_t v64 = vmulq_f32(vrecpeq_f32(vsubq_f32(v61, vsubq_f32(v53, v59))), v62);
      float32x4_t v65 = vmulq_f32(vrecpeq_f32(vsubq_f32(v61, vsubq_f32(v54, v60))), v62);
      float32x4_t v66 = vmaxq_f32(vaddq_f32(vaddq_f32(v51, v58), vmulq_f32(v63, v63)), v28);
      float32x4_t v67 = vmaxq_f32(vaddq_f32(vaddq_f32(v51, v59), vmulq_f32(v64, v64)), v28);
      float32x4_t v68 = *((float32x4_t *)a2 + 13);
      float32x4_t v69 = *((float32x4_t *)a2 + 14);
      float32x4_t v70 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v67, v68), v69));
      float32x4_t v71 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(v51, v60), vmulq_f32(v65, v65)), v28), v68), v69));
      int8x16_t v72 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v66, v68), v69)), *(float32x4_t *)a2, 3);
      int8x16_t v73 = (int8x16_t)vmulq_n_f32(v31, *(float *)&v33);
      int8x16_t v74 = (int8x16_t)vmulq_n_f32(v32, *(float *)&v33);
      int8x16_t v75 = (int8x16_t)vmulq_n_f32(v34, *(float *)&v33);
      float32x4_t v76 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v33, 1);
      float32x4_t v77 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v25, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v28, vsubq_f32(v31, v76)), v73, v72), v29));
      float32x4_t v78 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v26, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v28, vsubq_f32(v32, v76)), v74, (int8x16_t)vmulq_laneq_f32(v70, *(float32x4_t *)a2, 3)), v29));
      float32x4_t v79 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v27, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v28, vsubq_f32(v34, v76)), v75, (int8x16_t)vmulq_laneq_f32(v71, *(float32x4_t *)a2, 3)), v29));
      float32x4_t v80 = (int8x16_t *)(v6 + v10);
      *float32x4_t v80 = vbslq_s8(v16, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v77, v77, 3));
      v80[1] = vbslq_s8(v16, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v78, v78, 3));
      v80[2] = vbslq_s8(v16, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v79, v79, 3));
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v81) = -v11;
    if ((int)v81 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v81 = v81;
    do
    {
      int8x16_t v82 = *((int8x16_t *)a2 + 15);
      float32x4_t v83 = vmulq_f32(*(float32x4_t *)(v7 + 16 * v81), (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v7 + 16 * v81), 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
      float32x4_t v84 = *((float32x4_t *)a2 + 75);
      float32x4_t v85 = *((float32x4_t *)a2 + 5);
      float32x4_t v86 = vminq_f32(vmaxq_f32(v83, v84), v85);
      float32x4_t v87 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1))));
      float32x4_t v88 = vcvtq_f32_s32(vcvtq_s32_f32(v87));
      float32x4_t v89 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v88), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v87, v88))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v90 = vcvtq_f32_s32(vcvtq_s32_f32(v89));
      float32x4_t v91 = vsubq_f32(v90, (float32x4_t)vandq_s8((int8x16_t)v85, (int8x16_t)vcgtq_f32(v90, v89)));
      float32x4_t v92 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v89, v91))), *((float32x4_t *)a2 + 12));
      float32x4_t v93 = (float32x4_t)vbslq_s8(v82, (int8x16_t)v83, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v84, vsubq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v86, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v92, v92),
                                                                                           vaddq_f32(*((float32x4_t *)a2 + 10), v91)), v84), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))), *(float32x4_t *)a2, 3)), v85));
      *(int8x16_t *)(v6 + 16 * v81++) = vbslq_s8(v82, (int8x16_t)v83, (int8x16_t)vmulq_laneq_f32(v93, v93, 3));
    }
    while (v81 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype3_fixed_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v82) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v10 + 32);
      int8x16_t v16 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v15);
      float32x4_t v18 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15));
      float32x4_t v19 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15));
      int8x16_t v21 = *((int8x16_t *)a2 + 17);
      float32x4_t v20 = *((float32x4_t *)a2 + 18);
      int8x16_t v22 = vandq_s8(v21, (int8x16_t)vmulq_f32(v18, v20));
      int8x16_t v23 = vandq_s8(v21, (int8x16_t)vmulq_f32(v19, v20));
      int8x16_t v24 = vandq_s8(v21, (int8x16_t)vmulq_f32(vrecpeq_f32(v17), v20));
      int8x16_t v25 = *((int8x16_t *)a2 + 3);
      float32x4_t v26 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v25));
      float32x4_t v27 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v23, v25));
      float32x4_t v28 = vmulq_f32(v14, (float32x4_t)vorrq_s8(v24, v25));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = *((float32x4_t *)a2 + 6);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v26, v29), v30);
      float32x4_t v33 = vminq_f32(vmaxq_f32(v27, v29), v30);
      long long v34 = *((_OWORD *)a2 + 1);
      float32x4_t v35 = vminq_f32(vmaxq_f32(v28, v29), v30);
      float32x4_t v36 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v37 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)vaddq_f32(v32, v36)));
      float32x4_t v38 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)vaddq_f32(v33, v36)));
      float32x4_t v39 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)vaddq_f32(v35, v36)));
      float32x4_t v40 = vcvtq_f32_s32(vcvtq_s32_f32(v37));
      float32x4_t v41 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
      float32x4_t v42 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
      float32x4_t v43 = *((float32x4_t *)a2 + 7);
      float32x4_t v44 = *((float32x4_t *)a2 + 8);
      float32x4_t v45 = vrsqrteq_f32(vaddq_f32(v43, vsubq_f32(v37, v40)));
      float32x4_t v46 = vrsqrteq_f32(vaddq_f32(v43, vsubq_f32(v38, v41)));
      float32x4_t v47 = vaddq_f32(v44, v40);
      float32x4_t v48 = vrsqrteq_f32(vaddq_f32(v43, vsubq_f32(v39, v42)));
      float32x4_t v49 = vaddq_f32(v44, v41);
      float32x4_t v50 = vaddq_f32(v44, v42);
      float32x4_t v51 = *((float32x4_t *)a2 + 9);
      float32x4_t v52 = *((float32x4_t *)a2 + 10);
      float32x4_t v53 = vmulq_n_f32(vsubq_f32(v47, vmulq_f32(v45, v51)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v54 = vmulq_n_f32(vsubq_f32(v49, vmulq_f32(v46, v51)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v55 = vmulq_n_f32(vsubq_f32(v50, vmulq_f32(v48, v51)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v56 = vcvtq_f32_s32(vcvtq_s32_f32(v53));
      float32x4_t v57 = vcvtq_f32_s32(vcvtq_s32_f32(v54));
      float32x4_t v58 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
      float32x4_t v59 = vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v56, v53)));
      float32x4_t v60 = vsubq_f32(v57, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v57, v54)));
      float32x4_t v61 = vsubq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v58, v55)));
      float32x4_t v62 = *((float32x4_t *)a2 + 11);
      float32x4_t v63 = *((float32x4_t *)a2 + 12);
      float32x4_t v64 = vmulq_f32(vrecpeq_f32(vsubq_f32(v62, vsubq_f32(v53, v59))), v63);
      float32x4_t v65 = vmulq_f32(vrecpeq_f32(vsubq_f32(v62, vsubq_f32(v54, v60))), v63);
      float32x4_t v66 = vmulq_f32(vrecpeq_f32(vsubq_f32(v62, vsubq_f32(v55, v61))), v63);
      float32x4_t v67 = vmaxq_f32(vaddq_f32(vaddq_f32(v52, v59), vmulq_f32(v64, v64)), v29);
      float32x4_t v68 = vmaxq_f32(vaddq_f32(vaddq_f32(v52, v60), vmulq_f32(v65, v65)), v29);
      float32x4_t v69 = *((float32x4_t *)a2 + 13);
      float32x4_t v70 = *((float32x4_t *)a2 + 14);
      float32x4_t v71 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v68, v69), v70));
      float32x4_t v72 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(v52, v61), vmulq_f32(v66, v66)), v29), v69), v70));
      int8x16_t v73 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v67, v69), v70)), *(float32x4_t *)a2, 3);
      int8x16_t v74 = (int8x16_t)vmulq_n_f32(v32, *(float *)&v34);
      int8x16_t v75 = (int8x16_t)vmulq_n_f32(v33, *(float *)&v34);
      int8x16_t v76 = (int8x16_t)vmulq_n_f32(v35, *(float *)&v34);
      float32x4_t v77 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v34, 1);
      float32x4_t v78 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v26, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v77)), v74, v73), v30));
      float32x4_t v79 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v27, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v33, v77)), v75, (int8x16_t)vmulq_laneq_f32(v71, *(float32x4_t *)a2, 3)), v30));
      float32x4_t v80 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v28, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v35, v77)), v76, (int8x16_t)vmulq_laneq_f32(v72, *(float32x4_t *)a2, 3)), v30));
      uint64_t v81 = (int8x16_t *)(v6 + v10);
      *uint64_t v81 = vbslq_s8(v16, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v78, v78, 3));
      v81[1] = vbslq_s8(v16, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v79, v79, 3));
      v81[2] = vbslq_s8(v16, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v80, v80, 3));
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v82) = -v11;
    if ((int)v82 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v82 = v82;
    do
    {
      int8x16_t v83 = *((int8x16_t *)a2 + 15);
      float32x4_t v84 = vmulq_f32(*(float32x4_t *)(v7 + 16 * v82), (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v7 + 16 * v82), 3), *((float32x4_t *)a2 + 16))), *((float32x4_t *)a2 + 18))), *((int8x16_t *)a2 + 3)));
      float32x4_t v85 = *((float32x4_t *)a2 + 75);
      float32x4_t v86 = *((float32x4_t *)a2 + 5);
      float32x4_t v87 = vminq_f32(vmaxq_f32(v84, v85), v86);
      float32x4_t v88 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1))));
      float32x4_t v89 = vcvtq_f32_s32(vcvtq_s32_f32(v88));
      float32x4_t v90 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v89), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v88, v89))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v91 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
      float32x4_t v92 = vsubq_f32(v91, (float32x4_t)vandq_s8((int8x16_t)v86, (int8x16_t)vcgtq_f32(v91, v90)));
      float32x4_t v93 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v90, v92))), *((float32x4_t *)a2 + 12));
      float32x4_t v94 = (float32x4_t)vbslq_s8(v83, (int8x16_t)v84, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v85, vsubq_f32(v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v87, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v93, v93),
                                                                                           vaddq_f32(*((float32x4_t *)a2 + 10), v92)), v85), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))), *(float32x4_t *)a2, 3)), v86));
      *(int8x16_t *)(v6 + 16 * v82++) = vbslq_s8(v83, (int8x16_t)v84, (int8x16_t)vmulq_laneq_f32(v94, v94, 3));
    }
    while (v82 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype3_nice_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v100 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      int8x16_t v24 = vandq_s8(v23, v22);
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v26));
      float32x4_t v28 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = vminq_f32(vmaxq_f32(v27, v29), v30);
      long long v32 = *((_OWORD *)a2 + 1);
      float32x4_t v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v34 = vminq_f32(vmaxq_f32(v28, v29), v30);
      int8x16_t v35 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v29)), v29);
      float32x4_t v36 = (float32x4_t)vbslq_s8(v35, (int8x16_t)v30, (int8x16_t)vaddq_f32(v31, v33));
      float32x4_t v37 = (float32x4_t)vbslq_s8(v35, (int8x16_t)v30, (int8x16_t)vaddq_f32(v34, v33));
      int8x16_t v38 = *((int8x16_t *)a2 + 19);
      float32x4_t v39 = *((float32x4_t *)a2 + 20);
      float32x4_t v40 = (float32x4_t)vorrq_s8(vandq_s8(v38, (int8x16_t)v36), (int8x16_t)v30);
      int8x16_t v41 = *((int8x16_t *)a2 + 21);
      float32x4_t v42 = *((float32x4_t *)a2 + 22);
      float32x4_t v43 = (float32x4_t)vorrq_s8(vandq_s8(v38, (int8x16_t)v37), (int8x16_t)v30);
      float32x4_t v44 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v37, 0x17uLL)), (float32x4_t)vandq_s8(v41, (int8x16_t)vcgtq_f32(v39, v37)));
      float32x4_t v45 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x17uLL)), (float32x4_t)vandq_s8(v41, (int8x16_t)vcgtq_f32(v39, v36))), v42);
      float32x4_t v46 = *((float32x4_t *)a2 + 23);
      float32x4_t v47 = *((float32x4_t *)a2 + 24);
      float32x4_t v48 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v40, v46));
      float32x4_t v49 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v43, v46));
      float32x4_t v50 = vaddq_f32(v45, v48);
      float32x4_t v51 = vmulq_f32(v47, v48);
      float32x4_t v52 = vmulq_f32(vmulq_f32(v47, v49), v43);
      float32x4_t v53 = vaddq_f32(vsubq_f32(v44, v42), v49);
      float32x4_t v54 = vsubq_f32(vsubq_f32(v40, v30), vmulq_f32(v51, v40));
      float32x4_t v55 = vsubq_f32(vsubq_f32(v43, v30), v52);
      float32x4_t v56 = *((float32x4_t *)a2 + 37);
      float32x4_t v57 = *((float32x4_t *)a2 + 38);
      float32x4_t v58 = vmulq_f32(v54, v54);
      float32x4_t v59 = *((float32x4_t *)a2 + 39);
      float32x4_t v60 = *((float32x4_t *)a2 + 40);
      float32x4_t v61 = vaddq_f32(v56, vmulq_f32(v57, v54));
      float32x4_t v62 = vaddq_f32(v59, vmulq_f32(v60, v54));
      float32x4_t v63 = vaddq_f32(v59, vmulq_f32(v60, v55));
      float32x4_t v64 = *((float32x4_t *)a2 + 41);
      float32x4_t v65 = *((float32x4_t *)a2 + 42);
      float32x4_t v66 = vaddq_f32(v56, vmulq_f32(v57, v55));
      float32x4_t v67 = vaddq_f32(v64, vmulq_f32(v65, v54));
      float32x4_t v68 = vaddq_f32(v64, vmulq_f32(v65, v55));
      float32x4_t v69 = vmulq_f32(v55, v55);
      float32x4_t v70 = vmulq_f32(v54, vaddq_f32(v67, vmulq_f32(v58, vaddq_f32(v61, vmulq_f32(v58, v62)))));
      float32x4_t v71 = *((float32x4_t *)a2 + 43);
      float32x4_t v72 = *((float32x4_t *)a2 + 44);
      float32x4_t v73 = vmulq_n_f32(vaddq_f32(v53, vmulq_f32(v55, vaddq_f32(v71, vmulq_f32(v55, vaddq_f32(v68, vmulq_f32(v69, vaddq_f32(v66, vmulq_f32(v69, v63)))))))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v74 = *((float32x4_t *)a2 + 29);
      float32x4_t v75 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v50, vmulq_f32(v54, vaddq_f32(v71, v70))), COERCE_FLOAT(*(_OWORD *)a2)), v74);
      float32x4_t v76 = vmaxq_f32(v73, v74);
      float32x4_t v77 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
      float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v76));
      float32x4_t v79 = vsubq_f32(v77, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v77, v75)));
      float32x4_t v80 = vsubq_f32(v78, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v78, v76)));
      float32x4_t v81 = vsubq_f32(v75, v79);
      float32x4_t v82 = vsubq_f32(v76, v80);
      float32x4_t v83 = *((float32x4_t *)a2 + 45);
      float32x4_t v84 = *((float32x4_t *)a2 + 46);
      float32x4_t v85 = vaddq_f32(v72, vmulq_f32(v83, v81));
      float32x4_t v86 = vaddq_f32(v72, vmulq_f32(v83, v82));
      float32x4_t v87 = *((float32x4_t *)a2 + 47);
      float32x4_t v88 = *((float32x4_t *)a2 + 48);
      int32x4_t v89 = *((int32x4_t *)a2 + 33);
      float32x4_t v90 = vmulq_f32(vaddq_f32(v30, vmulq_f32(v81, vaddq_f32(v88, vmulq_f32(v81, vaddq_f32(vaddq_f32(v84, vmulq_f32(v81, v87)), vmulq_f32(vmulq_f32(v81, v81), v85)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v89, vcvtq_s32_f32(v79)), 0x17uLL));
      float32x4_t v91 = vmulq_f32(vaddq_f32(v30, vmulq_f32(v82, vaddq_f32(v88, vmulq_f32(v82, vaddq_f32(vaddq_f32(v84, vmulq_f32(v87, v82)), vmulq_f32(vmulq_f32(v82, v82), v86)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v89, vcvtq_s32_f32(v80)), 0x17uLL));
      int8x16_t v92 = (int8x16_t)vmulq_n_f32(v31, *(float *)&v32);
      int8x16_t v93 = (int8x16_t)vmulq_n_f32(v34, *(float *)&v32);
      float32x4_t v94 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v32, 1);
      int8x16_t v95 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v31, v94)), v92, (int8x16_t)vmulq_laneq_f32(v90, *(float32x4_t *)a2, 3)), v30);
      int8x16_t v96 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v34, v94)), v93, (int8x16_t)vmulq_laneq_f32(v91, *(float32x4_t *)a2, 3)), v30);
      float32x4_t v97 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, v95);
      float32x4_t v98 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v28, v96);
      float32x4_t v99 = (int8x16_t *)(v6 + v11);
      v99[-1] = vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v97, v97, 3));
      *float32x4_t v99 = vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v98, v98, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v100 = -v10;
    if (v100 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v101 = 16 * v100;
    float32x4_t v102 = *(float32x4_t *)(v7 + v101);
    int8x16_t v103 = *((int8x16_t *)a2 + 15);
    float32x4_t v104 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v102, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v105 = vrecpeq_f32(v104);
    float32x4_t v106 = vmulq_f32(v105, vrecpsq_f32(v105, v104));
    float32x4_t v107 = vmulq_f32(v102, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v106, vrecpsq_f32(v106, v104))), *((int8x16_t *)a2 + 3)));
    float32x4_t v108 = *((float32x4_t *)a2 + 75);
    float32x4_t v109 = *((float32x4_t *)a2 + 5);
    float32x4_t v110 = vminq_f32(vmaxq_f32(v107, v108), v109);
    float32x4_t v111 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v109, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v108)), v108), (int8x16_t)v109, (int8x16_t)vaddq_f32(v110, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
    float32x4_t v112 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v111), (int8x16_t)v109);
    float32x4_t v113 = (float32x4_t)vandq_s8((int8x16_t)v109, (int8x16_t)vcgtq_f32(v112, *((float32x4_t *)a2 + 23)));
    float32x4_t v114 = vsubq_f32(vsubq_f32(v112, v109), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v113), v112));
    float32x4_t v115 = vmulq_f32(v114, v114);
    float32x4_t v116 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v111, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v111))), *((float32x4_t *)a2 + 22)), v113), vmulq_f32(v114, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v114, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v114)),
                         vmulq_f32(v115, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v114)), vmulq_f32(v115, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v114)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
    float32x4_t v117 = vcvtq_f32_s32(vcvtq_s32_f32(v116));
    float32x4_t v118 = vsubq_f32(v117, (float32x4_t)vandq_s8((int8x16_t)v109, (int8x16_t)vcgtq_f32(v117, v116)));
    float32x4_t v119 = vsubq_f32(v116, v118);
    float32x4_t v120 = (float32x4_t)vbslq_s8(v103, (int8x16_t)v107, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v108, vsubq_f32(v110, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v110, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v109, vmulq_f32(v119, vaddq_f32(
                                                                           *((float32x4_t *)a2 + 48),
                                                                           vmulq_f32(v119, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v119)), vmulq_f32(vmulq_f32(v119, v119), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v119)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v118)), 0x17uLL)),
                                                                   *(float32x4_t *)a2,
                                                                   3)),
                                       v109));
    *(int8x16_t *)(v6 + v101) = vbslq_s8(v103, (int8x16_t)v107, (int8x16_t)vmulq_laneq_f32(v120, v120, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype3_half_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v81 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 75);
      float32x4_t v27 = *((float32x4_t *)a2 + 5);
      float32x4_t v28 = vminq_f32(vmaxq_f32(v24, v26), v27);
      float32x4_t v29 = vminq_f32(vmaxq_f32(v25, v26), v27);
      long long v30 = *((_OWORD *)a2 + 1);
      float32x4_t v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v32 = vaddq_f32(v28, v31);
      float32x4_t v33 = vaddq_f32(v29, v31);
      int8x16_t v34 = *((int8x16_t *)a2 + 19);
      float32x4_t v35 = *((float32x4_t *)a2 + 20);
      float32x4_t v36 = (float32x4_t)vorrq_s8(vandq_s8(v34, (int8x16_t)v32), (int8x16_t)v27);
      float32x4_t v37 = (float32x4_t)vorrq_s8(vandq_s8(v34, (int8x16_t)v33), (int8x16_t)v27);
      int8x16_t v38 = *((int8x16_t *)a2 + 21);
      float32x4_t v39 = *((float32x4_t *)a2 + 22);
      float32x4_t v40 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v33, 0x17uLL)), (float32x4_t)vandq_s8(v38, (int8x16_t)vcgtq_f32(v35, v33)));
      float32x4_t v41 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v32, 0x17uLL)), (float32x4_t)vandq_s8(v38, (int8x16_t)vcgtq_f32(v35, v32))), v39);
      float32x4_t v42 = *((float32x4_t *)a2 + 23);
      float32x4_t v43 = *((float32x4_t *)a2 + 24);
      float32x4_t v44 = vsubq_f32(v40, v39);
      float32x4_t v45 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v36, v42));
      float32x4_t v46 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v37, v42));
      float32x4_t v47 = vaddq_f32(v41, v45);
      float32x4_t v48 = vsubq_f32(vsubq_f32(v36, v27), vmulq_f32(vmulq_f32(v43, v45), v36));
      float32x4_t v49 = vsubq_f32(vsubq_f32(v37, v27), vmulq_f32(vmulq_f32(v43, v46), v37));
      float32x4_t v50 = *((float32x4_t *)a2 + 25);
      float32x4_t v51 = *((float32x4_t *)a2 + 26);
      float32x4_t v52 = vaddq_f32(v50, vmulq_f32(v51, v48));
      float32x4_t v53 = vaddq_f32(v50, vmulq_f32(v51, v49));
      float32x4_t v54 = *((float32x4_t *)a2 + 27);
      float32x4_t v55 = *((float32x4_t *)a2 + 28);
      float32x4_t v56 = vmulq_n_f32(vaddq_f32(vaddq_f32(v44, v46), vmulq_f32(v49, vaddq_f32(vaddq_f32(v54, vmulq_f32(v55, v49)), vmulq_f32(vmulq_f32(v49, v49), v53)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v57 = *((float32x4_t *)a2 + 29);
      float32x4_t v58 = *((float32x4_t *)a2 + 30);
      float32x4_t v59 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v47, vmulq_f32(v48, vaddq_f32(vaddq_f32(v54, vmulq_f32(v55, v48)), vmulq_f32(vmulq_f32(v48, v48), v52)))), COERCE_FLOAT(*(_OWORD *)a2)), v57);
      float32x4_t v60 = vmaxq_f32(v56, v57);
      float32x4_t v61 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v62 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
      float32x4_t v63 = vsubq_f32(v61, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v61, v59)));
      float32x4_t v64 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v62, v60)));
      float32x4_t v65 = vsubq_f32(v59, v63);
      float32x4_t v66 = vsubq_f32(v60, v64);
      float32x4_t v67 = *((float32x4_t *)a2 + 31);
      float32x4_t v68 = *((float32x4_t *)a2 + 32);
      float32x4_t v69 = vmulq_f32(v66, vaddq_f32(v68, vmulq_f32(v66, vaddq_f32(v58, vmulq_f32(v67, v66)))));
      float32x4_t v70 = vaddq_f32(v27, vmulq_f32(v65, vaddq_f32(v68, vmulq_f32(v65, vaddq_f32(v58, vmulq_f32(v67, v65))))));
      int32x4_t v71 = vcvtq_s32_f32(v64);
      int32x4_t v72 = *((int32x4_t *)a2 + 33);
      float32x4_t v73 = vmulq_f32(v70, (float32x4_t)vshlq_n_s32(vaddq_s32(v72, vcvtq_s32_f32(v63)), 0x17uLL));
      float32x4_t v74 = vmulq_f32(vaddq_f32(v27, v69), (float32x4_t)vshlq_n_s32(vaddq_s32(v72, v71), 0x17uLL));
      int8x16_t v75 = (int8x16_t)vmulq_n_f32(v28, *(float *)&v30);
      int8x16_t v76 = (int8x16_t)vmulq_n_f32(v29, *(float *)&v30);
      float32x4_t v77 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v30, 1);
      float32x4_t v78 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v28, v77)), v75, (int8x16_t)vmulq_laneq_f32(v73, *(float32x4_t *)a2, 3)), v27));
      float32x4_t v79 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v29, v77)), v76, (int8x16_t)vmulq_laneq_f32(v74, *(float32x4_t *)a2, 3)), v27));
      float32x4_t v80 = (int8x16_t *)(v6 + v11);
      v80[-1] = vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v78, v78, 3));
      *float32x4_t v80 = vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v79, v79, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v81 = -v10;
    if (v81 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v82 = 16 * v81;
    float32x4_t v83 = *(float32x4_t *)(v7 + v82);
    int8x16_t v84 = *((int8x16_t *)a2 + 15);
    float32x4_t v85 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v86 = vmulq_f32(vrecpeq_f32(v85), *((float32x4_t *)a2 + 18));
    float32x4_t v87 = vmulq_f32(v83, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v86, vrecpsq_f32(v86, v85))), *((int8x16_t *)a2 + 3)));
    float32x4_t v88 = *((float32x4_t *)a2 + 75);
    float32x4_t v89 = *((float32x4_t *)a2 + 5);
    float32x4_t v90 = vminq_f32(vmaxq_f32(v87, v88), v89);
    float32x4_t v91 = vaddq_f32(v90, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1));
    float32x4_t v92 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v91), (int8x16_t)v89);
    float32x4_t v93 = (float32x4_t)vandq_s8((int8x16_t)v89, (int8x16_t)vcgtq_f32(v92, *((float32x4_t *)a2 + 23)));
    float32x4_t v94 = vsubq_f32(vsubq_f32(v92, v89), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v93), v92));
    float32x4_t v95 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v91, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v91))), *((float32x4_t *)a2 + 22)), v93), vmulq_f32(v94, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(*((float32x4_t *)a2 + 28), v94)), vmulq_f32(vmulq_f32(v94, v94), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v94)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v96 = vcvtq_f32_s32(vcvtq_s32_f32(v95));
    float32x4_t v97 = vsubq_f32(v96, (float32x4_t)vandq_s8((int8x16_t)v89, (int8x16_t)vcgtq_f32(v96, v95)));
    float32x4_t v98 = vsubq_f32(v95, v97);
    float32x4_t v99 = (float32x4_t)vbslq_s8(v84, (int8x16_t)v87, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v88, vsubq_f32(v90, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v90, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v89, vmulq_f32(v98, vaddq_f32(
                                                                          *((float32x4_t *)a2 + 32),
                                                                          vmulq_f32(v98, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v98)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v97)), 0x17uLL)), *(float32x4_t *)a2, 3)), v89));
    *(int8x16_t *)(v6 + v82) = vbslq_s8(v84, (int8x16_t)v87, (int8x16_t)vmulq_laneq_f32(v99, v99, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype3_halfTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v89 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      float32x4_t v22 = vrecpsq_f32(v20, v16);
      float32x4_t v23 = vrecpsq_f32(v21, v17);
      int8x16_t v24 = (int8x16_t)vmulq_f32(v20, v22);
      int8x16_t v25 = vandq_s8(v19, (int8x16_t)vmulq_f32(v21, v23));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(vandq_s8(v19, v24), v26));
      float32x4_t v28 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      int32x4_t v30 = (int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 76), (int8x16_t)v23, (int8x16_t)v29);
      float32x4_t v31 = vminq_f32(vmaxq_f32(v27, v29), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 76), (int8x16_t)v22, (int8x16_t)v29), 3));
      float32x4_t v32 = vminq_f32(vmaxq_f32(v28, v29), (float32x4_t)vdupq_laneq_s32(v30, 3));
      long long v33 = *((_OWORD *)a2 + 1);
      float32x4_t v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v35 = vaddq_f32(v31, v34);
      float32x4_t v36 = vaddq_f32(v32, v34);
      int8x16_t v37 = *((int8x16_t *)a2 + 19);
      float32x4_t v38 = *((float32x4_t *)a2 + 20);
      float32x4_t v39 = *((float32x4_t *)a2 + 5);
      float32x4_t v40 = (float32x4_t)vorrq_s8(vandq_s8(v37, (int8x16_t)v35), (int8x16_t)v39);
      int8x16_t v41 = *((int8x16_t *)a2 + 21);
      float32x4_t v42 = *((float32x4_t *)a2 + 22);
      float32x4_t v43 = (float32x4_t)vorrq_s8(vandq_s8(v37, (int8x16_t)v36), (int8x16_t)v39);
      float32x4_t v44 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x17uLL)), (float32x4_t)vandq_s8(v41, (int8x16_t)vcgtq_f32(v38, v36)));
      float32x4_t v45 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v35, 0x17uLL)), (float32x4_t)vandq_s8(v41, (int8x16_t)vcgtq_f32(v38, v35))), v42);
      float32x4_t v46 = *((float32x4_t *)a2 + 23);
      float32x4_t v47 = *((float32x4_t *)a2 + 24);
      float32x4_t v48 = vsubq_f32(v44, v42);
      float32x4_t v49 = (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v40, v46));
      float32x4_t v50 = (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v43, v46));
      float32x4_t v51 = vmulq_f32(v47, v49);
      float32x4_t v52 = vaddq_f32(v45, v49);
      float32x4_t v53 = vmulq_f32(vmulq_f32(v47, v50), v43);
      float32x4_t v54 = vaddq_f32(v48, v50);
      float32x4_t v55 = vsubq_f32(vsubq_f32(v40, v39), vmulq_f32(v51, v40));
      float32x4_t v56 = vsubq_f32(vsubq_f32(v43, v39), v53);
      float32x4_t v57 = *((float32x4_t *)a2 + 25);
      float32x4_t v58 = *((float32x4_t *)a2 + 26);
      float32x4_t v59 = vaddq_f32(v57, vmulq_f32(v58, v55));
      float32x4_t v60 = vaddq_f32(v57, vmulq_f32(v58, v56));
      float32x4_t v61 = *((float32x4_t *)a2 + 27);
      float32x4_t v62 = *((float32x4_t *)a2 + 28);
      float32x4_t v63 = vmulq_n_f32(vaddq_f32(v52, vmulq_f32(v55, vaddq_f32(vaddq_f32(v61, vmulq_f32(v55, v62)), vmulq_f32(vmulq_f32(v55, v55), v59)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v64 = vmulq_n_f32(vaddq_f32(v54, vmulq_f32(v56, vaddq_f32(vaddq_f32(v61, vmulq_f32(v56, v62)), vmulq_f32(vmulq_f32(v56, v56), v60)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v65 = *((float32x4_t *)a2 + 29);
      float32x4_t v66 = *((float32x4_t *)a2 + 30);
      float32x4_t v67 = vmaxq_f32(v63, v65);
      float32x4_t v68 = vmaxq_f32(v64, v65);
      float32x4_t v69 = vcvtq_f32_s32(vcvtq_s32_f32(v67));
      float32x4_t v70 = vcvtq_f32_s32(vcvtq_s32_f32(v68));
      float32x4_t v71 = vsubq_f32(v69, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v69, v67)));
      float32x4_t v72 = vsubq_f32(v70, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v70, v68)));
      float32x4_t v73 = vsubq_f32(v67, v71);
      float32x4_t v74 = vsubq_f32(v68, v72);
      float32x4_t v75 = *((float32x4_t *)a2 + 31);
      float32x4_t v76 = *((float32x4_t *)a2 + 32);
      float32x4_t v77 = vmulq_f32(v74, vaddq_f32(v76, vmulq_f32(v74, vaddq_f32(v66, vmulq_f32(v75, v74)))));
      float32x4_t v78 = vaddq_f32(v39, vmulq_f32(v73, vaddq_f32(v76, vmulq_f32(v73, vaddq_f32(v66, vmulq_f32(v75, v73))))));
      int32x4_t v79 = vcvtq_s32_f32(v72);
      int32x4_t v80 = *((int32x4_t *)a2 + 33);
      float32x4_t v81 = vmulq_f32(vaddq_f32(v39, v77), (float32x4_t)vshlq_n_s32(vaddq_s32(v80, v79), 0x17uLL));
      int8x16_t v82 = (int8x16_t)vmulq_laneq_f32(vmulq_f32(v78, (float32x4_t)vshlq_n_s32(vaddq_s32(v80, vcvtq_s32_f32(v71)), 0x17uLL)), *(float32x4_t *)a2, 3);
      int8x16_t v83 = (int8x16_t)vmulq_n_f32(v31, *(float *)&v33);
      int8x16_t v84 = (int8x16_t)vmulq_n_f32(v32, *(float *)&v33);
      float32x4_t v85 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v33, 1);
      float32x4_t v86 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v31, v85)), v83, v82));
      float32x4_t v87 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v28, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v85)), v84, (int8x16_t)vmulq_laneq_f32(v81, *(float32x4_t *)a2, 3)));
      float32x4_t v88 = (int8x16_t *)(v6 + v11);
      v88[-1] = vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v86, v86, 3));
      *float32x4_t v88 = vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v87, v87, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v89 = -v10;
    if (v89 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v90 = 16 * v89;
    float32x4_t v91 = *(float32x4_t *)(v7 + v90);
    int8x16_t v92 = *((int8x16_t *)a2 + 15);
    float32x4_t v93 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v91, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v94 = vmulq_f32(vrecpeq_f32(v93), *((float32x4_t *)a2 + 18));
    float32x4_t v95 = vrecpsq_f32(v94, v93);
    float32x4_t v96 = vmulq_f32(v91, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v94, v95)), *((int8x16_t *)a2 + 3)));
    float32x4_t v97 = *((float32x4_t *)a2 + 75);
    float32x4_t v98 = vminq_f32(vmaxq_f32(v96, v97), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 76), (int8x16_t)v95, (int8x16_t)v97), 3));
    float32x4_t v99 = vaddq_f32(v98, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1));
    float32x4_t v100 = *((float32x4_t *)a2 + 5);
    float32x4_t v101 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v99), (int8x16_t)v100);
    float32x4_t v102 = (float32x4_t)vandq_s8((int8x16_t)v100, (int8x16_t)vcgtq_f32(v101, *((float32x4_t *)a2 + 23)));
    float32x4_t v103 = vsubq_f32(vsubq_f32(v101, v100), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v102), v101));
    float32x4_t v104 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v99, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v99))), *((float32x4_t *)a2 + 22)), v102), vmulq_f32(v103, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v103, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v103, v103), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v103)))))), COERCE_FLOAT(*(_OWORD *)a2)),
             *((float32x4_t *)a2 + 29));
    float32x4_t v105 = vcvtq_f32_s32(vcvtq_s32_f32(v104));
    float32x4_t v106 = vsubq_f32(v105, (float32x4_t)vandq_s8((int8x16_t)v100, (int8x16_t)vcgtq_f32(v105, v104)));
    float32x4_t v107 = vsubq_f32(v104, v106);
    float32x4_t v108 = (float32x4_t)vbslq_s8(v92, (int8x16_t)v96, vbslq_s8((int8x16_t)vcgtq_f32(v97, vsubq_f32(v98, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v98, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v100, vmulq_f32(v107, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v107, vaddq_f32(*((float32x4_t *)a2 + 30),
                                                     vmulq_f32(*((float32x4_t *)a2 + 31), v107)))))),
                                           (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v106)), 0x17uLL)), *(float32x4_t *)a2, 3)));
    *(int8x16_t *)(v6 + v90) = vbslq_s8(v92, (int8x16_t)v96, (int8x16_t)vmulq_laneq_f32(v108, v108, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype3_niceTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v99 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vrecpsq_f32(v18, v16);
      float32x4_t v21 = vrecpsq_f32(v19, v17);
      float32x4_t v22 = vmulq_f32(v18, v20);
      float32x4_t v23 = vmulq_f32(v19, v21);
      int8x16_t v24 = (int8x16_t)vmulq_f32(v22, vrecpsq_f32(v22, v16));
      int8x16_t v25 = *((int8x16_t *)a2 + 17);
      int8x16_t v26 = vandq_s8(v25, v24);
      int8x16_t v27 = vandq_s8(v25, (int8x16_t)vmulq_f32(v23, vrecpsq_f32(v23, v17)));
      int8x16_t v28 = *((int8x16_t *)a2 + 3);
      float32x4_t v29 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v26, v28));
      float32x4_t v30 = *((float32x4_t *)a2 + 75);
      float32x4_t v31 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v27, v28));
      long long v32 = *((_OWORD *)a2 + 1);
      float32x4_t v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v34 = vminq_f32(vmaxq_f32(v29, v30), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 76), (int8x16_t)v20, (int8x16_t)v30), 3));
      float32x4_t v35 = vminq_f32(vmaxq_f32(v31, v30), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 76), (int8x16_t)v21, (int8x16_t)v30), 3));
      float32x4_t v36 = *((float32x4_t *)a2 + 5);
      int8x16_t v37 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v36, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v30)), v30);
      float32x4_t v38 = (float32x4_t)vbslq_s8(v37, (int8x16_t)v36, (int8x16_t)vaddq_f32(v34, v33));
      float32x4_t v39 = (float32x4_t)vbslq_s8(v37, (int8x16_t)v36, (int8x16_t)vaddq_f32(v35, v33));
      int8x16_t v41 = *((int8x16_t *)a2 + 19);
      float32x4_t v40 = *((float32x4_t *)a2 + 20);
      float32x4_t v42 = (float32x4_t)vorrq_s8(vandq_s8(v41, (int8x16_t)v38), (int8x16_t)v36);
      float32x4_t v43 = (float32x4_t)vorrq_s8(vandq_s8(v41, (int8x16_t)v39), (int8x16_t)v36);
      int8x16_t v44 = *((int8x16_t *)a2 + 21);
      float32x4_t v45 = *((float32x4_t *)a2 + 22);
      float32x4_t v46 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v39, 0x17uLL)), (float32x4_t)vandq_s8(v44, (int8x16_t)vcgtq_f32(v40, v39)));
      float32x4_t v47 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v38, 0x17uLL)), (float32x4_t)vandq_s8(v44, (int8x16_t)vcgtq_f32(v40, v38))), v45);
      float32x4_t v48 = *((float32x4_t *)a2 + 23);
      float32x4_t v49 = *((float32x4_t *)a2 + 24);
      float32x4_t v50 = (float32x4_t)vandq_s8((int8x16_t)v36, (int8x16_t)vcgtq_f32(v42, v48));
      float32x4_t v51 = (float32x4_t)vandq_s8((int8x16_t)v36, (int8x16_t)vcgtq_f32(v43, v48));
      float32x4_t v52 = vaddq_f32(v47, v50);
      float32x4_t v53 = vaddq_f32(vsubq_f32(v46, v45), v51);
      float32x4_t v54 = vsubq_f32(vsubq_f32(v42, v36), vmulq_f32(vmulq_f32(v49, v50), v42));
      float32x4_t v55 = vsubq_f32(vsubq_f32(v43, v36), vmulq_f32(vmulq_f32(v49, v51), v43));
      float32x4_t v56 = vmulq_f32(v54, v54);
      float32x4_t v57 = *((float32x4_t *)a2 + 37);
      float32x4_t v58 = *((float32x4_t *)a2 + 38);
      float32x4_t v59 = *((float32x4_t *)a2 + 39);
      float32x4_t v60 = *((float32x4_t *)a2 + 40);
      float32x4_t v61 = vaddq_f32(v57, vmulq_f32(v58, v54));
      float32x4_t v62 = vaddq_f32(v59, vmulq_f32(v60, v54));
      float32x4_t v63 = vaddq_f32(v59, vmulq_f32(v60, v55));
      float32x4_t v64 = vaddq_f32(v57, vmulq_f32(v58, v55));
      float32x4_t v65 = *((float32x4_t *)a2 + 41);
      float32x4_t v66 = *((float32x4_t *)a2 + 42);
      float32x4_t v67 = vaddq_f32(v65, vmulq_f32(v66, v54));
      float32x4_t v68 = vaddq_f32(v65, vmulq_f32(v66, v55));
      float32x4_t v69 = vmulq_f32(v55, v55);
      float32x4_t v70 = vaddq_f32(v67, vmulq_f32(v56, vaddq_f32(v61, vmulq_f32(v56, v62))));
      float32x4_t v71 = vaddq_f32(v68, vmulq_f32(v69, vaddq_f32(v64, vmulq_f32(v69, v63))));
      float32x4_t v72 = *((float32x4_t *)a2 + 43);
      float32x4_t v73 = *((float32x4_t *)a2 + 44);
      float32x4_t v74 = vmulq_n_f32(vaddq_f32(v53, vmulq_f32(v55, vaddq_f32(v72, vmulq_f32(v55, v71)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v75 = *((float32x4_t *)a2 + 29);
      float32x4_t v76 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v52, vmulq_f32(v54, vaddq_f32(v72, vmulq_f32(v54, v70)))), COERCE_FLOAT(*(_OWORD *)a2)), v75);
      float32x4_t v77 = vmaxq_f32(v74, v75);
      float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v76));
      float32x4_t v79 = vcvtq_f32_s32(vcvtq_s32_f32(v77));
      float32x4_t v80 = vsubq_f32(v78, (float32x4_t)vandq_s8((int8x16_t)v36, (int8x16_t)vcgtq_f32(v78, v76)));
      float32x4_t v81 = vsubq_f32(v79, (float32x4_t)vandq_s8((int8x16_t)v36, (int8x16_t)vcgtq_f32(v79, v77)));
      float32x4_t v82 = vsubq_f32(v76, v80);
      float32x4_t v83 = vsubq_f32(v77, v81);
      float32x4_t v84 = *((float32x4_t *)a2 + 45);
      float32x4_t v85 = *((float32x4_t *)a2 + 46);
      float32x4_t v86 = vaddq_f32(v73, vmulq_f32(v84, v82));
      float32x4_t v87 = vaddq_f32(v73, vmulq_f32(v84, v83));
      float32x4_t v88 = *((float32x4_t *)a2 + 47);
      float32x4_t v89 = *((float32x4_t *)a2 + 48);
      int32x4_t v90 = *((int32x4_t *)a2 + 33);
      float32x4_t v91 = vmulq_f32(vaddq_f32(v36, vmulq_f32(v83, vaddq_f32(v89, vmulq_f32(v83, vaddq_f32(vaddq_f32(v85, vmulq_f32(v88, v83)), vmulq_f32(vmulq_f32(v83, v83), v87)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v90, vcvtq_s32_f32(v81)), 0x17uLL));
      int8x16_t v92 = (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v36, vmulq_f32(v82, vaddq_f32(v89, vmulq_f32(v82, vaddq_f32(vaddq_f32(v85, vmulq_f32(v82, v88)), vmulq_f32(vmulq_f32(v82, v82), v86)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v90, vcvtq_s32_f32(v80)), 0x17uLL)), *(float32x4_t *)a2, 3);
      int8x16_t v93 = (int8x16_t)vmulq_n_f32(v34, *(float *)&v32);
      int8x16_t v94 = (int8x16_t)vmulq_n_f32(v35, *(float *)&v32);
      float32x4_t v95 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v32, 1);
      float32x4_t v96 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v29, vbslq_s8((int8x16_t)vcgtq_f32(v30, vsubq_f32(v34, v95)), v93, v92));
      float32x4_t v97 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v31, vbslq_s8((int8x16_t)vcgtq_f32(v30, vsubq_f32(v35, v95)), v94, (int8x16_t)vmulq_laneq_f32(v91, *(float32x4_t *)a2, 3)));
      float32x4_t v98 = (int8x16_t *)(v6 + v11);
      v98[-1] = vbslq_s8(v15, (int8x16_t)v29, (int8x16_t)vmulq_laneq_f32(v96, v96, 3));
      *float32x4_t v98 = vbslq_s8(v15, (int8x16_t)v31, (int8x16_t)vmulq_laneq_f32(v97, v97, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v99 = -v10;
    if (v99 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v100 = 16 * v99;
    float32x4_t v101 = *(float32x4_t *)(v7 + v100);
    int8x16_t v102 = *((int8x16_t *)a2 + 15);
    float32x4_t v103 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v101, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v104 = vrecpeq_f32(v103);
    float32x4_t v105 = vrecpsq_f32(v104, v103);
    float32x4_t v106 = vmulq_f32(v104, v105);
    float32x4_t v107 = vmulq_f32(v101, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v106, vrecpsq_f32(v106, v103))), *((int8x16_t *)a2 + 3)));
    float32x4_t v108 = *((float32x4_t *)a2 + 75);
    float32x4_t v109 = vminq_f32(vmaxq_f32(v107, v108), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 76), (int8x16_t)v105, (int8x16_t)v108), 3));
    float32x4_t v110 = *((float32x4_t *)a2 + 5);
    float32x4_t v111 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v110, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v108)), v108), (int8x16_t)v110, (int8x16_t)vaddq_f32(v109, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
    float32x4_t v112 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v111), (int8x16_t)v110);
    float32x4_t v113 = (float32x4_t)vandq_s8((int8x16_t)v110, (int8x16_t)vcgtq_f32(v112, *((float32x4_t *)a2 + 23)));
    float32x4_t v114 = vsubq_f32(vsubq_f32(v112, v110), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v113), v112));
    float32x4_t v115 = vmulq_f32(v114, v114);
    float32x4_t v116 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v111, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v111))), *((float32x4_t *)a2 + 22)), v113), vmulq_f32(v114, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v114, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v114)),
                         vmulq_f32(v115, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v114)), vmulq_f32(v115, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v114)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
    float32x4_t v117 = vcvtq_f32_s32(vcvtq_s32_f32(v116));
    float32x4_t v118 = vsubq_f32(v117, (float32x4_t)vandq_s8((int8x16_t)v110, (int8x16_t)vcgtq_f32(v117, v116)));
    float32x4_t v119 = vsubq_f32(v116, v118);
    float32x4_t v120 = (float32x4_t)vbslq_s8(v102, (int8x16_t)v107, vbslq_s8((int8x16_t)vcgtq_f32(v108, vsubq_f32(v109, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v109, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v110, vmulq_f32(v119, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v119,
                                                   vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v119)), vmulq_f32(vmulq_f32(v119, v119), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v119)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v118)), 0x17uLL)), *(float32x4_t *)a2, 3)));
    *(int8x16_t *)(v6 + v100) = vbslq_s8(v102, (int8x16_t)v107, (int8x16_t)vmulq_laneq_f32(v120, v120, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype3_floatTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = 16 * *((int *)a1 + 22);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        float32x4_t v12 = *((float32x4_t *)a2 + 72);
        float32x4_t v13 = *((float32x4_t *)a2 + 73);
        float32x4_t v14 = vminq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v11, v12), 3), v12), v13);
        float32x4_t v15 = vminq_f32(vmaxq_f32(vrecpeq_f32(v14), v12), v13);
        float32x4_t v16 = vrecpsq_f32(v14, v15);
        float32x4_t v17 = vminq_f32(vmaxq_f32(vmulq_f32(v15, v16), v12), v13);
        float32x4_t v18 = vmulq_f32(v17, vrecpsq_f32(v14, v17));
        v18.i32[3] = 1.0;
        float32x4_t v19 = vmulq_f32(v11, v18);
        float32x4_t v20 = *((float32x4_t *)a2 + 75);
        float32x4_t v21 = vminq_f32(vmaxq_f32(v19, v20), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 76), (int8x16_t)v16, (int8x16_t)v20), 3));
        float32x4_t v22 = *((float32x4_t *)a2 + 5);
        float32x4_t v23 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v20)), v20), (int8x16_t)v22, (int8x16_t)vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
        int8x16_t v24 = *((int8x16_t *)a2 + 52);
        int8x16_t v25 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v23);
        int8x16_t v26 = (int8x16_t)vmulq_f32(v23, vaddq_f32(v22, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 49), v25)));
        float32x4_t v27 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), v26), (int8x16_t)v22);
        float32x4_t v28 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v23, *((float32x4_t *)a2 + 21))), vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v23, *((float32x4_t *)a2 + 50)), *((int8x16_t *)a2 + 51)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v23, *((float32x4_t *)a2 + 50)))), (float32x4_t)vandq_s8(v24, v25))), *((float32x4_t *)a2 + 22)), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v26, 0x17uLL)));
        float32x4_t v29 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v27, *((float32x4_t *)a2 + 23)));
        float32x4_t v30 = vaddq_f32(v28, v29);
        float32x4_t v31 = vsubq_f32(vsubq_f32(v27, v22), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v29), v27));
        float32x4_t v32 = vmulq_f32(v31, v31);
        float32x4_t v33 = vmulq_n_f32(vaddq_f32(v30, vmulq_f32(v31, vaddq_f32(*((float32x4_t *)a2 + 61), vmulq_f32(v31, vaddq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 59), vmulq_f32(*((float32x4_t *)a2 + 60), v31)), vmulq_f32(v32, vaddq_f32(*((float32x4_t *)a2 + 57), vmulq_f32(*((float32x4_t *)a2 + 58), v31)))), vmulq_f32(vmulq_f32(v32, v32), vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 55), vmulq_f32(*((float32x4_t *)a2 + 56), v31)), vmulq_f32(
                                v32,
                                vaddq_f32(*((float32x4_t *)a2 + 53), vmulq_f32(*((float32x4_t *)a2 + 54), v31)))))))))),
                COERCE_FLOAT(*(_OWORD *)a2));
        float32x4_t v34 = vminq_f32(vmaxq_f32(v33, *((float32x4_t *)a2 + 62)), *((float32x4_t *)a2 + 63));
        float32x4_t v35 = vcvtq_f32_s32(vcvtq_s32_f32(v34));
        float32x4_t v36 = vsubq_f32(v35, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v35, v34)));
        float32x4_t v37 = vsubq_f32(v34, v36);
        float32x4_t v38 = vmulq_f32(v37, v37);
        int8x16_t v39 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 70), v36);
        int8x16_t v40 = vbslq_s8((int8x16_t)vcgtq_f32(v20, vsubq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v21, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v22, vorrq_s8((int8x16_t)vcltzq_f32(v33), (int8x16_t)vcgezq_f32(v33))), v20), (int8x16_t)vmulq_f32(vaddq_f32(v22, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 71), v39)), vmulq_f32(vaddq_f32(
                                                             v22,
                                                             vmulq_f32(v37, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 68), vmulq_f32(v37, *((float32x4_t *)a2 + 69))), vmulq_f32(v38, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 66), vmulq_f32(*((float32x4_t *)a2 + 67), v37)), vmulq_f32(v38, vaddq_f32(*((float32x4_t *)a2 + 64), vmulq_f32(*((float32x4_t *)a2 + 65), v37)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33),
                                                                            vcvtq_s32_f32(vaddq_f32(v36, (float32x4_t)vandq_s8(v24, v39)))), 0x17uLL))), (int8x16_t)v33), *(float32x4_t *)a2, 3));
        int8x16_t v41 = *((int8x16_t *)a2 + 15);
        float32x4_t v42 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v19, v40);
        *(int8x16_t *)(v6 + v10) = vbslq_s8(v41, (int8x16_t)v19, (int8x16_t)vmulq_laneq_f32(v42, v42, 3));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v7;
      v6 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Gettype4_fast_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v89) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v10 + 32);
      int8x16_t v16 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      int8x16_t v17 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15));
      int8x16_t v18 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15));
      int8x16_t v19 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v15));
      int8x16_t v20 = *((int8x16_t *)a2 + 17);
      int8x16_t v21 = *((int8x16_t *)a2 + 3);
      float32x4_t v22 = vmulq_f32(v12, (float32x4_t)vorrq_s8(vandq_s8(v20, v17), v21));
      float32x4_t v23 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v20, v18), v21));
      float32x4_t v24 = vmulq_f32(v14, (float32x4_t)vorrq_s8(vandq_s8(v20, v19), v21));
      float32x4_t v25 = *((float32x4_t *)a2 + 75);
      float32x4_t v26 = *((float32x4_t *)a2 + 5);
      float32x4_t v27 = *((float32x4_t *)a2 + 6);
      float32x4_t v28 = vminq_f32(vmaxq_f32(v22, v25), v26);
      float32x4_t v29 = vminq_f32(vmaxq_f32(v23, v25), v26);
      long long v30 = *((_OWORD *)a2 + 1);
      float32x4_t v31 = vminq_f32(vmaxq_f32(v24, v25), v26);
      float32x4_t v32 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v33 = vmulq_f32(v27, vcvtq_f32_s32((int32x4_t)vaddq_f32(v28, v32)));
      float32x4_t v34 = vmulq_f32(v27, vcvtq_f32_s32((int32x4_t)vaddq_f32(v29, v32)));
      float32x4_t v35 = vmulq_f32(v27, vcvtq_f32_s32((int32x4_t)vaddq_f32(v31, v32)));
      float32x4_t v36 = vcvtq_f32_s32(vcvtq_s32_f32(v33));
      float32x4_t v37 = vcvtq_f32_s32(vcvtq_s32_f32(v34));
      float32x4_t v38 = vcvtq_f32_s32(vcvtq_s32_f32(v35));
      float32x4_t v39 = *((float32x4_t *)a2 + 7);
      float32x4_t v40 = *((float32x4_t *)a2 + 8);
      float32x4_t v41 = vrsqrteq_f32(vaddq_f32(v39, vsubq_f32(v33, v36)));
      float32x4_t v42 = vrsqrteq_f32(vaddq_f32(v39, vsubq_f32(v34, v37)));
      float32x4_t v43 = vaddq_f32(v40, v36);
      float32x4_t v44 = vaddq_f32(v40, v37);
      float32x4_t v45 = vrsqrteq_f32(vaddq_f32(v39, vsubq_f32(v35, v38)));
      float32x4_t v46 = vaddq_f32(v40, v38);
      float32x4_t v47 = *((float32x4_t *)a2 + 9);
      float32x4_t v48 = *((float32x4_t *)a2 + 10);
      float32x4_t v49 = vmulq_n_f32(vsubq_f32(v43, vmulq_f32(v41, v47)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v50 = vmulq_n_f32(vsubq_f32(v44, vmulq_f32(v42, v47)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v51 = vmulq_n_f32(vsubq_f32(v46, vmulq_f32(v45, v47)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v52 = vcvtq_f32_s32(vcvtq_s32_f32(v49));
      float32x4_t v53 = vcvtq_f32_s32(vcvtq_s32_f32(v50));
      float32x4_t v54 = vcvtq_f32_s32(vcvtq_s32_f32(v51));
      float32x4_t v55 = vsubq_f32(v52, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v52, v49)));
      float32x4_t v56 = vsubq_f32(v53, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v53, v50)));
      float32x4_t v57 = vsubq_f32(v54, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v54, v51)));
      float32x4_t v58 = vsubq_f32(v49, v55);
      float32x4_t v59 = vsubq_f32(v50, v56);
      float32x4_t v60 = vsubq_f32(v51, v57);
      float32x4_t v61 = vaddq_f32(v48, v55);
      float32x4_t v62 = vaddq_f32(v48, v56);
      float32x4_t v63 = vaddq_f32(v48, v57);
      float32x4_t v64 = *((float32x4_t *)a2 + 11);
      float32x4_t v65 = *((float32x4_t *)a2 + 12);
      float32x4_t v66 = vmulq_f32(vrecpeq_f32(vsubq_f32(v64, v58)), v65);
      float32x4_t v67 = vmulq_f32(vrecpeq_f32(vsubq_f32(v64, v59)), v65);
      float32x4_t v68 = vmulq_f32(vrecpeq_f32(vsubq_f32(v64, v60)), v65);
      float32x4_t v69 = vmaxq_f32(vaddq_f32(v61, vmulq_f32(v66, v66)), v25);
      float32x4_t v70 = vmaxq_f32(vaddq_f32(v62, vmulq_f32(v67, v67)), v25);
      float32x4_t v71 = *((float32x4_t *)a2 + 13);
      float32x4_t v72 = *((float32x4_t *)a2 + 14);
      float32x4_t v73 = vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v63, vmulq_f32(v68, v68)), v25), v71), v72);
      float32x4_t v74 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v69, v71), v72));
      float32x4_t v75 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v70, v71), v72));
      float32x4_t v76 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2);
      int8x16_t v77 = (int8x16_t)vmulq_n_f32(v28, *(float *)&v30);
      int8x16_t v78 = (int8x16_t)vmulq_n_f32(v29, *(float *)&v30);
      int8x16_t v79 = (int8x16_t)vmulq_n_f32(v31, *(float *)&v30);
      float32x4_t v80 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v30, 1);
      float32x4_t v81 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      float32x4_t v82 = vaddq_f32(v81, (float32x4_t)vbslq_s8(v16, (int8x16_t)v22, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v25, vsubq_f32(v28, v80)), v77, (int8x16_t)vaddq_f32(v76, vmulq_laneq_f32(v74, *(float32x4_t *)a2, 3))), v26)));
      float32x4_t v83 = vmaxq_f32(vaddq_f32(v81, (float32x4_t)vbslq_s8(v16, (int8x16_t)v23, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v25, vsubq_f32(v29, v80)), v78, (int8x16_t)vaddq_f32(v76, vmulq_laneq_f32(v75, *(float32x4_t *)a2, 3))), v26))), v25);
      int8x16_t v84 = (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v81, (float32x4_t)vbslq_s8(v16, (int8x16_t)v24, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v25, vsubq_f32(v31, v80)), v79, (int8x16_t)vaddq_f32(v76, vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(v73), *(float32x4_t *)a2, 3))), v26))), v25), v26);
      float32x4_t v85 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v22, (int8x16_t)vminq_f32(vmaxq_f32(v82, v25), v26));
      float32x4_t v86 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v23, (int8x16_t)vminq_f32(v83, v26));
      float32x4_t v87 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v24, v84);
      float32x4_t v88 = (int8x16_t *)(v6 + v10);
      *float32x4_t v88 = vbslq_s8(v16, (int8x16_t)v22, (int8x16_t)vmulq_laneq_f32(v85, v85, 3));
      v88[1] = vbslq_s8(v16, (int8x16_t)v23, (int8x16_t)vmulq_laneq_f32(v86, v86, 3));
      v88[2] = vbslq_s8(v16, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v87, v87, 3));
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v89) = -v11;
    if ((int)v89 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v89 = v89;
    do
    {
      int8x16_t v90 = *((int8x16_t *)a2 + 15);
      float32x4_t v91 = vmulq_f32(*(float32x4_t *)(v7 + 16 * v89), (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v7 + 16 * v89), 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
      float32x4_t v92 = *((float32x4_t *)a2 + 75);
      float32x4_t v93 = *((float32x4_t *)a2 + 5);
      float32x4_t v94 = vminq_f32(vmaxq_f32(v91, v92), v93);
      float32x4_t v95 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1))));
      float32x4_t v96 = vcvtq_f32_s32(vcvtq_s32_f32(v95));
      float32x4_t v97 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v96), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v95, v96))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v98 = vcvtq_f32_s32(vcvtq_s32_f32(v97));
      float32x4_t v99 = vsubq_f32(v98, (float32x4_t)vandq_s8((int8x16_t)v93, (int8x16_t)vcgtq_f32(v98, v97)));
      float32x4_t v100 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v97, v99))), *((float32x4_t *)a2 + 12));
      float32x4_t v101 = (float32x4_t)vbslq_s8(v90, (int8x16_t)v91, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(v90, (int8x16_t)v91, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v92, vsubq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v94, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2),
                                                                                                     vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v100, v100), vaddq_f32(*((float32x4_t *)a2 + 10), v99)), v92), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))), *(float32x4_t *)a2, 3))),
                                                                         v93))),
                                           v92),
                                         v93));
      *(int8x16_t *)(v6 + 16 * v89++) = vbslq_s8(v90, (int8x16_t)v91, (int8x16_t)vmulq_laneq_f32(v101, v101, 3));
    }
    while (v89 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype4_fixed_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v90) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v10 + 32);
      int8x16_t v16 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v17 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15));
      float32x4_t v18 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15));
      float32x4_t v19 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v15));
      int8x16_t v21 = *((int8x16_t *)a2 + 17);
      float32x4_t v20 = *((float32x4_t *)a2 + 18);
      int8x16_t v22 = *((int8x16_t *)a2 + 3);
      float32x4_t v23 = vmulq_f32(v12, (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)vmulq_f32(v17, v20)), v22));
      float32x4_t v24 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)vmulq_f32(v18, v20)), v22));
      float32x4_t v25 = vmulq_f32(v14, (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)vmulq_f32(v19, v20)), v22));
      float32x4_t v26 = *((float32x4_t *)a2 + 75);
      float32x4_t v27 = *((float32x4_t *)a2 + 5);
      float32x4_t v28 = *((float32x4_t *)a2 + 6);
      float32x4_t v29 = vminq_f32(vmaxq_f32(v23, v26), v27);
      float32x4_t v30 = vminq_f32(vmaxq_f32(v24, v26), v27);
      long long v31 = *((_OWORD *)a2 + 1);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v25, v26), v27);
      float32x4_t v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v34 = vmulq_f32(v28, vcvtq_f32_s32((int32x4_t)vaddq_f32(v29, v33)));
      float32x4_t v35 = vmulq_f32(v28, vcvtq_f32_s32((int32x4_t)vaddq_f32(v30, v33)));
      float32x4_t v36 = vmulq_f32(v28, vcvtq_f32_s32((int32x4_t)vaddq_f32(v32, v33)));
      float32x4_t v37 = vcvtq_f32_s32(vcvtq_s32_f32(v34));
      float32x4_t v38 = vcvtq_f32_s32(vcvtq_s32_f32(v35));
      float32x4_t v39 = vcvtq_f32_s32(vcvtq_s32_f32(v36));
      float32x4_t v40 = *((float32x4_t *)a2 + 7);
      float32x4_t v41 = *((float32x4_t *)a2 + 8);
      float32x4_t v42 = vrsqrteq_f32(vaddq_f32(v40, vsubq_f32(v34, v37)));
      float32x4_t v43 = vrsqrteq_f32(vaddq_f32(v40, vsubq_f32(v35, v38)));
      float32x4_t v44 = vaddq_f32(v41, v37);
      float32x4_t v45 = vaddq_f32(v41, v38);
      float32x4_t v46 = vrsqrteq_f32(vaddq_f32(v40, vsubq_f32(v36, v39)));
      float32x4_t v47 = vaddq_f32(v41, v39);
      float32x4_t v48 = *((float32x4_t *)a2 + 9);
      float32x4_t v49 = *((float32x4_t *)a2 + 10);
      float32x4_t v50 = vmulq_n_f32(vsubq_f32(v44, vmulq_f32(v42, v48)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v51 = vmulq_n_f32(vsubq_f32(v45, vmulq_f32(v43, v48)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v52 = vmulq_n_f32(vsubq_f32(v47, vmulq_f32(v46, v48)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v53 = vcvtq_f32_s32(vcvtq_s32_f32(v50));
      float32x4_t v54 = vcvtq_f32_s32(vcvtq_s32_f32(v51));
      float32x4_t v55 = vcvtq_f32_s32(vcvtq_s32_f32(v52));
      float32x4_t v56 = vsubq_f32(v53, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v53, v50)));
      float32x4_t v57 = vsubq_f32(v54, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v54, v51)));
      float32x4_t v58 = vsubq_f32(v55, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v55, v52)));
      float32x4_t v59 = vsubq_f32(v50, v56);
      float32x4_t v60 = vsubq_f32(v51, v57);
      float32x4_t v61 = vsubq_f32(v52, v58);
      float32x4_t v62 = vaddq_f32(v49, v56);
      float32x4_t v63 = vaddq_f32(v49, v57);
      float32x4_t v64 = vaddq_f32(v49, v58);
      float32x4_t v65 = *((float32x4_t *)a2 + 11);
      float32x4_t v66 = *((float32x4_t *)a2 + 12);
      float32x4_t v67 = vmulq_f32(vrecpeq_f32(vsubq_f32(v65, v59)), v66);
      float32x4_t v68 = vmulq_f32(vrecpeq_f32(vsubq_f32(v65, v60)), v66);
      float32x4_t v69 = vmulq_f32(vrecpeq_f32(vsubq_f32(v65, v61)), v66);
      float32x4_t v70 = vmaxq_f32(vaddq_f32(v62, vmulq_f32(v67, v67)), v26);
      float32x4_t v71 = vmaxq_f32(vaddq_f32(v63, vmulq_f32(v68, v68)), v26);
      float32x4_t v72 = *((float32x4_t *)a2 + 13);
      float32x4_t v73 = *((float32x4_t *)a2 + 14);
      float32x4_t v74 = vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v64, vmulq_f32(v69, v69)), v26), v72), v73);
      float32x4_t v75 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v70, v72), v73));
      float32x4_t v76 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v71, v72), v73));
      float32x4_t v77 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2);
      int8x16_t v78 = (int8x16_t)vmulq_n_f32(v29, *(float *)&v31);
      int8x16_t v79 = (int8x16_t)vmulq_n_f32(v30, *(float *)&v31);
      int8x16_t v80 = (int8x16_t)vmulq_n_f32(v32, *(float *)&v31);
      float32x4_t v81 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v31, 1);
      float32x4_t v82 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      float32x4_t v83 = vaddq_f32(v82, (float32x4_t)vbslq_s8(v16, (int8x16_t)v23, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v29, v81)), v78, (int8x16_t)vaddq_f32(v77, vmulq_laneq_f32(v75, *(float32x4_t *)a2, 3))), v27)));
      float32x4_t v84 = vmaxq_f32(vaddq_f32(v82, (float32x4_t)vbslq_s8(v16, (int8x16_t)v24, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v30, v81)), v79, (int8x16_t)vaddq_f32(v77, vmulq_laneq_f32(v76, *(float32x4_t *)a2, 3))), v27))), v26);
      int8x16_t v85 = (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v82, (float32x4_t)vbslq_s8(v16, (int8x16_t)v25, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v32, v81)), v80, (int8x16_t)vaddq_f32(v77, vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(v74), *(float32x4_t *)a2, 3))), v27))), v26), v27);
      float32x4_t v86 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v23, (int8x16_t)vminq_f32(vmaxq_f32(v83, v26), v27));
      float32x4_t v87 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v24, (int8x16_t)vminq_f32(v84, v27));
      float32x4_t v88 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v25, v85);
      uint64_t v89 = (int8x16_t *)(v6 + v10);
      *uint64_t v89 = vbslq_s8(v16, (int8x16_t)v23, (int8x16_t)vmulq_laneq_f32(v86, v86, 3));
      v89[1] = vbslq_s8(v16, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v87, v87, 3));
      v89[2] = vbslq_s8(v16, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v88, v88, 3));
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v90) = -v11;
    if ((int)v90 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v90 = v90;
    do
    {
      int8x16_t v91 = *((int8x16_t *)a2 + 15);
      float32x4_t v92 = vmulq_f32(*(float32x4_t *)(v7 + 16 * v90), (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v7 + 16 * v90), 3), *((float32x4_t *)a2 + 16))), *((float32x4_t *)a2 + 18))), *((int8x16_t *)a2 + 3)));
      float32x4_t v93 = *((float32x4_t *)a2 + 75);
      float32x4_t v94 = *((float32x4_t *)a2 + 5);
      float32x4_t v95 = vminq_f32(vmaxq_f32(v92, v93), v94);
      float32x4_t v96 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v95, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1))));
      float32x4_t v97 = vcvtq_f32_s32(vcvtq_s32_f32(v96));
      float32x4_t v98 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v97), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v96, v97))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v99 = vcvtq_f32_s32(vcvtq_s32_f32(v98));
      float32x4_t v100 = vsubq_f32(v99, (float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vcgtq_f32(v99, v98)));
      float32x4_t v101 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v98, v100))), *((float32x4_t *)a2 + 12));
      float32x4_t v102 = (float32x4_t)vbslq_s8(v91, (int8x16_t)v92, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(v91, (int8x16_t)v92, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v93, vsubq_f32(v95, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v95, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2),
                                                                                                     vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v101, v101), vaddq_f32(*((float32x4_t *)a2 + 10), v100)), v93), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))), *(float32x4_t *)a2, 3))),
                                                                         v94))),
                                           v93),
                                         v94));
      *(int8x16_t *)(v6 + 16 * v90++) = vbslq_s8(v91, (int8x16_t)v92, (int8x16_t)vmulq_laneq_f32(v102, v102, 3));
    }
    while (v90 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype4_nice_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v105 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      int8x16_t v24 = vandq_s8(v23, v22);
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v26));
      float32x4_t v28 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = vminq_f32(vmaxq_f32(v27, v29), v30);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v28, v29), v30);
      long long v33 = *((_OWORD *)a2 + 1);
      float32x4_t v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      int8x16_t v35 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v29)), v29);
      float32x4_t v36 = (float32x4_t)vbslq_s8(v35, (int8x16_t)v30, (int8x16_t)vaddq_f32(v31, v34));
      float32x4_t v37 = (float32x4_t)vbslq_s8(v35, (int8x16_t)v30, (int8x16_t)vaddq_f32(v32, v34));
      int8x16_t v38 = *((int8x16_t *)a2 + 19);
      float32x4_t v39 = *((float32x4_t *)a2 + 20);
      float32x4_t v40 = (float32x4_t)vorrq_s8(vandq_s8(v38, (int8x16_t)v36), (int8x16_t)v30);
      float32x4_t v41 = (float32x4_t)vorrq_s8(vandq_s8(v38, (int8x16_t)v37), (int8x16_t)v30);
      int8x16_t v42 = *((int8x16_t *)a2 + 21);
      float32x4_t v43 = *((float32x4_t *)a2 + 22);
      float32x4_t v44 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v37, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v39, v37)));
      float32x4_t v45 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v39, v36))), v43);
      float32x4_t v46 = *((float32x4_t *)a2 + 23);
      float32x4_t v47 = *((float32x4_t *)a2 + 24);
      float32x4_t v48 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v40, v46));
      float32x4_t v49 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v41, v46));
      float32x4_t v50 = vaddq_f32(v45, v48);
      float32x4_t v51 = vaddq_f32(vsubq_f32(v44, v43), v49);
      float32x4_t v52 = vsubq_f32(vsubq_f32(v40, v30), vmulq_f32(vmulq_f32(v47, v48), v40));
      float32x4_t v53 = vsubq_f32(vsubq_f32(v41, v30), vmulq_f32(vmulq_f32(v47, v49), v41));
      float32x4_t v54 = vmulq_f32(v52, v52);
      float32x4_t v55 = *((float32x4_t *)a2 + 37);
      float32x4_t v56 = *((float32x4_t *)a2 + 38);
      float32x4_t v57 = vaddq_f32(v55, vmulq_f32(v56, v52));
      float32x4_t v58 = vaddq_f32(v55, vmulq_f32(v56, v53));
      float32x4_t v59 = *((float32x4_t *)a2 + 39);
      float32x4_t v60 = *((float32x4_t *)a2 + 40);
      float32x4_t v61 = vaddq_f32(v59, vmulq_f32(v60, v52));
      float32x4_t v62 = vaddq_f32(v59, vmulq_f32(v60, v53));
      float32x4_t v63 = *((float32x4_t *)a2 + 41);
      float32x4_t v64 = *((float32x4_t *)a2 + 42);
      float32x4_t v65 = vaddq_f32(v63, vmulq_f32(v64, v52));
      float32x4_t v66 = vaddq_f32(v63, vmulq_f32(v64, v53));
      float32x4_t v67 = vmulq_f32(v53, v53);
      float32x4_t v68 = vaddq_f32(v66, vmulq_f32(v67, vaddq_f32(v58, vmulq_f32(v67, v62))));
      float32x4_t v69 = vmulq_f32(v52, vaddq_f32(v65, vmulq_f32(v54, vaddq_f32(v57, vmulq_f32(v54, v61)))));
      float32x4_t v70 = *((float32x4_t *)a2 + 43);
      float32x4_t v71 = *((float32x4_t *)a2 + 44);
      float32x4_t v72 = vaddq_f32(v51, vmulq_f32(v53, vaddq_f32(v70, vmulq_f32(v53, v68))));
      float32x4_t v73 = *((float32x4_t *)a2 + 29);
      float32x4_t v74 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v50, vmulq_f32(v52, vaddq_f32(v70, v69))), COERCE_FLOAT(*(_OWORD *)a2)), v73);
      float32x4_t v75 = vmaxq_f32(vmulq_n_f32(v72, COERCE_FLOAT(*(_OWORD *)a2)), v73);
      float32x4_t v76 = vcvtq_f32_s32(vcvtq_s32_f32(v74));
      float32x4_t v77 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
      float32x4_t v78 = vsubq_f32(v76, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v76, v74)));
      float32x4_t v79 = vsubq_f32(v77, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v77, v75)));
      float32x4_t v80 = vsubq_f32(v74, v78);
      float32x4_t v81 = vsubq_f32(v75, v79);
      float32x4_t v82 = *((float32x4_t *)a2 + 45);
      float32x4_t v83 = *((float32x4_t *)a2 + 46);
      float32x4_t v84 = vaddq_f32(v71, vmulq_f32(v82, v80));
      float32x4_t v85 = vaddq_f32(v71, vmulq_f32(v82, v81));
      float32x4_t v86 = *((float32x4_t *)a2 + 47);
      float32x4_t v87 = *((float32x4_t *)a2 + 48);
      float32x4_t v88 = vaddq_f32(v30, vmulq_f32(v81, vaddq_f32(v87, vmulq_f32(v81, vaddq_f32(vaddq_f32(v83, vmulq_f32(v86, v81)), vmulq_f32(vmulq_f32(v81, v81), v85))))));
      int32x4_t v89 = *((int32x4_t *)a2 + 33);
      float32x4_t v90 = vmulq_f32(vaddq_f32(v30, vmulq_f32(v80, vaddq_f32(v87, vmulq_f32(v80, vaddq_f32(vaddq_f32(v83, vmulq_f32(v80, v86)), vmulq_f32(vmulq_f32(v80, v80), v84)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v89, vcvtq_s32_f32(v78)), 0x17uLL));
      float32x4_t v91 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2);
      float32x4_t v92 = vmulq_laneq_f32(vmulq_f32(v88, (float32x4_t)vshlq_n_s32(vaddq_s32(v89, vcvtq_s32_f32(v79)), 0x17uLL)), *(float32x4_t *)a2, 3);
      int8x16_t v93 = (int8x16_t)vaddq_f32(v91, vmulq_laneq_f32(v90, *(float32x4_t *)a2, 3));
      int8x16_t v94 = (int8x16_t)vmulq_n_f32(v31, *(float *)&v33);
      int8x16_t v95 = (int8x16_t)vmulq_n_f32(v32, *(float *)&v33);
      float32x4_t v96 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v33, 1);
      float32x4_t v97 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      float32x4_t v98 = vaddq_f32(v97, (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v31, v96)), v94, v93), v30)));
      float32x4_t v99 = vaddq_f32(v97, (float32x4_t)vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v96)), v95, (int8x16_t)vaddq_f32(v91, v92)), v30)));
      float32x4_t v100 = vmaxq_f32(v98, v29);
      float32x4_t v101 = vmaxq_f32(v99, v29);
      float32x4_t v102 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vminq_f32(v100, v30));
      float32x4_t v103 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vminq_f32(v101, v30));
      float32x4_t v104 = (int8x16_t *)(v6 + v11);
      v104[-1] = vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v102, v102, 3));
      *float32x4_t v104 = vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v103, v103, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v105 = -v10;
    if (v105 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v106 = 16 * v105;
    float32x4_t v107 = *(float32x4_t *)(v7 + v106);
    int8x16_t v108 = *((int8x16_t *)a2 + 15);
    float32x4_t v109 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v110 = vrecpeq_f32(v109);
    float32x4_t v111 = vmulq_f32(v110, vrecpsq_f32(v110, v109));
    float32x4_t v112 = vmulq_f32(v107, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v111, vrecpsq_f32(v111, v109))), *((int8x16_t *)a2 + 3)));
    float32x4_t v113 = *((float32x4_t *)a2 + 75);
    float32x4_t v114 = *((float32x4_t *)a2 + 5);
    float32x4_t v115 = vminq_f32(vmaxq_f32(v112, v113), v114);
    float32x4_t v116 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v113)), v113), (int8x16_t)v114, (int8x16_t)vaddq_f32(v115, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
    float32x4_t v117 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v116), (int8x16_t)v114);
    float32x4_t v118 = (float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vcgtq_f32(v117, *((float32x4_t *)a2 + 23)));
    float32x4_t v119 = vsubq_f32(vsubq_f32(v117, v114), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v118), v117));
    float32x4_t v120 = vmulq_f32(v119, v119);
    float32x4_t v121 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v116, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v116))), *((float32x4_t *)a2 + 22)), v118), vmulq_f32(v119, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v119, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v119)),
                         vmulq_f32(v120, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v119)), vmulq_f32(v120, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v119)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
    float32x4_t v122 = vcvtq_f32_s32(vcvtq_s32_f32(v121));
    float32x4_t v123 = vsubq_f32(v122, (float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vcgtq_f32(v122, v121)));
    float32x4_t v124 = vsubq_f32(v121, v123);
    float32x4_t v125 = (float32x4_t)vbslq_s8(v108, (int8x16_t)v112, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(v108, (int8x16_t)v112, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v113, vsubq_f32(v115, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v115, COERCE_FLOAT(*((_OWORD *)a2 + 1))),
                                                                                      (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2), vmulq_laneq_f32(vmulq_f32(vaddq_f32(v114, vmulq_f32(v124, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v124, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v124)), vmulq_f32(vmulq_f32(v124, v124), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v124)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v123)), 0x17uLL)), *(float32x4_t *)a2, 3))), v114))), v113), v114));
    *(int8x16_t *)(v6 + v106) = vbslq_s8(v108, (int8x16_t)v112, (int8x16_t)vmulq_laneq_f32(v125, v125, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype4_half_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v85 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      int8x16_t v24 = *((int8x16_t *)a2 + 3);
      float32x4_t v25 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v24));
      float32x4_t v26 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v23, v24));
      float32x4_t v27 = *((float32x4_t *)a2 + 75);
      float32x4_t v28 = *((float32x4_t *)a2 + 5);
      float32x4_t v29 = vminq_f32(vmaxq_f32(v25, v27), v28);
      long long v30 = *((_OWORD *)a2 + 1);
      float32x4_t v31 = vminq_f32(vmaxq_f32(v26, v27), v28);
      float32x4_t v32 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v33 = vaddq_f32(v29, v32);
      float32x4_t v34 = vaddq_f32(v31, v32);
      int8x16_t v35 = *((int8x16_t *)a2 + 19);
      float32x4_t v36 = *((float32x4_t *)a2 + 20);
      float32x4_t v37 = (float32x4_t)vorrq_s8(vandq_s8(v35, (int8x16_t)v33), (int8x16_t)v28);
      float32x4_t v38 = (float32x4_t)vorrq_s8(vandq_s8(v35, (int8x16_t)v34), (int8x16_t)v28);
      int8x16_t v39 = *((int8x16_t *)a2 + 21);
      float32x4_t v40 = *((float32x4_t *)a2 + 22);
      float32x4_t v41 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v33, 0x17uLL)), (float32x4_t)vandq_s8(v39, (int8x16_t)vcgtq_f32(v36, v33)));
      float32x4_t v42 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v34, 0x17uLL)), (float32x4_t)vandq_s8(v39, (int8x16_t)vcgtq_f32(v36, v34)));
      float32x4_t v43 = *((float32x4_t *)a2 + 23);
      float32x4_t v44 = *((float32x4_t *)a2 + 24);
      float32x4_t v45 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v37, v43));
      float32x4_t v46 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v38, v43));
      float32x4_t v47 = vsubq_f32(v42, v40);
      float32x4_t v48 = vaddq_f32(vsubq_f32(v41, v40), v45);
      float32x4_t v49 = vsubq_f32(vsubq_f32(v37, v28), vmulq_f32(vmulq_f32(v44, v45), v37));
      float32x4_t v50 = vsubq_f32(vsubq_f32(v38, v28), vmulq_f32(vmulq_f32(v44, v46), v38));
      float32x4_t v51 = *((float32x4_t *)a2 + 25);
      float32x4_t v52 = *((float32x4_t *)a2 + 26);
      float32x4_t v53 = *((float32x4_t *)a2 + 27);
      float32x4_t v54 = *((float32x4_t *)a2 + 28);
      float32x4_t v55 = vmulq_n_f32(vaddq_f32(vaddq_f32(v47, v46), vmulq_f32(v50, vaddq_f32(vaddq_f32(v53, vmulq_f32(v54, v50)), vmulq_f32(vmulq_f32(v50, v50), vaddq_f32(v51, vmulq_f32(v52, v50)))))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v56 = *((float32x4_t *)a2 + 29);
      float32x4_t v57 = *((float32x4_t *)a2 + 30);
      float32x4_t v58 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v48, vmulq_f32(v49, vaddq_f32(vaddq_f32(v53, vmulq_f32(v54, v49)), vmulq_f32(vmulq_f32(v49, v49), vaddq_f32(v51, vmulq_f32(v52, v49)))))), COERCE_FLOAT(*(_OWORD *)a2)), v56);
      float32x4_t v59 = vmaxq_f32(v55, v56);
      float32x4_t v60 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v61 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v62 = vsubq_f32(v60, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v60, v58)));
      float32x4_t v63 = vsubq_f32(v61, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v61, v59)));
      float32x4_t v64 = vsubq_f32(v58, v62);
      float32x4_t v65 = vsubq_f32(v59, v63);
      float32x4_t v66 = *((float32x4_t *)a2 + 31);
      float32x4_t v67 = *((float32x4_t *)a2 + 32);
      float32x4_t v68 = vmulq_f32(v65, vaddq_f32(v67, vmulq_f32(v65, vaddq_f32(v57, vmulq_f32(v66, v65)))));
      float32x4_t v69 = vaddq_f32(v28, vmulq_f32(v64, vaddq_f32(v67, vmulq_f32(v64, vaddq_f32(v57, vmulq_f32(v66, v64))))));
      int32x4_t v70 = vcvtq_s32_f32(v63);
      int32x4_t v71 = *((int32x4_t *)a2 + 33);
      float32x4_t v72 = vmulq_f32(v69, (float32x4_t)vshlq_n_s32(vaddq_s32(v71, vcvtq_s32_f32(v62)), 0x17uLL));
      float32x4_t v73 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2);
      float32x4_t v74 = vmulq_laneq_f32(vmulq_f32(vaddq_f32(v28, v68), (float32x4_t)vshlq_n_s32(vaddq_s32(v71, v70), 0x17uLL)), *(float32x4_t *)a2, 3);
      int8x16_t v75 = (int8x16_t)vaddq_f32(v73, vmulq_laneq_f32(v72, *(float32x4_t *)a2, 3));
      int8x16_t v76 = (int8x16_t)vmulq_n_f32(v29, *(float *)&v30);
      int8x16_t v77 = (int8x16_t)vmulq_n_f32(v31, *(float *)&v30);
      float32x4_t v78 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v30, 1);
      float32x4_t v79 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      float32x4_t v80 = vmaxq_f32(vaddq_f32(v79, (float32x4_t)vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v27, vsubq_f32(v29, v78)), v76, v75), v28))), v27);
      float32x4_t v81 = vmaxq_f32(vaddq_f32(v79, (float32x4_t)vbslq_s8(v15, (int8x16_t)v26, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v27, vsubq_f32(v31, v78)), v77, (int8x16_t)vaddq_f32(v73, v74)), v28))), v27);
      float32x4_t v82 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vminq_f32(v80, v28));
      float32x4_t v83 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v26, (int8x16_t)vminq_f32(v81, v28));
      float32x4_t v84 = (int8x16_t *)(v6 + v11);
      v84[-1] = vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v82, v82, 3));
      *float32x4_t v84 = vbslq_s8(v15, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v83, v83, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v85 = -v10;
    if (v85 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v86 = 16 * v85;
    float32x4_t v87 = *(float32x4_t *)(v7 + v86);
    int8x16_t v88 = *((int8x16_t *)a2 + 15);
    float32x4_t v89 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v87, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v90 = vmulq_f32(vrecpeq_f32(v89), *((float32x4_t *)a2 + 18));
    float32x4_t v91 = vmulq_f32(v87, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v90, vrecpsq_f32(v90, v89))), *((int8x16_t *)a2 + 3)));
    float32x4_t v92 = *((float32x4_t *)a2 + 75);
    float32x4_t v93 = *((float32x4_t *)a2 + 5);
    float32x4_t v94 = vminq_f32(vmaxq_f32(v91, v92), v93);
    float32x4_t v95 = vaddq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1));
    float32x4_t v96 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v95), (int8x16_t)v93);
    float32x4_t v97 = (float32x4_t)vandq_s8((int8x16_t)v93, (int8x16_t)vcgtq_f32(v96, *((float32x4_t *)a2 + 23)));
    float32x4_t v98 = vsubq_f32(vsubq_f32(v96, v93), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v97), v96));
    float32x4_t v99 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v95, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v95))), *((float32x4_t *)a2 + 22)), v97), vmulq_f32(v98, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(*((float32x4_t *)a2 + 28), v98)), vmulq_f32(vmulq_f32(v98, v98), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v98)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v100 = vcvtq_f32_s32(vcvtq_s32_f32(v99));
    float32x4_t v101 = vsubq_f32(v100, (float32x4_t)vandq_s8((int8x16_t)v93, (int8x16_t)vcgtq_f32(v100, v99)));
    float32x4_t v102 = vsubq_f32(v99, v101);
    float32x4_t v103 = (float32x4_t)vbslq_s8(v88, (int8x16_t)v91, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(v88, (int8x16_t)v91, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v92, vsubq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v94, COERCE_FLOAT(*((_OWORD *)a2 + 1))),
                                                                                      (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2), vmulq_laneq_f32(vmulq_f32(vaddq_f32(v93, vmulq_f32(v102, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v102, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v102)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v101)), 0x17uLL)), *(float32x4_t *)a2, 3))), v93))), v92), v93));
    *(int8x16_t *)(v6 + v86) = vbslq_s8(v88, (int8x16_t)v91, (int8x16_t)vmulq_laneq_f32(v103, v103, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype4_halfTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v90 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      float32x4_t v22 = vrecpsq_f32(v20, v16);
      float32x4_t v23 = vrecpsq_f32(v21, v17);
      int8x16_t v24 = (int8x16_t)vmulq_f32(v20, v22);
      int8x16_t v25 = (int8x16_t)vmulq_f32(v21, v23);
      int8x16_t v26 = vandq_s8(v19, v24);
      int8x16_t v27 = vandq_s8(v19, v25);
      int8x16_t v28 = *((int8x16_t *)a2 + 3);
      float32x4_t v29 = (float32x4_t)vorrq_s8(v27, v28);
      float32x4_t v30 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v26, v28));
      int8x16_t v31 = *((int8x16_t *)a2 + 76);
      float32x4_t v32 = *((float32x4_t *)a2 + 75);
      float32x4_t v33 = vmulq_f32(v12, v29);
      long long v34 = *((_OWORD *)a2 + 1);
      float32x4_t v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v36 = vminq_f32(vmaxq_f32(v30, v32), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbslq_s8(v31, (int8x16_t)v22, (int8x16_t)v32), 3));
      float32x4_t v37 = vminq_f32(vmaxq_f32(v33, v32), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbslq_s8(v31, (int8x16_t)v23, (int8x16_t)v32), 3));
      float32x4_t v38 = vaddq_f32(v36, v35);
      float32x4_t v39 = vaddq_f32(v37, v35);
      int8x16_t v40 = *((int8x16_t *)a2 + 19);
      float32x4_t v41 = *((float32x4_t *)a2 + 20);
      float32x4_t v42 = *((float32x4_t *)a2 + 5);
      float32x4_t v43 = (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)v38), (int8x16_t)v42);
      float32x4_t v44 = (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)v39), (int8x16_t)v42);
      int8x16_t v45 = *((int8x16_t *)a2 + 21);
      float32x4_t v46 = *((float32x4_t *)a2 + 22);
      float32x4_t v47 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v38, 0x17uLL)), (float32x4_t)vandq_s8(v45, (int8x16_t)vcgtq_f32(v41, v38)));
      float32x4_t v48 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v39, 0x17uLL)), (float32x4_t)vandq_s8(v45, (int8x16_t)vcgtq_f32(v41, v39)));
      float32x4_t v49 = *((float32x4_t *)a2 + 23);
      float32x4_t v50 = *((float32x4_t *)a2 + 24);
      float32x4_t v51 = (float32x4_t)vandq_s8((int8x16_t)v42, (int8x16_t)vcgtq_f32(v43, v49));
      float32x4_t v52 = (float32x4_t)vandq_s8((int8x16_t)v42, (int8x16_t)vcgtq_f32(v44, v49));
      float32x4_t v53 = vsubq_f32(v48, v46);
      float32x4_t v54 = vaddq_f32(vsubq_f32(v47, v46), v51);
      float32x4_t v55 = vsubq_f32(vsubq_f32(v43, v42), vmulq_f32(vmulq_f32(v50, v51), v43));
      float32x4_t v56 = vsubq_f32(vsubq_f32(v44, v42), vmulq_f32(vmulq_f32(v50, v52), v44));
      float32x4_t v57 = *((float32x4_t *)a2 + 25);
      float32x4_t v58 = *((float32x4_t *)a2 + 26);
      float32x4_t v59 = *((float32x4_t *)a2 + 27);
      float32x4_t v60 = *((float32x4_t *)a2 + 28);
      float32x4_t v61 = vmulq_n_f32(vaddq_f32(vaddq_f32(v53, v52), vmulq_f32(v56, vaddq_f32(vaddq_f32(v59, vmulq_f32(v56, v60)), vmulq_f32(vmulq_f32(v56, v56), vaddq_f32(v57, vmulq_f32(v58, v56)))))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v62 = *((float32x4_t *)a2 + 29);
      float32x4_t v63 = *((float32x4_t *)a2 + 30);
      float32x4_t v64 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v54, vmulq_f32(v55, vaddq_f32(vaddq_f32(v59, vmulq_f32(v55, v60)), vmulq_f32(vmulq_f32(v55, v55), vaddq_f32(v57, vmulq_f32(v58, v55)))))), COERCE_FLOAT(*(_OWORD *)a2)), v62);
      float32x4_t v65 = vmaxq_f32(v61, v62);
      float32x4_t v66 = vcvtq_f32_s32(vcvtq_s32_f32(v64));
      float32x4_t v67 = vcvtq_f32_s32(vcvtq_s32_f32(v65));
      float32x4_t v68 = vsubq_f32(v66, (float32x4_t)vandq_s8((int8x16_t)v42, (int8x16_t)vcgtq_f32(v66, v64)));
      float32x4_t v69 = vsubq_f32(v67, (float32x4_t)vandq_s8((int8x16_t)v42, (int8x16_t)vcgtq_f32(v67, v65)));
      float32x4_t v70 = vsubq_f32(v64, v68);
      float32x4_t v71 = vsubq_f32(v65, v69);
      float32x4_t v72 = *((float32x4_t *)a2 + 31);
      float32x4_t v73 = *((float32x4_t *)a2 + 32);
      float32x4_t v74 = vmulq_f32(v71, vaddq_f32(v73, vmulq_f32(v71, vaddq_f32(v63, vmulq_f32(v72, v71)))));
      float32x4_t v75 = vaddq_f32(v42, vmulq_f32(v70, vaddq_f32(v73, vmulq_f32(v70, vaddq_f32(v63, vmulq_f32(v72, v70))))));
      int32x4_t v76 = vcvtq_s32_f32(v69);
      int32x4_t v77 = *((int32x4_t *)a2 + 33);
      float32x4_t v78 = vmulq_f32(v75, (float32x4_t)vshlq_n_s32(vaddq_s32(v77, vcvtq_s32_f32(v68)), 0x17uLL));
      float32x4_t v79 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2);
      float32x4_t v80 = vmulq_laneq_f32(vmulq_f32(vaddq_f32(v42, v74), (float32x4_t)vshlq_n_s32(vaddq_s32(v77, v76), 0x17uLL)), *(float32x4_t *)a2, 3);
      int8x16_t v81 = (int8x16_t)vmulq_n_f32(v36, *(float *)&v34);
      int8x16_t v82 = (int8x16_t)vmulq_n_f32(v37, *(float *)&v34);
      float32x4_t v83 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v34, 1);
      float32x4_t v84 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      int8x16_t v85 = (int8x16_t)vaddq_f32(v84, (float32x4_t)vbslq_s8(v15, (int8x16_t)v30, vbslq_s8((int8x16_t)vcgtq_f32(v32, vsubq_f32(v36, v83)), v81, (int8x16_t)vaddq_f32(v79, vmulq_laneq_f32(v78, *(float32x4_t *)a2, 3)))));
      int8x16_t v86 = (int8x16_t)vaddq_f32(v84, (float32x4_t)vbslq_s8(v15, (int8x16_t)v33, vbslq_s8((int8x16_t)vcgtq_f32(v32, vsubq_f32(v37, v83)), v82, (int8x16_t)vaddq_f32(v79, v80))));
      float32x4_t v87 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v30, v85);
      float32x4_t v88 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v33, v86);
      float32x4_t v89 = (int8x16_t *)(v6 + v11);
      v89[-1] = vbslq_s8(v15, (int8x16_t)v30, (int8x16_t)vmulq_laneq_f32(v87, v87, 3));
      *float32x4_t v89 = vbslq_s8(v15, (int8x16_t)v33, (int8x16_t)vmulq_laneq_f32(v88, v88, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v90 = -v10;
    if (v90 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v91 = 16 * v90;
    float32x4_t v92 = *(float32x4_t *)(v7 + v91);
    int8x16_t v93 = *((int8x16_t *)a2 + 15);
    float32x4_t v94 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v92, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v95 = vmulq_f32(vrecpeq_f32(v94), *((float32x4_t *)a2 + 18));
    float32x4_t v96 = vrecpsq_f32(v95, v94);
    float32x4_t v97 = vmulq_f32(v92, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v95, v96)), *((int8x16_t *)a2 + 3)));
    float32x4_t v98 = *((float32x4_t *)a2 + 75);
    float32x4_t v99 = vminq_f32(vmaxq_f32(v97, v98), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 76), (int8x16_t)v96, (int8x16_t)v98), 3));
    float32x4_t v100 = vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1));
    float32x4_t v101 = *((float32x4_t *)a2 + 5);
    float32x4_t v102 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v100), (int8x16_t)v101);
    float32x4_t v103 = (float32x4_t)vandq_s8((int8x16_t)v101, (int8x16_t)vcgtq_f32(v102, *((float32x4_t *)a2 + 23)));
    float32x4_t v104 = vsubq_f32(vsubq_f32(v102, v101), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v103), v102));
    float32x4_t v105 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v100, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v100))), *((float32x4_t *)a2 + 22)), v103), vmulq_f32(v104, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v104, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v104, v104), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v104)))))), COERCE_FLOAT(*(_OWORD *)a2)),
             *((float32x4_t *)a2 + 29));
    float32x4_t v106 = vcvtq_f32_s32(vcvtq_s32_f32(v105));
    float32x4_t v107 = vsubq_f32(v106, (float32x4_t)vandq_s8((int8x16_t)v101, (int8x16_t)vcgtq_f32(v106, v105)));
    float32x4_t v108 = vsubq_f32(v105, v107);
    float32x4_t v109 = (float32x4_t)vbslq_s8(v93, (int8x16_t)v97, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(v93, (int8x16_t)v97, vbslq_s8((int8x16_t)vcgtq_f32(v98, vsubq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v99, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2), vmulq_laneq_f32(
                                                                       vmulq_f32(vaddq_f32(v101, vmulq_f32(v108, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v108, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v108)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v107)), 0x17uLL)), *(float32x4_t *)a2,
                                                                       3))))));
    *(int8x16_t *)(v6 + v91) = vbslq_s8(v93, (int8x16_t)v97, (int8x16_t)vmulq_laneq_f32(v109, v109, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype4_niceTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v107 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vrecpsq_f32(v18, v16);
      float32x4_t v21 = vrecpsq_f32(v19, v17);
      float32x4_t v22 = vmulq_f32(v18, v20);
      float32x4_t v23 = vmulq_f32(v19, v21);
      int8x16_t v24 = (int8x16_t)vmulq_f32(v22, vrecpsq_f32(v22, v16));
      int8x16_t v25 = *((int8x16_t *)a2 + 17);
      int8x16_t v26 = vandq_s8(v25, v24);
      int8x16_t v27 = vandq_s8(v25, (int8x16_t)vmulq_f32(v23, vrecpsq_f32(v23, v17)));
      int8x16_t v28 = *((int8x16_t *)a2 + 3);
      float32x4_t v29 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v26, v28));
      float32x4_t v30 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v27, v28));
      float32x4_t v31 = *((float32x4_t *)a2 + 75);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v29, v31), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 76), (int8x16_t)v20, (int8x16_t)v31), 3));
      long long v33 = *((_OWORD *)a2 + 1);
      float32x4_t v34 = vminq_f32(vmaxq_f32(v30, v31), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 76), (int8x16_t)v21, (int8x16_t)v31), 3));
      float32x4_t v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v36 = *((float32x4_t *)a2 + 5);
      int8x16_t v37 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v36, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v31)), v31);
      float32x4_t v38 = (float32x4_t)vbslq_s8(v37, (int8x16_t)v36, (int8x16_t)vaddq_f32(v32, v35));
      float32x4_t v39 = (float32x4_t)vbslq_s8(v37, (int8x16_t)v36, (int8x16_t)vaddq_f32(v34, v35));
      int8x16_t v40 = *((int8x16_t *)a2 + 19);
      float32x4_t v41 = *((float32x4_t *)a2 + 20);
      float32x4_t v42 = (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)v38), (int8x16_t)v36);
      float32x4_t v43 = (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)v39), (int8x16_t)v36);
      int8x16_t v44 = *((int8x16_t *)a2 + 21);
      float32x4_t v45 = *((float32x4_t *)a2 + 22);
      float32x4_t v46 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v39, 0x17uLL)), (float32x4_t)vandq_s8(v44, (int8x16_t)vcgtq_f32(v41, v39)));
      float32x4_t v47 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v38, 0x17uLL)), (float32x4_t)vandq_s8(v44, (int8x16_t)vcgtq_f32(v41, v38))), v45);
      float32x4_t v48 = *((float32x4_t *)a2 + 23);
      float32x4_t v49 = *((float32x4_t *)a2 + 24);
      float32x4_t v50 = (float32x4_t)vandq_s8((int8x16_t)v36, (int8x16_t)vcgtq_f32(v42, v48));
      float32x4_t v51 = (float32x4_t)vandq_s8((int8x16_t)v36, (int8x16_t)vcgtq_f32(v43, v48));
      float32x4_t v52 = vaddq_f32(v47, v50);
      float32x4_t v53 = vaddq_f32(vsubq_f32(v46, v45), v51);
      float32x4_t v54 = vsubq_f32(vsubq_f32(v42, v36), vmulq_f32(vmulq_f32(v49, v50), v42));
      float32x4_t v55 = vsubq_f32(vsubq_f32(v43, v36), vmulq_f32(vmulq_f32(v49, v51), v43));
      float32x4_t v56 = vmulq_f32(v54, v54);
      float32x4_t v57 = *((float32x4_t *)a2 + 37);
      float32x4_t v58 = *((float32x4_t *)a2 + 38);
      float32x4_t v59 = vaddq_f32(v57, vmulq_f32(v58, v54));
      float32x4_t v60 = vaddq_f32(v57, vmulq_f32(v58, v55));
      float32x4_t v61 = *((float32x4_t *)a2 + 39);
      float32x4_t v62 = *((float32x4_t *)a2 + 40);
      float32x4_t v63 = vaddq_f32(v61, vmulq_f32(v62, v54));
      float32x4_t v64 = vaddq_f32(v61, vmulq_f32(v62, v55));
      float32x4_t v65 = *((float32x4_t *)a2 + 41);
      float32x4_t v66 = *((float32x4_t *)a2 + 42);
      float32x4_t v67 = vaddq_f32(v65, vmulq_f32(v66, v54));
      float32x4_t v68 = vaddq_f32(v65, vmulq_f32(v66, v55));
      float32x4_t v69 = vmulq_f32(v55, v55);
      float32x4_t v70 = vaddq_f32(v68, vmulq_f32(v69, vaddq_f32(v60, vmulq_f32(v69, v64))));
      float32x4_t v71 = vmulq_f32(v54, vaddq_f32(v67, vmulq_f32(v56, vaddq_f32(v59, vmulq_f32(v56, v63)))));
      float32x4_t v72 = *((float32x4_t *)a2 + 43);
      float32x4_t v73 = *((float32x4_t *)a2 + 44);
      float32x4_t v74 = vaddq_f32(v53, vmulq_f32(v55, vaddq_f32(v72, vmulq_f32(v55, v70))));
      float32x4_t v75 = vmulq_n_f32(vaddq_f32(v52, vmulq_f32(v54, vaddq_f32(v72, v71))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v76 = *((float32x4_t *)a2 + 29);
      float32x4_t v77 = vmaxq_f32(v75, v76);
      float32x4_t v78 = vmaxq_f32(vmulq_n_f32(v74, COERCE_FLOAT(*(_OWORD *)a2)), v76);
      float32x4_t v79 = vcvtq_f32_s32(vcvtq_s32_f32(v77));
      float32x4_t v80 = vcvtq_f32_s32(vcvtq_s32_f32(v78));
      float32x4_t v81 = vsubq_f32(v79, (float32x4_t)vandq_s8((int8x16_t)v36, (int8x16_t)vcgtq_f32(v79, v77)));
      float32x4_t v82 = vsubq_f32(v80, (float32x4_t)vandq_s8((int8x16_t)v36, (int8x16_t)vcgtq_f32(v80, v78)));
      float32x4_t v83 = vsubq_f32(v77, v81);
      float32x4_t v84 = vsubq_f32(v78, v82);
      float32x4_t v85 = *((float32x4_t *)a2 + 45);
      float32x4_t v86 = *((float32x4_t *)a2 + 46);
      float32x4_t v87 = vaddq_f32(v73, vmulq_f32(v85, v83));
      float32x4_t v88 = vaddq_f32(v73, vmulq_f32(v85, v84));
      float32x4_t v89 = *((float32x4_t *)a2 + 47);
      float32x4_t v90 = *((float32x4_t *)a2 + 48);
      float32x4_t v91 = vaddq_f32(v36, vmulq_f32(v83, vaddq_f32(v90, vmulq_f32(v83, vaddq_f32(vaddq_f32(v86, vmulq_f32(v83, v89)), vmulq_f32(vmulq_f32(v83, v83), v87))))));
      float32x4_t v92 = vaddq_f32(v36, vmulq_f32(v84, vaddq_f32(v90, vmulq_f32(v84, vaddq_f32(vaddq_f32(v86, vmulq_f32(v89, v84)), vmulq_f32(vmulq_f32(v84, v84), v88))))));
      int32x4_t v93 = *((int32x4_t *)a2 + 33);
      float32x4_t v94 = vmulq_f32(v91, (float32x4_t)vshlq_n_s32(vaddq_s32(v93, vcvtq_s32_f32(v81)), 0x17uLL));
      float32x4_t v95 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2);
      float32x4_t v96 = vmulq_laneq_f32(vmulq_f32(v92, (float32x4_t)vshlq_n_s32(vaddq_s32(v93, vcvtq_s32_f32(v82)), 0x17uLL)), *(float32x4_t *)a2, 3);
      int8x16_t v97 = (int8x16_t)vaddq_f32(v95, vmulq_laneq_f32(v94, *(float32x4_t *)a2, 3));
      int8x16_t v98 = (int8x16_t)vmulq_n_f32(v32, *(float *)&v33);
      int8x16_t v99 = (int8x16_t)vmulq_n_f32(v34, *(float *)&v33);
      float32x4_t v100 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v33, 1);
      int8x16_t v101 = (int8x16_t)vcgtq_f32(v31, vsubq_f32(v32, v100));
      float32x4_t v102 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      int8x16_t v103 = (int8x16_t)vaddq_f32(v102, (float32x4_t)vbslq_s8(v15, (int8x16_t)v30, vbslq_s8((int8x16_t)vcgtq_f32(v31, vsubq_f32(v34, v100)), v99, (int8x16_t)vaddq_f32(v95, v96))));
      float32x4_t v104 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v29, (int8x16_t)vaddq_f32(v102, (float32x4_t)vbslq_s8(v15, (int8x16_t)v29, vbslq_s8(v101, v98, v97))));
      float32x4_t v105 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v30, v103);
      float32x4_t v106 = (int8x16_t *)(v6 + v11);
      v106[-1] = vbslq_s8(v15, (int8x16_t)v29, (int8x16_t)vmulq_laneq_f32(v104, v104, 3));
      *float32x4_t v106 = vbslq_s8(v15, (int8x16_t)v30, (int8x16_t)vmulq_laneq_f32(v105, v105, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v107 = -v10;
    if (v107 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v108 = 16 * v107;
    float32x4_t v109 = *(float32x4_t *)(v7 + v108);
    int8x16_t v110 = *((int8x16_t *)a2 + 15);
    float32x4_t v111 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v109, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v112 = vrecpeq_f32(v111);
    float32x4_t v113 = vrecpsq_f32(v112, v111);
    float32x4_t v114 = vmulq_f32(v112, v113);
    float32x4_t v115 = vmulq_f32(v109, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v114, vrecpsq_f32(v114, v111))), *((int8x16_t *)a2 + 3)));
    float32x4_t v116 = *((float32x4_t *)a2 + 75);
    float32x4_t v117 = vminq_f32(vmaxq_f32(v115, v116), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 76), (int8x16_t)v113, (int8x16_t)v116), 3));
    float32x4_t v118 = *((float32x4_t *)a2 + 5);
    float32x4_t v119 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v118, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v116)), v116), (int8x16_t)v118, (int8x16_t)vaddq_f32(v117, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
    float32x4_t v120 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v119), (int8x16_t)v118);
    float32x4_t v121 = (float32x4_t)vandq_s8((int8x16_t)v118, (int8x16_t)vcgtq_f32(v120, *((float32x4_t *)a2 + 23)));
    float32x4_t v122 = vsubq_f32(vsubq_f32(v120, v118), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v121), v120));
    float32x4_t v123 = vmulq_f32(v122, v122);
    float32x4_t v124 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v119, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v119))), *((float32x4_t *)a2 + 22)), v121), vmulq_f32(v122, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v122, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v122)),
                         vmulq_f32(v123, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v122)), vmulq_f32(v123, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v122)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
    float32x4_t v125 = vcvtq_f32_s32(vcvtq_s32_f32(v124));
    float32x4_t v126 = vsubq_f32(v125, (float32x4_t)vandq_s8((int8x16_t)v118, (int8x16_t)vcgtq_f32(v125, v124)));
    float32x4_t v127 = vsubq_f32(v124, v126);
    float32x4_t v128 = (float32x4_t)vbslq_s8(v110, (int8x16_t)v115, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(v110, (int8x16_t)v115, vbslq_s8((int8x16_t)vcgtq_f32(v116, vsubq_f32(v117, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v117, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2), vmulq_laneq_f32(
                                                                       vmulq_f32(vaddq_f32(v118, vmulq_f32(v127, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v127, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v127)), vmulq_f32(vmulq_f32(v127, v127), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(
                                                                                         *((float32x4_t *)a2 + 45),
                                                                                         v127)))))))),
                                                                         (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v126)), 0x17uLL)), *(float32x4_t *)a2, 3))))));
    *(int8x16_t *)(v6 + v108) = vbslq_s8(v110, (int8x16_t)v115, (int8x16_t)vmulq_laneq_f32(v128, v128, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype4_floatTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = 16 * *((int *)a1 + 22);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        float32x4_t v12 = *((float32x4_t *)a2 + 72);
        float32x4_t v13 = *((float32x4_t *)a2 + 73);
        float32x4_t v14 = vminq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v11, v12), 3), v12), v13);
        float32x4_t v15 = vminq_f32(vmaxq_f32(vrecpeq_f32(v14), v12), v13);
        float32x4_t v16 = vrecpsq_f32(v14, v15);
        float32x4_t v17 = vminq_f32(vmaxq_f32(vmulq_f32(v15, v16), v12), v13);
        float32x4_t v18 = vmulq_f32(v17, vrecpsq_f32(v14, v17));
        v18.i32[3] = 1.0;
        float32x4_t v19 = vmulq_f32(v11, v18);
        float32x4_t v20 = *((float32x4_t *)a2 + 75);
        float32x4_t v21 = vminq_f32(vmaxq_f32(v19, v20), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbslq_s8(*((int8x16_t *)a2 + 76), (int8x16_t)v16, (int8x16_t)v20), 3));
        float32x4_t v22 = *((float32x4_t *)a2 + 5);
        float32x4_t v23 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v20)), v20), (int8x16_t)v22, (int8x16_t)vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
        int8x16_t v24 = *((int8x16_t *)a2 + 52);
        int8x16_t v25 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v23);
        int8x16_t v26 = (int8x16_t)vmulq_f32(v23, vaddq_f32(v22, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 49), v25)));
        float32x4_t v27 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), v26), (int8x16_t)v22);
        float32x4_t v28 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v23, *((float32x4_t *)a2 + 21))), vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v23, *((float32x4_t *)a2 + 50)), *((int8x16_t *)a2 + 51)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v23, *((float32x4_t *)a2 + 50)))), (float32x4_t)vandq_s8(v24, v25))), *((float32x4_t *)a2 + 22)), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v26, 0x17uLL)));
        float32x4_t v29 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v27, *((float32x4_t *)a2 + 23)));
        float32x4_t v30 = vaddq_f32(v28, v29);
        float32x4_t v31 = vsubq_f32(vsubq_f32(v27, v22), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v29), v27));
        float32x4_t v32 = vmulq_f32(v31, v31);
        float32x4_t v33 = vmulq_n_f32(vaddq_f32(v30, vmulq_f32(v31, vaddq_f32(*((float32x4_t *)a2 + 61), vmulq_f32(v31, vaddq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 59), vmulq_f32(*((float32x4_t *)a2 + 60), v31)), vmulq_f32(v32, vaddq_f32(*((float32x4_t *)a2 + 57), vmulq_f32(*((float32x4_t *)a2 + 58), v31)))), vmulq_f32(vmulq_f32(v32, v32), vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 55), vmulq_f32(*((float32x4_t *)a2 + 56), v31)), vmulq_f32(
                                v32,
                                vaddq_f32(*((float32x4_t *)a2 + 53), vmulq_f32(*((float32x4_t *)a2 + 54), v31)))))))))),
                COERCE_FLOAT(*(_OWORD *)a2));
        float32x4_t v34 = vminq_f32(vmaxq_f32(v33, *((float32x4_t *)a2 + 62)), *((float32x4_t *)a2 + 63));
        float32x4_t v35 = vcvtq_f32_s32(vcvtq_s32_f32(v34));
        float32x4_t v36 = vsubq_f32(v35, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v35, v34)));
        float32x4_t v37 = vsubq_f32(v34, v36);
        float32x4_t v38 = vmulq_f32(v37, v37);
        int8x16_t v39 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 70), v36);
        int8x16_t v40 = vbslq_s8((int8x16_t)vcgtq_f32(v20, vsubq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v21, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2), vmulq_laneq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v22, vorrq_s8((int8x16_t)vcltzq_f32(v33), (int8x16_t)vcgezq_f32(v33))), v20), (int8x16_t)vmulq_f32(vaddq_f32(v22, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 71), v39)),
                                                           vmulq_f32(vaddq_f32(v22, vmulq_f32(v37, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 68), vmulq_f32(v37, *((float32x4_t *)a2 + 69))), vmulq_f32(v38, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 66), vmulq_f32(*((float32x4_t *)a2 + 67), v37)), vmulq_f32(v38, vaddq_f32(*((float32x4_t *)a2 + 64), vmulq_f32(*((float32x4_t *)a2 + 65), v37)))))))),
                                                             (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(vaddq_f32(v36, (float32x4_t)vandq_s8(v24, v39)))), 0x17uLL))), (int8x16_t)v33), *(float32x4_t *)a2, 3)));
        int8x16_t v41 = *((int8x16_t *)a2 + 15);
        float32x4_t v42 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v19, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(v41, (int8x16_t)v19, v40)));
        *(int8x16_t *)(v6 + v10) = vbslq_s8(v41, (int8x16_t)v19, (int8x16_t)vmulq_laneq_f32(v42, v42, 3));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v7;
      v6 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Getrec709_fast_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    uint64_t v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v57 = 0;
        uint64_t v58 = 16 * v8;
        uint64_t v59 = 16 * v7;
        uint64_t v60 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v61 = 0;
          do
          {
            int8x16_t v62 = *((int8x16_t *)a2 + 15);
            float32x4_t v63 = vmulq_f32(v5[v61 / 0x10], (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5[v61 / 0x10], 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
            float32x4_t v64 = vminq_f32(vmaxq_f32(v63, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v65 = (float32x4_t)vbslq_s8(v62, (int8x16_t)v63, (int8x16_t)vmulq_f32(v64, vminq_f32(vrsqrteq_f32(v64), *((float32x4_t *)a2 + 73))));
            v6[v61 / 0x10] = vbslq_s8(v62, (int8x16_t)v63, (int8x16_t)vmulq_laneq_f32(v65, v65, 3));
            v61 += 16;
          }
          while (v60 != v61);
          ++v57;
          uint64_t v5 = (float32x4_t *)((char *)v5 + v58);
          uint64_t v6 = (int8x16_t *)((char *)v6 + v59);
        }
        while (v57 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      float32x4_t v12 = v5 + 4;
      float32x4_t v13 = v6 + 4;
      do
      {
        unint64_t v14 = 0;
        float32x4_t v15 = v13;
        float32x4_t v16 = v12;
        uint64_t v17 = 2;
        do
        {
          float32x4_t v18 = v5[v17 - 2];
          float32x4_t v19 = v5[v17 - 1];
          float32x4_t v20 = v5[v17];
          float32x4_t v21 = v5[v17 + 1];
          int8x16_t v23 = *((int8x16_t *)a2 + 15);
          float32x4_t v22 = *((float32x4_t *)a2 + 16);
          float32x4_t v24 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 3), v22);
          int8x16_t v25 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3), v22));
          int8x16_t v26 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3), v22));
          int8x16_t v27 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 3), v22));
          int8x16_t v28 = *((int8x16_t *)a2 + 17);
          int8x16_t v29 = vandq_s8(v28, v25);
          int8x16_t v30 = vandq_s8(v28, v26);
          int8x16_t v31 = vandq_s8(v28, v27);
          int8x16_t v32 = vandq_s8(v28, (int8x16_t)vrecpeq_f32(v24));
          int8x16_t v33 = *((int8x16_t *)a2 + 3);
          float32x4_t v34 = vmulq_f32(v18, (float32x4_t)vorrq_s8(v29, v33));
          float32x4_t v35 = vmulq_f32(v19, (float32x4_t)vorrq_s8(v30, v33));
          float32x4_t v36 = vmulq_f32(v20, (float32x4_t)vorrq_s8(v31, v33));
          float32x4_t v37 = vmulq_f32(v21, (float32x4_t)vorrq_s8(v32, v33));
          float32x4_t v38 = *((float32x4_t *)a2 + 75);
          float32x4_t v39 = *((float32x4_t *)a2 + 5);
          float32x4_t v40 = vminq_f32(vmaxq_f32(v34, v38), v39);
          float32x4_t v41 = vminq_f32(vmaxq_f32(v35, v38), v39);
          float32x4_t v42 = vminq_f32(vmaxq_f32(v36, v38), v39);
          float32x4_t v43 = vminq_f32(vmaxq_f32(v37, v38), v39);
          float32x4_t v44 = *((float32x4_t *)a2 + 73);
          float32x4_t v45 = v16;
          float32x4_t v46 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v34, (int8x16_t)vmulq_f32(v40, vminq_f32(vrsqrteq_f32(v40), v44)));
          float32x4_t v47 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v35, (int8x16_t)vmulq_f32(v41, vminq_f32(vrsqrteq_f32(v41), v44)));
          float32x4_t v48 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v36, (int8x16_t)vmulq_f32(v42, vminq_f32(vrsqrteq_f32(v42), v44)));
          float32x4_t v49 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v37, (int8x16_t)vmulq_f32(v43, vminq_f32(vrsqrteq_f32(v43), v44)));
          float32x4_t v50 = v15;
          float32x4_t v51 = &v6[v17];
          v14 += 4;
          v51[-2] = vbslq_s8(v23, (int8x16_t)v34, (int8x16_t)vmulq_laneq_f32(v46, v46, 3));
          v51[-1] = vbslq_s8(v23, (int8x16_t)v35, (int8x16_t)vmulq_laneq_f32(v47, v47, 3));
          *float32x4_t v51 = vbslq_s8(v23, (int8x16_t)v36, (int8x16_t)vmulq_laneq_f32(v48, v48, 3));
          v51[1] = vbslq_s8(v23, (int8x16_t)v37, (int8x16_t)vmulq_laneq_f32(v49, v49, 3));
          v17 += 4;
          v16 += 4;
          float32x4_t v15 = v50 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            float32x4_t v52 = *v45++;
            int8x16_t v53 = *((int8x16_t *)a2 + 15);
            float32x4_t v54 = vmulq_f32(v52, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
            float32x4_t v55 = vminq_f32(vmaxq_f32(v54, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v56 = (float32x4_t)vbslq_s8(v53, (int8x16_t)v54, (int8x16_t)vmulq_f32(v55, vminq_f32(vrsqrteq_f32(v55), *((float32x4_t *)a2 + 73))));
            *v50++ = vbslq_s8(v53, (int8x16_t)v54, (int8x16_t)vmulq_laneq_f32(v56, v56, 3));
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        uint64_t v6 = (int8x16_t *)((char *)v6 + v10);
        uint64_t v5 = (float32x4_t *)((char *)v5 + v11);
        float32x4_t v12 = (float32x4_t *)((char *)v12 + v11);
        float32x4_t v13 = (int8x16_t *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

uint64_t Getrec709_fixed_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v86) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v10 + 32);
      int8x16_t v16 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v17 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15));
      float32x4_t v18 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15));
      float32x4_t v19 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v15));
      int8x16_t v21 = *((int8x16_t *)a2 + 17);
      float32x4_t v20 = *((float32x4_t *)a2 + 18);
      int8x16_t v22 = (int8x16_t)vmulq_f32(v19, v20);
      int8x16_t v23 = vandq_s8(v21, (int8x16_t)vmulq_f32(v17, v20));
      int8x16_t v24 = vandq_s8(v21, (int8x16_t)vmulq_f32(v18, v20));
      int8x16_t v25 = *((int8x16_t *)a2 + 3);
      float32x4_t v26 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v23, v25));
      float32x4_t v27 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v24, v25));
      float32x4_t v28 = vmulq_f32(v14, (float32x4_t)vorrq_s8(vandq_s8(v21, v22), v25));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = *((float32x4_t *)a2 + 6);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v26, v29), v30);
      float32x4_t v33 = vminq_f32(vmaxq_f32(v27, v29), v30);
      float32x4_t v34 = vminq_f32(vmaxq_f32(v28, v29), v30);
      float32x4_t v35 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)v32));
      float32x4_t v36 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)v33));
      float32x4_t v37 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)v34));
      float32x4_t v38 = vcvtq_f32_s32(vcvtq_s32_f32(v35));
      float32x4_t v39 = vcvtq_f32_s32(vcvtq_s32_f32(v36));
      float32x4_t v40 = vcvtq_f32_s32(vcvtq_s32_f32(v37));
      float32x4_t v41 = *((float32x4_t *)a2 + 7);
      float32x4_t v42 = *((float32x4_t *)a2 + 8);
      float32x4_t v43 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v35, v38), v41));
      float32x4_t v44 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v36, v39), v41));
      float32x4_t v45 = vrsqrteq_f32(vaddq_f32(v41, vsubq_f32(v37, v40)));
      float32x4_t v46 = vaddq_f32(v42, v38);
      float32x4_t v47 = vaddq_f32(v42, v39);
      float32x4_t v48 = vaddq_f32(v42, v40);
      float32x4_t v49 = *((float32x4_t *)a2 + 9);
      float32x4_t v50 = *((float32x4_t *)a2 + 10);
      float32x4_t v51 = vsubq_f32(v46, vmulq_f32(v43, v49));
      float32x4_t v52 = *((float32x4_t *)a2 + 77);
      float32x4_t v53 = vmulq_f32(v52, v51);
      float32x4_t v54 = vmulq_f32(v52, vsubq_f32(v47, vmulq_f32(v44, v49)));
      float32x4_t v55 = vmulq_f32(v52, vsubq_f32(v48, vmulq_f32(v45, v49)));
      float32x4_t v56 = vcvtq_f32_s32(vcvtq_s32_f32(v53));
      float32x4_t v57 = vcvtq_f32_s32(vcvtq_s32_f32(v54));
      float32x4_t v58 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
      float32x4_t v59 = vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v56, v53)));
      float32x4_t v60 = vsubq_f32(v57, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v57, v54)));
      float32x4_t v61 = vsubq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v58, v55)));
      float32x4_t v62 = *((float32x4_t *)a2 + 11);
      float32x4_t v63 = *((float32x4_t *)a2 + 12);
      float32x4_t v64 = vmulq_f32(vrecpeq_f32(vsubq_f32(v62, vsubq_f32(v53, v59))), v63);
      float32x4_t v65 = vmulq_f32(vrecpeq_f32(vsubq_f32(v62, vsubq_f32(v54, v60))), v63);
      float32x4_t v66 = vmulq_f32(vrecpeq_f32(vsubq_f32(v62, vsubq_f32(v55, v61))), v63);
      float32x4_t v67 = vaddq_f32(vaddq_f32(v50, v61), vmulq_f32(v66, v66));
      float32x4_t v68 = vmaxq_f32(vaddq_f32(vaddq_f32(v50, v59), vmulq_f32(v64, v64)), v29);
      float32x4_t v69 = vmaxq_f32(vaddq_f32(vaddq_f32(v50, v60), vmulq_f32(v65, v65)), v29);
      float32x4_t v70 = *((float32x4_t *)a2 + 13);
      float32x4_t v71 = *((float32x4_t *)a2 + 14);
      float32x4_t v72 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v68, v70), v71));
      float32x4_t v73 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v69, v70), v71));
      float32x4_t v74 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(v67, v29), v70), v71));
      float32x4_t v75 = *((float32x4_t *)a2 + 78);
      float32x4_t v76 = *((float32x4_t *)a2 + 79);
      int8x16_t v77 = (int8x16_t)vaddq_f32(v75, vmulq_f32(v76, v72));
      float32x4_t v78 = vmulq_f32(v76, v73);
      float32x4_t v79 = vmulq_f32(v76, v74);
      float32x4_t v80 = *((float32x4_t *)a2 + 80);
      float32x4_t v81 = *((float32x4_t *)a2 + 81);
      float32x4_t v82 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v26, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v81)), (int8x16_t)vmulq_f32(v32, v80), v77));
      float32x4_t v83 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v27, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v33, v81)), (int8x16_t)vmulq_f32(v33, v80), (int8x16_t)vaddq_f32(v75, v78)));
      float32x4_t v84 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v28, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v34, v81)), (int8x16_t)vmulq_f32(v34, v80), (int8x16_t)vaddq_f32(v75, v79)));
      float32x4_t v85 = (int8x16_t *)(v6 + v10);
      *float32x4_t v85 = vbslq_s8(v16, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v82, v82, 3));
      v85[1] = vbslq_s8(v16, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v83, v83, 3));
      v85[2] = vbslq_s8(v16, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v84, v84, 3));
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v86) = -v11;
    if ((int)v86 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v86 = v86;
    do
    {
      int8x16_t v87 = *((int8x16_t *)a2 + 15);
      float32x4_t v88 = vmulq_f32(*(float32x4_t *)(v7 + 16 * v86), (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v7 + 16 * v86), 3), *((float32x4_t *)a2 + 16))), *((float32x4_t *)a2 + 18))), *((int8x16_t *)a2 + 3)));
      float32x4_t v89 = *((float32x4_t *)a2 + 75);
      float32x4_t v90 = *((float32x4_t *)a2 + 5);
      float32x4_t v91 = vminq_f32(vmaxq_f32(v88, v89), v90);
      float32x4_t v92 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)v91));
      float32x4_t v93 = vcvtq_f32_s32(vcvtq_s32_f32(v92));
      float32x4_t v94 = vmulq_f32(*((float32x4_t *)a2 + 77), vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v93), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v92, v93))), *((float32x4_t *)a2 + 9))));
      float32x4_t v95 = vcvtq_f32_s32(vcvtq_s32_f32(v94));
      float32x4_t v96 = vsubq_f32(v95, (float32x4_t)vandq_s8((int8x16_t)v90, (int8x16_t)vcgtq_f32(v95, v94)));
      float32x4_t v97 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v94, v96))), *((float32x4_t *)a2 + 12));
      float32x4_t v98 = (float32x4_t)vbslq_s8(v87, (int8x16_t)v88, vbslq_s8((int8x16_t)vcgtq_f32(v89, vsubq_f32(v91, *((float32x4_t *)a2 + 81))), (int8x16_t)vmulq_f32(v91, *((float32x4_t *)a2 + 80)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 78), vmulq_f32(*((float32x4_t *)a2 + 79), (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v96), vmulq_f32(v97, v97)), v89), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14)))))));
      *(int8x16_t *)(v6 + 16 * v86++) = vbslq_s8(v87, (int8x16_t)v88, (int8x16_t)vmulq_laneq_f32(v98, v98, 3));
    }
    while (v86 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec709_nice_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v105 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      int8x16_t v24 = vandq_s8(v23, v22);
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v26));
      float32x4_t v28 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = vminq_f32(vmaxq_f32(v27, v29), v30);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v28, v29), v30);
      float32x4_t v33 = *((float32x4_t *)a2 + 77);
      int8x16_t v34 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vceqq_f32(v33, v29)), v29);
      float32x4_t v35 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v30, (int8x16_t)v31);
      float32x4_t v36 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v30, (int8x16_t)v32);
      int8x16_t v37 = *((int8x16_t *)a2 + 19);
      float32x4_t v38 = *((float32x4_t *)a2 + 20);
      float32x4_t v39 = (float32x4_t)vorrq_s8(vandq_s8(v37, (int8x16_t)v35), (int8x16_t)v30);
      float32x4_t v40 = (float32x4_t)vorrq_s8(vandq_s8(v37, (int8x16_t)v36), (int8x16_t)v30);
      int8x16_t v41 = *((int8x16_t *)a2 + 21);
      float32x4_t v42 = *((float32x4_t *)a2 + 22);
      float32x4_t v43 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x17uLL)), (float32x4_t)vandq_s8(v41, (int8x16_t)vcgtq_f32(v38, v36)));
      float32x4_t v44 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v35, 0x17uLL)), (float32x4_t)vandq_s8(v41, (int8x16_t)vcgtq_f32(v38, v35))), v42);
      float32x4_t v45 = *((float32x4_t *)a2 + 23);
      float32x4_t v46 = *((float32x4_t *)a2 + 24);
      float32x4_t v47 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v39, v45));
      float32x4_t v48 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v40, v45));
      float32x4_t v49 = vaddq_f32(v44, v47);
      float32x4_t v50 = vaddq_f32(vsubq_f32(v43, v42), v48);
      float32x4_t v51 = vsubq_f32(vsubq_f32(v39, v30), vmulq_f32(vmulq_f32(v46, v47), v39));
      float32x4_t v52 = vsubq_f32(vsubq_f32(v40, v30), vmulq_f32(vmulq_f32(v46, v48), v40));
      float32x4_t v53 = vmulq_f32(v51, v51);
      float32x4_t v54 = *((float32x4_t *)a2 + 37);
      float32x4_t v55 = *((float32x4_t *)a2 + 38);
      float32x4_t v56 = vaddq_f32(v54, vmulq_f32(v55, v51));
      float32x4_t v57 = vaddq_f32(v54, vmulq_f32(v55, v52));
      float32x4_t v58 = *((float32x4_t *)a2 + 39);
      float32x4_t v59 = *((float32x4_t *)a2 + 40);
      float32x4_t v60 = vaddq_f32(v58, vmulq_f32(v59, v51));
      float32x4_t v61 = vaddq_f32(v58, vmulq_f32(v59, v52));
      float32x4_t v62 = *((float32x4_t *)a2 + 41);
      float32x4_t v63 = *((float32x4_t *)a2 + 42);
      float32x4_t v64 = vaddq_f32(v62, vmulq_f32(v63, v51));
      float32x4_t v65 = vaddq_f32(v62, vmulq_f32(v63, v52));
      float32x4_t v66 = vmulq_f32(v52, v52);
      float32x4_t v67 = vaddq_f32(v65, vmulq_f32(v66, vaddq_f32(v57, vmulq_f32(v66, v61))));
      float32x4_t v68 = vmulq_f32(v51, vaddq_f32(v64, vmulq_f32(v53, vaddq_f32(v56, vmulq_f32(v53, v60)))));
      float32x4_t v69 = *((float32x4_t *)a2 + 43);
      float32x4_t v70 = *((float32x4_t *)a2 + 44);
      float32x4_t v71 = vaddq_f32(v50, vmulq_f32(v52, vaddq_f32(v69, vmulq_f32(v52, v67))));
      float32x4_t v72 = vmulq_f32(v33, vaddq_f32(v49, vmulq_f32(v51, vaddq_f32(v69, v68))));
      float32x4_t v73 = *((float32x4_t *)a2 + 29);
      float32x4_t v74 = vmulq_f32(v33, v71);
      float32x4_t v75 = vmaxq_f32(v72, v73);
      float32x4_t v76 = vmaxq_f32(v74, v73);
      float32x4_t v77 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
      float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v76));
      float32x4_t v79 = vsubq_f32(v77, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v77, v75)));
      float32x4_t v80 = vsubq_f32(v78, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v78, v76)));
      float32x4_t v81 = vsubq_f32(v75, v79);
      float32x4_t v82 = vsubq_f32(v76, v80);
      float32x4_t v83 = *((float32x4_t *)a2 + 45);
      float32x4_t v84 = *((float32x4_t *)a2 + 46);
      float32x4_t v85 = *((float32x4_t *)a2 + 47);
      float32x4_t v86 = *((float32x4_t *)a2 + 48);
      float32x4_t v87 = vaddq_f32(v30, vmulq_f32(v81, vaddq_f32(v86, vmulq_f32(v81, vaddq_f32(vaddq_f32(v84, vmulq_f32(v81, v85)), vmulq_f32(vmulq_f32(v81, v81), vaddq_f32(v70, vmulq_f32(v83, v81))))))));
      float32x4_t v88 = vaddq_f32(v30, vmulq_f32(v82, vaddq_f32(v86, vmulq_f32(v82, vaddq_f32(vaddq_f32(v84, vmulq_f32(v85, v82)), vmulq_f32(vmulq_f32(v82, v82), vaddq_f32(v70, vmulq_f32(v83, v82))))))));
      int32x4_t v89 = *((int32x4_t *)a2 + 33);
      float32x4_t v90 = vmulq_f32(v87, (float32x4_t)vshlq_n_s32(vaddq_s32(v89, vcvtq_s32_f32(v79)), 0x17uLL));
      float32x4_t v91 = vmulq_f32(v88, (float32x4_t)vshlq_n_s32(vaddq_s32(v89, vcvtq_s32_f32(v80)), 0x17uLL));
      float32x4_t v92 = *((float32x4_t *)a2 + 78);
      float32x4_t v93 = *((float32x4_t *)a2 + 79);
      float32x4_t v94 = vmulq_f32(v93, v91);
      int8x16_t v95 = (int8x16_t)vaddq_f32(v92, vmulq_f32(v93, v90));
      float32x4_t v96 = *((float32x4_t *)a2 + 80);
      int8x16_t v97 = (int8x16_t)vmulq_f32(v31, v96);
      int8x16_t v98 = (int8x16_t)vmulq_f32(v32, v96);
      float32x4_t v99 = *((float32x4_t *)a2 + 81);
      int8x16_t v100 = (int8x16_t)vcgtq_f32(v29, vsubq_f32(v31, v99));
      int8x16_t v101 = (int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v99));
      float32x4_t v102 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, vbslq_s8(v100, v97, v95));
      float32x4_t v103 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v28, vbslq_s8(v101, v98, (int8x16_t)vaddq_f32(v92, v94)));
      float32x4_t v104 = (int8x16_t *)(v6 + v11);
      v104[-1] = vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v102, v102, 3));
      *float32x4_t v104 = vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v103, v103, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v105 = -v10;
    if (v105 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v106 = 16 * v105;
    float32x4_t v107 = *(float32x4_t *)(v7 + v106);
    int8x16_t v108 = *((int8x16_t *)a2 + 15);
    float32x4_t v109 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v110 = vrecpeq_f32(v109);
    float32x4_t v111 = vmulq_f32(v110, vrecpsq_f32(v110, v109));
    float32x4_t v112 = vmulq_f32(v107, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v111, vrecpsq_f32(v111, v109))), *((int8x16_t *)a2 + 3)));
    float32x4_t v113 = *((float32x4_t *)a2 + 75);
    float32x4_t v114 = *((float32x4_t *)a2 + 5);
    float32x4_t v115 = vminq_f32(vmaxq_f32(v112, v113), v114);
    float32x4_t v116 = *((float32x4_t *)a2 + 77);
    float32x4_t v117 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vceqq_f32(v116, v113)), v113), (int8x16_t)v114, (int8x16_t)v115);
    float32x4_t v118 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v117), (int8x16_t)v114);
    float32x4_t v119 = (float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vcgtq_f32(v118, *((float32x4_t *)a2 + 23)));
    float32x4_t v120 = vsubq_f32(vsubq_f32(v118, v114), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v119), v118));
    float32x4_t v121 = vmulq_f32(v120, v120);
    float32x4_t v122 = vmaxq_f32(vmulq_f32(v116, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v117, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v117))), *((float32x4_t *)a2 + 22)), v119), vmulq_f32(v120, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v120, vaddq_f32(
                         vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v120)),
                         vmulq_f32(v121, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v120)), vmulq_f32(v121, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v120))))))))))), *((float32x4_t *)a2 + 29));
    float32x4_t v123 = vcvtq_f32_s32(vcvtq_s32_f32(v122));
    float32x4_t v124 = vsubq_f32(v123, (float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vcgtq_f32(v123, v122)));
    float32x4_t v125 = vsubq_f32(v122, v124);
    float32x4_t v126 = (float32x4_t)vbslq_s8(v108, (int8x16_t)v112, vbslq_s8((int8x16_t)vcgtq_f32(v113, vsubq_f32(v115, *((float32x4_t *)a2 + 81))), (int8x16_t)vmulq_f32(v115, *((float32x4_t *)a2 + 80)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 78), vmulq_f32(*((float32x4_t *)a2 + 79), vmulq_f32(vaddq_f32(v114, vmulq_f32(v125, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v125, vaddq_f32(
                                                       vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v125)), vmulq_f32(vmulq_f32(v125, v125), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v125)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v124)), 0x17uLL))))));
    *(int8x16_t *)(v6 + v106) = vbslq_s8(v108, (int8x16_t)v112, (int8x16_t)vmulq_laneq_f32(v126, v126, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec709_half_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v79 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 75);
      float32x4_t v27 = *((float32x4_t *)a2 + 5);
      float32x4_t v28 = vminq_f32(vmaxq_f32(v24, v26), v27);
      float32x4_t v29 = vminq_f32(vmaxq_f32(v25, v26), v27);
      int8x16_t v30 = *((int8x16_t *)a2 + 19);
      float32x4_t v31 = *((float32x4_t *)a2 + 20);
      float32x4_t v32 = (float32x4_t)vorrq_s8(vandq_s8(v30, (int8x16_t)v28), (int8x16_t)v27);
      int8x16_t v33 = *((int8x16_t *)a2 + 21);
      float32x4_t v34 = *((float32x4_t *)a2 + 22);
      float32x4_t v35 = (float32x4_t)vorrq_s8(vandq_s8(v30, (int8x16_t)v29), (int8x16_t)v27);
      float32x4_t v36 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v28, 0x17uLL)), (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v31, v28))), v34);
      float32x4_t v37 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v29, 0x17uLL)), (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v31, v29))), v34);
      float32x4_t v38 = *((float32x4_t *)a2 + 23);
      float32x4_t v39 = *((float32x4_t *)a2 + 24);
      float32x4_t v40 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v32, v38));
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v35, v38));
      float32x4_t v42 = vaddq_f32(v37, v41);
      float32x4_t v43 = vsubq_f32(vsubq_f32(v32, v27), vmulq_f32(vmulq_f32(v39, v40), v32));
      float32x4_t v44 = vsubq_f32(vsubq_f32(v35, v27), vmulq_f32(vmulq_f32(v39, v41), v35));
      float32x4_t v45 = *((float32x4_t *)a2 + 25);
      float32x4_t v46 = *((float32x4_t *)a2 + 26);
      float32x4_t v47 = *((float32x4_t *)a2 + 27);
      float32x4_t v48 = *((float32x4_t *)a2 + 28);
      float32x4_t v49 = vaddq_f32(v42, vmulq_f32(v44, vaddq_f32(vaddq_f32(v47, vmulq_f32(v44, v48)), vmulq_f32(vmulq_f32(v44, v44), vaddq_f32(v45, vmulq_f32(v46, v44))))));
      float32x4_t v50 = *((float32x4_t *)a2 + 77);
      float32x4_t v51 = vmulq_f32(v50, vaddq_f32(vaddq_f32(v36, v40), vmulq_f32(v43, vaddq_f32(vaddq_f32(v47, vmulq_f32(v43, v48)), vmulq_f32(vmulq_f32(v43, v43), vaddq_f32(v45, vmulq_f32(v46, v43)))))));
      float32x4_t v52 = vmulq_f32(v50, v49);
      float32x4_t v53 = *((float32x4_t *)a2 + 29);
      float32x4_t v54 = *((float32x4_t *)a2 + 30);
      float32x4_t v55 = vmaxq_f32(v51, v53);
      float32x4_t v56 = vmaxq_f32(v52, v53);
      float32x4_t v57 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
      float32x4_t v58 = vcvtq_f32_s32(vcvtq_s32_f32(v56));
      float32x4_t v59 = vsubq_f32(v57, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v57, v55)));
      float32x4_t v60 = vsubq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v58, v56)));
      float32x4_t v61 = vsubq_f32(v55, v59);
      float32x4_t v62 = vsubq_f32(v56, v60);
      float32x4_t v63 = *((float32x4_t *)a2 + 31);
      float32x4_t v64 = *((float32x4_t *)a2 + 32);
      float32x4_t v65 = vaddq_f32(v27, vmulq_f32(v61, vaddq_f32(v64, vmulq_f32(v61, vaddq_f32(v54, vmulq_f32(v63, v61))))));
      float32x4_t v66 = vaddq_f32(v27, vmulq_f32(v62, vaddq_f32(v64, vmulq_f32(v62, vaddq_f32(v54, vmulq_f32(v63, v62))))));
      int32x4_t v67 = *((int32x4_t *)a2 + 33);
      float32x4_t v68 = vmulq_f32(v65, (float32x4_t)vshlq_n_s32(vaddq_s32(v67, vcvtq_s32_f32(v59)), 0x17uLL));
      float32x4_t v69 = vmulq_f32(v66, (float32x4_t)vshlq_n_s32(vaddq_s32(v67, vcvtq_s32_f32(v60)), 0x17uLL));
      float32x4_t v70 = *((float32x4_t *)a2 + 78);
      float32x4_t v71 = *((float32x4_t *)a2 + 79);
      float32x4_t v72 = vmulq_f32(v71, v69);
      int8x16_t v73 = (int8x16_t)vaddq_f32(v70, vmulq_f32(v71, v68));
      float32x4_t v74 = *((float32x4_t *)a2 + 80);
      float32x4_t v75 = *((float32x4_t *)a2 + 81);
      float32x4_t v76 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v24, vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v28, v75)), (int8x16_t)vmulq_f32(v28, v74), v73));
      float32x4_t v77 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v25, vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v29, v75)), (int8x16_t)vmulq_f32(v29, v74), (int8x16_t)vaddq_f32(v70, v72)));
      float32x4_t v78 = (int8x16_t *)(v6 + v11);
      v78[-1] = vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v76, v76, 3));
      int8x16_t *v78 = vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v77, v77, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v79 = -v10;
    if (v79 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v80 = 16 * v79;
    float32x4_t v81 = *(float32x4_t *)(v7 + v80);
    int8x16_t v82 = *((int8x16_t *)a2 + 15);
    float32x4_t v83 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v84 = vmulq_f32(vrecpeq_f32(v83), *((float32x4_t *)a2 + 18));
    float32x4_t v85 = vmulq_f32(v81, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v84, vrecpsq_f32(v84, v83))), *((int8x16_t *)a2 + 3)));
    float32x4_t v86 = *((float32x4_t *)a2 + 75);
    float32x4_t v87 = *((float32x4_t *)a2 + 5);
    float32x4_t v88 = vminq_f32(vmaxq_f32(v85, v86), v87);
    float32x4_t v89 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v88), (int8x16_t)v87);
    float32x4_t v90 = (float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vcgtq_f32(v89, *((float32x4_t *)a2 + 23)));
    float32x4_t v91 = vsubq_f32(vsubq_f32(v89, v87), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v90), v89));
    float32x4_t v92 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 77), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v88, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v88))), *((float32x4_t *)a2 + 22)), v90), vmulq_f32(v91, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v91, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v91, v91), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v91))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v93 = vcvtq_f32_s32(vcvtq_s32_f32(v92));
    float32x4_t v94 = vsubq_f32(v93, (float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vcgtq_f32(v93, v92)));
    float32x4_t v95 = vsubq_f32(v92, v94);
    float32x4_t v96 = (float32x4_t)vbslq_s8(v82, (int8x16_t)v85, vbslq_s8((int8x16_t)vcgtq_f32(v86, vsubq_f32(v88, *((float32x4_t *)a2 + 81))), (int8x16_t)vmulq_f32(v88, *((float32x4_t *)a2 + 80)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 78), vmulq_f32(*((float32x4_t *)a2 + 79), vmulq_f32(vaddq_f32(v87, vmulq_f32(v95, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v95, vaddq_f32(
                                                      *((float32x4_t *)a2 + 30),
                                                      vmulq_f32(*((float32x4_t *)a2 + 31), v95)))))),
                                            (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v94)), 0x17uLL))))));
    *(int8x16_t *)(v6 + v80) = vbslq_s8(v82, (int8x16_t)v85, (int8x16_t)vmulq_laneq_f32(v96, v96, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec709_halfTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v96 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v14 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 82);
      float32x4_t v27 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v24, (int8x16_t)vmaxq_f32(v24, v26));
      float32x4_t v28 = *((float32x4_t *)a2 + 75);
      float32x4_t v29 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmaxq_f32(v25, v26));
      int8x16_t v30 = (int8x16_t)vcgtq_f32(v28, v27);
      int8x16_t v31 = (int8x16_t)vcgtq_f32(v28, v29);
      int8x16_t v32 = *((int8x16_t *)a2 + 83);
      float32x4_t v33 = *((float32x4_t *)a2 + 5);
      float32x4_t v34 = (float32x4_t)vbslq_s8(v31, v32, (int8x16_t)v33);
      float32x4_t v35 = vmulq_f32(v27, (float32x4_t)vbslq_s8(v30, v32, (int8x16_t)v33));
      float32x4_t v36 = vmulq_f32(v29, v34);
      float32x4_t v37 = *((float32x4_t *)a2 + 84);
      float32x4_t v38 = vminq_f32(v35, v37);
      int8x16_t v39 = *((int8x16_t *)a2 + 19);
      float32x4_t v40 = *((float32x4_t *)a2 + 20);
      float32x4_t v41 = vminq_f32(v36, v37);
      float32x4_t v42 = (float32x4_t)vorrq_s8(vandq_s8(v39, (int8x16_t)v38), (int8x16_t)v33);
      float32x4_t v43 = (float32x4_t)vorrq_s8(vandq_s8(v39, (int8x16_t)v41), (int8x16_t)v33);
      int8x16_t v44 = *((int8x16_t *)a2 + 21);
      float32x4_t v45 = *((float32x4_t *)a2 + 22);
      float32x4_t v46 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v41, 0x17uLL)), (float32x4_t)vandq_s8(v44, (int8x16_t)vcgtq_f32(v40, v41)));
      float32x4_t v47 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v38, 0x17uLL)), (float32x4_t)vandq_s8(v44, (int8x16_t)vcgtq_f32(v40, v38))), v45);
      float32x4_t v48 = *((float32x4_t *)a2 + 23);
      float32x4_t v49 = *((float32x4_t *)a2 + 24);
      float32x4_t v50 = (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v42, v48));
      float32x4_t v51 = (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v43, v48));
      float32x4_t v52 = vaddq_f32(v47, v50);
      float32x4_t v53 = vaddq_f32(vsubq_f32(v46, v45), v51);
      float32x4_t v54 = vsubq_f32(vsubq_f32(v42, v33), vmulq_f32(vmulq_f32(v49, v50), v42));
      float32x4_t v55 = vsubq_f32(vsubq_f32(v43, v33), vmulq_f32(vmulq_f32(v49, v51), v43));
      float32x4_t v56 = *((float32x4_t *)a2 + 25);
      float32x4_t v57 = *((float32x4_t *)a2 + 26);
      float32x4_t v58 = vaddq_f32(v56, vmulq_f32(v57, v54));
      float32x4_t v59 = vaddq_f32(v56, vmulq_f32(v57, v55));
      float32x4_t v60 = *((float32x4_t *)a2 + 27);
      float32x4_t v61 = *((float32x4_t *)a2 + 28);
      float32x4_t v62 = vaddq_f32(v53, vmulq_f32(v55, vaddq_f32(vaddq_f32(v60, vmulq_f32(v55, v61)), vmulq_f32(vmulq_f32(v55, v55), v59))));
      float32x4_t v63 = *((float32x4_t *)a2 + 77);
      float32x4_t v64 = vmulq_f32(v63, vaddq_f32(v52, vmulq_f32(v54, vaddq_f32(vaddq_f32(v60, vmulq_f32(v54, v61)), vmulq_f32(vmulq_f32(v54, v54), v58)))));
      float32x4_t v65 = vmulq_f32(v63, v62);
      float32x4_t v66 = *((float32x4_t *)a2 + 29);
      float32x4_t v67 = *((float32x4_t *)a2 + 30);
      float32x4_t v68 = vmaxq_f32(v64, v66);
      float32x4_t v69 = vmaxq_f32(v65, v66);
      float32x4_t v70 = vcvtq_f32_s32(vcvtq_s32_f32(v68));
      float32x4_t v71 = vcvtq_f32_s32(vcvtq_s32_f32(v69));
      float32x4_t v72 = vsubq_f32(v70, (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v70, v68)));
      float32x4_t v73 = vsubq_f32(v71, (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v71, v69)));
      float32x4_t v74 = vsubq_f32(v68, v72);
      float32x4_t v75 = vsubq_f32(v69, v73);
      float32x4_t v76 = *((float32x4_t *)a2 + 31);
      float32x4_t v77 = *((float32x4_t *)a2 + 32);
      float32x4_t v78 = vaddq_f32(v33, vmulq_f32(v74, vaddq_f32(v77, vmulq_f32(v74, vaddq_f32(v67, vmulq_f32(v76, v74))))));
      float32x4_t v79 = vaddq_f32(v33, vmulq_f32(v75, vaddq_f32(v77, vmulq_f32(v75, vaddq_f32(v67, vmulq_f32(v76, v75))))));
      int32x4_t v80 = vcvtq_s32_f32(v73);
      int32x4_t v81 = *((int32x4_t *)a2 + 33);
      float32x4_t v82 = vmulq_f32(v78, (float32x4_t)vshlq_n_s32(vaddq_s32(v81, vcvtq_s32_f32(v72)), 0x17uLL));
      float32x4_t v83 = vmulq_f32(v79, (float32x4_t)vshlq_n_s32(vaddq_s32(v81, v80), 0x17uLL));
      float32x4_t v84 = *((float32x4_t *)a2 + 78);
      float32x4_t v85 = *((float32x4_t *)a2 + 79);
      int8x16_t v86 = (int8x16_t)vaddq_f32(v84, vmulq_f32(v85, v82));
      float32x4_t v87 = vmulq_f32(v85, v83);
      float32x4_t v88 = *((float32x4_t *)a2 + 80);
      int8x16_t v89 = (int8x16_t)vaddq_f32(v84, v87);
      float32x4_t v90 = *((float32x4_t *)a2 + 81);
      float32x4_t v91 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v26, (int8x16_t)v33);
      float32x4_t v92 = (float32x4_t)vbslq_s8(v31, (int8x16_t)v26, (int8x16_t)v33);
      float32x4_t v93 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v24, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v28, vsubq_f32(v35, v90)), (int8x16_t)vmulq_f32(v35, v88), v86), v91));
      float32x4_t v94 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v28, vsubq_f32(v36, v90)), (int8x16_t)vmulq_f32(v36, v88), v89), v92));
      float32x4_t v95 = (int8x16_t *)(v6 + v11);
      v95[-1] = vbslq_s8(v14, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v93, v93, 3));
      *float32x4_t v95 = vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v94, v94, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v96 = -v10;
    if (v96 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v97 = 16 * v96;
    float32x4_t v98 = *(float32x4_t *)(v7 + v97);
    int8x16_t v99 = *((int8x16_t *)a2 + 15);
    float32x4_t v100 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v101 = vmulq_f32(vrecpeq_f32(v100), *((float32x4_t *)a2 + 18));
    float32x4_t v102 = vmulq_f32(v98, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v101, vrecpsq_f32(v101, v100))), *((int8x16_t *)a2 + 3)));
    float32x4_t v103 = *((float32x4_t *)a2 + 82);
    float32x4_t v104 = (float32x4_t)vbslq_s8(v99, (int8x16_t)v102, (int8x16_t)vmaxq_f32(v102, v103));
    float32x4_t v105 = *((float32x4_t *)a2 + 75);
    int8x16_t v106 = (int8x16_t)vcgtq_f32(v105, v104);
    float32x4_t v107 = *((float32x4_t *)a2 + 5);
    float32x4_t v108 = vmulq_f32(v104, (float32x4_t)vbslq_s8(v106, *((int8x16_t *)a2 + 83), (int8x16_t)v107));
    float32x4_t v109 = vminq_f32(v108, *((float32x4_t *)a2 + 84));
    float32x4_t v110 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v109), (int8x16_t)v107);
    float32x4_t v111 = (float32x4_t)vandq_s8((int8x16_t)v107, (int8x16_t)vcgtq_f32(v110, *((float32x4_t *)a2 + 23)));
    float32x4_t v112 = vsubq_f32(vsubq_f32(v110, v107), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v111), v110));
    float32x4_t v113 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 77), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v109, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v109))), *((float32x4_t *)a2 + 22)), v111), vmulq_f32(v112, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v112, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v112, v112), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v112))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v114 = vcvtq_f32_s32(vcvtq_s32_f32(v113));
    float32x4_t v115 = vsubq_f32(v114, (float32x4_t)vandq_s8((int8x16_t)v107, (int8x16_t)vcgtq_f32(v114, v113)));
    float32x4_t v116 = vsubq_f32(v113, v115);
    float32x4_t v117 = (float32x4_t)vbslq_s8(v99, (int8x16_t)v102, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v105, vsubq_f32(v108, *((float32x4_t *)a2 + 81))), (int8x16_t)vmulq_f32(v108, *((float32x4_t *)a2 + 80)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 78), vmulq_f32(*((float32x4_t *)a2 + 79), vmulq_f32(vaddq_f32(v107, vmulq_f32(v116, vaddq_f32(*((float32x4_t *)a2 + 32),
                                                                             vmulq_f32(v116, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v116)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v115)), 0x17uLL))))), (float32x4_t)vbslq_s8(v106, (int8x16_t)v103, (int8x16_t)v107)));
    *(int8x16_t *)(v6 + v97) = vbslq_s8(v99, (int8x16_t)v102, (int8x16_t)vmulq_laneq_f32(v117, v117, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec709_niceTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v110 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v14 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17));
      int8x16_t v24 = *((int8x16_t *)a2 + 17);
      int8x16_t v25 = *((int8x16_t *)a2 + 3);
      float32x4_t v26 = vmulq_f32(v12, (float32x4_t)vorrq_s8(vandq_s8(v24, v22), v25));
      float32x4_t v27 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v24, v23), v25));
      float32x4_t v28 = *((float32x4_t *)a2 + 82);
      float32x4_t v29 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v26, (int8x16_t)vmaxq_f32(v26, v28));
      float32x4_t v30 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmaxq_f32(v27, v28));
      float32x4_t v31 = *((float32x4_t *)a2 + 75);
      int8x16_t v32 = (int8x16_t)vcgtq_f32(v31, v29);
      int8x16_t v33 = (int8x16_t)vcgtq_f32(v31, v30);
      int8x16_t v34 = *((int8x16_t *)a2 + 83);
      float32x4_t v35 = *((float32x4_t *)a2 + 5);
      float32x4_t v36 = (float32x4_t)vbslq_s8(v33, v34, (int8x16_t)v35);
      float32x4_t v37 = vmulq_f32(v29, (float32x4_t)vbslq_s8(v32, v34, (int8x16_t)v35));
      float32x4_t v38 = vmulq_f32(v30, v36);
      float32x4_t v39 = *((float32x4_t *)a2 + 84);
      float32x4_t v40 = *((float32x4_t *)a2 + 77);
      int8x16_t v41 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vceqq_f32(v40, v31)), v31);
      float32x4_t v42 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v35, (int8x16_t)vminq_f32(v37, v39));
      float32x4_t v43 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v35, (int8x16_t)vminq_f32(v38, v39));
      int8x16_t v44 = *((int8x16_t *)a2 + 19);
      float32x4_t v45 = *((float32x4_t *)a2 + 20);
      float32x4_t v46 = (float32x4_t)vorrq_s8(vandq_s8(v44, (int8x16_t)v42), (int8x16_t)v35);
      int8x16_t v47 = *((int8x16_t *)a2 + 21);
      float32x4_t v48 = *((float32x4_t *)a2 + 22);
      float32x4_t v49 = (float32x4_t)vorrq_s8(vandq_s8(v44, (int8x16_t)v43), (int8x16_t)v35);
      float32x4_t v50 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v43, 0x17uLL)), (float32x4_t)vandq_s8(v47, (int8x16_t)vcgtq_f32(v45, v43)));
      float32x4_t v51 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v42, 0x17uLL)), (float32x4_t)vandq_s8(v47, (int8x16_t)vcgtq_f32(v45, v42))), v48);
      float32x4_t v52 = *((float32x4_t *)a2 + 23);
      float32x4_t v53 = *((float32x4_t *)a2 + 24);
      float32x4_t v54 = (float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vcgtq_f32(v46, v52));
      float32x4_t v55 = (float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vcgtq_f32(v49, v52));
      float32x4_t v56 = vaddq_f32(v51, v54);
      float32x4_t v57 = vmulq_f32(v53, v54);
      float32x4_t v58 = vmulq_f32(vmulq_f32(v53, v55), v49);
      float32x4_t v59 = vaddq_f32(vsubq_f32(v50, v48), v55);
      float32x4_t v60 = vsubq_f32(vsubq_f32(v46, v35), vmulq_f32(v57, v46));
      float32x4_t v61 = vsubq_f32(vsubq_f32(v49, v35), v58);
      float32x4_t v62 = vmulq_f32(v60, v60);
      float32x4_t v63 = *((float32x4_t *)a2 + 37);
      float32x4_t v64 = *((float32x4_t *)a2 + 38);
      float32x4_t v65 = vmulq_f32(v61, v61);
      float32x4_t v66 = *((float32x4_t *)a2 + 39);
      float32x4_t v67 = *((float32x4_t *)a2 + 40);
      float32x4_t v68 = vaddq_f32(v63, vmulq_f32(v64, v60));
      float32x4_t v69 = vaddq_f32(v66, vmulq_f32(v67, v60));
      float32x4_t v70 = vaddq_f32(v66, vmulq_f32(v67, v61));
      float32x4_t v71 = vaddq_f32(v63, vmulq_f32(v64, v61));
      float32x4_t v73 = *((float32x4_t *)a2 + 41);
      float32x4_t v72 = *((float32x4_t *)a2 + 42);
      float32x4_t v74 = vmulq_f32(v60, vaddq_f32(vaddq_f32(v73, vmulq_f32(v72, v60)), vmulq_f32(v62, vaddq_f32(v68, vmulq_f32(v62, v69)))));
      float32x4_t v75 = vmulq_f32(v61, vaddq_f32(vaddq_f32(v73, vmulq_f32(v72, v61)), vmulq_f32(v65, vaddq_f32(v71, vmulq_f32(v65, v70)))));
      float32x4_t v76 = *((float32x4_t *)a2 + 43);
      float32x4_t v77 = *((float32x4_t *)a2 + 44);
      float32x4_t v78 = vmulq_f32(v40, vaddq_f32(v56, vmulq_f32(v60, vaddq_f32(v76, v74))));
      float32x4_t v79 = vmulq_f32(v40, vaddq_f32(v59, vmulq_f32(v61, vaddq_f32(v76, v75))));
      float32x4_t v80 = *((float32x4_t *)a2 + 29);
      float32x4_t v81 = vmaxq_f32(v78, v80);
      float32x4_t v82 = vmaxq_f32(v79, v80);
      float32x4_t v83 = vcvtq_f32_s32(vcvtq_s32_f32(v81));
      float32x4_t v84 = vcvtq_f32_s32(vcvtq_s32_f32(v82));
      float32x4_t v85 = vsubq_f32(v83, (float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vcgtq_f32(v83, v81)));
      float32x4_t v86 = vsubq_f32(v84, (float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vcgtq_f32(v84, v82)));
      float32x4_t v87 = vsubq_f32(v81, v85);
      float32x4_t v88 = vsubq_f32(v82, v86);
      float32x4_t v89 = *((float32x4_t *)a2 + 45);
      float32x4_t v90 = *((float32x4_t *)a2 + 46);
      float32x4_t v91 = vaddq_f32(v77, vmulq_f32(v89, v87));
      float32x4_t v92 = vaddq_f32(v77, vmulq_f32(v89, v88));
      float32x4_t v93 = *((float32x4_t *)a2 + 47);
      float32x4_t v94 = *((float32x4_t *)a2 + 48);
      int32x4_t v95 = *((int32x4_t *)a2 + 33);
      float32x4_t v96 = vmulq_f32(vaddq_f32(v35, vmulq_f32(v87, vaddq_f32(v94, vmulq_f32(v87, vaddq_f32(vaddq_f32(v90, vmulq_f32(v87, v93)), vmulq_f32(vmulq_f32(v87, v87), v91)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v95, vcvtq_s32_f32(v85)), 0x17uLL));
      float32x4_t v97 = vmulq_f32(vaddq_f32(v35, vmulq_f32(v88, vaddq_f32(v94, vmulq_f32(v88, vaddq_f32(vaddq_f32(v90, vmulq_f32(v93, v88)), vmulq_f32(vmulq_f32(v88, v88), v92)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v95, vcvtq_s32_f32(v86)), 0x17uLL));
      float32x4_t v98 = *((float32x4_t *)a2 + 78);
      float32x4_t v99 = *((float32x4_t *)a2 + 79);
      int8x16_t v100 = (int8x16_t)vaddq_f32(v98, vmulq_f32(v99, v96));
      float32x4_t v101 = vmulq_f32(v99, v97);
      float32x4_t v102 = *((float32x4_t *)a2 + 80);
      int8x16_t v103 = (int8x16_t)vaddq_f32(v98, v101);
      float32x4_t v104 = *((float32x4_t *)a2 + 81);
      float32x4_t v105 = (float32x4_t)vbslq_s8(v32, (int8x16_t)v28, (int8x16_t)v35);
      float32x4_t v106 = (float32x4_t)vbslq_s8(v33, (int8x16_t)v28, (int8x16_t)v35);
      float32x4_t v107 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v26, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v31, vsubq_f32(v37, v104)), (int8x16_t)vmulq_f32(v37, v102), v100), v105));
      float32x4_t v108 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v31, vsubq_f32(v38, v104)), (int8x16_t)vmulq_f32(v38, v102), v103), v106));
      float32x4_t v109 = (int8x16_t *)(v6 + v11);
      v109[-1] = vbslq_s8(v14, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v107, v107, 3));
      *float32x4_t v109 = vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v108, v108, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v110 = -v10;
    if (v110 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v111 = 16 * v110;
    float32x4_t v112 = *(float32x4_t *)(v7 + v111);
    int8x16_t v113 = *((int8x16_t *)a2 + 15);
    float32x4_t v114 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v115 = vrecpeq_f32(v114);
    float32x4_t v116 = vmulq_f32(v115, vrecpsq_f32(v115, v114));
    float32x4_t v117 = vmulq_f32(v112, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v116, vrecpsq_f32(v116, v114))), *((int8x16_t *)a2 + 3)));
    float32x4_t v118 = *((float32x4_t *)a2 + 82);
    float32x4_t v119 = (float32x4_t)vbslq_s8(v113, (int8x16_t)v117, (int8x16_t)vmaxq_f32(v117, v118));
    float32x4_t v120 = *((float32x4_t *)a2 + 75);
    int8x16_t v121 = (int8x16_t)vcgtq_f32(v120, v119);
    float32x4_t v122 = *((float32x4_t *)a2 + 5);
    float32x4_t v123 = vmulq_f32(v119, (float32x4_t)vbslq_s8(v121, *((int8x16_t *)a2 + 83), (int8x16_t)v122));
    float32x4_t v124 = *((float32x4_t *)a2 + 77);
    float32x4_t v125 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v122, (int8x16_t)vceqq_f32(v124, v120)), v120), (int8x16_t)v122, (int8x16_t)vminq_f32(v123, *((float32x4_t *)a2 + 84)));
    float32x4_t v126 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v125), (int8x16_t)v122);
    float32x4_t v127 = (float32x4_t)vandq_s8((int8x16_t)v122, (int8x16_t)vcgtq_f32(v126, *((float32x4_t *)a2 + 23)));
    float32x4_t v128 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v125, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v125))), *((float32x4_t *)a2 + 22)), v127);
    float32x4_t v129 = vsubq_f32(vsubq_f32(v126, v122), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v127), v126));
    float32x4_t v130 = vmulq_f32(v129, v129);
    float32x4_t v131 = vmaxq_f32(vmulq_f32(v124, vaddq_f32(v128, vmulq_f32(v129, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v129, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v129)), vmulq_f32(v130, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v129)), vmulq_f32(v130, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v129))))))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v132 = vcvtq_f32_s32(vcvtq_s32_f32(v131));
    float32x4_t v133 = vsubq_f32(v132, (float32x4_t)vandq_s8((int8x16_t)v122, (int8x16_t)vcgtq_f32(v132, v131)));
    float32x4_t v134 = vsubq_f32(v131, v133);
    float32x4_t v135 = (float32x4_t)vbslq_s8(v113, (int8x16_t)v117, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v120, vsubq_f32(v123, *((float32x4_t *)a2 + 81))), (int8x16_t)vmulq_f32(v123, *((float32x4_t *)a2 + 80)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 78), vmulq_f32(*((float32x4_t *)a2 + 79), vmulq_f32(vaddq_f32(v122, vmulq_f32(v134, vaddq_f32(*((float32x4_t *)a2 + 48),
                                                                             vmulq_f32(v134, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v134)), vmulq_f32(vmulq_f32(v134, v134), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v134)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v133)), 0x17uLL))))),
                                       (float32x4_t)vbslq_s8(v121, (int8x16_t)v118, (int8x16_t)v122)));
    *(int8x16_t *)(v6 + v111) = vbslq_s8(v113, (int8x16_t)v117, (int8x16_t)vmulq_laneq_f32(v135, v135, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec709_fast_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v56 = 0;
        uint64_t v57 = 16 * v8;
        uint64_t v58 = 16 * v7;
        uint64_t v59 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v60 = 0;
          do
          {
            int8x16_t v61 = *((int8x16_t *)a2 + 15);
            float32x4_t v62 = vmulq_f32(v5[v60 / 0x10], (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5[v60 / 0x10], 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
            float32x4_t v63 = vminq_f32(vmaxq_f32(v62, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v64 = (float32x4_t)vbslq_s8(v61, (int8x16_t)v62, (int8x16_t)vmulq_f32(v63, v63));
            v6[v60 / 0x10] = vbslq_s8(v61, (int8x16_t)v62, (int8x16_t)vmulq_laneq_f32(v64, v64, 3));
            v60 += 16;
          }
          while (v59 != v60);
          ++v56;
          int v5 = (float32x4_t *)((char *)v5 + v57);
          uint64_t v6 = (int8x16_t *)((char *)v6 + v58);
        }
        while (v56 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      float32x4_t v12 = v5 + 4;
      float32x4_t v13 = v6 + 4;
      do
      {
        unint64_t v14 = 0;
        float32x4_t v15 = v13;
        float32x4_t v16 = v12;
        uint64_t v17 = 2;
        do
        {
          float32x4_t v18 = v5[v17 - 2];
          float32x4_t v19 = v5[v17 - 1];
          float32x4_t v20 = v5[v17];
          float32x4_t v21 = v5[v17 + 1];
          int8x16_t v23 = *((int8x16_t *)a2 + 15);
          float32x4_t v22 = *((float32x4_t *)a2 + 16);
          int8x16_t v24 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3), v22));
          int8x16_t v25 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3), v22));
          int8x16_t v26 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 3), v22));
          int8x16_t v27 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 3), v22));
          int8x16_t v28 = *((int8x16_t *)a2 + 17);
          int8x16_t v29 = vandq_s8(v28, v24);
          int8x16_t v30 = vandq_s8(v28, v25);
          int8x16_t v31 = vandq_s8(v28, v26);
          int8x16_t v32 = vandq_s8(v28, v27);
          int8x16_t v33 = *((int8x16_t *)a2 + 3);
          float32x4_t v34 = vmulq_f32(v18, (float32x4_t)vorrq_s8(v29, v33));
          float32x4_t v35 = vmulq_f32(v19, (float32x4_t)vorrq_s8(v30, v33));
          float32x4_t v36 = vmulq_f32(v20, (float32x4_t)vorrq_s8(v31, v33));
          float32x4_t v37 = vmulq_f32(v21, (float32x4_t)vorrq_s8(v32, v33));
          float32x4_t v38 = *((float32x4_t *)a2 + 75);
          float32x4_t v39 = *((float32x4_t *)a2 + 5);
          float32x4_t v40 = vminq_f32(vmaxq_f32(v34, v38), v39);
          float32x4_t v41 = vminq_f32(vmaxq_f32(v35, v38), v39);
          float32x4_t v42 = vminq_f32(vmaxq_f32(v36, v38), v39);
          float32x4_t v43 = vminq_f32(vmaxq_f32(v37, v38), v39);
          int8x16_t v44 = v16;
          float32x4_t v45 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v34, (int8x16_t)vmulq_f32(v40, v40));
          float32x4_t v46 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v35, (int8x16_t)vmulq_f32(v41, v41));
          float32x4_t v47 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v36, (int8x16_t)vmulq_f32(v42, v42));
          float32x4_t v48 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v37, (int8x16_t)vmulq_f32(v43, v43));
          float32x4_t v49 = v15;
          float32x4_t v50 = &v6[v17];
          v14 += 4;
          v50[-2] = vbslq_s8(v23, (int8x16_t)v34, (int8x16_t)vmulq_laneq_f32(v45, v45, 3));
          v50[-1] = vbslq_s8(v23, (int8x16_t)v35, (int8x16_t)vmulq_laneq_f32(v46, v46, 3));
          *float32x4_t v50 = vbslq_s8(v23, (int8x16_t)v36, (int8x16_t)vmulq_laneq_f32(v47, v47, 3));
          v50[1] = vbslq_s8(v23, (int8x16_t)v37, (int8x16_t)vmulq_laneq_f32(v48, v48, 3));
          v17 += 4;
          v16 += 4;
          float32x4_t v15 = v49 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            float32x4_t v51 = *v44++;
            int8x16_t v52 = *((int8x16_t *)a2 + 15);
            float32x4_t v53 = vmulq_f32(v51, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
            float32x4_t v54 = vminq_f32(vmaxq_f32(v53, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v55 = (float32x4_t)vbslq_s8(v52, (int8x16_t)v53, (int8x16_t)vmulq_f32(v54, v54));
            *v49++ = vbslq_s8(v52, (int8x16_t)v53, (int8x16_t)vmulq_laneq_f32(v55, v55, 3));
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        uint64_t v6 = (int8x16_t *)((char *)v6 + v10);
        int v5 = (float32x4_t *)((char *)v5 + v11);
        float32x4_t v12 = (float32x4_t *)((char *)v12 + v11);
        float32x4_t v13 = (int8x16_t *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

uint64_t Getinv_rec709_fixed_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v84) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v10 + 32);
      int8x16_t v16 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v17 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15));
      float32x4_t v18 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15));
      float32x4_t v19 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v15));
      int8x16_t v21 = *((int8x16_t *)a2 + 17);
      float32x4_t v20 = *((float32x4_t *)a2 + 18);
      int8x16_t v22 = (int8x16_t)vmulq_f32(v19, v20);
      int8x16_t v23 = vandq_s8(v21, (int8x16_t)vmulq_f32(v17, v20));
      int8x16_t v24 = vandq_s8(v21, (int8x16_t)vmulq_f32(v18, v20));
      int8x16_t v25 = *((int8x16_t *)a2 + 3);
      float32x4_t v26 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v23, v25));
      float32x4_t v27 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v24, v25));
      float32x4_t v28 = vmulq_f32(v14, (float32x4_t)vorrq_s8(vandq_s8(v21, v22), v25));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = *((float32x4_t *)a2 + 6);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v26, v29), v30);
      float32x4_t v33 = vminq_f32(vmaxq_f32(v27, v29), v30);
      float32x4_t v34 = vminq_f32(vmaxq_f32(v28, v29), v30);
      float32x4_t v35 = *((float32x4_t *)a2 + 85);
      float32x4_t v36 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)vaddq_f32(v32, v35)));
      float32x4_t v37 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)vaddq_f32(v33, v35)));
      float32x4_t v38 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)vaddq_f32(v34, v35)));
      float32x4_t v39 = vcvtq_f32_s32(vcvtq_s32_f32(v36));
      float32x4_t v40 = vcvtq_f32_s32(vcvtq_s32_f32(v37));
      float32x4_t v41 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
      float32x4_t v42 = *((float32x4_t *)a2 + 7);
      float32x4_t v43 = *((float32x4_t *)a2 + 8);
      float32x4_t v44 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v36, v39), v42));
      float32x4_t v45 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v37, v40), v42));
      float32x4_t v46 = vrsqrteq_f32(vaddq_f32(v42, vsubq_f32(v38, v41)));
      float32x4_t v47 = vaddq_f32(v43, v39);
      float32x4_t v48 = vaddq_f32(v43, v40);
      float32x4_t v49 = vaddq_f32(v43, v41);
      float32x4_t v50 = *((float32x4_t *)a2 + 9);
      float32x4_t v51 = *((float32x4_t *)a2 + 10);
      float32x4_t v52 = vsubq_f32(v47, vmulq_f32(v44, v50));
      float32x4_t v53 = vsubq_f32(v48, vmulq_f32(v45, v50));
      float32x4_t v54 = *((float32x4_t *)a2 + 86);
      float32x4_t v55 = vmulq_f32(v54, v52);
      float32x4_t v56 = vmulq_f32(v54, v53);
      float32x4_t v57 = vmulq_f32(v54, vsubq_f32(v49, vmulq_f32(v46, v50)));
      float32x4_t v58 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
      float32x4_t v59 = vcvtq_f32_s32(vcvtq_s32_f32(v56));
      float32x4_t v60 = vcvtq_f32_s32(vcvtq_s32_f32(v57));
      float32x4_t v61 = vsubq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v58, v55)));
      float32x4_t v62 = vsubq_f32(v59, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v59, v56)));
      float32x4_t v63 = vsubq_f32(v60, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v60, v57)));
      float32x4_t v64 = *((float32x4_t *)a2 + 11);
      float32x4_t v65 = *((float32x4_t *)a2 + 12);
      float32x4_t v66 = vmulq_f32(vrecpeq_f32(vsubq_f32(v64, vsubq_f32(v55, v61))), v65);
      float32x4_t v67 = vmulq_f32(vrecpeq_f32(vsubq_f32(v64, vsubq_f32(v56, v62))), v65);
      float32x4_t v68 = vmulq_f32(vrecpeq_f32(vsubq_f32(v64, vsubq_f32(v57, v63))), v65);
      float32x4_t v69 = vaddq_f32(vaddq_f32(v51, v63), vmulq_f32(v68, v68));
      float32x4_t v70 = vmaxq_f32(vaddq_f32(vaddq_f32(v51, v61), vmulq_f32(v66, v66)), v29);
      float32x4_t v71 = vmaxq_f32(vaddq_f32(vaddq_f32(v51, v62), vmulq_f32(v67, v67)), v29);
      float32x4_t v72 = *((float32x4_t *)a2 + 13);
      float32x4_t v73 = *((float32x4_t *)a2 + 14);
      float32x4_t v74 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v70, v72), v73));
      float32x4_t v75 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v71, v72), v73));
      float32x4_t v76 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(v69, v29), v72), v73));
      float32x4_t v77 = *((float32x4_t *)a2 + 87);
      float32x4_t v78 = *((float32x4_t *)a2 + 88);
      float32x4_t v79 = *((float32x4_t *)a2 + 89);
      float32x4_t v80 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v26, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v79)), (int8x16_t)vmulq_f32(v32, v78), (int8x16_t)vmulq_f32(v77, v74)));
      float32x4_t v81 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v27, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v33, v79)), (int8x16_t)vmulq_f32(v33, v78), (int8x16_t)vmulq_f32(v77, v75)));
      float32x4_t v82 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v28, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v34, v79)), (int8x16_t)vmulq_f32(v34, v78), (int8x16_t)vmulq_f32(v77, v76)));
      float32x4_t v83 = (int8x16_t *)(v6 + v10);
      *float32x4_t v83 = vbslq_s8(v16, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v80, v80, 3));
      v83[1] = vbslq_s8(v16, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v81, v81, 3));
      v83[2] = vbslq_s8(v16, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v82, v82, 3));
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v84) = -v11;
    if ((int)v84 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v84 = v84;
    do
    {
      int8x16_t v85 = *((int8x16_t *)a2 + 15);
      float32x4_t v86 = vmulq_f32(*(float32x4_t *)(v7 + 16 * v84), (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v7 + 16 * v84), 3), *((float32x4_t *)a2 + 16))), *((float32x4_t *)a2 + 18))), *((int8x16_t *)a2 + 3)));
      float32x4_t v87 = *((float32x4_t *)a2 + 75);
      float32x4_t v88 = *((float32x4_t *)a2 + 5);
      float32x4_t v89 = vminq_f32(vmaxq_f32(v86, v87), v88);
      float32x4_t v90 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v89, *((float32x4_t *)a2 + 85))));
      float32x4_t v91 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
      float32x4_t v92 = vmulq_f32(*((float32x4_t *)a2 + 86), vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v91), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v90, v91))), *((float32x4_t *)a2 + 9))));
      float32x4_t v93 = vcvtq_f32_s32(vcvtq_s32_f32(v92));
      float32x4_t v94 = vsubq_f32(v93, (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v93, v92)));
      float32x4_t v95 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v92, v94))), *((float32x4_t *)a2 + 12));
      float32x4_t v96 = (float32x4_t)vbslq_s8(v85, (int8x16_t)v86, vbslq_s8((int8x16_t)vcgtq_f32(v87, vsubq_f32(v89, *((float32x4_t *)a2 + 89))), (int8x16_t)vmulq_f32(v89, *((float32x4_t *)a2 + 88)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 87), (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v94), vmulq_f32(v95, v95)), v87), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))))));
      *(int8x16_t *)(v6 + 16 * v84++) = vbslq_s8(v85, (int8x16_t)v86, (int8x16_t)vmulq_laneq_f32(v96, v96, 3));
    }
    while (v84 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec709_nice_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v104 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      int8x16_t v24 = vandq_s8(v23, v22);
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v26));
      float32x4_t v28 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = vminq_f32(vmaxq_f32(v27, v29), v30);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v28, v29), v30);
      float32x4_t v33 = *((float32x4_t *)a2 + 85);
      float32x4_t v34 = *((float32x4_t *)a2 + 86);
      int8x16_t v35 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vceqq_f32(v34, v29)), v29);
      float32x4_t v36 = (float32x4_t)vbslq_s8(v35, (int8x16_t)v30, (int8x16_t)vaddq_f32(v31, v33));
      float32x4_t v37 = (float32x4_t)vbslq_s8(v35, (int8x16_t)v30, (int8x16_t)vaddq_f32(v32, v33));
      int8x16_t v38 = *((int8x16_t *)a2 + 19);
      float32x4_t v39 = *((float32x4_t *)a2 + 20);
      float32x4_t v40 = (float32x4_t)vorrq_s8(vandq_s8(v38, (int8x16_t)v36), (int8x16_t)v30);
      float32x4_t v41 = (float32x4_t)vorrq_s8(vandq_s8(v38, (int8x16_t)v37), (int8x16_t)v30);
      int8x16_t v42 = *((int8x16_t *)a2 + 21);
      float32x4_t v43 = *((float32x4_t *)a2 + 22);
      float32x4_t v44 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v39, v36)));
      float32x4_t v45 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v37, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v39, v37)));
      float32x4_t v46 = *((float32x4_t *)a2 + 23);
      float32x4_t v47 = *((float32x4_t *)a2 + 24);
      float32x4_t v48 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v40, v46));
      float32x4_t v49 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v41, v46));
      float32x4_t v50 = vaddq_f32(vsubq_f32(v44, v43), v48);
      float32x4_t v51 = vmulq_f32(v47, v48);
      float32x4_t v52 = vmulq_f32(vmulq_f32(v47, v49), v41);
      float32x4_t v53 = vaddq_f32(vsubq_f32(v45, v43), v49);
      float32x4_t v54 = vsubq_f32(vsubq_f32(v40, v30), vmulq_f32(v51, v40));
      float32x4_t v55 = vsubq_f32(vsubq_f32(v41, v30), v52);
      float32x4_t v56 = vmulq_f32(v54, v54);
      float32x4_t v57 = vmulq_f32(v55, v55);
      float32x4_t v58 = *((float32x4_t *)a2 + 37);
      float32x4_t v59 = *((float32x4_t *)a2 + 38);
      float32x4_t v60 = *((float32x4_t *)a2 + 39);
      float32x4_t v61 = *((float32x4_t *)a2 + 40);
      float32x4_t v62 = vaddq_f32(v58, vmulq_f32(v59, v54));
      float32x4_t v63 = vaddq_f32(v60, vmulq_f32(v61, v54));
      float32x4_t v64 = vaddq_f32(v60, vmulq_f32(v61, v55));
      float32x4_t v65 = vaddq_f32(v58, vmulq_f32(v59, v55));
      float32x4_t v66 = *((float32x4_t *)a2 + 41);
      float32x4_t v67 = *((float32x4_t *)a2 + 42);
      float32x4_t v68 = vaddq_f32(vaddq_f32(v66, vmulq_f32(v67, v55)), vmulq_f32(v57, vaddq_f32(v65, vmulq_f32(v57, v64))));
      float32x4_t v69 = vmulq_f32(v54, vaddq_f32(vaddq_f32(v66, vmulq_f32(v67, v54)), vmulq_f32(v56, vaddq_f32(v62, vmulq_f32(v56, v63)))));
      float32x4_t v70 = *((float32x4_t *)a2 + 43);
      float32x4_t v71 = *((float32x4_t *)a2 + 44);
      float32x4_t v72 = vmulq_f32(v34, vaddq_f32(v50, vmulq_f32(v54, vaddq_f32(v70, v69))));
      float32x4_t v73 = vmulq_f32(v34, vaddq_f32(v53, vmulq_f32(v55, vaddq_f32(v70, vmulq_f32(v55, v68)))));
      float32x4_t v74 = *((float32x4_t *)a2 + 29);
      float32x4_t v75 = vmaxq_f32(v72, v74);
      float32x4_t v76 = vmaxq_f32(v73, v74);
      float32x4_t v77 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
      float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v76));
      float32x4_t v79 = vsubq_f32(v77, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v77, v75)));
      float32x4_t v80 = vsubq_f32(v78, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v78, v76)));
      float32x4_t v81 = vsubq_f32(v75, v79);
      float32x4_t v82 = vsubq_f32(v76, v80);
      float32x4_t v83 = *((float32x4_t *)a2 + 45);
      float32x4_t v84 = *((float32x4_t *)a2 + 46);
      float32x4_t v85 = vaddq_f32(v71, vmulq_f32(v83, v81));
      float32x4_t v86 = vaddq_f32(v71, vmulq_f32(v83, v82));
      float32x4_t v87 = *((float32x4_t *)a2 + 47);
      float32x4_t v88 = *((float32x4_t *)a2 + 48);
      float32x4_t v89 = vaddq_f32(v30, vmulq_f32(v81, vaddq_f32(v88, vmulq_f32(v81, vaddq_f32(vaddq_f32(v84, vmulq_f32(v81, v87)), vmulq_f32(vmulq_f32(v81, v81), v85))))));
      int32x4_t v90 = *((int32x4_t *)a2 + 33);
      float32x4_t v91 = vaddq_f32(v30, vmulq_f32(v82, vaddq_f32(v88, vmulq_f32(v82, vaddq_f32(vaddq_f32(v84, vmulq_f32(v87, v82)), vmulq_f32(vmulq_f32(v82, v82), v86))))));
      float32x4_t v92 = vmulq_f32(v89, (float32x4_t)vshlq_n_s32(vaddq_s32(v90, vcvtq_s32_f32(v79)), 0x17uLL));
      float32x4_t v93 = vmulq_f32(v91, (float32x4_t)vshlq_n_s32(vaddq_s32(v90, vcvtq_s32_f32(v80)), 0x17uLL));
      float32x4_t v94 = *((float32x4_t *)a2 + 87);
      float32x4_t v95 = *((float32x4_t *)a2 + 88);
      int8x16_t v96 = (int8x16_t)vmulq_f32(v31, v95);
      int8x16_t v97 = (int8x16_t)vmulq_f32(v32, v95);
      float32x4_t v98 = *((float32x4_t *)a2 + 89);
      int8x16_t v99 = (int8x16_t)vcgtq_f32(v29, vsubq_f32(v31, v98));
      int8x16_t v100 = (int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v98));
      float32x4_t v101 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, vbslq_s8(v99, v96, (int8x16_t)vmulq_f32(v94, v92)));
      float32x4_t v102 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v28, vbslq_s8(v100, v97, (int8x16_t)vmulq_f32(v94, v93)));
      int8x16_t v103 = (int8x16_t *)(v6 + v11);
      v103[-1] = vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v101, v101, 3));
      *int8x16_t v103 = vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v102, v102, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v104 = -v10;
    if (v104 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v105 = 16 * v104;
    float32x4_t v106 = *(float32x4_t *)(v7 + v105);
    int8x16_t v107 = *((int8x16_t *)a2 + 15);
    float32x4_t v108 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v109 = vrecpeq_f32(v108);
    float32x4_t v110 = vmulq_f32(v109, vrecpsq_f32(v109, v108));
    float32x4_t v111 = vmulq_f32(v106, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v110, vrecpsq_f32(v110, v108))), *((int8x16_t *)a2 + 3)));
    float32x4_t v112 = *((float32x4_t *)a2 + 75);
    float32x4_t v113 = *((float32x4_t *)a2 + 5);
    float32x4_t v114 = vminq_f32(vmaxq_f32(v111, v112), v113);
    float32x4_t v115 = *((float32x4_t *)a2 + 86);
    float32x4_t v116 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v113, (int8x16_t)vceqq_f32(v115, v112)), v112), (int8x16_t)v113, (int8x16_t)vaddq_f32(v114, *((float32x4_t *)a2 + 85)));
    float32x4_t v117 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v116), (int8x16_t)v113);
    float32x4_t v118 = (float32x4_t)vandq_s8((int8x16_t)v113, (int8x16_t)vcgtq_f32(v117, *((float32x4_t *)a2 + 23)));
    float32x4_t v119 = vsubq_f32(vsubq_f32(v117, v113), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v118), v117));
    float32x4_t v120 = vmulq_f32(v119, v119);
    float32x4_t v121 = vmaxq_f32(vmulq_f32(v115, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v116, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v116))), *((float32x4_t *)a2 + 22)), v118), vmulq_f32(v119, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v119, vaddq_f32(
                         vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v119)),
                         vmulq_f32(v120, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v119)), vmulq_f32(v120, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v119))))))))))), *((float32x4_t *)a2 + 29));
    float32x4_t v122 = vcvtq_f32_s32(vcvtq_s32_f32(v121));
    float32x4_t v123 = vsubq_f32(v122, (float32x4_t)vandq_s8((int8x16_t)v113, (int8x16_t)vcgtq_f32(v122, v121)));
    float32x4_t v124 = vsubq_f32(v121, v123);
    float32x4_t v125 = (float32x4_t)vbslq_s8(v107, (int8x16_t)v111, vbslq_s8((int8x16_t)vcgtq_f32(v112, vsubq_f32(v114, *((float32x4_t *)a2 + 89))), (int8x16_t)vmulq_f32(v114, *((float32x4_t *)a2 + 88)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 87), vmulq_f32(vaddq_f32(v113, vmulq_f32(v124, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v124, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46),
                                                       vmulq_f32(*((float32x4_t *)a2 + 47), v124)),
                                                     vmulq_f32(vmulq_f32(v124, v124), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v124)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v123)), 0x17uLL)))));
    *(int8x16_t *)(v6 + v105) = vbslq_s8(v107, (int8x16_t)v111, (int8x16_t)vmulq_laneq_f32(v125, v125, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec709_half_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v84 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 75);
      float32x4_t v27 = *((float32x4_t *)a2 + 5);
      float32x4_t v28 = vminq_f32(vmaxq_f32(v24, v26), v27);
      float32x4_t v29 = vminq_f32(vmaxq_f32(v25, v26), v27);
      float32x4_t v30 = *((float32x4_t *)a2 + 85);
      float32x4_t v31 = vaddq_f32(v28, v30);
      float32x4_t v32 = vaddq_f32(v29, v30);
      int8x16_t v33 = *((int8x16_t *)a2 + 19);
      float32x4_t v34 = *((float32x4_t *)a2 + 20);
      float32x4_t v35 = (float32x4_t)vorrq_s8(vandq_s8(v33, (int8x16_t)v31), (int8x16_t)v27);
      float32x4_t v36 = (float32x4_t)vorrq_s8(vandq_s8(v33, (int8x16_t)v32), (int8x16_t)v27);
      int8x16_t v37 = *((int8x16_t *)a2 + 21);
      float32x4_t v38 = *((float32x4_t *)a2 + 22);
      float32x4_t v39 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v32, 0x17uLL)), (float32x4_t)vandq_s8(v37, (int8x16_t)vcgtq_f32(v34, v32)));
      float32x4_t v40 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v31, 0x17uLL)), (float32x4_t)vandq_s8(v37, (int8x16_t)vcgtq_f32(v34, v31))), v38);
      float32x4_t v41 = *((float32x4_t *)a2 + 23);
      float32x4_t v42 = *((float32x4_t *)a2 + 24);
      float32x4_t v43 = vsubq_f32(v39, v38);
      float32x4_t v44 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v35, v41));
      float32x4_t v45 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v36, v41));
      float32x4_t v46 = vaddq_f32(v40, v44);
      float32x4_t v47 = vsubq_f32(vsubq_f32(v35, v27), vmulq_f32(vmulq_f32(v42, v44), v35));
      float32x4_t v48 = vsubq_f32(vsubq_f32(v36, v27), vmulq_f32(vmulq_f32(v42, v45), v36));
      float32x4_t v49 = *((float32x4_t *)a2 + 25);
      float32x4_t v50 = *((float32x4_t *)a2 + 26);
      float32x4_t v51 = vaddq_f32(v49, vmulq_f32(v50, v47));
      float32x4_t v52 = vaddq_f32(v49, vmulq_f32(v50, v48));
      float32x4_t v53 = *((float32x4_t *)a2 + 27);
      float32x4_t v54 = *((float32x4_t *)a2 + 28);
      float32x4_t v55 = vaddq_f32(vaddq_f32(v43, v45), vmulq_f32(v48, vaddq_f32(vaddq_f32(v53, vmulq_f32(v48, v54)), vmulq_f32(vmulq_f32(v48, v48), v52))));
      float32x4_t v56 = *((float32x4_t *)a2 + 86);
      float32x4_t v57 = vmulq_f32(v56, vaddq_f32(v46, vmulq_f32(v47, vaddq_f32(vaddq_f32(v53, vmulq_f32(v47, v54)), vmulq_f32(vmulq_f32(v47, v47), v51)))));
      float32x4_t v58 = vmulq_f32(v56, v55);
      float32x4_t v59 = *((float32x4_t *)a2 + 29);
      float32x4_t v60 = *((float32x4_t *)a2 + 30);
      float32x4_t v61 = vmaxq_f32(v57, v59);
      float32x4_t v62 = vmaxq_f32(v58, v59);
      float32x4_t v63 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
      float32x4_t v64 = vcvtq_f32_s32(vcvtq_s32_f32(v62));
      float32x4_t v65 = vsubq_f32(v63, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v63, v61)));
      float32x4_t v66 = vsubq_f32(v64, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v64, v62)));
      float32x4_t v67 = vsubq_f32(v61, v65);
      float32x4_t v68 = *((float32x4_t *)a2 + 31);
      float32x4_t v69 = *((float32x4_t *)a2 + 32);
      float32x4_t v70 = vsubq_f32(v62, v66);
      float32x4_t v71 = vmulq_f32(v70, vaddq_f32(v69, vmulq_f32(v70, vaddq_f32(v60, vmulq_f32(v68, v70)))));
      float32x4_t v72 = vaddq_f32(v27, vmulq_f32(v67, vaddq_f32(v69, vmulq_f32(v67, vaddq_f32(v60, vmulq_f32(v68, v67))))));
      int32x4_t v73 = vcvtq_s32_f32(v66);
      int32x4_t v74 = *((int32x4_t *)a2 + 33);
      float32x4_t v75 = vaddq_f32(v27, v71);
      float32x4_t v76 = vmulq_f32(v72, (float32x4_t)vshlq_n_s32(vaddq_s32(v74, vcvtq_s32_f32(v65)), 0x17uLL));
      float32x4_t v77 = vmulq_f32(v75, (float32x4_t)vshlq_n_s32(vaddq_s32(v74, v73), 0x17uLL));
      float32x4_t v78 = *((float32x4_t *)a2 + 87);
      float32x4_t v79 = *((float32x4_t *)a2 + 88);
      float32x4_t v80 = *((float32x4_t *)a2 + 89);
      float32x4_t v81 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v24, vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v28, v80)), (int8x16_t)vmulq_f32(v28, v79), (int8x16_t)vmulq_f32(v78, v76)));
      float32x4_t v82 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v25, vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v29, v80)), (int8x16_t)vmulq_f32(v29, v79), (int8x16_t)vmulq_f32(v78, v77)));
      float32x4_t v83 = (int8x16_t *)(v6 + v11);
      v83[-1] = vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v81, v81, 3));
      *float32x4_t v83 = vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v82, v82, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v84 = -v10;
    if (v84 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v85 = 16 * v84;
    float32x4_t v86 = *(float32x4_t *)(v7 + v85);
    int8x16_t v87 = *((int8x16_t *)a2 + 15);
    float32x4_t v88 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v89 = vmulq_f32(vrecpeq_f32(v88), *((float32x4_t *)a2 + 18));
    float32x4_t v90 = vmulq_f32(v86, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v89, vrecpsq_f32(v89, v88))), *((int8x16_t *)a2 + 3)));
    float32x4_t v91 = *((float32x4_t *)a2 + 75);
    float32x4_t v92 = *((float32x4_t *)a2 + 5);
    float32x4_t v93 = vminq_f32(vmaxq_f32(v90, v91), v92);
    float32x4_t v94 = vaddq_f32(v93, *((float32x4_t *)a2 + 85));
    float32x4_t v95 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v94), (int8x16_t)v92);
    float32x4_t v96 = (float32x4_t)vandq_s8((int8x16_t)v92, (int8x16_t)vcgtq_f32(v95, *((float32x4_t *)a2 + 23)));
    float32x4_t v97 = vsubq_f32(vsubq_f32(v95, v92), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v96), v95));
    float32x4_t v98 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 86), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v94, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v94))), *((float32x4_t *)a2 + 22)), v96), vmulq_f32(v97, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v97, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v97, v97), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v97))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v99 = vcvtq_f32_s32(vcvtq_s32_f32(v98));
    float32x4_t v100 = vsubq_f32(v99, (float32x4_t)vandq_s8((int8x16_t)v92, (int8x16_t)vcgtq_f32(v99, v98)));
    float32x4_t v101 = vsubq_f32(v98, v100);
    float32x4_t v102 = (float32x4_t)vbslq_s8(v87, (int8x16_t)v90, vbslq_s8((int8x16_t)vcgtq_f32(v91, vsubq_f32(v93, *((float32x4_t *)a2 + 89))), (int8x16_t)vmulq_f32(v93, *((float32x4_t *)a2 + 88)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 87), vmulq_f32(vaddq_f32(v92, vmulq_f32(v101, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v101, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v101)))))),
                                           (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v100)), 0x17uLL)))));
    *(int8x16_t *)(v6 + v85) = vbslq_s8(v87, (int8x16_t)v90, (int8x16_t)vmulq_laneq_f32(v102, v102, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec709_halfTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v96 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v14 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 82);
      float32x4_t v27 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v24, (int8x16_t)vmaxq_f32(v24, v26));
      float32x4_t v28 = *((float32x4_t *)a2 + 75);
      float32x4_t v29 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmaxq_f32(v25, v26));
      int8x16_t v30 = (int8x16_t)vcgtq_f32(v28, v27);
      int8x16_t v31 = (int8x16_t)vcgtq_f32(v28, v29);
      int8x16_t v32 = *((int8x16_t *)a2 + 83);
      float32x4_t v33 = *((float32x4_t *)a2 + 5);
      float32x4_t v34 = (float32x4_t)vbslq_s8(v31, v32, (int8x16_t)v33);
      float32x4_t v35 = vmulq_f32(v27, (float32x4_t)vbslq_s8(v30, v32, (int8x16_t)v33));
      float32x4_t v36 = vmulq_f32(v29, v34);
      float32x4_t v37 = *((float32x4_t *)a2 + 90);
      float32x4_t v38 = *((float32x4_t *)a2 + 85);
      float32x4_t v39 = vaddq_f32(vminq_f32(v35, v37), v38);
      float32x4_t v40 = vaddq_f32(vminq_f32(v36, v37), v38);
      int8x16_t v41 = *((int8x16_t *)a2 + 19);
      float32x4_t v42 = *((float32x4_t *)a2 + 20);
      float32x4_t v43 = (float32x4_t)vorrq_s8(vandq_s8(v41, (int8x16_t)v39), (int8x16_t)v33);
      int8x16_t v44 = *((int8x16_t *)a2 + 21);
      float32x4_t v45 = *((float32x4_t *)a2 + 22);
      float32x4_t v46 = (float32x4_t)vorrq_s8(vandq_s8(v41, (int8x16_t)v40), (int8x16_t)v33);
      float32x4_t v47 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v40, 0x17uLL)), (float32x4_t)vandq_s8(v44, (int8x16_t)vcgtq_f32(v42, v40)));
      float32x4_t v48 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v39, 0x17uLL)), (float32x4_t)vandq_s8(v44, (int8x16_t)vcgtq_f32(v42, v39))), v45);
      float32x4_t v49 = *((float32x4_t *)a2 + 23);
      float32x4_t v50 = *((float32x4_t *)a2 + 24);
      float32x4_t v51 = vsubq_f32(v47, v45);
      float32x4_t v52 = (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v43, v49));
      float32x4_t v53 = (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v46, v49));
      float32x4_t v54 = vmulq_f32(v50, v52);
      float32x4_t v55 = vaddq_f32(v48, v52);
      float32x4_t v56 = vmulq_f32(vmulq_f32(v50, v53), v46);
      float32x4_t v57 = vaddq_f32(v51, v53);
      float32x4_t v58 = vsubq_f32(vsubq_f32(v43, v33), vmulq_f32(v54, v43));
      float32x4_t v59 = vsubq_f32(vsubq_f32(v46, v33), v56);
      float32x4_t v60 = *((float32x4_t *)a2 + 25);
      float32x4_t v61 = *((float32x4_t *)a2 + 26);
      float32x4_t v62 = *((float32x4_t *)a2 + 27);
      float32x4_t v63 = *((float32x4_t *)a2 + 28);
      float32x4_t v64 = vaddq_f32(v57, vmulq_f32(v59, vaddq_f32(vaddq_f32(v62, vmulq_f32(v59, v63)), vmulq_f32(vmulq_f32(v59, v59), vaddq_f32(v60, vmulq_f32(v61, v59))))));
      float32x4_t v65 = *((float32x4_t *)a2 + 86);
      float32x4_t v66 = vmulq_f32(v65, vaddq_f32(v55, vmulq_f32(v58, vaddq_f32(vaddq_f32(v62, vmulq_f32(v58, v63)), vmulq_f32(vmulq_f32(v58, v58), vaddq_f32(v60, vmulq_f32(v61, v58)))))));
      float32x4_t v67 = vmulq_f32(v65, v64);
      float32x4_t v68 = *((float32x4_t *)a2 + 29);
      float32x4_t v69 = *((float32x4_t *)a2 + 30);
      float32x4_t v70 = vmaxq_f32(v66, v68);
      float32x4_t v71 = vmaxq_f32(v67, v68);
      float32x4_t v72 = vcvtq_f32_s32(vcvtq_s32_f32(v70));
      float32x4_t v73 = vcvtq_f32_s32(vcvtq_s32_f32(v71));
      float32x4_t v74 = vsubq_f32(v72, (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v72, v70)));
      float32x4_t v75 = vsubq_f32(v73, (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v73, v71)));
      float32x4_t v76 = vsubq_f32(v70, v74);
      float32x4_t v77 = vsubq_f32(v71, v75);
      float32x4_t v78 = *((float32x4_t *)a2 + 31);
      float32x4_t v79 = *((float32x4_t *)a2 + 32);
      float32x4_t v80 = vmulq_f32(v77, vaddq_f32(v79, vmulq_f32(v77, vaddq_f32(v69, vmulq_f32(v78, v77)))));
      float32x4_t v81 = vaddq_f32(v33, vmulq_f32(v76, vaddq_f32(v79, vmulq_f32(v76, vaddq_f32(v69, vmulq_f32(v78, v76))))));
      int32x4_t v82 = vcvtq_s32_f32(v75);
      int32x4_t v83 = *((int32x4_t *)a2 + 33);
      float32x4_t v84 = vmulq_f32(v81, (float32x4_t)vshlq_n_s32(vaddq_s32(v83, vcvtq_s32_f32(v74)), 0x17uLL));
      float32x4_t v85 = vmulq_f32(vaddq_f32(v33, v80), (float32x4_t)vshlq_n_s32(vaddq_s32(v83, v82), 0x17uLL));
      float32x4_t v86 = *((float32x4_t *)a2 + 87);
      int8x16_t v87 = (int8x16_t)vmulq_f32(v86, v84);
      float32x4_t v88 = *((float32x4_t *)a2 + 88);
      int8x16_t v89 = (int8x16_t)vmulq_f32(v86, v85);
      float32x4_t v90 = *((float32x4_t *)a2 + 89);
      float32x4_t v91 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v26, (int8x16_t)v33);
      float32x4_t v92 = (float32x4_t)vbslq_s8(v31, (int8x16_t)v26, (int8x16_t)v33);
      float32x4_t v93 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v24, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v28, vsubq_f32(v35, v90)), (int8x16_t)vmulq_f32(v35, v88), v87), v91));
      float32x4_t v94 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v28, vsubq_f32(v36, v90)), (int8x16_t)vmulq_f32(v36, v88), v89), v92));
      float32x4_t v95 = (int8x16_t *)(v6 + v11);
      v95[-1] = vbslq_s8(v14, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v93, v93, 3));
      *float32x4_t v95 = vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v94, v94, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v96 = -v10;
    if (v96 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v97 = 16 * v96;
    float32x4_t v98 = *(float32x4_t *)(v7 + v97);
    int8x16_t v99 = *((int8x16_t *)a2 + 15);
    float32x4_t v100 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v101 = vmulq_f32(vrecpeq_f32(v100), *((float32x4_t *)a2 + 18));
    float32x4_t v102 = vmulq_f32(v98, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v101, vrecpsq_f32(v101, v100))), *((int8x16_t *)a2 + 3)));
    float32x4_t v103 = *((float32x4_t *)a2 + 82);
    float32x4_t v104 = (float32x4_t)vbslq_s8(v99, (int8x16_t)v102, (int8x16_t)vmaxq_f32(v102, v103));
    float32x4_t v105 = *((float32x4_t *)a2 + 75);
    int8x16_t v106 = (int8x16_t)vcgtq_f32(v105, v104);
    float32x4_t v107 = *((float32x4_t *)a2 + 5);
    float32x4_t v108 = vmulq_f32(v104, (float32x4_t)vbslq_s8(v106, *((int8x16_t *)a2 + 83), (int8x16_t)v107));
    float32x4_t v109 = vaddq_f32(vminq_f32(v108, *((float32x4_t *)a2 + 90)), *((float32x4_t *)a2 + 85));
    float32x4_t v110 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v109), (int8x16_t)v107);
    float32x4_t v111 = (float32x4_t)vandq_s8((int8x16_t)v107, (int8x16_t)vcgtq_f32(v110, *((float32x4_t *)a2 + 23)));
    float32x4_t v112 = vsubq_f32(vsubq_f32(v110, v107), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v111), v110));
    float32x4_t v113 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 86), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v109, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v109))), *((float32x4_t *)a2 + 22)), v111), vmulq_f32(v112, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v112, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v112, v112), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v112))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v114 = vcvtq_f32_s32(vcvtq_s32_f32(v113));
    float32x4_t v115 = vsubq_f32(v114, (float32x4_t)vandq_s8((int8x16_t)v107, (int8x16_t)vcgtq_f32(v114, v113)));
    float32x4_t v116 = vsubq_f32(v113, v115);
    float32x4_t v117 = (float32x4_t)vbslq_s8(v99, (int8x16_t)v102, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v105, vsubq_f32(v108, *((float32x4_t *)a2 + 89))), (int8x16_t)vmulq_f32(v108, *((float32x4_t *)a2 + 88)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 87), vmulq_f32(vaddq_f32(v107, vmulq_f32(v116, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v116,
                                                                             vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v116)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v115)), 0x17uLL)))), (float32x4_t)vbslq_s8(v106, (int8x16_t)v103, (int8x16_t)v107)));
    *(int8x16_t *)(v6 + v97) = vbslq_s8(v99, (int8x16_t)v102, (int8x16_t)vmulq_laneq_f32(v117, v117, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec709_niceTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v110 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v14 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17));
      int8x16_t v24 = *((int8x16_t *)a2 + 17);
      int8x16_t v25 = *((int8x16_t *)a2 + 3);
      float32x4_t v26 = vmulq_f32(v12, (float32x4_t)vorrq_s8(vandq_s8(v24, v22), v25));
      float32x4_t v27 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v24, v23), v25));
      float32x4_t v28 = *((float32x4_t *)a2 + 82);
      float32x4_t v29 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v26, (int8x16_t)vmaxq_f32(v26, v28));
      float32x4_t v30 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmaxq_f32(v27, v28));
      float32x4_t v31 = *((float32x4_t *)a2 + 75);
      int8x16_t v32 = (int8x16_t)vcgtq_f32(v31, v29);
      int8x16_t v33 = (int8x16_t)vcgtq_f32(v31, v30);
      int8x16_t v34 = *((int8x16_t *)a2 + 83);
      float32x4_t v35 = *((float32x4_t *)a2 + 5);
      float32x4_t v36 = (float32x4_t)vbslq_s8(v33, v34, (int8x16_t)v35);
      float32x4_t v37 = vmulq_f32(v29, (float32x4_t)vbslq_s8(v32, v34, (int8x16_t)v35));
      float32x4_t v38 = vmulq_f32(v30, v36);
      float32x4_t v39 = *((float32x4_t *)a2 + 90);
      float32x4_t v40 = *((float32x4_t *)a2 + 85);
      int8x16_t v41 = (int8x16_t)vaddq_f32(vminq_f32(v37, v39), v40);
      int8x16_t v42 = (int8x16_t)vaddq_f32(vminq_f32(v38, v39), v40);
      float32x4_t v43 = *((float32x4_t *)a2 + 86);
      int8x16_t v44 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vceqq_f32(v43, v31)), v31);
      float32x4_t v45 = (float32x4_t)vbslq_s8(v44, (int8x16_t)v35, v41);
      float32x4_t v46 = (float32x4_t)vbslq_s8(v44, (int8x16_t)v35, v42);
      int8x16_t v47 = *((int8x16_t *)a2 + 19);
      float32x4_t v48 = *((float32x4_t *)a2 + 20);
      float32x4_t v49 = (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)v45), (int8x16_t)v35);
      float32x4_t v50 = (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)v46), (int8x16_t)v35);
      int8x16_t v51 = *((int8x16_t *)a2 + 21);
      float32x4_t v52 = *((float32x4_t *)a2 + 22);
      float32x4_t v53 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v46, 0x17uLL)), (float32x4_t)vandq_s8(v51, (int8x16_t)vcgtq_f32(v48, v46)));
      float32x4_t v54 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v45, 0x17uLL)), (float32x4_t)vandq_s8(v51, (int8x16_t)vcgtq_f32(v48, v45))), v52);
      float32x4_t v55 = *((float32x4_t *)a2 + 23);
      float32x4_t v56 = *((float32x4_t *)a2 + 24);
      float32x4_t v57 = vsubq_f32(v53, v52);
      float32x4_t v58 = (float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vcgtq_f32(v49, v55));
      float32x4_t v59 = (float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vcgtq_f32(v50, v55));
      float32x4_t v60 = vaddq_f32(v54, v58);
      float32x4_t v61 = vsubq_f32(vsubq_f32(v49, v35), vmulq_f32(vmulq_f32(v56, v58), v49));
      float32x4_t v62 = vsubq_f32(vsubq_f32(v50, v35), vmulq_f32(vmulq_f32(v56, v59), v50));
      float32x4_t v63 = vmulq_f32(v61, v61);
      float32x4_t v64 = *((float32x4_t *)a2 + 37);
      float32x4_t v65 = *((float32x4_t *)a2 + 38);
      float32x4_t v66 = *((float32x4_t *)a2 + 39);
      float32x4_t v67 = *((float32x4_t *)a2 + 40);
      float32x4_t v68 = vaddq_f32(v64, vmulq_f32(v65, v61));
      float32x4_t v69 = vaddq_f32(v66, vmulq_f32(v67, v61));
      float32x4_t v70 = vaddq_f32(v66, vmulq_f32(v67, v62));
      float32x4_t v71 = vaddq_f32(v64, vmulq_f32(v65, v62));
      float32x4_t v72 = *((float32x4_t *)a2 + 41);
      float32x4_t v73 = *((float32x4_t *)a2 + 42);
      float32x4_t v74 = vaddq_f32(v72, vmulq_f32(v73, v61));
      float32x4_t v75 = vaddq_f32(v72, vmulq_f32(v73, v62));
      float32x4_t v76 = vmulq_f32(v62, v62);
      float32x4_t v77 = vaddq_f32(v57, v59);
      float32x4_t v78 = vaddq_f32(v74, vmulq_f32(v63, vaddq_f32(v68, vmulq_f32(v63, v69))));
      float32x4_t v79 = vaddq_f32(v75, vmulq_f32(v76, vaddq_f32(v71, vmulq_f32(v76, v70))));
      float32x4_t v80 = *((float32x4_t *)a2 + 43);
      float32x4_t v81 = *((float32x4_t *)a2 + 44);
      float32x4_t v82 = vmulq_f32(v43, vaddq_f32(v60, vmulq_f32(v61, vaddq_f32(v80, vmulq_f32(v61, v78)))));
      float32x4_t v83 = vmulq_f32(v43, vaddq_f32(v77, vmulq_f32(v62, vaddq_f32(v80, vmulq_f32(v62, v79)))));
      float32x4_t v84 = *((float32x4_t *)a2 + 29);
      float32x4_t v85 = vmaxq_f32(v82, v84);
      float32x4_t v86 = vmaxq_f32(v83, v84);
      float32x4_t v87 = vcvtq_f32_s32(vcvtq_s32_f32(v85));
      float32x4_t v88 = vcvtq_f32_s32(vcvtq_s32_f32(v86));
      float32x4_t v89 = vsubq_f32(v87, (float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vcgtq_f32(v87, v85)));
      float32x4_t v90 = vsubq_f32(v88, (float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vcgtq_f32(v88, v86)));
      float32x4_t v91 = vsubq_f32(v85, v89);
      float32x4_t v92 = vsubq_f32(v86, v90);
      float32x4_t v93 = *((float32x4_t *)a2 + 45);
      float32x4_t v94 = *((float32x4_t *)a2 + 46);
      float32x4_t v95 = *((float32x4_t *)a2 + 47);
      float32x4_t v96 = *((float32x4_t *)a2 + 48);
      int32x4_t v97 = *((int32x4_t *)a2 + 33);
      float32x4_t v98 = vmulq_f32(vaddq_f32(v35, vmulq_f32(v91, vaddq_f32(v96, vmulq_f32(v91, vaddq_f32(vaddq_f32(v94, vmulq_f32(v91, v95)), vmulq_f32(vmulq_f32(v91, v91), vaddq_f32(v81, vmulq_f32(v93, v91)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v97, vcvtq_s32_f32(v89)), 0x17uLL));
      float32x4_t v99 = vmulq_f32(vaddq_f32(v35, vmulq_f32(v92, vaddq_f32(v96, vmulq_f32(v92, vaddq_f32(vaddq_f32(v94, vmulq_f32(v95, v92)), vmulq_f32(vmulq_f32(v92, v92), vaddq_f32(v81, vmulq_f32(v93, v92)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v97, vcvtq_s32_f32(v90)), 0x17uLL));
      float32x4_t v100 = *((float32x4_t *)a2 + 87);
      int8x16_t v101 = (int8x16_t)vmulq_f32(v100, v98);
      float32x4_t v102 = *((float32x4_t *)a2 + 88);
      int8x16_t v103 = (int8x16_t)vmulq_f32(v100, v99);
      float32x4_t v104 = *((float32x4_t *)a2 + 89);
      float32x4_t v105 = (float32x4_t)vbslq_s8(v32, (int8x16_t)v28, (int8x16_t)v35);
      float32x4_t v106 = (float32x4_t)vbslq_s8(v33, (int8x16_t)v28, (int8x16_t)v35);
      float32x4_t v107 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v26, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v31, vsubq_f32(v37, v104)), (int8x16_t)vmulq_f32(v37, v102), v101), v105));
      float32x4_t v108 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v31, vsubq_f32(v38, v104)), (int8x16_t)vmulq_f32(v38, v102), v103), v106));
      float32x4_t v109 = (int8x16_t *)(v6 + v11);
      v109[-1] = vbslq_s8(v14, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v107, v107, 3));
      *float32x4_t v109 = vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v108, v108, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v110 = -v10;
    if (v110 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v111 = 16 * v110;
    float32x4_t v112 = *(float32x4_t *)(v7 + v111);
    int8x16_t v113 = *((int8x16_t *)a2 + 15);
    float32x4_t v114 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v115 = vrecpeq_f32(v114);
    float32x4_t v116 = vmulq_f32(v115, vrecpsq_f32(v115, v114));
    float32x4_t v117 = vmulq_f32(v112, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v116, vrecpsq_f32(v116, v114))), *((int8x16_t *)a2 + 3)));
    float32x4_t v118 = *((float32x4_t *)a2 + 82);
    float32x4_t v119 = (float32x4_t)vbslq_s8(v113, (int8x16_t)v117, (int8x16_t)vmaxq_f32(v117, v118));
    float32x4_t v120 = *((float32x4_t *)a2 + 75);
    int8x16_t v121 = (int8x16_t)vcgtq_f32(v120, v119);
    float32x4_t v122 = *((float32x4_t *)a2 + 5);
    float32x4_t v123 = vmulq_f32(v119, (float32x4_t)vbslq_s8(v121, *((int8x16_t *)a2 + 83), (int8x16_t)v122));
    float32x4_t v124 = *((float32x4_t *)a2 + 86);
    float32x4_t v125 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v122, (int8x16_t)vceqq_f32(v124, v120)), v120), (int8x16_t)v122, (int8x16_t)vaddq_f32(vminq_f32(v123, *((float32x4_t *)a2 + 90)), *((float32x4_t *)a2 + 85)));
    float32x4_t v126 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v125), (int8x16_t)v122);
    float32x4_t v127 = (float32x4_t)vandq_s8((int8x16_t)v122, (int8x16_t)vcgtq_f32(v126, *((float32x4_t *)a2 + 23)));
    float32x4_t v128 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v125, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v125))), *((float32x4_t *)a2 + 22)), v127);
    float32x4_t v129 = vsubq_f32(vsubq_f32(v126, v122), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v127), v126));
    float32x4_t v130 = vmulq_f32(v129, v129);
    float32x4_t v131 = vmaxq_f32(vmulq_f32(v124, vaddq_f32(v128, vmulq_f32(v129, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v129, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v129)), vmulq_f32(v130, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v129)), vmulq_f32(v130, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v129))))))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v132 = vcvtq_f32_s32(vcvtq_s32_f32(v131));
    float32x4_t v133 = vsubq_f32(v132, (float32x4_t)vandq_s8((int8x16_t)v122, (int8x16_t)vcgtq_f32(v132, v131)));
    float32x4_t v134 = vsubq_f32(v131, v133);
    float32x4_t v135 = (float32x4_t)vbslq_s8(v113, (int8x16_t)v117, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v120, vsubq_f32(v123, *((float32x4_t *)a2 + 89))), (int8x16_t)vmulq_f32(v123, *((float32x4_t *)a2 + 88)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 87), vmulq_f32(vaddq_f32(v122, vmulq_f32(v134, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v134,
                                                                             vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v134)), vmulq_f32(vmulq_f32(v134, v134), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v134)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v133)), 0x17uLL)))), (float32x4_t)vbslq_s8(v121, (int8x16_t)v118, (int8x16_t)v122)));
    *(int8x16_t *)(v6 + v111) = vbslq_s8(v113, (int8x16_t)v117, (int8x16_t)vmulq_laneq_f32(v135, v135, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec601_fast_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v57 = 0;
        uint64_t v58 = 16 * v8;
        uint64_t v59 = 16 * v7;
        uint64_t v60 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v61 = 0;
          do
          {
            int8x16_t v62 = *((int8x16_t *)a2 + 15);
            float32x4_t v63 = vmulq_f32(v5[v61 / 0x10], (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5[v61 / 0x10], 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
            float32x4_t v64 = vminq_f32(vmaxq_f32(v63, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v65 = (float32x4_t)vbslq_s8(v62, (int8x16_t)v63, (int8x16_t)vmulq_f32(v64, vminq_f32(vrsqrteq_f32(v64), *((float32x4_t *)a2 + 73))));
            v6[v61 / 0x10] = vbslq_s8(v62, (int8x16_t)v63, (int8x16_t)vmulq_laneq_f32(v65, v65, 3));
            v61 += 16;
          }
          while (v60 != v61);
          ++v57;
          int v5 = (float32x4_t *)((char *)v5 + v58);
          uint64_t v6 = (int8x16_t *)((char *)v6 + v59);
        }
        while (v57 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      float32x4_t v12 = v5 + 4;
      float32x4_t v13 = v6 + 4;
      do
      {
        unint64_t v14 = 0;
        float32x4_t v15 = v13;
        float32x4_t v16 = v12;
        uint64_t v17 = 2;
        do
        {
          float32x4_t v18 = v5[v17 - 2];
          float32x4_t v19 = v5[v17 - 1];
          float32x4_t v20 = v5[v17];
          float32x4_t v21 = v5[v17 + 1];
          int8x16_t v23 = *((int8x16_t *)a2 + 15);
          float32x4_t v22 = *((float32x4_t *)a2 + 16);
          float32x4_t v24 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 3), v22);
          int8x16_t v25 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3), v22));
          int8x16_t v26 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3), v22));
          int8x16_t v27 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 3), v22));
          int8x16_t v28 = *((int8x16_t *)a2 + 17);
          int8x16_t v29 = vandq_s8(v28, v25);
          int8x16_t v30 = vandq_s8(v28, v26);
          int8x16_t v31 = vandq_s8(v28, v27);
          int8x16_t v32 = vandq_s8(v28, (int8x16_t)vrecpeq_f32(v24));
          int8x16_t v33 = *((int8x16_t *)a2 + 3);
          float32x4_t v34 = vmulq_f32(v18, (float32x4_t)vorrq_s8(v29, v33));
          float32x4_t v35 = vmulq_f32(v19, (float32x4_t)vorrq_s8(v30, v33));
          float32x4_t v36 = vmulq_f32(v20, (float32x4_t)vorrq_s8(v31, v33));
          float32x4_t v37 = vmulq_f32(v21, (float32x4_t)vorrq_s8(v32, v33));
          float32x4_t v38 = *((float32x4_t *)a2 + 75);
          float32x4_t v39 = *((float32x4_t *)a2 + 5);
          float32x4_t v40 = vminq_f32(vmaxq_f32(v34, v38), v39);
          float32x4_t v41 = vminq_f32(vmaxq_f32(v35, v38), v39);
          float32x4_t v42 = vminq_f32(vmaxq_f32(v36, v38), v39);
          float32x4_t v43 = vminq_f32(vmaxq_f32(v37, v38), v39);
          float32x4_t v44 = *((float32x4_t *)a2 + 73);
          float32x4_t v45 = v16;
          float32x4_t v46 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v34, (int8x16_t)vmulq_f32(v40, vminq_f32(vrsqrteq_f32(v40), v44)));
          float32x4_t v47 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v35, (int8x16_t)vmulq_f32(v41, vminq_f32(vrsqrteq_f32(v41), v44)));
          float32x4_t v48 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v36, (int8x16_t)vmulq_f32(v42, vminq_f32(vrsqrteq_f32(v42), v44)));
          float32x4_t v49 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v37, (int8x16_t)vmulq_f32(v43, vminq_f32(vrsqrteq_f32(v43), v44)));
          float32x4_t v50 = v15;
          int8x16_t v51 = &v6[v17];
          v14 += 4;
          v51[-2] = vbslq_s8(v23, (int8x16_t)v34, (int8x16_t)vmulq_laneq_f32(v46, v46, 3));
          v51[-1] = vbslq_s8(v23, (int8x16_t)v35, (int8x16_t)vmulq_laneq_f32(v47, v47, 3));
          *int8x16_t v51 = vbslq_s8(v23, (int8x16_t)v36, (int8x16_t)vmulq_laneq_f32(v48, v48, 3));
          v51[1] = vbslq_s8(v23, (int8x16_t)v37, (int8x16_t)vmulq_laneq_f32(v49, v49, 3));
          v17 += 4;
          v16 += 4;
          float32x4_t v15 = v50 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            float32x4_t v52 = *v45++;
            int8x16_t v53 = *((int8x16_t *)a2 + 15);
            float32x4_t v54 = vmulq_f32(v52, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
            float32x4_t v55 = vminq_f32(vmaxq_f32(v54, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v56 = (float32x4_t)vbslq_s8(v53, (int8x16_t)v54, (int8x16_t)vmulq_f32(v55, vminq_f32(vrsqrteq_f32(v55), *((float32x4_t *)a2 + 73))));
            *v50++ = vbslq_s8(v53, (int8x16_t)v54, (int8x16_t)vmulq_laneq_f32(v56, v56, 3));
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        uint64_t v6 = (int8x16_t *)((char *)v6 + v10);
        int v5 = (float32x4_t *)((char *)v5 + v11);
        float32x4_t v12 = (float32x4_t *)((char *)v12 + v11);
        float32x4_t v13 = (int8x16_t *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

uint64_t Getrec601_fixed_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v86) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v10 + 32);
      int8x16_t v16 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v17 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15));
      float32x4_t v18 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15));
      float32x4_t v19 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v15));
      int8x16_t v21 = *((int8x16_t *)a2 + 17);
      float32x4_t v20 = *((float32x4_t *)a2 + 18);
      int8x16_t v22 = (int8x16_t)vmulq_f32(v19, v20);
      int8x16_t v23 = vandq_s8(v21, (int8x16_t)vmulq_f32(v17, v20));
      int8x16_t v24 = vandq_s8(v21, (int8x16_t)vmulq_f32(v18, v20));
      int8x16_t v25 = *((int8x16_t *)a2 + 3);
      float32x4_t v26 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v23, v25));
      float32x4_t v27 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v24, v25));
      float32x4_t v28 = vmulq_f32(v14, (float32x4_t)vorrq_s8(vandq_s8(v21, v22), v25));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = *((float32x4_t *)a2 + 6);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v26, v29), v30);
      float32x4_t v33 = vminq_f32(vmaxq_f32(v27, v29), v30);
      float32x4_t v34 = vminq_f32(vmaxq_f32(v28, v29), v30);
      float32x4_t v35 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)v32));
      float32x4_t v36 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)v33));
      float32x4_t v37 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)v34));
      float32x4_t v38 = vcvtq_f32_s32(vcvtq_s32_f32(v35));
      float32x4_t v39 = vcvtq_f32_s32(vcvtq_s32_f32(v36));
      float32x4_t v40 = vcvtq_f32_s32(vcvtq_s32_f32(v37));
      float32x4_t v41 = *((float32x4_t *)a2 + 7);
      float32x4_t v42 = *((float32x4_t *)a2 + 8);
      float32x4_t v43 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v35, v38), v41));
      float32x4_t v44 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v36, v39), v41));
      float32x4_t v45 = vrsqrteq_f32(vaddq_f32(v41, vsubq_f32(v37, v40)));
      float32x4_t v46 = vaddq_f32(v42, v38);
      float32x4_t v47 = vaddq_f32(v42, v39);
      float32x4_t v48 = vaddq_f32(v42, v40);
      float32x4_t v49 = *((float32x4_t *)a2 + 9);
      float32x4_t v50 = *((float32x4_t *)a2 + 10);
      float32x4_t v51 = vsubq_f32(v46, vmulq_f32(v43, v49));
      float32x4_t v52 = *((float32x4_t *)a2 + 77);
      float32x4_t v53 = vmulq_f32(v52, v51);
      float32x4_t v54 = vmulq_f32(v52, vsubq_f32(v47, vmulq_f32(v44, v49)));
      float32x4_t v55 = vmulq_f32(v52, vsubq_f32(v48, vmulq_f32(v45, v49)));
      float32x4_t v56 = vcvtq_f32_s32(vcvtq_s32_f32(v53));
      float32x4_t v57 = vcvtq_f32_s32(vcvtq_s32_f32(v54));
      float32x4_t v58 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
      float32x4_t v59 = vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v56, v53)));
      float32x4_t v60 = vsubq_f32(v57, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v57, v54)));
      float32x4_t v61 = vsubq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v58, v55)));
      float32x4_t v62 = *((float32x4_t *)a2 + 11);
      float32x4_t v63 = *((float32x4_t *)a2 + 12);
      float32x4_t v64 = vmulq_f32(vrecpeq_f32(vsubq_f32(v62, vsubq_f32(v53, v59))), v63);
      float32x4_t v65 = vmulq_f32(vrecpeq_f32(vsubq_f32(v62, vsubq_f32(v54, v60))), v63);
      float32x4_t v66 = vmulq_f32(vrecpeq_f32(vsubq_f32(v62, vsubq_f32(v55, v61))), v63);
      float32x4_t v67 = vaddq_f32(vaddq_f32(v50, v61), vmulq_f32(v66, v66));
      float32x4_t v68 = vmaxq_f32(vaddq_f32(vaddq_f32(v50, v59), vmulq_f32(v64, v64)), v29);
      float32x4_t v69 = vmaxq_f32(vaddq_f32(vaddq_f32(v50, v60), vmulq_f32(v65, v65)), v29);
      float32x4_t v70 = *((float32x4_t *)a2 + 13);
      float32x4_t v71 = *((float32x4_t *)a2 + 14);
      float32x4_t v72 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v68, v70), v71));
      float32x4_t v73 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v69, v70), v71));
      float32x4_t v74 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(v67, v29), v70), v71));
      float32x4_t v75 = *((float32x4_t *)a2 + 91);
      float32x4_t v76 = *((float32x4_t *)a2 + 92);
      int8x16_t v77 = (int8x16_t)vaddq_f32(v75, vmulq_f32(v76, v72));
      float32x4_t v78 = vmulq_f32(v76, v73);
      float32x4_t v79 = vmulq_f32(v76, v74);
      float32x4_t v80 = *((float32x4_t *)a2 + 93);
      float32x4_t v81 = *((float32x4_t *)a2 + 94);
      float32x4_t v82 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v26, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v81)), (int8x16_t)vmulq_f32(v32, v80), v77));
      float32x4_t v83 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v27, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v33, v81)), (int8x16_t)vmulq_f32(v33, v80), (int8x16_t)vaddq_f32(v75, v78)));
      float32x4_t v84 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v28, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v34, v81)), (int8x16_t)vmulq_f32(v34, v80), (int8x16_t)vaddq_f32(v75, v79)));
      float32x4_t v85 = (int8x16_t *)(v6 + v10);
      *float32x4_t v85 = vbslq_s8(v16, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v82, v82, 3));
      v85[1] = vbslq_s8(v16, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v83, v83, 3));
      v85[2] = vbslq_s8(v16, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v84, v84, 3));
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v86) = -v11;
    if ((int)v86 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v86 = v86;
    do
    {
      int8x16_t v87 = *((int8x16_t *)a2 + 15);
      float32x4_t v88 = vmulq_f32(*(float32x4_t *)(v7 + 16 * v86), (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v7 + 16 * v86), 3), *((float32x4_t *)a2 + 16))), *((float32x4_t *)a2 + 18))), *((int8x16_t *)a2 + 3)));
      float32x4_t v89 = *((float32x4_t *)a2 + 75);
      float32x4_t v90 = *((float32x4_t *)a2 + 5);
      float32x4_t v91 = vminq_f32(vmaxq_f32(v88, v89), v90);
      float32x4_t v92 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)v91));
      float32x4_t v93 = vcvtq_f32_s32(vcvtq_s32_f32(v92));
      float32x4_t v94 = vmulq_f32(*((float32x4_t *)a2 + 77), vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v93), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v92, v93))), *((float32x4_t *)a2 + 9))));
      float32x4_t v95 = vcvtq_f32_s32(vcvtq_s32_f32(v94));
      float32x4_t v96 = vsubq_f32(v95, (float32x4_t)vandq_s8((int8x16_t)v90, (int8x16_t)vcgtq_f32(v95, v94)));
      float32x4_t v97 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v94, v96))), *((float32x4_t *)a2 + 12));
      float32x4_t v98 = (float32x4_t)vbslq_s8(v87, (int8x16_t)v88, vbslq_s8((int8x16_t)vcgtq_f32(v89, vsubq_f32(v91, *((float32x4_t *)a2 + 94))), (int8x16_t)vmulq_f32(v91, *((float32x4_t *)a2 + 93)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 91), vmulq_f32(*((float32x4_t *)a2 + 92), (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v96), vmulq_f32(v97, v97)), v89), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14)))))));
      *(int8x16_t *)(v6 + 16 * v86++) = vbslq_s8(v87, (int8x16_t)v88, (int8x16_t)vmulq_laneq_f32(v98, v98, 3));
    }
    while (v86 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec601_nice_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v105 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      int8x16_t v24 = vandq_s8(v23, v22);
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v26));
      float32x4_t v28 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = vminq_f32(vmaxq_f32(v27, v29), v30);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v28, v29), v30);
      float32x4_t v33 = *((float32x4_t *)a2 + 77);
      int8x16_t v34 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vceqq_f32(v33, v29)), v29);
      float32x4_t v35 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v30, (int8x16_t)v31);
      float32x4_t v36 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v30, (int8x16_t)v32);
      int8x16_t v37 = *((int8x16_t *)a2 + 19);
      float32x4_t v38 = *((float32x4_t *)a2 + 20);
      float32x4_t v39 = (float32x4_t)vorrq_s8(vandq_s8(v37, (int8x16_t)v35), (int8x16_t)v30);
      float32x4_t v40 = (float32x4_t)vorrq_s8(vandq_s8(v37, (int8x16_t)v36), (int8x16_t)v30);
      int8x16_t v41 = *((int8x16_t *)a2 + 21);
      float32x4_t v42 = *((float32x4_t *)a2 + 22);
      float32x4_t v43 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x17uLL)), (float32x4_t)vandq_s8(v41, (int8x16_t)vcgtq_f32(v38, v36)));
      float32x4_t v44 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v35, 0x17uLL)), (float32x4_t)vandq_s8(v41, (int8x16_t)vcgtq_f32(v38, v35))), v42);
      float32x4_t v45 = *((float32x4_t *)a2 + 23);
      float32x4_t v46 = *((float32x4_t *)a2 + 24);
      float32x4_t v47 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v39, v45));
      float32x4_t v48 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v40, v45));
      float32x4_t v49 = vaddq_f32(v44, v47);
      float32x4_t v50 = vaddq_f32(vsubq_f32(v43, v42), v48);
      float32x4_t v51 = vsubq_f32(vsubq_f32(v39, v30), vmulq_f32(vmulq_f32(v46, v47), v39));
      float32x4_t v52 = vsubq_f32(vsubq_f32(v40, v30), vmulq_f32(vmulq_f32(v46, v48), v40));
      float32x4_t v53 = vmulq_f32(v51, v51);
      float32x4_t v54 = *((float32x4_t *)a2 + 37);
      float32x4_t v55 = *((float32x4_t *)a2 + 38);
      float32x4_t v56 = vaddq_f32(v54, vmulq_f32(v55, v51));
      float32x4_t v57 = vaddq_f32(v54, vmulq_f32(v55, v52));
      float32x4_t v58 = *((float32x4_t *)a2 + 39);
      float32x4_t v59 = *((float32x4_t *)a2 + 40);
      float32x4_t v60 = vaddq_f32(v58, vmulq_f32(v59, v51));
      float32x4_t v61 = vaddq_f32(v58, vmulq_f32(v59, v52));
      float32x4_t v62 = *((float32x4_t *)a2 + 41);
      float32x4_t v63 = *((float32x4_t *)a2 + 42);
      float32x4_t v64 = vaddq_f32(v62, vmulq_f32(v63, v51));
      float32x4_t v65 = vaddq_f32(v62, vmulq_f32(v63, v52));
      float32x4_t v66 = vmulq_f32(v52, v52);
      float32x4_t v67 = vaddq_f32(v65, vmulq_f32(v66, vaddq_f32(v57, vmulq_f32(v66, v61))));
      float32x4_t v68 = vmulq_f32(v51, vaddq_f32(v64, vmulq_f32(v53, vaddq_f32(v56, vmulq_f32(v53, v60)))));
      float32x4_t v69 = *((float32x4_t *)a2 + 43);
      float32x4_t v70 = *((float32x4_t *)a2 + 44);
      float32x4_t v71 = vaddq_f32(v50, vmulq_f32(v52, vaddq_f32(v69, vmulq_f32(v52, v67))));
      float32x4_t v72 = vmulq_f32(v33, vaddq_f32(v49, vmulq_f32(v51, vaddq_f32(v69, v68))));
      float32x4_t v73 = *((float32x4_t *)a2 + 29);
      float32x4_t v74 = vmulq_f32(v33, v71);
      float32x4_t v75 = vmaxq_f32(v72, v73);
      float32x4_t v76 = vmaxq_f32(v74, v73);
      float32x4_t v77 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
      float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v76));
      float32x4_t v79 = vsubq_f32(v77, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v77, v75)));
      float32x4_t v80 = vsubq_f32(v78, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v78, v76)));
      float32x4_t v81 = vsubq_f32(v75, v79);
      float32x4_t v82 = vsubq_f32(v76, v80);
      float32x4_t v83 = *((float32x4_t *)a2 + 45);
      float32x4_t v84 = *((float32x4_t *)a2 + 46);
      float32x4_t v85 = *((float32x4_t *)a2 + 47);
      float32x4_t v86 = *((float32x4_t *)a2 + 48);
      float32x4_t v87 = vaddq_f32(v30, vmulq_f32(v81, vaddq_f32(v86, vmulq_f32(v81, vaddq_f32(vaddq_f32(v84, vmulq_f32(v81, v85)), vmulq_f32(vmulq_f32(v81, v81), vaddq_f32(v70, vmulq_f32(v83, v81))))))));
      float32x4_t v88 = vaddq_f32(v30, vmulq_f32(v82, vaddq_f32(v86, vmulq_f32(v82, vaddq_f32(vaddq_f32(v84, vmulq_f32(v85, v82)), vmulq_f32(vmulq_f32(v82, v82), vaddq_f32(v70, vmulq_f32(v83, v82))))))));
      int32x4_t v89 = *((int32x4_t *)a2 + 33);
      float32x4_t v90 = vmulq_f32(v87, (float32x4_t)vshlq_n_s32(vaddq_s32(v89, vcvtq_s32_f32(v79)), 0x17uLL));
      float32x4_t v91 = vmulq_f32(v88, (float32x4_t)vshlq_n_s32(vaddq_s32(v89, vcvtq_s32_f32(v80)), 0x17uLL));
      float32x4_t v92 = *((float32x4_t *)a2 + 91);
      float32x4_t v93 = *((float32x4_t *)a2 + 92);
      float32x4_t v94 = vmulq_f32(v93, v91);
      int8x16_t v95 = (int8x16_t)vaddq_f32(v92, vmulq_f32(v93, v90));
      float32x4_t v96 = *((float32x4_t *)a2 + 93);
      int8x16_t v97 = (int8x16_t)vmulq_f32(v31, v96);
      int8x16_t v98 = (int8x16_t)vmulq_f32(v32, v96);
      float32x4_t v99 = *((float32x4_t *)a2 + 94);
      int8x16_t v100 = (int8x16_t)vcgtq_f32(v29, vsubq_f32(v31, v99));
      int8x16_t v101 = (int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v99));
      float32x4_t v102 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, vbslq_s8(v100, v97, v95));
      float32x4_t v103 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v28, vbslq_s8(v101, v98, (int8x16_t)vaddq_f32(v92, v94)));
      float32x4_t v104 = (int8x16_t *)(v6 + v11);
      v104[-1] = vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v102, v102, 3));
      *float32x4_t v104 = vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v103, v103, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v105 = -v10;
    if (v105 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v106 = 16 * v105;
    float32x4_t v107 = *(float32x4_t *)(v7 + v106);
    int8x16_t v108 = *((int8x16_t *)a2 + 15);
    float32x4_t v109 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v110 = vrecpeq_f32(v109);
    float32x4_t v111 = vmulq_f32(v110, vrecpsq_f32(v110, v109));
    float32x4_t v112 = vmulq_f32(v107, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v111, vrecpsq_f32(v111, v109))), *((int8x16_t *)a2 + 3)));
    float32x4_t v113 = *((float32x4_t *)a2 + 75);
    float32x4_t v114 = *((float32x4_t *)a2 + 5);
    float32x4_t v115 = vminq_f32(vmaxq_f32(v112, v113), v114);
    float32x4_t v116 = *((float32x4_t *)a2 + 77);
    float32x4_t v117 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vceqq_f32(v116, v113)), v113), (int8x16_t)v114, (int8x16_t)v115);
    float32x4_t v118 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v117), (int8x16_t)v114);
    float32x4_t v119 = (float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vcgtq_f32(v118, *((float32x4_t *)a2 + 23)));
    float32x4_t v120 = vsubq_f32(vsubq_f32(v118, v114), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v119), v118));
    float32x4_t v121 = vmulq_f32(v120, v120);
    float32x4_t v122 = vmaxq_f32(vmulq_f32(v116, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v117, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v117))), *((float32x4_t *)a2 + 22)), v119), vmulq_f32(v120, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v120, vaddq_f32(
                         vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v120)),
                         vmulq_f32(v121, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v120)), vmulq_f32(v121, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v120))))))))))), *((float32x4_t *)a2 + 29));
    float32x4_t v123 = vcvtq_f32_s32(vcvtq_s32_f32(v122));
    float32x4_t v124 = vsubq_f32(v123, (float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vcgtq_f32(v123, v122)));
    float32x4_t v125 = vsubq_f32(v122, v124);
    float32x4_t v126 = (float32x4_t)vbslq_s8(v108, (int8x16_t)v112, vbslq_s8((int8x16_t)vcgtq_f32(v113, vsubq_f32(v115, *((float32x4_t *)a2 + 94))), (int8x16_t)vmulq_f32(v115, *((float32x4_t *)a2 + 93)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 91), vmulq_f32(*((float32x4_t *)a2 + 92), vmulq_f32(vaddq_f32(v114, vmulq_f32(v125, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v125, vaddq_f32(
                                                       vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v125)), vmulq_f32(vmulq_f32(v125, v125), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v125)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v124)), 0x17uLL))))));
    *(int8x16_t *)(v6 + v106) = vbslq_s8(v108, (int8x16_t)v112, (int8x16_t)vmulq_laneq_f32(v126, v126, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec601_half_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v79 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 75);
      float32x4_t v27 = *((float32x4_t *)a2 + 5);
      float32x4_t v28 = vminq_f32(vmaxq_f32(v24, v26), v27);
      float32x4_t v29 = vminq_f32(vmaxq_f32(v25, v26), v27);
      int8x16_t v30 = *((int8x16_t *)a2 + 19);
      float32x4_t v31 = *((float32x4_t *)a2 + 20);
      float32x4_t v32 = (float32x4_t)vorrq_s8(vandq_s8(v30, (int8x16_t)v28), (int8x16_t)v27);
      int8x16_t v33 = *((int8x16_t *)a2 + 21);
      float32x4_t v34 = *((float32x4_t *)a2 + 22);
      float32x4_t v35 = (float32x4_t)vorrq_s8(vandq_s8(v30, (int8x16_t)v29), (int8x16_t)v27);
      float32x4_t v36 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v28, 0x17uLL)), (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v31, v28))), v34);
      float32x4_t v37 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v29, 0x17uLL)), (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v31, v29))), v34);
      float32x4_t v38 = *((float32x4_t *)a2 + 23);
      float32x4_t v39 = *((float32x4_t *)a2 + 24);
      float32x4_t v40 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v32, v38));
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v35, v38));
      float32x4_t v42 = vaddq_f32(v37, v41);
      float32x4_t v43 = vsubq_f32(vsubq_f32(v32, v27), vmulq_f32(vmulq_f32(v39, v40), v32));
      float32x4_t v44 = vsubq_f32(vsubq_f32(v35, v27), vmulq_f32(vmulq_f32(v39, v41), v35));
      float32x4_t v45 = *((float32x4_t *)a2 + 25);
      float32x4_t v46 = *((float32x4_t *)a2 + 26);
      float32x4_t v47 = *((float32x4_t *)a2 + 27);
      float32x4_t v48 = *((float32x4_t *)a2 + 28);
      float32x4_t v49 = vaddq_f32(v42, vmulq_f32(v44, vaddq_f32(vaddq_f32(v47, vmulq_f32(v44, v48)), vmulq_f32(vmulq_f32(v44, v44), vaddq_f32(v45, vmulq_f32(v46, v44))))));
      float32x4_t v50 = *((float32x4_t *)a2 + 77);
      float32x4_t v51 = vmulq_f32(v50, vaddq_f32(vaddq_f32(v36, v40), vmulq_f32(v43, vaddq_f32(vaddq_f32(v47, vmulq_f32(v43, v48)), vmulq_f32(vmulq_f32(v43, v43), vaddq_f32(v45, vmulq_f32(v46, v43)))))));
      float32x4_t v52 = vmulq_f32(v50, v49);
      float32x4_t v53 = *((float32x4_t *)a2 + 29);
      float32x4_t v54 = *((float32x4_t *)a2 + 30);
      float32x4_t v55 = vmaxq_f32(v51, v53);
      float32x4_t v56 = vmaxq_f32(v52, v53);
      float32x4_t v57 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
      float32x4_t v58 = vcvtq_f32_s32(vcvtq_s32_f32(v56));
      float32x4_t v59 = vsubq_f32(v57, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v57, v55)));
      float32x4_t v60 = vsubq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v58, v56)));
      float32x4_t v61 = vsubq_f32(v55, v59);
      float32x4_t v62 = vsubq_f32(v56, v60);
      float32x4_t v63 = *((float32x4_t *)a2 + 31);
      float32x4_t v64 = *((float32x4_t *)a2 + 32);
      float32x4_t v65 = vaddq_f32(v27, vmulq_f32(v61, vaddq_f32(v64, vmulq_f32(v61, vaddq_f32(v54, vmulq_f32(v63, v61))))));
      float32x4_t v66 = vaddq_f32(v27, vmulq_f32(v62, vaddq_f32(v64, vmulq_f32(v62, vaddq_f32(v54, vmulq_f32(v63, v62))))));
      int32x4_t v67 = *((int32x4_t *)a2 + 33);
      float32x4_t v68 = vmulq_f32(v65, (float32x4_t)vshlq_n_s32(vaddq_s32(v67, vcvtq_s32_f32(v59)), 0x17uLL));
      float32x4_t v69 = vmulq_f32(v66, (float32x4_t)vshlq_n_s32(vaddq_s32(v67, vcvtq_s32_f32(v60)), 0x17uLL));
      float32x4_t v70 = *((float32x4_t *)a2 + 91);
      float32x4_t v71 = *((float32x4_t *)a2 + 92);
      float32x4_t v72 = vmulq_f32(v71, v69);
      int8x16_t v73 = (int8x16_t)vaddq_f32(v70, vmulq_f32(v71, v68));
      float32x4_t v74 = *((float32x4_t *)a2 + 93);
      float32x4_t v75 = *((float32x4_t *)a2 + 94);
      float32x4_t v76 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v24, vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v28, v75)), (int8x16_t)vmulq_f32(v28, v74), v73));
      float32x4_t v77 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v25, vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v29, v75)), (int8x16_t)vmulq_f32(v29, v74), (int8x16_t)vaddq_f32(v70, v72)));
      float32x4_t v78 = (int8x16_t *)(v6 + v11);
      v78[-1] = vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v76, v76, 3));
      int8x16_t *v78 = vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v77, v77, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v79 = -v10;
    if (v79 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v80 = 16 * v79;
    float32x4_t v81 = *(float32x4_t *)(v7 + v80);
    int8x16_t v82 = *((int8x16_t *)a2 + 15);
    float32x4_t v83 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v84 = vmulq_f32(vrecpeq_f32(v83), *((float32x4_t *)a2 + 18));
    float32x4_t v85 = vmulq_f32(v81, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v84, vrecpsq_f32(v84, v83))), *((int8x16_t *)a2 + 3)));
    float32x4_t v86 = *((float32x4_t *)a2 + 75);
    float32x4_t v87 = *((float32x4_t *)a2 + 5);
    float32x4_t v88 = vminq_f32(vmaxq_f32(v85, v86), v87);
    float32x4_t v89 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v88), (int8x16_t)v87);
    float32x4_t v90 = (float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vcgtq_f32(v89, *((float32x4_t *)a2 + 23)));
    float32x4_t v91 = vsubq_f32(vsubq_f32(v89, v87), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v90), v89));
    float32x4_t v92 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 77), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v88, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v88))), *((float32x4_t *)a2 + 22)), v90), vmulq_f32(v91, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v91, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v91, v91), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v91))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v93 = vcvtq_f32_s32(vcvtq_s32_f32(v92));
    float32x4_t v94 = vsubq_f32(v93, (float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vcgtq_f32(v93, v92)));
    float32x4_t v95 = vsubq_f32(v92, v94);
    float32x4_t v96 = (float32x4_t)vbslq_s8(v82, (int8x16_t)v85, vbslq_s8((int8x16_t)vcgtq_f32(v86, vsubq_f32(v88, *((float32x4_t *)a2 + 94))), (int8x16_t)vmulq_f32(v88, *((float32x4_t *)a2 + 93)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 91), vmulq_f32(*((float32x4_t *)a2 + 92), vmulq_f32(vaddq_f32(v87, vmulq_f32(v95, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v95, vaddq_f32(
                                                      *((float32x4_t *)a2 + 30),
                                                      vmulq_f32(*((float32x4_t *)a2 + 31), v95)))))),
                                            (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v94)), 0x17uLL))))));
    *(int8x16_t *)(v6 + v80) = vbslq_s8(v82, (int8x16_t)v85, (int8x16_t)vmulq_laneq_f32(v96, v96, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec601_halfTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v96 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v14 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 82);
      float32x4_t v27 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v24, (int8x16_t)vmaxq_f32(v24, v26));
      float32x4_t v28 = *((float32x4_t *)a2 + 75);
      float32x4_t v29 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmaxq_f32(v25, v26));
      int8x16_t v30 = (int8x16_t)vcgtq_f32(v28, v27);
      int8x16_t v31 = (int8x16_t)vcgtq_f32(v28, v29);
      int8x16_t v32 = *((int8x16_t *)a2 + 83);
      float32x4_t v33 = *((float32x4_t *)a2 + 5);
      float32x4_t v34 = (float32x4_t)vbslq_s8(v31, v32, (int8x16_t)v33);
      float32x4_t v35 = vmulq_f32(v27, (float32x4_t)vbslq_s8(v30, v32, (int8x16_t)v33));
      float32x4_t v36 = vmulq_f32(v29, v34);
      float32x4_t v37 = *((float32x4_t *)a2 + 84);
      float32x4_t v38 = vminq_f32(v35, v37);
      int8x16_t v39 = *((int8x16_t *)a2 + 19);
      float32x4_t v40 = *((float32x4_t *)a2 + 20);
      float32x4_t v41 = vminq_f32(v36, v37);
      float32x4_t v42 = (float32x4_t)vorrq_s8(vandq_s8(v39, (int8x16_t)v38), (int8x16_t)v33);
      float32x4_t v43 = (float32x4_t)vorrq_s8(vandq_s8(v39, (int8x16_t)v41), (int8x16_t)v33);
      int8x16_t v44 = *((int8x16_t *)a2 + 21);
      float32x4_t v45 = *((float32x4_t *)a2 + 22);
      float32x4_t v46 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v41, 0x17uLL)), (float32x4_t)vandq_s8(v44, (int8x16_t)vcgtq_f32(v40, v41)));
      float32x4_t v47 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v38, 0x17uLL)), (float32x4_t)vandq_s8(v44, (int8x16_t)vcgtq_f32(v40, v38))), v45);
      float32x4_t v48 = *((float32x4_t *)a2 + 23);
      float32x4_t v49 = *((float32x4_t *)a2 + 24);
      float32x4_t v50 = (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v42, v48));
      float32x4_t v51 = (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v43, v48));
      float32x4_t v52 = vaddq_f32(v47, v50);
      float32x4_t v53 = vaddq_f32(vsubq_f32(v46, v45), v51);
      float32x4_t v54 = vsubq_f32(vsubq_f32(v42, v33), vmulq_f32(vmulq_f32(v49, v50), v42));
      float32x4_t v55 = vsubq_f32(vsubq_f32(v43, v33), vmulq_f32(vmulq_f32(v49, v51), v43));
      float32x4_t v56 = *((float32x4_t *)a2 + 25);
      float32x4_t v57 = *((float32x4_t *)a2 + 26);
      float32x4_t v58 = vaddq_f32(v56, vmulq_f32(v57, v54));
      float32x4_t v59 = vaddq_f32(v56, vmulq_f32(v57, v55));
      float32x4_t v60 = *((float32x4_t *)a2 + 27);
      float32x4_t v61 = *((float32x4_t *)a2 + 28);
      float32x4_t v62 = vaddq_f32(v53, vmulq_f32(v55, vaddq_f32(vaddq_f32(v60, vmulq_f32(v55, v61)), vmulq_f32(vmulq_f32(v55, v55), v59))));
      float32x4_t v63 = *((float32x4_t *)a2 + 77);
      float32x4_t v64 = vmulq_f32(v63, vaddq_f32(v52, vmulq_f32(v54, vaddq_f32(vaddq_f32(v60, vmulq_f32(v54, v61)), vmulq_f32(vmulq_f32(v54, v54), v58)))));
      float32x4_t v65 = vmulq_f32(v63, v62);
      float32x4_t v66 = *((float32x4_t *)a2 + 29);
      float32x4_t v67 = *((float32x4_t *)a2 + 30);
      float32x4_t v68 = vmaxq_f32(v64, v66);
      float32x4_t v69 = vmaxq_f32(v65, v66);
      float32x4_t v70 = vcvtq_f32_s32(vcvtq_s32_f32(v68));
      float32x4_t v71 = vcvtq_f32_s32(vcvtq_s32_f32(v69));
      float32x4_t v72 = vsubq_f32(v70, (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v70, v68)));
      float32x4_t v73 = vsubq_f32(v71, (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v71, v69)));
      float32x4_t v74 = vsubq_f32(v68, v72);
      float32x4_t v75 = vsubq_f32(v69, v73);
      float32x4_t v76 = *((float32x4_t *)a2 + 31);
      float32x4_t v77 = *((float32x4_t *)a2 + 32);
      float32x4_t v78 = vaddq_f32(v33, vmulq_f32(v74, vaddq_f32(v77, vmulq_f32(v74, vaddq_f32(v67, vmulq_f32(v76, v74))))));
      float32x4_t v79 = vaddq_f32(v33, vmulq_f32(v75, vaddq_f32(v77, vmulq_f32(v75, vaddq_f32(v67, vmulq_f32(v76, v75))))));
      int32x4_t v80 = vcvtq_s32_f32(v73);
      int32x4_t v81 = *((int32x4_t *)a2 + 33);
      float32x4_t v82 = vmulq_f32(v78, (float32x4_t)vshlq_n_s32(vaddq_s32(v81, vcvtq_s32_f32(v72)), 0x17uLL));
      float32x4_t v83 = vmulq_f32(v79, (float32x4_t)vshlq_n_s32(vaddq_s32(v81, v80), 0x17uLL));
      float32x4_t v84 = *((float32x4_t *)a2 + 91);
      float32x4_t v85 = *((float32x4_t *)a2 + 92);
      int8x16_t v86 = (int8x16_t)vaddq_f32(v84, vmulq_f32(v85, v82));
      float32x4_t v87 = vmulq_f32(v85, v83);
      float32x4_t v88 = *((float32x4_t *)a2 + 93);
      int8x16_t v89 = (int8x16_t)vaddq_f32(v84, v87);
      float32x4_t v90 = *((float32x4_t *)a2 + 94);
      float32x4_t v91 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v26, (int8x16_t)v33);
      float32x4_t v92 = (float32x4_t)vbslq_s8(v31, (int8x16_t)v26, (int8x16_t)v33);
      float32x4_t v93 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v24, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v28, vsubq_f32(v35, v90)), (int8x16_t)vmulq_f32(v35, v88), v86), v91));
      float32x4_t v94 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v28, vsubq_f32(v36, v90)), (int8x16_t)vmulq_f32(v36, v88), v89), v92));
      float32x4_t v95 = (int8x16_t *)(v6 + v11);
      v95[-1] = vbslq_s8(v14, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v93, v93, 3));
      *float32x4_t v95 = vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v94, v94, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v96 = -v10;
    if (v96 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v97 = 16 * v96;
    float32x4_t v98 = *(float32x4_t *)(v7 + v97);
    int8x16_t v99 = *((int8x16_t *)a2 + 15);
    float32x4_t v100 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v101 = vmulq_f32(vrecpeq_f32(v100), *((float32x4_t *)a2 + 18));
    float32x4_t v102 = vmulq_f32(v98, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v101, vrecpsq_f32(v101, v100))), *((int8x16_t *)a2 + 3)));
    float32x4_t v103 = *((float32x4_t *)a2 + 82);
    float32x4_t v104 = (float32x4_t)vbslq_s8(v99, (int8x16_t)v102, (int8x16_t)vmaxq_f32(v102, v103));
    float32x4_t v105 = *((float32x4_t *)a2 + 75);
    int8x16_t v106 = (int8x16_t)vcgtq_f32(v105, v104);
    float32x4_t v107 = *((float32x4_t *)a2 + 5);
    float32x4_t v108 = vmulq_f32(v104, (float32x4_t)vbslq_s8(v106, *((int8x16_t *)a2 + 83), (int8x16_t)v107));
    float32x4_t v109 = vminq_f32(v108, *((float32x4_t *)a2 + 84));
    float32x4_t v110 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v109), (int8x16_t)v107);
    float32x4_t v111 = (float32x4_t)vandq_s8((int8x16_t)v107, (int8x16_t)vcgtq_f32(v110, *((float32x4_t *)a2 + 23)));
    float32x4_t v112 = vsubq_f32(vsubq_f32(v110, v107), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v111), v110));
    float32x4_t v113 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 77), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v109, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v109))), *((float32x4_t *)a2 + 22)), v111), vmulq_f32(v112, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v112, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v112, v112), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v112))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v114 = vcvtq_f32_s32(vcvtq_s32_f32(v113));
    float32x4_t v115 = vsubq_f32(v114, (float32x4_t)vandq_s8((int8x16_t)v107, (int8x16_t)vcgtq_f32(v114, v113)));
    float32x4_t v116 = vsubq_f32(v113, v115);
    float32x4_t v117 = (float32x4_t)vbslq_s8(v99, (int8x16_t)v102, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v105, vsubq_f32(v108, *((float32x4_t *)a2 + 94))), (int8x16_t)vmulq_f32(v108, *((float32x4_t *)a2 + 93)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 91), vmulq_f32(*((float32x4_t *)a2 + 92), vmulq_f32(vaddq_f32(v107, vmulq_f32(v116, vaddq_f32(*((float32x4_t *)a2 + 32),
                                                                             vmulq_f32(v116, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v116)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v115)), 0x17uLL))))), (float32x4_t)vbslq_s8(v106, (int8x16_t)v103, (int8x16_t)v107)));
    *(int8x16_t *)(v6 + v97) = vbslq_s8(v99, (int8x16_t)v102, (int8x16_t)vmulq_laneq_f32(v117, v117, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec601_niceTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v110 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v14 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17));
      int8x16_t v24 = *((int8x16_t *)a2 + 17);
      int8x16_t v25 = *((int8x16_t *)a2 + 3);
      float32x4_t v26 = vmulq_f32(v12, (float32x4_t)vorrq_s8(vandq_s8(v24, v22), v25));
      float32x4_t v27 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v24, v23), v25));
      float32x4_t v28 = *((float32x4_t *)a2 + 82);
      float32x4_t v29 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v26, (int8x16_t)vmaxq_f32(v26, v28));
      float32x4_t v30 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmaxq_f32(v27, v28));
      float32x4_t v31 = *((float32x4_t *)a2 + 75);
      int8x16_t v32 = (int8x16_t)vcgtq_f32(v31, v29);
      int8x16_t v33 = (int8x16_t)vcgtq_f32(v31, v30);
      int8x16_t v34 = *((int8x16_t *)a2 + 83);
      float32x4_t v35 = *((float32x4_t *)a2 + 5);
      float32x4_t v36 = (float32x4_t)vbslq_s8(v33, v34, (int8x16_t)v35);
      float32x4_t v37 = vmulq_f32(v29, (float32x4_t)vbslq_s8(v32, v34, (int8x16_t)v35));
      float32x4_t v38 = vmulq_f32(v30, v36);
      float32x4_t v39 = *((float32x4_t *)a2 + 84);
      float32x4_t v40 = *((float32x4_t *)a2 + 77);
      int8x16_t v41 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vceqq_f32(v40, v31)), v31);
      float32x4_t v42 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v35, (int8x16_t)vminq_f32(v37, v39));
      float32x4_t v43 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v35, (int8x16_t)vminq_f32(v38, v39));
      int8x16_t v44 = *((int8x16_t *)a2 + 19);
      float32x4_t v45 = *((float32x4_t *)a2 + 20);
      float32x4_t v46 = (float32x4_t)vorrq_s8(vandq_s8(v44, (int8x16_t)v42), (int8x16_t)v35);
      int8x16_t v47 = *((int8x16_t *)a2 + 21);
      float32x4_t v48 = *((float32x4_t *)a2 + 22);
      float32x4_t v49 = (float32x4_t)vorrq_s8(vandq_s8(v44, (int8x16_t)v43), (int8x16_t)v35);
      float32x4_t v50 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v43, 0x17uLL)), (float32x4_t)vandq_s8(v47, (int8x16_t)vcgtq_f32(v45, v43)));
      float32x4_t v51 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v42, 0x17uLL)), (float32x4_t)vandq_s8(v47, (int8x16_t)vcgtq_f32(v45, v42))), v48);
      float32x4_t v52 = *((float32x4_t *)a2 + 23);
      float32x4_t v53 = *((float32x4_t *)a2 + 24);
      float32x4_t v54 = (float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vcgtq_f32(v46, v52));
      float32x4_t v55 = (float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vcgtq_f32(v49, v52));
      float32x4_t v56 = vaddq_f32(v51, v54);
      float32x4_t v57 = vmulq_f32(v53, v54);
      float32x4_t v58 = vmulq_f32(vmulq_f32(v53, v55), v49);
      float32x4_t v59 = vaddq_f32(vsubq_f32(v50, v48), v55);
      float32x4_t v60 = vsubq_f32(vsubq_f32(v46, v35), vmulq_f32(v57, v46));
      float32x4_t v61 = vsubq_f32(vsubq_f32(v49, v35), v58);
      float32x4_t v62 = vmulq_f32(v60, v60);
      float32x4_t v63 = *((float32x4_t *)a2 + 37);
      float32x4_t v64 = *((float32x4_t *)a2 + 38);
      float32x4_t v65 = vmulq_f32(v61, v61);
      float32x4_t v66 = *((float32x4_t *)a2 + 39);
      float32x4_t v67 = *((float32x4_t *)a2 + 40);
      float32x4_t v68 = vaddq_f32(v63, vmulq_f32(v64, v60));
      float32x4_t v69 = vaddq_f32(v66, vmulq_f32(v67, v60));
      float32x4_t v70 = vaddq_f32(v66, vmulq_f32(v67, v61));
      float32x4_t v71 = vaddq_f32(v63, vmulq_f32(v64, v61));
      float32x4_t v73 = *((float32x4_t *)a2 + 41);
      float32x4_t v72 = *((float32x4_t *)a2 + 42);
      float32x4_t v74 = vmulq_f32(v60, vaddq_f32(vaddq_f32(v73, vmulq_f32(v72, v60)), vmulq_f32(v62, vaddq_f32(v68, vmulq_f32(v62, v69)))));
      float32x4_t v75 = vmulq_f32(v61, vaddq_f32(vaddq_f32(v73, vmulq_f32(v72, v61)), vmulq_f32(v65, vaddq_f32(v71, vmulq_f32(v65, v70)))));
      float32x4_t v76 = *((float32x4_t *)a2 + 43);
      float32x4_t v77 = *((float32x4_t *)a2 + 44);
      float32x4_t v78 = vmulq_f32(v40, vaddq_f32(v56, vmulq_f32(v60, vaddq_f32(v76, v74))));
      float32x4_t v79 = vmulq_f32(v40, vaddq_f32(v59, vmulq_f32(v61, vaddq_f32(v76, v75))));
      float32x4_t v80 = *((float32x4_t *)a2 + 29);
      float32x4_t v81 = vmaxq_f32(v78, v80);
      float32x4_t v82 = vmaxq_f32(v79, v80);
      float32x4_t v83 = vcvtq_f32_s32(vcvtq_s32_f32(v81));
      float32x4_t v84 = vcvtq_f32_s32(vcvtq_s32_f32(v82));
      float32x4_t v85 = vsubq_f32(v83, (float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vcgtq_f32(v83, v81)));
      float32x4_t v86 = vsubq_f32(v84, (float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vcgtq_f32(v84, v82)));
      float32x4_t v87 = vsubq_f32(v81, v85);
      float32x4_t v88 = vsubq_f32(v82, v86);
      float32x4_t v89 = *((float32x4_t *)a2 + 45);
      float32x4_t v90 = *((float32x4_t *)a2 + 46);
      float32x4_t v91 = vaddq_f32(v77, vmulq_f32(v89, v87));
      float32x4_t v92 = vaddq_f32(v77, vmulq_f32(v89, v88));
      float32x4_t v93 = *((float32x4_t *)a2 + 47);
      float32x4_t v94 = *((float32x4_t *)a2 + 48);
      int32x4_t v95 = *((int32x4_t *)a2 + 33);
      float32x4_t v96 = vmulq_f32(vaddq_f32(v35, vmulq_f32(v87, vaddq_f32(v94, vmulq_f32(v87, vaddq_f32(vaddq_f32(v90, vmulq_f32(v87, v93)), vmulq_f32(vmulq_f32(v87, v87), v91)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v95, vcvtq_s32_f32(v85)), 0x17uLL));
      float32x4_t v97 = vmulq_f32(vaddq_f32(v35, vmulq_f32(v88, vaddq_f32(v94, vmulq_f32(v88, vaddq_f32(vaddq_f32(v90, vmulq_f32(v93, v88)), vmulq_f32(vmulq_f32(v88, v88), v92)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v95, vcvtq_s32_f32(v86)), 0x17uLL));
      float32x4_t v98 = *((float32x4_t *)a2 + 91);
      float32x4_t v99 = *((float32x4_t *)a2 + 92);
      int8x16_t v100 = (int8x16_t)vaddq_f32(v98, vmulq_f32(v99, v96));
      float32x4_t v101 = vmulq_f32(v99, v97);
      float32x4_t v102 = *((float32x4_t *)a2 + 93);
      int8x16_t v103 = (int8x16_t)vaddq_f32(v98, v101);
      float32x4_t v104 = *((float32x4_t *)a2 + 94);
      float32x4_t v105 = (float32x4_t)vbslq_s8(v32, (int8x16_t)v28, (int8x16_t)v35);
      float32x4_t v106 = (float32x4_t)vbslq_s8(v33, (int8x16_t)v28, (int8x16_t)v35);
      float32x4_t v107 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v26, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v31, vsubq_f32(v37, v104)), (int8x16_t)vmulq_f32(v37, v102), v100), v105));
      float32x4_t v108 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v31, vsubq_f32(v38, v104)), (int8x16_t)vmulq_f32(v38, v102), v103), v106));
      float32x4_t v109 = (int8x16_t *)(v6 + v11);
      v109[-1] = vbslq_s8(v14, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v107, v107, 3));
      *float32x4_t v109 = vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v108, v108, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v110 = -v10;
    if (v110 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v111 = 16 * v110;
    float32x4_t v112 = *(float32x4_t *)(v7 + v111);
    int8x16_t v113 = *((int8x16_t *)a2 + 15);
    float32x4_t v114 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v115 = vrecpeq_f32(v114);
    float32x4_t v116 = vmulq_f32(v115, vrecpsq_f32(v115, v114));
    float32x4_t v117 = vmulq_f32(v112, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v116, vrecpsq_f32(v116, v114))), *((int8x16_t *)a2 + 3)));
    float32x4_t v118 = *((float32x4_t *)a2 + 82);
    float32x4_t v119 = (float32x4_t)vbslq_s8(v113, (int8x16_t)v117, (int8x16_t)vmaxq_f32(v117, v118));
    float32x4_t v120 = *((float32x4_t *)a2 + 75);
    int8x16_t v121 = (int8x16_t)vcgtq_f32(v120, v119);
    float32x4_t v122 = *((float32x4_t *)a2 + 5);
    float32x4_t v123 = vmulq_f32(v119, (float32x4_t)vbslq_s8(v121, *((int8x16_t *)a2 + 83), (int8x16_t)v122));
    float32x4_t v124 = *((float32x4_t *)a2 + 77);
    float32x4_t v125 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v122, (int8x16_t)vceqq_f32(v124, v120)), v120), (int8x16_t)v122, (int8x16_t)vminq_f32(v123, *((float32x4_t *)a2 + 84)));
    float32x4_t v126 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v125), (int8x16_t)v122);
    float32x4_t v127 = (float32x4_t)vandq_s8((int8x16_t)v122, (int8x16_t)vcgtq_f32(v126, *((float32x4_t *)a2 + 23)));
    float32x4_t v128 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v125, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v125))), *((float32x4_t *)a2 + 22)), v127);
    float32x4_t v129 = vsubq_f32(vsubq_f32(v126, v122), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v127), v126));
    float32x4_t v130 = vmulq_f32(v129, v129);
    float32x4_t v131 = vmaxq_f32(vmulq_f32(v124, vaddq_f32(v128, vmulq_f32(v129, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v129, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v129)), vmulq_f32(v130, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v129)), vmulq_f32(v130, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v129))))))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v132 = vcvtq_f32_s32(vcvtq_s32_f32(v131));
    float32x4_t v133 = vsubq_f32(v132, (float32x4_t)vandq_s8((int8x16_t)v122, (int8x16_t)vcgtq_f32(v132, v131)));
    float32x4_t v134 = vsubq_f32(v131, v133);
    float32x4_t v135 = (float32x4_t)vbslq_s8(v113, (int8x16_t)v117, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v120, vsubq_f32(v123, *((float32x4_t *)a2 + 94))), (int8x16_t)vmulq_f32(v123, *((float32x4_t *)a2 + 93)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 91), vmulq_f32(*((float32x4_t *)a2 + 92), vmulq_f32(vaddq_f32(v122, vmulq_f32(v134, vaddq_f32(*((float32x4_t *)a2 + 48),
                                                                             vmulq_f32(v134, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v134)), vmulq_f32(vmulq_f32(v134, v134), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v134)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v133)), 0x17uLL))))),
                                       (float32x4_t)vbslq_s8(v121, (int8x16_t)v118, (int8x16_t)v122)));
    *(int8x16_t *)(v6 + v111) = vbslq_s8(v113, (int8x16_t)v117, (int8x16_t)vmulq_laneq_f32(v135, v135, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec601_fast_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v56 = 0;
        uint64_t v57 = 16 * v8;
        uint64_t v58 = 16 * v7;
        uint64_t v59 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v60 = 0;
          do
          {
            int8x16_t v61 = *((int8x16_t *)a2 + 15);
            float32x4_t v62 = vmulq_f32(v5[v60 / 0x10], (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5[v60 / 0x10], 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
            float32x4_t v63 = vminq_f32(vmaxq_f32(v62, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v64 = (float32x4_t)vbslq_s8(v61, (int8x16_t)v62, (int8x16_t)vmulq_f32(v63, v63));
            v6[v60 / 0x10] = vbslq_s8(v61, (int8x16_t)v62, (int8x16_t)vmulq_laneq_f32(v64, v64, 3));
            v60 += 16;
          }
          while (v59 != v60);
          ++v56;
          int v5 = (float32x4_t *)((char *)v5 + v57);
          uint64_t v6 = (int8x16_t *)((char *)v6 + v58);
        }
        while (v56 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      float32x4_t v12 = v5 + 4;
      float32x4_t v13 = v6 + 4;
      do
      {
        unint64_t v14 = 0;
        float32x4_t v15 = v13;
        float32x4_t v16 = v12;
        uint64_t v17 = 2;
        do
        {
          float32x4_t v18 = v5[v17 - 2];
          float32x4_t v19 = v5[v17 - 1];
          float32x4_t v20 = v5[v17];
          float32x4_t v21 = v5[v17 + 1];
          int8x16_t v23 = *((int8x16_t *)a2 + 15);
          float32x4_t v22 = *((float32x4_t *)a2 + 16);
          int8x16_t v24 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3), v22));
          int8x16_t v25 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3), v22));
          int8x16_t v26 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 3), v22));
          int8x16_t v27 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 3), v22));
          int8x16_t v28 = *((int8x16_t *)a2 + 17);
          int8x16_t v29 = vandq_s8(v28, v24);
          int8x16_t v30 = vandq_s8(v28, v25);
          int8x16_t v31 = vandq_s8(v28, v26);
          int8x16_t v32 = vandq_s8(v28, v27);
          int8x16_t v33 = *((int8x16_t *)a2 + 3);
          float32x4_t v34 = vmulq_f32(v18, (float32x4_t)vorrq_s8(v29, v33));
          float32x4_t v35 = vmulq_f32(v19, (float32x4_t)vorrq_s8(v30, v33));
          float32x4_t v36 = vmulq_f32(v20, (float32x4_t)vorrq_s8(v31, v33));
          float32x4_t v37 = vmulq_f32(v21, (float32x4_t)vorrq_s8(v32, v33));
          float32x4_t v38 = *((float32x4_t *)a2 + 75);
          float32x4_t v39 = *((float32x4_t *)a2 + 5);
          float32x4_t v40 = vminq_f32(vmaxq_f32(v34, v38), v39);
          float32x4_t v41 = vminq_f32(vmaxq_f32(v35, v38), v39);
          float32x4_t v42 = vminq_f32(vmaxq_f32(v36, v38), v39);
          float32x4_t v43 = vminq_f32(vmaxq_f32(v37, v38), v39);
          int8x16_t v44 = v16;
          float32x4_t v45 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v34, (int8x16_t)vmulq_f32(v40, v40));
          float32x4_t v46 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v35, (int8x16_t)vmulq_f32(v41, v41));
          float32x4_t v47 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v36, (int8x16_t)vmulq_f32(v42, v42));
          float32x4_t v48 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v37, (int8x16_t)vmulq_f32(v43, v43));
          float32x4_t v49 = v15;
          float32x4_t v50 = &v6[v17];
          v14 += 4;
          v50[-2] = vbslq_s8(v23, (int8x16_t)v34, (int8x16_t)vmulq_laneq_f32(v45, v45, 3));
          v50[-1] = vbslq_s8(v23, (int8x16_t)v35, (int8x16_t)vmulq_laneq_f32(v46, v46, 3));
          *float32x4_t v50 = vbslq_s8(v23, (int8x16_t)v36, (int8x16_t)vmulq_laneq_f32(v47, v47, 3));
          v50[1] = vbslq_s8(v23, (int8x16_t)v37, (int8x16_t)vmulq_laneq_f32(v48, v48, 3));
          v17 += 4;
          v16 += 4;
          float32x4_t v15 = v49 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            float32x4_t v51 = *v44++;
            int8x16_t v52 = *((int8x16_t *)a2 + 15);
            float32x4_t v53 = vmulq_f32(v51, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
            float32x4_t v54 = vminq_f32(vmaxq_f32(v53, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v55 = (float32x4_t)vbslq_s8(v52, (int8x16_t)v53, (int8x16_t)vmulq_f32(v54, v54));
            *v49++ = vbslq_s8(v52, (int8x16_t)v53, (int8x16_t)vmulq_laneq_f32(v55, v55, 3));
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        uint64_t v6 = (int8x16_t *)((char *)v6 + v10);
        int v5 = (float32x4_t *)((char *)v5 + v11);
        float32x4_t v12 = (float32x4_t *)((char *)v12 + v11);
        float32x4_t v13 = (int8x16_t *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

uint64_t Getinv_rec601_fixed_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v84) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v10 + 32);
      int8x16_t v16 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v17 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15));
      float32x4_t v18 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15));
      float32x4_t v19 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v15));
      int8x16_t v21 = *((int8x16_t *)a2 + 17);
      float32x4_t v20 = *((float32x4_t *)a2 + 18);
      int8x16_t v22 = (int8x16_t)vmulq_f32(v19, v20);
      int8x16_t v23 = vandq_s8(v21, (int8x16_t)vmulq_f32(v17, v20));
      int8x16_t v24 = vandq_s8(v21, (int8x16_t)vmulq_f32(v18, v20));
      int8x16_t v25 = *((int8x16_t *)a2 + 3);
      float32x4_t v26 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v23, v25));
      float32x4_t v27 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v24, v25));
      float32x4_t v28 = vmulq_f32(v14, (float32x4_t)vorrq_s8(vandq_s8(v21, v22), v25));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = *((float32x4_t *)a2 + 6);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v26, v29), v30);
      float32x4_t v33 = vminq_f32(vmaxq_f32(v27, v29), v30);
      float32x4_t v34 = vminq_f32(vmaxq_f32(v28, v29), v30);
      float32x4_t v35 = *((float32x4_t *)a2 + 95);
      float32x4_t v36 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)vaddq_f32(v32, v35)));
      float32x4_t v37 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)vaddq_f32(v33, v35)));
      float32x4_t v38 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)vaddq_f32(v34, v35)));
      float32x4_t v39 = vcvtq_f32_s32(vcvtq_s32_f32(v36));
      float32x4_t v40 = vcvtq_f32_s32(vcvtq_s32_f32(v37));
      float32x4_t v41 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
      float32x4_t v42 = *((float32x4_t *)a2 + 7);
      float32x4_t v43 = *((float32x4_t *)a2 + 8);
      float32x4_t v44 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v36, v39), v42));
      float32x4_t v45 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v37, v40), v42));
      float32x4_t v46 = vrsqrteq_f32(vaddq_f32(v42, vsubq_f32(v38, v41)));
      float32x4_t v47 = vaddq_f32(v43, v39);
      float32x4_t v48 = vaddq_f32(v43, v40);
      float32x4_t v49 = vaddq_f32(v43, v41);
      float32x4_t v50 = *((float32x4_t *)a2 + 9);
      float32x4_t v51 = *((float32x4_t *)a2 + 10);
      float32x4_t v52 = vsubq_f32(v47, vmulq_f32(v44, v50));
      float32x4_t v53 = vsubq_f32(v48, vmulq_f32(v45, v50));
      float32x4_t v54 = *((float32x4_t *)a2 + 86);
      float32x4_t v55 = vmulq_f32(v54, v52);
      float32x4_t v56 = vmulq_f32(v54, v53);
      float32x4_t v57 = vmulq_f32(v54, vsubq_f32(v49, vmulq_f32(v46, v50)));
      float32x4_t v58 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
      float32x4_t v59 = vcvtq_f32_s32(vcvtq_s32_f32(v56));
      float32x4_t v60 = vcvtq_f32_s32(vcvtq_s32_f32(v57));
      float32x4_t v61 = vsubq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v58, v55)));
      float32x4_t v62 = vsubq_f32(v59, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v59, v56)));
      float32x4_t v63 = vsubq_f32(v60, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v60, v57)));
      float32x4_t v64 = *((float32x4_t *)a2 + 11);
      float32x4_t v65 = *((float32x4_t *)a2 + 12);
      float32x4_t v66 = vmulq_f32(vrecpeq_f32(vsubq_f32(v64, vsubq_f32(v55, v61))), v65);
      float32x4_t v67 = vmulq_f32(vrecpeq_f32(vsubq_f32(v64, vsubq_f32(v56, v62))), v65);
      float32x4_t v68 = vmulq_f32(vrecpeq_f32(vsubq_f32(v64, vsubq_f32(v57, v63))), v65);
      float32x4_t v69 = vaddq_f32(vaddq_f32(v51, v63), vmulq_f32(v68, v68));
      float32x4_t v70 = vmaxq_f32(vaddq_f32(vaddq_f32(v51, v61), vmulq_f32(v66, v66)), v29);
      float32x4_t v71 = vmaxq_f32(vaddq_f32(vaddq_f32(v51, v62), vmulq_f32(v67, v67)), v29);
      float32x4_t v72 = *((float32x4_t *)a2 + 13);
      float32x4_t v73 = *((float32x4_t *)a2 + 14);
      float32x4_t v74 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v70, v72), v73));
      float32x4_t v75 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v71, v72), v73));
      float32x4_t v76 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(v69, v29), v72), v73));
      float32x4_t v77 = *((float32x4_t *)a2 + 96);
      float32x4_t v78 = *((float32x4_t *)a2 + 97);
      float32x4_t v79 = *((float32x4_t *)a2 + 98);
      float32x4_t v80 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v26, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v79)), (int8x16_t)vmulq_f32(v32, v78), (int8x16_t)vmulq_f32(v77, v74)));
      float32x4_t v81 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v27, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v33, v79)), (int8x16_t)vmulq_f32(v33, v78), (int8x16_t)vmulq_f32(v77, v75)));
      float32x4_t v82 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v28, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v34, v79)), (int8x16_t)vmulq_f32(v34, v78), (int8x16_t)vmulq_f32(v77, v76)));
      float32x4_t v83 = (int8x16_t *)(v6 + v10);
      *float32x4_t v83 = vbslq_s8(v16, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v80, v80, 3));
      v83[1] = vbslq_s8(v16, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v81, v81, 3));
      v83[2] = vbslq_s8(v16, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v82, v82, 3));
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v84) = -v11;
    if ((int)v84 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v84 = v84;
    do
    {
      int8x16_t v85 = *((int8x16_t *)a2 + 15);
      float32x4_t v86 = vmulq_f32(*(float32x4_t *)(v7 + 16 * v84), (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v7 + 16 * v84), 3), *((float32x4_t *)a2 + 16))), *((float32x4_t *)a2 + 18))), *((int8x16_t *)a2 + 3)));
      float32x4_t v87 = *((float32x4_t *)a2 + 75);
      float32x4_t v88 = *((float32x4_t *)a2 + 5);
      float32x4_t v89 = vminq_f32(vmaxq_f32(v86, v87), v88);
      float32x4_t v90 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v89, *((float32x4_t *)a2 + 95))));
      float32x4_t v91 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
      float32x4_t v92 = vmulq_f32(*((float32x4_t *)a2 + 86), vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v91), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v90, v91))), *((float32x4_t *)a2 + 9))));
      float32x4_t v93 = vcvtq_f32_s32(vcvtq_s32_f32(v92));
      float32x4_t v94 = vsubq_f32(v93, (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v93, v92)));
      float32x4_t v95 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v92, v94))), *((float32x4_t *)a2 + 12));
      float32x4_t v96 = (float32x4_t)vbslq_s8(v85, (int8x16_t)v86, vbslq_s8((int8x16_t)vcgtq_f32(v87, vsubq_f32(v89, *((float32x4_t *)a2 + 98))), (int8x16_t)vmulq_f32(v89, *((float32x4_t *)a2 + 97)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 96), (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v94), vmulq_f32(v95, v95)), v87), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))))));
      *(int8x16_t *)(v6 + 16 * v84++) = vbslq_s8(v85, (int8x16_t)v86, (int8x16_t)vmulq_laneq_f32(v96, v96, 3));
    }
    while (v84 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec601_nice_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v104 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      int8x16_t v24 = vandq_s8(v23, v22);
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v26));
      float32x4_t v28 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = vminq_f32(vmaxq_f32(v27, v29), v30);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v28, v29), v30);
      float32x4_t v33 = *((float32x4_t *)a2 + 95);
      float32x4_t v34 = *((float32x4_t *)a2 + 86);
      int8x16_t v35 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vceqq_f32(v34, v29)), v29);
      float32x4_t v36 = (float32x4_t)vbslq_s8(v35, (int8x16_t)v30, (int8x16_t)vaddq_f32(v31, v33));
      float32x4_t v37 = (float32x4_t)vbslq_s8(v35, (int8x16_t)v30, (int8x16_t)vaddq_f32(v32, v33));
      int8x16_t v38 = *((int8x16_t *)a2 + 19);
      float32x4_t v39 = *((float32x4_t *)a2 + 20);
      float32x4_t v40 = (float32x4_t)vorrq_s8(vandq_s8(v38, (int8x16_t)v36), (int8x16_t)v30);
      float32x4_t v41 = (float32x4_t)vorrq_s8(vandq_s8(v38, (int8x16_t)v37), (int8x16_t)v30);
      int8x16_t v42 = *((int8x16_t *)a2 + 21);
      float32x4_t v43 = *((float32x4_t *)a2 + 22);
      float32x4_t v44 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v39, v36)));
      float32x4_t v45 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v37, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v39, v37)));
      float32x4_t v46 = *((float32x4_t *)a2 + 23);
      float32x4_t v47 = *((float32x4_t *)a2 + 24);
      float32x4_t v48 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v40, v46));
      float32x4_t v49 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v41, v46));
      float32x4_t v50 = vaddq_f32(vsubq_f32(v44, v43), v48);
      float32x4_t v51 = vmulq_f32(v47, v48);
      float32x4_t v52 = vmulq_f32(vmulq_f32(v47, v49), v41);
      float32x4_t v53 = vaddq_f32(vsubq_f32(v45, v43), v49);
      float32x4_t v54 = vsubq_f32(vsubq_f32(v40, v30), vmulq_f32(v51, v40));
      float32x4_t v55 = vsubq_f32(vsubq_f32(v41, v30), v52);
      float32x4_t v56 = vmulq_f32(v54, v54);
      float32x4_t v57 = vmulq_f32(v55, v55);
      float32x4_t v58 = *((float32x4_t *)a2 + 37);
      float32x4_t v59 = *((float32x4_t *)a2 + 38);
      float32x4_t v60 = *((float32x4_t *)a2 + 39);
      float32x4_t v61 = *((float32x4_t *)a2 + 40);
      float32x4_t v62 = vaddq_f32(v58, vmulq_f32(v59, v54));
      float32x4_t v63 = vaddq_f32(v60, vmulq_f32(v61, v54));
      float32x4_t v64 = vaddq_f32(v60, vmulq_f32(v61, v55));
      float32x4_t v65 = vaddq_f32(v58, vmulq_f32(v59, v55));
      float32x4_t v66 = *((float32x4_t *)a2 + 41);
      float32x4_t v67 = *((float32x4_t *)a2 + 42);
      float32x4_t v68 = vaddq_f32(vaddq_f32(v66, vmulq_f32(v67, v55)), vmulq_f32(v57, vaddq_f32(v65, vmulq_f32(v57, v64))));
      float32x4_t v69 = vmulq_f32(v54, vaddq_f32(vaddq_f32(v66, vmulq_f32(v67, v54)), vmulq_f32(v56, vaddq_f32(v62, vmulq_f32(v56, v63)))));
      float32x4_t v70 = *((float32x4_t *)a2 + 43);
      float32x4_t v71 = *((float32x4_t *)a2 + 44);
      float32x4_t v72 = vmulq_f32(v34, vaddq_f32(v50, vmulq_f32(v54, vaddq_f32(v70, v69))));
      float32x4_t v73 = vmulq_f32(v34, vaddq_f32(v53, vmulq_f32(v55, vaddq_f32(v70, vmulq_f32(v55, v68)))));
      float32x4_t v74 = *((float32x4_t *)a2 + 29);
      float32x4_t v75 = vmaxq_f32(v72, v74);
      float32x4_t v76 = vmaxq_f32(v73, v74);
      float32x4_t v77 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
      float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v76));
      float32x4_t v79 = vsubq_f32(v77, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v77, v75)));
      float32x4_t v80 = vsubq_f32(v78, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v78, v76)));
      float32x4_t v81 = vsubq_f32(v75, v79);
      float32x4_t v82 = vsubq_f32(v76, v80);
      float32x4_t v83 = *((float32x4_t *)a2 + 45);
      float32x4_t v84 = *((float32x4_t *)a2 + 46);
      float32x4_t v85 = vaddq_f32(v71, vmulq_f32(v83, v81));
      float32x4_t v86 = vaddq_f32(v71, vmulq_f32(v83, v82));
      float32x4_t v87 = *((float32x4_t *)a2 + 47);
      float32x4_t v88 = *((float32x4_t *)a2 + 48);
      float32x4_t v89 = vaddq_f32(v30, vmulq_f32(v81, vaddq_f32(v88, vmulq_f32(v81, vaddq_f32(vaddq_f32(v84, vmulq_f32(v81, v87)), vmulq_f32(vmulq_f32(v81, v81), v85))))));
      int32x4_t v90 = *((int32x4_t *)a2 + 33);
      float32x4_t v91 = vaddq_f32(v30, vmulq_f32(v82, vaddq_f32(v88, vmulq_f32(v82, vaddq_f32(vaddq_f32(v84, vmulq_f32(v87, v82)), vmulq_f32(vmulq_f32(v82, v82), v86))))));
      float32x4_t v92 = vmulq_f32(v89, (float32x4_t)vshlq_n_s32(vaddq_s32(v90, vcvtq_s32_f32(v79)), 0x17uLL));
      float32x4_t v93 = vmulq_f32(v91, (float32x4_t)vshlq_n_s32(vaddq_s32(v90, vcvtq_s32_f32(v80)), 0x17uLL));
      float32x4_t v94 = *((float32x4_t *)a2 + 96);
      float32x4_t v95 = *((float32x4_t *)a2 + 97);
      int8x16_t v96 = (int8x16_t)vmulq_f32(v31, v95);
      int8x16_t v97 = (int8x16_t)vmulq_f32(v32, v95);
      float32x4_t v98 = *((float32x4_t *)a2 + 98);
      int8x16_t v99 = (int8x16_t)vcgtq_f32(v29, vsubq_f32(v31, v98));
      int8x16_t v100 = (int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v98));
      float32x4_t v101 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, vbslq_s8(v99, v96, (int8x16_t)vmulq_f32(v94, v92)));
      float32x4_t v102 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v28, vbslq_s8(v100, v97, (int8x16_t)vmulq_f32(v94, v93)));
      int8x16_t v103 = (int8x16_t *)(v6 + v11);
      v103[-1] = vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v101, v101, 3));
      *int8x16_t v103 = vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v102, v102, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v104 = -v10;
    if (v104 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v105 = 16 * v104;
    float32x4_t v106 = *(float32x4_t *)(v7 + v105);
    int8x16_t v107 = *((int8x16_t *)a2 + 15);
    float32x4_t v108 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v109 = vrecpeq_f32(v108);
    float32x4_t v110 = vmulq_f32(v109, vrecpsq_f32(v109, v108));
    float32x4_t v111 = vmulq_f32(v106, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v110, vrecpsq_f32(v110, v108))), *((int8x16_t *)a2 + 3)));
    float32x4_t v112 = *((float32x4_t *)a2 + 75);
    float32x4_t v113 = *((float32x4_t *)a2 + 5);
    float32x4_t v114 = vminq_f32(vmaxq_f32(v111, v112), v113);
    float32x4_t v115 = *((float32x4_t *)a2 + 86);
    float32x4_t v116 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v113, (int8x16_t)vceqq_f32(v115, v112)), v112), (int8x16_t)v113, (int8x16_t)vaddq_f32(v114, *((float32x4_t *)a2 + 95)));
    float32x4_t v117 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v116), (int8x16_t)v113);
    float32x4_t v118 = (float32x4_t)vandq_s8((int8x16_t)v113, (int8x16_t)vcgtq_f32(v117, *((float32x4_t *)a2 + 23)));
    float32x4_t v119 = vsubq_f32(vsubq_f32(v117, v113), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v118), v117));
    float32x4_t v120 = vmulq_f32(v119, v119);
    float32x4_t v121 = vmaxq_f32(vmulq_f32(v115, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v116, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v116))), *((float32x4_t *)a2 + 22)), v118), vmulq_f32(v119, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v119, vaddq_f32(
                         vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v119)),
                         vmulq_f32(v120, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v119)), vmulq_f32(v120, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v119))))))))))), *((float32x4_t *)a2 + 29));
    float32x4_t v122 = vcvtq_f32_s32(vcvtq_s32_f32(v121));
    float32x4_t v123 = vsubq_f32(v122, (float32x4_t)vandq_s8((int8x16_t)v113, (int8x16_t)vcgtq_f32(v122, v121)));
    float32x4_t v124 = vsubq_f32(v121, v123);
    float32x4_t v125 = (float32x4_t)vbslq_s8(v107, (int8x16_t)v111, vbslq_s8((int8x16_t)vcgtq_f32(v112, vsubq_f32(v114, *((float32x4_t *)a2 + 98))), (int8x16_t)vmulq_f32(v114, *((float32x4_t *)a2 + 97)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 96), vmulq_f32(vaddq_f32(v113, vmulq_f32(v124, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v124, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46),
                                                       vmulq_f32(*((float32x4_t *)a2 + 47), v124)),
                                                     vmulq_f32(vmulq_f32(v124, v124), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v124)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v123)), 0x17uLL)))));
    *(int8x16_t *)(v6 + v105) = vbslq_s8(v107, (int8x16_t)v111, (int8x16_t)vmulq_laneq_f32(v125, v125, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec601_half_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v84 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 75);
      float32x4_t v27 = *((float32x4_t *)a2 + 5);
      float32x4_t v28 = vminq_f32(vmaxq_f32(v24, v26), v27);
      float32x4_t v29 = vminq_f32(vmaxq_f32(v25, v26), v27);
      float32x4_t v30 = *((float32x4_t *)a2 + 95);
      float32x4_t v31 = vaddq_f32(v28, v30);
      float32x4_t v32 = vaddq_f32(v29, v30);
      int8x16_t v33 = *((int8x16_t *)a2 + 19);
      float32x4_t v34 = *((float32x4_t *)a2 + 20);
      float32x4_t v35 = (float32x4_t)vorrq_s8(vandq_s8(v33, (int8x16_t)v31), (int8x16_t)v27);
      float32x4_t v36 = (float32x4_t)vorrq_s8(vandq_s8(v33, (int8x16_t)v32), (int8x16_t)v27);
      int8x16_t v37 = *((int8x16_t *)a2 + 21);
      float32x4_t v38 = *((float32x4_t *)a2 + 22);
      float32x4_t v39 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v32, 0x17uLL)), (float32x4_t)vandq_s8(v37, (int8x16_t)vcgtq_f32(v34, v32)));
      float32x4_t v40 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v31, 0x17uLL)), (float32x4_t)vandq_s8(v37, (int8x16_t)vcgtq_f32(v34, v31))), v38);
      float32x4_t v41 = *((float32x4_t *)a2 + 23);
      float32x4_t v42 = *((float32x4_t *)a2 + 24);
      float32x4_t v43 = vsubq_f32(v39, v38);
      float32x4_t v44 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v35, v41));
      float32x4_t v45 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v36, v41));
      float32x4_t v46 = vaddq_f32(v40, v44);
      float32x4_t v47 = vsubq_f32(vsubq_f32(v35, v27), vmulq_f32(vmulq_f32(v42, v44), v35));
      float32x4_t v48 = vsubq_f32(vsubq_f32(v36, v27), vmulq_f32(vmulq_f32(v42, v45), v36));
      float32x4_t v49 = *((float32x4_t *)a2 + 25);
      float32x4_t v50 = *((float32x4_t *)a2 + 26);
      float32x4_t v51 = vaddq_f32(v49, vmulq_f32(v50, v47));
      float32x4_t v52 = vaddq_f32(v49, vmulq_f32(v50, v48));
      float32x4_t v53 = *((float32x4_t *)a2 + 27);
      float32x4_t v54 = *((float32x4_t *)a2 + 28);
      float32x4_t v55 = vaddq_f32(vaddq_f32(v43, v45), vmulq_f32(v48, vaddq_f32(vaddq_f32(v53, vmulq_f32(v48, v54)), vmulq_f32(vmulq_f32(v48, v48), v52))));
      float32x4_t v56 = *((float32x4_t *)a2 + 86);
      float32x4_t v57 = vmulq_f32(v56, vaddq_f32(v46, vmulq_f32(v47, vaddq_f32(vaddq_f32(v53, vmulq_f32(v47, v54)), vmulq_f32(vmulq_f32(v47, v47), v51)))));
      float32x4_t v58 = vmulq_f32(v56, v55);
      float32x4_t v59 = *((float32x4_t *)a2 + 29);
      float32x4_t v60 = *((float32x4_t *)a2 + 30);
      float32x4_t v61 = vmaxq_f32(v57, v59);
      float32x4_t v62 = vmaxq_f32(v58, v59);
      float32x4_t v63 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
      float32x4_t v64 = vcvtq_f32_s32(vcvtq_s32_f32(v62));
      float32x4_t v65 = vsubq_f32(v63, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v63, v61)));
      float32x4_t v66 = vsubq_f32(v64, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v64, v62)));
      float32x4_t v67 = vsubq_f32(v61, v65);
      float32x4_t v68 = *((float32x4_t *)a2 + 31);
      float32x4_t v69 = *((float32x4_t *)a2 + 32);
      float32x4_t v70 = vsubq_f32(v62, v66);
      float32x4_t v71 = vmulq_f32(v70, vaddq_f32(v69, vmulq_f32(v70, vaddq_f32(v60, vmulq_f32(v68, v70)))));
      float32x4_t v72 = vaddq_f32(v27, vmulq_f32(v67, vaddq_f32(v69, vmulq_f32(v67, vaddq_f32(v60, vmulq_f32(v68, v67))))));
      int32x4_t v73 = vcvtq_s32_f32(v66);
      int32x4_t v74 = *((int32x4_t *)a2 + 33);
      float32x4_t v75 = vaddq_f32(v27, v71);
      float32x4_t v76 = vmulq_f32(v72, (float32x4_t)vshlq_n_s32(vaddq_s32(v74, vcvtq_s32_f32(v65)), 0x17uLL));
      float32x4_t v77 = vmulq_f32(v75, (float32x4_t)vshlq_n_s32(vaddq_s32(v74, v73), 0x17uLL));
      float32x4_t v78 = *((float32x4_t *)a2 + 96);
      float32x4_t v79 = *((float32x4_t *)a2 + 97);
      float32x4_t v80 = *((float32x4_t *)a2 + 98);
      float32x4_t v81 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v24, vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v28, v80)), (int8x16_t)vmulq_f32(v28, v79), (int8x16_t)vmulq_f32(v78, v76)));
      float32x4_t v82 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v25, vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v29, v80)), (int8x16_t)vmulq_f32(v29, v79), (int8x16_t)vmulq_f32(v78, v77)));
      float32x4_t v83 = (int8x16_t *)(v6 + v11);
      v83[-1] = vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v81, v81, 3));
      *float32x4_t v83 = vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v82, v82, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v84 = -v10;
    if (v84 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v85 = 16 * v84;
    float32x4_t v86 = *(float32x4_t *)(v7 + v85);
    int8x16_t v87 = *((int8x16_t *)a2 + 15);
    float32x4_t v88 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v89 = vmulq_f32(vrecpeq_f32(v88), *((float32x4_t *)a2 + 18));
    float32x4_t v90 = vmulq_f32(v86, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v89, vrecpsq_f32(v89, v88))), *((int8x16_t *)a2 + 3)));
    float32x4_t v91 = *((float32x4_t *)a2 + 75);
    float32x4_t v92 = *((float32x4_t *)a2 + 5);
    float32x4_t v93 = vminq_f32(vmaxq_f32(v90, v91), v92);
    float32x4_t v94 = vaddq_f32(v93, *((float32x4_t *)a2 + 95));
    float32x4_t v95 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v94), (int8x16_t)v92);
    float32x4_t v96 = (float32x4_t)vandq_s8((int8x16_t)v92, (int8x16_t)vcgtq_f32(v95, *((float32x4_t *)a2 + 23)));
    float32x4_t v97 = vsubq_f32(vsubq_f32(v95, v92), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v96), v95));
    float32x4_t v98 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 86), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v94, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v94))), *((float32x4_t *)a2 + 22)), v96), vmulq_f32(v97, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v97, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v97, v97), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v97))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v99 = vcvtq_f32_s32(vcvtq_s32_f32(v98));
    float32x4_t v100 = vsubq_f32(v99, (float32x4_t)vandq_s8((int8x16_t)v92, (int8x16_t)vcgtq_f32(v99, v98)));
    float32x4_t v101 = vsubq_f32(v98, v100);
    float32x4_t v102 = (float32x4_t)vbslq_s8(v87, (int8x16_t)v90, vbslq_s8((int8x16_t)vcgtq_f32(v91, vsubq_f32(v93, *((float32x4_t *)a2 + 98))), (int8x16_t)vmulq_f32(v93, *((float32x4_t *)a2 + 97)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 96), vmulq_f32(vaddq_f32(v92, vmulq_f32(v101, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v101, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v101)))))),
                                           (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v100)), 0x17uLL)))));
    *(int8x16_t *)(v6 + v85) = vbslq_s8(v87, (int8x16_t)v90, (int8x16_t)vmulq_laneq_f32(v102, v102, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec601_halfTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v96 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v14 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 82);
      float32x4_t v27 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v24, (int8x16_t)vmaxq_f32(v24, v26));
      float32x4_t v28 = *((float32x4_t *)a2 + 75);
      float32x4_t v29 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmaxq_f32(v25, v26));
      int8x16_t v30 = (int8x16_t)vcgtq_f32(v28, v27);
      int8x16_t v31 = (int8x16_t)vcgtq_f32(v28, v29);
      int8x16_t v32 = *((int8x16_t *)a2 + 83);
      float32x4_t v33 = *((float32x4_t *)a2 + 5);
      float32x4_t v34 = (float32x4_t)vbslq_s8(v31, v32, (int8x16_t)v33);
      float32x4_t v35 = vmulq_f32(v27, (float32x4_t)vbslq_s8(v30, v32, (int8x16_t)v33));
      float32x4_t v36 = vmulq_f32(v29, v34);
      float32x4_t v37 = *((float32x4_t *)a2 + 90);
      float32x4_t v38 = *((float32x4_t *)a2 + 95);
      float32x4_t v39 = vaddq_f32(vminq_f32(v35, v37), v38);
      float32x4_t v40 = vaddq_f32(vminq_f32(v36, v37), v38);
      int8x16_t v41 = *((int8x16_t *)a2 + 19);
      float32x4_t v42 = *((float32x4_t *)a2 + 20);
      float32x4_t v43 = (float32x4_t)vorrq_s8(vandq_s8(v41, (int8x16_t)v39), (int8x16_t)v33);
      int8x16_t v44 = *((int8x16_t *)a2 + 21);
      float32x4_t v45 = *((float32x4_t *)a2 + 22);
      float32x4_t v46 = (float32x4_t)vorrq_s8(vandq_s8(v41, (int8x16_t)v40), (int8x16_t)v33);
      float32x4_t v47 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v40, 0x17uLL)), (float32x4_t)vandq_s8(v44, (int8x16_t)vcgtq_f32(v42, v40)));
      float32x4_t v48 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v39, 0x17uLL)), (float32x4_t)vandq_s8(v44, (int8x16_t)vcgtq_f32(v42, v39))), v45);
      float32x4_t v49 = *((float32x4_t *)a2 + 23);
      float32x4_t v50 = *((float32x4_t *)a2 + 24);
      float32x4_t v51 = vsubq_f32(v47, v45);
      float32x4_t v52 = (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v43, v49));
      float32x4_t v53 = (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v46, v49));
      float32x4_t v54 = vmulq_f32(v50, v52);
      float32x4_t v55 = vaddq_f32(v48, v52);
      float32x4_t v56 = vmulq_f32(vmulq_f32(v50, v53), v46);
      float32x4_t v57 = vaddq_f32(v51, v53);
      float32x4_t v58 = vsubq_f32(vsubq_f32(v43, v33), vmulq_f32(v54, v43));
      float32x4_t v59 = vsubq_f32(vsubq_f32(v46, v33), v56);
      float32x4_t v60 = *((float32x4_t *)a2 + 25);
      float32x4_t v61 = *((float32x4_t *)a2 + 26);
      float32x4_t v62 = *((float32x4_t *)a2 + 27);
      float32x4_t v63 = *((float32x4_t *)a2 + 28);
      float32x4_t v64 = vaddq_f32(v57, vmulq_f32(v59, vaddq_f32(vaddq_f32(v62, vmulq_f32(v59, v63)), vmulq_f32(vmulq_f32(v59, v59), vaddq_f32(v60, vmulq_f32(v61, v59))))));
      float32x4_t v65 = *((float32x4_t *)a2 + 86);
      float32x4_t v66 = vmulq_f32(v65, vaddq_f32(v55, vmulq_f32(v58, vaddq_f32(vaddq_f32(v62, vmulq_f32(v58, v63)), vmulq_f32(vmulq_f32(v58, v58), vaddq_f32(v60, vmulq_f32(v61, v58)))))));
      float32x4_t v67 = vmulq_f32(v65, v64);
      float32x4_t v68 = *((float32x4_t *)a2 + 29);
      float32x4_t v69 = *((float32x4_t *)a2 + 30);
      float32x4_t v70 = vmaxq_f32(v66, v68);
      float32x4_t v71 = vmaxq_f32(v67, v68);
      float32x4_t v72 = vcvtq_f32_s32(vcvtq_s32_f32(v70));
      float32x4_t v73 = vcvtq_f32_s32(vcvtq_s32_f32(v71));
      float32x4_t v74 = vsubq_f32(v72, (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v72, v70)));
      float32x4_t v75 = vsubq_f32(v73, (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v73, v71)));
      float32x4_t v76 = vsubq_f32(v70, v74);
      float32x4_t v77 = vsubq_f32(v71, v75);
      float32x4_t v78 = *((float32x4_t *)a2 + 31);
      float32x4_t v79 = *((float32x4_t *)a2 + 32);
      float32x4_t v80 = vmulq_f32(v77, vaddq_f32(v79, vmulq_f32(v77, vaddq_f32(v69, vmulq_f32(v78, v77)))));
      float32x4_t v81 = vaddq_f32(v33, vmulq_f32(v76, vaddq_f32(v79, vmulq_f32(v76, vaddq_f32(v69, vmulq_f32(v78, v76))))));
      int32x4_t v82 = vcvtq_s32_f32(v75);
      int32x4_t v83 = *((int32x4_t *)a2 + 33);
      float32x4_t v84 = vmulq_f32(v81, (float32x4_t)vshlq_n_s32(vaddq_s32(v83, vcvtq_s32_f32(v74)), 0x17uLL));
      float32x4_t v85 = vmulq_f32(vaddq_f32(v33, v80), (float32x4_t)vshlq_n_s32(vaddq_s32(v83, v82), 0x17uLL));
      float32x4_t v86 = *((float32x4_t *)a2 + 96);
      int8x16_t v87 = (int8x16_t)vmulq_f32(v86, v84);
      float32x4_t v88 = *((float32x4_t *)a2 + 97);
      int8x16_t v89 = (int8x16_t)vmulq_f32(v86, v85);
      float32x4_t v90 = *((float32x4_t *)a2 + 98);
      float32x4_t v91 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v26, (int8x16_t)v33);
      float32x4_t v92 = (float32x4_t)vbslq_s8(v31, (int8x16_t)v26, (int8x16_t)v33);
      float32x4_t v93 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v24, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v28, vsubq_f32(v35, v90)), (int8x16_t)vmulq_f32(v35, v88), v87), v91));
      float32x4_t v94 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v28, vsubq_f32(v36, v90)), (int8x16_t)vmulq_f32(v36, v88), v89), v92));
      float32x4_t v95 = (int8x16_t *)(v6 + v11);
      v95[-1] = vbslq_s8(v14, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v93, v93, 3));
      *float32x4_t v95 = vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v94, v94, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v96 = -v10;
    if (v96 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v97 = 16 * v96;
    float32x4_t v98 = *(float32x4_t *)(v7 + v97);
    int8x16_t v99 = *((int8x16_t *)a2 + 15);
    float32x4_t v100 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v101 = vmulq_f32(vrecpeq_f32(v100), *((float32x4_t *)a2 + 18));
    float32x4_t v102 = vmulq_f32(v98, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v101, vrecpsq_f32(v101, v100))), *((int8x16_t *)a2 + 3)));
    float32x4_t v103 = *((float32x4_t *)a2 + 82);
    float32x4_t v104 = (float32x4_t)vbslq_s8(v99, (int8x16_t)v102, (int8x16_t)vmaxq_f32(v102, v103));
    float32x4_t v105 = *((float32x4_t *)a2 + 75);
    int8x16_t v106 = (int8x16_t)vcgtq_f32(v105, v104);
    float32x4_t v107 = *((float32x4_t *)a2 + 5);
    float32x4_t v108 = vmulq_f32(v104, (float32x4_t)vbslq_s8(v106, *((int8x16_t *)a2 + 83), (int8x16_t)v107));
    float32x4_t v109 = vaddq_f32(vminq_f32(v108, *((float32x4_t *)a2 + 90)), *((float32x4_t *)a2 + 95));
    float32x4_t v110 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v109), (int8x16_t)v107);
    float32x4_t v111 = (float32x4_t)vandq_s8((int8x16_t)v107, (int8x16_t)vcgtq_f32(v110, *((float32x4_t *)a2 + 23)));
    float32x4_t v112 = vsubq_f32(vsubq_f32(v110, v107), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v111), v110));
    float32x4_t v113 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 86), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v109, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v109))), *((float32x4_t *)a2 + 22)), v111), vmulq_f32(v112, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v112, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v112, v112), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v112))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v114 = vcvtq_f32_s32(vcvtq_s32_f32(v113));
    float32x4_t v115 = vsubq_f32(v114, (float32x4_t)vandq_s8((int8x16_t)v107, (int8x16_t)vcgtq_f32(v114, v113)));
    float32x4_t v116 = vsubq_f32(v113, v115);
    float32x4_t v117 = (float32x4_t)vbslq_s8(v99, (int8x16_t)v102, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v105, vsubq_f32(v108, *((float32x4_t *)a2 + 98))), (int8x16_t)vmulq_f32(v108, *((float32x4_t *)a2 + 97)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 96), vmulq_f32(vaddq_f32(v107, vmulq_f32(v116, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v116,
                                                                             vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v116)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v115)), 0x17uLL)))), (float32x4_t)vbslq_s8(v106, (int8x16_t)v103, (int8x16_t)v107)));
    *(int8x16_t *)(v6 + v97) = vbslq_s8(v99, (int8x16_t)v102, (int8x16_t)vmulq_laneq_f32(v117, v117, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec601_niceTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v110 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v14 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17));
      int8x16_t v24 = *((int8x16_t *)a2 + 17);
      int8x16_t v25 = *((int8x16_t *)a2 + 3);
      float32x4_t v26 = vmulq_f32(v12, (float32x4_t)vorrq_s8(vandq_s8(v24, v22), v25));
      float32x4_t v27 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v24, v23), v25));
      float32x4_t v28 = *((float32x4_t *)a2 + 82);
      float32x4_t v29 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v26, (int8x16_t)vmaxq_f32(v26, v28));
      float32x4_t v30 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmaxq_f32(v27, v28));
      float32x4_t v31 = *((float32x4_t *)a2 + 75);
      int8x16_t v32 = (int8x16_t)vcgtq_f32(v31, v29);
      int8x16_t v33 = (int8x16_t)vcgtq_f32(v31, v30);
      int8x16_t v34 = *((int8x16_t *)a2 + 83);
      float32x4_t v35 = *((float32x4_t *)a2 + 5);
      float32x4_t v36 = (float32x4_t)vbslq_s8(v33, v34, (int8x16_t)v35);
      float32x4_t v37 = vmulq_f32(v29, (float32x4_t)vbslq_s8(v32, v34, (int8x16_t)v35));
      float32x4_t v38 = vmulq_f32(v30, v36);
      float32x4_t v39 = *((float32x4_t *)a2 + 90);
      float32x4_t v40 = *((float32x4_t *)a2 + 95);
      int8x16_t v41 = (int8x16_t)vaddq_f32(vminq_f32(v37, v39), v40);
      int8x16_t v42 = (int8x16_t)vaddq_f32(vminq_f32(v38, v39), v40);
      float32x4_t v43 = *((float32x4_t *)a2 + 86);
      int8x16_t v44 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vceqq_f32(v43, v31)), v31);
      float32x4_t v45 = (float32x4_t)vbslq_s8(v44, (int8x16_t)v35, v41);
      float32x4_t v46 = (float32x4_t)vbslq_s8(v44, (int8x16_t)v35, v42);
      int8x16_t v47 = *((int8x16_t *)a2 + 19);
      float32x4_t v48 = *((float32x4_t *)a2 + 20);
      float32x4_t v49 = (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)v45), (int8x16_t)v35);
      float32x4_t v50 = (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)v46), (int8x16_t)v35);
      int8x16_t v51 = *((int8x16_t *)a2 + 21);
      float32x4_t v52 = *((float32x4_t *)a2 + 22);
      float32x4_t v53 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v46, 0x17uLL)), (float32x4_t)vandq_s8(v51, (int8x16_t)vcgtq_f32(v48, v46)));
      float32x4_t v54 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v45, 0x17uLL)), (float32x4_t)vandq_s8(v51, (int8x16_t)vcgtq_f32(v48, v45))), v52);
      float32x4_t v55 = *((float32x4_t *)a2 + 23);
      float32x4_t v56 = *((float32x4_t *)a2 + 24);
      float32x4_t v57 = vsubq_f32(v53, v52);
      float32x4_t v58 = (float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vcgtq_f32(v49, v55));
      float32x4_t v59 = (float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vcgtq_f32(v50, v55));
      float32x4_t v60 = vaddq_f32(v54, v58);
      float32x4_t v61 = vsubq_f32(vsubq_f32(v49, v35), vmulq_f32(vmulq_f32(v56, v58), v49));
      float32x4_t v62 = vsubq_f32(vsubq_f32(v50, v35), vmulq_f32(vmulq_f32(v56, v59), v50));
      float32x4_t v63 = vmulq_f32(v61, v61);
      float32x4_t v64 = *((float32x4_t *)a2 + 37);
      float32x4_t v65 = *((float32x4_t *)a2 + 38);
      float32x4_t v66 = *((float32x4_t *)a2 + 39);
      float32x4_t v67 = *((float32x4_t *)a2 + 40);
      float32x4_t v68 = vaddq_f32(v64, vmulq_f32(v65, v61));
      float32x4_t v69 = vaddq_f32(v66, vmulq_f32(v67, v61));
      float32x4_t v70 = vaddq_f32(v66, vmulq_f32(v67, v62));
      float32x4_t v71 = vaddq_f32(v64, vmulq_f32(v65, v62));
      float32x4_t v72 = *((float32x4_t *)a2 + 41);
      float32x4_t v73 = *((float32x4_t *)a2 + 42);
      float32x4_t v74 = vaddq_f32(v72, vmulq_f32(v73, v61));
      float32x4_t v75 = vaddq_f32(v72, vmulq_f32(v73, v62));
      float32x4_t v76 = vmulq_f32(v62, v62);
      float32x4_t v77 = vaddq_f32(v57, v59);
      float32x4_t v78 = vaddq_f32(v74, vmulq_f32(v63, vaddq_f32(v68, vmulq_f32(v63, v69))));
      float32x4_t v79 = vaddq_f32(v75, vmulq_f32(v76, vaddq_f32(v71, vmulq_f32(v76, v70))));
      float32x4_t v80 = *((float32x4_t *)a2 + 43);
      float32x4_t v81 = *((float32x4_t *)a2 + 44);
      float32x4_t v82 = vmulq_f32(v43, vaddq_f32(v60, vmulq_f32(v61, vaddq_f32(v80, vmulq_f32(v61, v78)))));
      float32x4_t v83 = vmulq_f32(v43, vaddq_f32(v77, vmulq_f32(v62, vaddq_f32(v80, vmulq_f32(v62, v79)))));
      float32x4_t v84 = *((float32x4_t *)a2 + 29);
      float32x4_t v85 = vmaxq_f32(v82, v84);
      float32x4_t v86 = vmaxq_f32(v83, v84);
      float32x4_t v87 = vcvtq_f32_s32(vcvtq_s32_f32(v85));
      float32x4_t v88 = vcvtq_f32_s32(vcvtq_s32_f32(v86));
      float32x4_t v89 = vsubq_f32(v87, (float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vcgtq_f32(v87, v85)));
      float32x4_t v90 = vsubq_f32(v88, (float32x4_t)vandq_s8((int8x16_t)v35, (int8x16_t)vcgtq_f32(v88, v86)));
      float32x4_t v91 = vsubq_f32(v85, v89);
      float32x4_t v92 = vsubq_f32(v86, v90);
      float32x4_t v93 = *((float32x4_t *)a2 + 45);
      float32x4_t v94 = *((float32x4_t *)a2 + 46);
      float32x4_t v95 = *((float32x4_t *)a2 + 47);
      float32x4_t v96 = *((float32x4_t *)a2 + 48);
      int32x4_t v97 = *((int32x4_t *)a2 + 33);
      float32x4_t v98 = vmulq_f32(vaddq_f32(v35, vmulq_f32(v91, vaddq_f32(v96, vmulq_f32(v91, vaddq_f32(vaddq_f32(v94, vmulq_f32(v91, v95)), vmulq_f32(vmulq_f32(v91, v91), vaddq_f32(v81, vmulq_f32(v93, v91)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v97, vcvtq_s32_f32(v89)), 0x17uLL));
      float32x4_t v99 = vmulq_f32(vaddq_f32(v35, vmulq_f32(v92, vaddq_f32(v96, vmulq_f32(v92, vaddq_f32(vaddq_f32(v94, vmulq_f32(v95, v92)), vmulq_f32(vmulq_f32(v92, v92), vaddq_f32(v81, vmulq_f32(v93, v92)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v97, vcvtq_s32_f32(v90)), 0x17uLL));
      float32x4_t v100 = *((float32x4_t *)a2 + 96);
      int8x16_t v101 = (int8x16_t)vmulq_f32(v100, v98);
      float32x4_t v102 = *((float32x4_t *)a2 + 97);
      int8x16_t v103 = (int8x16_t)vmulq_f32(v100, v99);
      float32x4_t v104 = *((float32x4_t *)a2 + 98);
      float32x4_t v105 = (float32x4_t)vbslq_s8(v32, (int8x16_t)v28, (int8x16_t)v35);
      float32x4_t v106 = (float32x4_t)vbslq_s8(v33, (int8x16_t)v28, (int8x16_t)v35);
      float32x4_t v107 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v26, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v31, vsubq_f32(v37, v104)), (int8x16_t)vmulq_f32(v37, v102), v101), v105));
      float32x4_t v108 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v31, vsubq_f32(v38, v104)), (int8x16_t)vmulq_f32(v38, v102), v103), v106));
      float32x4_t v109 = (int8x16_t *)(v6 + v11);
      v109[-1] = vbslq_s8(v14, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v107, v107, 3));
      *float32x4_t v109 = vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v108, v108, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v110 = -v10;
    if (v110 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v111 = 16 * v110;
    float32x4_t v112 = *(float32x4_t *)(v7 + v111);
    int8x16_t v113 = *((int8x16_t *)a2 + 15);
    float32x4_t v114 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v115 = vrecpeq_f32(v114);
    float32x4_t v116 = vmulq_f32(v115, vrecpsq_f32(v115, v114));
    float32x4_t v117 = vmulq_f32(v112, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v116, vrecpsq_f32(v116, v114))), *((int8x16_t *)a2 + 3)));
    float32x4_t v118 = *((float32x4_t *)a2 + 82);
    float32x4_t v119 = (float32x4_t)vbslq_s8(v113, (int8x16_t)v117, (int8x16_t)vmaxq_f32(v117, v118));
    float32x4_t v120 = *((float32x4_t *)a2 + 75);
    int8x16_t v121 = (int8x16_t)vcgtq_f32(v120, v119);
    float32x4_t v122 = *((float32x4_t *)a2 + 5);
    float32x4_t v123 = vmulq_f32(v119, (float32x4_t)vbslq_s8(v121, *((int8x16_t *)a2 + 83), (int8x16_t)v122));
    float32x4_t v124 = *((float32x4_t *)a2 + 86);
    float32x4_t v125 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v122, (int8x16_t)vceqq_f32(v124, v120)), v120), (int8x16_t)v122, (int8x16_t)vaddq_f32(vminq_f32(v123, *((float32x4_t *)a2 + 90)), *((float32x4_t *)a2 + 95)));
    float32x4_t v126 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v125), (int8x16_t)v122);
    float32x4_t v127 = (float32x4_t)vandq_s8((int8x16_t)v122, (int8x16_t)vcgtq_f32(v126, *((float32x4_t *)a2 + 23)));
    float32x4_t v128 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v125, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v125))), *((float32x4_t *)a2 + 22)), v127);
    float32x4_t v129 = vsubq_f32(vsubq_f32(v126, v122), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v127), v126));
    float32x4_t v130 = vmulq_f32(v129, v129);
    float32x4_t v131 = vmaxq_f32(vmulq_f32(v124, vaddq_f32(v128, vmulq_f32(v129, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v129, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v129)), vmulq_f32(v130, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v129)), vmulq_f32(v130, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v129))))))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v132 = vcvtq_f32_s32(vcvtq_s32_f32(v131));
    float32x4_t v133 = vsubq_f32(v132, (float32x4_t)vandq_s8((int8x16_t)v122, (int8x16_t)vcgtq_f32(v132, v131)));
    float32x4_t v134 = vsubq_f32(v131, v133);
    float32x4_t v135 = (float32x4_t)vbslq_s8(v113, (int8x16_t)v117, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v120, vsubq_f32(v123, *((float32x4_t *)a2 + 98))), (int8x16_t)vmulq_f32(v123, *((float32x4_t *)a2 + 97)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 96), vmulq_f32(vaddq_f32(v122, vmulq_f32(v134, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v134,
                                                                             vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v134)), vmulq_f32(vmulq_f32(v134, v134), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v134)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v133)), 0x17uLL)))), (float32x4_t)vbslq_s8(v121, (int8x16_t)v118, (int8x16_t)v122)));
    *(int8x16_t *)(v6 + v111) = vbslq_s8(v113, (int8x16_t)v117, (int8x16_t)vmulq_laneq_f32(v135, v135, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getsrgb_fast_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v64 = 0;
        uint64_t v65 = 16 * v8;
        uint64_t v66 = 16 * v7;
        uint64_t v67 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v68 = 0;
          do
          {
            int8x16_t v69 = *((int8x16_t *)a2 + 15);
            float32x4_t v70 = vmulq_f32(v5[v68 / 0x10], (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5[v68 / 0x10], 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
            float32x4_t v71 = vminq_f32(vmaxq_f32(v70, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v72 = vmulq_f32(v71, *((float32x4_t *)a2 + 99));
            float32x4_t v73 = vaddq_f32(v72, vmulq_f32(v71, vsubq_f32(v71, v72)));
            float32x4_t v74 = (float32x4_t)vbslq_s8(v69, (int8x16_t)v70, (int8x16_t)vmulq_f32(vminq_f32(vrsqrteq_f32(v73), *((float32x4_t *)a2 + 73)), v73));
            v6[v68 / 0x10] = vbslq_s8(v69, (int8x16_t)v70, (int8x16_t)vmulq_laneq_f32(v74, v74, 3));
            v68 += 16;
          }
          while (v67 != v68);
          ++v64;
          int v5 = (float32x4_t *)((char *)v5 + v65);
          uint64_t v6 = (int8x16_t *)((char *)v6 + v66);
        }
        while (v64 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      float32x4_t v12 = v5 + 4;
      float32x4_t v13 = v6 + 4;
      do
      {
        unint64_t v14 = 0;
        float32x4_t v15 = v13;
        float32x4_t v16 = v12;
        uint64_t v17 = 2;
        do
        {
          float32x4_t v18 = v5[v17 - 2];
          float32x4_t v19 = v5[v17 - 1];
          float32x4_t v20 = v5[v17];
          float32x4_t v21 = v5[v17 + 1];
          int8x16_t v23 = *((int8x16_t *)a2 + 15);
          float32x4_t v22 = *((float32x4_t *)a2 + 16);
          int8x16_t v24 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3), v22));
          int8x16_t v25 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3), v22));
          int8x16_t v26 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 3), v22));
          int8x16_t v27 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 3), v22));
          int8x16_t v28 = *((int8x16_t *)a2 + 17);
          int8x16_t v29 = *((int8x16_t *)a2 + 3);
          float32x4_t v30 = vmulq_f32(v18, (float32x4_t)vorrq_s8(vandq_s8(v28, v24), v29));
          float32x4_t v31 = vmulq_f32(v19, (float32x4_t)vorrq_s8(vandq_s8(v28, v25), v29));
          float32x4_t v32 = vmulq_f32(v20, (float32x4_t)vorrq_s8(vandq_s8(v28, v26), v29));
          float32x4_t v33 = vmulq_f32(v21, (float32x4_t)vorrq_s8(vandq_s8(v28, v27), v29));
          float32x4_t v34 = *((float32x4_t *)a2 + 75);
          float32x4_t v35 = *((float32x4_t *)a2 + 5);
          float32x4_t v36 = vminq_f32(vmaxq_f32(v30, v34), v35);
          float32x4_t v37 = vminq_f32(vmaxq_f32(v31, v34), v35);
          float32x4_t v38 = vminq_f32(vmaxq_f32(v32, v34), v35);
          float32x4_t v39 = vminq_f32(vmaxq_f32(v33, v34), v35);
          float32x4_t v40 = *((float32x4_t *)a2 + 99);
          float32x4_t v41 = vmulq_f32(v36, v40);
          float32x4_t v42 = vmulq_f32(v37, v40);
          float32x4_t v43 = vmulq_f32(v38, v40);
          float32x4_t v44 = vmulq_f32(v39, v40);
          float32x4_t v45 = vaddq_f32(v41, vmulq_f32(v36, vsubq_f32(v36, v41)));
          float32x4_t v46 = vaddq_f32(v42, vmulq_f32(v37, vsubq_f32(v37, v42)));
          float32x4_t v47 = vaddq_f32(v43, vmulq_f32(v38, vsubq_f32(v38, v43)));
          float32x4_t v48 = vaddq_f32(v44, vmulq_f32(v39, vsubq_f32(v39, v44)));
          float32x4_t v49 = v16;
          float32x4_t v50 = *((float32x4_t *)a2 + 73);
          float32x4_t v51 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v30, (int8x16_t)vmulq_f32(v45, vminq_f32(vrsqrteq_f32(v45), v50)));
          float32x4_t v52 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v31, (int8x16_t)vmulq_f32(v46, vminq_f32(vrsqrteq_f32(v46), v50)));
          float32x4_t v53 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v32, (int8x16_t)vmulq_f32(v47, vminq_f32(vrsqrteq_f32(v47), v50)));
          float32x4_t v54 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v33, (int8x16_t)vmulq_f32(v48, vminq_f32(vrsqrteq_f32(v48), v50)));
          float32x4_t v55 = v15;
          float32x4_t v56 = &v6[v17];
          v14 += 4;
          v56[-2] = vbslq_s8(v23, (int8x16_t)v30, (int8x16_t)vmulq_laneq_f32(v51, v51, 3));
          v56[-1] = vbslq_s8(v23, (int8x16_t)v31, (int8x16_t)vmulq_laneq_f32(v52, v52, 3));
          *float32x4_t v56 = vbslq_s8(v23, (int8x16_t)v32, (int8x16_t)vmulq_laneq_f32(v53, v53, 3));
          v56[1] = vbslq_s8(v23, (int8x16_t)v33, (int8x16_t)vmulq_laneq_f32(v54, v54, 3));
          v17 += 4;
          v16 += 4;
          float32x4_t v15 = v55 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            float32x4_t v57 = *v49++;
            int8x16_t v58 = *((int8x16_t *)a2 + 15);
            float32x4_t v59 = vmulq_f32(v57, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
            float32x4_t v60 = vminq_f32(vmaxq_f32(v59, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v61 = vmulq_f32(v60, *((float32x4_t *)a2 + 99));
            float32x4_t v62 = vaddq_f32(v61, vmulq_f32(v60, vsubq_f32(v60, v61)));
            float32x4_t v63 = (float32x4_t)vbslq_s8(v58, (int8x16_t)v59, (int8x16_t)vmulq_f32(vminq_f32(vrsqrteq_f32(v62), *((float32x4_t *)a2 + 73)), v62));
            *v55++ = vbslq_s8(v58, (int8x16_t)v59, (int8x16_t)vmulq_laneq_f32(v63, v63, 3));
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        uint64_t v6 = (int8x16_t *)((char *)v6 + v10);
        int v5 = (float32x4_t *)((char *)v5 + v11);
        float32x4_t v12 = (float32x4_t *)((char *)v12 + v11);
        float32x4_t v13 = (int8x16_t *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

uint64_t Getsrgb_fixed_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v86) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v10 + 32);
      int8x16_t v16 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v17 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15));
      float32x4_t v18 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15));
      float32x4_t v19 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v15));
      int8x16_t v21 = *((int8x16_t *)a2 + 17);
      float32x4_t v20 = *((float32x4_t *)a2 + 18);
      int8x16_t v22 = (int8x16_t)vmulq_f32(v19, v20);
      int8x16_t v23 = vandq_s8(v21, (int8x16_t)vmulq_f32(v17, v20));
      int8x16_t v24 = vandq_s8(v21, (int8x16_t)vmulq_f32(v18, v20));
      int8x16_t v25 = *((int8x16_t *)a2 + 3);
      float32x4_t v26 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v23, v25));
      float32x4_t v27 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v24, v25));
      float32x4_t v28 = vmulq_f32(v14, (float32x4_t)vorrq_s8(vandq_s8(v21, v22), v25));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = *((float32x4_t *)a2 + 6);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v26, v29), v30);
      float32x4_t v33 = vminq_f32(vmaxq_f32(v27, v29), v30);
      float32x4_t v34 = vminq_f32(vmaxq_f32(v28, v29), v30);
      float32x4_t v35 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)v32));
      float32x4_t v36 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)v33));
      float32x4_t v37 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)v34));
      float32x4_t v38 = vcvtq_f32_s32(vcvtq_s32_f32(v35));
      float32x4_t v39 = vcvtq_f32_s32(vcvtq_s32_f32(v36));
      float32x4_t v40 = vcvtq_f32_s32(vcvtq_s32_f32(v37));
      float32x4_t v41 = *((float32x4_t *)a2 + 7);
      float32x4_t v42 = *((float32x4_t *)a2 + 8);
      float32x4_t v43 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v35, v38), v41));
      float32x4_t v44 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v36, v39), v41));
      float32x4_t v45 = vrsqrteq_f32(vaddq_f32(v41, vsubq_f32(v37, v40)));
      float32x4_t v46 = vaddq_f32(v42, v38);
      float32x4_t v47 = vaddq_f32(v42, v39);
      float32x4_t v48 = vaddq_f32(v42, v40);
      float32x4_t v49 = *((float32x4_t *)a2 + 9);
      float32x4_t v50 = *((float32x4_t *)a2 + 10);
      float32x4_t v51 = vsubq_f32(v46, vmulq_f32(v43, v49));
      float32x4_t v52 = *((float32x4_t *)a2 + 100);
      float32x4_t v53 = vmulq_f32(v52, v51);
      float32x4_t v54 = vmulq_f32(v52, vsubq_f32(v47, vmulq_f32(v44, v49)));
      float32x4_t v55 = vmulq_f32(v52, vsubq_f32(v48, vmulq_f32(v45, v49)));
      float32x4_t v56 = vcvtq_f32_s32(vcvtq_s32_f32(v53));
      float32x4_t v57 = vcvtq_f32_s32(vcvtq_s32_f32(v54));
      float32x4_t v58 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
      float32x4_t v59 = vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v56, v53)));
      float32x4_t v60 = vsubq_f32(v57, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v57, v54)));
      float32x4_t v61 = vsubq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v58, v55)));
      float32x4_t v62 = *((float32x4_t *)a2 + 11);
      float32x4_t v63 = *((float32x4_t *)a2 + 12);
      float32x4_t v64 = vmulq_f32(vrecpeq_f32(vsubq_f32(v62, vsubq_f32(v53, v59))), v63);
      float32x4_t v65 = vmulq_f32(vrecpeq_f32(vsubq_f32(v62, vsubq_f32(v54, v60))), v63);
      float32x4_t v66 = vmulq_f32(vrecpeq_f32(vsubq_f32(v62, vsubq_f32(v55, v61))), v63);
      float32x4_t v67 = vaddq_f32(vaddq_f32(v50, v61), vmulq_f32(v66, v66));
      float32x4_t v68 = vmaxq_f32(vaddq_f32(vaddq_f32(v50, v59), vmulq_f32(v64, v64)), v29);
      float32x4_t v69 = vmaxq_f32(vaddq_f32(vaddq_f32(v50, v60), vmulq_f32(v65, v65)), v29);
      float32x4_t v70 = *((float32x4_t *)a2 + 13);
      float32x4_t v71 = *((float32x4_t *)a2 + 14);
      float32x4_t v72 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v68, v70), v71));
      float32x4_t v73 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v69, v70), v71));
      float32x4_t v74 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(v67, v29), v70), v71));
      float32x4_t v75 = *((float32x4_t *)a2 + 101);
      float32x4_t v76 = *((float32x4_t *)a2 + 102);
      int8x16_t v77 = (int8x16_t)vaddq_f32(v75, vmulq_f32(v76, v72));
      float32x4_t v78 = vmulq_f32(v76, v73);
      float32x4_t v79 = vmulq_f32(v76, v74);
      float32x4_t v80 = *((float32x4_t *)a2 + 103);
      float32x4_t v81 = *((float32x4_t *)a2 + 104);
      float32x4_t v82 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v26, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v81)), (int8x16_t)vmulq_f32(v32, v80), v77));
      float32x4_t v83 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v27, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v33, v81)), (int8x16_t)vmulq_f32(v33, v80), (int8x16_t)vaddq_f32(v75, v78)));
      float32x4_t v84 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v28, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v34, v81)), (int8x16_t)vmulq_f32(v34, v80), (int8x16_t)vaddq_f32(v75, v79)));
      float32x4_t v85 = (int8x16_t *)(v6 + v10);
      *float32x4_t v85 = vbslq_s8(v16, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v82, v82, 3));
      v85[1] = vbslq_s8(v16, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v83, v83, 3));
      v85[2] = vbslq_s8(v16, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v84, v84, 3));
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v86) = -v11;
    if ((int)v86 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v86 = v86;
    do
    {
      int8x16_t v87 = *((int8x16_t *)a2 + 15);
      float32x4_t v88 = vmulq_f32(*(float32x4_t *)(v7 + 16 * v86), (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v7 + 16 * v86), 3), *((float32x4_t *)a2 + 16))), *((float32x4_t *)a2 + 18))), *((int8x16_t *)a2 + 3)));
      float32x4_t v89 = *((float32x4_t *)a2 + 75);
      float32x4_t v90 = *((float32x4_t *)a2 + 5);
      float32x4_t v91 = vminq_f32(vmaxq_f32(v88, v89), v90);
      float32x4_t v92 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)v91));
      float32x4_t v93 = vcvtq_f32_s32(vcvtq_s32_f32(v92));
      float32x4_t v94 = vmulq_f32(*((float32x4_t *)a2 + 100), vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v93), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v92, v93))), *((float32x4_t *)a2 + 9))));
      float32x4_t v95 = vcvtq_f32_s32(vcvtq_s32_f32(v94));
      float32x4_t v96 = vsubq_f32(v95, (float32x4_t)vandq_s8((int8x16_t)v90, (int8x16_t)vcgtq_f32(v95, v94)));
      float32x4_t v97 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v94, v96))), *((float32x4_t *)a2 + 12));
      float32x4_t v98 = (float32x4_t)vbslq_s8(v87, (int8x16_t)v88, vbslq_s8((int8x16_t)vcgtq_f32(v89, vsubq_f32(v91, *((float32x4_t *)a2 + 104))), (int8x16_t)vmulq_f32(v91, *((float32x4_t *)a2 + 103)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 101), vmulq_f32(*((float32x4_t *)a2 + 102), (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v96), vmulq_f32(v97, v97)), v89), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14)))))));
      *(int8x16_t *)(v6 + 16 * v86++) = vbslq_s8(v87, (int8x16_t)v88, (int8x16_t)vmulq_laneq_f32(v98, v98, 3));
    }
    while (v86 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getsrgb_nice_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v105 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      int8x16_t v24 = vandq_s8(v23, v22);
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v26));
      float32x4_t v28 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = vminq_f32(vmaxq_f32(v27, v29), v30);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v28, v29), v30);
      float32x4_t v33 = *((float32x4_t *)a2 + 100);
      int8x16_t v34 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vceqq_f32(v33, v29)), v29);
      float32x4_t v35 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v30, (int8x16_t)v31);
      float32x4_t v36 = (float32x4_t)vbslq_s8(v34, (int8x16_t)v30, (int8x16_t)v32);
      int8x16_t v37 = *((int8x16_t *)a2 + 19);
      float32x4_t v38 = *((float32x4_t *)a2 + 20);
      float32x4_t v39 = (float32x4_t)vorrq_s8(vandq_s8(v37, (int8x16_t)v35), (int8x16_t)v30);
      float32x4_t v40 = (float32x4_t)vorrq_s8(vandq_s8(v37, (int8x16_t)v36), (int8x16_t)v30);
      int8x16_t v41 = *((int8x16_t *)a2 + 21);
      float32x4_t v42 = *((float32x4_t *)a2 + 22);
      float32x4_t v43 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x17uLL)), (float32x4_t)vandq_s8(v41, (int8x16_t)vcgtq_f32(v38, v36)));
      float32x4_t v44 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v35, 0x17uLL)), (float32x4_t)vandq_s8(v41, (int8x16_t)vcgtq_f32(v38, v35))), v42);
      float32x4_t v45 = *((float32x4_t *)a2 + 23);
      float32x4_t v46 = *((float32x4_t *)a2 + 24);
      float32x4_t v47 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v39, v45));
      float32x4_t v48 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v40, v45));
      float32x4_t v49 = vaddq_f32(v44, v47);
      float32x4_t v50 = vaddq_f32(vsubq_f32(v43, v42), v48);
      float32x4_t v51 = vsubq_f32(vsubq_f32(v39, v30), vmulq_f32(vmulq_f32(v46, v47), v39));
      float32x4_t v52 = vsubq_f32(vsubq_f32(v40, v30), vmulq_f32(vmulq_f32(v46, v48), v40));
      float32x4_t v53 = vmulq_f32(v51, v51);
      float32x4_t v54 = *((float32x4_t *)a2 + 37);
      float32x4_t v55 = *((float32x4_t *)a2 + 38);
      float32x4_t v56 = vaddq_f32(v54, vmulq_f32(v55, v51));
      float32x4_t v57 = vaddq_f32(v54, vmulq_f32(v55, v52));
      float32x4_t v58 = *((float32x4_t *)a2 + 39);
      float32x4_t v59 = *((float32x4_t *)a2 + 40);
      float32x4_t v60 = vaddq_f32(v58, vmulq_f32(v59, v51));
      float32x4_t v61 = vaddq_f32(v58, vmulq_f32(v59, v52));
      float32x4_t v62 = *((float32x4_t *)a2 + 41);
      float32x4_t v63 = *((float32x4_t *)a2 + 42);
      float32x4_t v64 = vaddq_f32(v62, vmulq_f32(v63, v51));
      float32x4_t v65 = vaddq_f32(v62, vmulq_f32(v63, v52));
      float32x4_t v66 = vmulq_f32(v52, v52);
      float32x4_t v67 = vaddq_f32(v65, vmulq_f32(v66, vaddq_f32(v57, vmulq_f32(v66, v61))));
      float32x4_t v68 = vmulq_f32(v51, vaddq_f32(v64, vmulq_f32(v53, vaddq_f32(v56, vmulq_f32(v53, v60)))));
      float32x4_t v69 = *((float32x4_t *)a2 + 43);
      float32x4_t v70 = *((float32x4_t *)a2 + 44);
      float32x4_t v71 = vaddq_f32(v50, vmulq_f32(v52, vaddq_f32(v69, vmulq_f32(v52, v67))));
      float32x4_t v72 = vmulq_f32(v33, vaddq_f32(v49, vmulq_f32(v51, vaddq_f32(v69, v68))));
      float32x4_t v73 = *((float32x4_t *)a2 + 29);
      float32x4_t v74 = vmulq_f32(v33, v71);
      float32x4_t v75 = vmaxq_f32(v72, v73);
      float32x4_t v76 = vmaxq_f32(v74, v73);
      float32x4_t v77 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
      float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v76));
      float32x4_t v79 = vsubq_f32(v77, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v77, v75)));
      float32x4_t v80 = vsubq_f32(v78, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v78, v76)));
      float32x4_t v81 = vsubq_f32(v75, v79);
      float32x4_t v82 = vsubq_f32(v76, v80);
      float32x4_t v83 = *((float32x4_t *)a2 + 45);
      float32x4_t v84 = *((float32x4_t *)a2 + 46);
      float32x4_t v85 = *((float32x4_t *)a2 + 47);
      float32x4_t v86 = *((float32x4_t *)a2 + 48);
      float32x4_t v87 = vaddq_f32(v30, vmulq_f32(v81, vaddq_f32(v86, vmulq_f32(v81, vaddq_f32(vaddq_f32(v84, vmulq_f32(v81, v85)), vmulq_f32(vmulq_f32(v81, v81), vaddq_f32(v70, vmulq_f32(v83, v81))))))));
      float32x4_t v88 = vaddq_f32(v30, vmulq_f32(v82, vaddq_f32(v86, vmulq_f32(v82, vaddq_f32(vaddq_f32(v84, vmulq_f32(v85, v82)), vmulq_f32(vmulq_f32(v82, v82), vaddq_f32(v70, vmulq_f32(v83, v82))))))));
      int32x4_t v89 = *((int32x4_t *)a2 + 33);
      float32x4_t v90 = vmulq_f32(v87, (float32x4_t)vshlq_n_s32(vaddq_s32(v89, vcvtq_s32_f32(v79)), 0x17uLL));
      float32x4_t v91 = vmulq_f32(v88, (float32x4_t)vshlq_n_s32(vaddq_s32(v89, vcvtq_s32_f32(v80)), 0x17uLL));
      float32x4_t v92 = *((float32x4_t *)a2 + 101);
      float32x4_t v93 = *((float32x4_t *)a2 + 102);
      float32x4_t v94 = vmulq_f32(v93, v91);
      int8x16_t v95 = (int8x16_t)vaddq_f32(v92, vmulq_f32(v93, v90));
      float32x4_t v96 = *((float32x4_t *)a2 + 103);
      int8x16_t v97 = (int8x16_t)vmulq_f32(v31, v96);
      int8x16_t v98 = (int8x16_t)vmulq_f32(v32, v96);
      float32x4_t v99 = *((float32x4_t *)a2 + 104);
      int8x16_t v100 = (int8x16_t)vcgtq_f32(v29, vsubq_f32(v31, v99));
      int8x16_t v101 = (int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v99));
      float32x4_t v102 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, vbslq_s8(v100, v97, v95));
      float32x4_t v103 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v28, vbslq_s8(v101, v98, (int8x16_t)vaddq_f32(v92, v94)));
      float32x4_t v104 = (int8x16_t *)(v6 + v11);
      v104[-1] = vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v102, v102, 3));
      *float32x4_t v104 = vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v103, v103, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v105 = -v10;
    if (v105 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v106 = 16 * v105;
    float32x4_t v107 = *(float32x4_t *)(v7 + v106);
    int8x16_t v108 = *((int8x16_t *)a2 + 15);
    float32x4_t v109 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v110 = vrecpeq_f32(v109);
    float32x4_t v111 = vmulq_f32(v110, vrecpsq_f32(v110, v109));
    float32x4_t v112 = vmulq_f32(v107, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v111, vrecpsq_f32(v111, v109))), *((int8x16_t *)a2 + 3)));
    float32x4_t v113 = *((float32x4_t *)a2 + 75);
    float32x4_t v114 = *((float32x4_t *)a2 + 5);
    float32x4_t v115 = vminq_f32(vmaxq_f32(v112, v113), v114);
    float32x4_t v116 = *((float32x4_t *)a2 + 100);
    float32x4_t v117 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vceqq_f32(v116, v113)), v113), (int8x16_t)v114, (int8x16_t)v115);
    float32x4_t v118 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v117), (int8x16_t)v114);
    float32x4_t v119 = (float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vcgtq_f32(v118, *((float32x4_t *)a2 + 23)));
    float32x4_t v120 = vsubq_f32(vsubq_f32(v118, v114), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v119), v118));
    float32x4_t v121 = vmulq_f32(v120, v120);
    float32x4_t v122 = vmaxq_f32(vmulq_f32(v116, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v117, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v117))), *((float32x4_t *)a2 + 22)), v119), vmulq_f32(v120, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v120, vaddq_f32(
                         vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v120)),
                         vmulq_f32(v121, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v120)), vmulq_f32(v121, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v120))))))))))), *((float32x4_t *)a2 + 29));
    float32x4_t v123 = vcvtq_f32_s32(vcvtq_s32_f32(v122));
    float32x4_t v124 = vsubq_f32(v123, (float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vcgtq_f32(v123, v122)));
    float32x4_t v125 = vsubq_f32(v122, v124);
    float32x4_t v126 = (float32x4_t)vbslq_s8(v108, (int8x16_t)v112, vbslq_s8((int8x16_t)vcgtq_f32(v113, vsubq_f32(v115, *((float32x4_t *)a2 + 104))), (int8x16_t)vmulq_f32(v115, *((float32x4_t *)a2 + 103)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 101), vmulq_f32(*((float32x4_t *)a2 + 102), vmulq_f32(vaddq_f32(v114, vmulq_f32(v125, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v125, vaddq_f32(
                                                       vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v125)), vmulq_f32(vmulq_f32(v125, v125), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v125)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v124)), 0x17uLL))))));
    *(int8x16_t *)(v6 + v106) = vbslq_s8(v108, (int8x16_t)v112, (int8x16_t)vmulq_laneq_f32(v126, v126, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getsrgb_half_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v79 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 75);
      float32x4_t v27 = *((float32x4_t *)a2 + 5);
      float32x4_t v28 = vminq_f32(vmaxq_f32(v24, v26), v27);
      float32x4_t v29 = vminq_f32(vmaxq_f32(v25, v26), v27);
      int8x16_t v30 = *((int8x16_t *)a2 + 19);
      float32x4_t v31 = *((float32x4_t *)a2 + 20);
      float32x4_t v32 = (float32x4_t)vorrq_s8(vandq_s8(v30, (int8x16_t)v28), (int8x16_t)v27);
      int8x16_t v33 = *((int8x16_t *)a2 + 21);
      float32x4_t v34 = *((float32x4_t *)a2 + 22);
      float32x4_t v35 = (float32x4_t)vorrq_s8(vandq_s8(v30, (int8x16_t)v29), (int8x16_t)v27);
      float32x4_t v36 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v28, 0x17uLL)), (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v31, v28))), v34);
      float32x4_t v37 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v29, 0x17uLL)), (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v31, v29))), v34);
      float32x4_t v38 = *((float32x4_t *)a2 + 23);
      float32x4_t v39 = *((float32x4_t *)a2 + 24);
      float32x4_t v40 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v32, v38));
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v35, v38));
      float32x4_t v42 = vaddq_f32(v37, v41);
      float32x4_t v43 = vsubq_f32(vsubq_f32(v32, v27), vmulq_f32(vmulq_f32(v39, v40), v32));
      float32x4_t v44 = vsubq_f32(vsubq_f32(v35, v27), vmulq_f32(vmulq_f32(v39, v41), v35));
      float32x4_t v45 = *((float32x4_t *)a2 + 25);
      float32x4_t v46 = *((float32x4_t *)a2 + 26);
      float32x4_t v47 = *((float32x4_t *)a2 + 27);
      float32x4_t v48 = *((float32x4_t *)a2 + 28);
      float32x4_t v49 = vaddq_f32(v42, vmulq_f32(v44, vaddq_f32(vaddq_f32(v47, vmulq_f32(v44, v48)), vmulq_f32(vmulq_f32(v44, v44), vaddq_f32(v45, vmulq_f32(v46, v44))))));
      float32x4_t v50 = *((float32x4_t *)a2 + 100);
      float32x4_t v51 = vmulq_f32(v50, vaddq_f32(vaddq_f32(v36, v40), vmulq_f32(v43, vaddq_f32(vaddq_f32(v47, vmulq_f32(v43, v48)), vmulq_f32(vmulq_f32(v43, v43), vaddq_f32(v45, vmulq_f32(v46, v43)))))));
      float32x4_t v52 = vmulq_f32(v50, v49);
      float32x4_t v53 = *((float32x4_t *)a2 + 29);
      float32x4_t v54 = *((float32x4_t *)a2 + 30);
      float32x4_t v55 = vmaxq_f32(v51, v53);
      float32x4_t v56 = vmaxq_f32(v52, v53);
      float32x4_t v57 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
      float32x4_t v58 = vcvtq_f32_s32(vcvtq_s32_f32(v56));
      float32x4_t v59 = vsubq_f32(v57, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v57, v55)));
      float32x4_t v60 = vsubq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v58, v56)));
      float32x4_t v61 = vsubq_f32(v55, v59);
      float32x4_t v62 = vsubq_f32(v56, v60);
      float32x4_t v63 = *((float32x4_t *)a2 + 31);
      float32x4_t v64 = *((float32x4_t *)a2 + 32);
      float32x4_t v65 = vaddq_f32(v27, vmulq_f32(v61, vaddq_f32(v64, vmulq_f32(v61, vaddq_f32(v54, vmulq_f32(v63, v61))))));
      float32x4_t v66 = vaddq_f32(v27, vmulq_f32(v62, vaddq_f32(v64, vmulq_f32(v62, vaddq_f32(v54, vmulq_f32(v63, v62))))));
      int32x4_t v67 = *((int32x4_t *)a2 + 33);
      float32x4_t v68 = vmulq_f32(v65, (float32x4_t)vshlq_n_s32(vaddq_s32(v67, vcvtq_s32_f32(v59)), 0x17uLL));
      float32x4_t v69 = vmulq_f32(v66, (float32x4_t)vshlq_n_s32(vaddq_s32(v67, vcvtq_s32_f32(v60)), 0x17uLL));
      float32x4_t v70 = *((float32x4_t *)a2 + 101);
      float32x4_t v71 = *((float32x4_t *)a2 + 102);
      float32x4_t v72 = vmulq_f32(v71, v69);
      int8x16_t v73 = (int8x16_t)vaddq_f32(v70, vmulq_f32(v71, v68));
      float32x4_t v74 = *((float32x4_t *)a2 + 103);
      float32x4_t v75 = *((float32x4_t *)a2 + 104);
      float32x4_t v76 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v24, vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v28, v75)), (int8x16_t)vmulq_f32(v28, v74), v73));
      float32x4_t v77 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v25, vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v29, v75)), (int8x16_t)vmulq_f32(v29, v74), (int8x16_t)vaddq_f32(v70, v72)));
      float32x4_t v78 = (int8x16_t *)(v6 + v11);
      v78[-1] = vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v76, v76, 3));
      int8x16_t *v78 = vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v77, v77, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v79 = -v10;
    if (v79 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v80 = 16 * v79;
    float32x4_t v81 = *(float32x4_t *)(v7 + v80);
    int8x16_t v82 = *((int8x16_t *)a2 + 15);
    float32x4_t v83 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v84 = vmulq_f32(vrecpeq_f32(v83), *((float32x4_t *)a2 + 18));
    float32x4_t v85 = vmulq_f32(v81, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v84, vrecpsq_f32(v84, v83))), *((int8x16_t *)a2 + 3)));
    float32x4_t v86 = *((float32x4_t *)a2 + 75);
    float32x4_t v87 = *((float32x4_t *)a2 + 5);
    float32x4_t v88 = vminq_f32(vmaxq_f32(v85, v86), v87);
    float32x4_t v89 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v88), (int8x16_t)v87);
    float32x4_t v90 = (float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vcgtq_f32(v89, *((float32x4_t *)a2 + 23)));
    float32x4_t v91 = vsubq_f32(vsubq_f32(v89, v87), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v90), v89));
    float32x4_t v92 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 100), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v88, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v88))), *((float32x4_t *)a2 + 22)), v90), vmulq_f32(v91, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v91, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v91, v91), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v91))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v93 = vcvtq_f32_s32(vcvtq_s32_f32(v92));
    float32x4_t v94 = vsubq_f32(v93, (float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vcgtq_f32(v93, v92)));
    float32x4_t v95 = vsubq_f32(v92, v94);
    float32x4_t v96 = (float32x4_t)vbslq_s8(v82, (int8x16_t)v85, vbslq_s8((int8x16_t)vcgtq_f32(v86, vsubq_f32(v88, *((float32x4_t *)a2 + 104))), (int8x16_t)vmulq_f32(v88, *((float32x4_t *)a2 + 103)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 101), vmulq_f32(*((float32x4_t *)a2 + 102), vmulq_f32(vaddq_f32(v87, vmulq_f32(v95, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v95, vaddq_f32(
                                                      *((float32x4_t *)a2 + 30),
                                                      vmulq_f32(*((float32x4_t *)a2 + 31), v95)))))),
                                            (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v94)), 0x17uLL))))));
    *(int8x16_t *)(v6 + v80) = vbslq_s8(v82, (int8x16_t)v85, (int8x16_t)vmulq_laneq_f32(v96, v96, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getsrgb_halfTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v94 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v14 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23);
      float32x4_t v25 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 105);
      float32x4_t v27 = vmulq_f32(v13, v24);
      float32x4_t v28 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmaxq_f32(v25, v26));
      float32x4_t v29 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmaxq_f32(v27, v26));
      float32x4_t v30 = *((float32x4_t *)a2 + 75);
      float32x4_t v31 = *((float32x4_t *)a2 + 5);
      int32x4_t v33 = *((int32x4_t *)a2 + 33);
      int8x16_t v32 = *((int8x16_t *)a2 + 34);
      float32x4_t v34 = vmulq_f32(v28, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v30, v28), v32, (int8x16_t)v31));
      float32x4_t v35 = vmulq_f32(v29, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v30, v29), v32, (int8x16_t)v31));
      float32x4_t v36 = *((float32x4_t *)a2 + 106);
      float32x4_t v37 = vminq_f32(v34, v36);
      int8x16_t v38 = *((int8x16_t *)a2 + 19);
      float32x4_t v39 = *((float32x4_t *)a2 + 20);
      float32x4_t v40 = vminq_f32(v35, v36);
      float32x4_t v41 = (float32x4_t)vorrq_s8(vandq_s8(v38, (int8x16_t)v37), (int8x16_t)v31);
      float32x4_t v42 = (float32x4_t)vorrq_s8(vandq_s8(v38, (int8x16_t)v40), (int8x16_t)v31);
      int8x16_t v43 = *((int8x16_t *)a2 + 21);
      float32x4_t v44 = *((float32x4_t *)a2 + 22);
      float32x4_t v45 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v40, 0x17uLL)), (float32x4_t)vandq_s8(v43, (int8x16_t)vcgtq_f32(v39, v40)));
      float32x4_t v46 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v37, 0x17uLL)), (float32x4_t)vandq_s8(v43, (int8x16_t)vcgtq_f32(v39, v37))), v44);
      float32x4_t v47 = *((float32x4_t *)a2 + 23);
      float32x4_t v48 = *((float32x4_t *)a2 + 24);
      float32x4_t v49 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v41, v47));
      float32x4_t v50 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v42, v47));
      float32x4_t v51 = vaddq_f32(v46, v49);
      float32x4_t v52 = vaddq_f32(vsubq_f32(v45, v44), v50);
      float32x4_t v53 = vsubq_f32(vsubq_f32(v41, v31), vmulq_f32(vmulq_f32(v48, v49), v41));
      float32x4_t v54 = vsubq_f32(vsubq_f32(v42, v31), vmulq_f32(vmulq_f32(v48, v50), v42));
      float32x4_t v55 = *((float32x4_t *)a2 + 25);
      float32x4_t v56 = *((float32x4_t *)a2 + 26);
      float32x4_t v57 = vaddq_f32(v55, vmulq_f32(v56, v53));
      float32x4_t v58 = vaddq_f32(v55, vmulq_f32(v56, v54));
      float32x4_t v59 = *((float32x4_t *)a2 + 27);
      float32x4_t v60 = *((float32x4_t *)a2 + 28);
      float32x4_t v61 = vaddq_f32(v52, vmulq_f32(v54, vaddq_f32(vaddq_f32(v59, vmulq_f32(v54, v60)), vmulq_f32(vmulq_f32(v54, v54), v58))));
      float32x4_t v62 = *((float32x4_t *)a2 + 100);
      float32x4_t v63 = vmulq_f32(v62, vaddq_f32(v51, vmulq_f32(v53, vaddq_f32(vaddq_f32(v59, vmulq_f32(v53, v60)), vmulq_f32(vmulq_f32(v53, v53), v57)))));
      float32x4_t v64 = vmulq_f32(v62, v61);
      float32x4_t v65 = *((float32x4_t *)a2 + 29);
      float32x4_t v66 = *((float32x4_t *)a2 + 30);
      float32x4_t v67 = vmaxq_f32(v63, v65);
      float32x4_t v68 = vmaxq_f32(v64, v65);
      float32x4_t v69 = vcvtq_f32_s32(vcvtq_s32_f32(v67));
      float32x4_t v70 = vcvtq_f32_s32(vcvtq_s32_f32(v68));
      float32x4_t v71 = vsubq_f32(v69, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v69, v67)));
      float32x4_t v72 = vsubq_f32(v70, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v70, v68)));
      float32x4_t v73 = vsubq_f32(v67, v71);
      float32x4_t v74 = vsubq_f32(v68, v72);
      float32x4_t v75 = *((float32x4_t *)a2 + 31);
      float32x4_t v76 = *((float32x4_t *)a2 + 32);
      float32x4_t v77 = vaddq_f32(v31, vmulq_f32(v73, vaddq_f32(v76, vmulq_f32(v73, vaddq_f32(v66, vmulq_f32(v75, v73))))));
      float32x4_t v78 = vaddq_f32(v31, vmulq_f32(v74, vaddq_f32(v76, vmulq_f32(v74, vaddq_f32(v66, vmulq_f32(v75, v74))))));
      float32x4_t v79 = vmulq_f32(v77, (float32x4_t)vshlq_n_s32(vaddq_s32(v33, vcvtq_s32_f32(v71)), 0x17uLL));
      float32x4_t v80 = vmulq_f32(v78, (float32x4_t)vshlq_n_s32(vaddq_s32(v33, vcvtq_s32_f32(v72)), 0x17uLL));
      float32x4_t v81 = *((float32x4_t *)a2 + 101);
      float32x4_t v82 = *((float32x4_t *)a2 + 102);
      int8x16_t v83 = (int8x16_t)vaddq_f32(v81, vmulq_f32(v82, v79));
      float32x4_t v84 = vmulq_f32(v82, v80);
      float32x4_t v85 = *((float32x4_t *)a2 + 103);
      int8x16_t v86 = (int8x16_t)vmulq_f32(v34, v85);
      float32x4_t v87 = *((float32x4_t *)a2 + 104);
      int8x16_t v88 = (int8x16_t)vcgtq_f32(v30, vsubq_f32(v34, v87));
      int8x16_t v89 = vbslq_s8((int8x16_t)vcgtq_f32(v30, vsubq_f32(v35, v87)), (int8x16_t)vmulq_f32(v35, v85), (int8x16_t)vaddq_f32(v81, v84));
      int8x16_t v90 = *((int8x16_t *)a2 + 36);
      float32x4_t v91 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v25, veorq_s8(vandq_s8(v90, (int8x16_t)v28), vbslq_s8(v88, v86, v83)));
      float32x4_t v92 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, veorq_s8(vandq_s8(v90, (int8x16_t)v29), v89));
      float32x4_t v93 = (int8x16_t *)(v6 + v11);
      v93[-1] = vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v91, v91, 3));
      *float32x4_t v93 = vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v92, v92, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v94 = -v10;
    if (v94 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v95 = 16 * v94;
    float32x4_t v96 = *(float32x4_t *)(v7 + v95);
    int8x16_t v97 = *((int8x16_t *)a2 + 15);
    float32x4_t v98 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v96, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v99 = vmulq_f32(vrecpeq_f32(v98), *((float32x4_t *)a2 + 18));
    float32x4_t v100 = vmulq_f32(v96, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v99, vrecpsq_f32(v99, v98))), *((int8x16_t *)a2 + 3)));
    float32x4_t v101 = (float32x4_t)vbslq_s8(v97, (int8x16_t)v100, (int8x16_t)vmaxq_f32(v100, *((float32x4_t *)a2 + 105)));
    float32x4_t v102 = *((float32x4_t *)a2 + 75);
    float32x4_t v103 = *((float32x4_t *)a2 + 5);
    float32x4_t v104 = vmulq_f32(v101, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v102, v101), *((int8x16_t *)a2 + 34), (int8x16_t)v103));
    float32x4_t v105 = vminq_f32(v104, *((float32x4_t *)a2 + 106));
    float32x4_t v106 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v105), (int8x16_t)v103);
    float32x4_t v107 = (float32x4_t)vandq_s8((int8x16_t)v103, (int8x16_t)vcgtq_f32(v106, *((float32x4_t *)a2 + 23)));
    float32x4_t v108 = vsubq_f32(vsubq_f32(v106, v103), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v107), v106));
    float32x4_t v109 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 100), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v105, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v105))), *((float32x4_t *)a2 + 22)), v107), vmulq_f32(v108, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v108, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v108, v108), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v108))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v110 = vcvtq_f32_s32(vcvtq_s32_f32(v109));
    float32x4_t v111 = vsubq_f32(v110, (float32x4_t)vandq_s8((int8x16_t)v103, (int8x16_t)vcgtq_f32(v110, v109)));
    float32x4_t v112 = vsubq_f32(v109, v111);
    float32x4_t v113 = (float32x4_t)vbslq_s8(v97, (int8x16_t)v100, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v101), vbslq_s8((int8x16_t)vcgtq_f32(v102, vsubq_f32(v104, *((float32x4_t *)a2 + 104))), (int8x16_t)vmulq_f32(v104, *((float32x4_t *)a2 + 103)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 101), vmulq_f32(*((float32x4_t *)a2 + 102), vmulq_f32(vaddq_f32(v103, vmulq_f32(v112, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(
                                                       v112,
                                                       vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v112)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v111)), 0x17uLL)))))));
    *(int8x16_t *)(v6 + v95) = vbslq_s8(v97, (int8x16_t)v100, (int8x16_t)vmulq_laneq_f32(v113, v113, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getsrgb_niceTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v111 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v14 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      int8x16_t v24 = vandq_s8(v23, v22);
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v26));
      float32x4_t v28 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 105);
      int8x16_t v30 = (int8x16_t)vmaxq_f32(v28, v29);
      float32x4_t v31 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmaxq_f32(v27, v29));
      float32x4_t v32 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v28, v30);
      float32x4_t v33 = *((float32x4_t *)a2 + 75);
      float32x4_t v34 = *((float32x4_t *)a2 + 5);
      int32x4_t v36 = *((int32x4_t *)a2 + 33);
      int8x16_t v35 = *((int8x16_t *)a2 + 34);
      float32x4_t v37 = vmulq_f32(v31, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v33, v31), v35, (int8x16_t)v34));
      float32x4_t v38 = vmulq_f32(v32, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v33, v32), v35, (int8x16_t)v34));
      float32x4_t v39 = *((float32x4_t *)a2 + 106);
      float32x4_t v40 = *((float32x4_t *)a2 + 100);
      int8x16_t v41 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vceqq_f32(v40, v33)), v33);
      float32x4_t v42 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v34, (int8x16_t)vminq_f32(v37, v39));
      float32x4_t v43 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v34, (int8x16_t)vminq_f32(v38, v39));
      int8x16_t v44 = *((int8x16_t *)a2 + 19);
      float32x4_t v45 = *((float32x4_t *)a2 + 20);
      float32x4_t v46 = (float32x4_t)vorrq_s8(vandq_s8(v44, (int8x16_t)v42), (int8x16_t)v34);
      int8x16_t v47 = *((int8x16_t *)a2 + 21);
      float32x4_t v48 = *((float32x4_t *)a2 + 22);
      float32x4_t v49 = (float32x4_t)vorrq_s8(vandq_s8(v44, (int8x16_t)v43), (int8x16_t)v34);
      float32x4_t v50 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v43, 0x17uLL)), (float32x4_t)vandq_s8(v47, (int8x16_t)vcgtq_f32(v45, v43)));
      float32x4_t v51 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v42, 0x17uLL)), (float32x4_t)vandq_s8(v47, (int8x16_t)vcgtq_f32(v45, v42))), v48);
      float32x4_t v52 = *((float32x4_t *)a2 + 23);
      float32x4_t v53 = *((float32x4_t *)a2 + 24);
      float32x4_t v54 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v46, v52));
      float32x4_t v55 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v49, v52));
      float32x4_t v56 = vaddq_f32(v51, v54);
      float32x4_t v57 = vmulq_f32(v53, v54);
      float32x4_t v58 = vmulq_f32(vmulq_f32(v53, v55), v49);
      float32x4_t v59 = vaddq_f32(vsubq_f32(v50, v48), v55);
      float32x4_t v60 = vsubq_f32(vsubq_f32(v46, v34), vmulq_f32(v57, v46));
      float32x4_t v61 = vsubq_f32(vsubq_f32(v49, v34), v58);
      float32x4_t v62 = *((float32x4_t *)a2 + 38);
      float32x4_t v63 = *((float32x4_t *)a2 + 39);
      float32x4_t v64 = vmulq_f32(v60, v60);
      int8x16_t v66 = *((int8x16_t *)a2 + 36);
      float32x4_t v65 = *((float32x4_t *)a2 + 37);
      float32x4_t v67 = *((float32x4_t *)a2 + 40);
      float32x4_t v68 = *((float32x4_t *)a2 + 41);
      float32x4_t v69 = vaddq_f32(v65, vmulq_f32(v62, v60));
      float32x4_t v70 = vaddq_f32(v63, vmulq_f32(v67, v60));
      float32x4_t v71 = vaddq_f32(v63, vmulq_f32(v67, v61));
      float32x4_t v72 = vaddq_f32(v65, vmulq_f32(v62, v61));
      float32x4_t v73 = *((float32x4_t *)a2 + 42);
      float32x4_t v74 = *((float32x4_t *)a2 + 43);
      float32x4_t v75 = vaddq_f32(v68, vmulq_f32(v73, v60));
      float32x4_t v76 = vaddq_f32(v68, vmulq_f32(v73, v61));
      float32x4_t v77 = vmulq_f32(v61, v61);
      float32x4_t v78 = vmulq_f32(v40, vaddq_f32(v56, vmulq_f32(v60, vaddq_f32(v74, vmulq_f32(v60, vaddq_f32(v75, vmulq_f32(v64, vaddq_f32(v69, vmulq_f32(v64, v70)))))))));
      float32x4_t v79 = vmulq_f32(v40, vaddq_f32(v59, vmulq_f32(v61, vaddq_f32(v74, vmulq_f32(v61, vaddq_f32(v76, vmulq_f32(v77, vaddq_f32(v72, vmulq_f32(v77, v71)))))))));
      float32x4_t v80 = *((float32x4_t *)a2 + 29);
      float32x4_t v81 = vmaxq_f32(v78, v80);
      float32x4_t v82 = vmaxq_f32(v79, v80);
      float32x4_t v83 = vcvtq_f32_s32(vcvtq_s32_f32(v81));
      float32x4_t v84 = vcvtq_f32_s32(vcvtq_s32_f32(v82));
      float32x4_t v85 = vsubq_f32(v83, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v83, v81)));
      float32x4_t v86 = vsubq_f32(v84, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v84, v82)));
      float32x4_t v87 = vsubq_f32(v81, v85);
      float32x4_t v88 = vsubq_f32(v82, v86);
      float32x4_t v89 = *((float32x4_t *)a2 + 44);
      float32x4_t v90 = *((float32x4_t *)a2 + 45);
      float32x4_t v91 = vaddq_f32(v89, vmulq_f32(v90, v87));
      float32x4_t v92 = vaddq_f32(v89, vmulq_f32(v90, v88));
      float32x4_t v93 = *((float32x4_t *)a2 + 46);
      float32x4_t v94 = *((float32x4_t *)a2 + 47);
      float32x4_t v95 = vaddq_f32(vaddq_f32(v93, vmulq_f32(v94, v88)), vmulq_f32(vmulq_f32(v88, v88), v92));
      float32x4_t v96 = *((float32x4_t *)a2 + 48);
      float32x4_t v97 = vaddq_f32(v34, vmulq_f32(v87, vaddq_f32(v96, vmulq_f32(v87, vaddq_f32(vaddq_f32(v93, vmulq_f32(v87, v94)), vmulq_f32(vmulq_f32(v87, v87), v91))))));
      float32x4_t v98 = vaddq_f32(v34, vmulq_f32(v88, vaddq_f32(v96, vmulq_f32(v88, v95))));
      float32x4_t v99 = vmulq_f32(v97, (float32x4_t)vshlq_n_s32(vaddq_s32(v36, vcvtq_s32_f32(v85)), 0x17uLL));
      float32x4_t v100 = vmulq_f32(v98, (float32x4_t)vshlq_n_s32(vaddq_s32(v36, vcvtq_s32_f32(v86)), 0x17uLL));
      float32x4_t v101 = *((float32x4_t *)a2 + 101);
      float32x4_t v102 = *((float32x4_t *)a2 + 102);
      int8x16_t v103 = (int8x16_t)vaddq_f32(v101, vmulq_f32(v102, v99));
      float32x4_t v104 = vmulq_f32(v102, v100);
      float32x4_t v105 = *((float32x4_t *)a2 + 103);
      int8x16_t v106 = (int8x16_t)vaddq_f32(v101, v104);
      float32x4_t v107 = *((float32x4_t *)a2 + 104);
      float32x4_t v108 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, veorq_s8(vandq_s8(v66, (int8x16_t)v31), vbslq_s8((int8x16_t)vcgtq_f32(v33, vsubq_f32(v37, v107)), (int8x16_t)vmulq_f32(v37, v105), v103)));
      float32x4_t v109 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v28, veorq_s8(vandq_s8(v66, (int8x16_t)v32), vbslq_s8((int8x16_t)vcgtq_f32(v33, vsubq_f32(v38, v107)), (int8x16_t)vmulq_f32(v38, v105), v106)));
      float32x4_t v110 = (int8x16_t *)(v6 + v11);
      v110[-1] = vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v108, v108, 3));
      *float32x4_t v110 = vbslq_s8(v14, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v109, v109, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v111 = -v10;
    if (v111 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v112 = 16 * v111;
    float32x4_t v113 = *(float32x4_t *)(v7 + v112);
    int8x16_t v114 = *((int8x16_t *)a2 + 15);
    float32x4_t v115 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v116 = vrecpeq_f32(v115);
    float32x4_t v117 = vmulq_f32(v116, vrecpsq_f32(v116, v115));
    float32x4_t v118 = vmulq_f32(v113, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v117, vrecpsq_f32(v117, v115))), *((int8x16_t *)a2 + 3)));
    float32x4_t v119 = (float32x4_t)vbslq_s8(v114, (int8x16_t)v118, (int8x16_t)vmaxq_f32(v118, *((float32x4_t *)a2 + 105)));
    float32x4_t v120 = *((float32x4_t *)a2 + 75);
    float32x4_t v121 = *((float32x4_t *)a2 + 5);
    float32x4_t v122 = vmulq_f32(v119, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v120, v119), *((int8x16_t *)a2 + 34), (int8x16_t)v121));
    float32x4_t v123 = *((float32x4_t *)a2 + 100);
    float32x4_t v124 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v121, (int8x16_t)vceqq_f32(v123, v120)), v120), (int8x16_t)v121, (int8x16_t)vminq_f32(v122, *((float32x4_t *)a2 + 106)));
    float32x4_t v125 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v124), (int8x16_t)v121);
    float32x4_t v126 = (float32x4_t)vandq_s8((int8x16_t)v121, (int8x16_t)vcgtq_f32(v125, *((float32x4_t *)a2 + 23)));
    float32x4_t v127 = vsubq_f32(vsubq_f32(v125, v121), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v126), v125));
    float32x4_t v128 = vmulq_f32(v127, v127);
    float32x4_t v129 = vmaxq_f32(vmulq_f32(v123, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v124, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v124))), *((float32x4_t *)a2 + 22)), v126), vmulq_f32(v127, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v127, vaddq_f32(
                         vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v127)),
                         vmulq_f32(v128, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v127)), vmulq_f32(v128, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v127))))))))))), *((float32x4_t *)a2 + 29));
    float32x4_t v130 = vcvtq_f32_s32(vcvtq_s32_f32(v129));
    float32x4_t v131 = vsubq_f32(v130, (float32x4_t)vandq_s8((int8x16_t)v121, (int8x16_t)vcgtq_f32(v130, v129)));
    float32x4_t v132 = vsubq_f32(v129, v131);
    float32x4_t v133 = (float32x4_t)vbslq_s8(v114, (int8x16_t)v118, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v119), vbslq_s8((int8x16_t)vcgtq_f32(v120, vsubq_f32(v122, *((float32x4_t *)a2 + 104))), (int8x16_t)vmulq_f32(v122, *((float32x4_t *)a2 + 103)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 101), vmulq_f32(*((float32x4_t *)a2 + 102), vmulq_f32(vaddq_f32(v121, vmulq_f32(v132, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(
                                                       v132,
                                                       vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v132)), vmulq_f32(vmulq_f32(v132, v132), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v132)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v131)), 0x17uLL)))))));
    *(int8x16_t *)(v6 + v112) = vbslq_s8(v114, (int8x16_t)v118, (int8x16_t)vmulq_laneq_f32(v133, v133, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_srgb_fast_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v67 = 0;
        uint64_t v68 = 16 * v8;
        uint64_t v69 = 16 * v7;
        uint64_t v70 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v71 = 0;
          do
          {
            int8x16_t v72 = *((int8x16_t *)a2 + 15);
            float32x4_t v73 = vmulq_f32(v5[v71 / 0x10], (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5[v71 / 0x10], 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
            float32x4_t v74 = vminq_f32(vmaxq_f32(v73, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v75 = vmulq_f32(v74, *((float32x4_t *)a2 + 107));
            float32x4_t v76 = vaddq_f32(v75, vmulq_f32(v74, vsubq_f32(v74, v75)));
            float32x4_t v77 = (float32x4_t)vbslq_s8(v72, (int8x16_t)v73, (int8x16_t)vmulq_f32(v76, v76));
            v6[v71 / 0x10] = vbslq_s8(v72, (int8x16_t)v73, (int8x16_t)vmulq_laneq_f32(v77, v77, 3));
            v71 += 16;
          }
          while (v70 != v71);
          ++v67;
          int v5 = (float32x4_t *)((char *)v5 + v68);
          uint64_t v6 = (int8x16_t *)((char *)v6 + v69);
        }
        while (v67 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      float32x4_t v12 = v5 + 4;
      float32x4_t v13 = v6 + 4;
      do
      {
        unint64_t v14 = 0;
        float32x4_t v15 = v13;
        float32x4_t v16 = v12;
        uint64_t v17 = 2;
        do
        {
          float32x4_t v18 = v5[v17 - 2];
          float32x4_t v19 = v5[v17 - 1];
          float32x4_t v20 = v5[v17];
          float32x4_t v21 = v5[v17 + 1];
          int8x16_t v23 = *((int8x16_t *)a2 + 15);
          float32x4_t v22 = *((float32x4_t *)a2 + 16);
          int8x16_t v24 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3), v22));
          int8x16_t v25 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3), v22));
          int8x16_t v26 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 3), v22));
          int8x16_t v27 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 3), v22));
          int8x16_t v28 = *((int8x16_t *)a2 + 17);
          int8x16_t v29 = vandq_s8(v28, v24);
          int8x16_t v30 = vandq_s8(v28, v25);
          int8x16_t v31 = vandq_s8(v28, v26);
          int8x16_t v32 = vandq_s8(v28, v27);
          int8x16_t v33 = *((int8x16_t *)a2 + 3);
          float32x4_t v34 = vmulq_f32(v18, (float32x4_t)vorrq_s8(v29, v33));
          float32x4_t v35 = vmulq_f32(v19, (float32x4_t)vorrq_s8(v30, v33));
          float32x4_t v36 = vmulq_f32(v20, (float32x4_t)vorrq_s8(v31, v33));
          float32x4_t v37 = *((float32x4_t *)a2 + 75);
          float32x4_t v38 = vmulq_f32(v21, (float32x4_t)vorrq_s8(v32, v33));
          float32x4_t v39 = *((float32x4_t *)a2 + 5);
          float32x4_t v40 = v16;
          float32x4_t v41 = vminq_f32(vmaxq_f32(v34, v37), v39);
          float32x4_t v42 = vminq_f32(vmaxq_f32(v35, v37), v39);
          float32x4_t v43 = vminq_f32(vmaxq_f32(v36, v37), v39);
          float32x4_t v44 = vminq_f32(vmaxq_f32(v38, v37), v39);
          float32x4_t v45 = *((float32x4_t *)a2 + 107);
          float32x4_t v46 = vmulq_f32(v41, v45);
          float32x4_t v47 = vmulq_f32(v42, v45);
          float32x4_t v48 = vmulq_f32(v43, v45);
          float32x4_t v49 = vmulq_f32(v44, v45);
          float32x4_t v50 = vaddq_f32(v46, vmulq_f32(v41, vsubq_f32(v41, v46)));
          float32x4_t v51 = vaddq_f32(v47, vmulq_f32(v42, vsubq_f32(v42, v47)));
          float32x4_t v52 = vaddq_f32(v48, vmulq_f32(v43, vsubq_f32(v43, v48)));
          float32x4_t v53 = vaddq_f32(v49, vmulq_f32(v44, vsubq_f32(v44, v49)));
          float32x4_t v54 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v34, (int8x16_t)vmulq_f32(v50, v50));
          float32x4_t v55 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v35, (int8x16_t)vmulq_f32(v51, v51));
          float32x4_t v56 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v36, (int8x16_t)vmulq_f32(v52, v52));
          float32x4_t v57 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v38, (int8x16_t)vmulq_f32(v53, v53));
          float32x4_t v58 = v15;
          float32x4_t v59 = &v6[v17];
          v14 += 4;
          v59[-2] = vbslq_s8(v23, (int8x16_t)v34, (int8x16_t)vmulq_laneq_f32(v54, v54, 3));
          v59[-1] = vbslq_s8(v23, (int8x16_t)v35, (int8x16_t)vmulq_laneq_f32(v55, v55, 3));
          *float32x4_t v59 = vbslq_s8(v23, (int8x16_t)v36, (int8x16_t)vmulq_laneq_f32(v56, v56, 3));
          v59[1] = vbslq_s8(v23, (int8x16_t)v38, (int8x16_t)vmulq_laneq_f32(v57, v57, 3));
          v17 += 4;
          v16 += 4;
          float32x4_t v15 = v58 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            float32x4_t v60 = *v40++;
            int8x16_t v61 = *((int8x16_t *)a2 + 15);
            float32x4_t v62 = vmulq_f32(v60, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
            float32x4_t v63 = vminq_f32(vmaxq_f32(v62, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v64 = vmulq_f32(v63, *((float32x4_t *)a2 + 107));
            float32x4_t v65 = vaddq_f32(v64, vmulq_f32(v63, vsubq_f32(v63, v64)));
            float32x4_t v66 = (float32x4_t)vbslq_s8(v61, (int8x16_t)v62, (int8x16_t)vmulq_f32(v65, v65));
            *v58++ = vbslq_s8(v61, (int8x16_t)v62, (int8x16_t)vmulq_laneq_f32(v66, v66, 3));
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        uint64_t v6 = (int8x16_t *)((char *)v6 + v10);
        int v5 = (float32x4_t *)((char *)v5 + v11);
        float32x4_t v12 = (float32x4_t *)((char *)v12 + v11);
        float32x4_t v13 = (int8x16_t *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

uint64_t Getinv_srgb_fixed_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v84) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v10 + 32);
      int8x16_t v16 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v17 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15));
      float32x4_t v18 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15));
      float32x4_t v19 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v15));
      int8x16_t v21 = *((int8x16_t *)a2 + 17);
      float32x4_t v20 = *((float32x4_t *)a2 + 18);
      int8x16_t v22 = (int8x16_t)vmulq_f32(v19, v20);
      int8x16_t v23 = vandq_s8(v21, (int8x16_t)vmulq_f32(v17, v20));
      int8x16_t v24 = vandq_s8(v21, (int8x16_t)vmulq_f32(v18, v20));
      int8x16_t v25 = *((int8x16_t *)a2 + 3);
      float32x4_t v26 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v23, v25));
      float32x4_t v27 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v24, v25));
      float32x4_t v28 = vmulq_f32(v14, (float32x4_t)vorrq_s8(vandq_s8(v21, v22), v25));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = *((float32x4_t *)a2 + 6);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v26, v29), v30);
      float32x4_t v33 = vminq_f32(vmaxq_f32(v27, v29), v30);
      float32x4_t v34 = vminq_f32(vmaxq_f32(v28, v29), v30);
      float32x4_t v35 = *((float32x4_t *)a2 + 108);
      float32x4_t v36 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)vaddq_f32(v32, v35)));
      float32x4_t v37 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)vaddq_f32(v33, v35)));
      float32x4_t v38 = vmulq_f32(v31, vcvtq_f32_s32((int32x4_t)vaddq_f32(v34, v35)));
      float32x4_t v39 = vcvtq_f32_s32(vcvtq_s32_f32(v36));
      float32x4_t v40 = vcvtq_f32_s32(vcvtq_s32_f32(v37));
      float32x4_t v41 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
      float32x4_t v42 = *((float32x4_t *)a2 + 7);
      float32x4_t v43 = *((float32x4_t *)a2 + 8);
      float32x4_t v44 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v36, v39), v42));
      float32x4_t v45 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v37, v40), v42));
      float32x4_t v46 = vrsqrteq_f32(vaddq_f32(v42, vsubq_f32(v38, v41)));
      float32x4_t v47 = vaddq_f32(v43, v39);
      float32x4_t v48 = vaddq_f32(v43, v40);
      float32x4_t v49 = vaddq_f32(v43, v41);
      float32x4_t v50 = *((float32x4_t *)a2 + 9);
      float32x4_t v51 = *((float32x4_t *)a2 + 10);
      float32x4_t v52 = vsubq_f32(v47, vmulq_f32(v44, v50));
      float32x4_t v53 = vsubq_f32(v48, vmulq_f32(v45, v50));
      float32x4_t v54 = *((float32x4_t *)a2 + 109);
      float32x4_t v55 = vmulq_f32(v54, v52);
      float32x4_t v56 = vmulq_f32(v54, v53);
      float32x4_t v57 = vmulq_f32(v54, vsubq_f32(v49, vmulq_f32(v46, v50)));
      float32x4_t v58 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
      float32x4_t v59 = vcvtq_f32_s32(vcvtq_s32_f32(v56));
      float32x4_t v60 = vcvtq_f32_s32(vcvtq_s32_f32(v57));
      float32x4_t v61 = vsubq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v58, v55)));
      float32x4_t v62 = vsubq_f32(v59, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v59, v56)));
      float32x4_t v63 = vsubq_f32(v60, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v60, v57)));
      float32x4_t v64 = *((float32x4_t *)a2 + 11);
      float32x4_t v65 = *((float32x4_t *)a2 + 12);
      float32x4_t v66 = vmulq_f32(vrecpeq_f32(vsubq_f32(v64, vsubq_f32(v55, v61))), v65);
      float32x4_t v67 = vmulq_f32(vrecpeq_f32(vsubq_f32(v64, vsubq_f32(v56, v62))), v65);
      float32x4_t v68 = vmulq_f32(vrecpeq_f32(vsubq_f32(v64, vsubq_f32(v57, v63))), v65);
      float32x4_t v69 = vaddq_f32(vaddq_f32(v51, v63), vmulq_f32(v68, v68));
      float32x4_t v70 = vmaxq_f32(vaddq_f32(vaddq_f32(v51, v61), vmulq_f32(v66, v66)), v29);
      float32x4_t v71 = vmaxq_f32(vaddq_f32(vaddq_f32(v51, v62), vmulq_f32(v67, v67)), v29);
      float32x4_t v72 = *((float32x4_t *)a2 + 13);
      float32x4_t v73 = *((float32x4_t *)a2 + 14);
      float32x4_t v74 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v70, v72), v73));
      float32x4_t v75 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v71, v72), v73));
      float32x4_t v76 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(v69, v29), v72), v73));
      float32x4_t v77 = *((float32x4_t *)a2 + 110);
      float32x4_t v78 = *((float32x4_t *)a2 + 111);
      float32x4_t v79 = *((float32x4_t *)a2 + 112);
      float32x4_t v80 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v26, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v79)), (int8x16_t)vmulq_f32(v32, v78), (int8x16_t)vmulq_f32(v77, v74)));
      float32x4_t v81 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v27, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v33, v79)), (int8x16_t)vmulq_f32(v33, v78), (int8x16_t)vmulq_f32(v77, v75)));
      float32x4_t v82 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v28, vbslq_s8((int8x16_t)vcgtq_f32(v29, vsubq_f32(v34, v79)), (int8x16_t)vmulq_f32(v34, v78), (int8x16_t)vmulq_f32(v77, v76)));
      float32x4_t v83 = (int8x16_t *)(v6 + v10);
      *float32x4_t v83 = vbslq_s8(v16, (int8x16_t)v26, (int8x16_t)vmulq_laneq_f32(v80, v80, 3));
      v83[1] = vbslq_s8(v16, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v81, v81, 3));
      v83[2] = vbslq_s8(v16, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v82, v82, 3));
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v84) = -v11;
    if ((int)v84 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v84 = v84;
    do
    {
      int8x16_t v85 = *((int8x16_t *)a2 + 15);
      float32x4_t v86 = vmulq_f32(*(float32x4_t *)(v7 + 16 * v84), (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v7 + 16 * v84), 3), *((float32x4_t *)a2 + 16))), *((float32x4_t *)a2 + 18))), *((int8x16_t *)a2 + 3)));
      float32x4_t v87 = *((float32x4_t *)a2 + 75);
      float32x4_t v88 = *((float32x4_t *)a2 + 5);
      float32x4_t v89 = vminq_f32(vmaxq_f32(v86, v87), v88);
      float32x4_t v90 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v89, *((float32x4_t *)a2 + 108))));
      float32x4_t v91 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
      float32x4_t v92 = vmulq_f32(*((float32x4_t *)a2 + 109), vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v91), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v90, v91))), *((float32x4_t *)a2 + 9))));
      float32x4_t v93 = vcvtq_f32_s32(vcvtq_s32_f32(v92));
      float32x4_t v94 = vsubq_f32(v93, (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v93, v92)));
      float32x4_t v95 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v92, v94))), *((float32x4_t *)a2 + 12));
      float32x4_t v96 = (float32x4_t)vbslq_s8(v85, (int8x16_t)v86, vbslq_s8((int8x16_t)vcgtq_f32(v87, vsubq_f32(v89, *((float32x4_t *)a2 + 112))), (int8x16_t)vmulq_f32(v89, *((float32x4_t *)a2 + 111)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 110), (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v94), vmulq_f32(v95, v95)), v87), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))))));
      *(int8x16_t *)(v6 + 16 * v84++) = vbslq_s8(v85, (int8x16_t)v86, (int8x16_t)vmulq_laneq_f32(v96, v96, 3));
    }
    while (v84 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_srgb_nice_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v104 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      int8x16_t v24 = vandq_s8(v23, v22);
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v26));
      float32x4_t v28 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = *((float32x4_t *)a2 + 5);
      float32x4_t v31 = vminq_f32(vmaxq_f32(v27, v29), v30);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v28, v29), v30);
      float32x4_t v33 = *((float32x4_t *)a2 + 108);
      float32x4_t v34 = *((float32x4_t *)a2 + 109);
      int8x16_t v35 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vceqq_f32(v34, v29)), v29);
      float32x4_t v36 = (float32x4_t)vbslq_s8(v35, (int8x16_t)v30, (int8x16_t)vaddq_f32(v31, v33));
      float32x4_t v37 = (float32x4_t)vbslq_s8(v35, (int8x16_t)v30, (int8x16_t)vaddq_f32(v32, v33));
      int8x16_t v38 = *((int8x16_t *)a2 + 19);
      float32x4_t v39 = *((float32x4_t *)a2 + 20);
      float32x4_t v40 = (float32x4_t)vorrq_s8(vandq_s8(v38, (int8x16_t)v36), (int8x16_t)v30);
      float32x4_t v41 = (float32x4_t)vorrq_s8(vandq_s8(v38, (int8x16_t)v37), (int8x16_t)v30);
      int8x16_t v42 = *((int8x16_t *)a2 + 21);
      float32x4_t v43 = *((float32x4_t *)a2 + 22);
      float32x4_t v44 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v39, v36)));
      float32x4_t v45 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v37, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v39, v37)));
      float32x4_t v46 = *((float32x4_t *)a2 + 23);
      float32x4_t v47 = *((float32x4_t *)a2 + 24);
      float32x4_t v48 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v40, v46));
      float32x4_t v49 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v41, v46));
      float32x4_t v50 = vaddq_f32(vsubq_f32(v44, v43), v48);
      float32x4_t v51 = vmulq_f32(v47, v48);
      float32x4_t v52 = vmulq_f32(vmulq_f32(v47, v49), v41);
      float32x4_t v53 = vaddq_f32(vsubq_f32(v45, v43), v49);
      float32x4_t v54 = vsubq_f32(vsubq_f32(v40, v30), vmulq_f32(v51, v40));
      float32x4_t v55 = vsubq_f32(vsubq_f32(v41, v30), v52);
      float32x4_t v56 = vmulq_f32(v54, v54);
      float32x4_t v57 = vmulq_f32(v55, v55);
      float32x4_t v58 = *((float32x4_t *)a2 + 37);
      float32x4_t v59 = *((float32x4_t *)a2 + 38);
      float32x4_t v60 = *((float32x4_t *)a2 + 39);
      float32x4_t v61 = *((float32x4_t *)a2 + 40);
      float32x4_t v62 = vaddq_f32(v58, vmulq_f32(v59, v54));
      float32x4_t v63 = vaddq_f32(v60, vmulq_f32(v61, v54));
      float32x4_t v64 = vaddq_f32(v60, vmulq_f32(v61, v55));
      float32x4_t v65 = vaddq_f32(v58, vmulq_f32(v59, v55));
      float32x4_t v66 = *((float32x4_t *)a2 + 41);
      float32x4_t v67 = *((float32x4_t *)a2 + 42);
      float32x4_t v68 = vaddq_f32(vaddq_f32(v66, vmulq_f32(v67, v55)), vmulq_f32(v57, vaddq_f32(v65, vmulq_f32(v57, v64))));
      float32x4_t v69 = vmulq_f32(v54, vaddq_f32(vaddq_f32(v66, vmulq_f32(v67, v54)), vmulq_f32(v56, vaddq_f32(v62, vmulq_f32(v56, v63)))));
      float32x4_t v70 = *((float32x4_t *)a2 + 43);
      float32x4_t v71 = *((float32x4_t *)a2 + 44);
      float32x4_t v72 = vmulq_f32(v34, vaddq_f32(v50, vmulq_f32(v54, vaddq_f32(v70, v69))));
      float32x4_t v73 = vmulq_f32(v34, vaddq_f32(v53, vmulq_f32(v55, vaddq_f32(v70, vmulq_f32(v55, v68)))));
      float32x4_t v74 = *((float32x4_t *)a2 + 29);
      float32x4_t v75 = vmaxq_f32(v72, v74);
      float32x4_t v76 = vmaxq_f32(v73, v74);
      float32x4_t v77 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
      float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v76));
      float32x4_t v79 = vsubq_f32(v77, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v77, v75)));
      float32x4_t v80 = vsubq_f32(v78, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v78, v76)));
      float32x4_t v81 = vsubq_f32(v75, v79);
      float32x4_t v82 = vsubq_f32(v76, v80);
      float32x4_t v83 = *((float32x4_t *)a2 + 45);
      float32x4_t v84 = *((float32x4_t *)a2 + 46);
      float32x4_t v85 = vaddq_f32(v71, vmulq_f32(v83, v81));
      float32x4_t v86 = vaddq_f32(v71, vmulq_f32(v83, v82));
      float32x4_t v87 = *((float32x4_t *)a2 + 47);
      float32x4_t v88 = *((float32x4_t *)a2 + 48);
      float32x4_t v89 = vaddq_f32(v30, vmulq_f32(v81, vaddq_f32(v88, vmulq_f32(v81, vaddq_f32(vaddq_f32(v84, vmulq_f32(v81, v87)), vmulq_f32(vmulq_f32(v81, v81), v85))))));
      int32x4_t v90 = *((int32x4_t *)a2 + 33);
      float32x4_t v91 = vaddq_f32(v30, vmulq_f32(v82, vaddq_f32(v88, vmulq_f32(v82, vaddq_f32(vaddq_f32(v84, vmulq_f32(v87, v82)), vmulq_f32(vmulq_f32(v82, v82), v86))))));
      float32x4_t v92 = vmulq_f32(v89, (float32x4_t)vshlq_n_s32(vaddq_s32(v90, vcvtq_s32_f32(v79)), 0x17uLL));
      float32x4_t v93 = vmulq_f32(v91, (float32x4_t)vshlq_n_s32(vaddq_s32(v90, vcvtq_s32_f32(v80)), 0x17uLL));
      float32x4_t v94 = *((float32x4_t *)a2 + 110);
      float32x4_t v95 = *((float32x4_t *)a2 + 111);
      int8x16_t v96 = (int8x16_t)vmulq_f32(v31, v95);
      int8x16_t v97 = (int8x16_t)vmulq_f32(v32, v95);
      float32x4_t v98 = *((float32x4_t *)a2 + 112);
      int8x16_t v99 = (int8x16_t)vcgtq_f32(v29, vsubq_f32(v31, v98));
      int8x16_t v100 = (int8x16_t)vcgtq_f32(v29, vsubq_f32(v32, v98));
      float32x4_t v101 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v27, vbslq_s8(v99, v96, (int8x16_t)vmulq_f32(v94, v92)));
      float32x4_t v102 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v28, vbslq_s8(v100, v97, (int8x16_t)vmulq_f32(v94, v93)));
      int8x16_t v103 = (int8x16_t *)(v6 + v11);
      v103[-1] = vbslq_s8(v15, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v101, v101, 3));
      *int8x16_t v103 = vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v102, v102, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v104 = -v10;
    if (v104 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v105 = 16 * v104;
    float32x4_t v106 = *(float32x4_t *)(v7 + v105);
    int8x16_t v107 = *((int8x16_t *)a2 + 15);
    float32x4_t v108 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v109 = vrecpeq_f32(v108);
    float32x4_t v110 = vmulq_f32(v109, vrecpsq_f32(v109, v108));
    float32x4_t v111 = vmulq_f32(v106, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v110, vrecpsq_f32(v110, v108))), *((int8x16_t *)a2 + 3)));
    float32x4_t v112 = *((float32x4_t *)a2 + 75);
    float32x4_t v113 = *((float32x4_t *)a2 + 5);
    float32x4_t v114 = vminq_f32(vmaxq_f32(v111, v112), v113);
    float32x4_t v115 = *((float32x4_t *)a2 + 109);
    float32x4_t v116 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v113, (int8x16_t)vceqq_f32(v115, v112)), v112), (int8x16_t)v113, (int8x16_t)vaddq_f32(v114, *((float32x4_t *)a2 + 108)));
    float32x4_t v117 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v116), (int8x16_t)v113);
    float32x4_t v118 = (float32x4_t)vandq_s8((int8x16_t)v113, (int8x16_t)vcgtq_f32(v117, *((float32x4_t *)a2 + 23)));
    float32x4_t v119 = vsubq_f32(vsubq_f32(v117, v113), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v118), v117));
    float32x4_t v120 = vmulq_f32(v119, v119);
    float32x4_t v121 = vmaxq_f32(vmulq_f32(v115, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v116, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v116))), *((float32x4_t *)a2 + 22)), v118), vmulq_f32(v119, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v119, vaddq_f32(
                         vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v119)),
                         vmulq_f32(v120, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v119)), vmulq_f32(v120, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v119))))))))))), *((float32x4_t *)a2 + 29));
    float32x4_t v122 = vcvtq_f32_s32(vcvtq_s32_f32(v121));
    float32x4_t v123 = vsubq_f32(v122, (float32x4_t)vandq_s8((int8x16_t)v113, (int8x16_t)vcgtq_f32(v122, v121)));
    float32x4_t v124 = vsubq_f32(v121, v123);
    float32x4_t v125 = (float32x4_t)vbslq_s8(v107, (int8x16_t)v111, vbslq_s8((int8x16_t)vcgtq_f32(v112, vsubq_f32(v114, *((float32x4_t *)a2 + 112))), (int8x16_t)vmulq_f32(v114, *((float32x4_t *)a2 + 111)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 110), vmulq_f32(vaddq_f32(v113, vmulq_f32(v124, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v124, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46),
                                                       vmulq_f32(*((float32x4_t *)a2 + 47), v124)),
                                                     vmulq_f32(vmulq_f32(v124, v124), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v124)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v123)), 0x17uLL)))));
    *(int8x16_t *)(v6 + v105) = vbslq_s8(v107, (int8x16_t)v111, (int8x16_t)vmulq_laneq_f32(v125, v125, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_srgb_half_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v84 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 75);
      float32x4_t v27 = *((float32x4_t *)a2 + 5);
      float32x4_t v28 = vminq_f32(vmaxq_f32(v24, v26), v27);
      float32x4_t v29 = vminq_f32(vmaxq_f32(v25, v26), v27);
      float32x4_t v30 = *((float32x4_t *)a2 + 108);
      float32x4_t v31 = vaddq_f32(v28, v30);
      float32x4_t v32 = vaddq_f32(v29, v30);
      int8x16_t v33 = *((int8x16_t *)a2 + 19);
      float32x4_t v34 = *((float32x4_t *)a2 + 20);
      float32x4_t v35 = (float32x4_t)vorrq_s8(vandq_s8(v33, (int8x16_t)v31), (int8x16_t)v27);
      float32x4_t v36 = (float32x4_t)vorrq_s8(vandq_s8(v33, (int8x16_t)v32), (int8x16_t)v27);
      int8x16_t v37 = *((int8x16_t *)a2 + 21);
      float32x4_t v38 = *((float32x4_t *)a2 + 22);
      float32x4_t v39 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v32, 0x17uLL)), (float32x4_t)vandq_s8(v37, (int8x16_t)vcgtq_f32(v34, v32)));
      float32x4_t v40 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v31, 0x17uLL)), (float32x4_t)vandq_s8(v37, (int8x16_t)vcgtq_f32(v34, v31))), v38);
      float32x4_t v41 = *((float32x4_t *)a2 + 23);
      float32x4_t v42 = *((float32x4_t *)a2 + 24);
      float32x4_t v43 = vsubq_f32(v39, v38);
      float32x4_t v44 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v35, v41));
      float32x4_t v45 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v36, v41));
      float32x4_t v46 = vaddq_f32(v40, v44);
      float32x4_t v47 = vsubq_f32(vsubq_f32(v35, v27), vmulq_f32(vmulq_f32(v42, v44), v35));
      float32x4_t v48 = vsubq_f32(vsubq_f32(v36, v27), vmulq_f32(vmulq_f32(v42, v45), v36));
      float32x4_t v49 = *((float32x4_t *)a2 + 25);
      float32x4_t v50 = *((float32x4_t *)a2 + 26);
      float32x4_t v51 = vaddq_f32(v49, vmulq_f32(v50, v47));
      float32x4_t v52 = vaddq_f32(v49, vmulq_f32(v50, v48));
      float32x4_t v53 = *((float32x4_t *)a2 + 27);
      float32x4_t v54 = *((float32x4_t *)a2 + 28);
      float32x4_t v55 = vaddq_f32(vaddq_f32(v43, v45), vmulq_f32(v48, vaddq_f32(vaddq_f32(v53, vmulq_f32(v48, v54)), vmulq_f32(vmulq_f32(v48, v48), v52))));
      float32x4_t v56 = *((float32x4_t *)a2 + 109);
      float32x4_t v57 = vmulq_f32(v56, vaddq_f32(v46, vmulq_f32(v47, vaddq_f32(vaddq_f32(v53, vmulq_f32(v47, v54)), vmulq_f32(vmulq_f32(v47, v47), v51)))));
      float32x4_t v58 = vmulq_f32(v56, v55);
      float32x4_t v59 = *((float32x4_t *)a2 + 29);
      float32x4_t v60 = *((float32x4_t *)a2 + 30);
      float32x4_t v61 = vmaxq_f32(v57, v59);
      float32x4_t v62 = vmaxq_f32(v58, v59);
      float32x4_t v63 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
      float32x4_t v64 = vcvtq_f32_s32(vcvtq_s32_f32(v62));
      float32x4_t v65 = vsubq_f32(v63, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v63, v61)));
      float32x4_t v66 = vsubq_f32(v64, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v64, v62)));
      float32x4_t v67 = vsubq_f32(v61, v65);
      float32x4_t v68 = *((float32x4_t *)a2 + 31);
      float32x4_t v69 = *((float32x4_t *)a2 + 32);
      float32x4_t v70 = vsubq_f32(v62, v66);
      float32x4_t v71 = vmulq_f32(v70, vaddq_f32(v69, vmulq_f32(v70, vaddq_f32(v60, vmulq_f32(v68, v70)))));
      float32x4_t v72 = vaddq_f32(v27, vmulq_f32(v67, vaddq_f32(v69, vmulq_f32(v67, vaddq_f32(v60, vmulq_f32(v68, v67))))));
      int32x4_t v73 = vcvtq_s32_f32(v66);
      int32x4_t v74 = *((int32x4_t *)a2 + 33);
      float32x4_t v75 = vaddq_f32(v27, v71);
      float32x4_t v76 = vmulq_f32(v72, (float32x4_t)vshlq_n_s32(vaddq_s32(v74, vcvtq_s32_f32(v65)), 0x17uLL));
      float32x4_t v77 = vmulq_f32(v75, (float32x4_t)vshlq_n_s32(vaddq_s32(v74, v73), 0x17uLL));
      float32x4_t v78 = *((float32x4_t *)a2 + 110);
      float32x4_t v79 = *((float32x4_t *)a2 + 111);
      float32x4_t v80 = *((float32x4_t *)a2 + 112);
      float32x4_t v81 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v24, vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v28, v80)), (int8x16_t)vmulq_f32(v28, v79), (int8x16_t)vmulq_f32(v78, v76)));
      float32x4_t v82 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v25, vbslq_s8((int8x16_t)vcgtq_f32(v26, vsubq_f32(v29, v80)), (int8x16_t)vmulq_f32(v29, v79), (int8x16_t)vmulq_f32(v78, v77)));
      float32x4_t v83 = (int8x16_t *)(v6 + v11);
      v83[-1] = vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v81, v81, 3));
      *float32x4_t v83 = vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v82, v82, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v84 = -v10;
    if (v84 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v85 = 16 * v84;
    float32x4_t v86 = *(float32x4_t *)(v7 + v85);
    int8x16_t v87 = *((int8x16_t *)a2 + 15);
    float32x4_t v88 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v89 = vmulq_f32(vrecpeq_f32(v88), *((float32x4_t *)a2 + 18));
    float32x4_t v90 = vmulq_f32(v86, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v89, vrecpsq_f32(v89, v88))), *((int8x16_t *)a2 + 3)));
    float32x4_t v91 = *((float32x4_t *)a2 + 75);
    float32x4_t v92 = *((float32x4_t *)a2 + 5);
    float32x4_t v93 = vminq_f32(vmaxq_f32(v90, v91), v92);
    float32x4_t v94 = vaddq_f32(v93, *((float32x4_t *)a2 + 108));
    float32x4_t v95 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v94), (int8x16_t)v92);
    float32x4_t v96 = (float32x4_t)vandq_s8((int8x16_t)v92, (int8x16_t)vcgtq_f32(v95, *((float32x4_t *)a2 + 23)));
    float32x4_t v97 = vsubq_f32(vsubq_f32(v95, v92), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v96), v95));
    float32x4_t v98 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 109), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v94, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v94))), *((float32x4_t *)a2 + 22)), v96), vmulq_f32(v97, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v97, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v97, v97), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v97))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v99 = vcvtq_f32_s32(vcvtq_s32_f32(v98));
    float32x4_t v100 = vsubq_f32(v99, (float32x4_t)vandq_s8((int8x16_t)v92, (int8x16_t)vcgtq_f32(v99, v98)));
    float32x4_t v101 = vsubq_f32(v98, v100);
    float32x4_t v102 = (float32x4_t)vbslq_s8(v87, (int8x16_t)v90, vbslq_s8((int8x16_t)vcgtq_f32(v91, vsubq_f32(v93, *((float32x4_t *)a2 + 112))), (int8x16_t)vmulq_f32(v93, *((float32x4_t *)a2 + 111)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 110), vmulq_f32(vaddq_f32(v92, vmulq_f32(v101, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v101, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v101)))))),
                                           (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v100)), 0x17uLL)))));
    *(int8x16_t *)(v6 + v85) = vbslq_s8(v87, (int8x16_t)v90, (int8x16_t)vmulq_laneq_f32(v102, v102, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_srgb_halfTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v95 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v14 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23);
      float32x4_t v25 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 113);
      float32x4_t v27 = vmulq_f32(v13, v24);
      float32x4_t v28 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmaxq_f32(v25, v26));
      float32x4_t v29 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmaxq_f32(v27, v26));
      float32x4_t v30 = *((float32x4_t *)a2 + 75);
      float32x4_t v31 = *((float32x4_t *)a2 + 5);
      int32x4_t v33 = *((int32x4_t *)a2 + 33);
      int8x16_t v32 = *((int8x16_t *)a2 + 34);
      float32x4_t v34 = vmulq_f32(v28, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v30, v28), v32, (int8x16_t)v31));
      float32x4_t v35 = vmulq_f32(v29, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v30, v29), v32, (int8x16_t)v31));
      float32x4_t v36 = *((float32x4_t *)a2 + 114);
      float32x4_t v37 = *((float32x4_t *)a2 + 108);
      float32x4_t v38 = vaddq_f32(vminq_f32(v34, v36), v37);
      float32x4_t v39 = vaddq_f32(vminq_f32(v35, v36), v37);
      int8x16_t v40 = *((int8x16_t *)a2 + 19);
      float32x4_t v41 = *((float32x4_t *)a2 + 20);
      float32x4_t v42 = (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)v38), (int8x16_t)v31);
      int8x16_t v43 = *((int8x16_t *)a2 + 21);
      float32x4_t v44 = *((float32x4_t *)a2 + 22);
      float32x4_t v45 = (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)v39), (int8x16_t)v31);
      float32x4_t v46 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v39, 0x17uLL)), (float32x4_t)vandq_s8(v43, (int8x16_t)vcgtq_f32(v41, v39)));
      float32x4_t v47 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v38, 0x17uLL)), (float32x4_t)vandq_s8(v43, (int8x16_t)vcgtq_f32(v41, v38))), v44);
      float32x4_t v48 = *((float32x4_t *)a2 + 23);
      float32x4_t v49 = *((float32x4_t *)a2 + 24);
      float32x4_t v50 = vsubq_f32(v46, v44);
      float32x4_t v51 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v42, v48));
      float32x4_t v52 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v45, v48));
      float32x4_t v53 = vmulq_f32(v49, v51);
      float32x4_t v54 = vaddq_f32(v47, v51);
      float32x4_t v55 = vmulq_f32(vmulq_f32(v49, v52), v45);
      float32x4_t v56 = vaddq_f32(v50, v52);
      float32x4_t v57 = vsubq_f32(vsubq_f32(v42, v31), vmulq_f32(v53, v42));
      float32x4_t v58 = vsubq_f32(vsubq_f32(v45, v31), v55);
      float32x4_t v59 = *((float32x4_t *)a2 + 25);
      float32x4_t v60 = *((float32x4_t *)a2 + 26);
      float32x4_t v61 = *((float32x4_t *)a2 + 27);
      float32x4_t v62 = *((float32x4_t *)a2 + 28);
      float32x4_t v63 = vaddq_f32(v56, vmulq_f32(v58, vaddq_f32(vaddq_f32(v61, vmulq_f32(v58, v62)), vmulq_f32(vmulq_f32(v58, v58), vaddq_f32(v59, vmulq_f32(v60, v58))))));
      float32x4_t v64 = *((float32x4_t *)a2 + 109);
      float32x4_t v65 = vmulq_f32(v64, vaddq_f32(v54, vmulq_f32(v57, vaddq_f32(vaddq_f32(v61, vmulq_f32(v57, v62)), vmulq_f32(vmulq_f32(v57, v57), vaddq_f32(v59, vmulq_f32(v60, v57)))))));
      float32x4_t v66 = vmulq_f32(v64, v63);
      float32x4_t v67 = *((float32x4_t *)a2 + 29);
      float32x4_t v68 = *((float32x4_t *)a2 + 30);
      float32x4_t v69 = vmaxq_f32(v65, v67);
      float32x4_t v70 = vmaxq_f32(v66, v67);
      float32x4_t v71 = vcvtq_f32_s32(vcvtq_s32_f32(v69));
      float32x4_t v72 = vcvtq_f32_s32(vcvtq_s32_f32(v70));
      float32x4_t v73 = vsubq_f32(v71, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v71, v69)));
      float32x4_t v74 = vsubq_f32(v72, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v72, v70)));
      float32x4_t v75 = vsubq_f32(v69, v73);
      float32x4_t v76 = vsubq_f32(v70, v74);
      float32x4_t v77 = *((float32x4_t *)a2 + 31);
      float32x4_t v78 = *((float32x4_t *)a2 + 32);
      float32x4_t v79 = vaddq_f32(v31, vmulq_f32(v75, vaddq_f32(v78, vmulq_f32(v75, vaddq_f32(v68, vmulq_f32(v77, v75))))));
      float32x4_t v80 = vaddq_f32(v31, vmulq_f32(v76, vaddq_f32(v78, vmulq_f32(v76, vaddq_f32(v68, vmulq_f32(v77, v76))))));
      int32x4_t v81 = vaddq_s32(v33, vcvtq_s32_f32(v74));
      float32x4_t v82 = vmulq_f32(v79, (float32x4_t)vshlq_n_s32(vaddq_s32(v33, vcvtq_s32_f32(v73)), 0x17uLL));
      float32x4_t v83 = *((float32x4_t *)a2 + 110);
      float32x4_t v84 = vmulq_f32(v80, (float32x4_t)vshlq_n_s32(v81, 0x17uLL));
      int8x16_t v85 = (int8x16_t)vmulq_f32(v83, v82);
      float32x4_t v86 = *((float32x4_t *)a2 + 111);
      int8x16_t v87 = (int8x16_t)vmulq_f32(v34, v86);
      float32x4_t v88 = *((float32x4_t *)a2 + 112);
      int8x16_t v89 = (int8x16_t)vcgtq_f32(v30, vsubq_f32(v34, v88));
      int8x16_t v90 = vbslq_s8((int8x16_t)vcgtq_f32(v30, vsubq_f32(v35, v88)), (int8x16_t)vmulq_f32(v35, v86), (int8x16_t)vmulq_f32(v83, v84));
      int8x16_t v91 = *((int8x16_t *)a2 + 36);
      float32x4_t v92 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v25, veorq_s8(vandq_s8(v91, (int8x16_t)v28), vbslq_s8(v89, v87, v85)));
      float32x4_t v93 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, veorq_s8(vandq_s8(v91, (int8x16_t)v29), v90));
      float32x4_t v94 = (int8x16_t *)(v6 + v11);
      v94[-1] = vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v92, v92, 3));
      *float32x4_t v94 = vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v93, v93, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v95 = -v10;
    if (v95 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v96 = 16 * v95;
    float32x4_t v97 = *(float32x4_t *)(v7 + v96);
    int8x16_t v98 = *((int8x16_t *)a2 + 15);
    float32x4_t v99 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v97, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v100 = vmulq_f32(vrecpeq_f32(v99), *((float32x4_t *)a2 + 18));
    float32x4_t v101 = vmulq_f32(v97, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v100, vrecpsq_f32(v100, v99))), *((int8x16_t *)a2 + 3)));
    float32x4_t v102 = (float32x4_t)vbslq_s8(v98, (int8x16_t)v101, (int8x16_t)vmaxq_f32(v101, *((float32x4_t *)a2 + 113)));
    float32x4_t v103 = *((float32x4_t *)a2 + 75);
    float32x4_t v104 = *((float32x4_t *)a2 + 5);
    float32x4_t v105 = vmulq_f32(v102, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v103, v102), *((int8x16_t *)a2 + 34), (int8x16_t)v104));
    float32x4_t v106 = vaddq_f32(vminq_f32(v105, *((float32x4_t *)a2 + 114)), *((float32x4_t *)a2 + 108));
    float32x4_t v107 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v106), (int8x16_t)v104);
    float32x4_t v108 = (float32x4_t)vandq_s8((int8x16_t)v104, (int8x16_t)vcgtq_f32(v107, *((float32x4_t *)a2 + 23)));
    float32x4_t v109 = vsubq_f32(vsubq_f32(v107, v104), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v108), v107));
    float32x4_t v110 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 109), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v106, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v106))), *((float32x4_t *)a2 + 22)), v108), vmulq_f32(v109, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v109, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v109, v109), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v109))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v111 = vcvtq_f32_s32(vcvtq_s32_f32(v110));
    float32x4_t v112 = vsubq_f32(v111, (float32x4_t)vandq_s8((int8x16_t)v104, (int8x16_t)vcgtq_f32(v111, v110)));
    float32x4_t v113 = vsubq_f32(v110, v112);
    float32x4_t v114 = (float32x4_t)vbslq_s8(v98, (int8x16_t)v101, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v102), vbslq_s8((int8x16_t)vcgtq_f32(v103, vsubq_f32(v105, *((float32x4_t *)a2 + 112))), (int8x16_t)vmulq_f32(v105, *((float32x4_t *)a2 + 111)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 110), vmulq_f32(vaddq_f32(v104, vmulq_f32(v113, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v113, vaddq_f32(
                                                       *((float32x4_t *)a2 + 30),
                                                       vmulq_f32(*((float32x4_t *)a2 + 31), v113)))))),
                                             (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v112)), 0x17uLL))))));
    *(int8x16_t *)(v6 + v96) = vbslq_s8(v98, (int8x16_t)v101, (int8x16_t)vmulq_laneq_f32(v114, v114, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_srgb_niceTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v109 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v14 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      int8x16_t v24 = vandq_s8(v23, v22);
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v26));
      float32x4_t v28 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 113);
      int8x16_t v30 = (int8x16_t)vmaxq_f32(v28, v29);
      float32x4_t v31 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmaxq_f32(v27, v29));
      float32x4_t v32 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v28, v30);
      float32x4_t v33 = *((float32x4_t *)a2 + 75);
      float32x4_t v34 = *((float32x4_t *)a2 + 5);
      int32x4_t v36 = *((int32x4_t *)a2 + 33);
      int8x16_t v35 = *((int8x16_t *)a2 + 34);
      float32x4_t v37 = vmulq_f32(v31, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v33, v31), v35, (int8x16_t)v34));
      float32x4_t v38 = vmulq_f32(v32, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v33, v32), v35, (int8x16_t)v34));
      float32x4_t v39 = *((float32x4_t *)a2 + 114);
      float32x4_t v40 = *((float32x4_t *)a2 + 108);
      int8x16_t v41 = (int8x16_t)vaddq_f32(vminq_f32(v37, v39), v40);
      int8x16_t v42 = (int8x16_t)vaddq_f32(vminq_f32(v38, v39), v40);
      float32x4_t v43 = *((float32x4_t *)a2 + 109);
      int8x16_t v44 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vceqq_f32(v43, v33)), v33);
      float32x4_t v45 = (float32x4_t)vbslq_s8(v44, (int8x16_t)v34, v41);
      float32x4_t v46 = (float32x4_t)vbslq_s8(v44, (int8x16_t)v34, v42);
      int8x16_t v47 = *((int8x16_t *)a2 + 19);
      float32x4_t v48 = *((float32x4_t *)a2 + 20);
      float32x4_t v49 = (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)v45), (int8x16_t)v34);
      float32x4_t v50 = (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)v46), (int8x16_t)v34);
      int8x16_t v51 = *((int8x16_t *)a2 + 21);
      float32x4_t v52 = *((float32x4_t *)a2 + 22);
      float32x4_t v53 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v46, 0x17uLL)), (float32x4_t)vandq_s8(v51, (int8x16_t)vcgtq_f32(v48, v46)));
      float32x4_t v54 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v45, 0x17uLL)), (float32x4_t)vandq_s8(v51, (int8x16_t)vcgtq_f32(v48, v45))), v52);
      float32x4_t v55 = *((float32x4_t *)a2 + 23);
      float32x4_t v56 = *((float32x4_t *)a2 + 24);
      float32x4_t v57 = vsubq_f32(v53, v52);
      float32x4_t v58 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v49, v55));
      float32x4_t v59 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v50, v55));
      float32x4_t v60 = vaddq_f32(v54, v58);
      float32x4_t v61 = vsubq_f32(vsubq_f32(v49, v34), vmulq_f32(vmulq_f32(v56, v58), v49));
      float32x4_t v62 = vsubq_f32(vsubq_f32(v50, v34), vmulq_f32(vmulq_f32(v56, v59), v50));
      float32x4_t v63 = vmulq_f32(v61, v61);
      float32x4_t v64 = *((float32x4_t *)a2 + 38);
      float32x4_t v65 = *((float32x4_t *)a2 + 39);
      int8x16_t v67 = *((int8x16_t *)a2 + 36);
      float32x4_t v66 = *((float32x4_t *)a2 + 37);
      float32x4_t v68 = vaddq_f32(v66, vmulq_f32(v64, v61));
      float32x4_t v69 = vaddq_f32(v66, vmulq_f32(v64, v62));
      float32x4_t v70 = *((float32x4_t *)a2 + 40);
      float32x4_t v71 = *((float32x4_t *)a2 + 41);
      float32x4_t v72 = vaddq_f32(v65, vmulq_f32(v70, v61));
      float32x4_t v73 = vaddq_f32(v65, vmulq_f32(v70, v62));
      float32x4_t v75 = *((float32x4_t *)a2 + 42);
      float32x4_t v74 = *((float32x4_t *)a2 + 43);
      float32x4_t v76 = vaddq_f32(v71, vmulq_f32(v75, v61));
      float32x4_t v77 = vaddq_f32(v71, vmulq_f32(v75, v62));
      float32x4_t v78 = vmulq_f32(v62, v62);
      float32x4_t v79 = vmulq_f32(v43, vaddq_f32(v60, vmulq_f32(v61, vaddq_f32(v74, vmulq_f32(v61, vaddq_f32(v76, vmulq_f32(v63, vaddq_f32(v68, vmulq_f32(v63, v72)))))))));
      float32x4_t v80 = vmulq_f32(v43, vaddq_f32(vaddq_f32(v57, v59), vmulq_f32(v62, vaddq_f32(v74, vmulq_f32(v62, vaddq_f32(v77, vmulq_f32(v78, vaddq_f32(v69, vmulq_f32(v78, v73)))))))));
      float32x4_t v81 = *((float32x4_t *)a2 + 29);
      float32x4_t v82 = vmaxq_f32(v79, v81);
      float32x4_t v83 = vmaxq_f32(v80, v81);
      float32x4_t v84 = vcvtq_f32_s32(vcvtq_s32_f32(v82));
      float32x4_t v85 = vcvtq_f32_s32(vcvtq_s32_f32(v83));
      float32x4_t v86 = vsubq_f32(v84, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v84, v82)));
      float32x4_t v87 = vsubq_f32(v85, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v85, v83)));
      float32x4_t v88 = vsubq_f32(v82, v86);
      float32x4_t v89 = vsubq_f32(v83, v87);
      float32x4_t v90 = *((float32x4_t *)a2 + 44);
      float32x4_t v91 = *((float32x4_t *)a2 + 45);
      float32x4_t v92 = vaddq_f32(v90, vmulq_f32(v91, v88));
      float32x4_t v93 = *((float32x4_t *)a2 + 46);
      float32x4_t v94 = *((float32x4_t *)a2 + 47);
      float32x4_t v95 = vaddq_f32(vaddq_f32(v93, vmulq_f32(v94, v89)), vmulq_f32(vmulq_f32(v89, v89), vaddq_f32(v90, vmulq_f32(v91, v89))));
      float32x4_t v96 = *((float32x4_t *)a2 + 48);
      float32x4_t v97 = vaddq_f32(v34, vmulq_f32(v88, vaddq_f32(v96, vmulq_f32(v88, vaddq_f32(vaddq_f32(v93, vmulq_f32(v88, v94)), vmulq_f32(vmulq_f32(v88, v88), v92))))));
      float32x4_t v98 = vaddq_f32(v34, vmulq_f32(v89, vaddq_f32(v96, vmulq_f32(v89, v95))));
      int32x4_t v99 = vaddq_s32(v36, vcvtq_s32_f32(v86));
      float32x4_t v100 = vmulq_f32(v98, (float32x4_t)vshlq_n_s32(vaddq_s32(v36, vcvtq_s32_f32(v87)), 0x17uLL));
      float32x4_t v101 = *((float32x4_t *)a2 + 110);
      int8x16_t v102 = (int8x16_t)vmulq_f32(v101, vmulq_f32(v97, (float32x4_t)vshlq_n_s32(v99, 0x17uLL)));
      float32x4_t v103 = *((float32x4_t *)a2 + 111);
      int8x16_t v104 = (int8x16_t)vmulq_f32(v101, v100);
      float32x4_t v105 = *((float32x4_t *)a2 + 112);
      float32x4_t v106 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, veorq_s8(vandq_s8(v67, (int8x16_t)v31), vbslq_s8((int8x16_t)vcgtq_f32(v33, vsubq_f32(v37, v105)), (int8x16_t)vmulq_f32(v37, v103), v102)));
      float32x4_t v107 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v28, veorq_s8(vandq_s8(v67, (int8x16_t)v32), vbslq_s8((int8x16_t)vcgtq_f32(v33, vsubq_f32(v38, v105)), (int8x16_t)vmulq_f32(v38, v103), v104)));
      float32x4_t v108 = (int8x16_t *)(v6 + v11);
      v108[-1] = vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v106, v106, 3));
      *float32x4_t v108 = vbslq_s8(v14, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v107, v107, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v109 = -v10;
    if (v109 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v110 = 16 * v109;
    float32x4_t v111 = *(float32x4_t *)(v7 + v110);
    int8x16_t v112 = *((int8x16_t *)a2 + 15);
    float32x4_t v113 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v111, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v114 = vrecpeq_f32(v113);
    float32x4_t v115 = vmulq_f32(v114, vrecpsq_f32(v114, v113));
    float32x4_t v116 = vmulq_f32(v111, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v115, vrecpsq_f32(v115, v113))), *((int8x16_t *)a2 + 3)));
    float32x4_t v117 = (float32x4_t)vbslq_s8(v112, (int8x16_t)v116, (int8x16_t)vmaxq_f32(v116, *((float32x4_t *)a2 + 113)));
    float32x4_t v118 = *((float32x4_t *)a2 + 75);
    float32x4_t v119 = *((float32x4_t *)a2 + 5);
    float32x4_t v120 = vmulq_f32(v117, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v118, v117), *((int8x16_t *)a2 + 34), (int8x16_t)v119));
    float32x4_t v121 = *((float32x4_t *)a2 + 109);
    float32x4_t v122 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v119, (int8x16_t)vceqq_f32(v121, v118)), v118), (int8x16_t)v119, (int8x16_t)vaddq_f32(vminq_f32(v120, *((float32x4_t *)a2 + 114)), *((float32x4_t *)a2 + 108)));
    float32x4_t v123 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v122), (int8x16_t)v119);
    float32x4_t v124 = (float32x4_t)vandq_s8((int8x16_t)v119, (int8x16_t)vcgtq_f32(v123, *((float32x4_t *)a2 + 23)));
    float32x4_t v125 = vsubq_f32(vsubq_f32(v123, v119), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v124), v123));
    float32x4_t v126 = vmulq_f32(v125, v125);
    float32x4_t v127 = vmaxq_f32(vmulq_f32(v121, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v122, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v122))), *((float32x4_t *)a2 + 22)), v124), vmulq_f32(v125, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v125, vaddq_f32(
                         vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v125)),
                         vmulq_f32(v126, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v125)), vmulq_f32(v126, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v125))))))))))), *((float32x4_t *)a2 + 29));
    float32x4_t v128 = vcvtq_f32_s32(vcvtq_s32_f32(v127));
    float32x4_t v129 = vsubq_f32(v128, (float32x4_t)vandq_s8((int8x16_t)v119, (int8x16_t)vcgtq_f32(v128, v127)));
    float32x4_t v130 = vsubq_f32(v127, v129);
    float32x4_t v131 = (float32x4_t)vbslq_s8(v112, (int8x16_t)v116, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v117), vbslq_s8((int8x16_t)vcgtq_f32(v118, vsubq_f32(v120, *((float32x4_t *)a2 + 112))), (int8x16_t)vmulq_f32(v120, *((float32x4_t *)a2 + 111)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 110), vmulq_f32(vaddq_f32(v119, vmulq_f32(v130, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v130, vaddq_f32(
                                                       vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v130)), vmulq_f32(vmulq_f32(v130, v130), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v130)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v129)), 0x17uLL))))));
    *(int8x16_t *)(v6 + v110) = vbslq_s8(v112, (int8x16_t)v116, (int8x16_t)vmulq_laneq_f32(v131, v131, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getquicktime_fast_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v57 = 0;
        uint64_t v58 = 16 * v8;
        uint64_t v59 = 16 * v7;
        uint64_t v60 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v61 = 0;
          do
          {
            int8x16_t v62 = *((int8x16_t *)a2 + 15);
            float32x4_t v63 = vmulq_f32(v5[v61 / 0x10], (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5[v61 / 0x10], 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
            float32x4_t v64 = vminq_f32(vmaxq_f32(v63, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v65 = (float32x4_t)vbslq_s8(v62, (int8x16_t)v63, (int8x16_t)vmulq_f32(v64, vminq_f32(vrsqrteq_f32(v64), *((float32x4_t *)a2 + 73))));
            v6[v61 / 0x10] = vbslq_s8(v62, (int8x16_t)v63, (int8x16_t)vmulq_laneq_f32(v65, v65, 3));
            v61 += 16;
          }
          while (v60 != v61);
          ++v57;
          int v5 = (float32x4_t *)((char *)v5 + v58);
          uint64_t v6 = (int8x16_t *)((char *)v6 + v59);
        }
        while (v57 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      float32x4_t v12 = v5 + 4;
      float32x4_t v13 = v6 + 4;
      do
      {
        unint64_t v14 = 0;
        float32x4_t v15 = v13;
        float32x4_t v16 = v12;
        uint64_t v17 = 2;
        do
        {
          float32x4_t v18 = v5[v17 - 2];
          float32x4_t v19 = v5[v17 - 1];
          float32x4_t v20 = v5[v17];
          float32x4_t v21 = v5[v17 + 1];
          int8x16_t v23 = *((int8x16_t *)a2 + 15);
          float32x4_t v22 = *((float32x4_t *)a2 + 16);
          float32x4_t v24 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 3), v22);
          int8x16_t v25 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3), v22));
          int8x16_t v26 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3), v22));
          int8x16_t v27 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 3), v22));
          int8x16_t v28 = *((int8x16_t *)a2 + 17);
          int8x16_t v29 = vandq_s8(v28, v25);
          int8x16_t v30 = vandq_s8(v28, v26);
          int8x16_t v31 = vandq_s8(v28, v27);
          int8x16_t v32 = vandq_s8(v28, (int8x16_t)vrecpeq_f32(v24));
          int8x16_t v33 = *((int8x16_t *)a2 + 3);
          float32x4_t v34 = vmulq_f32(v18, (float32x4_t)vorrq_s8(v29, v33));
          float32x4_t v35 = vmulq_f32(v19, (float32x4_t)vorrq_s8(v30, v33));
          float32x4_t v36 = vmulq_f32(v20, (float32x4_t)vorrq_s8(v31, v33));
          float32x4_t v37 = vmulq_f32(v21, (float32x4_t)vorrq_s8(v32, v33));
          float32x4_t v38 = *((float32x4_t *)a2 + 75);
          float32x4_t v39 = *((float32x4_t *)a2 + 5);
          float32x4_t v40 = vminq_f32(vmaxq_f32(v34, v38), v39);
          float32x4_t v41 = vminq_f32(vmaxq_f32(v35, v38), v39);
          float32x4_t v42 = vminq_f32(vmaxq_f32(v36, v38), v39);
          float32x4_t v43 = vminq_f32(vmaxq_f32(v37, v38), v39);
          float32x4_t v44 = *((float32x4_t *)a2 + 73);
          float32x4_t v45 = v16;
          float32x4_t v46 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v34, (int8x16_t)vmulq_f32(v40, vminq_f32(vrsqrteq_f32(v40), v44)));
          float32x4_t v47 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v35, (int8x16_t)vmulq_f32(v41, vminq_f32(vrsqrteq_f32(v41), v44)));
          float32x4_t v48 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v36, (int8x16_t)vmulq_f32(v42, vminq_f32(vrsqrteq_f32(v42), v44)));
          float32x4_t v49 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v37, (int8x16_t)vmulq_f32(v43, vminq_f32(vrsqrteq_f32(v43), v44)));
          float32x4_t v50 = v15;
          int8x16_t v51 = &v6[v17];
          v14 += 4;
          v51[-2] = vbslq_s8(v23, (int8x16_t)v34, (int8x16_t)vmulq_laneq_f32(v46, v46, 3));
          v51[-1] = vbslq_s8(v23, (int8x16_t)v35, (int8x16_t)vmulq_laneq_f32(v47, v47, 3));
          *int8x16_t v51 = vbslq_s8(v23, (int8x16_t)v36, (int8x16_t)vmulq_laneq_f32(v48, v48, 3));
          v51[1] = vbslq_s8(v23, (int8x16_t)v37, (int8x16_t)vmulq_laneq_f32(v49, v49, 3));
          v17 += 4;
          v16 += 4;
          float32x4_t v15 = v50 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            float32x4_t v52 = *v45++;
            int8x16_t v53 = *((int8x16_t *)a2 + 15);
            float32x4_t v54 = vmulq_f32(v52, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
            float32x4_t v55 = vminq_f32(vmaxq_f32(v54, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v56 = (float32x4_t)vbslq_s8(v53, (int8x16_t)v54, (int8x16_t)vmulq_f32(v55, vminq_f32(vrsqrteq_f32(v55), *((float32x4_t *)a2 + 73))));
            *v50++ = vbslq_s8(v53, (int8x16_t)v54, (int8x16_t)vmulq_laneq_f32(v56, v56, 3));
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        uint64_t v6 = (int8x16_t *)((char *)v6 + v10);
        int v5 = (float32x4_t *)((char *)v5 + v11);
        float32x4_t v12 = (float32x4_t *)((char *)v12 + v11);
        float32x4_t v13 = (int8x16_t *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

uint64_t Getquicktime_fixed_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 6);
    while (v5 < 4)
    {
      LODWORD(v87) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v7 += v8;
      v6 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 32;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 32);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v11);
      float32x4_t v15 = *(float32x4_t *)(v7 + v11 + 16);
      int8x16_t v17 = *((int8x16_t *)a2 + 15);
      float32x4_t v16 = *((float32x4_t *)a2 + 16);
      float32x4_t v18 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v16));
      float32x4_t v19 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v16));
      float32x4_t v20 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v16));
      float32x4_t v21 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      float32x4_t v22 = *((float32x4_t *)a2 + 18);
      int8x16_t v24 = vandq_s8(v23, (int8x16_t)vmulq_f32(v18, v22));
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v19, v22));
      int8x16_t v26 = vandq_s8(v23, (int8x16_t)vmulq_f32(v20, v22));
      int8x16_t v27 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, v22));
      int8x16_t v28 = *((int8x16_t *)a2 + 3);
      float32x4_t v29 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v28));
      float32x4_t v30 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v28));
      float32x4_t v31 = vmulq_f32(v14, (float32x4_t)vorrq_s8(v26, v28));
      float32x4_t v32 = vmulq_f32(v15, (float32x4_t)vorrq_s8(v27, v28));
      float32x4_t v33 = *((float32x4_t *)a2 + 75);
      float32x4_t v34 = *((float32x4_t *)a2 + 5);
      float32x4_t v35 = *((float32x4_t *)a2 + 6);
      float32x4_t v36 = vmulq_f32(v35, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v29, v33), v34)));
      float32x4_t v37 = vmulq_f32(v35, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v30, v33), v34)));
      float32x4_t v38 = vmulq_f32(v35, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v31, v33), v34)));
      float32x4_t v39 = vmulq_f32(v35, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v32, v33), v34)));
      float32x4_t v40 = vcvtq_f32_s32(vcvtq_s32_f32(v36));
      float32x4_t v41 = vcvtq_f32_s32(vcvtq_s32_f32(v37));
      float32x4_t v42 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
      float32x4_t v43 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
      float32x4_t v44 = *((float32x4_t *)a2 + 7);
      float32x4_t v45 = *((float32x4_t *)a2 + 8);
      float32x4_t v46 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v36, v40), v44));
      float32x4_t v47 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v37, v41), v44));
      float32x4_t v48 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v38, v42), v44));
      float32x4_t v49 = vrsqrteq_f32(vaddq_f32(v44, vsubq_f32(v39, v43)));
      float32x4_t v50 = vaddq_f32(v45, v40);
      float32x4_t v51 = vaddq_f32(v45, v41);
      float32x4_t v52 = vaddq_f32(v45, v42);
      float32x4_t v53 = vaddq_f32(v45, v43);
      float32x4_t v54 = *((float32x4_t *)a2 + 9);
      float32x4_t v55 = *((float32x4_t *)a2 + 10);
      float32x4_t v56 = vsubq_f32(v50, vmulq_f32(v46, v54));
      float32x4_t v57 = *((float32x4_t *)a2 + 115);
      float32x4_t v58 = vmulq_f32(v57, v56);
      float32x4_t v59 = vmulq_f32(v57, vsubq_f32(v51, vmulq_f32(v47, v54)));
      float32x4_t v60 = vmulq_f32(v57, vsubq_f32(v52, vmulq_f32(v48, v54)));
      float32x4_t v61 = vmulq_f32(v57, vsubq_f32(v53, vmulq_f32(v49, v54)));
      float32x4_t v62 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v63 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v64 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
      float32x4_t v65 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
      float32x4_t v66 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v62, v58)));
      float32x4_t v67 = vsubq_f32(v63, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v63, v59)));
      float32x4_t v68 = vsubq_f32(v64, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v64, v60)));
      float32x4_t v69 = vsubq_f32(v65, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v65, v61)));
      float32x4_t v70 = *((float32x4_t *)a2 + 11);
      float32x4_t v71 = *((float32x4_t *)a2 + 12);
      float32x4_t v72 = vmulq_f32(vrecpeq_f32(vsubq_f32(v70, vsubq_f32(v58, v66))), v71);
      float32x4_t v73 = vmulq_f32(vrecpeq_f32(vsubq_f32(v70, vsubq_f32(v59, v67))), v71);
      float32x4_t v74 = vmulq_f32(vrecpeq_f32(vsubq_f32(v70, vsubq_f32(v60, v68))), v71);
      float32x4_t v75 = vmulq_f32(vrecpeq_f32(vsubq_f32(v70, vsubq_f32(v61, v69))), v71);
      float32x4_t v76 = vmaxq_f32(vaddq_f32(vaddq_f32(v66, v55), vmulq_f32(v72, v72)), v33);
      float32x4_t v77 = vmaxq_f32(vaddq_f32(vaddq_f32(v55, v67), vmulq_f32(v73, v73)), v33);
      float32x4_t v78 = vmaxq_f32(vaddq_f32(vaddq_f32(v55, v68), vmulq_f32(v74, v74)), v33);
      float32x4_t v79 = vmaxq_f32(vaddq_f32(vaddq_f32(v55, v69), vmulq_f32(v75, v75)), v33);
      float32x4_t v80 = *((float32x4_t *)a2 + 13);
      float32x4_t v81 = *((float32x4_t *)a2 + 14);
      float32x4_t v82 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v29, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v76, v80), v81)));
      float32x4_t v83 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v30, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v77, v80), v81)));
      float32x4_t v84 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v31, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v78, v80), v81)));
      float32x4_t v85 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v32, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v79, v80), v81)));
      float32x4_t v86 = (int8x16_t *)(v6 + v11);
      v86[-2] = vbslq_s8(v17, (int8x16_t)v29, (int8x16_t)vmulq_laneq_f32(v82, v82, 3));
      v86[-1] = vbslq_s8(v17, (int8x16_t)v30, (int8x16_t)vmulq_laneq_f32(v83, v83, 3));
      *float32x4_t v86 = vbslq_s8(v17, (int8x16_t)v31, (int8x16_t)vmulq_laneq_f32(v84, v84, 3));
      v86[1] = vbslq_s8(v17, (int8x16_t)v32, (int8x16_t)vmulq_laneq_f32(v85, v85, 3));
      v10 -= 4;
      v11 += 64;
    }
    while (v5 + v10 > 3);
    LODWORD(v87) = -v10;
    if ((int)v87 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v87 = v87;
    do
    {
      int8x16_t v88 = *((int8x16_t *)a2 + 15);
      float32x4_t v89 = vmulq_f32(*(float32x4_t *)(v7 + 16 * v87), (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v7 + 16 * v87), 3), *((float32x4_t *)a2 + 16))), *((float32x4_t *)a2 + 18))), *((int8x16_t *)a2 + 3)));
      float32x4_t v90 = *((float32x4_t *)a2 + 75);
      float32x4_t v91 = *((float32x4_t *)a2 + 5);
      float32x4_t v92 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v89, v90), v91)));
      float32x4_t v93 = vcvtq_f32_s32(vcvtq_s32_f32(v92));
      float32x4_t v94 = vmulq_f32(*((float32x4_t *)a2 + 115), vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v93), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v92, v93))), *((float32x4_t *)a2 + 9))));
      float32x4_t v95 = vcvtq_f32_s32(vcvtq_s32_f32(v94));
      float32x4_t v96 = vsubq_f32(v95, (float32x4_t)vandq_s8((int8x16_t)v91, (int8x16_t)vcgtq_f32(v95, v94)));
      float32x4_t v97 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v94, v96))), *((float32x4_t *)a2 + 12));
      float32x4_t v98 = (float32x4_t)vbslq_s8(v88, (int8x16_t)v89, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v96), vmulq_f32(v97, v97)), v90), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))));
      *(int8x16_t *)(v6 + 16 * v87++) = vbslq_s8(v88, (int8x16_t)v89, (int8x16_t)vmulq_laneq_f32(v98, v98, 3));
    }
    while (v87 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getquicktime_nice_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v92 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      int8x16_t v24 = vandq_s8(v23, v22);
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = (float32x4_t)vorrq_s8(v25, v26);
      float32x4_t v28 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = vmulq_f32(v13, v27);
      float32x4_t v31 = *((float32x4_t *)a2 + 5);
      int8x16_t v32 = (int8x16_t)vminq_f32(vmaxq_f32(v28, v29), v31);
      float32x4_t v33 = *((float32x4_t *)a2 + 115);
      int8x16_t v34 = (int8x16_t)vminq_f32(vmaxq_f32(v30, v29), v31);
      int8x16_t v35 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vceqq_f32(v33, v29)), v29);
      float32x4_t v36 = (float32x4_t)vbslq_s8(v35, (int8x16_t)v31, v32);
      float32x4_t v37 = (float32x4_t)vbslq_s8(v35, (int8x16_t)v31, v34);
      int8x16_t v39 = *((int8x16_t *)a2 + 19);
      float32x4_t v38 = *((float32x4_t *)a2 + 20);
      float32x4_t v40 = (float32x4_t)vorrq_s8(vandq_s8(v39, (int8x16_t)v36), (int8x16_t)v31);
      float32x4_t v41 = (float32x4_t)vorrq_s8(vandq_s8(v39, (int8x16_t)v37), (int8x16_t)v31);
      int8x16_t v42 = *((int8x16_t *)a2 + 21);
      float32x4_t v43 = *((float32x4_t *)a2 + 22);
      float32x4_t v44 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v37, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v38, v37)));
      float32x4_t v45 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v38, v36))), v43);
      float32x4_t v46 = *((float32x4_t *)a2 + 23);
      float32x4_t v47 = *((float32x4_t *)a2 + 24);
      float32x4_t v48 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v40, v46));
      float32x4_t v49 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v41, v46));
      float32x4_t v50 = vaddq_f32(v45, v48);
      float32x4_t v51 = vaddq_f32(vsubq_f32(v44, v43), v49);
      float32x4_t v52 = vsubq_f32(vsubq_f32(v40, v31), vmulq_f32(vmulq_f32(v47, v48), v40));
      float32x4_t v53 = vsubq_f32(vsubq_f32(v41, v31), vmulq_f32(vmulq_f32(v47, v49), v41));
      float32x4_t v54 = vmulq_f32(v52, v52);
      float32x4_t v55 = *((float32x4_t *)a2 + 37);
      float32x4_t v56 = *((float32x4_t *)a2 + 38);
      float32x4_t v57 = *((float32x4_t *)a2 + 39);
      float32x4_t v58 = *((float32x4_t *)a2 + 40);
      float32x4_t v59 = vaddq_f32(v55, vmulq_f32(v56, v52));
      float32x4_t v60 = vaddq_f32(v57, vmulq_f32(v58, v52));
      float32x4_t v61 = vaddq_f32(v57, vmulq_f32(v58, v53));
      float32x4_t v62 = vaddq_f32(v55, vmulq_f32(v56, v53));
      float32x4_t v63 = *((float32x4_t *)a2 + 41);
      float32x4_t v64 = *((float32x4_t *)a2 + 42);
      float32x4_t v65 = vaddq_f32(v63, vmulq_f32(v64, v52));
      float32x4_t v66 = vaddq_f32(v63, vmulq_f32(v64, v53));
      float32x4_t v67 = vmulq_f32(v53, v53);
      float32x4_t v68 = vaddq_f32(v65, vmulq_f32(v54, vaddq_f32(v59, vmulq_f32(v54, v60))));
      float32x4_t v69 = vaddq_f32(v66, vmulq_f32(v67, vaddq_f32(v62, vmulq_f32(v67, v61))));
      float32x4_t v70 = *((float32x4_t *)a2 + 43);
      float32x4_t v71 = *((float32x4_t *)a2 + 44);
      float32x4_t v72 = vmulq_f32(v33, vaddq_f32(v51, vmulq_f32(v53, vaddq_f32(v70, vmulq_f32(v53, v69)))));
      float32x4_t v73 = *((float32x4_t *)a2 + 29);
      float32x4_t v74 = vmaxq_f32(vmulq_f32(v33, vaddq_f32(v50, vmulq_f32(v52, vaddq_f32(v70, vmulq_f32(v52, v68))))), v73);
      float32x4_t v75 = vmaxq_f32(v72, v73);
      float32x4_t v76 = vcvtq_f32_s32(vcvtq_s32_f32(v74));
      float32x4_t v77 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
      float32x4_t v78 = vsubq_f32(v76, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v76, v74)));
      float32x4_t v79 = vsubq_f32(v77, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v77, v75)));
      float32x4_t v80 = vsubq_f32(v74, v78);
      float32x4_t v81 = vsubq_f32(v75, v79);
      float32x4_t v82 = *((float32x4_t *)a2 + 45);
      float32x4_t v83 = *((float32x4_t *)a2 + 46);
      float32x4_t v84 = vaddq_f32(v71, vmulq_f32(v82, v80));
      float32x4_t v85 = vaddq_f32(v71, vmulq_f32(v82, v81));
      float32x4_t v86 = *((float32x4_t *)a2 + 47);
      float32x4_t v87 = *((float32x4_t *)a2 + 48);
      int32x4_t v88 = *((int32x4_t *)a2 + 33);
      float32x4_t v89 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vmulq_f32(vaddq_f32(v31, vmulq_f32(v80, vaddq_f32(v87, vmulq_f32(v80, vaddq_f32(vaddq_f32(v83, vmulq_f32(v80, v86)), vmulq_f32(vmulq_f32(v80, v80), v84)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v88, vcvtq_s32_f32(v78)), 0x17uLL)));
      float32x4_t v90 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v30, (int8x16_t)vmulq_f32(vaddq_f32(v31, vmulq_f32(v81, vaddq_f32(v87, vmulq_f32(v81, vaddq_f32(vaddq_f32(v83, vmulq_f32(v86, v81)), vmulq_f32(vmulq_f32(v81, v81), v85)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v88, vcvtq_s32_f32(v79)), 0x17uLL)));
      float32x4_t v91 = (int8x16_t *)(v6 + v11);
      v91[-1] = vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v89, v89, 3));
      *float32x4_t v91 = vbslq_s8(v15, (int8x16_t)v30, (int8x16_t)vmulq_laneq_f32(v90, v90, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v92 = -v10;
    if (v92 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v93 = 16 * v92;
    float32x4_t v94 = *(float32x4_t *)(v7 + v93);
    int8x16_t v95 = *((int8x16_t *)a2 + 15);
    float32x4_t v96 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v94, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v97 = vrecpeq_f32(v96);
    float32x4_t v98 = vmulq_f32(v97, vrecpsq_f32(v97, v96));
    float32x4_t v99 = vmulq_f32(v94, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v98, vrecpsq_f32(v98, v96))), *((int8x16_t *)a2 + 3)));
    float32x4_t v100 = *((float32x4_t *)a2 + 5);
    float32x4_t v101 = *((float32x4_t *)a2 + 115);
    float32x4_t v102 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v100, (int8x16_t)vceqq_f32(v101, *((float32x4_t *)a2 + 75))), *((float32x4_t *)a2 + 75)), (int8x16_t)v100, (int8x16_t)vminq_f32(vmaxq_f32(v99, *((float32x4_t *)a2 + 75)), v100));
    float32x4_t v103 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v102), (int8x16_t)v100);
    float32x4_t v104 = (float32x4_t)vandq_s8((int8x16_t)v100, (int8x16_t)vcgtq_f32(v103, *((float32x4_t *)a2 + 23)));
    float32x4_t v105 = vsubq_f32(vsubq_f32(v103, v100), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v104), v103));
    float32x4_t v106 = vmulq_f32(v105, v105);
    float32x4_t v107 = vmaxq_f32(vmulq_f32(v101, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v102, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v102))), *((float32x4_t *)a2 + 22)), v104), vmulq_f32(v105, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v105, vaddq_f32(
                         vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v105)),
                         vmulq_f32(v106, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v105)), vmulq_f32(v106, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v105))))))))))), *((float32x4_t *)a2 + 29));
    float32x4_t v108 = vcvtq_f32_s32(vcvtq_s32_f32(v107));
    float32x4_t v109 = vsubq_f32(v108, (float32x4_t)vandq_s8((int8x16_t)v100, (int8x16_t)vcgtq_f32(v108, v107)));
    float32x4_t v110 = vsubq_f32(v107, v109);
    float32x4_t v111 = (float32x4_t)vbslq_s8(v95, (int8x16_t)v99, (int8x16_t)vmulq_f32(vaddq_f32(v100, vmulq_f32(v110, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v110, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v110)), vmulq_f32(vmulq_f32(v110, v110), vaddq_f32(*((float32x4_t *)a2 + 44),
                                                     vmulq_f32(*((float32x4_t *)a2 + 45), v110)))))))),
                                       (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v109)), 0x17uLL)));
    *(int8x16_t *)(v6 + v93) = vbslq_s8(v95, (int8x16_t)v99, (int8x16_t)vmulq_laneq_f32(v111, v111, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getquicktime_half_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v74 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 75);
      float32x4_t v27 = *((float32x4_t *)a2 + 5);
      float32x4_t v28 = vminq_f32(vmaxq_f32(v24, v26), v27);
      float32x4_t v29 = vminq_f32(vmaxq_f32(v25, v26), v27);
      int8x16_t v30 = *((int8x16_t *)a2 + 19);
      float32x4_t v31 = *((float32x4_t *)a2 + 20);
      float32x4_t v32 = (float32x4_t)vorrq_s8(vandq_s8(v30, (int8x16_t)v28), (int8x16_t)v27);
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8(v30, (int8x16_t)v29), (int8x16_t)v27);
      int8x16_t v34 = *((int8x16_t *)a2 + 21);
      float32x4_t v35 = *((float32x4_t *)a2 + 22);
      float32x4_t v36 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v29, 0x17uLL)), (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v31, v29)));
      float32x4_t v37 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v28, 0x17uLL)), (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v31, v28))), v35);
      float32x4_t v38 = *((float32x4_t *)a2 + 23);
      float32x4_t v39 = *((float32x4_t *)a2 + 24);
      float32x4_t v40 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v32, v38));
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v33, v38));
      float32x4_t v42 = vaddq_f32(v37, v40);
      float32x4_t v43 = vaddq_f32(vsubq_f32(v36, v35), v41);
      float32x4_t v44 = vsubq_f32(vsubq_f32(v32, v27), vmulq_f32(vmulq_f32(v39, v40), v32));
      float32x4_t v45 = vsubq_f32(vsubq_f32(v33, v27), vmulq_f32(vmulq_f32(v39, v41), v33));
      float32x4_t v46 = *((float32x4_t *)a2 + 25);
      float32x4_t v47 = *((float32x4_t *)a2 + 26);
      float32x4_t v48 = vaddq_f32(v46, vmulq_f32(v47, v44));
      float32x4_t v49 = vaddq_f32(v46, vmulq_f32(v47, v45));
      float32x4_t v50 = *((float32x4_t *)a2 + 27);
      float32x4_t v51 = *((float32x4_t *)a2 + 28);
      float32x4_t v52 = *((float32x4_t *)a2 + 115);
      float32x4_t v53 = vmulq_f32(v52, vaddq_f32(v42, vmulq_f32(v44, vaddq_f32(vaddq_f32(v50, vmulq_f32(v44, v51)), vmulq_f32(vmulq_f32(v44, v44), v48)))));
      float32x4_t v54 = vmulq_f32(v52, vaddq_f32(v43, vmulq_f32(v45, vaddq_f32(vaddq_f32(v50, vmulq_f32(v45, v51)), vmulq_f32(vmulq_f32(v45, v45), v49)))));
      float32x4_t v55 = *((float32x4_t *)a2 + 29);
      float32x4_t v56 = *((float32x4_t *)a2 + 30);
      float32x4_t v57 = vmaxq_f32(v53, v55);
      float32x4_t v58 = vmaxq_f32(v54, v55);
      float32x4_t v59 = vcvtq_f32_s32(vcvtq_s32_f32(v57));
      float32x4_t v60 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v61 = vsubq_f32(v59, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v59, v57)));
      float32x4_t v62 = vsubq_f32(v60, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v60, v58)));
      float32x4_t v63 = vsubq_f32(v57, v61);
      float32x4_t v64 = vsubq_f32(v58, v62);
      float32x4_t v65 = *((float32x4_t *)a2 + 31);
      float32x4_t v66 = *((float32x4_t *)a2 + 32);
      float32x4_t v67 = vmulq_f32(v64, vaddq_f32(v66, vmulq_f32(v64, vaddq_f32(v56, vmulq_f32(v65, v64)))));
      float32x4_t v68 = vaddq_f32(v27, vmulq_f32(v63, vaddq_f32(v66, vmulq_f32(v63, vaddq_f32(v56, vmulq_f32(v65, v63))))));
      int32x4_t v69 = vcvtq_s32_f32(v62);
      int32x4_t v70 = *((int32x4_t *)a2 + 33);
      float32x4_t v71 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vmulq_f32(v68, (float32x4_t)vshlq_n_s32(vaddq_s32(v70, vcvtq_s32_f32(v61)), 0x17uLL)));
      float32x4_t v72 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vmulq_f32(vaddq_f32(v27, v67), (float32x4_t)vshlq_n_s32(vaddq_s32(v70, v69), 0x17uLL)));
      float32x4_t v73 = (int8x16_t *)(v6 + v11);
      v73[-1] = vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v71, v71, 3));
      *float32x4_t v73 = vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v72, v72, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v74 = -v10;
    if (v74 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v75 = 16 * v74;
    float32x4_t v76 = *(float32x4_t *)(v7 + v75);
    int8x16_t v77 = *((int8x16_t *)a2 + 15);
    float32x4_t v78 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v79 = vmulq_f32(vrecpeq_f32(v78), *((float32x4_t *)a2 + 18));
    float32x4_t v80 = vmulq_f32(v76, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v79, vrecpsq_f32(v79, v78))), *((int8x16_t *)a2 + 3)));
    float32x4_t v81 = *((float32x4_t *)a2 + 5);
    float32x4_t v82 = vminq_f32(vmaxq_f32(v80, *((float32x4_t *)a2 + 75)), v81);
    float32x4_t v83 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v82), (int8x16_t)v81);
    float32x4_t v84 = (float32x4_t)vandq_s8((int8x16_t)v81, (int8x16_t)vcgtq_f32(v83, *((float32x4_t *)a2 + 23)));
    float32x4_t v85 = vsubq_f32(vsubq_f32(v83, v81), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v84), v83));
    float32x4_t v86 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 115), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v82, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v82))), *((float32x4_t *)a2 + 22)), v84), vmulq_f32(v85, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v85, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v85, v85), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v85))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v87 = vcvtq_f32_s32(vcvtq_s32_f32(v86));
    float32x4_t v88 = vsubq_f32(v87, (float32x4_t)vandq_s8((int8x16_t)v81, (int8x16_t)vcgtq_f32(v87, v86)));
    float32x4_t v89 = vsubq_f32(v86, v88);
    float32x4_t v90 = (float32x4_t)vbslq_s8(v77, (int8x16_t)v80, (int8x16_t)vmulq_f32(vaddq_f32(v81, vmulq_f32(v89, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v89, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v89)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v88)), 0x17uLL)));
    *(int8x16_t *)(v6 + v75) = vbslq_s8(v77, (int8x16_t)v80, (int8x16_t)vmulq_laneq_f32(v90, v90, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getquicktime_halfTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v83 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v14 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 82);
      int8x16_t v27 = (int8x16_t)vmaxq_f32(v25, v26);
      float32x4_t v28 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v24, (int8x16_t)vmaxq_f32(v24, v26));
      float32x4_t v29 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v25, v27);
      float32x4_t v30 = *((float32x4_t *)a2 + 75);
      float32x4_t v31 = *((float32x4_t *)a2 + 5);
      int32x4_t v33 = *((int32x4_t *)a2 + 33);
      int8x16_t v32 = *((int8x16_t *)a2 + 34);
      float32x4_t v34 = vmulq_f32(v28, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v30, v28), v32, (int8x16_t)v31));
      float32x4_t v35 = vmulq_f32(v29, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v30, v29), v32, (int8x16_t)v31));
      float32x4_t v36 = *((float32x4_t *)a2 + 84);
      float32x4_t v37 = vminq_f32(v34, v36);
      float32x4_t v38 = vminq_f32(v35, v36);
      int8x16_t v39 = *((int8x16_t *)a2 + 19);
      float32x4_t v40 = *((float32x4_t *)a2 + 20);
      float32x4_t v41 = (float32x4_t)vorrq_s8(vandq_s8(v39, (int8x16_t)v37), (int8x16_t)v31);
      int8x16_t v42 = *((int8x16_t *)a2 + 21);
      float32x4_t v43 = *((float32x4_t *)a2 + 22);
      float32x4_t v44 = (float32x4_t)vorrq_s8(vandq_s8(v39, (int8x16_t)v38), (int8x16_t)v31);
      float32x4_t v45 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v38, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v40, v38)));
      float32x4_t v46 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v37, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v40, v37))), v43);
      float32x4_t v47 = *((float32x4_t *)a2 + 23);
      float32x4_t v48 = *((float32x4_t *)a2 + 24);
      float32x4_t v49 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v41, v47));
      float32x4_t v50 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v44, v47));
      float32x4_t v51 = vaddq_f32(v46, v49);
      float32x4_t v52 = vmulq_f32(v48, v49);
      float32x4_t v53 = vmulq_f32(vmulq_f32(v48, v50), v44);
      float32x4_t v54 = vaddq_f32(vsubq_f32(v45, v43), v50);
      float32x4_t v55 = vsubq_f32(vsubq_f32(v41, v31), vmulq_f32(v52, v41));
      float32x4_t v56 = vsubq_f32(vsubq_f32(v44, v31), v53);
      float32x4_t v57 = *((float32x4_t *)a2 + 25);
      float32x4_t v58 = *((float32x4_t *)a2 + 26);
      float32x4_t v59 = *((float32x4_t *)a2 + 27);
      float32x4_t v60 = *((float32x4_t *)a2 + 28);
      float32x4_t v61 = vaddq_f32(v54, vmulq_f32(v56, vaddq_f32(vaddq_f32(v59, vmulq_f32(v56, v60)), vmulq_f32(vmulq_f32(v56, v56), vaddq_f32(v57, vmulq_f32(v58, v56))))));
      float32x4_t v62 = *((float32x4_t *)a2 + 115);
      float32x4_t v63 = vmulq_f32(v62, vaddq_f32(v51, vmulq_f32(v55, vaddq_f32(vaddq_f32(v59, vmulq_f32(v55, v60)), vmulq_f32(vmulq_f32(v55, v55), vaddq_f32(v57, vmulq_f32(v58, v55)))))));
      float32x4_t v64 = vmulq_f32(v62, v61);
      float32x4_t v65 = *((float32x4_t *)a2 + 29);
      float32x4_t v66 = *((float32x4_t *)a2 + 30);
      float32x4_t v67 = vmaxq_f32(v63, v65);
      float32x4_t v68 = vmaxq_f32(v64, v65);
      float32x4_t v69 = vcvtq_f32_s32(vcvtq_s32_f32(v67));
      float32x4_t v70 = vcvtq_f32_s32(vcvtq_s32_f32(v68));
      float32x4_t v71 = vsubq_f32(v69, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v69, v67)));
      float32x4_t v72 = vsubq_f32(v70, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v70, v68)));
      float32x4_t v73 = vsubq_f32(v67, v71);
      float32x4_t v74 = vsubq_f32(v68, v72);
      float32x4_t v75 = *((float32x4_t *)a2 + 31);
      float32x4_t v76 = *((float32x4_t *)a2 + 32);
      float32x4_t v77 = vaddq_f32(v31, vmulq_f32(v73, vaddq_f32(v76, vmulq_f32(v73, vaddq_f32(v66, vmulq_f32(v75, v73))))));
      float32x4_t v78 = vaddq_f32(v31, vmulq_f32(v74, vaddq_f32(v76, vmulq_f32(v74, vaddq_f32(v66, vmulq_f32(v75, v74))))));
      int8x16_t v79 = *((int8x16_t *)a2 + 36);
      float32x4_t v80 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v24, veorq_s8(vandq_s8(v79, (int8x16_t)v28), (int8x16_t)vmulq_f32(v77, (float32x4_t)vshlq_n_s32(vaddq_s32(v33, vcvtq_s32_f32(v71)), 0x17uLL))));
      float32x4_t v81 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v25, veorq_s8(vandq_s8(v79, (int8x16_t)v29), (int8x16_t)vmulq_f32(v78, (float32x4_t)vshlq_n_s32(vaddq_s32(v33, vcvtq_s32_f32(v72)), 0x17uLL))));
      float32x4_t v82 = (int8x16_t *)(v6 + v11);
      v82[-1] = vbslq_s8(v14, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v80, v80, 3));
      *float32x4_t v82 = vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v81, v81, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v83 = -v10;
    if (v83 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v84 = 16 * v83;
    float32x4_t v85 = *(float32x4_t *)(v7 + v84);
    int8x16_t v86 = *((int8x16_t *)a2 + 15);
    float32x4_t v87 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v88 = vmulq_f32(vrecpeq_f32(v87), *((float32x4_t *)a2 + 18));
    float32x4_t v89 = vmulq_f32(v85, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v88, vrecpsq_f32(v88, v87))), *((int8x16_t *)a2 + 3)));
    float32x4_t v90 = (float32x4_t)vbslq_s8(v86, (int8x16_t)v89, (int8x16_t)vmaxq_f32(v89, *((float32x4_t *)a2 + 82)));
    float32x4_t v91 = *((float32x4_t *)a2 + 5);
    float32x4_t v92 = vminq_f32(vmulq_f32(v90, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 75), v90), *((int8x16_t *)a2 + 34), (int8x16_t)v91)), *((float32x4_t *)a2 + 84));
    float32x4_t v93 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v92), (int8x16_t)v91);
    float32x4_t v94 = (float32x4_t)vandq_s8((int8x16_t)v91, (int8x16_t)vcgtq_f32(v93, *((float32x4_t *)a2 + 23)));
    float32x4_t v95 = vsubq_f32(vsubq_f32(v93, v91), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v94), v93));
    float32x4_t v96 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 115), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v92, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v92))), *((float32x4_t *)a2 + 22)), v94), vmulq_f32(v95, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v95, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v95, v95), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v95))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v97 = vcvtq_f32_s32(vcvtq_s32_f32(v96));
    float32x4_t v98 = vsubq_f32(v97, (float32x4_t)vandq_s8((int8x16_t)v91, (int8x16_t)vcgtq_f32(v97, v96)));
    float32x4_t v99 = vsubq_f32(v96, v98);
    float32x4_t v100 = (float32x4_t)vbslq_s8(v86, (int8x16_t)v89, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v90), (int8x16_t)vmulq_f32(vaddq_f32(v91, vmulq_f32(v99, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v99, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v99)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v98)), 0x17uLL))));
    *(int8x16_t *)(v6 + v84) = vbslq_s8(v86, (int8x16_t)v89, (int8x16_t)vmulq_laneq_f32(v100, v100, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getquicktime_niceTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v97 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v14 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      int8x16_t v24 = vandq_s8(v23, v22);
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v26));
      float32x4_t v28 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 82);
      int8x16_t v30 = (int8x16_t)vmaxq_f32(v28, v29);
      float32x4_t v31 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmaxq_f32(v27, v29));
      float32x4_t v32 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v28, v30);
      float32x4_t v33 = *((float32x4_t *)a2 + 75);
      float32x4_t v34 = *((float32x4_t *)a2 + 5);
      int32x4_t v36 = *((int32x4_t *)a2 + 33);
      int8x16_t v35 = *((int8x16_t *)a2 + 34);
      float32x4_t v37 = *((float32x4_t *)a2 + 84);
      int8x16_t v38 = (int8x16_t)vminq_f32(vmulq_f32(v31, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v33, v31), v35, (int8x16_t)v34)), v37);
      int8x16_t v39 = (int8x16_t)vminq_f32(vmulq_f32(v32, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v33, v32), v35, (int8x16_t)v34)), v37);
      float32x4_t v40 = *((float32x4_t *)a2 + 115);
      int8x16_t v41 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vceqq_f32(v40, v33)), v33);
      float32x4_t v42 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v34, v38);
      float32x4_t v43 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v34, v39);
      int8x16_t v44 = *((int8x16_t *)a2 + 19);
      float32x4_t v45 = *((float32x4_t *)a2 + 20);
      float32x4_t v46 = (float32x4_t)vorrq_s8(vandq_s8(v44, (int8x16_t)v42), (int8x16_t)v34);
      float32x4_t v47 = (float32x4_t)vorrq_s8(vandq_s8(v44, (int8x16_t)v43), (int8x16_t)v34);
      int8x16_t v48 = *((int8x16_t *)a2 + 21);
      float32x4_t v49 = *((float32x4_t *)a2 + 22);
      float32x4_t v50 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v43, 0x17uLL)), (float32x4_t)vandq_s8(v48, (int8x16_t)vcgtq_f32(v45, v43)));
      float32x4_t v51 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v42, 0x17uLL)), (float32x4_t)vandq_s8(v48, (int8x16_t)vcgtq_f32(v45, v42))), v49);
      float32x4_t v52 = *((float32x4_t *)a2 + 23);
      float32x4_t v53 = *((float32x4_t *)a2 + 24);
      float32x4_t v54 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v46, v52));
      float32x4_t v55 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v47, v52));
      float32x4_t v56 = vaddq_f32(v51, v54);
      float32x4_t v57 = vaddq_f32(vsubq_f32(v50, v49), v55);
      float32x4_t v58 = vsubq_f32(vsubq_f32(v46, v34), vmulq_f32(vmulq_f32(v53, v54), v46));
      float32x4_t v59 = vsubq_f32(vsubq_f32(v47, v34), vmulq_f32(vmulq_f32(v53, v55), v47));
      float32x4_t v60 = *((float32x4_t *)a2 + 38);
      float32x4_t v61 = *((float32x4_t *)a2 + 39);
      int8x16_t v63 = *((int8x16_t *)a2 + 36);
      float32x4_t v62 = *((float32x4_t *)a2 + 37);
      float32x4_t v64 = vaddq_f32(v62, vmulq_f32(v60, v58));
      float32x4_t v65 = *((float32x4_t *)a2 + 40);
      float32x4_t v66 = *((float32x4_t *)a2 + 41);
      float32x4_t v67 = vaddq_f32(v61, vmulq_f32(v65, v58));
      float32x4_t v68 = vaddq_f32(v61, vmulq_f32(v65, v59));
      float32x4_t v69 = *((float32x4_t *)a2 + 42);
      float32x4_t v70 = *((float32x4_t *)a2 + 43);
      float32x4_t v71 = vaddq_f32(v62, vmulq_f32(v60, v59));
      float32x4_t v72 = vaddq_f32(v66, vmulq_f32(v69, v58));
      float32x4_t v73 = vaddq_f32(v66, vmulq_f32(v69, v59));
      float32x4_t v74 = vmulq_f32(v58, v58);
      float32x4_t v75 = vaddq_f32(v64, vmulq_f32(v74, v67));
      float32x4_t v76 = vmulq_f32(v59, v59);
      float32x4_t v77 = vaddq_f32(v57, vmulq_f32(v59, vaddq_f32(v70, vmulq_f32(v59, vaddq_f32(v73, vmulq_f32(v76, vaddq_f32(v71, vmulq_f32(v76, v68))))))));
      float32x4_t v78 = *((float32x4_t *)a2 + 29);
      float32x4_t v79 = vmaxq_f32(vmulq_f32(v40, vaddq_f32(v56, vmulq_f32(v58, vaddq_f32(v70, vmulq_f32(v58, vaddq_f32(v72, vmulq_f32(v74, v75))))))), v78);
      float32x4_t v80 = vmaxq_f32(vmulq_f32(v40, v77), v78);
      float32x4_t v81 = vcvtq_f32_s32(vcvtq_s32_f32(v79));
      float32x4_t v82 = vcvtq_f32_s32(vcvtq_s32_f32(v80));
      float32x4_t v83 = vsubq_f32(v81, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v81, v79)));
      float32x4_t v84 = vsubq_f32(v82, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v82, v80)));
      float32x4_t v85 = vsubq_f32(v79, v83);
      float32x4_t v86 = vsubq_f32(v80, v84);
      float32x4_t v87 = *((float32x4_t *)a2 + 44);
      float32x4_t v88 = *((float32x4_t *)a2 + 45);
      float32x4_t v89 = vaddq_f32(v87, vmulq_f32(v88, v85));
      float32x4_t v90 = *((float32x4_t *)a2 + 46);
      float32x4_t v91 = *((float32x4_t *)a2 + 47);
      float32x4_t v92 = vaddq_f32(v87, vmulq_f32(v88, v86));
      float32x4_t v93 = *((float32x4_t *)a2 + 48);
      float32x4_t v94 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, veorq_s8(vandq_s8(v63, (int8x16_t)v31), (int8x16_t)vmulq_f32(vaddq_f32(v34, vmulq_f32(v85, vaddq_f32(v93, vmulq_f32(v85, vaddq_f32(vaddq_f32(v90, vmulq_f32(v85, v91)), vmulq_f32(vmulq_f32(v85, v85), v89)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v36, vcvtq_s32_f32(v83)), 0x17uLL))));
      float32x4_t v95 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v28, veorq_s8(vandq_s8(v63, (int8x16_t)v32), (int8x16_t)vmulq_f32(vaddq_f32(v34, vmulq_f32(v86, vaddq_f32(v93, vmulq_f32(v86, vaddq_f32(vaddq_f32(v90, vmulq_f32(v91, v86)), vmulq_f32(vmulq_f32(v86, v86), v92)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v36, vcvtq_s32_f32(v84)), 0x17uLL))));
      float32x4_t v96 = (int8x16_t *)(v6 + v11);
      v96[-1] = vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v94, v94, 3));
      *float32x4_t v96 = vbslq_s8(v14, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v95, v95, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v97 = -v10;
    if (v97 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v98 = 16 * v97;
    float32x4_t v99 = *(float32x4_t *)(v7 + v98);
    int8x16_t v100 = *((int8x16_t *)a2 + 15);
    float32x4_t v101 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v102 = vrecpeq_f32(v101);
    float32x4_t v103 = vmulq_f32(v102, vrecpsq_f32(v102, v101));
    float32x4_t v104 = vmulq_f32(v99, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v103, vrecpsq_f32(v103, v101))), *((int8x16_t *)a2 + 3)));
    float32x4_t v105 = (float32x4_t)vbslq_s8(v100, (int8x16_t)v104, (int8x16_t)vmaxq_f32(v104, *((float32x4_t *)a2 + 82)));
    float32x4_t v106 = *((float32x4_t *)a2 + 5);
    float32x4_t v107 = *((float32x4_t *)a2 + 115);
    float32x4_t v108 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v106, (int8x16_t)vceqq_f32(v107, *((float32x4_t *)a2 + 75))), *((float32x4_t *)a2 + 75)), (int8x16_t)v106, (int8x16_t)vminq_f32(vmulq_f32(v105, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 75), v105), *((int8x16_t *)a2 + 34), (int8x16_t)v106)), *((float32x4_t *)a2 + 84)));
    float32x4_t v109 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v108), (int8x16_t)v106);
    float32x4_t v110 = (float32x4_t)vandq_s8((int8x16_t)v106, (int8x16_t)vcgtq_f32(v109, *((float32x4_t *)a2 + 23)));
    float32x4_t v111 = vsubq_f32(vsubq_f32(v109, v106), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v110), v109));
    float32x4_t v112 = vmulq_f32(v111, v111);
    float32x4_t v113 = vmaxq_f32(vmulq_f32(v107, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v108, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v108))), *((float32x4_t *)a2 + 22)), v110), vmulq_f32(v111, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v111, vaddq_f32(
                         vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v111)),
                         vmulq_f32(v112, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v111)), vmulq_f32(v112, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v111))))))))))), *((float32x4_t *)a2 + 29));
    float32x4_t v114 = vcvtq_f32_s32(vcvtq_s32_f32(v113));
    float32x4_t v115 = vsubq_f32(v114, (float32x4_t)vandq_s8((int8x16_t)v106, (int8x16_t)vcgtq_f32(v114, v113)));
    float32x4_t v116 = vsubq_f32(v113, v115);
    float32x4_t v117 = (float32x4_t)vbslq_s8(v100, (int8x16_t)v104, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v105), (int8x16_t)vmulq_f32(vaddq_f32(v106, vmulq_f32(v116, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v116, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v116)), vmulq_f32(vmulq_f32(v116, v116),
                                                     vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v116)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v115)), 0x17uLL))));
    *(int8x16_t *)(v6 + v98) = vbslq_s8(v100, (int8x16_t)v104, (int8x16_t)vmulq_laneq_f32(v117, v117, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_quicktime_fast_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v56 = 0;
        uint64_t v57 = 16 * v8;
        uint64_t v58 = 16 * v7;
        uint64_t v59 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v60 = 0;
          do
          {
            int8x16_t v61 = *((int8x16_t *)a2 + 15);
            float32x4_t v62 = vmulq_f32(v5[v60 / 0x10], (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5[v60 / 0x10], 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
            float32x4_t v63 = vminq_f32(vmaxq_f32(v62, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v64 = (float32x4_t)vbslq_s8(v61, (int8x16_t)v62, (int8x16_t)vmulq_f32(v63, v63));
            v6[v60 / 0x10] = vbslq_s8(v61, (int8x16_t)v62, (int8x16_t)vmulq_laneq_f32(v64, v64, 3));
            v60 += 16;
          }
          while (v59 != v60);
          ++v56;
          int v5 = (float32x4_t *)((char *)v5 + v57);
          uint64_t v6 = (int8x16_t *)((char *)v6 + v58);
        }
        while (v56 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      float32x4_t v12 = v5 + 4;
      float32x4_t v13 = v6 + 4;
      do
      {
        unint64_t v14 = 0;
        float32x4_t v15 = v13;
        float32x4_t v16 = v12;
        uint64_t v17 = 2;
        do
        {
          float32x4_t v18 = v5[v17 - 2];
          float32x4_t v19 = v5[v17 - 1];
          float32x4_t v20 = v5[v17];
          float32x4_t v21 = v5[v17 + 1];
          int8x16_t v23 = *((int8x16_t *)a2 + 15);
          float32x4_t v22 = *((float32x4_t *)a2 + 16);
          int8x16_t v24 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3), v22));
          int8x16_t v25 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3), v22));
          int8x16_t v26 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 3), v22));
          int8x16_t v27 = (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 3), v22));
          int8x16_t v28 = *((int8x16_t *)a2 + 17);
          int8x16_t v29 = vandq_s8(v28, v24);
          int8x16_t v30 = vandq_s8(v28, v25);
          int8x16_t v31 = vandq_s8(v28, v26);
          int8x16_t v32 = vandq_s8(v28, v27);
          int8x16_t v33 = *((int8x16_t *)a2 + 3);
          float32x4_t v34 = vmulq_f32(v18, (float32x4_t)vorrq_s8(v29, v33));
          float32x4_t v35 = vmulq_f32(v19, (float32x4_t)vorrq_s8(v30, v33));
          float32x4_t v36 = vmulq_f32(v20, (float32x4_t)vorrq_s8(v31, v33));
          float32x4_t v37 = vmulq_f32(v21, (float32x4_t)vorrq_s8(v32, v33));
          float32x4_t v38 = *((float32x4_t *)a2 + 75);
          float32x4_t v39 = *((float32x4_t *)a2 + 5);
          float32x4_t v40 = vminq_f32(vmaxq_f32(v34, v38), v39);
          float32x4_t v41 = vminq_f32(vmaxq_f32(v35, v38), v39);
          float32x4_t v42 = vminq_f32(vmaxq_f32(v36, v38), v39);
          float32x4_t v43 = vminq_f32(vmaxq_f32(v37, v38), v39);
          int8x16_t v44 = v16;
          float32x4_t v45 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v34, (int8x16_t)vmulq_f32(v40, v40));
          float32x4_t v46 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v35, (int8x16_t)vmulq_f32(v41, v41));
          float32x4_t v47 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v36, (int8x16_t)vmulq_f32(v42, v42));
          float32x4_t v48 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v37, (int8x16_t)vmulq_f32(v43, v43));
          float32x4_t v49 = v15;
          float32x4_t v50 = &v6[v17];
          v14 += 4;
          v50[-2] = vbslq_s8(v23, (int8x16_t)v34, (int8x16_t)vmulq_laneq_f32(v45, v45, 3));
          v50[-1] = vbslq_s8(v23, (int8x16_t)v35, (int8x16_t)vmulq_laneq_f32(v46, v46, 3));
          *float32x4_t v50 = vbslq_s8(v23, (int8x16_t)v36, (int8x16_t)vmulq_laneq_f32(v47, v47, 3));
          v50[1] = vbslq_s8(v23, (int8x16_t)v37, (int8x16_t)vmulq_laneq_f32(v48, v48, 3));
          v17 += 4;
          v16 += 4;
          float32x4_t v15 = v49 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            float32x4_t v51 = *v44++;
            int8x16_t v52 = *((int8x16_t *)a2 + 15);
            float32x4_t v53 = vmulq_f32(v51, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 3), *((float32x4_t *)a2 + 16)))), *((int8x16_t *)a2 + 3)));
            float32x4_t v54 = vminq_f32(vmaxq_f32(v53, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v55 = (float32x4_t)vbslq_s8(v52, (int8x16_t)v53, (int8x16_t)vmulq_f32(v54, v54));
            *v49++ = vbslq_s8(v52, (int8x16_t)v53, (int8x16_t)vmulq_laneq_f32(v55, v55, 3));
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        uint64_t v6 = (int8x16_t *)((char *)v6 + v10);
        int v5 = (float32x4_t *)((char *)v5 + v11);
        float32x4_t v12 = (float32x4_t *)((char *)v12 + v11);
        float32x4_t v13 = (int8x16_t *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

uint64_t Getinv_quicktime_fixed_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 6);
    while (v5 < 4)
    {
      LODWORD(v87) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v7 += v8;
      v6 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 32;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 32);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v11);
      float32x4_t v15 = *(float32x4_t *)(v7 + v11 + 16);
      int8x16_t v17 = *((int8x16_t *)a2 + 15);
      float32x4_t v16 = *((float32x4_t *)a2 + 16);
      float32x4_t v18 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v16));
      float32x4_t v19 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v16));
      float32x4_t v20 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v16));
      float32x4_t v21 = vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      float32x4_t v22 = *((float32x4_t *)a2 + 18);
      int8x16_t v24 = vandq_s8(v23, (int8x16_t)vmulq_f32(v18, v22));
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v19, v22));
      int8x16_t v26 = vandq_s8(v23, (int8x16_t)vmulq_f32(v20, v22));
      int8x16_t v27 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, v22));
      int8x16_t v28 = *((int8x16_t *)a2 + 3);
      float32x4_t v29 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v28));
      float32x4_t v30 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v28));
      float32x4_t v31 = vmulq_f32(v14, (float32x4_t)vorrq_s8(v26, v28));
      float32x4_t v32 = vmulq_f32(v15, (float32x4_t)vorrq_s8(v27, v28));
      float32x4_t v33 = *((float32x4_t *)a2 + 75);
      float32x4_t v34 = *((float32x4_t *)a2 + 5);
      float32x4_t v35 = *((float32x4_t *)a2 + 6);
      float32x4_t v36 = vmulq_f32(v35, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v29, v33), v34)));
      float32x4_t v37 = vmulq_f32(v35, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v30, v33), v34)));
      float32x4_t v38 = vmulq_f32(v35, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v31, v33), v34)));
      float32x4_t v39 = vmulq_f32(v35, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v32, v33), v34)));
      float32x4_t v40 = vcvtq_f32_s32(vcvtq_s32_f32(v36));
      float32x4_t v41 = vcvtq_f32_s32(vcvtq_s32_f32(v37));
      float32x4_t v42 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
      float32x4_t v43 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
      float32x4_t v44 = *((float32x4_t *)a2 + 7);
      float32x4_t v45 = *((float32x4_t *)a2 + 8);
      float32x4_t v46 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v36, v40), v44));
      float32x4_t v47 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v37, v41), v44));
      float32x4_t v48 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v38, v42), v44));
      float32x4_t v49 = vrsqrteq_f32(vaddq_f32(v44, vsubq_f32(v39, v43)));
      float32x4_t v50 = vaddq_f32(v45, v40);
      float32x4_t v51 = vaddq_f32(v45, v41);
      float32x4_t v52 = vaddq_f32(v45, v42);
      float32x4_t v53 = vaddq_f32(v45, v43);
      float32x4_t v54 = *((float32x4_t *)a2 + 9);
      float32x4_t v55 = *((float32x4_t *)a2 + 10);
      float32x4_t v56 = vsubq_f32(v50, vmulq_f32(v46, v54));
      float32x4_t v57 = *((float32x4_t *)a2 + 116);
      float32x4_t v58 = vmulq_f32(v57, v56);
      float32x4_t v59 = vmulq_f32(v57, vsubq_f32(v51, vmulq_f32(v47, v54)));
      float32x4_t v60 = vmulq_f32(v57, vsubq_f32(v52, vmulq_f32(v48, v54)));
      float32x4_t v61 = vmulq_f32(v57, vsubq_f32(v53, vmulq_f32(v49, v54)));
      float32x4_t v62 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v63 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v64 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
      float32x4_t v65 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
      float32x4_t v66 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v62, v58)));
      float32x4_t v67 = vsubq_f32(v63, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v63, v59)));
      float32x4_t v68 = vsubq_f32(v64, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v64, v60)));
      float32x4_t v69 = vsubq_f32(v65, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v65, v61)));
      float32x4_t v70 = *((float32x4_t *)a2 + 11);
      float32x4_t v71 = *((float32x4_t *)a2 + 12);
      float32x4_t v72 = vmulq_f32(vrecpeq_f32(vsubq_f32(v70, vsubq_f32(v58, v66))), v71);
      float32x4_t v73 = vmulq_f32(vrecpeq_f32(vsubq_f32(v70, vsubq_f32(v59, v67))), v71);
      float32x4_t v74 = vmulq_f32(vrecpeq_f32(vsubq_f32(v70, vsubq_f32(v60, v68))), v71);
      float32x4_t v75 = vmulq_f32(vrecpeq_f32(vsubq_f32(v70, vsubq_f32(v61, v69))), v71);
      float32x4_t v76 = vmaxq_f32(vaddq_f32(vaddq_f32(v66, v55), vmulq_f32(v72, v72)), v33);
      float32x4_t v77 = vmaxq_f32(vaddq_f32(vaddq_f32(v55, v67), vmulq_f32(v73, v73)), v33);
      float32x4_t v78 = vmaxq_f32(vaddq_f32(vaddq_f32(v55, v68), vmulq_f32(v74, v74)), v33);
      float32x4_t v79 = vmaxq_f32(vaddq_f32(vaddq_f32(v55, v69), vmulq_f32(v75, v75)), v33);
      float32x4_t v80 = *((float32x4_t *)a2 + 13);
      float32x4_t v81 = *((float32x4_t *)a2 + 14);
      float32x4_t v82 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v29, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v76, v80), v81)));
      float32x4_t v83 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v30, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v77, v80), v81)));
      float32x4_t v84 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v31, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v78, v80), v81)));
      float32x4_t v85 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v32, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v79, v80), v81)));
      float32x4_t v86 = (int8x16_t *)(v6 + v11);
      v86[-2] = vbslq_s8(v17, (int8x16_t)v29, (int8x16_t)vmulq_laneq_f32(v82, v82, 3));
      v86[-1] = vbslq_s8(v17, (int8x16_t)v30, (int8x16_t)vmulq_laneq_f32(v83, v83, 3));
      *float32x4_t v86 = vbslq_s8(v17, (int8x16_t)v31, (int8x16_t)vmulq_laneq_f32(v84, v84, 3));
      v86[1] = vbslq_s8(v17, (int8x16_t)v32, (int8x16_t)vmulq_laneq_f32(v85, v85, 3));
      v10 -= 4;
      v11 += 64;
    }
    while (v5 + v10 > 3);
    LODWORD(v87) = -v10;
    if ((int)v87 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v87 = v87;
    do
    {
      int8x16_t v88 = *((int8x16_t *)a2 + 15);
      float32x4_t v89 = vmulq_f32(*(float32x4_t *)(v7 + 16 * v87), (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(vrecpeq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v7 + 16 * v87), 3), *((float32x4_t *)a2 + 16))), *((float32x4_t *)a2 + 18))), *((int8x16_t *)a2 + 3)));
      float32x4_t v90 = *((float32x4_t *)a2 + 75);
      float32x4_t v91 = *((float32x4_t *)a2 + 5);
      float32x4_t v92 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v89, v90), v91)));
      float32x4_t v93 = vcvtq_f32_s32(vcvtq_s32_f32(v92));
      float32x4_t v94 = vmulq_f32(*((float32x4_t *)a2 + 116), vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v93), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v92, v93))), *((float32x4_t *)a2 + 9))));
      float32x4_t v95 = vcvtq_f32_s32(vcvtq_s32_f32(v94));
      float32x4_t v96 = vsubq_f32(v95, (float32x4_t)vandq_s8((int8x16_t)v91, (int8x16_t)vcgtq_f32(v95, v94)));
      float32x4_t v97 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v94, v96))), *((float32x4_t *)a2 + 12));
      float32x4_t v98 = (float32x4_t)vbslq_s8(v88, (int8x16_t)v89, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v96), vmulq_f32(v97, v97)), v90), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))));
      *(int8x16_t *)(v6 + 16 * v87++) = vbslq_s8(v88, (int8x16_t)v89, (int8x16_t)vmulq_laneq_f32(v98, v98, 3));
    }
    while (v87 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_quicktime_nice_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v92 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      int8x16_t v24 = vandq_s8(v23, v22);
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = (float32x4_t)vorrq_s8(v25, v26);
      float32x4_t v28 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 75);
      float32x4_t v30 = vmulq_f32(v13, v27);
      float32x4_t v31 = *((float32x4_t *)a2 + 5);
      int8x16_t v32 = (int8x16_t)vminq_f32(vmaxq_f32(v28, v29), v31);
      float32x4_t v33 = *((float32x4_t *)a2 + 116);
      int8x16_t v34 = (int8x16_t)vminq_f32(vmaxq_f32(v30, v29), v31);
      int8x16_t v35 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vceqq_f32(v33, v29)), v29);
      float32x4_t v36 = (float32x4_t)vbslq_s8(v35, (int8x16_t)v31, v32);
      float32x4_t v37 = (float32x4_t)vbslq_s8(v35, (int8x16_t)v31, v34);
      int8x16_t v39 = *((int8x16_t *)a2 + 19);
      float32x4_t v38 = *((float32x4_t *)a2 + 20);
      float32x4_t v40 = (float32x4_t)vorrq_s8(vandq_s8(v39, (int8x16_t)v36), (int8x16_t)v31);
      float32x4_t v41 = (float32x4_t)vorrq_s8(vandq_s8(v39, (int8x16_t)v37), (int8x16_t)v31);
      int8x16_t v42 = *((int8x16_t *)a2 + 21);
      float32x4_t v43 = *((float32x4_t *)a2 + 22);
      float32x4_t v44 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v37, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v38, v37)));
      float32x4_t v45 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v38, v36))), v43);
      float32x4_t v46 = *((float32x4_t *)a2 + 23);
      float32x4_t v47 = *((float32x4_t *)a2 + 24);
      float32x4_t v48 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v40, v46));
      float32x4_t v49 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v41, v46));
      float32x4_t v50 = vaddq_f32(v45, v48);
      float32x4_t v51 = vaddq_f32(vsubq_f32(v44, v43), v49);
      float32x4_t v52 = vsubq_f32(vsubq_f32(v40, v31), vmulq_f32(vmulq_f32(v47, v48), v40));
      float32x4_t v53 = vsubq_f32(vsubq_f32(v41, v31), vmulq_f32(vmulq_f32(v47, v49), v41));
      float32x4_t v54 = vmulq_f32(v52, v52);
      float32x4_t v55 = *((float32x4_t *)a2 + 37);
      float32x4_t v56 = *((float32x4_t *)a2 + 38);
      float32x4_t v57 = *((float32x4_t *)a2 + 39);
      float32x4_t v58 = *((float32x4_t *)a2 + 40);
      float32x4_t v59 = vaddq_f32(v55, vmulq_f32(v56, v52));
      float32x4_t v60 = vaddq_f32(v57, vmulq_f32(v58, v52));
      float32x4_t v61 = vaddq_f32(v57, vmulq_f32(v58, v53));
      float32x4_t v62 = vaddq_f32(v55, vmulq_f32(v56, v53));
      float32x4_t v63 = *((float32x4_t *)a2 + 41);
      float32x4_t v64 = *((float32x4_t *)a2 + 42);
      float32x4_t v65 = vaddq_f32(v63, vmulq_f32(v64, v52));
      float32x4_t v66 = vaddq_f32(v63, vmulq_f32(v64, v53));
      float32x4_t v67 = vmulq_f32(v53, v53);
      float32x4_t v68 = vaddq_f32(v65, vmulq_f32(v54, vaddq_f32(v59, vmulq_f32(v54, v60))));
      float32x4_t v69 = vaddq_f32(v66, vmulq_f32(v67, vaddq_f32(v62, vmulq_f32(v67, v61))));
      float32x4_t v70 = *((float32x4_t *)a2 + 43);
      float32x4_t v71 = *((float32x4_t *)a2 + 44);
      float32x4_t v72 = vmulq_f32(v33, vaddq_f32(v51, vmulq_f32(v53, vaddq_f32(v70, vmulq_f32(v53, v69)))));
      float32x4_t v73 = *((float32x4_t *)a2 + 29);
      float32x4_t v74 = vmaxq_f32(vmulq_f32(v33, vaddq_f32(v50, vmulq_f32(v52, vaddq_f32(v70, vmulq_f32(v52, v68))))), v73);
      float32x4_t v75 = vmaxq_f32(v72, v73);
      float32x4_t v76 = vcvtq_f32_s32(vcvtq_s32_f32(v74));
      float32x4_t v77 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
      float32x4_t v78 = vsubq_f32(v76, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v76, v74)));
      float32x4_t v79 = vsubq_f32(v77, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v77, v75)));
      float32x4_t v80 = vsubq_f32(v74, v78);
      float32x4_t v81 = vsubq_f32(v75, v79);
      float32x4_t v82 = *((float32x4_t *)a2 + 45);
      float32x4_t v83 = *((float32x4_t *)a2 + 46);
      float32x4_t v84 = vaddq_f32(v71, vmulq_f32(v82, v80));
      float32x4_t v85 = vaddq_f32(v71, vmulq_f32(v82, v81));
      float32x4_t v86 = *((float32x4_t *)a2 + 47);
      float32x4_t v87 = *((float32x4_t *)a2 + 48);
      int32x4_t v88 = *((int32x4_t *)a2 + 33);
      float32x4_t v89 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vmulq_f32(vaddq_f32(v31, vmulq_f32(v80, vaddq_f32(v87, vmulq_f32(v80, vaddq_f32(vaddq_f32(v83, vmulq_f32(v80, v86)), vmulq_f32(vmulq_f32(v80, v80), v84)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v88, vcvtq_s32_f32(v78)), 0x17uLL)));
      float32x4_t v90 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v30, (int8x16_t)vmulq_f32(vaddq_f32(v31, vmulq_f32(v81, vaddq_f32(v87, vmulq_f32(v81, vaddq_f32(vaddq_f32(v83, vmulq_f32(v86, v81)), vmulq_f32(vmulq_f32(v81, v81), v85)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v88, vcvtq_s32_f32(v79)), 0x17uLL)));
      float32x4_t v91 = (int8x16_t *)(v6 + v11);
      v91[-1] = vbslq_s8(v15, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v89, v89, 3));
      *float32x4_t v91 = vbslq_s8(v15, (int8x16_t)v30, (int8x16_t)vmulq_laneq_f32(v90, v90, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v92 = -v10;
    if (v92 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v93 = 16 * v92;
    float32x4_t v94 = *(float32x4_t *)(v7 + v93);
    int8x16_t v95 = *((int8x16_t *)a2 + 15);
    float32x4_t v96 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v94, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v97 = vrecpeq_f32(v96);
    float32x4_t v98 = vmulq_f32(v97, vrecpsq_f32(v97, v96));
    float32x4_t v99 = vmulq_f32(v94, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v98, vrecpsq_f32(v98, v96))), *((int8x16_t *)a2 + 3)));
    float32x4_t v100 = *((float32x4_t *)a2 + 5);
    float32x4_t v101 = *((float32x4_t *)a2 + 116);
    float32x4_t v102 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v100, (int8x16_t)vceqq_f32(v101, *((float32x4_t *)a2 + 75))), *((float32x4_t *)a2 + 75)), (int8x16_t)v100, (int8x16_t)vminq_f32(vmaxq_f32(v99, *((float32x4_t *)a2 + 75)), v100));
    float32x4_t v103 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v102), (int8x16_t)v100);
    float32x4_t v104 = (float32x4_t)vandq_s8((int8x16_t)v100, (int8x16_t)vcgtq_f32(v103, *((float32x4_t *)a2 + 23)));
    float32x4_t v105 = vsubq_f32(vsubq_f32(v103, v100), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v104), v103));
    float32x4_t v106 = vmulq_f32(v105, v105);
    float32x4_t v107 = vmaxq_f32(vmulq_f32(v101, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v102, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v102))), *((float32x4_t *)a2 + 22)), v104), vmulq_f32(v105, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v105, vaddq_f32(
                         vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v105)),
                         vmulq_f32(v106, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v105)), vmulq_f32(v106, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v105))))))))))), *((float32x4_t *)a2 + 29));
    float32x4_t v108 = vcvtq_f32_s32(vcvtq_s32_f32(v107));
    float32x4_t v109 = vsubq_f32(v108, (float32x4_t)vandq_s8((int8x16_t)v100, (int8x16_t)vcgtq_f32(v108, v107)));
    float32x4_t v110 = vsubq_f32(v107, v109);
    float32x4_t v111 = (float32x4_t)vbslq_s8(v95, (int8x16_t)v99, (int8x16_t)vmulq_f32(vaddq_f32(v100, vmulq_f32(v110, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v110, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v110)), vmulq_f32(vmulq_f32(v110, v110), vaddq_f32(*((float32x4_t *)a2 + 44),
                                                     vmulq_f32(*((float32x4_t *)a2 + 45), v110)))))))),
                                       (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v109)), 0x17uLL)));
    *(int8x16_t *)(v6 + v93) = vbslq_s8(v95, (int8x16_t)v99, (int8x16_t)vmulq_laneq_f32(v111, v111, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_quicktime_half_satTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v74 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v14 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 75);
      float32x4_t v27 = *((float32x4_t *)a2 + 5);
      float32x4_t v28 = vminq_f32(vmaxq_f32(v24, v26), v27);
      float32x4_t v29 = vminq_f32(vmaxq_f32(v25, v26), v27);
      int8x16_t v30 = *((int8x16_t *)a2 + 19);
      float32x4_t v31 = *((float32x4_t *)a2 + 20);
      float32x4_t v32 = (float32x4_t)vorrq_s8(vandq_s8(v30, (int8x16_t)v28), (int8x16_t)v27);
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8(v30, (int8x16_t)v29), (int8x16_t)v27);
      int8x16_t v34 = *((int8x16_t *)a2 + 21);
      float32x4_t v35 = *((float32x4_t *)a2 + 22);
      float32x4_t v36 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v29, 0x17uLL)), (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v31, v29)));
      float32x4_t v37 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v28, 0x17uLL)), (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v31, v28))), v35);
      float32x4_t v38 = *((float32x4_t *)a2 + 23);
      float32x4_t v39 = *((float32x4_t *)a2 + 24);
      float32x4_t v40 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v32, v38));
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v33, v38));
      float32x4_t v42 = vaddq_f32(v37, v40);
      float32x4_t v43 = vaddq_f32(vsubq_f32(v36, v35), v41);
      float32x4_t v44 = vsubq_f32(vsubq_f32(v32, v27), vmulq_f32(vmulq_f32(v39, v40), v32));
      float32x4_t v45 = vsubq_f32(vsubq_f32(v33, v27), vmulq_f32(vmulq_f32(v39, v41), v33));
      float32x4_t v46 = *((float32x4_t *)a2 + 25);
      float32x4_t v47 = *((float32x4_t *)a2 + 26);
      float32x4_t v48 = vaddq_f32(v46, vmulq_f32(v47, v44));
      float32x4_t v49 = vaddq_f32(v46, vmulq_f32(v47, v45));
      float32x4_t v50 = *((float32x4_t *)a2 + 27);
      float32x4_t v51 = *((float32x4_t *)a2 + 28);
      float32x4_t v52 = *((float32x4_t *)a2 + 116);
      float32x4_t v53 = vmulq_f32(v52, vaddq_f32(v42, vmulq_f32(v44, vaddq_f32(vaddq_f32(v50, vmulq_f32(v44, v51)), vmulq_f32(vmulq_f32(v44, v44), v48)))));
      float32x4_t v54 = vmulq_f32(v52, vaddq_f32(v43, vmulq_f32(v45, vaddq_f32(vaddq_f32(v50, vmulq_f32(v45, v51)), vmulq_f32(vmulq_f32(v45, v45), v49)))));
      float32x4_t v55 = *((float32x4_t *)a2 + 29);
      float32x4_t v56 = *((float32x4_t *)a2 + 30);
      float32x4_t v57 = vmaxq_f32(v53, v55);
      float32x4_t v58 = vmaxq_f32(v54, v55);
      float32x4_t v59 = vcvtq_f32_s32(vcvtq_s32_f32(v57));
      float32x4_t v60 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v61 = vsubq_f32(v59, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v59, v57)));
      float32x4_t v62 = vsubq_f32(v60, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v60, v58)));
      float32x4_t v63 = vsubq_f32(v57, v61);
      float32x4_t v64 = vsubq_f32(v58, v62);
      float32x4_t v65 = *((float32x4_t *)a2 + 31);
      float32x4_t v66 = *((float32x4_t *)a2 + 32);
      float32x4_t v67 = vmulq_f32(v64, vaddq_f32(v66, vmulq_f32(v64, vaddq_f32(v56, vmulq_f32(v65, v64)))));
      float32x4_t v68 = vaddq_f32(v27, vmulq_f32(v63, vaddq_f32(v66, vmulq_f32(v63, vaddq_f32(v56, vmulq_f32(v65, v63))))));
      int32x4_t v69 = vcvtq_s32_f32(v62);
      int32x4_t v70 = *((int32x4_t *)a2 + 33);
      float32x4_t v71 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vmulq_f32(v68, (float32x4_t)vshlq_n_s32(vaddq_s32(v70, vcvtq_s32_f32(v61)), 0x17uLL)));
      float32x4_t v72 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vmulq_f32(vaddq_f32(v27, v67), (float32x4_t)vshlq_n_s32(vaddq_s32(v70, v69), 0x17uLL)));
      float32x4_t v73 = (int8x16_t *)(v6 + v11);
      v73[-1] = vbslq_s8(v15, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v71, v71, 3));
      *float32x4_t v73 = vbslq_s8(v15, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v72, v72, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v74 = -v10;
    if (v74 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v75 = 16 * v74;
    float32x4_t v76 = *(float32x4_t *)(v7 + v75);
    int8x16_t v77 = *((int8x16_t *)a2 + 15);
    float32x4_t v78 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v79 = vmulq_f32(vrecpeq_f32(v78), *((float32x4_t *)a2 + 18));
    float32x4_t v80 = vmulq_f32(v76, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v79, vrecpsq_f32(v79, v78))), *((int8x16_t *)a2 + 3)));
    float32x4_t v81 = *((float32x4_t *)a2 + 5);
    float32x4_t v82 = vminq_f32(vmaxq_f32(v80, *((float32x4_t *)a2 + 75)), v81);
    float32x4_t v83 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v82), (int8x16_t)v81);
    float32x4_t v84 = (float32x4_t)vandq_s8((int8x16_t)v81, (int8x16_t)vcgtq_f32(v83, *((float32x4_t *)a2 + 23)));
    float32x4_t v85 = vsubq_f32(vsubq_f32(v83, v81), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v84), v83));
    float32x4_t v86 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 116), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v82, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v82))), *((float32x4_t *)a2 + 22)), v84), vmulq_f32(v85, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v85, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v85, v85), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v85))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v87 = vcvtq_f32_s32(vcvtq_s32_f32(v86));
    float32x4_t v88 = vsubq_f32(v87, (float32x4_t)vandq_s8((int8x16_t)v81, (int8x16_t)vcgtq_f32(v87, v86)));
    float32x4_t v89 = vsubq_f32(v86, v88);
    float32x4_t v90 = (float32x4_t)vbslq_s8(v77, (int8x16_t)v80, (int8x16_t)vmulq_f32(vaddq_f32(v81, vmulq_f32(v89, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v89, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v89)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v88)), 0x17uLL)));
    *(int8x16_t *)(v6 + v75) = vbslq_s8(v77, (int8x16_t)v80, (int8x16_t)vmulq_laneq_f32(v90, v90, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_quicktime_halfTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v83 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v14 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
      int8x16_t v19 = *((int8x16_t *)a2 + 17);
      float32x4_t v18 = *((float32x4_t *)a2 + 18);
      float32x4_t v20 = vmulq_f32(vrecpeq_f32(v16), v18);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v18);
      int8x16_t v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
      int8x16_t v23 = *((int8x16_t *)a2 + 3);
      float32x4_t v24 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
      float32x4_t v25 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17))), v23));
      float32x4_t v26 = *((float32x4_t *)a2 + 82);
      int8x16_t v27 = (int8x16_t)vmaxq_f32(v25, v26);
      float32x4_t v28 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v24, (int8x16_t)vmaxq_f32(v24, v26));
      float32x4_t v29 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v25, v27);
      float32x4_t v30 = *((float32x4_t *)a2 + 75);
      float32x4_t v31 = *((float32x4_t *)a2 + 5);
      int32x4_t v33 = *((int32x4_t *)a2 + 33);
      int8x16_t v32 = *((int8x16_t *)a2 + 34);
      float32x4_t v34 = vmulq_f32(v28, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v30, v28), v32, (int8x16_t)v31));
      float32x4_t v35 = vmulq_f32(v29, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v30, v29), v32, (int8x16_t)v31));
      float32x4_t v36 = *((float32x4_t *)a2 + 90);
      float32x4_t v37 = vminq_f32(v34, v36);
      float32x4_t v38 = vminq_f32(v35, v36);
      int8x16_t v39 = *((int8x16_t *)a2 + 19);
      float32x4_t v40 = *((float32x4_t *)a2 + 20);
      float32x4_t v41 = (float32x4_t)vorrq_s8(vandq_s8(v39, (int8x16_t)v37), (int8x16_t)v31);
      int8x16_t v42 = *((int8x16_t *)a2 + 21);
      float32x4_t v43 = *((float32x4_t *)a2 + 22);
      float32x4_t v44 = (float32x4_t)vorrq_s8(vandq_s8(v39, (int8x16_t)v38), (int8x16_t)v31);
      float32x4_t v45 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v38, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v40, v38)));
      float32x4_t v46 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v37, 0x17uLL)), (float32x4_t)vandq_s8(v42, (int8x16_t)vcgtq_f32(v40, v37))), v43);
      float32x4_t v47 = *((float32x4_t *)a2 + 23);
      float32x4_t v48 = *((float32x4_t *)a2 + 24);
      float32x4_t v49 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v41, v47));
      float32x4_t v50 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v44, v47));
      float32x4_t v51 = vaddq_f32(v46, v49);
      float32x4_t v52 = vmulq_f32(v48, v49);
      float32x4_t v53 = vmulq_f32(vmulq_f32(v48, v50), v44);
      float32x4_t v54 = vaddq_f32(vsubq_f32(v45, v43), v50);
      float32x4_t v55 = vsubq_f32(vsubq_f32(v41, v31), vmulq_f32(v52, v41));
      float32x4_t v56 = vsubq_f32(vsubq_f32(v44, v31), v53);
      float32x4_t v57 = *((float32x4_t *)a2 + 25);
      float32x4_t v58 = *((float32x4_t *)a2 + 26);
      float32x4_t v59 = *((float32x4_t *)a2 + 27);
      float32x4_t v60 = *((float32x4_t *)a2 + 28);
      float32x4_t v61 = vaddq_f32(v54, vmulq_f32(v56, vaddq_f32(vaddq_f32(v59, vmulq_f32(v56, v60)), vmulq_f32(vmulq_f32(v56, v56), vaddq_f32(v57, vmulq_f32(v58, v56))))));
      float32x4_t v62 = *((float32x4_t *)a2 + 116);
      float32x4_t v63 = vmulq_f32(v62, vaddq_f32(v51, vmulq_f32(v55, vaddq_f32(vaddq_f32(v59, vmulq_f32(v55, v60)), vmulq_f32(vmulq_f32(v55, v55), vaddq_f32(v57, vmulq_f32(v58, v55)))))));
      float32x4_t v64 = vmulq_f32(v62, v61);
      float32x4_t v65 = *((float32x4_t *)a2 + 29);
      float32x4_t v66 = *((float32x4_t *)a2 + 30);
      float32x4_t v67 = vmaxq_f32(v63, v65);
      float32x4_t v68 = vmaxq_f32(v64, v65);
      float32x4_t v69 = vcvtq_f32_s32(vcvtq_s32_f32(v67));
      float32x4_t v70 = vcvtq_f32_s32(vcvtq_s32_f32(v68));
      float32x4_t v71 = vsubq_f32(v69, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v69, v67)));
      float32x4_t v72 = vsubq_f32(v70, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v70, v68)));
      float32x4_t v73 = vsubq_f32(v67, v71);
      float32x4_t v74 = vsubq_f32(v68, v72);
      float32x4_t v75 = *((float32x4_t *)a2 + 31);
      float32x4_t v76 = *((float32x4_t *)a2 + 32);
      float32x4_t v77 = vaddq_f32(v31, vmulq_f32(v73, vaddq_f32(v76, vmulq_f32(v73, vaddq_f32(v66, vmulq_f32(v75, v73))))));
      float32x4_t v78 = vaddq_f32(v31, vmulq_f32(v74, vaddq_f32(v76, vmulq_f32(v74, vaddq_f32(v66, vmulq_f32(v75, v74))))));
      int8x16_t v79 = *((int8x16_t *)a2 + 36);
      float32x4_t v80 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v24, veorq_s8(vandq_s8(v79, (int8x16_t)v28), (int8x16_t)vmulq_f32(v77, (float32x4_t)vshlq_n_s32(vaddq_s32(v33, vcvtq_s32_f32(v71)), 0x17uLL))));
      float32x4_t v81 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v25, veorq_s8(vandq_s8(v79, (int8x16_t)v29), (int8x16_t)vmulq_f32(v78, (float32x4_t)vshlq_n_s32(vaddq_s32(v33, vcvtq_s32_f32(v72)), 0x17uLL))));
      float32x4_t v82 = (int8x16_t *)(v6 + v11);
      v82[-1] = vbslq_s8(v14, (int8x16_t)v24, (int8x16_t)vmulq_laneq_f32(v80, v80, 3));
      *float32x4_t v82 = vbslq_s8(v14, (int8x16_t)v25, (int8x16_t)vmulq_laneq_f32(v81, v81, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v83 = -v10;
    if (v83 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v84 = 16 * v83;
    float32x4_t v85 = *(float32x4_t *)(v7 + v84);
    int8x16_t v86 = *((int8x16_t *)a2 + 15);
    float32x4_t v87 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v88 = vmulq_f32(vrecpeq_f32(v87), *((float32x4_t *)a2 + 18));
    float32x4_t v89 = vmulq_f32(v85, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v88, vrecpsq_f32(v88, v87))), *((int8x16_t *)a2 + 3)));
    float32x4_t v90 = (float32x4_t)vbslq_s8(v86, (int8x16_t)v89, (int8x16_t)vmaxq_f32(v89, *((float32x4_t *)a2 + 82)));
    float32x4_t v91 = *((float32x4_t *)a2 + 5);
    float32x4_t v92 = vminq_f32(vmulq_f32(v90, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 75), v90), *((int8x16_t *)a2 + 34), (int8x16_t)v91)), *((float32x4_t *)a2 + 90));
    float32x4_t v93 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v92), (int8x16_t)v91);
    float32x4_t v94 = (float32x4_t)vandq_s8((int8x16_t)v91, (int8x16_t)vcgtq_f32(v93, *((float32x4_t *)a2 + 23)));
    float32x4_t v95 = vsubq_f32(vsubq_f32(v93, v91), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v94), v93));
    float32x4_t v96 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 116), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v92, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v92))), *((float32x4_t *)a2 + 22)), v94), vmulq_f32(v95, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v95, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v95, v95), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v95))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v97 = vcvtq_f32_s32(vcvtq_s32_f32(v96));
    float32x4_t v98 = vsubq_f32(v97, (float32x4_t)vandq_s8((int8x16_t)v91, (int8x16_t)vcgtq_f32(v97, v96)));
    float32x4_t v99 = vsubq_f32(v96, v98);
    float32x4_t v100 = (float32x4_t)vbslq_s8(v86, (int8x16_t)v89, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v90), (int8x16_t)vmulq_f32(vaddq_f32(v91, vmulq_f32(v99, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v99, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v99)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v98)), 0x17uLL))));
    *(int8x16_t *)(v6 + v84) = vbslq_s8(v86, (int8x16_t)v89, (int8x16_t)vmulq_laneq_f32(v100, v100, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_quicktime_niceTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v97 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      int8x16_t v14 = *((int8x16_t *)a2 + 15);
      float32x4_t v15 = *((float32x4_t *)a2 + 16);
      float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
      float32x4_t v18 = vrecpeq_f32(v16);
      float32x4_t v19 = vrecpeq_f32(v17);
      float32x4_t v20 = vmulq_f32(v18, vrecpsq_f32(v18, v16));
      float32x4_t v21 = vmulq_f32(v19, vrecpsq_f32(v19, v17));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16));
      int8x16_t v23 = *((int8x16_t *)a2 + 17);
      int8x16_t v24 = vandq_s8(v23, v22);
      int8x16_t v25 = vandq_s8(v23, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      int8x16_t v26 = *((int8x16_t *)a2 + 3);
      float32x4_t v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v24, v26));
      float32x4_t v28 = vmulq_f32(v13, (float32x4_t)vorrq_s8(v25, v26));
      float32x4_t v29 = *((float32x4_t *)a2 + 82);
      int8x16_t v30 = (int8x16_t)vmaxq_f32(v28, v29);
      float32x4_t v31 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmaxq_f32(v27, v29));
      float32x4_t v32 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v28, v30);
      float32x4_t v33 = *((float32x4_t *)a2 + 75);
      float32x4_t v34 = *((float32x4_t *)a2 + 5);
      int32x4_t v36 = *((int32x4_t *)a2 + 33);
      int8x16_t v35 = *((int8x16_t *)a2 + 34);
      float32x4_t v37 = *((float32x4_t *)a2 + 90);
      int8x16_t v38 = (int8x16_t)vminq_f32(vmulq_f32(v31, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v33, v31), v35, (int8x16_t)v34)), v37);
      int8x16_t v39 = (int8x16_t)vminq_f32(vmulq_f32(v32, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v33, v32), v35, (int8x16_t)v34)), v37);
      float32x4_t v40 = *((float32x4_t *)a2 + 116);
      int8x16_t v41 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vceqq_f32(v40, v33)), v33);
      float32x4_t v42 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v34, v38);
      float32x4_t v43 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v34, v39);
      int8x16_t v44 = *((int8x16_t *)a2 + 19);
      float32x4_t v45 = *((float32x4_t *)a2 + 20);
      float32x4_t v46 = (float32x4_t)vorrq_s8(vandq_s8(v44, (int8x16_t)v42), (int8x16_t)v34);
      float32x4_t v47 = (float32x4_t)vorrq_s8(vandq_s8(v44, (int8x16_t)v43), (int8x16_t)v34);
      int8x16_t v48 = *((int8x16_t *)a2 + 21);
      float32x4_t v49 = *((float32x4_t *)a2 + 22);
      float32x4_t v50 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v43, 0x17uLL)), (float32x4_t)vandq_s8(v48, (int8x16_t)vcgtq_f32(v45, v43)));
      float32x4_t v51 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v42, 0x17uLL)), (float32x4_t)vandq_s8(v48, (int8x16_t)vcgtq_f32(v45, v42))), v49);
      float32x4_t v52 = *((float32x4_t *)a2 + 23);
      float32x4_t v53 = *((float32x4_t *)a2 + 24);
      float32x4_t v54 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v46, v52));
      float32x4_t v55 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v47, v52));
      float32x4_t v56 = vaddq_f32(v51, v54);
      float32x4_t v57 = vaddq_f32(vsubq_f32(v50, v49), v55);
      float32x4_t v58 = vsubq_f32(vsubq_f32(v46, v34), vmulq_f32(vmulq_f32(v53, v54), v46));
      float32x4_t v59 = vsubq_f32(vsubq_f32(v47, v34), vmulq_f32(vmulq_f32(v53, v55), v47));
      float32x4_t v60 = *((float32x4_t *)a2 + 38);
      float32x4_t v61 = *((float32x4_t *)a2 + 39);
      int8x16_t v63 = *((int8x16_t *)a2 + 36);
      float32x4_t v62 = *((float32x4_t *)a2 + 37);
      float32x4_t v64 = vaddq_f32(v62, vmulq_f32(v60, v58));
      float32x4_t v65 = *((float32x4_t *)a2 + 40);
      float32x4_t v66 = *((float32x4_t *)a2 + 41);
      float32x4_t v67 = vaddq_f32(v61, vmulq_f32(v65, v58));
      float32x4_t v68 = vaddq_f32(v61, vmulq_f32(v65, v59));
      float32x4_t v69 = *((float32x4_t *)a2 + 42);
      float32x4_t v70 = *((float32x4_t *)a2 + 43);
      float32x4_t v71 = vaddq_f32(v62, vmulq_f32(v60, v59));
      float32x4_t v72 = vaddq_f32(v66, vmulq_f32(v69, v58));
      float32x4_t v73 = vaddq_f32(v66, vmulq_f32(v69, v59));
      float32x4_t v74 = vmulq_f32(v58, v58);
      float32x4_t v75 = vaddq_f32(v64, vmulq_f32(v74, v67));
      float32x4_t v76 = vmulq_f32(v59, v59);
      float32x4_t v77 = vaddq_f32(v57, vmulq_f32(v59, vaddq_f32(v70, vmulq_f32(v59, vaddq_f32(v73, vmulq_f32(v76, vaddq_f32(v71, vmulq_f32(v76, v68))))))));
      float32x4_t v78 = *((float32x4_t *)a2 + 29);
      float32x4_t v79 = vmaxq_f32(vmulq_f32(v40, vaddq_f32(v56, vmulq_f32(v58, vaddq_f32(v70, vmulq_f32(v58, vaddq_f32(v72, vmulq_f32(v74, v75))))))), v78);
      float32x4_t v80 = vmaxq_f32(vmulq_f32(v40, v77), v78);
      float32x4_t v81 = vcvtq_f32_s32(vcvtq_s32_f32(v79));
      float32x4_t v82 = vcvtq_f32_s32(vcvtq_s32_f32(v80));
      float32x4_t v83 = vsubq_f32(v81, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v81, v79)));
      float32x4_t v84 = vsubq_f32(v82, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v82, v80)));
      float32x4_t v85 = vsubq_f32(v79, v83);
      float32x4_t v86 = vsubq_f32(v80, v84);
      float32x4_t v87 = *((float32x4_t *)a2 + 44);
      float32x4_t v88 = *((float32x4_t *)a2 + 45);
      float32x4_t v89 = vaddq_f32(v87, vmulq_f32(v88, v85));
      float32x4_t v90 = *((float32x4_t *)a2 + 46);
      float32x4_t v91 = *((float32x4_t *)a2 + 47);
      float32x4_t v92 = vaddq_f32(v87, vmulq_f32(v88, v86));
      float32x4_t v93 = *((float32x4_t *)a2 + 48);
      float32x4_t v94 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v27, veorq_s8(vandq_s8(v63, (int8x16_t)v31), (int8x16_t)vmulq_f32(vaddq_f32(v34, vmulq_f32(v85, vaddq_f32(v93, vmulq_f32(v85, vaddq_f32(vaddq_f32(v90, vmulq_f32(v85, v91)), vmulq_f32(vmulq_f32(v85, v85), v89)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v36, vcvtq_s32_f32(v83)), 0x17uLL))));
      float32x4_t v95 = (float32x4_t)vbslq_s8(v14, (int8x16_t)v28, veorq_s8(vandq_s8(v63, (int8x16_t)v32), (int8x16_t)vmulq_f32(vaddq_f32(v34, vmulq_f32(v86, vaddq_f32(v93, vmulq_f32(v86, vaddq_f32(vaddq_f32(v90, vmulq_f32(v91, v86)), vmulq_f32(vmulq_f32(v86, v86), v92)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v36, vcvtq_s32_f32(v84)), 0x17uLL))));
      float32x4_t v96 = (int8x16_t *)(v6 + v11);
      v96[-1] = vbslq_s8(v14, (int8x16_t)v27, (int8x16_t)vmulq_laneq_f32(v94, v94, 3));
      *float32x4_t v96 = vbslq_s8(v14, (int8x16_t)v28, (int8x16_t)vmulq_laneq_f32(v95, v95, 3));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v97 = -v10;
    if (v97 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v98 = 16 * v97;
    float32x4_t v99 = *(float32x4_t *)(v7 + v98);
    int8x16_t v100 = *((int8x16_t *)a2 + 15);
    float32x4_t v101 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 3), *((float32x4_t *)a2 + 16));
    float32x4_t v102 = vrecpeq_f32(v101);
    float32x4_t v103 = vmulq_f32(v102, vrecpsq_f32(v102, v101));
    float32x4_t v104 = vmulq_f32(v99, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 17), (int8x16_t)vmulq_f32(v103, vrecpsq_f32(v103, v101))), *((int8x16_t *)a2 + 3)));
    float32x4_t v105 = (float32x4_t)vbslq_s8(v100, (int8x16_t)v104, (int8x16_t)vmaxq_f32(v104, *((float32x4_t *)a2 + 82)));
    float32x4_t v106 = *((float32x4_t *)a2 + 5);
    float32x4_t v107 = *((float32x4_t *)a2 + 116);
    float32x4_t v108 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v106, (int8x16_t)vceqq_f32(v107, *((float32x4_t *)a2 + 75))), *((float32x4_t *)a2 + 75)), (int8x16_t)v106, (int8x16_t)vminq_f32(vmulq_f32(v105, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 75), v105), *((int8x16_t *)a2 + 34), (int8x16_t)v106)), *((float32x4_t *)a2 + 90)));
    float32x4_t v109 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v108), (int8x16_t)v106);
    float32x4_t v110 = (float32x4_t)vandq_s8((int8x16_t)v106, (int8x16_t)vcgtq_f32(v109, *((float32x4_t *)a2 + 23)));
    float32x4_t v111 = vsubq_f32(vsubq_f32(v109, v106), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v110), v109));
    float32x4_t v112 = vmulq_f32(v111, v111);
    float32x4_t v113 = vmaxq_f32(vmulq_f32(v107, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v108, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v108))), *((float32x4_t *)a2 + 22)), v110), vmulq_f32(v111, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v111, vaddq_f32(
                         vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v111)),
                         vmulq_f32(v112, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v111)), vmulq_f32(v112, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v111))))))))))), *((float32x4_t *)a2 + 29));
    float32x4_t v114 = vcvtq_f32_s32(vcvtq_s32_f32(v113));
    float32x4_t v115 = vsubq_f32(v114, (float32x4_t)vandq_s8((int8x16_t)v106, (int8x16_t)vcgtq_f32(v114, v113)));
    float32x4_t v116 = vsubq_f32(v113, v115);
    float32x4_t v117 = (float32x4_t)vbslq_s8(v100, (int8x16_t)v104, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v105), (int8x16_t)vmulq_f32(vaddq_f32(v106, vmulq_f32(v116, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v116, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v116)), vmulq_f32(vmulq_f32(v116, v116),
                                                     vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v116)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v115)), 0x17uLL))));
    *(int8x16_t *)(v6 + v98) = vbslq_s8(v100, (int8x16_t)v104, (int8x16_t)vmulq_laneq_f32(v117, v117, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype0_fast_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 6);
    while (v5 < 4)
    {
      LODWORD(v71) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v7 += v8;
      v6 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 32;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 32);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v11);
      float32x4_t v15 = *(float32x4_t *)(v7 + v11 + 16);
      float32x4_t v16 = *((float32x4_t *)a2 + 3);
      float32x4_t v17 = *((float32x4_t *)a2 + 5);
      float32x4_t v18 = *((float32x4_t *)a2 + 6);
      float32x4_t v19 = vmulq_f32(v18, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v12, v16), v17)));
      float32x4_t v20 = vmulq_f32(v18, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v13, v16), v17)));
      float32x4_t v21 = vmulq_f32(v18, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v14, v16), v17)));
      float32x4_t v22 = vmulq_f32(v18, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v15, v16), v17)));
      float32x4_t v23 = vcvtq_f32_s32(vcvtq_s32_f32(v19));
      float32x4_t v24 = vcvtq_f32_s32(vcvtq_s32_f32(v20));
      float32x4_t v25 = vcvtq_f32_s32(vcvtq_s32_f32(v21));
      float32x4_t v26 = vcvtq_f32_s32(vcvtq_s32_f32(v22));
      float32x4_t v27 = *((float32x4_t *)a2 + 7);
      float32x4_t v28 = *((float32x4_t *)a2 + 8);
      float32x4_t v29 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v19, v23), v27));
      float32x4_t v30 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v20, v24), v27));
      float32x4_t v31 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v21, v25), v27));
      float32x4_t v32 = vrsqrteq_f32(vaddq_f32(v27, vsubq_f32(v22, v26)));
      float32x4_t v33 = vaddq_f32(v28, v23);
      float32x4_t v34 = vaddq_f32(v28, v24);
      float32x4_t v35 = vaddq_f32(v28, v25);
      float32x4_t v36 = vaddq_f32(v28, v26);
      float32x4_t v37 = *((float32x4_t *)a2 + 9);
      float32x4_t v38 = *((float32x4_t *)a2 + 10);
      float32x4_t v39 = vmulq_n_f32(vsubq_f32(v33, vmulq_f32(v29, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v40 = vmulq_n_f32(vsubq_f32(v34, vmulq_f32(v30, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v41 = vmulq_n_f32(vsubq_f32(v35, vmulq_f32(v31, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v42 = vmulq_n_f32(vsubq_f32(v36, vmulq_f32(v32, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v43 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
      float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v40));
      float32x4_t v45 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
      float32x4_t v46 = vcvtq_f32_s32(vcvtq_s32_f32(v42));
      float32x4_t v47 = vsubq_f32(v43, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v43, v39)));
      float32x4_t v48 = vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v44, v40)));
      float32x4_t v49 = vsubq_f32(v45, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v45, v41)));
      float32x4_t v50 = vsubq_f32(v46, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v46, v42)));
      float32x4_t v51 = *((float32x4_t *)a2 + 11);
      float32x4_t v52 = *((float32x4_t *)a2 + 12);
      float32x4_t v53 = vmulq_f32(vrecpeq_f32(vsubq_f32(v51, vsubq_f32(v39, v47))), v52);
      float32x4_t v54 = vmulq_f32(vrecpeq_f32(vsubq_f32(v51, vsubq_f32(v40, v48))), v52);
      float32x4_t v55 = vmulq_f32(vrecpeq_f32(vsubq_f32(v51, vsubq_f32(v41, v49))), v52);
      float32x4_t v56 = vmulq_f32(vrecpeq_f32(vsubq_f32(v51, vsubq_f32(v42, v50))), v52);
      float32x4_t v57 = vmaxq_f32(vaddq_f32(vaddq_f32(v47, v38), vmulq_f32(v53, v53)), v16);
      float32x4_t v58 = vmaxq_f32(vaddq_f32(vaddq_f32(v38, v48), vmulq_f32(v54, v54)), v16);
      float32x4_t v59 = vmaxq_f32(vaddq_f32(vaddq_f32(v38, v49), vmulq_f32(v55, v55)), v16);
      float32x4_t v60 = vmaxq_f32(vaddq_f32(vaddq_f32(v38, v50), vmulq_f32(v56, v56)), v16);
      float32x4_t v61 = *((float32x4_t *)a2 + 13);
      float32x4_t v62 = *((float32x4_t *)a2 + 14);
      float32x4_t v63 = vminq_f32(v58, v61);
      float32x4_t v64 = vminq_f32(v59, v61);
      float32x4_t v65 = vminq_f32(v60, v61);
      float32x4_t v66 = vmulq_f32(vminq_f32(v57, v61), v62);
      float32x4_t v67 = vmulq_f32(v63, v62);
      int8x16_t v68 = (int8x16_t)vcvtq_s32_f32(vmulq_f32(v64, v62));
      int8x16_t v69 = *((int8x16_t *)a2 + 15);
      float32x4_t v70 = (int8x16_t *)(v6 + v11);
      v70[-2] = vbslq_s8(v69, (int8x16_t)v12, (int8x16_t)vcvtq_s32_f32(v66));
      v70[-1] = vbslq_s8(v69, (int8x16_t)v13, (int8x16_t)vcvtq_s32_f32(v67));
      *float32x4_t v70 = vbslq_s8(v69, (int8x16_t)v14, v68);
      v70[1] = vbslq_s8(v69, (int8x16_t)v15, (int8x16_t)vcvtq_s32_f32(vmulq_f32(v65, v62)));
      v10 -= 4;
      v11 += 64;
    }
    while (v5 + v10 > 3);
    LODWORD(v71) = -v10;
    if ((int)v71 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v71 = v71;
    do
    {
      float32x4_t v72 = *(float32x4_t *)(v7 + 16 * v71);
      float32x4_t v73 = *((float32x4_t *)a2 + 3);
      float32x4_t v74 = *((float32x4_t *)a2 + 5);
      float32x4_t v75 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v72, v73), v74)));
      float32x4_t v76 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
      float32x4_t v77 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v76), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v75, v76))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v77));
      float32x4_t v79 = vsubq_f32(v78, (float32x4_t)vandq_s8((int8x16_t)v74, (int8x16_t)vcgtq_f32(v78, v77)));
      float32x4_t v80 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v77, v79))), *((float32x4_t *)a2 + 12));
      *(int8x16_t *)(v6 + 16 * v71++) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v72, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v79), vmulq_f32(v80, v80)), v73), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))));
    }
    while (v71 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype0_fixed_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 6);
    while (v5 < 4)
    {
      LODWORD(v71) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v7 += v8;
      v6 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 32;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 32);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v11);
      float32x4_t v15 = *(float32x4_t *)(v7 + v11 + 16);
      float32x4_t v16 = *((float32x4_t *)a2 + 3);
      float32x4_t v17 = *((float32x4_t *)a2 + 5);
      float32x4_t v18 = *((float32x4_t *)a2 + 6);
      float32x4_t v19 = vmulq_f32(v18, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v12, v16), v17)));
      float32x4_t v20 = vmulq_f32(v18, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v13, v16), v17)));
      float32x4_t v21 = vmulq_f32(v18, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v14, v16), v17)));
      float32x4_t v22 = vmulq_f32(v18, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v15, v16), v17)));
      float32x4_t v23 = vcvtq_f32_s32(vcvtq_s32_f32(v19));
      float32x4_t v24 = vcvtq_f32_s32(vcvtq_s32_f32(v20));
      float32x4_t v25 = vcvtq_f32_s32(vcvtq_s32_f32(v21));
      float32x4_t v26 = vcvtq_f32_s32(vcvtq_s32_f32(v22));
      float32x4_t v27 = *((float32x4_t *)a2 + 7);
      float32x4_t v28 = *((float32x4_t *)a2 + 8);
      float32x4_t v29 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v19, v23), v27));
      float32x4_t v30 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v20, v24), v27));
      float32x4_t v31 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v21, v25), v27));
      float32x4_t v32 = vrsqrteq_f32(vaddq_f32(v27, vsubq_f32(v22, v26)));
      float32x4_t v33 = vaddq_f32(v28, v23);
      float32x4_t v34 = vaddq_f32(v28, v24);
      float32x4_t v35 = vaddq_f32(v28, v25);
      float32x4_t v36 = vaddq_f32(v28, v26);
      float32x4_t v37 = *((float32x4_t *)a2 + 9);
      float32x4_t v38 = *((float32x4_t *)a2 + 10);
      float32x4_t v39 = vmulq_n_f32(vsubq_f32(v33, vmulq_f32(v29, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v40 = vmulq_n_f32(vsubq_f32(v34, vmulq_f32(v30, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v41 = vmulq_n_f32(vsubq_f32(v35, vmulq_f32(v31, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v42 = vmulq_n_f32(vsubq_f32(v36, vmulq_f32(v32, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v43 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
      float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v40));
      float32x4_t v45 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
      float32x4_t v46 = vcvtq_f32_s32(vcvtq_s32_f32(v42));
      float32x4_t v47 = vsubq_f32(v43, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v43, v39)));
      float32x4_t v48 = vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v44, v40)));
      float32x4_t v49 = vsubq_f32(v45, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v45, v41)));
      float32x4_t v50 = vsubq_f32(v46, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v46, v42)));
      float32x4_t v51 = *((float32x4_t *)a2 + 11);
      float32x4_t v52 = *((float32x4_t *)a2 + 12);
      float32x4_t v53 = vmulq_f32(vrecpeq_f32(vsubq_f32(v51, vsubq_f32(v39, v47))), v52);
      float32x4_t v54 = vmulq_f32(vrecpeq_f32(vsubq_f32(v51, vsubq_f32(v40, v48))), v52);
      float32x4_t v55 = vmulq_f32(vrecpeq_f32(vsubq_f32(v51, vsubq_f32(v41, v49))), v52);
      float32x4_t v56 = vmulq_f32(vrecpeq_f32(vsubq_f32(v51, vsubq_f32(v42, v50))), v52);
      float32x4_t v57 = vmaxq_f32(vaddq_f32(vaddq_f32(v47, v38), vmulq_f32(v53, v53)), v16);
      float32x4_t v58 = vmaxq_f32(vaddq_f32(vaddq_f32(v38, v48), vmulq_f32(v54, v54)), v16);
      float32x4_t v59 = vmaxq_f32(vaddq_f32(vaddq_f32(v38, v49), vmulq_f32(v55, v55)), v16);
      float32x4_t v60 = vmaxq_f32(vaddq_f32(vaddq_f32(v38, v50), vmulq_f32(v56, v56)), v16);
      float32x4_t v61 = *((float32x4_t *)a2 + 13);
      float32x4_t v62 = *((float32x4_t *)a2 + 14);
      float32x4_t v63 = vminq_f32(v58, v61);
      float32x4_t v64 = vminq_f32(v59, v61);
      float32x4_t v65 = vminq_f32(v60, v61);
      float32x4_t v66 = vmulq_f32(vminq_f32(v57, v61), v62);
      float32x4_t v67 = vmulq_f32(v63, v62);
      int8x16_t v68 = (int8x16_t)vcvtq_s32_f32(vmulq_f32(v64, v62));
      int8x16_t v69 = *((int8x16_t *)a2 + 15);
      float32x4_t v70 = (int8x16_t *)(v6 + v11);
      v70[-2] = vbslq_s8(v69, (int8x16_t)v12, (int8x16_t)vcvtq_s32_f32(v66));
      v70[-1] = vbslq_s8(v69, (int8x16_t)v13, (int8x16_t)vcvtq_s32_f32(v67));
      *float32x4_t v70 = vbslq_s8(v69, (int8x16_t)v14, v68);
      v70[1] = vbslq_s8(v69, (int8x16_t)v15, (int8x16_t)vcvtq_s32_f32(vmulq_f32(v65, v62)));
      v10 -= 4;
      v11 += 64;
    }
    while (v5 + v10 > 3);
    LODWORD(v71) = -v10;
    if ((int)v71 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v71 = v71;
    do
    {
      float32x4_t v72 = *(float32x4_t *)(v7 + 16 * v71);
      float32x4_t v73 = *((float32x4_t *)a2 + 3);
      float32x4_t v74 = *((float32x4_t *)a2 + 5);
      float32x4_t v75 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v72, v73), v74)));
      float32x4_t v76 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
      float32x4_t v77 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v76), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v75, v76))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v77));
      float32x4_t v79 = vsubq_f32(v78, (float32x4_t)vandq_s8((int8x16_t)v74, (int8x16_t)vcgtq_f32(v78, v77)));
      float32x4_t v80 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v77, v79))), *((float32x4_t *)a2 + 12));
      *(int8x16_t *)(v6 + 16 * v71++) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v72, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v79), vmulq_f32(v80, v80)), v73), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))));
    }
    while (v71 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype0_nice_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v80 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 3);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      int8x16_t v17 = (int8x16_t)vaddq_f32(vminq_f32(vmaxq_f32(v13, v14), v15), v16);
      int8x16_t v18 = (int8x16_t)vaddq_f32(vminq_f32(vmaxq_f32(v12, v14), v15), v16);
      int8x16_t v19 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v14)), v14);
      float32x4_t v20 = (float32x4_t)vbslq_s8(v19, (int8x16_t)v15, v17);
      float32x4_t v21 = (float32x4_t)vbslq_s8(v19, (int8x16_t)v15, v18);
      int8x16_t v22 = *((int8x16_t *)a2 + 19);
      float32x4_t v23 = *((float32x4_t *)a2 + 20);
      float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v20), (int8x16_t)v15);
      float32x4_t v25 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v21), (int8x16_t)v15);
      int8x16_t v26 = *((int8x16_t *)a2 + 21);
      float32x4_t v27 = *((float32x4_t *)a2 + 22);
      float32x4_t v28 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v21, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v23, v21)));
      float32x4_t v29 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v23, v20))), v27);
      float32x4_t v30 = *((float32x4_t *)a2 + 23);
      float32x4_t v31 = *((float32x4_t *)a2 + 24);
      float32x4_t v32 = vsubq_f32(v28, v27);
      float32x4_t v33 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v24, v30));
      float32x4_t v34 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v25, v30));
      float32x4_t v35 = vaddq_f32(v29, v33);
      float32x4_t v36 = vsubq_f32(vsubq_f32(v24, v15), vmulq_f32(vmulq_f32(v31, v33), v24));
      float32x4_t v37 = vsubq_f32(vsubq_f32(v25, v15), vmulq_f32(vmulq_f32(v31, v34), v25));
      float32x4_t v38 = vmulq_f32(v36, v36);
      float32x4_t v39 = *((float32x4_t *)a2 + 37);
      float32x4_t v40 = *((float32x4_t *)a2 + 38);
      float32x4_t v41 = *((float32x4_t *)a2 + 39);
      float32x4_t v42 = *((float32x4_t *)a2 + 40);
      float32x4_t v43 = vaddq_f32(v39, vmulq_f32(v40, v36));
      float32x4_t v44 = vaddq_f32(v41, vmulq_f32(v42, v36));
      float32x4_t v45 = vaddq_f32(v41, vmulq_f32(v42, v37));
      float32x4_t v46 = vaddq_f32(v39, vmulq_f32(v40, v37));
      float32x4_t v47 = *((float32x4_t *)a2 + 41);
      float32x4_t v48 = *((float32x4_t *)a2 + 42);
      float32x4_t v49 = vaddq_f32(v47, vmulq_f32(v48, v36));
      float32x4_t v50 = vaddq_f32(v47, vmulq_f32(v48, v37));
      float32x4_t v51 = vmulq_f32(v37, v37);
      float32x4_t v52 = vaddq_f32(v32, v34);
      float32x4_t v53 = vaddq_f32(v49, vmulq_f32(v38, vaddq_f32(v43, vmulq_f32(v38, v44))));
      float32x4_t v54 = vaddq_f32(v50, vmulq_f32(v51, vaddq_f32(v46, vmulq_f32(v51, v45))));
      float32x4_t v55 = *((float32x4_t *)a2 + 43);
      float32x4_t v56 = *((float32x4_t *)a2 + 44);
      float32x4_t v57 = vaddq_f32(v52, vmulq_f32(v37, vaddq_f32(v55, vmulq_f32(v37, v54))));
      float32x4_t v58 = vmulq_n_f32(vaddq_f32(v35, vmulq_f32(v36, vaddq_f32(v55, vmulq_f32(v36, v53)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v59 = *((float32x4_t *)a2 + 29);
      float32x4_t v60 = vmaxq_f32(v58, v59);
      float32x4_t v61 = vmaxq_f32(vmulq_n_f32(v57, COERCE_FLOAT(*(_OWORD *)a2)), v59);
      float32x4_t v62 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
      float32x4_t v63 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
      float32x4_t v64 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v62, v60)));
      float32x4_t v65 = vsubq_f32(v63, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v63, v61)));
      float32x4_t v66 = vsubq_f32(v60, v64);
      float32x4_t v67 = vsubq_f32(v61, v65);
      float32x4_t v68 = *((float32x4_t *)a2 + 45);
      float32x4_t v69 = *((float32x4_t *)a2 + 46);
      float32x4_t v70 = *((float32x4_t *)a2 + 47);
      float32x4_t v71 = *((float32x4_t *)a2 + 48);
      int32x4_t v72 = *((int32x4_t *)a2 + 33);
      float32x4_t v73 = vmulq_f32(vaddq_f32(v15, vmulq_f32(v66, vaddq_f32(v71, vmulq_f32(v66, vaddq_f32(vaddq_f32(v69, vmulq_f32(v66, v70)), vmulq_f32(vmulq_f32(v66, v66), vaddq_f32(v56, vmulq_f32(v68, v66)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v72, vcvtq_s32_f32(v64)), 0x17uLL));
      float32x4_t v74 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2);
      float32x4_t v75 = vaddq_f32(v74, vmulq_laneq_f32(vmulq_f32(vaddq_f32(v15, vmulq_f32(v67, vaddq_f32(v71, vmulq_f32(v67, vaddq_f32(vaddq_f32(v69, vmulq_f32(v70, v67)), vmulq_f32(vmulq_f32(v67, v67), vaddq_f32(v56, vmulq_f32(v68, v67)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v72, vcvtq_s32_f32(v65)), 0x17uLL)), *(float32x4_t *)a2, 3));
      int8x16_t v76 = (int8x16_t)vminq_f32(vaddq_f32(v74, vmulq_laneq_f32(v73, *(float32x4_t *)a2, 3)), v15);
      int8x16_t v77 = (int8x16_t)vminq_f32(v75, v15);
      int8x16_t v78 = *((int8x16_t *)a2 + 15);
      float32x4_t v79 = (int8x16_t *)(v6 + v11);
      v79[-1] = vbslq_s8(v78, (int8x16_t)v13, v76);
      *float32x4_t v79 = vbslq_s8(v78, (int8x16_t)v12, v77);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v80 = -v10;
    if (v80 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v81 = 16 * v80;
    float32x4_t v82 = *(float32x4_t *)(v7 + v81);
    float32x4_t v83 = *((float32x4_t *)a2 + 5);
    float32x4_t v84 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v83, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), *((float32x4_t *)a2 + 3))), *((float32x4_t *)a2 + 3)), (int8x16_t)v83, (int8x16_t)vaddq_f32(vminq_f32(vmaxq_f32(v82, *((float32x4_t *)a2 + 3)), v83), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
    float32x4_t v85 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v84), (int8x16_t)v83);
    float32x4_t v86 = (float32x4_t)vandq_s8((int8x16_t)v83, (int8x16_t)vcgtq_f32(v85, *((float32x4_t *)a2 + 23)));
    float32x4_t v87 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v84, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v84))), *((float32x4_t *)a2 + 22)), v86);
    float32x4_t v88 = vsubq_f32(vsubq_f32(v85, v83), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v86), v85));
    float32x4_t v89 = vmulq_f32(v88, v88);
    float32x4_t v90 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v87, vmulq_f32(v88, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v88, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v88)), vmulq_f32(v89, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v88)), vmulq_f32(v89, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v88)))))))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v91 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
    float32x4_t v92 = vsubq_f32(v91, (float32x4_t)vandq_s8((int8x16_t)v83, (int8x16_t)vcgtq_f32(v91, v90)));
    float32x4_t v93 = vsubq_f32(v90, v92);
    *(int8x16_t *)(v6 + v81) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v82, (int8x16_t)vminq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2), vmulq_laneq_f32(vmulq_f32(vaddq_f32(v83, vmulq_f32(v93, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v93, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v93)),
                                                              vmulq_f32(vmulq_f32(v93, v93), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v93)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v92)), 0x17uLL)), *(float32x4_t *)a2, 3)), v83));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype0_half_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v59 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 3);
      float32x4_t v15 = vmaxq_f32(v13, v14);
      float32x4_t v16 = vmaxq_f32(v12, v14);
      float32x4_t v17 = *((float32x4_t *)a2 + 5);
      float32x4_t v18 = vminq_f32(v15, v17);
      float32x4_t v19 = vminq_f32(v16, v17);
      int8x16_t v20 = *((int8x16_t *)a2 + 19);
      float32x4_t v21 = *((float32x4_t *)a2 + 20);
      float32x4_t v22 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v18), (int8x16_t)v17);
      float32x4_t v23 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v19), (int8x16_t)v17);
      int8x16_t v24 = *((int8x16_t *)a2 + 21);
      float32x4_t v25 = *((float32x4_t *)a2 + 22);
      float32x4_t v26 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v18, 0x17uLL)), (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v21, v18)));
      float32x4_t v27 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v19, 0x17uLL)), (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v21, v19)));
      float32x4_t v28 = *((float32x4_t *)a2 + 23);
      float32x4_t v29 = *((float32x4_t *)a2 + 24);
      float32x4_t v30 = (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v22, v28));
      float32x4_t v31 = (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v23, v28));
      float32x4_t v32 = vaddq_f32(vsubq_f32(v26, v25), v30);
      float32x4_t v33 = vsubq_f32(vsubq_f32(v22, v17), vmulq_f32(vmulq_f32(v29, v30), v22));
      float32x4_t v34 = vsubq_f32(vsubq_f32(v23, v17), vmulq_f32(vmulq_f32(v29, v31), v23));
      float32x4_t v35 = *((float32x4_t *)a2 + 25);
      float32x4_t v36 = *((float32x4_t *)a2 + 26);
      float32x4_t v37 = *((float32x4_t *)a2 + 27);
      float32x4_t v38 = *((float32x4_t *)a2 + 28);
      float32x4_t v39 = vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(v27, v25), v31), vmulq_f32(v34, vaddq_f32(vaddq_f32(v37, vmulq_f32(v34, v38)), vmulq_f32(vmulq_f32(v34, v34), vaddq_f32(v35, vmulq_f32(v36, v34)))))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v41 = *((float32x4_t *)a2 + 29);
      float32x4_t v40 = *((float32x4_t *)a2 + 30);
      float32x4_t v42 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v32, vmulq_f32(v33, vaddq_f32(vaddq_f32(v37, vmulq_f32(v33, v38)), vmulq_f32(vmulq_f32(v33, v33), vaddq_f32(v35, vmulq_f32(v36, v33)))))), COERCE_FLOAT(*(_OWORD *)a2)), v41);
      float32x4_t v43 = vmaxq_f32(v39, v41);
      float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v42));
      float32x4_t v45 = vcvtq_f32_s32(vcvtq_s32_f32(v43));
      float32x4_t v46 = vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v44, v42)));
      float32x4_t v47 = vsubq_f32(v45, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v45, v43)));
      float32x4_t v48 = vsubq_f32(v42, v46);
      float32x4_t v49 = vsubq_f32(v43, v47);
      float32x4_t v50 = *((float32x4_t *)a2 + 31);
      float32x4_t v51 = *((float32x4_t *)a2 + 32);
      float32x4_t v52 = vmulq_f32(v49, vaddq_f32(v51, vmulq_f32(v49, vaddq_f32(v40, vmulq_f32(v50, v49)))));
      float32x4_t v53 = vaddq_f32(v17, vmulq_f32(v48, vaddq_f32(v51, vmulq_f32(v48, vaddq_f32(v40, vmulq_f32(v50, v48))))));
      int32x4_t v54 = vcvtq_s32_f32(v46);
      int32x4_t v55 = *((int32x4_t *)a2 + 33);
      int8x16_t v56 = (int8x16_t)vmulq_f32(vaddq_f32(v17, v52), (float32x4_t)vshlq_n_s32(vaddq_s32(v55, vcvtq_s32_f32(v47)), 0x17uLL));
      int8x16_t v57 = *((int8x16_t *)a2 + 15);
      float32x4_t v58 = (int8x16_t *)(v6 + v11);
      v58[-1] = vbslq_s8(v57, (int8x16_t)v13, (int8x16_t)vmulq_f32(v53, (float32x4_t)vshlq_n_s32(vaddq_s32(v55, v54), 0x17uLL)));
      *float32x4_t v58 = vbslq_s8(v57, (int8x16_t)v12, v56);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v59 = -v10;
    if (v59 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v60 = 16 * v59;
    float32x4_t v61 = *(float32x4_t *)(v7 + v60);
    float32x4_t v62 = *((float32x4_t *)a2 + 5);
    float32x4_t v63 = vminq_f32(vmaxq_f32(v61, *((float32x4_t *)a2 + 3)), v62);
    float32x4_t v64 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v63), (int8x16_t)v62);
    float32x4_t v65 = (float32x4_t)vandq_s8((int8x16_t)v62, (int8x16_t)vcgtq_f32(v64, *((float32x4_t *)a2 + 23)));
    float32x4_t v66 = vsubq_f32(vsubq_f32(v64, v62), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v65), v64));
    float32x4_t v67 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v63, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v63))), *((float32x4_t *)a2 + 22)), v65), vmulq_f32(v66, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v66, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v66, v66), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v66)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v68 = vcvtq_f32_s32(vcvtq_s32_f32(v67));
    float32x4_t v69 = vsubq_f32(v68, (float32x4_t)vandq_s8((int8x16_t)v62, (int8x16_t)vcgtq_f32(v68, v67)));
    float32x4_t v70 = vsubq_f32(v67, v69);
    *(int8x16_t *)(v6 + v60) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v61, (int8x16_t)vmulq_f32(vaddq_f32(v62, vmulq_f32(v70, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v70, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v70)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v69)), 0x17uLL)));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype0_half_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v65 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 3);
      int8x16_t v15 = (int8x16_t)vcgtq_f32(v14, v12);
      int8x16_t v16 = (int8x16_t)vcgtq_f32(v14, v13);
      float32x4_t v17 = *((float32x4_t *)a2 + 5);
      int32x4_t v19 = *((int32x4_t *)a2 + 33);
      int8x16_t v18 = *((int8x16_t *)a2 + 34);
      float32x4_t v20 = vmulq_f32(v12, (float32x4_t)vbslq_s8(v15, v18, (int8x16_t)v17));
      float32x4_t v21 = vmulq_f32(v13, (float32x4_t)vbslq_s8(v16, v18, (int8x16_t)v17));
      float32x4_t v22 = *((float32x4_t *)a2 + 35);
      int8x16_t v23 = *((int8x16_t *)a2 + 36);
      float32x4_t v24 = vminq_f32(v20, v22);
      float32x4_t v25 = vminq_f32(v21, v22);
      int8x16_t v26 = *((int8x16_t *)a2 + 19);
      float32x4_t v27 = *((float32x4_t *)a2 + 20);
      float32x4_t v28 = (float32x4_t)vorrq_s8(vandq_s8(v26, (int8x16_t)v24), (int8x16_t)v17);
      float32x4_t v29 = (float32x4_t)vorrq_s8(vandq_s8(v26, (int8x16_t)v25), (int8x16_t)v17);
      int8x16_t v30 = *((int8x16_t *)a2 + 21);
      float32x4_t v31 = *((float32x4_t *)a2 + 22);
      float32x4_t v32 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v25, 0x17uLL)), (float32x4_t)vandq_s8(v30, (int8x16_t)vcgtq_f32(v27, v25)));
      float32x4_t v33 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v24, 0x17uLL)), (float32x4_t)vandq_s8(v30, (int8x16_t)vcgtq_f32(v27, v24))), v31);
      float32x4_t v34 = *((float32x4_t *)a2 + 23);
      float32x4_t v35 = *((float32x4_t *)a2 + 24);
      float32x4_t v36 = (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v28, v34));
      float32x4_t v37 = (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v29, v34));
      float32x4_t v38 = vaddq_f32(v33, v36);
      float32x4_t v39 = vaddq_f32(vsubq_f32(v32, v31), v37);
      float32x4_t v40 = vsubq_f32(vsubq_f32(v28, v17), vmulq_f32(vmulq_f32(v35, v36), v28));
      float32x4_t v41 = vsubq_f32(vsubq_f32(v29, v17), vmulq_f32(vmulq_f32(v35, v37), v29));
      float32x4_t v42 = *((float32x4_t *)a2 + 25);
      float32x4_t v43 = *((float32x4_t *)a2 + 26);
      float32x4_t v44 = vaddq_f32(v42, vmulq_f32(v43, v40));
      float32x4_t v45 = vaddq_f32(v42, vmulq_f32(v43, v41));
      float32x4_t v46 = *((float32x4_t *)a2 + 27);
      float32x4_t v47 = *((float32x4_t *)a2 + 28);
      float32x4_t v48 = vmulq_n_f32(vaddq_f32(v39, vmulq_f32(v41, vaddq_f32(vaddq_f32(v46, vmulq_f32(v41, v47)), vmulq_f32(vmulq_f32(v41, v41), v45)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v49 = *((float32x4_t *)a2 + 29);
      float32x4_t v50 = *((float32x4_t *)a2 + 30);
      float32x4_t v51 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v38, vmulq_f32(v40, vaddq_f32(vaddq_f32(v46, vmulq_f32(v40, v47)), vmulq_f32(vmulq_f32(v40, v40), v44)))), COERCE_FLOAT(*(_OWORD *)a2)), v49);
      float32x4_t v52 = vmaxq_f32(v48, v49);
      float32x4_t v53 = vcvtq_f32_s32(vcvtq_s32_f32(v51));
      float32x4_t v54 = vcvtq_f32_s32(vcvtq_s32_f32(v52));
      float32x4_t v55 = vsubq_f32(v53, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v53, v51)));
      float32x4_t v56 = vsubq_f32(v54, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v54, v52)));
      float32x4_t v57 = vsubq_f32(v51, v55);
      float32x4_t v58 = vsubq_f32(v52, v56);
      float32x4_t v59 = *((float32x4_t *)a2 + 31);
      float32x4_t v60 = *((float32x4_t *)a2 + 32);
      float32x4_t v61 = vaddq_f32(v17, vmulq_f32(v57, vaddq_f32(v60, vmulq_f32(v57, vaddq_f32(v50, vmulq_f32(v59, v57))))));
      float32x4_t v62 = vaddq_f32(v17, vmulq_f32(v58, vaddq_f32(v60, vmulq_f32(v58, vaddq_f32(v50, vmulq_f32(v59, v58))))));
      int8x16_t v63 = *((int8x16_t *)a2 + 15);
      float32x4_t v64 = (int8x16_t *)(v6 + v11);
      v64[-1] = vbslq_s8(v63, (int8x16_t)v12, veorq_s8(vandq_s8(v23, (int8x16_t)v12), (int8x16_t)vmulq_f32(v61, (float32x4_t)vshlq_n_s32(vaddq_s32(v19, vcvtq_s32_f32(v55)), 0x17uLL))));
      *float32x4_t v64 = vbslq_s8(v63, (int8x16_t)v13, veorq_s8(vandq_s8(v23, (int8x16_t)v13), (int8x16_t)vmulq_f32(v62, (float32x4_t)vshlq_n_s32(vaddq_s32(v19, vcvtq_s32_f32(v56)), 0x17uLL))));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v65 = -v10;
    if (v65 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v66 = 16 * v65;
    float32x4_t v67 = *(float32x4_t *)(v7 + v66);
    float32x4_t v68 = *((float32x4_t *)a2 + 5);
    float32x4_t v69 = vminq_f32(vmulq_f32(v67, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 3), v67), *((int8x16_t *)a2 + 34), (int8x16_t)v68)), *((float32x4_t *)a2 + 35));
    float32x4_t v70 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v69), (int8x16_t)v68);
    float32x4_t v71 = (float32x4_t)vandq_s8((int8x16_t)v68, (int8x16_t)vcgtq_f32(v70, *((float32x4_t *)a2 + 23)));
    float32x4_t v72 = vsubq_f32(vsubq_f32(v70, v68), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v71), v70));
    float32x4_t v73 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v69, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v69))), *((float32x4_t *)a2 + 22)), v71), vmulq_f32(v72, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v72, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v72, v72), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v72)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v74 = vcvtq_f32_s32(vcvtq_s32_f32(v73));
    float32x4_t v75 = vsubq_f32(v74, (float32x4_t)vandq_s8((int8x16_t)v68, (int8x16_t)vcgtq_f32(v74, v73)));
    float32x4_t v76 = vsubq_f32(v73, v75);
    *(int8x16_t *)(v6 + v66) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v67, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v67), (int8x16_t)vmulq_f32(vaddq_f32(v68, vmulq_f32(v76, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v76, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v76)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v75)), 0x17uLL))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype0_nice_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v82 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 3);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      int32x4_t v17 = *((int32x4_t *)a2 + 33);
      int8x16_t v16 = *((int8x16_t *)a2 + 34);
      float32x4_t v18 = vmulq_f32(v13, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, v13), v16, (int8x16_t)v15));
      float32x4_t v20 = *((float32x4_t *)a2 + 35);
      int8x16_t v19 = *((int8x16_t *)a2 + 36);
      int8x16_t v21 = (int8x16_t)vminq_f32(vmulq_f32(v12, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, v12), v16, (int8x16_t)v15)), v20);
      int8x16_t v22 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v14)), v14);
      float32x4_t v23 = (float32x4_t)vbslq_s8(v22, (int8x16_t)v15, (int8x16_t)vminq_f32(v18, v20));
      float32x4_t v24 = (float32x4_t)vbslq_s8(v22, (int8x16_t)v15, v21);
      int8x16_t v26 = *((int8x16_t *)a2 + 19);
      float32x4_t v25 = *((float32x4_t *)a2 + 20);
      float32x4_t v27 = (float32x4_t)vorrq_s8(vandq_s8(v26, (int8x16_t)v23), (int8x16_t)v15);
      float32x4_t v28 = (float32x4_t)vorrq_s8(vandq_s8(v26, (int8x16_t)v24), (int8x16_t)v15);
      int8x16_t v29 = *((int8x16_t *)a2 + 21);
      float32x4_t v30 = *((float32x4_t *)a2 + 22);
      float32x4_t v31 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v24, 0x17uLL)), (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v25, v24)));
      float32x4_t v32 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v23, 0x17uLL)), (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v25, v23))), v30);
      float32x4_t v33 = *((float32x4_t *)a2 + 23);
      float32x4_t v34 = *((float32x4_t *)a2 + 24);
      float32x4_t v35 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v27, v33));
      float32x4_t v36 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v28, v33));
      float32x4_t v37 = vaddq_f32(v32, v35);
      float32x4_t v38 = vaddq_f32(vsubq_f32(v31, v30), v36);
      float32x4_t v39 = vsubq_f32(vsubq_f32(v27, v15), vmulq_f32(vmulq_f32(v34, v35), v27));
      float32x4_t v40 = vsubq_f32(vsubq_f32(v28, v15), vmulq_f32(vmulq_f32(v34, v36), v28));
      float32x4_t v41 = vmulq_f32(v39, v39);
      float32x4_t v42 = *((float32x4_t *)a2 + 37);
      float32x4_t v43 = *((float32x4_t *)a2 + 38);
      float32x4_t v44 = *((float32x4_t *)a2 + 39);
      float32x4_t v45 = *((float32x4_t *)a2 + 40);
      float32x4_t v46 = vaddq_f32(v42, vmulq_f32(v43, v39));
      float32x4_t v47 = vaddq_f32(v44, vmulq_f32(v45, v39));
      float32x4_t v48 = vaddq_f32(v44, vmulq_f32(v45, v40));
      float32x4_t v49 = vaddq_f32(v42, vmulq_f32(v43, v40));
      float32x4_t v50 = *((float32x4_t *)a2 + 41);
      float32x4_t v51 = *((float32x4_t *)a2 + 42);
      float32x4_t v52 = vaddq_f32(v50, vmulq_f32(v51, v39));
      float32x4_t v53 = vaddq_f32(v50, vmulq_f32(v51, v40));
      float32x4_t v54 = vmulq_f32(v40, v40);
      float32x4_t v55 = vaddq_f32(v52, vmulq_f32(v41, vaddq_f32(v46, vmulq_f32(v41, v47))));
      float32x4_t v56 = vaddq_f32(v53, vmulq_f32(v54, vaddq_f32(v49, vmulq_f32(v54, v48))));
      float32x4_t v57 = *((float32x4_t *)a2 + 43);
      float32x4_t v58 = *((float32x4_t *)a2 + 44);
      float32x4_t v59 = vmulq_n_f32(vaddq_f32(v38, vmulq_f32(v40, vaddq_f32(v57, vmulq_f32(v40, v56)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v60 = *((float32x4_t *)a2 + 29);
      float32x4_t v61 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v37, vmulq_f32(v39, vaddq_f32(v57, vmulq_f32(v39, v55)))), COERCE_FLOAT(*(_OWORD *)a2)), v60);
      float32x4_t v62 = vmaxq_f32(v59, v60);
      float32x4_t v63 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
      float32x4_t v64 = vcvtq_f32_s32(vcvtq_s32_f32(v62));
      float32x4_t v65 = vsubq_f32(v63, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v63, v61)));
      float32x4_t v66 = vsubq_f32(v64, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v64, v62)));
      float32x4_t v67 = vsubq_f32(v61, v65);
      float32x4_t v68 = vsubq_f32(v62, v66);
      float32x4_t v69 = *((float32x4_t *)a2 + 45);
      float32x4_t v70 = *((float32x4_t *)a2 + 46);
      float32x4_t v71 = vaddq_f32(v58, vmulq_f32(v69, v67));
      float32x4_t v72 = vaddq_f32(v58, vmulq_f32(v69, v68));
      float32x4_t v73 = *((float32x4_t *)a2 + 47);
      float32x4_t v74 = *((float32x4_t *)a2 + 48);
      float32x4_t v75 = vaddq_f32(v15, vmulq_f32(v67, vaddq_f32(v74, vmulq_f32(v67, vaddq_f32(vaddq_f32(v70, vmulq_f32(v67, v73)), vmulq_f32(vmulq_f32(v67, v67), v71))))));
      float32x4_t v76 = vaddq_f32(v15, vmulq_f32(v68, vaddq_f32(v74, vmulq_f32(v68, vaddq_f32(vaddq_f32(v70, vmulq_f32(v73, v68)), vmulq_f32(vmulq_f32(v68, v68), v72))))));
      int8x16_t v77 = (int8x16_t)vmulq_f32(v75, (float32x4_t)vshlq_n_s32(vaddq_s32(v17, vcvtq_s32_f32(v65)), 0x17uLL));
      int8x16_t v78 = vandq_s8(v19, (int8x16_t)v13);
      int8x16_t v79 = veorq_s8(vandq_s8(v19, (int8x16_t)v12), (int8x16_t)vmulq_f32(v76, (float32x4_t)vshlq_n_s32(vaddq_s32(v17, vcvtq_s32_f32(v66)), 0x17uLL)));
      int8x16_t v80 = *((int8x16_t *)a2 + 15);
      uint64_t v81 = (int8x16_t *)(v6 + v11);
      v81[-1] = vbslq_s8(v80, (int8x16_t)v13, veorq_s8(v78, v77));
      *uint64_t v81 = vbslq_s8(v80, (int8x16_t)v12, v79);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v82 = -v10;
    if (v82 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v83 = 16 * v82;
    float32x4_t v84 = *(float32x4_t *)(v7 + v83);
    float32x4_t v85 = *((float32x4_t *)a2 + 5);
    float32x4_t v86 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v85, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), *((float32x4_t *)a2 + 3))), *((float32x4_t *)a2 + 3)), (int8x16_t)v85, (int8x16_t)vminq_f32(vmulq_f32(v84, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 3), v84), *((int8x16_t *)a2 + 34), (int8x16_t)v85)), *((float32x4_t *)a2 + 35)));
    float32x4_t v87 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v86), (int8x16_t)v85);
    float32x4_t v88 = (float32x4_t)vandq_s8((int8x16_t)v85, (int8x16_t)vcgtq_f32(v87, *((float32x4_t *)a2 + 23)));
    float32x4_t v89 = vsubq_f32(vsubq_f32(v87, v85), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v88), v87));
    float32x4_t v90 = vmulq_f32(v89, v89);
    float32x4_t v91 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v86, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v86))), *((float32x4_t *)a2 + 22)), v88), vmulq_f32(v89, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v89, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v89)),
                        vmulq_f32(v90, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v89)), vmulq_f32(v90, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v89)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
    float32x4_t v92 = vcvtq_f32_s32(vcvtq_s32_f32(v91));
    float32x4_t v93 = vsubq_f32(v92, (float32x4_t)vandq_s8((int8x16_t)v85, (int8x16_t)vcgtq_f32(v92, v91)));
    float32x4_t v94 = vsubq_f32(v91, v93);
    *(int8x16_t *)(v6 + v83) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v84, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v84), (int8x16_t)vmulq_f32(vaddq_f32(v85, vmulq_f32(v94, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v94, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v94)), vmulq_f32(vmulq_f32(v94, v94),
                                                            vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v94)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v93)), 0x17uLL))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype0_float_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = 16 * *((int *)a1 + 22);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        float32x4_t v12 = *((float32x4_t *)a2 + 5);
        float32x4_t v13 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), *((float32x4_t *)a2 + 3))), *((float32x4_t *)a2 + 3)), (int8x16_t)v12, (int8x16_t)vminq_f32(vmulq_f32(v11, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 3), v11), *((int8x16_t *)a2 + 34), (int8x16_t)v12)), *((float32x4_t *)a2 + 35)));
        float32x4_t v14 = *((float32x4_t *)a2 + 50);
        int8x16_t v15 = *((int8x16_t *)a2 + 52);
        int8x16_t v16 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v13);
        int8x16_t v17 = (int8x16_t)vmulq_f32(v13, vaddq_f32(v12, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 49), v16)));
        float32x4_t v18 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), v17), (int8x16_t)v12);
        float32x4_t v19 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v13, *((float32x4_t *)a2 + 21))), vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v13, v14), *((int8x16_t *)a2 + 51)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v13, v14))), (float32x4_t)vandq_s8(v15, v16))), *((float32x4_t *)a2 + 22)), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v17, 0x17uLL)));
        float32x4_t v20 = (float32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v18, *((float32x4_t *)a2 + 23)));
        float32x4_t v21 = vaddq_f32(v19, v20);
        float32x4_t v22 = vsubq_f32(vsubq_f32(v18, v12), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v20), v18));
        float32x4_t v23 = vmulq_f32(v22, v22);
        float32x4_t v24 = vmulq_n_f32(vaddq_f32(v21, vmulq_f32(v22, vaddq_f32(*((float32x4_t *)a2 + 61), vmulq_f32(v22, vaddq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 59), vmulq_f32(*((float32x4_t *)a2 + 60), v22)), vmulq_f32(v23, vaddq_f32(*((float32x4_t *)a2 + 57), vmulq_f32(*((float32x4_t *)a2 + 58), v22)))), vmulq_f32(vmulq_f32(v23, v23), vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 55), vmulq_f32(*((float32x4_t *)a2 + 56), v22)), vmulq_f32(
                                v23,
                                vaddq_f32(*((float32x4_t *)a2 + 53), vmulq_f32(*((float32x4_t *)a2 + 54), v22)))))))))),
                COERCE_FLOAT(*(_OWORD *)a2));
        float32x4_t v25 = vminq_f32(vmaxq_f32(v24, *((float32x4_t *)a2 + 62)), *((float32x4_t *)a2 + 63));
        float32x4_t v26 = vcvtq_f32_s32(vcvtq_s32_f32(v25));
        float32x4_t v27 = vsubq_f32(v26, (float32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_f32(v26, v25)));
        float32x4_t v28 = vsubq_f32(v25, v27);
        float32x4_t v29 = vmulq_f32(v28, v28);
        int8x16_t v30 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 70), v27);
        *(int8x16_t *)(v7 + v10) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v11, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v11), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v12, vorrq_s8((int8x16_t)vcltzq_f32(v24), (int8x16_t)vcgezq_f32(v24))), v14), (int8x16_t)vmulq_f32(vaddq_f32(v12, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 71), v30)), vmulq_f32(vaddq_f32(v12,
                                                          vmulq_f32(v28, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 68), vmulq_f32(v28, *((float32x4_t *)a2 + 69))), vmulq_f32(v29, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 66), vmulq_f32(*((float32x4_t *)a2 + 67), v28)), vmulq_f32(v29, vaddq_f32(*((float32x4_t *)a2 + 64), vmulq_f32(*((float32x4_t *)a2 + 65), v28)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33),
                                                                         vcvtq_s32_f32(vaddq_f32(v27, (float32x4_t)vandq_s8(v15, v30)))), 0x17uLL))), (int8x16_t)v24)));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v6;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Gettype1_fast_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v52 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 50);
      float32x4_t v15 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v16 = *((float32x4_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v13, v14), v16);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v12, v14), v16);
      float32x4_t v20 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v18, v15)));
      float32x4_t v21 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v19, v15)));
      float32x4_t v22 = vcvtq_f32_s32(vcvtq_s32_f32(v20));
      float32x4_t v23 = vcvtq_f32_s32(vcvtq_s32_f32(v21));
      float32x4_t v24 = *((float32x4_t *)a2 + 7);
      float32x4_t v25 = *((float32x4_t *)a2 + 8);
      float32x4_t v26 = vrsqrteq_f32(vaddq_f32(v24, vsubq_f32(v20, v22)));
      float32x4_t v27 = vrsqrteq_f32(vaddq_f32(v24, vsubq_f32(v21, v23)));
      float32x4_t v28 = vaddq_f32(v25, v22);
      float32x4_t v29 = vaddq_f32(v25, v23);
      float32x4_t v30 = *((float32x4_t *)a2 + 9);
      float32x4_t v31 = *((float32x4_t *)a2 + 10);
      float32x4_t v32 = vmulq_n_f32(vsubq_f32(v28, vmulq_f32(v26, v30)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v33 = vmulq_n_f32(vsubq_f32(v29, vmulq_f32(v27, v30)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v34 = vcvtq_f32_s32(vcvtq_s32_f32(v32));
      float32x4_t v35 = vcvtq_f32_s32(vcvtq_s32_f32(v33));
      float32x4_t v36 = vsubq_f32(v34, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v34, v32)));
      float32x4_t v37 = vsubq_f32(v35, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v35, v33)));
      float32x4_t v38 = *((float32x4_t *)a2 + 11);
      float32x4_t v39 = *((float32x4_t *)a2 + 12);
      float32x4_t v40 = vmulq_f32(vrecpeq_f32(vsubq_f32(v38, vsubq_f32(v32, v36))), v39);
      float32x4_t v41 = vmulq_f32(vrecpeq_f32(vsubq_f32(v38, vsubq_f32(v33, v37))), v39);
      float32x4_t v42 = vaddq_f32(vaddq_f32(v31, v37), vmulq_f32(v41, v41));
      float32x4_t v43 = vmaxq_f32(vaddq_f32(vaddq_f32(v31, v36), vmulq_f32(v40, v40)), v14);
      float32x4_t v44 = *((float32x4_t *)a2 + 13);
      float32x4_t v45 = *((float32x4_t *)a2 + 14);
      float32x4_t v46 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1);
      int8x16_t v47 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbicq_s8(*((int8x16_t *)a2 + 3), *((int8x16_t *)a2 + 74)), 0);
      int8x16_t v48 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v46)), v47, (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v43, v44), v45)), *(float32x4_t *)a2, 3)), v16);
      int8x16_t v49 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v19, v46)), v47, (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(v42, v14), v44), v45)), *(float32x4_t *)a2, 3)), v16);
      int8x16_t v50 = *((int8x16_t *)a2 + 15);
      float32x4_t v51 = (int8x16_t *)(v6 + v11);
      v51[-1] = vbslq_s8(v50, (int8x16_t)v13, v48);
      *float32x4_t v51 = vbslq_s8(v50, (int8x16_t)v12, v49);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v52 = -v10;
    if (v52 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v53 = 16 * v52;
    float32x4_t v54 = *(float32x4_t *)(v7 + v53);
    float32x4_t v55 = *((float32x4_t *)a2 + 50);
    float32x4_t v56 = *((float32x4_t *)a2 + 5);
    float32x4_t v57 = vminq_f32(vmaxq_f32(v54, v55), v56);
    float32x4_t v58 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1))));
    float32x4_t v59 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
    float32x4_t v60 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v59), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v58, v59))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
    float32x4_t v61 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
    float32x4_t v62 = vsubq_f32(v61, (float32x4_t)vandq_s8((int8x16_t)v56, (int8x16_t)vcgtq_f32(v61, v60)));
    float32x4_t v63 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v60, v62))), *((float32x4_t *)a2 + 12));
    *(int8x16_t *)(v6 + v53) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v54, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v55, vsubq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbicq_s8(*((int8x16_t *)a2 + 3), *((int8x16_t *)a2 + 74)), 0), (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(
                                                                                           vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v63, v63), vaddq_f32(*((float32x4_t *)a2 + 10), v62)), v55), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))), *(float32x4_t *)a2, 3)), v56));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype1_fixed_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v52 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 50);
      float32x4_t v15 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v16 = *((float32x4_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v13, v14), v16);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v12, v14), v16);
      float32x4_t v20 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v18, v15)));
      float32x4_t v21 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v19, v15)));
      float32x4_t v22 = vcvtq_f32_s32(vcvtq_s32_f32(v20));
      float32x4_t v23 = vcvtq_f32_s32(vcvtq_s32_f32(v21));
      float32x4_t v24 = *((float32x4_t *)a2 + 7);
      float32x4_t v25 = *((float32x4_t *)a2 + 8);
      float32x4_t v26 = vrsqrteq_f32(vaddq_f32(v24, vsubq_f32(v20, v22)));
      float32x4_t v27 = vrsqrteq_f32(vaddq_f32(v24, vsubq_f32(v21, v23)));
      float32x4_t v28 = vaddq_f32(v25, v22);
      float32x4_t v29 = vaddq_f32(v25, v23);
      float32x4_t v30 = *((float32x4_t *)a2 + 9);
      float32x4_t v31 = *((float32x4_t *)a2 + 10);
      float32x4_t v32 = vmulq_n_f32(vsubq_f32(v28, vmulq_f32(v26, v30)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v33 = vmulq_n_f32(vsubq_f32(v29, vmulq_f32(v27, v30)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v34 = vcvtq_f32_s32(vcvtq_s32_f32(v32));
      float32x4_t v35 = vcvtq_f32_s32(vcvtq_s32_f32(v33));
      float32x4_t v36 = vsubq_f32(v34, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v34, v32)));
      float32x4_t v37 = vsubq_f32(v35, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v35, v33)));
      float32x4_t v38 = *((float32x4_t *)a2 + 11);
      float32x4_t v39 = *((float32x4_t *)a2 + 12);
      float32x4_t v40 = vmulq_f32(vrecpeq_f32(vsubq_f32(v38, vsubq_f32(v32, v36))), v39);
      float32x4_t v41 = vmulq_f32(vrecpeq_f32(vsubq_f32(v38, vsubq_f32(v33, v37))), v39);
      float32x4_t v42 = vaddq_f32(vaddq_f32(v31, v37), vmulq_f32(v41, v41));
      float32x4_t v43 = vmaxq_f32(vaddq_f32(vaddq_f32(v31, v36), vmulq_f32(v40, v40)), v14);
      float32x4_t v44 = *((float32x4_t *)a2 + 13);
      float32x4_t v45 = *((float32x4_t *)a2 + 14);
      float32x4_t v46 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1);
      int8x16_t v47 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbicq_s8(*((int8x16_t *)a2 + 3), *((int8x16_t *)a2 + 74)), 0);
      int8x16_t v48 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v46)), v47, (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v43, v44), v45)), *(float32x4_t *)a2, 3)), v16);
      int8x16_t v49 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v19, v46)), v47, (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(v42, v14), v44), v45)), *(float32x4_t *)a2, 3)), v16);
      int8x16_t v50 = *((int8x16_t *)a2 + 15);
      float32x4_t v51 = (int8x16_t *)(v6 + v11);
      v51[-1] = vbslq_s8(v50, (int8x16_t)v13, v48);
      *float32x4_t v51 = vbslq_s8(v50, (int8x16_t)v12, v49);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v52 = -v10;
    if (v52 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v53 = 16 * v52;
    float32x4_t v54 = *(float32x4_t *)(v7 + v53);
    float32x4_t v55 = *((float32x4_t *)a2 + 50);
    float32x4_t v56 = *((float32x4_t *)a2 + 5);
    float32x4_t v57 = vminq_f32(vmaxq_f32(v54, v55), v56);
    float32x4_t v58 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1))));
    float32x4_t v59 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
    float32x4_t v60 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v59), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v58, v59))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
    float32x4_t v61 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
    float32x4_t v62 = vsubq_f32(v61, (float32x4_t)vandq_s8((int8x16_t)v56, (int8x16_t)vcgtq_f32(v61, v60)));
    float32x4_t v63 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v60, v62))), *((float32x4_t *)a2 + 12));
    *(int8x16_t *)(v6 + v53) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v54, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v55, vsubq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbicq_s8(*((int8x16_t *)a2 + 3), *((int8x16_t *)a2 + 74)), 0), (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(
                                                                                           vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v63, v63), vaddq_f32(*((float32x4_t *)a2 + 10), v62)), v55), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))), *(float32x4_t *)a2, 3)), v56));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype1_nice_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = 16 * *((int *)a1 + 22);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        float32x4_t v12 = *((float32x4_t *)a2 + 75);
        float32x4_t v13 = *((float32x4_t *)a2 + 5);
        float32x4_t v14 = vminq_f32(vmaxq_f32(v11, v12), v13);
        float32x4_t v15 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v13, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v12)), v12), (int8x16_t)v13, (int8x16_t)vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
        float32x4_t v16 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v15), (int8x16_t)v13);
        float32x4_t v17 = (float32x4_t)vandq_s8((int8x16_t)v13, (int8x16_t)vcgtq_f32(v16, *((float32x4_t *)a2 + 23)));
        float32x4_t v18 = vsubq_f32(vsubq_f32(v16, v13), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v17), v16));
        float32x4_t v19 = vmulq_f32(v18, v18);
        float32x4_t v20 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v15, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v15))), *((float32x4_t *)a2 + 22)), v17), vmulq_f32(v18, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v18, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v18)),
                            vmulq_f32(v19, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v18)), vmulq_f32(v19, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v18)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
        float32x4_t v21 = vcvtq_f32_s32(vcvtq_s32_f32(v20));
        float32x4_t v22 = vsubq_f32(v21, (float32x4_t)vandq_s8((int8x16_t)v13, (int8x16_t)vcgtq_f32(v21, v20)));
        float32x4_t v23 = vsubq_f32(v20, v22);
        *(int8x16_t *)(v7 + v10) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v11, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v12, vsubq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbicq_s8(*((int8x16_t *)a2 + 3), *((int8x16_t *)a2 + 74)), 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v13, vmulq_f32(
                                                                                    v23,
                                                                                    vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v23, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v23)), vmulq_f32(vmulq_f32(v23, v23), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v23)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33),
                                                                                                 vcvtq_s32_f32(v22)),
                                                                                               0x17uLL)),
                                                                              *(float32x4_t *)a2,
                                                                              3)),
                                                  v13));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v6;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Gettype1_half_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v69 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 50);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v17 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v12, v14), v15);
      float32x4_t v19 = vaddq_f32(v17, v16);
      float32x4_t v20 = vaddq_f32(v18, v16);
      int8x16_t v21 = *((int8x16_t *)a2 + 19);
      float32x4_t v22 = *((float32x4_t *)a2 + 20);
      float32x4_t v23 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v19), (int8x16_t)v15);
      int8x16_t v24 = *((int8x16_t *)a2 + 21);
      float32x4_t v25 = *((float32x4_t *)a2 + 22);
      float32x4_t v26 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v20), (int8x16_t)v15);
      float32x4_t v27 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v22, v20)));
      float32x4_t v28 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v19, 0x17uLL)), (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v22, v19))), v25);
      float32x4_t v29 = *((float32x4_t *)a2 + 23);
      float32x4_t v30 = *((float32x4_t *)a2 + 24);
      float32x4_t v31 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v23, v29));
      float32x4_t v32 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v26, v29));
      float32x4_t v33 = vaddq_f32(v28, v31);
      float32x4_t v34 = vmulq_f32(v30, v31);
      float32x4_t v35 = vmulq_f32(vmulq_f32(v30, v32), v26);
      float32x4_t v36 = vaddq_f32(vsubq_f32(v27, v25), v32);
      float32x4_t v37 = vsubq_f32(vsubq_f32(v23, v15), vmulq_f32(v34, v23));
      float32x4_t v38 = vsubq_f32(vsubq_f32(v26, v15), v35);
      float32x4_t v39 = *((float32x4_t *)a2 + 25);
      float32x4_t v40 = *((float32x4_t *)a2 + 26);
      float32x4_t v41 = *((float32x4_t *)a2 + 27);
      float32x4_t v42 = *((float32x4_t *)a2 + 28);
      float32x4_t v43 = vmulq_n_f32(vaddq_f32(v33, vmulq_f32(v37, vaddq_f32(vaddq_f32(v41, vmulq_f32(v42, v37)), vmulq_f32(vmulq_f32(v37, v37), vaddq_f32(v39, vmulq_f32(v40, v37)))))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v44 = vmulq_n_f32(vaddq_f32(v36, vmulq_f32(v38, vaddq_f32(vaddq_f32(v41, vmulq_f32(v42, v38)), vmulq_f32(vmulq_f32(v38, v38), vaddq_f32(v39, vmulq_f32(v40, v38)))))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v45 = *((float32x4_t *)a2 + 29);
      float32x4_t v46 = *((float32x4_t *)a2 + 30);
      float32x4_t v47 = vmaxq_f32(v43, v45);
      float32x4_t v48 = vmaxq_f32(v44, v45);
      float32x4_t v49 = vcvtq_f32_s32(vcvtq_s32_f32(v47));
      float32x4_t v50 = vcvtq_f32_s32(vcvtq_s32_f32(v48));
      float32x4_t v51 = vsubq_f32(v49, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v49, v47)));
      float32x4_t v52 = vsubq_f32(v50, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v50, v48)));
      float32x4_t v53 = vsubq_f32(v47, v51);
      float32x4_t v54 = vsubq_f32(v48, v52);
      float32x4_t v55 = *((float32x4_t *)a2 + 31);
      float32x4_t v56 = *((float32x4_t *)a2 + 32);
      float32x4_t v57 = vmulq_f32(v54, vaddq_f32(v56, vmulq_f32(v54, vaddq_f32(v46, vmulq_f32(v55, v54)))));
      float32x4_t v58 = vaddq_f32(v15, vmulq_f32(v53, vaddq_f32(v56, vmulq_f32(v53, vaddq_f32(v46, vmulq_f32(v55, v53))))));
      int32x4_t v59 = vcvtq_s32_f32(v52);
      int32x4_t v60 = *((int32x4_t *)a2 + 33);
      float32x4_t v61 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1);
      int8x16_t v62 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbicq_s8(*((int8x16_t *)a2 + 3), *((int8x16_t *)a2 + 74)), 0);
      float32x4_t v63 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v17, v61)), v62, (int8x16_t)vmulq_laneq_f32(vmulq_f32(v58, (float32x4_t)vshlq_n_s32(vaddq_s32(v60, vcvtq_s32_f32(v51)), 0x17uLL)), *(float32x4_t *)a2, 3));
      float32x4_t v64 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v61)), v62, (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v15, v57), (float32x4_t)vshlq_n_s32(vaddq_s32(v60, v59), 0x17uLL)), *(float32x4_t *)a2, 3));
      int8x16_t v65 = (int8x16_t)vminq_f32(v63, v15);
      int8x16_t v66 = (int8x16_t)vminq_f32(v64, v15);
      int8x16_t v67 = *((int8x16_t *)a2 + 15);
      float32x4_t v68 = (int8x16_t *)(v6 + v11);
      v68[-1] = vbslq_s8(v67, (int8x16_t)v13, v65);
      *float32x4_t v68 = vbslq_s8(v67, (int8x16_t)v12, v66);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v69 = -v10;
    if (v69 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v70 = 16 * v69;
    float32x4_t v71 = *(float32x4_t *)(v7 + v70);
    float32x4_t v72 = *((float32x4_t *)a2 + 50);
    float32x4_t v73 = *((float32x4_t *)a2 + 5);
    float32x4_t v74 = vminq_f32(vmaxq_f32(v71, v72), v73);
    float32x4_t v75 = vaddq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1));
    float32x4_t v76 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v75), (int8x16_t)v73);
    float32x4_t v77 = (float32x4_t)vandq_s8((int8x16_t)v73, (int8x16_t)vcgtq_f32(v76, *((float32x4_t *)a2 + 23)));
    float32x4_t v78 = vsubq_f32(vsubq_f32(v76, v73), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v77), v76));
    float32x4_t v79 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v75, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v75))), *((float32x4_t *)a2 + 22)), v77), vmulq_f32(v78, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(*((float32x4_t *)a2 + 28), v78)), vmulq_f32(vmulq_f32(v78, v78), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v78)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v80 = vcvtq_f32_s32(vcvtq_s32_f32(v79));
    float32x4_t v81 = vsubq_f32(v80, (float32x4_t)vandq_s8((int8x16_t)v73, (int8x16_t)vcgtq_f32(v80, v79)));
    float32x4_t v82 = vsubq_f32(v79, v81);
    *(int8x16_t *)(v6 + v70) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v71, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v72, vsubq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbicq_s8(*((int8x16_t *)a2 + 3), *((int8x16_t *)a2 + 74)), 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(
                                                                              v73,
                                                                              vmulq_f32(v82, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v82, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v82)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v81)), 0x17uLL)), *(float32x4_t *)a2, 3)), v73));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype1_half_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v68 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      int32x4_t v15 = (int32x4_t)vbicq_s8((int8x16_t)v14, *((int8x16_t *)a2 + 74));
      float32x4_t v16 = (float32x4_t)vdupq_laneq_s32(v15, 3);
      float32x4_t v17 = vminq_f32(vmaxq_f32(v13, v14), v16);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v12, v14), v16);
      float32x4_t v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v20 = vaddq_f32(v17, v19);
      float32x4_t v21 = vaddq_f32(v18, v19);
      int8x16_t v22 = *((int8x16_t *)a2 + 19);
      float32x4_t v23 = *((float32x4_t *)a2 + 20);
      float32x4_t v24 = *((float32x4_t *)a2 + 5);
      float32x4_t v25 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v20), (int8x16_t)v24);
      float32x4_t v26 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v21), (int8x16_t)v24);
      int8x16_t v27 = *((int8x16_t *)a2 + 21);
      float32x4_t v28 = *((float32x4_t *)a2 + 22);
      float32x4_t v29 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v21, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v23, v21)));
      float32x4_t v30 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v23, v20))), v28);
      float32x4_t v31 = *((float32x4_t *)a2 + 23);
      float32x4_t v32 = *((float32x4_t *)a2 + 24);
      float32x4_t v33 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v25, v31));
      float32x4_t v34 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v26, v31));
      float32x4_t v35 = vaddq_f32(v30, v33);
      float32x4_t v36 = vaddq_f32(vsubq_f32(v29, v28), v34);
      float32x4_t v37 = vsubq_f32(vsubq_f32(v25, v24), vmulq_f32(vmulq_f32(v32, v33), v25));
      float32x4_t v38 = vsubq_f32(vsubq_f32(v26, v24), vmulq_f32(vmulq_f32(v32, v34), v26));
      float32x4_t v39 = *((float32x4_t *)a2 + 25);
      float32x4_t v40 = *((float32x4_t *)a2 + 26);
      float32x4_t v41 = vaddq_f32(v39, vmulq_f32(v40, v37));
      float32x4_t v42 = vaddq_f32(v39, vmulq_f32(v40, v38));
      float32x4_t v43 = *((float32x4_t *)a2 + 27);
      float32x4_t v44 = *((float32x4_t *)a2 + 28);
      float32x4_t v45 = vaddq_f32(v36, vmulq_f32(v38, vaddq_f32(vaddq_f32(v43, vmulq_f32(v38, v44)), vmulq_f32(vmulq_f32(v38, v38), v42))));
      float32x4_t v46 = *((float32x4_t *)a2 + 29);
      float32x4_t v47 = *((float32x4_t *)a2 + 30);
      float32x4_t v48 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v35, vmulq_f32(v37, vaddq_f32(vaddq_f32(v43, vmulq_f32(v37, v44)), vmulq_f32(vmulq_f32(v37, v37), v41)))), COERCE_FLOAT(*(_OWORD *)a2)), v46);
      float32x4_t v49 = vmaxq_f32(vmulq_n_f32(v45, COERCE_FLOAT(*(_OWORD *)a2)), v46);
      float32x4_t v50 = vcvtq_f32_s32(vcvtq_s32_f32(v48));
      float32x4_t v51 = vcvtq_f32_s32(vcvtq_s32_f32(v49));
      float32x4_t v52 = vsubq_f32(v50, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v50, v48)));
      float32x4_t v53 = vsubq_f32(v51, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v51, v49)));
      float32x4_t v54 = vsubq_f32(v48, v52);
      float32x4_t v55 = vsubq_f32(v49, v53);
      float32x4_t v56 = *((float32x4_t *)a2 + 31);
      float32x4_t v57 = *((float32x4_t *)a2 + 32);
      float32x4_t v58 = vaddq_f32(v47, vmulq_f32(v56, v54));
      float32x4_t v59 = vmulq_f32(v55, vaddq_f32(v57, vmulq_f32(v55, vaddq_f32(v47, vmulq_f32(v56, v55)))));
      int32x4_t v60 = vcvtq_s32_f32(v53);
      int32x4_t v61 = *((int32x4_t *)a2 + 33);
      float32x4_t v62 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1);
      int8x16_t v63 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v15.i8, 0);
      int8x16_t v64 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v17, v62)), v63, (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v24, vmulq_f32(v54, vaddq_f32(v57, vmulq_f32(v54, v58)))), (float32x4_t)vshlq_n_s32(vaddq_s32(v61, vcvtq_s32_f32(v52)), 0x17uLL)), *(float32x4_t *)a2, 3));
      int8x16_t v65 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v62)), v63, (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v24, v59), (float32x4_t)vshlq_n_s32(vaddq_s32(v61, v60), 0x17uLL)), *(float32x4_t *)a2, 3));
      int8x16_t v66 = *((int8x16_t *)a2 + 15);
      int8x16_t v67 = (int8x16_t *)(v6 + v11);
      v67[-1] = vbslq_s8(v66, (int8x16_t)v13, v64);
      *int8x16_t v67 = vbslq_s8(v66, (int8x16_t)v12, v65);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v68 = -v10;
    if (v68 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v69 = 16 * v68;
    float32x4_t v70 = *(float32x4_t *)(v7 + v69);
    float32x4_t v71 = *((float32x4_t *)a2 + 75);
    int32x4_t v72 = (int32x4_t)vbicq_s8((int8x16_t)v71, *((int8x16_t *)a2 + 74));
    float32x4_t v73 = vminq_f32(vmaxq_f32(v70, v71), (float32x4_t)vdupq_laneq_s32(v72, 3));
    float32x4_t v74 = vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1));
    float32x4_t v75 = *((float32x4_t *)a2 + 5);
    float32x4_t v76 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v74), (int8x16_t)v75);
    float32x4_t v77 = (float32x4_t)vandq_s8((int8x16_t)v75, (int8x16_t)vcgtq_f32(v76, *((float32x4_t *)a2 + 23)));
    float32x4_t v78 = vsubq_f32(vsubq_f32(v76, v75), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v77), v76));
    float32x4_t v79 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v74, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v74))), *((float32x4_t *)a2 + 22)), v77), vmulq_f32(v78, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v78, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v78, v78), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v78)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v80 = vcvtq_f32_s32(vcvtq_s32_f32(v79));
    float32x4_t v81 = vsubq_f32(v80, (float32x4_t)vandq_s8((int8x16_t)v75, (int8x16_t)vcgtq_f32(v80, v79)));
    float32x4_t v82 = vsubq_f32(v79, v81);
    *(int8x16_t *)(v6 + v69) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v70, vbslq_s8((int8x16_t)vcgtq_f32(v71, vsubq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v72.i8, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v75, vmulq_f32(v82, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v82,
                                                          vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v82)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v81)), 0x17uLL)), *(float32x4_t *)a2, 3)));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype1_nice_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = 16 * *((int *)a1 + 22);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        float32x4_t v12 = *((float32x4_t *)a2 + 75);
        int32x4_t v13 = (int32x4_t)vbicq_s8((int8x16_t)v12, *((int8x16_t *)a2 + 74));
        float32x4_t v14 = vminq_f32(vmaxq_f32(v11, v12), (float32x4_t)vdupq_laneq_s32(v13, 3));
        float32x4_t v15 = *((float32x4_t *)a2 + 5);
        float32x4_t v16 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v12)), v12), (int8x16_t)v15, (int8x16_t)vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
        float32x4_t v17 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v16), (int8x16_t)v15);
        float32x4_t v18 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v17, *((float32x4_t *)a2 + 23)));
        float32x4_t v19 = vsubq_f32(vsubq_f32(v17, v15), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v18), v17));
        float32x4_t v20 = vmulq_f32(v19, v19);
        float32x4_t v21 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v16, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v16))), *((float32x4_t *)a2 + 22)), v18), vmulq_f32(v19, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v19, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v19)),
                            vmulq_f32(v20, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v19)), vmulq_f32(v20, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v19)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
        float32x4_t v22 = vcvtq_f32_s32(vcvtq_s32_f32(v21));
        float32x4_t v23 = vsubq_f32(v22, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v22, v21)));
        float32x4_t v24 = vsubq_f32(v21, v23);
        *(int8x16_t *)(v7 + v10) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v11, vbslq_s8((int8x16_t)vcgtq_f32(v12, vsubq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v13.i8, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v15, vmulq_f32(v24, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v24,
                                                              vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v24)), vmulq_f32(vmulq_f32(v24, v24), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v24)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v23)), 0x17uLL)), *(float32x4_t *)a2, 3)));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v6;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Gettype1_float_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = 16 * *((int *)a1 + 22);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        float32x4_t v12 = *((float32x4_t *)a2 + 75);
        int32x4_t v13 = (int32x4_t)vbicq_s8((int8x16_t)v12, *((int8x16_t *)a2 + 74));
        float32x4_t v14 = vminq_f32(vmaxq_f32(v11, v12), (float32x4_t)vdupq_laneq_s32(v13, 3));
        float32x4_t v15 = *((float32x4_t *)a2 + 5);
        float32x4_t v16 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v12)), v12), (int8x16_t)v15, (int8x16_t)vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
        int8x16_t v17 = *((int8x16_t *)a2 + 52);
        int8x16_t v18 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v16);
        int8x16_t v19 = (int8x16_t)vmulq_f32(v16, vaddq_f32(v15, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 49), v18)));
        float32x4_t v20 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), v19), (int8x16_t)v15);
        float32x4_t v21 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v16, *((float32x4_t *)a2 + 21))), vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v16, *((float32x4_t *)a2 + 50)), *((int8x16_t *)a2 + 51)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v16, *((float32x4_t *)a2 + 50)))), (float32x4_t)vandq_s8(v17, v18))), *((float32x4_t *)a2 + 22)), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v19, 0x17uLL)));
        float32x4_t v22 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v20, *((float32x4_t *)a2 + 23)));
        float32x4_t v23 = vaddq_f32(v21, v22);
        float32x4_t v24 = vsubq_f32(vsubq_f32(v20, v15), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v22), v20));
        float32x4_t v25 = vmulq_f32(v24, v24);
        float32x4_t v26 = vmulq_n_f32(vaddq_f32(v23, vmulq_f32(v24, vaddq_f32(*((float32x4_t *)a2 + 61), vmulq_f32(v24, vaddq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 59), vmulq_f32(*((float32x4_t *)a2 + 60), v24)), vmulq_f32(v25, vaddq_f32(*((float32x4_t *)a2 + 57), vmulq_f32(*((float32x4_t *)a2 + 58), v24)))), vmulq_f32(vmulq_f32(v25, v25), vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 55), vmulq_f32(*((float32x4_t *)a2 + 56), v24)), vmulq_f32(
                                v25,
                                vaddq_f32(*((float32x4_t *)a2 + 53), vmulq_f32(*((float32x4_t *)a2 + 54), v24)))))))))),
                COERCE_FLOAT(*(_OWORD *)a2));
        float32x4_t v27 = vminq_f32(vmaxq_f32(v26, *((float32x4_t *)a2 + 62)), *((float32x4_t *)a2 + 63));
        float32x4_t v28 = vcvtq_f32_s32(vcvtq_s32_f32(v27));
        float32x4_t v29 = vsubq_f32(v28, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v28, v27)));
        float32x4_t v30 = vsubq_f32(v27, v29);
        float32x4_t v31 = vmulq_f32(v30, v30);
        int8x16_t v32 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 70), v29);
        *(int8x16_t *)(v7 + v10) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v11, vbslq_s8((int8x16_t)vcgtq_f32(v12, vsubq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v13.i8, 0), (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, vorrq_s8((int8x16_t)vcltzq_f32(v26), (int8x16_t)vcgezq_f32(v26))), v12), (int8x16_t)vmulq_f32(
                                                                                vaddq_f32(v15, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 71), v32)), vmulq_f32(vaddq_f32(v15, vmulq_f32(v30, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 68), vmulq_f32(v30, *((float32x4_t *)a2 + 69))), vmulq_f32(v31, vaddq_f32(vaddq_f32(
                                                                                              *((float32x4_t *)a2 + 66),
                                                                                              vmulq_f32(*((float32x4_t *)a2 + 67), v30)), vmulq_f32(v31, vaddq_f32(*((float32x4_t *)a2 + 64), vmulq_f32(*((float32x4_t *)a2+ 65), v30)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(vaddq_f32(v29, (float32x4_t)vandq_s8(v17, v32)))), 0x17uLL))), (int8x16_t)v26), *(float32x4_t *)a2, 3)));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v6;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Gettype2_fast_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v57 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v16 = *((float32x4_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v13, v14), v16);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v12, v14), v16);
      float32x4_t v20 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v18, v15)));
      float32x4_t v21 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v19, v15)));
      float32x4_t v22 = vcvtq_f32_s32(vcvtq_s32_f32(v20));
      float32x4_t v23 = vcvtq_f32_s32(vcvtq_s32_f32(v21));
      float32x4_t v24 = *((float32x4_t *)a2 + 7);
      float32x4_t v25 = *((float32x4_t *)a2 + 8);
      float32x4_t v26 = vrsqrteq_f32(vaddq_f32(v24, vsubq_f32(v20, v22)));
      float32x4_t v27 = vrsqrteq_f32(vaddq_f32(v24, vsubq_f32(v21, v23)));
      float32x4_t v28 = vaddq_f32(v25, v22);
      float32x4_t v29 = vaddq_f32(v25, v23);
      float32x4_t v30 = *((float32x4_t *)a2 + 9);
      float32x4_t v31 = *((float32x4_t *)a2 + 10);
      float32x4_t v32 = vmulq_n_f32(vsubq_f32(v28, vmulq_f32(v26, v30)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v33 = vmulq_n_f32(vsubq_f32(v29, vmulq_f32(v27, v30)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v34 = vcvtq_f32_s32(vcvtq_s32_f32(v32));
      float32x4_t v35 = vcvtq_f32_s32(vcvtq_s32_f32(v33));
      float32x4_t v36 = vsubq_f32(v34, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v34, v32)));
      float32x4_t v37 = vsubq_f32(v35, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v35, v33)));
      float32x4_t v38 = vsubq_f32(v32, v36);
      float32x4_t v39 = vsubq_f32(v33, v37);
      float32x4_t v40 = vaddq_f32(v31, v36);
      float32x4_t v41 = vaddq_f32(v31, v37);
      float32x4_t v42 = *((float32x4_t *)a2 + 11);
      float32x4_t v43 = *((float32x4_t *)a2 + 12);
      float32x4_t v44 = vmulq_f32(vrecpeq_f32(vsubq_f32(v42, v38)), v43);
      float32x4_t v45 = vmulq_f32(vrecpeq_f32(vsubq_f32(v42, v39)), v43);
      float32x4_t v46 = vmaxq_f32(vaddq_f32(v40, vmulq_f32(v44, v44)), v14);
      float32x4_t v47 = vmaxq_f32(vaddq_f32(v41, vmulq_f32(v45, v45)), v14);
      float32x4_t v48 = *((float32x4_t *)a2 + 13);
      float32x4_t v49 = *((float32x4_t *)a2 + 14);
      float32x4_t v50 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1);
      int8x16_t v51 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbicq_s8(*((int8x16_t *)a2 + 3), *((int8x16_t *)a2 + 74)), 0);
      float32x4_t v52 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v19, v50)), v51, (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v47, v48), v49)), *(float32x4_t *)a2, 3));
      int8x16_t v53 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v50)), v51, (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v46, v48), v49)), *(float32x4_t *)a2, 3)), v16);
      int8x16_t v54 = *((int8x16_t *)a2 + 15);
      float32x4_t v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      float32x4_t v56 = (int8x16_t *)(v6 + v11);
      v56[-1] = vbslq_s8(v54, (int8x16_t)v13, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v55, (float32x4_t)vbslq_s8(v54, (int8x16_t)v13, v53)), v14), v16));
      *float32x4_t v56 = vbslq_s8(v54, (int8x16_t)v12, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v55, (float32x4_t)vbslq_s8(v54, (int8x16_t)v12, (int8x16_t)vminq_f32(v52, v16))), v14), v16));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v57 = -v10;
    if (v57 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v58 = 16 * v57;
    float32x4_t v59 = *(float32x4_t *)(v7 + v58);
    float32x4_t v60 = *((float32x4_t *)a2 + 75);
    float32x4_t v61 = *((float32x4_t *)a2 + 5);
    float32x4_t v62 = vminq_f32(vmaxq_f32(v59, v60), v61);
    float32x4_t v63 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1))));
    float32x4_t v64 = vcvtq_f32_s32(vcvtq_s32_f32(v63));
    float32x4_t v65 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v64), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v63, v64))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
    float32x4_t v66 = vcvtq_f32_s32(vcvtq_s32_f32(v65));
    float32x4_t v67 = vsubq_f32(v66, (float32x4_t)vandq_s8((int8x16_t)v61, (int8x16_t)vcgtq_f32(v66, v65)));
    float32x4_t v68 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v65, v67))), *((float32x4_t *)a2 + 12));
    *(int8x16_t *)(v6 + v58) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v59, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v59, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60, vsubq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbicq_s8(*((int8x16_t *)a2 + 3), *((int8x16_t *)a2 + 74)), 0), (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v68, v68), vaddq_f32(*((float32x4_t *)a2 + 10), v67)), v60), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))), *(float32x4_t *)a2, 3)), v61))), v60), v61));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype2_fixed_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v57 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v16 = *((float32x4_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v13, v14), v16);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v12, v14), v16);
      float32x4_t v20 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v18, v15)));
      float32x4_t v21 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v19, v15)));
      float32x4_t v22 = vcvtq_f32_s32(vcvtq_s32_f32(v20));
      float32x4_t v23 = vcvtq_f32_s32(vcvtq_s32_f32(v21));
      float32x4_t v24 = *((float32x4_t *)a2 + 7);
      float32x4_t v25 = *((float32x4_t *)a2 + 8);
      float32x4_t v26 = vrsqrteq_f32(vaddq_f32(v24, vsubq_f32(v20, v22)));
      float32x4_t v27 = vrsqrteq_f32(vaddq_f32(v24, vsubq_f32(v21, v23)));
      float32x4_t v28 = vaddq_f32(v25, v22);
      float32x4_t v29 = vaddq_f32(v25, v23);
      float32x4_t v30 = *((float32x4_t *)a2 + 9);
      float32x4_t v31 = *((float32x4_t *)a2 + 10);
      float32x4_t v32 = vmulq_n_f32(vsubq_f32(v28, vmulq_f32(v26, v30)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v33 = vmulq_n_f32(vsubq_f32(v29, vmulq_f32(v27, v30)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v34 = vcvtq_f32_s32(vcvtq_s32_f32(v32));
      float32x4_t v35 = vcvtq_f32_s32(vcvtq_s32_f32(v33));
      float32x4_t v36 = vsubq_f32(v34, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v34, v32)));
      float32x4_t v37 = vsubq_f32(v35, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v35, v33)));
      float32x4_t v38 = vsubq_f32(v32, v36);
      float32x4_t v39 = vsubq_f32(v33, v37);
      float32x4_t v40 = vaddq_f32(v31, v36);
      float32x4_t v41 = vaddq_f32(v31, v37);
      float32x4_t v42 = *((float32x4_t *)a2 + 11);
      float32x4_t v43 = *((float32x4_t *)a2 + 12);
      float32x4_t v44 = vmulq_f32(vrecpeq_f32(vsubq_f32(v42, v38)), v43);
      float32x4_t v45 = vmulq_f32(vrecpeq_f32(vsubq_f32(v42, v39)), v43);
      float32x4_t v46 = vmaxq_f32(vaddq_f32(v40, vmulq_f32(v44, v44)), v14);
      float32x4_t v47 = vmaxq_f32(vaddq_f32(v41, vmulq_f32(v45, v45)), v14);
      float32x4_t v48 = *((float32x4_t *)a2 + 13);
      float32x4_t v49 = *((float32x4_t *)a2 + 14);
      float32x4_t v50 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1);
      int8x16_t v51 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbicq_s8(*((int8x16_t *)a2 + 3), *((int8x16_t *)a2 + 74)), 0);
      float32x4_t v52 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v19, v50)), v51, (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v47, v48), v49)), *(float32x4_t *)a2, 3));
      int8x16_t v53 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v50)), v51, (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v46, v48), v49)), *(float32x4_t *)a2, 3)), v16);
      int8x16_t v54 = *((int8x16_t *)a2 + 15);
      float32x4_t v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      float32x4_t v56 = (int8x16_t *)(v6 + v11);
      v56[-1] = vbslq_s8(v54, (int8x16_t)v13, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v55, (float32x4_t)vbslq_s8(v54, (int8x16_t)v13, v53)), v14), v16));
      *float32x4_t v56 = vbslq_s8(v54, (int8x16_t)v12, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v55, (float32x4_t)vbslq_s8(v54, (int8x16_t)v12, (int8x16_t)vminq_f32(v52, v16))), v14), v16));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v57 = -v10;
    if (v57 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v58 = 16 * v57;
    float32x4_t v59 = *(float32x4_t *)(v7 + v58);
    float32x4_t v60 = *((float32x4_t *)a2 + 75);
    float32x4_t v61 = *((float32x4_t *)a2 + 5);
    float32x4_t v62 = vminq_f32(vmaxq_f32(v59, v60), v61);
    float32x4_t v63 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1))));
    float32x4_t v64 = vcvtq_f32_s32(vcvtq_s32_f32(v63));
    float32x4_t v65 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v64), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v63, v64))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
    float32x4_t v66 = vcvtq_f32_s32(vcvtq_s32_f32(v65));
    float32x4_t v67 = vsubq_f32(v66, (float32x4_t)vandq_s8((int8x16_t)v61, (int8x16_t)vcgtq_f32(v66, v65)));
    float32x4_t v68 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v65, v67))), *((float32x4_t *)a2 + 12));
    *(int8x16_t *)(v6 + v58) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v59, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v59, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60, vsubq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbicq_s8(*((int8x16_t *)a2 + 3), *((int8x16_t *)a2 + 74)), 0), (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v68, v68), vaddq_f32(*((float32x4_t *)a2 + 10), v67)), v60), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))), *(float32x4_t *)a2, 3)), v61))), v60), v61));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype2_nice_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = 16 * *((int *)a1 + 22);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        float32x4_t v12 = *((float32x4_t *)a2 + 75);
        float32x4_t v13 = *((float32x4_t *)a2 + 5);
        float32x4_t v14 = vminq_f32(vmaxq_f32(v11, v12), v13);
        float32x4_t v15 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v13, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v12)), v12), (int8x16_t)v13, (int8x16_t)vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
        float32x4_t v16 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v15), (int8x16_t)v13);
        float32x4_t v17 = (float32x4_t)vandq_s8((int8x16_t)v13, (int8x16_t)vcgtq_f32(v16, *((float32x4_t *)a2 + 23)));
        float32x4_t v18 = vsubq_f32(vsubq_f32(v16, v13), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v17), v16));
        float32x4_t v19 = vmulq_f32(v18, v18);
        float32x4_t v20 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v15, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v15))), *((float32x4_t *)a2 + 22)), v17), vmulq_f32(v18, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v18, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v18)),
                            vmulq_f32(v19, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v18)), vmulq_f32(v19, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v18)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
        float32x4_t v21 = vcvtq_f32_s32(vcvtq_s32_f32(v20));
        float32x4_t v22 = vsubq_f32(v21, (float32x4_t)vandq_s8((int8x16_t)v13, (int8x16_t)vcgtq_f32(v21, v20)));
        float32x4_t v23 = vsubq_f32(v20, v22);
        *(int8x16_t *)(v7 + v10) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v11, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v11, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v12, vsubq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbicq_s8(*((int8x16_t *)a2 + 3), *((int8x16_t *)a2 + 74)), 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v13, vmulq_f32(v23, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v23, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v23)), vmulq_f32(vmulq_f32(v23, v23), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v23)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v22)), 0x17uLL)), *(float32x4_t *)a2, 3)), v13))), v12), v13));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v6;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Gettype2_half_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v67 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v17 = vminq_f32(vmaxq_f32(v12, v14), v15);
      float32x4_t v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v19 = vaddq_f32(v16, v18);
      float32x4_t v20 = vaddq_f32(v17, v18);
      int8x16_t v21 = *((int8x16_t *)a2 + 19);
      float32x4_t v22 = *((float32x4_t *)a2 + 20);
      float32x4_t v23 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v19), (int8x16_t)v15);
      float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v20), (int8x16_t)v15);
      int8x16_t v25 = *((int8x16_t *)a2 + 21);
      float32x4_t v26 = *((float32x4_t *)a2 + 22);
      float32x4_t v27 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v22, v20)));
      float32x4_t v28 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v19, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v22, v19))), v26);
      float32x4_t v29 = *((float32x4_t *)a2 + 23);
      float32x4_t v30 = *((float32x4_t *)a2 + 24);
      float32x4_t v31 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v23, v29));
      float32x4_t v32 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v24, v29));
      float32x4_t v33 = vaddq_f32(v28, v31);
      float32x4_t v34 = vaddq_f32(vsubq_f32(v27, v26), v32);
      float32x4_t v35 = vsubq_f32(vsubq_f32(v23, v15), vmulq_f32(vmulq_f32(v30, v31), v23));
      float32x4_t v36 = vsubq_f32(vsubq_f32(v24, v15), vmulq_f32(vmulq_f32(v30, v32), v24));
      float32x4_t v37 = *((float32x4_t *)a2 + 25);
      float32x4_t v38 = *((float32x4_t *)a2 + 26);
      float32x4_t v39 = *((float32x4_t *)a2 + 27);
      float32x4_t v40 = *((float32x4_t *)a2 + 28);
      float32x4_t v42 = *((float32x4_t *)a2 + 29);
      float32x4_t v41 = *((float32x4_t *)a2 + 30);
      float32x4_t v43 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v33, vmulq_f32(v35, vaddq_f32(vaddq_f32(v39, vmulq_f32(v40, v35)), vmulq_f32(vmulq_f32(v35, v35), vaddq_f32(v37, vmulq_f32(v38, v35)))))), COERCE_FLOAT(*(_OWORD *)a2)), v42);
      float32x4_t v44 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v34, vmulq_f32(v36, vaddq_f32(vaddq_f32(v39, vmulq_f32(v40, v36)), vmulq_f32(vmulq_f32(v36, v36), vaddq_f32(v37, vmulq_f32(v38, v36)))))), COERCE_FLOAT(*(_OWORD *)a2)), v42);
      float32x4_t v45 = vcvtq_f32_s32(vcvtq_s32_f32(v43));
      float32x4_t v46 = vcvtq_f32_s32(vcvtq_s32_f32(v44));
      float32x4_t v47 = vsubq_f32(v45, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v45, v43)));
      float32x4_t v48 = vsubq_f32(v46, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v46, v44)));
      float32x4_t v49 = vsubq_f32(v43, v47);
      float32x4_t v50 = vsubq_f32(v44, v48);
      float32x4_t v51 = *((float32x4_t *)a2 + 31);
      float32x4_t v52 = *((float32x4_t *)a2 + 32);
      float32x4_t v53 = vaddq_f32(v41, vmulq_f32(v51, v49));
      float32x4_t v54 = vmulq_f32(v50, vaddq_f32(v52, vmulq_f32(v50, vaddq_f32(v41, vmulq_f32(v51, v50)))));
      int32x4_t v55 = vcvtq_s32_f32(v47);
      int32x4_t v56 = vcvtq_s32_f32(v48);
      int32x4_t v57 = *((int32x4_t *)a2 + 33);
      float32x4_t v58 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1);
      int8x16_t v59 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v58));
      int8x16_t v60 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v17, v58));
      int8x16_t v61 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbicq_s8(*((int8x16_t *)a2 + 3), *((int8x16_t *)a2 + 74)), 0);
      int8x16_t v62 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v60, v61, (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v15, v54), (float32x4_t)vshlq_n_s32(vaddq_s32(v57, v56), 0x17uLL)), *(float32x4_t *)a2, 3)), v15);
      int8x16_t v63 = *((int8x16_t *)a2 + 15);
      float32x4_t v64 = (float32x4_t)vbslq_s8(v63, (int8x16_t)v13, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v59, v61, (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v15, vmulq_f32(v49, vaddq_f32(v52, vmulq_f32(v49, v53)))), (float32x4_t)vshlq_n_s32(vaddq_s32(v57, v55), 0x17uLL)), *(float32x4_t *)a2, 3)), v15));
      float32x4_t v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      float32x4_t v66 = (int8x16_t *)(v6 + v11);
      v66[-1] = vbslq_s8(v63, (int8x16_t)v13, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v65, v64), v14), v15));
      *float32x4_t v66 = vbslq_s8(v63, (int8x16_t)v12, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v65, (float32x4_t)vbslq_s8(v63, (int8x16_t)v12, v62)), v14), v15));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v67 = -v10;
    if (v67 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v68 = 16 * v67;
    float32x4_t v69 = *(float32x4_t *)(v7 + v68);
    float32x4_t v70 = *((float32x4_t *)a2 + 75);
    float32x4_t v71 = *((float32x4_t *)a2 + 5);
    float32x4_t v72 = vminq_f32(vmaxq_f32(v69, v70), v71);
    float32x4_t v73 = vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1));
    float32x4_t v74 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v73), (int8x16_t)v71);
    float32x4_t v75 = (float32x4_t)vandq_s8((int8x16_t)v71, (int8x16_t)vcgtq_f32(v74, *((float32x4_t *)a2 + 23)));
    float32x4_t v76 = vsubq_f32(vsubq_f32(v74, v71), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v75), v74));
    float32x4_t v77 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v73, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v73))), *((float32x4_t *)a2 + 22)), v75), vmulq_f32(v76, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(*((float32x4_t *)a2 + 28), v76)), vmulq_f32(vmulq_f32(v76, v76), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v76)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v77));
    float32x4_t v79 = vsubq_f32(v78, (float32x4_t)vandq_s8((int8x16_t)v71, (int8x16_t)vcgtq_f32(v78, v77)));
    float32x4_t v80 = vsubq_f32(v77, v79);
    *(int8x16_t *)(v6 + v68) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v69, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v69, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v70, vsubq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbicq_s8(*((int8x16_t *)a2 + 3), *((int8x16_t *)a2 + 74)), 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v71, vmulq_f32(v80, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v80, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v80)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v79)), 0x17uLL)), *(float32x4_t *)a2, 3)), v71))), v70), v71));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype2_half_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v66 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      int32x4_t v15 = (int32x4_t)vbicq_s8((int8x16_t)v14, *((int8x16_t *)a2 + 74));
      float32x4_t v16 = (float32x4_t)vdupq_laneq_s32(v15, 3);
      float32x4_t v17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v13, v14), v16);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v12, v14), v16);
      float32x4_t v20 = vaddq_f32(v18, v17);
      float32x4_t v21 = vaddq_f32(v19, v17);
      int8x16_t v22 = *((int8x16_t *)a2 + 19);
      float32x4_t v23 = *((float32x4_t *)a2 + 20);
      float32x4_t v24 = *((float32x4_t *)a2 + 5);
      float32x4_t v25 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v20), (int8x16_t)v24);
      float32x4_t v26 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v21), (int8x16_t)v24);
      int8x16_t v27 = *((int8x16_t *)a2 + 21);
      float32x4_t v28 = *((float32x4_t *)a2 + 22);
      float32x4_t v29 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v23, v20)));
      float32x4_t v30 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v21, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v23, v21)));
      float32x4_t v31 = *((float32x4_t *)a2 + 23);
      float32x4_t v32 = *((float32x4_t *)a2 + 24);
      float32x4_t v33 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v25, v31));
      float32x4_t v34 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v26, v31));
      float32x4_t v35 = vaddq_f32(vsubq_f32(v29, v28), v33);
      float32x4_t v36 = vsubq_f32(vsubq_f32(v25, v24), vmulq_f32(vmulq_f32(v32, v33), v25));
      float32x4_t v37 = vsubq_f32(vsubq_f32(v26, v24), vmulq_f32(vmulq_f32(v32, v34), v26));
      float32x4_t v38 = *((float32x4_t *)a2 + 25);
      float32x4_t v39 = *((float32x4_t *)a2 + 26);
      float32x4_t v40 = *((float32x4_t *)a2 + 27);
      float32x4_t v41 = *((float32x4_t *)a2 + 28);
      float32x4_t v42 = vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(v30, v28), v34), vmulq_f32(v37, vaddq_f32(vaddq_f32(v40, vmulq_f32(v37, v41)), vmulq_f32(vmulq_f32(v37, v37), vaddq_f32(v38, vmulq_f32(v39, v37)))))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v43 = *((float32x4_t *)a2 + 29);
      float32x4_t v44 = *((float32x4_t *)a2 + 30);
      float32x4_t v45 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v35, vmulq_f32(v36, vaddq_f32(vaddq_f32(v40, vmulq_f32(v36, v41)), vmulq_f32(vmulq_f32(v36, v36), vaddq_f32(v38, vmulq_f32(v39, v36)))))), COERCE_FLOAT(*(_OWORD *)a2)), v43);
      float32x4_t v46 = vmaxq_f32(v42, v43);
      float32x4_t v47 = vcvtq_f32_s32(vcvtq_s32_f32(v45));
      float32x4_t v48 = vcvtq_f32_s32(vcvtq_s32_f32(v46));
      float32x4_t v49 = vsubq_f32(v47, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v47, v45)));
      float32x4_t v50 = vsubq_f32(v48, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v48, v46)));
      float32x4_t v51 = vsubq_f32(v45, v49);
      float32x4_t v52 = vsubq_f32(v46, v50);
      float32x4_t v53 = *((float32x4_t *)a2 + 31);
      float32x4_t v54 = *((float32x4_t *)a2 + 32);
      float32x4_t v55 = vmulq_f32(v52, vaddq_f32(v54, vmulq_f32(v52, vaddq_f32(v44, vmulq_f32(v53, v52)))));
      float32x4_t v56 = vaddq_f32(v24, vmulq_f32(v51, vaddq_f32(v54, vmulq_f32(v51, vaddq_f32(v44, vmulq_f32(v53, v51))))));
      int32x4_t v57 = vcvtq_s32_f32(v50);
      int32x4_t v58 = *((int32x4_t *)a2 + 33);
      float32x4_t v59 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1);
      int8x16_t v60 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v15.i8, 0);
      int8x16_t v61 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v59)), v60, (int8x16_t)vmulq_laneq_f32(vmulq_f32(v56, (float32x4_t)vshlq_n_s32(vaddq_s32(v58, vcvtq_s32_f32(v49)), 0x17uLL)), *(float32x4_t *)a2, 3));
      int8x16_t v62 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v19, v59)), v60, (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v24, v55), (float32x4_t)vshlq_n_s32(vaddq_s32(v58, v57), 0x17uLL)), *(float32x4_t *)a2, 3));
      int8x16_t v63 = *((int8x16_t *)a2 + 15);
      float32x4_t v64 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      float32x4_t v65 = (int8x16_t *)(v6 + v11);
      v65[-1] = vbslq_s8(v63, (int8x16_t)v13, (int8x16_t)vaddq_f32(v64, (float32x4_t)vbslq_s8(v63, (int8x16_t)v13, v61)));
      *float32x4_t v65 = vbslq_s8(v63, (int8x16_t)v12, (int8x16_t)vaddq_f32(v64, (float32x4_t)vbslq_s8(v63, (int8x16_t)v12, v62)));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v66 = -v10;
    if (v66 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v67 = 16 * v66;
    float32x4_t v68 = *(float32x4_t *)(v7 + v67);
    float32x4_t v69 = *((float32x4_t *)a2 + 75);
    int32x4_t v70 = (int32x4_t)vbicq_s8((int8x16_t)v69, *((int8x16_t *)a2 + 74));
    float32x4_t v71 = vminq_f32(vmaxq_f32(v68, v69), (float32x4_t)vdupq_laneq_s32(v70, 3));
    float32x4_t v72 = vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1));
    float32x4_t v73 = *((float32x4_t *)a2 + 5);
    float32x4_t v74 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v72), (int8x16_t)v73);
    float32x4_t v75 = (float32x4_t)vandq_s8((int8x16_t)v73, (int8x16_t)vcgtq_f32(v74, *((float32x4_t *)a2 + 23)));
    float32x4_t v76 = vsubq_f32(vsubq_f32(v74, v73), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v75), v74));
    float32x4_t v77 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v72, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v72))), *((float32x4_t *)a2 + 22)), v75), vmulq_f32(v76, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v76, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v76, v76), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v76)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v77));
    float32x4_t v79 = vsubq_f32(v78, (float32x4_t)vandq_s8((int8x16_t)v73, (int8x16_t)vcgtq_f32(v78, v77)));
    float32x4_t v80 = vsubq_f32(v77, v79);
    *(int8x16_t *)(v6 + v67) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v68, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v68, vbslq_s8((int8x16_t)vcgtq_f32(v69, vsubq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v70.i8, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(
                                                                                v73,
                                                                                vmulq_f32(v80, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v80, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v80)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v79)), 0x17uLL)), *(float32x4_t *)a2, 3)))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype2_nice_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = 16 * *((int *)a1 + 22);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        float32x4_t v12 = *((float32x4_t *)a2 + 75);
        int32x4_t v13 = (int32x4_t)vbicq_s8((int8x16_t)v12, *((int8x16_t *)a2 + 74));
        float32x4_t v14 = vminq_f32(vmaxq_f32(v11, v12), (float32x4_t)vdupq_laneq_s32(v13, 3));
        float32x4_t v15 = *((float32x4_t *)a2 + 5);
        float32x4_t v16 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v12)), v12), (int8x16_t)v15, (int8x16_t)vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
        float32x4_t v17 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v16), (int8x16_t)v15);
        float32x4_t v18 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v17, *((float32x4_t *)a2 + 23)));
        float32x4_t v19 = vsubq_f32(vsubq_f32(v17, v15), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v18), v17));
        float32x4_t v20 = vmulq_f32(v19, v19);
        float32x4_t v21 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v16, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v16))), *((float32x4_t *)a2 + 22)), v18), vmulq_f32(v19, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v19, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v19)),
                            vmulq_f32(v20, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v19)), vmulq_f32(v20, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v19)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
        float32x4_t v22 = vcvtq_f32_s32(vcvtq_s32_f32(v21));
        float32x4_t v23 = vsubq_f32(v22, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v22, v21)));
        float32x4_t v24 = vsubq_f32(v21, v23);
        *(int8x16_t *)(v7 + v10) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v11, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v11, vbslq_s8((int8x16_t)vcgtq_f32(v12, vsubq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v13.i8, 0), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(
                                                                                    v15,
                                                                                    vmulq_f32(v24, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v24, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v24)), vmulq_f32(vmulq_f32(v24, v24), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2+ 45), v24)))))))),
                                                                                  (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v23)), 0x17uLL)), *(float32x4_t *)a2, 3)))));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v6;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Gettype2_float_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = 16 * *((int *)a1 + 22);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        float32x4_t v12 = *((float32x4_t *)a2 + 75);
        int32x4_t v13 = (int32x4_t)vbicq_s8((int8x16_t)v12, *((int8x16_t *)a2 + 74));
        float32x4_t v14 = vminq_f32(vmaxq_f32(v11, v12), (float32x4_t)vdupq_laneq_s32(v13, 3));
        float32x4_t v15 = *((float32x4_t *)a2 + 5);
        float32x4_t v16 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v12)), v12), (int8x16_t)v15, (int8x16_t)vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
        int8x16_t v17 = *((int8x16_t *)a2 + 52);
        int8x16_t v18 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v16);
        int8x16_t v19 = (int8x16_t)vmulq_f32(v16, vaddq_f32(v15, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 49), v18)));
        float32x4_t v20 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), v19), (int8x16_t)v15);
        float32x4_t v21 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v16, *((float32x4_t *)a2 + 21))), vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v16, *((float32x4_t *)a2 + 50)), *((int8x16_t *)a2 + 51)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v16, *((float32x4_t *)a2 + 50)))), (float32x4_t)vandq_s8(v17, v18))), *((float32x4_t *)a2 + 22)), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v19, 0x17uLL)));
        float32x4_t v22 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v20, *((float32x4_t *)a2 + 23)));
        float32x4_t v23 = vaddq_f32(v21, v22);
        float32x4_t v24 = vsubq_f32(vsubq_f32(v20, v15), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v22), v20));
        float32x4_t v25 = vmulq_f32(v24, v24);
        float32x4_t v26 = vmulq_n_f32(vaddq_f32(v23, vmulq_f32(v24, vaddq_f32(*((float32x4_t *)a2 + 61), vmulq_f32(v24, vaddq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 59), vmulq_f32(*((float32x4_t *)a2 + 60), v24)), vmulq_f32(v25, vaddq_f32(*((float32x4_t *)a2 + 57), vmulq_f32(*((float32x4_t *)a2 + 58), v24)))), vmulq_f32(vmulq_f32(v25, v25), vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 55), vmulq_f32(*((float32x4_t *)a2 + 56), v24)), vmulq_f32(
                                v25,
                                vaddq_f32(*((float32x4_t *)a2 + 53), vmulq_f32(*((float32x4_t *)a2 + 54), v24)))))))))),
                COERCE_FLOAT(*(_OWORD *)a2));
        float32x4_t v27 = vminq_f32(vmaxq_f32(v26, *((float32x4_t *)a2 + 62)), *((float32x4_t *)a2 + 63));
        float32x4_t v28 = vcvtq_f32_s32(vcvtq_s32_f32(v27));
        float32x4_t v29 = vsubq_f32(v28, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v28, v27)));
        float32x4_t v30 = vsubq_f32(v27, v29);
        float32x4_t v31 = vmulq_f32(v30, v30);
        int8x16_t v32 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 70), v29);
        *(int8x16_t *)(v7 + v10) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v11, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v11, vbslq_s8((int8x16_t)vcgtq_f32(v12, vsubq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v13.i8, 0), (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, vorrq_s8((int8x16_t)vcltzq_f32(v26), (int8x16_t)vcgezq_f32(v26))), v12),
                                                                                               (int8x16_t)vmulq_f32(vaddq_f32(v15, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 71), v32)), vmulq_f32(vaddq_f32(v15, vmulq_f32(v30, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 68), vmulq_f32(v30, *((float32x4_t *)a2 + 69))), vmulq_f32(v31, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 66), vmulq_f32(*((float32x4_t *)a2 + 67), v30)), vmulq_f32(v31, vaddq_f32(*((float32x4_t *)a2 + 64), vmulq_f32(*((float32x4_t *)a2 + 65), v30)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(vaddq_f32(v29, (float32x4_t)vandq_s8(v17, v32)))), 0x17uLL))),
                                                                                               (int8x16_t)v26),
                                                                                *(float32x4_t *)a2,
                                                                                3)))));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v6;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Gettype3_fast_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v75) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v10 + 32);
      float32x4_t v15 = *((float32x4_t *)a2 + 75);
      float32x4_t v16 = *((float32x4_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v12, v15), v16);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v13, v15), v16);
      long long v20 = *((_OWORD *)a2 + 1);
      float32x4_t v21 = vminq_f32(vmaxq_f32(v14, v15), v16);
      float32x4_t v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v23 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v18, v22)));
      float32x4_t v24 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v19, v22)));
      float32x4_t v25 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v21, v22)));
      float32x4_t v26 = vcvtq_f32_s32(vcvtq_s32_f32(v23));
      float32x4_t v27 = vcvtq_f32_s32(vcvtq_s32_f32(v24));
      float32x4_t v28 = vcvtq_f32_s32(vcvtq_s32_f32(v25));
      float32x4_t v29 = *((float32x4_t *)a2 + 7);
      float32x4_t v30 = *((float32x4_t *)a2 + 8);
      float32x4_t v31 = vrsqrteq_f32(vaddq_f32(v29, vsubq_f32(v23, v26)));
      float32x4_t v32 = vrsqrteq_f32(vaddq_f32(v29, vsubq_f32(v24, v27)));
      float32x4_t v33 = vaddq_f32(v30, v26);
      float32x4_t v34 = vaddq_f32(v30, v27);
      float32x4_t v35 = vrsqrteq_f32(vaddq_f32(v29, vsubq_f32(v25, v28)));
      float32x4_t v36 = vaddq_f32(v30, v28);
      float32x4_t v37 = *((float32x4_t *)a2 + 9);
      float32x4_t v38 = *((float32x4_t *)a2 + 10);
      float32x4_t v39 = vmulq_n_f32(vsubq_f32(v33, vmulq_f32(v31, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v40 = vmulq_n_f32(vsubq_f32(v34, vmulq_f32(v32, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v41 = vmulq_n_f32(vsubq_f32(v36, vmulq_f32(v35, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v42 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
      float32x4_t v43 = vcvtq_f32_s32(vcvtq_s32_f32(v40));
      float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
      float32x4_t v45 = vsubq_f32(v42, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v42, v39)));
      float32x4_t v46 = vsubq_f32(v43, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v43, v40)));
      float32x4_t v47 = vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v44, v41)));
      float32x4_t v48 = vsubq_f32(v39, v45);
      float32x4_t v49 = vsubq_f32(v40, v46);
      float32x4_t v50 = vsubq_f32(v41, v47);
      float32x4_t v51 = vaddq_f32(v38, v45);
      float32x4_t v52 = vaddq_f32(v38, v46);
      float32x4_t v53 = vaddq_f32(v38, v47);
      float32x4_t v54 = *((float32x4_t *)a2 + 11);
      float32x4_t v55 = *((float32x4_t *)a2 + 12);
      float32x4_t v56 = vmulq_f32(vrecpeq_f32(vsubq_f32(v54, v48)), v55);
      float32x4_t v57 = vmulq_f32(vrecpeq_f32(vsubq_f32(v54, v49)), v55);
      float32x4_t v58 = vmulq_f32(vrecpeq_f32(vsubq_f32(v54, v50)), v55);
      float32x4_t v59 = vmaxq_f32(vaddq_f32(v51, vmulq_f32(v56, v56)), v15);
      float32x4_t v60 = vmaxq_f32(vaddq_f32(v52, vmulq_f32(v57, v57)), v15);
      float32x4_t v61 = *((float32x4_t *)a2 + 13);
      float32x4_t v62 = *((float32x4_t *)a2 + 14);
      float32x4_t v63 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v59, v61), v62));
      float32x4_t v64 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v60, v61), v62));
      float32x4_t v65 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v53, vmulq_f32(v58, v58)), v15), v61), v62));
      int8x16_t v66 = (int8x16_t)vmulq_n_f32(v18, *(float *)&v20);
      int8x16_t v67 = (int8x16_t)vmulq_n_f32(v19, *(float *)&v20);
      int8x16_t v68 = (int8x16_t)vmulq_n_f32(v21, *(float *)&v20);
      float32x4_t v69 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v20, 1);
      int8x16_t v70 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v15, vsubq_f32(v18, v69)), v66, (int8x16_t)vmulq_laneq_f32(v63, *(float32x4_t *)a2, 3)), v16);
      int8x16_t v71 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v15, vsubq_f32(v19, v69)), v67, (int8x16_t)vmulq_laneq_f32(v64, *(float32x4_t *)a2, 3)), v16);
      int8x16_t v72 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v15, vsubq_f32(v21, v69)), v68, (int8x16_t)vmulq_laneq_f32(v65, *(float32x4_t *)a2, 3)), v16);
      int8x16_t v73 = *((int8x16_t *)a2 + 15);
      float32x4_t v74 = (int8x16_t *)(v6 + v10);
      *float32x4_t v74 = vbslq_s8(v73, (int8x16_t)v12, v70);
      v74[1] = vbslq_s8(v73, (int8x16_t)v13, v71);
      v74[2] = vbslq_s8(v73, (int8x16_t)v14, v72);
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v75) = -v11;
    if ((int)v75 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v75 = v75;
    do
    {
      float32x4_t v76 = *(float32x4_t *)(v7 + 16 * v75);
      float32x4_t v77 = *((float32x4_t *)a2 + 75);
      float32x4_t v78 = *((float32x4_t *)a2 + 5);
      float32x4_t v79 = vminq_f32(vmaxq_f32(v76, v77), v78);
      float32x4_t v80 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v79, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1))));
      float32x4_t v81 = vcvtq_f32_s32(vcvtq_s32_f32(v80));
      float32x4_t v82 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v81), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v80, v81))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v83 = vcvtq_f32_s32(vcvtq_s32_f32(v82));
      float32x4_t v84 = vsubq_f32(v83, (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v83, v82)));
      float32x4_t v85 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v82, v84))), *((float32x4_t *)a2 + 12));
      *(int8x16_t *)(v6 + 16 * v75++) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v76, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v77, vsubq_f32(v79, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v79, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v85, v85), vaddq_f32(*((float32x4_t *)a2 + 10), v84)), v77), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))),
                                                                                   *(float32x4_t *)a2,
                                                                                   3)),
                                                       v78));
    }
    while (v75 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype3_fixed_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v75) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v10 + 32);
      float32x4_t v15 = *((float32x4_t *)a2 + 75);
      float32x4_t v16 = *((float32x4_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v12, v15), v16);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v13, v15), v16);
      long long v20 = *((_OWORD *)a2 + 1);
      float32x4_t v21 = vminq_f32(vmaxq_f32(v14, v15), v16);
      float32x4_t v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v23 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v18, v22)));
      float32x4_t v24 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v19, v22)));
      float32x4_t v25 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v21, v22)));
      float32x4_t v26 = vcvtq_f32_s32(vcvtq_s32_f32(v23));
      float32x4_t v27 = vcvtq_f32_s32(vcvtq_s32_f32(v24));
      float32x4_t v28 = vcvtq_f32_s32(vcvtq_s32_f32(v25));
      float32x4_t v29 = *((float32x4_t *)a2 + 7);
      float32x4_t v30 = *((float32x4_t *)a2 + 8);
      float32x4_t v31 = vrsqrteq_f32(vaddq_f32(v29, vsubq_f32(v23, v26)));
      float32x4_t v32 = vrsqrteq_f32(vaddq_f32(v29, vsubq_f32(v24, v27)));
      float32x4_t v33 = vaddq_f32(v30, v26);
      float32x4_t v34 = vaddq_f32(v30, v27);
      float32x4_t v35 = vrsqrteq_f32(vaddq_f32(v29, vsubq_f32(v25, v28)));
      float32x4_t v36 = vaddq_f32(v30, v28);
      float32x4_t v37 = *((float32x4_t *)a2 + 9);
      float32x4_t v38 = *((float32x4_t *)a2 + 10);
      float32x4_t v39 = vmulq_n_f32(vsubq_f32(v33, vmulq_f32(v31, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v40 = vmulq_n_f32(vsubq_f32(v34, vmulq_f32(v32, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v41 = vmulq_n_f32(vsubq_f32(v36, vmulq_f32(v35, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v42 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
      float32x4_t v43 = vcvtq_f32_s32(vcvtq_s32_f32(v40));
      float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
      float32x4_t v45 = vsubq_f32(v42, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v42, v39)));
      float32x4_t v46 = vsubq_f32(v43, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v43, v40)));
      float32x4_t v47 = vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v44, v41)));
      float32x4_t v48 = vsubq_f32(v39, v45);
      float32x4_t v49 = vsubq_f32(v40, v46);
      float32x4_t v50 = vsubq_f32(v41, v47);
      float32x4_t v51 = vaddq_f32(v38, v45);
      float32x4_t v52 = vaddq_f32(v38, v46);
      float32x4_t v53 = vaddq_f32(v38, v47);
      float32x4_t v54 = *((float32x4_t *)a2 + 11);
      float32x4_t v55 = *((float32x4_t *)a2 + 12);
      float32x4_t v56 = vmulq_f32(vrecpeq_f32(vsubq_f32(v54, v48)), v55);
      float32x4_t v57 = vmulq_f32(vrecpeq_f32(vsubq_f32(v54, v49)), v55);
      float32x4_t v58 = vmulq_f32(vrecpeq_f32(vsubq_f32(v54, v50)), v55);
      float32x4_t v59 = vmaxq_f32(vaddq_f32(v51, vmulq_f32(v56, v56)), v15);
      float32x4_t v60 = vmaxq_f32(vaddq_f32(v52, vmulq_f32(v57, v57)), v15);
      float32x4_t v61 = *((float32x4_t *)a2 + 13);
      float32x4_t v62 = *((float32x4_t *)a2 + 14);
      float32x4_t v63 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v59, v61), v62));
      float32x4_t v64 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v60, v61), v62));
      float32x4_t v65 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v53, vmulq_f32(v58, v58)), v15), v61), v62));
      int8x16_t v66 = (int8x16_t)vmulq_n_f32(v18, *(float *)&v20);
      int8x16_t v67 = (int8x16_t)vmulq_n_f32(v19, *(float *)&v20);
      int8x16_t v68 = (int8x16_t)vmulq_n_f32(v21, *(float *)&v20);
      float32x4_t v69 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v20, 1);
      int8x16_t v70 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v15, vsubq_f32(v18, v69)), v66, (int8x16_t)vmulq_laneq_f32(v63, *(float32x4_t *)a2, 3)), v16);
      int8x16_t v71 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v15, vsubq_f32(v19, v69)), v67, (int8x16_t)vmulq_laneq_f32(v64, *(float32x4_t *)a2, 3)), v16);
      int8x16_t v72 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v15, vsubq_f32(v21, v69)), v68, (int8x16_t)vmulq_laneq_f32(v65, *(float32x4_t *)a2, 3)), v16);
      int8x16_t v73 = *((int8x16_t *)a2 + 15);
      float32x4_t v74 = (int8x16_t *)(v6 + v10);
      *float32x4_t v74 = vbslq_s8(v73, (int8x16_t)v12, v70);
      v74[1] = vbslq_s8(v73, (int8x16_t)v13, v71);
      v74[2] = vbslq_s8(v73, (int8x16_t)v14, v72);
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v75) = -v11;
    if ((int)v75 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v75 = v75;
    do
    {
      float32x4_t v76 = *(float32x4_t *)(v7 + 16 * v75);
      float32x4_t v77 = *((float32x4_t *)a2 + 75);
      float32x4_t v78 = *((float32x4_t *)a2 + 5);
      float32x4_t v79 = vminq_f32(vmaxq_f32(v76, v77), v78);
      float32x4_t v80 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v79, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1))));
      float32x4_t v81 = vcvtq_f32_s32(vcvtq_s32_f32(v80));
      float32x4_t v82 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v81), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v80, v81))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v83 = vcvtq_f32_s32(vcvtq_s32_f32(v82));
      float32x4_t v84 = vsubq_f32(v83, (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v83, v82)));
      float32x4_t v85 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v82, v84))), *((float32x4_t *)a2 + 12));
      *(int8x16_t *)(v6 + 16 * v75++) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v76, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v77, vsubq_f32(v79, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v79, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v85, v85), vaddq_f32(*((float32x4_t *)a2 + 10), v84)), v77), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))),
                                                                                   *(float32x4_t *)a2,
                                                                                   3)),
                                                       v78));
    }
    while (v75 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype3_nice_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v83 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v12, v14), v15);
      long long v17 = *((_OWORD *)a2 + 1);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      int8x16_t v20 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v14)), v14);
      float32x4_t v21 = (float32x4_t)vbslq_s8(v20, (int8x16_t)v15, (int8x16_t)vaddq_f32(v16, v19));
      float32x4_t v22 = (float32x4_t)vbslq_s8(v20, (int8x16_t)v15, (int8x16_t)vaddq_f32(v18, v19));
      int8x16_t v23 = *((int8x16_t *)a2 + 19);
      float32x4_t v24 = *((float32x4_t *)a2 + 20);
      float32x4_t v25 = (float32x4_t)vorrq_s8(vandq_s8(v23, (int8x16_t)v21), (int8x16_t)v15);
      float32x4_t v26 = (float32x4_t)vorrq_s8(vandq_s8(v23, (int8x16_t)v22), (int8x16_t)v15);
      int8x16_t v27 = *((int8x16_t *)a2 + 21);
      float32x4_t v28 = *((float32x4_t *)a2 + 22);
      float32x4_t v29 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v22, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v24, v22)));
      float32x4_t v30 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v21, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v24, v21))), v28);
      float32x4_t v31 = *((float32x4_t *)a2 + 23);
      float32x4_t v32 = *((float32x4_t *)a2 + 24);
      float32x4_t v33 = vsubq_f32(v29, v28);
      float32x4_t v34 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v25, v31));
      float32x4_t v35 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v26, v31));
      float32x4_t v36 = vaddq_f32(v30, v34);
      float32x4_t v37 = vsubq_f32(vsubq_f32(v25, v15), vmulq_f32(vmulq_f32(v32, v34), v25));
      float32x4_t v38 = vsubq_f32(vsubq_f32(v26, v15), vmulq_f32(vmulq_f32(v32, v35), v26));
      float32x4_t v39 = vmulq_f32(v37, v37);
      float32x4_t v40 = *((float32x4_t *)a2 + 37);
      float32x4_t v41 = *((float32x4_t *)a2 + 38);
      float32x4_t v42 = *((float32x4_t *)a2 + 39);
      float32x4_t v43 = *((float32x4_t *)a2 + 40);
      float32x4_t v44 = vaddq_f32(v40, vmulq_f32(v41, v37));
      float32x4_t v45 = vaddq_f32(v42, vmulq_f32(v43, v37));
      float32x4_t v46 = vaddq_f32(v42, vmulq_f32(v43, v38));
      float32x4_t v47 = vaddq_f32(v40, vmulq_f32(v41, v38));
      float32x4_t v48 = *((float32x4_t *)a2 + 41);
      float32x4_t v49 = *((float32x4_t *)a2 + 42);
      float32x4_t v50 = vaddq_f32(v48, vmulq_f32(v49, v37));
      float32x4_t v51 = vaddq_f32(v48, vmulq_f32(v49, v38));
      float32x4_t v52 = vmulq_f32(v38, v38);
      float32x4_t v53 = vaddq_f32(v33, v35);
      float32x4_t v54 = vaddq_f32(v50, vmulq_f32(v39, vaddq_f32(v44, vmulq_f32(v39, v45))));
      float32x4_t v55 = vaddq_f32(v51, vmulq_f32(v52, vaddq_f32(v47, vmulq_f32(v52, v46))));
      float32x4_t v56 = *((float32x4_t *)a2 + 43);
      float32x4_t v57 = *((float32x4_t *)a2 + 44);
      float32x4_t v58 = vaddq_f32(v53, vmulq_f32(v38, vaddq_f32(v56, vmulq_f32(v38, v55))));
      float32x4_t v59 = vmulq_n_f32(vaddq_f32(v36, vmulq_f32(v37, vaddq_f32(v56, vmulq_f32(v37, v54)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v60 = *((float32x4_t *)a2 + 29);
      float32x4_t v61 = vmaxq_f32(v59, v60);
      float32x4_t v62 = vmaxq_f32(vmulq_n_f32(v58, COERCE_FLOAT(*(_OWORD *)a2)), v60);
      float32x4_t v63 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
      float32x4_t v64 = vcvtq_f32_s32(vcvtq_s32_f32(v62));
      float32x4_t v65 = vsubq_f32(v63, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v63, v61)));
      float32x4_t v66 = vsubq_f32(v64, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v64, v62)));
      float32x4_t v67 = vsubq_f32(v61, v65);
      float32x4_t v68 = vsubq_f32(v62, v66);
      float32x4_t v69 = *((float32x4_t *)a2 + 45);
      float32x4_t v70 = *((float32x4_t *)a2 + 46);
      float32x4_t v71 = *((float32x4_t *)a2 + 47);
      float32x4_t v72 = *((float32x4_t *)a2 + 48);
      int32x4_t v73 = *((int32x4_t *)a2 + 33);
      float32x4_t v74 = vmulq_f32(vaddq_f32(v15, vmulq_f32(v68, vaddq_f32(v72, vmulq_f32(v68, vaddq_f32(vaddq_f32(v70, vmulq_f32(v71, v68)), vmulq_f32(vmulq_f32(v68, v68), vaddq_f32(v57, vmulq_f32(v69, v68)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v73, vcvtq_s32_f32(v66)), 0x17uLL));
      int8x16_t v75 = (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v15, vmulq_f32(v67, vaddq_f32(v72, vmulq_f32(v67, vaddq_f32(vaddq_f32(v70, vmulq_f32(v67, v71)), vmulq_f32(vmulq_f32(v67, v67), vaddq_f32(v57, vmulq_f32(v69, v67)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v73, vcvtq_s32_f32(v65)), 0x17uLL)), *(float32x4_t *)a2, 3);
      int8x16_t v76 = (int8x16_t)vmulq_n_f32(v16, *(float *)&v17);
      int8x16_t v77 = (int8x16_t)vmulq_n_f32(v18, *(float *)&v17);
      float32x4_t v78 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 1);
      int8x16_t v79 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v78)), v76, v75), v15);
      int8x16_t v80 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v78)), v77, (int8x16_t)vmulq_laneq_f32(v74, *(float32x4_t *)a2, 3)), v15);
      int8x16_t v81 = *((int8x16_t *)a2 + 15);
      float32x4_t v82 = (int8x16_t *)(v6 + v11);
      v82[-1] = vbslq_s8(v81, (int8x16_t)v12, v79);
      *float32x4_t v82 = vbslq_s8(v81, (int8x16_t)v13, v80);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v83 = -v10;
    if (v83 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v84 = 16 * v83;
    float32x4_t v85 = *(float32x4_t *)(v7 + v84);
    float32x4_t v86 = *((float32x4_t *)a2 + 75);
    float32x4_t v87 = *((float32x4_t *)a2 + 5);
    float32x4_t v88 = vminq_f32(vmaxq_f32(v85, v86), v87);
    float32x4_t v89 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v86)), v86), (int8x16_t)v87, (int8x16_t)vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
    float32x4_t v90 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v89), (int8x16_t)v87);
    float32x4_t v91 = (float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vcgtq_f32(v90, *((float32x4_t *)a2 + 23)));
    float32x4_t v92 = vsubq_f32(vsubq_f32(v90, v87), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v91), v90));
    float32x4_t v93 = vmulq_f32(v92, v92);
    float32x4_t v94 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v89, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v89))), *((float32x4_t *)a2 + 22)), v91), vmulq_f32(v92, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v92, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v92)),
                        vmulq_f32(v93, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v92)), vmulq_f32(v93, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v92)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
    float32x4_t v95 = vcvtq_f32_s32(vcvtq_s32_f32(v94));
    float32x4_t v96 = vsubq_f32(v95, (float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vcgtq_f32(v95, v94)));
    float32x4_t v97 = vsubq_f32(v94, v96);
    *(int8x16_t *)(v6 + v84) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v85, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v86, vsubq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v88, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v87, vmulq_f32(
                                                                                v97,
                                                                                vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v97, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v97)), vmulq_f32(vmulq_f32(v97, v97), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v97)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33),
                                                                                             vcvtq_s32_f32(v96)),
                                                                                           0x17uLL)),
                                                                          *(float32x4_t *)a2,
                                                                          3)),
                                              v87));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype3_half_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v71 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      long long v16 = *((_OWORD *)a2 + 1);
      float32x4_t v17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v12, v14), v15);
      float32x4_t v20 = vaddq_f32(v18, v17);
      float32x4_t v21 = vaddq_f32(v19, v17);
      int8x16_t v22 = *((int8x16_t *)a2 + 19);
      float32x4_t v23 = *((float32x4_t *)a2 + 20);
      float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v20), (int8x16_t)v15);
      int8x16_t v25 = *((int8x16_t *)a2 + 21);
      float32x4_t v26 = *((float32x4_t *)a2 + 22);
      float32x4_t v27 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v21), (int8x16_t)v15);
      float32x4_t v28 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v21, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v23, v21)));
      float32x4_t v29 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v23, v20))), v26);
      float32x4_t v30 = *((float32x4_t *)a2 + 23);
      float32x4_t v31 = *((float32x4_t *)a2 + 24);
      float32x4_t v32 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v24, v30));
      float32x4_t v33 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v27, v30));
      float32x4_t v34 = vaddq_f32(v29, v32);
      float32x4_t v35 = vmulq_f32(v31, v32);
      float32x4_t v36 = vmulq_f32(vmulq_f32(v31, v33), v27);
      float32x4_t v37 = vaddq_f32(vsubq_f32(v28, v26), v33);
      float32x4_t v38 = vsubq_f32(vsubq_f32(v24, v15), vmulq_f32(v35, v24));
      float32x4_t v39 = vsubq_f32(vsubq_f32(v27, v15), v36);
      float32x4_t v40 = *((float32x4_t *)a2 + 25);
      float32x4_t v41 = *((float32x4_t *)a2 + 26);
      float32x4_t v42 = *((float32x4_t *)a2 + 27);
      float32x4_t v43 = *((float32x4_t *)a2 + 28);
      float32x4_t v44 = vmulq_n_f32(vaddq_f32(v34, vmulq_f32(v38, vaddq_f32(vaddq_f32(v42, vmulq_f32(v43, v38)), vmulq_f32(vmulq_f32(v38, v38), vaddq_f32(v40, vmulq_f32(v41, v38)))))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v45 = vmulq_n_f32(vaddq_f32(v37, vmulq_f32(v39, vaddq_f32(vaddq_f32(v42, vmulq_f32(v43, v39)), vmulq_f32(vmulq_f32(v39, v39), vaddq_f32(v40, vmulq_f32(v41, v39)))))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v46 = *((float32x4_t *)a2 + 29);
      float32x4_t v47 = *((float32x4_t *)a2 + 30);
      float32x4_t v48 = vmaxq_f32(v44, v46);
      float32x4_t v49 = vmaxq_f32(v45, v46);
      float32x4_t v50 = vcvtq_f32_s32(vcvtq_s32_f32(v48));
      float32x4_t v51 = vcvtq_f32_s32(vcvtq_s32_f32(v49));
      float32x4_t v52 = vsubq_f32(v50, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v50, v48)));
      float32x4_t v53 = vsubq_f32(v51, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v51, v49)));
      float32x4_t v54 = vsubq_f32(v48, v52);
      float32x4_t v55 = vsubq_f32(v49, v53);
      float32x4_t v56 = *((float32x4_t *)a2 + 31);
      float32x4_t v57 = *((float32x4_t *)a2 + 32);
      float32x4_t v58 = vmulq_f32(v55, vaddq_f32(v57, vmulq_f32(v55, vaddq_f32(v47, vmulq_f32(v56, v55)))));
      float32x4_t v59 = vaddq_f32(v15, vmulq_f32(v54, vaddq_f32(v57, vmulq_f32(v54, vaddq_f32(v47, vmulq_f32(v56, v54))))));
      int32x4_t v60 = vcvtq_s32_f32(v53);
      int32x4_t v61 = *((int32x4_t *)a2 + 33);
      float32x4_t v62 = vmulq_f32(vaddq_f32(v15, v58), (float32x4_t)vshlq_n_s32(vaddq_s32(v61, v60), 0x17uLL));
      int8x16_t v63 = (int8x16_t)vmulq_laneq_f32(vmulq_f32(v59, (float32x4_t)vshlq_n_s32(vaddq_s32(v61, vcvtq_s32_f32(v52)), 0x17uLL)), *(float32x4_t *)a2, 3);
      int8x16_t v64 = (int8x16_t)vmulq_n_f32(v18, *(float *)&v16);
      int8x16_t v65 = (int8x16_t)vmulq_n_f32(v19, *(float *)&v16);
      float32x4_t v66 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v16, 1);
      int8x16_t v67 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v66)), v64, v63), v15);
      int8x16_t v68 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v19, v66)), v65, (int8x16_t)vmulq_laneq_f32(v62, *(float32x4_t *)a2, 3)), v15);
      int8x16_t v69 = *((int8x16_t *)a2 + 15);
      float32x4_t v70 = (int8x16_t *)(v6 + v11);
      v70[-1] = vbslq_s8(v69, (int8x16_t)v13, v67);
      *float32x4_t v70 = vbslq_s8(v69, (int8x16_t)v12, v68);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v71 = -v10;
    if (v71 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v72 = 16 * v71;
    float32x4_t v73 = *(float32x4_t *)(v7 + v72);
    float32x4_t v74 = *((float32x4_t *)a2 + 75);
    float32x4_t v75 = *((float32x4_t *)a2 + 5);
    float32x4_t v76 = vminq_f32(vmaxq_f32(v73, v74), v75);
    float32x4_t v77 = vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1));
    float32x4_t v78 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v77), (int8x16_t)v75);
    float32x4_t v79 = (float32x4_t)vandq_s8((int8x16_t)v75, (int8x16_t)vcgtq_f32(v78, *((float32x4_t *)a2 + 23)));
    float32x4_t v80 = vsubq_f32(vsubq_f32(v78, v75), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v79), v78));
    float32x4_t v81 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v77, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v77))), *((float32x4_t *)a2 + 22)), v79), vmulq_f32(v80, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(*((float32x4_t *)a2 + 28), v80)), vmulq_f32(vmulq_f32(v80, v80), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v80)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v82 = vcvtq_f32_s32(vcvtq_s32_f32(v81));
    float32x4_t v83 = vsubq_f32(v82, (float32x4_t)vandq_s8((int8x16_t)v75, (int8x16_t)vcgtq_f32(v82, v81)));
    float32x4_t v84 = vsubq_f32(v81, v83);
    *(int8x16_t *)(v6 + v72) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v73, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v74, vsubq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v76, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v75, vmulq_f32(
                                                                                v84,
                                                                                vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v84, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v84)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v83)), 0x17uLL)), *(float32x4_t *)a2, 3)), v75));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype3_half_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v67 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vbicq_s8((int8x16_t)v14, *((int8x16_t *)a2 + 76)), 3);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      long long v17 = *((_OWORD *)a2 + 1);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v12, v14), v15);
      float32x4_t v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v20 = vaddq_f32(v16, v19);
      float32x4_t v21 = vaddq_f32(v18, v19);
      int8x16_t v22 = *((int8x16_t *)a2 + 19);
      float32x4_t v23 = *((float32x4_t *)a2 + 20);
      float32x4_t v24 = *((float32x4_t *)a2 + 5);
      float32x4_t v25 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v20), (int8x16_t)v24);
      float32x4_t v26 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v21), (int8x16_t)v24);
      int8x16_t v27 = *((int8x16_t *)a2 + 21);
      float32x4_t v28 = *((float32x4_t *)a2 + 22);
      float32x4_t v29 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v21, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v23, v21)));
      float32x4_t v30 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v23, v20))), v28);
      float32x4_t v31 = *((float32x4_t *)a2 + 23);
      float32x4_t v32 = *((float32x4_t *)a2 + 24);
      float32x4_t v33 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v25, v31));
      float32x4_t v34 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v26, v31));
      float32x4_t v35 = vaddq_f32(v30, v33);
      float32x4_t v36 = vaddq_f32(vsubq_f32(v29, v28), v34);
      float32x4_t v37 = vsubq_f32(vsubq_f32(v25, v24), vmulq_f32(vmulq_f32(v32, v33), v25));
      float32x4_t v38 = vsubq_f32(vsubq_f32(v26, v24), vmulq_f32(vmulq_f32(v32, v34), v26));
      float32x4_t v39 = *((float32x4_t *)a2 + 25);
      float32x4_t v40 = *((float32x4_t *)a2 + 26);
      float32x4_t v41 = vaddq_f32(v39, vmulq_f32(v40, v37));
      float32x4_t v42 = vaddq_f32(v39, vmulq_f32(v40, v38));
      float32x4_t v43 = *((float32x4_t *)a2 + 27);
      float32x4_t v44 = *((float32x4_t *)a2 + 28);
      float32x4_t v45 = vaddq_f32(v36, vmulq_f32(v38, vaddq_f32(vaddq_f32(v43, vmulq_f32(v38, v44)), vmulq_f32(vmulq_f32(v38, v38), v42))));
      float32x4_t v46 = *((float32x4_t *)a2 + 29);
      float32x4_t v47 = *((float32x4_t *)a2 + 30);
      float32x4_t v48 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v35, vmulq_f32(v37, vaddq_f32(vaddq_f32(v43, vmulq_f32(v37, v44)), vmulq_f32(vmulq_f32(v37, v37), v41)))), COERCE_FLOAT(*(_OWORD *)a2)), v46);
      float32x4_t v49 = vmaxq_f32(vmulq_n_f32(v45, COERCE_FLOAT(*(_OWORD *)a2)), v46);
      float32x4_t v50 = vcvtq_f32_s32(vcvtq_s32_f32(v48));
      float32x4_t v51 = vcvtq_f32_s32(vcvtq_s32_f32(v49));
      float32x4_t v52 = vsubq_f32(v50, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v50, v48)));
      float32x4_t v53 = vsubq_f32(v51, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v51, v49)));
      float32x4_t v54 = vsubq_f32(v48, v52);
      float32x4_t v55 = vsubq_f32(v49, v53);
      float32x4_t v56 = *((float32x4_t *)a2 + 31);
      float32x4_t v57 = *((float32x4_t *)a2 + 32);
      float32x4_t v58 = vaddq_f32(v47, vmulq_f32(v56, v54));
      float32x4_t v59 = vmulq_f32(v55, vaddq_f32(v57, vmulq_f32(v55, vaddq_f32(v47, vmulq_f32(v56, v55)))));
      int32x4_t v60 = vcvtq_s32_f32(v53);
      int32x4_t v61 = *((int32x4_t *)a2 + 33);
      float32x4_t v62 = vmulq_f32(vaddq_f32(v24, v59), (float32x4_t)vshlq_n_s32(vaddq_s32(v61, v60), 0x17uLL));
      float32x4_t v63 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 1);
      int8x16_t v64 = *((int8x16_t *)a2 + 15);
      int8x16_t v65 = (int8x16_t *)(v6 + v11);
      int8x16_t v66 = vbslq_s8(v64, (int8x16_t)v12, vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v63)), (int8x16_t)vmulq_n_f32(v18, *(float *)&v17), (int8x16_t)vmulq_laneq_f32(v62, *(float32x4_t *)a2, 3)));
      v65[-1] = vbslq_s8(v64, (int8x16_t)v13, vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v63)), (int8x16_t)vmulq_n_f32(v16, *(float *)&v17), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v24, vmulq_f32(v54, vaddq_f32(v57, vmulq_f32(v54, v58)))), (float32x4_t)vshlq_n_s32(vaddq_s32(v61, vcvtq_s32_f32(v52)), 0x17uLL)), *(float32x4_t *)a2, 3)));
      *int8x16_t v65 = v66;
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v67 = -v10;
    if (v67 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v68 = 16 * v67;
    float32x4_t v69 = *(float32x4_t *)(v7 + v68);
    float32x4_t v70 = *((float32x4_t *)a2 + 75);
    float32x4_t v71 = vminq_f32(vmaxq_f32(v69, v70), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbicq_s8((int8x16_t)v70, *((int8x16_t *)a2 + 76)), 3));
    float32x4_t v72 = vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1));
    float32x4_t v73 = *((float32x4_t *)a2 + 5);
    float32x4_t v74 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v72), (int8x16_t)v73);
    float32x4_t v75 = (float32x4_t)vandq_s8((int8x16_t)v73, (int8x16_t)vcgtq_f32(v74, *((float32x4_t *)a2 + 23)));
    float32x4_t v76 = vsubq_f32(vsubq_f32(v74, v73), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v75), v74));
    float32x4_t v77 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v72, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v72))), *((float32x4_t *)a2 + 22)), v75), vmulq_f32(v76, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v76, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v76, v76), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v76)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v77));
    float32x4_t v79 = vsubq_f32(v78, (float32x4_t)vandq_s8((int8x16_t)v73, (int8x16_t)vcgtq_f32(v78, v77)));
    float32x4_t v80 = vsubq_f32(v77, v79);
    *(int8x16_t *)(v6 + v68) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v69, vbslq_s8((int8x16_t)vcgtq_f32(v70, vsubq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v71, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v73, vmulq_f32(v80, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v80,
                                                          vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v80)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v79)), 0x17uLL)), *(float32x4_t *)a2, 3)));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype3_nice_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v81 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vbicq_s8((int8x16_t)v14, *((int8x16_t *)a2 + 76)), 3);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v17 = vminq_f32(vmaxq_f32(v12, v14), v15);
      long long v18 = *((_OWORD *)a2 + 1);
      float32x4_t v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v20 = *((float32x4_t *)a2 + 5);
      int8x16_t v21 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v14)), v14);
      float32x4_t v22 = (float32x4_t)vbslq_s8(v21, (int8x16_t)v20, (int8x16_t)vaddq_f32(v16, v19));
      float32x4_t v23 = (float32x4_t)vbslq_s8(v21, (int8x16_t)v20, (int8x16_t)vaddq_f32(v17, v19));
      int8x16_t v24 = *((int8x16_t *)a2 + 19);
      float32x4_t v25 = *((float32x4_t *)a2 + 20);
      float32x4_t v26 = (float32x4_t)vorrq_s8(vandq_s8(v24, (int8x16_t)v22), (int8x16_t)v20);
      int8x16_t v27 = *((int8x16_t *)a2 + 21);
      float32x4_t v28 = *((float32x4_t *)a2 + 22);
      float32x4_t v29 = (float32x4_t)vorrq_s8(vandq_s8(v24, (int8x16_t)v23), (int8x16_t)v20);
      float32x4_t v30 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v23, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v25, v23)));
      float32x4_t v31 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v22, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v25, v22))), v28);
      float32x4_t v32 = *((float32x4_t *)a2 + 23);
      float32x4_t v33 = *((float32x4_t *)a2 + 24);
      float32x4_t v34 = vsubq_f32(v30, v28);
      float32x4_t v35 = (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v26, v32));
      float32x4_t v36 = (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v29, v32));
      float32x4_t v37 = vaddq_f32(v31, v35);
      float32x4_t v38 = vsubq_f32(vsubq_f32(v26, v20), vmulq_f32(vmulq_f32(v33, v35), v26));
      float32x4_t v39 = vsubq_f32(vsubq_f32(v29, v20), vmulq_f32(vmulq_f32(v33, v36), v29));
      float32x4_t v40 = vmulq_f32(v38, v38);
      float32x4_t v41 = *((float32x4_t *)a2 + 37);
      float32x4_t v42 = *((float32x4_t *)a2 + 38);
      float32x4_t v43 = vaddq_f32(v41, vmulq_f32(v42, v38));
      float32x4_t v44 = vaddq_f32(v41, vmulq_f32(v42, v39));
      float32x4_t v45 = *((float32x4_t *)a2 + 39);
      float32x4_t v46 = *((float32x4_t *)a2 + 40);
      float32x4_t v47 = vaddq_f32(v45, vmulq_f32(v46, v38));
      float32x4_t v48 = vaddq_f32(v45, vmulq_f32(v46, v39));
      float32x4_t v49 = *((float32x4_t *)a2 + 41);
      float32x4_t v50 = *((float32x4_t *)a2 + 42);
      float32x4_t v51 = vaddq_f32(v49, vmulq_f32(v50, v38));
      float32x4_t v52 = vaddq_f32(v49, vmulq_f32(v50, v39));
      float32x4_t v53 = vmulq_f32(v39, v39);
      float32x4_t v54 = vaddq_f32(v52, vmulq_f32(v53, vaddq_f32(v44, vmulq_f32(v53, v48))));
      float32x4_t v55 = vmulq_f32(v38, vaddq_f32(v51, vmulq_f32(v40, vaddq_f32(v43, vmulq_f32(v40, v47)))));
      float32x4_t v56 = *((float32x4_t *)a2 + 43);
      float32x4_t v57 = *((float32x4_t *)a2 + 44);
      float32x4_t v58 = vmulq_n_f32(vaddq_f32(vaddq_f32(v34, v36), vmulq_f32(v39, vaddq_f32(v56, vmulq_f32(v39, v54)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v59 = *((float32x4_t *)a2 + 29);
      float32x4_t v60 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v37, vmulq_f32(v38, vaddq_f32(v56, v55))), COERCE_FLOAT(*(_OWORD *)a2)), v59);
      float32x4_t v61 = vmaxq_f32(v58, v59);
      float32x4_t v62 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
      float32x4_t v63 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
      float32x4_t v64 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v62, v60)));
      float32x4_t v65 = vsubq_f32(v63, (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v63, v61)));
      float32x4_t v66 = vsubq_f32(v60, v64);
      float32x4_t v67 = vsubq_f32(v61, v65);
      float32x4_t v68 = *((float32x4_t *)a2 + 45);
      float32x4_t v69 = *((float32x4_t *)a2 + 46);
      float32x4_t v70 = vaddq_f32(v57, vmulq_f32(v68, v66));
      float32x4_t v71 = vaddq_f32(v57, vmulq_f32(v68, v67));
      float32x4_t v73 = *((float32x4_t *)a2 + 47);
      float32x4_t v72 = *((float32x4_t *)a2 + 48);
      int32x4_t v74 = *((int32x4_t *)a2 + 33);
      float32x4_t v75 = vmulq_f32(vaddq_f32(v20, vmulq_f32(v66, vaddq_f32(v72, vmulq_f32(v66, vaddq_f32(vaddq_f32(v69, vmulq_f32(v66, v73)), vmulq_f32(vmulq_f32(v66, v66), v70)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v74, vcvtq_s32_f32(v64)), 0x17uLL));
      float32x4_t v76 = vmulq_f32(vaddq_f32(v20, vmulq_f32(v67, vaddq_f32(v72, vmulq_f32(v67, vaddq_f32(vaddq_f32(v69, vmulq_f32(v73, v67)), vmulq_f32(vmulq_f32(v67, v67), v71)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v74, vcvtq_s32_f32(v65)), 0x17uLL));
      float32x4_t v77 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v18, 1);
      int8x16_t v78 = *((int8x16_t *)a2 + 15);
      float32x4_t v79 = (int8x16_t *)(v6 + v11);
      int8x16_t v80 = vbslq_s8(v78, (int8x16_t)v12, vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v17, v77)), (int8x16_t)vmulq_n_f32(v17, *(float *)&v18), (int8x16_t)vmulq_laneq_f32(v76, *(float32x4_t *)a2, 3)));
      v79[-1] = vbslq_s8(v78, (int8x16_t)v13, vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v77)), (int8x16_t)vmulq_n_f32(v16, *(float *)&v18), (int8x16_t)vmulq_laneq_f32(v75, *(float32x4_t *)a2, 3)));
      *float32x4_t v79 = v80;
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v81 = -v10;
    if (v81 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v82 = 16 * v81;
    float32x4_t v83 = *(float32x4_t *)(v7 + v82);
    float32x4_t v84 = *((float32x4_t *)a2 + 75);
    float32x4_t v85 = vminq_f32(vmaxq_f32(v83, v84), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbicq_s8((int8x16_t)v84, *((int8x16_t *)a2 + 76)), 3));
    float32x4_t v86 = *((float32x4_t *)a2 + 5);
    float32x4_t v87 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v86, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v84)), v84), (int8x16_t)v86, (int8x16_t)vaddq_f32(v85, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
    float32x4_t v88 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v87), (int8x16_t)v86);
    float32x4_t v89 = (float32x4_t)vandq_s8((int8x16_t)v86, (int8x16_t)vcgtq_f32(v88, *((float32x4_t *)a2 + 23)));
    float32x4_t v90 = vsubq_f32(vsubq_f32(v88, v86), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v89), v88));
    float32x4_t v91 = vmulq_f32(v90, v90);
    float32x4_t v92 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v87, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v87))), *((float32x4_t *)a2 + 22)), v89), vmulq_f32(v90, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v90, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v90)),
                        vmulq_f32(v91, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v90)), vmulq_f32(v91, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v90)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
    float32x4_t v93 = vcvtq_f32_s32(vcvtq_s32_f32(v92));
    float32x4_t v94 = vsubq_f32(v93, (float32x4_t)vandq_s8((int8x16_t)v86, (int8x16_t)vcgtq_f32(v93, v92)));
    float32x4_t v95 = vsubq_f32(v92, v94);
    *(int8x16_t *)(v6 + v82) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v83, vbslq_s8((int8x16_t)vcgtq_f32(v84, vsubq_f32(v85, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v85, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vmulq_laneq_f32(vmulq_f32(vaddq_f32(v86, vmulq_f32(v95, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v95,
                                                          vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v95)), vmulq_f32(vmulq_f32(v95, v95), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v95)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v94)), 0x17uLL)), *(float32x4_t *)a2, 3)));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype3_float_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = 16 * *((int *)a1 + 22);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        float32x4_t v12 = *((float32x4_t *)a2 + 75);
        float32x4_t v13 = vminq_f32(vmaxq_f32(v11, v12), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbicq_s8((int8x16_t)v12, *((int8x16_t *)a2 + 76)), 3));
        float32x4_t v14 = *((float32x4_t *)a2 + 5);
        float32x4_t v15 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v12)), v12), (int8x16_t)v14, (int8x16_t)vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
        int8x16_t v16 = *((int8x16_t *)a2 + 52);
        int8x16_t v17 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v15);
        int8x16_t v18 = (int8x16_t)vmulq_f32(v15, vaddq_f32(v14, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 49), v17)));
        float32x4_t v19 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), v18), (int8x16_t)v14);
        float32x4_t v20 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v15, *((float32x4_t *)a2 + 21))), vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v15, *((float32x4_t *)a2 + 50)), *((int8x16_t *)a2 + 51)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v15, *((float32x4_t *)a2 + 50)))), (float32x4_t)vandq_s8(v16, v17))), *((float32x4_t *)a2 + 22)), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v18, 0x17uLL)));
        float32x4_t v21 = (float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)vcgtq_f32(v19, *((float32x4_t *)a2 + 23)));
        float32x4_t v22 = vaddq_f32(v20, v21);
        float32x4_t v23 = vsubq_f32(vsubq_f32(v19, v14), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v21), v19));
        float32x4_t v24 = vmulq_f32(v23, v23);
        float32x4_t v25 = vmulq_n_f32(vaddq_f32(v22, vmulq_f32(v23, vaddq_f32(*((float32x4_t *)a2 + 61), vmulq_f32(v23, vaddq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 59), vmulq_f32(*((float32x4_t *)a2 + 60), v23)), vmulq_f32(v24, vaddq_f32(*((float32x4_t *)a2 + 57), vmulq_f32(*((float32x4_t *)a2 + 58), v23)))), vmulq_f32(vmulq_f32(v24, v24), vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 55), vmulq_f32(*((float32x4_t *)a2 + 56), v23)), vmulq_f32(
                                v24,
                                vaddq_f32(*((float32x4_t *)a2 + 53), vmulq_f32(*((float32x4_t *)a2 + 54), v23)))))))))),
                COERCE_FLOAT(*(_OWORD *)a2));
        float32x4_t v26 = vminq_f32(vmaxq_f32(v25, *((float32x4_t *)a2 + 62)), *((float32x4_t *)a2 + 63));
        float32x4_t v27 = vcvtq_f32_s32(vcvtq_s32_f32(v26));
        float32x4_t v28 = vsubq_f32(v27, (float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)vcgtq_f32(v27, v26)));
        float32x4_t v29 = vsubq_f32(v26, v28);
        float32x4_t v30 = vmulq_f32(v29, v29);
        int8x16_t v31 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 70), v28);
        *(int8x16_t *)(v7 + v10) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v11, vbslq_s8((int8x16_t)vcgtq_f32(v12, vsubq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v13, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v14, vorrq_s8((int8x16_t)vcltzq_f32(v25), (int8x16_t)vcgezq_f32(v25))), v12), (int8x16_t)vmulq_f32(
                                                                                vaddq_f32(v14, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 71), v31)), vmulq_f32(vaddq_f32(v14, vmulq_f32(v29, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 68), vmulq_f32(v29, *((float32x4_t *)a2 + 69))), vmulq_f32(v30, vaddq_f32(vaddq_f32(
                                                                                              *((float32x4_t *)a2 + 66),
                                                                                              vmulq_f32(*((float32x4_t *)a2 + 67), v29)), vmulq_f32(v30, vaddq_f32(*((float32x4_t *)a2 + 64), vmulq_f32(*((float32x4_t *)a2+ 65), v29)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(vaddq_f32(v28, (float32x4_t)vandq_s8(v16, v31)))), 0x17uLL))), (int8x16_t)v25), *(float32x4_t *)a2, 3)));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v6;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Gettype4_fast_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v72) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *(float32x4_t *)(v7 + v10 + 32);
      float32x4_t v16 = *((float32x4_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v12, v14), v16);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v13, v14), v16);
      long long v20 = *((_OWORD *)a2 + 1);
      float32x4_t v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v22 = vminq_f32(vmaxq_f32(v15, v14), v16);
      float32x4_t v23 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v18, v21)));
      float32x4_t v24 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v19, v21)));
      float32x4_t v25 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v22, v21)));
      float32x4_t v26 = vcvtq_f32_s32(vcvtq_s32_f32(v23));
      float32x4_t v27 = vcvtq_f32_s32(vcvtq_s32_f32(v24));
      float32x4_t v28 = vcvtq_f32_s32(vcvtq_s32_f32(v25));
      float32x4_t v29 = *((float32x4_t *)a2 + 7);
      float32x4_t v30 = *((float32x4_t *)a2 + 8);
      float32x4_t v31 = vrsqrteq_f32(vaddq_f32(v29, vsubq_f32(v23, v26)));
      float32x4_t v32 = vrsqrteq_f32(vaddq_f32(v29, vsubq_f32(v24, v27)));
      float32x4_t v33 = vrsqrteq_f32(vaddq_f32(v29, vsubq_f32(v25, v28)));
      float32x4_t v34 = vaddq_f32(v30, v26);
      float32x4_t v35 = vaddq_f32(v30, v27);
      float32x4_t v36 = vaddq_f32(v30, v28);
      float32x4_t v37 = *((float32x4_t *)a2 + 9);
      float32x4_t v38 = *((float32x4_t *)a2 + 10);
      float32x4_t v39 = vmulq_n_f32(vsubq_f32(v34, vmulq_f32(v31, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v40 = vmulq_n_f32(vsubq_f32(v35, vmulq_f32(v32, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v41 = vmulq_n_f32(vsubq_f32(v36, vmulq_f32(v33, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v42 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
      float32x4_t v43 = vcvtq_f32_s32(vcvtq_s32_f32(v40));
      float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
      float32x4_t v45 = vsubq_f32(v42, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v42, v39)));
      float32x4_t v46 = vsubq_f32(v43, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v43, v40)));
      float32x4_t v47 = vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v44, v41)));
      float32x4_t v48 = *((float32x4_t *)a2 + 11);
      float32x4_t v49 = *((float32x4_t *)a2 + 12);
      float32x4_t v50 = vmulq_f32(vrecpeq_f32(vsubq_f32(v48, vsubq_f32(v39, v45))), v49);
      float32x4_t v51 = vmulq_f32(vrecpeq_f32(vsubq_f32(v48, vsubq_f32(v40, v46))), v49);
      float32x4_t v52 = vmulq_f32(vrecpeq_f32(vsubq_f32(v48, vsubq_f32(v41, v47))), v49);
      float32x4_t v53 = vmaxq_f32(vaddq_f32(vaddq_f32(v38, v45), vmulq_f32(v50, v50)), v14);
      float32x4_t v54 = vmaxq_f32(vaddq_f32(vaddq_f32(v38, v46), vmulq_f32(v51, v51)), v14);
      float32x4_t v55 = *((float32x4_t *)a2 + 13);
      float32x4_t v56 = *((float32x4_t *)a2 + 14);
      float32x4_t v57 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v53, v55), v56));
      float32x4_t v58 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v54, v55), v56));
      float32x4_t v59 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(v38, v47), vmulq_f32(v52, v52)), v14), v55), v56));
      float32x4_t v60 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2);
      float32x4_t v61 = vmulq_laneq_f32(v59, *(float32x4_t *)a2, 3);
      int8x16_t v62 = (int8x16_t)vmulq_n_f32(v18, *(float *)&v20);
      int8x16_t v63 = (int8x16_t)vmulq_n_f32(v19, *(float *)&v20);
      int8x16_t v64 = (int8x16_t)vmulq_n_f32(v22, *(float *)&v20);
      float32x4_t v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v20, 1);
      int8x16_t v66 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v22, v65)), v64, (int8x16_t)vaddq_f32(v60, v61)), v16);
      int8x16_t v67 = *((int8x16_t *)a2 + 15);
      float32x4_t v68 = (float32x4_t)vbslq_s8(v67, (int8x16_t)v12, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v65)), v62, (int8x16_t)vaddq_f32(v60, vmulq_laneq_f32(v57, *(float32x4_t *)a2, 3))), v16));
      float32x4_t v69 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      float32x4_t v70 = vmaxq_f32(vaddq_f32(v69, (float32x4_t)vbslq_s8(v67, (int8x16_t)v13, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v19, v65)), v63, (int8x16_t)vaddq_f32(v60, vmulq_laneq_f32(v58, *(float32x4_t *)a2, 3))), v16))), v14);
      float32x4_t v71 = (int8x16_t *)(v6 + v10);
      *float32x4_t v71 = vbslq_s8(v67, (int8x16_t)v12, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v69, v68), v14), v16));
      v71[1] = vbslq_s8(v67, (int8x16_t)v13, (int8x16_t)vminq_f32(v70, v16));
      v71[2] = vbslq_s8(v67, (int8x16_t)v15, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v69, (float32x4_t)vbslq_s8(v67, (int8x16_t)v15, v66)), v14), v16));
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v72) = -v11;
    if ((int)v72 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v72 = v72;
    do
    {
      float32x4_t v73 = *(float32x4_t *)(v7 + 16 * v72);
      float32x4_t v74 = *((float32x4_t *)a2 + 75);
      float32x4_t v75 = *((float32x4_t *)a2 + 5);
      float32x4_t v76 = vminq_f32(vmaxq_f32(v73, v74), v75);
      float32x4_t v77 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1))));
      float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v77));
      float32x4_t v79 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v78), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v77, v78))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v80 = vcvtq_f32_s32(vcvtq_s32_f32(v79));
      float32x4_t v81 = vsubq_f32(v80, (float32x4_t)vandq_s8((int8x16_t)v75, (int8x16_t)vcgtq_f32(v80, v79)));
      float32x4_t v82 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v79, v81))), *((float32x4_t *)a2 + 12));
      *(int8x16_t *)(v6 + 16 * v72++) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v73, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v73, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v74, vsubq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v76, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2), vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v82, v82), vaddq_f32(*((float32x4_t *)a2 + 10), v81)), v74), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))), *(float32x4_t *)a2, 3))), v75))), v74), v75));
    }
    while (v72 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype4_fixed_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v72) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *(float32x4_t *)(v7 + v10 + 32);
      float32x4_t v16 = *((float32x4_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v12, v14), v16);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v13, v14), v16);
      long long v20 = *((_OWORD *)a2 + 1);
      float32x4_t v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v22 = vminq_f32(vmaxq_f32(v15, v14), v16);
      float32x4_t v23 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v18, v21)));
      float32x4_t v24 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v19, v21)));
      float32x4_t v25 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v22, v21)));
      float32x4_t v26 = vcvtq_f32_s32(vcvtq_s32_f32(v23));
      float32x4_t v27 = vcvtq_f32_s32(vcvtq_s32_f32(v24));
      float32x4_t v28 = vcvtq_f32_s32(vcvtq_s32_f32(v25));
      float32x4_t v29 = *((float32x4_t *)a2 + 7);
      float32x4_t v30 = *((float32x4_t *)a2 + 8);
      float32x4_t v31 = vrsqrteq_f32(vaddq_f32(v29, vsubq_f32(v23, v26)));
      float32x4_t v32 = vrsqrteq_f32(vaddq_f32(v29, vsubq_f32(v24, v27)));
      float32x4_t v33 = vrsqrteq_f32(vaddq_f32(v29, vsubq_f32(v25, v28)));
      float32x4_t v34 = vaddq_f32(v30, v26);
      float32x4_t v35 = vaddq_f32(v30, v27);
      float32x4_t v36 = vaddq_f32(v30, v28);
      float32x4_t v37 = *((float32x4_t *)a2 + 9);
      float32x4_t v38 = *((float32x4_t *)a2 + 10);
      float32x4_t v39 = vmulq_n_f32(vsubq_f32(v34, vmulq_f32(v31, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v40 = vmulq_n_f32(vsubq_f32(v35, vmulq_f32(v32, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v41 = vmulq_n_f32(vsubq_f32(v36, vmulq_f32(v33, v37)), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v42 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
      float32x4_t v43 = vcvtq_f32_s32(vcvtq_s32_f32(v40));
      float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
      float32x4_t v45 = vsubq_f32(v42, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v42, v39)));
      float32x4_t v46 = vsubq_f32(v43, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v43, v40)));
      float32x4_t v47 = vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v44, v41)));
      float32x4_t v48 = *((float32x4_t *)a2 + 11);
      float32x4_t v49 = *((float32x4_t *)a2 + 12);
      float32x4_t v50 = vmulq_f32(vrecpeq_f32(vsubq_f32(v48, vsubq_f32(v39, v45))), v49);
      float32x4_t v51 = vmulq_f32(vrecpeq_f32(vsubq_f32(v48, vsubq_f32(v40, v46))), v49);
      float32x4_t v52 = vmulq_f32(vrecpeq_f32(vsubq_f32(v48, vsubq_f32(v41, v47))), v49);
      float32x4_t v53 = vmaxq_f32(vaddq_f32(vaddq_f32(v38, v45), vmulq_f32(v50, v50)), v14);
      float32x4_t v54 = vmaxq_f32(vaddq_f32(vaddq_f32(v38, v46), vmulq_f32(v51, v51)), v14);
      float32x4_t v55 = *((float32x4_t *)a2 + 13);
      float32x4_t v56 = *((float32x4_t *)a2 + 14);
      float32x4_t v57 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v53, v55), v56));
      float32x4_t v58 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v54, v55), v56));
      float32x4_t v59 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(v38, v47), vmulq_f32(v52, v52)), v14), v55), v56));
      float32x4_t v60 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2);
      float32x4_t v61 = vmulq_laneq_f32(v59, *(float32x4_t *)a2, 3);
      int8x16_t v62 = (int8x16_t)vmulq_n_f32(v18, *(float *)&v20);
      int8x16_t v63 = (int8x16_t)vmulq_n_f32(v19, *(float *)&v20);
      int8x16_t v64 = (int8x16_t)vmulq_n_f32(v22, *(float *)&v20);
      float32x4_t v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v20, 1);
      int8x16_t v66 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v22, v65)), v64, (int8x16_t)vaddq_f32(v60, v61)), v16);
      int8x16_t v67 = *((int8x16_t *)a2 + 15);
      float32x4_t v68 = (float32x4_t)vbslq_s8(v67, (int8x16_t)v12, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v65)), v62, (int8x16_t)vaddq_f32(v60, vmulq_laneq_f32(v57, *(float32x4_t *)a2, 3))), v16));
      float32x4_t v69 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      float32x4_t v70 = vmaxq_f32(vaddq_f32(v69, (float32x4_t)vbslq_s8(v67, (int8x16_t)v13, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v19, v65)), v63, (int8x16_t)vaddq_f32(v60, vmulq_laneq_f32(v58, *(float32x4_t *)a2, 3))), v16))), v14);
      float32x4_t v71 = (int8x16_t *)(v6 + v10);
      *float32x4_t v71 = vbslq_s8(v67, (int8x16_t)v12, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v69, v68), v14), v16));
      v71[1] = vbslq_s8(v67, (int8x16_t)v13, (int8x16_t)vminq_f32(v70, v16));
      v71[2] = vbslq_s8(v67, (int8x16_t)v15, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v69, (float32x4_t)vbslq_s8(v67, (int8x16_t)v15, v66)), v14), v16));
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v72) = -v11;
    if ((int)v72 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v72 = v72;
    do
    {
      float32x4_t v73 = *(float32x4_t *)(v7 + 16 * v72);
      float32x4_t v74 = *((float32x4_t *)a2 + 75);
      float32x4_t v75 = *((float32x4_t *)a2 + 5);
      float32x4_t v76 = vminq_f32(vmaxq_f32(v73, v74), v75);
      float32x4_t v77 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1))));
      float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v77));
      float32x4_t v79 = vmulq_n_f32(vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v78), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v77, v78))), *((float32x4_t *)a2 + 9))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v80 = vcvtq_f32_s32(vcvtq_s32_f32(v79));
      float32x4_t v81 = vsubq_f32(v80, (float32x4_t)vandq_s8((int8x16_t)v75, (int8x16_t)vcgtq_f32(v80, v79)));
      float32x4_t v82 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v79, v81))), *((float32x4_t *)a2 + 12));
      *(int8x16_t *)(v6 + 16 * v72++) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v73, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v73, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v74, vsubq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v76, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2), vmulq_laneq_f32((float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v82, v82), vaddq_f32(*((float32x4_t *)a2 + 10), v81)), v74), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))), *(float32x4_t *)a2, 3))), v75))), v74), v75));
    }
    while (v72 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype4_nice_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v84 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      long long v17 = *((_OWORD *)a2 + 1);
      float32x4_t v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v12, v14), v15);
      int8x16_t v20 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v14)), v14);
      float32x4_t v21 = (float32x4_t)vbslq_s8(v20, (int8x16_t)v15, (int8x16_t)vaddq_f32(v16, v18));
      float32x4_t v22 = (float32x4_t)vbslq_s8(v20, (int8x16_t)v15, (int8x16_t)vaddq_f32(v19, v18));
      int8x16_t v23 = *((int8x16_t *)a2 + 19);
      float32x4_t v24 = *((float32x4_t *)a2 + 20);
      float32x4_t v25 = (float32x4_t)vorrq_s8(vandq_s8(v23, (int8x16_t)v21), (int8x16_t)v15);
      int8x16_t v26 = *((int8x16_t *)a2 + 21);
      float32x4_t v27 = *((float32x4_t *)a2 + 22);
      float32x4_t v28 = (float32x4_t)vorrq_s8(vandq_s8(v23, (int8x16_t)v22), (int8x16_t)v15);
      float32x4_t v29 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v22, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v24, v22)));
      float32x4_t v30 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v21, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v24, v21))), v27);
      float32x4_t v31 = *((float32x4_t *)a2 + 23);
      float32x4_t v32 = *((float32x4_t *)a2 + 24);
      float32x4_t v33 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v25, v31));
      float32x4_t v34 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v28, v31));
      float32x4_t v35 = vaddq_f32(v30, v33);
      float32x4_t v36 = vmulq_f32(v32, v33);
      float32x4_t v37 = vmulq_f32(vmulq_f32(v32, v34), v28);
      float32x4_t v38 = vaddq_f32(vsubq_f32(v29, v27), v34);
      float32x4_t v39 = vsubq_f32(vsubq_f32(v25, v15), vmulq_f32(v36, v25));
      float32x4_t v40 = vsubq_f32(vsubq_f32(v28, v15), v37);
      float32x4_t v41 = *((float32x4_t *)a2 + 37);
      float32x4_t v42 = *((float32x4_t *)a2 + 38);
      float32x4_t v43 = vmulq_f32(v39, v39);
      float32x4_t v44 = *((float32x4_t *)a2 + 39);
      float32x4_t v45 = *((float32x4_t *)a2 + 40);
      float32x4_t v46 = vaddq_f32(v41, vmulq_f32(v42, v39));
      float32x4_t v47 = vaddq_f32(v44, vmulq_f32(v45, v39));
      float32x4_t v48 = vaddq_f32(v44, vmulq_f32(v45, v40));
      float32x4_t v49 = *((float32x4_t *)a2 + 41);
      float32x4_t v50 = *((float32x4_t *)a2 + 42);
      float32x4_t v51 = vaddq_f32(v41, vmulq_f32(v42, v40));
      float32x4_t v52 = vaddq_f32(v49, vmulq_f32(v50, v39));
      float32x4_t v53 = vaddq_f32(v49, vmulq_f32(v50, v40));
      float32x4_t v54 = vmulq_f32(v40, v40);
      float32x4_t v55 = vmulq_f32(v39, vaddq_f32(v52, vmulq_f32(v43, vaddq_f32(v46, vmulq_f32(v43, v47)))));
      float32x4_t v56 = *((float32x4_t *)a2 + 43);
      float32x4_t v57 = *((float32x4_t *)a2 + 44);
      float32x4_t v58 = vmulq_n_f32(vaddq_f32(v38, vmulq_f32(v40, vaddq_f32(v56, vmulq_f32(v40, vaddq_f32(v53, vmulq_f32(v54, vaddq_f32(v51, vmulq_f32(v54, v48)))))))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v59 = *((float32x4_t *)a2 + 29);
      float32x4_t v60 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v35, vmulq_f32(v39, vaddq_f32(v56, v55))), COERCE_FLOAT(*(_OWORD *)a2)), v59);
      float32x4_t v61 = vmaxq_f32(v58, v59);
      float32x4_t v62 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
      float32x4_t v63 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
      float32x4_t v64 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v62, v60)));
      float32x4_t v65 = vsubq_f32(v63, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v63, v61)));
      float32x4_t v66 = vsubq_f32(v60, v64);
      float32x4_t v67 = vsubq_f32(v61, v65);
      float32x4_t v68 = *((float32x4_t *)a2 + 45);
      float32x4_t v69 = *((float32x4_t *)a2 + 46);
      float32x4_t v70 = vaddq_f32(v57, vmulq_f32(v68, v66));
      float32x4_t v71 = vaddq_f32(v57, vmulq_f32(v68, v67));
      float32x4_t v72 = *((float32x4_t *)a2 + 47);
      float32x4_t v73 = *((float32x4_t *)a2 + 48);
      int32x4_t v74 = *((int32x4_t *)a2 + 33);
      float32x4_t v75 = vmulq_f32(vaddq_f32(v15, vmulq_f32(v66, vaddq_f32(v73, vmulq_f32(v66, vaddq_f32(vaddq_f32(v69, vmulq_f32(v66, v72)), vmulq_f32(vmulq_f32(v66, v66), v70)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v74, vcvtq_s32_f32(v64)), 0x17uLL));
      float32x4_t v76 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2);
      float32x4_t v77 = vmulq_laneq_f32(vmulq_f32(vaddq_f32(v15, vmulq_f32(v67, vaddq_f32(v73, vmulq_f32(v67, vaddq_f32(vaddq_f32(v69, vmulq_f32(v72, v67)), vmulq_f32(vmulq_f32(v67, v67), v71)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v74, vcvtq_s32_f32(v65)), 0x17uLL)), *(float32x4_t *)a2, 3);
      float32x4_t v78 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 1);
      int8x16_t v79 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v19, v78)), (int8x16_t)vmulq_n_f32(v19, *(float *)&v17), (int8x16_t)vaddq_f32(v76, v77)), v15);
      int8x16_t v80 = *((int8x16_t *)a2 + 15);
      float32x4_t v81 = (float32x4_t)vbslq_s8(v80, (int8x16_t)v13, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v78)), (int8x16_t)vmulq_n_f32(v16, *(float *)&v17), (int8x16_t)vaddq_f32(v76, vmulq_laneq_f32(v75, *(float32x4_t *)a2, 3))), v15));
      float32x4_t v82 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      float32x4_t v83 = (int8x16_t *)(v6 + v11);
      v83[-1] = vbslq_s8(v80, (int8x16_t)v13, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v82, v81), v14), v15));
      *float32x4_t v83 = vbslq_s8(v80, (int8x16_t)v12, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v82, (float32x4_t)vbslq_s8(v80, (int8x16_t)v12, v79)), v14), v15));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v84 = -v10;
    if (v84 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v85 = 16 * v84;
    float32x4_t v86 = *(float32x4_t *)(v7 + v85);
    float32x4_t v87 = *((float32x4_t *)a2 + 75);
    float32x4_t v88 = *((float32x4_t *)a2 + 5);
    float32x4_t v89 = vminq_f32(vmaxq_f32(v86, v87), v88);
    float32x4_t v90 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v87)), v87), (int8x16_t)v88, (int8x16_t)vaddq_f32(v89, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
    float32x4_t v91 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v90), (int8x16_t)v88);
    float32x4_t v92 = (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v91, *((float32x4_t *)a2 + 23)));
    float32x4_t v93 = vsubq_f32(vsubq_f32(v91, v88), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v92), v91));
    float32x4_t v94 = vmulq_f32(v93, v93);
    float32x4_t v95 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v90, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v90))), *((float32x4_t *)a2 + 22)), v92), vmulq_f32(v93, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v93, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v93)),
                        vmulq_f32(v94, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v93)), vmulq_f32(v94, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v93)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
    float32x4_t v96 = vcvtq_f32_s32(vcvtq_s32_f32(v95));
    float32x4_t v97 = vsubq_f32(v96, (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v96, v95)));
    float32x4_t v98 = vsubq_f32(v95, v97);
    *(int8x16_t *)(v6 + v85) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v86, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v86, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v87, vsubq_f32(v89, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v89, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2), vmulq_laneq_f32(vmulq_f32(vaddq_f32(v88, vmulq_f32(v98, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v98, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v98)), vmulq_f32(vmulq_f32(v98, v98), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v98)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v97)), 0x17uLL)), *(float32x4_t *)a2, 3))), v88))), v87), v88));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype4_half_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v70 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v17 = vminq_f32(vmaxq_f32(v12, v14), v15);
      long long v18 = *((_OWORD *)a2 + 1);
      float32x4_t v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v20 = vaddq_f32(v16, v19);
      float32x4_t v21 = vaddq_f32(v17, v19);
      int8x16_t v22 = *((int8x16_t *)a2 + 19);
      float32x4_t v23 = *((float32x4_t *)a2 + 20);
      float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v20), (int8x16_t)v15);
      float32x4_t v25 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v21), (int8x16_t)v15);
      int8x16_t v26 = *((int8x16_t *)a2 + 21);
      float32x4_t v27 = *((float32x4_t *)a2 + 22);
      float32x4_t v28 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v21, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v23, v21)));
      float32x4_t v29 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v23, v20))), v27);
      float32x4_t v30 = *((float32x4_t *)a2 + 23);
      float32x4_t v31 = *((float32x4_t *)a2 + 24);
      float32x4_t v32 = vsubq_f32(v28, v27);
      float32x4_t v33 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v24, v30));
      float32x4_t v34 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v25, v30));
      float32x4_t v35 = vaddq_f32(v29, v33);
      float32x4_t v36 = vsubq_f32(vsubq_f32(v24, v15), vmulq_f32(vmulq_f32(v31, v33), v24));
      float32x4_t v37 = vsubq_f32(vsubq_f32(v25, v15), vmulq_f32(vmulq_f32(v31, v34), v25));
      float32x4_t v38 = *((float32x4_t *)a2 + 25);
      float32x4_t v39 = *((float32x4_t *)a2 + 26);
      float32x4_t v40 = vaddq_f32(v38, vmulq_f32(v39, v36));
      float32x4_t v41 = vaddq_f32(v38, vmulq_f32(v39, v37));
      float32x4_t v42 = *((float32x4_t *)a2 + 27);
      float32x4_t v43 = *((float32x4_t *)a2 + 28);
      float32x4_t v44 = vmulq_n_f32(vaddq_f32(vaddq_f32(v32, v34), vmulq_f32(v37, vaddq_f32(vaddq_f32(v42, vmulq_f32(v43, v37)), vmulq_f32(vmulq_f32(v37, v37), v41)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v45 = *((float32x4_t *)a2 + 29);
      float32x4_t v46 = *((float32x4_t *)a2 + 30);
      float32x4_t v47 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v35, vmulq_f32(v36, vaddq_f32(vaddq_f32(v42, vmulq_f32(v43, v36)), vmulq_f32(vmulq_f32(v36, v36), v40)))), COERCE_FLOAT(*(_OWORD *)a2)), v45);
      float32x4_t v48 = vmaxq_f32(v44, v45);
      float32x4_t v49 = vcvtq_f32_s32(vcvtq_s32_f32(v47));
      float32x4_t v50 = vcvtq_f32_s32(vcvtq_s32_f32(v48));
      float32x4_t v51 = vsubq_f32(v49, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v49, v47)));
      float32x4_t v52 = vsubq_f32(v50, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v50, v48)));
      float32x4_t v53 = vsubq_f32(v47, v51);
      float32x4_t v54 = vsubq_f32(v48, v52);
      float32x4_t v55 = *((float32x4_t *)a2 + 31);
      float32x4_t v56 = *((float32x4_t *)a2 + 32);
      float32x4_t v57 = vmulq_f32(v54, vaddq_f32(v56, vmulq_f32(v54, vaddq_f32(v46, vmulq_f32(v55, v54)))));
      float32x4_t v58 = vaddq_f32(v15, vmulq_f32(v53, vaddq_f32(v56, vmulq_f32(v53, vaddq_f32(v46, vmulq_f32(v55, v53))))));
      int32x4_t v59 = vcvtq_s32_f32(v52);
      int32x4_t v60 = *((int32x4_t *)a2 + 33);
      float32x4_t v61 = vmulq_f32(v58, (float32x4_t)vshlq_n_s32(vaddq_s32(v60, vcvtq_s32_f32(v51)), 0x17uLL));
      float32x4_t v62 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2);
      float32x4_t v63 = vmulq_laneq_f32(vmulq_f32(vaddq_f32(v15, v57), (float32x4_t)vshlq_n_s32(vaddq_s32(v60, v59), 0x17uLL)), *(float32x4_t *)a2, 3);
      float32x4_t v64 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v18, 1);
      int8x16_t v65 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v17, v64)), (int8x16_t)vmulq_n_f32(v17, *(float *)&v18), (int8x16_t)vaddq_f32(v62, v63)), v15);
      int8x16_t v66 = *((int8x16_t *)a2 + 15);
      float32x4_t v67 = (float32x4_t)vbslq_s8(v66, (int8x16_t)v13, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v64)), (int8x16_t)vmulq_n_f32(v16, *(float *)&v18), (int8x16_t)vaddq_f32(v62, vmulq_laneq_f32(v61, *(float32x4_t *)a2, 3))), v15));
      float32x4_t v68 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      float32x4_t v69 = (int8x16_t *)(v6 + v11);
      v69[-1] = vbslq_s8(v66, (int8x16_t)v13, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v68, v67), v14), v15));
      *float32x4_t v69 = vbslq_s8(v66, (int8x16_t)v12, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v68, (float32x4_t)vbslq_s8(v66, (int8x16_t)v12, v65)), v14), v15));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v70 = -v10;
    if (v70 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v71 = 16 * v70;
    float32x4_t v72 = *(float32x4_t *)(v7 + v71);
    float32x4_t v73 = *((float32x4_t *)a2 + 75);
    float32x4_t v74 = *((float32x4_t *)a2 + 5);
    float32x4_t v75 = vminq_f32(vmaxq_f32(v72, v73), v74);
    float32x4_t v76 = vaddq_f32(v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1));
    float32x4_t v77 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v76), (int8x16_t)v74);
    float32x4_t v78 = (float32x4_t)vandq_s8((int8x16_t)v74, (int8x16_t)vcgtq_f32(v77, *((float32x4_t *)a2 + 23)));
    float32x4_t v79 = vsubq_f32(vsubq_f32(v77, v74), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v78), v77));
    float32x4_t v80 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v76, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v76))), *((float32x4_t *)a2 + 22)), v78), vmulq_f32(v79, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(*((float32x4_t *)a2 + 28), v79)), vmulq_f32(vmulq_f32(v79, v79), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v79)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v81 = vcvtq_f32_s32(vcvtq_s32_f32(v80));
    float32x4_t v82 = vsubq_f32(v81, (float32x4_t)vandq_s8((int8x16_t)v74, (int8x16_t)vcgtq_f32(v81, v80)));
    float32x4_t v83 = vsubq_f32(v80, v82);
    *(int8x16_t *)(v6 + v71) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v72, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v72, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v73, vsubq_f32(v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v75, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2), vmulq_laneq_f32(vmulq_f32(vaddq_f32(v74, vmulq_f32(v83, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v83, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v83)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v82)), 0x17uLL)), *(float32x4_t *)a2, 3))), v74))), v73), v74));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype4_half_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v72 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vbicq_s8((int8x16_t)v14, *((int8x16_t *)a2 + 76)), 3);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v17 = vminq_f32(vmaxq_f32(v12, v14), v15);
      long long v18 = *((_OWORD *)a2 + 1);
      float32x4_t v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v20 = vaddq_f32(v16, v19);
      int8x16_t v21 = *((int8x16_t *)a2 + 19);
      float32x4_t v22 = *((float32x4_t *)a2 + 20);
      float32x4_t v23 = vaddq_f32(v17, v19);
      float32x4_t v24 = *((float32x4_t *)a2 + 5);
      float32x4_t v25 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v20), (int8x16_t)v24);
      float32x4_t v26 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v23), (int8x16_t)v24);
      int8x16_t v27 = *((int8x16_t *)a2 + 21);
      float32x4_t v28 = *((float32x4_t *)a2 + 22);
      float32x4_t v29 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v23, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v22, v23)));
      float32x4_t v30 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v22, v20))), v28);
      float32x4_t v31 = *((float32x4_t *)a2 + 23);
      float32x4_t v32 = *((float32x4_t *)a2 + 24);
      float32x4_t v33 = vsubq_f32(v29, v28);
      float32x4_t v34 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v25, v31));
      float32x4_t v35 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v26, v31));
      float32x4_t v36 = vaddq_f32(v30, v34);
      float32x4_t v37 = vsubq_f32(vsubq_f32(v25, v24), vmulq_f32(vmulq_f32(v32, v34), v25));
      float32x4_t v38 = vsubq_f32(vsubq_f32(v26, v24), vmulq_f32(vmulq_f32(v32, v35), v26));
      float32x4_t v39 = *((float32x4_t *)a2 + 25);
      float32x4_t v40 = *((float32x4_t *)a2 + 26);
      float32x4_t v41 = vaddq_f32(v39, vmulq_f32(v40, v37));
      float32x4_t v42 = vaddq_f32(v39, vmulq_f32(v40, v38));
      float32x4_t v43 = *((float32x4_t *)a2 + 27);
      float32x4_t v44 = *((float32x4_t *)a2 + 28);
      float32x4_t v45 = vmulq_n_f32(vaddq_f32(vaddq_f32(v33, v35), vmulq_f32(v38, vaddq_f32(vaddq_f32(v43, vmulq_f32(v38, v44)), vmulq_f32(vmulq_f32(v38, v38), v42)))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v46 = *((float32x4_t *)a2 + 29);
      float32x4_t v47 = *((float32x4_t *)a2 + 30);
      float32x4_t v48 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v36, vmulq_f32(v37, vaddq_f32(vaddq_f32(v43, vmulq_f32(v37, v44)), vmulq_f32(vmulq_f32(v37, v37), v41)))), COERCE_FLOAT(*(_OWORD *)a2)), v46);
      float32x4_t v49 = vmaxq_f32(v45, v46);
      float32x4_t v50 = vcvtq_f32_s32(vcvtq_s32_f32(v48));
      float32x4_t v51 = vcvtq_f32_s32(vcvtq_s32_f32(v49));
      float32x4_t v52 = vsubq_f32(v50, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v50, v48)));
      float32x4_t v53 = vsubq_f32(v51, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v51, v49)));
      float32x4_t v54 = vsubq_f32(v48, v52);
      float32x4_t v55 = vsubq_f32(v49, v53);
      float32x4_t v56 = *((float32x4_t *)a2 + 31);
      float32x4_t v57 = *((float32x4_t *)a2 + 32);
      float32x4_t v58 = vmulq_f32(v55, vaddq_f32(v57, vmulq_f32(v55, vaddq_f32(v47, vmulq_f32(v56, v55)))));
      float32x4_t v59 = vaddq_f32(v24, vmulq_f32(v54, vaddq_f32(v57, vmulq_f32(v54, vaddq_f32(v47, vmulq_f32(v56, v54))))));
      int32x4_t v60 = vcvtq_s32_f32(v53);
      int32x4_t v61 = *((int32x4_t *)a2 + 33);
      float32x4_t v62 = vmulq_f32(v59, (float32x4_t)vshlq_n_s32(vaddq_s32(v61, vcvtq_s32_f32(v52)), 0x17uLL));
      float32x4_t v63 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2);
      float32x4_t v64 = vmulq_laneq_f32(vmulq_f32(vaddq_f32(v24, v58), (float32x4_t)vshlq_n_s32(vaddq_s32(v61, v60), 0x17uLL)), *(float32x4_t *)a2, 3);
      int8x16_t v65 = (int8x16_t)vmulq_n_f32(v16, *(float *)&v18);
      float32x4_t v66 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v18, 1);
      int8x16_t v67 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v66));
      int8x16_t v68 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v17, v66)), (int8x16_t)vmulq_n_f32(v17, *(float *)&v18), (int8x16_t)vaddq_f32(v63, v64));
      int8x16_t v69 = *((int8x16_t *)a2 + 15);
      float32x4_t v70 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      uint64_t v71 = (int8x16_t *)(v6 + v11);
      v71[-1] = vbslq_s8(v69, (int8x16_t)v13, (int8x16_t)vaddq_f32(v70, (float32x4_t)vbslq_s8(v69, (int8x16_t)v13, vbslq_s8(v67, v65, (int8x16_t)vaddq_f32(v63, vmulq_laneq_f32(v62, *(float32x4_t *)a2, 3))))));
      *uint64_t v71 = vbslq_s8(v69, (int8x16_t)v12, (int8x16_t)vaddq_f32(v70, (float32x4_t)vbslq_s8(v69, (int8x16_t)v12, v68)));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v72 = -v10;
    if (v72 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v73 = 16 * v72;
    float32x4_t v74 = *(float32x4_t *)(v7 + v73);
    float32x4_t v75 = *((float32x4_t *)a2 + 75);
    float32x4_t v76 = vminq_f32(vmaxq_f32(v74, v75), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbicq_s8((int8x16_t)v75, *((int8x16_t *)a2 + 76)), 3));
    float32x4_t v77 = vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1));
    float32x4_t v78 = *((float32x4_t *)a2 + 5);
    float32x4_t v79 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v77), (int8x16_t)v78);
    float32x4_t v80 = (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v79, *((float32x4_t *)a2 + 23)));
    float32x4_t v81 = vsubq_f32(vsubq_f32(v79, v78), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v80), v79));
    float32x4_t v82 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v77, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v77))), *((float32x4_t *)a2 + 22)), v80), vmulq_f32(v81, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v81, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v81, v81), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v81)))))), COERCE_FLOAT(*(_OWORD *)a2)),
            *((float32x4_t *)a2 + 29));
    float32x4_t v83 = vcvtq_f32_s32(vcvtq_s32_f32(v82));
    float32x4_t v84 = vsubq_f32(v83, (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v83, v82)));
    float32x4_t v85 = vsubq_f32(v82, v84);
    *(int8x16_t *)(v6 + v73) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v74, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v74, vbslq_s8((int8x16_t)vcgtq_f32(v75, vsubq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v76, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vaddq_f32(
                                                                            (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2), vmulq_laneq_f32(vmulq_f32(vaddq_f32(v78, vmulq_f32(v85, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v85, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v85)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(
                                                                                                 *((int32x4_t *)a2 + 33),
                                                                                                 vcvtq_s32_f32(v84)),
                                                                                               0x17uLL)),
                                                                              *(float32x4_t *)a2,
                                                                              3))))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype4_nice_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v86 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vbicq_s8((int8x16_t)v14, *((int8x16_t *)a2 + 76)), 3);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v12, v14), v15);
      float32x4_t v17 = vminq_f32(vmaxq_f32(v13, v14), v15);
      long long v18 = *((_OWORD *)a2 + 1);
      float32x4_t v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1);
      float32x4_t v20 = *((float32x4_t *)a2 + 5);
      int8x16_t v21 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v14)), v14);
      float32x4_t v22 = (float32x4_t)vbslq_s8(v21, (int8x16_t)v20, (int8x16_t)vaddq_f32(v16, v19));
      float32x4_t v23 = (float32x4_t)vbslq_s8(v21, (int8x16_t)v20, (int8x16_t)vaddq_f32(v17, v19));
      int8x16_t v24 = *((int8x16_t *)a2 + 19);
      float32x4_t v25 = *((float32x4_t *)a2 + 20);
      float32x4_t v26 = (float32x4_t)vorrq_s8(vandq_s8(v24, (int8x16_t)v22), (int8x16_t)v20);
      int8x16_t v27 = *((int8x16_t *)a2 + 21);
      float32x4_t v28 = *((float32x4_t *)a2 + 22);
      float32x4_t v29 = (float32x4_t)vorrq_s8(vandq_s8(v24, (int8x16_t)v23), (int8x16_t)v20);
      float32x4_t v30 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v23, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v25, v23)));
      float32x4_t v31 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v22, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v25, v22))), v28);
      float32x4_t v32 = *((float32x4_t *)a2 + 23);
      float32x4_t v33 = *((float32x4_t *)a2 + 24);
      float32x4_t v34 = (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v26, v32));
      float32x4_t v35 = (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v29, v32));
      float32x4_t v36 = vaddq_f32(v31, v34);
      float32x4_t v37 = vmulq_f32(v33, v34);
      float32x4_t v38 = vmulq_f32(vmulq_f32(v33, v35), v29);
      float32x4_t v39 = vaddq_f32(vsubq_f32(v30, v28), v35);
      float32x4_t v40 = vsubq_f32(vsubq_f32(v26, v20), vmulq_f32(v37, v26));
      float32x4_t v41 = vsubq_f32(vsubq_f32(v29, v20), v38);
      float32x4_t v42 = *((float32x4_t *)a2 + 37);
      float32x4_t v43 = *((float32x4_t *)a2 + 38);
      float32x4_t v44 = vmulq_f32(v40, v40);
      float32x4_t v45 = *((float32x4_t *)a2 + 39);
      float32x4_t v46 = *((float32x4_t *)a2 + 40);
      float32x4_t v47 = vaddq_f32(v42, vmulq_f32(v43, v40));
      float32x4_t v48 = vaddq_f32(v45, vmulq_f32(v46, v40));
      float32x4_t v49 = vaddq_f32(v45, vmulq_f32(v46, v41));
      float32x4_t v50 = *((float32x4_t *)a2 + 41);
      float32x4_t v51 = *((float32x4_t *)a2 + 42);
      float32x4_t v52 = vaddq_f32(v42, vmulq_f32(v43, v41));
      float32x4_t v53 = vaddq_f32(v50, vmulq_f32(v51, v40));
      float32x4_t v54 = vaddq_f32(v50, vmulq_f32(v51, v41));
      float32x4_t v55 = vmulq_f32(v41, v41);
      float32x4_t v56 = vmulq_f32(v40, vaddq_f32(v53, vmulq_f32(v44, vaddq_f32(v47, vmulq_f32(v44, v48)))));
      float32x4_t v57 = *((float32x4_t *)a2 + 43);
      float32x4_t v58 = *((float32x4_t *)a2 + 44);
      float32x4_t v59 = vmulq_n_f32(vaddq_f32(v39, vmulq_f32(v41, vaddq_f32(v57, vmulq_f32(v41, vaddq_f32(v54, vmulq_f32(v55, vaddq_f32(v52, vmulq_f32(v55, v49)))))))), COERCE_FLOAT(*(_OWORD *)a2));
      float32x4_t v60 = *((float32x4_t *)a2 + 29);
      float32x4_t v61 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v36, vmulq_f32(v40, vaddq_f32(v57, v56))), COERCE_FLOAT(*(_OWORD *)a2)), v60);
      float32x4_t v62 = vmaxq_f32(v59, v60);
      float32x4_t v63 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
      float32x4_t v64 = vcvtq_f32_s32(vcvtq_s32_f32(v62));
      float32x4_t v65 = vsubq_f32(v63, (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v63, v61)));
      float32x4_t v66 = vsubq_f32(v64, (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v64, v62)));
      float32x4_t v67 = vsubq_f32(v61, v65);
      float32x4_t v68 = vsubq_f32(v62, v66);
      float32x4_t v69 = *((float32x4_t *)a2 + 45);
      float32x4_t v70 = *((float32x4_t *)a2 + 46);
      float32x4_t v71 = vaddq_f32(v58, vmulq_f32(v69, v67));
      float32x4_t v72 = vaddq_f32(v58, vmulq_f32(v69, v68));
      float32x4_t v73 = *((float32x4_t *)a2 + 47);
      float32x4_t v74 = *((float32x4_t *)a2 + 48);
      int32x4_t v75 = *((int32x4_t *)a2 + 33);
      float32x4_t v76 = vmulq_f32(vaddq_f32(v20, vmulq_f32(v67, vaddq_f32(v74, vmulq_f32(v67, vaddq_f32(vaddq_f32(v70, vmulq_f32(v67, v73)), vmulq_f32(vmulq_f32(v67, v67), v71)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v75, vcvtq_s32_f32(v65)), 0x17uLL));
      float32x4_t v77 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2);
      float32x4_t v78 = vmulq_laneq_f32(vmulq_f32(vaddq_f32(v20, vmulq_f32(v68, vaddq_f32(v74, vmulq_f32(v68, vaddq_f32(vaddq_f32(v70, vmulq_f32(v73, v68)), vmulq_f32(vmulq_f32(v68, v68), v72)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v75, vcvtq_s32_f32(v66)), 0x17uLL)), *(float32x4_t *)a2, 3);
      int8x16_t v79 = (int8x16_t)vmulq_n_f32(v16, *(float *)&v18);
      float32x4_t v80 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v18, 1);
      int8x16_t v81 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v80));
      int8x16_t v82 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v17, v80)), (int8x16_t)vmulq_n_f32(v17, *(float *)&v18), (int8x16_t)vaddq_f32(v77, v78));
      int8x16_t v83 = *((int8x16_t *)a2 + 15);
      float32x4_t v84 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0);
      float32x4_t v85 = (int8x16_t *)(v6 + v11);
      v85[-1] = vbslq_s8(v83, (int8x16_t)v12, (int8x16_t)vaddq_f32(v84, (float32x4_t)vbslq_s8(v83, (int8x16_t)v12, vbslq_s8(v81, v79, (int8x16_t)vaddq_f32(v77, vmulq_laneq_f32(v76, *(float32x4_t *)a2, 3))))));
      *float32x4_t v85 = vbslq_s8(v83, (int8x16_t)v13, (int8x16_t)vaddq_f32(v84, (float32x4_t)vbslq_s8(v83, (int8x16_t)v13, v82)));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v86 = -v10;
    if (v86 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v87 = 16 * v86;
    float32x4_t v88 = *(float32x4_t *)(v7 + v87);
    float32x4_t v89 = *((float32x4_t *)a2 + 75);
    float32x4_t v90 = vminq_f32(vmaxq_f32(v88, v89), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbicq_s8((int8x16_t)v89, *((int8x16_t *)a2 + 76)), 3));
    float32x4_t v91 = *((float32x4_t *)a2 + 5);
    float32x4_t v92 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v91, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v89)), v89), (int8x16_t)v91, (int8x16_t)vaddq_f32(v90, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
    float32x4_t v93 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v92), (int8x16_t)v91);
    float32x4_t v94 = (float32x4_t)vandq_s8((int8x16_t)v91, (int8x16_t)vcgtq_f32(v93, *((float32x4_t *)a2 + 23)));
    float32x4_t v95 = vsubq_f32(vsubq_f32(v93, v91), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v94), v93));
    float32x4_t v96 = vmulq_f32(v95, v95);
    float32x4_t v97 = vmaxq_f32(vmulq_n_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v92, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v92))), *((float32x4_t *)a2 + 22)), v94), vmulq_f32(v95, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v95, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v95)),
                        vmulq_f32(v96, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v95)), vmulq_f32(v96, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v95)))))))))), COERCE_FLOAT(*(_OWORD *)a2)), *((float32x4_t *)a2 + 29));
    float32x4_t v98 = vcvtq_f32_s32(vcvtq_s32_f32(v97));
    float32x4_t v99 = vsubq_f32(v98, (float32x4_t)vandq_s8((int8x16_t)v91, (int8x16_t)vcgtq_f32(v98, v97)));
    float32x4_t v100 = vsubq_f32(v97, v99);
    *(int8x16_t *)(v6 + v87) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v88, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v88, vbslq_s8((int8x16_t)vcgtq_f32(v89, vsubq_f32(v90, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v90, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vaddq_f32(
                                                                            (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2), vmulq_laneq_f32(vmulq_f32(vaddq_f32(v91, vmulq_f32(v100, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v100, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v100)), vmulq_f32(
                                                                                            vmulq_f32(v100, v100),
                                                                                            vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v100)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v99)), 0x17uLL)), *(float32x4_t *)a2, 3))))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Gettype4_float_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = 16 * *((int *)a1 + 22);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v10 = 0;
      do
      {
        float32x4_t v11 = *(float32x4_t *)(v5 + v10);
        float32x4_t v12 = *((float32x4_t *)a2 + 75);
        float32x4_t v13 = vminq_f32(vmaxq_f32(v11, v12), (float32x4_t)vdupq_laneq_s32((int32x4_t)vbicq_s8((int8x16_t)v12, *((int8x16_t *)a2 + 76)), 3));
        float32x4_t v14 = *((float32x4_t *)a2 + 5);
        float32x4_t v15 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 0), v12)), v12), (int8x16_t)v14, (int8x16_t)vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2, 1)));
        int8x16_t v16 = *((int8x16_t *)a2 + 52);
        int8x16_t v17 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v15);
        int8x16_t v18 = (int8x16_t)vmulq_f32(v15, vaddq_f32(v14, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 49), v17)));
        float32x4_t v19 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), v18), (int8x16_t)v14);
        float32x4_t v20 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v15, *((float32x4_t *)a2 + 21))), vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v15, *((float32x4_t *)a2 + 50)), *((int8x16_t *)a2 + 51)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vceqq_f32(v15, *((float32x4_t *)a2 + 50)))), (float32x4_t)vandq_s8(v16, v17))), *((float32x4_t *)a2 + 22)), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v18, 0x17uLL)));
        float32x4_t v21 = (float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)vcgtq_f32(v19, *((float32x4_t *)a2 + 23)));
        float32x4_t v22 = vaddq_f32(v20, v21);
        float32x4_t v23 = vsubq_f32(vsubq_f32(v19, v14), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v21), v19));
        float32x4_t v24 = vmulq_f32(v23, v23);
        float32x4_t v25 = vmulq_n_f32(vaddq_f32(v22, vmulq_f32(v23, vaddq_f32(*((float32x4_t *)a2 + 61), vmulq_f32(v23, vaddq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 59), vmulq_f32(*((float32x4_t *)a2 + 60), v23)), vmulq_f32(v24, vaddq_f32(*((float32x4_t *)a2 + 57), vmulq_f32(*((float32x4_t *)a2 + 58), v23)))), vmulq_f32(vmulq_f32(v24, v24), vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 55), vmulq_f32(*((float32x4_t *)a2 + 56), v23)), vmulq_f32(
                                v24,
                                vaddq_f32(*((float32x4_t *)a2 + 53), vmulq_f32(*((float32x4_t *)a2 + 54), v23)))))))))),
                COERCE_FLOAT(*(_OWORD *)a2));
        float32x4_t v26 = vminq_f32(vmaxq_f32(v25, *((float32x4_t *)a2 + 62)), *((float32x4_t *)a2 + 63));
        float32x4_t v27 = vcvtq_f32_s32(vcvtq_s32_f32(v26));
        float32x4_t v28 = vsubq_f32(v27, (float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)vcgtq_f32(v27, v26)));
        float32x4_t v29 = vsubq_f32(v26, v28);
        float32x4_t v30 = vmulq_f32(v29, v29);
        int8x16_t v31 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 70), v28);
        *(int8x16_t *)(v7 + v10) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v11, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 32), 0), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v11, vbslq_s8((int8x16_t)vcgtq_f32(v12, vsubq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)a2 + 16), 1))), (int8x16_t)vmulq_n_f32(v13, COERCE_FLOAT(*((_OWORD *)a2 + 1))), (int8x16_t)vaddq_f32(
                                                                                (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 2), vmulq_laneq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v14, vorrq_s8((int8x16_t)vcltzq_f32(v25), (int8x16_t)vcgezq_f32(v25))), v12), (int8x16_t)vmulq_f32(vaddq_f32(v14, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 71), v31)), vmulq_f32(vaddq_f32(v14, vmulq_f32(v29, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 68), vmulq_f32(v29, *((float32x4_t *)a2 + 69))), vmulq_f32(v30, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 66), vmulq_f32(*((float32x4_t *)a2 + 67), v29)), vmulq_f32(v30, vaddq_f32(*((float32x4_t *)a2 + 64), vmulq_f32(*((float32x4_t *)a2 + 65), v29)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(vaddq_f32(v28, (float32x4_t)vandq_s8(v16, v31)))), 0x17uLL))), (int8x16_t)v25), *(float32x4_t *)a2, 3))))));
        v10 += 16;
      }
      while (v9 != v10);
      ++v4;
      v5 += v6;
      v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t Getrec709_fast_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    uint64_t v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v35 = 0;
        uint64_t v36 = 16 * v8;
        uint64_t v37 = 16 * v7;
        uint64_t v38 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v39 = 0;
          do
          {
            float32x4_t v40 = v5[v39 / 0x10];
            float32x4_t v41 = vminq_f32(vmaxq_f32(v40, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            v6[v39 / 0x10] = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v40, (int8x16_t)vmulq_f32(v41, vminq_f32(vrsqrteq_f32(v41), *((float32x4_t *)a2 + 73))));
            v39 += 16;
          }
          while (v38 != v39);
          ++v35;
          uint64_t v5 = (float32x4_t *)((char *)v5 + v36);
          uint64_t v6 = (int8x16_t *)((char *)v6 + v37);
        }
        while (v35 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      float32x4_t v12 = v5 + 4;
      float32x4_t v13 = v6 + 4;
      do
      {
        unint64_t v14 = 0;
        float32x4_t v15 = v13;
        int8x16_t v16 = v12;
        uint64_t v17 = 2;
        do
        {
          int8x16_t v18 = v16;
          float32x4_t v19 = v15;
          float32x4_t v20 = v5[v17 - 2];
          float32x4_t v21 = v5[v17 - 1];
          float32x4_t v22 = v5[v17];
          float32x4_t v23 = v5[v17 + 1];
          float32x4_t v24 = *((float32x4_t *)a2 + 75);
          float32x4_t v25 = *((float32x4_t *)a2 + 5);
          float32x4_t v26 = vminq_f32(vmaxq_f32(v20, v24), v25);
          float32x4_t v27 = vminq_f32(vmaxq_f32(v21, v24), v25);
          float32x4_t v28 = vminq_f32(vmaxq_f32(v22, v24), v25);
          float32x4_t v29 = vminq_f32(vmaxq_f32(v23, v24), v25);
          float32x4_t v30 = *((float32x4_t *)a2 + 73);
          int8x16_t v31 = *((int8x16_t *)a2 + 15);
          float32x4_t v32 = &v6[v17];
          v32[-2] = vbslq_s8(v31, (int8x16_t)v20, (int8x16_t)vmulq_f32(v26, vminq_f32(vrsqrteq_f32(v26), v30)));
          v32[-1] = vbslq_s8(v31, (int8x16_t)v21, (int8x16_t)vmulq_f32(v27, vminq_f32(vrsqrteq_f32(v27), v30)));
          v14 += 4;
          *float32x4_t v32 = vbslq_s8(v31, (int8x16_t)v22, (int8x16_t)vmulq_f32(v28, vminq_f32(vrsqrteq_f32(v28), v30)));
          v32[1] = vbslq_s8(v31, (int8x16_t)v23, (int8x16_t)vmulq_f32(v29, vminq_f32(vrsqrteq_f32(v29), v30)));
          v17 += 4;
          v16 += 4;
          float32x4_t v15 = v19 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            float32x4_t v33 = *v18++;
            float32x4_t v34 = vminq_f32(vmaxq_f32(v33, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            *v19++ = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v33, (int8x16_t)vmulq_f32(v34, vminq_f32(vrsqrteq_f32(v34), *((float32x4_t *)a2 + 73))));
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        uint64_t v6 = (int8x16_t *)((char *)v6 + v10);
        uint64_t v5 = (float32x4_t *)((char *)v5 + v11);
        float32x4_t v12 = (float32x4_t *)((char *)v12 + v11);
        float32x4_t v13 = (int8x16_t *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

uint64_t Getrec709_fixed_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v76) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *(float32x4_t *)(v7 + v10 + 32);
      float32x4_t v16 = *((float32x4_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v12, v14), v16);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v13, v14), v16);
      float32x4_t v20 = vminq_f32(vmaxq_f32(v15, v14), v16);
      float32x4_t v21 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)v18));
      float32x4_t v22 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)v19));
      float32x4_t v23 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)v20));
      float32x4_t v24 = vcvtq_f32_s32(vcvtq_s32_f32(v21));
      float32x4_t v25 = vcvtq_f32_s32(vcvtq_s32_f32(v22));
      float32x4_t v26 = vcvtq_f32_s32(vcvtq_s32_f32(v23));
      float32x4_t v27 = *((float32x4_t *)a2 + 7);
      float32x4_t v28 = *((float32x4_t *)a2 + 8);
      float32x4_t v29 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v21, v24), v27));
      float32x4_t v30 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v22, v25), v27));
      float32x4_t v31 = vrsqrteq_f32(vaddq_f32(v27, vsubq_f32(v23, v26)));
      float32x4_t v32 = vaddq_f32(v28, v24);
      float32x4_t v33 = vaddq_f32(v28, v25);
      float32x4_t v34 = vaddq_f32(v28, v26);
      float32x4_t v35 = *((float32x4_t *)a2 + 9);
      float32x4_t v36 = *((float32x4_t *)a2 + 10);
      float32x4_t v37 = vsubq_f32(v32, vmulq_f32(v29, v35));
      float32x4_t v38 = *((float32x4_t *)a2 + 77);
      float32x4_t v39 = vmulq_f32(v38, v37);
      float32x4_t v40 = vmulq_f32(v38, vsubq_f32(v33, vmulq_f32(v30, v35)));
      float32x4_t v41 = vmulq_f32(v38, vsubq_f32(v34, vmulq_f32(v31, v35)));
      float32x4_t v42 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
      float32x4_t v43 = vcvtq_f32_s32(vcvtq_s32_f32(v40));
      float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
      float32x4_t v45 = vsubq_f32(v42, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v42, v39)));
      float32x4_t v46 = vsubq_f32(v43, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v43, v40)));
      float32x4_t v47 = vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v44, v41)));
      float32x4_t v48 = *((float32x4_t *)a2 + 11);
      float32x4_t v49 = *((float32x4_t *)a2 + 12);
      float32x4_t v50 = vmulq_f32(vrecpeq_f32(vsubq_f32(v48, vsubq_f32(v39, v45))), v49);
      float32x4_t v51 = vmulq_f32(vrecpeq_f32(vsubq_f32(v48, vsubq_f32(v40, v46))), v49);
      float32x4_t v52 = vmulq_f32(vrecpeq_f32(vsubq_f32(v48, vsubq_f32(v41, v47))), v49);
      float32x4_t v53 = vaddq_f32(vaddq_f32(v36, v47), vmulq_f32(v52, v52));
      float32x4_t v54 = vmaxq_f32(vaddq_f32(vaddq_f32(v36, v45), vmulq_f32(v50, v50)), v14);
      float32x4_t v55 = vmaxq_f32(vaddq_f32(vaddq_f32(v36, v46), vmulq_f32(v51, v51)), v14);
      float32x4_t v56 = *((float32x4_t *)a2 + 13);
      float32x4_t v57 = *((float32x4_t *)a2 + 14);
      float32x4_t v58 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v54, v56), v57));
      float32x4_t v59 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v55, v56), v57));
      float32x4_t v60 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(v53, v14), v56), v57));
      float32x4_t v61 = *((float32x4_t *)a2 + 78);
      float32x4_t v62 = *((float32x4_t *)a2 + 79);
      int8x16_t v63 = (int8x16_t)vaddq_f32(v61, vmulq_f32(v62, v58));
      int8x16_t v64 = (int8x16_t)vaddq_f32(v61, vmulq_f32(v62, v59));
      float32x4_t v65 = vmulq_f32(v62, v60);
      float32x4_t v66 = *((float32x4_t *)a2 + 80);
      int8x16_t v67 = (int8x16_t)vmulq_f32(v18, v66);
      int8x16_t v68 = (int8x16_t)vaddq_f32(v61, v65);
      int8x16_t v69 = (int8x16_t)vmulq_f32(v19, v66);
      float32x4_t v70 = *((float32x4_t *)a2 + 81);
      int8x16_t v71 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v70));
      int8x16_t v72 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v19, v70));
      int8x16_t v73 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v20, v70)), (int8x16_t)vmulq_f32(v20, v66), v68);
      int8x16_t v74 = *((int8x16_t *)a2 + 15);
      int32x4_t v75 = (int8x16_t *)(v6 + v10);
      *int32x4_t v75 = vbslq_s8(v74, (int8x16_t)v12, vbslq_s8(v71, v67, v63));
      v75[1] = vbslq_s8(v74, (int8x16_t)v13, vbslq_s8(v72, v69, v64));
      v75[2] = vbslq_s8(v74, (int8x16_t)v15, v73);
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v76) = -v11;
    if ((int)v76 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v76 = v76;
    do
    {
      float32x4_t v77 = *(float32x4_t *)(v7 + 16 * v76);
      float32x4_t v78 = *((float32x4_t *)a2 + 75);
      float32x4_t v79 = *((float32x4_t *)a2 + 5);
      float32x4_t v80 = vminq_f32(vmaxq_f32(v77, v78), v79);
      float32x4_t v81 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)v80));
      float32x4_t v82 = vcvtq_f32_s32(vcvtq_s32_f32(v81));
      float32x4_t v83 = vmulq_f32(*((float32x4_t *)a2 + 77), vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v82), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v81, v82))), *((float32x4_t *)a2 + 9))));
      float32x4_t v84 = vcvtq_f32_s32(vcvtq_s32_f32(v83));
      float32x4_t v85 = vsubq_f32(v84, (float32x4_t)vandq_s8((int8x16_t)v79, (int8x16_t)vcgtq_f32(v84, v83)));
      float32x4_t v86 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v83, v85))), *((float32x4_t *)a2 + 12));
      *(int8x16_t *)(v6 + 16 * v76++) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v77, vbslq_s8((int8x16_t)vcgtq_f32(v78, vsubq_f32(v80, *((float32x4_t *)a2 + 81))), (int8x16_t)vmulq_f32(v80, *((float32x4_t *)a2 + 80)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 78), vmulq_f32(*((float32x4_t *)a2 + 79), (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v85), vmulq_f32(v86, v86)), v78),
                                                                              *((float32x4_t *)a2 + 13)),
                                                                            *((float32x4_t *)a2 + 14)))))));
    }
    while (v76 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec709_nice_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v91 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v17 = *((float32x4_t *)a2 + 77);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v12, v14), v15);
      int8x16_t v19 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vceqq_f32(v17, v14)), v14);
      float32x4_t v20 = (float32x4_t)vbslq_s8(v19, (int8x16_t)v15, (int8x16_t)v16);
      float32x4_t v21 = (float32x4_t)vbslq_s8(v19, (int8x16_t)v15, (int8x16_t)v18);
      int8x16_t v22 = *((int8x16_t *)a2 + 19);
      float32x4_t v23 = *((float32x4_t *)a2 + 20);
      float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v20), (int8x16_t)v15);
      float32x4_t v25 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v21), (int8x16_t)v15);
      int8x16_t v26 = *((int8x16_t *)a2 + 21);
      float32x4_t v27 = *((float32x4_t *)a2 + 22);
      float32x4_t v28 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v23, v20)));
      float32x4_t v29 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v21, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v23, v21)));
      float32x4_t v30 = *((float32x4_t *)a2 + 23);
      float32x4_t v31 = *((float32x4_t *)a2 + 24);
      float32x4_t v32 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v24, v30));
      float32x4_t v33 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v25, v30));
      float32x4_t v34 = vaddq_f32(vsubq_f32(v28, v27), v32);
      float32x4_t v35 = vmulq_f32(v31, v32);
      float32x4_t v36 = vmulq_f32(vmulq_f32(v31, v33), v25);
      float32x4_t v37 = vaddq_f32(vsubq_f32(v29, v27), v33);
      float32x4_t v38 = vsubq_f32(vsubq_f32(v24, v15), vmulq_f32(v35, v24));
      float32x4_t v39 = vsubq_f32(vsubq_f32(v25, v15), v36);
      float32x4_t v40 = vmulq_f32(v38, v38);
      float32x4_t v41 = vmulq_f32(v39, v39);
      float32x4_t v42 = *((float32x4_t *)a2 + 37);
      float32x4_t v43 = *((float32x4_t *)a2 + 38);
      float32x4_t v44 = *((float32x4_t *)a2 + 39);
      float32x4_t v45 = *((float32x4_t *)a2 + 40);
      float32x4_t v46 = vaddq_f32(v42, vmulq_f32(v43, v38));
      float32x4_t v47 = vaddq_f32(v44, vmulq_f32(v45, v38));
      float32x4_t v48 = vaddq_f32(v44, vmulq_f32(v45, v39));
      float32x4_t v49 = vaddq_f32(v42, vmulq_f32(v43, v39));
      float32x4_t v50 = *((float32x4_t *)a2 + 41);
      float32x4_t v51 = *((float32x4_t *)a2 + 42);
      float32x4_t v52 = vaddq_f32(vaddq_f32(v50, vmulq_f32(v51, v39)), vmulq_f32(v41, vaddq_f32(v49, vmulq_f32(v41, v48))));
      float32x4_t v53 = vmulq_f32(v38, vaddq_f32(vaddq_f32(v50, vmulq_f32(v51, v38)), vmulq_f32(v40, vaddq_f32(v46, vmulq_f32(v40, v47)))));
      float32x4_t v54 = *((float32x4_t *)a2 + 43);
      float32x4_t v55 = *((float32x4_t *)a2 + 44);
      float32x4_t v56 = vmulq_f32(v17, vaddq_f32(v34, vmulq_f32(v38, vaddq_f32(v54, v53))));
      float32x4_t v57 = vmulq_f32(v17, vaddq_f32(v37, vmulq_f32(v39, vaddq_f32(v54, vmulq_f32(v39, v52)))));
      float32x4_t v58 = *((float32x4_t *)a2 + 29);
      float32x4_t v59 = vmaxq_f32(v56, v58);
      float32x4_t v60 = vmaxq_f32(v57, v58);
      float32x4_t v61 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v62 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
      float32x4_t v63 = vsubq_f32(v61, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v61, v59)));
      float32x4_t v64 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v62, v60)));
      float32x4_t v65 = vsubq_f32(v59, v63);
      float32x4_t v66 = vsubq_f32(v60, v64);
      float32x4_t v67 = *((float32x4_t *)a2 + 45);
      float32x4_t v68 = *((float32x4_t *)a2 + 46);
      float32x4_t v69 = vaddq_f32(v55, vmulq_f32(v67, v65));
      float32x4_t v70 = vaddq_f32(v55, vmulq_f32(v67, v66));
      float32x4_t v71 = *((float32x4_t *)a2 + 47);
      float32x4_t v72 = *((float32x4_t *)a2 + 48);
      float32x4_t v73 = vaddq_f32(v15, vmulq_f32(v65, vaddq_f32(v72, vmulq_f32(v65, vaddq_f32(vaddq_f32(v68, vmulq_f32(v65, v71)), vmulq_f32(vmulq_f32(v65, v65), v69))))));
      int32x4_t v74 = *((int32x4_t *)a2 + 33);
      float32x4_t v75 = vaddq_f32(v15, vmulq_f32(v66, vaddq_f32(v72, vmulq_f32(v66, vaddq_f32(vaddq_f32(v68, vmulq_f32(v71, v66)), vmulq_f32(vmulq_f32(v66, v66), v70))))));
      float32x4_t v76 = (float32x4_t)vshlq_n_s32(vaddq_s32(v74, vcvtq_s32_f32(v63)), 0x17uLL);
      float32x4_t v77 = (float32x4_t)vshlq_n_s32(vaddq_s32(v74, vcvtq_s32_f32(v64)), 0x17uLL);
      float32x4_t v78 = vmulq_f32(v73, v76);
      float32x4_t v79 = *((float32x4_t *)a2 + 78);
      float32x4_t v80 = *((float32x4_t *)a2 + 79);
      int8x16_t v81 = (int8x16_t)vaddq_f32(v79, vmulq_f32(v80, v78));
      float32x4_t v82 = vmulq_f32(v80, vmulq_f32(v75, v77));
      float32x4_t v83 = *((float32x4_t *)a2 + 80);
      int8x16_t v84 = (int8x16_t)vmulq_f32(v16, v83);
      int8x16_t v85 = (int8x16_t)vaddq_f32(v79, v82);
      float32x4_t v86 = *((float32x4_t *)a2 + 81);
      int8x16_t v87 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v86));
      int8x16_t v88 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v86)), (int8x16_t)vmulq_f32(v18, v83), v85);
      int8x16_t v89 = *((int8x16_t *)a2 + 15);
      float32x4_t v90 = (int8x16_t *)(v6 + v11);
      v90[-1] = vbslq_s8(v89, (int8x16_t)v13, vbslq_s8(v87, v84, v81));
      *float32x4_t v90 = vbslq_s8(v89, (int8x16_t)v12, v88);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v91 = -v10;
    if (v91 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v92 = 16 * v91;
    float32x4_t v93 = *(float32x4_t *)(v7 + v92);
    float32x4_t v94 = *((float32x4_t *)a2 + 75);
    float32x4_t v95 = *((float32x4_t *)a2 + 5);
    float32x4_t v96 = vminq_f32(vmaxq_f32(v93, v94), v95);
    float32x4_t v97 = *((float32x4_t *)a2 + 77);
    float32x4_t v98 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vceqq_f32(v97, v94)), v94), (int8x16_t)v95, (int8x16_t)v96);
    float32x4_t v99 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v98), (int8x16_t)v95);
    float32x4_t v100 = (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v99, *((float32x4_t *)a2 + 23)));
    float32x4_t v101 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v98, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v98))), *((float32x4_t *)a2 + 22)), v100);
    float32x4_t v102 = vsubq_f32(vsubq_f32(v99, v95), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v100), v99));
    float32x4_t v103 = vmulq_f32(v102, v102);
    float32x4_t v104 = vmaxq_f32(vmulq_f32(v97, vaddq_f32(v101, vmulq_f32(v102, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v102, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v102)), vmulq_f32(v103, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v102)), vmulq_f32(v103, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v102))))))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v105 = vcvtq_f32_s32(vcvtq_s32_f32(v104));
    float32x4_t v106 = vsubq_f32(v105, (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v105, v104)));
    float32x4_t v107 = vsubq_f32(v104, v106);
    *(int8x16_t *)(v6 + v92) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v93, vbslq_s8((int8x16_t)vcgtq_f32(v94, vsubq_f32(v96, *((float32x4_t *)a2 + 81))), (int8x16_t)vmulq_f32(v96, *((float32x4_t *)a2 + 80)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 78), vmulq_f32(*((float32x4_t *)a2 + 79), vmulq_f32(vaddq_f32(v95, vmulq_f32(v107, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v107, vaddq_f32(
                                                              vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v107)), vmulq_f32(vmulq_f32(v107, v107), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v107)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v106)), 0x17uLL))))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec709_half_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v76 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v17 = vminq_f32(vmaxq_f32(v12, v14), v15);
      int8x16_t v18 = *((int8x16_t *)a2 + 19);
      float32x4_t v19 = *((float32x4_t *)a2 + 20);
      float32x4_t v20 = (float32x4_t)vorrq_s8(vandq_s8(v18, (int8x16_t)v16), (int8x16_t)v15);
      float32x4_t v21 = (float32x4_t)vorrq_s8(vandq_s8(v18, (int8x16_t)v17), (int8x16_t)v15);
      int8x16_t v22 = (int8x16_t)vcgtq_f32(v19, v16);
      int8x16_t v23 = *((int8x16_t *)a2 + 21);
      float32x4_t v24 = *((float32x4_t *)a2 + 22);
      float32x4_t v25 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v17, 0x17uLL)), (float32x4_t)vandq_s8(v23, (int8x16_t)vcgtq_f32(v19, v17)));
      float32x4_t v26 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v16, 0x17uLL)), (float32x4_t)vandq_s8(v23, v22)), v24);
      float32x4_t v27 = *((float32x4_t *)a2 + 23);
      float32x4_t v28 = *((float32x4_t *)a2 + 24);
      float32x4_t v29 = vsubq_f32(v25, v24);
      float32x4_t v30 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v20, v27));
      float32x4_t v31 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v21, v27));
      float32x4_t v32 = vsubq_f32(vsubq_f32(v20, v15), vmulq_f32(vmulq_f32(v28, v30), v20));
      float32x4_t v33 = vsubq_f32(vsubq_f32(v21, v15), vmulq_f32(vmulq_f32(v28, v31), v21));
      float32x4_t v34 = *((float32x4_t *)a2 + 25);
      float32x4_t v35 = *((float32x4_t *)a2 + 26);
      float32x4_t v36 = vaddq_f32(v34, vmulq_f32(v35, v32));
      float32x4_t v37 = vaddq_f32(v34, vmulq_f32(v35, v33));
      float32x4_t v38 = *((float32x4_t *)a2 + 27);
      float32x4_t v39 = *((float32x4_t *)a2 + 28);
      float32x4_t v40 = vaddq_f32(vaddq_f32(v29, v31), vmulq_f32(v33, vaddq_f32(vaddq_f32(v38, vmulq_f32(v33, v39)), vmulq_f32(vmulq_f32(v33, v33), v37))));
      float32x4_t v41 = *((float32x4_t *)a2 + 77);
      float32x4_t v42 = vmulq_f32(v41, vaddq_f32(vaddq_f32(v26, v30), vmulq_f32(v32, vaddq_f32(vaddq_f32(v38, vmulq_f32(v32, v39)), vmulq_f32(vmulq_f32(v32, v32), v36)))));
      float32x4_t v43 = vmulq_f32(v41, v40);
      float32x4_t v44 = *((float32x4_t *)a2 + 29);
      float32x4_t v45 = *((float32x4_t *)a2 + 30);
      float32x4_t v46 = vmaxq_f32(v42, v44);
      float32x4_t v47 = vmaxq_f32(v43, v44);
      float32x4_t v48 = vcvtq_f32_s32(vcvtq_s32_f32(v46));
      float32x4_t v49 = vcvtq_f32_s32(vcvtq_s32_f32(v47));
      float32x4_t v50 = vsubq_f32(v48, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v48, v46)));
      float32x4_t v51 = vsubq_f32(v49, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v49, v47)));
      float32x4_t v52 = vsubq_f32(v46, v50);
      float32x4_t v53 = *((float32x4_t *)a2 + 31);
      float32x4_t v54 = *((float32x4_t *)a2 + 32);
      float32x4_t v55 = vsubq_f32(v47, v51);
      float32x4_t v56 = vmulq_f32(v55, vaddq_f32(v54, vmulq_f32(v55, vaddq_f32(v45, vmulq_f32(v53, v55)))));
      float32x4_t v57 = vaddq_f32(v15, vmulq_f32(v52, vaddq_f32(v54, vmulq_f32(v52, vaddq_f32(v45, vmulq_f32(v53, v52))))));
      int32x4_t v58 = vcvtq_s32_f32(v51);
      int32x4_t v59 = *((int32x4_t *)a2 + 33);
      float32x4_t v60 = vaddq_f32(v15, v56);
      float32x4_t v61 = (float32x4_t)vshlq_n_s32(vaddq_s32(v59, vcvtq_s32_f32(v50)), 0x17uLL);
      float32x4_t v62 = (float32x4_t)vshlq_n_s32(vaddq_s32(v59, v58), 0x17uLL);
      float32x4_t v63 = vmulq_f32(v57, v61);
      float32x4_t v64 = *((float32x4_t *)a2 + 78);
      float32x4_t v65 = *((float32x4_t *)a2 + 79);
      int8x16_t v66 = (int8x16_t)vaddq_f32(v64, vmulq_f32(v65, v63));
      float32x4_t v67 = vmulq_f32(v65, vmulq_f32(v60, v62));
      float32x4_t v68 = *((float32x4_t *)a2 + 80);
      int8x16_t v69 = (int8x16_t)vmulq_f32(v16, v68);
      int8x16_t v70 = (int8x16_t)vaddq_f32(v64, v67);
      float32x4_t v71 = *((float32x4_t *)a2 + 81);
      int8x16_t v72 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v71));
      int8x16_t v73 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v17, v71)), (int8x16_t)vmulq_f32(v17, v68), v70);
      int8x16_t v74 = *((int8x16_t *)a2 + 15);
      float32x4_t v75 = (int8x16_t *)(v6 + v11);
      v75[-1] = vbslq_s8(v74, (int8x16_t)v13, vbslq_s8(v72, v69, v66));
      *float32x4_t v75 = vbslq_s8(v74, (int8x16_t)v12, v73);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v76 = -v10;
    if (v76 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v77 = 16 * v76;
    float32x4_t v78 = *(float32x4_t *)(v7 + v77);
    float32x4_t v79 = *((float32x4_t *)a2 + 75);
    float32x4_t v80 = *((float32x4_t *)a2 + 5);
    float32x4_t v81 = vminq_f32(vmaxq_f32(v78, v79), v80);
    float32x4_t v82 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v81), (int8x16_t)v80);
    float32x4_t v83 = (float32x4_t)vandq_s8((int8x16_t)v80, (int8x16_t)vcgtq_f32(v82, *((float32x4_t *)a2 + 23)));
    float32x4_t v84 = vsubq_f32(vsubq_f32(v82, v80), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v83), v82));
    float32x4_t v85 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 77), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v81, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v81))), *((float32x4_t *)a2 + 22)), v83), vmulq_f32(v84, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v84, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v84, v84), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v84))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v86 = vcvtq_f32_s32(vcvtq_s32_f32(v85));
    float32x4_t v87 = vsubq_f32(v86, (float32x4_t)vandq_s8((int8x16_t)v80, (int8x16_t)vcgtq_f32(v86, v85)));
    float32x4_t v88 = vsubq_f32(v85, v87);
    *(int8x16_t *)(v6 + v77) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v78, vbslq_s8((int8x16_t)vcgtq_f32(v79, vsubq_f32(v81, *((float32x4_t *)a2 + 81))), (int8x16_t)vmulq_f32(v81, *((float32x4_t *)a2 + 80)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 78), vmulq_f32(*((float32x4_t *)a2 + 79), vmulq_f32(vaddq_f32(v80, vmulq_f32(v88, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v88, vaddq_f32(
                                                              *((float32x4_t *)a2 + 30),
                                                              vmulq_f32(*((float32x4_t *)a2 + 31), v88)))))),
                                                    (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v87)), 0x17uLL))))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec709_half_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v81 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 82);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v16 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmaxq_f32(v13, v14));
      float32x4_t v17 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v12, (int8x16_t)vmaxq_f32(v12, v14));
      float32x4_t v18 = *((float32x4_t *)a2 + 75);
      int8x16_t v19 = (int8x16_t)vcgtq_f32(v18, v16);
      int8x16_t v20 = (int8x16_t)vcgtq_f32(v18, v17);
      int8x16_t v21 = *((int8x16_t *)a2 + 83);
      float32x4_t v22 = *((float32x4_t *)a2 + 5);
      float32x4_t v23 = vmulq_f32(v16, (float32x4_t)vbslq_s8(v19, v21, (int8x16_t)v22));
      float32x4_t v24 = vmulq_f32(v17, (float32x4_t)vbslq_s8(v20, v21, (int8x16_t)v22));
      float32x4_t v25 = *((float32x4_t *)a2 + 84);
      float32x4_t v26 = vminq_f32(v23, v25);
      float32x4_t v27 = vminq_f32(v24, v25);
      int8x16_t v28 = *((int8x16_t *)a2 + 19);
      float32x4_t v29 = *((float32x4_t *)a2 + 20);
      float32x4_t v30 = (float32x4_t)vorrq_s8(vandq_s8(v28, (int8x16_t)v26), (int8x16_t)v22);
      int8x16_t v31 = *((int8x16_t *)a2 + 21);
      float32x4_t v32 = *((float32x4_t *)a2 + 22);
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8(v28, (int8x16_t)v27), (int8x16_t)v22);
      float32x4_t v34 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v27, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v29, v27)));
      float32x4_t v35 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v26, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v29, v26))), v32);
      float32x4_t v36 = *((float32x4_t *)a2 + 23);
      float32x4_t v37 = *((float32x4_t *)a2 + 24);
      float32x4_t v38 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v30, v36));
      float32x4_t v39 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v33, v36));
      float32x4_t v40 = vaddq_f32(v35, v38);
      float32x4_t v41 = vmulq_f32(v37, v38);
      float32x4_t v42 = vmulq_f32(vmulq_f32(v37, v39), v33);
      float32x4_t v43 = vaddq_f32(vsubq_f32(v34, v32), v39);
      float32x4_t v44 = vsubq_f32(vsubq_f32(v30, v22), vmulq_f32(v41, v30));
      float32x4_t v45 = vsubq_f32(vsubq_f32(v33, v22), v42);
      float32x4_t v46 = *((float32x4_t *)a2 + 25);
      float32x4_t v47 = *((float32x4_t *)a2 + 26);
      float32x4_t v48 = vaddq_f32(v46, vmulq_f32(v47, v44));
      float32x4_t v49 = vaddq_f32(v46, vmulq_f32(v47, v45));
      float32x4_t v51 = *((float32x4_t *)a2 + 27);
      float32x4_t v50 = *((float32x4_t *)a2 + 28);
      float32x4_t v52 = vaddq_f32(v43, vmulq_f32(v45, vaddq_f32(vaddq_f32(v51, vmulq_f32(v45, v50)), vmulq_f32(vmulq_f32(v45, v45), v49))));
      float32x4_t v53 = *((float32x4_t *)a2 + 77);
      float32x4_t v54 = vmulq_f32(v53, vaddq_f32(v40, vmulq_f32(v44, vaddq_f32(vaddq_f32(v51, vmulq_f32(v44, v50)), vmulq_f32(vmulq_f32(v44, v44), v48)))));
      float32x4_t v55 = vmulq_f32(v53, v52);
      float32x4_t v56 = *((float32x4_t *)a2 + 29);
      float32x4_t v57 = *((float32x4_t *)a2 + 30);
      float32x4_t v58 = vmaxq_f32(v54, v56);
      float32x4_t v59 = vmaxq_f32(v55, v56);
      float32x4_t v60 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v61 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v62 = vsubq_f32(v60, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v60, v58)));
      float32x4_t v63 = vsubq_f32(v61, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v61, v59)));
      float32x4_t v64 = vsubq_f32(v58, v62);
      float32x4_t v65 = vsubq_f32(v59, v63);
      float32x4_t v66 = *((float32x4_t *)a2 + 31);
      float32x4_t v67 = *((float32x4_t *)a2 + 32);
      float32x4_t v68 = vmulq_f32(v65, vaddq_f32(v67, vmulq_f32(v65, vaddq_f32(v57, vmulq_f32(v66, v65)))));
      float32x4_t v69 = vaddq_f32(v22, vmulq_f32(v64, vaddq_f32(v67, vmulq_f32(v64, vaddq_f32(v57, vmulq_f32(v66, v64))))));
      int32x4_t v70 = vcvtq_s32_f32(v63);
      int32x4_t v71 = *((int32x4_t *)a2 + 33);
      float32x4_t v72 = vmulq_f32(v69, (float32x4_t)vshlq_n_s32(vaddq_s32(v71, vcvtq_s32_f32(v62)), 0x17uLL));
      float32x4_t v73 = vmulq_f32(vaddq_f32(v22, v68), (float32x4_t)vshlq_n_s32(vaddq_s32(v71, v70), 0x17uLL));
      float32x4_t v74 = *((float32x4_t *)a2 + 78);
      float32x4_t v75 = *((float32x4_t *)a2 + 79);
      float32x4_t v76 = vmulq_f32(v75, v73);
      int8x16_t v77 = (int8x16_t)vaddq_f32(v74, vmulq_f32(v75, v72));
      float32x4_t v78 = *((float32x4_t *)a2 + 80);
      float32x4_t v79 = *((float32x4_t *)a2 + 81);
      float32x4_t v80 = (int8x16_t *)(v6 + v11);
      v80[-1] = vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v23, v79)), (int8x16_t)vmulq_f32(v23, v78), v77), (float32x4_t)vbslq_s8(v19, (int8x16_t)v14, (int8x16_t)v22)));
      *float32x4_t v80 = vbslq_s8(v15, (int8x16_t)v12, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v24, v79)), (int8x16_t)vmulq_f32(v24, v78), (int8x16_t)vaddq_f32(v74, v76)), (float32x4_t)vbslq_s8(v20, (int8x16_t)v14, (int8x16_t)v22)));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v81 = -v10;
    if (v81 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v82 = 16 * v81;
    float32x4_t v83 = *(float32x4_t *)(v7 + v82);
    float32x4_t v84 = *((float32x4_t *)a2 + 82);
    float32x4_t v85 = (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v83, (int8x16_t)vmaxq_f32(v83, v84));
    float32x4_t v86 = *((float32x4_t *)a2 + 75);
    int8x16_t v87 = (int8x16_t)vcgtq_f32(v86, v85);
    float32x4_t v88 = *((float32x4_t *)a2 + 5);
    float32x4_t v89 = vmulq_f32(v85, (float32x4_t)vbslq_s8(v87, *((int8x16_t *)a2 + 83), (int8x16_t)v88));
    float32x4_t v90 = vminq_f32(v89, *((float32x4_t *)a2 + 84));
    float32x4_t v91 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v90), (int8x16_t)v88);
    float32x4_t v92 = (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v91, *((float32x4_t *)a2 + 23)));
    float32x4_t v93 = vsubq_f32(vsubq_f32(v91, v88), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v92), v91));
    float32x4_t v94 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 77), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v90, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v90))), *((float32x4_t *)a2 + 22)), v92), vmulq_f32(v93, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v93, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v93, v93), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v93))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v95 = vcvtq_f32_s32(vcvtq_s32_f32(v94));
    float32x4_t v96 = vsubq_f32(v95, (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v95, v94)));
    float32x4_t v97 = vsubq_f32(v94, v96);
    *(int8x16_t *)(v6 + v82) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v83, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v86, vsubq_f32(v89, *((float32x4_t *)a2 + 81))), (int8x16_t)vmulq_f32(v89, *((float32x4_t *)a2 + 80)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 78), vmulq_f32(*((float32x4_t *)a2 + 79), vmulq_f32(vaddq_f32(v88, vmulq_f32(v97, vaddq_f32(*((float32x4_t *)a2 + 32),
                                                                                    vmulq_f32(v97, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v97)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v96)), 0x17uLL))))), (float32x4_t)vbslq_s8(v87, (int8x16_t)v84, (int8x16_t)v88)));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec709_nice_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v88 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 82);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v16 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmaxq_f32(v13, v14));
      float32x4_t v17 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v12, (int8x16_t)vmaxq_f32(v12, v14));
      float32x4_t v18 = *((float32x4_t *)a2 + 75);
      int8x16_t v19 = (int8x16_t)vcgtq_f32(v18, v16);
      int8x16_t v20 = *((int8x16_t *)a2 + 83);
      float32x4_t v21 = *((float32x4_t *)a2 + 5);
      int8x16_t v22 = (int8x16_t)vcgtq_f32(v18, v17);
      float32x4_t v23 = vmulq_f32(v16, (float32x4_t)vbslq_s8(v19, v20, (int8x16_t)v21));
      float32x4_t v24 = vmulq_f32(v17, (float32x4_t)vbslq_s8(v22, v20, (int8x16_t)v21));
      float32x4_t v25 = *((float32x4_t *)a2 + 84);
      int8x16_t v26 = (int8x16_t)vminq_f32(v23, v25);
      int8x16_t v27 = (int8x16_t)vminq_f32(v24, v25);
      float32x4_t v28 = *((float32x4_t *)a2 + 77);
      int8x16_t v29 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vceqq_f32(v28, v18)), v18);
      float32x4_t v30 = (float32x4_t)vbslq_s8(v29, (int8x16_t)v21, v26);
      float32x4_t v31 = (float32x4_t)vbslq_s8(v29, (int8x16_t)v21, v27);
      int8x16_t v32 = *((int8x16_t *)a2 + 19);
      float32x4_t v33 = *((float32x4_t *)a2 + 20);
      float32x4_t v34 = (float32x4_t)vorrq_s8(vandq_s8(v32, (int8x16_t)v30), (int8x16_t)v21);
      float32x4_t v35 = (float32x4_t)vorrq_s8(vandq_s8(v32, (int8x16_t)v31), (int8x16_t)v21);
      int8x16_t v36 = *((int8x16_t *)a2 + 21);
      float32x4_t v37 = *((float32x4_t *)a2 + 22);
      float32x4_t v38 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v31, 0x17uLL)), (float32x4_t)vandq_s8(v36, (int8x16_t)vcgtq_f32(v33, v31)));
      float32x4_t v39 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(v36, (int8x16_t)vcgtq_f32(v33, v30))), v37);
      float32x4_t v40 = *((float32x4_t *)a2 + 23);
      float32x4_t v41 = *((float32x4_t *)a2 + 24);
      float32x4_t v42 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v34, v40));
      float32x4_t v43 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v35, v40));
      float32x4_t v44 = vaddq_f32(v39, v42);
      float32x4_t v45 = vaddq_f32(vsubq_f32(v38, v37), v43);
      float32x4_t v46 = vsubq_f32(vsubq_f32(v34, v21), vmulq_f32(vmulq_f32(v41, v42), v34));
      float32x4_t v47 = vsubq_f32(vsubq_f32(v35, v21), vmulq_f32(vmulq_f32(v41, v43), v35));
      float32x4_t v48 = vmulq_f32(v46, v46);
      float32x4_t v49 = vmulq_f32(v47, v47);
      float32x4_t v50 = *((float32x4_t *)a2 + 37);
      float32x4_t v51 = *((float32x4_t *)a2 + 38);
      float32x4_t v52 = vaddq_f32(v50, vmulq_f32(v51, v46));
      float32x4_t v53 = *((float32x4_t *)a2 + 39);
      float32x4_t v54 = *((float32x4_t *)a2 + 40);
      float32x4_t v55 = vaddq_f32(v50, vmulq_f32(v51, v47));
      float32x4_t v56 = vaddq_f32(v53, vmulq_f32(v54, v46));
      float32x4_t v57 = vaddq_f32(v53, vmulq_f32(v54, v47));
      float32x4_t v58 = *((float32x4_t *)a2 + 41);
      float32x4_t v59 = *((float32x4_t *)a2 + 42);
      float32x4_t v60 = vaddq_f32(vaddq_f32(v58, vmulq_f32(v59, v47)), vmulq_f32(v49, vaddq_f32(v55, vmulq_f32(v49, v57))));
      float32x4_t v61 = vmulq_f32(v46, vaddq_f32(vaddq_f32(v58, vmulq_f32(v59, v46)), vmulq_f32(v48, vaddq_f32(v52, vmulq_f32(v48, v56)))));
      float32x4_t v62 = *((float32x4_t *)a2 + 43);
      float32x4_t v63 = *((float32x4_t *)a2 + 44);
      float32x4_t v64 = vaddq_f32(v45, vmulq_f32(v47, vaddq_f32(v62, vmulq_f32(v47, v60))));
      float32x4_t v65 = *((float32x4_t *)a2 + 29);
      float32x4_t v66 = vmaxq_f32(vmulq_f32(v28, vaddq_f32(v44, vmulq_f32(v46, vaddq_f32(v62, v61)))), v65);
      float32x4_t v67 = vmaxq_f32(vmulq_f32(v28, v64), v65);
      float32x4_t v68 = vcvtq_f32_s32(vcvtq_s32_f32(v66));
      float32x4_t v69 = vcvtq_f32_s32(vcvtq_s32_f32(v67));
      float32x4_t v70 = vsubq_f32(v68, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v68, v66)));
      float32x4_t v71 = vsubq_f32(v69, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v69, v67)));
      float32x4_t v72 = vsubq_f32(v66, v70);
      float32x4_t v73 = vsubq_f32(v67, v71);
      float32x4_t v74 = *((float32x4_t *)a2 + 45);
      float32x4_t v75 = *((float32x4_t *)a2 + 46);
      float32x4_t v76 = *((float32x4_t *)a2 + 47);
      float32x4_t v77 = *((float32x4_t *)a2 + 48);
      int32x4_t v78 = *((int32x4_t *)a2 + 33);
      float32x4_t v79 = vmulq_f32(vaddq_f32(v21, vmulq_f32(v72, vaddq_f32(v77, vmulq_f32(v72, vaddq_f32(vaddq_f32(v75, vmulq_f32(v72, v76)), vmulq_f32(vmulq_f32(v72, v72), vaddq_f32(v63, vmulq_f32(v74, v72)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v78, vcvtq_s32_f32(v70)), 0x17uLL));
      float32x4_t v80 = vmulq_f32(vaddq_f32(v21, vmulq_f32(v73, vaddq_f32(v77, vmulq_f32(v73, vaddq_f32(vaddq_f32(v75, vmulq_f32(v76, v73)), vmulq_f32(vmulq_f32(v73, v73), vaddq_f32(v63, vmulq_f32(v74, v73)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v78, vcvtq_s32_f32(v71)), 0x17uLL));
      float32x4_t v81 = *((float32x4_t *)a2 + 78);
      float32x4_t v82 = *((float32x4_t *)a2 + 79);
      float32x4_t v83 = vmulq_f32(v82, v80);
      int8x16_t v84 = (int8x16_t)vaddq_f32(v81, vmulq_f32(v82, v79));
      float32x4_t v85 = *((float32x4_t *)a2 + 80);
      float32x4_t v86 = *((float32x4_t *)a2 + 81);
      int8x16_t v87 = (int8x16_t *)(v6 + v11);
      v87[-1] = vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v23, v86)), (int8x16_t)vmulq_f32(v23, v85), v84), (float32x4_t)vbslq_s8(v19, (int8x16_t)v14, (int8x16_t)v21)));
      *int8x16_t v87 = vbslq_s8(v15, (int8x16_t)v12, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v24, v86)), (int8x16_t)vmulq_f32(v24, v85), (int8x16_t)vaddq_f32(v81, v83)), (float32x4_t)vbslq_s8(v22, (int8x16_t)v14, (int8x16_t)v21)));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v88 = -v10;
    if (v88 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v89 = 16 * v88;
    float32x4_t v90 = *(float32x4_t *)(v7 + v89);
    float32x4_t v91 = *((float32x4_t *)a2 + 82);
    float32x4_t v92 = (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v90, (int8x16_t)vmaxq_f32(v90, v91));
    float32x4_t v93 = *((float32x4_t *)a2 + 75);
    int8x16_t v94 = (int8x16_t)vcgtq_f32(v93, v92);
    float32x4_t v95 = *((float32x4_t *)a2 + 5);
    float32x4_t v96 = vmulq_f32(v92, (float32x4_t)vbslq_s8(v94, *((int8x16_t *)a2 + 83), (int8x16_t)v95));
    float32x4_t v97 = *((float32x4_t *)a2 + 77);
    float32x4_t v98 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vceqq_f32(v97, v93)), v93), (int8x16_t)v95, (int8x16_t)vminq_f32(v96, *((float32x4_t *)a2 + 84)));
    float32x4_t v99 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v98), (int8x16_t)v95);
    float32x4_t v100 = (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v99, *((float32x4_t *)a2 + 23)));
    float32x4_t v101 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v98, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v98))), *((float32x4_t *)a2 + 22)), v100);
    float32x4_t v102 = vsubq_f32(vsubq_f32(v99, v95), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v100), v99));
    float32x4_t v103 = vmulq_f32(v102, v102);
    float32x4_t v104 = vmaxq_f32(vmulq_f32(v97, vaddq_f32(v101, vmulq_f32(v102, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v102, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v102)), vmulq_f32(v103, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v102)), vmulq_f32(v103, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v102))))))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v105 = vcvtq_f32_s32(vcvtq_s32_f32(v104));
    float32x4_t v106 = vsubq_f32(v105, (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v105, v104)));
    float32x4_t v107 = vsubq_f32(v104, v106);
    *(int8x16_t *)(v6 + v89) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v90, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v93, vsubq_f32(v96, *((float32x4_t *)a2 + 81))), (int8x16_t)vmulq_f32(v96, *((float32x4_t *)a2 + 80)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 78), vmulq_f32(*((float32x4_t *)a2 + 79), vmulq_f32(vaddq_f32(v95, vmulq_f32(v107, vaddq_f32(*((float32x4_t *)a2 + 48),
                                                                                    vmulq_f32(v107, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v107)), vmulq_f32(vmulq_f32(v107, v107), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v107)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v106)), 0x17uLL))))),
                                              (float32x4_t)vbslq_s8(v94, (int8x16_t)v91, (int8x16_t)v95)));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec709_fast_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v34 = 0;
        uint64_t v35 = 16 * v8;
        uint64_t v36 = 16 * v7;
        uint64_t v37 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v38 = 0;
          do
          {
            float32x4_t v39 = v5[v38 / 0x10];
            float32x4_t v40 = vminq_f32(vmaxq_f32(v39, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            v6[v38 / 0x10] = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v39, (int8x16_t)vmulq_f32(v40, v40));
            v38 += 16;
          }
          while (v37 != v38);
          ++v34;
          int v5 = (float32x4_t *)((char *)v5 + v35);
          uint64_t v6 = (int8x16_t *)((char *)v6 + v36);
        }
        while (v34 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      float32x4_t v12 = v5 + 4;
      float32x4_t v13 = v6 + 4;
      do
      {
        unint64_t v14 = 0;
        int8x16_t v15 = v13;
        float32x4_t v16 = v12;
        uint64_t v17 = 2;
        do
        {
          float32x4_t v18 = v16;
          int8x16_t v19 = v15;
          float32x4_t v20 = v5[v17 - 2];
          float32x4_t v21 = v5[v17 - 1];
          float32x4_t v22 = v5[v17];
          float32x4_t v23 = v5[v17 + 1];
          float32x4_t v24 = *((float32x4_t *)a2 + 75);
          float32x4_t v25 = *((float32x4_t *)a2 + 5);
          float32x4_t v26 = vminq_f32(vmaxq_f32(v20, v24), v25);
          float32x4_t v27 = vminq_f32(vmaxq_f32(v21, v24), v25);
          float32x4_t v28 = vminq_f32(vmaxq_f32(v22, v24), v25);
          float32x4_t v29 = vminq_f32(vmaxq_f32(v23, v24), v25);
          int8x16_t v30 = *((int8x16_t *)a2 + 15);
          float32x4_t v31 = &v6[v17];
          v31[-2] = vbslq_s8(v30, (int8x16_t)v20, (int8x16_t)vmulq_f32(v26, v26));
          v31[-1] = vbslq_s8(v30, (int8x16_t)v21, (int8x16_t)vmulq_f32(v27, v27));
          v14 += 4;
          *float32x4_t v31 = vbslq_s8(v30, (int8x16_t)v22, (int8x16_t)vmulq_f32(v28, v28));
          v31[1] = vbslq_s8(v30, (int8x16_t)v23, (int8x16_t)vmulq_f32(v29, v29));
          v17 += 4;
          v16 += 4;
          int8x16_t v15 = v19 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            float32x4_t v32 = *v18++;
            float32x4_t v33 = vminq_f32(vmaxq_f32(v32, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            *v19++ = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v32, (int8x16_t)vmulq_f32(v33, v33));
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        uint64_t v6 = (int8x16_t *)((char *)v6 + v10);
        int v5 = (float32x4_t *)((char *)v5 + v11);
        float32x4_t v12 = (float32x4_t *)((char *)v12 + v11);
        float32x4_t v13 = (int8x16_t *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

uint64_t Getinv_rec709_fixed_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v75) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *(float32x4_t *)(v7 + v10 + 32);
      float32x4_t v16 = *((float32x4_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v12, v14), v16);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v13, v14), v16);
      float32x4_t v20 = vminq_f32(vmaxq_f32(v15, v14), v16);
      float32x4_t v21 = *((float32x4_t *)a2 + 85);
      float32x4_t v22 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v18, v21)));
      float32x4_t v23 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v19, v21)));
      float32x4_t v24 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v20, v21)));
      float32x4_t v25 = vcvtq_f32_s32(vcvtq_s32_f32(v22));
      float32x4_t v26 = vcvtq_f32_s32(vcvtq_s32_f32(v23));
      float32x4_t v27 = vcvtq_f32_s32(vcvtq_s32_f32(v24));
      float32x4_t v28 = *((float32x4_t *)a2 + 7);
      float32x4_t v29 = *((float32x4_t *)a2 + 8);
      float32x4_t v30 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v22, v25), v28));
      float32x4_t v31 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v23, v26), v28));
      float32x4_t v32 = vaddq_f32(v29, v25);
      float32x4_t v33 = vrsqrteq_f32(vaddq_f32(v28, vsubq_f32(v24, v27)));
      float32x4_t v34 = vaddq_f32(v29, v26);
      float32x4_t v35 = vaddq_f32(v29, v27);
      float32x4_t v36 = *((float32x4_t *)a2 + 9);
      float32x4_t v37 = *((float32x4_t *)a2 + 10);
      float32x4_t v38 = vsubq_f32(v32, vmulq_f32(v30, v36));
      float32x4_t v39 = vsubq_f32(v34, vmulq_f32(v31, v36));
      float32x4_t v40 = *((float32x4_t *)a2 + 86);
      float32x4_t v41 = vmulq_f32(v40, v38);
      float32x4_t v42 = vmulq_f32(v40, v39);
      float32x4_t v43 = vmulq_f32(v40, vsubq_f32(v35, vmulq_f32(v33, v36)));
      float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
      float32x4_t v45 = vcvtq_f32_s32(vcvtq_s32_f32(v42));
      float32x4_t v46 = vcvtq_f32_s32(vcvtq_s32_f32(v43));
      float32x4_t v47 = vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v44, v41)));
      float32x4_t v48 = vsubq_f32(v45, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v45, v42)));
      float32x4_t v49 = vsubq_f32(v46, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v46, v43)));
      float32x4_t v50 = *((float32x4_t *)a2 + 11);
      float32x4_t v51 = *((float32x4_t *)a2 + 12);
      float32x4_t v52 = vmulq_f32(vrecpeq_f32(vsubq_f32(v50, vsubq_f32(v41, v47))), v51);
      float32x4_t v53 = vmulq_f32(vrecpeq_f32(vsubq_f32(v50, vsubq_f32(v42, v48))), v51);
      float32x4_t v54 = vmulq_f32(vrecpeq_f32(vsubq_f32(v50, vsubq_f32(v43, v49))), v51);
      float32x4_t v55 = vaddq_f32(vaddq_f32(v37, v49), vmulq_f32(v54, v54));
      float32x4_t v56 = vmaxq_f32(vaddq_f32(vaddq_f32(v37, v47), vmulq_f32(v52, v52)), v14);
      float32x4_t v57 = vmaxq_f32(vaddq_f32(vaddq_f32(v37, v48), vmulq_f32(v53, v53)), v14);
      float32x4_t v58 = *((float32x4_t *)a2 + 13);
      float32x4_t v59 = *((float32x4_t *)a2 + 14);
      float32x4_t v60 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v56, v58), v59));
      float32x4_t v61 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v57, v58), v59));
      float32x4_t v62 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(v55, v14), v58), v59));
      float32x4_t v63 = *((float32x4_t *)a2 + 87);
      float32x4_t v64 = *((float32x4_t *)a2 + 88);
      int8x16_t v65 = (int8x16_t)vmulq_f32(v18, v64);
      int8x16_t v66 = (int8x16_t)vmulq_f32(v19, v64);
      int8x16_t v67 = (int8x16_t)vmulq_f32(v20, v64);
      float32x4_t v68 = *((float32x4_t *)a2 + 89);
      int8x16_t v69 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v68));
      int8x16_t v70 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v19, v68));
      int8x16_t v71 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v20, v68));
      int8x16_t v72 = vbslq_s8(v69, v65, (int8x16_t)vmulq_f32(v63, v60));
      int8x16_t v73 = *((int8x16_t *)a2 + 15);
      float32x4_t v74 = (int8x16_t *)(v6 + v10);
      *float32x4_t v74 = vbslq_s8(v73, (int8x16_t)v12, v72);
      v74[1] = vbslq_s8(v73, (int8x16_t)v13, vbslq_s8(v70, v66, (int8x16_t)vmulq_f32(v63, v61)));
      v74[2] = vbslq_s8(v73, (int8x16_t)v15, vbslq_s8(v71, v67, (int8x16_t)vmulq_f32(v63, v62)));
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v75) = -v11;
    if ((int)v75 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v75 = v75;
    do
    {
      float32x4_t v76 = *(float32x4_t *)(v7 + 16 * v75);
      float32x4_t v77 = *((float32x4_t *)a2 + 75);
      float32x4_t v78 = *((float32x4_t *)a2 + 5);
      float32x4_t v79 = vminq_f32(vmaxq_f32(v76, v77), v78);
      float32x4_t v80 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v79, *((float32x4_t *)a2 + 85))));
      float32x4_t v81 = vcvtq_f32_s32(vcvtq_s32_f32(v80));
      float32x4_t v82 = vmulq_f32(*((float32x4_t *)a2 + 86), vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v81), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v80, v81))), *((float32x4_t *)a2 + 9))));
      float32x4_t v83 = vcvtq_f32_s32(vcvtq_s32_f32(v82));
      float32x4_t v84 = vsubq_f32(v83, (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v83, v82)));
      float32x4_t v85 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v82, v84))), *((float32x4_t *)a2 + 12));
      *(int8x16_t *)(v6 + 16 * v75++) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v76, vbslq_s8((int8x16_t)vcgtq_f32(v77, vsubq_f32(v79, *((float32x4_t *)a2 + 89))), (int8x16_t)vmulq_f32(v79, *((float32x4_t *)a2 + 88)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 87), (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v84), vmulq_f32(v85, v85)), v77), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))))));
    }
    while (v75 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec709_nice_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v84 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v17 = vminq_f32(vmaxq_f32(v12, v14), v15);
      float32x4_t v18 = *((float32x4_t *)a2 + 85);
      int8x16_t v19 = (int8x16_t)vaddq_f32(v16, v18);
      int8x16_t v20 = (int8x16_t)vaddq_f32(v17, v18);
      float32x4_t v21 = *((float32x4_t *)a2 + 86);
      int8x16_t v22 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vceqq_f32(v21, v14)), v14);
      float32x4_t v23 = (float32x4_t)vbslq_s8(v22, (int8x16_t)v15, v19);
      float32x4_t v24 = (float32x4_t)vbslq_s8(v22, (int8x16_t)v15, v20);
      int8x16_t v25 = *((int8x16_t *)a2 + 19);
      float32x4_t v26 = *((float32x4_t *)a2 + 20);
      float32x4_t v27 = (float32x4_t)vorrq_s8(vandq_s8(v25, (int8x16_t)v23), (int8x16_t)v15);
      float32x4_t v28 = (float32x4_t)vorrq_s8(vandq_s8(v25, (int8x16_t)v24), (int8x16_t)v15);
      int8x16_t v29 = *((int8x16_t *)a2 + 21);
      float32x4_t v30 = *((float32x4_t *)a2 + 22);
      float32x4_t v31 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v24, 0x17uLL)), (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v26, v24)));
      float32x4_t v32 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v23, 0x17uLL)), (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v26, v23))), v30);
      float32x4_t v33 = *((float32x4_t *)a2 + 23);
      float32x4_t v34 = *((float32x4_t *)a2 + 24);
      float32x4_t v35 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v27, v33));
      float32x4_t v36 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v28, v33));
      float32x4_t v37 = vaddq_f32(v32, v35);
      float32x4_t v38 = vaddq_f32(vsubq_f32(v31, v30), v36);
      float32x4_t v39 = vsubq_f32(vsubq_f32(v27, v15), vmulq_f32(vmulq_f32(v34, v35), v27));
      float32x4_t v40 = vsubq_f32(vsubq_f32(v28, v15), vmulq_f32(vmulq_f32(v34, v36), v28));
      float32x4_t v41 = vmulq_f32(v39, v39);
      float32x4_t v42 = vmulq_f32(v40, v40);
      float32x4_t v43 = *((float32x4_t *)a2 + 37);
      float32x4_t v44 = *((float32x4_t *)a2 + 38);
      float32x4_t v45 = vaddq_f32(v43, vmulq_f32(v44, v39));
      float32x4_t v46 = *((float32x4_t *)a2 + 39);
      float32x4_t v47 = *((float32x4_t *)a2 + 40);
      float32x4_t v48 = vaddq_f32(v43, vmulq_f32(v44, v40));
      float32x4_t v49 = vaddq_f32(v46, vmulq_f32(v47, v39));
      float32x4_t v50 = vaddq_f32(v46, vmulq_f32(v47, v40));
      float32x4_t v51 = *((float32x4_t *)a2 + 41);
      float32x4_t v52 = *((float32x4_t *)a2 + 42);
      float32x4_t v53 = vaddq_f32(vaddq_f32(v51, vmulq_f32(v52, v40)), vmulq_f32(v42, vaddq_f32(v48, vmulq_f32(v42, v50))));
      float32x4_t v54 = vmulq_f32(v39, vaddq_f32(vaddq_f32(v51, vmulq_f32(v52, v39)), vmulq_f32(v41, vaddq_f32(v45, vmulq_f32(v41, v49)))));
      float32x4_t v55 = *((float32x4_t *)a2 + 43);
      float32x4_t v56 = *((float32x4_t *)a2 + 44);
      float32x4_t v57 = vaddq_f32(v38, vmulq_f32(v40, vaddq_f32(v55, vmulq_f32(v40, v53))));
      float32x4_t v58 = *((float32x4_t *)a2 + 29);
      float32x4_t v59 = vmaxq_f32(vmulq_f32(v21, vaddq_f32(v37, vmulq_f32(v39, vaddq_f32(v55, v54)))), v58);
      float32x4_t v60 = vmaxq_f32(vmulq_f32(v21, v57), v58);
      float32x4_t v61 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v62 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
      float32x4_t v63 = vsubq_f32(v61, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v61, v59)));
      float32x4_t v64 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v62, v60)));
      float32x4_t v65 = vsubq_f32(v59, v63);
      float32x4_t v66 = vsubq_f32(v60, v64);
      float32x4_t v67 = *((float32x4_t *)a2 + 45);
      float32x4_t v68 = *((float32x4_t *)a2 + 46);
      float32x4_t v69 = *((float32x4_t *)a2 + 47);
      float32x4_t v70 = *((float32x4_t *)a2 + 48);
      float32x4_t v71 = vaddq_f32(v15, vmulq_f32(v65, vaddq_f32(v70, vmulq_f32(v65, vaddq_f32(vaddq_f32(v68, vmulq_f32(v65, v69)), vmulq_f32(vmulq_f32(v65, v65), vaddq_f32(v56, vmulq_f32(v67, v65))))))));
      float32x4_t v72 = vaddq_f32(v15, vmulq_f32(v66, vaddq_f32(v70, vmulq_f32(v66, vaddq_f32(vaddq_f32(v68, vmulq_f32(v69, v66)), vmulq_f32(vmulq_f32(v66, v66), vaddq_f32(v56, vmulq_f32(v67, v66))))))));
      int32x4_t v73 = *((int32x4_t *)a2 + 33);
      float32x4_t v74 = vmulq_f32(v71, (float32x4_t)vshlq_n_s32(vaddq_s32(v73, vcvtq_s32_f32(v63)), 0x17uLL));
      float32x4_t v75 = vmulq_f32(v72, (float32x4_t)vshlq_n_s32(vaddq_s32(v73, vcvtq_s32_f32(v64)), 0x17uLL));
      float32x4_t v76 = *((float32x4_t *)a2 + 87);
      float32x4_t v77 = *((float32x4_t *)a2 + 88);
      int8x16_t v78 = (int8x16_t)vmulq_f32(v16, v77);
      float32x4_t v79 = *((float32x4_t *)a2 + 89);
      int8x16_t v80 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v79));
      int8x16_t v81 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v17, v79)), (int8x16_t)vmulq_f32(v17, v77), (int8x16_t)vmulq_f32(v76, v75));
      int8x16_t v82 = *((int8x16_t *)a2 + 15);
      float32x4_t v83 = (int8x16_t *)(v6 + v11);
      v83[-1] = vbslq_s8(v82, (int8x16_t)v13, vbslq_s8(v80, v78, (int8x16_t)vmulq_f32(v76, v74)));
      *float32x4_t v83 = vbslq_s8(v82, (int8x16_t)v12, v81);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v84 = -v10;
    if (v84 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v85 = 16 * v84;
    float32x4_t v86 = *(float32x4_t *)(v7 + v85);
    float32x4_t v87 = *((float32x4_t *)a2 + 75);
    float32x4_t v88 = *((float32x4_t *)a2 + 5);
    float32x4_t v89 = vminq_f32(vmaxq_f32(v86, v87), v88);
    float32x4_t v90 = *((float32x4_t *)a2 + 86);
    float32x4_t v91 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vceqq_f32(v90, v87)), v87), (int8x16_t)v88, (int8x16_t)vaddq_f32(v89, *((float32x4_t *)a2 + 85)));
    float32x4_t v92 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v91), (int8x16_t)v88);
    float32x4_t v93 = (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v92, *((float32x4_t *)a2 + 23)));
    float32x4_t v94 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v91, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v91))), *((float32x4_t *)a2 + 22)), v93);
    float32x4_t v95 = vsubq_f32(vsubq_f32(v92, v88), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v93), v92));
    float32x4_t v96 = vmulq_f32(v95, v95);
    float32x4_t v97 = vmaxq_f32(vmulq_f32(v90, vaddq_f32(v94, vmulq_f32(v95, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v95, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v95)), vmulq_f32(v96, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v95)), vmulq_f32(v96, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v95))))))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v98 = vcvtq_f32_s32(vcvtq_s32_f32(v97));
    float32x4_t v99 = vsubq_f32(v98, (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v98, v97)));
    float32x4_t v100 = vsubq_f32(v97, v99);
    *(int8x16_t *)(v6 + v85) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v86, vbslq_s8((int8x16_t)vcgtq_f32(v87, vsubq_f32(v89, *((float32x4_t *)a2 + 89))), (int8x16_t)vmulq_f32(v89, *((float32x4_t *)a2 + 88)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 87), vmulq_f32(vaddq_f32(v88, vmulq_f32(v100, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v100, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46),
                                                              vmulq_f32(*((float32x4_t *)a2 + 47), v100)),
                                                            vmulq_f32(vmulq_f32(v100, v100), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v100)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v99)), 0x17uLL)))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec709_half_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v74 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v17 = vminq_f32(vmaxq_f32(v12, v14), v15);
      float32x4_t v18 = *((float32x4_t *)a2 + 85);
      float32x4_t v19 = vaddq_f32(v16, v18);
      float32x4_t v20 = vaddq_f32(v17, v18);
      int8x16_t v21 = *((int8x16_t *)a2 + 19);
      float32x4_t v22 = *((float32x4_t *)a2 + 20);
      float32x4_t v23 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v19), (int8x16_t)v15);
      int8x16_t v24 = *((int8x16_t *)a2 + 21);
      float32x4_t v25 = *((float32x4_t *)a2 + 22);
      float32x4_t v26 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v20), (int8x16_t)v15);
      float32x4_t v27 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v22, v20)));
      float32x4_t v28 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v19, 0x17uLL)), (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v22, v19))), v25);
      float32x4_t v29 = *((float32x4_t *)a2 + 23);
      float32x4_t v30 = *((float32x4_t *)a2 + 24);
      float32x4_t v31 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v23, v29));
      float32x4_t v32 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v26, v29));
      float32x4_t v33 = vaddq_f32(v28, v31);
      float32x4_t v34 = vmulq_f32(v30, v31);
      float32x4_t v35 = vmulq_f32(vmulq_f32(v30, v32), v26);
      float32x4_t v36 = vaddq_f32(vsubq_f32(v27, v25), v32);
      float32x4_t v37 = vsubq_f32(vsubq_f32(v23, v15), vmulq_f32(v34, v23));
      float32x4_t v38 = vsubq_f32(vsubq_f32(v26, v15), v35);
      float32x4_t v39 = *((float32x4_t *)a2 + 25);
      float32x4_t v40 = *((float32x4_t *)a2 + 26);
      float32x4_t v41 = vaddq_f32(v39, vmulq_f32(v40, v37));
      float32x4_t v42 = vaddq_f32(v39, vmulq_f32(v40, v38));
      float32x4_t v44 = *((float32x4_t *)a2 + 27);
      float32x4_t v43 = *((float32x4_t *)a2 + 28);
      float32x4_t v45 = vaddq_f32(v36, vmulq_f32(v38, vaddq_f32(vaddq_f32(v44, vmulq_f32(v38, v43)), vmulq_f32(vmulq_f32(v38, v38), v42))));
      float32x4_t v46 = *((float32x4_t *)a2 + 86);
      float32x4_t v47 = vmulq_f32(v46, vaddq_f32(v33, vmulq_f32(v37, vaddq_f32(vaddq_f32(v44, vmulq_f32(v37, v43)), vmulq_f32(vmulq_f32(v37, v37), v41)))));
      float32x4_t v48 = vmulq_f32(v46, v45);
      float32x4_t v49 = *((float32x4_t *)a2 + 29);
      float32x4_t v50 = *((float32x4_t *)a2 + 30);
      float32x4_t v51 = vmaxq_f32(v47, v49);
      float32x4_t v52 = vmaxq_f32(v48, v49);
      float32x4_t v53 = vcvtq_f32_s32(vcvtq_s32_f32(v51));
      float32x4_t v54 = vcvtq_f32_s32(vcvtq_s32_f32(v52));
      float32x4_t v55 = vsubq_f32(v53, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v53, v51)));
      float32x4_t v56 = vsubq_f32(v54, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v54, v52)));
      float32x4_t v57 = vsubq_f32(v51, v55);
      float32x4_t v58 = vsubq_f32(v52, v56);
      float32x4_t v59 = *((float32x4_t *)a2 + 31);
      float32x4_t v60 = *((float32x4_t *)a2 + 32);
      float32x4_t v61 = vaddq_f32(v15, vmulq_f32(v57, vaddq_f32(v60, vmulq_f32(v57, vaddq_f32(v50, vmulq_f32(v59, v57))))));
      float32x4_t v62 = vaddq_f32(v15, vmulq_f32(v58, vaddq_f32(v60, vmulq_f32(v58, vaddq_f32(v50, vmulq_f32(v59, v58))))));
      int32x4_t v63 = *((int32x4_t *)a2 + 33);
      float32x4_t v64 = vmulq_f32(v61, (float32x4_t)vshlq_n_s32(vaddq_s32(v63, vcvtq_s32_f32(v55)), 0x17uLL));
      float32x4_t v65 = vmulq_f32(v62, (float32x4_t)vshlq_n_s32(vaddq_s32(v63, vcvtq_s32_f32(v56)), 0x17uLL));
      float32x4_t v66 = *((float32x4_t *)a2 + 87);
      float32x4_t v67 = *((float32x4_t *)a2 + 88);
      int8x16_t v68 = (int8x16_t)vmulq_f32(v16, v67);
      float32x4_t v69 = *((float32x4_t *)a2 + 89);
      int8x16_t v70 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v69));
      int8x16_t v71 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v17, v69)), (int8x16_t)vmulq_f32(v17, v67), (int8x16_t)vmulq_f32(v66, v65));
      int8x16_t v72 = *((int8x16_t *)a2 + 15);
      int32x4_t v73 = (int8x16_t *)(v6 + v11);
      v73[-1] = vbslq_s8(v72, (int8x16_t)v13, vbslq_s8(v70, v68, (int8x16_t)vmulq_f32(v66, v64)));
      *int32x4_t v73 = vbslq_s8(v72, (int8x16_t)v12, v71);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v74 = -v10;
    if (v74 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v75 = 16 * v74;
    float32x4_t v76 = *(float32x4_t *)(v7 + v75);
    float32x4_t v77 = *((float32x4_t *)a2 + 75);
    float32x4_t v78 = *((float32x4_t *)a2 + 5);
    float32x4_t v79 = vminq_f32(vmaxq_f32(v76, v77), v78);
    float32x4_t v80 = vaddq_f32(v79, *((float32x4_t *)a2 + 85));
    float32x4_t v81 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v80), (int8x16_t)v78);
    float32x4_t v82 = (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v81, *((float32x4_t *)a2 + 23)));
    float32x4_t v83 = vsubq_f32(vsubq_f32(v81, v78), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v82), v81));
    float32x4_t v84 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 86), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v80, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v80))), *((float32x4_t *)a2 + 22)), v82), vmulq_f32(v83, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v83, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v83, v83), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v83))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v85 = vcvtq_f32_s32(vcvtq_s32_f32(v84));
    float32x4_t v86 = vsubq_f32(v85, (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v85, v84)));
    float32x4_t v87 = vsubq_f32(v84, v86);
    *(int8x16_t *)(v6 + v75) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v76, vbslq_s8((int8x16_t)vcgtq_f32(v77, vsubq_f32(v79, *((float32x4_t *)a2 + 89))), (int8x16_t)vmulq_f32(v79, *((float32x4_t *)a2 + 88)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 87), vmulq_f32(vaddq_f32(v78, vmulq_f32(v87, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v87, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v87)))))),
                                                  (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v86)), 0x17uLL)))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec709_half_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v77 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 82);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v16 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmaxq_f32(v13, v14));
      float32x4_t v17 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v12, (int8x16_t)vmaxq_f32(v12, v14));
      float32x4_t v18 = *((float32x4_t *)a2 + 75);
      int8x16_t v19 = (int8x16_t)vcgtq_f32(v18, v16);
      int8x16_t v20 = (int8x16_t)vcgtq_f32(v18, v17);
      int8x16_t v21 = *((int8x16_t *)a2 + 83);
      float32x4_t v22 = *((float32x4_t *)a2 + 5);
      float32x4_t v23 = vmulq_f32(v16, (float32x4_t)vbslq_s8(v19, v21, (int8x16_t)v22));
      float32x4_t v24 = vmulq_f32(v17, (float32x4_t)vbslq_s8(v20, v21, (int8x16_t)v22));
      float32x4_t v25 = *((float32x4_t *)a2 + 90);
      float32x4_t v26 = *((float32x4_t *)a2 + 85);
      float32x4_t v27 = vaddq_f32(vminq_f32(v23, v25), v26);
      float32x4_t v28 = vaddq_f32(vminq_f32(v24, v25), v26);
      int8x16_t v29 = *((int8x16_t *)a2 + 19);
      float32x4_t v30 = *((float32x4_t *)a2 + 20);
      float32x4_t v31 = (float32x4_t)vorrq_s8(vandq_s8(v29, (int8x16_t)v27), (int8x16_t)v22);
      float32x4_t v32 = (float32x4_t)vorrq_s8(vandq_s8(v29, (int8x16_t)v28), (int8x16_t)v22);
      int8x16_t v33 = *((int8x16_t *)a2 + 21);
      float32x4_t v34 = *((float32x4_t *)a2 + 22);
      float32x4_t v35 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v28, 0x17uLL)), (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v30, v28)));
      float32x4_t v36 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v27, 0x17uLL)), (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v30, v27))), v34);
      float32x4_t v37 = *((float32x4_t *)a2 + 23);
      float32x4_t v38 = *((float32x4_t *)a2 + 24);
      float32x4_t v39 = vsubq_f32(v35, v34);
      float32x4_t v40 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v31, v37));
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v32, v37));
      float32x4_t v42 = vaddq_f32(v36, v40);
      float32x4_t v43 = vsubq_f32(vsubq_f32(v31, v22), vmulq_f32(vmulq_f32(v38, v40), v31));
      float32x4_t v44 = vsubq_f32(vsubq_f32(v32, v22), vmulq_f32(vmulq_f32(v38, v41), v32));
      float32x4_t v45 = *((float32x4_t *)a2 + 25);
      float32x4_t v46 = *((float32x4_t *)a2 + 26);
      float32x4_t v47 = vaddq_f32(v45, vmulq_f32(v46, v43));
      float32x4_t v48 = vaddq_f32(v45, vmulq_f32(v46, v44));
      float32x4_t v49 = *((float32x4_t *)a2 + 27);
      float32x4_t v50 = *((float32x4_t *)a2 + 28);
      float32x4_t v51 = vaddq_f32(vaddq_f32(v39, v41), vmulq_f32(v44, vaddq_f32(vaddq_f32(v49, vmulq_f32(v44, v50)), vmulq_f32(vmulq_f32(v44, v44), v48))));
      float32x4_t v52 = *((float32x4_t *)a2 + 86);
      float32x4_t v53 = vmulq_f32(v52, vaddq_f32(v42, vmulq_f32(v43, vaddq_f32(vaddq_f32(v49, vmulq_f32(v43, v50)), vmulq_f32(vmulq_f32(v43, v43), v47)))));
      float32x4_t v54 = vmulq_f32(v52, v51);
      float32x4_t v55 = *((float32x4_t *)a2 + 29);
      float32x4_t v56 = *((float32x4_t *)a2 + 30);
      float32x4_t v57 = vmaxq_f32(v53, v55);
      float32x4_t v58 = vmaxq_f32(v54, v55);
      float32x4_t v59 = vcvtq_f32_s32(vcvtq_s32_f32(v57));
      float32x4_t v60 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v61 = vsubq_f32(v59, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v59, v57)));
      float32x4_t v62 = vsubq_f32(v60, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v60, v58)));
      float32x4_t v63 = vsubq_f32(v57, v61);
      float32x4_t v64 = *((float32x4_t *)a2 + 31);
      float32x4_t v65 = *((float32x4_t *)a2 + 32);
      float32x4_t v66 = vsubq_f32(v58, v62);
      float32x4_t v67 = vmulq_f32(v66, vaddq_f32(v65, vmulq_f32(v66, vaddq_f32(v56, vmulq_f32(v64, v66)))));
      float32x4_t v68 = vaddq_f32(v22, vmulq_f32(v63, vaddq_f32(v65, vmulq_f32(v63, vaddq_f32(v56, vmulq_f32(v64, v63))))));
      int32x4_t v69 = vcvtq_s32_f32(v62);
      int32x4_t v70 = *((int32x4_t *)a2 + 33);
      float32x4_t v71 = vmulq_f32(v68, (float32x4_t)vshlq_n_s32(vaddq_s32(v70, vcvtq_s32_f32(v61)), 0x17uLL));
      float32x4_t v72 = vmulq_f32(vaddq_f32(v22, v67), (float32x4_t)vshlq_n_s32(vaddq_s32(v70, v69), 0x17uLL));
      float32x4_t v73 = *((float32x4_t *)a2 + 87);
      float32x4_t v74 = *((float32x4_t *)a2 + 88);
      float32x4_t v75 = *((float32x4_t *)a2 + 89);
      float32x4_t v76 = (int8x16_t *)(v6 + v11);
      v76[-1] = vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v23, v75)), (int8x16_t)vmulq_f32(v23, v74), (int8x16_t)vmulq_f32(v73, v71)), (float32x4_t)vbslq_s8(v19, (int8x16_t)v14, (int8x16_t)v22)));
      *float32x4_t v76 = vbslq_s8(v15, (int8x16_t)v12, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v24, v75)), (int8x16_t)vmulq_f32(v24, v74), (int8x16_t)vmulq_f32(v73, v72)), (float32x4_t)vbslq_s8(v20, (int8x16_t)v14, (int8x16_t)v22)));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v77 = -v10;
    if (v77 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v78 = 16 * v77;
    float32x4_t v79 = *(float32x4_t *)(v7 + v78);
    float32x4_t v80 = *((float32x4_t *)a2 + 82);
    float32x4_t v81 = (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v79, (int8x16_t)vmaxq_f32(v79, v80));
    float32x4_t v82 = *((float32x4_t *)a2 + 75);
    int8x16_t v83 = (int8x16_t)vcgtq_f32(v82, v81);
    float32x4_t v84 = *((float32x4_t *)a2 + 5);
    float32x4_t v85 = vmulq_f32(v81, (float32x4_t)vbslq_s8(v83, *((int8x16_t *)a2 + 83), (int8x16_t)v84));
    float32x4_t v86 = vaddq_f32(vminq_f32(v85, *((float32x4_t *)a2 + 90)), *((float32x4_t *)a2 + 85));
    float32x4_t v87 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v86), (int8x16_t)v84);
    float32x4_t v88 = (float32x4_t)vandq_s8((int8x16_t)v84, (int8x16_t)vcgtq_f32(v87, *((float32x4_t *)a2 + 23)));
    float32x4_t v89 = vsubq_f32(vsubq_f32(v87, v84), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v88), v87));
    float32x4_t v90 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 86), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v86, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v86))), *((float32x4_t *)a2 + 22)), v88), vmulq_f32(v89, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v89, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v89, v89), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v89))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v91 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
    float32x4_t v92 = vsubq_f32(v91, (float32x4_t)vandq_s8((int8x16_t)v84, (int8x16_t)vcgtq_f32(v91, v90)));
    float32x4_t v93 = vsubq_f32(v90, v92);
    *(int8x16_t *)(v6 + v78) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v79, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v82, vsubq_f32(v85, *((float32x4_t *)a2 + 89))), (int8x16_t)vmulq_f32(v85, *((float32x4_t *)a2 + 88)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 87), vmulq_f32(vaddq_f32(v84, vmulq_f32(v93, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v93,
                                                                                    vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v93)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v92)), 0x17uLL)))), (float32x4_t)vbslq_s8(v83, (int8x16_t)v80, (int8x16_t)v84)));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec709_nice_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v92 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 82);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v16 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmaxq_f32(v13, v14));
      float32x4_t v17 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v12, (int8x16_t)vmaxq_f32(v12, v14));
      float32x4_t v18 = *((float32x4_t *)a2 + 75);
      int8x16_t v19 = (int8x16_t)vcgtq_f32(v18, v16);
      int8x16_t v20 = *((int8x16_t *)a2 + 83);
      float32x4_t v21 = *((float32x4_t *)a2 + 5);
      int8x16_t v22 = (int8x16_t)vcgtq_f32(v18, v17);
      float32x4_t v23 = vmulq_f32(v16, (float32x4_t)vbslq_s8(v19, v20, (int8x16_t)v21));
      float32x4_t v24 = vmulq_f32(v17, (float32x4_t)vbslq_s8(v22, v20, (int8x16_t)v21));
      float32x4_t v25 = *((float32x4_t *)a2 + 90);
      float32x4_t v26 = vminq_f32(v24, v25);
      float32x4_t v27 = *((float32x4_t *)a2 + 85);
      int8x16_t v28 = (int8x16_t)vaddq_f32(vminq_f32(v23, v25), v27);
      float32x4_t v29 = *((float32x4_t *)a2 + 86);
      int8x16_t v30 = (int8x16_t)vaddq_f32(v26, v27);
      int8x16_t v31 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vceqq_f32(v29, v18)), v18);
      float32x4_t v32 = (float32x4_t)vbslq_s8(v31, (int8x16_t)v21, v28);
      float32x4_t v33 = (float32x4_t)vbslq_s8(v31, (int8x16_t)v21, v30);
      int8x16_t v34 = *((int8x16_t *)a2 + 19);
      float32x4_t v35 = *((float32x4_t *)a2 + 20);
      float32x4_t v36 = (float32x4_t)vorrq_s8(vandq_s8(v34, (int8x16_t)v32), (int8x16_t)v21);
      float32x4_t v37 = (float32x4_t)vorrq_s8(vandq_s8(v34, (int8x16_t)v33), (int8x16_t)v21);
      int8x16_t v38 = *((int8x16_t *)a2 + 21);
      float32x4_t v39 = *((float32x4_t *)a2 + 22);
      float32x4_t v40 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v32, 0x17uLL)), (float32x4_t)vandq_s8(v38, (int8x16_t)vcgtq_f32(v35, v32)));
      float32x4_t v41 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v33, 0x17uLL)), (float32x4_t)vandq_s8(v38, (int8x16_t)vcgtq_f32(v35, v33)));
      float32x4_t v42 = *((float32x4_t *)a2 + 23);
      float32x4_t v43 = *((float32x4_t *)a2 + 24);
      float32x4_t v44 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v36, v42));
      float32x4_t v45 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v37, v42));
      float32x4_t v46 = vaddq_f32(vsubq_f32(v40, v39), v44);
      float32x4_t v47 = vmulq_f32(v43, v44);
      float32x4_t v48 = vmulq_f32(vmulq_f32(v43, v45), v37);
      float32x4_t v49 = vaddq_f32(vsubq_f32(v41, v39), v45);
      float32x4_t v50 = vsubq_f32(vsubq_f32(v36, v21), vmulq_f32(v47, v36));
      float32x4_t v51 = vsubq_f32(vsubq_f32(v37, v21), v48);
      float32x4_t v52 = vmulq_f32(v50, v50);
      float32x4_t v53 = vmulq_f32(v51, v51);
      float32x4_t v54 = *((float32x4_t *)a2 + 37);
      float32x4_t v55 = *((float32x4_t *)a2 + 38);
      float32x4_t v56 = *((float32x4_t *)a2 + 39);
      float32x4_t v57 = *((float32x4_t *)a2 + 40);
      float32x4_t v58 = vaddq_f32(v54, vmulq_f32(v55, v50));
      float32x4_t v59 = vaddq_f32(v56, vmulq_f32(v57, v50));
      float32x4_t v60 = vaddq_f32(v56, vmulq_f32(v57, v51));
      float32x4_t v61 = vaddq_f32(v54, vmulq_f32(v55, v51));
      float32x4_t v62 = *((float32x4_t *)a2 + 41);
      float32x4_t v63 = *((float32x4_t *)a2 + 42);
      float32x4_t v64 = vaddq_f32(vaddq_f32(v62, vmulq_f32(v63, v51)), vmulq_f32(v53, vaddq_f32(v61, vmulq_f32(v53, v60))));
      float32x4_t v65 = vmulq_f32(v50, vaddq_f32(vaddq_f32(v62, vmulq_f32(v63, v50)), vmulq_f32(v52, vaddq_f32(v58, vmulq_f32(v52, v59)))));
      float32x4_t v66 = *((float32x4_t *)a2 + 43);
      float32x4_t v67 = *((float32x4_t *)a2 + 44);
      float32x4_t v68 = vmulq_f32(v29, vaddq_f32(v46, vmulq_f32(v50, vaddq_f32(v66, v65))));
      float32x4_t v69 = vmulq_f32(v29, vaddq_f32(v49, vmulq_f32(v51, vaddq_f32(v66, vmulq_f32(v51, v64)))));
      float32x4_t v70 = *((float32x4_t *)a2 + 29);
      float32x4_t v71 = vmaxq_f32(v68, v70);
      float32x4_t v72 = vmaxq_f32(v69, v70);
      float32x4_t v73 = vcvtq_f32_s32(vcvtq_s32_f32(v71));
      float32x4_t v74 = vcvtq_f32_s32(vcvtq_s32_f32(v72));
      float32x4_t v75 = vsubq_f32(v73, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v73, v71)));
      float32x4_t v76 = vsubq_f32(v74, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v74, v72)));
      float32x4_t v77 = vsubq_f32(v71, v75);
      float32x4_t v78 = vsubq_f32(v72, v76);
      float32x4_t v79 = *((float32x4_t *)a2 + 45);
      float32x4_t v80 = *((float32x4_t *)a2 + 46);
      float32x4_t v81 = vaddq_f32(v67, vmulq_f32(v79, v77));
      float32x4_t v82 = vaddq_f32(v67, vmulq_f32(v79, v78));
      float32x4_t v83 = *((float32x4_t *)a2 + 47);
      float32x4_t v84 = *((float32x4_t *)a2 + 48);
      int32x4_t v85 = *((int32x4_t *)a2 + 33);
      float32x4_t v86 = vmulq_f32(vaddq_f32(v21, vmulq_f32(v77, vaddq_f32(v84, vmulq_f32(v77, vaddq_f32(vaddq_f32(v80, vmulq_f32(v77, v83)), vmulq_f32(vmulq_f32(v77, v77), v81)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v85, vcvtq_s32_f32(v75)), 0x17uLL));
      float32x4_t v87 = vmulq_f32(vaddq_f32(v21, vmulq_f32(v78, vaddq_f32(v84, vmulq_f32(v78, vaddq_f32(vaddq_f32(v80, vmulq_f32(v83, v78)), vmulq_f32(vmulq_f32(v78, v78), v82)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v85, vcvtq_s32_f32(v76)), 0x17uLL));
      float32x4_t v88 = *((float32x4_t *)a2 + 87);
      float32x4_t v89 = *((float32x4_t *)a2 + 88);
      float32x4_t v90 = *((float32x4_t *)a2 + 89);
      float32x4_t v91 = (int8x16_t *)(v6 + v11);
      v91[-1] = vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v23, v90)), (int8x16_t)vmulq_f32(v23, v89), (int8x16_t)vmulq_f32(v88, v86)), (float32x4_t)vbslq_s8(v19, (int8x16_t)v14, (int8x16_t)v21)));
      *float32x4_t v91 = vbslq_s8(v15, (int8x16_t)v12, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v24, v90)), (int8x16_t)vmulq_f32(v24, v89), (int8x16_t)vmulq_f32(v88, v87)), (float32x4_t)vbslq_s8(v22, (int8x16_t)v14, (int8x16_t)v21)));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v92 = -v10;
    if (v92 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v93 = 16 * v92;
    float32x4_t v94 = *(float32x4_t *)(v7 + v93);
    float32x4_t v95 = *((float32x4_t *)a2 + 82);
    float32x4_t v96 = (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v94, (int8x16_t)vmaxq_f32(v94, v95));
    float32x4_t v97 = *((float32x4_t *)a2 + 75);
    int8x16_t v98 = (int8x16_t)vcgtq_f32(v97, v96);
    float32x4_t v99 = *((float32x4_t *)a2 + 5);
    float32x4_t v100 = vmulq_f32(v96, (float32x4_t)vbslq_s8(v98, *((int8x16_t *)a2 + 83), (int8x16_t)v99));
    float32x4_t v101 = *((float32x4_t *)a2 + 86);
    float32x4_t v102 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v99, (int8x16_t)vceqq_f32(v101, v97)), v97), (int8x16_t)v99, (int8x16_t)vaddq_f32(vminq_f32(v100, *((float32x4_t *)a2 + 90)), *((float32x4_t *)a2 + 85)));
    float32x4_t v103 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v102), (int8x16_t)v99);
    float32x4_t v104 = (float32x4_t)vandq_s8((int8x16_t)v99, (int8x16_t)vcgtq_f32(v103, *((float32x4_t *)a2 + 23)));
    float32x4_t v105 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v102, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v102))), *((float32x4_t *)a2 + 22)), v104);
    float32x4_t v106 = vsubq_f32(vsubq_f32(v103, v99), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v104), v103));
    float32x4_t v107 = vmulq_f32(v106, v106);
    float32x4_t v108 = vmaxq_f32(vmulq_f32(v101, vaddq_f32(v105, vmulq_f32(v106, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v106, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v106)), vmulq_f32(v107, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v106)), vmulq_f32(v107, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v106))))))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v109 = vcvtq_f32_s32(vcvtq_s32_f32(v108));
    float32x4_t v110 = vsubq_f32(v109, (float32x4_t)vandq_s8((int8x16_t)v99, (int8x16_t)vcgtq_f32(v109, v108)));
    float32x4_t v111 = vsubq_f32(v108, v110);
    *(int8x16_t *)(v6 + v93) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v94, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v97, vsubq_f32(v100, *((float32x4_t *)a2 + 89))), (int8x16_t)vmulq_f32(v100, *((float32x4_t *)a2 + 88)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 87), vmulq_f32(vaddq_f32(v99, vmulq_f32(v111, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v111,
                                                                                    vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v111)), vmulq_f32(vmulq_f32(v111, v111), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v111)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v110)), 0x17uLL)))), (float32x4_t)vbslq_s8(v98, (int8x16_t)v95, (int8x16_t)v99)));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec601_fast_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v35 = 0;
        uint64_t v36 = 16 * v8;
        uint64_t v37 = 16 * v7;
        uint64_t v38 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v39 = 0;
          do
          {
            float32x4_t v40 = v5[v39 / 0x10];
            float32x4_t v41 = vminq_f32(vmaxq_f32(v40, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            v6[v39 / 0x10] = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v40, (int8x16_t)vmulq_f32(v41, vminq_f32(vrsqrteq_f32(v41), *((float32x4_t *)a2 + 73))));
            v39 += 16;
          }
          while (v38 != v39);
          ++v35;
          int v5 = (float32x4_t *)((char *)v5 + v36);
          uint64_t v6 = (int8x16_t *)((char *)v6 + v37);
        }
        while (v35 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      float32x4_t v12 = v5 + 4;
      float32x4_t v13 = v6 + 4;
      do
      {
        unint64_t v14 = 0;
        int8x16_t v15 = v13;
        float32x4_t v16 = v12;
        uint64_t v17 = 2;
        do
        {
          float32x4_t v18 = v16;
          int8x16_t v19 = v15;
          float32x4_t v20 = v5[v17 - 2];
          float32x4_t v21 = v5[v17 - 1];
          float32x4_t v22 = v5[v17];
          float32x4_t v23 = v5[v17 + 1];
          float32x4_t v24 = *((float32x4_t *)a2 + 75);
          float32x4_t v25 = *((float32x4_t *)a2 + 5);
          float32x4_t v26 = vminq_f32(vmaxq_f32(v20, v24), v25);
          float32x4_t v27 = vminq_f32(vmaxq_f32(v21, v24), v25);
          float32x4_t v28 = vminq_f32(vmaxq_f32(v22, v24), v25);
          float32x4_t v29 = vminq_f32(vmaxq_f32(v23, v24), v25);
          float32x4_t v30 = *((float32x4_t *)a2 + 73);
          int8x16_t v31 = *((int8x16_t *)a2 + 15);
          float32x4_t v32 = &v6[v17];
          v32[-2] = vbslq_s8(v31, (int8x16_t)v20, (int8x16_t)vmulq_f32(v26, vminq_f32(vrsqrteq_f32(v26), v30)));
          v32[-1] = vbslq_s8(v31, (int8x16_t)v21, (int8x16_t)vmulq_f32(v27, vminq_f32(vrsqrteq_f32(v27), v30)));
          v14 += 4;
          *float32x4_t v32 = vbslq_s8(v31, (int8x16_t)v22, (int8x16_t)vmulq_f32(v28, vminq_f32(vrsqrteq_f32(v28), v30)));
          v32[1] = vbslq_s8(v31, (int8x16_t)v23, (int8x16_t)vmulq_f32(v29, vminq_f32(vrsqrteq_f32(v29), v30)));
          v17 += 4;
          v16 += 4;
          int8x16_t v15 = v19 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            float32x4_t v33 = *v18++;
            float32x4_t v34 = vminq_f32(vmaxq_f32(v33, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            *v19++ = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v33, (int8x16_t)vmulq_f32(v34, vminq_f32(vrsqrteq_f32(v34), *((float32x4_t *)a2 + 73))));
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        uint64_t v6 = (int8x16_t *)((char *)v6 + v10);
        int v5 = (float32x4_t *)((char *)v5 + v11);
        float32x4_t v12 = (float32x4_t *)((char *)v12 + v11);
        float32x4_t v13 = (int8x16_t *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

uint64_t Getrec601_fixed_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v76) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *(float32x4_t *)(v7 + v10 + 32);
      float32x4_t v16 = *((float32x4_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v12, v14), v16);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v13, v14), v16);
      float32x4_t v20 = vminq_f32(vmaxq_f32(v15, v14), v16);
      float32x4_t v21 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)v18));
      float32x4_t v22 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)v19));
      float32x4_t v23 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)v20));
      float32x4_t v24 = vcvtq_f32_s32(vcvtq_s32_f32(v21));
      float32x4_t v25 = vcvtq_f32_s32(vcvtq_s32_f32(v22));
      float32x4_t v26 = vcvtq_f32_s32(vcvtq_s32_f32(v23));
      float32x4_t v27 = *((float32x4_t *)a2 + 7);
      float32x4_t v28 = *((float32x4_t *)a2 + 8);
      float32x4_t v29 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v21, v24), v27));
      float32x4_t v30 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v22, v25), v27));
      float32x4_t v31 = vrsqrteq_f32(vaddq_f32(v27, vsubq_f32(v23, v26)));
      float32x4_t v32 = vaddq_f32(v28, v24);
      float32x4_t v33 = vaddq_f32(v28, v25);
      float32x4_t v34 = vaddq_f32(v28, v26);
      float32x4_t v35 = *((float32x4_t *)a2 + 9);
      float32x4_t v36 = *((float32x4_t *)a2 + 10);
      float32x4_t v37 = vsubq_f32(v32, vmulq_f32(v29, v35));
      float32x4_t v38 = *((float32x4_t *)a2 + 77);
      float32x4_t v39 = vmulq_f32(v38, v37);
      float32x4_t v40 = vmulq_f32(v38, vsubq_f32(v33, vmulq_f32(v30, v35)));
      float32x4_t v41 = vmulq_f32(v38, vsubq_f32(v34, vmulq_f32(v31, v35)));
      float32x4_t v42 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
      float32x4_t v43 = vcvtq_f32_s32(vcvtq_s32_f32(v40));
      float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
      float32x4_t v45 = vsubq_f32(v42, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v42, v39)));
      float32x4_t v46 = vsubq_f32(v43, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v43, v40)));
      float32x4_t v47 = vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v44, v41)));
      float32x4_t v48 = *((float32x4_t *)a2 + 11);
      float32x4_t v49 = *((float32x4_t *)a2 + 12);
      float32x4_t v50 = vmulq_f32(vrecpeq_f32(vsubq_f32(v48, vsubq_f32(v39, v45))), v49);
      float32x4_t v51 = vmulq_f32(vrecpeq_f32(vsubq_f32(v48, vsubq_f32(v40, v46))), v49);
      float32x4_t v52 = vmulq_f32(vrecpeq_f32(vsubq_f32(v48, vsubq_f32(v41, v47))), v49);
      float32x4_t v53 = vaddq_f32(vaddq_f32(v36, v47), vmulq_f32(v52, v52));
      float32x4_t v54 = vmaxq_f32(vaddq_f32(vaddq_f32(v36, v45), vmulq_f32(v50, v50)), v14);
      float32x4_t v55 = vmaxq_f32(vaddq_f32(vaddq_f32(v36, v46), vmulq_f32(v51, v51)), v14);
      float32x4_t v56 = *((float32x4_t *)a2 + 13);
      float32x4_t v57 = *((float32x4_t *)a2 + 14);
      float32x4_t v58 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v54, v56), v57));
      float32x4_t v59 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v55, v56), v57));
      float32x4_t v60 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(v53, v14), v56), v57));
      float32x4_t v61 = *((float32x4_t *)a2 + 91);
      float32x4_t v62 = *((float32x4_t *)a2 + 92);
      int8x16_t v63 = (int8x16_t)vaddq_f32(v61, vmulq_f32(v62, v58));
      int8x16_t v64 = (int8x16_t)vaddq_f32(v61, vmulq_f32(v62, v59));
      float32x4_t v65 = vmulq_f32(v62, v60);
      float32x4_t v66 = *((float32x4_t *)a2 + 93);
      int8x16_t v67 = (int8x16_t)vmulq_f32(v18, v66);
      int8x16_t v68 = (int8x16_t)vaddq_f32(v61, v65);
      int8x16_t v69 = (int8x16_t)vmulq_f32(v19, v66);
      float32x4_t v70 = *((float32x4_t *)a2 + 94);
      int8x16_t v71 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v70));
      int8x16_t v72 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v19, v70));
      int8x16_t v73 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v20, v70)), (int8x16_t)vmulq_f32(v20, v66), v68);
      int8x16_t v74 = *((int8x16_t *)a2 + 15);
      float32x4_t v75 = (int8x16_t *)(v6 + v10);
      *float32x4_t v75 = vbslq_s8(v74, (int8x16_t)v12, vbslq_s8(v71, v67, v63));
      v75[1] = vbslq_s8(v74, (int8x16_t)v13, vbslq_s8(v72, v69, v64));
      v75[2] = vbslq_s8(v74, (int8x16_t)v15, v73);
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v76) = -v11;
    if ((int)v76 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v76 = v76;
    do
    {
      float32x4_t v77 = *(float32x4_t *)(v7 + 16 * v76);
      float32x4_t v78 = *((float32x4_t *)a2 + 75);
      float32x4_t v79 = *((float32x4_t *)a2 + 5);
      float32x4_t v80 = vminq_f32(vmaxq_f32(v77, v78), v79);
      float32x4_t v81 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)v80));
      float32x4_t v82 = vcvtq_f32_s32(vcvtq_s32_f32(v81));
      float32x4_t v83 = vmulq_f32(*((float32x4_t *)a2 + 77), vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v82), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v81, v82))), *((float32x4_t *)a2 + 9))));
      float32x4_t v84 = vcvtq_f32_s32(vcvtq_s32_f32(v83));
      float32x4_t v85 = vsubq_f32(v84, (float32x4_t)vandq_s8((int8x16_t)v79, (int8x16_t)vcgtq_f32(v84, v83)));
      float32x4_t v86 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v83, v85))), *((float32x4_t *)a2 + 12));
      *(int8x16_t *)(v6 + 16 * v76++) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v77, vbslq_s8((int8x16_t)vcgtq_f32(v78, vsubq_f32(v80, *((float32x4_t *)a2 + 94))), (int8x16_t)vmulq_f32(v80, *((float32x4_t *)a2 + 93)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 91), vmulq_f32(*((float32x4_t *)a2 + 92), (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v85), vmulq_f32(v86, v86)), v78),
                                                                              *((float32x4_t *)a2 + 13)),
                                                                            *((float32x4_t *)a2 + 14)))))));
    }
    while (v76 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec601_nice_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v91 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v17 = *((float32x4_t *)a2 + 77);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v12, v14), v15);
      int8x16_t v19 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vceqq_f32(v17, v14)), v14);
      float32x4_t v20 = (float32x4_t)vbslq_s8(v19, (int8x16_t)v15, (int8x16_t)v16);
      float32x4_t v21 = (float32x4_t)vbslq_s8(v19, (int8x16_t)v15, (int8x16_t)v18);
      int8x16_t v22 = *((int8x16_t *)a2 + 19);
      float32x4_t v23 = *((float32x4_t *)a2 + 20);
      float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v20), (int8x16_t)v15);
      float32x4_t v25 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v21), (int8x16_t)v15);
      int8x16_t v26 = *((int8x16_t *)a2 + 21);
      float32x4_t v27 = *((float32x4_t *)a2 + 22);
      float32x4_t v28 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v23, v20)));
      float32x4_t v29 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v21, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v23, v21)));
      float32x4_t v30 = *((float32x4_t *)a2 + 23);
      float32x4_t v31 = *((float32x4_t *)a2 + 24);
      float32x4_t v32 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v24, v30));
      float32x4_t v33 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v25, v30));
      float32x4_t v34 = vaddq_f32(vsubq_f32(v28, v27), v32);
      float32x4_t v35 = vmulq_f32(v31, v32);
      float32x4_t v36 = vmulq_f32(vmulq_f32(v31, v33), v25);
      float32x4_t v37 = vaddq_f32(vsubq_f32(v29, v27), v33);
      float32x4_t v38 = vsubq_f32(vsubq_f32(v24, v15), vmulq_f32(v35, v24));
      float32x4_t v39 = vsubq_f32(vsubq_f32(v25, v15), v36);
      float32x4_t v40 = vmulq_f32(v38, v38);
      float32x4_t v41 = vmulq_f32(v39, v39);
      float32x4_t v42 = *((float32x4_t *)a2 + 37);
      float32x4_t v43 = *((float32x4_t *)a2 + 38);
      float32x4_t v44 = *((float32x4_t *)a2 + 39);
      float32x4_t v45 = *((float32x4_t *)a2 + 40);
      float32x4_t v46 = vaddq_f32(v42, vmulq_f32(v43, v38));
      float32x4_t v47 = vaddq_f32(v44, vmulq_f32(v45, v38));
      float32x4_t v48 = vaddq_f32(v44, vmulq_f32(v45, v39));
      float32x4_t v49 = vaddq_f32(v42, vmulq_f32(v43, v39));
      float32x4_t v50 = *((float32x4_t *)a2 + 41);
      float32x4_t v51 = *((float32x4_t *)a2 + 42);
      float32x4_t v52 = vaddq_f32(vaddq_f32(v50, vmulq_f32(v51, v39)), vmulq_f32(v41, vaddq_f32(v49, vmulq_f32(v41, v48))));
      float32x4_t v53 = vmulq_f32(v38, vaddq_f32(vaddq_f32(v50, vmulq_f32(v51, v38)), vmulq_f32(v40, vaddq_f32(v46, vmulq_f32(v40, v47)))));
      float32x4_t v54 = *((float32x4_t *)a2 + 43);
      float32x4_t v55 = *((float32x4_t *)a2 + 44);
      float32x4_t v56 = vmulq_f32(v17, vaddq_f32(v34, vmulq_f32(v38, vaddq_f32(v54, v53))));
      float32x4_t v57 = vmulq_f32(v17, vaddq_f32(v37, vmulq_f32(v39, vaddq_f32(v54, vmulq_f32(v39, v52)))));
      float32x4_t v58 = *((float32x4_t *)a2 + 29);
      float32x4_t v59 = vmaxq_f32(v56, v58);
      float32x4_t v60 = vmaxq_f32(v57, v58);
      float32x4_t v61 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v62 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
      float32x4_t v63 = vsubq_f32(v61, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v61, v59)));
      float32x4_t v64 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v62, v60)));
      float32x4_t v65 = vsubq_f32(v59, v63);
      float32x4_t v66 = vsubq_f32(v60, v64);
      float32x4_t v67 = *((float32x4_t *)a2 + 45);
      float32x4_t v68 = *((float32x4_t *)a2 + 46);
      float32x4_t v69 = vaddq_f32(v55, vmulq_f32(v67, v65));
      float32x4_t v70 = vaddq_f32(v55, vmulq_f32(v67, v66));
      float32x4_t v71 = *((float32x4_t *)a2 + 47);
      float32x4_t v72 = *((float32x4_t *)a2 + 48);
      float32x4_t v73 = vaddq_f32(v15, vmulq_f32(v65, vaddq_f32(v72, vmulq_f32(v65, vaddq_f32(vaddq_f32(v68, vmulq_f32(v65, v71)), vmulq_f32(vmulq_f32(v65, v65), v69))))));
      int32x4_t v74 = *((int32x4_t *)a2 + 33);
      float32x4_t v75 = vaddq_f32(v15, vmulq_f32(v66, vaddq_f32(v72, vmulq_f32(v66, vaddq_f32(vaddq_f32(v68, vmulq_f32(v71, v66)), vmulq_f32(vmulq_f32(v66, v66), v70))))));
      float32x4_t v76 = (float32x4_t)vshlq_n_s32(vaddq_s32(v74, vcvtq_s32_f32(v63)), 0x17uLL);
      float32x4_t v77 = (float32x4_t)vshlq_n_s32(vaddq_s32(v74, vcvtq_s32_f32(v64)), 0x17uLL);
      float32x4_t v78 = vmulq_f32(v73, v76);
      float32x4_t v79 = *((float32x4_t *)a2 + 91);
      float32x4_t v80 = *((float32x4_t *)a2 + 92);
      int8x16_t v81 = (int8x16_t)vaddq_f32(v79, vmulq_f32(v80, v78));
      float32x4_t v82 = vmulq_f32(v80, vmulq_f32(v75, v77));
      float32x4_t v83 = *((float32x4_t *)a2 + 93);
      int8x16_t v84 = (int8x16_t)vmulq_f32(v16, v83);
      int8x16_t v85 = (int8x16_t)vaddq_f32(v79, v82);
      float32x4_t v86 = *((float32x4_t *)a2 + 94);
      int8x16_t v87 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v86));
      int8x16_t v88 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v86)), (int8x16_t)vmulq_f32(v18, v83), v85);
      int8x16_t v89 = *((int8x16_t *)a2 + 15);
      float32x4_t v90 = (int8x16_t *)(v6 + v11);
      v90[-1] = vbslq_s8(v89, (int8x16_t)v13, vbslq_s8(v87, v84, v81));
      *float32x4_t v90 = vbslq_s8(v89, (int8x16_t)v12, v88);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v91 = -v10;
    if (v91 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v92 = 16 * v91;
    float32x4_t v93 = *(float32x4_t *)(v7 + v92);
    float32x4_t v94 = *((float32x4_t *)a2 + 75);
    float32x4_t v95 = *((float32x4_t *)a2 + 5);
    float32x4_t v96 = vminq_f32(vmaxq_f32(v93, v94), v95);
    float32x4_t v97 = *((float32x4_t *)a2 + 77);
    float32x4_t v98 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vceqq_f32(v97, v94)), v94), (int8x16_t)v95, (int8x16_t)v96);
    float32x4_t v99 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v98), (int8x16_t)v95);
    float32x4_t v100 = (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v99, *((float32x4_t *)a2 + 23)));
    float32x4_t v101 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v98, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v98))), *((float32x4_t *)a2 + 22)), v100);
    float32x4_t v102 = vsubq_f32(vsubq_f32(v99, v95), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v100), v99));
    float32x4_t v103 = vmulq_f32(v102, v102);
    float32x4_t v104 = vmaxq_f32(vmulq_f32(v97, vaddq_f32(v101, vmulq_f32(v102, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v102, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v102)), vmulq_f32(v103, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v102)), vmulq_f32(v103, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v102))))))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v105 = vcvtq_f32_s32(vcvtq_s32_f32(v104));
    float32x4_t v106 = vsubq_f32(v105, (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v105, v104)));
    float32x4_t v107 = vsubq_f32(v104, v106);
    *(int8x16_t *)(v6 + v92) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v93, vbslq_s8((int8x16_t)vcgtq_f32(v94, vsubq_f32(v96, *((float32x4_t *)a2 + 94))), (int8x16_t)vmulq_f32(v96, *((float32x4_t *)a2 + 93)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 91), vmulq_f32(*((float32x4_t *)a2 + 92), vmulq_f32(vaddq_f32(v95, vmulq_f32(v107, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v107, vaddq_f32(
                                                              vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v107)), vmulq_f32(vmulq_f32(v107, v107), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v107)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v106)), 0x17uLL))))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec601_half_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v76 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v17 = vminq_f32(vmaxq_f32(v12, v14), v15);
      int8x16_t v18 = *((int8x16_t *)a2 + 19);
      float32x4_t v19 = *((float32x4_t *)a2 + 20);
      float32x4_t v20 = (float32x4_t)vorrq_s8(vandq_s8(v18, (int8x16_t)v16), (int8x16_t)v15);
      float32x4_t v21 = (float32x4_t)vorrq_s8(vandq_s8(v18, (int8x16_t)v17), (int8x16_t)v15);
      int8x16_t v22 = (int8x16_t)vcgtq_f32(v19, v16);
      int8x16_t v23 = *((int8x16_t *)a2 + 21);
      float32x4_t v24 = *((float32x4_t *)a2 + 22);
      float32x4_t v25 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v17, 0x17uLL)), (float32x4_t)vandq_s8(v23, (int8x16_t)vcgtq_f32(v19, v17)));
      float32x4_t v26 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v16, 0x17uLL)), (float32x4_t)vandq_s8(v23, v22)), v24);
      float32x4_t v27 = *((float32x4_t *)a2 + 23);
      float32x4_t v28 = *((float32x4_t *)a2 + 24);
      float32x4_t v29 = vsubq_f32(v25, v24);
      float32x4_t v30 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v20, v27));
      float32x4_t v31 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v21, v27));
      float32x4_t v32 = vsubq_f32(vsubq_f32(v20, v15), vmulq_f32(vmulq_f32(v28, v30), v20));
      float32x4_t v33 = vsubq_f32(vsubq_f32(v21, v15), vmulq_f32(vmulq_f32(v28, v31), v21));
      float32x4_t v34 = *((float32x4_t *)a2 + 25);
      float32x4_t v35 = *((float32x4_t *)a2 + 26);
      float32x4_t v36 = vaddq_f32(v34, vmulq_f32(v35, v32));
      float32x4_t v37 = vaddq_f32(v34, vmulq_f32(v35, v33));
      float32x4_t v38 = *((float32x4_t *)a2 + 27);
      float32x4_t v39 = *((float32x4_t *)a2 + 28);
      float32x4_t v40 = vaddq_f32(vaddq_f32(v29, v31), vmulq_f32(v33, vaddq_f32(vaddq_f32(v38, vmulq_f32(v33, v39)), vmulq_f32(vmulq_f32(v33, v33), v37))));
      float32x4_t v41 = *((float32x4_t *)a2 + 77);
      float32x4_t v42 = vmulq_f32(v41, vaddq_f32(vaddq_f32(v26, v30), vmulq_f32(v32, vaddq_f32(vaddq_f32(v38, vmulq_f32(v32, v39)), vmulq_f32(vmulq_f32(v32, v32), v36)))));
      float32x4_t v43 = vmulq_f32(v41, v40);
      float32x4_t v44 = *((float32x4_t *)a2 + 29);
      float32x4_t v45 = *((float32x4_t *)a2 + 30);
      float32x4_t v46 = vmaxq_f32(v42, v44);
      float32x4_t v47 = vmaxq_f32(v43, v44);
      float32x4_t v48 = vcvtq_f32_s32(vcvtq_s32_f32(v46));
      float32x4_t v49 = vcvtq_f32_s32(vcvtq_s32_f32(v47));
      float32x4_t v50 = vsubq_f32(v48, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v48, v46)));
      float32x4_t v51 = vsubq_f32(v49, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v49, v47)));
      float32x4_t v52 = vsubq_f32(v46, v50);
      float32x4_t v53 = *((float32x4_t *)a2 + 31);
      float32x4_t v54 = *((float32x4_t *)a2 + 32);
      float32x4_t v55 = vsubq_f32(v47, v51);
      float32x4_t v56 = vmulq_f32(v55, vaddq_f32(v54, vmulq_f32(v55, vaddq_f32(v45, vmulq_f32(v53, v55)))));
      float32x4_t v57 = vaddq_f32(v15, vmulq_f32(v52, vaddq_f32(v54, vmulq_f32(v52, vaddq_f32(v45, vmulq_f32(v53, v52))))));
      int32x4_t v58 = vcvtq_s32_f32(v51);
      int32x4_t v59 = *((int32x4_t *)a2 + 33);
      float32x4_t v60 = vaddq_f32(v15, v56);
      float32x4_t v61 = (float32x4_t)vshlq_n_s32(vaddq_s32(v59, vcvtq_s32_f32(v50)), 0x17uLL);
      float32x4_t v62 = (float32x4_t)vshlq_n_s32(vaddq_s32(v59, v58), 0x17uLL);
      float32x4_t v63 = vmulq_f32(v57, v61);
      float32x4_t v64 = *((float32x4_t *)a2 + 91);
      float32x4_t v65 = *((float32x4_t *)a2 + 92);
      int8x16_t v66 = (int8x16_t)vaddq_f32(v64, vmulq_f32(v65, v63));
      float32x4_t v67 = vmulq_f32(v65, vmulq_f32(v60, v62));
      float32x4_t v68 = *((float32x4_t *)a2 + 93);
      int8x16_t v69 = (int8x16_t)vmulq_f32(v16, v68);
      int8x16_t v70 = (int8x16_t)vaddq_f32(v64, v67);
      float32x4_t v71 = *((float32x4_t *)a2 + 94);
      int8x16_t v72 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v71));
      int8x16_t v73 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v17, v71)), (int8x16_t)vmulq_f32(v17, v68), v70);
      int8x16_t v74 = *((int8x16_t *)a2 + 15);
      float32x4_t v75 = (int8x16_t *)(v6 + v11);
      v75[-1] = vbslq_s8(v74, (int8x16_t)v13, vbslq_s8(v72, v69, v66));
      *float32x4_t v75 = vbslq_s8(v74, (int8x16_t)v12, v73);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v76 = -v10;
    if (v76 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v77 = 16 * v76;
    float32x4_t v78 = *(float32x4_t *)(v7 + v77);
    float32x4_t v79 = *((float32x4_t *)a2 + 75);
    float32x4_t v80 = *((float32x4_t *)a2 + 5);
    float32x4_t v81 = vminq_f32(vmaxq_f32(v78, v79), v80);
    float32x4_t v82 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v81), (int8x16_t)v80);
    float32x4_t v83 = (float32x4_t)vandq_s8((int8x16_t)v80, (int8x16_t)vcgtq_f32(v82, *((float32x4_t *)a2 + 23)));
    float32x4_t v84 = vsubq_f32(vsubq_f32(v82, v80), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v83), v82));
    float32x4_t v85 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 77), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v81, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v81))), *((float32x4_t *)a2 + 22)), v83), vmulq_f32(v84, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v84, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v84, v84), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v84))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v86 = vcvtq_f32_s32(vcvtq_s32_f32(v85));
    float32x4_t v87 = vsubq_f32(v86, (float32x4_t)vandq_s8((int8x16_t)v80, (int8x16_t)vcgtq_f32(v86, v85)));
    float32x4_t v88 = vsubq_f32(v85, v87);
    *(int8x16_t *)(v6 + v77) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v78, vbslq_s8((int8x16_t)vcgtq_f32(v79, vsubq_f32(v81, *((float32x4_t *)a2 + 94))), (int8x16_t)vmulq_f32(v81, *((float32x4_t *)a2 + 93)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 91), vmulq_f32(*((float32x4_t *)a2 + 92), vmulq_f32(vaddq_f32(v80, vmulq_f32(v88, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v88, vaddq_f32(
                                                              *((float32x4_t *)a2 + 30),
                                                              vmulq_f32(*((float32x4_t *)a2 + 31), v88)))))),
                                                    (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v87)), 0x17uLL))))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec601_half_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v81 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 82);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v16 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmaxq_f32(v13, v14));
      float32x4_t v17 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v12, (int8x16_t)vmaxq_f32(v12, v14));
      float32x4_t v18 = *((float32x4_t *)a2 + 75);
      int8x16_t v19 = (int8x16_t)vcgtq_f32(v18, v16);
      int8x16_t v20 = (int8x16_t)vcgtq_f32(v18, v17);
      int8x16_t v21 = *((int8x16_t *)a2 + 83);
      float32x4_t v22 = *((float32x4_t *)a2 + 5);
      float32x4_t v23 = vmulq_f32(v16, (float32x4_t)vbslq_s8(v19, v21, (int8x16_t)v22));
      float32x4_t v24 = vmulq_f32(v17, (float32x4_t)vbslq_s8(v20, v21, (int8x16_t)v22));
      float32x4_t v25 = *((float32x4_t *)a2 + 84);
      float32x4_t v26 = vminq_f32(v23, v25);
      float32x4_t v27 = vminq_f32(v24, v25);
      int8x16_t v28 = *((int8x16_t *)a2 + 19);
      float32x4_t v29 = *((float32x4_t *)a2 + 20);
      float32x4_t v30 = (float32x4_t)vorrq_s8(vandq_s8(v28, (int8x16_t)v26), (int8x16_t)v22);
      int8x16_t v31 = *((int8x16_t *)a2 + 21);
      float32x4_t v32 = *((float32x4_t *)a2 + 22);
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8(v28, (int8x16_t)v27), (int8x16_t)v22);
      float32x4_t v34 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v27, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v29, v27)));
      float32x4_t v35 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v26, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v29, v26))), v32);
      float32x4_t v36 = *((float32x4_t *)a2 + 23);
      float32x4_t v37 = *((float32x4_t *)a2 + 24);
      float32x4_t v38 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v30, v36));
      float32x4_t v39 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v33, v36));
      float32x4_t v40 = vaddq_f32(v35, v38);
      float32x4_t v41 = vmulq_f32(v37, v38);
      float32x4_t v42 = vmulq_f32(vmulq_f32(v37, v39), v33);
      float32x4_t v43 = vaddq_f32(vsubq_f32(v34, v32), v39);
      float32x4_t v44 = vsubq_f32(vsubq_f32(v30, v22), vmulq_f32(v41, v30));
      float32x4_t v45 = vsubq_f32(vsubq_f32(v33, v22), v42);
      float32x4_t v46 = *((float32x4_t *)a2 + 25);
      float32x4_t v47 = *((float32x4_t *)a2 + 26);
      float32x4_t v48 = vaddq_f32(v46, vmulq_f32(v47, v44));
      float32x4_t v49 = vaddq_f32(v46, vmulq_f32(v47, v45));
      float32x4_t v51 = *((float32x4_t *)a2 + 27);
      float32x4_t v50 = *((float32x4_t *)a2 + 28);
      float32x4_t v52 = vaddq_f32(v43, vmulq_f32(v45, vaddq_f32(vaddq_f32(v51, vmulq_f32(v45, v50)), vmulq_f32(vmulq_f32(v45, v45), v49))));
      float32x4_t v53 = *((float32x4_t *)a2 + 77);
      float32x4_t v54 = vmulq_f32(v53, vaddq_f32(v40, vmulq_f32(v44, vaddq_f32(vaddq_f32(v51, vmulq_f32(v44, v50)), vmulq_f32(vmulq_f32(v44, v44), v48)))));
      float32x4_t v55 = vmulq_f32(v53, v52);
      float32x4_t v56 = *((float32x4_t *)a2 + 29);
      float32x4_t v57 = *((float32x4_t *)a2 + 30);
      float32x4_t v58 = vmaxq_f32(v54, v56);
      float32x4_t v59 = vmaxq_f32(v55, v56);
      float32x4_t v60 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v61 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v62 = vsubq_f32(v60, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v60, v58)));
      float32x4_t v63 = vsubq_f32(v61, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v61, v59)));
      float32x4_t v64 = vsubq_f32(v58, v62);
      float32x4_t v65 = vsubq_f32(v59, v63);
      float32x4_t v66 = *((float32x4_t *)a2 + 31);
      float32x4_t v67 = *((float32x4_t *)a2 + 32);
      float32x4_t v68 = vmulq_f32(v65, vaddq_f32(v67, vmulq_f32(v65, vaddq_f32(v57, vmulq_f32(v66, v65)))));
      float32x4_t v69 = vaddq_f32(v22, vmulq_f32(v64, vaddq_f32(v67, vmulq_f32(v64, vaddq_f32(v57, vmulq_f32(v66, v64))))));
      int32x4_t v70 = vcvtq_s32_f32(v63);
      int32x4_t v71 = *((int32x4_t *)a2 + 33);
      float32x4_t v72 = vmulq_f32(v69, (float32x4_t)vshlq_n_s32(vaddq_s32(v71, vcvtq_s32_f32(v62)), 0x17uLL));
      float32x4_t v73 = vmulq_f32(vaddq_f32(v22, v68), (float32x4_t)vshlq_n_s32(vaddq_s32(v71, v70), 0x17uLL));
      float32x4_t v74 = *((float32x4_t *)a2 + 91);
      float32x4_t v75 = *((float32x4_t *)a2 + 92);
      float32x4_t v76 = vmulq_f32(v75, v73);
      int8x16_t v77 = (int8x16_t)vaddq_f32(v74, vmulq_f32(v75, v72));
      float32x4_t v78 = *((float32x4_t *)a2 + 93);
      float32x4_t v79 = *((float32x4_t *)a2 + 94);
      float32x4_t v80 = (int8x16_t *)(v6 + v11);
      v80[-1] = vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v23, v79)), (int8x16_t)vmulq_f32(v23, v78), v77), (float32x4_t)vbslq_s8(v19, (int8x16_t)v14, (int8x16_t)v22)));
      *float32x4_t v80 = vbslq_s8(v15, (int8x16_t)v12, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v24, v79)), (int8x16_t)vmulq_f32(v24, v78), (int8x16_t)vaddq_f32(v74, v76)), (float32x4_t)vbslq_s8(v20, (int8x16_t)v14, (int8x16_t)v22)));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v81 = -v10;
    if (v81 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v82 = 16 * v81;
    float32x4_t v83 = *(float32x4_t *)(v7 + v82);
    float32x4_t v84 = *((float32x4_t *)a2 + 82);
    float32x4_t v85 = (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v83, (int8x16_t)vmaxq_f32(v83, v84));
    float32x4_t v86 = *((float32x4_t *)a2 + 75);
    int8x16_t v87 = (int8x16_t)vcgtq_f32(v86, v85);
    float32x4_t v88 = *((float32x4_t *)a2 + 5);
    float32x4_t v89 = vmulq_f32(v85, (float32x4_t)vbslq_s8(v87, *((int8x16_t *)a2 + 83), (int8x16_t)v88));
    float32x4_t v90 = vminq_f32(v89, *((float32x4_t *)a2 + 84));
    float32x4_t v91 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v90), (int8x16_t)v88);
    float32x4_t v92 = (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v91, *((float32x4_t *)a2 + 23)));
    float32x4_t v93 = vsubq_f32(vsubq_f32(v91, v88), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v92), v91));
    float32x4_t v94 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 77), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v90, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v90))), *((float32x4_t *)a2 + 22)), v92), vmulq_f32(v93, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v93, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v93, v93), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v93))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v95 = vcvtq_f32_s32(vcvtq_s32_f32(v94));
    float32x4_t v96 = vsubq_f32(v95, (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v95, v94)));
    float32x4_t v97 = vsubq_f32(v94, v96);
    *(int8x16_t *)(v6 + v82) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v83, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v86, vsubq_f32(v89, *((float32x4_t *)a2 + 94))), (int8x16_t)vmulq_f32(v89, *((float32x4_t *)a2 + 93)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 91), vmulq_f32(*((float32x4_t *)a2 + 92), vmulq_f32(vaddq_f32(v88, vmulq_f32(v97, vaddq_f32(*((float32x4_t *)a2 + 32),
                                                                                    vmulq_f32(v97, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v97)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v96)), 0x17uLL))))), (float32x4_t)vbslq_s8(v87, (int8x16_t)v84, (int8x16_t)v88)));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getrec601_nice_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v88 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 82);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v16 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmaxq_f32(v13, v14));
      float32x4_t v17 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v12, (int8x16_t)vmaxq_f32(v12, v14));
      float32x4_t v18 = *((float32x4_t *)a2 + 75);
      int8x16_t v19 = (int8x16_t)vcgtq_f32(v18, v16);
      int8x16_t v20 = *((int8x16_t *)a2 + 83);
      float32x4_t v21 = *((float32x4_t *)a2 + 5);
      int8x16_t v22 = (int8x16_t)vcgtq_f32(v18, v17);
      float32x4_t v23 = vmulq_f32(v16, (float32x4_t)vbslq_s8(v19, v20, (int8x16_t)v21));
      float32x4_t v24 = vmulq_f32(v17, (float32x4_t)vbslq_s8(v22, v20, (int8x16_t)v21));
      float32x4_t v25 = *((float32x4_t *)a2 + 84);
      int8x16_t v26 = (int8x16_t)vminq_f32(v23, v25);
      int8x16_t v27 = (int8x16_t)vminq_f32(v24, v25);
      float32x4_t v28 = *((float32x4_t *)a2 + 77);
      int8x16_t v29 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vceqq_f32(v28, v18)), v18);
      float32x4_t v30 = (float32x4_t)vbslq_s8(v29, (int8x16_t)v21, v26);
      float32x4_t v31 = (float32x4_t)vbslq_s8(v29, (int8x16_t)v21, v27);
      int8x16_t v32 = *((int8x16_t *)a2 + 19);
      float32x4_t v33 = *((float32x4_t *)a2 + 20);
      float32x4_t v34 = (float32x4_t)vorrq_s8(vandq_s8(v32, (int8x16_t)v30), (int8x16_t)v21);
      float32x4_t v35 = (float32x4_t)vorrq_s8(vandq_s8(v32, (int8x16_t)v31), (int8x16_t)v21);
      int8x16_t v36 = *((int8x16_t *)a2 + 21);
      float32x4_t v37 = *((float32x4_t *)a2 + 22);
      float32x4_t v38 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v31, 0x17uLL)), (float32x4_t)vandq_s8(v36, (int8x16_t)vcgtq_f32(v33, v31)));
      float32x4_t v39 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(v36, (int8x16_t)vcgtq_f32(v33, v30))), v37);
      float32x4_t v40 = *((float32x4_t *)a2 + 23);
      float32x4_t v41 = *((float32x4_t *)a2 + 24);
      float32x4_t v42 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v34, v40));
      float32x4_t v43 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v35, v40));
      float32x4_t v44 = vaddq_f32(v39, v42);
      float32x4_t v45 = vaddq_f32(vsubq_f32(v38, v37), v43);
      float32x4_t v46 = vsubq_f32(vsubq_f32(v34, v21), vmulq_f32(vmulq_f32(v41, v42), v34));
      float32x4_t v47 = vsubq_f32(vsubq_f32(v35, v21), vmulq_f32(vmulq_f32(v41, v43), v35));
      float32x4_t v48 = vmulq_f32(v46, v46);
      float32x4_t v49 = vmulq_f32(v47, v47);
      float32x4_t v50 = *((float32x4_t *)a2 + 37);
      float32x4_t v51 = *((float32x4_t *)a2 + 38);
      float32x4_t v52 = vaddq_f32(v50, vmulq_f32(v51, v46));
      float32x4_t v53 = *((float32x4_t *)a2 + 39);
      float32x4_t v54 = *((float32x4_t *)a2 + 40);
      float32x4_t v55 = vaddq_f32(v50, vmulq_f32(v51, v47));
      float32x4_t v56 = vaddq_f32(v53, vmulq_f32(v54, v46));
      float32x4_t v57 = vaddq_f32(v53, vmulq_f32(v54, v47));
      float32x4_t v58 = *((float32x4_t *)a2 + 41);
      float32x4_t v59 = *((float32x4_t *)a2 + 42);
      float32x4_t v60 = vaddq_f32(vaddq_f32(v58, vmulq_f32(v59, v47)), vmulq_f32(v49, vaddq_f32(v55, vmulq_f32(v49, v57))));
      float32x4_t v61 = vmulq_f32(v46, vaddq_f32(vaddq_f32(v58, vmulq_f32(v59, v46)), vmulq_f32(v48, vaddq_f32(v52, vmulq_f32(v48, v56)))));
      float32x4_t v62 = *((float32x4_t *)a2 + 43);
      float32x4_t v63 = *((float32x4_t *)a2 + 44);
      float32x4_t v64 = vaddq_f32(v45, vmulq_f32(v47, vaddq_f32(v62, vmulq_f32(v47, v60))));
      float32x4_t v65 = *((float32x4_t *)a2 + 29);
      float32x4_t v66 = vmaxq_f32(vmulq_f32(v28, vaddq_f32(v44, vmulq_f32(v46, vaddq_f32(v62, v61)))), v65);
      float32x4_t v67 = vmaxq_f32(vmulq_f32(v28, v64), v65);
      float32x4_t v68 = vcvtq_f32_s32(vcvtq_s32_f32(v66));
      float32x4_t v69 = vcvtq_f32_s32(vcvtq_s32_f32(v67));
      float32x4_t v70 = vsubq_f32(v68, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v68, v66)));
      float32x4_t v71 = vsubq_f32(v69, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v69, v67)));
      float32x4_t v72 = vsubq_f32(v66, v70);
      float32x4_t v73 = vsubq_f32(v67, v71);
      float32x4_t v74 = *((float32x4_t *)a2 + 45);
      float32x4_t v75 = *((float32x4_t *)a2 + 46);
      float32x4_t v76 = *((float32x4_t *)a2 + 47);
      float32x4_t v77 = *((float32x4_t *)a2 + 48);
      int32x4_t v78 = *((int32x4_t *)a2 + 33);
      float32x4_t v79 = vmulq_f32(vaddq_f32(v21, vmulq_f32(v72, vaddq_f32(v77, vmulq_f32(v72, vaddq_f32(vaddq_f32(v75, vmulq_f32(v72, v76)), vmulq_f32(vmulq_f32(v72, v72), vaddq_f32(v63, vmulq_f32(v74, v72)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v78, vcvtq_s32_f32(v70)), 0x17uLL));
      float32x4_t v80 = vmulq_f32(vaddq_f32(v21, vmulq_f32(v73, vaddq_f32(v77, vmulq_f32(v73, vaddq_f32(vaddq_f32(v75, vmulq_f32(v76, v73)), vmulq_f32(vmulq_f32(v73, v73), vaddq_f32(v63, vmulq_f32(v74, v73)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v78, vcvtq_s32_f32(v71)), 0x17uLL));
      float32x4_t v81 = *((float32x4_t *)a2 + 91);
      float32x4_t v82 = *((float32x4_t *)a2 + 92);
      float32x4_t v83 = vmulq_f32(v82, v80);
      int8x16_t v84 = (int8x16_t)vaddq_f32(v81, vmulq_f32(v82, v79));
      float32x4_t v85 = *((float32x4_t *)a2 + 93);
      float32x4_t v86 = *((float32x4_t *)a2 + 94);
      int8x16_t v87 = (int8x16_t *)(v6 + v11);
      v87[-1] = vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v23, v86)), (int8x16_t)vmulq_f32(v23, v85), v84), (float32x4_t)vbslq_s8(v19, (int8x16_t)v14, (int8x16_t)v21)));
      *int8x16_t v87 = vbslq_s8(v15, (int8x16_t)v12, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v24, v86)), (int8x16_t)vmulq_f32(v24, v85), (int8x16_t)vaddq_f32(v81, v83)), (float32x4_t)vbslq_s8(v22, (int8x16_t)v14, (int8x16_t)v21)));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v88 = -v10;
    if (v88 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v89 = 16 * v88;
    float32x4_t v90 = *(float32x4_t *)(v7 + v89);
    float32x4_t v91 = *((float32x4_t *)a2 + 82);
    float32x4_t v92 = (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v90, (int8x16_t)vmaxq_f32(v90, v91));
    float32x4_t v93 = *((float32x4_t *)a2 + 75);
    int8x16_t v94 = (int8x16_t)vcgtq_f32(v93, v92);
    float32x4_t v95 = *((float32x4_t *)a2 + 5);
    float32x4_t v96 = vmulq_f32(v92, (float32x4_t)vbslq_s8(v94, *((int8x16_t *)a2 + 83), (int8x16_t)v95));
    float32x4_t v97 = *((float32x4_t *)a2 + 77);
    float32x4_t v98 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vceqq_f32(v97, v93)), v93), (int8x16_t)v95, (int8x16_t)vminq_f32(v96, *((float32x4_t *)a2 + 84)));
    float32x4_t v99 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v98), (int8x16_t)v95);
    float32x4_t v100 = (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v99, *((float32x4_t *)a2 + 23)));
    float32x4_t v101 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v98, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v98))), *((float32x4_t *)a2 + 22)), v100);
    float32x4_t v102 = vsubq_f32(vsubq_f32(v99, v95), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v100), v99));
    float32x4_t v103 = vmulq_f32(v102, v102);
    float32x4_t v104 = vmaxq_f32(vmulq_f32(v97, vaddq_f32(v101, vmulq_f32(v102, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v102, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v102)), vmulq_f32(v103, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v102)), vmulq_f32(v103, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v102))))))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v105 = vcvtq_f32_s32(vcvtq_s32_f32(v104));
    float32x4_t v106 = vsubq_f32(v105, (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v105, v104)));
    float32x4_t v107 = vsubq_f32(v104, v106);
    *(int8x16_t *)(v6 + v89) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v90, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v93, vsubq_f32(v96, *((float32x4_t *)a2 + 94))), (int8x16_t)vmulq_f32(v96, *((float32x4_t *)a2 + 93)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 91), vmulq_f32(*((float32x4_t *)a2 + 92), vmulq_f32(vaddq_f32(v95, vmulq_f32(v107, vaddq_f32(*((float32x4_t *)a2 + 48),
                                                                                    vmulq_f32(v107, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v107)), vmulq_f32(vmulq_f32(v107, v107), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v107)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v106)), 0x17uLL))))),
                                              (float32x4_t)vbslq_s8(v94, (int8x16_t)v91, (int8x16_t)v95)));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec601_fast_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v34 = 0;
        uint64_t v35 = 16 * v8;
        uint64_t v36 = 16 * v7;
        uint64_t v37 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v38 = 0;
          do
          {
            float32x4_t v39 = v5[v38 / 0x10];
            float32x4_t v40 = vminq_f32(vmaxq_f32(v39, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            v6[v38 / 0x10] = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v39, (int8x16_t)vmulq_f32(v40, v40));
            v38 += 16;
          }
          while (v37 != v38);
          ++v34;
          int v5 = (float32x4_t *)((char *)v5 + v35);
          uint64_t v6 = (int8x16_t *)((char *)v6 + v36);
        }
        while (v34 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      float32x4_t v12 = v5 + 4;
      float32x4_t v13 = v6 + 4;
      do
      {
        unint64_t v14 = 0;
        int8x16_t v15 = v13;
        float32x4_t v16 = v12;
        uint64_t v17 = 2;
        do
        {
          float32x4_t v18 = v16;
          int8x16_t v19 = v15;
          float32x4_t v20 = v5[v17 - 2];
          float32x4_t v21 = v5[v17 - 1];
          float32x4_t v22 = v5[v17];
          float32x4_t v23 = v5[v17 + 1];
          float32x4_t v24 = *((float32x4_t *)a2 + 75);
          float32x4_t v25 = *((float32x4_t *)a2 + 5);
          float32x4_t v26 = vminq_f32(vmaxq_f32(v20, v24), v25);
          float32x4_t v27 = vminq_f32(vmaxq_f32(v21, v24), v25);
          float32x4_t v28 = vminq_f32(vmaxq_f32(v22, v24), v25);
          float32x4_t v29 = vminq_f32(vmaxq_f32(v23, v24), v25);
          int8x16_t v30 = *((int8x16_t *)a2 + 15);
          float32x4_t v31 = &v6[v17];
          v31[-2] = vbslq_s8(v30, (int8x16_t)v20, (int8x16_t)vmulq_f32(v26, v26));
          v31[-1] = vbslq_s8(v30, (int8x16_t)v21, (int8x16_t)vmulq_f32(v27, v27));
          v14 += 4;
          *float32x4_t v31 = vbslq_s8(v30, (int8x16_t)v22, (int8x16_t)vmulq_f32(v28, v28));
          v31[1] = vbslq_s8(v30, (int8x16_t)v23, (int8x16_t)vmulq_f32(v29, v29));
          v17 += 4;
          v16 += 4;
          int8x16_t v15 = v19 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            float32x4_t v32 = *v18++;
            float32x4_t v33 = vminq_f32(vmaxq_f32(v32, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            *v19++ = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v32, (int8x16_t)vmulq_f32(v33, v33));
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        uint64_t v6 = (int8x16_t *)((char *)v6 + v10);
        int v5 = (float32x4_t *)((char *)v5 + v11);
        float32x4_t v12 = (float32x4_t *)((char *)v12 + v11);
        float32x4_t v13 = (int8x16_t *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

uint64_t Getinv_rec601_fixed_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v75) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *(float32x4_t *)(v7 + v10 + 32);
      float32x4_t v16 = *((float32x4_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v12, v14), v16);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v13, v14), v16);
      float32x4_t v20 = vminq_f32(vmaxq_f32(v15, v14), v16);
      float32x4_t v21 = *((float32x4_t *)a2 + 95);
      float32x4_t v22 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v18, v21)));
      float32x4_t v23 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v19, v21)));
      float32x4_t v24 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v20, v21)));
      float32x4_t v25 = vcvtq_f32_s32(vcvtq_s32_f32(v22));
      float32x4_t v26 = vcvtq_f32_s32(vcvtq_s32_f32(v23));
      float32x4_t v27 = vcvtq_f32_s32(vcvtq_s32_f32(v24));
      float32x4_t v28 = *((float32x4_t *)a2 + 7);
      float32x4_t v29 = *((float32x4_t *)a2 + 8);
      float32x4_t v30 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v22, v25), v28));
      float32x4_t v31 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v23, v26), v28));
      float32x4_t v32 = vaddq_f32(v29, v25);
      float32x4_t v33 = vrsqrteq_f32(vaddq_f32(v28, vsubq_f32(v24, v27)));
      float32x4_t v34 = vaddq_f32(v29, v26);
      float32x4_t v35 = vaddq_f32(v29, v27);
      float32x4_t v36 = *((float32x4_t *)a2 + 9);
      float32x4_t v37 = *((float32x4_t *)a2 + 10);
      float32x4_t v38 = vsubq_f32(v32, vmulq_f32(v30, v36));
      float32x4_t v39 = vsubq_f32(v34, vmulq_f32(v31, v36));
      float32x4_t v40 = *((float32x4_t *)a2 + 86);
      float32x4_t v41 = vmulq_f32(v40, v38);
      float32x4_t v42 = vmulq_f32(v40, v39);
      float32x4_t v43 = vmulq_f32(v40, vsubq_f32(v35, vmulq_f32(v33, v36)));
      float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
      float32x4_t v45 = vcvtq_f32_s32(vcvtq_s32_f32(v42));
      float32x4_t v46 = vcvtq_f32_s32(vcvtq_s32_f32(v43));
      float32x4_t v47 = vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v44, v41)));
      float32x4_t v48 = vsubq_f32(v45, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v45, v42)));
      float32x4_t v49 = vsubq_f32(v46, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v46, v43)));
      float32x4_t v50 = *((float32x4_t *)a2 + 11);
      float32x4_t v51 = *((float32x4_t *)a2 + 12);
      float32x4_t v52 = vmulq_f32(vrecpeq_f32(vsubq_f32(v50, vsubq_f32(v41, v47))), v51);
      float32x4_t v53 = vmulq_f32(vrecpeq_f32(vsubq_f32(v50, vsubq_f32(v42, v48))), v51);
      float32x4_t v54 = vmulq_f32(vrecpeq_f32(vsubq_f32(v50, vsubq_f32(v43, v49))), v51);
      float32x4_t v55 = vaddq_f32(vaddq_f32(v37, v49), vmulq_f32(v54, v54));
      float32x4_t v56 = vmaxq_f32(vaddq_f32(vaddq_f32(v37, v47), vmulq_f32(v52, v52)), v14);
      float32x4_t v57 = vmaxq_f32(vaddq_f32(vaddq_f32(v37, v48), vmulq_f32(v53, v53)), v14);
      float32x4_t v58 = *((float32x4_t *)a2 + 13);
      float32x4_t v59 = *((float32x4_t *)a2 + 14);
      float32x4_t v60 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v56, v58), v59));
      float32x4_t v61 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v57, v58), v59));
      float32x4_t v62 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(v55, v14), v58), v59));
      float32x4_t v63 = *((float32x4_t *)a2 + 96);
      float32x4_t v64 = *((float32x4_t *)a2 + 97);
      int8x16_t v65 = (int8x16_t)vmulq_f32(v18, v64);
      int8x16_t v66 = (int8x16_t)vmulq_f32(v19, v64);
      int8x16_t v67 = (int8x16_t)vmulq_f32(v20, v64);
      float32x4_t v68 = *((float32x4_t *)a2 + 98);
      int8x16_t v69 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v68));
      int8x16_t v70 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v19, v68));
      int8x16_t v71 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v20, v68));
      int8x16_t v72 = vbslq_s8(v69, v65, (int8x16_t)vmulq_f32(v63, v60));
      int8x16_t v73 = *((int8x16_t *)a2 + 15);
      float32x4_t v74 = (int8x16_t *)(v6 + v10);
      *float32x4_t v74 = vbslq_s8(v73, (int8x16_t)v12, v72);
      v74[1] = vbslq_s8(v73, (int8x16_t)v13, vbslq_s8(v70, v66, (int8x16_t)vmulq_f32(v63, v61)));
      v74[2] = vbslq_s8(v73, (int8x16_t)v15, vbslq_s8(v71, v67, (int8x16_t)vmulq_f32(v63, v62)));
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v75) = -v11;
    if ((int)v75 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v75 = v75;
    do
    {
      float32x4_t v76 = *(float32x4_t *)(v7 + 16 * v75);
      float32x4_t v77 = *((float32x4_t *)a2 + 75);
      float32x4_t v78 = *((float32x4_t *)a2 + 5);
      float32x4_t v79 = vminq_f32(vmaxq_f32(v76, v77), v78);
      float32x4_t v80 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v79, *((float32x4_t *)a2 + 95))));
      float32x4_t v81 = vcvtq_f32_s32(vcvtq_s32_f32(v80));
      float32x4_t v82 = vmulq_f32(*((float32x4_t *)a2 + 86), vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v81), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v80, v81))), *((float32x4_t *)a2 + 9))));
      float32x4_t v83 = vcvtq_f32_s32(vcvtq_s32_f32(v82));
      float32x4_t v84 = vsubq_f32(v83, (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v83, v82)));
      float32x4_t v85 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v82, v84))), *((float32x4_t *)a2 + 12));
      *(int8x16_t *)(v6 + 16 * v75++) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v76, vbslq_s8((int8x16_t)vcgtq_f32(v77, vsubq_f32(v79, *((float32x4_t *)a2 + 98))), (int8x16_t)vmulq_f32(v79, *((float32x4_t *)a2 + 97)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 96), (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v84), vmulq_f32(v85, v85)), v77), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))))));
    }
    while (v75 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec601_nice_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v84 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v17 = vminq_f32(vmaxq_f32(v12, v14), v15);
      float32x4_t v18 = *((float32x4_t *)a2 + 95);
      int8x16_t v19 = (int8x16_t)vaddq_f32(v16, v18);
      int8x16_t v20 = (int8x16_t)vaddq_f32(v17, v18);
      float32x4_t v21 = *((float32x4_t *)a2 + 86);
      int8x16_t v22 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vceqq_f32(v21, v14)), v14);
      float32x4_t v23 = (float32x4_t)vbslq_s8(v22, (int8x16_t)v15, v19);
      float32x4_t v24 = (float32x4_t)vbslq_s8(v22, (int8x16_t)v15, v20);
      int8x16_t v25 = *((int8x16_t *)a2 + 19);
      float32x4_t v26 = *((float32x4_t *)a2 + 20);
      float32x4_t v27 = (float32x4_t)vorrq_s8(vandq_s8(v25, (int8x16_t)v23), (int8x16_t)v15);
      float32x4_t v28 = (float32x4_t)vorrq_s8(vandq_s8(v25, (int8x16_t)v24), (int8x16_t)v15);
      int8x16_t v29 = *((int8x16_t *)a2 + 21);
      float32x4_t v30 = *((float32x4_t *)a2 + 22);
      float32x4_t v31 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v24, 0x17uLL)), (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v26, v24)));
      float32x4_t v32 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v23, 0x17uLL)), (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v26, v23))), v30);
      float32x4_t v33 = *((float32x4_t *)a2 + 23);
      float32x4_t v34 = *((float32x4_t *)a2 + 24);
      float32x4_t v35 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v27, v33));
      float32x4_t v36 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v28, v33));
      float32x4_t v37 = vaddq_f32(v32, v35);
      float32x4_t v38 = vaddq_f32(vsubq_f32(v31, v30), v36);
      float32x4_t v39 = vsubq_f32(vsubq_f32(v27, v15), vmulq_f32(vmulq_f32(v34, v35), v27));
      float32x4_t v40 = vsubq_f32(vsubq_f32(v28, v15), vmulq_f32(vmulq_f32(v34, v36), v28));
      float32x4_t v41 = vmulq_f32(v39, v39);
      float32x4_t v42 = vmulq_f32(v40, v40);
      float32x4_t v43 = *((float32x4_t *)a2 + 37);
      float32x4_t v44 = *((float32x4_t *)a2 + 38);
      float32x4_t v45 = vaddq_f32(v43, vmulq_f32(v44, v39));
      float32x4_t v46 = *((float32x4_t *)a2 + 39);
      float32x4_t v47 = *((float32x4_t *)a2 + 40);
      float32x4_t v48 = vaddq_f32(v43, vmulq_f32(v44, v40));
      float32x4_t v49 = vaddq_f32(v46, vmulq_f32(v47, v39));
      float32x4_t v50 = vaddq_f32(v46, vmulq_f32(v47, v40));
      float32x4_t v51 = *((float32x4_t *)a2 + 41);
      float32x4_t v52 = *((float32x4_t *)a2 + 42);
      float32x4_t v53 = vaddq_f32(vaddq_f32(v51, vmulq_f32(v52, v40)), vmulq_f32(v42, vaddq_f32(v48, vmulq_f32(v42, v50))));
      float32x4_t v54 = vmulq_f32(v39, vaddq_f32(vaddq_f32(v51, vmulq_f32(v52, v39)), vmulq_f32(v41, vaddq_f32(v45, vmulq_f32(v41, v49)))));
      float32x4_t v55 = *((float32x4_t *)a2 + 43);
      float32x4_t v56 = *((float32x4_t *)a2 + 44);
      float32x4_t v57 = vaddq_f32(v38, vmulq_f32(v40, vaddq_f32(v55, vmulq_f32(v40, v53))));
      float32x4_t v58 = *((float32x4_t *)a2 + 29);
      float32x4_t v59 = vmaxq_f32(vmulq_f32(v21, vaddq_f32(v37, vmulq_f32(v39, vaddq_f32(v55, v54)))), v58);
      float32x4_t v60 = vmaxq_f32(vmulq_f32(v21, v57), v58);
      float32x4_t v61 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v62 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
      float32x4_t v63 = vsubq_f32(v61, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v61, v59)));
      float32x4_t v64 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v62, v60)));
      float32x4_t v65 = vsubq_f32(v59, v63);
      float32x4_t v66 = vsubq_f32(v60, v64);
      float32x4_t v67 = *((float32x4_t *)a2 + 45);
      float32x4_t v68 = *((float32x4_t *)a2 + 46);
      float32x4_t v69 = *((float32x4_t *)a2 + 47);
      float32x4_t v70 = *((float32x4_t *)a2 + 48);
      float32x4_t v71 = vaddq_f32(v15, vmulq_f32(v65, vaddq_f32(v70, vmulq_f32(v65, vaddq_f32(vaddq_f32(v68, vmulq_f32(v65, v69)), vmulq_f32(vmulq_f32(v65, v65), vaddq_f32(v56, vmulq_f32(v67, v65))))))));
      float32x4_t v72 = vaddq_f32(v15, vmulq_f32(v66, vaddq_f32(v70, vmulq_f32(v66, vaddq_f32(vaddq_f32(v68, vmulq_f32(v69, v66)), vmulq_f32(vmulq_f32(v66, v66), vaddq_f32(v56, vmulq_f32(v67, v66))))))));
      int32x4_t v73 = *((int32x4_t *)a2 + 33);
      float32x4_t v74 = vmulq_f32(v71, (float32x4_t)vshlq_n_s32(vaddq_s32(v73, vcvtq_s32_f32(v63)), 0x17uLL));
      float32x4_t v75 = vmulq_f32(v72, (float32x4_t)vshlq_n_s32(vaddq_s32(v73, vcvtq_s32_f32(v64)), 0x17uLL));
      float32x4_t v76 = *((float32x4_t *)a2 + 96);
      float32x4_t v77 = *((float32x4_t *)a2 + 97);
      int8x16_t v78 = (int8x16_t)vmulq_f32(v16, v77);
      float32x4_t v79 = *((float32x4_t *)a2 + 98);
      int8x16_t v80 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v79));
      int8x16_t v81 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v17, v79)), (int8x16_t)vmulq_f32(v17, v77), (int8x16_t)vmulq_f32(v76, v75));
      int8x16_t v82 = *((int8x16_t *)a2 + 15);
      float32x4_t v83 = (int8x16_t *)(v6 + v11);
      v83[-1] = vbslq_s8(v82, (int8x16_t)v13, vbslq_s8(v80, v78, (int8x16_t)vmulq_f32(v76, v74)));
      *float32x4_t v83 = vbslq_s8(v82, (int8x16_t)v12, v81);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v84 = -v10;
    if (v84 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v85 = 16 * v84;
    float32x4_t v86 = *(float32x4_t *)(v7 + v85);
    float32x4_t v87 = *((float32x4_t *)a2 + 75);
    float32x4_t v88 = *((float32x4_t *)a2 + 5);
    float32x4_t v89 = vminq_f32(vmaxq_f32(v86, v87), v88);
    float32x4_t v90 = *((float32x4_t *)a2 + 86);
    float32x4_t v91 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vceqq_f32(v90, v87)), v87), (int8x16_t)v88, (int8x16_t)vaddq_f32(v89, *((float32x4_t *)a2 + 95)));
    float32x4_t v92 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v91), (int8x16_t)v88);
    float32x4_t v93 = (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v92, *((float32x4_t *)a2 + 23)));
    float32x4_t v94 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v91, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v91))), *((float32x4_t *)a2 + 22)), v93);
    float32x4_t v95 = vsubq_f32(vsubq_f32(v92, v88), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v93), v92));
    float32x4_t v96 = vmulq_f32(v95, v95);
    float32x4_t v97 = vmaxq_f32(vmulq_f32(v90, vaddq_f32(v94, vmulq_f32(v95, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v95, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v95)), vmulq_f32(v96, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v95)), vmulq_f32(v96, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v95))))))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v98 = vcvtq_f32_s32(vcvtq_s32_f32(v97));
    float32x4_t v99 = vsubq_f32(v98, (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v98, v97)));
    float32x4_t v100 = vsubq_f32(v97, v99);
    *(int8x16_t *)(v6 + v85) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v86, vbslq_s8((int8x16_t)vcgtq_f32(v87, vsubq_f32(v89, *((float32x4_t *)a2 + 98))), (int8x16_t)vmulq_f32(v89, *((float32x4_t *)a2 + 97)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 96), vmulq_f32(vaddq_f32(v88, vmulq_f32(v100, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v100, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46),
                                                              vmulq_f32(*((float32x4_t *)a2 + 47), v100)),
                                                            vmulq_f32(vmulq_f32(v100, v100), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v100)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v99)), 0x17uLL)))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec601_half_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v74 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v17 = vminq_f32(vmaxq_f32(v12, v14), v15);
      float32x4_t v18 = *((float32x4_t *)a2 + 95);
      float32x4_t v19 = vaddq_f32(v16, v18);
      float32x4_t v20 = vaddq_f32(v17, v18);
      int8x16_t v21 = *((int8x16_t *)a2 + 19);
      float32x4_t v22 = *((float32x4_t *)a2 + 20);
      float32x4_t v23 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v19), (int8x16_t)v15);
      int8x16_t v24 = *((int8x16_t *)a2 + 21);
      float32x4_t v25 = *((float32x4_t *)a2 + 22);
      float32x4_t v26 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v20), (int8x16_t)v15);
      float32x4_t v27 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v22, v20)));
      float32x4_t v28 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v19, 0x17uLL)), (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v22, v19))), v25);
      float32x4_t v29 = *((float32x4_t *)a2 + 23);
      float32x4_t v30 = *((float32x4_t *)a2 + 24);
      float32x4_t v31 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v23, v29));
      float32x4_t v32 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v26, v29));
      float32x4_t v33 = vaddq_f32(v28, v31);
      float32x4_t v34 = vmulq_f32(v30, v31);
      float32x4_t v35 = vmulq_f32(vmulq_f32(v30, v32), v26);
      float32x4_t v36 = vaddq_f32(vsubq_f32(v27, v25), v32);
      float32x4_t v37 = vsubq_f32(vsubq_f32(v23, v15), vmulq_f32(v34, v23));
      float32x4_t v38 = vsubq_f32(vsubq_f32(v26, v15), v35);
      float32x4_t v39 = *((float32x4_t *)a2 + 25);
      float32x4_t v40 = *((float32x4_t *)a2 + 26);
      float32x4_t v41 = vaddq_f32(v39, vmulq_f32(v40, v37));
      float32x4_t v42 = vaddq_f32(v39, vmulq_f32(v40, v38));
      float32x4_t v44 = *((float32x4_t *)a2 + 27);
      float32x4_t v43 = *((float32x4_t *)a2 + 28);
      float32x4_t v45 = vaddq_f32(v36, vmulq_f32(v38, vaddq_f32(vaddq_f32(v44, vmulq_f32(v38, v43)), vmulq_f32(vmulq_f32(v38, v38), v42))));
      float32x4_t v46 = *((float32x4_t *)a2 + 86);
      float32x4_t v47 = vmulq_f32(v46, vaddq_f32(v33, vmulq_f32(v37, vaddq_f32(vaddq_f32(v44, vmulq_f32(v37, v43)), vmulq_f32(vmulq_f32(v37, v37), v41)))));
      float32x4_t v48 = vmulq_f32(v46, v45);
      float32x4_t v49 = *((float32x4_t *)a2 + 29);
      float32x4_t v50 = *((float32x4_t *)a2 + 30);
      float32x4_t v51 = vmaxq_f32(v47, v49);
      float32x4_t v52 = vmaxq_f32(v48, v49);
      float32x4_t v53 = vcvtq_f32_s32(vcvtq_s32_f32(v51));
      float32x4_t v54 = vcvtq_f32_s32(vcvtq_s32_f32(v52));
      float32x4_t v55 = vsubq_f32(v53, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v53, v51)));
      float32x4_t v56 = vsubq_f32(v54, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v54, v52)));
      float32x4_t v57 = vsubq_f32(v51, v55);
      float32x4_t v58 = vsubq_f32(v52, v56);
      float32x4_t v59 = *((float32x4_t *)a2 + 31);
      float32x4_t v60 = *((float32x4_t *)a2 + 32);
      float32x4_t v61 = vaddq_f32(v15, vmulq_f32(v57, vaddq_f32(v60, vmulq_f32(v57, vaddq_f32(v50, vmulq_f32(v59, v57))))));
      float32x4_t v62 = vaddq_f32(v15, vmulq_f32(v58, vaddq_f32(v60, vmulq_f32(v58, vaddq_f32(v50, vmulq_f32(v59, v58))))));
      int32x4_t v63 = *((int32x4_t *)a2 + 33);
      float32x4_t v64 = vmulq_f32(v61, (float32x4_t)vshlq_n_s32(vaddq_s32(v63, vcvtq_s32_f32(v55)), 0x17uLL));
      float32x4_t v65 = vmulq_f32(v62, (float32x4_t)vshlq_n_s32(vaddq_s32(v63, vcvtq_s32_f32(v56)), 0x17uLL));
      float32x4_t v66 = *((float32x4_t *)a2 + 96);
      float32x4_t v67 = *((float32x4_t *)a2 + 97);
      int8x16_t v68 = (int8x16_t)vmulq_f32(v16, v67);
      float32x4_t v69 = *((float32x4_t *)a2 + 98);
      int8x16_t v70 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v69));
      int8x16_t v71 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v17, v69)), (int8x16_t)vmulq_f32(v17, v67), (int8x16_t)vmulq_f32(v66, v65));
      int8x16_t v72 = *((int8x16_t *)a2 + 15);
      int32x4_t v73 = (int8x16_t *)(v6 + v11);
      v73[-1] = vbslq_s8(v72, (int8x16_t)v13, vbslq_s8(v70, v68, (int8x16_t)vmulq_f32(v66, v64)));
      *int32x4_t v73 = vbslq_s8(v72, (int8x16_t)v12, v71);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v74 = -v10;
    if (v74 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v75 = 16 * v74;
    float32x4_t v76 = *(float32x4_t *)(v7 + v75);
    float32x4_t v77 = *((float32x4_t *)a2 + 75);
    float32x4_t v78 = *((float32x4_t *)a2 + 5);
    float32x4_t v79 = vminq_f32(vmaxq_f32(v76, v77), v78);
    float32x4_t v80 = vaddq_f32(v79, *((float32x4_t *)a2 + 95));
    float32x4_t v81 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v80), (int8x16_t)v78);
    float32x4_t v82 = (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v81, *((float32x4_t *)a2 + 23)));
    float32x4_t v83 = vsubq_f32(vsubq_f32(v81, v78), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v82), v81));
    float32x4_t v84 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 86), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v80, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v80))), *((float32x4_t *)a2 + 22)), v82), vmulq_f32(v83, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v83, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v83, v83), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v83))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v85 = vcvtq_f32_s32(vcvtq_s32_f32(v84));
    float32x4_t v86 = vsubq_f32(v85, (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v85, v84)));
    float32x4_t v87 = vsubq_f32(v84, v86);
    *(int8x16_t *)(v6 + v75) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v76, vbslq_s8((int8x16_t)vcgtq_f32(v77, vsubq_f32(v79, *((float32x4_t *)a2 + 98))), (int8x16_t)vmulq_f32(v79, *((float32x4_t *)a2 + 97)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 96), vmulq_f32(vaddq_f32(v78, vmulq_f32(v87, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v87, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v87)))))),
                                                  (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v86)), 0x17uLL)))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec601_half_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v77 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 82);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v16 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmaxq_f32(v13, v14));
      float32x4_t v17 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v12, (int8x16_t)vmaxq_f32(v12, v14));
      float32x4_t v18 = *((float32x4_t *)a2 + 75);
      int8x16_t v19 = (int8x16_t)vcgtq_f32(v18, v16);
      int8x16_t v20 = (int8x16_t)vcgtq_f32(v18, v17);
      int8x16_t v21 = *((int8x16_t *)a2 + 83);
      float32x4_t v22 = *((float32x4_t *)a2 + 5);
      float32x4_t v23 = vmulq_f32(v16, (float32x4_t)vbslq_s8(v19, v21, (int8x16_t)v22));
      float32x4_t v24 = vmulq_f32(v17, (float32x4_t)vbslq_s8(v20, v21, (int8x16_t)v22));
      float32x4_t v25 = *((float32x4_t *)a2 + 90);
      float32x4_t v26 = *((float32x4_t *)a2 + 95);
      float32x4_t v27 = vaddq_f32(vminq_f32(v23, v25), v26);
      float32x4_t v28 = vaddq_f32(vminq_f32(v24, v25), v26);
      int8x16_t v29 = *((int8x16_t *)a2 + 19);
      float32x4_t v30 = *((float32x4_t *)a2 + 20);
      float32x4_t v31 = (float32x4_t)vorrq_s8(vandq_s8(v29, (int8x16_t)v27), (int8x16_t)v22);
      float32x4_t v32 = (float32x4_t)vorrq_s8(vandq_s8(v29, (int8x16_t)v28), (int8x16_t)v22);
      int8x16_t v33 = *((int8x16_t *)a2 + 21);
      float32x4_t v34 = *((float32x4_t *)a2 + 22);
      float32x4_t v35 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v28, 0x17uLL)), (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v30, v28)));
      float32x4_t v36 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v27, 0x17uLL)), (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v30, v27))), v34);
      float32x4_t v37 = *((float32x4_t *)a2 + 23);
      float32x4_t v38 = *((float32x4_t *)a2 + 24);
      float32x4_t v39 = vsubq_f32(v35, v34);
      float32x4_t v40 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v31, v37));
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v32, v37));
      float32x4_t v42 = vaddq_f32(v36, v40);
      float32x4_t v43 = vsubq_f32(vsubq_f32(v31, v22), vmulq_f32(vmulq_f32(v38, v40), v31));
      float32x4_t v44 = vsubq_f32(vsubq_f32(v32, v22), vmulq_f32(vmulq_f32(v38, v41), v32));
      float32x4_t v45 = *((float32x4_t *)a2 + 25);
      float32x4_t v46 = *((float32x4_t *)a2 + 26);
      float32x4_t v47 = vaddq_f32(v45, vmulq_f32(v46, v43));
      float32x4_t v48 = vaddq_f32(v45, vmulq_f32(v46, v44));
      float32x4_t v49 = *((float32x4_t *)a2 + 27);
      float32x4_t v50 = *((float32x4_t *)a2 + 28);
      float32x4_t v51 = vaddq_f32(vaddq_f32(v39, v41), vmulq_f32(v44, vaddq_f32(vaddq_f32(v49, vmulq_f32(v44, v50)), vmulq_f32(vmulq_f32(v44, v44), v48))));
      float32x4_t v52 = *((float32x4_t *)a2 + 86);
      float32x4_t v53 = vmulq_f32(v52, vaddq_f32(v42, vmulq_f32(v43, vaddq_f32(vaddq_f32(v49, vmulq_f32(v43, v50)), vmulq_f32(vmulq_f32(v43, v43), v47)))));
      float32x4_t v54 = vmulq_f32(v52, v51);
      float32x4_t v55 = *((float32x4_t *)a2 + 29);
      float32x4_t v56 = *((float32x4_t *)a2 + 30);
      float32x4_t v57 = vmaxq_f32(v53, v55);
      float32x4_t v58 = vmaxq_f32(v54, v55);
      float32x4_t v59 = vcvtq_f32_s32(vcvtq_s32_f32(v57));
      float32x4_t v60 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v61 = vsubq_f32(v59, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v59, v57)));
      float32x4_t v62 = vsubq_f32(v60, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v60, v58)));
      float32x4_t v63 = vsubq_f32(v57, v61);
      float32x4_t v64 = *((float32x4_t *)a2 + 31);
      float32x4_t v65 = *((float32x4_t *)a2 + 32);
      float32x4_t v66 = vsubq_f32(v58, v62);
      float32x4_t v67 = vmulq_f32(v66, vaddq_f32(v65, vmulq_f32(v66, vaddq_f32(v56, vmulq_f32(v64, v66)))));
      float32x4_t v68 = vaddq_f32(v22, vmulq_f32(v63, vaddq_f32(v65, vmulq_f32(v63, vaddq_f32(v56, vmulq_f32(v64, v63))))));
      int32x4_t v69 = vcvtq_s32_f32(v62);
      int32x4_t v70 = *((int32x4_t *)a2 + 33);
      float32x4_t v71 = vmulq_f32(v68, (float32x4_t)vshlq_n_s32(vaddq_s32(v70, vcvtq_s32_f32(v61)), 0x17uLL));
      float32x4_t v72 = vmulq_f32(vaddq_f32(v22, v67), (float32x4_t)vshlq_n_s32(vaddq_s32(v70, v69), 0x17uLL));
      float32x4_t v73 = *((float32x4_t *)a2 + 96);
      float32x4_t v74 = *((float32x4_t *)a2 + 97);
      float32x4_t v75 = *((float32x4_t *)a2 + 98);
      float32x4_t v76 = (int8x16_t *)(v6 + v11);
      v76[-1] = vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v23, v75)), (int8x16_t)vmulq_f32(v23, v74), (int8x16_t)vmulq_f32(v73, v71)), (float32x4_t)vbslq_s8(v19, (int8x16_t)v14, (int8x16_t)v22)));
      *float32x4_t v76 = vbslq_s8(v15, (int8x16_t)v12, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v24, v75)), (int8x16_t)vmulq_f32(v24, v74), (int8x16_t)vmulq_f32(v73, v72)), (float32x4_t)vbslq_s8(v20, (int8x16_t)v14, (int8x16_t)v22)));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v77 = -v10;
    if (v77 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v78 = 16 * v77;
    float32x4_t v79 = *(float32x4_t *)(v7 + v78);
    float32x4_t v80 = *((float32x4_t *)a2 + 82);
    float32x4_t v81 = (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v79, (int8x16_t)vmaxq_f32(v79, v80));
    float32x4_t v82 = *((float32x4_t *)a2 + 75);
    int8x16_t v83 = (int8x16_t)vcgtq_f32(v82, v81);
    float32x4_t v84 = *((float32x4_t *)a2 + 5);
    float32x4_t v85 = vmulq_f32(v81, (float32x4_t)vbslq_s8(v83, *((int8x16_t *)a2 + 83), (int8x16_t)v84));
    float32x4_t v86 = vaddq_f32(vminq_f32(v85, *((float32x4_t *)a2 + 90)), *((float32x4_t *)a2 + 95));
    float32x4_t v87 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v86), (int8x16_t)v84);
    float32x4_t v88 = (float32x4_t)vandq_s8((int8x16_t)v84, (int8x16_t)vcgtq_f32(v87, *((float32x4_t *)a2 + 23)));
    float32x4_t v89 = vsubq_f32(vsubq_f32(v87, v84), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v88), v87));
    float32x4_t v90 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 86), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v86, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v86))), *((float32x4_t *)a2 + 22)), v88), vmulq_f32(v89, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v89, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v89, v89), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v89))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v91 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
    float32x4_t v92 = vsubq_f32(v91, (float32x4_t)vandq_s8((int8x16_t)v84, (int8x16_t)vcgtq_f32(v91, v90)));
    float32x4_t v93 = vsubq_f32(v90, v92);
    *(int8x16_t *)(v6 + v78) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v79, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v82, vsubq_f32(v85, *((float32x4_t *)a2 + 98))), (int8x16_t)vmulq_f32(v85, *((float32x4_t *)a2 + 97)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 96), vmulq_f32(vaddq_f32(v84, vmulq_f32(v93, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v93,
                                                                                    vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v93)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v92)), 0x17uLL)))), (float32x4_t)vbslq_s8(v83, (int8x16_t)v80, (int8x16_t)v84)));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_rec601_nice_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v92 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 82);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      float32x4_t v16 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmaxq_f32(v13, v14));
      float32x4_t v17 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v12, (int8x16_t)vmaxq_f32(v12, v14));
      float32x4_t v18 = *((float32x4_t *)a2 + 75);
      int8x16_t v19 = (int8x16_t)vcgtq_f32(v18, v16);
      int8x16_t v20 = *((int8x16_t *)a2 + 83);
      float32x4_t v21 = *((float32x4_t *)a2 + 5);
      int8x16_t v22 = (int8x16_t)vcgtq_f32(v18, v17);
      float32x4_t v23 = vmulq_f32(v16, (float32x4_t)vbslq_s8(v19, v20, (int8x16_t)v21));
      float32x4_t v24 = vmulq_f32(v17, (float32x4_t)vbslq_s8(v22, v20, (int8x16_t)v21));
      float32x4_t v25 = *((float32x4_t *)a2 + 90);
      float32x4_t v26 = vminq_f32(v24, v25);
      float32x4_t v27 = *((float32x4_t *)a2 + 95);
      int8x16_t v28 = (int8x16_t)vaddq_f32(vminq_f32(v23, v25), v27);
      float32x4_t v29 = *((float32x4_t *)a2 + 86);
      int8x16_t v30 = (int8x16_t)vaddq_f32(v26, v27);
      int8x16_t v31 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vceqq_f32(v29, v18)), v18);
      float32x4_t v32 = (float32x4_t)vbslq_s8(v31, (int8x16_t)v21, v28);
      float32x4_t v33 = (float32x4_t)vbslq_s8(v31, (int8x16_t)v21, v30);
      int8x16_t v34 = *((int8x16_t *)a2 + 19);
      float32x4_t v35 = *((float32x4_t *)a2 + 20);
      float32x4_t v36 = (float32x4_t)vorrq_s8(vandq_s8(v34, (int8x16_t)v32), (int8x16_t)v21);
      float32x4_t v37 = (float32x4_t)vorrq_s8(vandq_s8(v34, (int8x16_t)v33), (int8x16_t)v21);
      int8x16_t v38 = *((int8x16_t *)a2 + 21);
      float32x4_t v39 = *((float32x4_t *)a2 + 22);
      float32x4_t v40 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v32, 0x17uLL)), (float32x4_t)vandq_s8(v38, (int8x16_t)vcgtq_f32(v35, v32)));
      float32x4_t v41 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v33, 0x17uLL)), (float32x4_t)vandq_s8(v38, (int8x16_t)vcgtq_f32(v35, v33)));
      float32x4_t v42 = *((float32x4_t *)a2 + 23);
      float32x4_t v43 = *((float32x4_t *)a2 + 24);
      float32x4_t v44 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v36, v42));
      float32x4_t v45 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v37, v42));
      float32x4_t v46 = vaddq_f32(vsubq_f32(v40, v39), v44);
      float32x4_t v47 = vmulq_f32(v43, v44);
      float32x4_t v48 = vmulq_f32(vmulq_f32(v43, v45), v37);
      float32x4_t v49 = vaddq_f32(vsubq_f32(v41, v39), v45);
      float32x4_t v50 = vsubq_f32(vsubq_f32(v36, v21), vmulq_f32(v47, v36));
      float32x4_t v51 = vsubq_f32(vsubq_f32(v37, v21), v48);
      float32x4_t v52 = vmulq_f32(v50, v50);
      float32x4_t v53 = vmulq_f32(v51, v51);
      float32x4_t v54 = *((float32x4_t *)a2 + 37);
      float32x4_t v55 = *((float32x4_t *)a2 + 38);
      float32x4_t v56 = *((float32x4_t *)a2 + 39);
      float32x4_t v57 = *((float32x4_t *)a2 + 40);
      float32x4_t v58 = vaddq_f32(v54, vmulq_f32(v55, v50));
      float32x4_t v59 = vaddq_f32(v56, vmulq_f32(v57, v50));
      float32x4_t v60 = vaddq_f32(v56, vmulq_f32(v57, v51));
      float32x4_t v61 = vaddq_f32(v54, vmulq_f32(v55, v51));
      float32x4_t v62 = *((float32x4_t *)a2 + 41);
      float32x4_t v63 = *((float32x4_t *)a2 + 42);
      float32x4_t v64 = vaddq_f32(vaddq_f32(v62, vmulq_f32(v63, v51)), vmulq_f32(v53, vaddq_f32(v61, vmulq_f32(v53, v60))));
      float32x4_t v65 = vmulq_f32(v50, vaddq_f32(vaddq_f32(v62, vmulq_f32(v63, v50)), vmulq_f32(v52, vaddq_f32(v58, vmulq_f32(v52, v59)))));
      float32x4_t v66 = *((float32x4_t *)a2 + 43);
      float32x4_t v67 = *((float32x4_t *)a2 + 44);
      float32x4_t v68 = vmulq_f32(v29, vaddq_f32(v46, vmulq_f32(v50, vaddq_f32(v66, v65))));
      float32x4_t v69 = vmulq_f32(v29, vaddq_f32(v49, vmulq_f32(v51, vaddq_f32(v66, vmulq_f32(v51, v64)))));
      float32x4_t v70 = *((float32x4_t *)a2 + 29);
      float32x4_t v71 = vmaxq_f32(v68, v70);
      float32x4_t v72 = vmaxq_f32(v69, v70);
      float32x4_t v73 = vcvtq_f32_s32(vcvtq_s32_f32(v71));
      float32x4_t v74 = vcvtq_f32_s32(vcvtq_s32_f32(v72));
      float32x4_t v75 = vsubq_f32(v73, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v73, v71)));
      float32x4_t v76 = vsubq_f32(v74, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v74, v72)));
      float32x4_t v77 = vsubq_f32(v71, v75);
      float32x4_t v78 = vsubq_f32(v72, v76);
      float32x4_t v79 = *((float32x4_t *)a2 + 45);
      float32x4_t v80 = *((float32x4_t *)a2 + 46);
      float32x4_t v81 = vaddq_f32(v67, vmulq_f32(v79, v77));
      float32x4_t v82 = vaddq_f32(v67, vmulq_f32(v79, v78));
      float32x4_t v83 = *((float32x4_t *)a2 + 47);
      float32x4_t v84 = *((float32x4_t *)a2 + 48);
      int32x4_t v85 = *((int32x4_t *)a2 + 33);
      float32x4_t v86 = vmulq_f32(vaddq_f32(v21, vmulq_f32(v77, vaddq_f32(v84, vmulq_f32(v77, vaddq_f32(vaddq_f32(v80, vmulq_f32(v77, v83)), vmulq_f32(vmulq_f32(v77, v77), v81)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v85, vcvtq_s32_f32(v75)), 0x17uLL));
      float32x4_t v87 = vmulq_f32(vaddq_f32(v21, vmulq_f32(v78, vaddq_f32(v84, vmulq_f32(v78, vaddq_f32(vaddq_f32(v80, vmulq_f32(v83, v78)), vmulq_f32(vmulq_f32(v78, v78), v82)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v85, vcvtq_s32_f32(v76)), 0x17uLL));
      float32x4_t v88 = *((float32x4_t *)a2 + 96);
      float32x4_t v89 = *((float32x4_t *)a2 + 97);
      float32x4_t v90 = *((float32x4_t *)a2 + 98);
      float32x4_t v91 = (int8x16_t *)(v6 + v11);
      v91[-1] = vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v23, v90)), (int8x16_t)vmulq_f32(v23, v89), (int8x16_t)vmulq_f32(v88, v86)), (float32x4_t)vbslq_s8(v19, (int8x16_t)v14, (int8x16_t)v21)));
      *float32x4_t v91 = vbslq_s8(v15, (int8x16_t)v12, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, vsubq_f32(v24, v90)), (int8x16_t)vmulq_f32(v24, v89), (int8x16_t)vmulq_f32(v88, v87)), (float32x4_t)vbslq_s8(v22, (int8x16_t)v14, (int8x16_t)v21)));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v92 = -v10;
    if (v92 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v93 = 16 * v92;
    float32x4_t v94 = *(float32x4_t *)(v7 + v93);
    float32x4_t v95 = *((float32x4_t *)a2 + 82);
    float32x4_t v96 = (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v94, (int8x16_t)vmaxq_f32(v94, v95));
    float32x4_t v97 = *((float32x4_t *)a2 + 75);
    int8x16_t v98 = (int8x16_t)vcgtq_f32(v97, v96);
    float32x4_t v99 = *((float32x4_t *)a2 + 5);
    float32x4_t v100 = vmulq_f32(v96, (float32x4_t)vbslq_s8(v98, *((int8x16_t *)a2 + 83), (int8x16_t)v99));
    float32x4_t v101 = *((float32x4_t *)a2 + 86);
    float32x4_t v102 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v99, (int8x16_t)vceqq_f32(v101, v97)), v97), (int8x16_t)v99, (int8x16_t)vaddq_f32(vminq_f32(v100, *((float32x4_t *)a2 + 90)), *((float32x4_t *)a2 + 95)));
    float32x4_t v103 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v102), (int8x16_t)v99);
    float32x4_t v104 = (float32x4_t)vandq_s8((int8x16_t)v99, (int8x16_t)vcgtq_f32(v103, *((float32x4_t *)a2 + 23)));
    float32x4_t v105 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v102, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v102))), *((float32x4_t *)a2 + 22)), v104);
    float32x4_t v106 = vsubq_f32(vsubq_f32(v103, v99), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v104), v103));
    float32x4_t v107 = vmulq_f32(v106, v106);
    float32x4_t v108 = vmaxq_f32(vmulq_f32(v101, vaddq_f32(v105, vmulq_f32(v106, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v106, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v106)), vmulq_f32(v107, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v106)), vmulq_f32(v107, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v106))))))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v109 = vcvtq_f32_s32(vcvtq_s32_f32(v108));
    float32x4_t v110 = vsubq_f32(v109, (float32x4_t)vandq_s8((int8x16_t)v99, (int8x16_t)vcgtq_f32(v109, v108)));
    float32x4_t v111 = vsubq_f32(v108, v110);
    *(int8x16_t *)(v6 + v93) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v94, (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v97, vsubq_f32(v100, *((float32x4_t *)a2 + 98))), (int8x16_t)vmulq_f32(v100, *((float32x4_t *)a2 + 97)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 96), vmulq_f32(vaddq_f32(v99, vmulq_f32(v111, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v111,
                                                                                    vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v111)), vmulq_f32(vmulq_f32(v111, v111), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v111)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v110)), 0x17uLL)))), (float32x4_t)vbslq_s8(v98, (int8x16_t)v95, (int8x16_t)v99)));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getsrgb_fast_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v46 = 0;
        uint64_t v47 = 16 * v8;
        uint64_t v48 = 16 * v7;
        uint64_t v49 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v50 = 0;
          do
          {
            float32x4_t v51 = v5[v50 / 0x10];
            float32x4_t v52 = vminq_f32(vmaxq_f32(v51, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v53 = vmulq_f32(v52, *((float32x4_t *)a2 + 99));
            float32x4_t v54 = vaddq_f32(v53, vmulq_f32(v52, vsubq_f32(v52, v53)));
            v6[v50 / 0x10] = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v51, (int8x16_t)vmulq_f32(vminq_f32(vrsqrteq_f32(v54), *((float32x4_t *)a2 + 73)), v54));
            v50 += 16;
          }
          while (v49 != v50);
          ++v46;
          int v5 = (float32x4_t *)((char *)v5 + v47);
          uint64_t v6 = (int8x16_t *)((char *)v6 + v48);
        }
        while (v46 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      float32x4_t v12 = v5 + 4;
      float32x4_t v13 = v6 + 4;
      do
      {
        unint64_t v14 = 0;
        int8x16_t v15 = v13;
        float32x4_t v16 = v12;
        uint64_t v17 = 2;
        do
        {
          float32x4_t v18 = v16;
          float32x4_t v19 = v5[v17 - 2];
          float32x4_t v20 = v5[v17 - 1];
          float32x4_t v21 = v5[v17];
          float32x4_t v22 = v5[v17 + 1];
          float32x4_t v23 = *((float32x4_t *)a2 + 75);
          float32x4_t v24 = *((float32x4_t *)a2 + 5);
          float32x4_t v25 = vminq_f32(vmaxq_f32(v19, v23), v24);
          float32x4_t v26 = vminq_f32(vmaxq_f32(v20, v23), v24);
          float32x4_t v27 = vminq_f32(vmaxq_f32(v21, v23), v24);
          float32x4_t v28 = vminq_f32(vmaxq_f32(v22, v23), v24);
          float32x4_t v29 = *((float32x4_t *)a2 + 99);
          float32x4_t v30 = vmulq_f32(v25, v29);
          float32x4_t v31 = vmulq_f32(v26, v29);
          float32x4_t v32 = vmulq_f32(v27, v29);
          float32x4_t v33 = vmulq_f32(v28, v29);
          int8x16_t v34 = v15;
          float32x4_t v35 = vaddq_f32(v30, vmulq_f32(v25, vsubq_f32(v25, v30)));
          float32x4_t v36 = vaddq_f32(v31, vmulq_f32(v26, vsubq_f32(v26, v31)));
          float32x4_t v37 = vaddq_f32(v32, vmulq_f32(v27, vsubq_f32(v27, v32)));
          float32x4_t v38 = vaddq_f32(v33, vmulq_f32(v28, vsubq_f32(v28, v33)));
          float32x4_t v39 = *((float32x4_t *)a2 + 73);
          int8x16_t v40 = *((int8x16_t *)a2 + 15);
          float32x4_t v41 = &v6[v17];
          v14 += 4;
          v41[-2] = vbslq_s8(v40, (int8x16_t)v19, (int8x16_t)vmulq_f32(v35, vminq_f32(vrsqrteq_f32(v35), v39)));
          v41[-1] = vbslq_s8(v40, (int8x16_t)v20, (int8x16_t)vmulq_f32(v36, vminq_f32(vrsqrteq_f32(v36), v39)));
          *float32x4_t v41 = vbslq_s8(v40, (int8x16_t)v21, (int8x16_t)vmulq_f32(v37, vminq_f32(vrsqrteq_f32(v37), v39)));
          v41[1] = vbslq_s8(v40, (int8x16_t)v22, (int8x16_t)vmulq_f32(v38, vminq_f32(vrsqrteq_f32(v38), v39)));
          v17 += 4;
          v16 += 4;
          int8x16_t v15 = v34 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            float32x4_t v42 = *v18++;
            float32x4_t v43 = vminq_f32(vmaxq_f32(v42, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v44 = vmulq_f32(v43, *((float32x4_t *)a2 + 99));
            float32x4_t v45 = vaddq_f32(v44, vmulq_f32(v43, vsubq_f32(v43, v44)));
            *v34++ = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v42, (int8x16_t)vmulq_f32(vminq_f32(vrsqrteq_f32(v45), *((float32x4_t *)a2 + 73)), v45));
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        uint64_t v6 = (int8x16_t *)((char *)v6 + v10);
        int v5 = (float32x4_t *)((char *)v5 + v11);
        float32x4_t v12 = (float32x4_t *)((char *)v12 + v11);
        float32x4_t v13 = (int8x16_t *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

uint64_t Getsrgb_fixed_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v76) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *(float32x4_t *)(v7 + v10 + 32);
      float32x4_t v16 = *((float32x4_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v12, v14), v16);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v13, v14), v16);
      float32x4_t v20 = vminq_f32(vmaxq_f32(v15, v14), v16);
      float32x4_t v21 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)v18));
      float32x4_t v22 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)v19));
      float32x4_t v23 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)v20));
      float32x4_t v24 = vcvtq_f32_s32(vcvtq_s32_f32(v21));
      float32x4_t v25 = vcvtq_f32_s32(vcvtq_s32_f32(v22));
      float32x4_t v26 = vcvtq_f32_s32(vcvtq_s32_f32(v23));
      float32x4_t v27 = *((float32x4_t *)a2 + 7);
      float32x4_t v28 = *((float32x4_t *)a2 + 8);
      float32x4_t v29 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v21, v24), v27));
      float32x4_t v30 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v22, v25), v27));
      float32x4_t v31 = vrsqrteq_f32(vaddq_f32(v27, vsubq_f32(v23, v26)));
      float32x4_t v32 = vaddq_f32(v28, v24);
      float32x4_t v33 = vaddq_f32(v28, v25);
      float32x4_t v34 = vaddq_f32(v28, v26);
      float32x4_t v35 = *((float32x4_t *)a2 + 9);
      float32x4_t v36 = *((float32x4_t *)a2 + 10);
      float32x4_t v37 = vsubq_f32(v32, vmulq_f32(v29, v35));
      float32x4_t v38 = *((float32x4_t *)a2 + 100);
      float32x4_t v39 = vmulq_f32(v38, v37);
      float32x4_t v40 = vmulq_f32(v38, vsubq_f32(v33, vmulq_f32(v30, v35)));
      float32x4_t v41 = vmulq_f32(v38, vsubq_f32(v34, vmulq_f32(v31, v35)));
      float32x4_t v42 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
      float32x4_t v43 = vcvtq_f32_s32(vcvtq_s32_f32(v40));
      float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
      float32x4_t v45 = vsubq_f32(v42, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v42, v39)));
      float32x4_t v46 = vsubq_f32(v43, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v43, v40)));
      float32x4_t v47 = vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v44, v41)));
      float32x4_t v48 = *((float32x4_t *)a2 + 11);
      float32x4_t v49 = *((float32x4_t *)a2 + 12);
      float32x4_t v50 = vmulq_f32(vrecpeq_f32(vsubq_f32(v48, vsubq_f32(v39, v45))), v49);
      float32x4_t v51 = vmulq_f32(vrecpeq_f32(vsubq_f32(v48, vsubq_f32(v40, v46))), v49);
      float32x4_t v52 = vmulq_f32(vrecpeq_f32(vsubq_f32(v48, vsubq_f32(v41, v47))), v49);
      float32x4_t v53 = vaddq_f32(vaddq_f32(v36, v47), vmulq_f32(v52, v52));
      float32x4_t v54 = vmaxq_f32(vaddq_f32(vaddq_f32(v36, v45), vmulq_f32(v50, v50)), v14);
      float32x4_t v55 = vmaxq_f32(vaddq_f32(vaddq_f32(v36, v46), vmulq_f32(v51, v51)), v14);
      float32x4_t v56 = *((float32x4_t *)a2 + 13);
      float32x4_t v57 = *((float32x4_t *)a2 + 14);
      float32x4_t v58 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v54, v56), v57));
      float32x4_t v59 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v55, v56), v57));
      float32x4_t v60 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(v53, v14), v56), v57));
      float32x4_t v61 = *((float32x4_t *)a2 + 101);
      float32x4_t v62 = *((float32x4_t *)a2 + 102);
      int8x16_t v63 = (int8x16_t)vaddq_f32(v61, vmulq_f32(v62, v58));
      int8x16_t v64 = (int8x16_t)vaddq_f32(v61, vmulq_f32(v62, v59));
      float32x4_t v65 = vmulq_f32(v62, v60);
      float32x4_t v66 = *((float32x4_t *)a2 + 103);
      int8x16_t v67 = (int8x16_t)vmulq_f32(v18, v66);
      int8x16_t v68 = (int8x16_t)vaddq_f32(v61, v65);
      int8x16_t v69 = (int8x16_t)vmulq_f32(v19, v66);
      float32x4_t v70 = *((float32x4_t *)a2 + 104);
      int8x16_t v71 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v70));
      int8x16_t v72 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v19, v70));
      int8x16_t v73 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v20, v70)), (int8x16_t)vmulq_f32(v20, v66), v68);
      int8x16_t v74 = *((int8x16_t *)a2 + 15);
      float32x4_t v75 = (int8x16_t *)(v6 + v10);
      *float32x4_t v75 = vbslq_s8(v74, (int8x16_t)v12, vbslq_s8(v71, v67, v63));
      v75[1] = vbslq_s8(v74, (int8x16_t)v13, vbslq_s8(v72, v69, v64));
      v75[2] = vbslq_s8(v74, (int8x16_t)v15, v73);
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v76) = -v11;
    if ((int)v76 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v76 = v76;
    do
    {
      float32x4_t v77 = *(float32x4_t *)(v7 + 16 * v76);
      float32x4_t v78 = *((float32x4_t *)a2 + 75);
      float32x4_t v79 = *((float32x4_t *)a2 + 5);
      float32x4_t v80 = vminq_f32(vmaxq_f32(v77, v78), v79);
      float32x4_t v81 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)v80));
      float32x4_t v82 = vcvtq_f32_s32(vcvtq_s32_f32(v81));
      float32x4_t v83 = vmulq_f32(*((float32x4_t *)a2 + 100), vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v82), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v81, v82))), *((float32x4_t *)a2 + 9))));
      float32x4_t v84 = vcvtq_f32_s32(vcvtq_s32_f32(v83));
      float32x4_t v85 = vsubq_f32(v84, (float32x4_t)vandq_s8((int8x16_t)v79, (int8x16_t)vcgtq_f32(v84, v83)));
      float32x4_t v86 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v83, v85))), *((float32x4_t *)a2 + 12));
      *(int8x16_t *)(v6 + 16 * v76++) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v77, vbslq_s8((int8x16_t)vcgtq_f32(v78, vsubq_f32(v80, *((float32x4_t *)a2 + 104))), (int8x16_t)vmulq_f32(v80, *((float32x4_t *)a2 + 103)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 101), vmulq_f32(*((float32x4_t *)a2 + 102), (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v85), vmulq_f32(v86, v86)), v78),
                                                                              *((float32x4_t *)a2 + 13)),
                                                                            *((float32x4_t *)a2 + 14)))))));
    }
    while (v76 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getsrgb_nice_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v91 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v17 = *((float32x4_t *)a2 + 100);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v12, v14), v15);
      int8x16_t v19 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vceqq_f32(v17, v14)), v14);
      float32x4_t v20 = (float32x4_t)vbslq_s8(v19, (int8x16_t)v15, (int8x16_t)v16);
      float32x4_t v21 = (float32x4_t)vbslq_s8(v19, (int8x16_t)v15, (int8x16_t)v18);
      int8x16_t v22 = *((int8x16_t *)a2 + 19);
      float32x4_t v23 = *((float32x4_t *)a2 + 20);
      float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v20), (int8x16_t)v15);
      float32x4_t v25 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v21), (int8x16_t)v15);
      int8x16_t v26 = *((int8x16_t *)a2 + 21);
      float32x4_t v27 = *((float32x4_t *)a2 + 22);
      float32x4_t v28 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v23, v20)));
      float32x4_t v29 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v21, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v23, v21)));
      float32x4_t v30 = *((float32x4_t *)a2 + 23);
      float32x4_t v31 = *((float32x4_t *)a2 + 24);
      float32x4_t v32 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v24, v30));
      float32x4_t v33 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v25, v30));
      float32x4_t v34 = vaddq_f32(vsubq_f32(v28, v27), v32);
      float32x4_t v35 = vmulq_f32(v31, v32);
      float32x4_t v36 = vmulq_f32(vmulq_f32(v31, v33), v25);
      float32x4_t v37 = vaddq_f32(vsubq_f32(v29, v27), v33);
      float32x4_t v38 = vsubq_f32(vsubq_f32(v24, v15), vmulq_f32(v35, v24));
      float32x4_t v39 = vsubq_f32(vsubq_f32(v25, v15), v36);
      float32x4_t v40 = vmulq_f32(v38, v38);
      float32x4_t v41 = vmulq_f32(v39, v39);
      float32x4_t v42 = *((float32x4_t *)a2 + 37);
      float32x4_t v43 = *((float32x4_t *)a2 + 38);
      float32x4_t v44 = *((float32x4_t *)a2 + 39);
      float32x4_t v45 = *((float32x4_t *)a2 + 40);
      float32x4_t v46 = vaddq_f32(v42, vmulq_f32(v43, v38));
      float32x4_t v47 = vaddq_f32(v44, vmulq_f32(v45, v38));
      float32x4_t v48 = vaddq_f32(v44, vmulq_f32(v45, v39));
      float32x4_t v49 = vaddq_f32(v42, vmulq_f32(v43, v39));
      float32x4_t v50 = *((float32x4_t *)a2 + 41);
      float32x4_t v51 = *((float32x4_t *)a2 + 42);
      float32x4_t v52 = vaddq_f32(vaddq_f32(v50, vmulq_f32(v51, v39)), vmulq_f32(v41, vaddq_f32(v49, vmulq_f32(v41, v48))));
      float32x4_t v53 = vmulq_f32(v38, vaddq_f32(vaddq_f32(v50, vmulq_f32(v51, v38)), vmulq_f32(v40, vaddq_f32(v46, vmulq_f32(v40, v47)))));
      float32x4_t v54 = *((float32x4_t *)a2 + 43);
      float32x4_t v55 = *((float32x4_t *)a2 + 44);
      float32x4_t v56 = vmulq_f32(v17, vaddq_f32(v34, vmulq_f32(v38, vaddq_f32(v54, v53))));
      float32x4_t v57 = vmulq_f32(v17, vaddq_f32(v37, vmulq_f32(v39, vaddq_f32(v54, vmulq_f32(v39, v52)))));
      float32x4_t v58 = *((float32x4_t *)a2 + 29);
      float32x4_t v59 = vmaxq_f32(v56, v58);
      float32x4_t v60 = vmaxq_f32(v57, v58);
      float32x4_t v61 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v62 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
      float32x4_t v63 = vsubq_f32(v61, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v61, v59)));
      float32x4_t v64 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v62, v60)));
      float32x4_t v65 = vsubq_f32(v59, v63);
      float32x4_t v66 = vsubq_f32(v60, v64);
      float32x4_t v67 = *((float32x4_t *)a2 + 45);
      float32x4_t v68 = *((float32x4_t *)a2 + 46);
      float32x4_t v69 = vaddq_f32(v55, vmulq_f32(v67, v65));
      float32x4_t v70 = vaddq_f32(v55, vmulq_f32(v67, v66));
      float32x4_t v71 = *((float32x4_t *)a2 + 47);
      float32x4_t v72 = *((float32x4_t *)a2 + 48);
      float32x4_t v73 = vaddq_f32(v15, vmulq_f32(v65, vaddq_f32(v72, vmulq_f32(v65, vaddq_f32(vaddq_f32(v68, vmulq_f32(v65, v71)), vmulq_f32(vmulq_f32(v65, v65), v69))))));
      int32x4_t v74 = *((int32x4_t *)a2 + 33);
      float32x4_t v75 = vaddq_f32(v15, vmulq_f32(v66, vaddq_f32(v72, vmulq_f32(v66, vaddq_f32(vaddq_f32(v68, vmulq_f32(v71, v66)), vmulq_f32(vmulq_f32(v66, v66), v70))))));
      float32x4_t v76 = (float32x4_t)vshlq_n_s32(vaddq_s32(v74, vcvtq_s32_f32(v63)), 0x17uLL);
      float32x4_t v77 = (float32x4_t)vshlq_n_s32(vaddq_s32(v74, vcvtq_s32_f32(v64)), 0x17uLL);
      float32x4_t v78 = vmulq_f32(v73, v76);
      float32x4_t v79 = *((float32x4_t *)a2 + 101);
      float32x4_t v80 = *((float32x4_t *)a2 + 102);
      int8x16_t v81 = (int8x16_t)vaddq_f32(v79, vmulq_f32(v80, v78));
      float32x4_t v82 = vmulq_f32(v80, vmulq_f32(v75, v77));
      float32x4_t v83 = *((float32x4_t *)a2 + 103);
      int8x16_t v84 = (int8x16_t)vmulq_f32(v16, v83);
      int8x16_t v85 = (int8x16_t)vaddq_f32(v79, v82);
      float32x4_t v86 = *((float32x4_t *)a2 + 104);
      int8x16_t v87 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v86));
      int8x16_t v88 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v86)), (int8x16_t)vmulq_f32(v18, v83), v85);
      int8x16_t v89 = *((int8x16_t *)a2 + 15);
      float32x4_t v90 = (int8x16_t *)(v6 + v11);
      v90[-1] = vbslq_s8(v89, (int8x16_t)v13, vbslq_s8(v87, v84, v81));
      *float32x4_t v90 = vbslq_s8(v89, (int8x16_t)v12, v88);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v91 = -v10;
    if (v91 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v92 = 16 * v91;
    float32x4_t v93 = *(float32x4_t *)(v7 + v92);
    float32x4_t v94 = *((float32x4_t *)a2 + 75);
    float32x4_t v95 = *((float32x4_t *)a2 + 5);
    float32x4_t v96 = vminq_f32(vmaxq_f32(v93, v94), v95);
    float32x4_t v97 = *((float32x4_t *)a2 + 100);
    float32x4_t v98 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vceqq_f32(v97, v94)), v94), (int8x16_t)v95, (int8x16_t)v96);
    float32x4_t v99 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v98), (int8x16_t)v95);
    float32x4_t v100 = (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v99, *((float32x4_t *)a2 + 23)));
    float32x4_t v101 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v98, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v98))), *((float32x4_t *)a2 + 22)), v100);
    float32x4_t v102 = vsubq_f32(vsubq_f32(v99, v95), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v100), v99));
    float32x4_t v103 = vmulq_f32(v102, v102);
    float32x4_t v104 = vmaxq_f32(vmulq_f32(v97, vaddq_f32(v101, vmulq_f32(v102, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v102, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v102)), vmulq_f32(v103, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v102)), vmulq_f32(v103, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v102))))))))))),
             *((float32x4_t *)a2 + 29));
    float32x4_t v105 = vcvtq_f32_s32(vcvtq_s32_f32(v104));
    float32x4_t v106 = vsubq_f32(v105, (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v105, v104)));
    float32x4_t v107 = vsubq_f32(v104, v106);
    *(int8x16_t *)(v6 + v92) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v93, vbslq_s8((int8x16_t)vcgtq_f32(v94, vsubq_f32(v96, *((float32x4_t *)a2 + 104))), (int8x16_t)vmulq_f32(v96, *((float32x4_t *)a2 + 103)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 101), vmulq_f32(*((float32x4_t *)a2 + 102), vmulq_f32(vaddq_f32(v95, vmulq_f32(v107, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v107, vaddq_f32(
                                                              vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v107)), vmulq_f32(vmulq_f32(v107, v107), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v107)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v106)), 0x17uLL))))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getsrgb_half_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v76 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v17 = vminq_f32(vmaxq_f32(v12, v14), v15);
      int8x16_t v18 = *((int8x16_t *)a2 + 19);
      float32x4_t v19 = *((float32x4_t *)a2 + 20);
      float32x4_t v20 = (float32x4_t)vorrq_s8(vandq_s8(v18, (int8x16_t)v16), (int8x16_t)v15);
      float32x4_t v21 = (float32x4_t)vorrq_s8(vandq_s8(v18, (int8x16_t)v17), (int8x16_t)v15);
      int8x16_t v22 = (int8x16_t)vcgtq_f32(v19, v16);
      int8x16_t v23 = *((int8x16_t *)a2 + 21);
      float32x4_t v24 = *((float32x4_t *)a2 + 22);
      float32x4_t v25 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v17, 0x17uLL)), (float32x4_t)vandq_s8(v23, (int8x16_t)vcgtq_f32(v19, v17)));
      float32x4_t v26 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v16, 0x17uLL)), (float32x4_t)vandq_s8(v23, v22)), v24);
      float32x4_t v27 = *((float32x4_t *)a2 + 23);
      float32x4_t v28 = *((float32x4_t *)a2 + 24);
      float32x4_t v29 = vsubq_f32(v25, v24);
      float32x4_t v30 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v20, v27));
      float32x4_t v31 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v21, v27));
      float32x4_t v32 = vsubq_f32(vsubq_f32(v20, v15), vmulq_f32(vmulq_f32(v28, v30), v20));
      float32x4_t v33 = vsubq_f32(vsubq_f32(v21, v15), vmulq_f32(vmulq_f32(v28, v31), v21));
      float32x4_t v34 = *((float32x4_t *)a2 + 25);
      float32x4_t v35 = *((float32x4_t *)a2 + 26);
      float32x4_t v36 = vaddq_f32(v34, vmulq_f32(v35, v32));
      float32x4_t v37 = vaddq_f32(v34, vmulq_f32(v35, v33));
      float32x4_t v38 = *((float32x4_t *)a2 + 27);
      float32x4_t v39 = *((float32x4_t *)a2 + 28);
      float32x4_t v40 = vaddq_f32(vaddq_f32(v29, v31), vmulq_f32(v33, vaddq_f32(vaddq_f32(v38, vmulq_f32(v33, v39)), vmulq_f32(vmulq_f32(v33, v33), v37))));
      float32x4_t v41 = *((float32x4_t *)a2 + 100);
      float32x4_t v42 = vmulq_f32(v41, vaddq_f32(vaddq_f32(v26, v30), vmulq_f32(v32, vaddq_f32(vaddq_f32(v38, vmulq_f32(v32, v39)), vmulq_f32(vmulq_f32(v32, v32), v36)))));
      float32x4_t v43 = vmulq_f32(v41, v40);
      float32x4_t v44 = *((float32x4_t *)a2 + 29);
      float32x4_t v45 = *((float32x4_t *)a2 + 30);
      float32x4_t v46 = vmaxq_f32(v42, v44);
      float32x4_t v47 = vmaxq_f32(v43, v44);
      float32x4_t v48 = vcvtq_f32_s32(vcvtq_s32_f32(v46));
      float32x4_t v49 = vcvtq_f32_s32(vcvtq_s32_f32(v47));
      float32x4_t v50 = vsubq_f32(v48, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v48, v46)));
      float32x4_t v51 = vsubq_f32(v49, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v49, v47)));
      float32x4_t v52 = vsubq_f32(v46, v50);
      float32x4_t v53 = *((float32x4_t *)a2 + 31);
      float32x4_t v54 = *((float32x4_t *)a2 + 32);
      float32x4_t v55 = vsubq_f32(v47, v51);
      float32x4_t v56 = vmulq_f32(v55, vaddq_f32(v54, vmulq_f32(v55, vaddq_f32(v45, vmulq_f32(v53, v55)))));
      float32x4_t v57 = vaddq_f32(v15, vmulq_f32(v52, vaddq_f32(v54, vmulq_f32(v52, vaddq_f32(v45, vmulq_f32(v53, v52))))));
      int32x4_t v58 = vcvtq_s32_f32(v51);
      int32x4_t v59 = *((int32x4_t *)a2 + 33);
      float32x4_t v60 = vaddq_f32(v15, v56);
      float32x4_t v61 = (float32x4_t)vshlq_n_s32(vaddq_s32(v59, vcvtq_s32_f32(v50)), 0x17uLL);
      float32x4_t v62 = (float32x4_t)vshlq_n_s32(vaddq_s32(v59, v58), 0x17uLL);
      float32x4_t v63 = vmulq_f32(v57, v61);
      float32x4_t v64 = *((float32x4_t *)a2 + 101);
      float32x4_t v65 = *((float32x4_t *)a2 + 102);
      int8x16_t v66 = (int8x16_t)vaddq_f32(v64, vmulq_f32(v65, v63));
      float32x4_t v67 = vmulq_f32(v65, vmulq_f32(v60, v62));
      float32x4_t v68 = *((float32x4_t *)a2 + 103);
      int8x16_t v69 = (int8x16_t)vmulq_f32(v16, v68);
      int8x16_t v70 = (int8x16_t)vaddq_f32(v64, v67);
      float32x4_t v71 = *((float32x4_t *)a2 + 104);
      int8x16_t v72 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v71));
      int8x16_t v73 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v17, v71)), (int8x16_t)vmulq_f32(v17, v68), v70);
      int8x16_t v74 = *((int8x16_t *)a2 + 15);
      float32x4_t v75 = (int8x16_t *)(v6 + v11);
      v75[-1] = vbslq_s8(v74, (int8x16_t)v13, vbslq_s8(v72, v69, v66));
      *float32x4_t v75 = vbslq_s8(v74, (int8x16_t)v12, v73);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v76 = -v10;
    if (v76 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v77 = 16 * v76;
    float32x4_t v78 = *(float32x4_t *)(v7 + v77);
    float32x4_t v79 = *((float32x4_t *)a2 + 75);
    float32x4_t v80 = *((float32x4_t *)a2 + 5);
    float32x4_t v81 = vminq_f32(vmaxq_f32(v78, v79), v80);
    float32x4_t v82 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v81), (int8x16_t)v80);
    float32x4_t v83 = (float32x4_t)vandq_s8((int8x16_t)v80, (int8x16_t)vcgtq_f32(v82, *((float32x4_t *)a2 + 23)));
    float32x4_t v84 = vsubq_f32(vsubq_f32(v82, v80), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v83), v82));
    float32x4_t v85 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 100), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v81, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v81))), *((float32x4_t *)a2 + 22)), v83), vmulq_f32(v84, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v84, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v84, v84), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v84))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v86 = vcvtq_f32_s32(vcvtq_s32_f32(v85));
    float32x4_t v87 = vsubq_f32(v86, (float32x4_t)vandq_s8((int8x16_t)v80, (int8x16_t)vcgtq_f32(v86, v85)));
    float32x4_t v88 = vsubq_f32(v85, v87);
    *(int8x16_t *)(v6 + v77) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v78, vbslq_s8((int8x16_t)vcgtq_f32(v79, vsubq_f32(v81, *((float32x4_t *)a2 + 104))), (int8x16_t)vmulq_f32(v81, *((float32x4_t *)a2 + 103)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 101), vmulq_f32(*((float32x4_t *)a2 + 102), vmulq_f32(vaddq_f32(v80, vmulq_f32(v88, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v88, vaddq_f32(
                                                              *((float32x4_t *)a2 + 30),
                                                              vmulq_f32(*((float32x4_t *)a2 + 31), v88)))))),
                                                    (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v87)), 0x17uLL))))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getsrgb_half_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v82 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 105);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      int8x16_t v16 = (int8x16_t)vmaxq_f32(v12, v14);
      float32x4_t v17 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmaxq_f32(v13, v14));
      float32x4_t v18 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v12, v16);
      float32x4_t v19 = *((float32x4_t *)a2 + 75);
      float32x4_t v20 = *((float32x4_t *)a2 + 5);
      int32x4_t v22 = *((int32x4_t *)a2 + 33);
      int8x16_t v21 = *((int8x16_t *)a2 + 34);
      float32x4_t v23 = vmulq_f32(v17, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v19, v17), v21, (int8x16_t)v20));
      float32x4_t v24 = vmulq_f32(v18, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v19, v18), v21, (int8x16_t)v20));
      float32x4_t v25 = *((float32x4_t *)a2 + 106);
      float32x4_t v26 = vminq_f32(v23, v25);
      float32x4_t v27 = vminq_f32(v24, v25);
      int8x16_t v28 = *((int8x16_t *)a2 + 19);
      float32x4_t v29 = *((float32x4_t *)a2 + 20);
      float32x4_t v30 = (float32x4_t)vorrq_s8(vandq_s8(v28, (int8x16_t)v26), (int8x16_t)v20);
      int8x16_t v31 = *((int8x16_t *)a2 + 21);
      float32x4_t v32 = *((float32x4_t *)a2 + 22);
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8(v28, (int8x16_t)v27), (int8x16_t)v20);
      float32x4_t v34 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v27, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v29, v27)));
      float32x4_t v35 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v26, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v29, v26))), v32);
      float32x4_t v36 = *((float32x4_t *)a2 + 23);
      float32x4_t v37 = *((float32x4_t *)a2 + 24);
      float32x4_t v38 = (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v30, v36));
      float32x4_t v39 = (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v33, v36));
      float32x4_t v40 = vaddq_f32(v35, v38);
      float32x4_t v41 = vmulq_f32(v37, v38);
      float32x4_t v42 = vmulq_f32(vmulq_f32(v37, v39), v33);
      float32x4_t v43 = vaddq_f32(vsubq_f32(v34, v32), v39);
      float32x4_t v44 = vsubq_f32(vsubq_f32(v30, v20), vmulq_f32(v41, v30));
      float32x4_t v45 = vsubq_f32(vsubq_f32(v33, v20), v42);
      float32x4_t v46 = *((float32x4_t *)a2 + 25);
      float32x4_t v47 = *((float32x4_t *)a2 + 26);
      float32x4_t v48 = *((float32x4_t *)a2 + 27);
      float32x4_t v49 = *((float32x4_t *)a2 + 28);
      float32x4_t v50 = vaddq_f32(v43, vmulq_f32(v45, vaddq_f32(vaddq_f32(v48, vmulq_f32(v45, v49)), vmulq_f32(vmulq_f32(v45, v45), vaddq_f32(v46, vmulq_f32(v47, v45))))));
      float32x4_t v51 = *((float32x4_t *)a2 + 100);
      float32x4_t v52 = vmulq_f32(v51, vaddq_f32(v40, vmulq_f32(v44, vaddq_f32(vaddq_f32(v48, vmulq_f32(v44, v49)), vmulq_f32(vmulq_f32(v44, v44), vaddq_f32(v46, vmulq_f32(v47, v44)))))));
      float32x4_t v53 = vmulq_f32(v51, v50);
      float32x4_t v54 = *((float32x4_t *)a2 + 29);
      float32x4_t v55 = *((float32x4_t *)a2 + 30);
      float32x4_t v56 = vmaxq_f32(v52, v54);
      float32x4_t v57 = vmaxq_f32(v53, v54);
      float32x4_t v58 = vcvtq_f32_s32(vcvtq_s32_f32(v56));
      float32x4_t v59 = vcvtq_f32_s32(vcvtq_s32_f32(v57));
      float32x4_t v60 = vsubq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v58, v56)));
      float32x4_t v61 = vsubq_f32(v59, (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v59, v57)));
      float32x4_t v62 = vsubq_f32(v56, v60);
      float32x4_t v63 = vsubq_f32(v57, v61);
      float32x4_t v64 = *((float32x4_t *)a2 + 31);
      float32x4_t v65 = *((float32x4_t *)a2 + 32);
      float32x4_t v66 = vaddq_f32(v20, vmulq_f32(v62, vaddq_f32(v65, vmulq_f32(v62, vaddq_f32(v55, vmulq_f32(v64, v62))))));
      float32x4_t v67 = vaddq_f32(v20, vmulq_f32(v63, vaddq_f32(v65, vmulq_f32(v63, vaddq_f32(v55, vmulq_f32(v64, v63))))));
      float32x4_t v68 = vmulq_f32(v66, (float32x4_t)vshlq_n_s32(vaddq_s32(v22, vcvtq_s32_f32(v60)), 0x17uLL));
      float32x4_t v69 = vmulq_f32(v67, (float32x4_t)vshlq_n_s32(vaddq_s32(v22, vcvtq_s32_f32(v61)), 0x17uLL));
      float32x4_t v70 = *((float32x4_t *)a2 + 101);
      float32x4_t v71 = *((float32x4_t *)a2 + 102);
      float32x4_t v72 = vmulq_f32(v71, v68);
      float32x4_t v73 = vmulq_f32(v71, v69);
      float32x4_t v74 = *((float32x4_t *)a2 + 103);
      int8x16_t v75 = (int8x16_t)vmulq_f32(v23, v74);
      int8x16_t v76 = (int8x16_t)vmulq_f32(v24, v74);
      float32x4_t v77 = *((float32x4_t *)a2 + 104);
      int8x16_t v78 = (int8x16_t)vcgtq_f32(v19, vsubq_f32(v23, v77));
      int8x16_t v79 = (int8x16_t)vcgtq_f32(v19, vsubq_f32(v24, v77));
      int8x16_t v80 = *((int8x16_t *)a2 + 36);
      float32x4_t v81 = (int8x16_t *)(v6 + v11);
      v81[-1] = vbslq_s8(v15, (int8x16_t)v13, veorq_s8(vandq_s8(v80, (int8x16_t)v17), vbslq_s8(v78, v75, (int8x16_t)vaddq_f32(v70, v72))));
      *float32x4_t v81 = vbslq_s8(v15, (int8x16_t)v12, veorq_s8(vandq_s8(v80, (int8x16_t)v18), vbslq_s8(v79, v76, (int8x16_t)vaddq_f32(v70, v73))));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v82 = -v10;
    if (v82 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v83 = 16 * v82;
    float32x4_t v84 = *(float32x4_t *)(v7 + v83);
    int8x16_t v85 = *((int8x16_t *)a2 + 15);
    float32x4_t v86 = (float32x4_t)vbslq_s8(v85, (int8x16_t)v84, (int8x16_t)vmaxq_f32(v84, *((float32x4_t *)a2 + 105)));
    float32x4_t v87 = *((float32x4_t *)a2 + 75);
    float32x4_t v88 = *((float32x4_t *)a2 + 5);
    float32x4_t v89 = vmulq_f32(v86, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v87, v86), *((int8x16_t *)a2 + 34), (int8x16_t)v88));
    float32x4_t v90 = vminq_f32(v89, *((float32x4_t *)a2 + 106));
    float32x4_t v91 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v90), (int8x16_t)v88);
    float32x4_t v92 = (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v91, *((float32x4_t *)a2 + 23)));
    float32x4_t v93 = vsubq_f32(vsubq_f32(v91, v88), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v92), v91));
    float32x4_t v94 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 100), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v90, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v90))), *((float32x4_t *)a2 + 22)), v92), vmulq_f32(v93, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v93, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v93, v93), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v93))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v95 = vcvtq_f32_s32(vcvtq_s32_f32(v94));
    float32x4_t v96 = vsubq_f32(v95, (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v95, v94)));
    float32x4_t v97 = vsubq_f32(v94, v96);
    *(int8x16_t *)(v6 + v83) = vbslq_s8(v85, (int8x16_t)v84, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v86), vbslq_s8((int8x16_t)vcgtq_f32(v87, vsubq_f32(v89, *((float32x4_t *)a2 + 104))), (int8x16_t)vmulq_f32(v89, *((float32x4_t *)a2 + 103)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 101), vmulq_f32(*((float32x4_t *)a2 + 102), vmulq_f32(vaddq_f32(v88, vmulq_f32(v97, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(
                                                              v97,
                                                              vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v97)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v96)), 0x17uLL)))))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getsrgb_nice_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v93 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 105);
      int8x16_t v15 = (int8x16_t)vmaxq_f32(v13, v14);
      int8x16_t v16 = (int8x16_t)vmaxq_f32(v12, v14);
      int8x16_t v17 = *((int8x16_t *)a2 + 15);
      float32x4_t v18 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v13, v15);
      float32x4_t v19 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v12, v16);
      float32x4_t v20 = *((float32x4_t *)a2 + 75);
      float32x4_t v21 = *((float32x4_t *)a2 + 5);
      int32x4_t v23 = *((int32x4_t *)a2 + 33);
      int8x16_t v22 = *((int8x16_t *)a2 + 34);
      float32x4_t v24 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v20, v19), v22, (int8x16_t)v21);
      float32x4_t v25 = vmulq_f32(v18, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v20, v18), v22, (int8x16_t)v21));
      float32x4_t v26 = vmulq_f32(v19, v24);
      float32x4_t v27 = *((float32x4_t *)a2 + 106);
      float32x4_t v28 = *((float32x4_t *)a2 + 100);
      int8x16_t v29 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vceqq_f32(v28, v20)), v20);
      float32x4_t v30 = (float32x4_t)vbslq_s8(v29, (int8x16_t)v21, (int8x16_t)vminq_f32(v25, v27));
      float32x4_t v31 = (float32x4_t)vbslq_s8(v29, (int8x16_t)v21, (int8x16_t)vminq_f32(v26, v27));
      int8x16_t v32 = *((int8x16_t *)a2 + 19);
      float32x4_t v33 = *((float32x4_t *)a2 + 20);
      float32x4_t v34 = (float32x4_t)vorrq_s8(vandq_s8(v32, (int8x16_t)v30), (int8x16_t)v21);
      float32x4_t v35 = (float32x4_t)vorrq_s8(vandq_s8(v32, (int8x16_t)v31), (int8x16_t)v21);
      int8x16_t v36 = *((int8x16_t *)a2 + 21);
      float32x4_t v37 = *((float32x4_t *)a2 + 22);
      float32x4_t v38 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v31, 0x17uLL)), (float32x4_t)vandq_s8(v36, (int8x16_t)vcgtq_f32(v33, v31)));
      float32x4_t v39 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(v36, (int8x16_t)vcgtq_f32(v33, v30))), v37);
      float32x4_t v40 = *((float32x4_t *)a2 + 23);
      float32x4_t v41 = *((float32x4_t *)a2 + 24);
      float32x4_t v42 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v34, v40));
      float32x4_t v43 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v35, v40));
      float32x4_t v44 = vaddq_f32(v39, v42);
      float32x4_t v45 = vaddq_f32(vsubq_f32(v38, v37), v43);
      float32x4_t v46 = vsubq_f32(vsubq_f32(v34, v21), vmulq_f32(vmulq_f32(v41, v42), v34));
      float32x4_t v47 = vsubq_f32(vsubq_f32(v35, v21), vmulq_f32(vmulq_f32(v41, v43), v35));
      float32x4_t v48 = *((float32x4_t *)a2 + 38);
      float32x4_t v49 = *((float32x4_t *)a2 + 39);
      int8x16_t v51 = *((int8x16_t *)a2 + 36);
      float32x4_t v50 = *((float32x4_t *)a2 + 37);
      float32x4_t v52 = vaddq_f32(v50, vmulq_f32(v48, v46));
      float32x4_t v53 = *((float32x4_t *)a2 + 40);
      float32x4_t v54 = *((float32x4_t *)a2 + 41);
      float32x4_t v55 = vaddq_f32(v49, vmulq_f32(v53, v46));
      float32x4_t v56 = vaddq_f32(v49, vmulq_f32(v53, v47));
      float32x4_t v57 = *((float32x4_t *)a2 + 42);
      float32x4_t v58 = *((float32x4_t *)a2 + 43);
      float32x4_t v59 = vaddq_f32(v50, vmulq_f32(v48, v47));
      float32x4_t v60 = vaddq_f32(v54, vmulq_f32(v57, v46));
      float32x4_t v61 = vaddq_f32(v54, vmulq_f32(v57, v47));
      float32x4_t v62 = vmulq_f32(v46, v46);
      float32x4_t v63 = vaddq_f32(v52, vmulq_f32(v62, v55));
      float32x4_t v64 = vmulq_f32(v47, v47);
      float32x4_t v65 = vaddq_f32(v45, vmulq_f32(v47, vaddq_f32(v58, vmulq_f32(v47, vaddq_f32(v61, vmulq_f32(v64, vaddq_f32(v59, vmulq_f32(v64, v56))))))));
      float32x4_t v66 = *((float32x4_t *)a2 + 29);
      float32x4_t v67 = vmaxq_f32(vmulq_f32(v28, vaddq_f32(v44, vmulq_f32(v46, vaddq_f32(v58, vmulq_f32(v46, vaddq_f32(v60, vmulq_f32(v62, v63))))))), v66);
      float32x4_t v68 = vmaxq_f32(vmulq_f32(v28, v65), v66);
      float32x4_t v69 = vcvtq_f32_s32(vcvtq_s32_f32(v67));
      float32x4_t v70 = vcvtq_f32_s32(vcvtq_s32_f32(v68));
      float32x4_t v71 = vsubq_f32(v69, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v69, v67)));
      float32x4_t v72 = vsubq_f32(v70, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v70, v68)));
      float32x4_t v73 = vsubq_f32(v67, v71);
      float32x4_t v74 = vsubq_f32(v68, v72);
      float32x4_t v75 = *((float32x4_t *)a2 + 44);
      float32x4_t v76 = *((float32x4_t *)a2 + 45);
      float32x4_t v77 = vaddq_f32(v75, vmulq_f32(v76, v73));
      float32x4_t v78 = *((float32x4_t *)a2 + 46);
      float32x4_t v79 = *((float32x4_t *)a2 + 47);
      float32x4_t v80 = vaddq_f32(v75, vmulq_f32(v76, v74));
      float32x4_t v81 = *((float32x4_t *)a2 + 48);
      float32x4_t v82 = vaddq_f32(v21, vmulq_f32(v73, vaddq_f32(v81, vmulq_f32(v73, vaddq_f32(vaddq_f32(v78, vmulq_f32(v73, v79)), vmulq_f32(vmulq_f32(v73, v73), v77))))));
      float32x4_t v83 = vaddq_f32(v21, vmulq_f32(v74, vaddq_f32(v81, vmulq_f32(v74, vaddq_f32(vaddq_f32(v78, vmulq_f32(v79, v74)), vmulq_f32(vmulq_f32(v74, v74), v80))))));
      float32x4_t v84 = vmulq_f32(v82, (float32x4_t)vshlq_n_s32(vaddq_s32(v23, vcvtq_s32_f32(v71)), 0x17uLL));
      float32x4_t v85 = vmulq_f32(v83, (float32x4_t)vshlq_n_s32(vaddq_s32(v23, vcvtq_s32_f32(v72)), 0x17uLL));
      float32x4_t v86 = *((float32x4_t *)a2 + 101);
      float32x4_t v87 = *((float32x4_t *)a2 + 102);
      float32x4_t v88 = vmulq_f32(v87, v85);
      int8x16_t v89 = (int8x16_t)vaddq_f32(v86, vmulq_f32(v87, v84));
      float32x4_t v90 = *((float32x4_t *)a2 + 103);
      float32x4_t v91 = *((float32x4_t *)a2 + 104);
      float32x4_t v92 = (int8x16_t *)(v6 + v11);
      v92[-1] = vbslq_s8(v17, (int8x16_t)v13, veorq_s8(vandq_s8(v51, (int8x16_t)v18), vbslq_s8((int8x16_t)vcgtq_f32(v20, vsubq_f32(v25, v91)), (int8x16_t)vmulq_f32(v25, v90), v89)));
      *float32x4_t v92 = vbslq_s8(v17, (int8x16_t)v12, veorq_s8(vandq_s8(v51, (int8x16_t)v19), vbslq_s8((int8x16_t)vcgtq_f32(v20, vsubq_f32(v26, v91)), (int8x16_t)vmulq_f32(v26, v90), (int8x16_t)vaddq_f32(v86, v88))));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v93 = -v10;
    if (v93 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v94 = 16 * v93;
    float32x4_t v95 = *(float32x4_t *)(v7 + v94);
    int8x16_t v96 = *((int8x16_t *)a2 + 15);
    float32x4_t v97 = (float32x4_t)vbslq_s8(v96, (int8x16_t)v95, (int8x16_t)vmaxq_f32(v95, *((float32x4_t *)a2 + 105)));
    float32x4_t v98 = *((float32x4_t *)a2 + 75);
    float32x4_t v99 = *((float32x4_t *)a2 + 5);
    float32x4_t v100 = vmulq_f32(v97, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v98, v97), *((int8x16_t *)a2 + 34), (int8x16_t)v99));
    float32x4_t v101 = *((float32x4_t *)a2 + 100);
    float32x4_t v102 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v99, (int8x16_t)vceqq_f32(v101, v98)), v98), (int8x16_t)v99, (int8x16_t)vminq_f32(v100, *((float32x4_t *)a2 + 106)));
    float32x4_t v103 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v102), (int8x16_t)v99);
    float32x4_t v104 = (float32x4_t)vandq_s8((int8x16_t)v99, (int8x16_t)vcgtq_f32(v103, *((float32x4_t *)a2 + 23)));
    float32x4_t v105 = vsubq_f32(vsubq_f32(v103, v99), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v104), v103));
    float32x4_t v106 = vmulq_f32(v105, v105);
    float32x4_t v107 = vmaxq_f32(vmulq_f32(v101, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v102, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v102))), *((float32x4_t *)a2 + 22)), v104), vmulq_f32(v105, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v105, vaddq_f32(
                         vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v105)),
                         vmulq_f32(v106, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v105)), vmulq_f32(v106, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v105))))))))))), *((float32x4_t *)a2 + 29));
    float32x4_t v108 = vcvtq_f32_s32(vcvtq_s32_f32(v107));
    float32x4_t v109 = vsubq_f32(v108, (float32x4_t)vandq_s8((int8x16_t)v99, (int8x16_t)vcgtq_f32(v108, v107)));
    float32x4_t v110 = vsubq_f32(v107, v109);
    *(int8x16_t *)(v6 + v94) = vbslq_s8(v96, (int8x16_t)v95, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v97), vbslq_s8((int8x16_t)vcgtq_f32(v98, vsubq_f32(v100, *((float32x4_t *)a2 + 104))), (int8x16_t)vmulq_f32(v100, *((float32x4_t *)a2 + 103)), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 101), vmulq_f32(*((float32x4_t *)a2 + 102), vmulq_f32(vaddq_f32(v99, vmulq_f32(v110, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(
                                                              v110,
                                                              vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v110)), vmulq_f32(vmulq_f32(v110, v110), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v110)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v109)), 0x17uLL)))))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_srgb_fast_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v45 = 0;
        uint64_t v46 = 16 * v8;
        uint64_t v47 = 16 * v7;
        uint64_t v48 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v49 = 0;
          do
          {
            float32x4_t v50 = v5[v49 / 0x10];
            float32x4_t v51 = vminq_f32(vmaxq_f32(v50, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v52 = vmulq_f32(v51, *((float32x4_t *)a2 + 107));
            float32x4_t v53 = vaddq_f32(v52, vmulq_f32(v51, vsubq_f32(v51, v52)));
            v6[v49 / 0x10] = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v50, (int8x16_t)vmulq_f32(v53, v53));
            v49 += 16;
          }
          while (v48 != v49);
          ++v45;
          int v5 = (float32x4_t *)((char *)v5 + v46);
          uint64_t v6 = (int8x16_t *)((char *)v6 + v47);
        }
        while (v45 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      float32x4_t v12 = v5 + 4;
      float32x4_t v13 = v6 + 4;
      do
      {
        unint64_t v14 = 0;
        int8x16_t v15 = v13;
        int8x16_t v16 = v12;
        uint64_t v17 = 2;
        do
        {
          float32x4_t v18 = v16;
          float32x4_t v19 = v15;
          float32x4_t v20 = v5[v17 - 2];
          float32x4_t v21 = v5[v17 - 1];
          float32x4_t v22 = v5[v17];
          float32x4_t v23 = v5[v17 + 1];
          float32x4_t v24 = *((float32x4_t *)a2 + 75);
          float32x4_t v25 = *((float32x4_t *)a2 + 5);
          float32x4_t v26 = vminq_f32(vmaxq_f32(v20, v24), v25);
          float32x4_t v27 = vminq_f32(vmaxq_f32(v21, v24), v25);
          float32x4_t v28 = vminq_f32(vmaxq_f32(v22, v24), v25);
          float32x4_t v29 = vminq_f32(vmaxq_f32(v23, v24), v25);
          float32x4_t v30 = *((float32x4_t *)a2 + 107);
          float32x4_t v31 = vmulq_f32(v26, v30);
          float32x4_t v32 = vmulq_f32(v27, v30);
          float32x4_t v33 = vmulq_f32(v28, v30);
          float32x4_t v34 = vmulq_f32(v29, v30);
          float32x4_t v35 = vaddq_f32(v31, vmulq_f32(v26, vsubq_f32(v26, v31)));
          float32x4_t v36 = vaddq_f32(v32, vmulq_f32(v27, vsubq_f32(v27, v32)));
          float32x4_t v37 = vaddq_f32(v33, vmulq_f32(v28, vsubq_f32(v28, v33)));
          float32x4_t v38 = vaddq_f32(v34, vmulq_f32(v29, vsubq_f32(v29, v34)));
          int8x16_t v39 = *((int8x16_t *)a2 + 15);
          float32x4_t v40 = &v6[v17];
          v40[-2] = vbslq_s8(v39, (int8x16_t)v20, (int8x16_t)vmulq_f32(v35, v35));
          v40[-1] = vbslq_s8(v39, (int8x16_t)v21, (int8x16_t)vmulq_f32(v36, v36));
          v14 += 4;
          *float32x4_t v40 = vbslq_s8(v39, (int8x16_t)v22, (int8x16_t)vmulq_f32(v37, v37));
          v40[1] = vbslq_s8(v39, (int8x16_t)v23, (int8x16_t)vmulq_f32(v38, v38));
          v17 += 4;
          v16 += 4;
          int8x16_t v15 = v19 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            float32x4_t v41 = *v18++;
            float32x4_t v42 = vminq_f32(vmaxq_f32(v41, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            float32x4_t v43 = vmulq_f32(v42, *((float32x4_t *)a2 + 107));
            float32x4_t v44 = vaddq_f32(v43, vmulq_f32(v42, vsubq_f32(v42, v43)));
            *v19++ = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v41, (int8x16_t)vmulq_f32(v44, v44));
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        uint64_t v6 = (int8x16_t *)((char *)v6 + v10);
        int v5 = (float32x4_t *)((char *)v5 + v11);
        float32x4_t v12 = (float32x4_t *)((char *)v12 + v11);
        float32x4_t v13 = (int8x16_t *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

uint64_t Getinv_srgb_fixed_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 3)
    {
      LODWORD(v75) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v6 += v8;
      v7 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v10);
      float32x4_t v13 = *(float32x4_t *)(v7 + v10 + 16);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *(float32x4_t *)(v7 + v10 + 32);
      float32x4_t v16 = *((float32x4_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vminq_f32(vmaxq_f32(v12, v14), v16);
      float32x4_t v19 = vminq_f32(vmaxq_f32(v13, v14), v16);
      float32x4_t v20 = vminq_f32(vmaxq_f32(v15, v14), v16);
      float32x4_t v21 = *((float32x4_t *)a2 + 108);
      float32x4_t v22 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v18, v21)));
      float32x4_t v23 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v19, v21)));
      float32x4_t v24 = vmulq_f32(v17, vcvtq_f32_s32((int32x4_t)vaddq_f32(v20, v21)));
      float32x4_t v25 = vcvtq_f32_s32(vcvtq_s32_f32(v22));
      float32x4_t v26 = vcvtq_f32_s32(vcvtq_s32_f32(v23));
      float32x4_t v27 = vcvtq_f32_s32(vcvtq_s32_f32(v24));
      float32x4_t v28 = *((float32x4_t *)a2 + 7);
      float32x4_t v29 = *((float32x4_t *)a2 + 8);
      float32x4_t v30 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v22, v25), v28));
      float32x4_t v31 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v23, v26), v28));
      float32x4_t v32 = vaddq_f32(v29, v25);
      float32x4_t v33 = vrsqrteq_f32(vaddq_f32(v28, vsubq_f32(v24, v27)));
      float32x4_t v34 = vaddq_f32(v29, v26);
      float32x4_t v35 = vaddq_f32(v29, v27);
      float32x4_t v36 = *((float32x4_t *)a2 + 9);
      float32x4_t v37 = *((float32x4_t *)a2 + 10);
      float32x4_t v38 = vsubq_f32(v32, vmulq_f32(v30, v36));
      float32x4_t v39 = vsubq_f32(v34, vmulq_f32(v31, v36));
      float32x4_t v40 = *((float32x4_t *)a2 + 109);
      float32x4_t v41 = vmulq_f32(v40, v38);
      float32x4_t v42 = vmulq_f32(v40, v39);
      float32x4_t v43 = vmulq_f32(v40, vsubq_f32(v35, vmulq_f32(v33, v36)));
      float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
      float32x4_t v45 = vcvtq_f32_s32(vcvtq_s32_f32(v42));
      float32x4_t v46 = vcvtq_f32_s32(vcvtq_s32_f32(v43));
      float32x4_t v47 = vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v44, v41)));
      float32x4_t v48 = vsubq_f32(v45, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v45, v42)));
      float32x4_t v49 = vsubq_f32(v46, (float32x4_t)vandq_s8((int8x16_t)v16, (int8x16_t)vcgtq_f32(v46, v43)));
      float32x4_t v50 = *((float32x4_t *)a2 + 11);
      float32x4_t v51 = *((float32x4_t *)a2 + 12);
      float32x4_t v52 = vmulq_f32(vrecpeq_f32(vsubq_f32(v50, vsubq_f32(v41, v47))), v51);
      float32x4_t v53 = vmulq_f32(vrecpeq_f32(vsubq_f32(v50, vsubq_f32(v42, v48))), v51);
      float32x4_t v54 = vmulq_f32(vrecpeq_f32(vsubq_f32(v50, vsubq_f32(v43, v49))), v51);
      float32x4_t v55 = vaddq_f32(vaddq_f32(v37, v49), vmulq_f32(v54, v54));
      float32x4_t v56 = vmaxq_f32(vaddq_f32(vaddq_f32(v37, v47), vmulq_f32(v52, v52)), v14);
      float32x4_t v57 = vmaxq_f32(vaddq_f32(vaddq_f32(v37, v48), vmulq_f32(v53, v53)), v14);
      float32x4_t v58 = *((float32x4_t *)a2 + 13);
      float32x4_t v59 = *((float32x4_t *)a2 + 14);
      float32x4_t v60 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v56, v58), v59));
      float32x4_t v61 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(v57, v58), v59));
      float32x4_t v62 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(v55, v14), v58), v59));
      float32x4_t v63 = *((float32x4_t *)a2 + 110);
      float32x4_t v64 = *((float32x4_t *)a2 + 111);
      int8x16_t v65 = (int8x16_t)vmulq_f32(v18, v64);
      int8x16_t v66 = (int8x16_t)vmulq_f32(v19, v64);
      int8x16_t v67 = (int8x16_t)vmulq_f32(v20, v64);
      float32x4_t v68 = *((float32x4_t *)a2 + 112);
      int8x16_t v69 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v18, v68));
      int8x16_t v70 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v19, v68));
      int8x16_t v71 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v20, v68));
      int8x16_t v72 = vbslq_s8(v69, v65, (int8x16_t)vmulq_f32(v63, v60));
      int8x16_t v73 = *((int8x16_t *)a2 + 15);
      float32x4_t v74 = (int8x16_t *)(v6 + v10);
      *float32x4_t v74 = vbslq_s8(v73, (int8x16_t)v12, v72);
      v74[1] = vbslq_s8(v73, (int8x16_t)v13, vbslq_s8(v70, v66, (int8x16_t)vmulq_f32(v63, v61)));
      v74[2] = vbslq_s8(v73, (int8x16_t)v15, vbslq_s8(v71, v67, (int8x16_t)vmulq_f32(v63, v62)));
      v11 -= 3;
      v10 += 48;
    }
    while (v5 + v11 > 2);
    LODWORD(v75) = -v11;
    if ((int)v75 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v75 = v75;
    do
    {
      float32x4_t v76 = *(float32x4_t *)(v7 + 16 * v75);
      float32x4_t v77 = *((float32x4_t *)a2 + 75);
      float32x4_t v78 = *((float32x4_t *)a2 + 5);
      float32x4_t v79 = vminq_f32(vmaxq_f32(v76, v77), v78);
      float32x4_t v80 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vaddq_f32(v79, *((float32x4_t *)a2 + 108))));
      float32x4_t v81 = vcvtq_f32_s32(vcvtq_s32_f32(v80));
      float32x4_t v82 = vmulq_f32(*((float32x4_t *)a2 + 109), vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v81), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v80, v81))), *((float32x4_t *)a2 + 9))));
      float32x4_t v83 = vcvtq_f32_s32(vcvtq_s32_f32(v82));
      float32x4_t v84 = vsubq_f32(v83, (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v83, v82)));
      float32x4_t v85 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v82, v84))), *((float32x4_t *)a2 + 12));
      *(int8x16_t *)(v6 + 16 * v75++) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v76, vbslq_s8((int8x16_t)vcgtq_f32(v77, vsubq_f32(v79, *((float32x4_t *)a2 + 112))), (int8x16_t)vmulq_f32(v79, *((float32x4_t *)a2 + 111)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 110), (float32x4_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v84), vmulq_f32(v85, v85)), v77), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))))));
    }
    while (v75 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_srgb_nice_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v84 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v17 = vminq_f32(vmaxq_f32(v12, v14), v15);
      float32x4_t v18 = *((float32x4_t *)a2 + 108);
      int8x16_t v19 = (int8x16_t)vaddq_f32(v16, v18);
      int8x16_t v20 = (int8x16_t)vaddq_f32(v17, v18);
      float32x4_t v21 = *((float32x4_t *)a2 + 109);
      int8x16_t v22 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vceqq_f32(v21, v14)), v14);
      float32x4_t v23 = (float32x4_t)vbslq_s8(v22, (int8x16_t)v15, v19);
      float32x4_t v24 = (float32x4_t)vbslq_s8(v22, (int8x16_t)v15, v20);
      int8x16_t v25 = *((int8x16_t *)a2 + 19);
      float32x4_t v26 = *((float32x4_t *)a2 + 20);
      float32x4_t v27 = (float32x4_t)vorrq_s8(vandq_s8(v25, (int8x16_t)v23), (int8x16_t)v15);
      float32x4_t v28 = (float32x4_t)vorrq_s8(vandq_s8(v25, (int8x16_t)v24), (int8x16_t)v15);
      int8x16_t v29 = *((int8x16_t *)a2 + 21);
      float32x4_t v30 = *((float32x4_t *)a2 + 22);
      float32x4_t v31 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v24, 0x17uLL)), (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v26, v24)));
      float32x4_t v32 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v23, 0x17uLL)), (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v26, v23))), v30);
      float32x4_t v33 = *((float32x4_t *)a2 + 23);
      float32x4_t v34 = *((float32x4_t *)a2 + 24);
      float32x4_t v35 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v27, v33));
      float32x4_t v36 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v28, v33));
      float32x4_t v37 = vaddq_f32(v32, v35);
      float32x4_t v38 = vaddq_f32(vsubq_f32(v31, v30), v36);
      float32x4_t v39 = vsubq_f32(vsubq_f32(v27, v15), vmulq_f32(vmulq_f32(v34, v35), v27));
      float32x4_t v40 = vsubq_f32(vsubq_f32(v28, v15), vmulq_f32(vmulq_f32(v34, v36), v28));
      float32x4_t v41 = vmulq_f32(v39, v39);
      float32x4_t v42 = vmulq_f32(v40, v40);
      float32x4_t v43 = *((float32x4_t *)a2 + 37);
      float32x4_t v44 = *((float32x4_t *)a2 + 38);
      float32x4_t v45 = vaddq_f32(v43, vmulq_f32(v44, v39));
      float32x4_t v46 = *((float32x4_t *)a2 + 39);
      float32x4_t v47 = *((float32x4_t *)a2 + 40);
      float32x4_t v48 = vaddq_f32(v43, vmulq_f32(v44, v40));
      float32x4_t v49 = vaddq_f32(v46, vmulq_f32(v47, v39));
      float32x4_t v50 = vaddq_f32(v46, vmulq_f32(v47, v40));
      float32x4_t v51 = *((float32x4_t *)a2 + 41);
      float32x4_t v52 = *((float32x4_t *)a2 + 42);
      float32x4_t v53 = vaddq_f32(vaddq_f32(v51, vmulq_f32(v52, v40)), vmulq_f32(v42, vaddq_f32(v48, vmulq_f32(v42, v50))));
      float32x4_t v54 = vmulq_f32(v39, vaddq_f32(vaddq_f32(v51, vmulq_f32(v52, v39)), vmulq_f32(v41, vaddq_f32(v45, vmulq_f32(v41, v49)))));
      float32x4_t v55 = *((float32x4_t *)a2 + 43);
      float32x4_t v56 = *((float32x4_t *)a2 + 44);
      float32x4_t v57 = vaddq_f32(v38, vmulq_f32(v40, vaddq_f32(v55, vmulq_f32(v40, v53))));
      float32x4_t v58 = *((float32x4_t *)a2 + 29);
      float32x4_t v59 = vmaxq_f32(vmulq_f32(v21, vaddq_f32(v37, vmulq_f32(v39, vaddq_f32(v55, v54)))), v58);
      float32x4_t v60 = vmaxq_f32(vmulq_f32(v21, v57), v58);
      float32x4_t v61 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v62 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
      float32x4_t v63 = vsubq_f32(v61, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v61, v59)));
      float32x4_t v64 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v62, v60)));
      float32x4_t v65 = vsubq_f32(v59, v63);
      float32x4_t v66 = vsubq_f32(v60, v64);
      float32x4_t v67 = *((float32x4_t *)a2 + 45);
      float32x4_t v68 = *((float32x4_t *)a2 + 46);
      float32x4_t v69 = *((float32x4_t *)a2 + 47);
      float32x4_t v70 = *((float32x4_t *)a2 + 48);
      float32x4_t v71 = vaddq_f32(v15, vmulq_f32(v65, vaddq_f32(v70, vmulq_f32(v65, vaddq_f32(vaddq_f32(v68, vmulq_f32(v65, v69)), vmulq_f32(vmulq_f32(v65, v65), vaddq_f32(v56, vmulq_f32(v67, v65))))))));
      float32x4_t v72 = vaddq_f32(v15, vmulq_f32(v66, vaddq_f32(v70, vmulq_f32(v66, vaddq_f32(vaddq_f32(v68, vmulq_f32(v69, v66)), vmulq_f32(vmulq_f32(v66, v66), vaddq_f32(v56, vmulq_f32(v67, v66))))))));
      int32x4_t v73 = *((int32x4_t *)a2 + 33);
      float32x4_t v74 = vmulq_f32(v71, (float32x4_t)vshlq_n_s32(vaddq_s32(v73, vcvtq_s32_f32(v63)), 0x17uLL));
      float32x4_t v75 = vmulq_f32(v72, (float32x4_t)vshlq_n_s32(vaddq_s32(v73, vcvtq_s32_f32(v64)), 0x17uLL));
      float32x4_t v76 = *((float32x4_t *)a2 + 110);
      float32x4_t v77 = *((float32x4_t *)a2 + 111);
      int8x16_t v78 = (int8x16_t)vmulq_f32(v16, v77);
      float32x4_t v79 = *((float32x4_t *)a2 + 112);
      int8x16_t v80 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v79));
      int8x16_t v81 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v17, v79)), (int8x16_t)vmulq_f32(v17, v77), (int8x16_t)vmulq_f32(v76, v75));
      int8x16_t v82 = *((int8x16_t *)a2 + 15);
      float32x4_t v83 = (int8x16_t *)(v6 + v11);
      v83[-1] = vbslq_s8(v82, (int8x16_t)v13, vbslq_s8(v80, v78, (int8x16_t)vmulq_f32(v76, v74)));
      *float32x4_t v83 = vbslq_s8(v82, (int8x16_t)v12, v81);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v84 = -v10;
    if (v84 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v85 = 16 * v84;
    float32x4_t v86 = *(float32x4_t *)(v7 + v85);
    float32x4_t v87 = *((float32x4_t *)a2 + 75);
    float32x4_t v88 = *((float32x4_t *)a2 + 5);
    float32x4_t v89 = vminq_f32(vmaxq_f32(v86, v87), v88);
    float32x4_t v90 = *((float32x4_t *)a2 + 109);
    float32x4_t v91 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vceqq_f32(v90, v87)), v87), (int8x16_t)v88, (int8x16_t)vaddq_f32(v89, *((float32x4_t *)a2 + 108)));
    float32x4_t v92 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v91), (int8x16_t)v88);
    float32x4_t v93 = (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v92, *((float32x4_t *)a2 + 23)));
    float32x4_t v94 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v91, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v91))), *((float32x4_t *)a2 + 22)), v93);
    float32x4_t v95 = vsubq_f32(vsubq_f32(v92, v88), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v93), v92));
    float32x4_t v96 = vmulq_f32(v95, v95);
    float32x4_t v97 = vmaxq_f32(vmulq_f32(v90, vaddq_f32(v94, vmulq_f32(v95, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v95, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v95)), vmulq_f32(v96, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v95)), vmulq_f32(v96, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v95))))))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v98 = vcvtq_f32_s32(vcvtq_s32_f32(v97));
    float32x4_t v99 = vsubq_f32(v98, (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v98, v97)));
    float32x4_t v100 = vsubq_f32(v97, v99);
    *(int8x16_t *)(v6 + v85) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v86, vbslq_s8((int8x16_t)vcgtq_f32(v87, vsubq_f32(v89, *((float32x4_t *)a2 + 112))), (int8x16_t)vmulq_f32(v89, *((float32x4_t *)a2 + 111)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 110), vmulq_f32(vaddq_f32(v88, vmulq_f32(v100, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v100, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46),
                                                              vmulq_f32(*((float32x4_t *)a2 + 47), v100)),
                                                            vmulq_f32(vmulq_f32(v100, v100), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v100)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v99)), 0x17uLL)))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_srgb_half_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v74 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      float32x4_t v16 = vminq_f32(vmaxq_f32(v13, v14), v15);
      float32x4_t v17 = vminq_f32(vmaxq_f32(v12, v14), v15);
      float32x4_t v18 = *((float32x4_t *)a2 + 108);
      float32x4_t v19 = vaddq_f32(v16, v18);
      float32x4_t v20 = vaddq_f32(v17, v18);
      int8x16_t v21 = *((int8x16_t *)a2 + 19);
      float32x4_t v22 = *((float32x4_t *)a2 + 20);
      float32x4_t v23 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v19), (int8x16_t)v15);
      int8x16_t v24 = *((int8x16_t *)a2 + 21);
      float32x4_t v25 = *((float32x4_t *)a2 + 22);
      float32x4_t v26 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v20), (int8x16_t)v15);
      float32x4_t v27 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v22, v20)));
      float32x4_t v28 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v19, 0x17uLL)), (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v22, v19))), v25);
      float32x4_t v29 = *((float32x4_t *)a2 + 23);
      float32x4_t v30 = *((float32x4_t *)a2 + 24);
      float32x4_t v31 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v23, v29));
      float32x4_t v32 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v26, v29));
      float32x4_t v33 = vaddq_f32(v28, v31);
      float32x4_t v34 = vmulq_f32(v30, v31);
      float32x4_t v35 = vmulq_f32(vmulq_f32(v30, v32), v26);
      float32x4_t v36 = vaddq_f32(vsubq_f32(v27, v25), v32);
      float32x4_t v37 = vsubq_f32(vsubq_f32(v23, v15), vmulq_f32(v34, v23));
      float32x4_t v38 = vsubq_f32(vsubq_f32(v26, v15), v35);
      float32x4_t v39 = *((float32x4_t *)a2 + 25);
      float32x4_t v40 = *((float32x4_t *)a2 + 26);
      float32x4_t v41 = vaddq_f32(v39, vmulq_f32(v40, v37));
      float32x4_t v42 = vaddq_f32(v39, vmulq_f32(v40, v38));
      float32x4_t v44 = *((float32x4_t *)a2 + 27);
      float32x4_t v43 = *((float32x4_t *)a2 + 28);
      float32x4_t v45 = vaddq_f32(v36, vmulq_f32(v38, vaddq_f32(vaddq_f32(v44, vmulq_f32(v38, v43)), vmulq_f32(vmulq_f32(v38, v38), v42))));
      float32x4_t v46 = *((float32x4_t *)a2 + 109);
      float32x4_t v47 = vmulq_f32(v46, vaddq_f32(v33, vmulq_f32(v37, vaddq_f32(vaddq_f32(v44, vmulq_f32(v37, v43)), vmulq_f32(vmulq_f32(v37, v37), v41)))));
      float32x4_t v48 = vmulq_f32(v46, v45);
      float32x4_t v49 = *((float32x4_t *)a2 + 29);
      float32x4_t v50 = *((float32x4_t *)a2 + 30);
      float32x4_t v51 = vmaxq_f32(v47, v49);
      float32x4_t v52 = vmaxq_f32(v48, v49);
      float32x4_t v53 = vcvtq_f32_s32(vcvtq_s32_f32(v51));
      float32x4_t v54 = vcvtq_f32_s32(vcvtq_s32_f32(v52));
      float32x4_t v55 = vsubq_f32(v53, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v53, v51)));
      float32x4_t v56 = vsubq_f32(v54, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v54, v52)));
      float32x4_t v57 = vsubq_f32(v51, v55);
      float32x4_t v58 = vsubq_f32(v52, v56);
      float32x4_t v59 = *((float32x4_t *)a2 + 31);
      float32x4_t v60 = *((float32x4_t *)a2 + 32);
      float32x4_t v61 = vaddq_f32(v15, vmulq_f32(v57, vaddq_f32(v60, vmulq_f32(v57, vaddq_f32(v50, vmulq_f32(v59, v57))))));
      float32x4_t v62 = vaddq_f32(v15, vmulq_f32(v58, vaddq_f32(v60, vmulq_f32(v58, vaddq_f32(v50, vmulq_f32(v59, v58))))));
      int32x4_t v63 = *((int32x4_t *)a2 + 33);
      float32x4_t v64 = vmulq_f32(v61, (float32x4_t)vshlq_n_s32(vaddq_s32(v63, vcvtq_s32_f32(v55)), 0x17uLL));
      float32x4_t v65 = vmulq_f32(v62, (float32x4_t)vshlq_n_s32(vaddq_s32(v63, vcvtq_s32_f32(v56)), 0x17uLL));
      float32x4_t v66 = *((float32x4_t *)a2 + 110);
      float32x4_t v67 = *((float32x4_t *)a2 + 111);
      int8x16_t v68 = (int8x16_t)vmulq_f32(v16, v67);
      float32x4_t v69 = *((float32x4_t *)a2 + 112);
      int8x16_t v70 = (int8x16_t)vcgtq_f32(v14, vsubq_f32(v16, v69));
      int8x16_t v71 = vbslq_s8((int8x16_t)vcgtq_f32(v14, vsubq_f32(v17, v69)), (int8x16_t)vmulq_f32(v17, v67), (int8x16_t)vmulq_f32(v66, v65));
      int8x16_t v72 = *((int8x16_t *)a2 + 15);
      int32x4_t v73 = (int8x16_t *)(v6 + v11);
      v73[-1] = vbslq_s8(v72, (int8x16_t)v13, vbslq_s8(v70, v68, (int8x16_t)vmulq_f32(v66, v64)));
      *int32x4_t v73 = vbslq_s8(v72, (int8x16_t)v12, v71);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v74 = -v10;
    if (v74 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v75 = 16 * v74;
    float32x4_t v76 = *(float32x4_t *)(v7 + v75);
    float32x4_t v77 = *((float32x4_t *)a2 + 75);
    float32x4_t v78 = *((float32x4_t *)a2 + 5);
    float32x4_t v79 = vminq_f32(vmaxq_f32(v76, v77), v78);
    float32x4_t v80 = vaddq_f32(v79, *((float32x4_t *)a2 + 108));
    float32x4_t v81 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v80), (int8x16_t)v78);
    float32x4_t v82 = (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v81, *((float32x4_t *)a2 + 23)));
    float32x4_t v83 = vsubq_f32(vsubq_f32(v81, v78), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v82), v81));
    float32x4_t v84 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 109), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v80, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v80))), *((float32x4_t *)a2 + 22)), v82), vmulq_f32(v83, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v83, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v83, v83), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v83))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v85 = vcvtq_f32_s32(vcvtq_s32_f32(v84));
    float32x4_t v86 = vsubq_f32(v85, (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v85, v84)));
    float32x4_t v87 = vsubq_f32(v84, v86);
    *(int8x16_t *)(v6 + v75) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v76, vbslq_s8((int8x16_t)vcgtq_f32(v77, vsubq_f32(v79, *((float32x4_t *)a2 + 112))), (int8x16_t)vmulq_f32(v79, *((float32x4_t *)a2 + 111)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 110), vmulq_f32(vaddq_f32(v78, vmulq_f32(v87, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v87, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v87)))))),
                                                  (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v86)), 0x17uLL)))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_srgb_half_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v81 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 113);
      int8x16_t v15 = *((int8x16_t *)a2 + 15);
      int8x16_t v16 = (int8x16_t)vmaxq_f32(v12, v14);
      float32x4_t v17 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)vmaxq_f32(v13, v14));
      float32x4_t v18 = (float32x4_t)vbslq_s8(v15, (int8x16_t)v12, v16);
      float32x4_t v19 = *((float32x4_t *)a2 + 75);
      float32x4_t v20 = *((float32x4_t *)a2 + 5);
      int32x4_t v22 = *((int32x4_t *)a2 + 33);
      int8x16_t v21 = *((int8x16_t *)a2 + 34);
      float32x4_t v23 = vmulq_f32(v17, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v19, v17), v21, (int8x16_t)v20));
      float32x4_t v24 = vmulq_f32(v18, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v19, v18), v21, (int8x16_t)v20));
      float32x4_t v25 = *((float32x4_t *)a2 + 114);
      float32x4_t v26 = *((float32x4_t *)a2 + 108);
      float32x4_t v27 = vaddq_f32(vminq_f32(v23, v25), v26);
      float32x4_t v28 = vaddq_f32(vminq_f32(v24, v25), v26);
      int8x16_t v29 = *((int8x16_t *)a2 + 19);
      float32x4_t v30 = *((float32x4_t *)a2 + 20);
      float32x4_t v31 = (float32x4_t)vorrq_s8(vandq_s8(v29, (int8x16_t)v27), (int8x16_t)v20);
      float32x4_t v32 = (float32x4_t)vorrq_s8(vandq_s8(v29, (int8x16_t)v28), (int8x16_t)v20);
      int8x16_t v33 = *((int8x16_t *)a2 + 21);
      float32x4_t v34 = *((float32x4_t *)a2 + 22);
      float32x4_t v35 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v28, 0x17uLL)), (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v30, v28)));
      float32x4_t v36 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v27, 0x17uLL)), (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v30, v27))), v34);
      float32x4_t v37 = *((float32x4_t *)a2 + 23);
      float32x4_t v38 = *((float32x4_t *)a2 + 24);
      float32x4_t v39 = vsubq_f32(v35, v34);
      float32x4_t v40 = (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v31, v37));
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v32, v37));
      float32x4_t v42 = vaddq_f32(v36, v40);
      float32x4_t v43 = vsubq_f32(vsubq_f32(v31, v20), vmulq_f32(vmulq_f32(v38, v40), v31));
      float32x4_t v44 = vsubq_f32(vsubq_f32(v32, v20), vmulq_f32(vmulq_f32(v38, v41), v32));
      float32x4_t v45 = *((float32x4_t *)a2 + 25);
      float32x4_t v46 = *((float32x4_t *)a2 + 26);
      float32x4_t v47 = vaddq_f32(v45, vmulq_f32(v46, v43));
      float32x4_t v48 = vaddq_f32(v45, vmulq_f32(v46, v44));
      float32x4_t v49 = *((float32x4_t *)a2 + 27);
      float32x4_t v50 = *((float32x4_t *)a2 + 28);
      float32x4_t v51 = vaddq_f32(vaddq_f32(v39, v41), vmulq_f32(v44, vaddq_f32(vaddq_f32(v49, vmulq_f32(v44, v50)), vmulq_f32(vmulq_f32(v44, v44), v48))));
      float32x4_t v52 = *((float32x4_t *)a2 + 109);
      float32x4_t v53 = vmulq_f32(v52, vaddq_f32(v42, vmulq_f32(v43, vaddq_f32(vaddq_f32(v49, vmulq_f32(v43, v50)), vmulq_f32(vmulq_f32(v43, v43), v47)))));
      float32x4_t v54 = vmulq_f32(v52, v51);
      float32x4_t v55 = *((float32x4_t *)a2 + 29);
      float32x4_t v56 = *((float32x4_t *)a2 + 30);
      float32x4_t v57 = vmaxq_f32(v53, v55);
      float32x4_t v58 = vmaxq_f32(v54, v55);
      float32x4_t v59 = vcvtq_f32_s32(vcvtq_s32_f32(v57));
      float32x4_t v60 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v61 = vsubq_f32(v59, (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v59, v57)));
      float32x4_t v62 = vsubq_f32(v60, (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v60, v58)));
      float32x4_t v63 = vsubq_f32(v57, v61);
      float32x4_t v64 = *((float32x4_t *)a2 + 31);
      float32x4_t v65 = *((float32x4_t *)a2 + 32);
      float32x4_t v66 = vsubq_f32(v58, v62);
      float32x4_t v67 = vaddq_f32(v20, vmulq_f32(v63, vaddq_f32(v65, vmulq_f32(v63, vaddq_f32(v56, vmulq_f32(v64, v63))))));
      float32x4_t v68 = vaddq_f32(v20, vmulq_f32(v66, vaddq_f32(v65, vmulq_f32(v66, vaddq_f32(v56, vmulq_f32(v64, v66))))));
      float32x4_t v69 = (float32x4_t)vshlq_n_s32(vaddq_s32(v22, vcvtq_s32_f32(v62)), 0x17uLL);
      float32x4_t v70 = vmulq_f32(v67, (float32x4_t)vshlq_n_s32(vaddq_s32(v22, vcvtq_s32_f32(v61)), 0x17uLL));
      float32x4_t v71 = vmulq_f32(v68, v69);
      float32x4_t v72 = *((float32x4_t *)a2 + 110);
      float32x4_t v73 = *((float32x4_t *)a2 + 111);
      int8x16_t v74 = (int8x16_t)vmulq_f32(v23, v73);
      int8x16_t v75 = (int8x16_t)vmulq_f32(v24, v73);
      float32x4_t v76 = *((float32x4_t *)a2 + 112);
      int8x16_t v77 = (int8x16_t)vcgtq_f32(v19, vsubq_f32(v23, v76));
      int8x16_t v78 = (int8x16_t)vcgtq_f32(v19, vsubq_f32(v24, v76));
      int8x16_t v79 = *((int8x16_t *)a2 + 36);
      float32x4_t v80 = (int8x16_t *)(v6 + v11);
      v80[-1] = vbslq_s8(v15, (int8x16_t)v13, veorq_s8(vandq_s8(v79, (int8x16_t)v17), vbslq_s8(v77, v74, (int8x16_t)vmulq_f32(v72, v70))));
      *float32x4_t v80 = vbslq_s8(v15, (int8x16_t)v12, veorq_s8(vandq_s8(v79, (int8x16_t)v18), vbslq_s8(v78, v75, (int8x16_t)vmulq_f32(v72, v71))));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v81 = -v10;
    if (v81 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v82 = 16 * v81;
    float32x4_t v83 = *(float32x4_t *)(v7 + v82);
    int8x16_t v84 = *((int8x16_t *)a2 + 15);
    float32x4_t v85 = (float32x4_t)vbslq_s8(v84, (int8x16_t)v83, (int8x16_t)vmaxq_f32(v83, *((float32x4_t *)a2 + 113)));
    float32x4_t v86 = *((float32x4_t *)a2 + 75);
    float32x4_t v87 = *((float32x4_t *)a2 + 5);
    float32x4_t v88 = vmulq_f32(v85, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v86, v85), *((int8x16_t *)a2 + 34), (int8x16_t)v87));
    float32x4_t v89 = vaddq_f32(vminq_f32(v88, *((float32x4_t *)a2 + 114)), *((float32x4_t *)a2 + 108));
    float32x4_t v90 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v89), (int8x16_t)v87);
    float32x4_t v91 = (float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vcgtq_f32(v90, *((float32x4_t *)a2 + 23)));
    float32x4_t v92 = vsubq_f32(vsubq_f32(v90, v87), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v91), v90));
    float32x4_t v93 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 109), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v89, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v89))), *((float32x4_t *)a2 + 22)), v91), vmulq_f32(v92, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v92, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v92, v92), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v92))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v94 = vcvtq_f32_s32(vcvtq_s32_f32(v93));
    float32x4_t v95 = vsubq_f32(v94, (float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vcgtq_f32(v94, v93)));
    float32x4_t v96 = vsubq_f32(v93, v95);
    *(int8x16_t *)(v6 + v82) = vbslq_s8(v84, (int8x16_t)v83, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v85), vbslq_s8((int8x16_t)vcgtq_f32(v86, vsubq_f32(v88, *((float32x4_t *)a2 + 112))), (int8x16_t)vmulq_f32(v88, *((float32x4_t *)a2 + 111)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 110), vmulq_f32(vaddq_f32(v87, vmulq_f32(v96, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v96, vaddq_f32(
                                                              *((float32x4_t *)a2 + 30),
                                                              vmulq_f32(*((float32x4_t *)a2 + 31), v96)))))),
                                                    (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v95)), 0x17uLL))))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_srgb_nice_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v92 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 113);
      int8x16_t v15 = (int8x16_t)vmaxq_f32(v13, v14);
      int8x16_t v16 = (int8x16_t)vmaxq_f32(v12, v14);
      int8x16_t v17 = *((int8x16_t *)a2 + 15);
      float32x4_t v18 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v13, v15);
      float32x4_t v19 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v12, v16);
      float32x4_t v20 = *((float32x4_t *)a2 + 75);
      float32x4_t v21 = *((float32x4_t *)a2 + 5);
      int32x4_t v23 = *((int32x4_t *)a2 + 33);
      int8x16_t v22 = *((int8x16_t *)a2 + 34);
      float32x4_t v24 = vmulq_f32(v18, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v20, v18), v22, (int8x16_t)v21));
      float32x4_t v25 = vmulq_f32(v19, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v20, v19), v22, (int8x16_t)v21));
      float32x4_t v26 = *((float32x4_t *)a2 + 114);
      float32x4_t v27 = *((float32x4_t *)a2 + 108);
      int8x16_t v28 = (int8x16_t)vaddq_f32(vminq_f32(v24, v26), v27);
      float32x4_t v29 = *((float32x4_t *)a2 + 109);
      int8x16_t v30 = (int8x16_t)vaddq_f32(vminq_f32(v25, v26), v27);
      int8x16_t v31 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vceqq_f32(v29, v20)), v20);
      float32x4_t v32 = (float32x4_t)vbslq_s8(v31, (int8x16_t)v21, v28);
      float32x4_t v33 = (float32x4_t)vbslq_s8(v31, (int8x16_t)v21, v30);
      int8x16_t v34 = *((int8x16_t *)a2 + 19);
      float32x4_t v35 = *((float32x4_t *)a2 + 20);
      float32x4_t v36 = (float32x4_t)vorrq_s8(vandq_s8(v34, (int8x16_t)v32), (int8x16_t)v21);
      float32x4_t v37 = (float32x4_t)vorrq_s8(vandq_s8(v34, (int8x16_t)v33), (int8x16_t)v21);
      int8x16_t v38 = *((int8x16_t *)a2 + 21);
      float32x4_t v39 = *((float32x4_t *)a2 + 22);
      float32x4_t v40 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v32, 0x17uLL)), (float32x4_t)vandq_s8(v38, (int8x16_t)vcgtq_f32(v35, v32)));
      float32x4_t v41 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v33, 0x17uLL)), (float32x4_t)vandq_s8(v38, (int8x16_t)vcgtq_f32(v35, v33)));
      float32x4_t v42 = *((float32x4_t *)a2 + 23);
      float32x4_t v43 = *((float32x4_t *)a2 + 24);
      float32x4_t v44 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v36, v42));
      float32x4_t v45 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v37, v42));
      float32x4_t v46 = vsubq_f32(v41, v39);
      float32x4_t v47 = vaddq_f32(vsubq_f32(v40, v39), v44);
      float32x4_t v48 = vsubq_f32(vsubq_f32(v36, v21), vmulq_f32(vmulq_f32(v43, v44), v36));
      float32x4_t v49 = vsubq_f32(vsubq_f32(v37, v21), vmulq_f32(vmulq_f32(v43, v45), v37));
      float32x4_t v50 = *((float32x4_t *)a2 + 38);
      float32x4_t v51 = *((float32x4_t *)a2 + 39);
      float32x4_t v52 = vmulq_f32(v48, v48);
      int8x16_t v54 = *((int8x16_t *)a2 + 36);
      float32x4_t v53 = *((float32x4_t *)a2 + 37);
      float32x4_t v55 = *((float32x4_t *)a2 + 40);
      float32x4_t v56 = *((float32x4_t *)a2 + 41);
      float32x4_t v57 = vaddq_f32(v53, vmulq_f32(v50, v48));
      float32x4_t v58 = vaddq_f32(v51, vmulq_f32(v55, v48));
      float32x4_t v59 = vaddq_f32(v51, vmulq_f32(v55, v49));
      float32x4_t v60 = vaddq_f32(v53, vmulq_f32(v50, v49));
      float32x4_t v61 = *((float32x4_t *)a2 + 42);
      float32x4_t v62 = *((float32x4_t *)a2 + 43);
      float32x4_t v63 = vaddq_f32(v56, vmulq_f32(v61, v48));
      float32x4_t v64 = vaddq_f32(v56, vmulq_f32(v61, v49));
      float32x4_t v65 = vmulq_f32(v49, v49);
      float32x4_t v66 = vmulq_f32(v29, vaddq_f32(vaddq_f32(v46, v45), vmulq_f32(v49, vaddq_f32(v62, vmulq_f32(v49, vaddq_f32(v64, vmulq_f32(v65, vaddq_f32(v60, vmulq_f32(v65, v59)))))))));
      float32x4_t v67 = *((float32x4_t *)a2 + 29);
      float32x4_t v68 = vmaxq_f32(vmulq_f32(v29, vaddq_f32(v47, vmulq_f32(v48, vaddq_f32(v62, vmulq_f32(v48, vaddq_f32(v63, vmulq_f32(v52, vaddq_f32(v57, vmulq_f32(v52, v58))))))))), v67);
      float32x4_t v69 = vmaxq_f32(v66, v67);
      float32x4_t v70 = vcvtq_f32_s32(vcvtq_s32_f32(v68));
      float32x4_t v71 = vcvtq_f32_s32(vcvtq_s32_f32(v69));
      float32x4_t v72 = vsubq_f32(v70, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v70, v68)));
      float32x4_t v73 = vsubq_f32(v71, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v71, v69)));
      float32x4_t v74 = vsubq_f32(v68, v72);
      float32x4_t v75 = vsubq_f32(v69, v73);
      float32x4_t v76 = *((float32x4_t *)a2 + 44);
      float32x4_t v77 = *((float32x4_t *)a2 + 45);
      float32x4_t v78 = vaddq_f32(v76, vmulq_f32(v77, v74));
      float32x4_t v79 = vaddq_f32(v76, vmulq_f32(v77, v75));
      float32x4_t v80 = *((float32x4_t *)a2 + 46);
      float32x4_t v81 = *((float32x4_t *)a2 + 47);
      float32x4_t v82 = vaddq_f32(vaddq_f32(v80, vmulq_f32(v81, v75)), vmulq_f32(vmulq_f32(v75, v75), v79));
      float32x4_t v83 = *((float32x4_t *)a2 + 48);
      float32x4_t v84 = vaddq_f32(v21, vmulq_f32(v74, vaddq_f32(v83, vmulq_f32(v74, vaddq_f32(vaddq_f32(v80, vmulq_f32(v74, v81)), vmulq_f32(vmulq_f32(v74, v74), v78))))));
      int32x4_t v85 = vaddq_s32(v23, vcvtq_s32_f32(v72));
      float32x4_t v86 = vmulq_f32(vaddq_f32(v21, vmulq_f32(v75, vaddq_f32(v83, vmulq_f32(v75, v82)))), (float32x4_t)vshlq_n_s32(vaddq_s32(v23, vcvtq_s32_f32(v73)), 0x17uLL));
      float32x4_t v87 = *((float32x4_t *)a2 + 110);
      int8x16_t v88 = (int8x16_t)vmulq_f32(v87, vmulq_f32(v84, (float32x4_t)vshlq_n_s32(v85, 0x17uLL)));
      float32x4_t v89 = *((float32x4_t *)a2 + 111);
      float32x4_t v90 = *((float32x4_t *)a2 + 112);
      float32x4_t v91 = (int8x16_t *)(v6 + v11);
      v91[-1] = vbslq_s8(v17, (int8x16_t)v13, veorq_s8(vandq_s8(v54, (int8x16_t)v18), vbslq_s8((int8x16_t)vcgtq_f32(v20, vsubq_f32(v24, v90)), (int8x16_t)vmulq_f32(v24, v89), v88)));
      *float32x4_t v91 = vbslq_s8(v17, (int8x16_t)v12, veorq_s8(vandq_s8(v54, (int8x16_t)v19), vbslq_s8((int8x16_t)vcgtq_f32(v20, vsubq_f32(v25, v90)), (int8x16_t)vmulq_f32(v25, v89), (int8x16_t)vmulq_f32(v87, v86))));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v92 = -v10;
    if (v92 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v93 = 16 * v92;
    float32x4_t v94 = *(float32x4_t *)(v7 + v93);
    int8x16_t v95 = *((int8x16_t *)a2 + 15);
    float32x4_t v96 = (float32x4_t)vbslq_s8(v95, (int8x16_t)v94, (int8x16_t)vmaxq_f32(v94, *((float32x4_t *)a2 + 113)));
    float32x4_t v97 = *((float32x4_t *)a2 + 75);
    float32x4_t v98 = *((float32x4_t *)a2 + 5);
    float32x4_t v99 = vmulq_f32(v96, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v97, v96), *((int8x16_t *)a2 + 34), (int8x16_t)v98));
    float32x4_t v100 = *((float32x4_t *)a2 + 109);
    float32x4_t v101 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v98, (int8x16_t)vceqq_f32(v100, v97)), v97), (int8x16_t)v98, (int8x16_t)vaddq_f32(vminq_f32(v99, *((float32x4_t *)a2 + 114)), *((float32x4_t *)a2 + 108)));
    float32x4_t v102 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v101), (int8x16_t)v98);
    float32x4_t v103 = (float32x4_t)vandq_s8((int8x16_t)v98, (int8x16_t)vcgtq_f32(v102, *((float32x4_t *)a2 + 23)));
    float32x4_t v104 = vsubq_f32(vsubq_f32(v102, v98), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v103), v102));
    float32x4_t v105 = vmulq_f32(v104, v104);
    float32x4_t v106 = vmaxq_f32(vmulq_f32(v100, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v101, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v101))), *((float32x4_t *)a2 + 22)), v103), vmulq_f32(v104, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v104, vaddq_f32(
                         vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v104)),
                         vmulq_f32(v105, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v104)), vmulq_f32(v105, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v104))))))))))), *((float32x4_t *)a2 + 29));
    float32x4_t v107 = vcvtq_f32_s32(vcvtq_s32_f32(v106));
    float32x4_t v108 = vsubq_f32(v107, (float32x4_t)vandq_s8((int8x16_t)v98, (int8x16_t)vcgtq_f32(v107, v106)));
    float32x4_t v109 = vsubq_f32(v106, v108);
    *(int8x16_t *)(v6 + v93) = vbslq_s8(v95, (int8x16_t)v94, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v96), vbslq_s8((int8x16_t)vcgtq_f32(v97, vsubq_f32(v99, *((float32x4_t *)a2 + 112))), (int8x16_t)vmulq_f32(v99, *((float32x4_t *)a2 + 111)), (int8x16_t)vmulq_f32(*((float32x4_t *)a2 + 110), vmulq_f32(vaddq_f32(v98, vmulq_f32(v109, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v109, vaddq_f32(
                                                              vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v109)), vmulq_f32(vmulq_f32(v109, v109), vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v109)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v108)), 0x17uLL))))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getquicktime_fast_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v35 = 0;
        uint64_t v36 = 16 * v8;
        uint64_t v37 = 16 * v7;
        uint64_t v38 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v39 = 0;
          do
          {
            float32x4_t v40 = v5[v39 / 0x10];
            float32x4_t v41 = vminq_f32(vmaxq_f32(v40, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            v6[v39 / 0x10] = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v40, (int8x16_t)vmulq_f32(v41, vminq_f32(vrsqrteq_f32(v41), *((float32x4_t *)a2 + 73))));
            v39 += 16;
          }
          while (v38 != v39);
          ++v35;
          int v5 = (float32x4_t *)((char *)v5 + v36);
          uint64_t v6 = (int8x16_t *)((char *)v6 + v37);
        }
        while (v35 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      float32x4_t v12 = v5 + 4;
      float32x4_t v13 = v6 + 4;
      do
      {
        unint64_t v14 = 0;
        int8x16_t v15 = v13;
        int8x16_t v16 = v12;
        uint64_t v17 = 2;
        do
        {
          float32x4_t v18 = v16;
          float32x4_t v19 = v15;
          float32x4_t v20 = v5[v17 - 2];
          float32x4_t v21 = v5[v17 - 1];
          float32x4_t v22 = v5[v17];
          float32x4_t v23 = v5[v17 + 1];
          float32x4_t v24 = *((float32x4_t *)a2 + 75);
          float32x4_t v25 = *((float32x4_t *)a2 + 5);
          float32x4_t v26 = vminq_f32(vmaxq_f32(v20, v24), v25);
          float32x4_t v27 = vminq_f32(vmaxq_f32(v21, v24), v25);
          float32x4_t v28 = vminq_f32(vmaxq_f32(v22, v24), v25);
          float32x4_t v29 = vminq_f32(vmaxq_f32(v23, v24), v25);
          float32x4_t v30 = *((float32x4_t *)a2 + 73);
          int8x16_t v31 = *((int8x16_t *)a2 + 15);
          float32x4_t v32 = &v6[v17];
          v32[-2] = vbslq_s8(v31, (int8x16_t)v20, (int8x16_t)vmulq_f32(v26, vminq_f32(vrsqrteq_f32(v26), v30)));
          v32[-1] = vbslq_s8(v31, (int8x16_t)v21, (int8x16_t)vmulq_f32(v27, vminq_f32(vrsqrteq_f32(v27), v30)));
          v14 += 4;
          *float32x4_t v32 = vbslq_s8(v31, (int8x16_t)v22, (int8x16_t)vmulq_f32(v28, vminq_f32(vrsqrteq_f32(v28), v30)));
          v32[1] = vbslq_s8(v31, (int8x16_t)v23, (int8x16_t)vmulq_f32(v29, vminq_f32(vrsqrteq_f32(v29), v30)));
          v17 += 4;
          v16 += 4;
          int8x16_t v15 = v19 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            float32x4_t v33 = *v18++;
            float32x4_t v34 = vminq_f32(vmaxq_f32(v33, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            *v19++ = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v33, (int8x16_t)vmulq_f32(v34, vminq_f32(vrsqrteq_f32(v34), *((float32x4_t *)a2 + 73))));
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        uint64_t v6 = (int8x16_t *)((char *)v6 + v10);
        int v5 = (float32x4_t *)((char *)v5 + v11);
        float32x4_t v12 = (float32x4_t *)((char *)v12 + v11);
        float32x4_t v13 = (int8x16_t *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

uint64_t Getquicktime_fixed_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 6);
    while (v5 < 4)
    {
      LODWORD(v73) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v7 += v8;
      v6 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 32;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 32);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v11);
      float32x4_t v15 = *(float32x4_t *)(v7 + v11 + 16);
      float32x4_t v16 = *((float32x4_t *)a2 + 75);
      float32x4_t v17 = *((float32x4_t *)a2 + 5);
      float32x4_t v18 = *((float32x4_t *)a2 + 6);
      float32x4_t v19 = vmulq_f32(v18, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v12, v16), v17)));
      float32x4_t v20 = vmulq_f32(v18, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v13, v16), v17)));
      float32x4_t v21 = vmulq_f32(v18, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v14, v16), v17)));
      float32x4_t v22 = vmulq_f32(v18, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v15, v16), v17)));
      float32x4_t v23 = vcvtq_f32_s32(vcvtq_s32_f32(v19));
      float32x4_t v24 = vcvtq_f32_s32(vcvtq_s32_f32(v20));
      float32x4_t v25 = vcvtq_f32_s32(vcvtq_s32_f32(v21));
      float32x4_t v26 = vcvtq_f32_s32(vcvtq_s32_f32(v22));
      float32x4_t v27 = *((float32x4_t *)a2 + 7);
      float32x4_t v28 = *((float32x4_t *)a2 + 8);
      float32x4_t v29 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v19, v23), v27));
      float32x4_t v30 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v20, v24), v27));
      float32x4_t v31 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v21, v25), v27));
      float32x4_t v32 = vrsqrteq_f32(vaddq_f32(v27, vsubq_f32(v22, v26)));
      float32x4_t v33 = vaddq_f32(v28, v23);
      float32x4_t v34 = vaddq_f32(v28, v24);
      float32x4_t v35 = vaddq_f32(v28, v25);
      float32x4_t v36 = vaddq_f32(v28, v26);
      float32x4_t v37 = *((float32x4_t *)a2 + 9);
      float32x4_t v38 = *((float32x4_t *)a2 + 10);
      float32x4_t v39 = vsubq_f32(v33, vmulq_f32(v29, v37));
      float32x4_t v40 = *((float32x4_t *)a2 + 115);
      float32x4_t v41 = vmulq_f32(v40, v39);
      float32x4_t v42 = vmulq_f32(v40, vsubq_f32(v34, vmulq_f32(v30, v37)));
      float32x4_t v43 = vmulq_f32(v40, vsubq_f32(v35, vmulq_f32(v31, v37)));
      float32x4_t v44 = vmulq_f32(v40, vsubq_f32(v36, vmulq_f32(v32, v37)));
      float32x4_t v45 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
      float32x4_t v46 = vcvtq_f32_s32(vcvtq_s32_f32(v42));
      float32x4_t v47 = vcvtq_f32_s32(vcvtq_s32_f32(v43));
      float32x4_t v48 = vcvtq_f32_s32(vcvtq_s32_f32(v44));
      float32x4_t v49 = vsubq_f32(v45, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v45, v41)));
      float32x4_t v50 = vsubq_f32(v46, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v46, v42)));
      float32x4_t v51 = vsubq_f32(v47, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v47, v43)));
      float32x4_t v52 = vsubq_f32(v48, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v48, v44)));
      float32x4_t v53 = *((float32x4_t *)a2 + 11);
      float32x4_t v54 = *((float32x4_t *)a2 + 12);
      float32x4_t v55 = vmulq_f32(vrecpeq_f32(vsubq_f32(v53, vsubq_f32(v41, v49))), v54);
      float32x4_t v56 = vmulq_f32(vrecpeq_f32(vsubq_f32(v53, vsubq_f32(v42, v50))), v54);
      float32x4_t v57 = vmulq_f32(vrecpeq_f32(vsubq_f32(v53, vsubq_f32(v43, v51))), v54);
      float32x4_t v58 = vmulq_f32(vrecpeq_f32(vsubq_f32(v53, vsubq_f32(v44, v52))), v54);
      float32x4_t v59 = vmaxq_f32(vaddq_f32(vaddq_f32(v49, v38), vmulq_f32(v55, v55)), v16);
      float32x4_t v60 = vmaxq_f32(vaddq_f32(vaddq_f32(v38, v50), vmulq_f32(v56, v56)), v16);
      float32x4_t v61 = vmaxq_f32(vaddq_f32(vaddq_f32(v38, v51), vmulq_f32(v57, v57)), v16);
      float32x4_t v62 = vmaxq_f32(vaddq_f32(vaddq_f32(v38, v52), vmulq_f32(v58, v58)), v16);
      float32x4_t v63 = *((float32x4_t *)a2 + 13);
      float32x4_t v64 = *((float32x4_t *)a2 + 14);
      float32x4_t v65 = vminq_f32(v60, v63);
      float32x4_t v66 = vminq_f32(v61, v63);
      float32x4_t v67 = vminq_f32(v62, v63);
      float32x4_t v68 = vmulq_f32(vminq_f32(v59, v63), v64);
      float32x4_t v69 = vmulq_f32(v65, v64);
      int8x16_t v70 = (int8x16_t)vcvtq_s32_f32(vmulq_f32(v66, v64));
      int8x16_t v71 = *((int8x16_t *)a2 + 15);
      float32x4_t v72 = (int8x16_t *)(v6 + v11);
      v72[-2] = vbslq_s8(v71, (int8x16_t)v12, (int8x16_t)vcvtq_s32_f32(v68));
      v72[-1] = vbslq_s8(v71, (int8x16_t)v13, (int8x16_t)vcvtq_s32_f32(v69));
      *float32x4_t v72 = vbslq_s8(v71, (int8x16_t)v14, v70);
      v72[1] = vbslq_s8(v71, (int8x16_t)v15, (int8x16_t)vcvtq_s32_f32(vmulq_f32(v67, v64)));
      v10 -= 4;
      v11 += 64;
    }
    while (v5 + v10 > 3);
    LODWORD(v73) = -v10;
    if ((int)v73 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v73 = v73;
    do
    {
      float32x4_t v74 = *(float32x4_t *)(v7 + 16 * v73);
      float32x4_t v75 = *((float32x4_t *)a2 + 75);
      float32x4_t v76 = *((float32x4_t *)a2 + 5);
      float32x4_t v77 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v74, v75), v76)));
      float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v77));
      float32x4_t v79 = vmulq_f32(*((float32x4_t *)a2 + 115), vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v78), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v77, v78))), *((float32x4_t *)a2 + 9))));
      float32x4_t v80 = vcvtq_f32_s32(vcvtq_s32_f32(v79));
      float32x4_t v81 = vsubq_f32(v80, (float32x4_t)vandq_s8((int8x16_t)v76, (int8x16_t)vcgtq_f32(v80, v79)));
      float32x4_t v82 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v79, v81))), *((float32x4_t *)a2 + 12));
      *(int8x16_t *)(v6 + 16 * v73++) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v74, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v81), vmulq_f32(v82, v82)), v75), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))));
    }
    while (v73 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getquicktime_nice_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v81 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      int8x16_t v16 = (int8x16_t)vminq_f32(vmaxq_f32(v13, v14), v15);
      int8x16_t v17 = (int8x16_t)vminq_f32(vmaxq_f32(v12, v14), v15);
      float32x4_t v18 = *((float32x4_t *)a2 + 115);
      int8x16_t v19 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vceqq_f32(v18, v14)), v14);
      float32x4_t v20 = (float32x4_t)vbslq_s8(v19, (int8x16_t)v15, v16);
      float32x4_t v21 = (float32x4_t)vbslq_s8(v19, (int8x16_t)v15, v17);
      int8x16_t v22 = *((int8x16_t *)a2 + 19);
      float32x4_t v23 = *((float32x4_t *)a2 + 20);
      float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v20), (int8x16_t)v15);
      int8x16_t v25 = *((int8x16_t *)a2 + 21);
      float32x4_t v26 = *((float32x4_t *)a2 + 22);
      float32x4_t v27 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v21), (int8x16_t)v15);
      float32x4_t v28 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v21, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v23, v21)));
      float32x4_t v29 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v23, v20))), v26);
      float32x4_t v30 = *((float32x4_t *)a2 + 23);
      float32x4_t v31 = *((float32x4_t *)a2 + 24);
      float32x4_t v32 = vsubq_f32(v28, v26);
      float32x4_t v33 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v24, v30));
      float32x4_t v34 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v27, v30));
      float32x4_t v35 = vaddq_f32(v29, v33);
      float32x4_t v36 = vsubq_f32(vsubq_f32(v24, v15), vmulq_f32(vmulq_f32(v31, v33), v24));
      float32x4_t v37 = vsubq_f32(vsubq_f32(v27, v15), vmulq_f32(vmulq_f32(v31, v34), v27));
      float32x4_t v38 = vmulq_f32(v36, v36);
      float32x4_t v39 = *((float32x4_t *)a2 + 37);
      float32x4_t v40 = *((float32x4_t *)a2 + 38);
      float32x4_t v41 = vaddq_f32(v39, vmulq_f32(v40, v36));
      float32x4_t v42 = vaddq_f32(v39, vmulq_f32(v40, v37));
      float32x4_t v43 = *((float32x4_t *)a2 + 39);
      float32x4_t v44 = *((float32x4_t *)a2 + 40);
      float32x4_t v45 = vaddq_f32(v43, vmulq_f32(v44, v36));
      float32x4_t v46 = vaddq_f32(v43, vmulq_f32(v44, v37));
      float32x4_t v47 = *((float32x4_t *)a2 + 41);
      float32x4_t v48 = *((float32x4_t *)a2 + 42);
      float32x4_t v49 = vaddq_f32(v47, vmulq_f32(v48, v36));
      float32x4_t v50 = vaddq_f32(v47, vmulq_f32(v48, v37));
      float32x4_t v51 = vmulq_f32(v37, v37);
      float32x4_t v52 = vaddq_f32(v50, vmulq_f32(v51, vaddq_f32(v42, vmulq_f32(v51, v46))));
      float32x4_t v53 = vmulq_f32(v36, vaddq_f32(v49, vmulq_f32(v38, vaddq_f32(v41, vmulq_f32(v38, v45)))));
      float32x4_t v54 = *((float32x4_t *)a2 + 43);
      float32x4_t v55 = *((float32x4_t *)a2 + 44);
      float32x4_t v56 = vaddq_f32(vaddq_f32(v32, v34), vmulq_f32(v37, vaddq_f32(v54, vmulq_f32(v37, v52))));
      float32x4_t v57 = vmulq_f32(v18, vaddq_f32(v35, vmulq_f32(v36, vaddq_f32(v54, v53))));
      float32x4_t v58 = vmulq_f32(v18, v56);
      float32x4_t v59 = *((float32x4_t *)a2 + 29);
      float32x4_t v60 = vmaxq_f32(v57, v59);
      float32x4_t v61 = vmaxq_f32(v58, v59);
      float32x4_t v62 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
      float32x4_t v63 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
      float32x4_t v64 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v62, v60)));
      float32x4_t v65 = vsubq_f32(v63, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v63, v61)));
      float32x4_t v66 = vsubq_f32(v60, v64);
      float32x4_t v67 = vsubq_f32(v61, v65);
      float32x4_t v68 = *((float32x4_t *)a2 + 45);
      float32x4_t v69 = *((float32x4_t *)a2 + 46);
      float32x4_t v70 = vaddq_f32(v55, vmulq_f32(v68, v66));
      float32x4_t v71 = vaddq_f32(v55, vmulq_f32(v68, v67));
      float32x4_t v73 = *((float32x4_t *)a2 + 47);
      float32x4_t v72 = *((float32x4_t *)a2 + 48);
      float32x4_t v74 = vaddq_f32(v15, vmulq_f32(v66, vaddq_f32(v72, vmulq_f32(v66, vaddq_f32(vaddq_f32(v69, vmulq_f32(v66, v73)), vmulq_f32(vmulq_f32(v66, v66), v70))))));
      float32x4_t v75 = vaddq_f32(v15, vmulq_f32(v67, vaddq_f32(v72, vmulq_f32(v67, vaddq_f32(vaddq_f32(v69, vmulq_f32(v73, v67)), vmulq_f32(vmulq_f32(v67, v67), v71))))));
      int32x4_t v76 = vcvtq_s32_f32(v65);
      int32x4_t v77 = *((int32x4_t *)a2 + 33);
      int8x16_t v78 = (int8x16_t)vmulq_f32(v75, (float32x4_t)vshlq_n_s32(vaddq_s32(v77, v76), 0x17uLL));
      int8x16_t v79 = *((int8x16_t *)a2 + 15);
      float32x4_t v80 = (int8x16_t *)(v6 + v11);
      v80[-1] = vbslq_s8(v79, (int8x16_t)v13, (int8x16_t)vmulq_f32(v74, (float32x4_t)vshlq_n_s32(vaddq_s32(v77, vcvtq_s32_f32(v64)), 0x17uLL)));
      *float32x4_t v80 = vbslq_s8(v79, (int8x16_t)v12, v78);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v81 = -v10;
    if (v81 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v82 = 16 * v81;
    float32x4_t v83 = *(float32x4_t *)(v7 + v82);
    float32x4_t v84 = *((float32x4_t *)a2 + 5);
    float32x4_t v85 = *((float32x4_t *)a2 + 115);
    float32x4_t v86 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v84, (int8x16_t)vceqq_f32(v85, *((float32x4_t *)a2 + 75))), *((float32x4_t *)a2 + 75)), (int8x16_t)v84, (int8x16_t)vminq_f32(vmaxq_f32(v83, *((float32x4_t *)a2 + 75)), v84));
    float32x4_t v87 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v86), (int8x16_t)v84);
    float32x4_t v88 = (float32x4_t)vandq_s8((int8x16_t)v84, (int8x16_t)vcgtq_f32(v87, *((float32x4_t *)a2 + 23)));
    float32x4_t v89 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v86, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v86))), *((float32x4_t *)a2 + 22)), v88);
    float32x4_t v90 = vsubq_f32(vsubq_f32(v87, v84), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v88), v87));
    float32x4_t v91 = vmulq_f32(v90, v90);
    float32x4_t v92 = vmaxq_f32(vmulq_f32(v85, vaddq_f32(v89, vmulq_f32(v90, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v90, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v90)), vmulq_f32(v91, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v90)), vmulq_f32(v91, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v90))))))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v93 = vcvtq_f32_s32(vcvtq_s32_f32(v92));
    float32x4_t v94 = vsubq_f32(v93, (float32x4_t)vandq_s8((int8x16_t)v84, (int8x16_t)vcgtq_f32(v93, v92)));
    float32x4_t v95 = vsubq_f32(v92, v94);
    *(int8x16_t *)(v6 + v82) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v83, (int8x16_t)vmulq_f32(vaddq_f32(v84, vmulq_f32(v95, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v95, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v95)), vmulq_f32(vmulq_f32(v95, v95), vaddq_f32(*((float32x4_t *)a2 + 44),
                                                            vmulq_f32(*((float32x4_t *)a2 + 45), v95)))))))),
                                              (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v94)), 0x17uLL)));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getquicktime_half_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v62 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = vmaxq_f32(v13, v14);
      float32x4_t v16 = vmaxq_f32(v12, v14);
      float32x4_t v17 = *((float32x4_t *)a2 + 5);
      float32x4_t v18 = vminq_f32(v15, v17);
      float32x4_t v19 = vminq_f32(v16, v17);
      int8x16_t v20 = *((int8x16_t *)a2 + 19);
      float32x4_t v21 = *((float32x4_t *)a2 + 20);
      float32x4_t v22 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v18), (int8x16_t)v17);
      float32x4_t v23 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v19), (int8x16_t)v17);
      int8x16_t v24 = *((int8x16_t *)a2 + 21);
      float32x4_t v25 = *((float32x4_t *)a2 + 22);
      float32x4_t v26 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v18, 0x17uLL)), (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v21, v18)));
      float32x4_t v27 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v19, 0x17uLL)), (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v21, v19)));
      float32x4_t v28 = *((float32x4_t *)a2 + 23);
      float32x4_t v29 = *((float32x4_t *)a2 + 24);
      float32x4_t v30 = (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v22, v28));
      float32x4_t v31 = (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v23, v28));
      float32x4_t v32 = vaddq_f32(vsubq_f32(v26, v25), v30);
      float32x4_t v33 = vsubq_f32(vsubq_f32(v22, v17), vmulq_f32(vmulq_f32(v29, v30), v22));
      float32x4_t v34 = vsubq_f32(vsubq_f32(v23, v17), vmulq_f32(vmulq_f32(v29, v31), v23));
      float32x4_t v35 = *((float32x4_t *)a2 + 25);
      float32x4_t v36 = *((float32x4_t *)a2 + 26);
      float32x4_t v37 = *((float32x4_t *)a2 + 27);
      float32x4_t v38 = *((float32x4_t *)a2 + 28);
      float32x4_t v39 = vaddq_f32(vaddq_f32(vsubq_f32(v27, v25), v31), vmulq_f32(v34, vaddq_f32(vaddq_f32(v37, vmulq_f32(v34, v38)), vmulq_f32(vmulq_f32(v34, v34), vaddq_f32(v35, vmulq_f32(v36, v34))))));
      float32x4_t v40 = *((float32x4_t *)a2 + 115);
      float32x4_t v41 = vmulq_f32(v40, vaddq_f32(v32, vmulq_f32(v33, vaddq_f32(vaddq_f32(v37, vmulq_f32(v33, v38)), vmulq_f32(vmulq_f32(v33, v33), vaddq_f32(v35, vmulq_f32(v36, v33)))))));
      float32x4_t v42 = vmulq_f32(v40, v39);
      float32x4_t v44 = *((float32x4_t *)a2 + 29);
      float32x4_t v43 = *((float32x4_t *)a2 + 30);
      float32x4_t v45 = vmaxq_f32(v41, v44);
      float32x4_t v46 = vmaxq_f32(v42, v44);
      float32x4_t v47 = vcvtq_f32_s32(vcvtq_s32_f32(v45));
      float32x4_t v48 = vcvtq_f32_s32(vcvtq_s32_f32(v46));
      float32x4_t v49 = vsubq_f32(v47, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v47, v45)));
      float32x4_t v50 = vsubq_f32(v48, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v48, v46)));
      float32x4_t v51 = vsubq_f32(v45, v49);
      float32x4_t v52 = vsubq_f32(v46, v50);
      float32x4_t v53 = *((float32x4_t *)a2 + 31);
      float32x4_t v54 = *((float32x4_t *)a2 + 32);
      float32x4_t v55 = vmulq_f32(v52, vaddq_f32(v54, vmulq_f32(v52, vaddq_f32(v43, vmulq_f32(v53, v52)))));
      float32x4_t v56 = vaddq_f32(v17, vmulq_f32(v51, vaddq_f32(v54, vmulq_f32(v51, vaddq_f32(v43, vmulq_f32(v53, v51))))));
      int32x4_t v57 = vcvtq_s32_f32(v49);
      int32x4_t v58 = *((int32x4_t *)a2 + 33);
      int8x16_t v59 = (int8x16_t)vmulq_f32(vaddq_f32(v17, v55), (float32x4_t)vshlq_n_s32(vaddq_s32(v58, vcvtq_s32_f32(v50)), 0x17uLL));
      int8x16_t v60 = *((int8x16_t *)a2 + 15);
      float32x4_t v61 = (int8x16_t *)(v6 + v11);
      v61[-1] = vbslq_s8(v60, (int8x16_t)v13, (int8x16_t)vmulq_f32(v56, (float32x4_t)vshlq_n_s32(vaddq_s32(v58, v57), 0x17uLL)));
      *float32x4_t v61 = vbslq_s8(v60, (int8x16_t)v12, v59);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v62 = -v10;
    if (v62 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v63 = 16 * v62;
    float32x4_t v64 = *(float32x4_t *)(v7 + v63);
    float32x4_t v65 = *((float32x4_t *)a2 + 5);
    float32x4_t v66 = vminq_f32(vmaxq_f32(v64, *((float32x4_t *)a2 + 75)), v65);
    float32x4_t v67 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v66), (int8x16_t)v65);
    float32x4_t v68 = (float32x4_t)vandq_s8((int8x16_t)v65, (int8x16_t)vcgtq_f32(v67, *((float32x4_t *)a2 + 23)));
    float32x4_t v69 = vsubq_f32(vsubq_f32(v67, v65), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v68), v67));
    float32x4_t v70 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 115), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v66, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v66))), *((float32x4_t *)a2 + 22)), v68), vmulq_f32(v69, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v69, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v69, v69), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v69))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v71 = vcvtq_f32_s32(vcvtq_s32_f32(v70));
    float32x4_t v72 = vsubq_f32(v71, (float32x4_t)vandq_s8((int8x16_t)v65, (int8x16_t)vcgtq_f32(v71, v70)));
    float32x4_t v73 = vsubq_f32(v70, v72);
    *(int8x16_t *)(v6 + v63) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v64, (int8x16_t)vmulq_f32(vaddq_f32(v65, vmulq_f32(v73, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v73, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v73)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v72)), 0x17uLL)));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getquicktime_half_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v72 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 82);
      int8x16_t v15 = (int8x16_t)vmaxq_f32(v13, v14);
      int8x16_t v16 = (int8x16_t)vmaxq_f32(v12, v14);
      int8x16_t v17 = *((int8x16_t *)a2 + 15);
      float32x4_t v18 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v13, v15);
      float32x4_t v19 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v12, v16);
      float32x4_t v20 = *((float32x4_t *)a2 + 75);
      int8x16_t v21 = (int8x16_t)vcgtq_f32(v20, v18);
      int8x16_t v22 = (int8x16_t)vcgtq_f32(v20, v19);
      float32x4_t v23 = *((float32x4_t *)a2 + 5);
      int32x4_t v25 = *((int32x4_t *)a2 + 33);
      int8x16_t v24 = *((int8x16_t *)a2 + 34);
      float32x4_t v26 = vmulq_f32(v18, (float32x4_t)vbslq_s8(v21, v24, (int8x16_t)v23));
      float32x4_t v27 = vmulq_f32(v19, (float32x4_t)vbslq_s8(v22, v24, (int8x16_t)v23));
      float32x4_t v28 = *((float32x4_t *)a2 + 84);
      float32x4_t v29 = vminq_f32(v26, v28);
      float32x4_t v30 = vminq_f32(v27, v28);
      int8x16_t v31 = *((int8x16_t *)a2 + 19);
      float32x4_t v32 = *((float32x4_t *)a2 + 20);
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8(v31, (int8x16_t)v29), (int8x16_t)v23);
      float32x4_t v34 = (float32x4_t)vorrq_s8(vandq_s8(v31, (int8x16_t)v30), (int8x16_t)v23);
      int8x16_t v35 = *((int8x16_t *)a2 + 21);
      float32x4_t v36 = *((float32x4_t *)a2 + 22);
      float32x4_t v37 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v32, v30)));
      float32x4_t v38 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v29, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v32, v29))), v36);
      float32x4_t v39 = *((float32x4_t *)a2 + 23);
      float32x4_t v40 = *((float32x4_t *)a2 + 24);
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v33, v39));
      float32x4_t v42 = (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v34, v39));
      float32x4_t v43 = vaddq_f32(v38, v41);
      float32x4_t v44 = vaddq_f32(vsubq_f32(v37, v36), v42);
      float32x4_t v45 = vsubq_f32(vsubq_f32(v33, v23), vmulq_f32(vmulq_f32(v40, v41), v33));
      float32x4_t v46 = vsubq_f32(vsubq_f32(v34, v23), vmulq_f32(vmulq_f32(v40, v42), v34));
      float32x4_t v47 = *((float32x4_t *)a2 + 25);
      float32x4_t v48 = *((float32x4_t *)a2 + 26);
      float32x4_t v49 = vaddq_f32(v47, vmulq_f32(v48, v45));
      float32x4_t v50 = vaddq_f32(v47, vmulq_f32(v48, v46));
      float32x4_t v51 = *((float32x4_t *)a2 + 27);
      float32x4_t v52 = *((float32x4_t *)a2 + 28);
      float32x4_t v53 = *((float32x4_t *)a2 + 115);
      float32x4_t v54 = vmulq_f32(v53, vaddq_f32(v43, vmulq_f32(v45, vaddq_f32(vaddq_f32(v51, vmulq_f32(v45, v52)), vmulq_f32(vmulq_f32(v45, v45), v49)))));
      float32x4_t v55 = vmulq_f32(v53, vaddq_f32(v44, vmulq_f32(v46, vaddq_f32(vaddq_f32(v51, vmulq_f32(v46, v52)), vmulq_f32(vmulq_f32(v46, v46), v50)))));
      float32x4_t v56 = *((float32x4_t *)a2 + 29);
      float32x4_t v57 = *((float32x4_t *)a2 + 30);
      float32x4_t v58 = vmaxq_f32(v54, v56);
      float32x4_t v59 = vmaxq_f32(v55, v56);
      float32x4_t v60 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v61 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v62 = vsubq_f32(v60, (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v60, v58)));
      float32x4_t v63 = vsubq_f32(v61, (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v61, v59)));
      float32x4_t v64 = vsubq_f32(v58, v62);
      float32x4_t v65 = vsubq_f32(v59, v63);
      float32x4_t v66 = *((float32x4_t *)a2 + 31);
      float32x4_t v67 = *((float32x4_t *)a2 + 32);
      float32x4_t v68 = vaddq_f32(v23, vmulq_f32(v64, vaddq_f32(v67, vmulq_f32(v64, vaddq_f32(v57, vmulq_f32(v66, v64))))));
      float32x4_t v69 = vaddq_f32(v23, vmulq_f32(v65, vaddq_f32(v67, vmulq_f32(v65, vaddq_f32(v57, vmulq_f32(v66, v65))))));
      int8x16_t v70 = *((int8x16_t *)a2 + 36);
      float32x4_t v71 = (int8x16_t *)(v6 + v11);
      v71[-1] = vbslq_s8(v17, (int8x16_t)v13, veorq_s8(vandq_s8(v70, (int8x16_t)v18), (int8x16_t)vmulq_f32(v68, (float32x4_t)vshlq_n_s32(vaddq_s32(v25, vcvtq_s32_f32(v62)), 0x17uLL))));
      *float32x4_t v71 = vbslq_s8(v17, (int8x16_t)v12, veorq_s8(vandq_s8(v70, (int8x16_t)v19), (int8x16_t)vmulq_f32(v69, (float32x4_t)vshlq_n_s32(vaddq_s32(v25, vcvtq_s32_f32(v63)), 0x17uLL))));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v72 = -v10;
    if (v72 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v73 = 16 * v72;
    float32x4_t v74 = *(float32x4_t *)(v7 + v73);
    int8x16_t v75 = *((int8x16_t *)a2 + 15);
    float32x4_t v76 = (float32x4_t)vbslq_s8(v75, (int8x16_t)v74, (int8x16_t)vmaxq_f32(v74, *((float32x4_t *)a2 + 82)));
    float32x4_t v77 = *((float32x4_t *)a2 + 5);
    float32x4_t v78 = vminq_f32(vmulq_f32(v76, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 75), v76), *((int8x16_t *)a2 + 34), (int8x16_t)v77)), *((float32x4_t *)a2 + 84));
    float32x4_t v79 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v78), (int8x16_t)v77);
    float32x4_t v80 = (float32x4_t)vandq_s8((int8x16_t)v77, (int8x16_t)vcgtq_f32(v79, *((float32x4_t *)a2 + 23)));
    float32x4_t v81 = vsubq_f32(vsubq_f32(v79, v77), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v80), v79));
    float32x4_t v82 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 115), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v78, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v78))), *((float32x4_t *)a2 + 22)), v80), vmulq_f32(v81, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v81, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v81, v81), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v81))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v83 = vcvtq_f32_s32(vcvtq_s32_f32(v82));
    float32x4_t v84 = vsubq_f32(v83, (float32x4_t)vandq_s8((int8x16_t)v77, (int8x16_t)vcgtq_f32(v83, v82)));
    float32x4_t v85 = vsubq_f32(v82, v84);
    *(int8x16_t *)(v6 + v73) = vbslq_s8(v75, (int8x16_t)v74, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v76), (int8x16_t)vmulq_f32(vaddq_f32(v77, vmulq_f32(v85, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v85, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v85)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v84)), 0x17uLL))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getquicktime_nice_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v82 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 82);
      int8x16_t v15 = (int8x16_t)vmaxq_f32(v13, v14);
      int8x16_t v16 = (int8x16_t)vmaxq_f32(v12, v14);
      int8x16_t v17 = *((int8x16_t *)a2 + 15);
      float32x4_t v18 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v13, v15);
      float32x4_t v19 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v12, v16);
      float32x4_t v20 = *((float32x4_t *)a2 + 75);
      float32x4_t v21 = *((float32x4_t *)a2 + 5);
      int32x4_t v23 = *((int32x4_t *)a2 + 33);
      int8x16_t v22 = *((int8x16_t *)a2 + 34);
      float32x4_t v24 = vmulq_f32(v18, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v20, v18), v22, (int8x16_t)v21));
      float32x4_t v25 = vmulq_f32(v19, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v20, v19), v22, (int8x16_t)v21));
      float32x4_t v26 = *((float32x4_t *)a2 + 84);
      float32x4_t v27 = *((float32x4_t *)a2 + 115);
      int8x16_t v28 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vceqq_f32(v27, v20)), v20);
      float32x4_t v29 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v21, (int8x16_t)vminq_f32(v24, v26));
      float32x4_t v30 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v21, (int8x16_t)vminq_f32(v25, v26));
      int8x16_t v32 = *((int8x16_t *)a2 + 19);
      float32x4_t v31 = *((float32x4_t *)a2 + 20);
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8(v32, (int8x16_t)v29), (int8x16_t)v21);
      float32x4_t v34 = (float32x4_t)vorrq_s8(vandq_s8(v32, (int8x16_t)v30), (int8x16_t)v21);
      int8x16_t v35 = *((int8x16_t *)a2 + 21);
      float32x4_t v36 = *((float32x4_t *)a2 + 22);
      float32x4_t v37 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v31, v30)));
      float32x4_t v38 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v29, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v31, v29))), v36);
      float32x4_t v39 = *((float32x4_t *)a2 + 23);
      float32x4_t v40 = *((float32x4_t *)a2 + 24);
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v33, v39));
      float32x4_t v42 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v34, v39));
      float32x4_t v43 = vaddq_f32(v38, v41);
      float32x4_t v44 = vaddq_f32(vsubq_f32(v37, v36), v42);
      float32x4_t v45 = vsubq_f32(vsubq_f32(v33, v21), vmulq_f32(vmulq_f32(v40, v41), v33));
      float32x4_t v46 = vsubq_f32(vsubq_f32(v34, v21), vmulq_f32(vmulq_f32(v40, v42), v34));
      float32x4_t v47 = vmulq_f32(v45, v45);
      float32x4_t v48 = *((float32x4_t *)a2 + 38);
      float32x4_t v49 = *((float32x4_t *)a2 + 39);
      int8x16_t v51 = *((int8x16_t *)a2 + 36);
      float32x4_t v50 = *((float32x4_t *)a2 + 37);
      float32x4_t v52 = vaddq_f32(v50, vmulq_f32(v48, v45));
      float32x4_t v53 = vaddq_f32(v50, vmulq_f32(v48, v46));
      float32x4_t v54 = *((float32x4_t *)a2 + 40);
      float32x4_t v55 = *((float32x4_t *)a2 + 41);
      float32x4_t v56 = vaddq_f32(v49, vmulq_f32(v54, v45));
      float32x4_t v57 = vaddq_f32(v49, vmulq_f32(v54, v46));
      float32x4_t v58 = *((float32x4_t *)a2 + 42);
      float32x4_t v59 = *((float32x4_t *)a2 + 43);
      float32x4_t v60 = vaddq_f32(v55, vmulq_f32(v58, v45));
      float32x4_t v61 = vaddq_f32(v55, vmulq_f32(v58, v46));
      float32x4_t v62 = vmulq_f32(v46, v46);
      float32x4_t v63 = vmulq_f32(v27, vaddq_f32(v44, vmulq_f32(v46, vaddq_f32(v59, vmulq_f32(v46, vaddq_f32(v61, vmulq_f32(v62, vaddq_f32(v53, vmulq_f32(v62, v57)))))))));
      float32x4_t v64 = *((float32x4_t *)a2 + 29);
      float32x4_t v65 = vmaxq_f32(vmulq_f32(v27, vaddq_f32(v43, vmulq_f32(v45, vaddq_f32(v59, vmulq_f32(v45, vaddq_f32(v60, vmulq_f32(v47, vaddq_f32(v52, vmulq_f32(v47, v56))))))))), v64);
      float32x4_t v66 = vmaxq_f32(v63, v64);
      float32x4_t v67 = vcvtq_f32_s32(vcvtq_s32_f32(v65));
      float32x4_t v68 = vcvtq_f32_s32(vcvtq_s32_f32(v66));
      float32x4_t v69 = vsubq_f32(v67, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v67, v65)));
      float32x4_t v70 = vsubq_f32(v68, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v68, v66)));
      float32x4_t v71 = vsubq_f32(v65, v69);
      float32x4_t v72 = vsubq_f32(v66, v70);
      float32x4_t v73 = *((float32x4_t *)a2 + 44);
      float32x4_t v74 = *((float32x4_t *)a2 + 45);
      float32x4_t v75 = vaddq_f32(v73, vmulq_f32(v74, v71));
      float32x4_t v76 = vaddq_f32(v73, vmulq_f32(v74, v72));
      float32x4_t v77 = *((float32x4_t *)a2 + 46);
      float32x4_t v78 = *((float32x4_t *)a2 + 47);
      float32x4_t v79 = vaddq_f32(vaddq_f32(v77, vmulq_f32(v78, v72)), vmulq_f32(vmulq_f32(v72, v72), v76));
      float32x4_t v80 = *((float32x4_t *)a2 + 48);
      float32x4_t v81 = (int8x16_t *)(v6 + v11);
      v81[-1] = vbslq_s8(v17, (int8x16_t)v13, veorq_s8(vandq_s8(v51, (int8x16_t)v18), (int8x16_t)vmulq_f32(vaddq_f32(v21, vmulq_f32(v71, vaddq_f32(v80, vmulq_f32(v71, vaddq_f32(vaddq_f32(v77, vmulq_f32(v71, v78)), vmulq_f32(vmulq_f32(v71, v71), v75)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v23, vcvtq_s32_f32(v69)), 0x17uLL))));
      *float32x4_t v81 = vbslq_s8(v17, (int8x16_t)v12, veorq_s8(vandq_s8(v51, (int8x16_t)v19), (int8x16_t)vmulq_f32(vaddq_f32(v21, vmulq_f32(v72, vaddq_f32(v80, vmulq_f32(v72, v79)))), (float32x4_t)vshlq_n_s32(vaddq_s32(v23, vcvtq_s32_f32(v70)), 0x17uLL))));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v82 = -v10;
    if (v82 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v83 = 16 * v82;
    float32x4_t v84 = *(float32x4_t *)(v7 + v83);
    int8x16_t v85 = *((int8x16_t *)a2 + 15);
    float32x4_t v86 = (float32x4_t)vbslq_s8(v85, (int8x16_t)v84, (int8x16_t)vmaxq_f32(v84, *((float32x4_t *)a2 + 82)));
    float32x4_t v87 = *((float32x4_t *)a2 + 5);
    float32x4_t v88 = *((float32x4_t *)a2 + 115);
    float32x4_t v89 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vceqq_f32(v88, *((float32x4_t *)a2 + 75))), *((float32x4_t *)a2 + 75)), (int8x16_t)v87, (int8x16_t)vminq_f32(vmulq_f32(v86, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 75), v86), *((int8x16_t *)a2 + 34), (int8x16_t)v87)), *((float32x4_t *)a2 + 84)));
    float32x4_t v90 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v89), (int8x16_t)v87);
    float32x4_t v91 = (float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vcgtq_f32(v90, *((float32x4_t *)a2 + 23)));
    float32x4_t v92 = vsubq_f32(vsubq_f32(v90, v87), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v91), v90));
    float32x4_t v93 = vmulq_f32(v92, v92);
    float32x4_t v94 = vmaxq_f32(vmulq_f32(v88, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v89, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v89))), *((float32x4_t *)a2 + 22)), v91), vmulq_f32(v92, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v92, vaddq_f32(
                        vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v92)),
                        vmulq_f32(v93, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v92)), vmulq_f32(v93, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v92))))))))))), *((float32x4_t *)a2 + 29));
    float32x4_t v95 = vcvtq_f32_s32(vcvtq_s32_f32(v94));
    float32x4_t v96 = vsubq_f32(v95, (float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vcgtq_f32(v95, v94)));
    float32x4_t v97 = vsubq_f32(v94, v96);
    *(int8x16_t *)(v6 + v83) = vbslq_s8(v85, (int8x16_t)v84, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v86), (int8x16_t)vmulq_f32(vaddq_f32(v87, vmulq_f32(v97, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v97, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v97)), vmulq_f32(vmulq_f32(v97, v97),
                                                            vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v97)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v96)), 0x17uLL))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_quicktime_fast_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v34 = 0;
        uint64_t v35 = 16 * v8;
        uint64_t v36 = 16 * v7;
        uint64_t v37 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v38 = 0;
          do
          {
            float32x4_t v39 = v5[v38 / 0x10];
            float32x4_t v40 = vminq_f32(vmaxq_f32(v39, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            v6[v38 / 0x10] = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v39, (int8x16_t)vmulq_f32(v40, v40));
            v38 += 16;
          }
          while (v37 != v38);
          ++v34;
          int v5 = (float32x4_t *)((char *)v5 + v35);
          uint64_t v6 = (int8x16_t *)((char *)v6 + v36);
        }
        while (v34 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      float32x4_t v12 = v5 + 4;
      float32x4_t v13 = v6 + 4;
      do
      {
        unint64_t v14 = 0;
        int8x16_t v15 = v13;
        int8x16_t v16 = v12;
        uint64_t v17 = 2;
        do
        {
          float32x4_t v18 = v16;
          float32x4_t v19 = v15;
          float32x4_t v20 = v5[v17 - 2];
          float32x4_t v21 = v5[v17 - 1];
          float32x4_t v22 = v5[v17];
          float32x4_t v23 = v5[v17 + 1];
          float32x4_t v24 = *((float32x4_t *)a2 + 75);
          float32x4_t v25 = *((float32x4_t *)a2 + 5);
          float32x4_t v26 = vminq_f32(vmaxq_f32(v20, v24), v25);
          float32x4_t v27 = vminq_f32(vmaxq_f32(v21, v24), v25);
          float32x4_t v28 = vminq_f32(vmaxq_f32(v22, v24), v25);
          float32x4_t v29 = vminq_f32(vmaxq_f32(v23, v24), v25);
          int8x16_t v30 = *((int8x16_t *)a2 + 15);
          float32x4_t v31 = &v6[v17];
          v31[-2] = vbslq_s8(v30, (int8x16_t)v20, (int8x16_t)vmulq_f32(v26, v26));
          v31[-1] = vbslq_s8(v30, (int8x16_t)v21, (int8x16_t)vmulq_f32(v27, v27));
          v14 += 4;
          *float32x4_t v31 = vbslq_s8(v30, (int8x16_t)v22, (int8x16_t)vmulq_f32(v28, v28));
          v31[1] = vbslq_s8(v30, (int8x16_t)v23, (int8x16_t)vmulq_f32(v29, v29));
          v17 += 4;
          v16 += 4;
          int8x16_t v15 = v19 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            float32x4_t v32 = *v18++;
            float32x4_t v33 = vminq_f32(vmaxq_f32(v32, *((float32x4_t *)a2 + 75)), *((float32x4_t *)a2 + 5));
            *v19++ = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v32, (int8x16_t)vmulq_f32(v33, v33));
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        uint64_t v6 = (int8x16_t *)((char *)v6 + v10);
        int v5 = (float32x4_t *)((char *)v5 + v11);
        float32x4_t v12 = (float32x4_t *)((char *)v12 + v11);
        float32x4_t v13 = (int8x16_t *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

uint64_t Getinv_quicktime_fixed_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 6);
    while (v5 < 4)
    {
      LODWORD(v73) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v7 += v8;
      v6 += v9;
      if (v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 32;
    do
    {
      float32x4_t v12 = *(float32x4_t *)(v7 + v11 - 32);
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v14 = *(float32x4_t *)(v7 + v11);
      float32x4_t v15 = *(float32x4_t *)(v7 + v11 + 16);
      float32x4_t v16 = *((float32x4_t *)a2 + 75);
      float32x4_t v17 = *((float32x4_t *)a2 + 5);
      float32x4_t v18 = *((float32x4_t *)a2 + 6);
      float32x4_t v19 = vmulq_f32(v18, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v12, v16), v17)));
      float32x4_t v20 = vmulq_f32(v18, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v13, v16), v17)));
      float32x4_t v21 = vmulq_f32(v18, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v14, v16), v17)));
      float32x4_t v22 = vmulq_f32(v18, vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v15, v16), v17)));
      float32x4_t v23 = vcvtq_f32_s32(vcvtq_s32_f32(v19));
      float32x4_t v24 = vcvtq_f32_s32(vcvtq_s32_f32(v20));
      float32x4_t v25 = vcvtq_f32_s32(vcvtq_s32_f32(v21));
      float32x4_t v26 = vcvtq_f32_s32(vcvtq_s32_f32(v22));
      float32x4_t v27 = *((float32x4_t *)a2 + 7);
      float32x4_t v28 = *((float32x4_t *)a2 + 8);
      float32x4_t v29 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v19, v23), v27));
      float32x4_t v30 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v20, v24), v27));
      float32x4_t v31 = vrsqrteq_f32(vaddq_f32(vsubq_f32(v21, v25), v27));
      float32x4_t v32 = vrsqrteq_f32(vaddq_f32(v27, vsubq_f32(v22, v26)));
      float32x4_t v33 = vaddq_f32(v28, v23);
      float32x4_t v34 = vaddq_f32(v28, v24);
      float32x4_t v35 = vaddq_f32(v28, v25);
      float32x4_t v36 = vaddq_f32(v28, v26);
      float32x4_t v37 = *((float32x4_t *)a2 + 9);
      float32x4_t v38 = *((float32x4_t *)a2 + 10);
      float32x4_t v39 = vsubq_f32(v33, vmulq_f32(v29, v37));
      float32x4_t v40 = *((float32x4_t *)a2 + 116);
      float32x4_t v41 = vmulq_f32(v40, v39);
      float32x4_t v42 = vmulq_f32(v40, vsubq_f32(v34, vmulq_f32(v30, v37)));
      float32x4_t v43 = vmulq_f32(v40, vsubq_f32(v35, vmulq_f32(v31, v37)));
      float32x4_t v44 = vmulq_f32(v40, vsubq_f32(v36, vmulq_f32(v32, v37)));
      float32x4_t v45 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
      float32x4_t v46 = vcvtq_f32_s32(vcvtq_s32_f32(v42));
      float32x4_t v47 = vcvtq_f32_s32(vcvtq_s32_f32(v43));
      float32x4_t v48 = vcvtq_f32_s32(vcvtq_s32_f32(v44));
      float32x4_t v49 = vsubq_f32(v45, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v45, v41)));
      float32x4_t v50 = vsubq_f32(v46, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v46, v42)));
      float32x4_t v51 = vsubq_f32(v47, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v47, v43)));
      float32x4_t v52 = vsubq_f32(v48, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v48, v44)));
      float32x4_t v53 = *((float32x4_t *)a2 + 11);
      float32x4_t v54 = *((float32x4_t *)a2 + 12);
      float32x4_t v55 = vmulq_f32(vrecpeq_f32(vsubq_f32(v53, vsubq_f32(v41, v49))), v54);
      float32x4_t v56 = vmulq_f32(vrecpeq_f32(vsubq_f32(v53, vsubq_f32(v42, v50))), v54);
      float32x4_t v57 = vmulq_f32(vrecpeq_f32(vsubq_f32(v53, vsubq_f32(v43, v51))), v54);
      float32x4_t v58 = vmulq_f32(vrecpeq_f32(vsubq_f32(v53, vsubq_f32(v44, v52))), v54);
      float32x4_t v59 = vmaxq_f32(vaddq_f32(vaddq_f32(v49, v38), vmulq_f32(v55, v55)), v16);
      float32x4_t v60 = vmaxq_f32(vaddq_f32(vaddq_f32(v38, v50), vmulq_f32(v56, v56)), v16);
      float32x4_t v61 = vmaxq_f32(vaddq_f32(vaddq_f32(v38, v51), vmulq_f32(v57, v57)), v16);
      float32x4_t v62 = vmaxq_f32(vaddq_f32(vaddq_f32(v38, v52), vmulq_f32(v58, v58)), v16);
      float32x4_t v63 = *((float32x4_t *)a2 + 13);
      float32x4_t v64 = *((float32x4_t *)a2 + 14);
      float32x4_t v65 = vminq_f32(v60, v63);
      float32x4_t v66 = vminq_f32(v61, v63);
      float32x4_t v67 = vminq_f32(v62, v63);
      float32x4_t v68 = vmulq_f32(vminq_f32(v59, v63), v64);
      float32x4_t v69 = vmulq_f32(v65, v64);
      int8x16_t v70 = (int8x16_t)vcvtq_s32_f32(vmulq_f32(v66, v64));
      int8x16_t v71 = *((int8x16_t *)a2 + 15);
      float32x4_t v72 = (int8x16_t *)(v6 + v11);
      v72[-2] = vbslq_s8(v71, (int8x16_t)v12, (int8x16_t)vcvtq_s32_f32(v68));
      v72[-1] = vbslq_s8(v71, (int8x16_t)v13, (int8x16_t)vcvtq_s32_f32(v69));
      *float32x4_t v72 = vbslq_s8(v71, (int8x16_t)v14, v70);
      v72[1] = vbslq_s8(v71, (int8x16_t)v15, (int8x16_t)vcvtq_s32_f32(vmulq_f32(v67, v64)));
      v10 -= 4;
      v11 += 64;
    }
    while (v5 + v10 > 3);
    LODWORD(v73) = -v10;
    if ((int)v73 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v73 = v73;
    do
    {
      float32x4_t v74 = *(float32x4_t *)(v7 + 16 * v73);
      float32x4_t v75 = *((float32x4_t *)a2 + 75);
      float32x4_t v76 = *((float32x4_t *)a2 + 5);
      float32x4_t v77 = vmulq_f32(*((float32x4_t *)a2 + 6), vcvtq_f32_s32((int32x4_t)vminq_f32(vmaxq_f32(v74, v75), v76)));
      float32x4_t v78 = vcvtq_f32_s32(vcvtq_s32_f32(v77));
      float32x4_t v79 = vmulq_f32(*((float32x4_t *)a2 + 116), vsubq_f32(vaddq_f32(*((float32x4_t *)a2 + 8), v78), vmulq_f32(vrsqrteq_f32(vaddq_f32(*((float32x4_t *)a2 + 7), vsubq_f32(v77, v78))), *((float32x4_t *)a2 + 9))));
      float32x4_t v80 = vcvtq_f32_s32(vcvtq_s32_f32(v79));
      float32x4_t v81 = vsubq_f32(v80, (float32x4_t)vandq_s8((int8x16_t)v76, (int8x16_t)vcgtq_f32(v80, v79)));
      float32x4_t v82 = vmulq_f32(vrecpeq_f32(vsubq_f32(*((float32x4_t *)a2 + 11), vsubq_f32(v79, v81))), *((float32x4_t *)a2 + 12));
      *(int8x16_t *)(v6 + 16 * v73++) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v74, (int8x16_t)vcvtq_s32_f32(vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 10), v81), vmulq_f32(v82, v82)), v75), *((float32x4_t *)a2 + 13)), *((float32x4_t *)a2 + 14))));
    }
    while (v73 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_quicktime_nice_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v81 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = *((float32x4_t *)a2 + 5);
      int8x16_t v16 = (int8x16_t)vminq_f32(vmaxq_f32(v13, v14), v15);
      int8x16_t v17 = (int8x16_t)vminq_f32(vmaxq_f32(v12, v14), v15);
      float32x4_t v18 = *((float32x4_t *)a2 + 116);
      int8x16_t v19 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vceqq_f32(v18, v14)), v14);
      float32x4_t v20 = (float32x4_t)vbslq_s8(v19, (int8x16_t)v15, v16);
      float32x4_t v21 = (float32x4_t)vbslq_s8(v19, (int8x16_t)v15, v17);
      int8x16_t v22 = *((int8x16_t *)a2 + 19);
      float32x4_t v23 = *((float32x4_t *)a2 + 20);
      float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v20), (int8x16_t)v15);
      int8x16_t v25 = *((int8x16_t *)a2 + 21);
      float32x4_t v26 = *((float32x4_t *)a2 + 22);
      float32x4_t v27 = (float32x4_t)vorrq_s8(vandq_s8(v22, (int8x16_t)v21), (int8x16_t)v15);
      float32x4_t v28 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v21, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v23, v21)));
      float32x4_t v29 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v23, v20))), v26);
      float32x4_t v30 = *((float32x4_t *)a2 + 23);
      float32x4_t v31 = *((float32x4_t *)a2 + 24);
      float32x4_t v32 = vsubq_f32(v28, v26);
      float32x4_t v33 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v24, v30));
      float32x4_t v34 = (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v27, v30));
      float32x4_t v35 = vaddq_f32(v29, v33);
      float32x4_t v36 = vsubq_f32(vsubq_f32(v24, v15), vmulq_f32(vmulq_f32(v31, v33), v24));
      float32x4_t v37 = vsubq_f32(vsubq_f32(v27, v15), vmulq_f32(vmulq_f32(v31, v34), v27));
      float32x4_t v38 = vmulq_f32(v36, v36);
      float32x4_t v39 = *((float32x4_t *)a2 + 37);
      float32x4_t v40 = *((float32x4_t *)a2 + 38);
      float32x4_t v41 = vaddq_f32(v39, vmulq_f32(v40, v36));
      float32x4_t v42 = vaddq_f32(v39, vmulq_f32(v40, v37));
      float32x4_t v43 = *((float32x4_t *)a2 + 39);
      float32x4_t v44 = *((float32x4_t *)a2 + 40);
      float32x4_t v45 = vaddq_f32(v43, vmulq_f32(v44, v36));
      float32x4_t v46 = vaddq_f32(v43, vmulq_f32(v44, v37));
      float32x4_t v47 = *((float32x4_t *)a2 + 41);
      float32x4_t v48 = *((float32x4_t *)a2 + 42);
      float32x4_t v49 = vaddq_f32(v47, vmulq_f32(v48, v36));
      float32x4_t v50 = vaddq_f32(v47, vmulq_f32(v48, v37));
      float32x4_t v51 = vmulq_f32(v37, v37);
      float32x4_t v52 = vaddq_f32(v50, vmulq_f32(v51, vaddq_f32(v42, vmulq_f32(v51, v46))));
      float32x4_t v53 = vmulq_f32(v36, vaddq_f32(v49, vmulq_f32(v38, vaddq_f32(v41, vmulq_f32(v38, v45)))));
      float32x4_t v54 = *((float32x4_t *)a2 + 43);
      float32x4_t v55 = *((float32x4_t *)a2 + 44);
      float32x4_t v56 = vaddq_f32(vaddq_f32(v32, v34), vmulq_f32(v37, vaddq_f32(v54, vmulq_f32(v37, v52))));
      float32x4_t v57 = vmulq_f32(v18, vaddq_f32(v35, vmulq_f32(v36, vaddq_f32(v54, v53))));
      float32x4_t v58 = vmulq_f32(v18, v56);
      float32x4_t v59 = *((float32x4_t *)a2 + 29);
      float32x4_t v60 = vmaxq_f32(v57, v59);
      float32x4_t v61 = vmaxq_f32(v58, v59);
      float32x4_t v62 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
      float32x4_t v63 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
      float32x4_t v64 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v62, v60)));
      float32x4_t v65 = vsubq_f32(v63, (float32x4_t)vandq_s8((int8x16_t)v15, (int8x16_t)vcgtq_f32(v63, v61)));
      float32x4_t v66 = vsubq_f32(v60, v64);
      float32x4_t v67 = vsubq_f32(v61, v65);
      float32x4_t v68 = *((float32x4_t *)a2 + 45);
      float32x4_t v69 = *((float32x4_t *)a2 + 46);
      float32x4_t v70 = vaddq_f32(v55, vmulq_f32(v68, v66));
      float32x4_t v71 = vaddq_f32(v55, vmulq_f32(v68, v67));
      float32x4_t v73 = *((float32x4_t *)a2 + 47);
      float32x4_t v72 = *((float32x4_t *)a2 + 48);
      float32x4_t v74 = vaddq_f32(v15, vmulq_f32(v66, vaddq_f32(v72, vmulq_f32(v66, vaddq_f32(vaddq_f32(v69, vmulq_f32(v66, v73)), vmulq_f32(vmulq_f32(v66, v66), v70))))));
      float32x4_t v75 = vaddq_f32(v15, vmulq_f32(v67, vaddq_f32(v72, vmulq_f32(v67, vaddq_f32(vaddq_f32(v69, vmulq_f32(v73, v67)), vmulq_f32(vmulq_f32(v67, v67), v71))))));
      int32x4_t v76 = vcvtq_s32_f32(v65);
      int32x4_t v77 = *((int32x4_t *)a2 + 33);
      int8x16_t v78 = (int8x16_t)vmulq_f32(v75, (float32x4_t)vshlq_n_s32(vaddq_s32(v77, v76), 0x17uLL));
      int8x16_t v79 = *((int8x16_t *)a2 + 15);
      float32x4_t v80 = (int8x16_t *)(v6 + v11);
      v80[-1] = vbslq_s8(v79, (int8x16_t)v13, (int8x16_t)vmulq_f32(v74, (float32x4_t)vshlq_n_s32(vaddq_s32(v77, vcvtq_s32_f32(v64)), 0x17uLL)));
      *float32x4_t v80 = vbslq_s8(v79, (int8x16_t)v12, v78);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v81 = -v10;
    if (v81 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v82 = 16 * v81;
    float32x4_t v83 = *(float32x4_t *)(v7 + v82);
    float32x4_t v84 = *((float32x4_t *)a2 + 5);
    float32x4_t v85 = *((float32x4_t *)a2 + 116);
    float32x4_t v86 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v84, (int8x16_t)vceqq_f32(v85, *((float32x4_t *)a2 + 75))), *((float32x4_t *)a2 + 75)), (int8x16_t)v84, (int8x16_t)vminq_f32(vmaxq_f32(v83, *((float32x4_t *)a2 + 75)), v84));
    float32x4_t v87 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v86), (int8x16_t)v84);
    float32x4_t v88 = (float32x4_t)vandq_s8((int8x16_t)v84, (int8x16_t)vcgtq_f32(v87, *((float32x4_t *)a2 + 23)));
    float32x4_t v89 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v86, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v86))), *((float32x4_t *)a2 + 22)), v88);
    float32x4_t v90 = vsubq_f32(vsubq_f32(v87, v84), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v88), v87));
    float32x4_t v91 = vmulq_f32(v90, v90);
    float32x4_t v92 = vmaxq_f32(vmulq_f32(v85, vaddq_f32(v89, vmulq_f32(v90, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v90, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v90)), vmulq_f32(v91, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v90)), vmulq_f32(v91, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v90))))))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v93 = vcvtq_f32_s32(vcvtq_s32_f32(v92));
    float32x4_t v94 = vsubq_f32(v93, (float32x4_t)vandq_s8((int8x16_t)v84, (int8x16_t)vcgtq_f32(v93, v92)));
    float32x4_t v95 = vsubq_f32(v92, v94);
    *(int8x16_t *)(v6 + v82) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v83, (int8x16_t)vmulq_f32(vaddq_f32(v84, vmulq_f32(v95, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v95, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v95)), vmulq_f32(vmulq_f32(v95, v95), vaddq_f32(*((float32x4_t *)a2 + 44),
                                                            vmulq_f32(*((float32x4_t *)a2 + 45), v95)))))))),
                                              (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v94)), 0x17uLL)));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_quicktime_half_sat_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v62 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 75);
      float32x4_t v15 = vmaxq_f32(v13, v14);
      float32x4_t v16 = vmaxq_f32(v12, v14);
      float32x4_t v17 = *((float32x4_t *)a2 + 5);
      float32x4_t v18 = vminq_f32(v15, v17);
      float32x4_t v19 = vminq_f32(v16, v17);
      int8x16_t v20 = *((int8x16_t *)a2 + 19);
      float32x4_t v21 = *((float32x4_t *)a2 + 20);
      float32x4_t v22 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v18), (int8x16_t)v17);
      float32x4_t v23 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v19), (int8x16_t)v17);
      int8x16_t v24 = *((int8x16_t *)a2 + 21);
      float32x4_t v25 = *((float32x4_t *)a2 + 22);
      float32x4_t v26 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v18, 0x17uLL)), (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v21, v18)));
      float32x4_t v27 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v19, 0x17uLL)), (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v21, v19)));
      float32x4_t v28 = *((float32x4_t *)a2 + 23);
      float32x4_t v29 = *((float32x4_t *)a2 + 24);
      float32x4_t v30 = (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v22, v28));
      float32x4_t v31 = (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v23, v28));
      float32x4_t v32 = vaddq_f32(vsubq_f32(v26, v25), v30);
      float32x4_t v33 = vsubq_f32(vsubq_f32(v22, v17), vmulq_f32(vmulq_f32(v29, v30), v22));
      float32x4_t v34 = vsubq_f32(vsubq_f32(v23, v17), vmulq_f32(vmulq_f32(v29, v31), v23));
      float32x4_t v35 = *((float32x4_t *)a2 + 25);
      float32x4_t v36 = *((float32x4_t *)a2 + 26);
      float32x4_t v37 = *((float32x4_t *)a2 + 27);
      float32x4_t v38 = *((float32x4_t *)a2 + 28);
      float32x4_t v39 = vaddq_f32(vaddq_f32(vsubq_f32(v27, v25), v31), vmulq_f32(v34, vaddq_f32(vaddq_f32(v37, vmulq_f32(v34, v38)), vmulq_f32(vmulq_f32(v34, v34), vaddq_f32(v35, vmulq_f32(v36, v34))))));
      float32x4_t v40 = *((float32x4_t *)a2 + 116);
      float32x4_t v41 = vmulq_f32(v40, vaddq_f32(v32, vmulq_f32(v33, vaddq_f32(vaddq_f32(v37, vmulq_f32(v33, v38)), vmulq_f32(vmulq_f32(v33, v33), vaddq_f32(v35, vmulq_f32(v36, v33)))))));
      float32x4_t v42 = vmulq_f32(v40, v39);
      float32x4_t v44 = *((float32x4_t *)a2 + 29);
      float32x4_t v43 = *((float32x4_t *)a2 + 30);
      float32x4_t v45 = vmaxq_f32(v41, v44);
      float32x4_t v46 = vmaxq_f32(v42, v44);
      float32x4_t v47 = vcvtq_f32_s32(vcvtq_s32_f32(v45));
      float32x4_t v48 = vcvtq_f32_s32(vcvtq_s32_f32(v46));
      float32x4_t v49 = vsubq_f32(v47, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v47, v45)));
      float32x4_t v50 = vsubq_f32(v48, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)vcgtq_f32(v48, v46)));
      float32x4_t v51 = vsubq_f32(v45, v49);
      float32x4_t v52 = vsubq_f32(v46, v50);
      float32x4_t v53 = *((float32x4_t *)a2 + 31);
      float32x4_t v54 = *((float32x4_t *)a2 + 32);
      float32x4_t v55 = vmulq_f32(v52, vaddq_f32(v54, vmulq_f32(v52, vaddq_f32(v43, vmulq_f32(v53, v52)))));
      float32x4_t v56 = vaddq_f32(v17, vmulq_f32(v51, vaddq_f32(v54, vmulq_f32(v51, vaddq_f32(v43, vmulq_f32(v53, v51))))));
      int32x4_t v57 = vcvtq_s32_f32(v49);
      int32x4_t v58 = *((int32x4_t *)a2 + 33);
      int8x16_t v59 = (int8x16_t)vmulq_f32(vaddq_f32(v17, v55), (float32x4_t)vshlq_n_s32(vaddq_s32(v58, vcvtq_s32_f32(v50)), 0x17uLL));
      int8x16_t v60 = *((int8x16_t *)a2 + 15);
      float32x4_t v61 = (int8x16_t *)(v6 + v11);
      v61[-1] = vbslq_s8(v60, (int8x16_t)v13, (int8x16_t)vmulq_f32(v56, (float32x4_t)vshlq_n_s32(vaddq_s32(v58, v57), 0x17uLL)));
      *float32x4_t v61 = vbslq_s8(v60, (int8x16_t)v12, v59);
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v62 = -v10;
    if (v62 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v63 = 16 * v62;
    float32x4_t v64 = *(float32x4_t *)(v7 + v63);
    float32x4_t v65 = *((float32x4_t *)a2 + 5);
    float32x4_t v66 = vminq_f32(vmaxq_f32(v64, *((float32x4_t *)a2 + 75)), v65);
    float32x4_t v67 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v66), (int8x16_t)v65);
    float32x4_t v68 = (float32x4_t)vandq_s8((int8x16_t)v65, (int8x16_t)vcgtq_f32(v67, *((float32x4_t *)a2 + 23)));
    float32x4_t v69 = vsubq_f32(vsubq_f32(v67, v65), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v68), v67));
    float32x4_t v70 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 116), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v66, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v66))), *((float32x4_t *)a2 + 22)), v68), vmulq_f32(v69, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v69, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v69, v69), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v69))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v71 = vcvtq_f32_s32(vcvtq_s32_f32(v70));
    float32x4_t v72 = vsubq_f32(v71, (float32x4_t)vandq_s8((int8x16_t)v65, (int8x16_t)vcgtq_f32(v71, v70)));
    float32x4_t v73 = vsubq_f32(v70, v72);
    *(int8x16_t *)(v6 + v63) = vbslq_s8(*((int8x16_t *)a2 + 15), (int8x16_t)v64, (int8x16_t)vmulq_f32(vaddq_f32(v65, vmulq_f32(v73, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v73, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v73)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v72)), 0x17uLL)));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_quicktime_half_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v72 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 82);
      int8x16_t v15 = (int8x16_t)vmaxq_f32(v13, v14);
      int8x16_t v16 = (int8x16_t)vmaxq_f32(v12, v14);
      int8x16_t v17 = *((int8x16_t *)a2 + 15);
      float32x4_t v18 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v13, v15);
      float32x4_t v19 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v12, v16);
      float32x4_t v20 = *((float32x4_t *)a2 + 75);
      int8x16_t v21 = (int8x16_t)vcgtq_f32(v20, v18);
      int8x16_t v22 = (int8x16_t)vcgtq_f32(v20, v19);
      float32x4_t v23 = *((float32x4_t *)a2 + 5);
      int32x4_t v25 = *((int32x4_t *)a2 + 33);
      int8x16_t v24 = *((int8x16_t *)a2 + 34);
      float32x4_t v26 = vmulq_f32(v18, (float32x4_t)vbslq_s8(v21, v24, (int8x16_t)v23));
      float32x4_t v27 = vmulq_f32(v19, (float32x4_t)vbslq_s8(v22, v24, (int8x16_t)v23));
      float32x4_t v28 = *((float32x4_t *)a2 + 90);
      float32x4_t v29 = vminq_f32(v26, v28);
      float32x4_t v30 = vminq_f32(v27, v28);
      int8x16_t v31 = *((int8x16_t *)a2 + 19);
      float32x4_t v32 = *((float32x4_t *)a2 + 20);
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8(v31, (int8x16_t)v29), (int8x16_t)v23);
      float32x4_t v34 = (float32x4_t)vorrq_s8(vandq_s8(v31, (int8x16_t)v30), (int8x16_t)v23);
      int8x16_t v35 = *((int8x16_t *)a2 + 21);
      float32x4_t v36 = *((float32x4_t *)a2 + 22);
      float32x4_t v37 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v32, v30)));
      float32x4_t v38 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v29, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v32, v29))), v36);
      float32x4_t v39 = *((float32x4_t *)a2 + 23);
      float32x4_t v40 = *((float32x4_t *)a2 + 24);
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v33, v39));
      float32x4_t v42 = (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v34, v39));
      float32x4_t v43 = vaddq_f32(v38, v41);
      float32x4_t v44 = vaddq_f32(vsubq_f32(v37, v36), v42);
      float32x4_t v45 = vsubq_f32(vsubq_f32(v33, v23), vmulq_f32(vmulq_f32(v40, v41), v33));
      float32x4_t v46 = vsubq_f32(vsubq_f32(v34, v23), vmulq_f32(vmulq_f32(v40, v42), v34));
      float32x4_t v47 = *((float32x4_t *)a2 + 25);
      float32x4_t v48 = *((float32x4_t *)a2 + 26);
      float32x4_t v49 = vaddq_f32(v47, vmulq_f32(v48, v45));
      float32x4_t v50 = vaddq_f32(v47, vmulq_f32(v48, v46));
      float32x4_t v51 = *((float32x4_t *)a2 + 27);
      float32x4_t v52 = *((float32x4_t *)a2 + 28);
      float32x4_t v53 = *((float32x4_t *)a2 + 116);
      float32x4_t v54 = vmulq_f32(v53, vaddq_f32(v43, vmulq_f32(v45, vaddq_f32(vaddq_f32(v51, vmulq_f32(v45, v52)), vmulq_f32(vmulq_f32(v45, v45), v49)))));
      float32x4_t v55 = vmulq_f32(v53, vaddq_f32(v44, vmulq_f32(v46, vaddq_f32(vaddq_f32(v51, vmulq_f32(v46, v52)), vmulq_f32(vmulq_f32(v46, v46), v50)))));
      float32x4_t v56 = *((float32x4_t *)a2 + 29);
      float32x4_t v57 = *((float32x4_t *)a2 + 30);
      float32x4_t v58 = vmaxq_f32(v54, v56);
      float32x4_t v59 = vmaxq_f32(v55, v56);
      float32x4_t v60 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v61 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v62 = vsubq_f32(v60, (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v60, v58)));
      float32x4_t v63 = vsubq_f32(v61, (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v61, v59)));
      float32x4_t v64 = vsubq_f32(v58, v62);
      float32x4_t v65 = vsubq_f32(v59, v63);
      float32x4_t v66 = *((float32x4_t *)a2 + 31);
      float32x4_t v67 = *((float32x4_t *)a2 + 32);
      float32x4_t v68 = vaddq_f32(v23, vmulq_f32(v64, vaddq_f32(v67, vmulq_f32(v64, vaddq_f32(v57, vmulq_f32(v66, v64))))));
      float32x4_t v69 = vaddq_f32(v23, vmulq_f32(v65, vaddq_f32(v67, vmulq_f32(v65, vaddq_f32(v57, vmulq_f32(v66, v65))))));
      int8x16_t v70 = *((int8x16_t *)a2 + 36);
      float32x4_t v71 = (int8x16_t *)(v6 + v11);
      v71[-1] = vbslq_s8(v17, (int8x16_t)v13, veorq_s8(vandq_s8(v70, (int8x16_t)v18), (int8x16_t)vmulq_f32(v68, (float32x4_t)vshlq_n_s32(vaddq_s32(v25, vcvtq_s32_f32(v62)), 0x17uLL))));
      *float32x4_t v71 = vbslq_s8(v17, (int8x16_t)v12, veorq_s8(vandq_s8(v70, (int8x16_t)v19), (int8x16_t)vmulq_f32(v69, (float32x4_t)vshlq_n_s32(vaddq_s32(v25, vcvtq_s32_f32(v63)), 0x17uLL))));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v72 = -v10;
    if (v72 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v73 = 16 * v72;
    float32x4_t v74 = *(float32x4_t *)(v7 + v73);
    int8x16_t v75 = *((int8x16_t *)a2 + 15);
    float32x4_t v76 = (float32x4_t)vbslq_s8(v75, (int8x16_t)v74, (int8x16_t)vmaxq_f32(v74, *((float32x4_t *)a2 + 82)));
    float32x4_t v77 = *((float32x4_t *)a2 + 5);
    float32x4_t v78 = vminq_f32(vmulq_f32(v76, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 75), v76), *((int8x16_t *)a2 + 34), (int8x16_t)v77)), *((float32x4_t *)a2 + 90));
    float32x4_t v79 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v78), (int8x16_t)v77);
    float32x4_t v80 = (float32x4_t)vandq_s8((int8x16_t)v77, (int8x16_t)vcgtq_f32(v79, *((float32x4_t *)a2 + 23)));
    float32x4_t v81 = vsubq_f32(vsubq_f32(v79, v77), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v80), v79));
    float32x4_t v82 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 116), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v78, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v78))), *((float32x4_t *)a2 + 22)), v80), vmulq_f32(v81, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 27), vmulq_f32(v81, *((float32x4_t *)a2 + 28))), vmulq_f32(vmulq_f32(v81, v81), vaddq_f32(*((float32x4_t *)a2 + 25), vmulq_f32(*((float32x4_t *)a2 + 26), v81))))))),
            *((float32x4_t *)a2 + 29));
    float32x4_t v83 = vcvtq_f32_s32(vcvtq_s32_f32(v82));
    float32x4_t v84 = vsubq_f32(v83, (float32x4_t)vandq_s8((int8x16_t)v77, (int8x16_t)vcgtq_f32(v83, v82)));
    float32x4_t v85 = vsubq_f32(v82, v84);
    *(int8x16_t *)(v6 + v73) = vbslq_s8(v75, (int8x16_t)v74, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v76), (int8x16_t)vmulq_f32(vaddq_f32(v77, vmulq_f32(v85, vaddq_f32(*((float32x4_t *)a2 + 32), vmulq_f32(v85, vaddq_f32(*((float32x4_t *)a2 + 30), vmulq_f32(*((float32x4_t *)a2 + 31), v85)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v84)), 0x17uLL))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t Getinv_quicktime_nice_unpremultTile(HGTile *a1, HGToneCurve::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = 16 * *((int *)a1 + 6);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v82 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v7 += v9;
      v6 += v8;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v10 = 0;
    uint64_t v11 = 16;
    do
    {
      float32x4_t v13 = *(float32x4_t *)(v7 + v11 - 16);
      float32x4_t v12 = *(float32x4_t *)(v7 + v11);
      float32x4_t v14 = *((float32x4_t *)a2 + 82);
      int8x16_t v15 = (int8x16_t)vmaxq_f32(v13, v14);
      int8x16_t v16 = (int8x16_t)vmaxq_f32(v12, v14);
      int8x16_t v17 = *((int8x16_t *)a2 + 15);
      float32x4_t v18 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v13, v15);
      float32x4_t v19 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v12, v16);
      float32x4_t v20 = *((float32x4_t *)a2 + 75);
      float32x4_t v21 = *((float32x4_t *)a2 + 5);
      int32x4_t v23 = *((int32x4_t *)a2 + 33);
      int8x16_t v22 = *((int8x16_t *)a2 + 34);
      float32x4_t v24 = vmulq_f32(v18, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v20, v18), v22, (int8x16_t)v21));
      float32x4_t v25 = vmulq_f32(v19, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v20, v19), v22, (int8x16_t)v21));
      float32x4_t v26 = *((float32x4_t *)a2 + 90);
      float32x4_t v27 = *((float32x4_t *)a2 + 116);
      int8x16_t v28 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vceqq_f32(v27, v20)), v20);
      float32x4_t v29 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v21, (int8x16_t)vminq_f32(v24, v26));
      float32x4_t v30 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v21, (int8x16_t)vminq_f32(v25, v26));
      int8x16_t v32 = *((int8x16_t *)a2 + 19);
      float32x4_t v31 = *((float32x4_t *)a2 + 20);
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8(v32, (int8x16_t)v29), (int8x16_t)v21);
      float32x4_t v34 = (float32x4_t)vorrq_s8(vandq_s8(v32, (int8x16_t)v30), (int8x16_t)v21);
      int8x16_t v35 = *((int8x16_t *)a2 + 21);
      float32x4_t v36 = *((float32x4_t *)a2 + 22);
      float32x4_t v37 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v31, v30)));
      float32x4_t v38 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v29, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v31, v29))), v36);
      float32x4_t v39 = *((float32x4_t *)a2 + 23);
      float32x4_t v40 = *((float32x4_t *)a2 + 24);
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v33, v39));
      float32x4_t v42 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v34, v39));
      float32x4_t v43 = vaddq_f32(v38, v41);
      float32x4_t v44 = vaddq_f32(vsubq_f32(v37, v36), v42);
      float32x4_t v45 = vsubq_f32(vsubq_f32(v33, v21), vmulq_f32(vmulq_f32(v40, v41), v33));
      float32x4_t v46 = vsubq_f32(vsubq_f32(v34, v21), vmulq_f32(vmulq_f32(v40, v42), v34));
      float32x4_t v47 = vmulq_f32(v45, v45);
      float32x4_t v48 = *((float32x4_t *)a2 + 38);
      float32x4_t v49 = *((float32x4_t *)a2 + 39);
      int8x16_t v51 = *((int8x16_t *)a2 + 36);
      float32x4_t v50 = *((float32x4_t *)a2 + 37);
      float32x4_t v52 = vaddq_f32(v50, vmulq_f32(v48, v45));
      float32x4_t v53 = vaddq_f32(v50, vmulq_f32(v48, v46));
      float32x4_t v54 = *((float32x4_t *)a2 + 40);
      float32x4_t v55 = *((float32x4_t *)a2 + 41);
      float32x4_t v56 = vaddq_f32(v49, vmulq_f32(v54, v45));
      float32x4_t v57 = vaddq_f32(v49, vmulq_f32(v54, v46));
      float32x4_t v58 = *((float32x4_t *)a2 + 42);
      float32x4_t v59 = *((float32x4_t *)a2 + 43);
      float32x4_t v60 = vaddq_f32(v55, vmulq_f32(v58, v45));
      float32x4_t v61 = vaddq_f32(v55, vmulq_f32(v58, v46));
      float32x4_t v62 = vmulq_f32(v46, v46);
      float32x4_t v63 = vmulq_f32(v27, vaddq_f32(v44, vmulq_f32(v46, vaddq_f32(v59, vmulq_f32(v46, vaddq_f32(v61, vmulq_f32(v62, vaddq_f32(v53, vmulq_f32(v62, v57)))))))));
      float32x4_t v64 = *((float32x4_t *)a2 + 29);
      float32x4_t v65 = vmaxq_f32(vmulq_f32(v27, vaddq_f32(v43, vmulq_f32(v45, vaddq_f32(v59, vmulq_f32(v45, vaddq_f32(v60, vmulq_f32(v47, vaddq_f32(v52, vmulq_f32(v47, v56))))))))), v64);
      float32x4_t v66 = vmaxq_f32(v63, v64);
      float32x4_t v67 = vcvtq_f32_s32(vcvtq_s32_f32(v65));
      float32x4_t v68 = vcvtq_f32_s32(vcvtq_s32_f32(v66));
      float32x4_t v69 = vsubq_f32(v67, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v67, v65)));
      float32x4_t v70 = vsubq_f32(v68, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v68, v66)));
      float32x4_t v71 = vsubq_f32(v65, v69);
      float32x4_t v72 = vsubq_f32(v66, v70);
      float32x4_t v73 = *((float32x4_t *)a2 + 44);
      float32x4_t v74 = *((float32x4_t *)a2 + 45);
      float32x4_t v75 = vaddq_f32(v73, vmulq_f32(v74, v71));
      float32x4_t v76 = vaddq_f32(v73, vmulq_f32(v74, v72));
      float32x4_t v77 = *((float32x4_t *)a2 + 46);
      float32x4_t v78 = *((float32x4_t *)a2 + 47);
      float32x4_t v79 = vaddq_f32(vaddq_f32(v77, vmulq_f32(v78, v72)), vmulq_f32(vmulq_f32(v72, v72), v76));
      float32x4_t v80 = *((float32x4_t *)a2 + 48);
      float32x4_t v81 = (int8x16_t *)(v6 + v11);
      v81[-1] = vbslq_s8(v17, (int8x16_t)v13, veorq_s8(vandq_s8(v51, (int8x16_t)v18), (int8x16_t)vmulq_f32(vaddq_f32(v21, vmulq_f32(v71, vaddq_f32(v80, vmulq_f32(v71, vaddq_f32(vaddq_f32(v77, vmulq_f32(v71, v78)), vmulq_f32(vmulq_f32(v71, v71), v75)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v23, vcvtq_s32_f32(v69)), 0x17uLL))));
      *float32x4_t v81 = vbslq_s8(v17, (int8x16_t)v12, veorq_s8(vandq_s8(v51, (int8x16_t)v19), (int8x16_t)vmulq_f32(vaddq_f32(v21, vmulq_f32(v72, vaddq_f32(v80, vmulq_f32(v72, v79)))), (float32x4_t)vshlq_n_s32(vaddq_s32(v23, vcvtq_s32_f32(v70)), 0x17uLL))));
      v10 -= 2;
      v11 += 32;
    }
    while (v5 + v10 > 1);
    int v82 = -v10;
    if (v82 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v83 = 16 * v82;
    float32x4_t v84 = *(float32x4_t *)(v7 + v83);
    int8x16_t v85 = *((int8x16_t *)a2 + 15);
    float32x4_t v86 = (float32x4_t)vbslq_s8(v85, (int8x16_t)v84, (int8x16_t)vmaxq_f32(v84, *((float32x4_t *)a2 + 82)));
    float32x4_t v87 = *((float32x4_t *)a2 + 5);
    float32x4_t v88 = *((float32x4_t *)a2 + 116);
    float32x4_t v89 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vceqq_f32(v88, *((float32x4_t *)a2 + 75))), *((float32x4_t *)a2 + 75)), (int8x16_t)v87, (int8x16_t)vminq_f32(vmulq_f32(v86, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 75), v86), *((int8x16_t *)a2 + 34), (int8x16_t)v87)), *((float32x4_t *)a2 + 90)));
    float32x4_t v90 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 19), (int8x16_t)v89), (int8x16_t)v87);
    float32x4_t v91 = (float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vcgtq_f32(v90, *((float32x4_t *)a2 + 23)));
    float32x4_t v92 = vsubq_f32(vsubq_f32(v90, v87), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 24), v91), v90));
    float32x4_t v93 = vmulq_f32(v92, v92);
    float32x4_t v94 = vmaxq_f32(vmulq_f32(v88, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v89, 0x17uLL)), (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 21), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 20), v89))), *((float32x4_t *)a2 + 22)), v91), vmulq_f32(v92, vaddq_f32(*((float32x4_t *)a2 + 43), vmulq_f32(v92, vaddq_f32(
                        vaddq_f32(*((float32x4_t *)a2 + 41), vmulq_f32(*((float32x4_t *)a2 + 42), v92)),
                        vmulq_f32(v93, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 37), vmulq_f32(*((float32x4_t *)a2 + 38), v92)), vmulq_f32(v93, vaddq_f32(*((float32x4_t *)a2 + 39), vmulq_f32(*((float32x4_t *)a2 + 40), v92))))))))))), *((float32x4_t *)a2 + 29));
    float32x4_t v95 = vcvtq_f32_s32(vcvtq_s32_f32(v94));
    float32x4_t v96 = vsubq_f32(v95, (float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vcgtq_f32(v95, v94)));
    float32x4_t v97 = vsubq_f32(v94, v96);
    *(int8x16_t *)(v6 + v83) = vbslq_s8(v85, (int8x16_t)v84, veorq_s8(vandq_s8(*((int8x16_t *)a2 + 36), (int8x16_t)v86), (int8x16_t)vmulq_f32(vaddq_f32(v87, vmulq_f32(v97, vaddq_f32(*((float32x4_t *)a2 + 48), vmulq_f32(v97, vaddq_f32(vaddq_f32(*((float32x4_t *)a2 + 46), vmulq_f32(*((float32x4_t *)a2 + 47), v97)), vmulq_f32(vmulq_f32(v97, v97),
                                                            vaddq_f32(*((float32x4_t *)a2 + 44), vmulq_f32(*((float32x4_t *)a2 + 45), v97)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*((int32x4_t *)a2 + 33), vcvtq_s32_f32(v96)), 0x17uLL))));
    goto LABEL_3;
  }
  return 0;
}

uint64_t HGHWBlendFlipped::AllocateStates(HGHWBlendFlipped *this, HGRenderer *a2)
{
  uint64_t result = (*(uint64_t (**)(HGRenderer *))(*(void *)a2 + 304))(a2);
  if (!result)
  {
    if ((uint64_t)(*((void *)this + 57) - *((void *)this + 56)) >> 3) {
      return result;
    }
LABEL_5:
    operator new();
  }
  uint64_t result = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 5);
  if (result > (unint64_t)((uint64_t)(*((void *)this + 57) - *((void *)this + 56)) >> 3)) {
    goto LABEL_5;
  }
  return result;
}

void sub_1B78A9064(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1000C40811E05F4);
  _Unwind_Resume(a1);
}

uint64_t HGHWBlendFlipped::DeleteStates(uint64_t this)
{
  unint64_t v1 = *(void *)(this + 456) - *(void *)(this + 448);
  if ((int)(v1 >> 3) >= 1)
  {
    uint64_t v2 = this;
    unint64_t v3 = (v1 >> 3) + 1;
    do
    {
      this = *(void *)(*(void *)(v2 + 448) + 8 * (v3 - 2));
      if (this) {
        this = MEMORY[0x1BA9BFBA0](this, 0x1000C40811E05F4);
      }
      --v3;
    }
    while (v3 > 1);
  }
  return this;
}

uint64_t HGHWBlendFlipped::Bind(HGHWBlendFlipped *this, HGHandler *a2)
{
  if (*((void *)this + 56) != *((void *)this + 57))
  {
    (*(void (**)(HGHWBlendFlipped *, void))(*(void *)this + 616))(this, 0);
    (*(void (**)(HGHandler *, void, void, uint64_t))(*(void *)a2 + 144))(a2, 0, **((void **)this + 56), 1);
    unsigned int v4 = *((_DWORD *)this + 106);
    if (v4 - 9 <= 0x20 && HGHWBlendFlipped::GetGammaBlendMode(this, v4, *((float *)this + 105)) == 1)
    {
      (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 144))(a2, 1, **((void **)this + 56) + 16, 1);
      if (*((_DWORD *)this + 106) != 26) {
        (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 144))(a2, 2, **((void **)this + 56) + 32, 1);
      }
    }
  }
  return 0;
}

float HGHWBlendFlipped::UpdateLocalParameters(HGHWBlendFlipped *this, int a2, float result)
{
  uint64_t v3 = *((void *)this + 56);
  if ((int)((unint64_t)(*((void *)this + 57) - v3) >> 3) > a2)
  {
    if ((*((_DWORD *)this + 106) & 0xFFFFFFFE) == 0x24 && !*((unsigned char *)this + 481))
    {
      float v6 = *((float *)this + 104);
      v5.f32[0] = v6 * *((float *)this + 124);
      v5.f32[1] = v6 * *((float *)this + 125);
      v5.f32[2] = v6 * *((float *)this + 126);
      v5.f32[3] = v6;
    }
    else
    {
      unsigned int v4 = (const float *)((char *)this + 416);
      float32x4_t v5 = vld1q_dup_f32(v4);
    }
    uint64_t v7 = 8 * a2;
    *(float32x4_t *)*(void *)(v3 + v7) = v5;
    __asm { FMOV            V1.4S, #1.0 }
    HIDWORD(v13) = HIDWORD(_Q1);
    *(float *)&long long v13 = 1.0 / *((float *)this + 105);
    *((float *)&v13 + 1) = *(float *)&v13;
    *((float *)&v13 + 2) = *(float *)&v13;
    *(_OWORD *)(*(void *)(*((void *)this + 56) + v7) + 16) = v13;
    uint64_t result = *((float *)this + 105);
    *(float *)&_Q1 = result;
    *((float *)&_Q1 + 1) = result;
    *((float *)&_Q1 + 2) = result;
    *(_OWORD *)(*(void *)(*((void *)this + 56) + v7) + 32) = _Q1;
  }
  return result;
}

uint64_t HGHWBlendFlipped::RenderTile(float32x2_t *this, HGTile *a2, unsigned int a3, float *a4)
{
  uint64_t v4 = *(int *)(*((void *)a2 + 42) + 160);
  float32x2_t v5 = this[56];
  if ((int)v4 >= (int)((*(void *)&this[57] - *(void *)&v5) >> 3)) {
    return 0;
  }
  if ((a3 & 0xFFFFFFFE) == 0x24 && !this[60].i8[1])
  {
    *(float32x2_t *)&long long v8 = vmul_f32(*(float32x2_t *)a4, this[62]);
    *((float *)&v8 + 2) = this[63].f32[0] * a4[2];
  }
  else
  {
    *(void *)&long long v8 = *(void *)a4;
    *((float *)&v8 + 2) = a4[2];
  }
  *((float *)&v8 + 3) = a4[3];
  *(_OWORD *)*(void *)(*(void *)&v5 + 8 * v4) = v8;
  *(_OWORD *)(*(void *)(*(void *)&this[56] + 8 * v4) + 16) = *((_OWORD *)a4 + 1);
  *(_OWORD *)(*(void *)(*(void *)&this[56] + 8 * v4) + 32) = *((_OWORD *)a4 + 2);
  if (*((void *)a2 + 10) && *((void *)a2 + 12) && a3 - 9 <= 0x20)
  {
    int v10 = (uint64_t (*)(HGTile *, uint64_t, float32x2_t *))*(&s_func_glblend_table
                                                                    + 3 * a3
                                                                    + (int)HGHWBlendFlipped::GetGammaBlendMode((HGHWBlendFlipped *)this, a3, a4[8])- 27);
    uint64_t v11 = *(void *)(*(void *)&this[56] + 8 * v4);
    return v10(a2, v11, this);
  }
  else
  {
    return HGLegacyBlend::RenderTile((HGLegacyBlend *)this, a2, a3, a4);
  }
}

uint64_t HGHWBlendFlipped::GetProgram(HGHWBlendFlipped *this, HGRenderer *a2)
{
  unsigned int v3 = *((_DWORD *)this + 106);
  if (v3 - 9 > 0x20)
  {
    return HGLegacyBlend::GetProgram(this, a2);
  }
  else
  {
    uint64_t v4 = *(&s_arb_glblend_table[3 * v3 - 27] + (int)HGHWBlendFlipped::GetGammaBlendMode(this, v3, *((float *)this + 105)));
    return v4(a2);
  }
}

uint64_t HGHWBlendFlipped::InitProgramDescriptor(HGHWBlendFlipped *this, HGProgramDescriptor *a2)
{
  unsigned int v3 = *((_DWORD *)this + 106);
  if (v3 - 9 > 0x20)
  {
    return HGLegacyBlend::InitProgramDescriptor((HGNode *)this, a2);
  }
  else
  {
    uint64_t v4 = *(&s_programdesc_glblend_table[3 * v3 - 27]
         + (int)HGHWBlendFlipped::GetGammaBlendMode(this, v3, *((float *)this + 105)));
    return v4(a2);
  }
}

const char *HGHWBlendFlipped::GetOpacityProgram(HGHWBlendFlipped *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000236\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = float4(r0)*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=5499c239:9891868e:bd9ea6d3:bd30d467\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000228\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = r0*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=6eae314a:ee581af3:fdfce447:74b07bd6\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000001f6\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = r0*hg_ProgramLocal0;\n"
           "}\n"
           "//MD5=78149511:5c47b7fc:9d3dfb0a:c601ba4b\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

const char *HGHWBlendFlipped::GetMetalOpacityProgram(HGHWBlendFlipped *this, HGRenderer *a2)
{
  uint64_t v3 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 32);
  (*(void (**)(HGRenderer *, uint64_t, uint64_t))(*(void *)a2 + 120))(a2, 32, 396048);
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      float32x2_t v5 = "//Metal1.0     \n"
    }
           "//LEN=0000000236\n"
           "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
           "    const constant float4* hg_Params [[ buffer(0) ]], \n"
           "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
           "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
           "{\n"
           "    half4 r0;\n"
           "    FragmentOut output;\n"
           "\n"
           "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
           "    output.color0 = float4(r0)*hg_Params[0];\n"
           "    return output;\n"
           "}\n"
           "//MD5=5499c239:9891868e:bd9ea6d3:bd30d467\n"
           "//SIG=00400000:00000001:00000001:00000001:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      float32x2_t v5 = "//Metal1.0     \n"
    }
           "//LEN=0000000228\n"
           "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
           "    const constant float4* hg_Params [[ buffer(0) ]], \n"
           "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
           "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
           "{\n"
           "    float4 r0;\n"
           "    FragmentOut output;\n"
           "\n"
           "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
           "    output.color0 = r0*hg_Params[0];\n"
           "    return output;\n"
           "}\n"
           "//MD5=6eae314a:ee581af3:fdfce447:74b07bd6\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    float32x2_t v5 = 0;
  }
  else
  {
    float32x2_t v5 = "//GLfs2.0      \n"
         "//LEN=00000001f6\n"
         "#ifndef GL_ES\n"
         "#define lowp\n"
         "#define mediump\n"
         "#define highp\n"
         "#endif\n"
         "#define defaultp mediump\n"
         "uniform defaultp sampler2D hg_Texture0;\n"
         "uniform defaultp vec4 hg_ProgramLocal0;\n"
         "varying highp vec4 hg_TexCoord0;\n"
         "void main()\n"
         "{\n"
         "    defaultp vec4 r0;\n"
         "\n"
         "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
         "    gl_FragColor = r0*hg_ProgramLocal0;\n"
         "}\n"
         "//MD5=78149511:5c47b7fc:9d3dfb0a:c601ba4b\n"
         "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
  (*(void (**)(HGRenderer *, uint64_t, uint64_t))(*(void *)a2 + 120))(a2, 32, v3);
  return v5;
}

double HGHWBlendFlipped::State::State(HGHWBlendFlipped::State *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = _Q1;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((_OWORD *)this + 5) = xmmword_1B7E752F0;
  *((int32x4_t *)this + 6) = vdupq_n_s32(0x358637BDu);
  *((int32x4_t *)this + 7) = vdupq_n_s32(0x3F804020u);
  *((_OWORD *)this + 8) = xmmword_1B7E75900;
  *((_OWORD *)this + 9) = xmmword_1B7E75910;
  *((int32x4_t *)this + 10) = vdupq_n_s32(0x7F800000u);
  *((_OWORD *)this + 11) = xmmword_1B7E75930;
  *((_OWORD *)this + 12) = xmmword_1B7E75940;
  *((_OWORD *)this + 13) = xmmword_1B7E75840;
  *((_OWORD *)this + 14) = xmmword_1B7E75950;
  *((_OWORD *)this + 15) = xmmword_1B7E75960;
  *((_OWORD *)this + 16) = xmmword_1B7E75970;
  *((_OWORD *)this + 17) = xmmword_1B7E75980;
  *((_OWORD *)this + 18) = xmmword_1B7E75990;
  *((_OWORD *)this + 19) = xmmword_1B7E759A0;
  *((_OWORD *)this + 20) = xmmword_1B7E759B0;
  *((_OWORD *)this + 21) = xmmword_1B7E759C0;
  *((_OWORD *)this + 22) = xmmword_1B7E759D0;
  *((_OWORD *)this + 23) = xmmword_1B8348EE0;
  *((_OWORD *)this + 24) = xmmword_1B8349090;
  *((_OWORD *)this + 25) = xmmword_1B7E7CD80;
  *((_OWORD *)this + 26) = xmmword_1B83490A0;
  *((_OWORD *)this + 27) = xmmword_1B7E76500;
  *((int32x4_t *)this + 28) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 29) = xmmword_1B83490B0;
  *((_OWORD *)this + 30) = xmmword_1B83490C0;
  *((_OWORD *)this + 31) = xmmword_1B7E75810;
  *((_OWORD *)this + 32) = xmmword_1B7E734D0;
  *(void *)&_Q1 = 0x3F0000003FLL;
  *((void *)&_Q1 + 1) = 0x3F0000003FLL;
  *((_OWORD *)this + 33) = xmmword_1B8348D10;
  *((_OWORD *)this + 34) = _Q1;
  *((_OWORD *)this + 35) = xmmword_1B8348D20;
  *((_OWORD *)this + 36) = xmmword_1B8348D30;
  *((_OWORD *)this + 37) = xmmword_1B8348D40;
  *((_OWORD *)this + 38) = xmmword_1B8348D50;
  *((_OWORD *)this + 39) = xmmword_1B8348D60;
  *((_OWORD *)this + 40) = xmmword_1B8348D70;
  *((_OWORD *)this + 41) = xmmword_1B8348D80;
  *((_OWORD *)this + 42) = xmmword_1B8348D90;
  *((_OWORD *)this + 43) = xmmword_1B8348DA0;
  *((_OWORD *)this + 44) = xmmword_1B8348DB0;
  *((_OWORD *)this + 45) = xmmword_1B8348DC0;
  *((_OWORD *)this + 46) = xmmword_1B8348DD0;
  *((_OWORD *)this + 47) = xmmword_1B8348DE0;
  *((_OWORD *)this + 48) = xmmword_1B8348DF0;
  *((_OWORD *)this + 49) = xmmword_1B8348E00;
  *((_OWORD *)this + 50) = xmmword_1B8348E10;
  *((_OWORD *)this + 51) = xmmword_1B8348E20;
  *((_OWORD *)this + 52) = xmmword_1B8348E30;
  *((_OWORD *)this + 53) = xmmword_1B83490D0;
  *((_OWORD *)this + 54) = xmmword_1B8348E50;
  *((_OWORD *)this + 55) = xmmword_1B83490E0;
  *((_OWORD *)this + 56) = xmmword_1B83490F0;
  *((_OWORD *)this + 57) = xmmword_1B7E758A0;
  *((_OWORD *)this + 58) = xmmword_1B7E76AB0;
  *((_OWORD *)this + 59) = xmmword_1B8349100;
  *((_OWORD *)this + 60) = xmmword_1B8349110;
  *((_OWORD *)this + 61) = xmmword_1B8349120;
  *((_OWORD *)this + 62) = xmmword_1B8349130;
  *((_OWORD *)this + 63) = xmmword_1B7E775E0;
  *((_OWORD *)this + 64) = xmmword_1B8348C50;
  *((_OWORD *)this + 65) = xmmword_1B8348C60;
  *((_OWORD *)this + 66) = xmmword_1B8348C70;
  *((_OWORD *)this + 67) = xmmword_1B8348C80;
  *((_OWORD *)this + 68) = xmmword_1B8348C90;
  *((_OWORD *)this + 69) = xmmword_1B8348CA0;
  *((_OWORD *)this + 70) = xmmword_1B8348CB0;
  *((_OWORD *)this + 71) = xmmword_1B8348CC0;
  *((_OWORD *)this + 72) = xmmword_1B8348CD0;
  *((_OWORD *)this + 73) = xmmword_1B8348CE0;
  *((_OWORD *)this + 74) = xmmword_1B8348CF0;
  *((_OWORD *)this + 75) = xmmword_1B8349140;
  *((_OWORD *)this + 76) = xmmword_1B8349150;
  *((_OWORD *)this + 77) = xmmword_1B8349160;
  *((_OWORD *)this + 78) = xmmword_1B83435C0;
  *((_OWORD *)this + 79) = xmmword_1B8349170;
  *((_OWORD *)this + 80) = xmmword_1B8349180;
  *((_OWORD *)this + 81) = xmmword_1B8349190;
  *((_OWORD *)this + 82) = xmmword_1B83491A0;
  *((_OWORD *)this + 83) = xmmword_1B83491B0;
  *((_OWORD *)this + 84) = xmmword_1B8343540;
  *((_OWORD *)this + 85) = xmmword_1B83491C0;
  *((_OWORD *)this + 86) = xmmword_1B83491D0;
  *(void *)&long long v6 = 0xC0000000C0000000;
  *((void *)&v6 + 1) = 0xC0000000C0000000;
  *((_OWORD *)this + 87) = v6;
  double result = 0.0000878906136;
  *((_OWORD *)this + 88) = xmmword_1B83491E0;
  return result;
}

uint64_t GetBlendNormalTile(HGTile *a1, float32x4_t *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    float32x2_t v5 = (float32x4_t *)*((void *)a1 + 10);
    long long v6 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 26);
    uint64_t v10 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v39 = 0;
        uint64_t v40 = 16 * v10;
        uint64_t v41 = 16 * v9;
        uint64_t v42 = 16 * v8;
        uint64_t v43 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v44 = 0;
          do
          {
            float32x4_t v45 = vmulq_f32(v6[v44 / 0x10], *a2);
            v7[v44 / 0x10] = vaddq_f32(v45, vmulq_f32(v5[v44 / 0x10], vsubq_f32(a2[3], (float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 3))));
            v44 += 16;
          }
          while (v43 != v44);
          ++v39;
          float32x2_t v5 = (float32x4_t *)((char *)v5 + v40);
          long long v6 = (float32x4_t *)((char *)v6 + v41);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v42);
        }
        while (v39 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      int8x16_t v15 = v5 + 4;
      int8x16_t v16 = v6 + 4;
      int8x16_t v17 = v7 + 4;
      do
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
        float32x4_t v20 = v17;
        float32x4_t v21 = v16;
        int8x16_t v22 = v15;
        do
        {
          int32x4_t v23 = v22;
          float32x4_t v24 = v21;
          float32x4_t v25 = v20;
          float32x4_t v26 = vmulq_f32(v6[v18], *a2);
          float32x4_t v27 = vmulq_f32(v6[v18 + 1], *a2);
          float32x4_t v28 = vmulq_f32(v6[v18 + 2], *a2);
          float32x4_t v29 = vmulq_f32(v6[v18 + 3], *a2);
          float32x4_t v30 = a2[3];
          float32x4_t v31 = vaddq_f32(v27, vmulq_f32(v5[v18 + 1], vsubq_f32(v30, (float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 3))));
          float32x4_t v32 = vaddq_f32(v28, vmulq_f32(v5[v18 + 2], vsubq_f32(v30, (float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 3))));
          float32x4_t v33 = vaddq_f32(v29, vmulq_f32(v5[v18 + 3], vsubq_f32(v30, (float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 3))));
          float32x4_t v34 = &v7[v18];
          *float32x4_t v34 = vaddq_f32(v26, vmulq_f32(v5[v18], vsubq_f32(v30, (float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 3))));
          v34[1] = v31;
          v19 += 4;
          v18 += 4;
          v34[2] = v32;
          v34[3] = v33;
          v22 += 4;
          v21 += 4;
          float32x4_t v20 = v25 + 4;
        }
        while ((uint64_t)v19 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v35 = *v23++;
            float32x4_t v36 = v35;
            float32x4_t v37 = *v24++;
            float32x4_t v38 = vmulq_f32(v37, *a2);
            *v25++ = vaddq_f32(v38, vmulq_f32(v36, vsubq_f32(a2[3], (float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 3))));
            ++v19;
          }
          while (v19 < v4);
        }
        ++v11;
        long long v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v13);
        float32x2_t v5 = (float32x4_t *)((char *)v5 + v14);
        int8x16_t v15 = (float32x4_t *)((char *)v15 + v14);
        int8x16_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (float32x4_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendSubtractTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    float32x2_t v5 = (float32x4_t *)*((void *)a1 + 10);
    long long v6 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 26);
    uint64_t v10 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v60 = 0;
        uint64_t v61 = 16 * v10;
        uint64_t v62 = 16 * v9;
        uint64_t v63 = 16 * v8;
        uint64_t v64 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v65 = 0;
          do
          {
            float32x4_t v66 = v5[v65 / 0x10];
            float32x4_t v67 = vmulq_f32(v6[v65 / 0x10], *(float32x4_t *)a2);
            float32x4_t v68 = vmulq_laneq_f32(v67, v66, 3);
            float32x4_t v69 = vmulq_laneq_f32(v66, v67, 3);
            float32x4_t v70 = vsubq_f32(vaddq_f32(v66, v67), v68);
            v7[v65 / 0x10] = vaddq_f32(vminq_f32(vmaxq_f32(vsubq_f32(v69, v68), *((float32x4_t *)a2 + 4)), *((float32x4_t *)a2 + 3)), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v70, (int8x16_t)vsubq_f32(v70, v69)));
            v65 += 16;
          }
          while (v64 != v65);
          ++v60;
          float32x2_t v5 = (float32x4_t *)((char *)v5 + v61);
          long long v6 = (float32x4_t *)((char *)v6 + v62);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v63);
        }
        while (v60 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      int8x16_t v15 = v5 + 4;
      int8x16_t v16 = v6 + 4;
      int8x16_t v17 = v7 + 4;
      do
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
        float32x4_t v20 = v17;
        float32x4_t v21 = v16;
        int8x16_t v22 = v15;
        do
        {
          float32x4_t v23 = v5[v18];
          float32x4_t v24 = v5[v18 + 1];
          float32x4_t v25 = v5[v18 + 2];
          float32x4_t v26 = v5[v18 + 3];
          float32x4_t v27 = vmulq_f32(v6[v18], *(float32x4_t *)a2);
          float32x4_t v28 = vmulq_f32(v6[v18 + 1], *(float32x4_t *)a2);
          float32x4_t v29 = vmulq_f32(v6[v18 + 2], *(float32x4_t *)a2);
          float32x4_t v30 = vmulq_f32(v6[v18 + 3], *(float32x4_t *)a2);
          float32x4_t v31 = vmulq_laneq_f32(v27, v23, 3);
          float32x4_t v32 = vmulq_laneq_f32(v28, v24, 3);
          float32x4_t v33 = vmulq_laneq_f32(v29, v25, 3);
          float32x4_t v34 = vmulq_laneq_f32(v30, v26, 3);
          float32x4_t v35 = vmulq_laneq_f32(v23, v27, 3);
          float32x4_t v36 = vmulq_laneq_f32(v24, v28, 3);
          float32x4_t v37 = vmulq_laneq_f32(v25, v29, 3);
          float32x4_t v38 = vmulq_laneq_f32(v26, v30, 3);
          float32x4_t v39 = vaddq_f32(v23, v27);
          float32x4_t v41 = *((float32x4_t *)a2 + 3);
          float32x4_t v40 = *((float32x4_t *)a2 + 4);
          uint64_t v42 = v22;
          uint64_t v43 = v21;
          unint64_t v44 = v20;
          float32x4_t v45 = vminq_f32(vmaxq_f32(vsubq_f32(v35, v31), v40), v41);
          float32x4_t v46 = vsubq_f32(v39, v31);
          float32x4_t v47 = vsubq_f32(vaddq_f32(v24, v28), v32);
          float32x4_t v48 = vsubq_f32(vaddq_f32(v25, v29), v33);
          float32x4_t v49 = vsubq_f32(vaddq_f32(v26, v30), v34);
          int8x16_t v50 = (int8x16_t)vsubq_f32(v46, v35);
          int8x16_t v51 = *((int8x16_t *)a2 + 5);
          float32x4_t v52 = &v7[v18];
          *float32x4_t v52 = vaddq_f32(v45, (float32x4_t)vbslq_s8(v51, (int8x16_t)v46, v50));
          v52[1] = vaddq_f32(vminq_f32(vmaxq_f32(vsubq_f32(v36, v32), v40), v41), (float32x4_t)vbslq_s8(v51, (int8x16_t)v47, (int8x16_t)vsubq_f32(v47, v36)));
          v19 += 4;
          v18 += 4;
          v52[2] = vaddq_f32(vminq_f32(vmaxq_f32(vsubq_f32(v37, v33), v40), v41), (float32x4_t)vbslq_s8(v51, (int8x16_t)v48, (int8x16_t)vsubq_f32(v48, v37)));
          v52[3] = vaddq_f32(vminq_f32(vmaxq_f32(vsubq_f32(v38, v34), v40), v41), (float32x4_t)vbslq_s8(v51, (int8x16_t)v49, (int8x16_t)vsubq_f32(v49, v38)));
          int8x16_t v22 = v42 + 4;
          v21 += 4;
          v20 += 4;
        }
        while ((uint64_t)v19 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v53 = *v42++;
            float32x4_t v54 = v53;
            float32x4_t v55 = *v43++;
            float32x4_t v56 = vmulq_f32(v55, *(float32x4_t *)a2);
            float32x4_t v57 = vmulq_laneq_f32(v56, v54, 3);
            float32x4_t v58 = vmulq_laneq_f32(v54, v56, 3);
            float32x4_t v59 = vsubq_f32(vaddq_f32(v54, v56), v57);
            *v44++ = vaddq_f32(vminq_f32(vmaxq_f32(vsubq_f32(v58, v57), *((float32x4_t *)a2 + 4)), *((float32x4_t *)a2 + 3)), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v59, (int8x16_t)vsubq_f32(v59, v58)));
            ++v19;
          }
          while (v19 < v4);
        }
        ++v11;
        long long v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v13);
        float32x2_t v5 = (float32x4_t *)((char *)v5 + v14);
        int8x16_t v15 = (float32x4_t *)((char *)v15 + v14);
        int8x16_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (float32x4_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendSubtractPOWTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 12);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v12 = 0;
      do
      {
        float32x4_t v13 = *(float32x4_t *)(v5 + v12);
        float32x4_t v14 = *((float32x4_t *)a2 + 6);
        float32x4_t v15 = *((float32x4_t *)a2 + 7);
        float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
        float32x4_t v17 = vmulq_f32(vrecpeq_f32(v16), v15);
        float32x4_t v18 = vmulq_f32(v13, vmulq_f32(v17, vrecpsq_f32(v17, v16)));
        float32x4_t v19 = *((float32x4_t *)a2 + 4);
        float32x4_t v20 = vmaxq_f32(v18, v19);
        int8x16_t v21 = *((int8x16_t *)a2 + 8);
        float32x4_t v22 = *((float32x4_t *)a2 + 9);
        float32x4_t v23 = *((float32x4_t *)a2 + 3);
        float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v20), (int8x16_t)v23);
        int8x16_t v25 = *((int8x16_t *)a2 + 10);
        float32x4_t v26 = *((float32x4_t *)a2 + 11);
        float32x4_t v27 = *((float32x4_t *)a2 + 12);
        float32x4_t v28 = *((float32x4_t *)a2 + 13);
        float32x4_t v29 = (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v24, v27));
        float32x4_t v30 = vsubq_f32(vsubq_f32(v24, v23), vmulq_f32(vmulq_f32(v28, v29), v24));
        float32x4_t v31 = *((float32x4_t *)a2 + 14);
        float32x4_t v32 = *((float32x4_t *)a2 + 15);
        float32x4_t v33 = *((float32x4_t *)a2 + 16);
        float32x4_t v34 = *((float32x4_t *)a2 + 17);
        float32x4_t v35 = vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v20, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v22, v20))), v26), v29), vmulq_f32(v30, vaddq_f32(vaddq_f32(v33, vmulq_f32(v30, v34)), vmulq_f32(vmulq_f32(v30, v30), vaddq_f32(v31, vmulq_f32(v32, v30))))));
        float32x4_t v36 = *((float32x4_t *)a2 + 1);
        float32x4_t v37 = *((float32x4_t *)a2 + 18);
        float32x4_t v38 = *((float32x4_t *)a2 + 19);
        float32x4_t v39 = vmaxq_f32(vmulq_f32(v36, v35), v37);
        float32x4_t v40 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
        float32x4_t v41 = vsubq_f32(v40, (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v40, v39)));
        float32x4_t v42 = vsubq_f32(v39, v41);
        float32x4_t v43 = *((float32x4_t *)a2 + 20);
        float32x4_t v44 = *((float32x4_t *)a2 + 21);
        int32x4_t v45 = *((int32x4_t *)a2 + 22);
        float32x4_t v46 = vmulq_f32(vaddq_f32(v23, vmulq_f32(v42, vaddq_f32(v44, vmulq_f32(v42, vaddq_f32(v38, vmulq_f32(v43, v42)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v45, vcvtq_s32_f32(v41)), 0x17uLL));
        float32x4_t v47 = vmulq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)a2);
        float32x4_t v48 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 3), v14);
        float32x4_t v49 = vmulq_f32(v15, vrecpeq_f32(v48));
        float32x4_t v50 = vmulq_f32(v47, vmulq_f32(v49, vrecpsq_f32(v49, v48)));
        float32x4_t v51 = vmaxq_f32(v50, v19);
        float32x4_t v52 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v51), (int8x16_t)v23);
        float32x4_t v53 = (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v52, v27));
        float32x4_t v54 = vsubq_f32(vsubq_f32(v52, v23), vmulq_f32(vmulq_f32(v28, v53), v52));
        float32x4_t v55 = vmaxq_f32(vmulq_f32(v36, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v51, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v22, v51))), v26), v53), vmulq_f32(v54, vaddq_f32(vaddq_f32(v33, vmulq_f32(v34, v54)), vmulq_f32(vmulq_f32(v54, v54), vaddq_f32(v31, vmulq_f32(v32, v54))))))), v37);
        float32x4_t v56 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
        float32x4_t v57 = vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v56, v55)));
        float32x4_t v58 = vsubq_f32(v55, v57);
        float32x4_t v59 = vminq_f32(vmaxq_f32(vsubq_f32(v46, vmulq_f32(vaddq_f32(v23, vmulq_f32(v58, vaddq_f32(v44, vmulq_f32(v58, vaddq_f32(v38, vmulq_f32(v43, v58)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v57), v45), 0x17uLL))), v19), v23);
        float32x4_t v60 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v59), (int8x16_t)v23);
        float32x4_t v61 = (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v60, v27));
        float32x4_t v62 = vsubq_f32(vsubq_f32(v60, v23), vmulq_f32(vmulq_f32(v28, v61), v60));
        float32x4_t v63 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 2), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v59, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v22, v59))), v26), v61), vmulq_f32(v62, vaddq_f32(vaddq_f32(v33, vmulq_f32(v34, v62)), vmulq_f32(vmulq_f32(v62, v62), vaddq_f32(v31, vmulq_f32(v32, v62))))))), v37);
        float32x4_t v64 = vcvtq_f32_s32(vcvtq_s32_f32(v63));
        float32x4_t v65 = vsubq_f32(v64, (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v64, v63)));
        float32x4_t v66 = vsubq_f32(v63, v65);
        float32x4_t v67 = vmulq_f32(vaddq_f32(v23, vmulq_f32(v66, vaddq_f32(v44, vmulq_f32(v66, vaddq_f32(v38, vmulq_f32(v43, v66)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v65), v45), 0x17uLL));
        v67.i32[3] = 1.0;
        *(float32x4_t *)(v7 + v12) = vaddq_f32(v13, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v67, (int8x16_t)vaddq_f32(v50, vmulq_laneq_f32(vsubq_f32(v67, v50), v13, 3))), v13), v47, 3));
        v12 += 16;
      }
      while (v11 != v12);
      ++v4;
      v5 += v8;
      v6 += v9;
      v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t GetBlendSubtractQTTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 12);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v12 = 0;
      do
      {
        float32x4_t v13 = *(float32x4_t *)(v5 + v12);
        float32x4_t v14 = *((float32x4_t *)a2 + 6);
        float32x4_t v15 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
        float32x4_t v16 = *((float32x4_t *)a2 + 7);
        int8x16_t v17 = *((int8x16_t *)a2 + 8);
        float32x4_t v18 = vmulq_f32(vrecpeq_f32(v15), v16);
        float32x4_t v19 = vmulq_f32(v13, vmulq_f32(v18, vrecpsq_f32(v18, v15)));
        float32x4_t v20 = *((float32x4_t *)a2 + 3);
        float32x4_t v21 = *((float32x4_t *)a2 + 4);
        float32x4_t v22 = *((float32x4_t *)a2 + 23);
        float32x4_t v23 = *((float32x4_t *)a2 + 24);
        float32x4_t v24 = vminq_f32(vmaxq_f32(v19, v21), v22);
        float32x4_t v25 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v24), (int8x16_t)v20);
        float32x4_t v26 = *((float32x4_t *)a2 + 9);
        int8x16_t v27 = *((int8x16_t *)a2 + 10);
        float32x4_t v28 = *((float32x4_t *)a2 + 11);
        float32x4_t v29 = *((float32x4_t *)a2 + 12);
        float32x4_t v30 = (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v25, v29));
        float32x4_t v31 = *((float32x4_t *)a2 + 13);
        float32x4_t v32 = *((float32x4_t *)a2 + 14);
        float32x4_t v33 = vsubq_f32(vsubq_f32(v25, v20), vmulq_f32(vmulq_f32(v31, v30), v25));
        float32x4_t v34 = *((float32x4_t *)a2 + 15);
        float32x4_t v35 = *((float32x4_t *)a2 + 16);
        float32x4_t v36 = *((float32x4_t *)a2 + 17);
        float32x4_t v37 = *((float32x4_t *)a2 + 18);
        float32x4_t v38 = vmaxq_f32(vmulq_f32(v23, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v24, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v26, v24))), v28), v30), vmulq_f32(v33, vaddq_f32(vaddq_f32(v35, vmulq_f32(v33, v36)), vmulq_f32(vmulq_f32(v33, v33), vaddq_f32(v32, vmulq_f32(v34, v33))))))), v37);
        float32x4_t v39 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
        float32x4_t v40 = vsubq_f32(v39, (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v39, v38)));
        float32x4_t v41 = vsubq_f32(v38, v40);
        float32x4_t v42 = *((float32x4_t *)a2 + 19);
        float32x4_t v43 = *((float32x4_t *)a2 + 20);
        float32x4_t v44 = *((float32x4_t *)a2 + 21);
        int32x4_t v45 = *((int32x4_t *)a2 + 22);
        float32x4_t v46 = vmulq_f32(vaddq_f32(v20, vmulq_f32(v41, vaddq_f32(v44, vmulq_f32(v41, vaddq_f32(v42, vmulq_f32(v43, v41)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v45, vcvtq_s32_f32(v40)), 0x17uLL));
        float32x4_t v47 = vmulq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)a2);
        float32x4_t v48 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 3), v14);
        float32x4_t v49 = vmulq_f32(v16, vrecpeq_f32(v48));
        float32x4_t v50 = vmulq_f32(v47, vmulq_f32(v49, vrecpsq_f32(v49, v48)));
        float32x4_t v51 = vminq_f32(vmaxq_f32(v50, v21), v22);
        float32x4_t v52 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v51), (int8x16_t)v20);
        float32x4_t v53 = (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v52, v29));
        float32x4_t v54 = vsubq_f32(vsubq_f32(v52, v20), vmulq_f32(vmulq_f32(v31, v53), v52));
        float32x4_t v55 = vmaxq_f32(vmulq_f32(v23, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v51, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v26, v51))), v28), v53), vmulq_f32(v54, vaddq_f32(vaddq_f32(v35, vmulq_f32(v36, v54)), vmulq_f32(vmulq_f32(v54, v54), vaddq_f32(v32, vmulq_f32(v34, v54))))))), v37);
        float32x4_t v56 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
        float32x4_t v57 = vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v56, v55)));
        float32x4_t v58 = vsubq_f32(v55, v57);
        float32x4_t v59 = vminq_f32(vmaxq_f32(vsubq_f32(v46, vmulq_f32(vaddq_f32(v20, vmulq_f32(v58, vaddq_f32(v44, vmulq_f32(v58, vaddq_f32(v42, vmulq_f32(v43, v58)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v57), v45), 0x17uLL))), v21), v20);
        float32x4_t v60 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v59), (int8x16_t)v20);
        float32x4_t v61 = (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v60, v29));
        float32x4_t v62 = vsubq_f32(vsubq_f32(v60, v20), vmulq_f32(vmulq_f32(v31, v61), v60));
        float32x4_t v63 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 25), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v59, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v26, v59))), v28), v61), vmulq_f32(v62, vaddq_f32(vaddq_f32(v35, vmulq_f32(v36, v62)), vmulq_f32(vmulq_f32(v62, v62), vaddq_f32(v32, vmulq_f32(v34, v62))))))), v37);
        float32x4_t v64 = vcvtq_f32_s32(vcvtq_s32_f32(v63));
        float32x4_t v65 = vsubq_f32(v64, (float32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_f32(v64, v63)));
        float32x4_t v66 = vsubq_f32(v63, v65);
        float32x4_t v67 = vmulq_f32(vaddq_f32(v20, vmulq_f32(v66, vaddq_f32(v44, vmulq_f32(v66, vaddq_f32(v42, vmulq_f32(v43, v66)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v65), v45), 0x17uLL));
        v67.i32[3] = 1.0;
        *(float32x4_t *)(v7 + v12) = vaddq_f32(v13, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v67, (int8x16_t)vaddq_f32(v50, vmulq_laneq_f32(vsubq_f32(v67, v50), v13, 3))), v13), v47, 3));
        v12 += 16;
      }
      while (v11 != v12);
      ++v4;
      v5 += v8;
      v6 += v9;
      v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t GetBlendDarkenTile(HGTile *a1, float32x4_t *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    uint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    uint64_t v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 26);
    uint64_t v10 = *((int *)a1 + 22);
    if ((int)v4 < 3)
    {
      if ((int)v4 >= 1)
      {
        int v47 = 0;
        uint64_t v48 = 16 * v10;
        uint64_t v49 = 16 * v9;
        uint64_t v50 = 16 * v8;
        uint64_t v51 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v52 = 0;
          do
          {
            float32x4_t v53 = v5[v52 / 0x10];
            float32x4_t v54 = vmulq_f32(v6[v52 / 0x10], *a2);
            float32x4_t v55 = vmulq_laneq_f32(v54, v53, 3);
            float32x4_t v56 = vmulq_laneq_f32(v53, v54, 3);
            v7[v52 / 0x10] = vaddq_f32(vminq_f32(v55, v56), vsubq_f32(vsubq_f32(vaddq_f32(v53, v54), v55), v56));
            v52 += 16;
          }
          while (v51 != v52);
          ++v47;
          uint64_t v5 = (float32x4_t *)((char *)v5 + v48);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v49);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v50);
        }
        while (v47 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      float32x4_t v15 = v5 + 3;
      float32x4_t v16 = v6 + 3;
      int8x16_t v17 = v7 + 3;
      do
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
        int v20 = 3;
        float32x4_t v21 = v17;
        float32x4_t v22 = v16;
        float32x4_t v23 = v15;
        do
        {
          float32x4_t v24 = v23;
          float32x4_t v25 = v22;
          float32x4_t v26 = v21;
          int v27 = v20;
          float32x4_t v28 = v5[v18];
          float32x4_t v29 = v5[v18 + 1];
          float32x4_t v30 = v5[v18 + 2];
          float32x4_t v31 = vmulq_f32(v6[v18], *a2);
          float32x4_t v32 = vmulq_f32(v6[v18 + 1], *a2);
          float32x4_t v33 = vmulq_f32(v6[v18 + 2], *a2);
          float32x4_t v34 = vmulq_laneq_f32(v31, v28, 3);
          float32x4_t v35 = vmulq_laneq_f32(v32, v29, 3);
          float32x4_t v36 = vmulq_laneq_f32(v33, v30, 3);
          float32x4_t v37 = vmulq_laneq_f32(v28, v31, 3);
          float32x4_t v38 = vmulq_laneq_f32(v29, v32, 3);
          float32x4_t v39 = vmulq_laneq_f32(v30, v33, 3);
          float32x4_t v40 = &v7[v18];
          v19 += 3;
          v18 += 3;
          v23 += 3;
          *float32x4_t v40 = vaddq_f32(vminq_f32(v34, v37), vsubq_f32(vsubq_f32(vaddq_f32(v28, v31), v34), v37));
          v40[1] = vaddq_f32(vminq_f32(v35, v38), vsubq_f32(vsubq_f32(vaddq_f32(v29, v32), v35), v38));
          v40[2] = vaddq_f32(vminq_f32(v36, v39), vsubq_f32(vsubq_f32(vaddq_f32(v30, v33), v36), v39));
          v22 += 3;
          v21 += 3;
          int v20 = v27 + 3;
        }
        while (v19 < v4 - 2);
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v41 = *v24++;
            float32x4_t v42 = v41;
            float32x4_t v43 = *v25++;
            float32x4_t v44 = vmulq_f32(v43, *a2);
            float32x4_t v45 = vmulq_laneq_f32(v44, v42, 3);
            float32x4_t v46 = vmulq_laneq_f32(v42, v44, 3);
            *v26++ = vaddq_f32(vminq_f32(v45, v46), vsubq_f32(vsubq_f32(vaddq_f32(v42, v44), v45), v46));
            ++v27;
          }
          while ((int)v4 > v27);
        }
        ++v11;
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v13);
        uint64_t v5 = (float32x4_t *)((char *)v5 + v14);
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v14);
        float32x4_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (float32x4_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendMultiplyTile(HGTile *a1, float32x4_t *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    uint64_t v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 26);
    uint64_t v10 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v38 = 0;
        uint64_t v39 = 16 * v10;
        uint64_t v40 = 16 * v9;
        uint64_t v41 = 16 * v8;
        uint64_t v42 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v43 = 0;
          do
          {
            float32x4_t v44 = vmulq_f32(v6[v43 / 0x10], *a2);
            v7[v43 / 0x10] = vaddq_f32(vaddq_f32(vmulq_f32(v5[v43 / 0x10], v44), vsubq_f32(v44, vmulq_laneq_f32(v44, v5[v43 / 0x10], 3))), vsubq_f32(v5[v43 / 0x10], vmulq_laneq_f32(v5[v43 / 0x10], v44, 3)));
            v43 += 16;
          }
          while (v42 != v43);
          ++v38;
          uint64_t v5 = (float32x4_t *)((char *)v5 + v39);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v40);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v41);
        }
        while (v38 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      float32x4_t v15 = v5 + 4;
      float32x4_t v16 = v6 + 4;
      int8x16_t v17 = v7 + 4;
      do
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
        int v20 = v17;
        float32x4_t v21 = v16;
        float32x4_t v22 = v15;
        do
        {
          float32x4_t v23 = v22;
          float32x4_t v24 = v21;
          float32x4_t v25 = v20;
          float32x4_t v26 = vmulq_f32(v6[v18], *a2);
          float32x4_t v27 = vmulq_f32(v6[v18 + 1], *a2);
          float32x4_t v28 = vmulq_f32(v6[v18 + 2], *a2);
          float32x4_t v29 = vmulq_f32(v6[v18 + 3], *a2);
          float32x4_t v30 = vaddq_f32(vaddq_f32(vmulq_f32(v5[v18 + 1], v27), vsubq_f32(v27, vmulq_laneq_f32(v27, v5[v18 + 1], 3))), vsubq_f32(v5[v18 + 1], vmulq_laneq_f32(v5[v18 + 1], v27, 3)));
          float32x4_t v31 = vaddq_f32(vaddq_f32(vmulq_f32(v5[v18 + 2], v28), vsubq_f32(v28, vmulq_laneq_f32(v28, v5[v18 + 2], 3))), vsubq_f32(v5[v18 + 2], vmulq_laneq_f32(v5[v18 + 2], v28, 3)));
          float32x4_t v32 = vaddq_f32(vaddq_f32(vmulq_f32(v5[v18 + 3], v29), vsubq_f32(v29, vmulq_laneq_f32(v29, v5[v18 + 3], 3))), vsubq_f32(v5[v18 + 3], vmulq_laneq_f32(v5[v18 + 3], v29, 3)));
          float32x4_t v33 = &v7[v18];
          *float32x4_t v33 = vaddq_f32(vaddq_f32(vmulq_f32(v5[v18], v26), vsubq_f32(v26, vmulq_laneq_f32(v26, v5[v18], 3))), vsubq_f32(v5[v18], vmulq_laneq_f32(v5[v18], v26, 3)));
          v33[1] = v30;
          v19 += 4;
          v18 += 4;
          v33[2] = v31;
          v33[3] = v32;
          v22 += 4;
          v21 += 4;
          int v20 = v25 + 4;
        }
        while ((uint64_t)v19 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v34 = *v23++;
            float32x4_t v35 = v34;
            float32x4_t v36 = *v24++;
            float32x4_t v37 = vmulq_f32(v36, *a2);
            *v25++ = vaddq_f32(vaddq_f32(vmulq_f32(v35, v37), vsubq_f32(v37, vmulq_laneq_f32(v37, v35, 3))), vsubq_f32(v35, vmulq_laneq_f32(v35, v37, 3)));
            ++v19;
          }
          while (v19 < v4);
        }
        ++v11;
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v13);
        uint64_t v5 = (float32x4_t *)((char *)v5 + v14);
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v14);
        float32x4_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (float32x4_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendColorBurnTile(HGTile *a1, float32x4_t *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = *((void *)a1 + 12);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v59 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v12 = 0;
    uint64_t v13 = 16;
    do
    {
      float32x4_t v14 = vmulq_f32(*(float32x4_t *)(v8 + v13 - 16), *a2);
      float32x4_t v15 = vmulq_f32(*(float32x4_t *)(v8 + v13), *a2);
      float32x4_t v16 = *(float32x4_t *)(v7 + v13 - 16);
      float32x4_t v17 = *(float32x4_t *)(v7 + v13);
      int8x16_t v18 = (int8x16_t)a2[5];
      float32x4_t v19 = a2[6];
      float32x4_t v20 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v19);
      float32x4_t v21 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v19);
      float32x4_t v22 = a2[7];
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v20), v22);
      float32x4_t v24 = vmulq_f32(vrecpeq_f32(v21), v22);
      float32x4_t v25 = vmulq_f32(v23, vrecpsq_f32(v23, v20));
      float32x4_t v26 = vmulq_f32(v24, vrecpsq_f32(v24, v21));
      float32x4_t v27 = vmulq_f32(v14, v25);
      float32x4_t v28 = vmulq_f32(v15, v26);
      float32x4_t v29 = a2[26];
      float32x4_t v30 = a2[27];
      float32x4_t v31 = (float32x4_t)vbslq_s8(v18, (int8x16_t)v14, (int8x16_t)vmaxq_f32(v27, v29));
      float32x4_t v32 = (float32x4_t)vbslq_s8(v18, (int8x16_t)v15, (int8x16_t)vmaxq_f32(v28, v29));
      float32x4_t v33 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3), v19);
      float32x4_t v34 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 3), v19);
      float32x4_t v35 = vmulq_f32(v22, vrecpeq_f32(v33));
      float32x4_t v36 = vmulq_f32(v22, vrecpeq_f32(v34));
      float32x4_t v37 = vmulq_f32(v16, vmulq_f32(v35, vrecpsq_f32(v35, v33)));
      float32x4_t v38 = vmulq_f32(v17, vmulq_f32(v36, vrecpsq_f32(v36, v34)));
      float32x4_t v40 = a2[3];
      float32x4_t v39 = a2[4];
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v40, (int8x16_t)vceqq_f32(v27, v39));
      float32x4_t v42 = (float32x4_t)vandq_s8((int8x16_t)v40, (int8x16_t)vceqq_f32(v37, v40));
      float32x4_t v43 = (float32x4_t)vandq_s8((int8x16_t)v40, (int8x16_t)vceqq_f32(v38, v40));
      float32x4_t v44 = vsubq_f32(v40, v37);
      float32x4_t v45 = (float32x4_t)vandq_s8((int8x16_t)v40, (int8x16_t)vceqq_f32(v28, v39));
      float32x4_t v46 = vsubq_f32(v40, v38);
      float32x4_t v47 = vmaxq_f32(vmulq_f32(v22, vrecpeq_f32(v31)), v30);
      float32x4_t v48 = vmaxq_f32(vmulq_f32(v22, vrecpeq_f32(v32)), v30);
      float32x4_t v49 = a2[28];
      float32x4_t v50 = a2[29];
      float32x4_t v51 = vminq_f32(v47, v49);
      float32x4_t v52 = vminq_f32(v48, v49);
      int8x16_t v53 = (int8x16_t)vmulq_f32(v46, vmulq_f32(v52, vrecpsq_f32(v32, v52)));
      int32x4_t v54 = (int32x4_t)vbslq_s8(v18, (int8x16_t)v14, (int8x16_t)vmulq_f32(vsubq_f32(v50, (float32x4_t)vbslq_s8(v18, (int8x16_t)v14, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)v14, (int8x16_t)vmulq_f32(v44, vmulq_f32(v51, vrecpsq_f32(v31, v51)))), v50))), (float32x4_t)vbslq_s8(
                                                     v18,
                                                     (int8x16_t)v14,
                                                     vandq_s8((int8x16_t)v50, (int8x16_t)vcgtq_f32(v27, v39)))));
      int32x4_t v55 = (int32x4_t)vbslq_s8(v18, (int8x16_t)v15, (int8x16_t)vmulq_f32(vsubq_f32(v50, (float32x4_t)vbslq_s8(v18, (int8x16_t)v15, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)v15, v53), v50))), (float32x4_t)vbslq_s8(v18, (int8x16_t)v15, vandq_s8((int8x16_t)v50, (int8x16_t)vcgtq_f32(v28, v39)))));
      v27.i32[3] = 1.0;
      float32x4_t v56 = (float32x4_t)vbslq_s8(v18, (int8x16_t)v14, vbslq_s8((int8x16_t)vcgtq_f32(vminq_f32(v41, v42), v39), (int8x16_t)v50, vbslq_s8(v18, (int8x16_t)v14, vbslq_s8((int8x16_t)vcgtq_f32(v41, v39), (int8x16_t)v39, vbslq_s8(v18, (int8x16_t)v14, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v54, 3), v39), (int8x16_t)v54, (int8x16_t)v39))))));
      float32x4_t v57 = (float32x4_t)vbslq_s8(v18, (int8x16_t)v15, vbslq_s8((int8x16_t)vcgtq_f32(vminq_f32(v45, v43), v39), (int8x16_t)v50, vbslq_s8(v18, (int8x16_t)v15, vbslq_s8((int8x16_t)vcgtq_f32(v45, v39), (int8x16_t)v39, vbslq_s8(v18, (int8x16_t)v15, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v55, 3), v39), (int8x16_t)v55, (int8x16_t)v39))))));
      v28.i32[3] = 1.0;
      float32x4_t v58 = (float32x4_t *)(v6 + v13);
      v58[-1] = vaddq_f32(v16, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)v27, (int8x16_t)vaddq_f32(v27, vmulq_laneq_f32(vsubq_f32(v56, v27), v16, 3))), v16), v56, 3));
      *float32x4_t v58 = vaddq_f32(v17, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)v28, (int8x16_t)vaddq_f32(v28, vmulq_laneq_f32(vsubq_f32(v57, v28), v17, 3))), v17), v57, 3));
      v12 -= 2;
      v13 += 32;
    }
    while (v5 + v12 > 1);
    int v59 = -v12;
    if (v59 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v60 = 16 * v59;
    float32x4_t v61 = *(float32x4_t *)(v7 + v60);
    float32x4_t v62 = vmulq_f32(*(float32x4_t *)(v8 + v60), *a2);
    int8x16_t v64 = (int8x16_t)a2[5];
    float32x4_t v63 = a2[6];
    float32x4_t v65 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 3), v63);
    float32x4_t v66 = a2[7];
    float32x4_t v67 = vmulq_f32(vrecpeq_f32(v65), v66);
    float32x4_t v68 = vmulq_f32(v62, vmulq_f32(v67, vrecpsq_f32(v67, v65)));
    float32x4_t v69 = (float32x4_t)vbslq_s8(v64, (int8x16_t)v62, (int8x16_t)vmaxq_f32(v68, a2[26]));
    float32x4_t v70 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 3), v63);
    float32x4_t v71 = vmulq_f32(v66, vrecpeq_f32(v70));
    float32x4_t v72 = vmulq_f32(v61, vmulq_f32(v71, vrecpsq_f32(v71, v70)));
    float32x4_t v74 = a2[3];
    float32x4_t v73 = a2[4];
    float32x4_t v75 = (float32x4_t)vandq_s8((int8x16_t)v74, (int8x16_t)vceqq_f32(v68, v73));
    float32x4_t v76 = (float32x4_t)vandq_s8((int8x16_t)v74, (int8x16_t)vceqq_f32(v72, v74));
    float32x4_t v77 = vsubq_f32(v74, v72);
    float32x4_t v78 = a2[29];
    float32x4_t v79 = vminq_f32(vmaxq_f32(vmulq_f32(v66, vrecpeq_f32(v69)), a2[27]), a2[28]);
    int32x4_t v80 = (int32x4_t)vbslq_s8(v64, (int8x16_t)v62, (int8x16_t)vmulq_f32(vsubq_f32(v78, (float32x4_t)vbslq_s8(v64, (int8x16_t)v62, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v64, (int8x16_t)v62, (int8x16_t)vmulq_f32(v77, vmulq_f32(v79, vrecpsq_f32(v69, v79)))), v78))), (float32x4_t)vbslq_s8(
                                                   v64,
                                                   (int8x16_t)v62,
                                                   vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v68, v73)))));
    float32x4_t v81 = (float32x4_t)vbslq_s8(v64, (int8x16_t)v62, vbslq_s8((int8x16_t)vcgtq_f32(vminq_f32(v75, v76), v73), (int8x16_t)v78, vbslq_s8(v64, (int8x16_t)v62, vbslq_s8((int8x16_t)vcgtq_f32(v75, v73), (int8x16_t)v73, vbslq_s8(v64, (int8x16_t)v62, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v80, 3), v73), (int8x16_t)v80, (int8x16_t)v73))))));
    v68.i32[3] = 1.0;
    *(float32x4_t *)(v6 + v60) = vaddq_f32(v61, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v64, (int8x16_t)v68, (int8x16_t)vaddq_f32(v68, vmulq_laneq_f32(vsubq_f32(v81, v68), v61, 3))), v61), v81, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendColorBurnPOWTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 12);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v12 = 0;
      do
      {
        float32x4_t v13 = *(float32x4_t *)(v5 + v12);
        float32x4_t v15 = *((float32x4_t *)a2 + 6);
        float32x4_t v14 = *((float32x4_t *)a2 + 7);
        float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
        float32x4_t v17 = vmulq_f32(vrecpeq_f32(v16), v14);
        float32x4_t v18 = vmulq_f32(v13, vmulq_f32(v17, vrecpsq_f32(v17, v16)));
        float32x4_t v19 = *((float32x4_t *)a2 + 4);
        int8x16_t v20 = *((int8x16_t *)a2 + 5);
        float32x4_t v21 = vmaxq_f32(v18, v19);
        int8x16_t v23 = *((int8x16_t *)a2 + 8);
        float32x4_t v22 = *((float32x4_t *)a2 + 9);
        float32x4_t v24 = *((float32x4_t *)a2 + 29);
        float32x4_t v25 = (float32x4_t)vorrq_s8(vandq_s8(v23, (int8x16_t)v21), (int8x16_t)v24);
        int8x16_t v27 = *((int8x16_t *)a2 + 10);
        float32x4_t v26 = *((float32x4_t *)a2 + 11);
        float32x4_t v28 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v21, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v22, v21))), v26);
        float32x4_t v30 = *((float32x4_t *)a2 + 12);
        float32x4_t v29 = *((float32x4_t *)a2 + 13);
        float32x4_t v31 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v25, v30));
        float32x4_t v32 = vsubq_f32(vsubq_f32(v25, v24), vmulq_f32(vmulq_f32(v29, v31), v25));
        float32x4_t v33 = *((float32x4_t *)a2 + 14);
        float32x4_t v34 = *((float32x4_t *)a2 + 15);
        float32x4_t v35 = *((float32x4_t *)a2 + 16);
        float32x4_t v36 = *((float32x4_t *)a2 + 17);
        float32x4_t v37 = vaddq_f32(vaddq_f32(v28, v31), vmulq_f32(v32, vaddq_f32(vaddq_f32(v35, vmulq_f32(v32, v36)), vmulq_f32(vmulq_f32(v32, v32), vaddq_f32(v33, vmulq_f32(v34, v32))))));
        float32x4_t v38 = *((float32x4_t *)a2 + 1);
        float32x4_t v39 = vmulq_f32(v38, v37);
        float32x4_t v41 = *((float32x4_t *)a2 + 18);
        float32x4_t v40 = *((float32x4_t *)a2 + 19);
        float32x4_t v42 = vmaxq_f32(v39, v41);
        float32x4_t v43 = vcvtq_f32_s32(vcvtq_s32_f32(v42));
        float32x4_t v44 = vsubq_f32(v43, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v43, v42)));
        float32x4_t v45 = vsubq_f32(v42, v44);
        float32x4_t v46 = *((float32x4_t *)a2 + 20);
        float32x4_t v47 = *((float32x4_t *)a2 + 21);
        int32x4_t v48 = *((int32x4_t *)a2 + 22);
        float32x4_t v49 = vmulq_f32(vaddq_f32(v24, vmulq_f32(v45, vaddq_f32(v47, vmulq_f32(v45, vaddq_f32(v40, vmulq_f32(v46, v45)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v48, vcvtq_s32_f32(v44)), 0x17uLL));
        float32x4_t v50 = vmulq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)a2);
        float32x4_t v51 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 3), v15);
        float32x4_t v52 = vmulq_f32(v14, vrecpeq_f32(v51));
        float32x4_t v53 = vmaxq_f32(vmulq_f32(v50, vmulq_f32(v52, vrecpsq_f32(v52, v51))), v19);
        float32x4_t v54 = (float32x4_t)vorrq_s8(vandq_s8(v23, (int8x16_t)v53), (int8x16_t)v24);
        float32x4_t v55 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v54, v30));
        float32x4_t v56 = vsubq_f32(vsubq_f32(v54, v24), vmulq_f32(vmulq_f32(v29, v55), v54));
        float32x4_t v57 = vmaxq_f32(vmulq_f32(v38, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v53, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v22, v53))), v26), v55), vmulq_f32(v56, vaddq_f32(vaddq_f32(v35, vmulq_f32(v36, v56)), vmulq_f32(vmulq_f32(v56, v56), vaddq_f32(v33, vmulq_f32(v34, v56))))))), v41);
        float32x4_t v58 = vcvtq_f32_s32(vcvtq_s32_f32(v57));
        float32x4_t v59 = vsubq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v58, v57)));
        float32x4_t v60 = vsubq_f32(v57, v59);
        float32x4_t v61 = (float32x4_t)vbslq_s8(v20, (int8x16_t)v50, (int8x16_t)vmulq_f32(vaddq_f32(v24, vmulq_f32(v60, vaddq_f32(v47, vmulq_f32(v60, vaddq_f32(v40, vmulq_f32(v46, v60)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v59), v48), 0x17uLL)));
        float32x4_t v62 = *((float32x4_t *)a2 + 26);
        float32x4_t v63 = vmaxq_f32(v61, v62);
        float32x4_t v64 = vminq_f32(vmaxq_f32(vmulq_f32(v14, vrecpeq_f32(v63)), *((float32x4_t *)a2 + 27)), *((float32x4_t *)a2 + 28));
        int8x16_t v65 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgeq_f32(v62, v61)), v19);
        float32x4_t v66 = (float32x4_t)vbslq_s8(v20, (int8x16_t)v50, vorrq_s8(vandq_s8(vandq_s8((int8x16_t)v24, (int8x16_t)vcgeq_f32(v49, v24)), v65), vbicq_s8((int8x16_t)vsubq_f32(v24, vminq_f32(vmulq_f32(vsubq_f32(v24, v49), vmulq_f32(v64, vrecpsq_f32(v63, v64))), v24)), v65)));
        float32x4_t v67 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v66, v23), (int8x16_t)v24);
        float32x4_t v68 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v66, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v22, v66))), v26);
        float32x4_t v69 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v67, v30));
        float32x4_t v70 = vsubq_f32(vsubq_f32(v67, v24), vmulq_f32(vmulq_f32(v29, v69), v67));
        float32x4_t v71 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 2), vaddq_f32(vaddq_f32(v68, v69), vmulq_f32(v70, vaddq_f32(vaddq_f32(v35, vmulq_f32(v36, v70)), vmulq_f32(vmulq_f32(v70, v70), vaddq_f32(v33, vmulq_f32(v34, v70))))))), v41);
        float32x4_t v72 = vcvtq_f32_s32(vcvtq_s32_f32(v71));
        float32x4_t v73 = vsubq_f32(v72, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v72, v71)));
        float32x4_t v74 = vsubq_f32(v71, v73);
        v53.i32[3] = 1.0;
        float32x4_t v75 = (float32x4_t)vbslq_s8(v20, (int8x16_t)v50, (int8x16_t)vmulq_f32(vaddq_f32(v24, vmulq_f32(v74, vaddq_f32(v47, vmulq_f32(v74, vaddq_f32(v40, vmulq_f32(v46, v74)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v73), v48), 0x17uLL)));
        *(float32x4_t *)(v7 + v12) = vaddq_f32(v13, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v20, (int8x16_t)v53, (int8x16_t)vaddq_f32(v53, vmulq_laneq_f32(vsubq_f32(v75, v53), v13, 3))), v13), v75, 3));
        v12 += 16;
      }
      while (v11 != v12);
      ++v4;
      v5 += v8;
      v6 += v9;
      v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t GetBlendColorBurnQTTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 12);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v12 = 0;
      do
      {
        float32x4_t v13 = *(float32x4_t *)(v5 + v12);
        float32x4_t v15 = *((float32x4_t *)a2 + 6);
        float32x4_t v14 = *((float32x4_t *)a2 + 7);
        float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
        float32x4_t v17 = vmulq_f32(vrecpeq_f32(v16), v14);
        float32x4_t v18 = vmulq_f32(v13, vmulq_f32(v17, vrecpsq_f32(v17, v16)));
        float32x4_t v19 = *((float32x4_t *)a2 + 4);
        int8x16_t v20 = *((int8x16_t *)a2 + 5);
        float32x4_t v21 = vmaxq_f32(v18, v19);
        int32x4_t v22 = *((int32x4_t *)a2 + 22);
        float32x4_t v23 = *((float32x4_t *)a2 + 23);
        float32x4_t v24 = vminq_f32(v21, v23);
        int8x16_t v26 = *((int8x16_t *)a2 + 8);
        float32x4_t v25 = *((float32x4_t *)a2 + 9);
        float32x4_t v27 = *((float32x4_t *)a2 + 29);
        float32x4_t v28 = (float32x4_t)vorrq_s8(vandq_s8(v26, (int8x16_t)v24), (int8x16_t)v27);
        int8x16_t v30 = *((int8x16_t *)a2 + 10);
        float32x4_t v29 = *((float32x4_t *)a2 + 11);
        float32x4_t v31 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v24, 0x17uLL)), (float32x4_t)vandq_s8(v30, (int8x16_t)vcgtq_f32(v25, v24))), v29);
        float32x4_t v33 = *((float32x4_t *)a2 + 12);
        float32x4_t v32 = *((float32x4_t *)a2 + 13);
        float32x4_t v34 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v28, v33));
        float32x4_t v35 = vaddq_f32(v31, v34);
        float32x4_t v36 = vsubq_f32(vsubq_f32(v28, v27), vmulq_f32(vmulq_f32(v32, v34), v28));
        float32x4_t v37 = *((float32x4_t *)a2 + 14);
        float32x4_t v38 = *((float32x4_t *)a2 + 15);
        float32x4_t v39 = *((float32x4_t *)a2 + 16);
        float32x4_t v40 = *((float32x4_t *)a2 + 17);
        float32x4_t v41 = vaddq_f32(v35, vmulq_f32(v36, vaddq_f32(vaddq_f32(v39, vmulq_f32(v36, v40)), vmulq_f32(vmulq_f32(v36, v36), vaddq_f32(v37, vmulq_f32(v38, v36))))));
        float32x4_t v42 = *((float32x4_t *)a2 + 24);
        float32x4_t v43 = vmulq_f32(v42, v41);
        float32x4_t v44 = *((float32x4_t *)a2 + 18);
        float32x4_t v45 = *((float32x4_t *)a2 + 19);
        float32x4_t v46 = vmaxq_f32(v43, v44);
        float32x4_t v47 = vcvtq_f32_s32(vcvtq_s32_f32(v46));
        float32x4_t v48 = vsubq_f32(v47, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v47, v46)));
        float32x4_t v49 = vsubq_f32(v46, v48);
        float32x4_t v50 = *((float32x4_t *)a2 + 20);
        float32x4_t v51 = *((float32x4_t *)a2 + 21);
        float32x4_t v52 = vmulq_f32(vaddq_f32(v27, vmulq_f32(v49, vaddq_f32(v51, vmulq_f32(v49, vaddq_f32(v45, vmulq_f32(v50, v49)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v22, vcvtq_s32_f32(v48)), 0x17uLL));
        float32x4_t v53 = vmulq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)a2);
        float32x4_t v54 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 3), v15);
        float32x4_t v55 = vmulq_f32(v14, vrecpeq_f32(v54));
        float32x4_t v56 = vmaxq_f32(vmulq_f32(v53, vmulq_f32(v55, vrecpsq_f32(v55, v54))), v19);
        float32x4_t v57 = vminq_f32(v56, v23);
        float32x4_t v58 = (float32x4_t)vorrq_s8(vandq_s8(v26, (int8x16_t)v57), (int8x16_t)v27);
        float32x4_t v59 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v58, v33));
        float32x4_t v60 = vsubq_f32(vsubq_f32(v58, v27), vmulq_f32(vmulq_f32(v32, v59), v58));
        float32x4_t v61 = vmaxq_f32(vmulq_f32(v42, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v57, 0x17uLL)), (float32x4_t)vandq_s8(v30, (int8x16_t)vcgtq_f32(v25, v57))), v29), v59), vmulq_f32(v60, vaddq_f32(vaddq_f32(v39, vmulq_f32(v40, v60)), vmulq_f32(vmulq_f32(v60, v60), vaddq_f32(v37, vmulq_f32(v38, v60))))))), v44);
        float32x4_t v62 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
        float32x4_t v63 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v62, v61)));
        float32x4_t v64 = vsubq_f32(v61, v63);
        float32x4_t v65 = (float32x4_t)vbslq_s8(v20, (int8x16_t)v53, (int8x16_t)vmulq_f32(vaddq_f32(v27, vmulq_f32(v64, vaddq_f32(v51, vmulq_f32(v64, vaddq_f32(v45, vmulq_f32(v50, v64)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v63), v22), 0x17uLL)));
        float32x4_t v66 = *((float32x4_t *)a2 + 26);
        float32x4_t v67 = vmaxq_f32(v65, v66);
        float32x4_t v68 = vminq_f32(vmaxq_f32(vmulq_f32(v14, vrecpeq_f32(v67)), *((float32x4_t *)a2 + 27)), *((float32x4_t *)a2 + 28));
        int8x16_t v69 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgeq_f32(v66, v65)), v19);
        float32x4_t v70 = vminq_f32(vmaxq_f32((float32x4_t)vbslq_s8(v20, (int8x16_t)v53, vorrq_s8(vandq_s8(vandq_s8((int8x16_t)v27, (int8x16_t)vcgeq_f32(v52, v27)), v69), vbicq_s8((int8x16_t)vsubq_f32(v27, vminq_f32(vmulq_f32(vsubq_f32(v27, v52), vmulq_f32(v68, vrecpsq_f32(v67, v68))), v27)), v69))), v19), *((float32x4_t *)a2 + 30));
        float32x4_t v71 = (float32x4_t)vorrq_s8(vandq_s8(v26, (int8x16_t)v70), (int8x16_t)v27);
        float32x4_t v72 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v70, 0x17uLL)), (float32x4_t)vandq_s8(v30, (int8x16_t)vcgtq_f32(v25, v70))), v29);
        float32x4_t v73 = (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v71, v33));
        float32x4_t v74 = vsubq_f32(vsubq_f32(v71, v27), vmulq_f32(vmulq_f32(v32, v73), v71));
        float32x4_t v75 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 25), vaddq_f32(vaddq_f32(v72, v73), vmulq_f32(v74, vaddq_f32(vaddq_f32(v39, vmulq_f32(v40, v74)), vmulq_f32(vmulq_f32(v74, v74), vaddq_f32(v37, vmulq_f32(v38, v74))))))), v44);
        float32x4_t v76 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
        float32x4_t v77 = vsubq_f32(v76, (float32x4_t)vandq_s8((int8x16_t)v27, (int8x16_t)vcgtq_f32(v76, v75)));
        float32x4_t v78 = vsubq_f32(v75, v77);
        v56.i32[3] = 1.0;
        float32x4_t v79 = (float32x4_t)vbslq_s8(v20, (int8x16_t)v53, (int8x16_t)vmulq_f32(vaddq_f32(v27, vmulq_f32(v78, vaddq_f32(v51, vmulq_f32(v78, vaddq_f32(v45, vmulq_f32(v50, v78)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v77), v22), 0x17uLL)));
        *(float32x4_t *)(v7 + v12) = vaddq_f32(v13, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v20, (int8x16_t)v56, (int8x16_t)vaddq_f32(v56, vmulq_laneq_f32(vsubq_f32(v79, v56), v13, 3))), v13), v79, 3));
        v12 += 16;
      }
      while (v11 != v12);
      ++v4;
      v5 += v8;
      v6 += v9;
      v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t GetBlendLinearBurnTile(HGTile *a1, float32x4_t *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 26);
    uint64_t v10 = *((int *)a1 + 22);
    if (v4 < 2)
    {
      if (v4 == 1)
      {
        uint64_t v32 = 16 * v8;
        do
        {
          float32x4_t v33 = vmulq_f32(*v6, *a2);
          float32x4_t v34 = vmulq_laneq_f32(v33, *v5, 3);
          float32x4_t v35 = vmulq_laneq_f32(*v5, v33, 3);
          *uint64_t v7 = vaddq_f32(vsubq_f32(vsubq_f32(vaddq_f32(*v5, v33), v34), v35), vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v34, v35), (float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(*v5, v33), 3)), a2[4]), a2[3]));
          v5 += v10;
          v6 += v9;
          uint64_t v7 = (float32x4_t *)((char *)v7 + v32);
          --v3;
        }
        while (v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v8;
      uint64_t v13 = 16 * v10;
      uint64_t v14 = 16 * v9;
      do
      {
        uint64_t v15 = 0;
        int v16 = 0;
        do
        {
          float32x4_t v17 = v5[v15];
          float32x4_t v18 = v5[v15 + 1];
          float32x4_t v19 = vmulq_f32(v6[v15], *a2);
          float32x4_t v20 = vmulq_f32(v6[v15 + 1], *a2);
          float32x4_t v21 = vmulq_laneq_f32(v19, v17, 3);
          float32x4_t v22 = vmulq_laneq_f32(v20, v18, 3);
          float32x4_t v23 = vmulq_laneq_f32(v17, v19, 3);
          float32x4_t v24 = vmulq_laneq_f32(v18, v20, 3);
          float32x4_t v26 = a2[3];
          float32x4_t v25 = a2[4];
          float32x4_t v27 = &v7[v15];
          *float32x4_t v27 = vaddq_f32(vsubq_f32(vsubq_f32(vaddq_f32(v17, v19), v21), v23), vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v21, v23), (float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v17, v19), 3)), v25), v26));
          v27[1] = vaddq_f32(vsubq_f32(vsubq_f32(vaddq_f32(v18, v20), v22), v24), vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v22, v24), (float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v18, v20), 3)), v25), v26));
          v16 -= 2;
          v15 += 2;
        }
        while (v4 + v16 > 1);
        if (v4 > -v16)
        {
          float32x4_t v28 = v5[v15];
          float32x4_t v29 = vmulq_f32(v6[v15], *a2);
          float32x4_t v30 = vmulq_laneq_f32(v29, v28, 3);
          float32x4_t v31 = vmulq_laneq_f32(v28, v29, 3);
          v7[v15] = vaddq_f32(vsubq_f32(vsubq_f32(vaddq_f32(v28, v29), v30), v31), vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v30, v31), (float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v28, v29), 3)), a2[4]), a2[3]));
        }
        ++v11;
        uint64_t v7 = (float32x4_t *)((char *)v7 + v12);
        uint64_t v5 = (float32x4_t *)((char *)v5 + v13);
        uint64_t v6 = (float32x4_t *)((char *)v6 + v14);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendLinearBurnPOWTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 10);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 26);
    float v12 = 1.0;
    while (v5 < 2)
    {
      int v133 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v13 = 0;
    uint64_t v14 = 16;
    do
    {
      float32x4_t v15 = *(float32x4_t *)(v8 + v14 - 16);
      float32x4_t v16 = *(float32x4_t *)(v8 + v14);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = *((float32x4_t *)a2 + 7);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v17);
      float32x4_t v20 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3), v17);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v19), v18);
      float32x4_t v22 = vmulq_f32(vrecpeq_f32(v20), v18);
      float32x4_t v23 = vmulq_f32(v21, vrecpsq_f32(v21, v19));
      float32x4_t v24 = vmulq_f32(v22, vrecpsq_f32(v22, v20));
      float32x4_t v25 = *((float32x4_t *)a2 + 4);
      int8x16_t v26 = *((int8x16_t *)a2 + 5);
      float32x4_t v27 = vmaxq_f32(vmulq_f32(v15, v23), v25);
      float32x4_t v28 = vmaxq_f32(vmulq_f32(v16, v24), v25);
      int8x16_t v29 = *((int8x16_t *)a2 + 8);
      float32x4_t v30 = *((float32x4_t *)a2 + 9);
      float32x4_t v31 = *((float32x4_t *)a2 + 29);
      float32x4_t v32 = (float32x4_t)vorrq_s8(vandq_s8(v29, (int8x16_t)v27), (int8x16_t)v31);
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8(v29, (int8x16_t)v28), (int8x16_t)v31);
      int8x16_t v35 = *((int8x16_t *)a2 + 10);
      float32x4_t v34 = *((float32x4_t *)a2 + 11);
      float32x4_t v36 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v27, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v30, v27)));
      float32x4_t v37 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v28, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v30, v28)));
      float32x4_t v38 = *((float32x4_t *)a2 + 12);
      float32x4_t v39 = *((float32x4_t *)a2 + 13);
      float32x4_t v40 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v32, v38));
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v33, v38));
      float32x4_t v42 = vaddq_f32(vsubq_f32(v36, v34), v40);
      float32x4_t v43 = vaddq_f32(vsubq_f32(v37, v34), v41);
      float32x4_t v44 = vsubq_f32(vsubq_f32(v32, v31), vmulq_f32(vmulq_f32(v39, v40), v32));
      float32x4_t v45 = vsubq_f32(vsubq_f32(v33, v31), vmulq_f32(vmulq_f32(v39, v41), v33));
      float32x4_t v46 = *((float32x4_t *)a2 + 14);
      float32x4_t v47 = *((float32x4_t *)a2 + 15);
      float32x4_t v48 = *((float32x4_t *)a2 + 16);
      float32x4_t v49 = *((float32x4_t *)a2 + 17);
      float32x4_t v50 = *((float32x4_t *)a2 + 1);
      float32x4_t v51 = vmulq_f32(v50, vaddq_f32(v42, vmulq_f32(v44, vaddq_f32(vaddq_f32(v48, vmulq_f32(v44, v49)), vmulq_f32(vmulq_f32(v44, v44), vaddq_f32(v46, vmulq_f32(v47, v44)))))));
      float32x4_t v52 = vmulq_f32(v50, vaddq_f32(v43, vmulq_f32(v45, vaddq_f32(vaddq_f32(v48, vmulq_f32(v45, v49)), vmulq_f32(vmulq_f32(v45, v45), vaddq_f32(v46, vmulq_f32(v47, v45)))))));
      float32x4_t v54 = *((float32x4_t *)a2 + 18);
      float32x4_t v53 = *((float32x4_t *)a2 + 19);
      float32x4_t v55 = vmaxq_f32(v51, v54);
      float32x4_t v56 = vmaxq_f32(v52, v54);
      float32x4_t v57 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
      float32x4_t v58 = vcvtq_f32_s32(vcvtq_s32_f32(v56));
      float32x4_t v60 = *((float32x4_t *)a2 + 20);
      float32x4_t v59 = *((float32x4_t *)a2 + 21);
      float32x4_t v61 = vmulq_f32(*(float32x4_t *)(v7 + v14 - 16), *(float32x4_t *)a2);
      float32x4_t v62 = vmulq_f32(*(float32x4_t *)(v7 + v14), *(float32x4_t *)a2);
      float32x4_t v63 = vsubq_f32(v57, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v57, v55)));
      float32x4_t v64 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 3), v17);
      float32x4_t v65 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 3), v17);
      float32x4_t v66 = vmulq_f32(v18, vrecpeq_f32(v64));
      float32x4_t v67 = vsubq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v58, v56)));
      float32x4_t v68 = vmulq_f32(v18, vrecpeq_f32(v65));
      int8x16_t v69 = (int8x16_t)vmulq_f32(v66, vrecpsq_f32(v66, v64));
      int8x16_t v70 = (int8x16_t)vmulq_f32(v68, vrecpsq_f32(v68, v65));
      float32x4_t v71 = vsubq_f32(v55, v63);
      int8x16_t v72 = *((int8x16_t *)a2 + 31);
      float32x4_t v73 = *((float32x4_t *)a2 + 32);
      int8x16_t v74 = vandq_s8(v72, v70);
      float32x4_t v75 = vmulq_f32(v61, (float32x4_t)vorrq_s8(vandq_s8(v72, v69), (int8x16_t)v73));
      float32x4_t v76 = vmulq_f32(v62, (float32x4_t)vorrq_s8(v74, (int8x16_t)v73));
      float32x4_t v77 = vmaxq_f32(v75, v73);
      float32x4_t v78 = vmaxq_f32(v76, v73);
      float32x4_t v79 = (float32x4_t)vorrq_s8(vandq_s8(v29, (int8x16_t)v77), (int8x16_t)v31);
      float32x4_t v80 = (float32x4_t)vorrq_s8(vandq_s8(v29, (int8x16_t)v78), (int8x16_t)v31);
      float32x4_t v81 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v77, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v30, v77)));
      float32x4_t v82 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v78, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v30, v78))), v34);
      float32x4_t v83 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v79, v38));
      float32x4_t v84 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v80, v38));
      float32x4_t v85 = vaddq_f32(vsubq_f32(v81, v34), v83);
      float32x4_t v86 = vaddq_f32(v82, v84);
      float32x4_t v87 = vsubq_f32(vsubq_f32(v79, v31), vmulq_f32(vmulq_f32(v39, v83), v79));
      float32x4_t v88 = vsubq_f32(vsubq_f32(v80, v31), vmulq_f32(vmulq_f32(v39, v84), v80));
      float32x4_t v89 = vsubq_f32(v56, v67);
      float32x4_t v90 = vaddq_f32(v85, vmulq_f32(v87, vaddq_f32(vaddq_f32(v48, vmulq_f32(v49, v87)), vmulq_f32(vmulq_f32(v87, v87), vaddq_f32(v46, vmulq_f32(v47, v87))))));
      int32x4_t v91 = *((int32x4_t *)a2 + 22);
      float32x4_t v92 = vmulq_f32(v50, vaddq_f32(v86, vmulq_f32(v88, vaddq_f32(vaddq_f32(v48, vmulq_f32(v49, v88)), vmulq_f32(vmulq_f32(v88, v88), vaddq_f32(v46, vmulq_f32(v47, v88)))))));
      float32x4_t v93 = vmaxq_f32(vmulq_f32(v50, v90), v54);
      float32x4_t v94 = vmulq_f32(vaddq_f32(v31, vmulq_f32(v71, vaddq_f32(v59, vmulq_f32(v71, vaddq_f32(v53, vmulq_f32(v60, v71)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v91, vcvtq_s32_f32(v63)), 0x17uLL));
      float32x4_t v95 = vmaxq_f32(v92, v54);
      float32x4_t v96 = vcvtq_f32_s32(vcvtq_s32_f32(v93));
      float32x4_t v97 = vcvtq_f32_s32(vcvtq_s32_f32(v95));
      float32x4_t v98 = vsubq_f32(v96, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v96, v93)));
      float32x4_t v99 = vsubq_f32(v97, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v97, v95)));
      float32x4_t v100 = vsubq_f32(v93, v98);
      float32x4_t v101 = vsubq_f32(v95, v99);
      float32x4_t v102 = vmulq_f32(vaddq_f32(v31, vmulq_f32(v89, vaddq_f32(v59, vmulq_f32(v89, vaddq_f32(v53, vmulq_f32(v60, v89)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v91, vcvtq_s32_f32(v67)), 0x17uLL));
      float v12 = 1.0;
      float32x4_t v103 = vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v94, vmulq_f32(vaddq_f32(v31, vmulq_f32(v100, vaddq_f32(v59, vmulq_f32(v100, vaddq_f32(v53, vmulq_f32(v60, v100)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v98), v91), 0x17uLL))), v31), v73), v31);
      float32x4_t v104 = vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v102, vmulq_f32(vaddq_f32(v31, vmulq_f32(v101, vaddq_f32(v59, vmulq_f32(v101, vaddq_f32(v53, vmulq_f32(v60, v101)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v99), v91), 0x17uLL))), v31), v73), v31);
      int8x16_t v105 = (int8x16_t)vcgtq_f32(v30, v103);
      float32x4_t v106 = (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v30, v104));
      float32x4_t v107 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v103, 0x17uLL)), (float32x4_t)vandq_s8(v35, v105));
      int8x16_t v108 = vandq_s8(v29, (int8x16_t)v103);
      int8x16_t v109 = vandq_s8(v29, (int8x16_t)v104);
      float32x4_t v110 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v104, 0x17uLL)), v106);
      float32x4_t v111 = (float32x4_t)vorrq_s8(v108, (int8x16_t)v31);
      float32x4_t v112 = vsubq_f32(v107, v34);
      float32x4_t v113 = vsubq_f32(v110, v34);
      float32x4_t v114 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v111, v38));
      float32x4_t v115 = vaddq_f32(v112, v114);
      float32x4_t v116 = vsubq_f32(vsubq_f32(v111, v31), vmulq_f32(vmulq_f32(v39, v114), v111));
      float32x4_t v117 = (float32x4_t)vorrq_s8(v109, (int8x16_t)v31);
      float32x4_t v118 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v117, v38));
      float32x4_t v119 = vsubq_f32(vsubq_f32(v117, v31), vmulq_f32(vmulq_f32(v39, v118), v117));
      float32x4_t v120 = vaddq_f32(vaddq_f32(v113, v118), vmulq_f32(v119, vaddq_f32(vaddq_f32(v48, vmulq_f32(v49, v119)), vmulq_f32(vmulq_f32(v119, v119), vaddq_f32(v46, vmulq_f32(v47, v119))))));
      float32x4_t v121 = *((float32x4_t *)a2 + 2);
      float32x4_t v122 = vmaxq_f32(vmulq_f32(v121, vaddq_f32(v115, vmulq_f32(v116, vaddq_f32(vaddq_f32(v48, vmulq_f32(v49, v116)), vmulq_f32(vmulq_f32(v116, v116), vaddq_f32(v46, vmulq_f32(v47, v116))))))), v54);
      float32x4_t v123 = vmaxq_f32(vmulq_f32(v121, v120), v54);
      float32x4_t v124 = vcvtq_f32_s32(vcvtq_s32_f32(v122));
      float32x4_t v125 = vcvtq_f32_s32(vcvtq_s32_f32(v123));
      float32x4_t v126 = vsubq_f32(v124, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v124, v122)));
      float32x4_t v127 = vsubq_f32(v125, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v125, v123)));
      float32x4_t v128 = vsubq_f32(v122, v126);
      float32x4_t v129 = vsubq_f32(v123, v127);
      float32x4_t v130 = vmulq_f32(vaddq_f32(v31, vmulq_f32(v128, vaddq_f32(v59, vmulq_f32(v128, vaddq_f32(v53, vmulq_f32(v60, v128)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v126), v91), 0x17uLL));
      v130.i32[3] = 1.0;
      float32x4_t v131 = vmulq_f32(vaddq_f32(v31, vmulq_f32(v129, vaddq_f32(v59, vmulq_f32(v129, vaddq_f32(v53, vmulq_f32(v60, v129)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v127), v91), 0x17uLL));
      v131.i32[3] = 1.0;
      float32x4_t v132 = (float32x4_t *)(v6 + v14);
      v132[-1] = vaddq_f32(*(float32x4_t *)(v8 + v14 - 16), vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v26, (int8x16_t)v130, (int8x16_t)vaddq_f32(v75, vmulq_laneq_f32(vsubq_f32(v130, v75), *(float32x4_t *)(v8 + v14 - 16), 3))), *(float32x4_t *)(v8 + v14 - 16)), v75, 3));
      *float32x4_t v132 = vaddq_f32(v16, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v26, (int8x16_t)v131, (int8x16_t)vaddq_f32(v76, vmulq_laneq_f32(vsubq_f32(v131, v76), v16, 3))), v16), v76, 3));
      v13 -= 2;
      v14 += 32;
    }
    while (v5 + v13 > 1);
    int v133 = -v13;
    if (v133 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v134 = 16 * v133;
    float32x4_t v135 = *(float32x4_t *)(v8 + v134);
    float32x4_t v136 = *((float32x4_t *)a2 + 6);
    float32x4_t v137 = *((float32x4_t *)a2 + 7);
    float32x4_t v138 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 3), v136);
    float32x4_t v139 = vmulq_f32(vrecpeq_f32(v138), v137);
    float32x4_t v140 = vmaxq_f32(vmulq_f32(v135, vmulq_f32(v139, vrecpsq_f32(v139, v138))), *((float32x4_t *)a2 + 4));
    int8x16_t v141 = *((int8x16_t *)a2 + 8);
    float32x4_t v142 = *((float32x4_t *)a2 + 9);
    float32x4_t v143 = *((float32x4_t *)a2 + 29);
    float32x4_t v144 = (float32x4_t)vorrq_s8(vandq_s8(v141, (int8x16_t)v140), (int8x16_t)v143);
    int8x16_t v145 = *((int8x16_t *)a2 + 10);
    float32x4_t v146 = *((float32x4_t *)a2 + 11);
    float32x4_t v147 = *((float32x4_t *)a2 + 12);
    float32x4_t v148 = *((float32x4_t *)a2 + 13);
    float32x4_t v149 = (float32x4_t)vandq_s8((int8x16_t)v143, (int8x16_t)vcgtq_f32(v144, v147));
    float32x4_t v150 = vsubq_f32(vsubq_f32(v144, v143), vmulq_f32(vmulq_f32(v148, v149), v144));
    float32x4_t v151 = *((float32x4_t *)a2 + 14);
    float32x4_t v152 = *((float32x4_t *)a2 + 15);
    float32x4_t v153 = *((float32x4_t *)a2 + 16);
    float32x4_t v154 = *((float32x4_t *)a2 + 17);
    float32x4_t v155 = vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v140, 0x17uLL)), (float32x4_t)vandq_s8(v145, (int8x16_t)vcgtq_f32(v142, v140))), v146), v149), vmulq_f32(v150, vaddq_f32(vaddq_f32(v153, vmulq_f32(v150, v154)), vmulq_f32(vmulq_f32(v150, v150), vaddq_f32(v151, vmulq_f32(v152, v150))))));
    float32x4_t v156 = *((float32x4_t *)a2 + 1);
    float32x4_t v157 = *((float32x4_t *)a2 + 18);
    float32x4_t v158 = *((float32x4_t *)a2 + 19);
    float32x4_t v159 = vmaxq_f32(vmulq_f32(v156, v155), v157);
    float32x4_t v160 = vcvtq_f32_s32(vcvtq_s32_f32(v159));
    float32x4_t v161 = vsubq_f32(v160, (float32x4_t)vandq_s8((int8x16_t)v143, (int8x16_t)vcgtq_f32(v160, v159)));
    float32x4_t v162 = vsubq_f32(v159, v161);
    float32x4_t v163 = *((float32x4_t *)a2 + 20);
    float32x4_t v164 = *((float32x4_t *)a2 + 21);
    int32x4_t v165 = *((int32x4_t *)a2 + 22);
    float32x4_t v166 = vmulq_f32(vaddq_f32(v143, vmulq_f32(v162, vaddq_f32(v164, vmulq_f32(v162, vaddq_f32(v158, vmulq_f32(v163, v162)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v165, vcvtq_s32_f32(v161)), 0x17uLL));
    float32x4_t v167 = vmulq_f32(*(float32x4_t *)(v7 + v134), *(float32x4_t *)a2);
    float32x4_t v168 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v167, 3), v136);
    float32x4_t v169 = vmulq_f32(v137, vrecpeq_f32(v168));
    float32x4_t v170 = *((float32x4_t *)a2 + 32);
    float32x4_t v171 = vmulq_f32(v167, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v169, vrecpsq_f32(v169, v168))), (int8x16_t)v170));
    float32x4_t v172 = vmaxq_f32(v171, v170);
    float32x4_t v173 = (float32x4_t)vorrq_s8(vandq_s8(v141, (int8x16_t)v172), (int8x16_t)v143);
    float32x4_t v174 = (float32x4_t)vandq_s8((int8x16_t)v143, (int8x16_t)vcgtq_f32(v173, v147));
    float32x4_t v175 = vsubq_f32(vsubq_f32(v173, v143), vmulq_f32(vmulq_f32(v148, v174), v173));
    float32x4_t v176 = vmaxq_f32(vmulq_f32(v156, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v172, 0x17uLL)), (float32x4_t)vandq_s8(v145, (int8x16_t)vcgtq_f32(v142, v172))), v146), v174), vmulq_f32(v175, vaddq_f32(vaddq_f32(v153, vmulq_f32(v154, v175)), vmulq_f32(vmulq_f32(v175, v175), vaddq_f32(v151, vmulq_f32(v152, v175))))))), v157);
    float32x4_t v177 = vcvtq_f32_s32(vcvtq_s32_f32(v176));
    float32x4_t v178 = vsubq_f32(v177, (float32x4_t)vandq_s8((int8x16_t)v143, (int8x16_t)vcgtq_f32(v177, v176)));
    float32x4_t v179 = vsubq_f32(v176, v178);
    float32x4_t v180 = vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v166, vmulq_f32(vaddq_f32(v143, vmulq_f32(v179, vaddq_f32(v164, vmulq_f32(v179, vaddq_f32(v158, vmulq_f32(v163, v179)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v178), v165), 0x17uLL))), v143), v170), v143);
    float32x4_t v181 = (float32x4_t)vorrq_s8(vandq_s8(v141, (int8x16_t)v180), (int8x16_t)v143);
    float32x4_t v182 = (float32x4_t)vandq_s8((int8x16_t)v143, (int8x16_t)vcgtq_f32(v181, v147));
    float32x4_t v183 = vsubq_f32(vsubq_f32(v181, v143), vmulq_f32(vmulq_f32(v148, v182), v181));
    float32x4_t v184 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 2), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v180, 0x17uLL)), (float32x4_t)vandq_s8(v145, (int8x16_t)vcgtq_f32(v142, v180))), v146), v182), vmulq_f32(v183, vaddq_f32(vaddq_f32(v153, vmulq_f32(v154, v183)), vmulq_f32(vmulq_f32(v183, v183), vaddq_f32(v151, vmulq_f32(v152, v183))))))), v157);
    float32x4_t v185 = vcvtq_f32_s32(vcvtq_s32_f32(v184));
    float32x4_t v186 = vsubq_f32(v185, (float32x4_t)vandq_s8((int8x16_t)v143, (int8x16_t)vcgtq_f32(v185, v184)));
    float32x4_t v187 = vsubq_f32(v184, v186);
    float32x4_t v188 = vmulq_f32(vaddq_f32(v143, vmulq_f32(v187, vaddq_f32(v164, vmulq_f32(v187, vaddq_f32(v158, vmulq_f32(v163, v187)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v186), v165), 0x17uLL));
    v188.f32[3] = v12;
    *(float32x4_t *)(v6 + v134) = vaddq_f32(v135, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v188, (int8x16_t)vaddq_f32(v171, vmulq_laneq_f32(vsubq_f32(v188, v171), v135, 3))), v135), v171, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendLinearBurnQTTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 10);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 26);
    float v12 = 1.0;
    while (v5 < 2)
    {
      int v119 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v13 = 0;
    uint64_t v14 = 16;
    do
    {
      float32x4_t v15 = *(float32x4_t *)(v8 + v14 - 16);
      float32x4_t v176 = *(float32x4_t *)(v8 + v14);
      int8x16_t v17 = *((int8x16_t *)a2 + 5);
      float32x4_t v16 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v16);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v176, 3), v16);
      float32x4_t v21 = *((float32x4_t *)a2 + 7);
      int8x16_t v20 = *((int8x16_t *)a2 + 8);
      float32x4_t v22 = vmulq_f32(vrecpeq_f32(v18), v21);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v19), v21);
      float32x4_t v24 = vmulq_f32(v15, vmulq_f32(v22, vrecpsq_f32(v22, v18)));
      int8x16_t v25 = *((int8x16_t *)a2 + 31);
      float32x4_t v26 = *((float32x4_t *)a2 + 32);
      float32x4_t v27 = vmaxq_f32(vmulq_f32(v176, vmulq_f32(v23, vrecpsq_f32(v23, v19))), v26);
      float32x4_t v29 = *((float32x4_t *)a2 + 23);
      float32x4_t v28 = *((float32x4_t *)a2 + 24);
      float32x4_t v30 = vminq_f32(vmaxq_f32(v24, v26), v29);
      float32x4_t v31 = vminq_f32(v27, v29);
      float32x4_t v32 = *((float32x4_t *)a2 + 29);
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v30), (int8x16_t)v32);
      float32x4_t v35 = *((float32x4_t *)a2 + 9);
      int8x16_t v34 = *((int8x16_t *)a2 + 10);
      float32x4_t v36 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v31), (int8x16_t)v32);
      float32x4_t v37 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v35, v30)));
      float32x4_t v39 = *((float32x4_t *)a2 + 11);
      float32x4_t v38 = *((float32x4_t *)a2 + 12);
      float32x4_t v40 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v33, v38));
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v36, v38));
      float32x4_t v42 = vaddq_f32(vsubq_f32(v37, v39), v40);
      float32x4_t v44 = *((float32x4_t *)a2 + 13);
      float32x4_t v43 = *((float32x4_t *)a2 + 14);
      float32x4_t v45 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v31, 0x17uLL)), (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v35, v31))), v39), v41);
      float32x4_t v46 = vsubq_f32(vsubq_f32(v33, v32), vmulq_f32(vmulq_f32(v44, v40), v33));
      float32x4_t v47 = vsubq_f32(vsubq_f32(v36, v32), vmulq_f32(vmulq_f32(v44, v41), v36));
      float32x4_t v49 = *((float32x4_t *)a2 + 15);
      float32x4_t v48 = *((float32x4_t *)a2 + 16);
      float32x4_t v51 = *((float32x4_t *)a2 + 17);
      float32x4_t v50 = *((float32x4_t *)a2 + 18);
      float32x4_t v52 = vmulq_f32(v28, vaddq_f32(v42, vmulq_f32(v46, vaddq_f32(vaddq_f32(v48, vmulq_f32(v46, v51)), vmulq_f32(vmulq_f32(v46, v46), vaddq_f32(v43, vmulq_f32(v49, v46)))))));
      float32x4_t v53 = vmulq_f32(v28, vaddq_f32(v45, vmulq_f32(v47, vaddq_f32(vaddq_f32(v48, vmulq_f32(v47, v51)), vmulq_f32(vmulq_f32(v47, v47), vaddq_f32(v43, vmulq_f32(v49, v47)))))));
      float32x4_t v54 = *((float32x4_t *)a2 + 19);
      float32x4_t v55 = *((float32x4_t *)a2 + 20);
      float32x4_t v56 = vmaxq_f32(v52, v50);
      float32x4_t v57 = vmulq_f32(*(float32x4_t *)(v7 + v14 - 16), *(float32x4_t *)a2);
      float32x4_t v58 = vmulq_f32(*(float32x4_t *)(v7 + v14), *(float32x4_t *)a2);
      float32x4_t v59 = vmaxq_f32(v53, v50);
      float32x4_t v60 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3), v16);
      float32x4_t v61 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 3), v16);
      float32x4_t v62 = vmulq_f32(v21, vrecpeq_f32(v60));
      float32x4_t v63 = vmulq_f32(v21, vrecpeq_f32(v61));
      int8x16_t v64 = vandq_s8(v25, (int8x16_t)vmulq_f32(v63, vrecpsq_f32(v63, v61)));
      float32x4_t v65 = vcvtq_f32_s32(vcvtq_s32_f32(v56));
      float32x4_t v66 = vmulq_f32(v57, (float32x4_t)vorrq_s8(vandq_s8(v25, (int8x16_t)vmulq_f32(v62, vrecpsq_f32(v62, v60))), (int8x16_t)v26));
      float32x4_t v67 = vmulq_f32(v58, (float32x4_t)vorrq_s8(v64, (int8x16_t)v26));
      float32x4_t v68 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v69 = vminq_f32(vmaxq_f32(v66, v26), v29);
      float32x4_t v70 = vminq_f32(vmaxq_f32(v67, v26), v29);
      float32x4_t v71 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v69), (int8x16_t)v32);
      float32x4_t v72 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v70), (int8x16_t)v32);
      float32x4_t v73 = vsubq_f32(v65, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v65, v56)));
      float32x4_t v74 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v69, 0x17uLL)), (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v35, v69))), v39);
      float32x4_t v75 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v70, 0x17uLL)), (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v35, v70))), v39);
      float32x4_t v76 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v71, v38));
      float32x4_t v77 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v72, v38));
      float32x4_t v78 = vaddq_f32(v74, v76);
      float32x4_t v79 = vaddq_f32(v75, v77);
      float32x4_t v80 = vsubq_f32(v68, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v68, v59)));
      float32x4_t v81 = vsubq_f32(vsubq_f32(v71, v32), vmulq_f32(vmulq_f32(v44, v76), v71));
      float32x4_t v82 = vsubq_f32(vsubq_f32(v72, v32), vmulq_f32(vmulq_f32(v44, v77), v72));
      float32x4_t v83 = vsubq_f32(v56, v73);
      float32x4_t v85 = *((float32x4_t *)a2 + 21);
      int32x4_t v84 = *((int32x4_t *)a2 + 22);
      float32x4_t v86 = vmulq_f32(v83, vaddq_f32(v85, vmulq_f32(v83, vaddq_f32(v54, vmulq_f32(v55, v83)))));
      float32x4_t v87 = vsubq_f32(v59, v80);
      float32x4_t v88 = vmulq_f32(v81, vaddq_f32(vaddq_f32(v48, vmulq_f32(v51, v81)), vmulq_f32(vmulq_f32(v81, v81), vaddq_f32(v43, vmulq_f32(v49, v81)))));
      float v12 = 1.0;
      float32x4_t v89 = vmaxq_f32(vmulq_f32(v28, vaddq_f32(v78, v88)), v50);
      float32x4_t v90 = vmaxq_f32(vmulq_f32(v28, vaddq_f32(v79, vmulq_f32(v82, vaddq_f32(vaddq_f32(v48, vmulq_f32(v51, v82)), vmulq_f32(vmulq_f32(v82, v82), vaddq_f32(v43, vmulq_f32(v49, v82))))))), v50);
      float32x4_t v91 = vcvtq_f32_s32(vcvtq_s32_f32(v89));
      float32x4_t v92 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
      float32x4_t v93 = vsubq_f32(v91, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v91, v89)));
      float32x4_t v94 = vsubq_f32(v92, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v92, v90)));
      float32x4_t v95 = vsubq_f32(v89, v93);
      float32x4_t v96 = vsubq_f32(v90, v94);
      float32x4_t v97 = vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(vmulq_f32(vaddq_f32(v32, v86), (float32x4_t)vshlq_n_s32(vaddq_s32(v84, vcvtq_s32_f32(v73)), 0x17uLL)), vmulq_f32(vaddq_f32(v32, vmulq_f32(v95, vaddq_f32(v85, vmulq_f32(v95, vaddq_f32(v54, vmulq_f32(v55, v95)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v93), v84), 0x17uLL))), v32), v26), v32);
      float32x4_t v98 = vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(vmulq_f32(vaddq_f32(v32, vmulq_f32(v87, vaddq_f32(v85, vmulq_f32(v87, vaddq_f32(v54, vmulq_f32(v55, v87)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v84, vcvtq_s32_f32(v80)), 0x17uLL)), vmulq_f32(vaddq_f32(v32, vmulq_f32(v96, vaddq_f32(v85, vmulq_f32(v96, vaddq_f32(v54, vmulq_f32(v55, v96)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v94), v84), 0x17uLL))), v32), v26), v32);
      float32x4_t v99 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v97, 0x17uLL)), (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v35, v97)));
      float32x4_t v100 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v97), (int8x16_t)v32);
      float32x4_t v101 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v100, v38));
      float32x4_t v102 = vsubq_f32(vsubq_f32(v100, v32), vmulq_f32(vmulq_f32(v44, v101), v100));
      float32x4_t v103 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v98), (int8x16_t)v32);
      float32x4_t v104 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v103, v38));
      float32x4_t v105 = vsubq_f32(vsubq_f32(v103, v32), vmulq_f32(vmulq_f32(v44, v104), v103));
      float32x4_t v106 = vaddq_f32(vaddq_f32(vsubq_f32(v99, v39), v101), vmulq_f32(v102, vaddq_f32(vaddq_f32(v48, vmulq_f32(v51, v102)), vmulq_f32(vmulq_f32(v102, v102), vaddq_f32(v43, vmulq_f32(v49, v102))))));
      float32x4_t v107 = *((float32x4_t *)a2 + 25);
      float32x4_t v108 = vmaxq_f32(vmulq_f32(v107, v106), v50);
      float32x4_t v109 = vmaxq_f32(vmulq_f32(v107, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v98, 0x17uLL)), (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v35, v98))), v39), v104), vmulq_f32(v105, vaddq_f32(vaddq_f32(v48, vmulq_f32(v51, v105)), vmulq_f32(vmulq_f32(v105, v105), vaddq_f32(v43, vmulq_f32(v49, v105))))))), v50);
      float32x4_t v110 = vcvtq_f32_s32(vcvtq_s32_f32(v108));
      float32x4_t v111 = vcvtq_f32_s32(vcvtq_s32_f32(v109));
      float32x4_t v112 = vsubq_f32(v110, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v110, v108)));
      float32x4_t v113 = vsubq_f32(v111, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v111, v109)));
      float32x4_t v114 = vsubq_f32(v108, v112);
      float32x4_t v115 = vsubq_f32(v109, v113);
      float32x4_t v116 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v114, vaddq_f32(v85, vmulq_f32(v114, vaddq_f32(v54, vmulq_f32(v55, v114)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v112), v84), 0x17uLL));
      v116.i32[3] = 1.0;
      float32x4_t v117 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v115, vaddq_f32(v85, vmulq_f32(v115, vaddq_f32(v54, vmulq_f32(v55, v115)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v113), v84), 0x17uLL));
      v117.i32[3] = 1.0;
      float32x4_t v118 = (float32x4_t *)(v6 + v14);
      v118[-1] = vaddq_f32(*(float32x4_t *)(v8 + v14 - 16), vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v116, (int8x16_t)vaddq_f32(v66, vmulq_laneq_f32(vsubq_f32(v116, v66), *(float32x4_t *)(v8 + v14 - 16), 3))), *(float32x4_t *)(v8 + v14 - 16)), v66, 3));
      *float32x4_t v118 = vaddq_f32(v176, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v117, (int8x16_t)vaddq_f32(v67, vmulq_laneq_f32(vsubq_f32(v117, v67), v176, 3))), v176), v67, 3));
      v13 -= 2;
      v14 += 32;
    }
    while (v5 + v13 > 1);
    int v119 = -v13;
    if (v119 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v120 = 16 * v119;
    float32x4_t v121 = *(float32x4_t *)(v8 + v120);
    float32x4_t v122 = *((float32x4_t *)a2 + 6);
    float32x4_t v123 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v121, 3), v122);
    float32x4_t v124 = *((float32x4_t *)a2 + 7);
    int8x16_t v125 = *((int8x16_t *)a2 + 8);
    float32x4_t v126 = vmulq_f32(vrecpeq_f32(v123), v124);
    float32x4_t v127 = *((float32x4_t *)a2 + 32);
    float32x4_t v128 = *((float32x4_t *)a2 + 23);
    float32x4_t v129 = *((float32x4_t *)a2 + 24);
    float32x4_t v130 = vminq_f32(vmaxq_f32(vmulq_f32(v121, vmulq_f32(v126, vrecpsq_f32(v126, v123))), v127), v128);
    float32x4_t v131 = *((float32x4_t *)a2 + 29);
    float32x4_t v132 = (float32x4_t)vorrq_s8(vandq_s8(v125, (int8x16_t)v130), (int8x16_t)v131);
    float32x4_t v133 = *((float32x4_t *)a2 + 9);
    int8x16_t v134 = *((int8x16_t *)a2 + 10);
    float32x4_t v135 = *((float32x4_t *)a2 + 11);
    float32x4_t v136 = *((float32x4_t *)a2 + 12);
    float32x4_t v137 = (float32x4_t)vandq_s8((int8x16_t)v131, (int8x16_t)vcgtq_f32(v132, v136));
    float32x4_t v138 = *((float32x4_t *)a2 + 13);
    float32x4_t v139 = *((float32x4_t *)a2 + 14);
    float32x4_t v140 = vsubq_f32(vsubq_f32(v132, v131), vmulq_f32(vmulq_f32(v138, v137), v132));
    float32x4_t v141 = *((float32x4_t *)a2 + 15);
    float32x4_t v142 = *((float32x4_t *)a2 + 16);
    float32x4_t v143 = *((float32x4_t *)a2 + 17);
    float32x4_t v144 = *((float32x4_t *)a2 + 18);
    float32x4_t v145 = vmaxq_f32(vmulq_f32(v129, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v130, 0x17uLL)), (float32x4_t)vandq_s8(v134, (int8x16_t)vcgtq_f32(v133, v130))), v135), v137), vmulq_f32(v140, vaddq_f32(vaddq_f32(v142, vmulq_f32(v140, v143)), vmulq_f32(vmulq_f32(v140, v140), vaddq_f32(v139, vmulq_f32(v141, v140))))))), v144);
    float32x4_t v146 = vcvtq_f32_s32(vcvtq_s32_f32(v145));
    float32x4_t v147 = vsubq_f32(v146, (float32x4_t)vandq_s8((int8x16_t)v131, (int8x16_t)vcgtq_f32(v146, v145)));
    float32x4_t v148 = vsubq_f32(v145, v147);
    float32x4_t v149 = *((float32x4_t *)a2 + 19);
    float32x4_t v150 = *((float32x4_t *)a2 + 20);
    float32x4_t v151 = *((float32x4_t *)a2 + 21);
    int32x4_t v152 = *((int32x4_t *)a2 + 22);
    float32x4_t v153 = vmulq_f32(vaddq_f32(v131, vmulq_f32(v148, vaddq_f32(v151, vmulq_f32(v148, vaddq_f32(v149, vmulq_f32(v150, v148)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v152, vcvtq_s32_f32(v147)), 0x17uLL));
    float32x4_t v154 = vmulq_f32(*(float32x4_t *)(v7 + v120), *(float32x4_t *)a2);
    float32x4_t v155 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v154, 3), v122);
    float32x4_t v156 = vmulq_f32(v124, vrecpeq_f32(v155));
    float32x4_t v157 = vmulq_f32(v154, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v156, vrecpsq_f32(v156, v155))), (int8x16_t)v127));
    float32x4_t v158 = vminq_f32(vmaxq_f32(v157, v127), v128);
    float32x4_t v159 = (float32x4_t)vorrq_s8(vandq_s8(v125, (int8x16_t)v158), (int8x16_t)v131);
    float32x4_t v160 = (float32x4_t)vandq_s8((int8x16_t)v131, (int8x16_t)vcgtq_f32(v159, v136));
    float32x4_t v161 = vsubq_f32(vsubq_f32(v159, v131), vmulq_f32(vmulq_f32(v138, v160), v159));
    float32x4_t v162 = vmaxq_f32(vmulq_f32(v129, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v158, 0x17uLL)), (float32x4_t)vandq_s8(v134, (int8x16_t)vcgtq_f32(v133, v158))), v135), v160), vmulq_f32(v161, vaddq_f32(vaddq_f32(v142, vmulq_f32(v143, v161)), vmulq_f32(vmulq_f32(v161, v161), vaddq_f32(v139, vmulq_f32(v141, v161))))))), v144);
    float32x4_t v163 = vcvtq_f32_s32(vcvtq_s32_f32(v162));
    float32x4_t v164 = vsubq_f32(v163, (float32x4_t)vandq_s8((int8x16_t)v131, (int8x16_t)vcgtq_f32(v163, v162)));
    float32x4_t v165 = vsubq_f32(v162, v164);
    float32x4_t v166 = vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v153, vmulq_f32(vaddq_f32(v131, vmulq_f32(v165, vaddq_f32(v151, vmulq_f32(v165, vaddq_f32(v149, vmulq_f32(v150, v165)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v164), v152), 0x17uLL))), v131), v127), v131);
    float32x4_t v167 = (float32x4_t)vorrq_s8(vandq_s8(v125, (int8x16_t)v166), (int8x16_t)v131);
    float32x4_t v168 = (float32x4_t)vandq_s8((int8x16_t)v131, (int8x16_t)vcgtq_f32(v167, v136));
    float32x4_t v169 = vsubq_f32(vsubq_f32(v167, v131), vmulq_f32(vmulq_f32(v138, v168), v167));
    float32x4_t v170 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 25), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v166, 0x17uLL)), (float32x4_t)vandq_s8(v134, (int8x16_t)vcgtq_f32(v133, v166))), v135), v168), vmulq_f32(v169, vaddq_f32(vaddq_f32(v142, vmulq_f32(v143, v169)), vmulq_f32(vmulq_f32(v169, v169), vaddq_f32(v139, vmulq_f32(v141, v169))))))), v144);
    float32x4_t v171 = vcvtq_f32_s32(vcvtq_s32_f32(v170));
    float32x4_t v172 = vsubq_f32(v171, (float32x4_t)vandq_s8((int8x16_t)v131, (int8x16_t)vcgtq_f32(v171, v170)));
    float32x4_t v173 = vsubq_f32(v170, v172);
    float32x4_t v174 = vmulq_f32(vaddq_f32(v131, vmulq_f32(v173, vaddq_f32(v151, vmulq_f32(v173, vaddq_f32(v149, vmulq_f32(v150, v173)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v172), v152), 0x17uLL));
    v174.f32[3] = v12;
    *(float32x4_t *)(v6 + v120) = vaddq_f32(v121, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v174, (int8x16_t)vaddq_f32(v157, vmulq_laneq_f32(vsubq_f32(v174, v157), v121, 3))), v121), v157, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendAddTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v7 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 22);
    uint64_t v10 = *((int *)a1 + 26);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v46 = 0;
        uint64_t v47 = 16 * v10;
        uint64_t v48 = 16 * v9;
        uint64_t v49 = 16 * v8;
        uint64_t v50 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v51 = 0;
          do
          {
            float32x4_t v52 = v6[v51 / 0x10];
            float32x4_t v53 = vmulq_f32(v5[v51 / 0x10], *(float32x4_t *)a2);
            float32x4_t v54 = vaddq_f32(v52, v53);
            v7[v51 / 0x10] = vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)vsubq_f32(v54, vmulq_f32(v52, v53)), (int8x16_t)v54);
            v51 += 16;
          }
          while (v50 != v51);
          ++v46;
          int v5 = (float32x4_t *)((char *)v5 + v47);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v48);
          uint64_t v7 = (int8x16_t *)((char *)v7 + v49);
        }
        while (v46 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      float32x4_t v15 = v5 + 4;
      float32x4_t v16 = v6 + 4;
      int8x16_t v17 = v7 + 4;
      do
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
        int8x16_t v20 = v17;
        float32x4_t v21 = v16;
        float32x4_t v22 = v15;
        do
        {
          float32x4_t v23 = v22;
          float32x4_t v24 = v21;
          int8x16_t v25 = v20;
          float32x4_t v26 = v6[v18];
          float32x4_t v27 = v6[v18 + 1];
          float32x4_t v28 = v6[v18 + 2];
          float32x4_t v29 = v6[v18 + 3];
          float32x4_t v30 = vmulq_f32(v5[v18], *(float32x4_t *)a2);
          float32x4_t v31 = vmulq_f32(v5[v18 + 1], *(float32x4_t *)a2);
          float32x4_t v32 = vmulq_f32(v5[v18 + 2], *(float32x4_t *)a2);
          float32x4_t v33 = vmulq_f32(v5[v18 + 3], *(float32x4_t *)a2);
          float32x4_t v34 = vaddq_f32(v26, v30);
          float32x4_t v35 = vaddq_f32(v27, v31);
          float32x4_t v36 = vaddq_f32(v28, v32);
          float32x4_t v37 = vaddq_f32(v29, v33);
          int8x16_t v38 = (int8x16_t)vsubq_f32(v34, vmulq_f32(v26, v30));
          int8x16_t v39 = *((int8x16_t *)a2 + 5);
          float32x4_t v40 = &v7[v18];
          *float32x4_t v40 = vbslq_s8(v39, v38, (int8x16_t)v34);
          v40[1] = vbslq_s8(v39, (int8x16_t)vsubq_f32(v35, vmulq_f32(v27, v31)), (int8x16_t)v35);
          v19 += 4;
          v18 += 4;
          v40[2] = vbslq_s8(v39, (int8x16_t)vsubq_f32(v36, vmulq_f32(v28, v32)), (int8x16_t)v36);
          v40[3] = vbslq_s8(v39, (int8x16_t)vsubq_f32(v37, vmulq_f32(v29, v33)), (int8x16_t)v37);
          v22 += 4;
          v21 += 4;
          int8x16_t v20 = v25 + 4;
        }
        while ((uint64_t)v19 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v41 = *v23++;
            float32x4_t v42 = v41;
            float32x4_t v43 = *v24++;
            float32x4_t v44 = vmulq_f32(v42, *(float32x4_t *)a2);
            float32x4_t v45 = vaddq_f32(v43, v44);
            *v25++ = vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)vsubq_f32(v45, vmulq_f32(v43, v44)), (int8x16_t)v45);
            ++v19;
          }
          while (v19 < v4);
        }
        ++v11;
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (int8x16_t *)((char *)v7 + v13);
        int v5 = (float32x4_t *)((char *)v5 + v14);
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v14);
        float32x4_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (int8x16_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendLightenTile(HGTile *a1, float32x4_t *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    uint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 26);
    uint64_t v10 = *((int *)a1 + 22);
    if ((int)v4 < 3)
    {
      if ((int)v4 >= 1)
      {
        int v47 = 0;
        uint64_t v48 = 16 * v10;
        uint64_t v49 = 16 * v9;
        uint64_t v50 = 16 * v8;
        uint64_t v51 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v52 = 0;
          do
          {
            float32x4_t v53 = v5[v52 / 0x10];
            float32x4_t v54 = vmulq_f32(v6[v52 / 0x10], *a2);
            float32x4_t v55 = vmulq_laneq_f32(v54, v53, 3);
            float32x4_t v56 = vmulq_laneq_f32(v53, v54, 3);
            v7[v52 / 0x10] = vaddq_f32(vmaxq_f32(v55, v56), vsubq_f32(vsubq_f32(vaddq_f32(v53, v54), v55), v56));
            v52 += 16;
          }
          while (v51 != v52);
          ++v47;
          int v5 = (float32x4_t *)((char *)v5 + v48);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v49);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v50);
        }
        while (v47 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      float32x4_t v15 = v5 + 3;
      float32x4_t v16 = v6 + 3;
      int8x16_t v17 = v7 + 3;
      do
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
        int v20 = 3;
        float32x4_t v21 = v17;
        float32x4_t v22 = v16;
        float32x4_t v23 = v15;
        do
        {
          float32x4_t v24 = v23;
          int8x16_t v25 = v22;
          float32x4_t v26 = v21;
          int v27 = v20;
          float32x4_t v28 = v5[v18];
          float32x4_t v29 = v5[v18 + 1];
          float32x4_t v30 = v5[v18 + 2];
          float32x4_t v31 = vmulq_f32(v6[v18], *a2);
          float32x4_t v32 = vmulq_f32(v6[v18 + 1], *a2);
          float32x4_t v33 = vmulq_f32(v6[v18 + 2], *a2);
          float32x4_t v34 = vmulq_laneq_f32(v31, v28, 3);
          float32x4_t v35 = vmulq_laneq_f32(v32, v29, 3);
          float32x4_t v36 = vmulq_laneq_f32(v33, v30, 3);
          float32x4_t v37 = vmulq_laneq_f32(v28, v31, 3);
          float32x4_t v38 = vmulq_laneq_f32(v29, v32, 3);
          float32x4_t v39 = vmulq_laneq_f32(v30, v33, 3);
          float32x4_t v40 = &v7[v18];
          v19 += 3;
          v18 += 3;
          v23 += 3;
          *float32x4_t v40 = vaddq_f32(vmaxq_f32(v34, v37), vsubq_f32(vsubq_f32(vaddq_f32(v28, v31), v34), v37));
          v40[1] = vaddq_f32(vmaxq_f32(v35, v38), vsubq_f32(vsubq_f32(vaddq_f32(v29, v32), v35), v38));
          v40[2] = vaddq_f32(vmaxq_f32(v36, v39), vsubq_f32(vsubq_f32(vaddq_f32(v30, v33), v36), v39));
          v22 += 3;
          v21 += 3;
          int v20 = v27 + 3;
        }
        while (v19 < v4 - 2);
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v41 = *v24++;
            float32x4_t v42 = v41;
            float32x4_t v43 = *v25++;
            float32x4_t v44 = vmulq_f32(v43, *a2);
            float32x4_t v45 = vmulq_laneq_f32(v44, v42, 3);
            float32x4_t v46 = vmulq_laneq_f32(v42, v44, 3);
            *v26++ = vaddq_f32(vmaxq_f32(v45, v46), vsubq_f32(vsubq_f32(vaddq_f32(v42, v44), v45), v46));
            ++v27;
          }
          while ((int)v4 > v27);
        }
        ++v11;
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v13);
        int v5 = (float32x4_t *)((char *)v5 + v14);
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v14);
        float32x4_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (float32x4_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendScreenTile(HGTile *a1, float32x4_t *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 26);
    uint64_t v10 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v38 = 0;
        uint64_t v39 = 16 * v10;
        uint64_t v40 = 16 * v9;
        uint64_t v41 = 16 * v8;
        uint64_t v42 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v43 = 0;
          do
          {
            float32x4_t v44 = vmulq_f32(v6[v43 / 0x10], *a2);
            v7[v43 / 0x10] = vsubq_f32(vaddq_f32(v5[v43 / 0x10], v44), vminq_f32(vminq_f32(vmulq_f32(v5[v43 / 0x10], v44), v44), v5[v43 / 0x10]));
            v43 += 16;
          }
          while (v42 != v43);
          ++v38;
          int v5 = (float32x4_t *)((char *)v5 + v39);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v40);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v41);
        }
        while (v38 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      float32x4_t v15 = v5 + 4;
      float32x4_t v16 = v6 + 4;
      int8x16_t v17 = v7 + 4;
      do
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
        int v20 = v17;
        float32x4_t v21 = v16;
        float32x4_t v22 = v15;
        do
        {
          float32x4_t v23 = v22;
          float32x4_t v24 = v21;
          int8x16_t v25 = v20;
          float32x4_t v26 = vmulq_f32(v6[v18], *a2);
          float32x4_t v27 = vmulq_f32(v6[v18 + 1], *a2);
          float32x4_t v28 = vmulq_f32(v6[v18 + 2], *a2);
          float32x4_t v29 = vmulq_f32(v6[v18 + 3], *a2);
          float32x4_t v30 = vsubq_f32(vaddq_f32(v5[v18 + 1], v27), vminq_f32(vminq_f32(vmulq_f32(v5[v18 + 1], v27), v27), v5[v18 + 1]));
          float32x4_t v31 = vsubq_f32(vaddq_f32(v5[v18 + 2], v28), vminq_f32(vminq_f32(vmulq_f32(v5[v18 + 2], v28), v28), v5[v18 + 2]));
          float32x4_t v32 = vsubq_f32(vaddq_f32(v5[v18 + 3], v29), vminq_f32(vminq_f32(vmulq_f32(v5[v18 + 3], v29), v29), v5[v18 + 3]));
          float32x4_t v33 = &v7[v18];
          *float32x4_t v33 = vsubq_f32(vaddq_f32(v5[v18], v26), vminq_f32(vminq_f32(vmulq_f32(v5[v18], v26), v26), v5[v18]));
          v33[1] = v30;
          v19 += 4;
          v18 += 4;
          v33[2] = v31;
          v33[3] = v32;
          v22 += 4;
          v21 += 4;
          int v20 = v25 + 4;
        }
        while ((uint64_t)v19 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v34 = *v23++;
            float32x4_t v35 = v34;
            float32x4_t v36 = *v24++;
            float32x4_t v37 = vmulq_f32(v36, *a2);
            *v25++ = vsubq_f32(vaddq_f32(v35, v37), vminq_f32(vminq_f32(vmulq_f32(v35, v37), v37), v35));
            ++v19;
          }
          while (v19 < v4);
        }
        ++v11;
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v13);
        int v5 = (float32x4_t *)((char *)v5 + v14);
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v14);
        float32x4_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (float32x4_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendScreenPOWTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 12);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v12 = 0;
      do
      {
        float32x4_t v13 = *(float32x4_t *)(v5 + v12);
        float32x4_t v14 = *((float32x4_t *)a2 + 29);
        float32x4_t v15 = *((float32x4_t *)a2 + 27);
        float32x4_t v111 = *((float32x4_t *)a2 + 28);
        float32x4_t v16 = vminq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v13, *((float32x4_t *)a2 + 30)), 3), v15), v111);
        float32x4_t v17 = vminq_f32(vmaxq_f32(vrecpeq_f32(v16), v15), v111);
        float32x4_t v18 = vminq_f32(vmaxq_f32(vmulq_f32(v17, vrecpsq_f32(v16, v17)), v15), v111);
        float32x4_t v19 = vmulq_f32(v13, vmulq_f32(v18, vrecpsq_f32(v16, v18)));
        float32x4_t v20 = *((float32x4_t *)a2 + 32);
        float32x4_t v112 = v20;
        int8x16_t v107 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)vceqq_f32(*((float32x4_t *)a2 + 1), v20)), v20);
        float32x4_t v21 = (float32x4_t)vbslq_s8(v107, (int8x16_t)v14, (int8x16_t)vmaxq_f32(v19, v20));
        float32x4_t v108 = *((float32x4_t *)a2 + 9);
        int8x16_t v109 = *((int8x16_t *)a2 + 33);
        int8x16_t v110 = *((int8x16_t *)a2 + 8);
        int8x16_t v22 = (int8x16_t)vcgtq_f32(v108, v21);
        int8x16_t v23 = (int8x16_t)vmulq_f32(v21, vaddq_f32(v14, (float32x4_t)vandq_s8(v109, v22)));
        float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(v110, v23), (int8x16_t)v14);
        float32x4_t v105 = *((float32x4_t *)a2 + 4);
        float32x4_t v25 = *((float32x4_t *)a2 + 10);
        int8x16_t v26 = *((int8x16_t *)a2 + 34);
        int8x16_t v27 = *((int8x16_t *)a2 + 35);
        float32x4_t v28 = *((float32x4_t *)a2 + 12);
        float32x4_t v29 = (float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)vcgtq_f32(v24, v28));
        float32x4_t v30 = vaddq_f32(vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vceqq_f32(v25, v21)), vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v21, v105), v26), (float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vceqq_f32(v105, v21))), (float32x4_t)vandq_s8(v27, v22))), *((float32x4_t *)a2 + 11)), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v23, 0x17uLL))), v29);
        float32x4_t v31 = vsubq_f32(vsubq_f32(v24, v14), vmulq_f32(vmulq_f32(*((float32x4_t *)a2 + 13), v29), v24));
        float32x4_t v32 = vmulq_f32(v31, v31);
        float32x4_t v106 = *((float32x4_t *)a2 + 38);
        float32x4_t v33 = *((float32x4_t *)a2 + 40);
        float32x4_t v34 = *((float32x4_t *)a2 + 42);
        float32x4_t v104 = *((float32x4_t *)a2 + 43);
        float32x4_t v35 = *((float32x4_t *)a2 + 45);
        float32x4_t v100 = *((float32x4_t *)a2 + 44);
        float32x4_t v36 = vmulq_f32(*((float32x4_t *)a2 + 1), vaddq_f32(v30, vmulq_f32(v31, vaddq_f32(v100, vmulq_f32(v31, vaddq_f32(vaddq_f32(vaddq_f32(v34, vmulq_f32(v31, v104)), vmulq_f32(v32, vaddq_f32(v33, vmulq_f32(*((float32x4_t *)a2 + 41), v31)))), vmulq_f32(vmulq_f32(v32, v32), vaddq_f32(vaddq_f32(v106, vmulq_f32(*((float32x4_t *)a2 + 39), v31)), vmulq_f32(v32,
                                vaddq_f32(*((float32x4_t *)a2 + 36), vmulq_f32(*((float32x4_t *)a2 + 37), v31)))))))))));
        float32x4_t v101 = *((float32x4_t *)a2 + 46);
        float32x4_t v37 = vminq_f32(vmaxq_f32(v36, v35), v101);
        float32x4_t v38 = vcvtq_f32_s32(vcvtq_s32_f32(v37));
        float32x4_t v39 = vsubq_f32(v38, (float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)vcgtq_f32(v38, v37)));
        float32x4_t v40 = vsubq_f32(v37, v39);
        float32x4_t v41 = *((float32x4_t *)a2 + 49);
        float32x4_t v98 = *((float32x4_t *)a2 + 47);
        float32x4_t v99 = *((float32x4_t *)a2 + 48);
        float32x4_t v103 = *((float32x4_t *)a2 + 50);
        float32x4_t v42 = vmulq_f32(v40, v40);
        float32x4_t v43 = *((float32x4_t *)a2 + 52);
        float32x4_t v97 = *((float32x4_t *)a2 + 53);
        float32x4_t v44 = *((float32x4_t *)a2 + 51);
        int8x16_t v45 = (int8x16_t)vcgtq_f32(v97, v39);
        int32x4_t v102 = *((int32x4_t *)a2 + 22);
        float32x4_t v46 = *((float32x4_t *)a2 + 54);
        float32x4_t v47 = vmulq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)a2);
        float32x4_t v48 = *((float32x4_t *)a2 + 27);
        float32x4_t v49 = vminq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v47, v46), 3), v48), v111);
        float32x4_t v50 = vminq_f32(vmaxq_f32(vrecpeq_f32(v49), v48), v111);
        float32x4_t v51 = vminq_f32(vmaxq_f32(vmulq_f32(v50, vrecpsq_f32(v49, v50)), v48), v111);
        float32x4_t v52 = vmulq_f32(v51, vrecpsq_f32(v49, v51));
        v52.i32[3] = 1.0;
        float32x4_t v53 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v14, vorrq_s8((int8x16_t)vcltzq_f32(v36), (int8x16_t)vcgezq_f32(v36))), v112), (int8x16_t)vmulq_f32(vaddq_f32(v14, (float32x4_t)vandq_s8(v45, (int8x16_t)v46)), vmulq_f32(vaddq_f32(v14, vmulq_f32(v40, vaddq_f32(vaddq_f32(v44, vmulq_f32(v40, v43)), vmulq_f32(v42, vaddq_f32(
                                                      vaddq_f32(v41, vmulq_f32(v103, v40)),
                                                      vmulq_f32(v42, vaddq_f32(v98, vmulq_f32(v99, v40)))))))),
                                            (float32x4_t)vshlq_n_s32(vaddq_s32(v102, vcvtq_s32_f32(vaddq_f32(v39, (float32x4_t)vandq_s8(v27, v45)))), 0x17uLL))), (int8x16_t)v36);
        float32x4_t v54 = vmulq_f32(v47, v52);
        float32x4_t v55 = (float32x4_t)vbslq_s8(v107, (int8x16_t)v14, (int8x16_t)vmaxq_f32(v54, v112));
        int8x16_t v56 = (int8x16_t)vcgtq_f32(v108, v55);
        float32x4_t v57 = vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v55, v105), v26), (float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vceqq_f32(v55, v105))), (float32x4_t)vandq_s8(v27, v56));
        int8x16_t v58 = (int8x16_t)vmulq_f32(v55, vaddq_f32(v14, (float32x4_t)vandq_s8(v109, v56)));
        float32x4_t v59 = *((float32x4_t *)a2 + 11);
        float32x4_t v60 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vceqq_f32(v55, v25)), v57), v59), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v58, 0x17uLL)));
        float32x4_t v61 = (float32x4_t)vorrq_s8(vandq_s8(v110, v58), (int8x16_t)v14);
        float32x4_t v62 = (float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)vcgtq_f32(v61, v28));
        float32x4_t v63 = *((float32x4_t *)a2 + 13);
        float32x4_t v64 = vsubq_f32(vsubq_f32(v61, v14), vmulq_f32(vmulq_f32(v63, v62), v61));
        float32x4_t v65 = *((float32x4_t *)a2 + 37);
        float32x4_t v66 = *((float32x4_t *)a2 + 36);
        float32x4_t v67 = vmulq_f32(v64, v64);
        float32x4_t v68 = *((float32x4_t *)a2 + 41);
        float32x4_t v69 = vmulq_f32(*((float32x4_t *)a2 + 1), vaddq_f32(vaddq_f32(v60, v62), vmulq_f32(v64, vaddq_f32(v100, vmulq_f32(v64, vaddq_f32(vaddq_f32(vaddq_f32(v34, vmulq_f32(v104, v64)), vmulq_f32(v67, vaddq_f32(v33, vmulq_f32(v68, v64)))), vmulq_f32(vmulq_f32(v67, v67), vaddq_f32(vaddq_f32(v106, vmulq_f32(*((float32x4_t *)a2 + 39), v64)), vmulq_f32(v67, vaddq_f32(v66, vmulq_f32(v65, v64)))))))))));
        float32x4_t v70 = vminq_f32(vmaxq_f32(v69, v35), v101);
        float32x4_t v71 = vcvtq_f32_s32(vcvtq_s32_f32(v70));
        float32x4_t v72 = vsubq_f32(v71, (float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)vcgtq_f32(v71, v70)));
        float32x4_t v73 = vsubq_f32(v70, v72);
        float32x4_t v74 = vmulq_f32(v73, v73);
        int8x16_t v75 = (int8x16_t)vcgtq_f32(v97, v72);
        float32x4_t v76 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v14, vorrq_s8((int8x16_t)vcltzq_f32(v69), (int8x16_t)vcgezq_f32(v69))), v112), (int8x16_t)vmulq_f32(vaddq_f32(v14, (float32x4_t)vandq_s8(v75, (int8x16_t)v46)), vmulq_f32(vaddq_f32(v14, vmulq_f32(v73, vaddq_f32(vaddq_f32(v44, vmulq_f32(v43, v73)), vmulq_f32(v74, vaddq_f32(
                                                      vaddq_f32(v41, vmulq_f32(v103, v73)),
                                                      vmulq_f32(v74, vaddq_f32(v98, vmulq_f32(v99, v73)))))))),
                                            (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(vaddq_f32(v72, (float32x4_t)vandq_s8(v27, v75))), v102), 0x17uLL))), (int8x16_t)v69);
        int8x16_t v77 = (int8x16_t)vsubq_f32(vaddq_f32(v53, v76), vminq_f32(vminq_f32(vmulq_f32(v53, v76), v76), v53));
        float32x4_t v78 = *((float32x4_t *)a2 + 2);
        float32x4_t v79 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)vceqq_f32(v78, v112)), v112), (int8x16_t)v14, v77);
        int8x16_t v80 = (int8x16_t)vcgtq_f32(v108, v79);
        float32x4_t v81 = vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v79, v105), v26), (float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vceqq_f32(v79, v105))), (float32x4_t)vandq_s8(v27, v80));
        int8x16_t v82 = (int8x16_t)vmulq_f32(v79, vaddq_f32(v14, (float32x4_t)vandq_s8(v109, v80)));
        float32x4_t v83 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vceqq_f32(v79, v25)), v81), v59), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v82, 0x17uLL)));
        float32x4_t v84 = (float32x4_t)vorrq_s8(vandq_s8(v110, v82), (int8x16_t)v14);
        float32x4_t v85 = (float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)vcgtq_f32(v84, v28));
        float32x4_t v86 = vsubq_f32(vsubq_f32(v84, v14), vmulq_f32(vmulq_f32(v63, v85), v84));
        float32x4_t v87 = vmulq_f32(v86, v86);
        float32x4_t v88 = vmulq_f32(v78, vaddq_f32(vaddq_f32(v83, v85), vmulq_f32(v86, vaddq_f32(v100, vmulq_f32(v86, vaddq_f32(vaddq_f32(vaddq_f32(v34, vmulq_f32(v104, v86)), vmulq_f32(v87, vaddq_f32(*((float32x4_t *)a2 + 40), vmulq_f32(v68, v86)))), vmulq_f32(vmulq_f32(v87, v87), vaddq_f32(vaddq_f32(v106, vmulq_f32(*((float32x4_t *)a2 + 39), v86)), vmulq_f32(v87, vaddq_f32(v66, vmulq_f32(v65, v86)))))))))));
        float32x4_t v89 = vminq_f32(vmaxq_f32(v88, v35), v101);
        float32x4_t v90 = vcvtq_f32_s32(vcvtq_s32_f32(v89));
        float32x4_t v91 = vsubq_f32(v90, (float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)vcgtq_f32(v90, v89)));
        float32x4_t v92 = vsubq_f32(v89, v91);
        float32x4_t v93 = vmulq_f32(v92, v92);
        int8x16_t v94 = (int8x16_t)vcgtq_f32(v97, v91);
        float32x4_t v95 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v14, vorrq_s8((int8x16_t)vcltzq_f32(v88), (int8x16_t)vcgezq_f32(v88))), v112), (int8x16_t)vmulq_f32(vaddq_f32(v14, (float32x4_t)vandq_s8(v94, (int8x16_t)v46)), vmulq_f32(vaddq_f32(v14, vmulq_f32(v92, vaddq_f32(vaddq_f32(v44, vmulq_f32(v43, v92)), vmulq_f32(v93, vaddq_f32(
                                                      vaddq_f32(v41, vmulq_f32(v103, v92)),
                                                      vmulq_f32(v93, vaddq_f32(v98, vmulq_f32(v99, v92)))))))),
                                            (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(vaddq_f32(v91, (float32x4_t)vandq_s8(v27, v94))), v102), 0x17uLL))), (int8x16_t)v88);
        v95.i32[3] = 1.0;
        *(float32x4_t *)(v7 + v12) = vaddq_f32(*(float32x4_t *)(v5 + v12), vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v95, (int8x16_t)vaddq_f32(v54, vmulq_laneq_f32(vsubq_f32(v95, v54), *(float32x4_t *)(v5 + v12), 3))), *(float32x4_t *)(v5 + v12)), v54, 3));
        v12 += 16;
      }
      while (v11 != v12);
      ++v4;
      v5 += v8;
      v6 += v9;
      v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t GetBlendScreenQTTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 10);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 26);
    float v12 = 1.0;
    while (v5 < 2)
    {
      int v129 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v13 = 0;
    uint64_t v14 = 16;
    do
    {
      float32x4_t v15 = *(float32x4_t *)(v8 + v14 - 16);
      float32x4_t v187 = *(float32x4_t *)(v8 + v14);
      float32x4_t v16 = *((float32x4_t *)a2 + 6);
      float32x4_t v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v16);
      float32x4_t v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v187, 3), v16);
      float32x4_t v20 = *((float32x4_t *)a2 + 7);
      int8x16_t v19 = *((int8x16_t *)a2 + 8);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v17), v20);
      float32x4_t v22 = vmulq_f32(vrecpeq_f32(v18), v20);
      float32x4_t v23 = vmulq_f32(v15, vmulq_f32(v21, vrecpsq_f32(v21, v17)));
      int8x16_t v25 = *((int8x16_t *)a2 + 31);
      float32x4_t v24 = *((float32x4_t *)a2 + 32);
      float32x4_t v26 = vmaxq_f32(vmulq_f32(v187, vmulq_f32(v22, vrecpsq_f32(v22, v18))), v24);
      float32x4_t v28 = *((float32x4_t *)a2 + 23);
      float32x4_t v27 = *((float32x4_t *)a2 + 24);
      float32x4_t v29 = vminq_f32(vmaxq_f32(v23, v24), v28);
      float32x4_t v30 = vminq_f32(v26, v28);
      float32x4_t v31 = *((float32x4_t *)a2 + 29);
      float32x4_t v32 = *((float32x4_t *)a2 + 30);
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)v29), (int8x16_t)v31);
      float32x4_t v35 = *((float32x4_t *)a2 + 9);
      int8x16_t v34 = *((int8x16_t *)a2 + 10);
      float32x4_t v36 = (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)v30), (int8x16_t)v31);
      float32x4_t v37 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v29, 0x17uLL)), (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v35, v29)));
      float32x4_t v39 = *((float32x4_t *)a2 + 11);
      float32x4_t v38 = *((float32x4_t *)a2 + 12);
      float32x4_t v40 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v33, v38));
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v36, v38));
      float32x4_t v42 = vaddq_f32(vsubq_f32(v37, v39), v40);
      float32x4_t v44 = *((float32x4_t *)a2 + 13);
      float32x4_t v43 = *((float32x4_t *)a2 + 14);
      float32x4_t v45 = vmulq_f32(v44, v41);
      float32x4_t v46 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v35, v30))), v39), v41);
      float32x4_t v47 = vmulq_f32(vmulq_f32(v44, v40), v33);
      float32x4_t v48 = vmulq_f32(v45, v36);
      float32x4_t v49 = vsubq_f32(vsubq_f32(v33, v31), v47);
      float32x4_t v50 = vsubq_f32(vsubq_f32(v36, v31), v48);
      float32x4_t v52 = *((float32x4_t *)a2 + 15);
      float32x4_t v51 = *((float32x4_t *)a2 + 16);
      float32x4_t v54 = *((float32x4_t *)a2 + 17);
      float32x4_t v53 = *((float32x4_t *)a2 + 18);
      float32x4_t v55 = vaddq_f32(v46, vmulq_f32(v50, vaddq_f32(vaddq_f32(v51, vmulq_f32(v50, v54)), vmulq_f32(vmulq_f32(v50, v50), vaddq_f32(v43, vmulq_f32(v52, v50))))));
      float32x4_t v56 = vmulq_f32(v27, vaddq_f32(v42, vmulq_f32(v49, vaddq_f32(vaddq_f32(v51, vmulq_f32(v49, v54)), vmulq_f32(vmulq_f32(v49, v49), vaddq_f32(v43, vmulq_f32(v52, v49)))))));
      float32x4_t v57 = vmulq_f32(*(float32x4_t *)(v7 + v14 - 16), *(float32x4_t *)a2);
      float32x4_t v58 = vmaxq_f32(v56, v53);
      float32x4_t v59 = vmulq_f32(*(float32x4_t *)(v7 + v14), *(float32x4_t *)a2);
      float32x4_t v60 = vmaxq_f32(vmulq_f32(v27, v55), v53);
      float32x4_t v61 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3), v16);
      float32x4_t v62 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 3), v16);
      float32x4_t v63 = vmulq_f32(v20, vrecpeq_f32(v61));
      float32x4_t v64 = vmulq_f32(v20, vrecpeq_f32(v62));
      float32x4_t v65 = (float32x4_t)vorrq_s8(vandq_s8(v25, (int8x16_t)vmulq_f32(v64, vrecpsq_f32(v64, v62))), (int8x16_t)v24);
      float32x4_t v66 = vmulq_f32(v57, (float32x4_t)vorrq_s8(vandq_s8(v25, (int8x16_t)vmulq_f32(v63, vrecpsq_f32(v63, v61))), (int8x16_t)v24));
      float32x4_t v67 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v68 = vmulq_f32(v59, v65);
      float32x4_t v69 = vminq_f32(vmaxq_f32(v66, v24), v28);
      float32x4_t v70 = vminq_f32(vmaxq_f32(v68, v24), v28);
      float32x4_t v71 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
      float32x4_t v72 = (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)v69), (int8x16_t)v31);
      float32x4_t v73 = (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)v70), (int8x16_t)v31);
      float32x4_t v74 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v72, v38));
      float32x4_t v75 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v73, v38));
      float32x4_t v76 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v69, 0x17uLL)), (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v35, v69))), v39), v74);
      float32x4_t v77 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v70, 0x17uLL)), (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v35, v70))), v39), v75);
      float32x4_t v78 = vmulq_f32(vmulq_f32(v44, v74), v72);
      float32x4_t v79 = vsubq_f32(v67, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v67, v58)));
      float32x4_t v80 = vmulq_f32(vmulq_f32(v44, v75), v73);
      float32x4_t v81 = vsubq_f32(v72, v31);
      float32x4_t v82 = vsubq_f32(v73, v31);
      float32x4_t v83 = vsubq_f32(v81, v78);
      float32x4_t v84 = vsubq_f32(v82, v80);
      float32x4_t v85 = vsubq_f32(v71, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v71, v60)));
      float32x4_t v86 = vsubq_f32(v58, v79);
      float32x4_t v88 = *((float32x4_t *)a2 + 19);
      float32x4_t v87 = *((float32x4_t *)a2 + 20);
      float32x4_t v90 = *((float32x4_t *)a2 + 21);
      int32x4_t v89 = *((int32x4_t *)a2 + 22);
      float32x4_t v91 = vsubq_f32(v60, v85);
      float32x4_t v92 = vmaxq_f32(vmulq_f32(v27, vaddq_f32(v76, vmulq_f32(v83, vaddq_f32(vaddq_f32(v51, vmulq_f32(v54, v83)), vmulq_f32(vmulq_f32(v83, v83), vaddq_f32(v43, vmulq_f32(v52, v83))))))), v53);
      float32x4_t v93 = vmulq_f32(vaddq_f32(v31, vmulq_f32(v86, vaddq_f32(v90, vmulq_f32(v86, vaddq_f32(v88, vmulq_f32(v87, v86)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v89, vcvtq_s32_f32(v79)), 0x17uLL));
      float32x4_t v94 = vmaxq_f32(vmulq_f32(v27, vaddq_f32(v77, vmulq_f32(v84, vaddq_f32(vaddq_f32(v51, vmulq_f32(v54, v84)), vmulq_f32(vmulq_f32(v84, v84), vaddq_f32(v43, vmulq_f32(v52, v84))))))), v53);
      float32x4_t v95 = vcvtq_f32_s32(vcvtq_s32_f32(v92));
      float32x4_t v96 = vcvtq_f32_s32(vcvtq_s32_f32(v94));
      float32x4_t v97 = vsubq_f32(v95, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v95, v92)));
      float32x4_t v98 = vsubq_f32(v96, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v96, v94)));
      int32x4_t v99 = vcvtq_s32_f32(v85);
      float v12 = 1.0;
      float32x4_t v100 = vsubq_f32(v92, v97);
      float32x4_t v101 = vsubq_f32(v94, v98);
      float32x4_t v102 = vmulq_f32(vaddq_f32(v31, vmulq_f32(v91, vaddq_f32(v90, vmulq_f32(v91, vaddq_f32(v88, vmulq_f32(v87, v91)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v89, v99), 0x17uLL));
      float32x4_t v103 = vmulq_f32(vaddq_f32(v31, vmulq_f32(v100, vaddq_f32(v90, vmulq_f32(v100, vaddq_f32(v88, vmulq_f32(v87, v100)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v97), v89), 0x17uLL));
      float32x4_t v104 = vmulq_f32(vaddq_f32(v31, vmulq_f32(v101, vaddq_f32(v90, vmulq_f32(v101, vaddq_f32(v88, vmulq_f32(v87, v101)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v98), v89), 0x17uLL));
      float32x4_t v105 = vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v93, v103), vminq_f32(vminq_f32(vmulq_f32(v93, v103), v103), v93)), v24), v32);
      float32x4_t v106 = vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v102, v104), vminq_f32(vminq_f32(vmulq_f32(v102, v104), v104), v102)), v24), v32);
      float32x4_t v107 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v105, 0x17uLL)), (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v35, v105)));
      float32x4_t v108 = (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)v105), (int8x16_t)v31);
      float32x4_t v109 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v108, v38));
      float32x4_t v110 = vaddq_f32(vsubq_f32(v107, v39), v109);
      float32x4_t v111 = vsubq_f32(vsubq_f32(v108, v31), vmulq_f32(vmulq_f32(v44, v109), v108));
      float32x4_t v112 = (float32x4_t)vorrq_s8(vandq_s8(v19, (int8x16_t)v106), (int8x16_t)v31);
      float32x4_t v113 = (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v112, v38));
      float32x4_t v114 = vsubq_f32(vsubq_f32(v112, v31), vmulq_f32(vmulq_f32(v44, v113), v112));
      float32x4_t v115 = vaddq_f32(v110, vmulq_f32(v111, vaddq_f32(vaddq_f32(v51, vmulq_f32(v54, v111)), vmulq_f32(vmulq_f32(v111, v111), vaddq_f32(v43, vmulq_f32(v52, v111))))));
      float32x4_t v116 = *((float32x4_t *)a2 + 25);
      float32x4_t v117 = vmaxq_f32(vmulq_f32(v116, v115), v53);
      float32x4_t v118 = vmaxq_f32(vmulq_f32(v116, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v106, 0x17uLL)), (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v35, v106))), v39), v113), vmulq_f32(v114, vaddq_f32(vaddq_f32(v51, vmulq_f32(v54, v114)), vmulq_f32(vmulq_f32(v114, v114), vaddq_f32(v43, vmulq_f32(v52, v114))))))), v53);
      float32x4_t v119 = vcvtq_f32_s32(vcvtq_s32_f32(v117));
      float32x4_t v120 = vcvtq_f32_s32(vcvtq_s32_f32(v118));
      float32x4_t v121 = vsubq_f32(v119, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v119, v117)));
      float32x4_t v122 = vsubq_f32(v120, (float32x4_t)vandq_s8((int8x16_t)v31, (int8x16_t)vcgtq_f32(v120, v118)));
      float32x4_t v123 = vsubq_f32(v117, v121);
      float32x4_t v124 = vsubq_f32(v118, v122);
      float32x4_t v125 = vmulq_f32(vaddq_f32(v31, vmulq_f32(v123, vaddq_f32(v90, vmulq_f32(v123, vaddq_f32(v88, vmulq_f32(v87, v123)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v121), v89), 0x17uLL));
      v125.i32[3] = 1.0;
      float32x4_t v126 = vmulq_f32(vaddq_f32(v31, vmulq_f32(v124, vaddq_f32(v90, vmulq_f32(v124, vaddq_f32(v88, vmulq_f32(v87, v124)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v122), v89), 0x17uLL));
      v126.i32[3] = 1.0;
      int8x16_t v127 = *((int8x16_t *)a2 + 5);
      float32x4_t v128 = (float32x4_t *)(v6 + v14);
      v128[-1] = vaddq_f32(*(float32x4_t *)(v8 + v14 - 16), vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v127, (int8x16_t)v125, (int8x16_t)vaddq_f32(v66, vmulq_laneq_f32(vsubq_f32(v125, v66), *(float32x4_t *)(v8 + v14 - 16), 3))), *(float32x4_t *)(v8 + v14 - 16)), v66, 3));
      *float32x4_t v128 = vaddq_f32(v187, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v127, (int8x16_t)v126, (int8x16_t)vaddq_f32(v68, vmulq_laneq_f32(vsubq_f32(v126, v68), v187, 3))), v187), v68, 3));
      v13 -= 2;
      v14 += 32;
    }
    while (v5 + v13 > 1);
    int v129 = -v13;
    if (v129 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v130 = 16 * v129;
    float32x4_t v131 = *(float32x4_t *)(v8 + v130);
    float32x4_t v132 = *((float32x4_t *)a2 + 6);
    float32x4_t v133 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v131, 3), v132);
    float32x4_t v135 = *((float32x4_t *)a2 + 7);
    int8x16_t v134 = *((int8x16_t *)a2 + 8);
    float32x4_t v136 = vmulq_f32(vrecpeq_f32(v133), v135);
    float32x4_t v137 = *((float32x4_t *)a2 + 32);
    float32x4_t v138 = *((float32x4_t *)a2 + 23);
    float32x4_t v139 = *((float32x4_t *)a2 + 24);
    float32x4_t v140 = vminq_f32(vmaxq_f32(vmulq_f32(v131, vmulq_f32(v136, vrecpsq_f32(v136, v133))), v137), v138);
    float32x4_t v141 = *((float32x4_t *)a2 + 29);
    float32x4_t v142 = (float32x4_t)vorrq_s8(vandq_s8(v134, (int8x16_t)v140), (int8x16_t)v141);
    float32x4_t v143 = *((float32x4_t *)a2 + 9);
    int8x16_t v144 = *((int8x16_t *)a2 + 10);
    float32x4_t v145 = *((float32x4_t *)a2 + 11);
    float32x4_t v146 = *((float32x4_t *)a2 + 12);
    float32x4_t v147 = (float32x4_t)vandq_s8((int8x16_t)v141, (int8x16_t)vcgtq_f32(v142, v146));
    float32x4_t v148 = *((float32x4_t *)a2 + 13);
    float32x4_t v149 = *((float32x4_t *)a2 + 14);
    float32x4_t v150 = vsubq_f32(vsubq_f32(v142, v141), vmulq_f32(vmulq_f32(v148, v147), v142));
    float32x4_t v151 = *((float32x4_t *)a2 + 15);
    float32x4_t v152 = *((float32x4_t *)a2 + 16);
    float32x4_t v154 = *((float32x4_t *)a2 + 17);
    float32x4_t v153 = *((float32x4_t *)a2 + 18);
    float32x4_t v155 = vmaxq_f32(vmulq_f32(v139, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v140, 0x17uLL)), (float32x4_t)vandq_s8(v144, (int8x16_t)vcgtq_f32(v143, v140))), v145), v147), vmulq_f32(v150, vaddq_f32(vaddq_f32(v152, vmulq_f32(v150, v154)), vmulq_f32(vmulq_f32(v150, v150), vaddq_f32(v149, vmulq_f32(v151, v150))))))), v153);
    float32x4_t v156 = vcvtq_f32_s32(vcvtq_s32_f32(v155));
    float32x4_t v157 = vsubq_f32(v156, (float32x4_t)vandq_s8((int8x16_t)v141, (int8x16_t)vcgtq_f32(v156, v155)));
    float32x4_t v158 = vsubq_f32(v155, v157);
    float32x4_t v159 = *((float32x4_t *)a2 + 19);
    float32x4_t v160 = *((float32x4_t *)a2 + 20);
    float32x4_t v161 = *((float32x4_t *)a2 + 21);
    int32x4_t v162 = *((int32x4_t *)a2 + 22);
    float32x4_t v163 = vmulq_f32(*(float32x4_t *)(v7 + v130), *(float32x4_t *)a2);
    float32x4_t v164 = vmulq_f32(vaddq_f32(v141, vmulq_f32(v158, vaddq_f32(v161, vmulq_f32(v158, vaddq_f32(v159, vmulq_f32(v160, v158)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v162, vcvtq_s32_f32(v157)), 0x17uLL));
    float32x4_t v165 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v163, 3), v132);
    float32x4_t v166 = vmulq_f32(v135, vrecpeq_f32(v165));
    float32x4_t v167 = vmulq_f32(v163, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v166, vrecpsq_f32(v166, v165))), (int8x16_t)v137));
    float32x4_t v168 = vminq_f32(vmaxq_f32(v167, v137), v138);
    float32x4_t v169 = (float32x4_t)vorrq_s8(vandq_s8(v134, (int8x16_t)v168), (int8x16_t)v141);
    float32x4_t v170 = (float32x4_t)vandq_s8((int8x16_t)v141, (int8x16_t)vcgtq_f32(v169, v146));
    float32x4_t v171 = vsubq_f32(vsubq_f32(v169, v141), vmulq_f32(vmulq_f32(v148, v170), v169));
    float32x4_t v172 = vmaxq_f32(vmulq_f32(v139, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v168, 0x17uLL)), (float32x4_t)vandq_s8(v144, (int8x16_t)vcgtq_f32(v143, v168))), v145), v170), vmulq_f32(v171, vaddq_f32(vaddq_f32(v152, vmulq_f32(v154, v171)), vmulq_f32(vmulq_f32(v171, v171), vaddq_f32(v149, vmulq_f32(v151, v171))))))), v153);
    float32x4_t v173 = vcvtq_f32_s32(vcvtq_s32_f32(v172));
    float32x4_t v174 = vsubq_f32(v173, (float32x4_t)vandq_s8((int8x16_t)v141, (int8x16_t)vcgtq_f32(v173, v172)));
    float32x4_t v175 = vsubq_f32(v172, v174);
    float32x4_t v176 = vmulq_f32(vaddq_f32(v141, vmulq_f32(v175, vaddq_f32(v161, vmulq_f32(v175, vaddq_f32(v159, vmulq_f32(v160, v175)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v174), v162), 0x17uLL));
    float32x4_t v177 = vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v164, v176), vminq_f32(vminq_f32(vmulq_f32(v164, v176), v176), v164)), v137), *((float32x4_t *)a2 + 30));
    float32x4_t v178 = (float32x4_t)vorrq_s8(vandq_s8(v134, (int8x16_t)v177), (int8x16_t)v141);
    float32x4_t v179 = (float32x4_t)vandq_s8((int8x16_t)v141, (int8x16_t)vcgtq_f32(v178, v146));
    float32x4_t v180 = vsubq_f32(vsubq_f32(v178, v141), vmulq_f32(vmulq_f32(v148, v179), v178));
    float32x4_t v181 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 25), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v177, 0x17uLL)), (float32x4_t)vandq_s8(v144, (int8x16_t)vcgtq_f32(v143, v177))), v145), v179), vmulq_f32(v180, vaddq_f32(vaddq_f32(v152, vmulq_f32(v154, v180)), vmulq_f32(vmulq_f32(v180, v180), vaddq_f32(v149, vmulq_f32(v151, v180))))))), v153);
    float32x4_t v182 = vcvtq_f32_s32(vcvtq_s32_f32(v181));
    float32x4_t v183 = vsubq_f32(v182, (float32x4_t)vandq_s8((int8x16_t)v141, (int8x16_t)vcgtq_f32(v182, v181)));
    float32x4_t v184 = vsubq_f32(v181, v183);
    float32x4_t v185 = vmulq_f32(vaddq_f32(v141, vmulq_f32(v184, vaddq_f32(v161, vmulq_f32(v184, vaddq_f32(v159, vmulq_f32(v160, v184)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v183), v162), 0x17uLL));
    v185.f32[3] = v12;
    *(float32x4_t *)(v6 + v130) = vaddq_f32(v131, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v185, (int8x16_t)vaddq_f32(v167, vmulq_laneq_f32(vsubq_f32(v185, v167), v131, 3))), v131), v167, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendColorDodgeTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = *((void *)a1 + 12);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v48 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v12 = 0;
    uint64_t v13 = 16;
    do
    {
      float32x4_t v14 = vmulq_f32(*(float32x4_t *)(v8 + v13 - 16), *(float32x4_t *)a2);
      float32x4_t v15 = vmulq_f32(*(float32x4_t *)(v8 + v13), *(float32x4_t *)a2);
      float32x4_t v16 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3);
      float32x4_t v17 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3);
      int8x16_t v19 = *((int8x16_t *)a2 + 5);
      float32x4_t v18 = *((float32x4_t *)a2 + 6);
      float32x4_t v20 = vmaxq_f32(v16, v18);
      float32x4_t v21 = vmaxq_f32(v17, v18);
      float32x4_t v22 = *((float32x4_t *)a2 + 7);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v20), v22);
      float32x4_t v24 = vmulq_f32(vrecpeq_f32(v21), v22);
      float32x4_t v25 = vmulq_f32(v23, vrecpsq_f32(v23, v20));
      float32x4_t v26 = vmulq_f32(v24, vrecpsq_f32(v24, v21));
      float32x4_t v27 = *(float32x4_t *)(v7 + v13 - 16);
      float32x4_t v28 = *(float32x4_t *)(v7 + v13);
      float32x4_t v29 = vmulq_f32(v14, v25);
      float32x4_t v30 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 3), v18);
      float32x4_t v31 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 3), v18);
      float32x4_t v32 = vmulq_f32(v15, v26);
      float32x4_t v33 = vmulq_f32(v22, vrecpeq_f32(v30));
      float32x4_t v35 = *((float32x4_t *)a2 + 28);
      float32x4_t v34 = *((float32x4_t *)a2 + 29);
      float32x4_t v36 = *((float32x4_t *)a2 + 26);
      float32x4_t v37 = *((float32x4_t *)a2 + 27);
      float32x4_t v38 = vmaxq_f32(vsubq_f32(v34, v29), v36);
      float32x4_t v39 = vmaxq_f32(vsubq_f32(v34, v32), v36);
      float32x4_t v40 = vmulq_f32(v22, vrecpeq_f32(v31));
      float32x4_t v41 = vmulq_f32(v33, vrecpsq_f32(v33, v30));
      float32x4_t v42 = vminq_f32(vmaxq_f32(vmulq_f32(v22, vrecpeq_f32(v38)), v37), v35);
      float32x4_t v43 = vminq_f32(vmaxq_f32(vmulq_f32(v22, vrecpeq_f32(v39)), v37), v35);
      float32x4_t v44 = vmulq_f32(v27, v41);
      float32x4_t v45 = vmulq_f32(v28, vmulq_f32(v40, vrecpsq_f32(v40, v31)));
      float32x4_t v46 = *((float32x4_t *)a2 + 32);
      v29.i32[3] = 1.0;
      v32.i32[3] = 1.0;
      float32x4_t v47 = (float32x4_t *)(v6 + v13);
      v47[-1] = vaddq_f32(v27, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)v29, (int8x16_t)vaddq_f32(v29, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgeq_f32(v14, v16)), v46), (int8x16_t)v34, vbslq_s8((int8x16_t)vcgtq_f32(v44, v46),
                                                                       (int8x16_t)vminq_f32(vmulq_f32(v44, vmulq_f32(v42, vrecpsq_f32(v38, v42))), v34), (int8x16_t)v46)), v29), v27, 3))), v27), v14, 3));
      *float32x4_t v47 = vaddq_f32(v28, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)v32, (int8x16_t)vaddq_f32(v32, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgeq_f32(v15, v17)), v46), (int8x16_t)v34, vbslq_s8((int8x16_t)vcgtq_f32(v45, v46),
                                                                    (int8x16_t)vminq_f32(vmulq_f32(v45, vmulq_f32(v43, vrecpsq_f32(v39, v43))), v34), (int8x16_t)v46)), v32), v28, 3))), v28), v15, 3));
      v12 -= 2;
      v13 += 32;
    }
    while (v5 + v12 > 1);
    int v48 = -v12;
    if (v48 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v49 = 16 * v48;
    float32x4_t v50 = vmulq_f32(*(float32x4_t *)(v8 + v49), *(float32x4_t *)a2);
    float32x4_t v51 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 3);
    float32x4_t v52 = *((float32x4_t *)a2 + 6);
    float32x4_t v53 = vmaxq_f32(v51, v52);
    float32x4_t v54 = *((float32x4_t *)a2 + 7);
    float32x4_t v55 = vmulq_f32(vrecpeq_f32(v53), v54);
    float32x4_t v56 = vmulq_f32(v50, vmulq_f32(v55, vrecpsq_f32(v55, v53)));
    float32x4_t v57 = *(float32x4_t *)(v7 + v49);
    float32x4_t v58 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3), v52);
    float32x4_t v59 = vmulq_f32(v54, vrecpeq_f32(v58));
    float32x4_t v60 = vmulq_f32(v59, vrecpsq_f32(v59, v58));
    float32x4_t v61 = *((float32x4_t *)a2 + 29);
    float32x4_t v62 = vmaxq_f32(vsubq_f32(v61, v56), *((float32x4_t *)a2 + 26));
    float32x4_t v63 = vminq_f32(vmaxq_f32(vmulq_f32(v54, vrecpeq_f32(v62)), *((float32x4_t *)a2 + 27)), *((float32x4_t *)a2 + 28));
    float32x4_t v64 = vmulq_f32(v57, v60);
    v56.i32[3] = 1.0;
    *(float32x4_t *)(v6 + v49) = vaddq_f32(v57, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v56, (int8x16_t)vaddq_f32(v56, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v61, (int8x16_t)vcgeq_f32(v50, v51)), *((float32x4_t *)a2 + 32)), (int8x16_t)v61, vbslq_s8((int8x16_t)vcgtq_f32(v64, *((float32x4_t *)a2 + 32)),
                                                                                        (int8x16_t)vminq_f32(vmulq_f32(v64, vmulq_f32(v63, vrecpsq_f32(v62, v63))), v61), *((int8x16_t *)a2 + 32))), v56), v57, 3))), v57), v50, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendColorDodgePOWTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 12);
    uint64_t v7 = 16 * *((int *)a1 + 22);
    uint64_t v8 = 16 * *((int *)a1 + 26);
    uint64_t v9 = *((void *)a1 + 2);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v12 = 0;
      do
      {
        float32x4_t v13 = *(float32x4_t *)(v5 + v12);
        float32x4_t v14 = *((float32x4_t *)a2 + 6);
        float32x4_t v15 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
        float32x4_t v17 = *((float32x4_t *)a2 + 7);
        int8x16_t v16 = *((int8x16_t *)a2 + 8);
        float32x4_t v18 = vmulq_f32(vrecpeq_f32(v15), v17);
        float32x4_t v19 = *((float32x4_t *)a2 + 32);
        float32x4_t v20 = vmaxq_f32(vmulq_f32(v13, vmulq_f32(v18, vrecpsq_f32(v18, v15))), v19);
        float32x4_t v21 = *((float32x4_t *)a2 + 29);
        float32x4_t v22 = vminq_f32(v20, v21);
        float32x4_t v23 = (float32x4_t)vorrq_s8(vandq_s8(v16, (int8x16_t)v22), (int8x16_t)v21);
        float32x4_t v24 = *((float32x4_t *)a2 + 9);
        int8x16_t v25 = *((int8x16_t *)a2 + 10);
        float32x4_t v26 = *((float32x4_t *)a2 + 11);
        float32x4_t v27 = *((float32x4_t *)a2 + 12);
        float32x4_t v28 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v23, v27));
        float32x4_t v29 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v22, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v24, v22))), v26), v28);
        float32x4_t v31 = *((float32x4_t *)a2 + 13);
        float32x4_t v30 = *((float32x4_t *)a2 + 14);
        float32x4_t v32 = vsubq_f32(vsubq_f32(v23, v21), vmulq_f32(vmulq_f32(v31, v28), v23));
        float32x4_t v33 = *((float32x4_t *)a2 + 15);
        float32x4_t v34 = *((float32x4_t *)a2 + 16);
        float32x4_t v36 = *((float32x4_t *)a2 + 17);
        float32x4_t v35 = *((float32x4_t *)a2 + 18);
        float32x4_t v37 = vaddq_f32(v29, vmulq_f32(v32, vaddq_f32(vaddq_f32(v34, vmulq_f32(v32, v36)), vmulq_f32(vmulq_f32(v32, v32), vaddq_f32(v30, vmulq_f32(v33, v32))))));
        float32x4_t v38 = *((float32x4_t *)a2 + 1);
        float32x4_t v39 = vmaxq_f32(vmulq_f32(v38, v37), v35);
        float32x4_t v40 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
        float32x4_t v41 = vsubq_f32(v40, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v40, v39)));
        float32x4_t v42 = vsubq_f32(v39, v41);
        float32x4_t v43 = *((float32x4_t *)a2 + 19);
        float32x4_t v44 = *((float32x4_t *)a2 + 20);
        float32x4_t v45 = *((float32x4_t *)a2 + 21);
        int32x4_t v46 = *((int32x4_t *)a2 + 22);
        float32x4_t v47 = vmulq_f32(vaddq_f32(v21, vmulq_f32(v42, vaddq_f32(v45, vmulq_f32(v42, vaddq_f32(v43, vmulq_f32(v44, v42)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v46, vcvtq_s32_f32(v41)), 0x17uLL));
        float32x4_t v48 = *(float32x4_t *)(v6 + v12);
        float32x4_t v49 = vmulq_f32(v48, *(float32x4_t *)a2);
        float32x4_t v50 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 3), v14);
        float32x4_t v51 = vmulq_f32(v17, vrecpeq_f32(v50));
        float32x4_t v52 = vmulq_f32(v48, vmulq_f32(v51, vrecpsq_f32(v51, v50)));
        float32x4_t v53 = vminq_f32(vmaxq_f32(v52, v19), v21);
        float32x4_t v54 = (float32x4_t)vorrq_s8(vandq_s8(v16, (int8x16_t)v53), (int8x16_t)v21);
        float32x4_t v55 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v54, v27));
        float32x4_t v56 = vsubq_f32(vsubq_f32(v54, v21), vmulq_f32(vmulq_f32(v31, v55), v54));
        float32x4_t v57 = vmaxq_f32(vmulq_f32(v38, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v53, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v24, v53))), v26), v55), vmulq_f32(v56, vaddq_f32(vaddq_f32(v34, vmulq_f32(v36, v56)), vmulq_f32(vmulq_f32(v56, v56), vaddq_f32(v30, vmulq_f32(v33, v56))))))), v35);
        float32x4_t v58 = vcvtq_f32_s32(vcvtq_s32_f32(v57));
        float32x4_t v59 = vsubq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v58, v57)));
        float32x4_t v60 = vsubq_f32(v57, v59);
        float32x4_t v61 = vsubq_f32(v21, vmulq_f32(vaddq_f32(v21, vmulq_f32(v60, vaddq_f32(v45, vmulq_f32(v60, vaddq_f32(v43, vmulq_f32(v44, v60)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v59), v46), 0x17uLL)));
        float32x4_t v62 = *((float32x4_t *)a2 + 26);
        float32x4_t v63 = vmaxq_f32(v61, v62);
        float32x4_t v64 = vminq_f32(vmaxq_f32(vmulq_f32(v17, vrecpeq_f32(v63)), *((float32x4_t *)a2 + 27)), *((float32x4_t *)a2 + 28));
        int8x16_t v65 = (int8x16_t)vminq_f32(vmulq_f32(v47, vmulq_f32(v64, vrecpsq_f32(v63, v64))), v21);
        int8x16_t v66 = (int8x16_t)vcgtq_f32(v47, v19);
        int8x16_t v67 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgeq_f32(v62, v61)), v19);
        float32x4_t v68 = (float32x4_t)vorrq_s8(vandq_s8(vandq_s8((int8x16_t)v21, v66), v67), vbicq_s8(v65, v67));
        float32x4_t v69 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v68, v16), (int8x16_t)v21);
        float32x4_t v70 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v68, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v24, v68))), v26);
        float32x4_t v71 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v69, v27));
        float32x4_t v72 = vsubq_f32(vsubq_f32(v69, v21), vmulq_f32(vmulq_f32(v31, v71), v69));
        float32x4_t v73 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 2), vaddq_f32(vaddq_f32(v70, v71), vmulq_f32(v72, vaddq_f32(vaddq_f32(v34, vmulq_f32(v36, v72)), vmulq_f32(vmulq_f32(v72, v72), vaddq_f32(v30, vmulq_f32(v33, v72))))))), v35);
        float32x4_t v74 = vcvtq_f32_s32(vcvtq_s32_f32(v73));
        float32x4_t v75 = vsubq_f32(v74, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v74, v73)));
        float32x4_t v76 = vsubq_f32(v73, v75);
        *(float32x4_t *)(v9 + v12) = vaddq_f32(v13, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), *((int8x16_t *)a2 + 53), (int8x16_t)vaddq_f32(v52, vmulq_laneq_f32(vsubq_f32(vmulq_f32(vaddq_f32(v21, vmulq_f32(v76, vaddq_f32(v45, vmulq_f32(v76,
                                                                                     vaddq_f32(v43, vmulq_f32(v44, v76)))))),
                                                                             (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v75), v46), 0x17uLL)), v52), v13, 3))), v13), v49, 3));
        v12 += 16;
      }
      while (v11 != v12);
      ++v4;
      v5 += v7;
      v6 += v8;
      v9 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t GetBlendColorDodgeQTTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 12);
    uint64_t v7 = 16 * *((int *)a1 + 22);
    uint64_t v8 = 16 * *((int *)a1 + 26);
    uint64_t v9 = *((void *)a1 + 2);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v12 = 0;
      do
      {
        float32x4_t v13 = *(float32x4_t *)(v5 + v12);
        float32x4_t v14 = *((float32x4_t *)a2 + 6);
        float32x4_t v15 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
        float32x4_t v17 = *((float32x4_t *)a2 + 7);
        int8x16_t v16 = *((int8x16_t *)a2 + 8);
        float32x4_t v18 = vmulq_f32(vrecpeq_f32(v15), v17);
        float32x4_t v19 = vmulq_f32(v13, vmulq_f32(v18, vrecpsq_f32(v18, v15)));
        float32x4_t v20 = *((float32x4_t *)a2 + 32);
        float32x4_t v21 = vmaxq_f32(v19, v20);
        float32x4_t v22 = *((float32x4_t *)a2 + 29);
        float32x4_t v23 = vminq_f32(v21, v22);
        float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(v16, (int8x16_t)v23), (int8x16_t)v22);
        float32x4_t v25 = *((float32x4_t *)a2 + 9);
        int8x16_t v26 = *((int8x16_t *)a2 + 10);
        float32x4_t v27 = *((float32x4_t *)a2 + 11);
        float32x4_t v28 = *((float32x4_t *)a2 + 12);
        float32x4_t v29 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v24, v28));
        float32x4_t v30 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v23, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v25, v23))), v27), v29);
        float32x4_t v32 = *((float32x4_t *)a2 + 13);
        float32x4_t v31 = *((float32x4_t *)a2 + 14);
        float32x4_t v33 = vsubq_f32(vsubq_f32(v24, v22), vmulq_f32(vmulq_f32(v32, v29), v24));
        float32x4_t v35 = *((float32x4_t *)a2 + 15);
        float32x4_t v34 = *((float32x4_t *)a2 + 16);
        float32x4_t v37 = *((float32x4_t *)a2 + 17);
        float32x4_t v36 = *((float32x4_t *)a2 + 18);
        float32x4_t v38 = vaddq_f32(v30, vmulq_f32(v33, vaddq_f32(vaddq_f32(v34, vmulq_f32(v33, v37)), vmulq_f32(vmulq_f32(v33, v33), vaddq_f32(v31, vmulq_f32(v35, v33))))));
        float32x4_t v39 = *((float32x4_t *)a2 + 24);
        float32x4_t v40 = vmaxq_f32(vmulq_f32(v39, v38), v36);
        float32x4_t v41 = vcvtq_f32_s32(vcvtq_s32_f32(v40));
        float32x4_t v42 = vsubq_f32(v41, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v41, v40)));
        float32x4_t v43 = vsubq_f32(v40, v42);
        float32x4_t v44 = *((float32x4_t *)a2 + 19);
        float32x4_t v45 = *((float32x4_t *)a2 + 20);
        float32x4_t v46 = *((float32x4_t *)a2 + 21);
        int32x4_t v47 = *((int32x4_t *)a2 + 22);
        float32x4_t v48 = *(float32x4_t *)(v6 + v12);
        float32x4_t v49 = vmulq_f32(vaddq_f32(v22, vmulq_f32(v43, vaddq_f32(v46, vmulq_f32(v43, vaddq_f32(v44, vmulq_f32(v45, v43)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v47, vcvtq_s32_f32(v42)), 0x17uLL));
        float32x4_t v50 = vmulq_f32(v48, *(float32x4_t *)a2);
        float32x4_t v51 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 3), v14);
        float32x4_t v52 = vmulq_f32(v17, vrecpeq_f32(v51));
        float32x4_t v53 = vmulq_f32(v48, vmulq_f32(v52, vrecpsq_f32(v52, v51)));
        float32x4_t v54 = vminq_f32(vmaxq_f32(v53, v20), v22);
        float32x4_t v55 = (float32x4_t)vorrq_s8(vandq_s8(v16, (int8x16_t)v54), (int8x16_t)v22);
        float32x4_t v56 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v55, v28));
        float32x4_t v57 = vsubq_f32(vsubq_f32(v55, v22), vmulq_f32(vmulq_f32(v32, v56), v55));
        float32x4_t v58 = vmaxq_f32(vmulq_f32(v39, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v54, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v25, v54))), v27), v56), vmulq_f32(v57, vaddq_f32(vaddq_f32(v34, vmulq_f32(v37, v57)), vmulq_f32(vmulq_f32(v57, v57), vaddq_f32(v31, vmulq_f32(v35, v57))))))), v36);
        float32x4_t v59 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
        float32x4_t v60 = vsubq_f32(v59, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v59, v58)));
        float32x4_t v61 = vsubq_f32(v58, v60);
        float32x4_t v62 = vsubq_f32(v22, vmulq_f32(vaddq_f32(v22, vmulq_f32(v61, vaddq_f32(v46, vmulq_f32(v61, vaddq_f32(v44, vmulq_f32(v45, v61)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v60), v47), 0x17uLL)));
        float32x4_t v63 = *((float32x4_t *)a2 + 26);
        float32x4_t v64 = vmaxq_f32(v62, v63);
        float32x4_t v65 = vminq_f32(vmaxq_f32(vmulq_f32(v17, vrecpeq_f32(v64)), *((float32x4_t *)a2 + 27)), *((float32x4_t *)a2 + 28));
        int8x16_t v66 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgeq_f32(v63, v62)), v20);
        float32x4_t v67 = vminq_f32(vmaxq_f32((float32x4_t)vorrq_s8(vandq_s8(vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v49, v20)), v66), vbicq_s8((int8x16_t)vminq_f32(vmulq_f32(v49, vmulq_f32(v65, vrecpsq_f32(v64, v65))), v22), v66)), v20), *((float32x4_t *)a2 + 30));
        float32x4_t v68 = (float32x4_t)vorrq_s8(vandq_s8(v16, (int8x16_t)v67), (int8x16_t)v22);
        float32x4_t v69 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v67, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v25, v67))), v27);
        float32x4_t v70 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v68, v28));
        float32x4_t v71 = vsubq_f32(vsubq_f32(v68, v22), vmulq_f32(vmulq_f32(v32, v70), v68));
        float32x4_t v72 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 25), vaddq_f32(vaddq_f32(v69, v70), vmulq_f32(v71, vaddq_f32(vaddq_f32(v34, vmulq_f32(v37, v71)), vmulq_f32(vmulq_f32(v71, v71), vaddq_f32(v31, vmulq_f32(v35, v71))))))), v36);
        float32x4_t v73 = vcvtq_f32_s32(vcvtq_s32_f32(v72));
        float32x4_t v74 = vsubq_f32(v73, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v73, v72)));
        float32x4_t v75 = vsubq_f32(v72, v74);
        *(float32x4_t *)(v9 + v12) = vaddq_f32(v13, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), *((int8x16_t *)a2 + 53), (int8x16_t)vaddq_f32(v53, vmulq_laneq_f32(vsubq_f32(vmulq_f32(vaddq_f32(v22, vmulq_f32(v75, vaddq_f32(v46, vmulq_f32(v75,
                                                                                     vaddq_f32(v44, vmulq_f32(v45, v75)))))),
                                                                             (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v74), v47), 0x17uLL)), v53), v13, 3))), v13), v50, 3));
        v12 += 16;
      }
      while (v11 != v12);
      ++v4;
      v5 += v7;
      v6 += v8;
      v9 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t GetBlendLinearDodgeTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 10);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 26);
    while (v5 < 3)
    {
      LODWORD(v50) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v8 += v9;
      v6 += v10;
      v7 += v11;
      if (v4 == v3) {
        return 0;
      }
    }
    int v12 = 0;
    uint64_t v13 = 32;
    do
    {
      float32x4_t v14 = *(float32x4_t *)(v8 + v13 - 32);
      float32x4_t v15 = *(float32x4_t *)(v8 + v13 - 16);
      float32x4_t v16 = *(float32x4_t *)(v8 + v13);
      int8x16_t v18 = *((int8x16_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v17);
      float32x4_t v20 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v17);
      float32x4_t v21 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3), v17);
      float32x4_t v22 = *((float32x4_t *)a2 + 7);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v19), v22);
      float32x4_t v24 = vmulq_f32(vrecpeq_f32(v20), v22);
      float32x4_t v25 = vmulq_f32(vrecpeq_f32(v21), v22);
      float32x4_t v26 = vmulq_f32(*(float32x4_t *)(v7 + v13 - 32), *(float32x4_t *)a2);
      float32x4_t v27 = vmulq_f32(*(float32x4_t *)(v7 + v13 - 16), *(float32x4_t *)a2);
      float32x4_t v28 = vmulq_f32(*(float32x4_t *)(v7 + v13), *(float32x4_t *)a2);
      float32x4_t v29 = vmulq_f32(v23, vrecpsq_f32(v23, v19));
      float32x4_t v30 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 3), v17);
      float32x4_t v31 = vmulq_f32(v24, vrecpsq_f32(v24, v20));
      float32x4_t v32 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 3), v17);
      float32x4_t v33 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 3), v17);
      float32x4_t v34 = vmulq_f32(v25, vrecpsq_f32(v25, v21));
      float32x4_t v35 = vmulq_f32(v22, vrecpeq_f32(v30));
      float32x4_t v36 = vmulq_f32(v22, vrecpeq_f32(v32));
      float32x4_t v37 = vmulq_f32(v22, vrecpeq_f32(v33));
      int8x16_t v38 = (int8x16_t)vmulq_f32(v36, vrecpsq_f32(v36, v32));
      int8x16_t v39 = (int8x16_t)vmulq_f32(v37, vrecpsq_f32(v37, v33));
      int8x16_t v40 = *((int8x16_t *)a2 + 31);
      int8x16_t v41 = *((int8x16_t *)a2 + 32);
      float32x4_t v42 = vmulq_f32(v26, (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vmulq_f32(v35, vrecpsq_f32(v35, v30))), v41));
      float32x4_t v43 = vmulq_f32(v27, (float32x4_t)vorrq_s8(vandq_s8(v40, v38), v41));
      float32x4_t v44 = vmulq_f32(v28, (float32x4_t)vorrq_s8(vandq_s8(v40, v39), v41));
      float32x4_t v45 = *((float32x4_t *)a2 + 29);
      float32x4_t v46 = vminq_f32(vaddq_f32(vmulq_f32(v14, v29), v42), v45);
      float32x4_t v47 = vminq_f32(vaddq_f32(vmulq_f32(v15, v31), v43), v45);
      float32x4_t v48 = vminq_f32(vaddq_f32(vmulq_f32(v16, v34), v44), v45);
      v46.i32[3] = 1.0;
      v47.i32[3] = 1.0;
      v48.i32[3] = 1.0;
      float32x4_t v49 = (float32x4_t *)(v6 + v13);
      v49[-2] = vaddq_f32(v14, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)v46, (int8x16_t)vaddq_f32(v42, vmulq_laneq_f32(vsubq_f32(v46, v42), v14, 3))), v14), v42, 3));
      v49[-1] = vaddq_f32(v15, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)v47, (int8x16_t)vaddq_f32(v43, vmulq_laneq_f32(vsubq_f32(v47, v43), v15, 3))), v15), v43, 3));
      *float32x4_t v49 = vaddq_f32(v16, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)v48, (int8x16_t)vaddq_f32(v44, vmulq_laneq_f32(vsubq_f32(v48, v44), v16, 3))), v16), v44, 3));
      v12 -= 3;
      v13 += 48;
    }
    while (v5 + v12 > 2);
    LODWORD(v50) = -v12;
    if ((int)v50 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v50 = v50;
    do
    {
      float32x4_t v51 = *(float32x4_t *)(v8 + 16 * v50);
      float32x4_t v52 = *((float32x4_t *)a2 + 6);
      float32x4_t v53 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 3), v52);
      float32x4_t v54 = *((float32x4_t *)a2 + 7);
      float32x4_t v55 = vmulq_f32(*(float32x4_t *)(v7 + 16 * v50), *(float32x4_t *)a2);
      float32x4_t v56 = vmulq_f32(vrecpeq_f32(v53), v54);
      float32x4_t v57 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3), v52);
      float32x4_t v58 = vmulq_f32(v54, vrecpeq_f32(v57));
      float32x4_t v59 = vmulq_f32(v55, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v58, vrecpsq_f32(v58, v57))), *((int8x16_t *)a2 + 32)));
      float32x4_t v60 = vminq_f32(vaddq_f32(vmulq_f32(v51, vmulq_f32(v56, vrecpsq_f32(v56, v53))), v59), *((float32x4_t *)a2 + 29));
      v60.i32[3] = 1.0;
      *(float32x4_t *)(v6 + 16 * v50++) = vaddq_f32(v51, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v60, (int8x16_t)vaddq_f32(v59, vmulq_laneq_f32(vsubq_f32(v60, v59), v51, 3))), v51), v59, 3));
    }
    while (v50 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendLinearDodgePOWTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 10);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 26);
    float v12 = 1.0;
    while (v5 < 2)
    {
      int v123 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v13 = 0;
    uint64_t v14 = 16;
    do
    {
      float32x4_t v16 = *(float32x4_t *)(v8 + v14 - 16);
      float32x4_t v15 = *(float32x4_t *)(v8 + v14);
      int8x16_t v18 = *((int8x16_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3), v17);
      float32x4_t v20 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v17);
      float32x4_t v22 = *((float32x4_t *)a2 + 7);
      int8x16_t v21 = *((int8x16_t *)a2 + 8);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v19), v22);
      float32x4_t v24 = vmulq_f32(vrecpeq_f32(v20), v22);
      int8x16_t v26 = *((int8x16_t *)a2 + 31);
      float32x4_t v25 = *((float32x4_t *)a2 + 32);
      float32x4_t v27 = vmaxq_f32(vmulq_f32(v16, vmulq_f32(v23, vrecpsq_f32(v23, v19))), v25);
      float32x4_t v28 = vmaxq_f32(vmulq_f32(v15, vmulq_f32(v24, vrecpsq_f32(v24, v20))), v25);
      float32x4_t v29 = *((float32x4_t *)a2 + 29);
      float32x4_t v30 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v27), (int8x16_t)v29);
      float32x4_t v32 = *((float32x4_t *)a2 + 9);
      int8x16_t v31 = *((int8x16_t *)a2 + 10);
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v28), (int8x16_t)v29);
      float32x4_t v34 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v27, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v27)));
      float32x4_t v36 = *((float32x4_t *)a2 + 11);
      float32x4_t v35 = *((float32x4_t *)a2 + 12);
      float32x4_t v37 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v30, v35));
      float32x4_t v38 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v33, v35));
      float32x4_t v39 = vaddq_f32(vsubq_f32(v34, v36), v37);
      float32x4_t v41 = *((float32x4_t *)a2 + 13);
      float32x4_t v40 = *((float32x4_t *)a2 + 14);
      float32x4_t v42 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v28, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v28))), v36), v38);
      float32x4_t v43 = vsubq_f32(vsubq_f32(v30, v29), vmulq_f32(vmulq_f32(v41, v37), v30));
      float32x4_t v44 = vsubq_f32(vsubq_f32(v33, v29), vmulq_f32(vmulq_f32(v41, v38), v33));
      float32x4_t v46 = *((float32x4_t *)a2 + 15);
      float32x4_t v45 = *((float32x4_t *)a2 + 16);
      float32x4_t v48 = *((float32x4_t *)a2 + 17);
      float32x4_t v47 = *((float32x4_t *)a2 + 18);
      float32x4_t v49 = vaddq_f32(v39, vmulq_f32(v43, vaddq_f32(vaddq_f32(v45, vmulq_f32(v43, v48)), vmulq_f32(vmulq_f32(v43, v43), vaddq_f32(v40, vmulq_f32(v46, v43))))));
      float32x4_t v50 = *((float32x4_t *)a2 + 1);
      float32x4_t v51 = vmaxq_f32(vmulq_f32(v50, v49), v47);
      float32x4_t v52 = vmaxq_f32(vmulq_f32(v50, vaddq_f32(v42, vmulq_f32(v44, vaddq_f32(vaddq_f32(v45, vmulq_f32(v44, v48)), vmulq_f32(vmulq_f32(v44, v44), vaddq_f32(v40, vmulq_f32(v46, v44))))))), v47);
      float32x4_t v53 = *((float32x4_t *)a2 + 19);
      float32x4_t v54 = *((float32x4_t *)a2 + 20);
      float32x4_t v55 = vmulq_f32(*(float32x4_t *)(v7 + v14 - 16), *(float32x4_t *)a2);
      float32x4_t v56 = vcvtq_f32_s32(vcvtq_s32_f32(v51));
      float32x4_t v57 = vmulq_f32(*(float32x4_t *)(v7 + v14), *(float32x4_t *)a2);
      float32x4_t v58 = vcvtq_f32_s32(vcvtq_s32_f32(v52));
      float32x4_t v59 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3), v17);
      float32x4_t v60 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3), v17);
      float32x4_t v61 = vmulq_f32(v22, vrecpeq_f32(v59));
      float32x4_t v62 = vmulq_f32(v22, vrecpeq_f32(v60));
      int8x16_t v63 = (int8x16_t)vmulq_f32(v62, vrecpsq_f32(v62, v60));
      float32x4_t v64 = vmulq_f32(v55, (float32x4_t)vorrq_s8(vandq_s8(v26, (int8x16_t)vmulq_f32(v61, vrecpsq_f32(v61, v59))), (int8x16_t)v25));
      float32x4_t v65 = vmulq_f32(v57, (float32x4_t)vorrq_s8(vandq_s8(v26, v63), (int8x16_t)v25));
      float32x4_t v66 = vmaxq_f32(v64, v25);
      float32x4_t v67 = vmaxq_f32(v65, v25);
      float32x4_t v68 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v66), (int8x16_t)v29);
      float32x4_t v69 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v67), (int8x16_t)v29);
      float32x4_t v70 = vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v56, v51)));
      float32x4_t v71 = vsubq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v58, v52)));
      float32x4_t v72 = vsubq_f32(v51, v70);
      float32x4_t v73 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v68, v35));
      float32x4_t v74 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v69, v35));
      float32x4_t v75 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v66, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v66))), v36), v73);
      float32x4_t v76 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v67, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v67))), v36), v74);
      float32x4_t v77 = vsubq_f32(vsubq_f32(v68, v29), vmulq_f32(vmulq_f32(v41, v73), v68));
      float32x4_t v78 = vsubq_f32(vsubq_f32(v69, v29), vmulq_f32(vmulq_f32(v41, v74), v69));
      float32x4_t v80 = *((float32x4_t *)a2 + 21);
      int32x4_t v79 = *((int32x4_t *)a2 + 22);
      float32x4_t v81 = vsubq_f32(v52, v71);
      float32x4_t v82 = vaddq_f32(v76, vmulq_f32(v78, vaddq_f32(vaddq_f32(v45, vmulq_f32(v48, v78)), vmulq_f32(vmulq_f32(v78, v78), vaddq_f32(v40, vmulq_f32(v46, v78))))));
      int32x4_t v83 = vcvtq_s32_f32(v71);
      float v12 = 1.0;
      float32x4_t v84 = vmulq_f32(vaddq_f32(v29, vmulq_f32(v72, vaddq_f32(v80, vmulq_f32(v72, vaddq_f32(v53, vmulq_f32(v54, v72)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v79, vcvtq_s32_f32(v70)), 0x17uLL));
      float32x4_t v85 = vmulq_f32(v50, v82);
      float32x4_t v86 = vmaxq_f32(vmulq_f32(v50, vaddq_f32(v75, vmulq_f32(v77, vaddq_f32(vaddq_f32(v45, vmulq_f32(v48, v77)), vmulq_f32(vmulq_f32(v77, v77), vaddq_f32(v40, vmulq_f32(v46, v77))))))), v47);
      float32x4_t v87 = vmaxq_f32(v85, v47);
      float32x4_t v88 = vcvtq_f32_s32(vcvtq_s32_f32(v86));
      float32x4_t v89 = vcvtq_f32_s32(vcvtq_s32_f32(v87));
      float32x4_t v90 = vsubq_f32(v88, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v88, v86)));
      float32x4_t v91 = vsubq_f32(v89, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v89, v87)));
      float32x4_t v92 = vsubq_f32(v86, v90);
      float32x4_t v93 = vsubq_f32(v87, v91);
      float32x4_t v94 = vminq_f32(vaddq_f32(v84, vmulq_f32(vaddq_f32(v29, vmulq_f32(v92, vaddq_f32(v80, vmulq_f32(v92, vaddq_f32(v53, vmulq_f32(v54, v92)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v90), v79), 0x17uLL))), v29);
      float32x4_t v95 = vminq_f32(vaddq_f32(vmulq_f32(vaddq_f32(v29, vmulq_f32(v81, vaddq_f32(v80, vmulq_f32(v81, vaddq_f32(v53, vmulq_f32(v54, v81)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v79, v83), 0x17uLL)), vmulq_f32(vaddq_f32(v29, vmulq_f32(v93, vaddq_f32(v80, vmulq_f32(v93, vaddq_f32(v53, vmulq_f32(v54, v93)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v91), v79), 0x17uLL))), v29);
      float32x4_t v96 = (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v94));
      float32x4_t v97 = (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v95));
      float32x4_t v98 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v94, 0x17uLL)), v96);
      int8x16_t v99 = vandq_s8(v21, (int8x16_t)v94);
      int8x16_t v100 = vandq_s8(v21, (int8x16_t)v95);
      float32x4_t v101 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v95, 0x17uLL)), v97);
      float32x4_t v102 = (float32x4_t)vorrq_s8(v99, (int8x16_t)v29);
      float32x4_t v103 = vsubq_f32(v98, v36);
      float32x4_t v104 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v102, v35));
      float32x4_t v105 = vsubq_f32(vsubq_f32(v102, v29), vmulq_f32(vmulq_f32(v41, v104), v102));
      float32x4_t v106 = (float32x4_t)vorrq_s8(v100, (int8x16_t)v29);
      float32x4_t v107 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v106, v35));
      float32x4_t v108 = vsubq_f32(vsubq_f32(v106, v29), vmulq_f32(vmulq_f32(v41, v107), v106));
      float32x4_t v109 = vaddq_f32(vaddq_f32(vsubq_f32(v101, v36), v107), vmulq_f32(v108, vaddq_f32(vaddq_f32(v45, vmulq_f32(v48, v108)), vmulq_f32(vmulq_f32(v108, v108), vaddq_f32(v40, vmulq_f32(v46, v108))))));
      float32x4_t v110 = *((float32x4_t *)a2 + 2);
      float32x4_t v111 = vmaxq_f32(vmulq_f32(v110, vaddq_f32(vaddq_f32(v103, v104), vmulq_f32(v105, vaddq_f32(vaddq_f32(v45, vmulq_f32(v48, v105)), vmulq_f32(vmulq_f32(v105, v105), vaddq_f32(v40, vmulq_f32(v46, v105))))))), v47);
      float32x4_t v112 = vmaxq_f32(vmulq_f32(v110, v109), v47);
      float32x4_t v113 = vcvtq_f32_s32(vcvtq_s32_f32(v111));
      float32x4_t v114 = vcvtq_f32_s32(vcvtq_s32_f32(v112));
      float32x4_t v115 = vsubq_f32(v113, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v113, v111)));
      float32x4_t v116 = vsubq_f32(v114, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v114, v112)));
      float32x4_t v117 = vsubq_f32(v111, v115);
      float32x4_t v118 = vsubq_f32(v112, v116);
      float32x4_t v119 = vmulq_f32(vaddq_f32(v29, vmulq_f32(v117, vaddq_f32(v80, vmulq_f32(v117, vaddq_f32(v53, vmulq_f32(v54, v117)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v115), v79), 0x17uLL));
      v119.i32[3] = 1.0;
      float32x4_t v120 = vmulq_f32(vaddq_f32(v29, vmulq_f32(v118, vaddq_f32(v80, vmulq_f32(v118, vaddq_f32(v53, vmulq_f32(v54, v118)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v116), v79), 0x17uLL));
      v120.i32[3] = 1.0;
      float32x4_t v121 = vaddq_f32(*(float32x4_t *)(v8 + v14), vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)v120, (int8x16_t)vaddq_f32(v65, vmulq_laneq_f32(vsubq_f32(v120, v65), *(float32x4_t *)(v8 + v14), 3))), *(float32x4_t *)(v8 + v14)), v65, 3));
      float32x4_t v122 = (float32x4_t *)(v6 + v14);
      v122[-1] = vaddq_f32(v16, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)v119, (int8x16_t)vaddq_f32(v64, vmulq_laneq_f32(vsubq_f32(v119, v64), v16, 3))), v16), v64, 3));
      *float32x4_t v122 = v121;
      v13 -= 2;
      v14 += 32;
    }
    while (v5 + v13 > 1);
    int v123 = -v13;
    if (v123 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v124 = 16 * v123;
    float32x4_t v125 = *(float32x4_t *)(v8 + v124);
    float32x4_t v126 = *((float32x4_t *)a2 + 6);
    float32x4_t v127 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v125, 3), v126);
    float32x4_t v128 = *((float32x4_t *)a2 + 7);
    int8x16_t v129 = *((int8x16_t *)a2 + 8);
    float32x4_t v130 = vmulq_f32(vrecpeq_f32(v127), v128);
    float32x4_t v131 = *((float32x4_t *)a2 + 32);
    float32x4_t v132 = vmaxq_f32(vmulq_f32(v125, vmulq_f32(v130, vrecpsq_f32(v130, v127))), v131);
    float32x4_t v133 = *((float32x4_t *)a2 + 29);
    float32x4_t v134 = (float32x4_t)vorrq_s8(vandq_s8(v129, (int8x16_t)v132), (int8x16_t)v133);
    float32x4_t v135 = *((float32x4_t *)a2 + 9);
    int8x16_t v136 = *((int8x16_t *)a2 + 10);
    float32x4_t v137 = *((float32x4_t *)a2 + 11);
    float32x4_t v138 = *((float32x4_t *)a2 + 12);
    float32x4_t v139 = (float32x4_t)vandq_s8((int8x16_t)v133, (int8x16_t)vcgtq_f32(v134, v138));
    float32x4_t v140 = *((float32x4_t *)a2 + 13);
    float32x4_t v141 = *((float32x4_t *)a2 + 14);
    float32x4_t v142 = vsubq_f32(vsubq_f32(v134, v133), vmulq_f32(vmulq_f32(v140, v139), v134));
    float32x4_t v143 = *((float32x4_t *)a2 + 15);
    float32x4_t v144 = *((float32x4_t *)a2 + 16);
    float32x4_t v145 = *((float32x4_t *)a2 + 17);
    float32x4_t v146 = *((float32x4_t *)a2 + 18);
    float32x4_t v147 = vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v132, 0x17uLL)), (float32x4_t)vandq_s8(v136, (int8x16_t)vcgtq_f32(v135, v132))), v137), v139), vmulq_f32(v142, vaddq_f32(vaddq_f32(v144, vmulq_f32(v142, v145)), vmulq_f32(vmulq_f32(v142, v142), vaddq_f32(v141, vmulq_f32(v143, v142))))));
    float32x4_t v148 = *((float32x4_t *)a2 + 1);
    float32x4_t v149 = vmaxq_f32(vmulq_f32(v148, v147), v146);
    float32x4_t v150 = vcvtq_f32_s32(vcvtq_s32_f32(v149));
    float32x4_t v151 = vsubq_f32(v150, (float32x4_t)vandq_s8((int8x16_t)v133, (int8x16_t)vcgtq_f32(v150, v149)));
    float32x4_t v152 = vsubq_f32(v149, v151);
    float32x4_t v153 = *((float32x4_t *)a2 + 19);
    float32x4_t v154 = *((float32x4_t *)a2 + 20);
    float32x4_t v155 = *((float32x4_t *)a2 + 21);
    int32x4_t v156 = *((int32x4_t *)a2 + 22);
    float32x4_t v157 = vmulq_f32(*(float32x4_t *)(v7 + v124), *(float32x4_t *)a2);
    float32x4_t v158 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v157, 3), v126);
    float32x4_t v159 = vmulq_f32(v128, vrecpeq_f32(v158));
    float32x4_t v160 = vmulq_f32(v157, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v159, vrecpsq_f32(v159, v158))), (int8x16_t)v131));
    float32x4_t v161 = vmaxq_f32(v160, v131);
    float32x4_t v162 = (float32x4_t)vorrq_s8(vandq_s8(v129, (int8x16_t)v161), (int8x16_t)v133);
    float32x4_t v163 = (float32x4_t)vandq_s8((int8x16_t)v133, (int8x16_t)vcgtq_f32(v162, v138));
    float32x4_t v164 = vsubq_f32(vsubq_f32(v162, v133), vmulq_f32(vmulq_f32(v140, v163), v162));
    float32x4_t v165 = vmaxq_f32(vmulq_f32(v148, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v161, 0x17uLL)), (float32x4_t)vandq_s8(v136, (int8x16_t)vcgtq_f32(v135, v161))), v137), v163), vmulq_f32(v164, vaddq_f32(vaddq_f32(v144, vmulq_f32(v145, v164)), vmulq_f32(vmulq_f32(v164, v164), vaddq_f32(v141, vmulq_f32(v143, v164))))))), v146);
    float32x4_t v166 = vcvtq_f32_s32(vcvtq_s32_f32(v165));
    float32x4_t v167 = vsubq_f32(v166, (float32x4_t)vandq_s8((int8x16_t)v133, (int8x16_t)vcgtq_f32(v166, v165)));
    float32x4_t v168 = vsubq_f32(v165, v167);
    float32x4_t v169 = vminq_f32(vaddq_f32(vmulq_f32(vaddq_f32(v133, vmulq_f32(v152, vaddq_f32(v155, vmulq_f32(v152, vaddq_f32(v153, vmulq_f32(v154, v152)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v156, vcvtq_s32_f32(v151)), 0x17uLL)), vmulq_f32(vaddq_f32(v133, vmulq_f32(v168, vaddq_f32(v155, vmulq_f32(v168, vaddq_f32(v153, vmulq_f32(v154, v168)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v167), v156), 0x17uLL))), v133);
    float32x4_t v170 = (float32x4_t)vorrq_s8(vandq_s8(v129, (int8x16_t)v169), (int8x16_t)v133);
    float32x4_t v171 = (float32x4_t)vandq_s8((int8x16_t)v133, (int8x16_t)vcgtq_f32(v170, v138));
    float32x4_t v172 = vsubq_f32(vsubq_f32(v170, v133), vmulq_f32(vmulq_f32(v140, v171), v170));
    float32x4_t v173 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 2), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v169, 0x17uLL)), (float32x4_t)vandq_s8(v136, (int8x16_t)vcgtq_f32(v135, v169))), v137), v171), vmulq_f32(v172, vaddq_f32(vaddq_f32(v144, vmulq_f32(v145, v172)), vmulq_f32(vmulq_f32(v172, v172), vaddq_f32(v141, vmulq_f32(v143, v172))))))), v146);
    float32x4_t v174 = vcvtq_f32_s32(vcvtq_s32_f32(v173));
    float32x4_t v175 = vsubq_f32(v174, (float32x4_t)vandq_s8((int8x16_t)v133, (int8x16_t)vcgtq_f32(v174, v173)));
    float32x4_t v176 = vsubq_f32(v173, v175);
    float32x4_t v177 = vmulq_f32(vaddq_f32(v133, vmulq_f32(v176, vaddq_f32(v155, vmulq_f32(v176, vaddq_f32(v153, vmulq_f32(v154, v176)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v175), v156), 0x17uLL));
    v177.f32[3] = v12;
    *(float32x4_t *)(v6 + v124) = vaddq_f32(v125, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v177, (int8x16_t)vaddq_f32(v160, vmulq_laneq_f32(vsubq_f32(v177, v160), v125, 3))), v125), v160, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendLinearDodgeQTTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 10);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 26);
    float v12 = 1.0;
    while (v5 < 2)
    {
      int v116 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v13 = 0;
    uint64_t v14 = 16;
    do
    {
      float32x4_t v15 = *(float32x4_t *)(v8 + v14 - 16);
      float32x4_t v173 = *(float32x4_t *)(v8 + v14);
      int8x16_t v17 = *((int8x16_t *)a2 + 5);
      float32x4_t v16 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v16);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v173, 3), v16);
      float32x4_t v21 = *((float32x4_t *)a2 + 7);
      int8x16_t v20 = *((int8x16_t *)a2 + 8);
      float32x4_t v22 = vmulq_f32(vrecpeq_f32(v18), v21);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v19), v21);
      float32x4_t v24 = vmulq_f32(v22, vrecpsq_f32(v22, v18));
      float32x4_t v25 = vmulq_f32(v23, vrecpsq_f32(v23, v19));
      int8x16_t v27 = *((int8x16_t *)a2 + 31);
      float32x4_t v26 = *((float32x4_t *)a2 + 32);
      float32x4_t v28 = *((float32x4_t *)a2 + 23);
      float32x4_t v29 = *((float32x4_t *)a2 + 24);
      float32x4_t v30 = vminq_f32(vmaxq_f32(vmulq_f32(v15, v24), v26), v28);
      float32x4_t v31 = vminq_f32(vmaxq_f32(vmulq_f32(v173, v25), v26), v28);
      float32x4_t v32 = *((float32x4_t *)a2 + 29);
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v30), (int8x16_t)v32);
      float32x4_t v34 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v31), (int8x16_t)v32);
      float32x4_t v36 = *((float32x4_t *)a2 + 9);
      int8x16_t v35 = *((int8x16_t *)a2 + 10);
      float32x4_t v38 = *((float32x4_t *)a2 + 11);
      float32x4_t v37 = *((float32x4_t *)a2 + 12);
      float32x4_t v39 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v30))), v38);
      float32x4_t v40 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v33, v37));
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v34, v37));
      float32x4_t v43 = *((float32x4_t *)a2 + 13);
      float32x4_t v42 = *((float32x4_t *)a2 + 14);
      float32x4_t v44 = vaddq_f32(v39, v40);
      float32x4_t v45 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v31, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v31))), v38), v41);
      float32x4_t v46 = vsubq_f32(vsubq_f32(v33, v32), vmulq_f32(vmulq_f32(v43, v40), v33));
      float32x4_t v47 = vsubq_f32(vsubq_f32(v34, v32), vmulq_f32(vmulq_f32(v43, v41), v34));
      float32x4_t v49 = *((float32x4_t *)a2 + 15);
      float32x4_t v48 = *((float32x4_t *)a2 + 16);
      float32x4_t v51 = *((float32x4_t *)a2 + 17);
      float32x4_t v50 = *((float32x4_t *)a2 + 18);
      float32x4_t v52 = vmaxq_f32(vmulq_f32(v29, vaddq_f32(v44, vmulq_f32(v46, vaddq_f32(vaddq_f32(v48, vmulq_f32(v46, v51)), vmulq_f32(vmulq_f32(v46, v46), vaddq_f32(v42, vmulq_f32(v49, v46))))))), v50);
      float32x4_t v53 = vmaxq_f32(vmulq_f32(v29, vaddq_f32(v45, vmulq_f32(v47, vaddq_f32(vaddq_f32(v48, vmulq_f32(v47, v51)), vmulq_f32(vmulq_f32(v47, v47), vaddq_f32(v42, vmulq_f32(v49, v47))))))), v50);
      float32x4_t v54 = vcvtq_f32_s32(vcvtq_s32_f32(v52));
      float32x4_t v55 = vcvtq_f32_s32(vcvtq_s32_f32(v53));
      float32x4_t v56 = *((float32x4_t *)a2 + 19);
      float32x4_t v57 = *((float32x4_t *)a2 + 20);
      float32x4_t v58 = vsubq_f32(v54, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v54, v52)));
      float32x4_t v59 = vmulq_f32(*(float32x4_t *)(v7 + v14 - 16), *(float32x4_t *)a2);
      float32x4_t v60 = vmulq_f32(*(float32x4_t *)(v7 + v14), *(float32x4_t *)a2);
      float32x4_t v61 = vsubq_f32(v55, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v55, v53)));
      float32x4_t v62 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 3), v16);
      float32x4_t v63 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 3), v16);
      float32x4_t v64 = vsubq_f32(v52, v58);
      float32x4_t v65 = vmulq_f32(v21, vrecpeq_f32(v62));
      float32x4_t v66 = vmulq_f32(v21, vrecpeq_f32(v63));
      int8x16_t v67 = (int8x16_t)vmulq_f32(v65, vrecpsq_f32(v65, v62));
      int8x16_t v68 = (int8x16_t)vmulq_f32(v66, vrecpsq_f32(v66, v63));
      float32x4_t v70 = *((float32x4_t *)a2 + 21);
      int32x4_t v69 = *((int32x4_t *)a2 + 22);
      float32x4_t v71 = vmulq_f32(v59, (float32x4_t)vorrq_s8(vandq_s8(v27, v67), (int8x16_t)v26));
      float32x4_t v72 = vmulq_f32(v60, (float32x4_t)vorrq_s8(vandq_s8(v27, v68), (int8x16_t)v26));
      float32x4_t v73 = vminq_f32(vmaxq_f32(v71, v26), v28);
      float32x4_t v74 = vminq_f32(vmaxq_f32(v72, v26), v28);
      float32x4_t v75 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v73), (int8x16_t)v32);
      float32x4_t v76 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v74), (int8x16_t)v32);
      float32x4_t v77 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v75, v37));
      float32x4_t v78 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v73, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v73))), v38), v77);
      float32x4_t v79 = vsubq_f32(vsubq_f32(v75, v32), vmulq_f32(vmulq_f32(v43, v77), v75));
      float32x4_t v80 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v76, v37));
      float32x4_t v81 = vsubq_f32(v53, v61);
      float32x4_t v82 = vsubq_f32(vsubq_f32(v76, v32), vmulq_f32(vmulq_f32(v43, v80), v76));
      float32x4_t v83 = vmaxq_f32(vmulq_f32(v29, vaddq_f32(v78, vmulq_f32(v79, vaddq_f32(vaddq_f32(v48, vmulq_f32(v51, v79)), vmulq_f32(vmulq_f32(v79, v79), vaddq_f32(v42, vmulq_f32(v49, v79))))))), v50);
      float32x4_t v84 = vmaxq_f32(vmulq_f32(v29, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v74, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v74))), v38), v80), vmulq_f32(v82, vaddq_f32(vaddq_f32(v48, vmulq_f32(v51, v82)), vmulq_f32(vmulq_f32(v82, v82), vaddq_f32(v42, vmulq_f32(v49, v82))))))), v50);
      float32x4_t v85 = vcvtq_f32_s32(vcvtq_s32_f32(v83));
      float32x4_t v86 = vcvtq_f32_s32(vcvtq_s32_f32(v84));
      float32x4_t v87 = vsubq_f32(v85, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v85, v83)));
      float32x4_t v88 = vsubq_f32(v86, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v86, v84)));
      float32x4_t v89 = vaddq_f32(v32, vmulq_f32(v81, vaddq_f32(v70, vmulq_f32(v81, vaddq_f32(v56, vmulq_f32(v57, v81))))));
      int32x4_t v90 = vcvtq_s32_f32(v61);
      float v12 = 1.0;
      float32x4_t v91 = vsubq_f32(v83, v87);
      float32x4_t v92 = vsubq_f32(v84, v88);
      float32x4_t v93 = vmaxq_f32(vminq_f32(vaddq_f32(vmulq_f32(vaddq_f32(v32, vmulq_f32(v64, vaddq_f32(v70, vmulq_f32(v64, vaddq_f32(v56, vmulq_f32(v57, v64)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v69, vcvtq_s32_f32(v58)), 0x17uLL)), vmulq_f32(vaddq_f32(v32, vmulq_f32(v91, vaddq_f32(v70, vmulq_f32(v91, vaddq_f32(v56, vmulq_f32(v57, v91)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v87), v69), 0x17uLL))), v32), v26);
      float32x4_t v94 = vmaxq_f32(vminq_f32(vaddq_f32(vmulq_f32(v89, (float32x4_t)vshlq_n_s32(vaddq_s32(v69, v90), 0x17uLL)), vmulq_f32(vaddq_f32(v32, vmulq_f32(v92, vaddq_f32(v70, vmulq_f32(v92, vaddq_f32(v56, vmulq_f32(v57, v92)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v88), v69), 0x17uLL))), v32), v26);
      float32x4_t v95 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v93, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v93)));
      float32x4_t v96 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v93), (int8x16_t)v32);
      float32x4_t v97 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v96, v37));
      float32x4_t v98 = vaddq_f32(vsubq_f32(v95, v38), v97);
      float32x4_t v99 = vsubq_f32(vsubq_f32(v96, v32), vmulq_f32(vmulq_f32(v43, v97), v96));
      float32x4_t v100 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v94), (int8x16_t)v32);
      float32x4_t v101 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v100, v37));
      float32x4_t v102 = vsubq_f32(vsubq_f32(v100, v32), vmulq_f32(vmulq_f32(v43, v101), v100));
      float32x4_t v103 = vaddq_f32(v98, vmulq_f32(v99, vaddq_f32(vaddq_f32(v48, vmulq_f32(v51, v99)), vmulq_f32(vmulq_f32(v99, v99), vaddq_f32(v42, vmulq_f32(v49, v99))))));
      float32x4_t v104 = *((float32x4_t *)a2 + 25);
      float32x4_t v105 = vmaxq_f32(vmulq_f32(v104, v103), v50);
      float32x4_t v106 = vmaxq_f32(vmulq_f32(v104, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v94, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v94))), v38), v101), vmulq_f32(v102, vaddq_f32(vaddq_f32(v48, vmulq_f32(v51, v102)), vmulq_f32(vmulq_f32(v102, v102), vaddq_f32(v42, vmulq_f32(v49, v102))))))), v50);
      float32x4_t v107 = vcvtq_f32_s32(vcvtq_s32_f32(v105));
      float32x4_t v108 = vcvtq_f32_s32(vcvtq_s32_f32(v106));
      float32x4_t v109 = vsubq_f32(v107, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v107, v105)));
      float32x4_t v110 = vsubq_f32(v108, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v108, v106)));
      float32x4_t v111 = vsubq_f32(v105, v109);
      float32x4_t v112 = vsubq_f32(v106, v110);
      float32x4_t v113 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v111, vaddq_f32(v70, vmulq_f32(v111, vaddq_f32(v56, vmulq_f32(v57, v111)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v109), v69), 0x17uLL));
      v113.i32[3] = 1.0;
      float32x4_t v114 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v112, vaddq_f32(v70, vmulq_f32(v112, vaddq_f32(v56, vmulq_f32(v57, v112)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v110), v69), 0x17uLL));
      v114.i32[3] = 1.0;
      float32x4_t v115 = (float32x4_t *)(v6 + v14);
      v115[-1] = vaddq_f32(*(float32x4_t *)(v8 + v14 - 16), vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v113, (int8x16_t)vaddq_f32(v71, vmulq_laneq_f32(vsubq_f32(v113, v71), *(float32x4_t *)(v8 + v14 - 16), 3))), *(float32x4_t *)(v8 + v14 - 16)), v71, 3));
      *float32x4_t v115 = vaddq_f32(v173, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v114, (int8x16_t)vaddq_f32(v72, vmulq_laneq_f32(vsubq_f32(v114, v72), v173, 3))), v173), v72, 3));
      v13 -= 2;
      v14 += 32;
    }
    while (v5 + v13 > 1);
    int v116 = -v13;
    if (v116 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v117 = 16 * v116;
    float32x4_t v118 = *(float32x4_t *)(v8 + v117);
    float32x4_t v119 = *((float32x4_t *)a2 + 6);
    float32x4_t v120 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v118, 3), v119);
    float32x4_t v121 = *((float32x4_t *)a2 + 7);
    int8x16_t v122 = *((int8x16_t *)a2 + 8);
    float32x4_t v123 = vmulq_f32(vrecpeq_f32(v120), v121);
    float32x4_t v124 = *((float32x4_t *)a2 + 32);
    float32x4_t v125 = *((float32x4_t *)a2 + 23);
    float32x4_t v126 = *((float32x4_t *)a2 + 24);
    float32x4_t v127 = vminq_f32(vmaxq_f32(vmulq_f32(v118, vmulq_f32(v123, vrecpsq_f32(v123, v120))), v124), v125);
    float32x4_t v128 = *((float32x4_t *)a2 + 29);
    float32x4_t v129 = (float32x4_t)vorrq_s8(vandq_s8(v122, (int8x16_t)v127), (int8x16_t)v128);
    float32x4_t v130 = *((float32x4_t *)a2 + 9);
    int8x16_t v131 = *((int8x16_t *)a2 + 10);
    float32x4_t v132 = *((float32x4_t *)a2 + 11);
    float32x4_t v133 = *((float32x4_t *)a2 + 12);
    float32x4_t v134 = (float32x4_t)vandq_s8((int8x16_t)v128, (int8x16_t)vcgtq_f32(v129, v133));
    float32x4_t v135 = *((float32x4_t *)a2 + 13);
    float32x4_t v136 = *((float32x4_t *)a2 + 14);
    float32x4_t v137 = vsubq_f32(vsubq_f32(v129, v128), vmulq_f32(vmulq_f32(v135, v134), v129));
    float32x4_t v138 = *((float32x4_t *)a2 + 15);
    float32x4_t v139 = *((float32x4_t *)a2 + 16);
    float32x4_t v140 = *((float32x4_t *)a2 + 17);
    float32x4_t v141 = *((float32x4_t *)a2 + 18);
    float32x4_t v142 = vmaxq_f32(vmulq_f32(v126, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v127, 0x17uLL)), (float32x4_t)vandq_s8(v131, (int8x16_t)vcgtq_f32(v130, v127))), v132), v134), vmulq_f32(v137, vaddq_f32(vaddq_f32(v139, vmulq_f32(v137, v140)), vmulq_f32(vmulq_f32(v137, v137), vaddq_f32(v136, vmulq_f32(v138, v137))))))), v141);
    float32x4_t v143 = vcvtq_f32_s32(vcvtq_s32_f32(v142));
    float32x4_t v144 = vsubq_f32(v143, (float32x4_t)vandq_s8((int8x16_t)v128, (int8x16_t)vcgtq_f32(v143, v142)));
    float32x4_t v145 = vsubq_f32(v142, v144);
    float32x4_t v146 = *((float32x4_t *)a2 + 19);
    float32x4_t v147 = *((float32x4_t *)a2 + 20);
    float32x4_t v148 = *((float32x4_t *)a2 + 21);
    int32x4_t v149 = *((int32x4_t *)a2 + 22);
    float32x4_t v150 = vmulq_f32(vaddq_f32(v128, vmulq_f32(v145, vaddq_f32(v148, vmulq_f32(v145, vaddq_f32(v146, vmulq_f32(v147, v145)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v149, vcvtq_s32_f32(v144)), 0x17uLL));
    float32x4_t v151 = vmulq_f32(*(float32x4_t *)(v7 + v117), *(float32x4_t *)a2);
    float32x4_t v152 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v151, 3), v119);
    float32x4_t v153 = vmulq_f32(v121, vrecpeq_f32(v152));
    float32x4_t v154 = vmulq_f32(v151, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v153, vrecpsq_f32(v153, v152))), (int8x16_t)v124));
    float32x4_t v155 = vminq_f32(vmaxq_f32(v154, v124), v125);
    float32x4_t v156 = (float32x4_t)vorrq_s8(vandq_s8(v122, (int8x16_t)v155), (int8x16_t)v128);
    float32x4_t v157 = (float32x4_t)vandq_s8((int8x16_t)v128, (int8x16_t)vcgtq_f32(v156, v133));
    float32x4_t v158 = vsubq_f32(vsubq_f32(v156, v128), vmulq_f32(vmulq_f32(v135, v157), v156));
    float32x4_t v159 = vmaxq_f32(vmulq_f32(v126, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v155, 0x17uLL)), (float32x4_t)vandq_s8(v131, (int8x16_t)vcgtq_f32(v130, v155))), v132), v157), vmulq_f32(v158, vaddq_f32(vaddq_f32(v139, vmulq_f32(v140, v158)), vmulq_f32(vmulq_f32(v158, v158), vaddq_f32(v136, vmulq_f32(v138, v158))))))), v141);
    float32x4_t v160 = vcvtq_f32_s32(vcvtq_s32_f32(v159));
    float32x4_t v161 = vsubq_f32(v160, (float32x4_t)vandq_s8((int8x16_t)v128, (int8x16_t)vcgtq_f32(v160, v159)));
    float32x4_t v162 = vsubq_f32(v159, v161);
    float32x4_t v163 = vmaxq_f32(vminq_f32(vaddq_f32(v150, vmulq_f32(vaddq_f32(v128, vmulq_f32(v162, vaddq_f32(v148, vmulq_f32(v162, vaddq_f32(v146, vmulq_f32(v147, v162)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v161), v149), 0x17uLL))), v128), v124);
    float32x4_t v164 = (float32x4_t)vorrq_s8(vandq_s8(v122, (int8x16_t)v163), (int8x16_t)v128);
    float32x4_t v165 = (float32x4_t)vandq_s8((int8x16_t)v128, (int8x16_t)vcgtq_f32(v164, v133));
    float32x4_t v166 = vsubq_f32(vsubq_f32(v164, v128), vmulq_f32(vmulq_f32(v135, v165), v164));
    float32x4_t v167 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 25), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v163, 0x17uLL)), (float32x4_t)vandq_s8(v131, (int8x16_t)vcgtq_f32(v130, v163))), v132), v165), vmulq_f32(v166, vaddq_f32(vaddq_f32(v139, vmulq_f32(v140, v166)), vmulq_f32(vmulq_f32(v166, v166), vaddq_f32(v136, vmulq_f32(v138, v166))))))), v141);
    float32x4_t v168 = vcvtq_f32_s32(vcvtq_s32_f32(v167));
    float32x4_t v169 = vsubq_f32(v168, (float32x4_t)vandq_s8((int8x16_t)v128, (int8x16_t)vcgtq_f32(v168, v167)));
    float32x4_t v170 = vsubq_f32(v167, v169);
    float32x4_t v171 = vmulq_f32(vaddq_f32(v128, vmulq_f32(v170, vaddq_f32(v148, vmulq_f32(v170, vaddq_f32(v146, vmulq_f32(v147, v170)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v169), v149), 0x17uLL));
    v171.f32[3] = v12;
    *(float32x4_t *)(v6 + v117) = vaddq_f32(v118, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v171, (int8x16_t)vaddq_f32(v154, vmulq_laneq_f32(vsubq_f32(v171, v154), v118, 3))), v118), v154, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendOverlayTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = *((void *)a1 + 12);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v53 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v12 = 0;
    uint64_t v13 = 16;
    do
    {
      float32x4_t v14 = vmulq_f32(*(float32x4_t *)(v8 + v13 - 16), *(float32x4_t *)a2);
      float32x4_t v15 = vmulq_f32(*(float32x4_t *)(v8 + v13), *(float32x4_t *)a2);
      float32x4_t v16 = *(float32x4_t *)(v7 + v13 - 16);
      float32x4_t v17 = *(float32x4_t *)(v7 + v13);
      int8x16_t v19 = *((int8x16_t *)a2 + 5);
      float32x4_t v18 = *((float32x4_t *)a2 + 6);
      float32x4_t v20 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v18);
      float32x4_t v21 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v18);
      float32x4_t v22 = *((float32x4_t *)a2 + 7);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v20), v22);
      float32x4_t v24 = vmulq_f32(vrecpeq_f32(v21), v22);
      int8x16_t v25 = (int8x16_t)vmulq_f32(v23, vrecpsq_f32(v23, v20));
      int8x16_t v26 = (int8x16_t)vmulq_f32(v24, vrecpsq_f32(v24, v21));
      int8x16_t v27 = *((int8x16_t *)a2 + 31);
      float32x4_t v28 = *((float32x4_t *)a2 + 32);
      float32x4_t v29 = (float32x4_t)vorrq_s8(vandq_s8(v27, v25), (int8x16_t)v28);
      float32x4_t v30 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3), v18);
      float32x4_t v31 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 3), v18);
      float32x4_t v32 = (float32x4_t)vorrq_s8(vandq_s8(v27, v26), (int8x16_t)v28);
      float32x4_t v33 = vmulq_f32(v22, vrecpeq_f32(v30));
      float32x4_t v34 = vmulq_f32(v22, vrecpeq_f32(v31));
      float32x4_t v35 = vmulq_f32(v14, v29);
      float32x4_t v36 = vmulq_f32(v16, vmulq_f32(v33, vrecpsq_f32(v33, v30)));
      float32x4_t v37 = vmulq_f32(v17, vmulq_f32(v34, vrecpsq_f32(v34, v31)));
      float32x4_t v38 = vmulq_f32(v15, v32);
      float32x4_t v39 = vmulq_f32(v35, v36);
      float32x4_t v40 = vmulq_f32(v38, v37);
      float32x4_t v41 = vaddq_f32(v39, v39);
      float32x4_t v42 = vaddq_f32(v40, v40);
      long long v43 = *((_OWORD *)a2 + 55);
      float32x4_t v44 = vsubq_f32(vmulq_n_f32(vaddq_f32(v35, v36), *(float *)&v43), v41);
      float32x4_t v45 = vmulq_n_f32(vaddq_f32(v38, v37), *(float *)&v43);
      float32x4_t v46 = *((float32x4_t *)a2 + 13);
      int8x16_t v47 = (int8x16_t)vcgtq_f32(v46, v36);
      int8x16_t v48 = (int8x16_t)vcgtq_f32(v46, v37);
      float32x4_t v49 = *((float32x4_t *)a2 + 29);
      float32x4_t v50 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v49, v47), v28), (int8x16_t)v41, (int8x16_t)vsubq_f32(v44, v49));
      v50.i32[3] = 1.0;
      float32x4_t v51 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v49, v48), v28), (int8x16_t)v42, (int8x16_t)vsubq_f32(vsubq_f32(v45, v42), v49));
      v51.i32[3] = 1.0;
      float32x4_t v52 = (float32x4_t *)(v6 + v13);
      v52[-1] = vaddq_f32(v16, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)v50, (int8x16_t)vaddq_f32(v35, vmulq_laneq_f32(vsubq_f32(v50, v35), v16, 3))), v16), v35, 3));
      *float32x4_t v52 = vaddq_f32(v17, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)v51, (int8x16_t)vaddq_f32(v38, vmulq_laneq_f32(vsubq_f32(v51, v38), v17, 3))), v17), v38, 3));
      v12 -= 2;
      v13 += 32;
    }
    while (v5 + v12 > 1);
    int v53 = -v12;
    if (v53 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v54 = 16 * v53;
    float32x4_t v55 = *(float32x4_t *)(v7 + v54);
    float32x4_t v56 = vmulq_f32(*(float32x4_t *)(v8 + v54), *(float32x4_t *)a2);
    float32x4_t v57 = *((float32x4_t *)a2 + 6);
    float32x4_t v58 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 3), v57);
    float32x4_t v59 = *((float32x4_t *)a2 + 7);
    float32x4_t v60 = vmulq_f32(vrecpeq_f32(v58), v59);
    float32x4_t v61 = *((float32x4_t *)a2 + 32);
    float32x4_t v62 = vmulq_f32(v56, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v60, vrecpsq_f32(v60, v58))), (int8x16_t)v61));
    float32x4_t v63 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3), v57);
    float32x4_t v64 = vmulq_f32(v59, vrecpeq_f32(v63));
    float32x4_t v65 = vmulq_f32(v55, vmulq_f32(v64, vrecpsq_f32(v64, v63)));
    float32x4_t v66 = vmulq_f32(v62, v65);
    float32x4_t v67 = vaddq_f32(v66, v66);
    float32x4_t v68 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8(*((int8x16_t *)a2 + 29), (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 13), v65)), v61), (int8x16_t)v67, (int8x16_t)vsubq_f32(vsubq_f32(vmulq_n_f32(vaddq_f32(v62, v65), COERCE_FLOAT(*((_OWORD *)a2 + 55))), v67), *((float32x4_t *)a2 + 29)));
    v68.i32[3] = 1.0;
    *(float32x4_t *)(v6 + v54) = vaddq_f32(v55, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v68, (int8x16_t)vaddq_f32(v62, vmulq_laneq_f32(vsubq_f32(v68, v62), v55, 3))), v55), v62, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendOverlayPOWTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 10);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 26);
    float v12 = 1.0;
    while (v5 < 2)
    {
      int v124 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v13 = 0;
    uint64_t v14 = 16;
    do
    {
      float32x4_t v15 = *(float32x4_t *)(v8 + v14 - 16);
      float32x4_t v185 = *(float32x4_t *)(v8 + v14);
      int8x16_t v17 = *((int8x16_t *)a2 + 5);
      float32x4_t v16 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v16);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v185, 3), v16);
      float32x4_t v21 = *((float32x4_t *)a2 + 7);
      int8x16_t v20 = *((int8x16_t *)a2 + 8);
      float32x4_t v22 = vmulq_f32(vrecpeq_f32(v18), v21);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v19), v21);
      int8x16_t v25 = *((int8x16_t *)a2 + 31);
      float32x4_t v24 = *((float32x4_t *)a2 + 32);
      float32x4_t v26 = vmaxq_f32(vmulq_f32(v15, vmulq_f32(v22, vrecpsq_f32(v22, v18))), v24);
      float32x4_t v27 = vmaxq_f32(vmulq_f32(v185, vmulq_f32(v23, vrecpsq_f32(v23, v19))), v24);
      float32x4_t v28 = *((float32x4_t *)a2 + 29);
      float32x4_t v29 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v26), (int8x16_t)v28);
      float32x4_t v30 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v27), (int8x16_t)v28);
      float32x4_t v32 = *((float32x4_t *)a2 + 9);
      int8x16_t v31 = *((int8x16_t *)a2 + 10);
      float32x4_t v34 = *((float32x4_t *)a2 + 11);
      float32x4_t v33 = *((float32x4_t *)a2 + 12);
      float32x4_t v35 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v27, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v27))), v34);
      float32x4_t v36 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v29, v33));
      float32x4_t v37 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v30, v33));
      float32x4_t v39 = *((float32x4_t *)a2 + 13);
      float32x4_t v38 = *((float32x4_t *)a2 + 14);
      float32x4_t v40 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v26, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v26))), v34), v36);
      float32x4_t v41 = vmulq_f32(v39, v36);
      float32x4_t v42 = vmulq_f32(vmulq_f32(v39, v37), v30);
      float32x4_t v43 = vaddq_f32(v35, v37);
      float32x4_t v44 = vsubq_f32(vsubq_f32(v29, v28), vmulq_f32(v41, v29));
      float32x4_t v45 = vsubq_f32(vsubq_f32(v30, v28), v42);
      float32x4_t v47 = *((float32x4_t *)a2 + 15);
      float32x4_t v46 = *((float32x4_t *)a2 + 16);
      float32x4_t v49 = *((float32x4_t *)a2 + 17);
      float32x4_t v48 = *((float32x4_t *)a2 + 18);
      float32x4_t v50 = *((float32x4_t *)a2 + 1);
      float32x4_t v51 = vmaxq_f32(vmulq_f32(v50, vaddq_f32(v40, vmulq_f32(v44, vaddq_f32(vaddq_f32(v46, vmulq_f32(v44, v49)), vmulq_f32(vmulq_f32(v44, v44), vaddq_f32(v38, vmulq_f32(v47, v44))))))), v48);
      float32x4_t v52 = vmaxq_f32(vmulq_f32(v50, vaddq_f32(v43, vmulq_f32(v45, vaddq_f32(vaddq_f32(v46, vmulq_f32(v45, v49)), vmulq_f32(vmulq_f32(v45, v45), vaddq_f32(v38, vmulq_f32(v47, v45))))))), v48);
      float32x4_t v53 = vcvtq_f32_s32(vcvtq_s32_f32(v51));
      float32x4_t v54 = vcvtq_f32_s32(vcvtq_s32_f32(v52));
      float32x4_t v55 = vsubq_f32(v53, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v53, v51)));
      float32x4_t v56 = vsubq_f32(v54, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v54, v52)));
      float32x4_t v57 = *((float32x4_t *)a2 + 19);
      float32x4_t v58 = *((float32x4_t *)a2 + 20);
      float32x4_t v59 = vmulq_f32(*(float32x4_t *)(v7 + v14 - 16), *(float32x4_t *)a2);
      float32x4_t v60 = vsubq_f32(v51, v55);
      float32x4_t v61 = vmulq_f32(*(float32x4_t *)(v7 + v14), *(float32x4_t *)a2);
      float32x4_t v62 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 3), v16);
      float32x4_t v63 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 3), v16);
      float32x4_t v64 = vmulq_f32(v21, vrecpeq_f32(v62));
      float32x4_t v65 = vmulq_f32(v21, vrecpeq_f32(v63));
      int8x16_t v66 = (int8x16_t)vmulq_f32(v64, vrecpsq_f32(v64, v62));
      float32x4_t v68 = *((float32x4_t *)a2 + 21);
      int32x4_t v67 = *((int32x4_t *)a2 + 22);
      float32x4_t v69 = vmulq_f32(v59, (float32x4_t)vorrq_s8(vandq_s8(v25, v66), (int8x16_t)v24));
      float32x4_t v70 = vmulq_f32(v61, (float32x4_t)vorrq_s8(vandq_s8(v25, (int8x16_t)vmulq_f32(v65, vrecpsq_f32(v65, v63))), (int8x16_t)v24));
      float32x4_t v71 = vmaxq_f32(v69, v24);
      float32x4_t v72 = vmaxq_f32(v70, v24);
      float32x4_t v73 = vmulq_f32(v60, vaddq_f32(v68, vmulq_f32(v60, vaddq_f32(v57, vmulq_f32(v58, v60)))));
      float32x4_t v74 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v71), (int8x16_t)v28);
      float32x4_t v75 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v72), (int8x16_t)v28);
      float32x4_t v76 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v74, v33));
      float32x4_t v77 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v71, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v71))), v34), v76);
      float32x4_t v78 = vsubq_f32(vsubq_f32(v74, v28), vmulq_f32(vmulq_f32(v39, v76), v74));
      float32x4_t v79 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v75, v33));
      float32x4_t v80 = vsubq_f32(v52, v56);
      float32x4_t v81 = vsubq_f32(vsubq_f32(v75, v28), vmulq_f32(vmulq_f32(v39, v79), v75));
      float32x4_t v82 = vmaxq_f32(vmulq_f32(v50, vaddq_f32(v77, vmulq_f32(v78, vaddq_f32(vaddq_f32(v46, vmulq_f32(v49, v78)), vmulq_f32(vmulq_f32(v78, v78), vaddq_f32(v38, vmulq_f32(v47, v78))))))), v48);
      float32x4_t v83 = vmaxq_f32(vmulq_f32(v50, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v72, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v72))), v34), v79), vmulq_f32(v81, vaddq_f32(vaddq_f32(v46, vmulq_f32(v49, v81)), vmulq_f32(vmulq_f32(v81, v81), vaddq_f32(v38, vmulq_f32(v47, v81))))))), v48);
      float32x4_t v84 = vcvtq_f32_s32(vcvtq_s32_f32(v82));
      float32x4_t v85 = vmulq_f32(vaddq_f32(v28, v73), (float32x4_t)vshlq_n_s32(vaddq_s32(v67, vcvtq_s32_f32(v55)), 0x17uLL));
      float32x4_t v86 = vcvtq_f32_s32(vcvtq_s32_f32(v83));
      float32x4_t v87 = vsubq_f32(v84, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v84, v82)));
      float32x4_t v88 = vsubq_f32(v86, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v86, v83)));
      int32x4_t v89 = vcvtq_s32_f32(v56);
      float v12 = 1.0;
      float32x4_t v90 = vmulq_f32(vaddq_f32(v28, vmulq_f32(v80, vaddq_f32(v68, vmulq_f32(v80, vaddq_f32(v57, vmulq_f32(v58, v80)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v67, v89), 0x17uLL));
      float32x4_t v91 = vsubq_f32(v82, v87);
      float32x4_t v92 = vsubq_f32(v83, v88);
      float32x4_t v93 = vmulq_f32(vaddq_f32(v28, vmulq_f32(v91, vaddq_f32(v68, vmulq_f32(v91, vaddq_f32(v57, vmulq_f32(v58, v91)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v87), v67), 0x17uLL));
      float32x4_t v94 = vmulq_f32(vaddq_f32(v28, vmulq_f32(v92, vaddq_f32(v68, vmulq_f32(v92, vaddq_f32(v57, vmulq_f32(v58, v92)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v88), v67), 0x17uLL));
      float32x4_t v95 = vaddq_f32(v85, v85);
      int8x16_t v96 = (int8x16_t)vmulq_f32(v95, v93);
      float32x4_t v97 = vsubq_f32(v95, v28);
      int8x16_t v98 = (int8x16_t)vsubq_f32(vaddq_f32(v97, v93), vminq_f32(vminq_f32(vmulq_f32(v97, v93), v97), v93));
      float32x4_t v99 = vaddq_f32(v90, v90);
      float32x4_t v100 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgeq_f32(v39, v85)), v24), v96, v98);
      int8x16_t v101 = (int8x16_t)vmulq_f32(v99, v94);
      float32x4_t v102 = vsubq_f32(v99, v28);
      float32x4_t v103 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgeq_f32(v39, v90)), v24), v101, (int8x16_t)vsubq_f32(vaddq_f32(v102, v94), vminq_f32(vminq_f32(vmulq_f32(v102, v94), v102), v94)));
      float32x4_t v104 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v100, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v100)));
      float32x4_t v105 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v100), (int8x16_t)v28);
      float32x4_t v106 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v105, v33));
      float32x4_t v107 = vsubq_f32(vsubq_f32(v105, v28), vmulq_f32(vmulq_f32(v39, v106), v105));
      float32x4_t v108 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v103), (int8x16_t)v28);
      float32x4_t v109 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v108, v33));
      float32x4_t v110 = vsubq_f32(vsubq_f32(v108, v28), vmulq_f32(vmulq_f32(v39, v109), v108));
      float32x4_t v111 = vaddq_f32(vaddq_f32(vsubq_f32(v104, v34), v106), vmulq_f32(v107, vaddq_f32(vaddq_f32(v46, vmulq_f32(v49, v107)), vmulq_f32(vmulq_f32(v107, v107), vaddq_f32(v38, vmulq_f32(v47, v107))))));
      float32x4_t v112 = *((float32x4_t *)a2 + 2);
      float32x4_t v113 = vmaxq_f32(vmulq_f32(v112, v111), v48);
      float32x4_t v114 = vmaxq_f32(vmulq_f32(v112, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v103, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v103))), v34), v109), vmulq_f32(v110, vaddq_f32(vaddq_f32(v46, vmulq_f32(v49, v110)), vmulq_f32(vmulq_f32(v110, v110), vaddq_f32(v38, vmulq_f32(v47, v110))))))), v48);
      float32x4_t v115 = vcvtq_f32_s32(vcvtq_s32_f32(v113));
      float32x4_t v116 = vcvtq_f32_s32(vcvtq_s32_f32(v114));
      float32x4_t v117 = vsubq_f32(v115, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v115, v113)));
      float32x4_t v118 = vsubq_f32(v116, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v116, v114)));
      float32x4_t v119 = vsubq_f32(v113, v117);
      float32x4_t v120 = vsubq_f32(v114, v118);
      float32x4_t v121 = vmulq_f32(vaddq_f32(v28, vmulq_f32(v119, vaddq_f32(v68, vmulq_f32(v119, vaddq_f32(v57, vmulq_f32(v58, v119)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v117), v67), 0x17uLL));
      v121.i32[3] = 1.0;
      float32x4_t v122 = vmulq_f32(vaddq_f32(v28, vmulq_f32(v120, vaddq_f32(v68, vmulq_f32(v120, vaddq_f32(v57, vmulq_f32(v58, v120)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v118), v67), 0x17uLL));
      v122.i32[3] = 1.0;
      float32x4_t v123 = (float32x4_t *)(v6 + v14);
      v123[-1] = vaddq_f32(*(float32x4_t *)(v8 + v14 - 16), vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v121, (int8x16_t)vaddq_f32(v69, vmulq_laneq_f32(vsubq_f32(v121, v69), *(float32x4_t *)(v8 + v14 - 16), 3))), *(float32x4_t *)(v8 + v14 - 16)), v69, 3));
      *float32x4_t v123 = vaddq_f32(v185, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v122, (int8x16_t)vaddq_f32(v70, vmulq_laneq_f32(vsubq_f32(v122, v70), v185, 3))), v185), v70, 3));
      v13 -= 2;
      v14 += 32;
    }
    while (v5 + v13 > 1);
    int v124 = -v13;
    if (v124 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v125 = 16 * v124;
    float32x4_t v126 = *(float32x4_t *)(v8 + v125);
    float32x4_t v127 = *((float32x4_t *)a2 + 6);
    float32x4_t v128 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 3), v127);
    float32x4_t v130 = *((float32x4_t *)a2 + 7);
    int8x16_t v129 = *((int8x16_t *)a2 + 8);
    float32x4_t v131 = vmulq_f32(vrecpeq_f32(v128), v130);
    float32x4_t v132 = *((float32x4_t *)a2 + 32);
    float32x4_t v133 = vmaxq_f32(vmulq_f32(v126, vmulq_f32(v131, vrecpsq_f32(v131, v128))), v132);
    float32x4_t v134 = *((float32x4_t *)a2 + 29);
    float32x4_t v135 = (float32x4_t)vorrq_s8(vandq_s8(v129, (int8x16_t)v133), (int8x16_t)v134);
    float32x4_t v136 = *((float32x4_t *)a2 + 9);
    int8x16_t v137 = *((int8x16_t *)a2 + 10);
    float32x4_t v138 = *((float32x4_t *)a2 + 11);
    float32x4_t v139 = *((float32x4_t *)a2 + 12);
    float32x4_t v140 = (float32x4_t)vandq_s8((int8x16_t)v134, (int8x16_t)vcgtq_f32(v135, v139));
    float32x4_t v141 = *((float32x4_t *)a2 + 13);
    float32x4_t v142 = *((float32x4_t *)a2 + 14);
    float32x4_t v143 = vsubq_f32(vsubq_f32(v135, v134), vmulq_f32(vmulq_f32(v141, v140), v135));
    float32x4_t v144 = *((float32x4_t *)a2 + 15);
    float32x4_t v145 = *((float32x4_t *)a2 + 16);
    float32x4_t v146 = *((float32x4_t *)a2 + 17);
    float32x4_t v147 = *((float32x4_t *)a2 + 18);
    float32x4_t v148 = vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v133, 0x17uLL)), (float32x4_t)vandq_s8(v137, (int8x16_t)vcgtq_f32(v136, v133))), v138), v140), vmulq_f32(v143, vaddq_f32(vaddq_f32(v145, vmulq_f32(v143, v146)), vmulq_f32(vmulq_f32(v143, v143), vaddq_f32(v142, vmulq_f32(v144, v143))))));
    float32x4_t v149 = *((float32x4_t *)a2 + 1);
    float32x4_t v150 = vmaxq_f32(vmulq_f32(v149, v148), v147);
    float32x4_t v151 = vcvtq_f32_s32(vcvtq_s32_f32(v150));
    float32x4_t v152 = vsubq_f32(v151, (float32x4_t)vandq_s8((int8x16_t)v134, (int8x16_t)vcgtq_f32(v151, v150)));
    float32x4_t v153 = vsubq_f32(v150, v152);
    float32x4_t v154 = *((float32x4_t *)a2 + 19);
    float32x4_t v155 = *((float32x4_t *)a2 + 20);
    float32x4_t v156 = *((float32x4_t *)a2 + 21);
    int32x4_t v157 = *((int32x4_t *)a2 + 22);
    float32x4_t v158 = vmulq_f32(vaddq_f32(v134, vmulq_f32(v153, vaddq_f32(v156, vmulq_f32(v153, vaddq_f32(v154, vmulq_f32(v155, v153)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v157, vcvtq_s32_f32(v152)), 0x17uLL));
    float32x4_t v159 = vmulq_f32(*(float32x4_t *)(v7 + v125), *(float32x4_t *)a2);
    float32x4_t v160 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v159, 3), v127);
    float32x4_t v161 = vmulq_f32(v130, vrecpeq_f32(v160));
    float32x4_t v162 = vmulq_f32(v159, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v161, vrecpsq_f32(v161, v160))), (int8x16_t)v132));
    float32x4_t v163 = vmaxq_f32(v162, v132);
    float32x4_t v164 = (float32x4_t)vorrq_s8(vandq_s8(v129, (int8x16_t)v163), (int8x16_t)v134);
    float32x4_t v165 = (float32x4_t)vandq_s8((int8x16_t)v134, (int8x16_t)vcgtq_f32(v164, v139));
    float32x4_t v166 = vsubq_f32(vsubq_f32(v164, v134), vmulq_f32(vmulq_f32(v141, v165), v164));
    float32x4_t v167 = vmaxq_f32(vmulq_f32(v149, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v163, 0x17uLL)), (float32x4_t)vandq_s8(v137, (int8x16_t)vcgtq_f32(v136, v163))), v138), v165), vmulq_f32(v166, vaddq_f32(vaddq_f32(v145, vmulq_f32(v146, v166)), vmulq_f32(vmulq_f32(v166, v166), vaddq_f32(v142, vmulq_f32(v144, v166))))))), v147);
    float32x4_t v168 = vcvtq_f32_s32(vcvtq_s32_f32(v167));
    float32x4_t v169 = vsubq_f32(v168, (float32x4_t)vandq_s8((int8x16_t)v134, (int8x16_t)vcgtq_f32(v168, v167)));
    float32x4_t v170 = vsubq_f32(v167, v169);
    float32x4_t v171 = vmulq_f32(vaddq_f32(v134, vmulq_f32(v170, vaddq_f32(v156, vmulq_f32(v170, vaddq_f32(v154, vmulq_f32(v155, v170)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v169), v157), 0x17uLL));
    float32x4_t v172 = vaddq_f32(v158, v158);
    int8x16_t v173 = (int8x16_t)vmulq_f32(v172, v171);
    float32x4_t v174 = vsubq_f32(v172, v134);
    float32x4_t v175 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v134, (int8x16_t)vcgeq_f32(v141, v158)), v132), v173, (int8x16_t)vsubq_f32(vaddq_f32(v174, v171), vminq_f32(vminq_f32(vmulq_f32(v174, v171), v174), v171)));
    float32x4_t v176 = (float32x4_t)vorrq_s8(vandq_s8(v129, (int8x16_t)v175), (int8x16_t)v134);
    float32x4_t v177 = (float32x4_t)vandq_s8((int8x16_t)v134, (int8x16_t)vcgtq_f32(v176, v139));
    float32x4_t v178 = vsubq_f32(vsubq_f32(v176, v134), vmulq_f32(vmulq_f32(v141, v177), v176));
    float32x4_t v179 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 2), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v175, 0x17uLL)), (float32x4_t)vandq_s8(v137, (int8x16_t)vcgtq_f32(v136, v175))), v138), v177), vmulq_f32(v178, vaddq_f32(vaddq_f32(v145, vmulq_f32(v146, v178)), vmulq_f32(vmulq_f32(v178, v178), vaddq_f32(v142, vmulq_f32(v144, v178))))))), v147);
    float32x4_t v180 = vcvtq_f32_s32(vcvtq_s32_f32(v179));
    float32x4_t v181 = vsubq_f32(v180, (float32x4_t)vandq_s8((int8x16_t)v134, (int8x16_t)vcgtq_f32(v180, v179)));
    float32x4_t v182 = vsubq_f32(v179, v181);
    float32x4_t v183 = vmulq_f32(vaddq_f32(v134, vmulq_f32(v182, vaddq_f32(v156, vmulq_f32(v182, vaddq_f32(v154, vmulq_f32(v155, v182)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v181), v157), 0x17uLL));
    v183.f32[3] = v12;
    *(float32x4_t *)(v6 + v125) = vaddq_f32(v126, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v183, (int8x16_t)vaddq_f32(v162, vmulq_laneq_f32(vsubq_f32(v183, v162), v126, 3))), v126), v162, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendOverlayQTTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 10);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 26);
    float v12 = 1.0;
    while (v5 < 2)
    {
      int v131 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v13 = 0;
    uint64_t v14 = 16;
    do
    {
      float32x4_t v15 = *(float32x4_t *)(v8 + v14 - 16);
      float32x4_t v192 = *(float32x4_t *)(v8 + v14);
      int8x16_t v17 = *((int8x16_t *)a2 + 5);
      float32x4_t v16 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v16);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v192, 3), v16);
      float32x4_t v21 = *((float32x4_t *)a2 + 7);
      int8x16_t v20 = *((int8x16_t *)a2 + 8);
      float32x4_t v22 = vmulq_f32(vrecpeq_f32(v18), v21);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v19), v21);
      float32x4_t v24 = vmulq_f32(v15, vmulq_f32(v22, vrecpsq_f32(v22, v18)));
      int8x16_t v26 = *((int8x16_t *)a2 + 31);
      float32x4_t v25 = *((float32x4_t *)a2 + 32);
      float32x4_t v28 = *((float32x4_t *)a2 + 23);
      float32x4_t v27 = *((float32x4_t *)a2 + 24);
      float32x4_t v29 = vmaxq_f32(vmulq_f32(v192, vmulq_f32(v23, vrecpsq_f32(v23, v19))), v25);
      float32x4_t v30 = vminq_f32(vmaxq_f32(v24, v25), v28);
      float32x4_t v31 = vminq_f32(v29, v28);
      float32x4_t v32 = *((float32x4_t *)a2 + 29);
      float32x4_t v33 = *((float32x4_t *)a2 + 30);
      float32x4_t v34 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v30), (int8x16_t)v32);
      float32x4_t v36 = *((float32x4_t *)a2 + 9);
      int8x16_t v35 = *((int8x16_t *)a2 + 10);
      float32x4_t v37 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v31), (int8x16_t)v32);
      float32x4_t v39 = *((float32x4_t *)a2 + 11);
      float32x4_t v38 = *((float32x4_t *)a2 + 12);
      float32x4_t v40 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v34, v38));
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v37, v38));
      float32x4_t v43 = *((float32x4_t *)a2 + 13);
      float32x4_t v42 = *((float32x4_t *)a2 + 14);
      float32x4_t v44 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v30))), v39), v40);
      float32x4_t v45 = vmulq_f32(v43, v40);
      float32x4_t v46 = vmulq_f32(vmulq_f32(v43, v41), v37);
      float32x4_t v47 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v31, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v31))), v39), v41);
      float32x4_t v48 = vsubq_f32(vsubq_f32(v34, v32), vmulq_f32(v45, v34));
      float32x4_t v49 = vsubq_f32(vsubq_f32(v37, v32), v46);
      float32x4_t v51 = *((float32x4_t *)a2 + 15);
      float32x4_t v50 = *((float32x4_t *)a2 + 16);
      float32x4_t v53 = *((float32x4_t *)a2 + 17);
      float32x4_t v52 = *((float32x4_t *)a2 + 18);
      float32x4_t v54 = vaddq_f32(v47, vmulq_f32(v49, vaddq_f32(vaddq_f32(v50, vmulq_f32(v49, v53)), vmulq_f32(vmulq_f32(v49, v49), vaddq_f32(v42, vmulq_f32(v51, v49))))));
      float32x4_t v55 = vmulq_f32(v27, vaddq_f32(v44, vmulq_f32(v48, vaddq_f32(vaddq_f32(v50, vmulq_f32(v48, v53)), vmulq_f32(vmulq_f32(v48, v48), vaddq_f32(v42, vmulq_f32(v51, v48)))))));
      float32x4_t v56 = vmulq_f32(*(float32x4_t *)(v7 + v14 - 16), *(float32x4_t *)a2);
      float32x4_t v57 = vmaxq_f32(v55, v52);
      float32x4_t v58 = vmulq_f32(*(float32x4_t *)(v7 + v14), *(float32x4_t *)a2);
      float32x4_t v59 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 3), v16);
      float32x4_t v60 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 3), v16);
      float32x4_t v61 = vmaxq_f32(vmulq_f32(v27, v54), v52);
      float32x4_t v62 = vmulq_f32(v21, vrecpeq_f32(v59));
      float32x4_t v63 = vmulq_f32(v21, vrecpeq_f32(v60));
      float32x4_t v64 = vmulq_f32(v56, (float32x4_t)vorrq_s8(vandq_s8(v26, (int8x16_t)vmulq_f32(v62, vrecpsq_f32(v62, v59))), (int8x16_t)v25));
      float32x4_t v65 = vmulq_f32(v58, (float32x4_t)vorrq_s8(vandq_s8(v26, (int8x16_t)vmulq_f32(v63, vrecpsq_f32(v63, v60))), (int8x16_t)v25));
      float32x4_t v66 = vcvtq_f32_s32(vcvtq_s32_f32(v57));
      float32x4_t v67 = vminq_f32(vmaxq_f32(v64, v25), v28);
      float32x4_t v68 = vminq_f32(vmaxq_f32(v65, v25), v28);
      float32x4_t v69 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
      float32x4_t v70 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v67), (int8x16_t)v32);
      float32x4_t v71 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v68), (int8x16_t)v32);
      float32x4_t v72 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v70, v38));
      float32x4_t v73 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v71, v38));
      float32x4_t v74 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v67, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v67))), v39), v72);
      float32x4_t v75 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v68, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v68))), v39), v73);
      float32x4_t v76 = vsubq_f32(v66, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v66, v57)));
      float32x4_t v77 = vsubq_f32(vsubq_f32(v70, v32), vmulq_f32(vmulq_f32(v43, v72), v70));
      float32x4_t v78 = vsubq_f32(vsubq_f32(v71, v32), vmulq_f32(vmulq_f32(v43, v73), v71));
      float32x4_t v79 = vsubq_f32(v69, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v69, v61)));
      float32x4_t v80 = vsubq_f32(v57, v76);
      float32x4_t v81 = *((float32x4_t *)a2 + 19);
      float32x4_t v82 = *((float32x4_t *)a2 + 20);
      float32x4_t v83 = vaddq_f32(v74, vmulq_f32(v77, vaddq_f32(vaddq_f32(v50, vmulq_f32(v53, v77)), vmulq_f32(vmulq_f32(v77, v77), vaddq_f32(v42, vmulq_f32(v51, v77))))));
      float32x4_t v84 = *((float32x4_t *)a2 + 21);
      int32x4_t v85 = *((int32x4_t *)a2 + 22);
      float32x4_t v86 = vmulq_f32(v80, vaddq_f32(v84, vmulq_f32(v80, vaddq_f32(v81, vmulq_f32(v82, v80)))));
      float32x4_t v87 = vsubq_f32(v61, v79);
      float v12 = 1.0;
      float32x4_t v88 = vmulq_f32(vaddq_f32(v32, v86), (float32x4_t)vshlq_n_s32(vaddq_s32(v85, vcvtq_s32_f32(v76)), 0x17uLL));
      float32x4_t v89 = vmaxq_f32(vmulq_f32(v27, v83), v52);
      float32x4_t v90 = vmaxq_f32(vmulq_f32(v27, vaddq_f32(v75, vmulq_f32(v78, vaddq_f32(vaddq_f32(v50, vmulq_f32(v53, v78)), vmulq_f32(vmulq_f32(v78, v78), vaddq_f32(v42, vmulq_f32(v51, v78))))))), v52);
      float32x4_t v91 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v87, vaddq_f32(v84, vmulq_f32(v87, vaddq_f32(v81, vmulq_f32(v82, v87)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v85, vcvtq_s32_f32(v79)), 0x17uLL));
      float32x4_t v92 = vcvtq_f32_s32(vcvtq_s32_f32(v89));
      float32x4_t v93 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
      float32x4_t v94 = vsubq_f32(v92, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v92, v89)));
      float32x4_t v95 = vsubq_f32(v93, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v93, v90)));
      float32x4_t v96 = vsubq_f32(v89, v94);
      float32x4_t v97 = vsubq_f32(v90, v95);
      float32x4_t v98 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v96, vaddq_f32(v84, vmulq_f32(v96, vaddq_f32(v81, vmulq_f32(v82, v96)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v94), v85), 0x17uLL));
      float32x4_t v99 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v97, vaddq_f32(v84, vmulq_f32(v97, vaddq_f32(v81, vmulq_f32(v82, v97)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v95), v85), 0x17uLL));
      float32x4_t v100 = vaddq_f32(v88, v88);
      int8x16_t v101 = (int8x16_t)vmulq_f32(v100, v98);
      float32x4_t v102 = vsubq_f32(v100, v32);
      int8x16_t v103 = (int8x16_t)vsubq_f32(vaddq_f32(v102, v98), vminq_f32(vminq_f32(vmulq_f32(v102, v98), v102), v98));
      float32x4_t v104 = vaddq_f32(v91, v91);
      float32x4_t v105 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgeq_f32(v43, v88)), v25), v101, v103);
      int8x16_t v106 = (int8x16_t)vmulq_f32(v104, v99);
      float32x4_t v107 = vsubq_f32(v104, v32);
      float32x4_t v108 = vminq_f32(vmaxq_f32(v105, v25), v33);
      float32x4_t v109 = vminq_f32(vmaxq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgeq_f32(v43, v91)), v25), v106, (int8x16_t)vsubq_f32(vaddq_f32(v107, v99), vminq_f32(vminq_f32(vmulq_f32(v107, v99), v107), v99))), v25), v33);
      float32x4_t v110 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v108, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v108)));
      float32x4_t v111 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v108), (int8x16_t)v32);
      float32x4_t v112 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v111, v38));
      float32x4_t v113 = vaddq_f32(vsubq_f32(v110, v39), v112);
      float32x4_t v114 = vsubq_f32(vsubq_f32(v111, v32), vmulq_f32(vmulq_f32(v43, v112), v111));
      float32x4_t v115 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v109), (int8x16_t)v32);
      float32x4_t v116 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v115, v38));
      float32x4_t v117 = vsubq_f32(vsubq_f32(v115, v32), vmulq_f32(vmulq_f32(v43, v116), v115));
      float32x4_t v118 = vaddq_f32(v113, vmulq_f32(v114, vaddq_f32(vaddq_f32(v50, vmulq_f32(v53, v114)), vmulq_f32(vmulq_f32(v114, v114), vaddq_f32(v42, vmulq_f32(v51, v114))))));
      float32x4_t v119 = *((float32x4_t *)a2 + 25);
      float32x4_t v120 = vmaxq_f32(vmulq_f32(v119, v118), v52);
      float32x4_t v121 = vmaxq_f32(vmulq_f32(v119, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v109, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v109))), v39), v116), vmulq_f32(v117, vaddq_f32(vaddq_f32(v50, vmulq_f32(v53, v117)), vmulq_f32(vmulq_f32(v117, v117), vaddq_f32(v42, vmulq_f32(v51, v117))))))), v52);
      float32x4_t v122 = vcvtq_f32_s32(vcvtq_s32_f32(v120));
      float32x4_t v123 = vcvtq_f32_s32(vcvtq_s32_f32(v121));
      float32x4_t v124 = vsubq_f32(v122, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v122, v120)));
      float32x4_t v125 = vsubq_f32(v123, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v123, v121)));
      float32x4_t v126 = vsubq_f32(v120, v124);
      float32x4_t v127 = vsubq_f32(v121, v125);
      float32x4_t v128 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v126, vaddq_f32(v84, vmulq_f32(v126, vaddq_f32(v81, vmulq_f32(v82, v126)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v124), v85), 0x17uLL));
      v128.i32[3] = 1.0;
      float32x4_t v129 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v127, vaddq_f32(v84, vmulq_f32(v127, vaddq_f32(v81, vmulq_f32(v82, v127)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v125), v85), 0x17uLL));
      v129.i32[3] = 1.0;
      float32x4_t v130 = (float32x4_t *)(v6 + v14);
      v130[-1] = vaddq_f32(*(float32x4_t *)(v8 + v14 - 16), vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v128, (int8x16_t)vaddq_f32(v64, vmulq_laneq_f32(vsubq_f32(v128, v64), *(float32x4_t *)(v8 + v14 - 16), 3))), *(float32x4_t *)(v8 + v14 - 16)), v64, 3));
      *float32x4_t v130 = vaddq_f32(v192, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v129, (int8x16_t)vaddq_f32(v65, vmulq_laneq_f32(vsubq_f32(v129, v65), v192, 3))), v192), v65, 3));
      v13 -= 2;
      v14 += 32;
    }
    while (v5 + v13 > 1);
    int v131 = -v13;
    if (v131 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v132 = 16 * v131;
    float32x4_t v133 = *(float32x4_t *)(v8 + v132);
    float32x4_t v134 = *((float32x4_t *)a2 + 6);
    float32x4_t v135 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v133, 3), v134);
    float32x4_t v137 = *((float32x4_t *)a2 + 7);
    int8x16_t v136 = *((int8x16_t *)a2 + 8);
    float32x4_t v138 = vmulq_f32(vrecpeq_f32(v135), v137);
    float32x4_t v139 = *((float32x4_t *)a2 + 32);
    float32x4_t v140 = *((float32x4_t *)a2 + 23);
    float32x4_t v141 = *((float32x4_t *)a2 + 24);
    float32x4_t v142 = vminq_f32(vmaxq_f32(vmulq_f32(v133, vmulq_f32(v138, vrecpsq_f32(v138, v135))), v139), v140);
    float32x4_t v143 = *((float32x4_t *)a2 + 29);
    float32x4_t v144 = (float32x4_t)vorrq_s8(vandq_s8(v136, (int8x16_t)v142), (int8x16_t)v143);
    float32x4_t v145 = *((float32x4_t *)a2 + 9);
    int8x16_t v146 = *((int8x16_t *)a2 + 10);
    float32x4_t v147 = *((float32x4_t *)a2 + 11);
    float32x4_t v148 = *((float32x4_t *)a2 + 12);
    float32x4_t v149 = (float32x4_t)vandq_s8((int8x16_t)v143, (int8x16_t)vcgtq_f32(v144, v148));
    float32x4_t v150 = *((float32x4_t *)a2 + 13);
    float32x4_t v151 = *((float32x4_t *)a2 + 14);
    float32x4_t v152 = vsubq_f32(vsubq_f32(v144, v143), vmulq_f32(vmulq_f32(v150, v149), v144));
    float32x4_t v153 = *((float32x4_t *)a2 + 15);
    float32x4_t v154 = *((float32x4_t *)a2 + 16);
    float32x4_t v156 = *((float32x4_t *)a2 + 17);
    float32x4_t v155 = *((float32x4_t *)a2 + 18);
    float32x4_t v157 = vmaxq_f32(vmulq_f32(v141, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v142, 0x17uLL)), (float32x4_t)vandq_s8(v146, (int8x16_t)vcgtq_f32(v145, v142))), v147), v149), vmulq_f32(v152, vaddq_f32(vaddq_f32(v154, vmulq_f32(v152, v156)), vmulq_f32(vmulq_f32(v152, v152), vaddq_f32(v151, vmulq_f32(v153, v152))))))), v155);
    float32x4_t v158 = vcvtq_f32_s32(vcvtq_s32_f32(v157));
    float32x4_t v159 = vsubq_f32(v158, (float32x4_t)vandq_s8((int8x16_t)v143, (int8x16_t)vcgtq_f32(v158, v157)));
    float32x4_t v160 = vsubq_f32(v157, v159);
    float32x4_t v161 = *((float32x4_t *)a2 + 19);
    float32x4_t v162 = *((float32x4_t *)a2 + 20);
    float32x4_t v163 = *((float32x4_t *)a2 + 21);
    int32x4_t v164 = *((int32x4_t *)a2 + 22);
    float32x4_t v165 = vmulq_f32(vaddq_f32(v143, vmulq_f32(v160, vaddq_f32(v163, vmulq_f32(v160, vaddq_f32(v161, vmulq_f32(v162, v160)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v164, vcvtq_s32_f32(v159)), 0x17uLL));
    float32x4_t v166 = vmulq_f32(*(float32x4_t *)(v7 + v132), *(float32x4_t *)a2);
    float32x4_t v167 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v166, 3), v134);
    float32x4_t v168 = vmulq_f32(v137, vrecpeq_f32(v167));
    float32x4_t v169 = vmulq_f32(v166, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v168, vrecpsq_f32(v168, v167))), (int8x16_t)v139));
    float32x4_t v170 = vminq_f32(vmaxq_f32(v169, v139), v140);
    float32x4_t v171 = (float32x4_t)vorrq_s8(vandq_s8(v136, (int8x16_t)v170), (int8x16_t)v143);
    float32x4_t v172 = (float32x4_t)vandq_s8((int8x16_t)v143, (int8x16_t)vcgtq_f32(v171, v148));
    float32x4_t v173 = vsubq_f32(vsubq_f32(v171, v143), vmulq_f32(vmulq_f32(v150, v172), v171));
    float32x4_t v174 = vmaxq_f32(vmulq_f32(v141, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v170, 0x17uLL)), (float32x4_t)vandq_s8(v146, (int8x16_t)vcgtq_f32(v145, v170))), v147), v172), vmulq_f32(v173, vaddq_f32(vaddq_f32(v154, vmulq_f32(v156, v173)), vmulq_f32(vmulq_f32(v173, v173), vaddq_f32(v151, vmulq_f32(v153, v173))))))), v155);
    float32x4_t v175 = vcvtq_f32_s32(vcvtq_s32_f32(v174));
    float32x4_t v176 = vsubq_f32(v175, (float32x4_t)vandq_s8((int8x16_t)v143, (int8x16_t)vcgtq_f32(v175, v174)));
    float32x4_t v177 = vsubq_f32(v174, v176);
    float32x4_t v178 = vmulq_f32(vaddq_f32(v143, vmulq_f32(v177, vaddq_f32(v163, vmulq_f32(v177, vaddq_f32(v161, vmulq_f32(v162, v177)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v176), v164), 0x17uLL));
    float32x4_t v179 = vaddq_f32(v165, v165);
    int8x16_t v180 = (int8x16_t)vmulq_f32(v179, v178);
    float32x4_t v181 = vsubq_f32(v179, v143);
    float32x4_t v182 = vminq_f32(vmaxq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v143, (int8x16_t)vcgeq_f32(v150, v165)), v139), v180, (int8x16_t)vsubq_f32(vaddq_f32(v181, v178), vminq_f32(vminq_f32(vmulq_f32(v181, v178), v181), v178))), v139), *((float32x4_t *)a2 + 30));
    float32x4_t v183 = (float32x4_t)vorrq_s8(vandq_s8(v136, (int8x16_t)v182), (int8x16_t)v143);
    float32x4_t v184 = (float32x4_t)vandq_s8((int8x16_t)v143, (int8x16_t)vcgtq_f32(v183, v148));
    float32x4_t v185 = vsubq_f32(vsubq_f32(v183, v143), vmulq_f32(vmulq_f32(v150, v184), v183));
    float32x4_t v186 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 25), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v182, 0x17uLL)), (float32x4_t)vandq_s8(v146, (int8x16_t)vcgtq_f32(v145, v182))), v147), v184), vmulq_f32(v185, vaddq_f32(vaddq_f32(v154, vmulq_f32(v156, v185)), vmulq_f32(vmulq_f32(v185, v185), vaddq_f32(v151, vmulq_f32(v153, v185))))))), v155);
    float32x4_t v187 = vcvtq_f32_s32(vcvtq_s32_f32(v186));
    float32x4_t v188 = vsubq_f32(v187, (float32x4_t)vandq_s8((int8x16_t)v143, (int8x16_t)vcgtq_f32(v187, v186)));
    float32x4_t v189 = vsubq_f32(v186, v188);
    float32x4_t v190 = vmulq_f32(vaddq_f32(v143, vmulq_f32(v189, vaddq_f32(v163, vmulq_f32(v189, vaddq_f32(v161, vmulq_f32(v162, v189)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v188), v164), 0x17uLL));
    v190.f32[3] = v12;
    *(float32x4_t *)(v6 + v132) = vaddq_f32(v133, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v190, (int8x16_t)vaddq_f32(v169, vmulq_laneq_f32(vsubq_f32(v190, v169), v133, 3))), v133), v169, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendSoftLightTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 10);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 26);
    __asm { FMOV            V0.4S, #1.0 }
    while (v5 < 2)
    {
      int v75 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v17 = 0;
    uint64_t v18 = 16;
    do
    {
      float32x4_t v20 = *(float32x4_t *)(v8 + v18 - 16);
      float32x4_t v19 = *(float32x4_t *)(v8 + v18);
      float32x4_t v21 = *((float32x4_t *)a2 + 55);
      float32x4_t v22 = *((float32x4_t *)a2 + 56);
      float32x4_t v24 = *((float32x4_t *)a2 + 27);
      float32x4_t v23 = *((float32x4_t *)a2 + 28);
      float32x4_t v25 = vminq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v20, v21), 3), v24), v23);
      float32x4_t v26 = vminq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v19, v21), 3), v24), v23);
      float32x4_t v27 = vminq_f32(vmaxq_f32(vrecpeq_f32(v25), v24), v23);
      float32x4_t v28 = vminq_f32(vmaxq_f32(vrecpeq_f32(v26), v24), v23);
      float32x4_t v29 = vminq_f32(vmaxq_f32(vmulq_f32(v27, vrecpsq_f32(v25, v27)), v24), v23);
      float32x4_t v30 = vminq_f32(vmaxq_f32(vmulq_f32(v28, vrecpsq_f32(v26, v28)), v24), v23);
      float32x4_t v31 = vmulq_f32(v29, vrecpsq_f32(v25, v29));
      float32x4_t v32 = vmulq_f32(v30, vrecpsq_f32(v26, v30));
      float32x4_t v33 = vmulq_f32(v20, v31);
      float32x4_t v34 = vmulq_f32(v19, v32);
      float32x4_t v35 = *((float32x4_t *)a2 + 57);
      float32x4_t v36 = *((float32x4_t *)a2 + 58);
      float32x4_t v37 = vaddq_f32(v22, vmulq_f32(v33, v35));
      float32x4_t v38 = vaddq_f32(v22, vmulq_f32(v34, v35));
      int8x16_t v39 = (int8x16_t)vaddq_f32(v36, vmulq_f32(v33, v37));
      float32x4_t v40 = vminq_f32(vrsqrteq_f32(v33), v23);
      float32x4_t v41 = vminq_f32(vrsqrteq_f32(v34), v23);
      int8x16_t v42 = (int8x16_t)vaddq_f32(v36, vmulq_f32(v34, v38));
      float32x4_t v43 = vminq_f32(vmulq_f32(v40, vrsqrtsq_f32(vmulq_f32(v33, v40), v40)), v23);
      float32x4_t v44 = vminq_f32(vmulq_f32(v41, vrsqrtsq_f32(vmulq_f32(v34, v41), v41)), v23);
      float32x4_t v45 = *((float32x4_t *)a2 + 59);
      int8x16_t v46 = (int8x16_t)vcgeq_f32(v45, v33);
      int8x16_t v47 = (int8x16_t)vcgeq_f32(v45, v34);
      float32x4_t v48 = vmulq_f32(*(float32x4_t *)(v7 + v18 - 16), *(float32x4_t *)a2);
      float32x4_t v49 = vmulq_f32(*(float32x4_t *)(v7 + v18), *(float32x4_t *)a2);
      float32x4_t v50 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v49, v45), 3);
      float32x4_t v51 = vminq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v48, v45), 3), v24), v23);
      float32x4_t v52 = vminq_f32(vmaxq_f32(v50, v24), v23);
      float32x4_t v53 = vminq_f32(vmaxq_f32(vrecpeq_f32(v51), v24), v23);
      float32x4_t v54 = vminq_f32(vmaxq_f32(vrecpeq_f32(v52), v24), v23);
      float32x4_t v55 = vmulq_f32(v54, vrecpsq_f32(v52, v54));
      float32x4_t v56 = *((float32x4_t *)a2 + 29);
      int8x16_t v57 = vbslq_s8((int8x16_t)vcgtq_f32(v34, v23), _Q0, (int8x16_t)vminq_f32(vmulq_f32(v44, vrsqrtsq_f32(vmulq_f32(v34, v44), v44)), v23));
      float32x4_t v58 = vmaxq_f32(vmulq_f32(v53, vrecpsq_f32(v51, v53)), v24);
      float32x4_t v59 = vmaxq_f32(v55, v24);
      float32x4_t v60 = *((float32x4_t *)a2 + 32);
      float32x4_t v61 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v56, v46), v60), v39, vbslq_s8((int8x16_t)vcgtq_f32(v33, v23), _Q0, (int8x16_t)vminq_f32(vmulq_f32(v43, vrsqrtsq_f32(vmulq_f32(v33, v43), v43)), v23)));
      float32x4_t v62 = vminq_f32(v58, v23);
      float32x4_t v63 = vminq_f32(v59, v23);
      float32x4_t v64 = vmulq_f32(v62, vrecpsq_f32(v51, v62));
      float32x4_t v65 = vmulq_f32(v63, vrecpsq_f32(v52, v63));
      v64.i32[3] = 1.0;
      v65.i32[3] = 1.0;
      float32x4_t v66 = vmulq_f32(v48, v64);
      float32x4_t v67 = vmulq_f32(v49, v65);
      float32x4_t v68 = vsubq_f32(v56, vmulq_f32(v21, v66));
      float32x4_t v69 = vsubq_f32(v56, vmulq_f32(v21, v67));
      float32x4_t v70 = *((float32x4_t *)a2 + 13);
      float32x4_t v71 = vsubq_f32(v33, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v56, (int8x16_t)vcgeq_f32(v70, v66)), v60), (int8x16_t)vmulq_f32(vsubq_f32(v56, v33), vmulq_f32(v33, v68)), (int8x16_t)vmulq_f32(vsubq_f32(vmulq_f32(v33, v61), v33), v68)));
      float32x4_t v72 = vsubq_f32(v34, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v56, (int8x16_t)vcgeq_f32(v70, v67)), v60), (int8x16_t)vmulq_f32(vsubq_f32(v56, v34), vmulq_f32(v34, v69)), (int8x16_t)vmulq_f32(vsubq_f32(vmulq_f32(v34, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v56, v47), v60), v42, v57)), v34), v69)));
      v71.i32[3] = 1.0;
      v72.i32[3] = 1.0;
      int8x16_t v73 = *((int8x16_t *)a2 + 5);
      float32x4_t v74 = (float32x4_t *)(v6 + v18);
      v74[-1] = vaddq_f32(v20, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v73, (int8x16_t)v71, (int8x16_t)vaddq_f32(v66, vmulq_laneq_f32(vsubq_f32(v71, v66), v20, 3))), v20), v66, 3));
      *float32x4_t v74 = vaddq_f32(v19, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v73, (int8x16_t)v72, (int8x16_t)vaddq_f32(v67, vmulq_laneq_f32(vsubq_f32(v72, v67), v19, 3))), v19), v67, 3));
      v17 -= 2;
      v18 += 32;
    }
    while (v5 + v17 > 1);
    int v75 = -v17;
    if (v75 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v76 = 16 * v75;
    float32x4_t v77 = *(float32x4_t *)(v8 + v76);
    float32x4_t v78 = *((float32x4_t *)a2 + 55);
    float32x4_t v79 = *((float32x4_t *)a2 + 27);
    float32x4_t v80 = *((float32x4_t *)a2 + 28);
    float32x4_t v81 = vminq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v77, v78), 3), v79), v80);
    float32x4_t v82 = vminq_f32(vmaxq_f32(vrecpeq_f32(v81), v79), v80);
    float32x4_t v83 = vminq_f32(vmaxq_f32(vmulq_f32(v82, vrecpsq_f32(v81, v82)), v79), v80);
    float32x4_t v84 = vmulq_f32(v77, vmulq_f32(v83, vrecpsq_f32(v81, v83)));
    float32x4_t v85 = vminq_f32(vrsqrteq_f32(v84), v80);
    float32x4_t v86 = vminq_f32(vmulq_f32(v85, vrsqrtsq_f32(vmulq_f32(v84, v85), v85)), v80);
    int8x16_t v87 = vbslq_s8((int8x16_t)vcgtq_f32(v84, v80), _Q0, (int8x16_t)vminq_f32(vmulq_f32(v86, vrsqrtsq_f32(vmulq_f32(v84, v86), v86)), v80));
    float32x4_t v88 = *((float32x4_t *)a2 + 59);
    float32x4_t v89 = *((float32x4_t *)a2 + 29);
    float32x4_t v90 = *((float32x4_t *)a2 + 32);
    float32x4_t v91 = vmulq_f32(v84, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v89, (int8x16_t)vcgeq_f32(v88, v84)), v90), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 58), vmulq_f32(v84, vaddq_f32(*((float32x4_t *)a2 + 56), vmulq_f32(v84, *((float32x4_t *)a2 + 57))))), v87));
    float32x4_t v92 = vmulq_f32(*(float32x4_t *)(v7 + v76), *(float32x4_t *)a2);
    float32x4_t v93 = vminq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v92, v88), 3), v79), v80);
    float32x4_t v94 = vminq_f32(vmaxq_f32(vrecpeq_f32(v93), v79), v80);
    float32x4_t v95 = vminq_f32(vmaxq_f32(vmulq_f32(v94, vrecpsq_f32(v93, v94)), v79), v80);
    float32x4_t v96 = vmulq_f32(v95, vrecpsq_f32(v93, v95));
    v96.i32[3] = 1.0;
    float32x4_t v97 = vmulq_f32(v92, v96);
    float32x4_t v98 = vsubq_f32(v89, vmulq_f32(v78, v97));
    float32x4_t v99 = vsubq_f32(v84, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v89, (int8x16_t)vcgeq_f32(*((float32x4_t *)a2 + 13), v97)), v90), (int8x16_t)vmulq_f32(vsubq_f32(v89, v84), vmulq_f32(v84, v98)), (int8x16_t)vmulq_f32(vsubq_f32(v91, v84), v98)));
    v99.i32[3] = 1.0;
    *(float32x4_t *)(v6 + v76) = vaddq_f32(v77, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v99, (int8x16_t)vaddq_f32(v97, vmulq_laneq_f32(vsubq_f32(v99, v97), v77, 3))), v77), v97, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendSoftLightPOWTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 12);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    __asm { FMOV            V0.4S, #1.0 }
    int8x16_t v101 = _Q0;
    do
    {
      uint64_t v17 = 0;
      do
      {
        float32x4_t v18 = *((float32x4_t *)a2 + 59);
        float32x4_t v119 = *(float32x4_t *)(v5 + v17);
        float32x4_t v20 = *((float32x4_t *)a2 + 27);
        float32x4_t v19 = *((float32x4_t *)a2 + 28);
        float32x4_t v21 = vminq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v119, v18), 3), v20), v19);
        float32x4_t v22 = vminq_f32(vmaxq_f32(vrecpeq_f32(v21), v20), v19);
        float32x4_t v23 = vminq_f32(vmaxq_f32(vmulq_f32(v22, vrecpsq_f32(v21, v22)), v20), v19);
        float32x4_t v24 = *((float32x4_t *)a2 + 32);
        float32x4_t v25 = *((float32x4_t *)a2 + 1);
        float32x4_t v26 = *((float32x4_t *)a2 + 29);
        int8x16_t v27 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vceqq_f32(v25, v24)), v24);
        float32x4_t v28 = (float32x4_t)vbslq_s8(v27, (int8x16_t)v26, (int8x16_t)vmaxq_f32(vmulq_f32(v119, vmulq_f32(v23, vrecpsq_f32(v21, v23))), v24));
        float32x4_t v118 = *((float32x4_t *)a2 + 9);
        int8x16_t v29 = (int8x16_t)vcgtq_f32(v118, v28);
        int8x16_t v30 = (int8x16_t)vmulq_f32(v28, vaddq_f32(v26, (float32x4_t)vandq_s8(*((int8x16_t *)a2 + 33), v29)));
        float32x4_t v31 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 8), v30), (int8x16_t)v26);
        float32x4_t v32 = *((float32x4_t *)a2 + 4);
        float32x4_t v33 = *((float32x4_t *)a2 + 10);
        int8x16_t v34 = *((int8x16_t *)a2 + 35);
        int8x16_t v103 = *((int8x16_t *)a2 + 34);
        float32x4_t v35 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vceqq_f32(v33, v28)), vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v28, v32), v103), (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vceqq_f32(v32, v28))), (float32x4_t)vandq_s8(v34, v29))), *((float32x4_t *)a2 + 11)), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)));
        float32x4_t v117 = *((float32x4_t *)a2 + 12);
        float32x4_t v36 = (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v31, v117));
        float32x4_t v37 = vaddq_f32(v35, v36);
        float32x4_t v102 = *((float32x4_t *)a2 + 13);
        float32x4_t v38 = vsubq_f32(vsubq_f32(v31, v26), vmulq_f32(vmulq_f32(v102, v36), v31));
        float32x4_t v39 = vmulq_f32(v38, v38);
        float32x4_t v40 = *((float32x4_t *)a2 + 36);
        float32x4_t v104 = *((float32x4_t *)a2 + 37);
        float32x4_t v115 = *((float32x4_t *)a2 + 38);
        float32x4_t v116 = *((float32x4_t *)a2 + 39);
        float32x4_t v41 = *((float32x4_t *)a2 + 40);
        float32x4_t v114 = *((float32x4_t *)a2 + 42);
        float32x4_t v110 = *((float32x4_t *)a2 + 44);
        float32x4_t v111 = *((float32x4_t *)a2 + 45);
        float32x4_t v42 = vmulq_f32(v25, vaddq_f32(v37, vmulq_f32(v38, vaddq_f32(v110, vmulq_f32(v38, vaddq_f32(vaddq_f32(vaddq_f32(v114, vmulq_f32(v38, *((float32x4_t *)a2 + 43))), vmulq_f32(v39, vaddq_f32(v41, vmulq_f32(*((float32x4_t *)a2 + 41), v38)))), vmulq_f32(vmulq_f32(v39, v39), vaddq_f32(vaddq_f32(v115, vmulq_f32(v116, v38)), vmulq_f32(v39, vaddq_f32(v40, vmulq_f32(v104, v38)))))))))));
        float32x4_t v113 = *((float32x4_t *)a2 + 46);
        float32x4_t v120 = *((float32x4_t *)a2 + 47);
        float32x4_t v43 = vminq_f32(vmaxq_f32(v42, v111), v113);
        float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v43));
        float32x4_t v45 = vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v44, v43)));
        float32x4_t v46 = vsubq_f32(v43, v45);
        float32x4_t v108 = *((float32x4_t *)a2 + 49);
        float32x4_t v109 = *((float32x4_t *)a2 + 48);
        float32x4_t v105 = *((float32x4_t *)a2 + 50);
        float32x4_t v47 = vmulq_f32(v46, v46);
        float32x4_t v121 = *((float32x4_t *)a2 + 51);
        float32x4_t v122 = *((float32x4_t *)a2 + 52);
        float32x4_t v123 = *((float32x4_t *)a2 + 53);
        int8x16_t v48 = (int8x16_t)vcgtq_f32(v123, v45);
        int32x4_t v107 = *((int32x4_t *)a2 + 22);
        int8x16_t v106 = *((int8x16_t *)a2 + 54);
        float32x4_t v49 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v26, vorrq_s8((int8x16_t)vcltzq_f32(v42), (int8x16_t)vcgezq_f32(v42))), v24), (int8x16_t)vmulq_f32(vaddq_f32(v26, (float32x4_t)vandq_s8(v106, v48)), vmulq_f32(vaddq_f32(v26, vmulq_f32(v46, vaddq_f32(vaddq_f32(v121, vmulq_f32(v46, v122)), vmulq_f32(v47, vaddq_f32(
                                                      vaddq_f32(v108, vmulq_f32(v105, v46)),
                                                      vmulq_f32(v47, vaddq_f32(v120, vmulq_f32(v109, v46)))))))),
                                            (float32x4_t)vshlq_n_s32(vaddq_s32(v107, vcvtq_s32_f32(vaddq_f32(v45, (float32x4_t)vandq_s8(v34, v48)))), 0x17uLL))), (int8x16_t)v42);
        float32x4_t v50 = vminq_f32(vrsqrteq_f32(v49), v19);
        float32x4_t v51 = vminq_f32(vmulq_f32(v50, vrsqrtsq_f32(vmulq_f32(v50, v49), v50)), v19);
        float32x4_t v52 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgeq_f32(v18, v49)), v24), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 58), vmulq_f32(v49, vaddq_f32(*((float32x4_t *)a2 + 56), vmulq_f32(*((float32x4_t *)a2 + 57), v49)))), vbslq_s8((int8x16_t)vcgtq_f32(v49, v19), v101, (int8x16_t)vminq_f32(vmulq_f32(v51, vrsqrtsq_f32(vmulq_f32(v49, v51), v51)), v19)));
        float32x4_t v53 = vmulq_f32(*(float32x4_t *)(v6 + v17), *(float32x4_t *)a2);
        float32x4_t v54 = vminq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v53, v18), 3), v20), v19);
        float32x4_t v55 = vminq_f32(vmaxq_f32(vrecpeq_f32(v54), v20), v19);
        float32x4_t v56 = vminq_f32(vmaxq_f32(vmulq_f32(v55, vrecpsq_f32(v54, v55)), v20), v19);
        float32x4_t v112 = vmulq_f32(v53, vmulq_f32(v56, vrecpsq_f32(v54, v56)));
        int8x16_t v57 = *((int8x16_t *)a2 + 5);
        float32x4_t v58 = (float32x4_t)vbslq_s8(v27, (int8x16_t)v26, vbslq_s8(v57, (int8x16_t)v53, (int8x16_t)vmaxq_f32(v112, v24)));
        int8x16_t v59 = (int8x16_t)vcgtq_f32(v118, v58);
        float32x4_t v60 = vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v58, v32), v103), (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vceqq_f32(v32, v58))), (float32x4_t)vandq_s8(v34, v59));
        int8x16_t v61 = *((int8x16_t *)a2 + 33);
        int8x16_t v62 = (int8x16_t)vmulq_f32(vaddq_f32(v26, (float32x4_t)vandq_s8(v61, v59)), v58);
        float32x4_t v63 = *((float32x4_t *)a2 + 11);
        float32x4_t v64 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vceqq_f32(v33, v58)), v60), v63), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v62, 0x17uLL)));
        int8x16_t v65 = *((int8x16_t *)a2 + 8);
        float32x4_t v66 = (float32x4_t)vorrq_s8(vandq_s8(v65, v62), (int8x16_t)v26);
        float32x4_t v67 = (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v66, v117));
        float32x4_t v68 = vaddq_f32(v64, v67);
        float32x4_t v69 = vsubq_f32(vsubq_f32(v66, v26), vmulq_f32(vmulq_f32(v102, v67), v66));
        float32x4_t v70 = vmulq_f32(v69, v69);
        float32x4_t v71 = vaddq_f32(vaddq_f32(v115, vmulq_f32(v116, v69)), vmulq_f32(v70, vaddq_f32(v40, vmulq_f32(v104, v69))));
        float32x4_t v72 = *((float32x4_t *)a2 + 41);
        float32x4_t v73 = vmulq_f32(v25, vaddq_f32(v68, vmulq_f32(v69, vaddq_f32(v110, vmulq_f32(v69, vaddq_f32(vaddq_f32(vaddq_f32(v114, vmulq_f32(*((float32x4_t *)a2 + 43), v69)), vmulq_f32(v70, vaddq_f32(v41, vmulq_f32(v72, v69)))), vmulq_f32(vmulq_f32(v70, v70), v71)))))));
        float32x4_t v74 = vminq_f32(vmaxq_f32(v73, v111), v113);
        float32x4_t v75 = vcvtq_f32_s32(vcvtq_s32_f32(v74));
        float32x4_t v76 = vsubq_f32(v75, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v75, v74)));
        float32x4_t v77 = vsubq_f32(v74, v76);
        float32x4_t v78 = vmulq_f32(v77, v77);
        int8x16_t v79 = (int8x16_t)vcgtq_f32(v123, v76);
        float32x4_t v80 = (float32x4_t)vbslq_s8(v57, (int8x16_t)v53, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v26, vorrq_s8((int8x16_t)vcltzq_f32(v73), (int8x16_t)vcgezq_f32(v73))), v24), (int8x16_t)vmulq_f32(vaddq_f32(v26, (float32x4_t)vandq_s8(v106, v79)), vmulq_f32(vaddq_f32(v26, vmulq_f32(v77, vaddq_f32(vaddq_f32(v121, vmulq_f32(v122, v77)),
                                                    vmulq_f32(v78, vaddq_f32(vaddq_f32(v108, vmulq_f32(v105, v77)), vmulq_f32(v78, vaddq_f32(v120, vmulq_f32(v109, v77)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(vaddq_f32(v76, (float32x4_t)vandq_s8(v34, v79))), v107), 0x17uLL))), (int8x16_t)v73));
        float32x4_t v81 = vsubq_f32(v26, vmulq_f32(*((float32x4_t *)a2 + 55), v80));
        float32x4_t v82 = *((float32x4_t *)a2 + 2);
        float32x4_t v83 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vceqq_f32(v82, v24)), v24), (int8x16_t)v26, (int8x16_t)vsubq_f32(v49, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgeq_f32(v102, v80)), v24), (int8x16_t)vmulq_f32(vsubq_f32(v26, v49), vmulq_f32(v49, v81)), (int8x16_t)vmulq_f32(vsubq_f32(vmulq_f32(v49, v52), v49), v81))));
        int8x16_t v84 = (int8x16_t)vcgtq_f32(v118, v83);
        float32x4_t v85 = vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v83, v32), v103), (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vceqq_f32(v83, v32))), (float32x4_t)vandq_s8(v34, v84));
        int8x16_t v86 = (int8x16_t)vmulq_f32(v83, vaddq_f32(v26, (float32x4_t)vandq_s8(v61, v84)));
        float32x4_t v87 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vceqq_f32(v83, v33)), v85), v63), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v86, 0x17uLL)));
        float32x4_t v88 = (float32x4_t)vorrq_s8(vandq_s8(v65, v86), (int8x16_t)v26);
        float32x4_t v89 = (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v88, v117));
        float32x4_t v90 = vsubq_f32(vsubq_f32(v88, v26), vmulq_f32(vmulq_f32(v102, v89), v88));
        float32x4_t v91 = vmulq_f32(v90, v90);
        float32x4_t v92 = vmulq_f32(v82, vaddq_f32(vaddq_f32(v87, v89), vmulq_f32(v90, vaddq_f32(v110, vmulq_f32(v90, vaddq_f32(vaddq_f32(vaddq_f32(v114, vmulq_f32(*((float32x4_t *)a2 + 43), v90)), vmulq_f32(v91, vaddq_f32(v41, vmulq_f32(v72, v90)))), vmulq_f32(vmulq_f32(v91, v91), vaddq_f32(vaddq_f32(v115, vmulq_f32(v116, v90)), vmulq_f32(v91, vaddq_f32(*((float32x4_t *)a2 + 36), vmulq_f32(v104, v90)))))))))));
        float32x4_t v93 = vminq_f32(vmaxq_f32(v92, v111), v113);
        float32x4_t v94 = vcvtq_f32_s32(vcvtq_s32_f32(v93));
        float32x4_t v95 = vsubq_f32(v94, (float32x4_t)vandq_s8((int8x16_t)v26, (int8x16_t)vcgtq_f32(v94, v93)));
        float32x4_t v96 = vsubq_f32(v93, v95);
        float32x4_t v97 = vmulq_f32(v96, v96);
        int8x16_t v98 = (int8x16_t)vcgtq_f32(v123, v95);
        float32x4_t v99 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v26, vorrq_s8((int8x16_t)vcltzq_f32(v92), (int8x16_t)vcgezq_f32(v92))), v24), (int8x16_t)vmulq_f32(vaddq_f32(v26, (float32x4_t)vandq_s8(v106, v98)), vmulq_f32(vaddq_f32(v26, vmulq_f32(v96, vaddq_f32(vaddq_f32(v121, vmulq_f32(v122, v96)), vmulq_f32(v97, vaddq_f32(
                                                      vaddq_f32(v108, vmulq_f32(v105, v96)),
                                                      vmulq_f32(v97, vaddq_f32(v120, vmulq_f32(v109, v96)))))))),
                                            (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(vaddq_f32(v95, (float32x4_t)vandq_s8(v34, v98))), v107), 0x17uLL))), (int8x16_t)v92);
        v99.i32[3] = 1.0;
        *(float32x4_t *)(v7 + v17) = vaddq_f32(v119, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v57, (int8x16_t)v99, (int8x16_t)vaddq_f32(v112, vmulq_laneq_f32(vsubq_f32(v99, v112), v119, 3))), v119), v80, 3));
        v17 += 16;
      }
      while (v11 != v17);
      ++v4;
      v5 += v8;
      v6 += v9;
      v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t GetBlendSoftLightQTTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 12);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    __asm { FMOV            V0.4S, #1.0 }
    int8x16_t v95 = _Q0;
    do
    {
      uint64_t v17 = 0;
      do
      {
        float32x4_t v116 = *((float32x4_t *)a2 + 59);
        float32x4_t v120 = *(float32x4_t *)(v5 + v17);
        float32x4_t v19 = *((float32x4_t *)a2 + 27);
        float32x4_t v18 = *((float32x4_t *)a2 + 28);
        float32x4_t v20 = vminq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v120, v116), 3), v19), v18);
        float32x4_t v21 = vminq_f32(vmaxq_f32(vrecpeq_f32(v20), v19), v18);
        float32x4_t v22 = vminq_f32(vmaxq_f32(vmulq_f32(v21, vrecpsq_f32(v20, v21)), v19), v18);
        float32x4_t v23 = *((float32x4_t *)a2 + 32);
        float32x4_t v119 = *((float32x4_t *)a2 + 23);
        int32x4_t v117 = *((int32x4_t *)a2 + 22);
        float32x4_t v115 = *((float32x4_t *)a2 + 25);
        float32x4_t v99 = *((float32x4_t *)a2 + 24);
        float32x4_t v24 = *((float32x4_t *)a2 + 29);
        int8x16_t v114 = *((int8x16_t *)a2 + 33);
        int8x16_t v25 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vceqq_f32(v99, v23)), v23);
        float32x4_t v26 = (float32x4_t)vbslq_s8(v25, (int8x16_t)v24, (int8x16_t)vminq_f32(vmaxq_f32(vmulq_f32(v120, vmulq_f32(v22, vrecpsq_f32(v20, v22))), v23), v119));
        int8x16_t v27 = (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 9), v26);
        int8x16_t v28 = (int8x16_t)vmulq_f32(v26, vaddq_f32(v24, (float32x4_t)vandq_s8(v114, v27)));
        float32x4_t v29 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 8), v28), (int8x16_t)v24);
        float32x4_t v30 = *((float32x4_t *)a2 + 4);
        int8x16_t v112 = *((int8x16_t *)a2 + 5);
        int8x16_t v113 = *((int8x16_t *)a2 + 8);
        float32x4_t v32 = *((float32x4_t *)a2 + 10);
        float32x4_t v31 = *((float32x4_t *)a2 + 11);
        int8x16_t v33 = *((int8x16_t *)a2 + 34);
        int8x16_t v34 = *((int8x16_t *)a2 + 35);
        float32x4_t v35 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vceqq_f32(v32, v26)), vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v26, v30), v33), (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vceqq_f32(v30, v26))), (float32x4_t)vandq_s8(v34, v27))), v31), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v28, 0x17uLL)));
        float32x4_t v36 = *((float32x4_t *)a2 + 13);
        float32x4_t v109 = *((float32x4_t *)a2 + 12);
        float32x4_t v37 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v29, v109));
        float32x4_t v38 = vaddq_f32(v35, v37);
        float32x4_t v39 = vsubq_f32(vsubq_f32(v29, v24), vmulq_f32(vmulq_f32(v36, v37), v29));
        float32x4_t v40 = *((float32x4_t *)a2 + 36);
        float32x4_t v97 = *((float32x4_t *)a2 + 39);
        float32x4_t v98 = *((float32x4_t *)a2 + 38);
        float32x4_t v41 = vmulq_f32(v39, v39);
        float32x4_t v107 = *((float32x4_t *)a2 + 41);
        float32x4_t v110 = *((float32x4_t *)a2 + 42);
        float32x4_t v111 = *((float32x4_t *)a2 + 43);
        float32x4_t v102 = *((float32x4_t *)a2 + 44);
        float32x4_t v42 = vmulq_f32(v99, vaddq_f32(v38, vmulq_f32(v39, vaddq_f32(v102, vmulq_f32(v39, vaddq_f32(vaddq_f32(vaddq_f32(v110, vmulq_f32(v39, v111)), vmulq_f32(v41, vaddq_f32(*((float32x4_t *)a2 + 40), vmulq_f32(v107, v39)))), vmulq_f32(vmulq_f32(v41, v41), vaddq_f32(vaddq_f32(v98, vmulq_f32(v97, v39)), vmulq_f32(v41, vaddq_f32(v40, vmulq_f32(*((float32x4_t *)a2 + 37), v39)))))))))));
        float32x4_t v108 = *((float32x4_t *)a2 + 46);
        float32x4_t v43 = vminq_f32(vmaxq_f32(v42, *((float32x4_t *)a2 + 45)), v108);
        float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v43));
        float32x4_t v45 = vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v44, v43)));
        float32x4_t v46 = vsubq_f32(v43, v45);
        float32x4_t v105 = *((float32x4_t *)a2 + 47);
        float32x4_t v106 = *((float32x4_t *)a2 + 48);
        float32x4_t v104 = *((float32x4_t *)a2 + 49);
        float32x4_t v96 = *((float32x4_t *)a2 + 50);
        float32x4_t v47 = vmulq_f32(v46, v46);
        float32x4_t v100 = *((float32x4_t *)a2 + 51);
        float32x4_t v101 = *((float32x4_t *)a2 + 53);
        int8x16_t v48 = (int8x16_t)vcgtq_f32(v101, v45);
        int8x16_t v103 = *((int8x16_t *)a2 + 54);
        float32x4_t v49 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v24, vorrq_s8((int8x16_t)vcltzq_f32(v42), (int8x16_t)vcgezq_f32(v42))), v23), (int8x16_t)vmulq_f32(vaddq_f32(v24, (float32x4_t)vandq_s8(v103, v48)), vmulq_f32(vaddq_f32(v24, vmulq_f32(v46, vaddq_f32(vaddq_f32(v100, vmulq_f32(v46, *((float32x4_t *)a2 + 52))), vmulq_f32(v47, vaddq_f32(
                                                      vaddq_f32(v104, vmulq_f32(v96, v46)),
                                                      vmulq_f32(v47, vaddq_f32(v105, vmulq_f32(v106, v46)))))))),
                                            (float32x4_t)vshlq_n_s32(vaddq_s32(v117, vcvtq_s32_f32(vaddq_f32(v45, (float32x4_t)vandq_s8(v34, v48)))), 0x17uLL))), (int8x16_t)v42);
        float32x4_t v50 = vminq_f32(vrsqrteq_f32(v49), v18);
        float32x4_t v51 = vminq_f32(vmulq_f32(v50, vrsqrtsq_f32(vmulq_f32(v50, v49), v50)), v18);
        float32x4_t v118 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgeq_f32(v116, v49)), v23), (int8x16_t)vaddq_f32(*((float32x4_t *)a2 + 58), vmulq_f32(v49, vaddq_f32(*((float32x4_t *)a2 + 56), vmulq_f32(*((float32x4_t *)a2 + 57), v49)))), vbslq_s8((int8x16_t)vcgtq_f32(v49, v18), v95, (int8x16_t)vminq_f32(vmulq_f32(v51, vrsqrtsq_f32(vmulq_f32(v49, v51), v51)), v18)));
        float32x4_t v52 = vmulq_f32(*(float32x4_t *)(v6 + v17), *(float32x4_t *)a2);
        float32x4_t v53 = vminq_f32(vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxq_f32(v52, v116), 3), v19), v18);
        float32x4_t v54 = vminq_f32(vmaxq_f32(vrecpeq_f32(v53), v19), v18);
        float32x4_t v55 = vminq_f32(vmaxq_f32(vmulq_f32(v54, vrecpsq_f32(v53, v54)), v19), v18);
        float32x4_t v56 = vmulq_f32(v52, vmulq_f32(v55, vrecpsq_f32(v53, v55)));
        float32x4_t v57 = (float32x4_t)vbslq_s8(v25, (int8x16_t)v24, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v112, (int8x16_t)v52, (int8x16_t)vmaxq_f32(v56, v23)), v119));
        float32x4_t v58 = *((float32x4_t *)a2 + 9);
        int8x16_t v59 = (int8x16_t)vcgtq_f32(v58, v57);
        float32x4_t v60 = vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v57, v30), v33), (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vceqq_f32(v57, v30))), (float32x4_t)vandq_s8(v34, v59));
        int8x16_t v61 = (int8x16_t)vmulq_f32(v57, vaddq_f32(v24, (float32x4_t)vandq_s8(v114, v59)));
        float32x4_t v62 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vceqq_f32(v57, v32)), v60), v31), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v61, 0x17uLL)));
        float32x4_t v63 = (float32x4_t)vorrq_s8(vandq_s8(v113, v61), (int8x16_t)v24);
        float32x4_t v64 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v63, v109));
        float32x4_t v65 = vsubq_f32(vsubq_f32(v63, v24), vmulq_f32(vmulq_f32(v36, v64), v63));
        float32x4_t v66 = vmulq_f32(v65, v65);
        float32x4_t v67 = vmulq_f32(v99, vaddq_f32(vaddq_f32(v62, v64), vmulq_f32(v65, vaddq_f32(v102, vmulq_f32(v65, vaddq_f32(vaddq_f32(vaddq_f32(v110, vmulq_f32(v111, v65)), vmulq_f32(v66, vaddq_f32(*((float32x4_t *)a2 + 40), vmulq_f32(v107, v65)))), vmulq_f32(vmulq_f32(v66, v66), vaddq_f32(vaddq_f32(v98, vmulq_f32(v97, v65)), vmulq_f32(v66, vaddq_f32(v40, vmulq_f32(*((float32x4_t *)a2 + 37), v65)))))))))));
        float32x4_t v68 = vminq_f32(vmaxq_f32(v67, *((float32x4_t *)a2 + 45)), v108);
        float32x4_t v69 = vcvtq_f32_s32(vcvtq_s32_f32(v68));
        float32x4_t v70 = vsubq_f32(v69, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v69, v68)));
        float32x4_t v71 = vsubq_f32(v68, v70);
        float32x4_t v72 = vmulq_f32(v71, v71);
        float32x4_t v73 = *((float32x4_t *)a2 + 52);
        int8x16_t v74 = (int8x16_t)vcgtq_f32(v101, v70);
        float32x4_t v75 = (float32x4_t)vbslq_s8(v112, (int8x16_t)v52, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v24, vorrq_s8((int8x16_t)vcltzq_f32(v67), (int8x16_t)vcgezq_f32(v67))), v23), (int8x16_t)vmulq_f32(vaddq_f32(v24, (float32x4_t)vandq_s8(v103, v74)), vmulq_f32(vaddq_f32(v24, vmulq_f32(v71, vaddq_f32(vaddq_f32(v100, vmulq_f32(v73, v71)),
                                                    vmulq_f32(v72, vaddq_f32(vaddq_f32(v104, vmulq_f32(v96, v71)), vmulq_f32(v72, vaddq_f32(v105, vmulq_f32(v106, v71)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(vaddq_f32(v70, (float32x4_t)vandq_s8(v34, v74))), v117), 0x17uLL))), (int8x16_t)v67));
        float32x4_t v76 = vsubq_f32(v24, vmulq_f32(*((float32x4_t *)a2 + 55), v75));
        float32x4_t v77 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vceqq_f32(v115, v23)), v23), (int8x16_t)v24, (int8x16_t)vminq_f32(vmaxq_f32(vsubq_f32(v49, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgeq_f32(v36, v75)), v23), (int8x16_t)vmulq_f32(vsubq_f32(v24, v49), vmulq_f32(v49, v76)), (int8x16_t)vmulq_f32(vsubq_f32(vmulq_f32(v49, v118), v49),
                                                                          v76))),
                                            v23),
                                          *((float32x4_t *)a2 + 30)));
        int8x16_t v78 = (int8x16_t)vcgtq_f32(v58, v77);
        float32x4_t v79 = vsubq_f32(vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vcgeq_f32(v77, v30), *((int8x16_t *)a2 + 34)), (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vceqq_f32(v77, v30))), (float32x4_t)vandq_s8(v34, v78));
        int8x16_t v80 = (int8x16_t)vmulq_f32(v77, vaddq_f32(v24, (float32x4_t)vandq_s8(v114, v78)));
        float32x4_t v81 = vaddq_f32(vsubq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vceqq_f32(v77, v32)), v79), v31), vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v80, 0x17uLL)));
        float32x4_t v82 = (float32x4_t)vorrq_s8(vandq_s8(v113, v80), (int8x16_t)v24);
        float32x4_t v83 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v82, v109));
        float32x4_t v84 = vsubq_f32(vsubq_f32(v82, v24), vmulq_f32(vmulq_f32(v36, v83), v82));
        float32x4_t v85 = vmulq_f32(v84, v84);
        float32x4_t v86 = vmulq_f32(v115, vaddq_f32(vaddq_f32(v81, v83), vmulq_f32(v84, vaddq_f32(v102, vmulq_f32(v84, vaddq_f32(vaddq_f32(vaddq_f32(v110, vmulq_f32(v111, v84)), vmulq_f32(v85, vaddq_f32(*((float32x4_t *)a2 + 40), vmulq_f32(v107, v84)))), vmulq_f32(vmulq_f32(v85, v85), vaddq_f32(vaddq_f32(v98, vmulq_f32(v97, v84)), vmulq_f32(v85,
                                vaddq_f32(*((float32x4_t *)a2 + 36), vmulq_f32(*((float32x4_t *)a2 + 37), v84)))))))))));
        float32x4_t v87 = vminq_f32(vmaxq_f32(v86, *((float32x4_t *)a2 + 45)), v108);
        float32x4_t v88 = vcvtq_f32_s32(vcvtq_s32_f32(v87));
        float32x4_t v89 = vsubq_f32(v88, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v88, v87)));
        float32x4_t v90 = vsubq_f32(v87, v89);
        float32x4_t v91 = vmulq_f32(v90, v90);
        int8x16_t v92 = (int8x16_t)vcgtq_f32(v101, v89);
        float32x4_t v93 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v24, vorrq_s8((int8x16_t)vcltzq_f32(v86), (int8x16_t)vcgezq_f32(v86))), v23), (int8x16_t)vmulq_f32(vaddq_f32(v24, (float32x4_t)vandq_s8(v103, v92)), vmulq_f32(vaddq_f32(v24, vmulq_f32(v90, vaddq_f32(vaddq_f32(v100, vmulq_f32(v73, v90)), vmulq_f32(v91, vaddq_f32(
                                                      vaddq_f32(v104, vmulq_f32(v96, v90)),
                                                      vmulq_f32(v91, vaddq_f32(v105, vmulq_f32(v106, v90)))))))),
                                            (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(vaddq_f32(v89, (float32x4_t)vandq_s8(v34, v92))), v117), 0x17uLL))), (int8x16_t)v86);
        v93.i32[3] = 1.0;
        *(float32x4_t *)(v7 + v17) = vaddq_f32(v120, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v112, (int8x16_t)v93, (int8x16_t)vaddq_f32(v56, vmulq_laneq_f32(vsubq_f32(v93, v56), v120, 3))), v120), v75, 3));
        v17 += 16;
      }
      while (v11 != v17);
      ++v4;
      v5 += v8;
      v6 += v9;
      v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t GetBlendHardLightTile(HGTile *a1, float32x4_t *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = *((void *)a1 + 12);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v50 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v12 = 0;
    uint64_t v13 = 16;
    do
    {
      float32x4_t v14 = vmulq_f32(*(float32x4_t *)(v8 + v13 - 16), *a2);
      float32x4_t v15 = vmulq_f32(*(float32x4_t *)(v8 + v13), *a2);
      int8x16_t v17 = (int8x16_t)a2[5];
      float32x4_t v16 = a2[6];
      float32x4_t v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v16);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v16);
      float32x4_t v20 = a2[7];
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v18), v20);
      float32x4_t v22 = vmulq_f32(vrecpeq_f32(v19), v20);
      float32x4_t v23 = vmulq_f32(v21, vrecpsq_f32(v21, v18));
      float32x4_t v24 = vmulq_f32(v22, vrecpsq_f32(v22, v19));
      float32x4_t v25 = *(float32x4_t *)(v7 + v13 - 16);
      float32x4_t v26 = *(float32x4_t *)(v7 + v13);
      float32x4_t v27 = vmulq_f32(v14, v23);
      float32x4_t v28 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 3), v16);
      float32x4_t v29 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 3), v16);
      float32x4_t v30 = vmulq_f32(v15, v24);
      float32x4_t v31 = vmulq_f32(v20, vrecpeq_f32(v28));
      float32x4_t v32 = vmulq_f32(v20, vrecpeq_f32(v29));
      float32x4_t v33 = vmulq_f32(v32, vrecpsq_f32(v32, v29));
      float32x4_t v34 = vmulq_f32(v25, vmulq_f32(v31, vrecpsq_f32(v31, v28)));
      float32x4_t v35 = vaddq_f32(v27, v27);
      float32x4_t v36 = vaddq_f32(v30, v30);
      float32x4_t v37 = a2[29];
      float32x4_t v38 = vmulq_f32(v26, v33);
      float32x4_t v39 = vsubq_f32(v35, v37);
      float32x4_t v40 = vsubq_f32(v36, v37);
      float32x4_t v41 = vsubq_f32(vaddq_f32(v34, v39), vminq_f32(v34, vminq_f32(v39, vmulq_f32(v34, v39))));
      float32x4_t v42 = vsubq_f32(vaddq_f32(v38, v40), vminq_f32(v38, vminq_f32(v40, vmulq_f32(v38, v40))));
      float32x4_t v43 = vmulq_f32(v35, v34);
      float32x4_t v44 = a2[60];
      float32x4_t v45 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v14, (int8x16_t)vmulq_f32(v14, v44));
      float32x4_t v46 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v15, (int8x16_t)vmulq_f32(v15, v44));
      float32x4_t v47 = vaddq_f32(v41, vmulq_f32(vsubq_f32(v43, v41), (float32x4_t)vbslq_s8((int8x16_t)vcgeq_f32(v45, vnegq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 3))), (int8x16_t)v37, (int8x16_t)0)));
      v47.i32[3] = 1.0;
      float32x4_t v48 = vaddq_f32(v42, vmulq_f32(vsubq_f32(vmulq_f32(v36, v38), v42), (float32x4_t)vbslq_s8((int8x16_t)vcgeq_f32(v46, vnegq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 3))), (int8x16_t)v37, (int8x16_t)0)));
      v48.i32[3] = 1.0;
      float32x4_t v49 = (float32x4_t *)(v6 + v13);
      v49[-1] = vaddq_f32(v25, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v47, (int8x16_t)vaddq_f32(v27, vmulq_laneq_f32(vsubq_f32(v47, v27), v25, 3))), v25), v45, 3));
      *float32x4_t v49 = vaddq_f32(v26, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v48, (int8x16_t)vaddq_f32(v30, vmulq_laneq_f32(vsubq_f32(v48, v30), v26, 3))), v26), v46, 3));
      v12 -= 2;
      v13 += 32;
    }
    while (v5 + v12 > 1);
    int v50 = -v12;
    if (v50 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v51 = 16 * v50;
    float32x4_t v52 = vmulq_f32(*(float32x4_t *)(v8 + v51), *a2);
    int8x16_t v54 = (int8x16_t)a2[5];
    float32x4_t v53 = a2[6];
    float32x4_t v55 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3), v53);
    float32x4_t v56 = a2[7];
    float32x4_t v57 = vmulq_f32(vrecpeq_f32(v55), v56);
    float32x4_t v58 = vmulq_f32(v52, vmulq_f32(v57, vrecpsq_f32(v57, v55)));
    float32x4_t v59 = *(float32x4_t *)(v7 + v51);
    float32x4_t v60 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 3), v53);
    float32x4_t v61 = vmulq_f32(v56, vrecpeq_f32(v60));
    float32x4_t v62 = vmulq_f32(v59, vmulq_f32(v61, vrecpsq_f32(v61, v60)));
    float32x4_t v63 = vaddq_f32(v58, v58);
    float32x4_t v64 = a2[29];
    float32x4_t v65 = vsubq_f32(v63, v64);
    float32x4_t v66 = vsubq_f32(vaddq_f32(v62, v65), vminq_f32(v62, vminq_f32(v65, vmulq_f32(v62, v65))));
    float32x4_t v67 = (float32x4_t)vbslq_s8(v54, (int8x16_t)v52, (int8x16_t)vmulq_f32(v52, a2[60]));
    float32x4_t v68 = vaddq_f32(v66, vmulq_f32(vsubq_f32(vmulq_f32(v63, v62), v66), (float32x4_t)vbslq_s8((int8x16_t)vcgeq_f32(v67, vnegq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 3))), (int8x16_t)v64, (int8x16_t)0)));
    v68.i32[3] = 1.0;
    *(float32x4_t *)(v6 + v51) = vaddq_f32(v59, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v54, (int8x16_t)v68, (int8x16_t)vaddq_f32(v58, vmulq_laneq_f32(vsubq_f32(v68, v58), v59, 3))), v59), v67, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendHardLightPOWTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 10);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 26);
    float v12 = 1.0;
    while (v5 < 2)
    {
      int v124 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v13 = 0;
    uint64_t v14 = 16;
    do
    {
      float32x4_t v15 = *(float32x4_t *)(v8 + v14 - 16);
      float32x4_t v185 = *(float32x4_t *)(v8 + v14);
      int8x16_t v17 = *((int8x16_t *)a2 + 5);
      float32x4_t v16 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v16);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v185, 3), v16);
      float32x4_t v21 = *((float32x4_t *)a2 + 7);
      int8x16_t v20 = *((int8x16_t *)a2 + 8);
      float32x4_t v22 = vmulq_f32(vrecpeq_f32(v18), v21);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v19), v21);
      int8x16_t v25 = *((int8x16_t *)a2 + 31);
      float32x4_t v24 = *((float32x4_t *)a2 + 32);
      float32x4_t v26 = vmaxq_f32(vmulq_f32(v15, vmulq_f32(v22, vrecpsq_f32(v22, v18))), v24);
      float32x4_t v27 = vmaxq_f32(vmulq_f32(v185, vmulq_f32(v23, vrecpsq_f32(v23, v19))), v24);
      float32x4_t v28 = *((float32x4_t *)a2 + 29);
      float32x4_t v29 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v26), (int8x16_t)v28);
      float32x4_t v30 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v27), (int8x16_t)v28);
      float32x4_t v32 = *((float32x4_t *)a2 + 9);
      int8x16_t v31 = *((int8x16_t *)a2 + 10);
      float32x4_t v34 = *((float32x4_t *)a2 + 11);
      float32x4_t v33 = *((float32x4_t *)a2 + 12);
      float32x4_t v35 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v27, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v27))), v34);
      float32x4_t v36 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v29, v33));
      float32x4_t v37 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v30, v33));
      float32x4_t v39 = *((float32x4_t *)a2 + 13);
      float32x4_t v38 = *((float32x4_t *)a2 + 14);
      float32x4_t v40 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v26, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v26))), v34), v36);
      float32x4_t v41 = vmulq_f32(v39, v36);
      float32x4_t v42 = vmulq_f32(vmulq_f32(v39, v37), v30);
      float32x4_t v43 = vaddq_f32(v35, v37);
      float32x4_t v44 = vsubq_f32(vsubq_f32(v29, v28), vmulq_f32(v41, v29));
      float32x4_t v45 = vsubq_f32(vsubq_f32(v30, v28), v42);
      float32x4_t v47 = *((float32x4_t *)a2 + 15);
      float32x4_t v46 = *((float32x4_t *)a2 + 16);
      float32x4_t v49 = *((float32x4_t *)a2 + 17);
      float32x4_t v48 = *((float32x4_t *)a2 + 18);
      float32x4_t v50 = *((float32x4_t *)a2 + 1);
      float32x4_t v51 = vmaxq_f32(vmulq_f32(v50, vaddq_f32(v40, vmulq_f32(v44, vaddq_f32(vaddq_f32(v46, vmulq_f32(v44, v49)), vmulq_f32(vmulq_f32(v44, v44), vaddq_f32(v38, vmulq_f32(v47, v44))))))), v48);
      float32x4_t v52 = vmaxq_f32(vmulq_f32(v50, vaddq_f32(v43, vmulq_f32(v45, vaddq_f32(vaddq_f32(v46, vmulq_f32(v45, v49)), vmulq_f32(vmulq_f32(v45, v45), vaddq_f32(v38, vmulq_f32(v47, v45))))))), v48);
      float32x4_t v53 = vcvtq_f32_s32(vcvtq_s32_f32(v51));
      float32x4_t v54 = vcvtq_f32_s32(vcvtq_s32_f32(v52));
      float32x4_t v55 = vsubq_f32(v53, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v53, v51)));
      float32x4_t v56 = vsubq_f32(v54, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v54, v52)));
      float32x4_t v57 = *((float32x4_t *)a2 + 19);
      float32x4_t v58 = *((float32x4_t *)a2 + 20);
      float32x4_t v59 = vmulq_f32(*(float32x4_t *)(v7 + v14 - 16), *(float32x4_t *)a2);
      float32x4_t v60 = vsubq_f32(v51, v55);
      float32x4_t v61 = vmulq_f32(*(float32x4_t *)(v7 + v14), *(float32x4_t *)a2);
      float32x4_t v62 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 3), v16);
      float32x4_t v63 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 3), v16);
      float32x4_t v64 = vmulq_f32(v21, vrecpeq_f32(v62));
      float32x4_t v65 = vmulq_f32(v21, vrecpeq_f32(v63));
      int8x16_t v66 = (int8x16_t)vmulq_f32(v64, vrecpsq_f32(v64, v62));
      float32x4_t v68 = *((float32x4_t *)a2 + 21);
      int32x4_t v67 = *((int32x4_t *)a2 + 22);
      float32x4_t v69 = vmulq_f32(v59, (float32x4_t)vorrq_s8(vandq_s8(v25, v66), (int8x16_t)v24));
      float32x4_t v70 = vmulq_f32(v61, (float32x4_t)vorrq_s8(vandq_s8(v25, (int8x16_t)vmulq_f32(v65, vrecpsq_f32(v65, v63))), (int8x16_t)v24));
      float32x4_t v71 = vmaxq_f32(v69, v24);
      float32x4_t v72 = vmaxq_f32(v70, v24);
      float32x4_t v73 = vmulq_f32(v60, vaddq_f32(v68, vmulq_f32(v60, vaddq_f32(v57, vmulq_f32(v58, v60)))));
      float32x4_t v74 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v71), (int8x16_t)v28);
      float32x4_t v75 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v72), (int8x16_t)v28);
      float32x4_t v76 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v74, v33));
      float32x4_t v77 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v71, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v71))), v34), v76);
      float32x4_t v78 = vsubq_f32(vsubq_f32(v74, v28), vmulq_f32(vmulq_f32(v39, v76), v74));
      float32x4_t v79 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v75, v33));
      float32x4_t v80 = vsubq_f32(v52, v56);
      float32x4_t v81 = vsubq_f32(vsubq_f32(v75, v28), vmulq_f32(vmulq_f32(v39, v79), v75));
      float32x4_t v82 = vmaxq_f32(vmulq_f32(v50, vaddq_f32(v77, vmulq_f32(v78, vaddq_f32(vaddq_f32(v46, vmulq_f32(v49, v78)), vmulq_f32(vmulq_f32(v78, v78), vaddq_f32(v38, vmulq_f32(v47, v78))))))), v48);
      float32x4_t v83 = vmaxq_f32(vmulq_f32(v50, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v72, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v72))), v34), v79), vmulq_f32(v81, vaddq_f32(vaddq_f32(v46, vmulq_f32(v49, v81)), vmulq_f32(vmulq_f32(v81, v81), vaddq_f32(v38, vmulq_f32(v47, v81))))))), v48);
      float32x4_t v84 = vcvtq_f32_s32(vcvtq_s32_f32(v82));
      float32x4_t v85 = vmulq_f32(vaddq_f32(v28, v73), (float32x4_t)vshlq_n_s32(vaddq_s32(v67, vcvtq_s32_f32(v55)), 0x17uLL));
      float32x4_t v86 = vcvtq_f32_s32(vcvtq_s32_f32(v83));
      float32x4_t v87 = vsubq_f32(v84, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v84, v82)));
      float32x4_t v88 = vsubq_f32(v86, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v86, v83)));
      float32x4_t v89 = vsubq_f32(v82, v87);
      float32x4_t v90 = vsubq_f32(v83, v88);
      int32x4_t v91 = vcvtq_s32_f32(v56);
      float v12 = 1.0;
      float32x4_t v92 = vmulq_f32(vaddq_f32(v28, vmulq_f32(v80, vaddq_f32(v68, vmulq_f32(v80, vaddq_f32(v57, vmulq_f32(v58, v80)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v67, v91), 0x17uLL));
      float32x4_t v93 = vmulq_f32(vaddq_f32(v28, vmulq_f32(v89, vaddq_f32(v68, vmulq_f32(v89, vaddq_f32(v57, vmulq_f32(v58, v89)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v87), v67), 0x17uLL));
      float32x4_t v94 = vmulq_f32(vaddq_f32(v28, vmulq_f32(v90, vaddq_f32(v68, vmulq_f32(v90, vaddq_f32(v57, vmulq_f32(v58, v90)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v88), v67), 0x17uLL));
      float32x4_t v95 = vaddq_f32(v93, v93);
      int8x16_t v96 = (int8x16_t)vmulq_f32(v85, v95);
      float32x4_t v97 = vsubq_f32(v95, v28);
      int8x16_t v98 = (int8x16_t)vsubq_f32(vaddq_f32(v85, v97), vminq_f32(vminq_f32(vmulq_f32(v85, v97), v97), v85));
      float32x4_t v99 = vaddq_f32(v94, v94);
      float32x4_t v100 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgeq_f32(v39, v93)), v24), v96, v98);
      int8x16_t v101 = (int8x16_t)vmulq_f32(v92, v99);
      float32x4_t v102 = vsubq_f32(v99, v28);
      float32x4_t v103 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgeq_f32(v39, v94)), v24), v101, (int8x16_t)vsubq_f32(vaddq_f32(v92, v102), vminq_f32(vminq_f32(vmulq_f32(v92, v102), v102), v92)));
      float32x4_t v104 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v100, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v100)));
      float32x4_t v105 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v100), (int8x16_t)v28);
      float32x4_t v106 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v105, v33));
      float32x4_t v107 = vsubq_f32(vsubq_f32(v105, v28), vmulq_f32(vmulq_f32(v39, v106), v105));
      float32x4_t v108 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v103), (int8x16_t)v28);
      float32x4_t v109 = (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v108, v33));
      float32x4_t v110 = vsubq_f32(vsubq_f32(v108, v28), vmulq_f32(vmulq_f32(v39, v109), v108));
      float32x4_t v111 = vaddq_f32(vaddq_f32(vsubq_f32(v104, v34), v106), vmulq_f32(v107, vaddq_f32(vaddq_f32(v46, vmulq_f32(v49, v107)), vmulq_f32(vmulq_f32(v107, v107), vaddq_f32(v38, vmulq_f32(v47, v107))))));
      float32x4_t v112 = *((float32x4_t *)a2 + 2);
      float32x4_t v113 = vmaxq_f32(vmulq_f32(v112, v111), v48);
      float32x4_t v114 = vmaxq_f32(vmulq_f32(v112, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v103, 0x17uLL)), (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v32, v103))), v34), v109), vmulq_f32(v110, vaddq_f32(vaddq_f32(v46, vmulq_f32(v49, v110)), vmulq_f32(vmulq_f32(v110, v110), vaddq_f32(v38, vmulq_f32(v47, v110))))))), v48);
      float32x4_t v115 = vcvtq_f32_s32(vcvtq_s32_f32(v113));
      float32x4_t v116 = vcvtq_f32_s32(vcvtq_s32_f32(v114));
      float32x4_t v117 = vsubq_f32(v115, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v115, v113)));
      float32x4_t v118 = vsubq_f32(v116, (float32x4_t)vandq_s8((int8x16_t)v28, (int8x16_t)vcgtq_f32(v116, v114)));
      float32x4_t v119 = vsubq_f32(v113, v117);
      float32x4_t v120 = vsubq_f32(v114, v118);
      float32x4_t v121 = vmulq_f32(vaddq_f32(v28, vmulq_f32(v119, vaddq_f32(v68, vmulq_f32(v119, vaddq_f32(v57, vmulq_f32(v58, v119)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v117), v67), 0x17uLL));
      v121.i32[3] = 1.0;
      float32x4_t v122 = vmulq_f32(vaddq_f32(v28, vmulq_f32(v120, vaddq_f32(v68, vmulq_f32(v120, vaddq_f32(v57, vmulq_f32(v58, v120)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v118), v67), 0x17uLL));
      v122.i32[3] = 1.0;
      float32x4_t v123 = (float32x4_t *)(v6 + v14);
      v123[-1] = vaddq_f32(*(float32x4_t *)(v8 + v14 - 16), vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v121, (int8x16_t)vaddq_f32(v69, vmulq_laneq_f32(vsubq_f32(v121, v69), *(float32x4_t *)(v8 + v14 - 16), 3))), *(float32x4_t *)(v8 + v14 - 16)), v69, 3));
      *float32x4_t v123 = vaddq_f32(v185, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v122, (int8x16_t)vaddq_f32(v70, vmulq_laneq_f32(vsubq_f32(v122, v70), v185, 3))), v185), v70, 3));
      v13 -= 2;
      v14 += 32;
    }
    while (v5 + v13 > 1);
    int v124 = -v13;
    if (v124 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v125 = 16 * v124;
    float32x4_t v126 = *(float32x4_t *)(v8 + v125);
    float32x4_t v127 = *((float32x4_t *)a2 + 6);
    float32x4_t v128 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 3), v127);
    float32x4_t v130 = *((float32x4_t *)a2 + 7);
    int8x16_t v129 = *((int8x16_t *)a2 + 8);
    float32x4_t v131 = vmulq_f32(vrecpeq_f32(v128), v130);
    float32x4_t v132 = *((float32x4_t *)a2 + 32);
    float32x4_t v133 = vmaxq_f32(vmulq_f32(v126, vmulq_f32(v131, vrecpsq_f32(v131, v128))), v132);
    float32x4_t v134 = *((float32x4_t *)a2 + 29);
    float32x4_t v135 = (float32x4_t)vorrq_s8(vandq_s8(v129, (int8x16_t)v133), (int8x16_t)v134);
    float32x4_t v136 = *((float32x4_t *)a2 + 9);
    int8x16_t v137 = *((int8x16_t *)a2 + 10);
    float32x4_t v138 = *((float32x4_t *)a2 + 11);
    float32x4_t v139 = *((float32x4_t *)a2 + 12);
    float32x4_t v140 = (float32x4_t)vandq_s8((int8x16_t)v134, (int8x16_t)vcgtq_f32(v135, v139));
    float32x4_t v141 = *((float32x4_t *)a2 + 13);
    float32x4_t v142 = *((float32x4_t *)a2 + 14);
    float32x4_t v143 = vsubq_f32(vsubq_f32(v135, v134), vmulq_f32(vmulq_f32(v141, v140), v135));
    float32x4_t v144 = *((float32x4_t *)a2 + 15);
    float32x4_t v145 = *((float32x4_t *)a2 + 16);
    float32x4_t v146 = *((float32x4_t *)a2 + 17);
    float32x4_t v147 = *((float32x4_t *)a2 + 18);
    float32x4_t v148 = vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v133, 0x17uLL)), (float32x4_t)vandq_s8(v137, (int8x16_t)vcgtq_f32(v136, v133))), v138), v140), vmulq_f32(v143, vaddq_f32(vaddq_f32(v145, vmulq_f32(v143, v146)), vmulq_f32(vmulq_f32(v143, v143), vaddq_f32(v142, vmulq_f32(v144, v143))))));
    float32x4_t v149 = *((float32x4_t *)a2 + 1);
    float32x4_t v150 = vmaxq_f32(vmulq_f32(v149, v148), v147);
    float32x4_t v151 = vcvtq_f32_s32(vcvtq_s32_f32(v150));
    float32x4_t v152 = vsubq_f32(v151, (float32x4_t)vandq_s8((int8x16_t)v134, (int8x16_t)vcgtq_f32(v151, v150)));
    float32x4_t v153 = vsubq_f32(v150, v152);
    float32x4_t v154 = *((float32x4_t *)a2 + 19);
    float32x4_t v155 = *((float32x4_t *)a2 + 20);
    float32x4_t v156 = *((float32x4_t *)a2 + 21);
    int32x4_t v157 = *((int32x4_t *)a2 + 22);
    float32x4_t v158 = vmulq_f32(vaddq_f32(v134, vmulq_f32(v153, vaddq_f32(v156, vmulq_f32(v153, vaddq_f32(v154, vmulq_f32(v155, v153)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v157, vcvtq_s32_f32(v152)), 0x17uLL));
    float32x4_t v159 = vmulq_f32(*(float32x4_t *)(v7 + v125), *(float32x4_t *)a2);
    float32x4_t v160 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v159, 3), v127);
    float32x4_t v161 = vmulq_f32(v130, vrecpeq_f32(v160));
    float32x4_t v162 = vmulq_f32(v159, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v161, vrecpsq_f32(v161, v160))), (int8x16_t)v132));
    float32x4_t v163 = vmaxq_f32(v162, v132);
    float32x4_t v164 = (float32x4_t)vorrq_s8(vandq_s8(v129, (int8x16_t)v163), (int8x16_t)v134);
    float32x4_t v165 = (float32x4_t)vandq_s8((int8x16_t)v134, (int8x16_t)vcgtq_f32(v164, v139));
    float32x4_t v166 = vsubq_f32(vsubq_f32(v164, v134), vmulq_f32(vmulq_f32(v141, v165), v164));
    float32x4_t v167 = vmaxq_f32(vmulq_f32(v149, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v163, 0x17uLL)), (float32x4_t)vandq_s8(v137, (int8x16_t)vcgtq_f32(v136, v163))), v138), v165), vmulq_f32(v166, vaddq_f32(vaddq_f32(v145, vmulq_f32(v146, v166)), vmulq_f32(vmulq_f32(v166, v166), vaddq_f32(v142, vmulq_f32(v144, v166))))))), v147);
    float32x4_t v168 = vcvtq_f32_s32(vcvtq_s32_f32(v167));
    float32x4_t v169 = vsubq_f32(v168, (float32x4_t)vandq_s8((int8x16_t)v134, (int8x16_t)vcgtq_f32(v168, v167)));
    float32x4_t v170 = vsubq_f32(v167, v169);
    float32x4_t v171 = vmulq_f32(vaddq_f32(v134, vmulq_f32(v170, vaddq_f32(v156, vmulq_f32(v170, vaddq_f32(v154, vmulq_f32(v155, v170)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v169), v157), 0x17uLL));
    float32x4_t v172 = vaddq_f32(v171, v171);
    int8x16_t v173 = (int8x16_t)vmulq_f32(v158, v172);
    float32x4_t v174 = vsubq_f32(v172, v134);
    float32x4_t v175 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v134, (int8x16_t)vcgeq_f32(v141, v171)), v132), v173, (int8x16_t)vsubq_f32(vaddq_f32(v158, v174), vminq_f32(vminq_f32(vmulq_f32(v158, v174), v174), v158)));
    float32x4_t v176 = (float32x4_t)vorrq_s8(vandq_s8(v129, (int8x16_t)v175), (int8x16_t)v134);
    float32x4_t v177 = (float32x4_t)vandq_s8((int8x16_t)v134, (int8x16_t)vcgtq_f32(v176, v139));
    float32x4_t v178 = vsubq_f32(vsubq_f32(v176, v134), vmulq_f32(vmulq_f32(v141, v177), v176));
    float32x4_t v179 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 2), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v175, 0x17uLL)), (float32x4_t)vandq_s8(v137, (int8x16_t)vcgtq_f32(v136, v175))), v138), v177), vmulq_f32(v178, vaddq_f32(vaddq_f32(v145, vmulq_f32(v146, v178)), vmulq_f32(vmulq_f32(v178, v178), vaddq_f32(v142, vmulq_f32(v144, v178))))))), v147);
    float32x4_t v180 = vcvtq_f32_s32(vcvtq_s32_f32(v179));
    float32x4_t v181 = vsubq_f32(v180, (float32x4_t)vandq_s8((int8x16_t)v134, (int8x16_t)vcgtq_f32(v180, v179)));
    float32x4_t v182 = vsubq_f32(v179, v181);
    float32x4_t v183 = vmulq_f32(vaddq_f32(v134, vmulq_f32(v182, vaddq_f32(v156, vmulq_f32(v182, vaddq_f32(v154, vmulq_f32(v155, v182)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v181), v157), 0x17uLL));
    v183.f32[3] = v12;
    *(float32x4_t *)(v6 + v125) = vaddq_f32(v126, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v183, (int8x16_t)vaddq_f32(v162, vmulq_laneq_f32(vsubq_f32(v183, v162), v126, 3))), v126), v162, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendHardLightQTTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 10);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 26);
    float v12 = 1.0;
    while (v5 < 2)
    {
      int v129 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v13 = 0;
    uint64_t v14 = 16;
    do
    {
      float32x4_t v15 = *(float32x4_t *)(v8 + v14 - 16);
      float32x4_t v190 = *(float32x4_t *)(v8 + v14);
      int8x16_t v17 = *((int8x16_t *)a2 + 5);
      float32x4_t v16 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v16);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v190, 3), v16);
      float32x4_t v21 = *((float32x4_t *)a2 + 7);
      int8x16_t v20 = *((int8x16_t *)a2 + 8);
      float32x4_t v22 = vmulq_f32(vrecpeq_f32(v18), v21);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v19), v21);
      float32x4_t v24 = vmulq_f32(v15, vmulq_f32(v22, vrecpsq_f32(v22, v18)));
      int8x16_t v26 = *((int8x16_t *)a2 + 31);
      float32x4_t v25 = *((float32x4_t *)a2 + 32);
      float32x4_t v28 = *((float32x4_t *)a2 + 23);
      float32x4_t v27 = *((float32x4_t *)a2 + 24);
      float32x4_t v29 = vmaxq_f32(vmulq_f32(v190, vmulq_f32(v23, vrecpsq_f32(v23, v19))), v25);
      float32x4_t v30 = vminq_f32(vmaxq_f32(v24, v25), v28);
      float32x4_t v31 = vminq_f32(v29, v28);
      float32x4_t v32 = *((float32x4_t *)a2 + 29);
      float32x4_t v33 = *((float32x4_t *)a2 + 30);
      float32x4_t v34 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v30), (int8x16_t)v32);
      float32x4_t v36 = *((float32x4_t *)a2 + 9);
      int8x16_t v35 = *((int8x16_t *)a2 + 10);
      float32x4_t v37 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v31), (int8x16_t)v32);
      float32x4_t v39 = *((float32x4_t *)a2 + 11);
      float32x4_t v38 = *((float32x4_t *)a2 + 12);
      float32x4_t v40 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v34, v38));
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v37, v38));
      float32x4_t v43 = *((float32x4_t *)a2 + 13);
      float32x4_t v42 = *((float32x4_t *)a2 + 14);
      float32x4_t v44 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v30))), v39), v40);
      float32x4_t v45 = vmulq_f32(v43, v40);
      float32x4_t v46 = vmulq_f32(vmulq_f32(v43, v41), v37);
      float32x4_t v47 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v31, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v31))), v39), v41);
      float32x4_t v48 = vsubq_f32(vsubq_f32(v34, v32), vmulq_f32(v45, v34));
      float32x4_t v49 = vsubq_f32(vsubq_f32(v37, v32), v46);
      float32x4_t v51 = *((float32x4_t *)a2 + 15);
      float32x4_t v50 = *((float32x4_t *)a2 + 16);
      float32x4_t v53 = *((float32x4_t *)a2 + 17);
      float32x4_t v52 = *((float32x4_t *)a2 + 18);
      float32x4_t v54 = vaddq_f32(v47, vmulq_f32(v49, vaddq_f32(vaddq_f32(v50, vmulq_f32(v49, v53)), vmulq_f32(vmulq_f32(v49, v49), vaddq_f32(v42, vmulq_f32(v51, v49))))));
      float32x4_t v55 = vmulq_f32(v27, vaddq_f32(v44, vmulq_f32(v48, vaddq_f32(vaddq_f32(v50, vmulq_f32(v48, v53)), vmulq_f32(vmulq_f32(v48, v48), vaddq_f32(v42, vmulq_f32(v51, v48)))))));
      float32x4_t v56 = vmulq_f32(*(float32x4_t *)(v7 + v14 - 16), *(float32x4_t *)a2);
      float32x4_t v57 = vmaxq_f32(v55, v52);
      float32x4_t v58 = vmulq_f32(*(float32x4_t *)(v7 + v14), *(float32x4_t *)a2);
      float32x4_t v59 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 3), v16);
      float32x4_t v60 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 3), v16);
      float32x4_t v61 = vmaxq_f32(vmulq_f32(v27, v54), v52);
      float32x4_t v62 = vmulq_f32(v21, vrecpeq_f32(v59));
      float32x4_t v63 = vmulq_f32(v21, vrecpeq_f32(v60));
      float32x4_t v64 = vmulq_f32(v56, (float32x4_t)vorrq_s8(vandq_s8(v26, (int8x16_t)vmulq_f32(v62, vrecpsq_f32(v62, v59))), (int8x16_t)v25));
      float32x4_t v65 = vmulq_f32(v58, (float32x4_t)vorrq_s8(vandq_s8(v26, (int8x16_t)vmulq_f32(v63, vrecpsq_f32(v63, v60))), (int8x16_t)v25));
      float32x4_t v66 = vcvtq_f32_s32(vcvtq_s32_f32(v57));
      float32x4_t v67 = vminq_f32(vmaxq_f32(v64, v25), v28);
      float32x4_t v68 = vminq_f32(vmaxq_f32(v65, v25), v28);
      float32x4_t v69 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
      float32x4_t v70 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v67), (int8x16_t)v32);
      float32x4_t v71 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v68), (int8x16_t)v32);
      float32x4_t v72 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v70, v38));
      float32x4_t v73 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v71, v38));
      float32x4_t v74 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v67, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v67))), v39), v72);
      float32x4_t v75 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v68, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v68))), v39), v73);
      float32x4_t v76 = vsubq_f32(v66, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v66, v57)));
      float32x4_t v77 = vsubq_f32(vsubq_f32(v70, v32), vmulq_f32(vmulq_f32(v43, v72), v70));
      float32x4_t v78 = vsubq_f32(vsubq_f32(v71, v32), vmulq_f32(vmulq_f32(v43, v73), v71));
      float32x4_t v79 = vsubq_f32(v69, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v69, v61)));
      float32x4_t v80 = vsubq_f32(v57, v76);
      float32x4_t v81 = *((float32x4_t *)a2 + 19);
      float32x4_t v82 = *((float32x4_t *)a2 + 20);
      float32x4_t v83 = *((float32x4_t *)a2 + 21);
      int32x4_t v84 = *((int32x4_t *)a2 + 22);
      float32x4_t v85 = vsubq_f32(v61, v79);
      float32x4_t v86 = vmaxq_f32(vmulq_f32(v27, vaddq_f32(v74, vmulq_f32(v77, vaddq_f32(vaddq_f32(v50, vmulq_f32(v53, v77)), vmulq_f32(vmulq_f32(v77, v77), vaddq_f32(v42, vmulq_f32(v51, v77))))))), v52);
      float32x4_t v87 = vmaxq_f32(vmulq_f32(v27, vaddq_f32(v75, vmulq_f32(v78, vaddq_f32(vaddq_f32(v50, vmulq_f32(v53, v78)), vmulq_f32(vmulq_f32(v78, v78), vaddq_f32(v42, vmulq_f32(v51, v78))))))), v52);
      float32x4_t v88 = vcvtq_f32_s32(vcvtq_s32_f32(v86));
      float32x4_t v89 = vsubq_f32(v88, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v88, v86)));
      float32x4_t v90 = vcvtq_f32_s32(vcvtq_s32_f32(v87));
      float32x4_t v91 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v80, vaddq_f32(v83, vmulq_f32(v80, vaddq_f32(v81, vmulq_f32(v82, v80)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v84, vcvtq_s32_f32(v76)), 0x17uLL));
      float32x4_t v92 = vsubq_f32(v90, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v90, v87)));
      float32x4_t v93 = vsubq_f32(v86, v89);
      float32x4_t v94 = vsubq_f32(v87, v92);
      float v12 = 1.0;
      float32x4_t v95 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v93, vaddq_f32(v83, vmulq_f32(v93, vaddq_f32(v81, vmulq_f32(v82, v93)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v89), v84), 0x17uLL));
      float32x4_t v96 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v94, vaddq_f32(v83, vmulq_f32(v94, vaddq_f32(v81, vmulq_f32(v82, v94)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v92), v84), 0x17uLL));
      float32x4_t v97 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v85, vaddq_f32(v83, vmulq_f32(v85, vaddq_f32(v81, vmulq_f32(v82, v85)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v84, vcvtq_s32_f32(v79)), 0x17uLL));
      float32x4_t v98 = vaddq_f32(v95, v95);
      int8x16_t v99 = (int8x16_t)vmulq_f32(v91, v98);
      float32x4_t v100 = vsubq_f32(v98, v32);
      int8x16_t v101 = (int8x16_t)vsubq_f32(vaddq_f32(v91, v100), vminq_f32(vminq_f32(vmulq_f32(v91, v100), v100), v91));
      float32x4_t v102 = vaddq_f32(v96, v96);
      float32x4_t v103 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgeq_f32(v43, v95)), v25), v99, v101);
      int8x16_t v104 = (int8x16_t)vmulq_f32(v97, v102);
      float32x4_t v105 = vsubq_f32(v102, v32);
      float32x4_t v106 = vminq_f32(vmaxq_f32(v103, v25), v33);
      float32x4_t v107 = vminq_f32(vmaxq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgeq_f32(v43, v96)), v25), v104, (int8x16_t)vsubq_f32(vaddq_f32(v97, v105), vminq_f32(vminq_f32(vmulq_f32(v97, v105), v105), v97))), v25), v33);
      float32x4_t v108 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v106, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v106)));
      float32x4_t v109 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v106), (int8x16_t)v32);
      float32x4_t v110 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v109, v38));
      float32x4_t v111 = vaddq_f32(vsubq_f32(v108, v39), v110);
      float32x4_t v112 = vsubq_f32(vsubq_f32(v109, v32), vmulq_f32(vmulq_f32(v43, v110), v109));
      float32x4_t v113 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v107), (int8x16_t)v32);
      float32x4_t v114 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v113, v38));
      float32x4_t v115 = vsubq_f32(vsubq_f32(v113, v32), vmulq_f32(vmulq_f32(v43, v114), v113));
      float32x4_t v116 = vaddq_f32(v111, vmulq_f32(v112, vaddq_f32(vaddq_f32(v50, vmulq_f32(v53, v112)), vmulq_f32(vmulq_f32(v112, v112), vaddq_f32(v42, vmulq_f32(v51, v112))))));
      float32x4_t v117 = *((float32x4_t *)a2 + 25);
      float32x4_t v118 = vmaxq_f32(vmulq_f32(v117, v116), v52);
      float32x4_t v119 = vmaxq_f32(vmulq_f32(v117, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v107, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v107))), v39), v114), vmulq_f32(v115, vaddq_f32(vaddq_f32(v50, vmulq_f32(v53, v115)), vmulq_f32(vmulq_f32(v115, v115), vaddq_f32(v42, vmulq_f32(v51, v115))))))), v52);
      float32x4_t v120 = vcvtq_f32_s32(vcvtq_s32_f32(v118));
      float32x4_t v121 = vcvtq_f32_s32(vcvtq_s32_f32(v119));
      float32x4_t v122 = vsubq_f32(v120, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v120, v118)));
      float32x4_t v123 = vsubq_f32(v121, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v121, v119)));
      float32x4_t v124 = vsubq_f32(v118, v122);
      float32x4_t v125 = vsubq_f32(v119, v123);
      float32x4_t v126 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v124, vaddq_f32(v83, vmulq_f32(v124, vaddq_f32(v81, vmulq_f32(v82, v124)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v122), v84), 0x17uLL));
      v126.i32[3] = 1.0;
      float32x4_t v127 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v125, vaddq_f32(v83, vmulq_f32(v125, vaddq_f32(v81, vmulq_f32(v82, v125)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v123), v84), 0x17uLL));
      v127.i32[3] = 1.0;
      float32x4_t v128 = (float32x4_t *)(v6 + v14);
      v128[-1] = vaddq_f32(*(float32x4_t *)(v8 + v14 - 16), vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v126, (int8x16_t)vaddq_f32(v64, vmulq_laneq_f32(vsubq_f32(v126, v64), *(float32x4_t *)(v8 + v14 - 16), 3))), *(float32x4_t *)(v8 + v14 - 16)), v64, 3));
      *float32x4_t v128 = vaddq_f32(v190, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v127, (int8x16_t)vaddq_f32(v65, vmulq_laneq_f32(vsubq_f32(v127, v65), v190, 3))), v190), v65, 3));
      v13 -= 2;
      v14 += 32;
    }
    while (v5 + v13 > 1);
    int v129 = -v13;
    if (v129 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v130 = 16 * v129;
    float32x4_t v131 = *(float32x4_t *)(v8 + v130);
    float32x4_t v132 = *((float32x4_t *)a2 + 6);
    float32x4_t v133 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v131, 3), v132);
    float32x4_t v135 = *((float32x4_t *)a2 + 7);
    int8x16_t v134 = *((int8x16_t *)a2 + 8);
    float32x4_t v136 = vmulq_f32(vrecpeq_f32(v133), v135);
    float32x4_t v137 = *((float32x4_t *)a2 + 32);
    float32x4_t v138 = *((float32x4_t *)a2 + 23);
    float32x4_t v139 = *((float32x4_t *)a2 + 24);
    float32x4_t v140 = vminq_f32(vmaxq_f32(vmulq_f32(v131, vmulq_f32(v136, vrecpsq_f32(v136, v133))), v137), v138);
    float32x4_t v141 = *((float32x4_t *)a2 + 29);
    float32x4_t v142 = (float32x4_t)vorrq_s8(vandq_s8(v134, (int8x16_t)v140), (int8x16_t)v141);
    float32x4_t v143 = *((float32x4_t *)a2 + 9);
    int8x16_t v144 = *((int8x16_t *)a2 + 10);
    float32x4_t v145 = *((float32x4_t *)a2 + 11);
    float32x4_t v146 = *((float32x4_t *)a2 + 12);
    float32x4_t v147 = (float32x4_t)vandq_s8((int8x16_t)v141, (int8x16_t)vcgtq_f32(v142, v146));
    float32x4_t v148 = *((float32x4_t *)a2 + 13);
    float32x4_t v149 = *((float32x4_t *)a2 + 14);
    float32x4_t v150 = vsubq_f32(vsubq_f32(v142, v141), vmulq_f32(vmulq_f32(v148, v147), v142));
    float32x4_t v151 = *((float32x4_t *)a2 + 15);
    float32x4_t v152 = *((float32x4_t *)a2 + 16);
    float32x4_t v154 = *((float32x4_t *)a2 + 17);
    float32x4_t v153 = *((float32x4_t *)a2 + 18);
    float32x4_t v155 = vmaxq_f32(vmulq_f32(v139, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v140, 0x17uLL)), (float32x4_t)vandq_s8(v144, (int8x16_t)vcgtq_f32(v143, v140))), v145), v147), vmulq_f32(v150, vaddq_f32(vaddq_f32(v152, vmulq_f32(v150, v154)), vmulq_f32(vmulq_f32(v150, v150), vaddq_f32(v149, vmulq_f32(v151, v150))))))), v153);
    float32x4_t v156 = vcvtq_f32_s32(vcvtq_s32_f32(v155));
    float32x4_t v157 = vsubq_f32(v156, (float32x4_t)vandq_s8((int8x16_t)v141, (int8x16_t)vcgtq_f32(v156, v155)));
    float32x4_t v158 = vsubq_f32(v155, v157);
    float32x4_t v159 = *((float32x4_t *)a2 + 19);
    float32x4_t v160 = *((float32x4_t *)a2 + 20);
    float32x4_t v161 = *((float32x4_t *)a2 + 21);
    int32x4_t v162 = *((int32x4_t *)a2 + 22);
    float32x4_t v163 = vmulq_f32(vaddq_f32(v141, vmulq_f32(v158, vaddq_f32(v161, vmulq_f32(v158, vaddq_f32(v159, vmulq_f32(v160, v158)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v162, vcvtq_s32_f32(v157)), 0x17uLL));
    float32x4_t v164 = vmulq_f32(*(float32x4_t *)(v7 + v130), *(float32x4_t *)a2);
    float32x4_t v165 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v164, 3), v132);
    float32x4_t v166 = vmulq_f32(v135, vrecpeq_f32(v165));
    float32x4_t v167 = vmulq_f32(v164, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v166, vrecpsq_f32(v166, v165))), (int8x16_t)v137));
    float32x4_t v168 = vminq_f32(vmaxq_f32(v167, v137), v138);
    float32x4_t v169 = (float32x4_t)vorrq_s8(vandq_s8(v134, (int8x16_t)v168), (int8x16_t)v141);
    float32x4_t v170 = (float32x4_t)vandq_s8((int8x16_t)v141, (int8x16_t)vcgtq_f32(v169, v146));
    float32x4_t v171 = vsubq_f32(vsubq_f32(v169, v141), vmulq_f32(vmulq_f32(v148, v170), v169));
    float32x4_t v172 = vmaxq_f32(vmulq_f32(v139, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v168, 0x17uLL)), (float32x4_t)vandq_s8(v144, (int8x16_t)vcgtq_f32(v143, v168))), v145), v170), vmulq_f32(v171, vaddq_f32(vaddq_f32(v152, vmulq_f32(v154, v171)), vmulq_f32(vmulq_f32(v171, v171), vaddq_f32(v149, vmulq_f32(v151, v171))))))), v153);
    float32x4_t v173 = vcvtq_f32_s32(vcvtq_s32_f32(v172));
    float32x4_t v174 = vsubq_f32(v173, (float32x4_t)vandq_s8((int8x16_t)v141, (int8x16_t)vcgtq_f32(v173, v172)));
    float32x4_t v175 = vsubq_f32(v172, v174);
    float32x4_t v176 = vmulq_f32(vaddq_f32(v141, vmulq_f32(v175, vaddq_f32(v161, vmulq_f32(v175, vaddq_f32(v159, vmulq_f32(v160, v175)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v174), v162), 0x17uLL));
    float32x4_t v177 = vaddq_f32(v176, v176);
    int8x16_t v178 = (int8x16_t)vmulq_f32(v163, v177);
    float32x4_t v179 = vsubq_f32(v177, v141);
    float32x4_t v180 = vminq_f32(vmaxq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v141, (int8x16_t)vcgeq_f32(v148, v176)), v137), v178, (int8x16_t)vsubq_f32(vaddq_f32(v163, v179), vminq_f32(vminq_f32(vmulq_f32(v163, v179), v179), v163))), v137), *((float32x4_t *)a2 + 30));
    float32x4_t v181 = (float32x4_t)vorrq_s8(vandq_s8(v134, (int8x16_t)v180), (int8x16_t)v141);
    float32x4_t v182 = (float32x4_t)vandq_s8((int8x16_t)v141, (int8x16_t)vcgtq_f32(v181, v146));
    float32x4_t v183 = vsubq_f32(vsubq_f32(v181, v141), vmulq_f32(vmulq_f32(v148, v182), v181));
    float32x4_t v184 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 25), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v180, 0x17uLL)), (float32x4_t)vandq_s8(v144, (int8x16_t)vcgtq_f32(v143, v180))), v145), v182), vmulq_f32(v183, vaddq_f32(vaddq_f32(v152, vmulq_f32(v154, v183)), vmulq_f32(vmulq_f32(v183, v183), vaddq_f32(v149, vmulq_f32(v151, v183))))))), v153);
    float32x4_t v185 = vcvtq_f32_s32(vcvtq_s32_f32(v184));
    float32x4_t v186 = vsubq_f32(v185, (float32x4_t)vandq_s8((int8x16_t)v141, (int8x16_t)vcgtq_f32(v185, v184)));
    float32x4_t v187 = vsubq_f32(v184, v186);
    float32x4_t v188 = vmulq_f32(vaddq_f32(v141, vmulq_f32(v187, vaddq_f32(v161, vmulq_f32(v187, vaddq_f32(v159, vmulq_f32(v160, v187)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v186), v162), 0x17uLL));
    v188.f32[3] = v12;
    *(float32x4_t *)(v6 + v130) = vaddq_f32(v131, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v188, (int8x16_t)vaddq_f32(v167, vmulq_laneq_f32(vsubq_f32(v188, v167), v131, 3))), v131), v167, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendVividLightTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 12);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v12 = 0;
      do
      {
        int8x16_t v13 = *((int8x16_t *)a2 + 5);
        float32x4_t v14 = *((float32x4_t *)a2 + 6);
        float32x4_t v15 = (float32x4_t)vbslq_s8(v13, *(int8x16_t *)(v5 + v12), (int8x16_t)vminq_f32(*(float32x4_t *)(v5 + v12), (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(v5 + v12), 3)));
        float32x4_t v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v14);
        float32x4_t v17 = vrecpeq_f32(v16);
        float32x4_t v18 = vmulq_f32(v17, vrecpsq_f32(v17, v16));
        float32x4_t v19 = vmulq_f32(vmulq_f32(v18, vrecpsq_f32(v18, v16)), v15);
        float32x4_t v20 = *((float32x4_t *)a2 + 32);
        float32x4_t v21 = vmaxq_f32(v19, v20);
        float32x4_t v22 = *((float32x4_t *)a2 + 29);
        float32x4_t v23 = vmulq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)a2);
        float32x4_t v24 = (float32x4_t)vbslq_s8(v13, (int8x16_t)v23, (int8x16_t)vminq_f32(v23, (float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 3)));
        float32x4_t v25 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3), v14);
        float32x4_t v26 = vrecpeq_f32(v25);
        float32x4_t v27 = vmulq_f32(v26, vrecpsq_f32(v26, v25));
        float32x4_t v28 = vminq_f32(vmaxq_f32(vmulq_f32(v24, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v27, vrecpsq_f32(v27, v25))), (int8x16_t)v20)), *((float32x4_t *)a2 + 4)), *((float32x4_t *)a2 + 3));
        float32x4_t v29 = *((float32x4_t *)a2 + 13);
        float32x4_t v30 = *((float32x4_t *)a2 + 61);
        float32x4_t v31 = *((float32x4_t *)a2 + 62);
        float32x4_t v32 = vaddq_f32(v29, vmulq_f32(vminq_f32(v21, v22), v30));
        float32x4_t v33 = vcvtq_f32_s32(vcvtq_s32_f32(v32));
        float32x4_t v34 = vmulq_f32(v31, vsubq_f32(v33, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v33, v32))));
        float32x4_t v35 = vaddq_f32(v29, vmulq_f32(v28, v30));
        float32x4_t v36 = vcvtq_f32_s32(vcvtq_s32_f32(v35));
        float32x4_t v37 = (float32x4_t)vbslq_s8(v13, (int8x16_t)v28, (int8x16_t)vmulq_f32(v31, vsubq_f32(v36, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v36, v35)))));
        float32x4_t v38 = vsubq_f32(v22, v34);
        float32x4_t v39 = vmaxq_f32(v37, v31);
        float32x4_t v40 = *((float32x4_t *)a2 + 27);
        float32x4_t v41 = *((float32x4_t *)a2 + 28);
        float32x4_t v42 = vminq_f32(vmaxq_f32(vrecpeq_f32(v39), v40), v41);
        float32x4_t v43 = vminq_f32(vmaxq_f32(vmulq_f32(v42, vrecpsq_f32(v39, v42)), v40), v41);
        float32x4_t v44 = vmulq_f32(vsubq_f32(v39, vmulq_laneq_f32(v38, v31, 3)), vmulq_f32(v43, vrecpsq_f32(v39, v43)));
        float32x4_t v45 = vmulq_f32(v29, v38);
        float32x4_t v46 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(vmulq_laneq_f32(v29, v24, 3), v24));
        float32x4_t v47 = vmulq_f32(v46, vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v37, v45), (int8x16_t)v22, (int8x16_t)0), v44));
        float32x4_t v48 = vsubq_f32(v22, v46);
        float32x4_t v49 = vminq_f32(v48, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(vaddq_f32(v29, v45), v37)));
        float32x4_t v50 = vmaxq_f32(vsubq_f32(v22, v37), v31);
        float32x4_t v51 = vaddq_f32(v50, v50);
        float32x4_t v52 = vminq_f32(vmaxq_f32(vrecpeq_f32(v51), v40), v41);
        float32x4_t v53 = vminq_f32(vmaxq_f32(vmulq_f32(v52, vrecpsq_f32(v51, v52)), v40), v41);
        float32x4_t v54 = vaddq_f32(vmulq_f32(v48, (float32x4_t)vbslq_s8((int8x16_t)vcgeq_f32(vnegq_f32(v49), *((float32x4_t *)a2 + 63)), (int8x16_t)v22, (int8x16_t)0)), vaddq_f32(v47, vmulq_f32(v49, vmulq_f32(v34, vmulq_f32(v53, vrecpsq_f32(v51, v53))))));
        v54.i32[3] = 1.0;
        *(float32x4_t *)(v7 + v12) = vaddq_f32(vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v13, (int8x16_t)v54, (int8x16_t)vaddq_f32(vmulq_laneq_f32(vsubq_f32(v54, v37), v15, 3), v37)), v15), v37, 3), v15);
        v12 += 16;
      }
      while (v11 != v12);
      ++v4;
      v5 += v8;
      v6 += v9;
      v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t GetBlendVividLightPOWTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 12);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v12 = 0;
      do
      {
        float32x4_t v13 = *(float32x4_t *)(v5 + v12);
        float32x4_t v14 = *((float32x4_t *)a2 + 6);
        float32x4_t v15 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
        float32x4_t v16 = vrecpeq_f32(v15);
        float32x4_t v17 = vmulq_f32(v16, vrecpsq_f32(v16, v15));
        float32x4_t v18 = vmulq_f32(v13, vmulq_f32(v17, vrecpsq_f32(v17, v15)));
        float32x4_t v19 = *((float32x4_t *)a2 + 32);
        float32x4_t v20 = vmaxq_f32(v18, v19);
        float32x4_t v21 = *((float32x4_t *)a2 + 29);
        float32x4_t v22 = *((float32x4_t *)a2 + 1);
        int8x16_t v23 = (int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vceqq_f32(v22, v19)), v19);
        float32x4_t v24 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v21, (int8x16_t)vminq_f32(v20, v21));
        float32x4_t v25 = *((float32x4_t *)a2 + 9);
        int8x16_t v104 = *((int8x16_t *)a2 + 8);
        float32x4_t v26 = (float32x4_t)vorrq_s8(vandq_s8(v104, (int8x16_t)v24), (int8x16_t)v21);
        int8x16_t v28 = *((int8x16_t *)a2 + 10);
        float32x4_t v27 = *((float32x4_t *)a2 + 11);
        float32x4_t v29 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v24, 0x17uLL)), (float32x4_t)vandq_s8(v28, (int8x16_t)vcgtq_f32(v25, v24))), v27);
        float32x4_t v31 = *((float32x4_t *)a2 + 12);
        float32x4_t v30 = *((float32x4_t *)a2 + 13);
        float32x4_t v32 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v26, v31));
        float32x4_t v33 = vaddq_f32(v29, v32);
        float32x4_t v34 = vsubq_f32(vsubq_f32(v26, v21), vmulq_f32(vmulq_f32(v30, v32), v26));
        float32x4_t v35 = vmulq_f32(v34, v34);
        float32x4_t v36 = *((float32x4_t *)a2 + 64);
        float32x4_t v37 = *((float32x4_t *)a2 + 65);
        float32x4_t v38 = *((float32x4_t *)a2 + 66);
        float32x4_t v39 = *((float32x4_t *)a2 + 67);
        float32x4_t v40 = *((float32x4_t *)a2 + 68);
        float32x4_t v41 = *((float32x4_t *)a2 + 69);
        float32x4_t v42 = vaddq_f32(vaddq_f32(v40, vmulq_f32(v41, v34)), vmulq_f32(v35, vaddq_f32(vaddq_f32(v36, vmulq_f32(v37, v34)), vmulq_f32(v35, vaddq_f32(v38, vmulq_f32(v39, v34))))));
        float32x4_t v43 = *((float32x4_t *)a2 + 70);
        float32x4_t v44 = vmulq_f32(v22, vaddq_f32(v33, vmulq_f32(v34, vaddq_f32(v43, vmulq_f32(v34, v42)))));
        float32x4_t v45 = *((float32x4_t *)a2 + 18);
        float32x4_t v46 = vmaxq_f32(v44, v45);
        float32x4_t v47 = vcvtq_f32_s32(vcvtq_s32_f32(v46));
        float32x4_t v48 = vsubq_f32(v47, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v47, v46)));
        float32x4_t v49 = vsubq_f32(v46, v48);
        float32x4_t v50 = *((float32x4_t *)a2 + 71);
        float32x4_t v51 = *((float32x4_t *)a2 + 72);
        float32x4_t v52 = *((float32x4_t *)a2 + 73);
        float32x4_t v53 = *((float32x4_t *)a2 + 74);
        float32x4_t v54 = *((float32x4_t *)a2 + 75);
        int32x4_t v55 = vcvtq_s32_f32(v48);
        int32x4_t v56 = *((int32x4_t *)a2 + 22);
        float32x4_t v57 = vmulq_f32(vaddq_f32(v21, vmulq_f32(v49, vaddq_f32(v54, vmulq_f32(v49, vaddq_f32(vaddq_f32(v52, vmulq_f32(v53, v49)), vmulq_f32(vmulq_f32(v49, v49), vaddq_f32(v50, vmulq_f32(v51, v49)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v56, v55), 0x17uLL));
        float32x4_t v58 = vmulq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)a2);
        float32x4_t v59 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 3), v14);
        float32x4_t v60 = vrecpeq_f32(v59);
        float32x4_t v61 = vmulq_f32(v60, vrecpsq_f32(v60, v59));
        float32x4_t v62 = vmulq_f32(v58, vmulq_f32(v61, vrecpsq_f32(v61, v59)));
        float32x4_t v63 = (float32x4_t)vbslq_s8(v23, (int8x16_t)v21, (int8x16_t)vminq_f32(vmaxq_f32(v62, v19), v21));
        float32x4_t v64 = (float32x4_t)vorrq_s8(vandq_s8(v104, (int8x16_t)v63), (int8x16_t)v21);
        float32x4_t v65 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v64, v31));
        float32x4_t v66 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v63, 0x17uLL)), (float32x4_t)vandq_s8(v28, (int8x16_t)vcgtq_f32(v25, v63))), v27), v65);
        float32x4_t v67 = vsubq_f32(vsubq_f32(v64, v21), vmulq_f32(vmulq_f32(v30, v65), v64));
        float32x4_t v68 = vmulq_f32(v67, v67);
        float32x4_t v69 = vmaxq_f32(vmulq_f32(v22, vaddq_f32(v66, vmulq_f32(v67, vaddq_f32(v43, vmulq_f32(v67, vaddq_f32(vaddq_f32(v40, vmulq_f32(v41, v67)), vmulq_f32(v68, vaddq_f32(vaddq_f32(v36, vmulq_f32(v37, v67)), vmulq_f32(v68, vaddq_f32(v38, vmulq_f32(v39, v67))))))))))), v45);
        float32x4_t v70 = vcvtq_f32_s32(vcvtq_s32_f32(v69));
        float32x4_t v71 = vsubq_f32(v70, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v70, v69)));
        float32x4_t v72 = vsubq_f32(v69, v71);
        float32x4_t v73 = vmulq_f32(vaddq_f32(v21, vmulq_f32(v72, vaddq_f32(v54, vmulq_f32(v72, vaddq_f32(vaddq_f32(v52, vmulq_f32(v53, v72)), vmulq_f32(vmulq_f32(v72, v72), vaddq_f32(v50, vmulq_f32(v51, v72)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v71), v56), 0x17uLL));
        float32x4_t v74 = *((float32x4_t *)a2 + 62);
        float32x4_t v75 = vmaxq_f32(v73, v74);
        float32x4_t v76 = *((float32x4_t *)a2 + 27);
        float32x4_t v77 = *((float32x4_t *)a2 + 28);
        float32x4_t v78 = vminq_f32(vmaxq_f32(vrecpeq_f32(v75), v76), v77);
        float32x4_t v79 = vminq_f32(vmaxq_f32(vmulq_f32(v78, vrecpsq_f32(v75, v78)), v76), v77);
        float32x4_t v80 = vmulq_f32(v79, vrecpsq_f32(v75, v79));
        float32x4_t v81 = *((float32x4_t *)a2 + 55);
        float32x4_t v82 = vaddq_f32(v81, vmulq_f32(v73, *((float32x4_t *)a2 + 60)));
        float32x4_t v83 = vmaxq_f32(v82, v74);
        float32x4_t v84 = vminq_f32(vmaxq_f32(vrecpeq_f32(v83), v76), v77);
        float32x4_t v85 = vminq_f32(vmaxq_f32(vmulq_f32(v84, vrecpsq_f32(v83, v84)), v76), v77);
        int8x16_t v86 = (int8x16_t)vmulq_f32(v57, vmulq_f32(v85, vrecpsq_f32(v83, v85)));
        float32x4_t v87 = vsubq_f32(v73, vmulq_laneq_f32(vsubq_f32(v21, v57), v54, 3));
        float32x4_t v88 = vmulq_f32(v80, v87);
        float32x4_t v89 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v87, v19));
        int8x16_t v90 = (int8x16_t)vcgtq_f32(v19, vsubq_f32(v73, vaddq_f32(v21, vmulq_f32(v57, *((float32x4_t *)a2 + 76)))));
        float32x4_t v91 = vmaxq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgeq_f32(v74, v89)), v19), (int8x16_t)v19, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgeq_f32(v74, v82)), v19), (int8x16_t)v21, vbslq_s8(v90, vbslq_s8((int8x16_t)vcgtq_f32(vminq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgeq_f32(v73, v30)), (float32x4_t)vandq_s8(v90, (int8x16_t)v21)),
                                                  v19),
                                     v86,
                                     (int8x16_t)vmulq_f32(v88, vminq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v30, v73)), v89))), (int8x16_t)v81))), v19);
        float32x4_t v92 = *((float32x4_t *)a2 + 2);
        float32x4_t v93 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vceqq_f32(v92, v19)), v19), (int8x16_t)v21, (int8x16_t)vminq_f32(v91, v21));
        float32x4_t v94 = (float32x4_t)vorrq_s8(vandq_s8(v104, (int8x16_t)v93), (int8x16_t)v21);
        float32x4_t v95 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v94, v31));
        float32x4_t v96 = vsubq_f32(vsubq_f32(v94, v21), vmulq_f32(vmulq_f32(v30, v95), v94));
        float32x4_t v97 = vmulq_f32(v96, v96);
        float32x4_t v98 = vmaxq_f32(vmulq_f32(v92, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v93, 0x17uLL)), (float32x4_t)vandq_s8(v28, (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 9), v93))), *((float32x4_t *)a2 + 11)), v95), vmulq_f32(v96, vaddq_f32(v43, vmulq_f32(v96, vaddq_f32(vaddq_f32(v40, vmulq_f32(v41, v96)), vmulq_f32(
                              v97,
                              vaddq_f32(vaddq_f32(v36, vmulq_f32(v37, v96)), vmulq_f32(v97, vaddq_f32(v38, vmulq_f32(v39, v96))))))))))), v45);
        float32x4_t v99 = vcvtq_f32_s32(vcvtq_s32_f32(v98));
        float32x4_t v100 = vsubq_f32(v99, (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_f32(v99, v98)));
        float32x4_t v101 = vsubq_f32(v98, v100);
        float32x4_t v102 = vmulq_f32(vaddq_f32(v21, vmulq_f32(v101, vaddq_f32(v54, vmulq_f32(v101, vaddq_f32(vaddq_f32(v52, vmulq_f32(v53, v101)), vmulq_f32(vmulq_f32(v101, v101), vaddq_f32(v50, vmulq_f32(v51, v101)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v100), v56), 0x17uLL));
        v102.i32[3] = 1.0;
        *(float32x4_t *)(v7 + v12) = vaddq_f32(*(float32x4_t *)(v5 + v12), vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v102, (int8x16_t)vaddq_f32(v62, vmulq_laneq_f32(vsubq_f32(v102, v62), *(float32x4_t *)(v5 + v12), 3))), *(float32x4_t *)(v5 + v12)), v58, 3));
        v12 += 16;
      }
      while (v11 != v12);
      ++v4;
      v5 += v8;
      v6 += v9;
      v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t GetBlendVividLightQTTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 12);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v12 = 0;
      do
      {
        float32x4_t v13 = *(float32x4_t *)(v5 + v12);
        float32x4_t v14 = *((float32x4_t *)a2 + 6);
        float32x4_t v15 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
        float32x4_t v17 = *((float32x4_t *)a2 + 7);
        int8x16_t v16 = *((int8x16_t *)a2 + 8);
        float32x4_t v18 = vmulq_f32(vrecpeq_f32(v15), v17);
        float32x4_t v19 = vmulq_f32(v13, vmulq_f32(v18, vrecpsq_f32(v18, v15)));
        float32x4_t v20 = *((float32x4_t *)a2 + 32);
        float32x4_t v21 = vmaxq_f32(v19, v20);
        float32x4_t v22 = *((float32x4_t *)a2 + 29);
        float32x4_t v23 = vminq_f32(v21, v22);
        float32x4_t v24 = (float32x4_t)vorrq_s8(vandq_s8(v16, (int8x16_t)v23), (int8x16_t)v22);
        float32x4_t v25 = *((float32x4_t *)a2 + 9);
        int8x16_t v26 = *((int8x16_t *)a2 + 10);
        float32x4_t v28 = *((float32x4_t *)a2 + 11);
        float32x4_t v27 = *((float32x4_t *)a2 + 12);
        float32x4_t v29 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v24, v27));
        float32x4_t v30 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v23, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v25, v23))), v28), v29);
        float32x4_t v32 = *((float32x4_t *)a2 + 13);
        float32x4_t v31 = *((float32x4_t *)a2 + 14);
        float32x4_t v33 = vsubq_f32(vsubq_f32(v24, v22), vmulq_f32(vmulq_f32(v32, v29), v24));
        float32x4_t v35 = *((float32x4_t *)a2 + 15);
        float32x4_t v34 = *((float32x4_t *)a2 + 16);
        float32x4_t v37 = *((float32x4_t *)a2 + 17);
        float32x4_t v36 = *((float32x4_t *)a2 + 18);
        float32x4_t v38 = *((float32x4_t *)a2 + 24);
        float32x4_t v39 = vmaxq_f32(vmulq_f32(v38, vaddq_f32(v30, vmulq_f32(v33, vaddq_f32(vaddq_f32(v34, vmulq_f32(v33, v37)), vmulq_f32(vmulq_f32(v33, v33), vaddq_f32(v31, vmulq_f32(v35, v33))))))), v36);
        float32x4_t v40 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
        float32x4_t v41 = vsubq_f32(v40, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v40, v39)));
        float32x4_t v42 = vsubq_f32(v39, v41);
        float32x4_t v43 = *((float32x4_t *)a2 + 19);
        float32x4_t v44 = *((float32x4_t *)a2 + 20);
        float32x4_t v46 = *((float32x4_t *)a2 + 21);
        int32x4_t v45 = *((int32x4_t *)a2 + 22);
        float32x4_t v47 = vmulq_f32(vaddq_f32(v22, vmulq_f32(v42, vaddq_f32(v46, vmulq_f32(v42, vaddq_f32(v43, vmulq_f32(v44, v42)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v45, vcvtq_s32_f32(v41)), 0x17uLL));
        float32x4_t v48 = vmulq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)a2);
        float32x4_t v49 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 3), v14);
        float32x4_t v50 = vmulq_f32(v17, vrecpeq_f32(v49));
        float32x4_t v51 = vmulq_f32(v48, vmulq_f32(v50, vrecpsq_f32(v50, v49)));
        float32x4_t v52 = vminq_f32(vmaxq_f32(v51, v20), v22);
        float32x4_t v53 = (float32x4_t)vorrq_s8(vandq_s8(v16, (int8x16_t)v52), (int8x16_t)v22);
        float32x4_t v54 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v53, v27));
        float32x4_t v55 = vsubq_f32(vsubq_f32(v53, v22), vmulq_f32(vmulq_f32(v32, v54), v53));
        float32x4_t v56 = vmaxq_f32(vmulq_f32(v38, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v52, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v25, v52))), v28), v54), vmulq_f32(v55, vaddq_f32(vaddq_f32(v34, vmulq_f32(v37, v55)), vmulq_f32(vmulq_f32(v55, v55), vaddq_f32(v31, vmulq_f32(v35, v55))))))), v36);
        float32x4_t v57 = vcvtq_f32_s32(vcvtq_s32_f32(v56));
        float32x4_t v58 = vsubq_f32(v57, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v57, v56)));
        float32x4_t v59 = vsubq_f32(v56, v58);
        float32x4_t v60 = vmulq_f32(vaddq_f32(v22, vmulq_f32(v59, vaddq_f32(v46, vmulq_f32(v59, vaddq_f32(v43, vmulq_f32(v44, v59)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v58), v45), 0x17uLL));
        float32x4_t v61 = *((float32x4_t *)a2 + 62);
        float32x4_t v62 = vmaxq_f32(v60, v61);
        float32x4_t v63 = *((float32x4_t *)a2 + 27);
        float32x4_t v64 = *((float32x4_t *)a2 + 28);
        float32x4_t v65 = vminq_f32(vmaxq_f32(vmulq_f32(v17, vrecpeq_f32(v62)), v63), v64);
        float32x4_t v66 = vmulq_f32(v65, vrecpsq_f32(v62, v65));
        float32x4_t v67 = *((float32x4_t *)a2 + 55);
        float32x4_t v68 = vaddq_f32(v67, vmulq_f32(v60, *((float32x4_t *)a2 + 60)));
        float32x4_t v69 = vmaxq_f32(v68, v61);
        float32x4_t v70 = vminq_f32(vmaxq_f32(vmulq_f32(v17, vrecpeq_f32(v69)), v63), v64);
        float32x4_t v71 = vmulq_f32(v70, vrecpsq_f32(v69, v70));
        float32x4_t v72 = *((float32x4_t *)a2 + 76);
        float32x4_t v73 = vsubq_f32(v60, vmulq_laneq_f32(vsubq_f32(v22, v47), v72, 3));
        float32x4_t v74 = vmulq_f32(v66, v73);
        float32x4_t v75 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v73, v20));
        int8x16_t v76 = (int8x16_t)vcgtq_f32(v20, vsubq_f32(v60, vaddq_f32(v22, vmulq_f32(v47, v72))));
        float32x4_t v77 = vminq_f32(vmaxq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgeq_f32(v61, v75)), v20), (int8x16_t)v20, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgeq_f32(v61, v68)), v20), (int8x16_t)v22, vbslq_s8(v76, vbslq_s8((int8x16_t)vcgtq_f32(vminq_f32((float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgeq_f32(v60, v32)),
                                                      (float32x4_t)vandq_s8(v76, (int8x16_t)v22)),
                                                    v20),
                                       (int8x16_t)vmulq_f32(v47, v71),
                                       (int8x16_t)vmulq_f32(v74, vminq_f32((float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v32, v60)), v75))), (int8x16_t)v67))), v20), v22);
        float32x4_t v78 = (float32x4_t)vorrq_s8(vandq_s8(v16, (int8x16_t)v77), (int8x16_t)v22);
        float32x4_t v79 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v78, v27));
        float32x4_t v80 = vsubq_f32(vsubq_f32(v78, v22), vmulq_f32(vmulq_f32(v32, v79), v78));
        float32x4_t v81 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 25), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v77, 0x17uLL)), (float32x4_t)vandq_s8(v26, (int8x16_t)vcgtq_f32(v25, v77))), v28), v79), vmulq_f32(v80, vaddq_f32(vaddq_f32(v34, vmulq_f32(v37, v80)), vmulq_f32(vmulq_f32(v80, v80), vaddq_f32(v31, vmulq_f32(v35, v80))))))), v36);
        float32x4_t v82 = vcvtq_f32_s32(vcvtq_s32_f32(v81));
        float32x4_t v83 = vsubq_f32(v82, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v82, v81)));
        float32x4_t v84 = vsubq_f32(v81, v83);
        float32x4_t v85 = vmulq_f32(vaddq_f32(v22, vmulq_f32(v84, vaddq_f32(v46, vmulq_f32(v84, vaddq_f32(v43, vmulq_f32(v44, v84)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v83), v45), 0x17uLL));
        v85.i32[3] = 1.0;
        *(float32x4_t *)(v7 + v12) = vaddq_f32(v13, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v85, (int8x16_t)vaddq_f32(v51, vmulq_laneq_f32(vsubq_f32(v85, v51), v13, 3))), v13), v48, 3));
        v12 += 16;
      }
      while (v11 != v12);
      ++v4;
      v5 += v8;
      v6 += v9;
      v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t GetBlendLinearLightTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 10);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 26);
    while (v5 < 3)
    {
      LODWORD(v51) = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      v8 += v9;
      v6 += v10;
      v7 += v11;
      if (v4 == v3) {
        return 0;
      }
    }
    int v12 = 0;
    uint64_t v13 = 32;
    do
    {
      float32x4_t v14 = *(float32x4_t *)(v8 + v13 - 32);
      float32x4_t v15 = *(float32x4_t *)(v8 + v13 - 16);
      float32x4_t v16 = *(float32x4_t *)(v8 + v13);
      int8x16_t v18 = *((int8x16_t *)a2 + 5);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v17);
      float32x4_t v20 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v17);
      float32x4_t v21 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3), v17);
      float32x4_t v22 = *((float32x4_t *)a2 + 7);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v19), v22);
      float32x4_t v24 = vmulq_f32(vrecpeq_f32(v20), v22);
      float32x4_t v25 = vmulq_f32(vrecpeq_f32(v21), v22);
      float32x4_t v26 = vmulq_f32(*(float32x4_t *)(v7 + v13 - 32), *(float32x4_t *)a2);
      float32x4_t v27 = vmulq_f32(*(float32x4_t *)(v7 + v13 - 16), *(float32x4_t *)a2);
      float32x4_t v28 = vmulq_f32(*(float32x4_t *)(v7 + v13), *(float32x4_t *)a2);
      float32x4_t v29 = vmulq_f32(v23, vrecpsq_f32(v23, v19));
      float32x4_t v30 = vmulq_f32(v24, vrecpsq_f32(v24, v20));
      float32x4_t v31 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 3), v17);
      float32x4_t v32 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 3), v17);
      float32x4_t v33 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 3), v17);
      float32x4_t v34 = vmulq_f32(v25, vrecpsq_f32(v25, v21));
      float32x4_t v35 = vmulq_f32(v22, vrecpeq_f32(v31));
      float32x4_t v36 = vmulq_f32(v22, vrecpeq_f32(v32));
      float32x4_t v37 = vmulq_f32(v22, vrecpeq_f32(v33));
      int8x16_t v38 = (int8x16_t)vmulq_f32(v36, vrecpsq_f32(v36, v32));
      int8x16_t v39 = (int8x16_t)vmulq_f32(v37, vrecpsq_f32(v37, v33));
      int8x16_t v40 = *((int8x16_t *)a2 + 31);
      float32x4_t v41 = *((float32x4_t *)a2 + 32);
      float32x4_t v42 = vmulq_f32(v26, (float32x4_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vmulq_f32(v35, vrecpsq_f32(v35, v31))), (int8x16_t)v41));
      float32x4_t v43 = vmulq_f32(v27, (float32x4_t)vorrq_s8(vandq_s8(v40, v38), (int8x16_t)v41));
      float32x4_t v44 = vmulq_f32(v28, (float32x4_t)vorrq_s8(vandq_s8(v40, v39), (int8x16_t)v41));
      float32x4_t v45 = *((float32x4_t *)a2 + 29);
      float32x4_t v46 = *((float32x4_t *)a2 + 60);
      float32x4_t v47 = vminq_f32(vmaxq_f32(vsubq_f32(vmulq_f32(v14, v29), vaddq_f32(v45, vmulq_f32(v46, v42))), v41), v45);
      float32x4_t v48 = vminq_f32(vmaxq_f32(vsubq_f32(vmulq_f32(v15, v30), vaddq_f32(v45, vmulq_f32(v46, v43))), v41), v45);
      float32x4_t v49 = vminq_f32(vmaxq_f32(vsubq_f32(vmulq_f32(v16, v34), vaddq_f32(v45, vmulq_f32(v46, v44))), v41), v45);
      v47.i32[3] = 1.0;
      v48.i32[3] = 1.0;
      v49.i32[3] = 1.0;
      float32x4_t v50 = (float32x4_t *)(v6 + v13);
      v50[-2] = vaddq_f32(v14, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)v47, (int8x16_t)vaddq_f32(v42, vmulq_laneq_f32(vsubq_f32(v47, v42), v14, 3))), v14), v42, 3));
      v50[-1] = vaddq_f32(v15, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)v48, (int8x16_t)vaddq_f32(v43, vmulq_laneq_f32(vsubq_f32(v48, v43), v15, 3))), v15), v43, 3));
      *float32x4_t v50 = vaddq_f32(v16, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v18, (int8x16_t)v49, (int8x16_t)vaddq_f32(v44, vmulq_laneq_f32(vsubq_f32(v49, v44), v16, 3))), v16), v44, 3));
      v12 -= 3;
      v13 += 48;
    }
    while (v5 + v12 > 2);
    LODWORD(v51) = -v12;
    if ((int)v51 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v51 = v51;
    do
    {
      float32x4_t v52 = *(float32x4_t *)(v8 + 16 * v51);
      float32x4_t v53 = *((float32x4_t *)a2 + 6);
      float32x4_t v54 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3), v53);
      float32x4_t v55 = vmulq_f32(*(float32x4_t *)(v7 + 16 * v51), *(float32x4_t *)a2);
      float32x4_t v56 = *((float32x4_t *)a2 + 7);
      float32x4_t v57 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3), v53);
      float32x4_t v58 = vmulq_f32(v56, vrecpeq_f32(v57));
      float32x4_t v59 = vmulq_f32(vrecpeq_f32(v54), v56);
      float32x4_t v60 = *((float32x4_t *)a2 + 32);
      float32x4_t v61 = vmulq_f32(v55, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v58, vrecpsq_f32(v58, v57))), (int8x16_t)v60));
      float32x4_t v62 = vminq_f32(vmaxq_f32(vsubq_f32(vmulq_f32(v52, vmulq_f32(v59, vrecpsq_f32(v59, v54))), vaddq_f32(*((float32x4_t *)a2 + 29), vmulq_f32(*((float32x4_t *)a2 + 60), v61))), v60), *((float32x4_t *)a2 + 29));
      v62.i32[3] = 1.0;
      *(float32x4_t *)(v6 + 16 * v51++) = vaddq_f32(v52, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v62, (int8x16_t)vaddq_f32(v61, vmulq_laneq_f32(vsubq_f32(v62, v61), v52, 3))), v52), v61, 3));
    }
    while (v51 < v5);
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendLinearLightPOWTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 10);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 26);
    float v12 = 1.0;
    while (v5 < 2)
    {
      int v118 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v13 = 0;
    uint64_t v14 = 16;
    do
    {
      float32x4_t v15 = *(float32x4_t *)(v8 + v14 - 16);
      float32x4_t v174 = *(float32x4_t *)(v8 + v14);
      int8x16_t v17 = *((int8x16_t *)a2 + 5);
      float32x4_t v16 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v16);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v174, 3), v16);
      float32x4_t v21 = *((float32x4_t *)a2 + 7);
      int8x16_t v20 = *((int8x16_t *)a2 + 8);
      float32x4_t v22 = vmulq_f32(vrecpeq_f32(v18), v21);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v19), v21);
      float32x4_t v24 = vmulq_f32(v15, vmulq_f32(v22, vrecpsq_f32(v22, v18)));
      int8x16_t v25 = *((int8x16_t *)a2 + 31);
      float32x4_t v26 = *((float32x4_t *)a2 + 32);
      float32x4_t v27 = vmulq_f32(v174, vmulq_f32(v23, vrecpsq_f32(v23, v19)));
      float32x4_t v28 = vmaxq_f32(v24, v26);
      float32x4_t v29 = vmaxq_f32(v27, v26);
      float32x4_t v30 = *((float32x4_t *)a2 + 29);
      float32x4_t v31 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v28), (int8x16_t)v30);
      float32x4_t v33 = *((float32x4_t *)a2 + 9);
      int8x16_t v32 = *((int8x16_t *)a2 + 10);
      float32x4_t v34 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v29), (int8x16_t)v30);
      float32x4_t v35 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v28, 0x17uLL)), (float32x4_t)vandq_s8(v32, (int8x16_t)vcgtq_f32(v33, v28)));
      float32x4_t v37 = *((float32x4_t *)a2 + 11);
      float32x4_t v36 = *((float32x4_t *)a2 + 12);
      float32x4_t v38 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v31, v36));
      float32x4_t v39 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v34, v36));
      float32x4_t v40 = vaddq_f32(vsubq_f32(v35, v37), v38);
      float32x4_t v42 = *((float32x4_t *)a2 + 13);
      float32x4_t v41 = *((float32x4_t *)a2 + 14);
      float32x4_t v43 = vmulq_f32(vmulq_f32(v42, v39), v34);
      float32x4_t v44 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v29, 0x17uLL)), (float32x4_t)vandq_s8(v32, (int8x16_t)vcgtq_f32(v33, v29))), v37), v39);
      float32x4_t v45 = vsubq_f32(vsubq_f32(v31, v30), vmulq_f32(vmulq_f32(v42, v38), v31));
      float32x4_t v46 = vsubq_f32(vsubq_f32(v34, v30), v43);
      float32x4_t v48 = *((float32x4_t *)a2 + 15);
      float32x4_t v47 = *((float32x4_t *)a2 + 16);
      float32x4_t v50 = *((float32x4_t *)a2 + 17);
      float32x4_t v49 = *((float32x4_t *)a2 + 18);
      float32x4_t v51 = vaddq_f32(v40, vmulq_f32(v45, vaddq_f32(vaddq_f32(v47, vmulq_f32(v45, v50)), vmulq_f32(vmulq_f32(v45, v45), vaddq_f32(v41, vmulq_f32(v48, v45))))));
      float32x4_t v52 = *((float32x4_t *)a2 + 1);
      float32x4_t v53 = vmulq_f32(v52, vaddq_f32(v44, vmulq_f32(v46, vaddq_f32(vaddq_f32(v47, vmulq_f32(v46, v50)), vmulq_f32(vmulq_f32(v46, v46), vaddq_f32(v41, vmulq_f32(v48, v46)))))));
      float32x4_t v54 = vmulq_f32(*(float32x4_t *)(v7 + v14 - 16), *(float32x4_t *)a2);
      float32x4_t v55 = vmulq_f32(*(float32x4_t *)(v7 + v14), *(float32x4_t *)a2);
      float32x4_t v56 = vmaxq_f32(vmulq_f32(v52, v51), v49);
      float32x4_t v57 = *((float32x4_t *)a2 + 19);
      float32x4_t v58 = *((float32x4_t *)a2 + 20);
      float32x4_t v59 = vmaxq_f32(v53, v49);
      float32x4_t v60 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 3), v16);
      float32x4_t v61 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3), v16);
      float32x4_t v62 = vmulq_f32(v21, vrecpeq_f32(v60));
      float32x4_t v63 = vmulq_f32(v21, vrecpeq_f32(v61));
      int8x16_t v64 = vandq_s8(v25, (int8x16_t)vmulq_f32(v63, vrecpsq_f32(v63, v61)));
      float32x4_t v65 = vcvtq_f32_s32(vcvtq_s32_f32(v56));
      float32x4_t v66 = vmulq_f32(v54, (float32x4_t)vorrq_s8(vandq_s8(v25, (int8x16_t)vmulq_f32(v62, vrecpsq_f32(v62, v60))), (int8x16_t)v26));
      float32x4_t v67 = vmulq_f32(v55, (float32x4_t)vorrq_s8(v64, (int8x16_t)v26));
      float32x4_t v68 = vmaxq_f32(v66, v26);
      float32x4_t v69 = vmaxq_f32(v67, v26);
      float32x4_t v70 = vcvtq_f32_s32(vcvtq_s32_f32(v59));
      float32x4_t v71 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v68), (int8x16_t)v30);
      float32x4_t v72 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v69), (int8x16_t)v30);
      float32x4_t v73 = vsubq_f32(v65, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v65, v56)));
      float32x4_t v74 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v71, v36));
      float32x4_t v75 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v72, v36));
      float32x4_t v76 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v68, 0x17uLL)), (float32x4_t)vandq_s8(v32, (int8x16_t)vcgtq_f32(v33, v68))), v37), v74);
      float32x4_t v77 = vsubq_f32(vsubq_f32(v71, v30), vmulq_f32(vmulq_f32(v42, v74), v71));
      float32x4_t v78 = vsubq_f32(vsubq_f32(v72, v30), vmulq_f32(vmulq_f32(v42, v75), v72));
      float32x4_t v79 = vsubq_f32(v70, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v70, v59)));
      float32x4_t v80 = vsubq_f32(v56, v73);
      float32x4_t v82 = *((float32x4_t *)a2 + 21);
      int32x4_t v81 = *((int32x4_t *)a2 + 22);
      float32x4_t v83 = vaddq_f32(v76, vmulq_f32(v77, vaddq_f32(vaddq_f32(v47, vmulq_f32(v50, v77)), vmulq_f32(vmulq_f32(v77, v77), vaddq_f32(v41, vmulq_f32(v48, v77))))));
      float32x4_t v84 = vsubq_f32(v59, v79);
      float v12 = 1.0;
      float32x4_t v85 = vmulq_f32(vaddq_f32(v30, vmulq_f32(v80, vaddq_f32(v82, vmulq_f32(v80, vaddq_f32(v57, vmulq_f32(v58, v80)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v81, vcvtq_s32_f32(v73)), 0x17uLL));
      float32x4_t v86 = vmaxq_f32(vmulq_f32(v52, v83), v49);
      float32x4_t v87 = vmaxq_f32(vmulq_f32(v52, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v69, 0x17uLL)), (float32x4_t)vandq_s8(v32, (int8x16_t)vcgtq_f32(v33, v69))), v37), v75), vmulq_f32(v78, vaddq_f32(vaddq_f32(v47, vmulq_f32(v50, v78)), vmulq_f32(vmulq_f32(v78, v78), vaddq_f32(v41, vmulq_f32(v48, v78))))))), v49);
      float32x4_t v88 = vcvtq_f32_s32(vcvtq_s32_f32(v86));
      float32x4_t v89 = vcvtq_f32_s32(vcvtq_s32_f32(v87));
      float32x4_t v90 = vsubq_f32(v88, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v88, v86)));
      float32x4_t v91 = vsubq_f32(v89, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v89, v87)));
      float32x4_t v92 = vsubq_f32(v86, v90);
      float32x4_t v93 = vsubq_f32(v87, v91);
      float32x4_t v94 = vmulq_f32(vaddq_f32(v30, vmulq_f32(v92, vaddq_f32(v82, vmulq_f32(v92, vaddq_f32(v57, vmulq_f32(v58, v92)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v90), v81), 0x17uLL));
      float32x4_t v95 = *((float32x4_t *)a2 + 60);
      float32x4_t v96 = vminq_f32(vmaxq_f32(vsubq_f32(v85, vaddq_f32(v30, vmulq_f32(v95, v94))), v26), v30);
      float32x4_t v97 = vminq_f32(vmaxq_f32(vsubq_f32(vmulq_f32(vaddq_f32(v30, vmulq_f32(v84, vaddq_f32(v82, vmulq_f32(v84, vaddq_f32(v57, vmulq_f32(v58, v84)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v81, vcvtq_s32_f32(v79)), 0x17uLL)), vaddq_f32(v30, vmulq_f32(v95, vmulq_f32(vaddq_f32(v30, vmulq_f32(v93, vaddq_f32(v82, vmulq_f32(v93, vaddq_f32(v57, vmulq_f32(v58, v93)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v91), v81), 0x17uLL))))), v26), v30);
      float32x4_t v98 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v96, 0x17uLL)), (float32x4_t)vandq_s8(v32, (int8x16_t)vcgtq_f32(v33, v96)));
      float32x4_t v99 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v96), (int8x16_t)v30);
      float32x4_t v100 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v99, v36));
      float32x4_t v101 = vsubq_f32(vsubq_f32(v99, v30), vmulq_f32(vmulq_f32(v42, v100), v99));
      float32x4_t v102 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v97), (int8x16_t)v30);
      float32x4_t v103 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v102, v36));
      float32x4_t v104 = vsubq_f32(vsubq_f32(v102, v30), vmulq_f32(vmulq_f32(v42, v103), v102));
      float32x4_t v105 = vaddq_f32(vaddq_f32(vsubq_f32(v98, v37), v100), vmulq_f32(v101, vaddq_f32(vaddq_f32(v47, vmulq_f32(v50, v101)), vmulq_f32(vmulq_f32(v101, v101), vaddq_f32(v41, vmulq_f32(v48, v101))))));
      float32x4_t v106 = *((float32x4_t *)a2 + 2);
      float32x4_t v107 = vmaxq_f32(vmulq_f32(v106, v105), v49);
      float32x4_t v108 = vmaxq_f32(vmulq_f32(v106, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v97, 0x17uLL)), (float32x4_t)vandq_s8(v32, (int8x16_t)vcgtq_f32(v33, v97))), v37), v103), vmulq_f32(v104, vaddq_f32(vaddq_f32(v47, vmulq_f32(v50, v104)), vmulq_f32(vmulq_f32(v104, v104), vaddq_f32(v41, vmulq_f32(v48, v104))))))), v49);
      float32x4_t v109 = vcvtq_f32_s32(vcvtq_s32_f32(v107));
      float32x4_t v110 = vcvtq_f32_s32(vcvtq_s32_f32(v108));
      float32x4_t v111 = vsubq_f32(v109, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v109, v107)));
      float32x4_t v112 = vsubq_f32(v110, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v110, v108)));
      float32x4_t v113 = vsubq_f32(v107, v111);
      float32x4_t v114 = vsubq_f32(v108, v112);
      float32x4_t v115 = vmulq_f32(vaddq_f32(v30, vmulq_f32(v113, vaddq_f32(v82, vmulq_f32(v113, vaddq_f32(v57, vmulq_f32(v58, v113)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v111), v81), 0x17uLL));
      v115.i32[3] = 1.0;
      float32x4_t v116 = vmulq_f32(vaddq_f32(v30, vmulq_f32(v114, vaddq_f32(v82, vmulq_f32(v114, vaddq_f32(v57, vmulq_f32(v58, v114)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v112), v81), 0x17uLL));
      v116.i32[3] = 1.0;
      float32x4_t v117 = (float32x4_t *)(v6 + v14);
      v117[-1] = vaddq_f32(*(float32x4_t *)(v8 + v14 - 16), vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v115, (int8x16_t)vaddq_f32(v66, vmulq_laneq_f32(vsubq_f32(v115, v66), *(float32x4_t *)(v8 + v14 - 16), 3))), *(float32x4_t *)(v8 + v14 - 16)), v66, 3));
      *float32x4_t v117 = vaddq_f32(v174, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v116, (int8x16_t)vaddq_f32(v67, vmulq_laneq_f32(vsubq_f32(v116, v67), v174, 3))), v174), v67, 3));
      v13 -= 2;
      v14 += 32;
    }
    while (v5 + v13 > 1);
    int v118 = -v13;
    if (v118 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v119 = 16 * v118;
    float32x4_t v120 = *(float32x4_t *)(v8 + v119);
    float32x4_t v121 = *((float32x4_t *)a2 + 6);
    float32x4_t v122 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v120, 3), v121);
    float32x4_t v123 = *((float32x4_t *)a2 + 7);
    int8x16_t v124 = *((int8x16_t *)a2 + 8);
    float32x4_t v125 = vmulq_f32(vrecpeq_f32(v122), v123);
    float32x4_t v126 = *((float32x4_t *)a2 + 32);
    float32x4_t v127 = vmaxq_f32(vmulq_f32(v120, vmulq_f32(v125, vrecpsq_f32(v125, v122))), v126);
    float32x4_t v128 = *((float32x4_t *)a2 + 29);
    float32x4_t v129 = (float32x4_t)vorrq_s8(vandq_s8(v124, (int8x16_t)v127), (int8x16_t)v128);
    float32x4_t v130 = *((float32x4_t *)a2 + 9);
    int8x16_t v131 = *((int8x16_t *)a2 + 10);
    float32x4_t v132 = *((float32x4_t *)a2 + 11);
    float32x4_t v133 = *((float32x4_t *)a2 + 12);
    float32x4_t v134 = (float32x4_t)vandq_s8((int8x16_t)v128, (int8x16_t)vcgtq_f32(v129, v133));
    float32x4_t v135 = *((float32x4_t *)a2 + 13);
    float32x4_t v136 = *((float32x4_t *)a2 + 14);
    float32x4_t v137 = vsubq_f32(vsubq_f32(v129, v128), vmulq_f32(vmulq_f32(v135, v134), v129));
    float32x4_t v138 = *((float32x4_t *)a2 + 15);
    float32x4_t v139 = *((float32x4_t *)a2 + 16);
    float32x4_t v140 = *((float32x4_t *)a2 + 17);
    float32x4_t v141 = *((float32x4_t *)a2 + 18);
    float32x4_t v142 = vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v127, 0x17uLL)), (float32x4_t)vandq_s8(v131, (int8x16_t)vcgtq_f32(v130, v127))), v132), v134), vmulq_f32(v137, vaddq_f32(vaddq_f32(v139, vmulq_f32(v137, v140)), vmulq_f32(vmulq_f32(v137, v137), vaddq_f32(v136, vmulq_f32(v138, v137))))));
    float32x4_t v143 = *((float32x4_t *)a2 + 1);
    float32x4_t v144 = vmaxq_f32(vmulq_f32(v143, v142), v141);
    float32x4_t v145 = vcvtq_f32_s32(vcvtq_s32_f32(v144));
    float32x4_t v146 = vsubq_f32(v145, (float32x4_t)vandq_s8((int8x16_t)v128, (int8x16_t)vcgtq_f32(v145, v144)));
    float32x4_t v147 = vsubq_f32(v144, v146);
    float32x4_t v148 = *((float32x4_t *)a2 + 19);
    float32x4_t v149 = *((float32x4_t *)a2 + 20);
    float32x4_t v150 = *((float32x4_t *)a2 + 21);
    int32x4_t v151 = *((int32x4_t *)a2 + 22);
    float32x4_t v152 = vmulq_f32(*(float32x4_t *)(v7 + v119), *(float32x4_t *)a2);
    float32x4_t v153 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v152, 3), v121);
    float32x4_t v154 = vmulq_f32(v123, vrecpeq_f32(v153));
    float32x4_t v155 = vmulq_f32(v152, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v154, vrecpsq_f32(v154, v153))), (int8x16_t)v126));
    float32x4_t v156 = vmaxq_f32(v155, v126);
    float32x4_t v157 = (float32x4_t)vorrq_s8(vandq_s8(v124, (int8x16_t)v156), (int8x16_t)v128);
    float32x4_t v158 = (float32x4_t)vandq_s8((int8x16_t)v128, (int8x16_t)vcgtq_f32(v157, v133));
    float32x4_t v159 = vsubq_f32(vsubq_f32(v157, v128), vmulq_f32(vmulq_f32(v135, v158), v157));
    float32x4_t v160 = vmaxq_f32(vmulq_f32(v143, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v156, 0x17uLL)), (float32x4_t)vandq_s8(v131, (int8x16_t)vcgtq_f32(v130, v156))), v132), v158), vmulq_f32(v159, vaddq_f32(vaddq_f32(v139, vmulq_f32(v140, v159)), vmulq_f32(vmulq_f32(v159, v159), vaddq_f32(v136, vmulq_f32(v138, v159))))))), v141);
    float32x4_t v161 = vcvtq_f32_s32(vcvtq_s32_f32(v160));
    float32x4_t v162 = vsubq_f32(v161, (float32x4_t)vandq_s8((int8x16_t)v128, (int8x16_t)vcgtq_f32(v161, v160)));
    float32x4_t v163 = vsubq_f32(v160, v162);
    float32x4_t v164 = vminq_f32(vmaxq_f32(vsubq_f32(vmulq_f32(vaddq_f32(v128, vmulq_f32(v147, vaddq_f32(v150, vmulq_f32(v147, vaddq_f32(v148, vmulq_f32(v149, v147)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v151, vcvtq_s32_f32(v146)), 0x17uLL)), vaddq_f32(v128, vmulq_f32(*((float32x4_t *)a2 + 60), vmulq_f32(vaddq_f32(v128, vmulq_f32(v163, vaddq_f32(v150, vmulq_f32(v163, vaddq_f32(v148, vmulq_f32(v149, v163)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v162), v151), 0x17uLL))))), v126), v128);
    float32x4_t v165 = (float32x4_t)vorrq_s8(vandq_s8(v124, (int8x16_t)v164), (int8x16_t)v128);
    float32x4_t v166 = (float32x4_t)vandq_s8((int8x16_t)v128, (int8x16_t)vcgtq_f32(v165, v133));
    float32x4_t v167 = vsubq_f32(vsubq_f32(v165, v128), vmulq_f32(vmulq_f32(v135, v166), v165));
    float32x4_t v168 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 2), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v164, 0x17uLL)), (float32x4_t)vandq_s8(v131, (int8x16_t)vcgtq_f32(v130, v164))), v132), v166), vmulq_f32(v167, vaddq_f32(vaddq_f32(v139, vmulq_f32(v140, v167)), vmulq_f32(vmulq_f32(v167, v167), vaddq_f32(v136, vmulq_f32(v138, v167))))))), v141);
    float32x4_t v169 = vcvtq_f32_s32(vcvtq_s32_f32(v168));
    float32x4_t v170 = vsubq_f32(v169, (float32x4_t)vandq_s8((int8x16_t)v128, (int8x16_t)vcgtq_f32(v169, v168)));
    float32x4_t v171 = vsubq_f32(v168, v170);
    float32x4_t v172 = vmulq_f32(vaddq_f32(v128, vmulq_f32(v171, vaddq_f32(v150, vmulq_f32(v171, vaddq_f32(v148, vmulq_f32(v149, v171)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v170), v151), 0x17uLL));
    v172.f32[3] = v12;
    *(float32x4_t *)(v6 + v119) = vaddq_f32(v120, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v172, (int8x16_t)vaddq_f32(v155, vmulq_laneq_f32(vsubq_f32(v172, v155), v120, 3))), v120), v155, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendLinearLightQTTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 10);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 26);
    float v12 = 1.0;
    while (v5 < 2)
    {
      int v121 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v13 = 0;
    uint64_t v14 = 16;
    do
    {
      float32x4_t v15 = *(float32x4_t *)(v8 + v14 - 16);
      float32x4_t v178 = *(float32x4_t *)(v8 + v14);
      int8x16_t v17 = *((int8x16_t *)a2 + 5);
      float32x4_t v16 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v16);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v178, 3), v16);
      float32x4_t v21 = *((float32x4_t *)a2 + 7);
      int8x16_t v20 = *((int8x16_t *)a2 + 8);
      float32x4_t v22 = vmulq_f32(vrecpeq_f32(v18), v21);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v19), v21);
      float32x4_t v24 = vmulq_f32(v15, vmulq_f32(v22, vrecpsq_f32(v22, v18)));
      int8x16_t v25 = *((int8x16_t *)a2 + 31);
      float32x4_t v26 = *((float32x4_t *)a2 + 32);
      float32x4_t v28 = *((float32x4_t *)a2 + 23);
      float32x4_t v27 = *((float32x4_t *)a2 + 24);
      float32x4_t v29 = vmaxq_f32(vmulq_f32(v178, vmulq_f32(v23, vrecpsq_f32(v23, v19))), v26);
      float32x4_t v30 = vminq_f32(vmaxq_f32(v24, v26), v28);
      float32x4_t v31 = vminq_f32(v29, v28);
      float32x4_t v32 = *((float32x4_t *)a2 + 29);
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v30), (int8x16_t)v32);
      float32x4_t v34 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v31), (int8x16_t)v32);
      float32x4_t v36 = *((float32x4_t *)a2 + 9);
      int8x16_t v35 = *((int8x16_t *)a2 + 10);
      float32x4_t v38 = *((float32x4_t *)a2 + 11);
      float32x4_t v37 = *((float32x4_t *)a2 + 12);
      float32x4_t v39 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v30))), v38);
      float32x4_t v40 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v33, v37));
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v34, v37));
      float32x4_t v43 = *((float32x4_t *)a2 + 13);
      float32x4_t v42 = *((float32x4_t *)a2 + 14);
      float32x4_t v44 = vaddq_f32(v39, v40);
      float32x4_t v45 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v31, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v31))), v38), v41);
      float32x4_t v46 = vsubq_f32(vsubq_f32(v33, v32), vmulq_f32(vmulq_f32(v43, v40), v33));
      float32x4_t v47 = vsubq_f32(vsubq_f32(v34, v32), vmulq_f32(vmulq_f32(v43, v41), v34));
      float32x4_t v49 = *((float32x4_t *)a2 + 15);
      float32x4_t v48 = *((float32x4_t *)a2 + 16);
      float32x4_t v51 = *((float32x4_t *)a2 + 17);
      float32x4_t v50 = *((float32x4_t *)a2 + 18);
      float32x4_t v52 = vaddq_f32(v44, vmulq_f32(v46, vaddq_f32(vaddq_f32(v48, vmulq_f32(v46, v51)), vmulq_f32(vmulq_f32(v46, v46), vaddq_f32(v42, vmulq_f32(v49, v46))))));
      float32x4_t v53 = vaddq_f32(v45, vmulq_f32(v47, vaddq_f32(vaddq_f32(v48, vmulq_f32(v47, v51)), vmulq_f32(vmulq_f32(v47, v47), vaddq_f32(v42, vmulq_f32(v49, v47))))));
      float32x4_t v54 = *((float32x4_t *)a2 + 19);
      float32x4_t v55 = *((float32x4_t *)a2 + 20);
      float32x4_t v56 = vmulq_f32(*(float32x4_t *)(v7 + v14 - 16), *(float32x4_t *)a2);
      float32x4_t v57 = vmulq_f32(*(float32x4_t *)(v7 + v14), *(float32x4_t *)a2);
      float32x4_t v58 = vmaxq_f32(vmulq_f32(v27, v52), v50);
      float32x4_t v59 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 3), v16);
      float32x4_t v60 = vmaxq_f32(vmulq_f32(v27, v53), v50);
      float32x4_t v61 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3), v16);
      float32x4_t v62 = vmulq_f32(v21, vrecpeq_f32(v59));
      float32x4_t v63 = vmulq_f32(v21, vrecpeq_f32(v61));
      int8x16_t v64 = vandq_s8(v25, (int8x16_t)vmulq_f32(v63, vrecpsq_f32(v63, v61)));
      float32x4_t v65 = vmulq_f32(v56, (float32x4_t)vorrq_s8(vandq_s8(v25, (int8x16_t)vmulq_f32(v62, vrecpsq_f32(v62, v59))), (int8x16_t)v26));
      float32x4_t v66 = vmulq_f32(v57, (float32x4_t)vorrq_s8(v64, (int8x16_t)v26));
      float32x4_t v67 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v68 = vminq_f32(vmaxq_f32(v65, v26), v28);
      float32x4_t v69 = vminq_f32(vmaxq_f32(v66, v26), v28);
      float32x4_t v70 = vcvtq_f32_s32(vcvtq_s32_f32(v60));
      float32x4_t v71 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v68), (int8x16_t)v32);
      float32x4_t v72 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v69), (int8x16_t)v32);
      float32x4_t v73 = vsubq_f32(v67, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v67, v58)));
      float32x4_t v74 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v71, v37));
      float32x4_t v75 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v72, v37));
      float32x4_t v76 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v68, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v68))), v38), v74);
      float32x4_t v77 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v69, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v69))), v38), v75);
      float32x4_t v78 = vsubq_f32(vsubq_f32(v71, v32), vmulq_f32(vmulq_f32(v43, v74), v71));
      float32x4_t v79 = vsubq_f32(vsubq_f32(v72, v32), vmulq_f32(vmulq_f32(v43, v75), v72));
      float32x4_t v80 = vsubq_f32(v70, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v70, v60)));
      float32x4_t v81 = vsubq_f32(v58, v73);
      float32x4_t v83 = *((float32x4_t *)a2 + 21);
      int32x4_t v82 = *((int32x4_t *)a2 + 22);
      float32x4_t v84 = vaddq_f32(v76, vmulq_f32(v78, vaddq_f32(vaddq_f32(v48, vmulq_f32(v51, v78)), vmulq_f32(vmulq_f32(v78, v78), vaddq_f32(v42, vmulq_f32(v49, v78))))));
      float32x4_t v85 = vsubq_f32(v60, v80);
      float v12 = 1.0;
      float32x4_t v86 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v81, vaddq_f32(v83, vmulq_f32(v81, vaddq_f32(v54, vmulq_f32(v55, v81)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v82, vcvtq_s32_f32(v73)), 0x17uLL));
      float32x4_t v87 = vmaxq_f32(vmulq_f32(v27, v84), v50);
      float32x4_t v88 = vmaxq_f32(vmulq_f32(v27, vaddq_f32(v77, vmulq_f32(v79, vaddq_f32(vaddq_f32(v48, vmulq_f32(v51, v79)), vmulq_f32(vmulq_f32(v79, v79), vaddq_f32(v42, vmulq_f32(v49, v79))))))), v50);
      float32x4_t v89 = vcvtq_f32_s32(vcvtq_s32_f32(v87));
      float32x4_t v90 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v85, vaddq_f32(v83, vmulq_f32(v85, vaddq_f32(v54, vmulq_f32(v55, v85)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v82, vcvtq_s32_f32(v80)), 0x17uLL));
      float32x4_t v91 = vcvtq_f32_s32(vcvtq_s32_f32(v88));
      float32x4_t v92 = vsubq_f32(v89, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v89, v87)));
      float32x4_t v93 = vsubq_f32(v91, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v91, v88)));
      float32x4_t v94 = vsubq_f32(v87, v92);
      float32x4_t v95 = vsubq_f32(v88, v93);
      float32x4_t v96 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v94, vaddq_f32(v83, vmulq_f32(v94, vaddq_f32(v54, vmulq_f32(v55, v94)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v92), v82), 0x17uLL));
      float32x4_t v97 = *((float32x4_t *)a2 + 60);
      float32x4_t v98 = vminq_f32(vmaxq_f32(vsubq_f32(v86, vaddq_f32(v32, vmulq_f32(v97, v96))), v26), v32);
      float32x4_t v99 = vminq_f32(vmaxq_f32(vsubq_f32(v90, vaddq_f32(v32, vmulq_f32(v97, vmulq_f32(vaddq_f32(v32, vmulq_f32(v95, vaddq_f32(v83, vmulq_f32(v95, vaddq_f32(v54, vmulq_f32(v55, v95)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v93), v82), 0x17uLL))))), v26), v32);
      float32x4_t v100 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v98, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v98)));
      float32x4_t v101 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v98), (int8x16_t)v32);
      float32x4_t v102 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v101, v37));
      float32x4_t v103 = vaddq_f32(vsubq_f32(v100, v38), v102);
      float32x4_t v104 = vsubq_f32(vsubq_f32(v101, v32), vmulq_f32(vmulq_f32(v43, v102), v101));
      float32x4_t v105 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v99), (int8x16_t)v32);
      float32x4_t v106 = (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v105, v37));
      float32x4_t v107 = vsubq_f32(vsubq_f32(v105, v32), vmulq_f32(vmulq_f32(v43, v106), v105));
      float32x4_t v108 = vaddq_f32(v103, vmulq_f32(v104, vaddq_f32(vaddq_f32(v48, vmulq_f32(v51, v104)), vmulq_f32(vmulq_f32(v104, v104), vaddq_f32(v42, vmulq_f32(v49, v104))))));
      float32x4_t v109 = *((float32x4_t *)a2 + 25);
      float32x4_t v110 = vmaxq_f32(vmulq_f32(v109, v108), v50);
      float32x4_t v111 = vmaxq_f32(vmulq_f32(v109, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v99, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v36, v99))), v38), v106), vmulq_f32(v107, vaddq_f32(vaddq_f32(v48, vmulq_f32(v51, v107)), vmulq_f32(vmulq_f32(v107, v107), vaddq_f32(v42, vmulq_f32(v49, v107))))))), v50);
      float32x4_t v112 = vcvtq_f32_s32(vcvtq_s32_f32(v110));
      float32x4_t v113 = vcvtq_f32_s32(vcvtq_s32_f32(v111));
      float32x4_t v114 = vsubq_f32(v112, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v112, v110)));
      float32x4_t v115 = vsubq_f32(v113, (float32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)vcgtq_f32(v113, v111)));
      float32x4_t v116 = vsubq_f32(v110, v114);
      float32x4_t v117 = vsubq_f32(v111, v115);
      float32x4_t v118 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v116, vaddq_f32(v83, vmulq_f32(v116, vaddq_f32(v54, vmulq_f32(v55, v116)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v114), v82), 0x17uLL));
      v118.i32[3] = 1.0;
      float32x4_t v119 = vmulq_f32(vaddq_f32(v32, vmulq_f32(v117, vaddq_f32(v83, vmulq_f32(v117, vaddq_f32(v54, vmulq_f32(v55, v117)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v115), v82), 0x17uLL));
      v119.i32[3] = 1.0;
      float32x4_t v120 = (float32x4_t *)(v6 + v14);
      v120[-1] = vaddq_f32(*(float32x4_t *)(v8 + v14 - 16), vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v118, (int8x16_t)vaddq_f32(v65, vmulq_laneq_f32(vsubq_f32(v118, v65), *(float32x4_t *)(v8 + v14 - 16), 3))), *(float32x4_t *)(v8 + v14 - 16)), v65, 3));
      *float32x4_t v120 = vaddq_f32(v178, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v119, (int8x16_t)vaddq_f32(v66, vmulq_laneq_f32(vsubq_f32(v119, v66), v178, 3))), v178), v66, 3));
      v13 -= 2;
      v14 += 32;
    }
    while (v5 + v13 > 1);
    int v121 = -v13;
    if (v121 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v122 = 16 * v121;
    float32x4_t v123 = *(float32x4_t *)(v8 + v122);
    float32x4_t v124 = *((float32x4_t *)a2 + 6);
    float32x4_t v125 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v123, 3), v124);
    float32x4_t v127 = *((float32x4_t *)a2 + 7);
    int8x16_t v126 = *((int8x16_t *)a2 + 8);
    float32x4_t v128 = vmulq_f32(vrecpeq_f32(v125), v127);
    float32x4_t v129 = *((float32x4_t *)a2 + 32);
    float32x4_t v130 = *((float32x4_t *)a2 + 23);
    float32x4_t v131 = *((float32x4_t *)a2 + 24);
    float32x4_t v132 = vminq_f32(vmaxq_f32(vmulq_f32(v123, vmulq_f32(v128, vrecpsq_f32(v128, v125))), v129), v130);
    float32x4_t v133 = *((float32x4_t *)a2 + 29);
    float32x4_t v134 = (float32x4_t)vorrq_s8(vandq_s8(v126, (int8x16_t)v132), (int8x16_t)v133);
    float32x4_t v135 = *((float32x4_t *)a2 + 9);
    int8x16_t v136 = *((int8x16_t *)a2 + 10);
    float32x4_t v137 = *((float32x4_t *)a2 + 11);
    float32x4_t v138 = *((float32x4_t *)a2 + 12);
    float32x4_t v139 = (float32x4_t)vandq_s8((int8x16_t)v133, (int8x16_t)vcgtq_f32(v134, v138));
    float32x4_t v140 = *((float32x4_t *)a2 + 13);
    float32x4_t v141 = *((float32x4_t *)a2 + 14);
    float32x4_t v142 = vsubq_f32(vsubq_f32(v134, v133), vmulq_f32(vmulq_f32(v140, v139), v134));
    float32x4_t v143 = *((float32x4_t *)a2 + 15);
    float32x4_t v144 = *((float32x4_t *)a2 + 16);
    float32x4_t v145 = *((float32x4_t *)a2 + 17);
    float32x4_t v146 = *((float32x4_t *)a2 + 18);
    float32x4_t v147 = vmaxq_f32(vmulq_f32(v131, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v132, 0x17uLL)), (float32x4_t)vandq_s8(v136, (int8x16_t)vcgtq_f32(v135, v132))), v137), v139), vmulq_f32(v142, vaddq_f32(vaddq_f32(v144, vmulq_f32(v142, v145)), vmulq_f32(vmulq_f32(v142, v142), vaddq_f32(v141, vmulq_f32(v143, v142))))))), v146);
    float32x4_t v148 = vcvtq_f32_s32(vcvtq_s32_f32(v147));
    float32x4_t v149 = vsubq_f32(v148, (float32x4_t)vandq_s8((int8x16_t)v133, (int8x16_t)vcgtq_f32(v148, v147)));
    float32x4_t v150 = vsubq_f32(v147, v149);
    float32x4_t v151 = *((float32x4_t *)a2 + 19);
    float32x4_t v152 = *((float32x4_t *)a2 + 20);
    float32x4_t v153 = *((float32x4_t *)a2 + 21);
    int32x4_t v154 = *((int32x4_t *)a2 + 22);
    float32x4_t v155 = vmulq_f32(vaddq_f32(v133, vmulq_f32(v150, vaddq_f32(v153, vmulq_f32(v150, vaddq_f32(v151, vmulq_f32(v152, v150)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v154, vcvtq_s32_f32(v149)), 0x17uLL));
    float32x4_t v156 = vmulq_f32(*(float32x4_t *)(v7 + v122), *(float32x4_t *)a2);
    float32x4_t v157 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v156, 3), v124);
    float32x4_t v158 = vmulq_f32(v127, vrecpeq_f32(v157));
    float32x4_t v159 = vmulq_f32(v156, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v158, vrecpsq_f32(v158, v157))), (int8x16_t)v129));
    float32x4_t v160 = vminq_f32(vmaxq_f32(v159, v129), v130);
    float32x4_t v161 = (float32x4_t)vorrq_s8(vandq_s8(v126, (int8x16_t)v160), (int8x16_t)v133);
    float32x4_t v162 = (float32x4_t)vandq_s8((int8x16_t)v133, (int8x16_t)vcgtq_f32(v161, v138));
    float32x4_t v163 = vsubq_f32(vsubq_f32(v161, v133), vmulq_f32(vmulq_f32(v140, v162), v161));
    float32x4_t v164 = vmaxq_f32(vmulq_f32(v131, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v160, 0x17uLL)), (float32x4_t)vandq_s8(v136, (int8x16_t)vcgtq_f32(v135, v160))), v137), v162), vmulq_f32(v163, vaddq_f32(vaddq_f32(v144, vmulq_f32(v145, v163)), vmulq_f32(vmulq_f32(v163, v163), vaddq_f32(v141, vmulq_f32(v143, v163))))))), v146);
    float32x4_t v165 = vcvtq_f32_s32(vcvtq_s32_f32(v164));
    float32x4_t v166 = vsubq_f32(v165, (float32x4_t)vandq_s8((int8x16_t)v133, (int8x16_t)vcgtq_f32(v165, v164)));
    float32x4_t v167 = vsubq_f32(v164, v166);
    float32x4_t v168 = vminq_f32(vmaxq_f32(vsubq_f32(v155, vaddq_f32(v133, vmulq_f32(*((float32x4_t *)a2 + 60), vmulq_f32(vaddq_f32(v133, vmulq_f32(v167, vaddq_f32(v153, vmulq_f32(v167, vaddq_f32(v151, vmulq_f32(v152, v167)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v166), v154), 0x17uLL))))), v129), v133);
    float32x4_t v169 = (float32x4_t)vorrq_s8(vandq_s8(v126, (int8x16_t)v168), (int8x16_t)v133);
    float32x4_t v170 = (float32x4_t)vandq_s8((int8x16_t)v133, (int8x16_t)vcgtq_f32(v169, v138));
    float32x4_t v171 = vsubq_f32(vsubq_f32(v169, v133), vmulq_f32(vmulq_f32(v140, v170), v169));
    float32x4_t v172 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 25), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v168, 0x17uLL)), (float32x4_t)vandq_s8(v136, (int8x16_t)vcgtq_f32(v135, v168))), v137), v170), vmulq_f32(v171, vaddq_f32(vaddq_f32(v144, vmulq_f32(v145, v171)), vmulq_f32(vmulq_f32(v171, v171), vaddq_f32(v141, vmulq_f32(v143, v171))))))), v146);
    float32x4_t v173 = vcvtq_f32_s32(vcvtq_s32_f32(v172));
    float32x4_t v174 = vsubq_f32(v173, (float32x4_t)vandq_s8((int8x16_t)v133, (int8x16_t)vcgtq_f32(v173, v172)));
    float32x4_t v175 = vsubq_f32(v172, v174);
    float32x4_t v176 = vmulq_f32(vaddq_f32(v133, vmulq_f32(v175, vaddq_f32(v153, vmulq_f32(v175, vaddq_f32(v151, vmulq_f32(v152, v175)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v174), v154), 0x17uLL));
    v176.f32[3] = v12;
    *(float32x4_t *)(v6 + v122) = vaddq_f32(v123, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v176, (int8x16_t)vaddq_f32(v159, vmulq_laneq_f32(vsubq_f32(v176, v159), v123, 3))), v123), v159, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendPinLightTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = *((void *)a1 + 12);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v55 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v12 = 0;
    uint64_t v13 = 16;
    do
    {
      float32x4_t v14 = vmulq_f32(*(float32x4_t *)(v8 + v13 - 16), *(float32x4_t *)a2);
      float32x4_t v15 = vmulq_f32(*(float32x4_t *)(v8 + v13), *(float32x4_t *)a2);
      int8x16_t v17 = *((int8x16_t *)a2 + 5);
      float32x4_t v16 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v16);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v16);
      float32x4_t v20 = *((float32x4_t *)a2 + 7);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v18), v20);
      float32x4_t v22 = vmulq_f32(vrecpeq_f32(v19), v20);
      int8x16_t v23 = (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v18));
      int8x16_t v24 = (int8x16_t)vmulq_f32(v22, vrecpsq_f32(v22, v19));
      int8x16_t v25 = *((int8x16_t *)a2 + 31);
      float32x4_t v26 = *((float32x4_t *)a2 + 32);
      int8x16_t v27 = vandq_s8(v25, v24);
      float32x4_t v28 = (float32x4_t)vorrq_s8(vandq_s8(v25, v23), (int8x16_t)v26);
      float32x4_t v29 = *(float32x4_t *)(v7 + v13 - 16);
      float32x4_t v30 = *(float32x4_t *)(v7 + v13);
      float32x4_t v31 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 3), v16);
      float32x4_t v32 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 3), v16);
      float32x4_t v33 = vmulq_f32(v14, v28);
      float32x4_t v34 = vmulq_f32(v20, vrecpeq_f32(v31));
      float32x4_t v35 = vmulq_f32(v20, vrecpeq_f32(v32));
      float32x4_t v36 = vmulq_f32(v15, (float32x4_t)vorrq_s8(v27, (int8x16_t)v26));
      float32x4_t v37 = vmulq_f32(v35, vrecpsq_f32(v35, v32));
      float32x4_t v38 = vmulq_f32(v29, vmulq_f32(v34, vrecpsq_f32(v34, v31)));
      float32x4_t v39 = vmulq_f32(v30, v37);
      float32x4_t v40 = vaddq_f32(v33, v33);
      float32x4_t v41 = vaddq_f32(v36, v36);
      float32x4_t v42 = *((float32x4_t *)a2 + 29);
      float32x4_t v43 = (float32x4_t)vandq_s8((int8x16_t)v42, (int8x16_t)vcgtq_f32(v38, v40));
      float32x4_t v44 = (float32x4_t)vandq_s8((int8x16_t)v42, (int8x16_t)vcgtq_f32(v39, v41));
      float32x4_t v45 = vmulq_f32(v40, v43);
      float32x4_t v46 = vmulq_f32(v41, v44);
      float32x4_t v47 = vsubq_f32(v40, v42);
      float32x4_t v48 = vsubq_f32(v41, v42);
      float32x4_t v49 = (float32x4_t)vandq_s8((int8x16_t)v42, (int8x16_t)vcgeq_f32(v47, v38));
      float32x4_t v50 = vaddq_f32(v45, vmulq_f32(v47, v49));
      float32x4_t v51 = (float32x4_t)vandq_s8((int8x16_t)v42, (int8x16_t)vcgeq_f32(v48, v39));
      float32x4_t v52 = vaddq_f32(v50, vmulq_f32(v38, (float32x4_t)vbslq_s8((int8x16_t)vcgeq_f32(vnegq_f32(vaddq_f32(v43, v49)), v26), (int8x16_t)v42, (int8x16_t)0)));
      v52.i32[3] = 1.0;
      float32x4_t v53 = vaddq_f32(vaddq_f32(vmulq_f32(v48, v51), v46), vmulq_f32(v39, (float32x4_t)vbslq_s8((int8x16_t)vcgeq_f32(vnegq_f32(vaddq_f32(v44, v51)), v26), (int8x16_t)v42, (int8x16_t)0)));
      v53.i32[3] = 1.0;
      float32x4_t v54 = (float32x4_t *)(v6 + v13);
      v54[-1] = vaddq_f32(v29, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v52, (int8x16_t)vaddq_f32(v33, vmulq_laneq_f32(vsubq_f32(v52, v33), v29, 3))), v29), v33, 3));
      *float32x4_t v54 = vaddq_f32(v30, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v53, (int8x16_t)vaddq_f32(v36, vmulq_laneq_f32(vsubq_f32(v53, v36), v30, 3))), v30), v36, 3));
      v12 -= 2;
      v13 += 32;
    }
    while (v5 + v12 > 1);
    int v55 = -v12;
    if (v55 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v56 = 16 * v55;
    float32x4_t v57 = vmulq_f32(*(float32x4_t *)(v8 + v56), *(float32x4_t *)a2);
    float32x4_t v58 = *((float32x4_t *)a2 + 6);
    float32x4_t v59 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3), v58);
    float32x4_t v60 = *((float32x4_t *)a2 + 7);
    float32x4_t v61 = vmulq_f32(vrecpeq_f32(v59), v60);
    float32x4_t v62 = *((float32x4_t *)a2 + 32);
    float32x4_t v63 = (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v61, vrecpsq_f32(v61, v59))), (int8x16_t)v62);
    float32x4_t v64 = *(float32x4_t *)(v7 + v56);
    float32x4_t v65 = vmulq_f32(v57, v63);
    float32x4_t v66 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 3), v58);
    float32x4_t v67 = vmulq_f32(v60, vrecpeq_f32(v66));
    float32x4_t v68 = vmulq_f32(v64, vmulq_f32(v67, vrecpsq_f32(v67, v66)));
    float32x4_t v69 = vaddq_f32(v65, v65);
    float32x4_t v70 = *((float32x4_t *)a2 + 29);
    float32x4_t v71 = (float32x4_t)vandq_s8((int8x16_t)v70, (int8x16_t)vcgtq_f32(v68, v69));
    float32x4_t v72 = vmulq_f32(v69, v71);
    float32x4_t v73 = vsubq_f32(v69, v70);
    float32x4_t v74 = (float32x4_t)vandq_s8((int8x16_t)v70, (int8x16_t)vcgeq_f32(v73, v68));
    float32x4_t v75 = vaddq_f32(vaddq_f32(vmulq_f32(v73, v74), v72), vmulq_f32(v68, (float32x4_t)vbslq_s8((int8x16_t)vcgeq_f32(vnegq_f32(vaddq_f32(v71, v74)), v62), (int8x16_t)v70, (int8x16_t)0)));
    v75.i32[3] = 1.0;
    *(float32x4_t *)(v6 + v56) = vaddq_f32(v64, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v75, (int8x16_t)vaddq_f32(v65, vmulq_laneq_f32(vsubq_f32(v75, v65), v64, 3))), v64), v65, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendPinLightPOWTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = *((void *)a1 + 12);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 22);
    float v12 = 1.0;
    while (v5 < 2)
    {
      int v125 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v13 = 0;
    uint64_t v14 = 16;
    do
    {
      float32x4_t v15 = vmulq_f32(*(float32x4_t *)(v8 + v14 - 16), *(float32x4_t *)a2);
      float32x4_t v16 = vmulq_f32(*(float32x4_t *)(v8 + v14), *(float32x4_t *)a2);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v17);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3), v17);
      float32x4_t v21 = *((float32x4_t *)a2 + 7);
      int8x16_t v20 = *((int8x16_t *)a2 + 8);
      float32x4_t v22 = vmulq_f32(vrecpeq_f32(v18), v21);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v19), v21);
      int8x16_t v24 = (int8x16_t)vmulq_f32(v22, vrecpsq_f32(v22, v18));
      int8x16_t v25 = *((int8x16_t *)a2 + 31);
      float32x4_t v26 = *((float32x4_t *)a2 + 32);
      float32x4_t v27 = vmulq_f32(v15, (float32x4_t)vorrq_s8(vandq_s8(v25, v24), (int8x16_t)v26));
      float32x4_t v187 = vmulq_f32(v16, (float32x4_t)vorrq_s8(vandq_s8(v25, (int8x16_t)vmulq_f32(v23, vrecpsq_f32(v23, v19))), (int8x16_t)v26));
      float32x4_t v28 = vmaxq_f32(v27, v26);
      float32x4_t v29 = vmaxq_f32(v187, v26);
      float32x4_t v30 = *((float32x4_t *)a2 + 29);
      float32x4_t v31 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v28), (int8x16_t)v30);
      float32x4_t v33 = *((float32x4_t *)a2 + 9);
      int8x16_t v32 = *((int8x16_t *)a2 + 10);
      float32x4_t v34 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v29), (int8x16_t)v30);
      float32x4_t v36 = *((float32x4_t *)a2 + 11);
      float32x4_t v35 = *((float32x4_t *)a2 + 12);
      float32x4_t v37 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v31, v35));
      float32x4_t v38 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v34, v35));
      float32x4_t v39 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v28, 0x17uLL)), (float32x4_t)vandq_s8(v32, (int8x16_t)vcgtq_f32(v33, v28))), v36), v37);
      float32x4_t v41 = *((float32x4_t *)a2 + 13);
      float32x4_t v40 = *((float32x4_t *)a2 + 14);
      float32x4_t v42 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v29, 0x17uLL)), (float32x4_t)vandq_s8(v32, (int8x16_t)vcgtq_f32(v33, v29))), v36), v38);
      float32x4_t v43 = vsubq_f32(vsubq_f32(v31, v30), vmulq_f32(vmulq_f32(v41, v37), v31));
      float32x4_t v44 = vsubq_f32(vsubq_f32(v34, v30), vmulq_f32(vmulq_f32(v41, v38), v34));
      float32x4_t v46 = *((float32x4_t *)a2 + 15);
      float32x4_t v45 = *((float32x4_t *)a2 + 16);
      float32x4_t v48 = *((float32x4_t *)a2 + 17);
      float32x4_t v47 = *((float32x4_t *)a2 + 18);
      float32x4_t v49 = *((float32x4_t *)a2 + 1);
      float32x4_t v50 = vmaxq_f32(vmulq_f32(v49, vaddq_f32(v39, vmulq_f32(v43, vaddq_f32(vaddq_f32(v45, vmulq_f32(v43, v48)), vmulq_f32(vmulq_f32(v43, v43), vaddq_f32(v40, vmulq_f32(v46, v43))))))), v47);
      float32x4_t v51 = vmaxq_f32(vmulq_f32(v49, vaddq_f32(v42, vmulq_f32(v44, vaddq_f32(vaddq_f32(v45, vmulq_f32(v44, v48)), vmulq_f32(vmulq_f32(v44, v44), vaddq_f32(v40, vmulq_f32(v46, v44))))))), v47);
      float32x4_t v52 = vcvtq_f32_s32(vcvtq_s32_f32(v50));
      float32x4_t v53 = vcvtq_f32_s32(vcvtq_s32_f32(v51));
      float32x4_t v54 = vsubq_f32(v52, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v52, v50)));
      float32x4_t v55 = vsubq_f32(v53, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v53, v51)));
      float32x4_t v56 = vsubq_f32(v50, v54);
      float32x4_t v57 = *((float32x4_t *)a2 + 19);
      float32x4_t v58 = *((float32x4_t *)a2 + 20);
      float32x4_t v60 = *(float32x4_t *)(v7 + v14 - 16);
      float32x4_t v59 = *(float32x4_t *)(v7 + v14);
      float32x4_t v61 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 3), v17);
      float32x4_t v62 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 3), v17);
      float32x4_t v63 = vmulq_f32(v21, vrecpeq_f32(v61));
      float32x4_t v64 = vmulq_f32(v21, vrecpeq_f32(v62));
      float32x4_t v66 = *((float32x4_t *)a2 + 21);
      int32x4_t v65 = *((int32x4_t *)a2 + 22);
      float32x4_t v67 = vmaxq_f32(vmulq_f32(v60, vmulq_f32(v63, vrecpsq_f32(v63, v61))), v26);
      float32x4_t v68 = vmaxq_f32(vmulq_f32(v59, vmulq_f32(v64, vrecpsq_f32(v64, v62))), v26);
      float32x4_t v69 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v67), (int8x16_t)v30);
      float32x4_t v70 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v68), (int8x16_t)v30);
      float32x4_t v71 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v69, v35));
      float32x4_t v72 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v67, 0x17uLL)), (float32x4_t)vandq_s8(v32, (int8x16_t)vcgtq_f32(v33, v67))), v36), v71);
      float32x4_t v73 = vsubq_f32(vsubq_f32(v69, v30), vmulq_f32(vmulq_f32(v41, v71), v69));
      float32x4_t v74 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v70, v35));
      float32x4_t v75 = vsubq_f32(v51, v55);
      float32x4_t v76 = vsubq_f32(vsubq_f32(v70, v30), vmulq_f32(vmulq_f32(v41, v74), v70));
      float32x4_t v77 = vmaxq_f32(vmulq_f32(v49, vaddq_f32(v72, vmulq_f32(v73, vaddq_f32(vaddq_f32(v45, vmulq_f32(v48, v73)), vmulq_f32(vmulq_f32(v73, v73), vaddq_f32(v40, vmulq_f32(v46, v73))))))), v47);
      float32x4_t v78 = vmaxq_f32(vmulq_f32(v49, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v68, 0x17uLL)), (float32x4_t)vandq_s8(v32, (int8x16_t)vcgtq_f32(v33, v68))), v36), v74), vmulq_f32(v76, vaddq_f32(vaddq_f32(v45, vmulq_f32(v48, v76)), vmulq_f32(vmulq_f32(v76, v76), vaddq_f32(v40, vmulq_f32(v46, v76))))))), v47);
      float32x4_t v79 = vmulq_f32(vaddq_f32(v30, vmulq_f32(v56, vaddq_f32(v66, vmulq_f32(v56, vaddq_f32(v57, vmulq_f32(v58, v56)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v65, vcvtq_s32_f32(v54)), 0x17uLL));
      float32x4_t v80 = vcvtq_f32_s32(vcvtq_s32_f32(v77));
      float32x4_t v81 = vcvtq_f32_s32(vcvtq_s32_f32(v78));
      float32x4_t v82 = vsubq_f32(v80, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v80, v77)));
      float32x4_t v83 = vsubq_f32(v81, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v81, v78)));
      float32x4_t v84 = vmulq_f32(vaddq_f32(v30, vmulq_f32(v75, vaddq_f32(v66, vmulq_f32(v75, vaddq_f32(v57, vmulq_f32(v58, v75)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v65, vcvtq_s32_f32(v55)), 0x17uLL));
      float32x4_t v85 = vsubq_f32(v77, v82);
      float32x4_t v86 = vsubq_f32(v78, v83);
      float32x4_t v87 = vmulq_f32(vaddq_f32(v30, vmulq_f32(v85, vaddq_f32(v66, vmulq_f32(v85, vaddq_f32(v57, vmulq_f32(v58, v85)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v82), v65), 0x17uLL));
      float32x4_t v88 = vaddq_f32(v79, v79);
      float32x4_t v89 = vaddq_f32(v84, v84);
      float32x4_t v90 = vmulq_f32(vaddq_f32(v30, vmulq_f32(v86, vaddq_f32(v66, vmulq_f32(v86, vaddq_f32(v57, vmulq_f32(v58, v86)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v83), v65), 0x17uLL));
      float32x4_t v91 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v87, v88));
      float32x4_t v92 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v90, v89));
      float32x4_t v93 = vsubq_f32(v88, v30);
      float32x4_t v94 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgeq_f32(v93, v87));
      float32x4_t v95 = vaddq_f32(vmulq_f32(v93, v94), vmulq_f32(v88, v91));
      float32x4_t v96 = vsubq_f32(v89, v30);
      float32x4_t v97 = vaddq_f32(v91, v94);
      float32x4_t v98 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgeq_f32(v96, v90));
      float32x4_t v99 = vaddq_f32(vmulq_f32(v96, v98), vmulq_f32(v89, v92));
      int8x16_t v100 = (int8x16_t)vcgeq_f32(vnegq_f32(v97), v26);
      int8x16_t v101 = (int8x16_t)vcgeq_f32(vnegq_f32(vaddq_f32(v92, v98)), v26);
      float v12 = 1.0;
      float32x4_t v102 = vaddq_f32(v95, vmulq_f32(v87, (float32x4_t)vandq_s8((int8x16_t)v30, v100)));
      float32x4_t v103 = vaddq_f32(v99, vmulq_f32(v90, (float32x4_t)vandq_s8((int8x16_t)v30, v101)));
      float32x4_t v104 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v102, 0x17uLL)), (float32x4_t)vandq_s8(v32, (int8x16_t)vcgtq_f32(v33, v102)));
      float32x4_t v105 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v102), (int8x16_t)v30);
      float32x4_t v106 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v105, v35));
      float32x4_t v107 = vsubq_f32(vsubq_f32(v105, v30), vmulq_f32(vmulq_f32(v41, v106), v105));
      float32x4_t v108 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v103), (int8x16_t)v30);
      float32x4_t v109 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v108, v35));
      float32x4_t v110 = vsubq_f32(vsubq_f32(v108, v30), vmulq_f32(vmulq_f32(v41, v109), v108));
      float32x4_t v111 = vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v103, 0x17uLL)), (float32x4_t)vandq_s8(v32, (int8x16_t)vcgtq_f32(v33, v103))), v36), v109), vmulq_f32(v110, vaddq_f32(vaddq_f32(v45, vmulq_f32(v48, v110)), vmulq_f32(vmulq_f32(v110, v110), vaddq_f32(v40, vmulq_f32(v46, v110))))));
      float32x4_t v112 = *((float32x4_t *)a2 + 2);
      float32x4_t v113 = vmaxq_f32(vmulq_f32(v112, vaddq_f32(vaddq_f32(vsubq_f32(v104, v36), v106), vmulq_f32(v107, vaddq_f32(vaddq_f32(v45, vmulq_f32(v48, v107)), vmulq_f32(vmulq_f32(v107, v107), vaddq_f32(v40, vmulq_f32(v46, v107))))))), v47);
      float32x4_t v114 = vmaxq_f32(vmulq_f32(v112, v111), v47);
      float32x4_t v115 = vcvtq_f32_s32(vcvtq_s32_f32(v113));
      float32x4_t v116 = vcvtq_f32_s32(vcvtq_s32_f32(v114));
      float32x4_t v117 = vsubq_f32(v115, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v115, v113)));
      float32x4_t v118 = vsubq_f32(v116, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v116, v114)));
      float32x4_t v119 = vsubq_f32(v113, v117);
      float32x4_t v120 = vsubq_f32(v114, v118);
      float32x4_t v121 = vmulq_f32(vaddq_f32(v30, vmulq_f32(v119, vaddq_f32(v66, vmulq_f32(v119, vaddq_f32(v57, vmulq_f32(v58, v119)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v117), v65), 0x17uLL));
      v121.i32[3] = 1.0;
      float32x4_t v122 = vmulq_f32(vaddq_f32(v30, vmulq_f32(v120, vaddq_f32(v66, vmulq_f32(v120, vaddq_f32(v57, vmulq_f32(v58, v120)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v118), v65), 0x17uLL));
      v122.i32[3] = 1.0;
      int8x16_t v123 = *((int8x16_t *)a2 + 5);
      float32x4_t v124 = (float32x4_t *)(v6 + v14);
      v124[-1] = vaddq_f32(v60, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v123, (int8x16_t)v121, (int8x16_t)vaddq_f32(v27, vmulq_laneq_f32(vsubq_f32(v121, v27), v60, 3))), v60), v27, 3));
      *float32x4_t v124 = vaddq_f32(v59, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v123, (int8x16_t)v122, (int8x16_t)vaddq_f32(v187, vmulq_laneq_f32(vsubq_f32(v122, v187), v59, 3))), v59), v187, 3));
      v13 -= 2;
      v14 += 32;
    }
    while (v5 + v13 > 1);
    int v125 = -v13;
    if (v125 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v126 = 16 * v125;
    float32x4_t v127 = *((float32x4_t *)a2 + 1);
    float32x4_t v128 = vmulq_f32(*(float32x4_t *)(v8 + v126), *(float32x4_t *)a2);
    float32x4_t v129 = *((float32x4_t *)a2 + 6);
    float32x4_t v130 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v128, 3), v129);
    float32x4_t v132 = *((float32x4_t *)a2 + 7);
    int8x16_t v131 = *((int8x16_t *)a2 + 8);
    float32x4_t v133 = vmulq_f32(vrecpeq_f32(v130), v132);
    float32x4_t v134 = *((float32x4_t *)a2 + 32);
    float32x4_t v135 = vmulq_f32(v128, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v133, vrecpsq_f32(v133, v130))), (int8x16_t)v134));
    float32x4_t v136 = vmaxq_f32(v135, v134);
    float32x4_t v137 = *((float32x4_t *)a2 + 29);
    float32x4_t v138 = (float32x4_t)vorrq_s8(vandq_s8(v131, (int8x16_t)v136), (int8x16_t)v137);
    float32x4_t v139 = *((float32x4_t *)a2 + 9);
    int8x16_t v140 = *((int8x16_t *)a2 + 10);
    float32x4_t v141 = *((float32x4_t *)a2 + 11);
    float32x4_t v142 = *((float32x4_t *)a2 + 12);
    float32x4_t v143 = (float32x4_t)vandq_s8((int8x16_t)v137, (int8x16_t)vcgtq_f32(v138, v142));
    float32x4_t v144 = *((float32x4_t *)a2 + 13);
    float32x4_t v145 = *((float32x4_t *)a2 + 14);
    float32x4_t v146 = vsubq_f32(vsubq_f32(v138, v137), vmulq_f32(vmulq_f32(v144, v143), v138));
    float32x4_t v147 = *((float32x4_t *)a2 + 15);
    float32x4_t v148 = *((float32x4_t *)a2 + 16);
    float32x4_t v149 = *((float32x4_t *)a2 + 17);
    float32x4_t v150 = *((float32x4_t *)a2 + 18);
    float32x4_t v151 = vmaxq_f32(vmulq_f32(v127, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v136, 0x17uLL)), (float32x4_t)vandq_s8(v140, (int8x16_t)vcgtq_f32(v139, v136))), v141), v143), vmulq_f32(v146, vaddq_f32(vaddq_f32(v148, vmulq_f32(v146, v149)), vmulq_f32(vmulq_f32(v146, v146), vaddq_f32(v145, vmulq_f32(v147, v146))))))), v150);
    float32x4_t v152 = vcvtq_f32_s32(vcvtq_s32_f32(v151));
    float32x4_t v153 = vsubq_f32(v152, (float32x4_t)vandq_s8((int8x16_t)v137, (int8x16_t)vcgtq_f32(v152, v151)));
    float32x4_t v154 = vsubq_f32(v151, v153);
    float32x4_t v155 = *((float32x4_t *)a2 + 19);
    float32x4_t v156 = *((float32x4_t *)a2 + 20);
    float32x4_t v158 = *((float32x4_t *)a2 + 21);
    int32x4_t v157 = *((int32x4_t *)a2 + 22);
    float32x4_t v159 = vmulq_f32(vaddq_f32(v137, vmulq_f32(v154, vaddq_f32(v158, vmulq_f32(v154, vaddq_f32(v155, vmulq_f32(v156, v154)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v157, vcvtq_s32_f32(v153)), 0x17uLL));
    float32x4_t v160 = *(float32x4_t *)(v7 + v126);
    float32x4_t v161 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v160, 3), v129);
    float32x4_t v162 = vmulq_f32(v132, vrecpeq_f32(v161));
    float32x4_t v163 = vmaxq_f32(vmulq_f32(v160, vmulq_f32(v162, vrecpsq_f32(v162, v161))), v134);
    float32x4_t v164 = (float32x4_t)vorrq_s8(vandq_s8(v131, (int8x16_t)v163), (int8x16_t)v137);
    float32x4_t v165 = (float32x4_t)vandq_s8((int8x16_t)v137, (int8x16_t)vcgtq_f32(v164, v142));
    float32x4_t v166 = vsubq_f32(vsubq_f32(v164, v137), vmulq_f32(vmulq_f32(v144, v165), v164));
    float32x4_t v167 = vmaxq_f32(vmulq_f32(v127, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v163, 0x17uLL)), (float32x4_t)vandq_s8(v140, (int8x16_t)vcgtq_f32(v139, v163))), v141), v165), vmulq_f32(v166, vaddq_f32(vaddq_f32(v148, vmulq_f32(v149, v166)), vmulq_f32(vmulq_f32(v166, v166), vaddq_f32(v145, vmulq_f32(v147, v166))))))), v150);
    float32x4_t v168 = vcvtq_f32_s32(vcvtq_s32_f32(v167));
    float32x4_t v169 = vsubq_f32(v168, (float32x4_t)vandq_s8((int8x16_t)v137, (int8x16_t)vcgtq_f32(v168, v167)));
    float32x4_t v170 = vsubq_f32(v167, v169);
    float32x4_t v171 = vmulq_f32(vaddq_f32(v137, vmulq_f32(v170, vaddq_f32(v158, vmulq_f32(v170, vaddq_f32(v155, vmulq_f32(v156, v170)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v169), v157), 0x17uLL));
    float32x4_t v172 = vaddq_f32(v159, v159);
    float32x4_t v173 = (float32x4_t)vandq_s8((int8x16_t)v137, (int8x16_t)vcgtq_f32(v171, v172));
    float32x4_t v174 = vmulq_f32(v172, v173);
    float32x4_t v175 = vsubq_f32(v172, v137);
    float32x4_t v176 = (float32x4_t)vandq_s8((int8x16_t)v137, (int8x16_t)vcgeq_f32(v175, v171));
    float32x4_t v177 = vaddq_f32(vaddq_f32(vmulq_f32(v175, v176), v174), vmulq_f32(v171, (float32x4_t)vandq_s8((int8x16_t)v137, (int8x16_t)vcgeq_f32(vnegq_f32(vaddq_f32(v173, v176)), v134))));
    float32x4_t v178 = (float32x4_t)vorrq_s8(vandq_s8(v131, (int8x16_t)v177), (int8x16_t)v137);
    float32x4_t v179 = (float32x4_t)vandq_s8((int8x16_t)v137, (int8x16_t)vcgtq_f32(v178, v142));
    float32x4_t v180 = vsubq_f32(vsubq_f32(v178, v137), vmulq_f32(vmulq_f32(v144, v179), v178));
    float32x4_t v181 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 2), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v177, 0x17uLL)), (float32x4_t)vandq_s8(v140, (int8x16_t)vcgtq_f32(v139, v177))), v141), v179), vmulq_f32(v180, vaddq_f32(vaddq_f32(v148, vmulq_f32(v149, v180)), vmulq_f32(vmulq_f32(v180, v180), vaddq_f32(v145, vmulq_f32(v147, v180))))))), v150);
    float32x4_t v182 = vcvtq_f32_s32(vcvtq_s32_f32(v181));
    float32x4_t v183 = vsubq_f32(v182, (float32x4_t)vandq_s8((int8x16_t)v137, (int8x16_t)vcgtq_f32(v182, v181)));
    float32x4_t v184 = vsubq_f32(v181, v183);
    float32x4_t v185 = vmulq_f32(vaddq_f32(v137, vmulq_f32(v184, vaddq_f32(v158, vmulq_f32(v184, vaddq_f32(v155, vmulq_f32(v156, v184)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v183), v157), 0x17uLL));
    v185.f32[3] = v12;
    *(float32x4_t *)(v6 + v126) = vaddq_f32(v160, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v185, (int8x16_t)vaddq_f32(v135, vmulq_laneq_f32(vsubq_f32(v185, v135), v160, 3))), v160), v135, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendPinLightQTTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = *((void *)a1 + 12);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 22);
    float v12 = 1.0;
    while (v5 < 2)
    {
      int v137 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v13 = 0;
    uint64_t v14 = 16;
    do
    {
      float32x4_t v15 = vmulq_f32(*(float32x4_t *)(v8 + v14 - 16), *(float32x4_t *)a2);
      float32x4_t v16 = vmulq_f32(*(float32x4_t *)(v8 + v14), *(float32x4_t *)a2);
      float32x4_t v17 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v17);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3), v17);
      float32x4_t v21 = *((float32x4_t *)a2 + 7);
      int8x16_t v20 = *((int8x16_t *)a2 + 8);
      float32x4_t v22 = vmulq_f32(vrecpeq_f32(v18), v21);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v19), v21);
      int8x16_t v24 = (int8x16_t)vmulq_f32(v22, vrecpsq_f32(v22, v18));
      int8x16_t v25 = (int8x16_t)vmulq_f32(v23, vrecpsq_f32(v23, v19));
      int8x16_t v26 = *((int8x16_t *)a2 + 31);
      float32x4_t v27 = *((float32x4_t *)a2 + 32);
      float32x4_t v28 = vmulq_f32(v15, (float32x4_t)vorrq_s8(vandq_s8(v26, v24), (int8x16_t)v27));
      float32x4_t v29 = vmulq_f32(v16, (float32x4_t)vorrq_s8(vandq_s8(v26, v25), (int8x16_t)v27));
      float32x4_t v31 = *((float32x4_t *)a2 + 23);
      float32x4_t v30 = *((float32x4_t *)a2 + 24);
      float32x4_t v32 = vminq_f32(vmaxq_f32(v28, v27), v31);
      float32x4_t v33 = vminq_f32(vmaxq_f32(v29, v27), v31);
      float32x4_t v34 = *((float32x4_t *)a2 + 29);
      float32x4_t v200 = *((float32x4_t *)a2 + 30);
      float32x4_t v35 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v32), (int8x16_t)v34);
      float32x4_t v37 = *((float32x4_t *)a2 + 9);
      int8x16_t v36 = *((int8x16_t *)a2 + 10);
      float32x4_t v38 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v33), (int8x16_t)v34);
      float32x4_t v40 = *((float32x4_t *)a2 + 11);
      float32x4_t v39 = *((float32x4_t *)a2 + 12);
      float32x4_t v41 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v35, v39));
      float32x4_t v42 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v38, v39));
      float32x4_t v43 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v32, 0x17uLL)), (float32x4_t)vandq_s8(v36, (int8x16_t)vcgtq_f32(v37, v32))), v40), v41);
      float32x4_t v45 = *((float32x4_t *)a2 + 13);
      float32x4_t v44 = *((float32x4_t *)a2 + 14);
      float32x4_t v46 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v33, 0x17uLL)), (float32x4_t)vandq_s8(v36, (int8x16_t)vcgtq_f32(v37, v33))), v40), v42);
      float32x4_t v47 = vsubq_f32(vsubq_f32(v35, v34), vmulq_f32(vmulq_f32(v45, v41), v35));
      float32x4_t v48 = vsubq_f32(vsubq_f32(v38, v34), vmulq_f32(vmulq_f32(v45, v42), v38));
      float32x4_t v50 = *((float32x4_t *)a2 + 15);
      float32x4_t v49 = *((float32x4_t *)a2 + 16);
      float32x4_t v52 = *((float32x4_t *)a2 + 17);
      float32x4_t v51 = *((float32x4_t *)a2 + 18);
      float32x4_t v53 = vmulq_f32(v30, vaddq_f32(v43, vmulq_f32(v47, vaddq_f32(vaddq_f32(v49, vmulq_f32(v47, v52)), vmulq_f32(vmulq_f32(v47, v47), vaddq_f32(v44, vmulq_f32(v50, v47)))))));
      float32x4_t v54 = vmulq_f32(v30, vaddq_f32(v46, vmulq_f32(v48, vaddq_f32(vaddq_f32(v49, vmulq_f32(v48, v52)), vmulq_f32(vmulq_f32(v48, v48), vaddq_f32(v44, vmulq_f32(v50, v48)))))));
      float32x4_t v55 = vmaxq_f32(v53, v51);
      float32x4_t v57 = *(float32x4_t *)(v7 + v14 - 16);
      float32x4_t v56 = *(float32x4_t *)(v7 + v14);
      float32x4_t v58 = vmaxq_f32(v54, v51);
      float32x4_t v59 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3), v17);
      float32x4_t v60 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 3), v17);
      float32x4_t v61 = vmulq_f32(v21, vrecpeq_f32(v59));
      float32x4_t v62 = vmulq_f32(v21, vrecpeq_f32(v60));
      float32x4_t v63 = vmulq_f32(v62, vrecpsq_f32(v62, v60));
      float32x4_t v64 = vmaxq_f32(vmulq_f32(v57, vmulq_f32(v61, vrecpsq_f32(v61, v59))), v27);
      float32x4_t v65 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
      float32x4_t v66 = vminq_f32(v64, v31);
      float32x4_t v67 = vminq_f32(vmaxq_f32(vmulq_f32(v56, v63), v27), v31);
      float32x4_t v68 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
      float32x4_t v69 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v66), (int8x16_t)v34);
      float32x4_t v70 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v67), (int8x16_t)v34);
      float32x4_t v71 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v69, v39));
      float32x4_t v72 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v70, v39));
      float32x4_t v73 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v66, 0x17uLL)), (float32x4_t)vandq_s8(v36, (int8x16_t)vcgtq_f32(v37, v66))), v40), v71);
      float32x4_t v74 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v67, 0x17uLL)), (float32x4_t)vandq_s8(v36, (int8x16_t)vcgtq_f32(v37, v67))), v40), v72);
      float32x4_t v75 = vmulq_f32(vmulq_f32(v45, v71), v69);
      float32x4_t v76 = vsubq_f32(v65, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v65, v55)));
      float32x4_t v77 = vsubq_f32(vsubq_f32(v69, v34), v75);
      float32x4_t v78 = vsubq_f32(vsubq_f32(v70, v34), vmulq_f32(vmulq_f32(v45, v72), v70));
      float32x4_t v79 = vsubq_f32(v68, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v68, v58)));
      float32x4_t v80 = vsubq_f32(v55, v76);
      float32x4_t v81 = *((float32x4_t *)a2 + 19);
      float32x4_t v82 = *((float32x4_t *)a2 + 20);
      float32x4_t v83 = vaddq_f32(v73, vmulq_f32(v77, vaddq_f32(vaddq_f32(v49, vmulq_f32(v52, v77)), vmulq_f32(vmulq_f32(v77, v77), vaddq_f32(v44, vmulq_f32(v50, v77))))));
      float32x4_t v85 = *((float32x4_t *)a2 + 21);
      int32x4_t v84 = *((int32x4_t *)a2 + 22);
      float32x4_t v86 = vsubq_f32(v58, v79);
      float32x4_t v87 = vmaxq_f32(vmulq_f32(v30, v83), v51);
      float32x4_t v88 = vmaxq_f32(vmulq_f32(v30, vaddq_f32(v74, vmulq_f32(v78, vaddq_f32(vaddq_f32(v49, vmulq_f32(v52, v78)), vmulq_f32(vmulq_f32(v78, v78), vaddq_f32(v44, vmulq_f32(v50, v78))))))), v51);
      float32x4_t v89 = vmulq_f32(v86, vaddq_f32(v85, vmulq_f32(v86, vaddq_f32(v81, vmulq_f32(v82, v86)))));
      float32x4_t v90 = vcvtq_f32_s32(vcvtq_s32_f32(v87));
      float32x4_t v91 = vcvtq_f32_s32(vcvtq_s32_f32(v88));
      float32x4_t v92 = vsubq_f32(v90, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v90, v87)));
      float32x4_t v93 = vsubq_f32(v91, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v91, v88)));
      float32x4_t v94 = vmulq_f32(vaddq_f32(v34, vmulq_f32(v80, vaddq_f32(v85, vmulq_f32(v80, vaddq_f32(v81, vmulq_f32(v82, v80)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v84, vcvtq_s32_f32(v76)), 0x17uLL));
      float32x4_t v95 = vsubq_f32(v87, v92);
      float32x4_t v96 = vsubq_f32(v88, v93);
      float32x4_t v97 = vmulq_f32(vaddq_f32(v34, v89), (float32x4_t)vshlq_n_s32(vaddq_s32(v84, vcvtq_s32_f32(v79)), 0x17uLL));
      float32x4_t v98 = vmulq_f32(vaddq_f32(v34, vmulq_f32(v95, vaddq_f32(v85, vmulq_f32(v95, vaddq_f32(v81, vmulq_f32(v82, v95)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v92), v84), 0x17uLL));
      float32x4_t v99 = vmulq_f32(vaddq_f32(v34, vmulq_f32(v96, vaddq_f32(v85, vmulq_f32(v96, vaddq_f32(v81, vmulq_f32(v82, v96)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v93), v84), 0x17uLL));
      float32x4_t v100 = vaddq_f32(v94, v94);
      float32x4_t v101 = vaddq_f32(v97, v97);
      float32x4_t v102 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v98, v100));
      float32x4_t v103 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v99, v101));
      float32x4_t v104 = vmulq_f32(v100, v102);
      float32x4_t v105 = vmulq_f32(v101, v103);
      float32x4_t v106 = vsubq_f32(v100, v34);
      float32x4_t v107 = vsubq_f32(v101, v34);
      float32x4_t v108 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgeq_f32(v106, v98));
      float32x4_t v109 = vaddq_f32(vmulq_f32(v106, v108), v104);
      float32x4_t v110 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgeq_f32(v107, v99));
      float32x4_t v111 = vaddq_f32(vmulq_f32(v107, v110), v105);
      float32x4_t v112 = vaddq_f32(v103, v110);
      float v12 = 1.0;
      float32x4_t v113 = vminq_f32(vmaxq_f32(vaddq_f32(v109, vmulq_f32(v98, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgeq_f32(vnegq_f32(vaddq_f32(v102, v108)), v27)))), v27), v200);
      float32x4_t v114 = vminq_f32(vmaxq_f32(vaddq_f32(v111, vmulq_f32(v99, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgeq_f32(vnegq_f32(v112), v27)))), v27), v200);
      float32x4_t v115 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v113, 0x17uLL)), (float32x4_t)vandq_s8(v36, (int8x16_t)vcgtq_f32(v37, v113)));
      float32x4_t v116 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v113), (int8x16_t)v34);
      float32x4_t v117 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v116, v39));
      float32x4_t v118 = vaddq_f32(vsubq_f32(v115, v40), v117);
      float32x4_t v119 = vsubq_f32(vsubq_f32(v116, v34), vmulq_f32(vmulq_f32(v45, v117), v116));
      float32x4_t v120 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v114), (int8x16_t)v34);
      float32x4_t v121 = (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v120, v39));
      float32x4_t v122 = vsubq_f32(vsubq_f32(v120, v34), vmulq_f32(vmulq_f32(v45, v121), v120));
      float32x4_t v123 = vaddq_f32(v118, vmulq_f32(v119, vaddq_f32(vaddq_f32(v49, vmulq_f32(v52, v119)), vmulq_f32(vmulq_f32(v119, v119), vaddq_f32(v44, vmulq_f32(v50, v119))))));
      float32x4_t v124 = *((float32x4_t *)a2 + 25);
      float32x4_t v125 = vmaxq_f32(vmulq_f32(v124, v123), v51);
      float32x4_t v126 = vmaxq_f32(vmulq_f32(v124, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v114, 0x17uLL)), (float32x4_t)vandq_s8(v36, (int8x16_t)vcgtq_f32(v37, v114))), v40), v121), vmulq_f32(v122, vaddq_f32(vaddq_f32(v49, vmulq_f32(v52, v122)), vmulq_f32(vmulq_f32(v122, v122), vaddq_f32(v44, vmulq_f32(v50, v122))))))), v51);
      float32x4_t v127 = vcvtq_f32_s32(vcvtq_s32_f32(v125));
      float32x4_t v128 = vcvtq_f32_s32(vcvtq_s32_f32(v126));
      float32x4_t v129 = vsubq_f32(v127, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v127, v125)));
      float32x4_t v130 = vsubq_f32(v128, (float32x4_t)vandq_s8((int8x16_t)v34, (int8x16_t)vcgtq_f32(v128, v126)));
      float32x4_t v131 = vsubq_f32(v125, v129);
      float32x4_t v132 = vsubq_f32(v126, v130);
      float32x4_t v133 = vmulq_f32(vaddq_f32(v34, vmulq_f32(v131, vaddq_f32(v85, vmulq_f32(v131, vaddq_f32(v81, vmulq_f32(v82, v131)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v129), v84), 0x17uLL));
      v133.i32[3] = 1.0;
      float32x4_t v134 = vmulq_f32(vaddq_f32(v34, vmulq_f32(v132, vaddq_f32(v85, vmulq_f32(v132, vaddq_f32(v81, vmulq_f32(v82, v132)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v130), v84), 0x17uLL));
      v134.i32[3] = 1.0;
      int8x16_t v135 = *((int8x16_t *)a2 + 5);
      float32x4_t v136 = (float32x4_t *)(v6 + v14);
      v136[-1] = vaddq_f32(v57, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v135, (int8x16_t)v133, (int8x16_t)vaddq_f32(v28, vmulq_laneq_f32(vsubq_f32(v133, v28), v57, 3))), v57), v28, 3));
      *float32x4_t v136 = vaddq_f32(v56, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v135, (int8x16_t)v134, (int8x16_t)vaddq_f32(v29, vmulq_laneq_f32(vsubq_f32(v134, v29), v56, 3))), v56), v29, 3));
      v13 -= 2;
      v14 += 32;
    }
    while (v5 + v13 > 1);
    int v137 = -v13;
    if (v137 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v138 = 16 * v137;
    float32x4_t v139 = vmulq_f32(*(float32x4_t *)(v8 + v138), *(float32x4_t *)a2);
    float32x4_t v140 = *((float32x4_t *)a2 + 6);
    float32x4_t v141 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v139, 3), v140);
    float32x4_t v143 = *((float32x4_t *)a2 + 7);
    int8x16_t v142 = *((int8x16_t *)a2 + 8);
    float32x4_t v144 = vmulq_f32(vrecpeq_f32(v141), v143);
    float32x4_t v145 = *((float32x4_t *)a2 + 32);
    float32x4_t v146 = vmulq_f32(v139, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v144, vrecpsq_f32(v144, v141))), (int8x16_t)v145));
    float32x4_t v147 = *((float32x4_t *)a2 + 23);
    float32x4_t v148 = *((float32x4_t *)a2 + 24);
    float32x4_t v149 = vminq_f32(vmaxq_f32(v146, v145), v147);
    float32x4_t v150 = *((float32x4_t *)a2 + 29);
    float32x4_t v151 = (float32x4_t)vorrq_s8(vandq_s8(v142, (int8x16_t)v149), (int8x16_t)v150);
    float32x4_t v152 = *((float32x4_t *)a2 + 9);
    int8x16_t v153 = *((int8x16_t *)a2 + 10);
    float32x4_t v154 = *((float32x4_t *)a2 + 11);
    float32x4_t v155 = *((float32x4_t *)a2 + 12);
    float32x4_t v156 = (float32x4_t)vandq_s8((int8x16_t)v150, (int8x16_t)vcgtq_f32(v151, v155));
    float32x4_t v157 = *((float32x4_t *)a2 + 13);
    float32x4_t v158 = *((float32x4_t *)a2 + 14);
    float32x4_t v159 = vsubq_f32(vsubq_f32(v151, v150), vmulq_f32(vmulq_f32(v157, v156), v151));
    float32x4_t v160 = *((float32x4_t *)a2 + 15);
    float32x4_t v161 = *((float32x4_t *)a2 + 16);
    float32x4_t v162 = *((float32x4_t *)a2 + 17);
    float32x4_t v163 = *((float32x4_t *)a2 + 18);
    float32x4_t v164 = vmaxq_f32(vmulq_f32(v148, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v149, 0x17uLL)), (float32x4_t)vandq_s8(v153, (int8x16_t)vcgtq_f32(v152, v149))), v154), v156), vmulq_f32(v159, vaddq_f32(vaddq_f32(v161, vmulq_f32(v159, v162)), vmulq_f32(vmulq_f32(v159, v159), vaddq_f32(v158, vmulq_f32(v160, v159))))))), v163);
    float32x4_t v165 = vcvtq_f32_s32(vcvtq_s32_f32(v164));
    float32x4_t v166 = vsubq_f32(v165, (float32x4_t)vandq_s8((int8x16_t)v150, (int8x16_t)vcgtq_f32(v165, v164)));
    float32x4_t v167 = vsubq_f32(v164, v166);
    float32x4_t v168 = *((float32x4_t *)a2 + 19);
    float32x4_t v169 = *((float32x4_t *)a2 + 20);
    float32x4_t v170 = *((float32x4_t *)a2 + 21);
    int32x4_t v171 = *((int32x4_t *)a2 + 22);
    float32x4_t v172 = vmulq_f32(vaddq_f32(v150, vmulq_f32(v167, vaddq_f32(v170, vmulq_f32(v167, vaddq_f32(v168, vmulq_f32(v169, v167)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v171, vcvtq_s32_f32(v166)), 0x17uLL));
    float32x4_t v173 = *(float32x4_t *)(v7 + v138);
    float32x4_t v174 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v173, 3), v140);
    float32x4_t v175 = vmulq_f32(v143, vrecpeq_f32(v174));
    float32x4_t v176 = vminq_f32(vmaxq_f32(vmulq_f32(v173, vmulq_f32(v175, vrecpsq_f32(v175, v174))), v145), v147);
    float32x4_t v177 = (float32x4_t)vorrq_s8(vandq_s8(v142, (int8x16_t)v176), (int8x16_t)v150);
    float32x4_t v178 = (float32x4_t)vandq_s8((int8x16_t)v150, (int8x16_t)vcgtq_f32(v177, v155));
    float32x4_t v179 = vsubq_f32(vsubq_f32(v177, v150), vmulq_f32(vmulq_f32(v157, v178), v177));
    float32x4_t v180 = vmaxq_f32(vmulq_f32(v148, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v176, 0x17uLL)), (float32x4_t)vandq_s8(v153, (int8x16_t)vcgtq_f32(v152, v176))), v154), v178), vmulq_f32(v179, vaddq_f32(vaddq_f32(v161, vmulq_f32(v162, v179)), vmulq_f32(vmulq_f32(v179, v179), vaddq_f32(v158, vmulq_f32(v160, v179))))))), v163);
    float32x4_t v181 = vcvtq_f32_s32(vcvtq_s32_f32(v180));
    float32x4_t v182 = vsubq_f32(v181, (float32x4_t)vandq_s8((int8x16_t)v150, (int8x16_t)vcgtq_f32(v181, v180)));
    float32x4_t v183 = vsubq_f32(v180, v182);
    float32x4_t v184 = vmulq_f32(vaddq_f32(v150, vmulq_f32(v183, vaddq_f32(v170, vmulq_f32(v183, vaddq_f32(v168, vmulq_f32(v169, v183)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v182), v171), 0x17uLL));
    float32x4_t v185 = vaddq_f32(v172, v172);
    float32x4_t v186 = (float32x4_t)vandq_s8((int8x16_t)v150, (int8x16_t)vcgtq_f32(v184, v185));
    float32x4_t v187 = vmulq_f32(v185, v186);
    float32x4_t v188 = vsubq_f32(v185, v150);
    float32x4_t v189 = (float32x4_t)vandq_s8((int8x16_t)v150, (int8x16_t)vcgeq_f32(v188, v184));
    float32x4_t v190 = vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(vmulq_f32(v188, v189), v187), vmulq_f32(v184, (float32x4_t)vandq_s8((int8x16_t)v150, (int8x16_t)vcgeq_f32(vnegq_f32(vaddq_f32(v186, v189)), v145)))), v145), *((float32x4_t *)a2 + 30));
    float32x4_t v191 = (float32x4_t)vorrq_s8(vandq_s8(v142, (int8x16_t)v190), (int8x16_t)v150);
    float32x4_t v192 = (float32x4_t)vandq_s8((int8x16_t)v150, (int8x16_t)vcgtq_f32(v191, v155));
    float32x4_t v193 = vsubq_f32(vsubq_f32(v191, v150), vmulq_f32(vmulq_f32(v157, v192), v191));
    float32x4_t v194 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 25), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v190, 0x17uLL)), (float32x4_t)vandq_s8(v153, (int8x16_t)vcgtq_f32(v152, v190))), v154), v192), vmulq_f32(v193, vaddq_f32(vaddq_f32(v161, vmulq_f32(v162, v193)), vmulq_f32(vmulq_f32(v193, v193), vaddq_f32(v158, vmulq_f32(v160, v193))))))), v163);
    float32x4_t v195 = vcvtq_f32_s32(vcvtq_s32_f32(v194));
    float32x4_t v196 = vsubq_f32(v195, (float32x4_t)vandq_s8((int8x16_t)v150, (int8x16_t)vcgtq_f32(v195, v194)));
    float32x4_t v197 = vsubq_f32(v194, v196);
    float32x4_t v198 = vmulq_f32(vaddq_f32(v150, vmulq_f32(v197, vaddq_f32(v170, vmulq_f32(v197, vaddq_f32(v168, vmulq_f32(v169, v197)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v196), v171), 0x17uLL));
    v198.f32[3] = v12;
    *(float32x4_t *)(v6 + v138) = vaddq_f32(v173, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v198, (int8x16_t)vaddq_f32(v146, vmulq_laneq_f32(vsubq_f32(v198, v146), v173, 3))), v173), v146, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendHardMixTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 10);
    uint64_t v9 = 16 * *((int *)a1 + 22);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 26);
    while (v5 < 2)
    {
      int v80 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v12 = 0;
    uint64_t v13 = 16;
    do
    {
      float32x4_t v14 = *(float32x4_t *)(v8 + v13 - 16);
      float32x4_t v15 = *(float32x4_t *)(v8 + v13);
      int8x16_t v17 = *((int8x16_t *)a2 + 5);
      float32x4_t v16 = *((float32x4_t *)a2 + 6);
      float32x4_t v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v16);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v16);
      float32x4_t v20 = *((float32x4_t *)a2 + 7);
      float32x4_t v21 = vmulq_f32(vrecpeq_f32(v18), v20);
      float32x4_t v22 = vmulq_f32(vrecpeq_f32(v19), v20);
      float32x4_t v23 = vmulq_f32(v21, vrecpsq_f32(v21, v18));
      float32x4_t v24 = vmulq_f32(*(float32x4_t *)(v7 + v13 - 16), *(float32x4_t *)a2);
      float32x4_t v25 = vmulq_f32(v22, vrecpsq_f32(v22, v19));
      float32x4_t v26 = vmulq_f32(*(float32x4_t *)(v7 + v13), *(float32x4_t *)a2);
      float32x4_t v27 = vmulq_f32(v14, v23);
      float32x4_t v28 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3), v16);
      float32x4_t v29 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 3), v16);
      float32x4_t v30 = vmulq_f32(v20, vrecpeq_f32(v28));
      float32x4_t v31 = vmulq_f32(v15, v25);
      float32x4_t v32 = vmulq_f32(v20, vrecpeq_f32(v29));
      int8x16_t v33 = (int8x16_t)vmulq_f32(v30, vrecpsq_f32(v30, v28));
      int8x16_t v34 = (int8x16_t)vmulq_f32(v32, vrecpsq_f32(v32, v29));
      int8x16_t v36 = *((int8x16_t *)a2 + 31);
      float32x4_t v35 = *((float32x4_t *)a2 + 32);
      float32x4_t v37 = vmulq_f32(v24, (float32x4_t)vorrq_s8(vandq_s8(v36, v33), (int8x16_t)v35));
      float32x4_t v38 = vmulq_f32(v26, (float32x4_t)vorrq_s8(vandq_s8(v36, v34), (int8x16_t)v35));
      float32x4_t v39 = *((float32x4_t *)a2 + 29);
      float32x4_t v40 = *((float32x4_t *)a2 + 77);
      float32x4_t v41 = vmulq_f32(vsubq_f32(v39, v27), v40);
      float32x4_t v42 = vmulq_f32(vsubq_f32(v39, v31), v40);
      float32x4_t v43 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
      float32x4_t v44 = vcvtq_f32_s32(vcvtq_s32_f32(v42));
      float32x4_t v45 = vsubq_f32(v43, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v43, v41)));
      float32x4_t v46 = *((float32x4_t *)a2 + 78);
      float32x4_t v47 = vmulq_f32(v46, v45);
      float32x4_t v48 = vmulq_f32(v46, vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v44, v42))));
      long long v49 = *((_OWORD *)a2 + 79);
      float32x4_t v50 = vsubq_f32(v47, vmulq_n_f32(v27, *(float *)&v49));
      float32x4_t v51 = vsubq_f32(v48, vmulq_n_f32(v31, *(float *)&v49));
      float32x4_t v52 = vmulq_lane_f32(*((float32x4_t *)a2 + 80), *(float32x2_t *)&v49, 1);
      float32x4_t v53 = vsubq_f32(v50, v52);
      float32x4_t v54 = vsubq_f32(v51, v52);
      float32x4_t v55 = *((float32x4_t *)a2 + 81);
      float32x4_t v56 = vmulq_f32(v47, v55);
      float32x4_t v57 = vmulq_f32(v55, v48);
      float32x4_t v58 = (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgeq_f32(v37, v53));
      float32x4_t v59 = (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgeq_f32(v38, v54));
      float32x4_t v60 = *((float32x4_t *)a2 + 82);
      float32x4_t v61 = vmulq_f32(v60, vsubq_f32(v37, v53));
      float32x4_t v62 = vmulq_f32(v60, vsubq_f32(v38, v54));
      float32x4_t v63 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
      float32x4_t v64 = vcvtq_f32_s32(vcvtq_s32_f32(v62));
      float32x4_t v65 = vsubq_f32(v63, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v63, v61)));
      float32x4_t v66 = *((float32x4_t *)a2 + 83);
      float32x4_t v67 = vmulq_f32(vminq_f32(v59, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v57, v38))), vmulq_f32(v66, vsubq_f32(v64, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v64, v62)))));
      float32x4_t v68 = *((float32x4_t *)a2 + 84);
      float32x4_t v69 = vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgeq_f32(v37, v56)), vmulq_f32(vminq_f32(v58, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v56, v37))), vmulq_f32(v66, v65)));
      float32x4_t v70 = vminq_f32((float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v68, v27)), v58);
      float32x4_t v71 = vminq_f32((float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v68, v31)), v59);
      float32x4_t v72 = *((float32x4_t *)a2 + 85);
      float32x4_t v73 = vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgeq_f32(v38, v57)), v67);
      float32x4_t v74 = vminq_f32(vmulq_f32(v70, vmulq_f32(v27, v72)), v69);
      float32x4_t v75 = vmulq_f32(v69, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgeq_f32(vnegq_f32(v70), v35)));
      float32x4_t v76 = *((float32x4_t *)a2 + 86);
      float32x4_t v77 = vmaxq_f32(vmulq_f32(vminq_f32((float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgeq_f32(v27, v76)), (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(vminq_f32(v56, v39), v37))), vmulq_f32(v72, vsubq_f32(v27, v76))), vaddq_f32(v75, v74));
      v77.i32[3] = 1.0;
      float32x4_t v78 = vmaxq_f32(vmulq_f32(vmulq_f32(v72, vsubq_f32(v31, v76)), vminq_f32((float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgeq_f32(v31, v76)), (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(vminq_f32(v57, v39), v38)))), vaddq_f32(vmulq_f32(v73, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgeq_f32(vnegq_f32(v71), v35))), vminq_f32(vmulq_f32(v71, vmulq_f32(v31, v72)), v73)));
      v78.i32[3] = 1.0;
      float32x4_t v79 = (float32x4_t *)(v6 + v13);
      v79[-1] = vaddq_f32(v14, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v77, (int8x16_t)vaddq_f32(v37, vmulq_laneq_f32(vsubq_f32(v77, v37), v14, 3))), v14), v37, 3));
      *float32x4_t v79 = vaddq_f32(v15, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v78, (int8x16_t)vaddq_f32(v38, vmulq_laneq_f32(vsubq_f32(v78, v38), v15, 3))), v15), v38, 3));
      v12 -= 2;
      v13 += 32;
    }
    while (v5 + v12 > 1);
    int v80 = -v12;
    if (v80 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v81 = 16 * v80;
    float32x4_t v82 = *(float32x4_t *)(v8 + v81);
    float32x4_t v83 = *((float32x4_t *)a2 + 6);
    float32x4_t v84 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 3), v83);
    float32x4_t v85 = *((float32x4_t *)a2 + 7);
    float32x4_t v86 = vmulq_f32(vrecpeq_f32(v84), v85);
    float32x4_t v87 = vmulq_f32(v86, vrecpsq_f32(v86, v84));
    float32x4_t v88 = vmulq_f32(*(float32x4_t *)(v7 + v81), *(float32x4_t *)a2);
    float32x4_t v89 = vmulq_f32(v82, v87);
    float32x4_t v90 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 3), v83);
    float32x4_t v91 = vmulq_f32(v85, vrecpeq_f32(v90));
    float32x4_t v92 = *((float32x4_t *)a2 + 32);
    float32x4_t v93 = vmulq_f32(v88, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v91, vrecpsq_f32(v91, v90))), (int8x16_t)v92));
    float32x4_t v94 = *((float32x4_t *)a2 + 29);
    float32x4_t v95 = vmulq_f32(vsubq_f32(v94, v89), *((float32x4_t *)a2 + 77));
    float32x4_t v96 = vcvtq_f32_s32(vcvtq_s32_f32(v95));
    float32x4_t v97 = vmulq_f32(*((float32x4_t *)a2 + 78), vsubq_f32(v96, (float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vcgtq_f32(v96, v95))));
    float32x4_t v98 = vsubq_f32(vsubq_f32(v97, vmulq_n_f32(v89, COERCE_FLOAT(*((_OWORD *)a2 + 79)))), vmulq_lane_f32(*((float32x4_t *)a2 + 80), *(float32x2_t *)((char *)a2 + 1264), 1));
    float32x4_t v99 = (float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vcgeq_f32(v93, v98));
    float32x4_t v100 = vmulq_f32(*((float32x4_t *)a2 + 81), v97);
    float32x4_t v101 = vmulq_f32(*((float32x4_t *)a2 + 82), vsubq_f32(v93, v98));
    float32x4_t v102 = vcvtq_f32_s32(vcvtq_s32_f32(v101));
    float32x4_t v103 = vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vcgeq_f32(v93, v100)), vmulq_f32(vminq_f32(v99, (float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vcgtq_f32(v100, v93))), vmulq_f32(*((float32x4_t *)a2 + 83), vsubq_f32(v102, (float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vcgtq_f32(v102, v101))))));
    float32x4_t v104 = vminq_f32((float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vcgtq_f32(*((float32x4_t *)a2 + 84), v89)), v99);
    float32x4_t v105 = vmaxq_f32(vmulq_f32(vminq_f32((float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vcgeq_f32(v89, *((float32x4_t *)a2 + 86))), (float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vcgtq_f32(vminq_f32(v100, v94), v93))), vmulq_f32(*((float32x4_t *)a2 + 85), vsubq_f32(v89, *((float32x4_t *)a2 + 86)))), vaddq_f32(vminq_f32(vmulq_f32(v104, vmulq_f32(v89, *((float32x4_t *)a2 + 85))), v103), vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vcgeq_f32(vnegq_f32(v104), v92)), v103)));
    v105.i32[3] = 1.0;
    *(float32x4_t *)(v6 + v81) = vaddq_f32(v82, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v105, (int8x16_t)vaddq_f32(v93, vmulq_laneq_f32(vsubq_f32(v105, v93), v82, 3))), v82), v93, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendHardMixPOWTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = *((void *)a1 + 12);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v113 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v12 = 0;
    uint64_t v13 = 16;
    do
    {
      float32x4_t v14 = *((float32x4_t *)a2 + 1);
      float32x4_t v15 = vmulq_f32(*(float32x4_t *)(v8 + v13 - 16), *(float32x4_t *)a2);
      float32x4_t v16 = vmulq_f32(*(float32x4_t *)(v8 + v13), *(float32x4_t *)a2);
      int8x16_t v17 = *((int8x16_t *)a2 + 5);
      float32x4_t v18 = *((float32x4_t *)a2 + 6);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v18);
      float32x4_t v20 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3), v18);
      float32x4_t v22 = *((float32x4_t *)a2 + 7);
      int8x16_t v21 = *((int8x16_t *)a2 + 8);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v19), v22);
      float32x4_t v24 = vmulq_f32(vrecpeq_f32(v20), v22);
      float32x4_t v25 = vmulq_f32(v23, vrecpsq_f32(v23, v19));
      float32x4_t v26 = vmulq_f32(v24, vrecpsq_f32(v24, v20));
      float32x4_t v27 = vmulq_f32(v15, v25);
      float32x4_t v28 = vmulq_f32(v16, v26);
      float32x4_t v29 = *((float32x4_t *)a2 + 32);
      float32x4_t v30 = *((float32x4_t *)a2 + 29);
      float32x4_t v31 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v15, (int8x16_t)vminq_f32(vmaxq_f32(v27, v29), v30));
      float32x4_t v32 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v16, (int8x16_t)vminq_f32(vmaxq_f32(v28, v29), v30));
      float32x4_t v33 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v31, v21), (int8x16_t)v30);
      float32x4_t v34 = *((float32x4_t *)a2 + 9);
      int8x16_t v35 = *((int8x16_t *)a2 + 10);
      float32x4_t v36 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v32, v21), (int8x16_t)v30);
      float32x4_t v38 = *((float32x4_t *)a2 + 11);
      float32x4_t v37 = *((float32x4_t *)a2 + 12);
      float32x4_t v39 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v33, v37));
      float32x4_t v40 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v36, v37));
      float32x4_t v41 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v31, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v34, v31))), v38), v39);
      float32x4_t v43 = *((float32x4_t *)a2 + 13);
      float32x4_t v42 = *((float32x4_t *)a2 + 14);
      float32x4_t v44 = vmulq_f32(v43, v40);
      float32x4_t v45 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v32, 0x17uLL)), (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v34, v32))), v38), v40);
      float32x4_t v46 = vmulq_f32(vmulq_f32(v43, v39), v33);
      float32x4_t v47 = vmulq_f32(v44, v36);
      float32x4_t v48 = vsubq_f32(vsubq_f32(v33, v30), v46);
      float32x4_t v49 = vsubq_f32(vsubq_f32(v36, v30), v47);
      float32x4_t v51 = *((float32x4_t *)a2 + 15);
      float32x4_t v50 = *((float32x4_t *)a2 + 16);
      float32x4_t v53 = *((float32x4_t *)a2 + 17);
      float32x4_t v52 = *((float32x4_t *)a2 + 18);
      float32x4_t v54 = vmaxq_f32(vmulq_f32(v14, vaddq_f32(v41, vmulq_f32(v48, vaddq_f32(vaddq_f32(v50, vmulq_f32(v48, v53)), vmulq_f32(vmulq_f32(v48, v48), vaddq_f32(v42, vmulq_f32(v51, v48))))))), v52);
      float32x4_t v55 = vmaxq_f32(vmulq_f32(v14, vaddq_f32(v45, vmulq_f32(v49, vaddq_f32(vaddq_f32(v50, vmulq_f32(v49, v53)), vmulq_f32(vmulq_f32(v49, v49), vaddq_f32(v42, vmulq_f32(v51, v49))))))), v52);
      float32x4_t v56 = vcvtq_f32_s32(vcvtq_s32_f32(v54));
      float32x4_t v57 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
      float32x4_t v59 = *(float32x4_t *)(v7 + v13 - 16);
      float32x4_t v58 = *(float32x4_t *)(v7 + v13);
      float32x4_t v60 = vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v56, v54)));
      float32x4_t v61 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 3), v18);
      float32x4_t v62 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 3), v18);
      float32x4_t v63 = vmulq_f32(v22, vrecpeq_f32(v61));
      float32x4_t v64 = vsubq_f32(v57, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v57, v55)));
      float32x4_t v65 = vmulq_f32(v22, vrecpeq_f32(v62));
      float32x4_t v66 = vmulq_f32(v63, vrecpsq_f32(v63, v61));
      float32x4_t v67 = *((float32x4_t *)a2 + 19);
      float32x4_t v68 = *((float32x4_t *)a2 + 20);
      float32x4_t v69 = vsubq_f32(v54, v60);
      float32x4_t v70 = vmulq_f32(v65, vrecpsq_f32(v65, v62));
      float32x4_t v71 = vsubq_f32(v55, v64);
      float32x4_t v72 = vminq_f32(vmaxq_f32(vmulq_f32(v59, v66), v29), v30);
      float32x4_t v73 = vminq_f32(vmaxq_f32(vmulq_f32(v58, v70), v29), v30);
      float32x4_t v74 = (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v34, v72));
      float32x4_t v75 = (float32x4_t)vandq_s8(v35, (int8x16_t)vcgtq_f32(v34, v73));
      float32x4_t v76 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v72), (int8x16_t)v30);
      float32x4_t v77 = (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)v73), (int8x16_t)v30);
      float32x4_t v78 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v73, 0x17uLL)), v75);
      float32x4_t v79 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v72, 0x17uLL)), v74), v38);
      float32x4_t v80 = vsubq_f32(v78, v38);
      float32x4_t v81 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v76, v37));
      float32x4_t v82 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v77, v37));
      float32x4_t v83 = vaddq_f32(v80, v82);
      float32x4_t v84 = vmulq_f32(v43, v82);
      float32x4_t v85 = vsubq_f32(vsubq_f32(v76, v30), vmulq_f32(vmulq_f32(v43, v81), v76));
      float32x4_t v87 = *((float32x4_t *)a2 + 21);
      int32x4_t v86 = *((int32x4_t *)a2 + 22);
      float32x4_t v88 = vsubq_f32(vsubq_f32(v77, v30), vmulq_f32(v84, v77));
      float32x4_t v89 = vaddq_f32(v42, vmulq_f32(v51, v85));
      float32x4_t v90 = vaddq_f32(v83, vmulq_f32(v88, vaddq_f32(vaddq_f32(v50, vmulq_f32(v53, v88)), vmulq_f32(vmulq_f32(v88, v88), vaddq_f32(v42, vmulq_f32(v51, v88))))));
      float32x4_t v91 = vmulq_f32(v14, vaddq_f32(vaddq_f32(v79, v81), vmulq_f32(v85, vaddq_f32(vaddq_f32(v50, vmulq_f32(v53, v85)), vmulq_f32(vmulq_f32(v85, v85), v89)))));
      float32x4_t v92 = vmulq_f32(v14, v90);
      float32x4_t v93 = vmaxq_f32(v91, v52);
      float32x4_t v94 = vmaxq_f32(v92, v52);
      float32x4_t v95 = vcvtq_f32_s32(vcvtq_s32_f32(v93));
      float32x4_t v96 = vcvtq_f32_s32(vcvtq_s32_f32(v94));
      float32x4_t v97 = vsubq_f32(v95, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v95, v93)));
      float32x4_t v98 = vsubq_f32(v96, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v96, v94)));
      float32x4_t v99 = vsubq_f32(v93, v97);
      float32x4_t v100 = vsubq_f32(v94, v98);
      float32x4_t v101 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v15, (int8x16_t)vmulq_f32(vaddq_f32(v30, vmulq_f32(v69, vaddq_f32(v87, vmulq_f32(v69, vaddq_f32(v67, vmulq_f32(v68, v69)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v86, vcvtq_s32_f32(v60)), 0x17uLL)));
      float32x4_t v102 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v16, (int8x16_t)vmulq_f32(vaddq_f32(v30, vmulq_f32(v71, vaddq_f32(v87, vmulq_f32(v71, vaddq_f32(v67, vmulq_f32(v68, v71)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v86, vcvtq_s32_f32(v64)), 0x17uLL)));
      float32x4_t v103 = vmulq_f32(vaddq_f32(v30, vmulq_f32(v99, vaddq_f32(v87, vmulq_f32(v99, vaddq_f32(v67, vmulq_f32(v68, v99)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v97), v86), 0x17uLL));
      float32x4_t v104 = vmulq_f32(vaddq_f32(v30, vmulq_f32(v100, vaddq_f32(v87, vmulq_f32(v100, vaddq_f32(v67, vmulq_f32(v68, v100)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v98), v86), 0x17uLL));
      int8x16_t v105 = vandq_s8((int8x16_t)v30, (int8x16_t)vcgeq_f32(v101, vsubq_f32(v30, v103)));
      float32x4_t v106 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgeq_f32(v29, v103));
      int8x16_t v107 = vandq_s8((int8x16_t)v30, (int8x16_t)vcgeq_f32(v102, vsubq_f32(v30, v104)));
      float32x4_t v108 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgeq_f32(v101, v30));
      float32x4_t v109 = vminq_f32((float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgeq_f32(v29, v104)), (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgeq_f32(v102, v30)));
      float32x4_t v110 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(vminq_f32(v106, v108), v29), (int8x16_t)v29, v105);
      v110.i32[3] = 1.0;
      float32x4_t v111 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v109, v29), (int8x16_t)v29, v107);
      v111.i32[3] = 1.0;
      float32x4_t v112 = (float32x4_t *)(v6 + v13);
      v112[-1] = vaddq_f32(v59, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v110, (int8x16_t)vaddq_f32(v27, vmulq_laneq_f32(vsubq_f32(v110, v27), v59, 3))), v59), v101, 3));
      *float32x4_t v112 = vaddq_f32(v58, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v17, (int8x16_t)v111, (int8x16_t)vaddq_f32(v28, vmulq_laneq_f32(vsubq_f32(v111, v28), v58, 3))), v58), v102, 3));
      v12 -= 2;
      v13 += 32;
    }
    while (v5 + v12 > 1);
    int v113 = -v12;
    if (v113 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v114 = 16 * v113;
    float32x4_t v115 = *((float32x4_t *)a2 + 1);
    float32x4_t v116 = vmulq_f32(*(float32x4_t *)(v8 + v114), *(float32x4_t *)a2);
    int8x16_t v117 = *((int8x16_t *)a2 + 5);
    float32x4_t v118 = *((float32x4_t *)a2 + 6);
    float32x4_t v119 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 3), v118);
    float32x4_t v120 = *((float32x4_t *)a2 + 7);
    int8x16_t v121 = *((int8x16_t *)a2 + 8);
    float32x4_t v122 = vmulq_f32(vrecpeq_f32(v119), v120);
    float32x4_t v123 = vmulq_f32(v116, vmulq_f32(v122, vrecpsq_f32(v122, v119)));
    float32x4_t v124 = *((float32x4_t *)a2 + 32);
    float32x4_t v125 = *((float32x4_t *)a2 + 29);
    float32x4_t v126 = (float32x4_t)vbslq_s8(v117, (int8x16_t)v116, (int8x16_t)vminq_f32(vmaxq_f32(v123, v124), v125));
    float32x4_t v127 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v126, v121), (int8x16_t)v125);
    float32x4_t v128 = *((float32x4_t *)a2 + 9);
    int8x16_t v129 = *((int8x16_t *)a2 + 10);
    float32x4_t v130 = *((float32x4_t *)a2 + 11);
    float32x4_t v131 = *((float32x4_t *)a2 + 12);
    float32x4_t v132 = (float32x4_t)vandq_s8((int8x16_t)v125, (int8x16_t)vcgtq_f32(v127, v131));
    float32x4_t v133 = *((float32x4_t *)a2 + 13);
    float32x4_t v134 = *((float32x4_t *)a2 + 14);
    float32x4_t v135 = vsubq_f32(vsubq_f32(v127, v125), vmulq_f32(vmulq_f32(v133, v132), v127));
    float32x4_t v136 = *((float32x4_t *)a2 + 15);
    float32x4_t v137 = *((float32x4_t *)a2 + 16);
    float32x4_t v138 = *((float32x4_t *)a2 + 17);
    float32x4_t v139 = *((float32x4_t *)a2 + 18);
    float32x4_t v140 = vmaxq_f32(vmulq_f32(v115, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v126, 0x17uLL)), (float32x4_t)vandq_s8(v129, (int8x16_t)vcgtq_f32(v128, v126))), v130), v132), vmulq_f32(v135, vaddq_f32(vaddq_f32(v137, vmulq_f32(v135, v138)), vmulq_f32(vmulq_f32(v135, v135), vaddq_f32(v134, vmulq_f32(v136, v135))))))), v139);
    float32x4_t v141 = vcvtq_f32_s32(vcvtq_s32_f32(v140));
    float32x4_t v142 = vsubq_f32(v141, (float32x4_t)vandq_s8((int8x16_t)v125, (int8x16_t)vcgtq_f32(v141, v140)));
    float32x4_t v143 = vsubq_f32(v140, v142);
    float32x4_t v144 = *((float32x4_t *)a2 + 19);
    float32x4_t v145 = *((float32x4_t *)a2 + 20);
    float32x4_t v146 = *((float32x4_t *)a2 + 21);
    int32x4_t v147 = *((int32x4_t *)a2 + 22);
    int8x16_t v148 = (int8x16_t)vmulq_f32(vaddq_f32(v125, vmulq_f32(v143, vaddq_f32(v146, vmulq_f32(v143, vaddq_f32(v144, vmulq_f32(v145, v143)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v147, vcvtq_s32_f32(v142)), 0x17uLL));
    float32x4_t v149 = *(float32x4_t *)(v7 + v114);
    float32x4_t v150 = (float32x4_t)vbslq_s8(v117, (int8x16_t)v116, v148);
    float32x4_t v151 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v149, 3), v118);
    float32x4_t v152 = vmulq_f32(v120, vrecpeq_f32(v151));
    float32x4_t v153 = vminq_f32(vmaxq_f32(vmulq_f32(v149, vmulq_f32(v152, vrecpsq_f32(v152, v151))), v124), v125);
    float32x4_t v154 = (float32x4_t)vorrq_s8(vandq_s8(v121, (int8x16_t)v153), (int8x16_t)v125);
    float32x4_t v155 = (float32x4_t)vandq_s8((int8x16_t)v125, (int8x16_t)vcgtq_f32(v154, v131));
    float32x4_t v156 = vsubq_f32(vsubq_f32(v154, v125), vmulq_f32(vmulq_f32(v133, v155), v154));
    float32x4_t v157 = vmaxq_f32(vmulq_f32(v115, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v153, 0x17uLL)), (float32x4_t)vandq_s8(v129, (int8x16_t)vcgtq_f32(v128, v153))), v130), v155), vmulq_f32(v156, vaddq_f32(vaddq_f32(v137, vmulq_f32(v138, v156)), vmulq_f32(vmulq_f32(v156, v156), vaddq_f32(v134, vmulq_f32(v136, v156))))))), v139);
    float32x4_t v158 = vcvtq_f32_s32(vcvtq_s32_f32(v157));
    float32x4_t v159 = vsubq_f32(v158, (float32x4_t)vandq_s8((int8x16_t)v125, (int8x16_t)vcgtq_f32(v158, v157)));
    float32x4_t v160 = vsubq_f32(v157, v159);
    float32x4_t v161 = vmulq_f32(vaddq_f32(v125, vmulq_f32(v160, vaddq_f32(v146, vmulq_f32(v160, vaddq_f32(v144, vmulq_f32(v145, v160)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v159), v147), 0x17uLL));
    float32x4_t v162 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(vminq_f32((float32x4_t)vandq_s8((int8x16_t)v125, (int8x16_t)vcgeq_f32(v124, v161)), (float32x4_t)vandq_s8((int8x16_t)v125, (int8x16_t)vcgeq_f32(v150, v125))), v124), (int8x16_t)v124, vbslq_s8((int8x16_t)vcgeq_f32(v150, vsubq_f32(v125, v161)), (int8x16_t)v125, (int8x16_t)0));
    v162.i32[3] = 1.0;
    *(float32x4_t *)(v6 + v114) = vaddq_f32(v149, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v117, (int8x16_t)v162, (int8x16_t)vaddq_f32(v123, vmulq_laneq_f32(vsubq_f32(v162, v123), v149, 3))), v149), v150, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendHardMixQTTile(HGTile *a1, float32x4_t *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = 0;
    int v5 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((void *)a1 + 10);
    uint64_t v8 = *((void *)a1 + 12);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * *((int *)a1 + 22);
    while (v5 < 2)
    {
      int v107 = 0;
      if (v5 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v9;
      v7 += v11;
      v6 += v10;
      if (++v4 == v3) {
        return 0;
      }
    }
    int v12 = 0;
    uint64_t v13 = 16;
    do
    {
      float32x4_t v14 = vmulq_f32(*(float32x4_t *)(v8 + v13 - 16), *a2);
      float32x4_t v15 = vmulq_f32(*(float32x4_t *)(v8 + v13), *a2);
      int8x16_t v16 = (int8x16_t)a2[5];
      float32x4_t v17 = a2[6];
      float32x4_t v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v17);
      float32x4_t v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v17);
      float32x4_t v21 = a2[7];
      int8x16_t v20 = (int8x16_t)a2[8];
      float32x4_t v22 = vmulq_f32(vrecpeq_f32(v18), v21);
      float32x4_t v23 = vmulq_f32(vrecpeq_f32(v19), v21);
      float32x4_t v24 = vmulq_f32(v22, vrecpsq_f32(v22, v18));
      float32x4_t v25 = vmulq_f32(v23, vrecpsq_f32(v23, v19));
      float32x4_t v26 = vmulq_f32(v14, v24);
      float32x4_t v27 = vmulq_f32(v15, v25);
      float32x4_t v28 = a2[32];
      float32x4_t v29 = a2[29];
      float32x4_t v30 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v14, (int8x16_t)vminq_f32(vmaxq_f32(v26, v28), v29));
      float32x4_t v31 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v15, (int8x16_t)vminq_f32(vmaxq_f32(v27, v28), v29));
      float32x4_t v32 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v30, v20), (int8x16_t)v29);
      float32x4_t v34 = a2[9];
      int8x16_t v33 = (int8x16_t)a2[10];
      float32x4_t v35 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v31, v20), (int8x16_t)v29);
      float32x4_t v37 = a2[11];
      float32x4_t v36 = a2[12];
      float32x4_t v38 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v32, v36));
      float32x4_t v39 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v35, v36));
      float32x4_t v40 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v30, 0x17uLL)), (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v34, v30))), v37), v38);
      float32x4_t v42 = a2[13];
      float32x4_t v41 = a2[14];
      float32x4_t v43 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v31, 0x17uLL)), (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v34, v31))), v37), v39);
      float32x4_t v44 = vsubq_f32(vsubq_f32(v32, v29), vmulq_f32(vmulq_f32(v42, v38), v32));
      float32x4_t v45 = vsubq_f32(vsubq_f32(v35, v29), vmulq_f32(vmulq_f32(v42, v39), v35));
      float32x4_t v47 = a2[15];
      float32x4_t v46 = a2[16];
      float32x4_t v49 = a2[17];
      float32x4_t v48 = a2[18];
      float32x4_t v50 = vaddq_f32(v40, vmulq_f32(v44, vaddq_f32(vaddq_f32(v46, vmulq_f32(v44, v49)), vmulq_f32(vmulq_f32(v44, v44), vaddq_f32(v41, vmulq_f32(v47, v44))))));
      float32x4_t v51 = a2[24];
      float32x4_t v52 = vmulq_f32(v51, vaddq_f32(v43, vmulq_f32(v45, vaddq_f32(vaddq_f32(v46, vmulq_f32(v45, v49)), vmulq_f32(vmulq_f32(v45, v45), vaddq_f32(v41, vmulq_f32(v47, v45)))))));
      float32x4_t v53 = vmaxq_f32(vmulq_f32(v51, v50), v48);
      float32x4_t v54 = vmaxq_f32(v52, v48);
      float32x4_t v55 = vcvtq_f32_s32(vcvtq_s32_f32(v53));
      float32x4_t v56 = vcvtq_f32_s32(vcvtq_s32_f32(v54));
      float32x4_t v58 = *(float32x4_t *)(v7 + v13 - 16);
      float32x4_t v57 = *(float32x4_t *)(v7 + v13);
      float32x4_t v59 = vsubq_f32(v55, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v55, v53)));
      float32x4_t v60 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 3), v17);
      float32x4_t v61 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3), v17);
      float32x4_t v62 = vmulq_f32(v21, vrecpeq_f32(v60));
      float32x4_t v63 = vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v56, v54)));
      float32x4_t v64 = vmulq_f32(v21, vrecpeq_f32(v61));
      float32x4_t v65 = vmulq_f32(v62, vrecpsq_f32(v62, v60));
      float32x4_t v66 = a2[19];
      float32x4_t v67 = a2[20];
      float32x4_t v68 = vsubq_f32(v53, v59);
      float32x4_t v69 = vmulq_f32(v64, vrecpsq_f32(v64, v61));
      float32x4_t v70 = vsubq_f32(v54, v63);
      float32x4_t v71 = vminq_f32(vmaxq_f32(vmulq_f32(v58, v65), v28), v29);
      float32x4_t v72 = vminq_f32(vmaxq_f32(vmulq_f32(v57, v69), v28), v29);
      float32x4_t v73 = (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v34, v71));
      float32x4_t v74 = (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v34, v72));
      float32x4_t v75 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v71), (int8x16_t)v29);
      float32x4_t v76 = (float32x4_t)vorrq_s8(vandq_s8(v20, (int8x16_t)v72), (int8x16_t)v29);
      float32x4_t v77 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v72, 0x17uLL)), v74);
      float32x4_t v78 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v71, 0x17uLL)), v73), v37);
      float32x4_t v79 = vsubq_f32(v77, v37);
      float32x4_t v80 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v75, v36));
      float32x4_t v81 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v76, v36));
      float32x4_t v82 = vaddq_f32(v79, v81);
      float32x4_t v83 = vmulq_f32(v42, v81);
      float32x4_t v84 = vsubq_f32(vsubq_f32(v75, v29), vmulq_f32(vmulq_f32(v42, v80), v75));
      float32x4_t v86 = a2[21];
      int32x4_t v85 = (int32x4_t)a2[22];
      float32x4_t v87 = vsubq_f32(vsubq_f32(v76, v29), vmulq_f32(v83, v76));
      float32x4_t v88 = vaddq_f32(v82, vmulq_f32(v87, vaddq_f32(vaddq_f32(v46, vmulq_f32(v49, v87)), vmulq_f32(vmulq_f32(v87, v87), vaddq_f32(v41, vmulq_f32(v47, v87))))));
      float32x4_t v89 = vmaxq_f32(vmulq_f32(v51, vaddq_f32(vaddq_f32(v78, v80), vmulq_f32(v84, vaddq_f32(vaddq_f32(v46, vmulq_f32(v49, v84)), vmulq_f32(vmulq_f32(v84, v84), vaddq_f32(v41, vmulq_f32(v47, v84))))))), v48);
      float32x4_t v90 = vmaxq_f32(vmulq_f32(v51, v88), v48);
      float32x4_t v91 = vcvtq_f32_s32(vcvtq_s32_f32(v89));
      float32x4_t v92 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
      float32x4_t v93 = vsubq_f32(v91, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v91, v89)));
      float32x4_t v94 = vsubq_f32(v92, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v92, v90)));
      float32x4_t v95 = vsubq_f32(v89, v93);
      float32x4_t v96 = vsubq_f32(v90, v94);
      float32x4_t v97 = vmulq_f32(v96, vaddq_f32(v86, vmulq_f32(v96, vaddq_f32(v66, vmulq_f32(v67, v96)))));
      float32x4_t v98 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v14, (int8x16_t)vmulq_f32(vaddq_f32(v29, vmulq_f32(v68, vaddq_f32(v86, vmulq_f32(v68, vaddq_f32(v66, vmulq_f32(v67, v68)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v85, vcvtq_s32_f32(v59)), 0x17uLL)));
      float32x4_t v99 = (float32x4_t)vbslq_s8(v16, (int8x16_t)v15, (int8x16_t)vmulq_f32(vaddq_f32(v29, vmulq_f32(v70, vaddq_f32(v86, vmulq_f32(v70, vaddq_f32(v66, vmulq_f32(v67, v70)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v85, vcvtq_s32_f32(v63)), 0x17uLL)));
      float32x4_t v100 = vmulq_f32(vaddq_f32(v29, vmulq_f32(v95, vaddq_f32(v86, vmulq_f32(v95, vaddq_f32(v66, vmulq_f32(v67, v95)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v93), v85), 0x17uLL));
      float32x4_t v101 = vmulq_f32(vaddq_f32(v29, v97), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v94), v85), 0x17uLL));
      int8x16_t v102 = vandq_s8((int8x16_t)v29, (int8x16_t)vcgeq_f32(v99, vsubq_f32(v29, v101)));
      float32x4_t v103 = vminq_f32((float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgeq_f32(v28, v101)), (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgeq_f32(v99, v29)));
      float32x4_t v104 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(vminq_f32((float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgeq_f32(v28, v100)), (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgeq_f32(v98, v29))), v28), (int8x16_t)v28, vandq_s8((int8x16_t)v29, (int8x16_t)vcgeq_f32(v98, vsubq_f32(v29, v100))));
      v104.i32[3] = 1.0;
      float32x4_t v105 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v103, v28), (int8x16_t)v28, v102);
      v105.i32[3] = 1.0;
      float32x4_t v106 = (float32x4_t *)(v6 + v13);
      v106[-1] = vaddq_f32(v58, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v16, (int8x16_t)v104, (int8x16_t)vaddq_f32(v26, vmulq_laneq_f32(vsubq_f32(v104, v26), v58, 3))), v58), v98, 3));
      *float32x4_t v106 = vaddq_f32(v57, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v16, (int8x16_t)v105, (int8x16_t)vaddq_f32(v27, vmulq_laneq_f32(vsubq_f32(v105, v27), v57, 3))), v57), v99, 3));
      v12 -= 2;
      v13 += 32;
    }
    while (v5 + v12 > 1);
    int v107 = -v12;
    if (v107 >= v5) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v108 = 16 * v107;
    float32x4_t v109 = vmulq_f32(*(float32x4_t *)(v8 + v108), *a2);
    int8x16_t v110 = (int8x16_t)a2[5];
    float32x4_t v111 = a2[6];
    float32x4_t v112 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v109, 3), v111);
    float32x4_t v114 = a2[7];
    int8x16_t v113 = (int8x16_t)a2[8];
    float32x4_t v115 = vmulq_f32(vrecpeq_f32(v112), v114);
    float32x4_t v116 = vmulq_f32(v109, vmulq_f32(v115, vrecpsq_f32(v115, v112)));
    float32x4_t v117 = a2[32];
    float32x4_t v118 = a2[29];
    float32x4_t v119 = (float32x4_t)vbslq_s8(v110, (int8x16_t)v109, (int8x16_t)vminq_f32(vmaxq_f32(v116, v117), v118));
    float32x4_t v120 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v119, v113), (int8x16_t)v118);
    float32x4_t v121 = a2[9];
    int8x16_t v122 = (int8x16_t)a2[10];
    float32x4_t v123 = a2[11];
    float32x4_t v124 = a2[12];
    float32x4_t v125 = (float32x4_t)vandq_s8((int8x16_t)v118, (int8x16_t)vcgtq_f32(v120, v124));
    float32x4_t v126 = a2[13];
    float32x4_t v127 = a2[14];
    float32x4_t v128 = vsubq_f32(vsubq_f32(v120, v118), vmulq_f32(vmulq_f32(v126, v125), v120));
    float32x4_t v129 = a2[15];
    float32x4_t v130 = a2[16];
    float32x4_t v131 = a2[17];
    float32x4_t v132 = a2[18];
    float32x4_t v133 = vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v119, 0x17uLL)), (float32x4_t)vandq_s8(v122, (int8x16_t)vcgtq_f32(v121, v119))), v123), v125), vmulq_f32(v128, vaddq_f32(vaddq_f32(v130, vmulq_f32(v128, v131)), vmulq_f32(vmulq_f32(v128, v128), vaddq_f32(v127, vmulq_f32(v129, v128))))));
    float32x4_t v134 = a2[24];
    float32x4_t v135 = vmaxq_f32(vmulq_f32(v134, v133), v132);
    float32x4_t v136 = vcvtq_f32_s32(vcvtq_s32_f32(v135));
    float32x4_t v137 = vsubq_f32(v136, (float32x4_t)vandq_s8((int8x16_t)v118, (int8x16_t)vcgtq_f32(v136, v135)));
    float32x4_t v138 = vsubq_f32(v135, v137);
    float32x4_t v139 = a2[19];
    float32x4_t v140 = a2[20];
    float32x4_t v141 = a2[21];
    int32x4_t v142 = (int32x4_t)a2[22];
    int8x16_t v143 = (int8x16_t)vmulq_f32(vaddq_f32(v118, vmulq_f32(v138, vaddq_f32(v141, vmulq_f32(v138, vaddq_f32(v139, vmulq_f32(v140, v138)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v142, vcvtq_s32_f32(v137)), 0x17uLL));
    float32x4_t v144 = *(float32x4_t *)(v7 + v108);
    float32x4_t v145 = (float32x4_t)vbslq_s8(v110, (int8x16_t)v109, v143);
    float32x4_t v146 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v144, 3), v111);
    float32x4_t v147 = vmulq_f32(v114, vrecpeq_f32(v146));
    float32x4_t v148 = vminq_f32(vmaxq_f32(vmulq_f32(v144, vmulq_f32(v147, vrecpsq_f32(v147, v146))), v117), v118);
    float32x4_t v149 = (float32x4_t)vorrq_s8(vandq_s8(v113, (int8x16_t)v148), (int8x16_t)v118);
    float32x4_t v150 = (float32x4_t)vandq_s8((int8x16_t)v118, (int8x16_t)vcgtq_f32(v149, v124));
    float32x4_t v151 = vsubq_f32(vsubq_f32(v149, v118), vmulq_f32(vmulq_f32(v126, v150), v149));
    float32x4_t v152 = vmaxq_f32(vmulq_f32(v134, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v148, 0x17uLL)), (float32x4_t)vandq_s8(v122, (int8x16_t)vcgtq_f32(v121, v148))), v123), v150), vmulq_f32(v151, vaddq_f32(vaddq_f32(v130, vmulq_f32(v131, v151)), vmulq_f32(vmulq_f32(v151, v151), vaddq_f32(v127, vmulq_f32(v129, v151))))))), v132);
    float32x4_t v153 = vcvtq_f32_s32(vcvtq_s32_f32(v152));
    float32x4_t v154 = vsubq_f32(v153, (float32x4_t)vandq_s8((int8x16_t)v118, (int8x16_t)vcgtq_f32(v153, v152)));
    float32x4_t v155 = vsubq_f32(v152, v154);
    float32x4_t v156 = vmulq_f32(vaddq_f32(v118, vmulq_f32(v155, vaddq_f32(v141, vmulq_f32(v155, vaddq_f32(v139, vmulq_f32(v140, v155)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v154), v142), 0x17uLL));
    float32x4_t v157 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(vminq_f32((float32x4_t)vandq_s8((int8x16_t)v118, (int8x16_t)vcgeq_f32(v117, v156)), (float32x4_t)vandq_s8((int8x16_t)v118, (int8x16_t)vcgeq_f32(v145, v118))), v117), (int8x16_t)v117, vbslq_s8((int8x16_t)vcgeq_f32(v145, vsubq_f32(v118, v156)), (int8x16_t)v118, (int8x16_t)0));
    v157.i32[3] = 1.0;
    *(float32x4_t *)(v6 + v108) = vaddq_f32(v144, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v110, (int8x16_t)v157, (int8x16_t)vaddq_f32(v116, vmulq_laneq_f32(vsubq_f32(v157, v116), v144, 3))), v144), v145, 3));
    goto LABEL_3;
  }
  return 0;
}

uint64_t GetBlendDifferenceTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    int v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 26);
    uint64_t v10 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v55 = 0;
        uint64_t v56 = 16 * v10;
        uint64_t v57 = 16 * v9;
        uint64_t v58 = 16 * v8;
        uint64_t v59 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v60 = 0;
          do
          {
            float32x4_t v61 = v5[v60 / 0x10];
            float32x4_t v62 = vmulq_f32(v6[v60 / 0x10], *(float32x4_t *)a2);
            float32x4_t v63 = vmulq_laneq_f32(v62, v61, 3);
            float32x4_t v64 = vmulq_laneq_f32(v61, v62, 3);
            float32x4_t v65 = vsubq_f32(vaddq_f32(v61, v62), v63);
            v7[v60 / 0x10] = vaddq_f32(vabdq_f32(v63, v64), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v65, (int8x16_t)vsubq_f32(v65, v64)));
            v60 += 16;
          }
          while (v59 != v60);
          ++v55;
          int v5 = (float32x4_t *)((char *)v5 + v56);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v57);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v58);
        }
        while (v55 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      float32x4_t v15 = v5 + 4;
      int8x16_t v16 = v6 + 4;
      float32x4_t v17 = v7 + 4;
      do
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
        int8x16_t v20 = v17;
        float32x4_t v21 = v16;
        float32x4_t v22 = v15;
        do
        {
          float32x4_t v23 = v22;
          float32x4_t v24 = v21;
          float32x4_t v25 = v20;
          float32x4_t v26 = v5[v18];
          float32x4_t v27 = v5[v18 + 1];
          float32x4_t v28 = v5[v18 + 2];
          float32x4_t v29 = v5[v18 + 3];
          float32x4_t v30 = vmulq_f32(v6[v18], *(float32x4_t *)a2);
          float32x4_t v31 = vmulq_f32(v6[v18 + 1], *(float32x4_t *)a2);
          float32x4_t v32 = vmulq_f32(v6[v18 + 2], *(float32x4_t *)a2);
          float32x4_t v33 = vmulq_f32(v6[v18 + 3], *(float32x4_t *)a2);
          float32x4_t v34 = vmulq_laneq_f32(v30, v26, 3);
          float32x4_t v35 = vmulq_laneq_f32(v31, v27, 3);
          float32x4_t v36 = vmulq_laneq_f32(v32, v28, 3);
          float32x4_t v37 = vmulq_laneq_f32(v33, v29, 3);
          float32x4_t v38 = vmulq_laneq_f32(v26, v30, 3);
          float32x4_t v39 = vmulq_laneq_f32(v27, v31, 3);
          float32x4_t v40 = vmulq_laneq_f32(v28, v32, 3);
          float32x4_t v41 = vmulq_laneq_f32(v29, v33, 3);
          float32x4_t v42 = vsubq_f32(vaddq_f32(v26, v30), v34);
          float32x4_t v43 = vsubq_f32(vaddq_f32(v27, v31), v35);
          float32x4_t v44 = vsubq_f32(vaddq_f32(v28, v32), v36);
          float32x4_t v45 = vsubq_f32(vaddq_f32(v29, v33), v37);
          int8x16_t v46 = *((int8x16_t *)a2 + 5);
          float32x4_t v47 = &v7[v18];
          *float32x4_t v47 = vaddq_f32(vabdq_f32(v34, v38), (float32x4_t)vbslq_s8(v46, (int8x16_t)v42, (int8x16_t)vsubq_f32(v42, v38)));
          v47[1] = vaddq_f32(vabdq_f32(v35, v39), (float32x4_t)vbslq_s8(v46, (int8x16_t)v43, (int8x16_t)vsubq_f32(v43, v39)));
          v19 += 4;
          v18 += 4;
          v47[2] = vaddq_f32(vabdq_f32(v36, v40), (float32x4_t)vbslq_s8(v46, (int8x16_t)v44, (int8x16_t)vsubq_f32(v44, v40)));
          v47[3] = vaddq_f32(vabdq_f32(v37, v41), (float32x4_t)vbslq_s8(v46, (int8x16_t)v45, (int8x16_t)vsubq_f32(v45, v41)));
          v22 += 4;
          v21 += 4;
          int8x16_t v20 = v25 + 4;
        }
        while ((uint64_t)v19 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v48 = *v23++;
            float32x4_t v49 = v48;
            float32x4_t v50 = *v24++;
            float32x4_t v51 = vmulq_f32(v50, *(float32x4_t *)a2);
            float32x4_t v52 = vmulq_laneq_f32(v51, v49, 3);
            float32x4_t v53 = vmulq_laneq_f32(v49, v51, 3);
            float32x4_t v54 = vsubq_f32(vaddq_f32(v49, v51), v52);
            *v25++ = vaddq_f32(vabdq_f32(v52, v53), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v54, (int8x16_t)vsubq_f32(v54, v53)));
            ++v19;
          }
          while (v19 < v4);
        }
        ++v11;
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v13);
        int v5 = (float32x4_t *)((char *)v5 + v14);
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v14);
        int8x16_t v16 = (float32x4_t *)((char *)v16 + v12);
        float32x4_t v17 = (float32x4_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendDifferencePOWTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 12);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v12 = 0;
      do
      {
        float32x4_t v13 = *(float32x4_t *)(v5 + v12);
        float32x4_t v14 = *((float32x4_t *)a2 + 6);
        float32x4_t v15 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
        float32x4_t v16 = *((float32x4_t *)a2 + 7);
        int8x16_t v17 = *((int8x16_t *)a2 + 8);
        float32x4_t v18 = vmulq_f32(vrecpeq_f32(v15), v16);
        float32x4_t v19 = vmulq_f32(v13, vmulq_f32(v18, vrecpsq_f32(v18, v15)));
        float32x4_t v20 = *((float32x4_t *)a2 + 32);
        float32x4_t v21 = vmaxq_f32(v19, v20);
        float32x4_t v22 = *((float32x4_t *)a2 + 29);
        float32x4_t v23 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v21), (int8x16_t)v22);
        float32x4_t v24 = *((float32x4_t *)a2 + 9);
        int8x16_t v25 = *((int8x16_t *)a2 + 10);
        float32x4_t v26 = *((float32x4_t *)a2 + 11);
        float32x4_t v27 = *((float32x4_t *)a2 + 12);
        float32x4_t v28 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v23, v27));
        float32x4_t v29 = *((float32x4_t *)a2 + 13);
        float32x4_t v30 = *((float32x4_t *)a2 + 14);
        float32x4_t v31 = vsubq_f32(vsubq_f32(v23, v22), vmulq_f32(vmulq_f32(v29, v28), v23));
        float32x4_t v32 = *((float32x4_t *)a2 + 15);
        float32x4_t v33 = *((float32x4_t *)a2 + 16);
        float32x4_t v34 = *((float32x4_t *)a2 + 17);
        float32x4_t v35 = *((float32x4_t *)a2 + 18);
        float32x4_t v36 = vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v21, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v24, v21))), v26), v28), vmulq_f32(v31, vaddq_f32(vaddq_f32(v33, vmulq_f32(v31, v34)), vmulq_f32(vmulq_f32(v31, v31), vaddq_f32(v30, vmulq_f32(v32, v31))))));
        float32x4_t v37 = *((float32x4_t *)a2 + 1);
        float32x4_t v38 = vmaxq_f32(vmulq_f32(v37, v36), v35);
        float32x4_t v39 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
        float32x4_t v40 = vsubq_f32(v39, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v39, v38)));
        float32x4_t v41 = vsubq_f32(v38, v40);
        float32x4_t v42 = *((float32x4_t *)a2 + 19);
        float32x4_t v43 = *((float32x4_t *)a2 + 20);
        float32x4_t v44 = *((float32x4_t *)a2 + 21);
        int32x4_t v45 = *((int32x4_t *)a2 + 22);
        float32x4_t v46 = vmulq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)a2);
        float32x4_t v47 = vmulq_f32(vaddq_f32(v22, vmulq_f32(v41, vaddq_f32(v44, vmulq_f32(v41, vaddq_f32(v42, vmulq_f32(v43, v41)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v45, vcvtq_s32_f32(v40)), 0x17uLL));
        float32x4_t v48 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 3), v14);
        float32x4_t v49 = vmulq_f32(v16, vrecpeq_f32(v48));
        float32x4_t v50 = vmulq_f32(v46, vmulq_f32(v49, vrecpsq_f32(v49, v48)));
        float32x4_t v51 = vmaxq_f32(v50, v20);
        float32x4_t v52 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v51), (int8x16_t)v22);
        float32x4_t v53 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v52, v27));
        float32x4_t v54 = vsubq_f32(vsubq_f32(v52, v22), vmulq_f32(vmulq_f32(v29, v53), v52));
        float32x4_t v55 = vmaxq_f32(vmulq_f32(v37, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v51, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v24, v51))), v26), v53), vmulq_f32(v54, vaddq_f32(vaddq_f32(v33, vmulq_f32(v34, v54)), vmulq_f32(vmulq_f32(v54, v54), vaddq_f32(v30, vmulq_f32(v32, v54))))))), v35);
        float32x4_t v56 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
        float32x4_t v57 = vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v56, v55)));
        float32x4_t v58 = vsubq_f32(v55, v57);
        float32x4_t v59 = vabdq_f32(v47, vmulq_f32(vaddq_f32(v22, vmulq_f32(v58, vaddq_f32(v44, vmulq_f32(v58, vaddq_f32(v42, vmulq_f32(v43, v58)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v57), v45), 0x17uLL)));
        float32x4_t v60 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v59), (int8x16_t)v22);
        float32x4_t v61 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v60, v27));
        float32x4_t v62 = vsubq_f32(vsubq_f32(v60, v22), vmulq_f32(vmulq_f32(v29, v61), v60));
        float32x4_t v63 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 2), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v59, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v24, v59))), v26), v61), vmulq_f32(v62, vaddq_f32(vaddq_f32(v33, vmulq_f32(v34, v62)), vmulq_f32(vmulq_f32(v62, v62), vaddq_f32(v30, vmulq_f32(v32, v62))))))), v35);
        float32x4_t v64 = vcvtq_f32_s32(vcvtq_s32_f32(v63));
        float32x4_t v65 = vsubq_f32(v64, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v64, v63)));
        float32x4_t v66 = vsubq_f32(v63, v65);
        float32x4_t v67 = vmulq_f32(vaddq_f32(v22, vmulq_f32(v66, vaddq_f32(v44, vmulq_f32(v66, vaddq_f32(v42, vmulq_f32(v43, v66)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v65), v45), 0x17uLL));
        v67.i32[3] = 1.0;
        *(float32x4_t *)(v7 + v12) = vaddq_f32(v13, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v67, (int8x16_t)vaddq_f32(v50, vmulq_laneq_f32(vsubq_f32(v67, v50), v13, 3))), v13), v46, 3));
        v12 += 16;
      }
      while (v11 != v12);
      ++v4;
      v5 += v8;
      v6 += v9;
      v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t GetBlendDifferenceQTTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 12);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v12 = 0;
      do
      {
        float32x4_t v13 = *(float32x4_t *)(v5 + v12);
        float32x4_t v14 = *((float32x4_t *)a2 + 6);
        float32x4_t v15 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
        float32x4_t v16 = *((float32x4_t *)a2 + 7);
        int8x16_t v17 = *((int8x16_t *)a2 + 8);
        float32x4_t v18 = vmulq_f32(vrecpeq_f32(v15), v16);
        float32x4_t v19 = vmulq_f32(v13, vmulq_f32(v18, vrecpsq_f32(v18, v15)));
        float32x4_t v20 = *((float32x4_t *)a2 + 32);
        float32x4_t v21 = *((float32x4_t *)a2 + 23);
        float32x4_t v22 = *((float32x4_t *)a2 + 24);
        float32x4_t v23 = vminq_f32(vmaxq_f32(v19, v20), v21);
        float32x4_t v24 = *((float32x4_t *)a2 + 29);
        float32x4_t v25 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v23), (int8x16_t)v24);
        float32x4_t v26 = *((float32x4_t *)a2 + 9);
        int8x16_t v27 = *((int8x16_t *)a2 + 10);
        float32x4_t v28 = *((float32x4_t *)a2 + 11);
        float32x4_t v29 = *((float32x4_t *)a2 + 12);
        float32x4_t v30 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v25, v29));
        float32x4_t v31 = *((float32x4_t *)a2 + 13);
        float32x4_t v32 = *((float32x4_t *)a2 + 14);
        float32x4_t v33 = vsubq_f32(vsubq_f32(v25, v24), vmulq_f32(vmulq_f32(v31, v30), v25));
        float32x4_t v34 = *((float32x4_t *)a2 + 15);
        float32x4_t v35 = *((float32x4_t *)a2 + 16);
        float32x4_t v37 = *((float32x4_t *)a2 + 17);
        float32x4_t v36 = *((float32x4_t *)a2 + 18);
        float32x4_t v38 = vmaxq_f32(vmulq_f32(v22, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v23, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v26, v23))), v28), v30), vmulq_f32(v33, vaddq_f32(vaddq_f32(v35, vmulq_f32(v33, v37)), vmulq_f32(vmulq_f32(v33, v33), vaddq_f32(v32, vmulq_f32(v34, v33))))))), v36);
        float32x4_t v39 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
        float32x4_t v40 = vsubq_f32(v39, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v39, v38)));
        float32x4_t v41 = vsubq_f32(v38, v40);
        float32x4_t v42 = *((float32x4_t *)a2 + 19);
        float32x4_t v43 = *((float32x4_t *)a2 + 20);
        float32x4_t v44 = *((float32x4_t *)a2 + 21);
        int32x4_t v45 = *((int32x4_t *)a2 + 22);
        float32x4_t v46 = vmulq_f32(vaddq_f32(v24, vmulq_f32(v41, vaddq_f32(v44, vmulq_f32(v41, vaddq_f32(v42, vmulq_f32(v43, v41)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v45, vcvtq_s32_f32(v40)), 0x17uLL));
        float32x4_t v47 = vmulq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)a2);
        float32x4_t v48 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 3), v14);
        float32x4_t v49 = vmulq_f32(v16, vrecpeq_f32(v48));
        float32x4_t v50 = vmulq_f32(v47, vmulq_f32(v49, vrecpsq_f32(v49, v48)));
        float32x4_t v51 = vminq_f32(vmaxq_f32(v50, v20), v21);
        float32x4_t v52 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v51), (int8x16_t)v24);
        float32x4_t v53 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v52, v29));
        float32x4_t v54 = vsubq_f32(vsubq_f32(v52, v24), vmulq_f32(vmulq_f32(v31, v53), v52));
        float32x4_t v55 = vmaxq_f32(vmulq_f32(v22, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v51, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v26, v51))), v28), v53), vmulq_f32(v54, vaddq_f32(vaddq_f32(v35, vmulq_f32(v37, v54)), vmulq_f32(vmulq_f32(v54, v54), vaddq_f32(v32, vmulq_f32(v34, v54))))))), v36);
        float32x4_t v56 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
        float32x4_t v57 = vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v56, v55)));
        float32x4_t v58 = vsubq_f32(v55, v57);
        float32x4_t v59 = vminq_f32(vabdq_f32(v46, vmulq_f32(vaddq_f32(v24, vmulq_f32(v58, vaddq_f32(v44, vmulq_f32(v58, vaddq_f32(v42, vmulq_f32(v43, v58)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v57), v45), 0x17uLL))), *((float32x4_t *)a2 + 30));
        float32x4_t v60 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v59), (int8x16_t)v24);
        float32x4_t v61 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v60, v29));
        float32x4_t v62 = vsubq_f32(vsubq_f32(v60, v24), vmulq_f32(vmulq_f32(v31, v61), v60));
        float32x4_t v63 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 25), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v59, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v26, v59))), v28), v61), vmulq_f32(v62, vaddq_f32(vaddq_f32(v35, vmulq_f32(v37, v62)), vmulq_f32(vmulq_f32(v62, v62), vaddq_f32(v32, vmulq_f32(v34, v62))))))), v36);
        float32x4_t v64 = vcvtq_f32_s32(vcvtq_s32_f32(v63));
        float32x4_t v65 = vsubq_f32(v64, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v64, v63)));
        float32x4_t v66 = vsubq_f32(v63, v65);
        float32x4_t v67 = vmulq_f32(vaddq_f32(v24, vmulq_f32(v66, vaddq_f32(v44, vmulq_f32(v66, vaddq_f32(v42, vmulq_f32(v43, v66)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v65), v45), 0x17uLL));
        v67.i32[3] = 1.0;
        *(float32x4_t *)(v7 + v12) = vaddq_f32(v13, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v67, (int8x16_t)vaddq_f32(v50, vmulq_laneq_f32(vsubq_f32(v67, v50), v13, 3))), v13), v47, 3));
        v12 += 16;
      }
      while (v11 != v12);
      ++v4;
      v5 += v8;
      v6 += v9;
      v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t GetBlendExclusionTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    int v4 = *((_DWORD *)a1 + 2) - *(_DWORD *)a1;
    uint64_t v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 26);
    uint64_t v10 = *((int *)a1 + 22);
    if (v4 < 2)
    {
      if (v4 == 1)
      {
        uint64_t v38 = 16 * v8;
        do
        {
          float32x4_t v39 = vmulq_f32(*v6, *(float32x4_t *)a2);
          float32x4_t v40 = vmulq_laneq_f32(v39, *v5, 3);
          float32x4_t v41 = vmulq_laneq_f32(*v5, v39, 3);
          float32x4_t v42 = vsubq_f32(vaddq_f32(*v5, v39), v40);
          *uint64_t v7 = vaddq_f32(vaddq_f32(v41, vaddq_f32(v40, vmulq_f32(*((float32x4_t *)a2 + 87), vmulq_f32(*v5, v39)))), (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v42, (int8x16_t)vsubq_f32(v42, v41)));
          v5 += v10;
          v6 += v9;
          uint64_t v7 = (float32x4_t *)((char *)v7 + v38);
          --v3;
        }
        while (v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v8;
      uint64_t v13 = 16 * v10;
      uint64_t v14 = 16 * v9;
      do
      {
        uint64_t v15 = 0;
        int v16 = 0;
        do
        {
          float32x4_t v17 = v5[v15];
          float32x4_t v18 = v5[v15 + 1];
          float32x4_t v19 = vmulq_f32(v6[v15], *(float32x4_t *)a2);
          float32x4_t v20 = vmulq_f32(v6[v15 + 1], *(float32x4_t *)a2);
          float32x4_t v21 = vmulq_laneq_f32(v19, v17, 3);
          float32x4_t v22 = vmulq_laneq_f32(v20, v18, 3);
          float32x4_t v23 = vmulq_laneq_f32(v17, v19, 3);
          float32x4_t v24 = vmulq_laneq_f32(v18, v20, 3);
          float32x4_t v25 = *((float32x4_t *)a2 + 87);
          float32x4_t v26 = vaddq_f32(v23, vaddq_f32(v21, vmulq_f32(v25, vmulq_f32(v17, v19))));
          float32x4_t v27 = vaddq_f32(v24, vaddq_f32(v22, vmulq_f32(v25, vmulq_f32(v18, v20))));
          float32x4_t v28 = vsubq_f32(vaddq_f32(v17, v19), v21);
          float32x4_t v29 = vsubq_f32(vaddq_f32(v18, v20), v22);
          int8x16_t v30 = *((int8x16_t *)a2 + 5);
          float32x4_t v31 = &v7[v15];
          *float32x4_t v31 = vaddq_f32(v26, (float32x4_t)vbslq_s8(v30, (int8x16_t)v28, (int8x16_t)vsubq_f32(v28, v23)));
          v31[1] = vaddq_f32(v27, (float32x4_t)vbslq_s8(v30, (int8x16_t)v29, (int8x16_t)vsubq_f32(v29, v24)));
          v16 -= 2;
          v15 += 2;
        }
        while (v4 + v16 > 1);
        if (v4 > -v16)
        {
          float32x4_t v32 = v5[v15];
          float32x4_t v33 = vmulq_f32(v6[v15], *(float32x4_t *)a2);
          float32x4_t v34 = vmulq_laneq_f32(v33, v32, 3);
          float32x4_t v35 = vmulq_laneq_f32(v32, v33, 3);
          float32x4_t v36 = vaddq_f32(v35, vaddq_f32(v34, vmulq_f32(*((float32x4_t *)a2 + 87), vmulq_f32(v32, v33))));
          float32x4_t v37 = vsubq_f32(vaddq_f32(v32, v33), v34);
          v7[v15] = vaddq_f32(v36, (float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v37, (int8x16_t)vsubq_f32(v37, v35)));
        }
        ++v11;
        uint64_t v7 = (float32x4_t *)((char *)v7 + v12);
        uint64_t v5 = (float32x4_t *)((char *)v5 + v13);
        uint64_t v6 = (float32x4_t *)((char *)v6 + v14);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendExclusionPOWTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 12);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v12 = 0;
      do
      {
        float32x4_t v13 = *(float32x4_t *)(v5 + v12);
        float32x4_t v14 = *((float32x4_t *)a2 + 6);
        float32x4_t v15 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
        float32x4_t v16 = *((float32x4_t *)a2 + 7);
        int8x16_t v17 = *((int8x16_t *)a2 + 8);
        float32x4_t v18 = vmulq_f32(vrecpeq_f32(v15), v16);
        float32x4_t v19 = vmulq_f32(v13, vmulq_f32(v18, vrecpsq_f32(v18, v15)));
        float32x4_t v20 = *((float32x4_t *)a2 + 32);
        float32x4_t v21 = vmaxq_f32(v19, v20);
        float32x4_t v22 = *((float32x4_t *)a2 + 29);
        float32x4_t v23 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v21), (int8x16_t)v22);
        float32x4_t v24 = *((float32x4_t *)a2 + 9);
        int8x16_t v25 = *((int8x16_t *)a2 + 10);
        float32x4_t v26 = *((float32x4_t *)a2 + 11);
        float32x4_t v27 = *((float32x4_t *)a2 + 12);
        float32x4_t v28 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v23, v27));
        float32x4_t v29 = *((float32x4_t *)a2 + 13);
        float32x4_t v30 = *((float32x4_t *)a2 + 14);
        float32x4_t v31 = vsubq_f32(vsubq_f32(v23, v22), vmulq_f32(vmulq_f32(v29, v28), v23));
        float32x4_t v32 = *((float32x4_t *)a2 + 15);
        float32x4_t v33 = *((float32x4_t *)a2 + 16);
        float32x4_t v34 = *((float32x4_t *)a2 + 17);
        float32x4_t v35 = *((float32x4_t *)a2 + 18);
        float32x4_t v36 = vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v21, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v24, v21))), v26), v28), vmulq_f32(v31, vaddq_f32(vaddq_f32(v33, vmulq_f32(v31, v34)), vmulq_f32(vmulq_f32(v31, v31), vaddq_f32(v30, vmulq_f32(v32, v31))))));
        float32x4_t v37 = *((float32x4_t *)a2 + 1);
        float32x4_t v38 = vmaxq_f32(vmulq_f32(v37, v36), v35);
        float32x4_t v39 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
        float32x4_t v40 = vsubq_f32(v39, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v39, v38)));
        float32x4_t v41 = vsubq_f32(v38, v40);
        float32x4_t v42 = *((float32x4_t *)a2 + 19);
        float32x4_t v43 = *((float32x4_t *)a2 + 20);
        float32x4_t v44 = *((float32x4_t *)a2 + 21);
        int32x4_t v45 = *((int32x4_t *)a2 + 22);
        float32x4_t v46 = vmulq_f32(vaddq_f32(v22, vmulq_f32(v41, vaddq_f32(v44, vmulq_f32(v41, vaddq_f32(v42, vmulq_f32(v43, v41)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v45, vcvtq_s32_f32(v40)), 0x17uLL));
        float32x4_t v47 = vmulq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)a2);
        float32x4_t v48 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 3), v14);
        float32x4_t v49 = vmulq_f32(v16, vrecpeq_f32(v48));
        float32x4_t v50 = vmulq_f32(v47, vmulq_f32(v49, vrecpsq_f32(v49, v48)));
        float32x4_t v51 = vmaxq_f32(v50, v20);
        float32x4_t v52 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v51), (int8x16_t)v22);
        float32x4_t v53 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v52, v27));
        float32x4_t v54 = vsubq_f32(vsubq_f32(v52, v22), vmulq_f32(vmulq_f32(v29, v53), v52));
        float32x4_t v55 = vmaxq_f32(vmulq_f32(v37, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v51, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v24, v51))), v26), v53), vmulq_f32(v54, vaddq_f32(vaddq_f32(v33, vmulq_f32(v34, v54)), vmulq_f32(vmulq_f32(v54, v54), vaddq_f32(v30, vmulq_f32(v32, v54))))))), v35);
        float32x4_t v56 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
        float32x4_t v57 = vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v56, v55)));
        float32x4_t v58 = vsubq_f32(v55, v57);
        float32x4_t v59 = vmulq_f32(vaddq_f32(v22, vmulq_f32(v58, vaddq_f32(v44, vmulq_f32(v58, vaddq_f32(v42, vmulq_f32(v43, v58)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v57), v45), 0x17uLL));
        float32x4_t v60 = vaddq_f32(vaddq_f32(v46, v59), vmulq_laneq_f32(vmulq_f32(v46, v59), *((float32x4_t *)a2 + 87), 2));
        float32x4_t v61 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v60), (int8x16_t)v22);
        float32x4_t v62 = (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v61, v27));
        float32x4_t v63 = vsubq_f32(vsubq_f32(v61, v22), vmulq_f32(vmulq_f32(v29, v62), v61));
        float32x4_t v64 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 2), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v60, 0x17uLL)), (float32x4_t)vandq_s8(v25, (int8x16_t)vcgtq_f32(v24, v60))), v26), v62), vmulq_f32(v63, vaddq_f32(vaddq_f32(v33, vmulq_f32(v34, v63)), vmulq_f32(vmulq_f32(v63, v63), vaddq_f32(v30, vmulq_f32(v32, v63))))))), v35);
        float32x4_t v65 = vcvtq_f32_s32(vcvtq_s32_f32(v64));
        float32x4_t v66 = vsubq_f32(v65, (float32x4_t)vandq_s8((int8x16_t)v22, (int8x16_t)vcgtq_f32(v65, v64)));
        float32x4_t v67 = vsubq_f32(v64, v66);
        float32x4_t v68 = vmulq_f32(vaddq_f32(v22, vmulq_f32(v67, vaddq_f32(v44, vmulq_f32(v67, vaddq_f32(v42, vmulq_f32(v43, v67)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v66), v45), 0x17uLL));
        v68.i32[3] = 1.0;
        *(float32x4_t *)(v7 + v12) = vaddq_f32(v13, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v68, (int8x16_t)vaddq_f32(v50, vmulq_laneq_f32(vsubq_f32(v68, v50), v13, 3))), v13), v47, 3));
        v12 += 16;
      }
      while (v11 != v12);
      ++v4;
      v5 += v8;
      v6 += v9;
      v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t GetBlendExclusionQTTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1 && *((_DWORD *)a1 + 2) - *(_DWORD *)a1 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)a1 + 10);
    uint64_t v6 = *((void *)a1 + 12);
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v8 = 16 * *((int *)a1 + 22);
    uint64_t v9 = 16 * *((int *)a1 + 26);
    uint64_t v10 = 16 * *((int *)a1 + 6);
    uint64_t v11 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    do
    {
      uint64_t v12 = 0;
      do
      {
        float32x4_t v13 = *(float32x4_t *)(v5 + v12);
        float32x4_t v14 = *((float32x4_t *)a2 + 6);
        float32x4_t v15 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v14);
        float32x4_t v16 = *((float32x4_t *)a2 + 7);
        int8x16_t v17 = *((int8x16_t *)a2 + 8);
        float32x4_t v18 = vmulq_f32(vrecpeq_f32(v15), v16);
        float32x4_t v19 = vmulq_f32(v13, vmulq_f32(v18, vrecpsq_f32(v18, v15)));
        float32x4_t v20 = *((float32x4_t *)a2 + 32);
        float32x4_t v21 = *((float32x4_t *)a2 + 23);
        float32x4_t v22 = *((float32x4_t *)a2 + 24);
        float32x4_t v23 = vminq_f32(vmaxq_f32(v19, v20), v21);
        float32x4_t v24 = *((float32x4_t *)a2 + 29);
        float32x4_t v25 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v23), (int8x16_t)v24);
        float32x4_t v26 = *((float32x4_t *)a2 + 9);
        int8x16_t v27 = *((int8x16_t *)a2 + 10);
        float32x4_t v28 = *((float32x4_t *)a2 + 11);
        float32x4_t v29 = *((float32x4_t *)a2 + 12);
        float32x4_t v30 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v25, v29));
        float32x4_t v31 = *((float32x4_t *)a2 + 13);
        float32x4_t v32 = *((float32x4_t *)a2 + 14);
        float32x4_t v33 = vsubq_f32(vsubq_f32(v25, v24), vmulq_f32(vmulq_f32(v31, v30), v25));
        float32x4_t v34 = *((float32x4_t *)a2 + 15);
        float32x4_t v35 = *((float32x4_t *)a2 + 16);
        float32x4_t v37 = *((float32x4_t *)a2 + 17);
        float32x4_t v36 = *((float32x4_t *)a2 + 18);
        float32x4_t v38 = vmaxq_f32(vmulq_f32(v22, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v23, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v26, v23))), v28), v30), vmulq_f32(v33, vaddq_f32(vaddq_f32(v35, vmulq_f32(v33, v37)), vmulq_f32(vmulq_f32(v33, v33), vaddq_f32(v32, vmulq_f32(v34, v33))))))), v36);
        float32x4_t v39 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
        float32x4_t v40 = vsubq_f32(v39, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v39, v38)));
        float32x4_t v41 = vsubq_f32(v38, v40);
        float32x4_t v42 = *((float32x4_t *)a2 + 19);
        float32x4_t v43 = *((float32x4_t *)a2 + 20);
        float32x4_t v44 = *((float32x4_t *)a2 + 21);
        int32x4_t v45 = *((int32x4_t *)a2 + 22);
        float32x4_t v46 = vmulq_f32(vaddq_f32(v24, vmulq_f32(v41, vaddq_f32(v44, vmulq_f32(v41, vaddq_f32(v42, vmulq_f32(v43, v41)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v45, vcvtq_s32_f32(v40)), 0x17uLL));
        float32x4_t v47 = vmulq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)a2);
        float32x4_t v48 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 3), v14);
        float32x4_t v49 = vmulq_f32(v16, vrecpeq_f32(v48));
        float32x4_t v50 = vmulq_f32(v47, vmulq_f32(v49, vrecpsq_f32(v49, v48)));
        float32x4_t v51 = vminq_f32(vmaxq_f32(v50, v20), v21);
        float32x4_t v52 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v51), (int8x16_t)v24);
        float32x4_t v53 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v52, v29));
        float32x4_t v54 = vsubq_f32(vsubq_f32(v52, v24), vmulq_f32(vmulq_f32(v31, v53), v52));
        float32x4_t v55 = vmaxq_f32(vmulq_f32(v22, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v51, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v26, v51))), v28), v53), vmulq_f32(v54, vaddq_f32(vaddq_f32(v35, vmulq_f32(v37, v54)), vmulq_f32(vmulq_f32(v54, v54), vaddq_f32(v32, vmulq_f32(v34, v54))))))), v36);
        float32x4_t v56 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
        float32x4_t v57 = vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v56, v55)));
        float32x4_t v58 = vsubq_f32(v55, v57);
        float32x4_t v59 = vmulq_f32(vaddq_f32(v24, vmulq_f32(v58, vaddq_f32(v44, vmulq_f32(v58, vaddq_f32(v42, vmulq_f32(v43, v58)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v57), v45), 0x17uLL));
        float32x4_t v60 = vminq_f32(vmaxq_f32(vaddq_f32(vaddq_f32(v46, v59), vmulq_laneq_f32(vmulq_f32(v46, v59), *((float32x4_t *)a2 + 87), 2)), v20), *((float32x4_t *)a2 + 30));
        float32x4_t v61 = (float32x4_t)vorrq_s8(vandq_s8(v17, (int8x16_t)v60), (int8x16_t)v24);
        float32x4_t v62 = (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v61, v29));
        float32x4_t v63 = vsubq_f32(vsubq_f32(v61, v24), vmulq_f32(vmulq_f32(v31, v62), v61));
        float32x4_t v64 = vmaxq_f32(vmulq_f32(*((float32x4_t *)a2 + 25), vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v60, 0x17uLL)), (float32x4_t)vandq_s8(v27, (int8x16_t)vcgtq_f32(v26, v60))), v28), v62), vmulq_f32(v63, vaddq_f32(vaddq_f32(v35, vmulq_f32(v37, v63)), vmulq_f32(vmulq_f32(v63, v63), vaddq_f32(v32, vmulq_f32(v34, v63))))))), v36);
        float32x4_t v65 = vcvtq_f32_s32(vcvtq_s32_f32(v64));
        float32x4_t v66 = vsubq_f32(v65, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vcgtq_f32(v65, v64)));
        float32x4_t v67 = vsubq_f32(v64, v66);
        float32x4_t v68 = vmulq_f32(vaddq_f32(v24, vmulq_f32(v67, vaddq_f32(v44, vmulq_f32(v67, vaddq_f32(v42, vmulq_f32(v43, v67)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v66), v45), 0x17uLL));
        v68.i32[3] = 1.0;
        *(float32x4_t *)(v7 + v12) = vaddq_f32(v13, vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)v68, (int8x16_t)vaddq_f32(v50, vmulq_laneq_f32(vsubq_f32(v68, v50), v13, 3))), v13), v47, 3));
        v12 += 16;
      }
      while (v11 != v12);
      ++v4;
      v5 += v8;
      v6 += v9;
      v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t GetBlendStencilAlphaTile(HGTile *a1, float32x4_t *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    uint64_t v5 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 22);
    uint64_t v10 = *((int *)a1 + 26);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v34 = 0;
        uint64_t v35 = 16 * v10;
        uint64_t v36 = 16 * v9;
        uint64_t v37 = 16 * v8;
        uint64_t v38 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v39 = 0;
          do
          {
            v7[v39 / 0x10] = vmulq_laneq_f32(v6[v39 / 0x10], vmulq_f32(v5[v39 / 0x10], *a2), 3);
            v39 += 16;
          }
          while (v38 != v39);
          ++v34;
          uint64_t v5 = (float32x4_t *)((char *)v5 + v35);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v36);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v37);
        }
        while (v34 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      float32x4_t v15 = v5 + 4;
      float32x4_t v16 = v6 + 4;
      int8x16_t v17 = v7 + 4;
      do
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
        float32x4_t v20 = v17;
        float32x4_t v21 = v16;
        float32x4_t v22 = v15;
        do
        {
          float32x4_t v23 = v22;
          float32x4_t v24 = v21;
          float32x4_t v25 = v20;
          float32x4_t v26 = (float32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 0xCuLL);
          float32x4_t v27 = vmulq_n_f32(v6[v18 + 1], vmulq_laneq_f32(v26, v5[v18 + 1], 3).f32[0]);
          float32x4_t v28 = vmulq_n_f32(v6[v18 + 2], vmulq_laneq_f32(v26, v5[v18 + 2], 3).f32[0]);
          float32x4_t v29 = vmulq_n_f32(v6[v18 + 3], vmulq_laneq_f32(v26, v5[v18 + 3], 3).f32[0]);
          float32x4_t v30 = &v7[v18];
          *float32x4_t v30 = vmulq_n_f32(v6[v18], vmulq_laneq_f32(v26, v5[v18], 3).f32[0]);
          v30[1] = v27;
          v19 += 4;
          v18 += 4;
          v30[2] = v28;
          v30[3] = v29;
          v22 += 4;
          v21 += 4;
          float32x4_t v20 = v25 + 4;
        }
        while ((uint64_t)v19 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v31 = *v23++;
            float32x4_t v32 = v31;
            float32x4_t v33 = *v24++;
            *v25++ = vmulq_laneq_f32(v33, vmulq_f32(v32, *a2), 3);
            ++v19;
          }
          while (v19 < v4);
        }
        ++v11;
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v13);
        uint64_t v5 = (float32x4_t *)((char *)v5 + v14);
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v14);
        float32x4_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (float32x4_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendStencilLumaTile(HGTile *a1, float32x4_t *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    uint64_t v5 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 22);
    uint64_t v10 = *((int *)a1 + 26);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v39 = 0;
        uint64_t v40 = 16 * v10;
        uint64_t v41 = 16 * v9;
        uint64_t v42 = 16 * v8;
        uint64_t v43 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v44 = 0;
          do
          {
            float32x4_t v45 = vmulq_f32(vmulq_f32(v5[v44 / 0x10], *a2), a2[88]);
            v7[v44 / 0x10] = vmulq_n_f32(v6[v44 / 0x10], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).f32[0]);
            v44 += 16;
          }
          while (v43 != v44);
          ++v39;
          uint64_t v5 = (float32x4_t *)((char *)v5 + v40);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v41);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v42);
        }
        while (v39 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      float32x4_t v15 = v5 + 4;
      float32x4_t v16 = v6 + 4;
      int8x16_t v17 = v7 + 4;
      do
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
        float32x4_t v20 = v17;
        float32x4_t v21 = v16;
        float32x4_t v22 = v15;
        do
        {
          float32x4_t v23 = v22;
          float32x4_t v24 = v21;
          float32x4_t v25 = v20;
          float32x4_t v26 = a2[88];
          float32x4_t v27 = vmulq_f32(vmulq_f32(v5[v18], *a2), v26);
          float32x4_t v28 = vmulq_f32(vmulq_f32(v5[v18 + 1], *a2), v26);
          float32x4_t v29 = vmulq_f32(vmulq_f32(v5[v18 + 2], *a2), v26);
          float32x4_t v30 = vmulq_f32(vmulq_f32(v5[v18 + 3], *a2), v26);
          float32x4_t v31 = vmulq_n_f32(v6[v18 + 1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]);
          float32x4_t v32 = vmulq_n_f32(v6[v18 + 2], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]);
          float32x4_t v33 = vmulq_n_f32(v6[v18 + 3], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]);
          int v34 = &v7[v18];
          *int v34 = vmulq_n_f32(v6[v18], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]);
          v34[1] = v31;
          v19 += 4;
          v18 += 4;
          v34[2] = v32;
          v34[3] = v33;
          v22 += 4;
          v21 += 4;
          float32x4_t v20 = v25 + 4;
        }
        while ((uint64_t)v19 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v35 = *v23++;
            float32x4_t v36 = vmulq_f32(v35, *a2);
            float32x4_t v37 = *v24++;
            float32x4_t v38 = vmulq_f32(v36, a2[88]);
            *v25++ = vmulq_n_f32(v37, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]);
            ++v19;
          }
          while (v19 < v4);
        }
        ++v11;
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v13);
        uint64_t v5 = (float32x4_t *)((char *)v5 + v14);
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v14);
        float32x4_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (float32x4_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendSilhouetteAlphaTile(HGTile *a1, float32x4_t *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    uint64_t v5 = (int32x4_t *)*((void *)a1 + 12);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 22);
    uint64_t v10 = *((int *)a1 + 26);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v34 = 0;
        uint64_t v35 = 16 * v10;
        uint64_t v36 = 16 * v9;
        uint64_t v37 = 16 * v8;
        uint64_t v38 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v39 = 0;
          do
          {
            v7[v39 / 0x10] = vaddq_f32(v6[v39 / 0x10], vmulq_n_f32(v6[v39 / 0x10], vmulq_laneq_f32(vnegq_f32((float32x4_t)vdupq_laneq_s32(v5[v39 / 0x10], 3)), *a2, 3).f32[0]));
            v39 += 16;
          }
          while (v38 != v39);
          ++v34;
          uint64_t v5 = (int32x4_t *)((char *)v5 + v35);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v36);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v37);
        }
        while (v34 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      float32x4_t v15 = v5 + 4;
      float32x4_t v16 = v6 + 4;
      int8x16_t v17 = v7 + 4;
      do
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
        float32x4_t v20 = v17;
        float32x4_t v21 = v16;
        float32x4_t v22 = v15;
        do
        {
          float32x4_t v23 = v22;
          float32x4_t v24 = v21;
          float32x4_t v25 = v20;
          float32x4_t v26 = (float32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 0xCuLL);
          float32x4_t v27 = vaddq_f32(v6[v18 + 1], vmulq_n_f32(v6[v18 + 1], vmulq_f32(v26, vnegq_f32((float32x4_t)vdupq_laneq_s32(v5[v18 + 1], 3))).f32[0]));
          float32x4_t v28 = vaddq_f32(v6[v18 + 2], vmulq_n_f32(v6[v18 + 2], vmulq_f32(v26, vnegq_f32((float32x4_t)vdupq_laneq_s32(v5[v18 + 2], 3))).f32[0]));
          float32x4_t v29 = vaddq_f32(v6[v18 + 3], vmulq_n_f32(v6[v18 + 3], vmulq_f32(v26, vnegq_f32((float32x4_t)vdupq_laneq_s32(v5[v18 + 3], 3))).f32[0]));
          float32x4_t v30 = &v7[v18];
          *float32x4_t v30 = vaddq_f32(v6[v18], vmulq_n_f32(v6[v18], vmulq_f32(v26, vnegq_f32((float32x4_t)vdupq_laneq_s32(v5[v18], 3))).f32[0]));
          v30[1] = v27;
          v19 += 4;
          v18 += 4;
          v30[2] = v28;
          v30[3] = v29;
          v22 += 4;
          v21 += 4;
          float32x4_t v20 = v25 + 4;
        }
        while ((uint64_t)v19 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v19)
        {
          do
          {
            int32x4_t v31 = *v23++;
            LODWORD(v32) = vmulq_laneq_f32(vnegq_f32((float32x4_t)vdupq_laneq_s32(v31, 3)), *a2, 3).u32[0];
            float32x4_t v33 = *v24++;
            *v25++ = vaddq_f32(v33, vmulq_n_f32(v33, v32));
            ++v19;
          }
          while (v19 < v4);
        }
        ++v11;
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v13);
        uint64_t v5 = (int32x4_t *)((char *)v5 + v14);
        float32x4_t v15 = (int32x4_t *)((char *)v15 + v14);
        float32x4_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (float32x4_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendSilhouetteLumaTile(HGTile *a1, float32x4_t *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    uint64_t v5 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 22);
    uint64_t v10 = *((int *)a1 + 26);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v62 = 0;
        uint64_t v63 = 16 * v10;
        uint64_t v64 = 16 * v9;
        uint64_t v65 = 16 * v8;
        uint64_t v66 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v67 = 0;
          do
          {
            float32x4_t v68 = v5[v67 / 0x10];
            float32x4_t v69 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 3), a2[6]);
            float32x4_t v70 = vmulq_f32(vrecpeq_f32(v69), a2[7]);
            float32x4_t v71 = vmulq_f32(a2[88], vmulq_f32(*a2, vmulq_f32(v68, vmulq_f32(v70, vrecpsq_f32(v70, v69)))));
            v7[v67 / 0x10] = vmulq_n_f32(v6[v67 / 0x10], vsubq_f32(a2[29], vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL), vaddq_f32(v71, (float32x4_t)vrev64q_s32((int32x4_t)v71))), a2[32]), a2[29])).f32[0]);
            v67 += 16;
          }
          while (v66 != v67);
          ++v62;
          uint64_t v5 = (float32x4_t *)((char *)v5 + v63);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v64);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v65);
        }
        while (v62 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      float32x4_t v15 = v5 + 4;
      float32x4_t v16 = v6 + 4;
      int8x16_t v17 = v7 + 4;
      do
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
        float32x4_t v20 = v17;
        float32x4_t v21 = v16;
        float32x4_t v22 = v15;
        do
        {
          float32x4_t v23 = v5[v18];
          float32x4_t v24 = v5[v18 + 1];
          float32x4_t v25 = v5[v18 + 2];
          float32x4_t v26 = v5[v18 + 3];
          float32x4_t v27 = v22;
          float32x4_t v28 = v21;
          float32x4_t v29 = a2[6];
          float32x4_t v30 = a2[7];
          float32x4_t v31 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 3), v29);
          float32x4_t v32 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3), v29);
          float32x4_t v33 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 3), v29);
          float32x4_t v34 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 3), v29);
          float32x4_t v35 = vmulq_f32(vrecpeq_f32(v31), v30);
          float32x4_t v36 = vmulq_f32(vrecpeq_f32(v32), v30);
          float32x4_t v37 = vmulq_f32(vrecpeq_f32(v33), v30);
          float32x4_t v38 = vmulq_f32(vrecpeq_f32(v34), v30);
          float32x4_t v39 = vmulq_f32(vmulq_f32(v23, vmulq_f32(v35, vrecpsq_f32(v35, v31))), *a2);
          float32x4_t v40 = a2[88];
          float32x4_t v41 = vmulq_f32(v39, v40);
          float32x4_t v42 = vmulq_f32(vmulq_f32(vmulq_f32(v24, vmulq_f32(v36, vrecpsq_f32(v36, v32))), *a2), v40);
          float32x4_t v43 = vmulq_f32(vmulq_f32(vmulq_f32(v25, vmulq_f32(v37, vrecpsq_f32(v37, v33))), *a2), v40);
          float32x4_t v44 = vmulq_f32(v40, vmulq_f32(*a2, vmulq_f32(v26, vmulq_f32(v38, vrecpsq_f32(v38, v34)))));
          float32x4_t v45 = a2[32];
          float32x4_t v46 = vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL), vaddq_f32(v41, (float32x4_t)vrev64q_s32((int32x4_t)v41))), v45);
          float32x4_t v47 = vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL), vaddq_f32(v42, (float32x4_t)vrev64q_s32((int32x4_t)v42))), v45);
          float32x4_t v48 = vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL), vaddq_f32(v43, (float32x4_t)vrev64q_s32((int32x4_t)v43))), v45);
          float32x4_t v49 = vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL), vaddq_f32(v44, (float32x4_t)vrev64q_s32((int32x4_t)v44))), v45);
          float32x4_t v50 = a2[29];
          float32x4_t v51 = v20;
          float32x4_t v52 = vmulq_n_f32(v6[v18], vsubq_f32(v50, vminq_f32(v46, v50)).f32[0]);
          float32x4_t v53 = vmulq_n_f32(v6[v18 + 1], vsubq_f32(v50, vminq_f32(v47, v50)).f32[0]);
          float32x4_t v54 = vmulq_n_f32(v6[v18 + 2], vsubq_f32(v50, vminq_f32(v48, v50)).f32[0]);
          float32x4_t v55 = vmulq_n_f32(v6[v18 + 3], vsubq_f32(v50, vminq_f32(v49, v50)).f32[0]);
          float32x4_t v56 = &v7[v18];
          v19 += 4;
          v18 += 4;
          *float32x4_t v56 = v52;
          v56[1] = v53;
          v56[2] = v54;
          v56[3] = v55;
          v22 += 4;
          v21 += 4;
          float32x4_t v20 = v51 + 4;
        }
        while ((uint64_t)v19 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v57 = *v27++;
            float32x4_t v58 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3), a2[6]);
            float32x4_t v59 = vmulq_f32(vrecpeq_f32(v58), a2[7]);
            float32x4_t v60 = vmulq_f32(a2[88], vmulq_f32(*a2, vmulq_f32(v57, vmulq_f32(v59, vrecpsq_f32(v59, v58)))));
            float32x4_t v61 = *v28++;
            *v51++ = vmulq_n_f32(v61, vsubq_f32(a2[29], vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL), vaddq_f32(v60, (float32x4_t)vrev64q_s32((int32x4_t)v60))), a2[32]), a2[29])).f32[0]);
            ++v19;
          }
          while (v19 < v4);
        }
        ++v11;
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v13);
        uint64_t v5 = (float32x4_t *)((char *)v5 + v14);
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v14);
        float32x4_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (float32x4_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendBehindTile(HGTile *a1, float32x4_t *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    uint64_t v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 26);
    uint64_t v10 = *((int *)a1 + 22);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v34 = 0;
        uint64_t v35 = 16 * v10;
        uint64_t v36 = 16 * v9;
        uint64_t v37 = 16 * v8;
        uint64_t v38 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v39 = 0;
          do
          {
            v7[v39 / 0x10] = vaddq_f32(v5[v39 / 0x10], vmulq_f32(vmulq_f32(v6[v39 / 0x10], *a2), vsubq_f32(a2[3], (float32x4_t)vdupq_laneq_s32((int32x4_t)v5[v39 / 0x10], 3))));
            v39 += 16;
          }
          while (v38 != v39);
          ++v34;
          uint64_t v5 = (float32x4_t *)((char *)v5 + v35);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v36);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v37);
        }
        while (v34 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      float32x4_t v15 = v5 + 4;
      float32x4_t v16 = v6 + 4;
      int8x16_t v17 = v7 + 4;
      do
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
        float32x4_t v20 = v17;
        float32x4_t v21 = v16;
        float32x4_t v22 = v15;
        do
        {
          float32x4_t v23 = v22;
          float32x4_t v24 = v21;
          float32x4_t v25 = v20;
          float32x4_t v26 = a2[3];
          float32x4_t v27 = vaddq_f32(v5[v18 + 1], vmulq_f32(vmulq_f32(v6[v18 + 1], *a2), vsubq_f32(v26, (float32x4_t)vdupq_laneq_s32((int32x4_t)v5[v18 + 1], 3))));
          float32x4_t v28 = vaddq_f32(v5[v18 + 2], vmulq_f32(vmulq_f32(v6[v18 + 2], *a2), vsubq_f32(v26, (float32x4_t)vdupq_laneq_s32((int32x4_t)v5[v18 + 2], 3))));
          float32x4_t v29 = vaddq_f32(v5[v18 + 3], vmulq_f32(vmulq_f32(v6[v18 + 3], *a2), vsubq_f32(v26, (float32x4_t)vdupq_laneq_s32((int32x4_t)v5[v18 + 3], 3))));
          float32x4_t v30 = &v7[v18];
          *float32x4_t v30 = vaddq_f32(v5[v18], vmulq_f32(vmulq_f32(v6[v18], *a2), vsubq_f32(v26, (float32x4_t)vdupq_laneq_s32((int32x4_t)v5[v18], 3))));
          v30[1] = v27;
          v19 += 4;
          v18 += 4;
          v30[2] = v28;
          v30[3] = v29;
          v22 += 4;
          v21 += 4;
          float32x4_t v20 = v25 + 4;
        }
        while ((uint64_t)v19 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v31 = *v23++;
            float32x4_t v32 = v31;
            float32x4_t v33 = *v24++;
            *v25++ = vaddq_f32(v32, vmulq_f32(vmulq_f32(v33, *a2), vsubq_f32(a2[3], (float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 3))));
            ++v19;
          }
          while (v19 < v4);
        }
        ++v11;
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v13);
        uint64_t v5 = (float32x4_t *)((char *)v5 + v14);
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v14);
        float32x4_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (float32x4_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendAlphaAddTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    uint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    uint64_t v5 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v7 = (int8x16_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 26);
    uint64_t v10 = *((int *)a1 + 22);
    if ((int)v4 < 3)
    {
      if ((int)v4 >= 1)
      {
        int v72 = 0;
        uint64_t v73 = 16 * v10;
        uint64_t v74 = 16 * v9;
        uint64_t v75 = 16 * v8;
        uint64_t v76 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v77 = 0;
          do
          {
            float32x4_t v78 = v5[v77 / 0x10];
            float32x4_t v79 = vmulq_f32(v6[v77 / 0x10], *(float32x4_t *)a2);
            float32x4_t v80 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 3), *((float32x4_t *)a2 + 6));
            float32x4_t v81 = vmulq_f32(vrecpeq_f32(v80), *((float32x4_t *)a2 + 7));
            float32x4_t v82 = vmulq_f32(v78, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v81, vrecpsq_f32(v81, v80))), *((int8x16_t *)a2 + 32)));
            v7[v77 / 0x10] = vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v79, v82), *((float32x4_t *)a2 + 88)), *((float32x4_t *)a2 + 86)), (int8x16_t)vaddq_f32(v79, vmulq_f32(vminq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 3), (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(*((float32x4_t *)a2 + 29), (float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 3)), 0)), v82)));
            v77 += 16;
          }
          while (v76 != v77);
          ++v72;
          uint64_t v5 = (float32x4_t *)((char *)v5 + v73);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v74);
          uint64_t v7 = (int8x16_t *)((char *)v7 + v75);
        }
        while (v72 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      float32x4_t v15 = v5 + 3;
      float32x4_t v16 = v6 + 3;
      int8x16_t v17 = v7 + 3;
      do
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
        int v20 = 3;
        float32x4_t v21 = v17;
        float32x4_t v22 = v16;
        float32x4_t v23 = v15;
        do
        {
          float32x4_t v24 = v23;
          float32x4_t v25 = v22;
          float32x4_t v26 = v21;
          int v27 = v20;
          float32x4_t v28 = v5[v18];
          float32x4_t v29 = v5[v18 + 1];
          float32x4_t v30 = v5[v18 + 2];
          float32x4_t v31 = vmulq_f32(v6[v18], *(float32x4_t *)a2);
          float32x4_t v32 = vmulq_f32(v6[v18 + 1], *(float32x4_t *)a2);
          float32x4_t v33 = *((float32x4_t *)a2 + 29);
          float32x4_t v34 = vmulq_f32(v6[v18 + 2], *(float32x4_t *)a2);
          int8x16_t v36 = *((int8x16_t *)a2 + 5);
          float32x4_t v35 = *((float32x4_t *)a2 + 6);
          float32x4_t v37 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 3), v35);
          float32x4_t v38 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 3), v35);
          float32x4_t v39 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 3), v35);
          float32x4_t v40 = *((float32x4_t *)a2 + 7);
          float32x4_t v41 = vmulq_f32(vrecpeq_f32(v37), v40);
          float32x4_t v42 = vmulq_f32(vrecpeq_f32(v38), v40);
          float32x4_t v43 = vmulq_f32(vrecpeq_f32(v39), v40);
          int32x2_t v44 = (int32x2_t)vsubq_f32(v33, (float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 3)).u64[0];
          int8x16_t v45 = (int8x16_t)vmulq_f32(v41, vrecpsq_f32(v41, v37));
          int8x16_t v46 = (int8x16_t)vmulq_f32(v42, vrecpsq_f32(v42, v38));
          int8x16_t v47 = *((int8x16_t *)a2 + 31);
          int8x16_t v48 = *((int8x16_t *)a2 + 32);
          float32x4_t v49 = vmulq_f32(v28, (float32x4_t)vorrq_s8(vandq_s8(v47, v45), v48));
          float32x4_t v50 = vmulq_f32(v29, (float32x4_t)vorrq_s8(vandq_s8(v47, v46), v48));
          float32x4_t v51 = vmulq_f32(v30, (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)vmulq_f32(v43, vrecpsq_f32(v43, v39))), v48));
          int8x16_t v52 = (int8x16_t)vaddq_f32(v31, vmulq_f32(vminq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 3), (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(v33, (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 3)), 0)), v49));
          float32x4_t v53 = vmulq_f32(v51, vminq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 3), (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(v33, (float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 3)), 0)));
          float32x4_t v54 = vaddq_f32(v31, v49);
          float32x4_t v55 = vaddq_f32(v32, v50);
          int8x16_t v56 = (int8x16_t)vaddq_f32(v32, vmulq_f32(v50, vminq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 3), (float32x4_t)vdupq_lane_s32(v44, 0))));
          float32x4_t v57 = vaddq_f32(v34, v51);
          float32x4_t v58 = *((float32x4_t *)a2 + 88);
          float32x4_t v59 = vmaxq_f32(v54, v58);
          float32x4_t v60 = vmaxq_f32(v55, v58);
          float32x4_t v61 = vmaxq_f32(v57, v58);
          int8x16_t v62 = (int8x16_t)vaddq_f32(v34, v53);
          float32x4_t v63 = *((float32x4_t *)a2 + 86);
          uint64_t v64 = &v7[v18];
          v19 += 3;
          v18 += 3;
          v23 += 3;
          *uint64_t v64 = vbslq_s8(v36, (int8x16_t)vminq_f32(v59, v63), v52);
          v64[1] = vbslq_s8(v36, (int8x16_t)vminq_f32(v60, v63), v56);
          v64[2] = vbslq_s8(v36, (int8x16_t)vminq_f32(v61, v63), v62);
          v22 += 3;
          v21 += 3;
          int v20 = v27 + 3;
        }
        while (v19 < v4 - 2);
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v65 = *v24++;
            float32x4_t v66 = v65;
            float32x4_t v67 = *v25++;
            float32x4_t v68 = vmulq_f32(v67, *(float32x4_t *)a2);
            float32x4_t v69 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 3), *((float32x4_t *)a2 + 6));
            float32x4_t v70 = vmulq_f32(vrecpeq_f32(v69), *((float32x4_t *)a2 + 7));
            float32x4_t v71 = vmulq_f32(v66, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v70, vrecpsq_f32(v70, v69))), *((int8x16_t *)a2 + 32)));
            *v26++ = vbslq_s8(*((int8x16_t *)a2 + 5), (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v68, v71), *((float32x4_t *)a2 + 88)), *((float32x4_t *)a2 + 86)), (int8x16_t)vaddq_f32(v68, vmulq_f32(vminq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 3), (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(*((float32x4_t *)a2 + 29), (float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 3)), 0)), v71)));
            ++v27;
          }
          while ((int)v4 > v27);
        }
        ++v11;
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (int8x16_t *)((char *)v7 + v13);
        uint64_t v5 = (float32x4_t *)((char *)v5 + v14);
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v14);
        float32x4_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (int8x16_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendLuminescentPremulTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    uint64_t v5 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 22);
    uint64_t v10 = *((int *)a1 + 26);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v64 = 0;
        uint64_t v65 = 16 * v10;
        uint64_t v66 = 16 * v9;
        uint64_t v67 = 16 * v8;
        uint64_t v68 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v69 = 0;
          do
          {
            float32x4_t v70 = vmulq_f32(v5[v69 / 0x10], *(float32x4_t *)a2);
            float32x4_t v71 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 3);
            float32x4_t v72 = vmaxq_f32(v71, *((float32x4_t *)a2 + 6));
            float32x4_t v73 = vmulq_f32(vrecpeq_f32(v72), *((float32x4_t *)a2 + 7));
            v7[v69 / 0x10] = vaddq_f32(vmulq_f32(v70, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v73, vrecpsq_f32(v73, v72))), *((int8x16_t *)a2 + 32))), vmulq_n_f32(v6[v69 / 0x10], vsubq_f32(*((float32x4_t *)a2 + 29), v71).f32[0]));
            v69 += 16;
          }
          while (v68 != v69);
          ++v64;
          uint64_t v5 = (float32x4_t *)((char *)v5 + v65);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v66);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v67);
        }
        while (v64 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      float32x4_t v15 = v5 + 4;
      float32x4_t v16 = v6 + 4;
      int8x16_t v17 = v7 + 4;
      do
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
        int v20 = v17;
        float32x4_t v21 = v16;
        float32x4_t v22 = v15;
        do
        {
          float32x4_t v23 = v22;
          float32x4_t v24 = vmulq_f32(v5[v18], *(float32x4_t *)a2);
          float32x4_t v25 = vmulq_f32(v5[v18 + 1], *(float32x4_t *)a2);
          float32x4_t v26 = vmulq_f32(v5[v18 + 2], *(float32x4_t *)a2);
          float32x4_t v27 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3);
          float32x4_t v28 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 3);
          float32x4_t v29 = vmulq_f32(v5[v18 + 3], *(float32x4_t *)a2);
          float32x4_t v30 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 3);
          float32x4_t v31 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 3);
          float32x4_t v32 = v21;
          float32x4_t v33 = v20;
          float32x4_t v34 = *((float32x4_t *)a2 + 6);
          float32x4_t v35 = *((float32x4_t *)a2 + 7);
          float32x4_t v36 = vmaxq_f32(v27, v34);
          float32x4_t v37 = vmaxq_f32(v28, v34);
          float32x4_t v38 = vmaxq_f32(v30, v34);
          float32x4_t v39 = vmaxq_f32(v31, v34);
          float32x4_t v40 = vmulq_f32(vrecpeq_f32(v36), v35);
          float32x4_t v41 = vmulq_f32(vrecpeq_f32(v37), v35);
          float32x4_t v42 = vmulq_f32(vrecpeq_f32(v38), v35);
          float32x4_t v43 = vmulq_f32(vrecpeq_f32(v39), v35);
          int8x16_t v44 = (int8x16_t)vmulq_f32(v40, vrecpsq_f32(v40, v36));
          int8x16_t v45 = (int8x16_t)vmulq_f32(v43, vrecpsq_f32(v43, v39));
          int8x16_t v47 = *((int8x16_t *)a2 + 31);
          int8x16_t v46 = *((int8x16_t *)a2 + 32);
          float32x4_t v48 = (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)vmulq_f32(v41, vrecpsq_f32(v41, v37))), v46);
          float32x4_t v49 = (float32x4_t)vorrq_s8(vandq_s8(v47, (int8x16_t)vmulq_f32(v42, vrecpsq_f32(v42, v38))), v46);
          float32x4_t v50 = (float32x4_t)vorrq_s8(vandq_s8(v47, v45), v46);
          float32x4_t v51 = vmulq_f32(v24, (float32x4_t)vorrq_s8(vandq_s8(v47, v44), v46));
          float32x4_t v52 = *((float32x4_t *)a2 + 29);
          float32x4_t v53 = vaddq_f32(v51, vmulq_n_f32(v6[v18], vsubq_f32(v52, v27).f32[0]));
          float32x4_t v54 = vaddq_f32(vmulq_f32(v25, v48), vmulq_n_f32(v6[v18 + 1], vsubq_f32(v52, v28).f32[0]));
          float32x4_t v55 = vaddq_f32(vmulq_f32(v26, v49), vmulq_n_f32(v6[v18 + 2], vsubq_f32(v52, v30).f32[0]));
          float32x4_t v56 = vaddq_f32(vmulq_f32(v29, v50), vmulq_n_f32(v6[v18 + 3], vsubq_f32(v52, v31).f32[0]));
          float32x4_t v57 = &v7[v18];
          v19 += 4;
          v18 += 4;
          *float32x4_t v57 = v53;
          v57[1] = v54;
          v57[2] = v55;
          v57[3] = v56;
          v22 += 4;
          float32x4_t v21 = v32 + 4;
          v20 += 4;
        }
        while ((uint64_t)v19 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v58 = *v23++;
            float32x4_t v59 = vmulq_f32(v58, *(float32x4_t *)a2);
            float32x4_t v60 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 3);
            float32x4_t v61 = vmaxq_f32(v60, *((float32x4_t *)a2 + 6));
            float32x4_t v62 = vmulq_f32(vrecpeq_f32(v61), *((float32x4_t *)a2 + 7));
            float32x4_t v63 = *v32++;
            *v33++ = vaddq_f32(vmulq_f32(v59, (float32x4_t)vorrq_s8(vandq_s8(*((int8x16_t *)a2 + 31), (int8x16_t)vmulq_f32(v62, vrecpsq_f32(v62, v61))), *((int8x16_t *)a2 + 32))), vmulq_n_f32(v63, vsubq_f32(*((float32x4_t *)a2 + 29), v60).f32[0]));
            ++v19;
          }
          while (v19 < v4);
        }
        ++v11;
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v13);
        uint64_t v5 = (float32x4_t *)((char *)v5 + v14);
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v14);
        float32x4_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (float32x4_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendMinStraightTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    uint64_t v5 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 22);
    uint64_t v10 = *((int *)a1 + 26);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v33 = 0;
        uint64_t v34 = 16 * v10;
        uint64_t v35 = 16 * v9;
        uint64_t v36 = 16 * v8;
        uint64_t v37 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v38 = 0;
          do
          {
            v7[v38 / 0x10] = vminq_f32(v6[v38 / 0x10], v5[v38 / 0x10]);
            v38 += 16;
          }
          while (v37 != v38);
          ++v33;
          uint64_t v5 = (float32x4_t *)((char *)v5 + v34);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v35);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v36);
        }
        while (v33 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      float32x4_t v15 = v5 + 4;
      float32x4_t v16 = v6 + 4;
      int8x16_t v17 = v7 + 4;
      do
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
        int v20 = v17;
        float32x4_t v21 = v16;
        float32x4_t v22 = v15;
        do
        {
          float32x4_t v23 = v22;
          float32x4_t v24 = v21;
          float32x4_t v25 = v20;
          float32x4_t v26 = vminq_f32(v6[v18 + 1], v5[v18 + 1]);
          float32x4_t v27 = vminq_f32(v6[v18 + 2], v5[v18 + 2]);
          float32x4_t v28 = vminq_f32(v6[v18 + 3], v5[v18 + 3]);
          float32x4_t v29 = &v7[v18];
          *float32x4_t v29 = vminq_f32(v6[v18], v5[v18]);
          v29[1] = v26;
          v19 += 4;
          v18 += 4;
          v29[2] = v27;
          v29[3] = v28;
          v22 += 4;
          v21 += 4;
          int v20 = v25 + 4;
        }
        while ((uint64_t)v19 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v30 = *v23++;
            float32x4_t v31 = v30;
            float32x4_t v32 = *v24++;
            *v25++ = vminq_f32(v32, v31);
            ++v19;
          }
          while (v19 < v4);
        }
        ++v11;
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v13);
        uint64_t v5 = (float32x4_t *)((char *)v5 + v14);
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v14);
        float32x4_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (float32x4_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendMaxStraightTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    uint64_t v5 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 22);
    uint64_t v10 = *((int *)a1 + 26);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v33 = 0;
        uint64_t v34 = 16 * v10;
        uint64_t v35 = 16 * v9;
        uint64_t v36 = 16 * v8;
        uint64_t v37 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v38 = 0;
          do
          {
            v7[v38 / 0x10] = vmaxq_f32(v6[v38 / 0x10], v5[v38 / 0x10]);
            v38 += 16;
          }
          while (v37 != v38);
          ++v33;
          uint64_t v5 = (float32x4_t *)((char *)v5 + v34);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v35);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v36);
        }
        while (v33 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      float32x4_t v15 = v5 + 4;
      float32x4_t v16 = v6 + 4;
      int8x16_t v17 = v7 + 4;
      do
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
        int v20 = v17;
        float32x4_t v21 = v16;
        float32x4_t v22 = v15;
        do
        {
          float32x4_t v23 = v22;
          float32x4_t v24 = v21;
          float32x4_t v25 = v20;
          float32x4_t v26 = vmaxq_f32(v6[v18 + 1], v5[v18 + 1]);
          float32x4_t v27 = vmaxq_f32(v6[v18 + 2], v5[v18 + 2]);
          float32x4_t v28 = vmaxq_f32(v6[v18 + 3], v5[v18 + 3]);
          float32x4_t v29 = &v7[v18];
          *float32x4_t v29 = vmaxq_f32(v6[v18], v5[v18]);
          v29[1] = v26;
          v19 += 4;
          v18 += 4;
          v29[2] = v27;
          v29[3] = v28;
          v22 += 4;
          v21 += 4;
          int v20 = v25 + 4;
        }
        while ((uint64_t)v19 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v30 = *v23++;
            float32x4_t v31 = v30;
            float32x4_t v32 = *v24++;
            *v25++ = vmaxq_f32(v32, v31);
            ++v19;
          }
          while (v19 < v4);
        }
        ++v11;
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v13);
        uint64_t v5 = (float32x4_t *)((char *)v5 + v14);
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v14);
        float32x4_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (float32x4_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendSubtractStraightTile(HGTile *a1, float32x4_t *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    uint64_t v5 = (float32x4_t *)*((void *)a1 + 12);
    uint64_t v6 = (float32x4_t *)*((void *)a1 + 10);
    uint64_t v7 = (float32x4_t *)*((void *)a1 + 2);
    uint64_t v8 = *((int *)a1 + 6);
    uint64_t v9 = *((int *)a1 + 22);
    uint64_t v10 = *((int *)a1 + 26);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v35 = 0;
        uint64_t v36 = 16 * v10;
        uint64_t v37 = 16 * v9;
        uint64_t v38 = 16 * v8;
        uint64_t v39 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          unint64_t v40 = 0;
          do
          {
            v7[v40 / 0x10] = vminq_f32(vmaxq_f32(vsubq_f32(v6[v40 / 0x10], v5[v40 / 0x10]), a2[4]), a2[3]);
            v40 += 16;
          }
          while (v39 != v40);
          ++v35;
          uint64_t v5 = (float32x4_t *)((char *)v5 + v36);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v37);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v38);
        }
        while (v35 != v3);
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = 16 * v9;
      uint64_t v13 = 16 * v8;
      uint64_t v14 = 16 * v10;
      float32x4_t v15 = v5 + 4;
      float32x4_t v16 = v6 + 4;
      int8x16_t v17 = v7 + 4;
      do
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
        int v20 = v17;
        float32x4_t v21 = v16;
        float32x4_t v22 = v15;
        do
        {
          float32x4_t v23 = v22;
          float32x4_t v24 = v21;
          float32x4_t v25 = v20;
          float32x4_t v27 = a2[3];
          float32x4_t v26 = a2[4];
          float32x4_t v28 = vminq_f32(vmaxq_f32(vsubq_f32(v6[v18 + 1], v5[v18 + 1]), v26), v27);
          float32x4_t v29 = vminq_f32(vmaxq_f32(vsubq_f32(v6[v18 + 2], v5[v18 + 2]), v26), v27);
          float32x4_t v30 = vminq_f32(vmaxq_f32(vsubq_f32(v6[v18 + 3], v5[v18 + 3]), v26), v27);
          float32x4_t v31 = &v7[v18];
          *float32x4_t v31 = vminq_f32(vmaxq_f32(vsubq_f32(v6[v18], v5[v18]), v26), v27);
          v31[1] = v28;
          v19 += 4;
          v18 += 4;
          v31[2] = v29;
          v31[3] = v30;
          v22 += 4;
          v21 += 4;
          int v20 = v25 + 4;
        }
        while ((uint64_t)v19 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v19)
        {
          do
          {
            float32x4_t v32 = *v23++;
            float32x4_t v33 = v32;
            float32x4_t v34 = *v24++;
            *v25++ = vminq_f32(vmaxq_f32(vsubq_f32(v34, v33), a2[4]), a2[3]);
            ++v19;
          }
          while (v19 < v4);
        }
        ++v11;
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v13);
        uint64_t v5 = (float32x4_t *)((char *)v5 + v14);
        float32x4_t v15 = (float32x4_t *)((char *)v15 + v14);
        float32x4_t v16 = (float32x4_t *)((char *)v16 + v12);
        int8x16_t v17 = (float32x4_t *)((char *)v17 + v13);
      }
      while (v11 != v3);
    }
  }
  return 0;
}

uint64_t GetBlendReplaceTile(HGTile *a1, HGHWBlendFlipped::State *a2, HGNode *a3)
{
  int v3 = *((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 1);
  if (v3 >= 1)
  {
    unint64_t v4 = (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
    uint64_t v5 = *((void *)a1 + 12);
    uint64_t v6 = *((void *)a1 + 2);
    uint64_t v7 = *((int *)a1 + 6);
    uint64_t v8 = *((int *)a1 + 26);
    if ((int)v4 < 4)
    {
      if ((int)v4 >= 1)
      {
        int v25 = 0;
        uint64_t v26 = 16 * v8;
        uint64_t v27 = 16 * v7;
        uint64_t v28 = 16 * (*((_DWORD *)a1 + 2) - *(_DWORD *)a1);
        do
        {
          uint64_t v29 = 0;
          do
          {
            *(_OWORD *)(v6 + v29) = *(_OWORD *)(v5 + v29);
            v29 += 16;
          }
          while (v28 != v29);
          ++v25;
          v5 += v26;
          v6 += v27;
        }
        while (v25 != v3);
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 16 * v7;
      uint64_t v11 = 16 * v8;
      uint64_t v12 = (long long *)(v5 + 64);
      uint64_t v13 = (_OWORD *)(v6 + 64);
      do
      {
        unint64_t v14 = 0;
        float32x4_t v15 = v13;
        float32x4_t v16 = v12;
        uint64_t v17 = 32;
        do
        {
          unint64_t v18 = v16;
          unint64_t v19 = v15;
          long long v20 = *(_OWORD *)(v5 + v17 - 16);
          long long v21 = *(_OWORD *)(v5 + v17);
          long long v22 = *(_OWORD *)(v5 + v17 + 16);
          float32x4_t v23 = (_OWORD *)(v6 + v17);
          *(v23 - 2) = *(_OWORD *)(v5 + v17 - 32);
          *(v23 - 1) = v20;
          v14 += 4;
          *float32x4_t v23 = v21;
          v23[1] = v22;
          v17 += 64;
          v16 += 4;
          float32x4_t v15 = v19 + 4;
        }
        while ((uint64_t)v14 < (uint64_t)(v4 - 3));
        if ((int)v4 > (int)v14)
        {
          do
          {
            long long v24 = *v18++;
            *v19++ = v24;
            ++v14;
          }
          while (v14 < v4);
        }
        ++v9;
        v6 += v10;
        v5 += v11;
        uint64_t v12 = (long long *)((char *)v12 + v11);
        uint64_t v13 = (_OWORD *)((char *)v13 + v10);
      }
      while (v9 != v3);
    }
  }
  return 0;
}

const char *GetBlendNormalProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000037c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*half4(hg_Params[0]);\n"
             "    r2 = c0.xxxx - r1.wwww;\n"
             "    output.color0 = float4(r0)*float4(r2) + float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a17166cb:4ae482ef:781fc3b7:6143d1a9\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000352\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*hg_Params[0];\n"
             "    r2 = c0.xxxx - r1.wwww;\n"
             "    output.color0 = r0*r2 + r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=72391b35:a8654f9f:aaa4f0df:bd71ee76\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000301\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = r1*hg_ProgramLocal0;\n"
           "    r2 = c0.xxxx - r1.wwww;\n"
           "    gl_FragColor = r0*r2 + r1;\n"
           "}\n"
           "//MD5=542a3d1f:8a8f31c6:53e2357c:1b7afc62\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendSubtractProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003a2\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*half4(hg_Params[0]);\n"
             "    r2 = r1*r0.wwww;\n"
             "    r3 = r0*r1.wwww;\n"
             "    r1 = r1 + r0;\n"
             "    r0 = clamp(r3 - r2, 0.00000h, 1.00000h);\n"
             "    r1 = r1 - r2;\n"
             "    r1.xyz = r1.xyz - r3.xyz;\n"
             "    output.color0 = float4(r1) + float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=5556c7ef:9907aedc:58ff1d84:51fc5242\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0001:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000037e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*hg_Params[0];\n"
             "    r2 = r1*r0.wwww;\n"
             "    r3 = r0*r1.wwww;\n"
             "    r1 = r1 + r0;\n"
             "    r0 = clamp(r3 - r2, 0.00000f, 1.00000f);\n"
             "    r1 = r1 - r2;\n"
             "    r1.xyz = r1.xyz - r3.xyz;\n"
             "    output.color0 = r1 + r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=eb3b3781:87b777cb:53a6f193:08ae603e\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0001:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000332\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = r1*hg_ProgramLocal0;\n"
           "    r2 = r1*r0.wwww;\n"
           "    r3 = r0*r1.wwww;\n"
           "    r1 = r1 + r0;\n"
           "    r0 = clamp(r3 - r2, vec4(0.00000), vec4(1.00000));\n"
           "    r1 = r1 - r2;\n"
           "    r1.xyz = r1.xyz - r3.xyz;\n"
           "    gl_FragColor = r1 + r0;\n"
           "}\n"
           "//MD5=254c5683:f5388fc5:b71b3a31:31a6659c\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0001:0004:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendSubtractPOWProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000525\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 6.10350e-05h);\n"
             "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r4.xyz = pow(r4.xyz, half3(hg_Params[1].xyz));\n"
             "    r1.xyz = clamp(r1.xyz - r4.xyz, 0.00000h, 1.00000h);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[2].xyz));\n"
             "    r1.w = c0.y;\n"
             "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=034ccae4:2e639f3d:9ea960d6:10ce456c\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0003:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004e6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
             "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r4.xyz = pow(r4.xyz, hg_Params[1].xyz);\n"
             "    r1.xyz = clamp(r1.xyz - r4.xyz, 0.00000f, 1.00000f);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[2].xyz);\n"
             "    r1.w = c0.y;\n"
             "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r1, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ae2c251d:13023d9b:095473c3:7353733d\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0003:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004f0\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r3.xyz = r2.xyz / max(r2.w, 1.00000e-06);\n"
           "    r4.xyz = max(r3.xyz, c0.xxx);\n"
           "    r4.xyz = pow(r4.xyz, hg_ProgramLocal1.xyz);\n"
           "    r1.xyz = clamp(r1.xyz - r4.xyz, vec3(0.00000), vec3(1.00000));\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal2.xyz);\n"
           "    r1.w = c0.y;\n"
           "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r1, r2.wwww);\n"
           "}\n"
           "//MD5=84dc302c:232db03c:dcab2955:8389158c\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0003:0005:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendSubtractQTProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000589\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.330000043, 0.5109999776, 1.955999970);\n"
             "    const half4 c1 = half4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 6.10350e-05h);\n"
             "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r4.xyz = fmin(r4.xyz, c0.yyy);\n"
             "    r4.xyz = pow(r4.xyz, c0.zzz);\n"
             "    r1.xyz = clamp(r1.xyz - r4.xyz, 0.00000h, 1.00000h);\n"
             "    r1.xyz = pow(r1.xyz, c0.www);\n"
             "    r1.w = c1.w;\n"
             "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=e6045bc0:ce073225:cd26248f:d1cec9f3\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000561\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.955999970);\n"
             "    const float4 c1 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
             "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r4.xyz = fmin(r4.xyz, c0.yyy);\n"
             "    r4.xyz = pow(r4.xyz, c0.zzz);\n"
             "    r1.xyz = clamp(r1.xyz - r4.xyz, 0.00000f, 1.00000f);\n"
             "    r1.xyz = pow(r1.xyz, c0.www);\n"
             "    r1.w = c1.w;\n"
             "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r1, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e5cd0c1d:31c65fb7:fa29cf4f:c5e5698b\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000513\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.330000043, 0.5109999776, 1.955999970);\n"
           "    const mediump vec4 c1 = vec4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r3.xyz = r2.xyz / max(r2.w, 1.00000e-06);\n"
           "    r4.xyz = max(r3.xyz, c0.xxx);\n"
           "    r4.xyz = min(r4.xyz, c0.yyy);\n"
           "    r4.xyz = pow(r4.xyz, c0.zzz);\n"
           "    r1.xyz = clamp(r1.xyz - r4.xyz, vec3(0.00000), vec3(1.00000));\n"
           "    r1.xyz = pow(r1.xyz, c0.www);\n"
           "    r1.w = c1.w;\n"
           "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r1, r2.wwww);\n"
           "}\n"
           "//MD5=02349a7c:fed5d8f9:e2fcbb52:0a45f6f4\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0001:0005:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendDarkenProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000384\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*half4(hg_Params[0]);\n"
             "    r2 = r1*r0.wwww;\n"
             "    r3 = r0*r1.wwww;\n"
             "    r4 = fmin(r2, r3);\n"
             "    r1 = r1 + r0;\n"
             "    r1 = r1 - r2;\n"
             "    r1 = r1 - r3;\n"
             "    output.color0 = float4(r1) + float4(r4);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c27f10d4:1c0c8ccb:86556908:22917918\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000360\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*hg_Params[0];\n"
             "    r2 = r1*r0.wwww;\n"
             "    r3 = r0*r1.wwww;\n"
             "    r4 = fmin(r2, r3);\n"
             "    r1 = r1 + r0;\n"
             "    r1 = r1 - r2;\n"
             "    r1 = r1 - r3;\n"
             "    output.color0 = r1 + r4;\n"
             "    return output;\n"
             "}\n"
             "//MD5=fdd9d0ee:dddc8b61:10b27a4f:f7a7aa8e\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000309\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = r1*hg_ProgramLocal0;\n"
           "    r2 = r1*r0.wwww;\n"
           "    r3 = r0*r1.wwww;\n"
           "    r4 = min(r2, r3);\n"
           "    r1 = r1 + r0;\n"
           "    r1 = r1 - r2;\n"
           "    r1 = r1 - r3;\n"
           "    gl_FragColor = r1 + r4;\n"
           "}\n"
           "//MD5=c6b1e65f:1950bd8f:9345f58d:ea3a6afc\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0001:0005:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendMultiplyProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000354\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*half4(hg_Params[0]);\n"
             "    r2 = -r1*r0.wwww + r1;\n"
             "    r3 = -r0*r1.wwww + r0;\n"
             "    r0 = r1*r0 + r2;\n"
             "    output.color0 = float4(r0) + float4(r3);\n"
             "    return output;\n"
             "}\n"
             "//MD5=2db727f4:10641e46:bf7ee213:c988baf5\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0001:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000330\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*hg_Params[0];\n"
             "    r2 = -r1*r0.wwww + r1;\n"
             "    r3 = -r0*r1.wwww + r0;\n"
             "    r0 = r1*r0 + r2;\n"
             "    output.color0 = r0 + r3;\n"
             "    return output;\n"
             "}\n"
             "//MD5=c5063fff:bf9e290b:1a9bab81:f35d0dd5\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0001:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002da\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = r1*hg_ProgramLocal0;\n"
           "    r2 = -r1*r0.wwww + r1;\n"
           "    r3 = -r0*r1.wwww + r0;\n"
           "    r0 = r1*r0 + r2;\n"
           "    gl_FragColor = r0 + r3;\n"
           "}\n"
           "//MD5=af7494ed:87347fbf:050c93a0:b950cd3d\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0001:0004:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendColorBurnProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000627\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(9.999999717e-10, 0.000000000, 1.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*half4(hg_Params[0]);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r2.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r0.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = r1.xyz / fmax(r1.w, 6.10350e-05h);\n"
             "    r4.xyz = half3(r2.xyz == c0.yyy);\n"
             "    r5.xyz = r4.xyz;\n"
             "    r6.xyz = half3(r3.xyz == c0.zzz);\n"
             "    r6.xyz = fmin(r4.xyz, r6.xyz);\n"
             "    r3.xyz = c0.zzz - r3.xyz;\n"
             "    r0.xyz = r3.xyz/r0.xyz;\n"
             "    r0.xyz = fmin(r0.xyz, c0.zzz);\n"
             "    r4.xyz = c0.zzz - r0.xyz;\n"
             "    r0.xyz = half3(c0.yyy < r2.xyz);\n"
             "    r0.xyz = r0.xyz*r4.xyz;\n"
             "    r0.xyz = select(c0.yyy, r0.xyz, -r0.www < 0.00000h);\n"
             "    r0.xyz = select(r0.xyz, c0.yyy, -r5.xyz < 0.00000h);\n"
             "    r0.xyz = select(r0.xyz, c0.zzz, -r6.xyz < 0.00000h);\n"
             "    r2.w = c0.z;\n"
             "    r2.xyz = mix(r2.xyz, r0.xyz, r1.www);\n"
             "    output.color0 = mix(float4(r1), float4(r2), float4(r0.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=e3b571e8:4940a7ed:ce51028e:9c72262e\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000600\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(9.999999717e-10, 0.000000000, 1.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*hg_Params[0];\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r2.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r0.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = r1.xyz / fmax(r1.w, 1.00000e-06f);\n"
             "    r4.xyz = float3(r2.xyz == c0.yyy);\n"
             "    r5.xyz = r4.xyz;\n"
             "    r6.xyz = float3(r3.xyz == c0.zzz);\n"
             "    r6.xyz = fmin(r4.xyz, r6.xyz);\n"
             "    r3.xyz = c0.zzz - r3.xyz;\n"
             "    r0.xyz = r3.xyz/r0.xyz;\n"
             "    r0.xyz = fmin(r0.xyz, c0.zzz);\n"
             "    r4.xyz = c0.zzz - r0.xyz;\n"
             "    r0.xyz = float3(c0.yyy < r2.xyz);\n"
             "    r0.xyz = r0.xyz*r4.xyz;\n"
             "    r0.xyz = select(c0.yyy, r0.xyz, -r0.www < 0.00000f);\n"
             "    r0.xyz = select(r0.xyz, c0.yyy, -r5.xyz < 0.00000f);\n"
             "    r0.xyz = select(r0.xyz, c0.zzz, -r6.xyz < 0.00000f);\n"
             "    r2.w = c0.z;\n"
             "    r2.xyz = mix(r2.xyz, r0.xyz, r1.www);\n"
             "    output.color0 = mix(r1, r2, r0.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=5b37b40a:6c2b9bdc:4847a80f:c21ea799\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000657\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(9.999999717e-10, 0.000000000, 1.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5, r6;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0 = r0*hg_ProgramLocal0;\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r2.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r0.xyz = max(r2.xyz, c0.xxx);\n"
           "    r3.xyz = r1.xyz / max(r1.w, 1.00000e-06);\n"
           "    r4.xyz = vec3(equal(r2.xyz, c0.yyy));\n"
           "    r5.xyz = r4.xyz;\n"
           "    r6.xyz = vec3(equal(r3.xyz, c0.zzz));\n"
           "    r6.xyz = min(r4.xyz, r6.xyz);\n"
           "    r3.xyz = c0.zzz - r3.xyz;\n"
           "    r0.xyz = r3.xyz/r0.xyz;\n"
           "    r0.xyz = min(r0.xyz, c0.zzz);\n"
           "    r4.xyz = c0.zzz - r0.xyz;\n"
           "    r0.xyz = vec3(lessThan(c0.yyy, r2.xyz));\n"
           "    r0.xyz = r0.xyz*r4.xyz;\n"
           "    r0.xyz = vec3(-r0.w < 0.00000 ? r0.x : c0.y, -r0.w < 0.00000 ? r0.y : c0.y, -r0.w < 0.00000 ? r0.z : c0.y"
           ");\n"
           "    r0.xyz = vec3(-r5.x < 0.00000 ? c0.y : r0.x, -r5.y < 0.00000 ? c0.y : r0.y, -r5.z < 0.00000 ? c0.y : r0.z"
           ");\n"
           "    r0.xyz = vec3(-r6.x < 0.00000 ? c0.z : r0.x, -r6.y < 0.00000 ? c0.z : r0.y, -r6.z < 0.00000 ? c0.z : r0.z"
           ");\n"
           "    r2.w = c0.z;\n"
           "    r2.xyz = mix(r2.xyz, r0.xyz, r1.www);\n"
           "    gl_FragColor = mix(r1, r2, r0.wwww);\n"
           "}\n"
           "//MD5=46eb5a7d:62f64092:72a1ef9e:d5f944bf\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0007:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendColorBurnPOWProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000617\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 9.999999717e-10, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 6.10350e-05h);\n"
             "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r2.xyz = pow(r3.xyz, half3(hg_Params[1].xyz));\n"
             "    r4.xyz = c0.yyy - r1.xyz;\n"
             "    r5.xyz = fmax(r2.xyz, c0.zzz);\n"
             "    r4.xyz = r4.xyz/r5.xyz;\n"
             "    r4.xyz = fmin(r4.xyz, c0.yyy);\n"
             "    r4.xyz = c0.yyy - r4.xyz;\n"
             "    r5.xyz = half3(r2.xyz <= c0.zzz);\n"
             "    r1.xyz = half3(r1.xyz >= c0.yyy);\n"
             "    r2.xyz = select(r4.xyz, r1.xyz, -r5.xyz < 0.00000h);\n"
             "    r2.xyz = pow(r2.xyz, half3(hg_Params[2].xyz));\n"
             "    r3.w = c0.y;\n"
             "    r3.xyz = mix(r3.xyz, r2.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r3), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=570d76cb:990c55a1:9dbbc68d:b1868c41\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0003:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000005da\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 9.999999717e-10, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
             "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r2.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
             "    r4.xyz = c0.yyy - r1.xyz;\n"
             "    r5.xyz = fmax(r2.xyz, c0.zzz);\n"
             "    r4.xyz = r4.xyz/r5.xyz;\n"
             "    r4.xyz = fmin(r4.xyz, c0.yyy);\n"
             "    r4.xyz = c0.yyy - r4.xyz;\n"
             "    r5.xyz = float3(r2.xyz <= c0.zzz);\n"
             "    r1.xyz = float3(r1.xyz >= c0.yyy);\n"
             "    r2.xyz = select(r4.xyz, r1.xyz, -r5.xyz < 0.00000f);\n"
             "    r2.xyz = pow(r2.xyz, hg_Params[2].xyz);\n"
             "    r3.w = c0.y;\n"
             "    r3.xyz = mix(r3.xyz, r2.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r3, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=94e0ae90:7e6a7b2c:b8290b58:4acf0b3c\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0003:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000628\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 9.999999717e-10, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r3.xyz = r2.xyz / max(r2.w, 1.00000e-06);\n"
           "    r3.xyz = max(r3.xyz, c0.xxx);\n"
           "    r2.xyz = pow(r3.xyz, hg_ProgramLocal1.xyz);\n"
           "    r4.xyz = c0.yyy - r1.xyz;\n"
           "    r5.xyz = max(r2.xyz, c0.zzz);\n"
           "    r4.xyz = r4.xyz/r5.xyz;\n"
           "    r4.xyz = min(r4.xyz, c0.yyy);\n"
           "    r4.xyz = c0.yyy - r4.xyz;\n"
           "    r5.xyz = vec3(lessThanEqual(r2.xyz, c0.zzz));\n"
           "    r1.xyz = vec3(greaterThanEqual(r1.xyz, c0.yyy));\n"
           "    r2.xyz = vec3(-r5.x < 0.00000 ? r1.x : r4.x, -r5.y < 0.00000 ? r1.y : r4.y, -r5.z < 0.00000 ? r1.z : r4.z"
           ");\n"
           "    r2.xyz = pow(r2.xyz, hg_ProgramLocal2.xyz);\n"
           "    r3.w = c0.y;\n"
           "    r3.xyz = mix(r3.xyz, r2.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r3, r2.wwww);\n"
           "}\n"
           "//MD5=b8b6f47a:39f7acf9:ab910287:9769e876\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0003:0006:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendColorBurnQTProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000006eb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
             "    const half4 c1 = half4(9.999999717e-10, 1.149999976, 1.955999970, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 6.10350e-05h);\n"
             "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r4.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r4.xyz = pow(r4.xyz, c0.zzz);\n"
             "    r2.xyz = r4.xyz;\n"
             "    r4.xyz = c0.www - r1.xyz;\n"
             "    r5.xyz = fmax(r2.xyz, c1.xxx);\n"
             "    r4.xyz = r4.xyz/r5.xyz;\n"
             "    r4.xyz = fmin(r4.xyz, c0.www);\n"
             "    r4.xyz = c0.www - r4.xyz;\n"
             "    r5.xyz = half3(r2.xyz <= c1.xxx);\n"
             "    r1.xyz = half3(r1.xyz >= c0.www);\n"
             "    r2.xyz = select(r4.xyz, r1.xyz, -r5.xyz < 0.00000h);\n"
             "    r5.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r5.xyz = fmin(r5.xyz, c1.yyy);\n"
             "    r5.xyz = pow(r5.xyz, c1.zzz);\n"
             "    r2.xyz = r5.xyz;\n"
             "    r3.w = c0.w;\n"
             "    r3.xyz = mix(r3.xyz, r2.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r3), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=b24af1d8:c66873ac:1ac9e078:474f68f7\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0001:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000006c5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
             "    const float4 c1 = float4(9.999999717e-10, 1.149999976, 1.955999970, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
             "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r4.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r4.xyz = pow(r4.xyz, c0.zzz);\n"
             "    r2.xyz = r4.xyz;\n"
             "    r4.xyz = c0.www - r1.xyz;\n"
             "    r5.xyz = fmax(r2.xyz, c1.xxx);\n"
             "    r4.xyz = r4.xyz/r5.xyz;\n"
             "    r4.xyz = fmin(r4.xyz, c0.www);\n"
             "    r4.xyz = c0.www - r4.xyz;\n"
             "    r5.xyz = float3(r2.xyz <= c1.xxx);\n"
             "    r1.xyz = float3(r1.xyz >= c0.www);\n"
             "    r2.xyz = select(r4.xyz, r1.xyz, -r5.xyz < 0.00000f);\n"
             "    r5.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r5.xyz = fmin(r5.xyz, c1.yyy);\n"
             "    r5.xyz = pow(r5.xyz, c1.zzz);\n"
             "    r2.xyz = r5.xyz;\n"
             "    r3.w = c0.w;\n"
             "    r3.xyz = mix(r3.xyz, r2.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r3, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a6e59c7c:6e77db2c:beaf9e2c:7f713442\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0001:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000006b9\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
           "    const mediump vec4 c1 = vec4(9.999999717e-10, 1.149999976, 1.955999970, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r3.xyz = r2.xyz / max(r2.w, 1.00000e-06);\n"
           "    r3.xyz = max(r3.xyz, c0.xxx);\n"
           "    r4.xyz = min(r3.xyz, c0.yyy);\n"
           "    r4.xyz = pow(r4.xyz, c0.zzz);\n"
           "    r2.xyz = r4.xyz;\n"
           "    r4.xyz = c0.www - r1.xyz;\n"
           "    r5.xyz = max(r2.xyz, c1.xxx);\n"
           "    r4.xyz = r4.xyz/r5.xyz;\n"
           "    r4.xyz = min(r4.xyz, c0.www);\n"
           "    r4.xyz = c0.www - r4.xyz;\n"
           "    r5.xyz = vec3(lessThanEqual(r2.xyz, c1.xxx));\n"
           "    r1.xyz = vec3(greaterThanEqual(r1.xyz, c0.www));\n"
           "    r2.xyz = vec3(-r5.x < 0.00000 ? r1.x : r4.x, -r5.y < 0.00000 ? r1.y : r4.y, -r5.z < 0.00000 ? r1.z : r4.z"
           ");\n"
           "    r5.xyz = max(r2.xyz, c0.xxx);\n"
           "    r5.xyz = min(r5.xyz, c1.yyy);\n"
           "    r5.xyz = pow(r5.xyz, c1.zzz);\n"
           "    r2.xyz = r5.xyz;\n"
           "    r3.w = c0.w;\n"
           "    r3.xyz = mix(r3.xyz, r2.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r3, r2.wwww);\n"
           "}\n"
           "//MD5=d00bfd1e:46e646ab:20a8e4c3:a66a4c56\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0001:0006:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendLinearBurnProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003ba\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*half4(hg_Params[0]);\n"
             "    r2 = r1*r0.wwww;\n"
             "    r3 = r0*r1.wwww;\n"
             "    r4 = r2 + r3;\n"
             "    r4 = clamp(-r0.wwww*r1.wwww + r4, 0.00000h, 1.00000h);\n"
             "    r1 = r1 + r0;\n"
             "    r1 = r1 - r2;\n"
             "    r1 = r1 - r3;\n"
             "    output.color0 = float4(r1) + float4(r4);\n"
             "    return output;\n"
             "}\n"
             "//MD5=1e101a38:54591478:d95a8dbd:601ba2c4\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000396\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*hg_Params[0];\n"
             "    r2 = r1*r0.wwww;\n"
             "    r3 = r0*r1.wwww;\n"
             "    r4 = r2 + r3;\n"
             "    r4 = clamp(-r0.wwww*r1.wwww + r4, 0.00000f, 1.00000f);\n"
             "    r1 = r1 + r0;\n"
             "    r1 = r1 - r2;\n"
             "    r1 = r1 - r3;\n"
             "    output.color0 = r1 + r4;\n"
             "    return output;\n"
             "}\n"
             "//MD5=c72365fd:e4bc0949:da522ad9:1b6a1f34\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000034a\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = r1*hg_ProgramLocal0;\n"
           "    r2 = r1*r0.wwww;\n"
           "    r3 = r0*r1.wwww;\n"
           "    r4 = r2 + r3;\n"
           "    r4 = clamp(-r0.wwww*r1.wwww + r4, vec4(0.00000), vec4(1.00000));\n"
           "    r1 = r1 + r0;\n"
           "    r1 = r1 - r2;\n"
           "    r1 = r1 - r3;\n"
           "    gl_FragColor = r1 + r4;\n"
           "}\n"
           "//MD5=9d2b7873:452b0865:aacc462f:f22ff194\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0001:0005:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendLinearBurnPOWProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000544\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r2 = r2 / half4(fmax(r2.www, 6.10350e-05h), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = pow(r3.xyz, half3(hg_Params[1].xyz));\n"
             "    r3.xyz = r1.xyz + r3.xyz;\n"
             "    r3.xyz = clamp(r3.xyz - c0.yyy, 0.00000h, 1.00000h);\n"
             "    r3.xyz = pow(r3.xyz, half3(hg_Params[2].xyz));\n"
             "    r3.w = c0.y;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r3), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=a9713799:756f6449:5191fac6:7e9abec6\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0003:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000506\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
             "    r3.xyz = r1.xyz + r3.xyz;\n"
             "    r3.xyz = clamp(r3.xyz - c0.yyy, 0.00000f, 1.00000f);\n"
             "    r3.xyz = pow(r3.xyz, hg_Params[2].xyz);\n"
             "    r3.w = c0.y;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r3, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=42e95b47:a261d26c:4fe538a3:da7f5eaa\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0003:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000050e\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r2 = r2 / vec4(max(r2.www, 1.00000e-06), 1.);\n"
           "    r3.xyz = max(r2.xyz, c0.xxx);\n"
           "    r3.xyz = pow(r3.xyz, hg_ProgramLocal1.xyz);\n"
           "    r3.xyz = r1.xyz + r3.xyz;\n"
           "    r3.xyz = clamp(r3.xyz - c0.yyy, vec3(0.00000), vec3(1.00000));\n"
           "    r3.xyz = pow(r3.xyz, hg_ProgramLocal2.xyz);\n"
           "    r3.w = c0.y;\n"
           "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r3, r2.wwww);\n"
           "}\n"
           "//MD5=0e9a47db:8ccb5db8:82974fe5:1f953a2d\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0003:0004:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendLinearBurnQTProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000005a8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
             "    const half4 c1 = half4(1.955999970, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r2 = r2 / half4(fmax(r2.www, 6.10350e-05h), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
             "    r3.xyz = r1.xyz + r3.xyz;\n"
             "    r3.xyz = clamp(r3.xyz - c0.www, 0.00000h, 1.00000h);\n"
             "    r3.xyz = pow(r3.xyz, c1.xxx);\n"
             "    r3.w = c0.w;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r3), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=ea3b487e:9feeec33:989fec51:af7bdd13\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0001:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000581\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
             "    const float4 c1 = float4(1.955999970, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
             "    r3.xyz = r1.xyz + r3.xyz;\n"
             "    r3.xyz = clamp(r3.xyz - c0.www, 0.00000f, 1.00000f);\n"
             "    r3.xyz = pow(r3.xyz, c1.xxx);\n"
             "    r3.w = c0.w;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r3, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=767767e7:fa948aa9:bec4bb27:9a9ec375\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0001:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000531\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
           "    const mediump vec4 c1 = vec4(1.955999970, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r2 = r2 / vec4(max(r2.www, 1.00000e-06), 1.);\n"
           "    r3.xyz = max(r2.xyz, c0.xxx);\n"
           "    r3.xyz = min(r3.xyz, c0.yyy);\n"
           "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
           "    r3.xyz = r1.xyz + r3.xyz;\n"
           "    r3.xyz = clamp(r3.xyz - c0.www, vec3(0.00000), vec3(1.00000));\n"
           "    r3.xyz = pow(r3.xyz, c1.xxx);\n"
           "    r3.w = c0.w;\n"
           "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r3, r2.wwww);\n"
           "}\n"
           "//MD5=97f98cb2:abd3d476:86b68c1d:f9f6d488\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0001:0004:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendAddProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000367\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0*half4(hg_Params[0]);\n"
             "    r2.x = r0.w + r1.w;\n"
             "    output.color0.xyz = float3(r0.xyz) + float3(r1.xyz);\n"
             "    output.color0.w = -float(r0.w)*float(r1.w) + float(r2.x);\n"
             "    return output;\n"
             "}\n"
             "//MD5=1077a5d1:4400e12a:074ef54d:d15010d2\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000032e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0*hg_Params[0];\n"
             "    r2.x = r0.w + r1.w;\n"
             "    output.color0.xyz = r0.xyz + r1.xyz;\n"
             "    output.color0.w = -r0.w*r1.w + r2.x;\n"
             "    return output;\n"
             "}\n"
             "//MD5=bebc6a57:5f9c4eeb:0ea65bab:3d4908ab\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002d7\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0 = r0*hg_ProgramLocal0;\n"
           "    r2.x = r0.w + r1.w;\n"
           "    gl_FragColor.xyz = r0.xyz + r1.xyz;\n"
           "    gl_FragColor.w = -r0.w*r1.w + r2.x;\n"
           "}\n"
           "//MD5=67b2e44f:8950f5a2:c10a502c:ed08d97b\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0001:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendLightenProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000384\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*half4(hg_Params[0]);\n"
             "    r2 = r1*r0.wwww;\n"
             "    r3 = r0*r1.wwww;\n"
             "    r4 = fmax(r2, r3);\n"
             "    r1 = r1 + r0;\n"
             "    r1 = r1 - r2;\n"
             "    r1 = r1 - r3;\n"
             "    output.color0 = float4(r1) + float4(r4);\n"
             "    return output;\n"
             "}\n"
             "//MD5=255abd10:393d4261:149de1f9:66e2ba1d\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000360\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*hg_Params[0];\n"
             "    r2 = r1*r0.wwww;\n"
             "    r3 = r0*r1.wwww;\n"
             "    r4 = fmax(r2, r3);\n"
             "    r1 = r1 + r0;\n"
             "    r1 = r1 - r2;\n"
             "    r1 = r1 - r3;\n"
             "    output.color0 = r1 + r4;\n"
             "    return output;\n"
             "}\n"
             "//MD5=a08d3b39:c090c511:0017968a:c922b48e\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000309\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = r1*hg_ProgramLocal0;\n"
           "    r2 = r1*r0.wwww;\n"
           "    r3 = r0*r1.wwww;\n"
           "    r4 = max(r2, r3);\n"
           "    r1 = r1 + r0;\n"
           "    r1 = r1 - r2;\n"
           "    r1 = r1 - r3;\n"
           "    gl_FragColor = r1 + r4;\n"
           "}\n"
           "//MD5=10f025ae:65373697:69030409:e5173d3b\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0001:0005:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendScreenProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000355\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*half4(hg_Params[0]);\n"
             "    r2 = r1*r0;\n"
             "    r2 = fmin(r2, r1);\n"
             "    r2 = fmin(r2, r0);\n"
             "    r1 = r1 + r0;\n"
             "    output.color0 = float4(r1) - float4(r2);\n"
             "    return output;\n"
             "}\n"
             "//MD5=9771d01d:626a2747:a548b6f1:28e1d417\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000331\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*hg_Params[0];\n"
             "    r2 = r1*r0;\n"
             "    r2 = fmin(r2, r1);\n"
             "    r2 = fmin(r2, r0);\n"
             "    r1 = r1 + r0;\n"
             "    output.color0 = r1 - r2;\n"
             "    return output;\n"
             "}\n"
             "//MD5=31490d41:d9f1dc14:0dca0a9a:b384361c\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002d9\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = r1*hg_ProgramLocal0;\n"
           "    r2 = r1*r0;\n"
           "    r2 = min(r2, r1);\n"
           "    r2 = min(r2, r0);\n"
           "    r1 = r1 + r0;\n"
           "    gl_FragColor = r1 - r2;\n"
           "}\n"
           "//MD5=8190ca66:f656822d:4e06b98f:6e1ba269\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0001:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendScreenPOWProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000058f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r2 = r2 / half4(fmax(r2.www, 6.10350e-05h), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = pow(r3.xyz, half3(hg_Params[1].xyz));\n"
             "    r4.xyz = r3.xyz*r1.xyz;\n"
             "    r4.xyz = fmin(r4.xyz, r3.xyz);\n"
             "    r4.xyz = fmin(r4.xyz, r1.xyz);\n"
             "    r3.xyz = r3.xyz + r1.xyz;\n"
             "    r3.xyz = r3.xyz - r4.xyz;\n"
             "    r3.xyz = pow(r3.xyz, half3(hg_Params[2].xyz));\n"
             "    r3.w = c0.y;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r3), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=9cb777d8:f315bb64:41240f63:eb3a88f5\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0003:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000551\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
             "    r4.xyz = r3.xyz*r1.xyz;\n"
             "    r4.xyz = fmin(r4.xyz, r3.xyz);\n"
             "    r4.xyz = fmin(r4.xyz, r1.xyz);\n"
             "    r3.xyz = r3.xyz + r1.xyz;\n"
             "    r3.xyz = r3.xyz - r4.xyz;\n"
             "    r3.xyz = pow(r3.xyz, hg_Params[2].xyz);\n"
             "    r3.w = c0.y;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r3, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=9eb4b424:300923a1:73d6aee5:2c9b65f1\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0003:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000053d\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "uniform highp sampler2D hg_Texture1;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r2 = r2 / vec4(max(r2.www, 1.00000e-06), 1.);\n"
           "    r3.xyz = max(r2.xyz, c0.xxx);\n"
           "    r3.xyz = pow(r3.xyz, hg_ProgramLocal1.xyz);\n"
           "    r4.xyz = r3.xyz*r1.xyz;\n"
           "    r4.xyz = min(r4.xyz, r3.xyz);\n"
           "    r4.xyz = min(r4.xyz, r1.xyz);\n"
           "    r3.xyz = r3.xyz + r1.xyz;\n"
           "    r3.xyz = r3.xyz - r4.xyz;\n"
           "    r3.xyz = pow(r3.xyz, hg_ProgramLocal2.xyz);\n"
           "    r3.w = c0.y;\n"
           "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r3, r2.wwww);\n"
           "}\n"
           "//MD5=6cd4fd6c:8997112f:cde379a7:0f37f6bd\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0003:0005:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendScreenQTProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000639\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.330000043, 0.5109999776, 1.149999976);\n"
             "    const half4 c1 = half4(1.955999970, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r2 = r2 / half4(fmax(r2.www, 6.10350e-05h), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
             "    r4.xyz = r3.xyz*r1.xyz;\n"
             "    r4.xyz = fmin(r4.xyz, r3.xyz);\n"
             "    r4.xyz = fmin(r4.xyz, r1.xyz);\n"
             "    r3.xyz = r3.xyz + r1.xyz;\n"
             "    r3.xyz = r3.xyz - r4.xyz;\n"
             "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c0.www);\n"
             "    r3.xyz = pow(r3.xyz, c1.xxx);\n"
             "    r3.w = c1.y;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r3), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=463725cf:d032ea9b:4288667c:a7f0289e\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000612\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.149999976);\n"
             "    const float4 c1 = float4(1.955999970, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
             "    r4.xyz = r3.xyz*r1.xyz;\n"
             "    r4.xyz = fmin(r4.xyz, r3.xyz);\n"
             "    r4.xyz = fmin(r4.xyz, r1.xyz);\n"
             "    r3.xyz = r3.xyz + r1.xyz;\n"
             "    r3.xyz = r3.xyz - r4.xyz;\n"
             "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c0.www);\n"
             "    r3.xyz = pow(r3.xyz, c1.xxx);\n"
             "    r3.w = c1.y;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r3, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=5d9e90d5:f3ade941:b5ed64bc:6c6f4219\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000005b4\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.330000043, 0.5109999776, 1.149999976);\n"
           "    const mediump vec4 c1 = vec4(1.955999970, 1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r2 = r2 / vec4(max(r2.www, 1.00000e-06), 1.);\n"
           "    r3.xyz = max(r2.xyz, c0.xxx);\n"
           "    r3.xyz = min(r3.xyz, c0.yyy);\n"
           "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
           "    r4.xyz = r3.xyz*r1.xyz;\n"
           "    r4.xyz = min(r4.xyz, r3.xyz);\n"
           "    r4.xyz = min(r4.xyz, r1.xyz);\n"
           "    r3.xyz = r3.xyz + r1.xyz;\n"
           "    r3.xyz = r3.xyz - r4.xyz;\n"
           "    r3.xyz = max(r3.xyz, c0.xxx);\n"
           "    r3.xyz = min(r3.xyz, c0.www);\n"
           "    r3.xyz = pow(r3.xyz, c1.xxx);\n"
           "    r3.w = c1.y;\n"
           "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r3, r2.wwww);\n"
           "}\n"
           "//MD5=1f12d7ed:2832c3f9:864a4c65:58ad5448\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0001:0005:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendColorDodgeProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000529\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 9.999999717e-10, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*half4(hg_Params[0]);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r2 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 6.10350e-05h);\n"
             "    r4.xyz = c0.xxx - r1.xyz;\n"
             "    r4.xyz = fmax(r4.xyz, c0.yyy);\n"
             "    r4.xyz = r3.xyz/r4.xyz;\n"
             "    r4.xyz = fmin(r4.xyz, c0.xxx);\n"
             "    r4.xyz = select(c0.zzz, r4.xyz, -r3.xyz < 0.00000h);\n"
             "    r3.xyz = half3(r0.xyz >= r0.www);\n"
             "    r4.xyz = select(r4.xyz, c0.xxx, -r3.xyz < 0.00000h);\n"
             "    r1.w = c0.x;\n"
             "    r1.xyz = mix(r1.xyz, r4.xyz, r2.www);\n"
             "    output.color0 = mix(float4(r2), float4(r1), float4(r0.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=eb46fb6d:135380f4:ebc9cb5e:140c4fdd\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000500\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 9.999999717e-10, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*hg_Params[0];\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
             "    r4.xyz = c0.xxx - r1.xyz;\n"
             "    r4.xyz = fmax(r4.xyz, c0.yyy);\n"
             "    r4.xyz = r3.xyz/r4.xyz;\n"
             "    r4.xyz = fmin(r4.xyz, c0.xxx);\n"
             "    r4.xyz = select(c0.zzz, r4.xyz, -r3.xyz < 0.00000f);\n"
             "    r3.xyz = float3(r0.xyz >= r0.www);\n"
             "    r4.xyz = select(r4.xyz, c0.xxx, -r3.xyz < 0.00000f);\n"
             "    r1.w = c0.x;\n"
             "    r1.xyz = mix(r1.xyz, r4.xyz, r2.www);\n"
             "    output.color0 = mix(r2, r1, r0.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=5777bfff:41079900:ca302613:434c6b5b\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000522\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000000, 9.999999717e-10, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0 = r0*hg_ProgramLocal0;\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r3.xyz = r2.xyz / max(r2.w, 1.00000e-06);\n"
           "    r4.xyz = c0.xxx - r1.xyz;\n"
           "    r4.xyz = max(r4.xyz, c0.yyy);\n"
           "    r4.xyz = r3.xyz/r4.xyz;\n"
           "    r4.xyz = min(r4.xyz, c0.xxx);\n"
           "    r4.xyz = vec3(-r3.x < 0.00000 ? r4.x : c0.z, -r3.y < 0.00000 ? r4.y : c0.z, -r3.z < 0.00000 ? r4.z : c0.z"
           ");\n"
           "    r3.xyz = vec3(greaterThanEqual(r0.xyz, r0.www));\n"
           "    r4.xyz = vec3(-r3.x < 0.00000 ? c0.x : r4.x, -r3.y < 0.00000 ? c0.x : r4.y, -r3.z < 0.00000 ? c0.x : r4.z"
           ");\n"
           "    r1.w = c0.x;\n"
           "    r1.xyz = mix(r1.xyz, r4.xyz, r2.www);\n"
           "    gl_FragColor = mix(r2, r1, r0.wwww);\n"
           "}\n"
           "//MD5=5d4d2b6e:d26c940d:c6b5f085:80c4d725\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0005:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendColorDodgePOWProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000602\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 9.999999717e-10, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = clamp(r0.xyz / fmax(r0.w, 6.10350e-05h), 0.00000h, 1.00000h);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r3.w = r2.w*half(hg_Params[0].w);\n"
             "    r2.xyz = r2.xyz / fmax(r2.w, 6.10350e-05h);\n"
             "    r4.xyz = clamp(r2.xyz, 0.00000h, 1.00000h);\n"
             "    r4.xyz = pow(r4.xyz, half3(hg_Params[1].xyz));\n"
             "    r4.xyz = c0.xxx - r4.xyz;\n"
             "    r5.xyz = fmax(r4.xyz, c0.yyy);\n"
             "    r5.xyz = r1.xyz/r5.xyz;\n"
             "    r5.xyz = fmin(r5.xyz, c0.xxx);\n"
             "    r4.xyz = half3(r4.xyz <= c0.yyy);\n"
             "    r1.xyz = half3(r1.xyz > c0.zzz);\n"
             "    r4.xyz = select(r5.xyz, r1.xyz, -r4.xyz < 0.00000h);\n"
             "    r4.xyz = pow(r4.xyz, half3(hg_Params[2].xyz));\n"
             "    r1.w = c0.x;\n"
             "    r1.xyz = mix(r2.xyz, r4.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r3.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=4848c2c8:05058208:3463283e:ea9b21ca\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0003:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000005c6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 9.999999717e-10, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = clamp(r0.xyz / fmax(r0.w, 1.00000e-06f), 0.00000f, 1.00000f);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r3.w = r2.w*hg_Params[0].w;\n"
             "    r2.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
             "    r4.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
             "    r4.xyz = pow(r4.xyz, hg_Params[1].xyz);\n"
             "    r4.xyz = c0.xxx - r4.xyz;\n"
             "    r5.xyz = fmax(r4.xyz, c0.yyy);\n"
             "    r5.xyz = r1.xyz/r5.xyz;\n"
             "    r5.xyz = fmin(r5.xyz, c0.xxx);\n"
             "    r4.xyz = float3(r4.xyz <= c0.yyy);\n"
             "    r1.xyz = float3(r1.xyz > c0.zzz);\n"
             "    r4.xyz = select(r5.xyz, r1.xyz, -r4.xyz < 0.00000f);\n"
             "    r4.xyz = pow(r4.xyz, hg_Params[2].xyz);\n"
             "    r1.w = c0.x;\n"
             "    r1.xyz = mix(r2.xyz, r4.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r1, r3.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=823372e4:ca232079:b3360744:b919756b\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0003:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000626\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000000, 9.999999717e-10, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = clamp(r0.xyz / max(r0.w, 1.00000e-06), vec3(0.00000), vec3(1.00000));\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r3.w = r2.w*hg_ProgramLocal0.w;\n"
           "    r2.xyz = r2.xyz / max(r2.w, 1.00000e-06);\n"
           "    r4.xyz = clamp(r2.xyz, vec3(0.00000), vec3(1.00000));\n"
           "    r4.xyz = pow(r4.xyz, hg_ProgramLocal1.xyz);\n"
           "    r4.xyz = c0.xxx - r4.xyz;\n"
           "    r5.xyz = max(r4.xyz, c0.yyy);\n"
           "    r5.xyz = r1.xyz/r5.xyz;\n"
           "    r5.xyz = min(r5.xyz, c0.xxx);\n"
           "    r4.xyz = vec3(lessThanEqual(r4.xyz, c0.yyy));\n"
           "    r1.xyz = vec3(greaterThan(r1.xyz, c0.zzz));\n"
           "    r4.xyz = vec3(-r4.x < 0.00000 ? r1.x : r5.x, -r4.y < 0.00000 ? r1.y : r5.y, -r4.z < 0.00000 ? r1.z : r5.z"
           ");\n"
           "    r4.xyz = pow(r4.xyz, hg_ProgramLocal2.xyz);\n"
           "    r1.w = c0.x;\n"
           "    r1.xyz = mix(r2.xyz, r4.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r1, r3.wwww);\n"
           "}\n"
           "//MD5=a6379189:7d4fb9ae:eea59fd4:02257bc6\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0003:0006:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendColorDodgeQTProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000666\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5109999776, 1.000000000, 9.999999717e-10, 0.000000000);\n"
             "    const half4 c1 = half4(1.149999976, 1.955999970, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = clamp(r0.xyz / fmax(r0.w, 6.10350e-05h), 0.00000h, 1.00000h);\n"
             "    r1.xyz = pow(r1.xyz, c0.xxx);\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r3.w = r2.w*half(hg_Params[0].w);\n"
             "    r2.xyz = r2.xyz / fmax(r2.w, 6.10350e-05h);\n"
             "    r4.xyz = clamp(r2.xyz, 0.00000h, 1.00000h);\n"
             "    r4.xyz = pow(r4.xyz, c0.xxx);\n"
             "    r4.xyz = c0.yyy - r4.xyz;\n"
             "    r5.xyz = fmax(r4.xyz, c0.zzz);\n"
             "    r5.xyz = r1.xyz/r5.xyz;\n"
             "    r5.xyz = fmin(r5.xyz, c0.yyy);\n"
             "    r4.xyz = half3(r4.xyz <= c0.zzz);\n"
             "    r1.xyz = half3(r1.xyz > c0.www);\n"
             "    r4.xyz = select(r5.xyz, r1.xyz, -r4.xyz < 0.00000h);\n"
             "    r4.xyz = fmax(r4.xyz, c0.www);\n"
             "    r4.xyz = fmin(r4.xyz, c1.xxx);\n"
             "    r4.xyz = pow(r4.xyz, c1.yyy);\n"
             "    r1.w = c0.y;\n"
             "    r1.xyz = mix(r2.xyz, r4.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r3.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=a825f080:a4ac046d:ab7fcd15:0e541422\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0001:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000641\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5109999776, 1.000000000, 9.999999717e-10, 0.000000000);\n"
             "    const float4 c1 = float4(1.149999976, 1.955999970, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = clamp(r0.xyz / fmax(r0.w, 1.00000e-06f), 0.00000f, 1.00000f);\n"
             "    r1.xyz = pow(r1.xyz, c0.xxx);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r3.w = r2.w*hg_Params[0].w;\n"
             "    r2.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
             "    r4.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
             "    r4.xyz = pow(r4.xyz, c0.xxx);\n"
             "    r4.xyz = c0.yyy - r4.xyz;\n"
             "    r5.xyz = fmax(r4.xyz, c0.zzz);\n"
             "    r5.xyz = r1.xyz/r5.xyz;\n"
             "    r5.xyz = fmin(r5.xyz, c0.yyy);\n"
             "    r4.xyz = float3(r4.xyz <= c0.zzz);\n"
             "    r1.xyz = float3(r1.xyz > c0.www);\n"
             "    r4.xyz = select(r5.xyz, r1.xyz, -r4.xyz < 0.00000f);\n"
             "    r4.xyz = fmax(r4.xyz, c0.www);\n"
             "    r4.xyz = fmin(r4.xyz, c1.xxx);\n"
             "    r4.xyz = pow(r4.xyz, c1.yyy);\n"
             "    r1.w = c0.y;\n"
             "    r1.xyz = mix(r2.xyz, r4.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r1, r3.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=6182d137:41b680cb:e86f79a1:e9c16f93\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0001:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000649\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.5109999776, 1.000000000, 9.999999717e-10, 0.000000000);\n"
           "    const mediump vec4 c1 = vec4(1.149999976, 1.955999970, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = clamp(r0.xyz / max(r0.w, 1.00000e-06), vec3(0.00000), vec3(1.00000));\n"
           "    r1.xyz = pow(r1.xyz, c0.xxx);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r3.w = r2.w*hg_ProgramLocal0.w;\n"
           "    r2.xyz = r2.xyz / max(r2.w, 1.00000e-06);\n"
           "    r4.xyz = clamp(r2.xyz, vec3(0.00000), vec3(1.00000));\n"
           "    r4.xyz = pow(r4.xyz, c0.xxx);\n"
           "    r4.xyz = c0.yyy - r4.xyz;\n"
           "    r5.xyz = max(r4.xyz, c0.zzz);\n"
           "    r5.xyz = r1.xyz/r5.xyz;\n"
           "    r5.xyz = min(r5.xyz, c0.yyy);\n"
           "    r4.xyz = vec3(lessThanEqual(r4.xyz, c0.zzz));\n"
           "    r1.xyz = vec3(greaterThan(r1.xyz, c0.www));\n"
           "    r4.xyz = vec3(-r4.x < 0.00000 ? r1.x : r5.x, -r4.y < 0.00000 ? r1.y : r5.y, -r4.z < 0.00000 ? r1.z : r5.z"
           ");\n"
           "    r4.xyz = max(r4.xyz, c0.www);\n"
           "    r4.xyz = min(r4.xyz, c1.xxx);\n"
           "    r4.xyz = pow(r4.xyz, c1.yyy);\n"
           "    r1.w = c0.y;\n"
           "    r1.xyz = mix(r2.xyz, r4.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r1, r3.wwww);\n"
           "}\n"
           "//MD5=3331242c:7b9d6b7f:6e61b8e3:31fcd2bf\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0001:0006:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendLinearDodgeProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000044b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r2 = r2 / half4(fmax(r2.www, 6.10350e-05h), 1.);\n"
             "    r1.xyz = r1.xyz + r2.xyz;\n"
             "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
             "    r1.w = c0.x;\n"
             "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=2994a515:9ecc05bf:f2990959:ef67ab18\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000422\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
             "    r1.xyz = r1.xyz + r2.xyz;\n"
             "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
             "    r1.w = c0.x;\n"
             "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r1, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=6c886f95:429aa15c:a9a60901:698f617f\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003c7\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r2 = r2 / vec4(max(r2.www, 1.00000e-06), 1.);\n"
           "    r1.xyz = r1.xyz + r2.xyz;\n"
           "    r1.xyz = min(r1.xyz, c0.xxx);\n"
           "    r1.w = c0.x;\n"
           "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r1, r2.wwww);\n"
           "}\n"
           "//MD5=67389797:72f13dd9:f45f9433:860ed739\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendLinearDodgePOWProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000052e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r2 = r2 / half4(fmax(r2.www, 6.10350e-05h), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = pow(r3.xyz, half3(hg_Params[1].xyz));\n"
             "    r3.xyz = r1.xyz + r3.xyz;\n"
             "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r3.xyz = pow(r3.xyz, half3(hg_Params[2].xyz));\n"
             "    r3.w = c0.y;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r3), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=a575e245:a49bec3a:0ee60d69:989db91e\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0003:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004f0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
             "    r3.xyz = r1.xyz + r3.xyz;\n"
             "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r3.xyz = pow(r3.xyz, hg_Params[2].xyz);\n"
             "    r3.w = c0.y;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r3, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a0d6d2f0:b1e11a71:8cbc1e87:86e1188c\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0003:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004ed\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r2 = r2 / vec4(max(r2.www, 1.00000e-06), 1.);\n"
           "    r3.xyz = max(r2.xyz, c0.xxx);\n"
           "    r3.xyz = pow(r3.xyz, hg_ProgramLocal1.xyz);\n"
           "    r3.xyz = r1.xyz + r3.xyz;\n"
           "    r3.xyz = min(r3.xyz, c0.yyy);\n"
           "    r3.xyz = pow(r3.xyz, hg_ProgramLocal2.xyz);\n"
           "    r3.w = c0.y;\n"
           "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r3, r2.wwww);\n"
           "}\n"
           "//MD5=fcc38052:32e620d5:51813cad:d4a108bc\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0003:0004:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendLinearDodgeQTProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000005b5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
             "    const half4 c1 = half4(1.955999970, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r2 = r2 / half4(fmax(r2.www, 6.10350e-05h), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
             "    r3.xyz = r1.xyz + r3.xyz;\n"
             "    r3.xyz = fmin(r3.xyz, c0.www);\n"
             "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r3.xyz = pow(r3.xyz, c1.xxx);\n"
             "    r3.w = c0.w;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r3), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=ac3c62e7:7d110473:b80b8fa2:fc79b15b\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0001:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000058e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
             "    const float4 c1 = float4(1.955999970, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
             "    r3.xyz = r1.xyz + r3.xyz;\n"
             "    r3.xyz = fmin(r3.xyz, c0.www);\n"
             "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r3.xyz = pow(r3.xyz, c1.xxx);\n"
             "    r3.w = c0.w;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r3, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=7419b180:053dbc45:003c272d:25ce14a4\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0001:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000532\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
           "    const mediump vec4 c1 = vec4(1.955999970, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r2 = r2 / vec4(max(r2.www, 1.00000e-06), 1.);\n"
           "    r3.xyz = max(r2.xyz, c0.xxx);\n"
           "    r3.xyz = min(r3.xyz, c0.yyy);\n"
           "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
           "    r3.xyz = r1.xyz + r3.xyz;\n"
           "    r3.xyz = min(r3.xyz, c0.www);\n"
           "    r3.xyz = max(r3.xyz, c0.xxx);\n"
           "    r3.xyz = pow(r3.xyz, c1.xxx);\n"
           "    r3.w = c0.w;\n"
           "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r3, r2.wwww);\n"
           "}\n"
           "//MD5=8a5bfb96:e7b90f62:cae30235:e7c2ce54\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0001:0004:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendOverlayProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000050d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(2.000000000, 1.000000000, 0.5000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*half4(hg_Params[0]);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0 / half4(fmax(r0.www, 6.10350e-05h), 1.);\n"
             "    r2.xyz = r1.xyz / fmax(r1.w, 6.10350e-05h);\n"
             "    r3.xyz = r2.xyz*r0.xyz;\n"
             "    r3.xyz = r3.xyz + r3.xyz;\n"
             "    r4.xyz = r2.xyz + r0.xyz;\n"
             "    r4.xyz = r4.xyz*c0.xxx + -r3.xyz;\n"
             "    r4.xyz = r4.xyz - c0.yyy;\n"
             "    r2.xyz = half3(r2.xyz < c0.zzz);\n"
             "    r2.xyz = select(r4.xyz, r3.xyz, -r2.xyz < 0.00000h);\n"
             "    r2.w = c0.y;\n"
             "    r2.xyz = mix(r0.xyz, r2.xyz, r1.www);\n"
             "    output.color0 = mix(float4(r1), float4(r2), float4(r0.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=b28e7c1a:e0e82696:bcf63c43:105fbdea\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004e5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(2.000000000, 1.000000000, 0.5000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*hg_Params[0];\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
             "    r2.xyz = r1.xyz / fmax(r1.w, 1.00000e-06f);\n"
             "    r3.xyz = r2.xyz*r0.xyz;\n"
             "    r3.xyz = r3.xyz + r3.xyz;\n"
             "    r4.xyz = r2.xyz + r0.xyz;\n"
             "    r4.xyz = r4.xyz*c0.xxx + -r3.xyz;\n"
             "    r4.xyz = r4.xyz - c0.yyy;\n"
             "    r2.xyz = float3(r2.xyz < c0.zzz);\n"
             "    r2.xyz = select(r4.xyz, r3.xyz, -r2.xyz < 0.00000f);\n"
             "    r2.w = c0.y;\n"
             "    r2.xyz = mix(r0.xyz, r2.xyz, r1.www);\n"
             "    output.color0 = mix(r1, r2, r0.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=9321f93f:7488729d:35a1a22a:a763d105\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004c9\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(2.000000000, 1.000000000, 0.5000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0 = r0*hg_ProgramLocal0;\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0 = r0 / vec4(max(r0.www, 1.00000e-06), 1.);\n"
           "    r2.xyz = r1.xyz / max(r1.w, 1.00000e-06);\n"
           "    r3.xyz = r2.xyz*r0.xyz;\n"
           "    r3.xyz = r3.xyz + r3.xyz;\n"
           "    r4.xyz = r2.xyz + r0.xyz;\n"
           "    r4.xyz = r4.xyz*c0.xxx + -r3.xyz;\n"
           "    r4.xyz = r4.xyz - c0.yyy;\n"
           "    r2.xyz = vec3(lessThan(r2.xyz, c0.zzz));\n"
           "    r2.xyz = vec3(-r2.x < 0.00000 ? r3.x : r4.x, -r2.y < 0.00000 ? r3.y : r4.y, -r2.z < 0.00000 ? r3.z : r4.z"
           ");\n"
           "    r2.w = c0.y;\n"
           "    r2.xyz = mix(r0.xyz, r2.xyz, r1.www);\n"
           "    gl_FragColor = mix(r1, r2, r0.wwww);\n"
           "}\n"
           "//MD5=ae14c320:17f28241:54485286:f3a00e3c\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0005:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendOverlayPOWProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000064f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.5000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r2 = r2 / half4(fmax(r2.www, 6.10350e-05h), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = pow(r3.xyz, half3(hg_Params[1].xyz));\n"
             "    r4.xyz = r1.xyz + r1.xyz;\n"
             "    r5.xyz = r3.xyz*r4.xyz;\n"
             "    r4.xyz = r4.xyz - c0.yyy;\n"
             "    r6.xyz = r4.xyz*r3.xyz;\n"
             "    r6.xyz = fmin(r6.xyz, r4.xyz);\n"
             "    r6.xyz = fmin(r6.xyz, r3.xyz);\n"
             "    r4.xyz = r4.xyz + r3.xyz;\n"
             "    r6.xyz = r4.xyz - r6.xyz;\n"
             "    r1.xyz = half3(r1.xyz <= c0.zzz);\n"
             "    r1.xyz = select(r6.xyz, r5.xyz, -r1.xyz < 0.00000h);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[2].xyz));\n"
             "    r1.w = c0.y;\n"
             "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=9f416334:320ea46e:176f3d79:1a759af9\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0003:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000612\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.5000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
             "    r4.xyz = r1.xyz + r1.xyz;\n"
             "    r5.xyz = r3.xyz*r4.xyz;\n"
             "    r4.xyz = r4.xyz - c0.yyy;\n"
             "    r6.xyz = r4.xyz*r3.xyz;\n"
             "    r6.xyz = fmin(r6.xyz, r4.xyz);\n"
             "    r6.xyz = fmin(r6.xyz, r3.xyz);\n"
             "    r4.xyz = r4.xyz + r3.xyz;\n"
             "    r6.xyz = r4.xyz - r6.xyz;\n"
             "    r1.xyz = float3(r1.xyz <= c0.zzz);\n"
             "    r1.xyz = select(r6.xyz, r5.xyz, -r1.xyz < 0.00000f);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[2].xyz);\n"
             "    r1.w = c0.y;\n"
             "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r1, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=8e764b01:1ce75bdd:50cd5d13:7dd1e78f\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0003:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000650\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.5000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5, r6;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r2 = r2 / vec4(max(r2.www, 1.00000e-06), 1.);\n"
           "    r3.xyz = max(r2.xyz, c0.xxx);\n"
           "    r3.xyz = pow(r3.xyz, hg_ProgramLocal1.xyz);\n"
           "    r4.xyz = r1.xyz + r1.xyz;\n"
           "    r5.xyz = r3.xyz*r4.xyz;\n"
           "    r4.xyz = r4.xyz - c0.yyy;\n"
           "    r6.xyz = r4.xyz*r3.xyz;\n"
           "    r6.xyz = min(r6.xyz, r4.xyz);\n"
           "    r6.xyz = min(r6.xyz, r3.xyz);\n"
           "    r4.xyz = r4.xyz + r3.xyz;\n"
           "    r6.xyz = r4.xyz - r6.xyz;\n"
           "    r1.xyz = vec3(lessThanEqual(r1.xyz, c0.zzz));\n"
           "    r1.xyz = vec3(-r1.x < 0.00000 ? r5.x : r6.x, -r1.y < 0.00000 ? r5.y : r6.y, -r1.z < 0.00000 ? r5.z : r6.z"
           ");\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal2.xyz);\n"
           "    r1.w = c0.y;\n"
           "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r1, r2.wwww);\n"
           "}\n"
           "//MD5=81e7f4e5:5472836a:28cdb561:e2462c87\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0003:0007:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendOverlayQTProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000006f9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
             "    const half4 c1 = half4(0.5000000000, 1.149999976, 1.955999970, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r2 = r2 / half4(fmax(r2.www, 6.10350e-05h), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
             "    r4.xyz = r1.xyz + r1.xyz;\n"
             "    r5.xyz = r3.xyz*r4.xyz;\n"
             "    r4.xyz = r4.xyz - c0.www;\n"
             "    r6.xyz = r4.xyz*r3.xyz;\n"
             "    r6.xyz = fmin(r6.xyz, r4.xyz);\n"
             "    r6.xyz = fmin(r6.xyz, r3.xyz);\n"
             "    r4.xyz = r4.xyz + r3.xyz;\n"
             "    r6.xyz = r4.xyz - r6.xyz;\n"
             "    r1.xyz = half3(r1.xyz <= c1.xxx);\n"
             "    r1.xyz = select(r6.xyz, r5.xyz, -r1.xyz < 0.00000h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c1.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c1.zzz);\n"
             "    r1.w = c0.w;\n"
             "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=6f56df97:801925a4:63241fe7:a14a102e\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0001:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000006d3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
             "    const float4 c1 = float4(0.5000000000, 1.149999976, 1.955999970, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
             "    r4.xyz = r1.xyz + r1.xyz;\n"
             "    r5.xyz = r3.xyz*r4.xyz;\n"
             "    r4.xyz = r4.xyz - c0.www;\n"
             "    r6.xyz = r4.xyz*r3.xyz;\n"
             "    r6.xyz = fmin(r6.xyz, r4.xyz);\n"
             "    r6.xyz = fmin(r6.xyz, r3.xyz);\n"
             "    r4.xyz = r4.xyz + r3.xyz;\n"
             "    r6.xyz = r4.xyz - r6.xyz;\n"
             "    r1.xyz = float3(r1.xyz <= c1.xxx);\n"
             "    r1.xyz = select(r6.xyz, r5.xyz, -r1.xyz < 0.00000f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c1.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c1.zzz);\n"
             "    r1.w = c0.w;\n"
             "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r1, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=8271038f:3a3334ac:47a554cf:a42b31d8\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0001:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000006b7\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
           "    const mediump vec4 c1 = vec4(0.5000000000, 1.149999976, 1.955999970, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5, r6;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r2 = r2 / vec4(max(r2.www, 1.00000e-06), 1.);\n"
           "    r3.xyz = max(r2.xyz, c0.xxx);\n"
           "    r3.xyz = min(r3.xyz, c0.yyy);\n"
           "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
           "    r4.xyz = r1.xyz + r1.xyz;\n"
           "    r5.xyz = r3.xyz*r4.xyz;\n"
           "    r4.xyz = r4.xyz - c0.www;\n"
           "    r6.xyz = r4.xyz*r3.xyz;\n"
           "    r6.xyz = min(r6.xyz, r4.xyz);\n"
           "    r6.xyz = min(r6.xyz, r3.xyz);\n"
           "    r4.xyz = r4.xyz + r3.xyz;\n"
           "    r6.xyz = r4.xyz - r6.xyz;\n"
           "    r1.xyz = vec3(lessThanEqual(r1.xyz, c1.xxx));\n"
           "    r1.xyz = vec3(-r1.x < 0.00000 ? r5.x : r6.x, -r1.y < 0.00000 ? r5.y : r6.y, -r1.z < 0.00000 ? r5.z : r6.z"
           ");\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c1.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c1.zzz);\n"
           "    r1.w = c0.w;\n"
           "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r1, r2.wwww);\n"
           "}\n"
           "//MD5=657329ef:7c68d51a:e62d0977:40fdf6dd\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0001:0007:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendSoftLightProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000063c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(16.00000000, -12.00000000, 4.000000000, 0.2500000000);\n"
             "    const half4 c1 = half4(2.000000000, 1.000000000, 0.5000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r2.xyz = r1.xyz*c0.xxx + c0.yyy;\n"
             "    r2.xyz = r1.xyz*r2.xyz + c0.zzz;\n"
             "    r2.xyz = r1.xyz*r2.xyz;\n"
             "    r3.xyz = sqrt(r1.xyz);\n"
             "    r4.xyz = half3(c0.www >= r1.xyz);\n"
             "    r3.xyz = select(r3.xyz, r2.xyz, -r4.xyz < 0.00000h);\n"
             "    r4 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r4 = r4*half4(hg_Params[0]);\n"
             "    r4 = r4 / half4(fmax(r4.www, 6.10350e-05h), 1.);\n"
             "    r2.xyz = -r4.xyz*c1.xxx + c1.yyy;\n"
             "    r3.xyz = mix(r1.xyz, r3.xyz, -r2.xyz);\n"
             "    r2.xyz = r2.xyz*r1.xyz;\n"
             "    r2.xyz = mix(r1.xyz, c1.yyy, -r2.xyz);\n"
             "    r1.xyz = half3(c1.zzz >= r4.xyz);\n"
             "    r1.xyz = select(r3.xyz, r2.xyz, -r1.xyz < 0.00000h);\n"
             "    r1.w = c1.y;\n"
             "    r1.xyz = mix(r4.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r4.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=f2885101:ca6d8f9e:6f4e5f49:743acf4a\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000617\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(16.00000000, -12.00000000, 4.000000000, 0.2500000000);\n"
             "    const float4 c1 = float4(2.000000000, 1.000000000, 0.5000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r2.xyz = r1.xyz*c0.xxx + c0.yyy;\n"
             "    r2.xyz = r1.xyz*r2.xyz + c0.zzz;\n"
             "    r2.xyz = r1.xyz*r2.xyz;\n"
             "    r3.xyz = sqrt(r1.xyz);\n"
             "    r4.xyz = float3(c0.www >= r1.xyz);\n"
             "    r3.xyz = select(r3.xyz, r2.xyz, -r4.xyz < 0.00000f);\n"
             "    r4 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r4 = r4*hg_Params[0];\n"
             "    r4 = r4 / float4(fmax(r4.www, 1.00000e-06f), 1.);\n"
             "    r2.xyz = -r4.xyz*c1.xxx + c1.yyy;\n"
             "    r3.xyz = mix(r1.xyz, r3.xyz, -r2.xyz);\n"
             "    r2.xyz = r2.xyz*r1.xyz;\n"
             "    r2.xyz = mix(r1.xyz, c1.yyy, -r2.xyz);\n"
             "    r1.xyz = float3(c1.zzz >= r4.xyz);\n"
             "    r1.xyz = select(r3.xyz, r2.xyz, -r1.xyz < 0.00000f);\n"
             "    r1.w = c1.y;\n"
             "    r1.xyz = mix(r4.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r1, r4.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=009bb21d:6ea0a9c1:3abdcf14:215477da\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000063d\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "uniform highp sampler2D hg_Texture1;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(16.00000000, -12.00000000, 4.000000000, 0.2500000000);\n"
           "    const highp vec4 c1 = vec4(2.000000000, 1.000000000, 0.5000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r2.xyz = r1.xyz*c0.xxx + c0.yyy;\n"
           "    r2.xyz = r1.xyz*r2.xyz + c0.zzz;\n"
           "    r2.xyz = r1.xyz*r2.xyz;\n"
           "    r3.xyz = sqrt(r1.xyz);\n"
           "    r4.xyz = vec3(greaterThanEqual(c0.www, r1.xyz));\n"
           "    r3.xyz = vec3(-r4.x < 0.00000 ? r2.x : r3.x, -r4.y < 0.00000 ? r2.y : r3.y, -r4.z < 0.00000 ? r2.z : r3.z"
           ");\n"
           "    r4 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r4 = r4*hg_ProgramLocal0;\n"
           "    r4 = r4 / vec4(max(r4.www, 1.00000e-06), 1.);\n"
           "    r2.xyz = -r4.xyz*c1.xxx + c1.yyy;\n"
           "    r3.xyz = mix(r1.xyz, r3.xyz, -r2.xyz);\n"
           "    r2.xyz = r2.xyz*r1.xyz;\n"
           "    r2.xyz = mix(r1.xyz, c1.yyy, -r2.xyz);\n"
           "    r1.xyz = vec3(greaterThanEqual(c1.zzz, r4.xyz));\n"
           "    r1.xyz = vec3(-r1.x < 0.00000 ? r2.x : r3.x, -r1.y < 0.00000 ? r2.y : r3.y, -r1.z < 0.00000 ? r2.z : r3.z"
           ");\n"
           "    r1.w = c1.y;\n"
           "    r1.xyz = mix(r4.xyz, r1.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r1, r4.wwww);\n"
           "}\n"
           "//MD5=b7f22967:b5ddbff9:c12d4f8a:fa380820\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0001:0005:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendSoftLightPOWProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000071a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 16.00000000, -12.00000000, 4.000000000);\n"
             "    const half4 c1 = half4(0.2500000000, 2.000000000, 1.000000000, 0.5000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r2.xyz = r1.xyz*c0.yyy + c0.zzz;\n"
             "    r2.xyz = r1.xyz*r2.xyz + c0.www;\n"
             "    r2.xyz = r1.xyz*r2.xyz;\n"
             "    r3.xyz = sqrt(r1.xyz);\n"
             "    r4.xyz = half3(c1.xxx >= r1.xyz);\n"
             "    r3.xyz = select(r3.xyz, r2.xyz, -r4.xyz < 0.00000h);\n"
             "    r4 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r4 = r4*half4(hg_Params[0]);\n"
             "    r2.xyz = r4.xyz / fmax(r4.w, 6.10350e-05h);\n"
             "    r4.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r4.xyz = pow(r4.xyz, half3(hg_Params[1].xyz));\n"
             "    r5.xyz = -r4.xyz*c1.yyy + c1.zzz;\n"
             "    r3.xyz = mix(r1.xyz, r3.xyz, -r5.xyz);\n"
             "    r5.xyz = r5.xyz*r1.xyz;\n"
             "    r5.xyz = mix(r1.xyz, c1.zzz, -r5.xyz);\n"
             "    r1.xyz = half3(c1.www >= r4.xyz);\n"
             "    r1.xyz = select(r3.xyz, r5.xyz, -r1.xyz < 0.00000h);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[2].xyz));\n"
             "    r1.w = c1.z;\n"
             "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r4.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=ac341a7a:4962d79f:36ee3b54:d9a2549e\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0003:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000006df\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 16.00000000, -12.00000000, 4.000000000);\n"
             "    const float4 c1 = float4(0.2500000000, 2.000000000, 1.000000000, 0.5000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
             "    r2.xyz = r1.xyz*c0.yyy + c0.zzz;\n"
             "    r2.xyz = r1.xyz*r2.xyz + c0.www;\n"
             "    r2.xyz = r1.xyz*r2.xyz;\n"
             "    r3.xyz = sqrt(r1.xyz);\n"
             "    r4.xyz = float3(c1.xxx >= r1.xyz);\n"
             "    r3.xyz = select(r3.xyz, r2.xyz, -r4.xyz < 0.00000f);\n"
             "    r4 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r4 = r4*hg_Params[0];\n"
             "    r2.xyz = r4.xyz / fmax(r4.w, 1.00000e-06f);\n"
             "    r4.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r4.xyz = pow(r4.xyz, hg_Params[1].xyz);\n"
             "    r5.xyz = -r4.xyz*c1.yyy + c1.zzz;\n"
             "    r3.xyz = mix(r1.xyz, r3.xyz, -r5.xyz);\n"
             "    r5.xyz = r5.xyz*r1.xyz;\n"
             "    r5.xyz = mix(r1.xyz, c1.zzz, -r5.xyz);\n"
             "    r1.xyz = float3(c1.www >= r4.xyz);\n"
             "    r1.xyz = select(r3.xyz, r5.xyz, -r1.xyz < 0.00000f);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[2].xyz);\n"
             "    r1.w = c1.z;\n"
             "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r1, r4.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=57e12965:ab4896b2:a795f806:2f8ec6b3\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0003:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000075b\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "uniform highp sampler2D hg_Texture1;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 16.00000000, -12.00000000, 4.000000000);\n"
           "    const highp vec4 c1 = vec4(0.2500000000, 2.000000000, 1.000000000, 0.5000000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4, r5;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2.xyz = r1.xyz*c0.yyy + c0.zzz;\n"
           "    r2.xyz = r1.xyz*r2.xyz + c0.www;\n"
           "    r2.xyz = r1.xyz*r2.xyz;\n"
           "    r3.xyz = sqrt(r1.xyz);\n"
           "    r4.xyz = vec3(greaterThanEqual(c1.xxx, r1.xyz));\n"
           "    r3.xyz = vec3(-r4.x < 0.00000 ? r2.x : r3.x, -r4.y < 0.00000 ? r2.y : r3.y, -r4.z < 0.00000 ? r2.z : r3.z"
           ");\n"
           "    r4 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r4 = r4*hg_ProgramLocal0;\n"
           "    r2.xyz = r4.xyz / max(r4.w, 1.00000e-06);\n"
           "    r4.xyz = max(r2.xyz, c0.xxx);\n"
           "    r4.xyz = pow(r4.xyz, hg_ProgramLocal1.xyz);\n"
           "    r5.xyz = -r4.xyz*c1.yyy + c1.zzz;\n"
           "    r3.xyz = mix(r1.xyz, r3.xyz, -r5.xyz);\n"
           "    r5.xyz = r5.xyz*r1.xyz;\n"
           "    r5.xyz = mix(r1.xyz, c1.zzz, -r5.xyz);\n"
           "    r1.xyz = vec3(greaterThanEqual(c1.www, r4.xyz));\n"
           "    r1.xyz = vec3(-r1.x < 0.00000 ? r5.x : r3.x, -r1.y < 0.00000 ? r5.y : r3.y, -r1.z < 0.00000 ? r5.z : r3.z"
           ");\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal2.xyz);\n"
           "    r1.w = c1.z;\n"
           "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r1, r4.wwww);\n"
           "}\n"
           "//MD5=4c5b11f8:81aaea79:396d40ce:84da30a8\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0003:0006:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendSoftLightQTProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000007d9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.330000043, 0.5109999776, 16.00000000);\n"
             "    const half4 c1 = half4(-12.00000000, 4.000000000, 0.2500000000, 2.000000000);\n"
             "    const half4 c2 = half4(1.000000000, 0.5000000000, 1.149999976, 1.955999970);\n"
             "    half4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r1.xyz*c0.www + c1.xxx;\n"
             "    r2.xyz = r1.xyz*r2.xyz + c1.yyy;\n"
             "    r2.xyz = r1.xyz*r2.xyz;\n"
             "    r3.xyz = sqrt(r1.xyz);\n"
             "    r4.xyz = half3(c1.zzz >= r1.xyz);\n"
             "    r3.xyz = select(r3.xyz, r2.xyz, -r4.xyz < 0.00000h);\n"
             "    r4 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r4 = r4*half4(hg_Params[0]);\n"
             "    r2.xyz = r4.xyz / fmax(r4.w, 6.10350e-05h);\n"
             "    r4.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r5.xyz = fmin(r4.xyz, c0.yyy);\n"
             "    r5.xyz = pow(r5.xyz, c0.zzz);\n"
             "    r4.xyz = r5.xyz;\n"
             "    r5.xyz = -r4.xyz*c1.www + c2.xxx;\n"
             "    r3.xyz = mix(r1.xyz, r3.xyz, -r5.xyz);\n"
             "    r5.xyz = r5.xyz*r1.xyz;\n"
             "    r5.xyz = mix(r1.xyz, c2.xxx, -r5.xyz);\n"
             "    r1.xyz = half3(c2.yyy >= r4.xyz);\n"
             "    r1.xyz = select(r3.xyz, r5.xyz, -r1.xyz < 0.00000h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c2.zzz);\n"
             "    r1.xyz = pow(r1.xyz, c2.www);\n"
             "    r1.w = c2.x;\n"
             "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r4.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=ae1ba670:608a990c:37e7c403:e6d1efee\n"
             "//SIG=00400000:00000003:00000003:00000003:0003:0001:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000007b5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 16.00000000);\n"
             "    const float4 c1 = float4(-12.00000000, 4.000000000, 0.2500000000, 2.000000000);\n"
             "    const float4 c2 = float4(1.000000000, 0.5000000000, 1.149999976, 1.955999970);\n"
             "    float4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2.xyz = r1.xyz*c0.www + c1.xxx;\n"
             "    r2.xyz = r1.xyz*r2.xyz + c1.yyy;\n"
             "    r2.xyz = r1.xyz*r2.xyz;\n"
             "    r3.xyz = sqrt(r1.xyz);\n"
             "    r4.xyz = float3(c1.zzz >= r1.xyz);\n"
             "    r3.xyz = select(r3.xyz, r2.xyz, -r4.xyz < 0.00000f);\n"
             "    r4 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r4 = r4*hg_Params[0];\n"
             "    r2.xyz = r4.xyz / fmax(r4.w, 1.00000e-06f);\n"
             "    r4.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r5.xyz = fmin(r4.xyz, c0.yyy);\n"
             "    r5.xyz = pow(r5.xyz, c0.zzz);\n"
             "    r4.xyz = r5.xyz;\n"
             "    r5.xyz = -r4.xyz*c1.www + c2.xxx;\n"
             "    r3.xyz = mix(r1.xyz, r3.xyz, -r5.xyz);\n"
             "    r5.xyz = r5.xyz*r1.xyz;\n"
             "    r5.xyz = mix(r1.xyz, c2.xxx, -r5.xyz);\n"
             "    r1.xyz = float3(c2.yyy >= r4.xyz);\n"
             "    r1.xyz = select(r3.xyz, r5.xyz, -r1.xyz < 0.00000f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c2.zzz);\n"
             "    r1.xyz = pow(r1.xyz, c2.www);\n"
             "    r1.w = c2.x;\n"
             "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r1, r4.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=203ccc37:9ac4d81c:fcfebc9f:c4e646a8\n"
             "//SIG=00000000:00000003:00000003:00000000:0003:0001:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000007d9\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "uniform highp sampler2D hg_Texture1;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 1.330000043, 0.5109999776, 16.00000000);\n"
           "    const highp vec4 c1 = vec4(-12.00000000, 4.000000000, 0.2500000000, 2.000000000);\n"
           "    const highp vec4 c2 = vec4(1.000000000, 0.5000000000, 1.149999976, 1.955999970);\n"
           "    highp vec4 r0, r1, r2, r3, r4, r5;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2.xyz = r1.xyz*c0.www + c1.xxx;\n"
           "    r2.xyz = r1.xyz*r2.xyz + c1.yyy;\n"
           "    r2.xyz = r1.xyz*r2.xyz;\n"
           "    r3.xyz = sqrt(r1.xyz);\n"
           "    r4.xyz = vec3(greaterThanEqual(c1.zzz, r1.xyz));\n"
           "    r3.xyz = vec3(-r4.x < 0.00000 ? r2.x : r3.x, -r4.y < 0.00000 ? r2.y : r3.y, -r4.z < 0.00000 ? r2.z : r3.z"
           ");\n"
           "    r4 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r4 = r4*hg_ProgramLocal0;\n"
           "    r2.xyz = r4.xyz / max(r4.w, 1.00000e-06);\n"
           "    r4.xyz = max(r2.xyz, c0.xxx);\n"
           "    r5.xyz = min(r4.xyz, c0.yyy);\n"
           "    r5.xyz = pow(r5.xyz, c0.zzz);\n"
           "    r4.xyz = r5.xyz;\n"
           "    r5.xyz = -r4.xyz*c1.www + c2.xxx;\n"
           "    r3.xyz = mix(r1.xyz, r3.xyz, -r5.xyz);\n"
           "    r5.xyz = r5.xyz*r1.xyz;\n"
           "    r5.xyz = mix(r1.xyz, c2.xxx, -r5.xyz);\n"
           "    r1.xyz = vec3(greaterThanEqual(c2.yyy, r4.xyz));\n"
           "    r1.xyz = vec3(-r1.x < 0.00000 ? r5.x : r3.x, -r1.y < 0.00000 ? r5.y : r3.y, -r1.z < 0.00000 ? r5.z : r3.z"
           ");\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c2.zzz);\n"
           "    r1.xyz = pow(r1.xyz, c2.www);\n"
           "    r1.w = c2.x;\n"
           "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r1, r4.wwww);\n"
           "}\n"
           "//MD5=76e103f1:325cc33e:a0c3bd31:ef68dad9\n"
           "//SIG=00000000:00000003:00000003:00000000:0003:0001:0006:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendHardLightProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000057e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*half4(hg_Params[0]);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r2 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 6.10350e-05h);\n"
             "    r4.xyz = r1.xyz + r1.xyz;\n"
             "    r5.xyz = r4.xyz - c0.xxx;\n"
             "    r6.xyz = r3.xyz*r5.xyz;\n"
             "    r6.xyz = fmin(r5.xyz, r6.xyz);\n"
             "    r6.xyz = fmin(r3.xyz, r6.xyz);\n"
             "    r5.xyz = r3.xyz + r5.xyz;\n"
             "    r5.xyz = r5.xyz - r6.xyz;\n"
             "    r4.xyz = r4.xyz*r3.xyz + -r5.xyz;\n"
             "    r0.xyz = r0.xyz*c0.yyy;\n"
             "    r6.xyz = half3(r0.xyz >= -r0.www);\n"
             "    r6.xyz = r6.xyz*r4.xyz + r5.xyz;\n"
             "    r6.w = c0.x;\n"
             "    r6.xyz = mix(r1.xyz, r6.xyz, r2.www);\n"
             "    output.color0 = mix(float4(r2), float4(r6), float4(r0.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=4dc39e36:774dd9c2:12072e36:e7d0aa91\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000555\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*hg_Params[0];\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
             "    r4.xyz = r1.xyz + r1.xyz;\n"
             "    r5.xyz = r4.xyz - c0.xxx;\n"
             "    r6.xyz = r3.xyz*r5.xyz;\n"
             "    r6.xyz = fmin(r5.xyz, r6.xyz);\n"
             "    r6.xyz = fmin(r3.xyz, r6.xyz);\n"
             "    r5.xyz = r3.xyz + r5.xyz;\n"
             "    r5.xyz = r5.xyz - r6.xyz;\n"
             "    r4.xyz = r4.xyz*r3.xyz + -r5.xyz;\n"
             "    r0.xyz = r0.xyz*c0.yyy;\n"
             "    r6.xyz = float3(r0.xyz >= -r0.www);\n"
             "    r6.xyz = r6.xyz*r4.xyz + r5.xyz;\n"
             "    r6.w = c0.x;\n"
             "    r6.xyz = mix(r1.xyz, r6.xyz, r2.www);\n"
             "    output.color0 = mix(r2, r6, r0.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=1df03d78:938bb1c5:7b299762:da0bfa4f\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000509\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5, r6;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0 = r0*hg_ProgramLocal0;\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r3.xyz = r2.xyz / max(r2.w, 1.00000e-06);\n"
           "    r4.xyz = r1.xyz + r1.xyz;\n"
           "    r5.xyz = r4.xyz - c0.xxx;\n"
           "    r6.xyz = r3.xyz*r5.xyz;\n"
           "    r6.xyz = min(r5.xyz, r6.xyz);\n"
           "    r6.xyz = min(r3.xyz, r6.xyz);\n"
           "    r5.xyz = r3.xyz + r5.xyz;\n"
           "    r5.xyz = r5.xyz - r6.xyz;\n"
           "    r4.xyz = r4.xyz*r3.xyz + -r5.xyz;\n"
           "    r0.xyz = r0.xyz*c0.yyy;\n"
           "    r6.xyz = vec3(greaterThanEqual(r0.xyz, -r0.www));\n"
           "    r6.xyz = r6.xyz*r4.xyz + r5.xyz;\n"
           "    r6.w = c0.x;\n"
           "    r6.xyz = mix(r1.xyz, r6.xyz, r2.www);\n"
           "    gl_FragColor = mix(r2, r6, r0.wwww);\n"
           "}\n"
           "//MD5=f2c1d192:4fa88e30:a50dc5c5:819a4683\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0007:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendHardLightPOWProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000064f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.5000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r2 = r2 / half4(fmax(r2.www, 6.10350e-05h), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = pow(r3.xyz, half3(hg_Params[1].xyz));\n"
             "    r4.xyz = r3.xyz + r3.xyz;\n"
             "    r5.xyz = r1.xyz*r4.xyz;\n"
             "    r4.xyz = r4.xyz - c0.yyy;\n"
             "    r6.xyz = r4.xyz*r1.xyz;\n"
             "    r6.xyz = fmin(r6.xyz, r4.xyz);\n"
             "    r6.xyz = fmin(r6.xyz, r1.xyz);\n"
             "    r4.xyz = r4.xyz + r1.xyz;\n"
             "    r6.xyz = r4.xyz - r6.xyz;\n"
             "    r3.xyz = half3(r3.xyz <= c0.zzz);\n"
             "    r3.xyz = select(r6.xyz, r5.xyz, -r3.xyz < 0.00000h);\n"
             "    r3.xyz = pow(r3.xyz, half3(hg_Params[2].xyz));\n"
             "    r3.w = c0.y;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r3), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=e71b1879:600fc532:2fe088c5:6a90dcf1\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0003:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000612\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.5000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
             "    r4.xyz = r3.xyz + r3.xyz;\n"
             "    r5.xyz = r1.xyz*r4.xyz;\n"
             "    r4.xyz = r4.xyz - c0.yyy;\n"
             "    r6.xyz = r4.xyz*r1.xyz;\n"
             "    r6.xyz = fmin(r6.xyz, r4.xyz);\n"
             "    r6.xyz = fmin(r6.xyz, r1.xyz);\n"
             "    r4.xyz = r4.xyz + r1.xyz;\n"
             "    r6.xyz = r4.xyz - r6.xyz;\n"
             "    r3.xyz = float3(r3.xyz <= c0.zzz);\n"
             "    r3.xyz = select(r6.xyz, r5.xyz, -r3.xyz < 0.00000f);\n"
             "    r3.xyz = pow(r3.xyz, hg_Params[2].xyz);\n"
             "    r3.w = c0.y;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r3, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=caed7240:b8b0b1a3:53add7ee:4c93bd3c\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0003:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000650\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.5000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5, r6;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r2 = r2 / vec4(max(r2.www, 1.00000e-06), 1.);\n"
           "    r3.xyz = max(r2.xyz, c0.xxx);\n"
           "    r3.xyz = pow(r3.xyz, hg_ProgramLocal1.xyz);\n"
           "    r4.xyz = r3.xyz + r3.xyz;\n"
           "    r5.xyz = r1.xyz*r4.xyz;\n"
           "    r4.xyz = r4.xyz - c0.yyy;\n"
           "    r6.xyz = r4.xyz*r1.xyz;\n"
           "    r6.xyz = min(r6.xyz, r4.xyz);\n"
           "    r6.xyz = min(r6.xyz, r1.xyz);\n"
           "    r4.xyz = r4.xyz + r1.xyz;\n"
           "    r6.xyz = r4.xyz - r6.xyz;\n"
           "    r3.xyz = vec3(lessThanEqual(r3.xyz, c0.zzz));\n"
           "    r3.xyz = vec3(-r3.x < 0.00000 ? r5.x : r6.x, -r3.y < 0.00000 ? r5.y : r6.y, -r3.z < 0.00000 ? r5.z : r6.z"
           ");\n"
           "    r3.xyz = pow(r3.xyz, hg_ProgramLocal2.xyz);\n"
           "    r3.w = c0.y;\n"
           "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r3, r2.wwww);\n"
           "}\n"
           "//MD5=208f68f0:03533ea7:c626a300:da37b88c\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0003:0007:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendHardLightQTProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000006f9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
             "    const half4 c1 = half4(0.5000000000, 1.149999976, 1.955999970, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r2 = r2 / half4(fmax(r2.www, 6.10350e-05h), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
             "    r4.xyz = r3.xyz + r3.xyz;\n"
             "    r5.xyz = r1.xyz*r4.xyz;\n"
             "    r4.xyz = r4.xyz - c0.www;\n"
             "    r6.xyz = r4.xyz*r1.xyz;\n"
             "    r6.xyz = fmin(r6.xyz, r4.xyz);\n"
             "    r6.xyz = fmin(r6.xyz, r1.xyz);\n"
             "    r4.xyz = r4.xyz + r1.xyz;\n"
             "    r6.xyz = r4.xyz - r6.xyz;\n"
             "    r3.xyz = half3(r3.xyz <= c1.xxx);\n"
             "    r3.xyz = select(r6.xyz, r5.xyz, -r3.xyz < 0.00000h);\n"
             "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c1.yyy);\n"
             "    r3.xyz = pow(r3.xyz, c1.zzz);\n"
             "    r3.w = c0.w;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r3), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=d96dd13c:cb507d58:d5a78b44:b12a9aa0\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0001:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000006d3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
             "    const float4 c1 = float4(0.5000000000, 1.149999976, 1.955999970, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
             "    r4.xyz = r3.xyz + r3.xyz;\n"
             "    r5.xyz = r1.xyz*r4.xyz;\n"
             "    r4.xyz = r4.xyz - c0.www;\n"
             "    r6.xyz = r4.xyz*r1.xyz;\n"
             "    r6.xyz = fmin(r6.xyz, r4.xyz);\n"
             "    r6.xyz = fmin(r6.xyz, r1.xyz);\n"
             "    r4.xyz = r4.xyz + r1.xyz;\n"
             "    r6.xyz = r4.xyz - r6.xyz;\n"
             "    r3.xyz = float3(r3.xyz <= c1.xxx);\n"
             "    r3.xyz = select(r6.xyz, r5.xyz, -r3.xyz < 0.00000f);\n"
             "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c1.yyy);\n"
             "    r3.xyz = pow(r3.xyz, c1.zzz);\n"
             "    r3.w = c0.w;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r3, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ca1be53f:09e2be89:bbaafb83:4e65c87e\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0001:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000006b7\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
           "    const mediump vec4 c1 = vec4(0.5000000000, 1.149999976, 1.955999970, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5, r6;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r2 = r2 / vec4(max(r2.www, 1.00000e-06), 1.);\n"
           "    r3.xyz = max(r2.xyz, c0.xxx);\n"
           "    r3.xyz = min(r3.xyz, c0.yyy);\n"
           "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
           "    r4.xyz = r3.xyz + r3.xyz;\n"
           "    r5.xyz = r1.xyz*r4.xyz;\n"
           "    r4.xyz = r4.xyz - c0.www;\n"
           "    r6.xyz = r4.xyz*r1.xyz;\n"
           "    r6.xyz = min(r6.xyz, r4.xyz);\n"
           "    r6.xyz = min(r6.xyz, r1.xyz);\n"
           "    r4.xyz = r4.xyz + r1.xyz;\n"
           "    r6.xyz = r4.xyz - r6.xyz;\n"
           "    r3.xyz = vec3(lessThanEqual(r3.xyz, c1.xxx));\n"
           "    r3.xyz = vec3(-r3.x < 0.00000 ? r5.x : r6.x, -r3.y < 0.00000 ? r5.y : r6.y, -r3.z < 0.00000 ? r5.z : r6.z"
           ");\n"
           "    r3.xyz = max(r3.xyz, c0.xxx);\n"
           "    r3.xyz = min(r3.xyz, c1.yyy);\n"
           "    r3.xyz = pow(r3.xyz, c1.zzz);\n"
           "    r3.w = c0.w;\n"
           "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r3, r2.wwww);\n"
           "}\n"
           "//MD5=c4bb2fac:5c8cfa33:b1fe9701:c5e16e8f\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0001:0007:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendVividLightProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000854\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(65536.00000, 0.5000000000, 1.525878906e-05, 1.000000000);\n"
             "    const half4 c1 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmin(r0.xyz, r0.www);\n"
             "    r1.xyz = clamp(r0.xyz / fmax(r0.w, 6.10350e-05h), 0.00000h, 1.00000h);\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r2.xyz = fmin(r2.xyz, r2.www);\n"
             "    r3 = clamp(r2 / half4(fmax(r2.www, 6.10350e-05h), 1.), 0.00000h, 1.00000h);\n"
             "    r1.xyz = r1.xyz*c0.xxx + c0.yyy;\n"
             "    r1.xyz = floor(r1.xyz);\n"
             "    r1.xyz = r1.xyz*c0.zzz;\n"
             "    r4.xyz = r3.xyz*c0.xxx + c0.yyy;\n"
             "    r4.xyz = floor(r4.xyz);\n"
             "    r3.xyz = r4.xyz*c0.zzz;\n"
             "    r4.xyz = c0.www - r1.xyz;\n"
             "    r5.xyz = fmax(r3.xyz, c0.zzz);\n"
             "    r6.xyz = -c0.yyy*r4.xyz + r5.xyz;\n"
             "    r6.xyz = r6.xyz/r5.xyz;\n"
             "    r4.xyz = r4.xyz*c0.yyy;\n"
             "    r5.xyz = half3(-r3.xyz < -r4.xyz);\n"
             "    r6.xyz = r6.xyz*r5.xyz;\n"
             "    r5.xyz = c0.yyy*r2.www;\n"
             "    r5.xyz = half3(r2.xyz < r5.xyz);\n"
             "    r6.xyz = r6.xyz*r5.xyz;\n"
             "    r5.xyz = c0.www - r5.xyz;\n"
             "    r4.xyz = r4.xyz + c0.yyy;\n"
             "    r4.xyz = half3(r3.xyz < r4.xyz);\n"
             "    r4.xyz = fmin(r5.xyz, r4.xyz);\n"
             "    r2.xyz = c0.www - r3.xyz;\n"
             "    r2.xyz = fmax(r2.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz + r2.xyz;\n"
             "    r2.xyz = r1.xyz/r2.xyz;\n"
             "    r6.xyz = r2.xyz*r4.xyz + r6.xyz;\n"
             "    r4.xyz = half3(-r4.xyz >= c1.xxx);\n"
             "    r6.xyz = r5.xyz*r4.xyz + r6.xyz;\n"
             "    r6.w = c0.w;\n"
             "    r6.xyz = mix(r3.xyz, r6.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r6), float4(r3.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=860b139e:1d795f3e:df37c946:1fffbf4f\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0001:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000831\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(65536.00000, 0.5000000000, 1.525878906e-05, 1.000000000);\n"
             "    const float4 c1 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.xyz = fmin(r0.xyz, r0.www);\n"
             "    r1.xyz = clamp(r0.xyz / fmax(r0.w, 1.00000e-06f), 0.00000f, 1.00000f);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r2.xyz = fmin(r2.xyz, r2.www);\n"
             "    r3 = clamp(r2 / float4(fmax(r2.www, 1.00000e-06f), 1.), 0.00000f, 1.00000f);\n"
             "    r1.xyz = r1.xyz*c0.xxx + c0.yyy;\n"
             "    r1.xyz = floor(r1.xyz);\n"
             "    r1.xyz = r1.xyz*c0.zzz;\n"
             "    r4.xyz = r3.xyz*c0.xxx + c0.yyy;\n"
             "    r4.xyz = floor(r4.xyz);\n"
             "    r3.xyz = r4.xyz*c0.zzz;\n"
             "    r4.xyz = c0.www - r1.xyz;\n"
             "    r5.xyz = fmax(r3.xyz, c0.zzz);\n"
             "    r6.xyz = -c0.yyy*r4.xyz + r5.xyz;\n"
             "    r6.xyz = r6.xyz/r5.xyz;\n"
             "    r4.xyz = r4.xyz*c0.yyy;\n"
             "    r5.xyz = float3(-r3.xyz < -r4.xyz);\n"
             "    r6.xyz = r6.xyz*r5.xyz;\n"
             "    r5.xyz = c0.yyy*r2.www;\n"
             "    r5.xyz = float3(r2.xyz < r5.xyz);\n"
             "    r6.xyz = r6.xyz*r5.xyz;\n"
             "    r5.xyz = c0.www - r5.xyz;\n"
             "    r4.xyz = r4.xyz + c0.yyy;\n"
             "    r4.xyz = float3(r3.xyz < r4.xyz);\n"
             "    r4.xyz = fmin(r5.xyz, r4.xyz);\n"
             "    r2.xyz = c0.www - r3.xyz;\n"
             "    r2.xyz = fmax(r2.xyz, c0.zzz);\n"
             "    r2.xyz = r2.xyz + r2.xyz;\n"
             "    r2.xyz = r1.xyz/r2.xyz;\n"
             "    r6.xyz = r2.xyz*r4.xyz + r6.xyz;\n"
             "    r4.xyz = float3(-r4.xyz >= c1.xxx);\n"
             "    r6.xyz = r5.xyz*r4.xyz + r6.xyz;\n"
             "    r6.w = c0.w;\n"
             "    r6.xyz = mix(r3.xyz, r6.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r6, r3.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=bef7475f:dfb4827d:dc9666bf:9f365699\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0001:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000007ff\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "uniform highp sampler2D hg_Texture1;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(65536.00000, 0.5000000000, 1.525878906e-05, 1.000000000);\n"
           "    const highp vec4 c1 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4, r5, r6;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.xyz = min(r0.xyz, r0.www);\n"
           "    r1.xyz = clamp(r0.xyz / max(r0.w, 1.00000e-06), vec3(0.00000), vec3(1.00000));\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r2.xyz = min(r2.xyz, r2.www);\n"
           "    r3 = clamp(r2 / vec4(max(r2.www, 1.00000e-06), 1.), vec4(0.00000), vec4(1.00000));\n"
           "    r1.xyz = r1.xyz*c0.xxx + c0.yyy;\n"
           "    r1.xyz = floor(r1.xyz);\n"
           "    r1.xyz = r1.xyz*c0.zzz;\n"
           "    r4.xyz = r3.xyz*c0.xxx + c0.yyy;\n"
           "    r4.xyz = floor(r4.xyz);\n"
           "    r3.xyz = r4.xyz*c0.zzz;\n"
           "    r4.xyz = c0.www - r1.xyz;\n"
           "    r5.xyz = max(r3.xyz, c0.zzz);\n"
           "    r6.xyz = -c0.yyy*r4.xyz + r5.xyz;\n"
           "    r6.xyz = r6.xyz/r5.xyz;\n"
           "    r4.xyz = r4.xyz*c0.yyy;\n"
           "    r5.xyz = vec3(lessThan(-r3.xyz, -r4.xyz));\n"
           "    r6.xyz = r6.xyz*r5.xyz;\n"
           "    r5.xyz = c0.yyy*r2.www;\n"
           "    r5.xyz = vec3(lessThan(r2.xyz, r5.xyz));\n"
           "    r6.xyz = r6.xyz*r5.xyz;\n"
           "    r5.xyz = c0.www - r5.xyz;\n"
           "    r4.xyz = r4.xyz + c0.yyy;\n"
           "    r4.xyz = vec3(lessThan(r3.xyz, r4.xyz));\n"
           "    r4.xyz = min(r5.xyz, r4.xyz);\n"
           "    r2.xyz = c0.www - r3.xyz;\n"
           "    r2.xyz = max(r2.xyz, c0.zzz);\n"
           "    r2.xyz = r2.xyz + r2.xyz;\n"
           "    r2.xyz = r1.xyz/r2.xyz;\n"
           "    r6.xyz = r2.xyz*r4.xyz + r6.xyz;\n"
           "    r4.xyz = vec3(greaterThanEqual(-r4.xyz, c1.xxx));\n"
           "    r6.xyz = r5.xyz*r4.xyz + r6.xyz;\n"
           "    r6.w = c0.w;\n"
           "    r6.xyz = mix(r3.xyz, r6.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r6, r3.wwww);\n"
           "}\n"
           "//MD5=3385f905:b7f9aecb:b3a8cce1:6c362943\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0001:0007:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendVividLightPOWProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000008d1\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, -0.5000000000, 1.525878906e-05, -2.000000000);\n"
             "    const half4 c1 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = clamp(r0.xyz / fmax(r0.w, 6.10350e-05h), 0.00000h, 1.00000h);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 6.10350e-05h);\n"
             "    r4.xyz = clamp(r3.xyz, 0.00000h, 1.00000h);\n"
             "    r4.xyz = pow(r4.xyz, half3(hg_Params[1].xyz));\n"
             "    r5.xyz = c0.xxx - r1.xyz;\n"
             "    r5.xyz = c0.yyy*r5.xyz + r4.xyz;\n"
             "    r6.xyz = fmax(r4.xyz, c0.zzz);\n"
             "    r6.xyz = r5.xyz/r6.xyz;\n"
             "    r7.xyz = c0.yyy*r1.xyz + c0.xxx;\n"
             "    r7.xyz = r4.xyz - r7.xyz;\n"
             "    r8.xyz = c0.www*r4.xyz + -c0.www;\n"
             "    r9.xyz = fmax(r8.xyz, c0.zzz);\n"
             "    r9.xyz = r1.xyz/r9.xyz;\n"
             "    r1.xyz = half3(r4.xyz < -c0.yyy);\n"
             "    r5.xyz = half3(r5.xyz > c1.xxx);\n"
             "    r10.xyz = half3(r7.xyz < c1.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, r5.xyz);\n"
             "    r1.xyz = r1.xyz*r6.xyz;\n"
             "    r4.xyz = half3(r4.xyz >= -c0.yyy);\n"
             "    r4.xyz = fmin(r4.xyz, r10.xyz);\n"
             "    r1.xyz = select(r1.xyz, r9.xyz, -r4.xyz < 0.00000h);\n"
             "    r1.xyz = select(-c0.www, r1.xyz, r7.xyz < 0.00000h);\n"
             "    r8.xyz = half3(r8.xyz <= c0.zzz);\n"
             "    r1.xyz = select(r1.xyz, c0.xxx, -r8.xyz < 0.00000h);\n"
             "    r5.xyz = half3(r5.xyz <= c0.zzz);\n"
             "    r1.xyz = clamp(select(r1.xyz, c1.xxx, -r5.xyz < 0.00000h), 0.00000h, 1.00000h);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[2].xyz));\n"
             "    r1.w = c0.x;\n"
             "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=0232deb4:a2a102a2:9272d2b4:911a63fb\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0003:000b:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000089a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, -0.5000000000, 1.525878906e-05, -2.000000000);\n"
             "    const float4 c1 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = clamp(r0.xyz / fmax(r0.w, 1.00000e-06f), 0.00000f, 1.00000f);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
             "    r4.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
             "    r4.xyz = pow(r4.xyz, hg_Params[1].xyz);\n"
             "    r5.xyz = c0.xxx - r1.xyz;\n"
             "    r5.xyz = c0.yyy*r5.xyz + r4.xyz;\n"
             "    r6.xyz = fmax(r4.xyz, c0.zzz);\n"
             "    r6.xyz = r5.xyz/r6.xyz;\n"
             "    r7.xyz = c0.yyy*r1.xyz + c0.xxx;\n"
             "    r7.xyz = r4.xyz - r7.xyz;\n"
             "    r8.xyz = c0.www*r4.xyz + -c0.www;\n"
             "    r9.xyz = fmax(r8.xyz, c0.zzz);\n"
             "    r9.xyz = r1.xyz/r9.xyz;\n"
             "    r1.xyz = float3(r4.xyz < -c0.yyy);\n"
             "    r5.xyz = float3(r5.xyz > c1.xxx);\n"
             "    r10.xyz = float3(r7.xyz < c1.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, r5.xyz);\n"
             "    r1.xyz = r1.xyz*r6.xyz;\n"
             "    r4.xyz = float3(r4.xyz >= -c0.yyy);\n"
             "    r4.xyz = fmin(r4.xyz, r10.xyz);\n"
             "    r1.xyz = select(r1.xyz, r9.xyz, -r4.xyz < 0.00000f);\n"
             "    r1.xyz = select(-c0.www, r1.xyz, r7.xyz < 0.00000f);\n"
             "    r8.xyz = float3(r8.xyz <= c0.zzz);\n"
             "    r1.xyz = select(r1.xyz, c0.xxx, -r8.xyz < 0.00000f);\n"
             "    r5.xyz = float3(r5.xyz <= c0.zzz);\n"
             "    r1.xyz = clamp(select(r1.xyz, c1.xxx, -r5.xyz < 0.00000f), 0.00000f, 1.00000f);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[2].xyz);\n"
             "    r1.w = c0.x;\n"
             "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r1, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=0f0a249f:bb6b0d3b:2c8c6c7c:237b4708\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0003:000b:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000009c0\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp highp  \n"
           "uniform highp sampler2D hg_Texture0;\n"
           "uniform highp sampler2D hg_Texture1;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(1.000000000, -0.5000000000, 1.525878906e-05, -2.000000000);\n"
           "    const highp vec4 c1 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = clamp(r0.xyz / max(r0.w, 1.00000e-06), vec3(0.00000), vec3(1.00000));\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r3.xyz = r2.xyz / max(r2.w, 1.00000e-06);\n"
           "    r4.xyz = clamp(r3.xyz, vec3(0.00000), vec3(1.00000));\n"
           "    r4.xyz = pow(r4.xyz, hg_ProgramLocal1.xyz);\n"
           "    r5.xyz = c0.xxx - r1.xyz;\n"
           "    r5.xyz = c0.yyy*r5.xyz + r4.xyz;\n"
           "    r6.xyz = max(r4.xyz, c0.zzz);\n"
           "    r6.xyz = r5.xyz/r6.xyz;\n"
           "    r7.xyz = c0.yyy*r1.xyz + c0.xxx;\n"
           "    r7.xyz = r4.xyz - r7.xyz;\n"
           "    r8.xyz = c0.www*r4.xyz + -c0.www;\n"
           "    r9.xyz = max(r8.xyz, c0.zzz);\n"
           "    r9.xyz = r1.xyz/r9.xyz;\n"
           "    r1.xyz = vec3(lessThan(r4.xyz, -c0.yyy));\n"
           "    r5.xyz = vec3(greaterThan(r5.xyz, c1.xxx));\n"
           "    r10.xyz = vec3(lessThan(r7.xyz, c1.xxx));\n"
           "    r1.xyz = min(r1.xyz, r5.xyz);\n"
           "    r1.xyz = r1.xyz*r6.xyz;\n"
           "    r4.xyz = vec3(greaterThanEqual(r4.xyz, -c0.yyy));\n"
           "    r4.xyz = min(r4.xyz, r10.xyz);\n"
           "    r1.xyz = vec3(-r4.x < 0.00000 ? r9.x : r1.x, -r4.y < 0.00000 ? r9.y : r1.y, -r4.z < 0.00000 ? r9.z : r1.z"
           ");\n"
           "    r1.xyz = vec3(r7.x < 0.00000 ? r1.x : -c0.w, r7.y < 0.00000 ? r1.y : -c0.w, r7.z < 0.00000 ? r1.z : -c0.w"
           ");\n"
           "    r8.xyz = vec3(lessThanEqual(r8.xyz, c0.zzz));\n"
           "    r1.xyz = vec3(-r8.x < 0.00000 ? c0.x : r1.x, -r8.y < 0.00000 ? c0.x : r1.y, -r8.z < 0.00000 ? c0.x : r1.z"
           ");\n"
           "    r5.xyz = vec3(lessThanEqual(r5.xyz, c0.zzz));\n"
           "    r1.xyz = clamp(vec3(-r5.x < 0.00000 ? c1.x : r1.x, -r5.y < 0.00000 ? c1.x : r1.y, -r5.z < 0.00000 ? c1.x "
           ": r1.z), vec3(0.00000), vec3(1.00000));\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal2.xyz);\n"
           "    r1.w = c0.x;\n"
           "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r1, r2.wwww);\n"
           "}\n"
           "//MD5=ab1cfc80:d8d8806a:4a63a3ba:c4b495ff\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0003:000b:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendVividLightQTProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000089f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5109999776, 1.000000000, -0.5000000000, 1.525878906e-05);\n"
             "    const half4 c1 = half4(-2.000000000, 0.000000000, 1.955999970, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = clamp(r0.xyz / fmax(r0.w, 6.10350e-05h), 0.00000h, 1.00000h);\n"
             "    r1.xyz = pow(r1.xyz, c0.xxx);\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 6.10350e-05h);\n"
             "    r4.xyz = clamp(r3.xyz, 0.00000h, 1.00000h);\n"
             "    r4.xyz = pow(r4.xyz, c0.xxx);\n"
             "    r5.xyz = c0.yyy - r1.xyz;\n"
             "    r5.xyz = c0.zzz*r5.xyz + r4.xyz;\n"
             "    r6.xyz = fmax(r4.xyz, c0.www);\n"
             "    r6.xyz = r5.xyz/r6.xyz;\n"
             "    r7.xyz = c0.zzz*r1.xyz + c0.yyy;\n"
             "    r7.xyz = r4.xyz - r7.xyz;\n"
             "    r8.xyz = c1.xxx*r4.xyz + -c1.xxx;\n"
             "    r9.xyz = fmax(r8.xyz, c0.www);\n"
             "    r9.xyz = r1.xyz/r9.xyz;\n"
             "    r1.xyz = half3(r4.xyz < -c0.zzz);\n"
             "    r5.xyz = half3(r5.xyz > c1.yyy);\n"
             "    r10.xyz = half3(r7.xyz < c1.yyy);\n"
             "    r1.xyz = fmin(r1.xyz, r5.xyz);\n"
             "    r1.xyz = r1.xyz*r6.xyz;\n"
             "    r4.xyz = half3(r4.xyz >= -c0.zzz);\n"
             "    r4.xyz = fmin(r4.xyz, r10.xyz);\n"
             "    r1.xyz = select(r1.xyz, r9.xyz, -r4.xyz < 0.00000h);\n"
             "    r1.xyz = select(-c1.xxx, r1.xyz, r7.xyz < 0.00000h);\n"
             "    r8.xyz = half3(r8.xyz <= c0.www);\n"
             "    r1.xyz = select(r1.xyz, c0.yyy, -r8.xyz < 0.00000h);\n"
             "    r5.xyz = half3(r5.xyz <= c0.www);\n"
             "    r1.xyz = clamp(select(r1.xyz, c1.yyy, -r5.xyz < 0.00000h), 0.00000h, 1.00000h);\n"
             "    r1.xyz = pow(r1.xyz, c1.zzz);\n"
             "    r1.w = c0.y;\n"
             "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=b0561d61:6a43df94:4ba5fca1:d10fa381\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0001:000b:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000087d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5109999776, 1.000000000, -0.5000000000, 1.525878906e-05);\n"
             "    const float4 c1 = float4(-2.000000000, 0.000000000, 1.955999970, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = clamp(r0.xyz / fmax(r0.w, 1.00000e-06f), 0.00000f, 1.00000f);\n"
             "    r1.xyz = pow(r1.xyz, c0.xxx);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
             "    r4.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
             "    r4.xyz = pow(r4.xyz, c0.xxx);\n"
             "    r5.xyz = c0.yyy - r1.xyz;\n"
             "    r5.xyz = c0.zzz*r5.xyz + r4.xyz;\n"
             "    r6.xyz = fmax(r4.xyz, c0.www);\n"
             "    r6.xyz = r5.xyz/r6.xyz;\n"
             "    r7.xyz = c0.zzz*r1.xyz + c0.yyy;\n"
             "    r7.xyz = r4.xyz - r7.xyz;\n"
             "    r8.xyz = c1.xxx*r4.xyz + -c1.xxx;\n"
             "    r9.xyz = fmax(r8.xyz, c0.www);\n"
             "    r9.xyz = r1.xyz/r9.xyz;\n"
             "    r1.xyz = float3(r4.xyz < -c0.zzz);\n"
             "    r5.xyz = float3(r5.xyz > c1.yyy);\n"
             "    r10.xyz = float3(r7.xyz < c1.yyy);\n"
             "    r1.xyz = fmin(r1.xyz, r5.xyz);\n"
             "    r1.xyz = r1.xyz*r6.xyz;\n"
             "    r4.xyz = float3(r4.xyz >= -c0.zzz);\n"
             "    r4.xyz = fmin(r4.xyz, r10.xyz);\n"
             "    r1.xyz = select(r1.xyz, r9.xyz, -r4.xyz < 0.00000f);\n"
             "    r1.xyz = select(-c1.xxx, r1.xyz, r7.xyz < 0.00000f);\n"
             "    r8.xyz = float3(r8.xyz <= c0.www);\n"
             "    r1.xyz = select(r1.xyz, c0.yyy, -r8.xyz < 0.00000f);\n"
             "    r5.xyz = float3(r5.xyz <= c0.www);\n"
             "    r1.xyz = clamp(select(r1.xyz, c1.yyy, -r5.xyz < 0.00000f), 0.00000f, 1.00000f);\n"
             "    r1.xyz = pow(r1.xyz, c1.zzz);\n"
             "    r1.w = c0.y;\n"
             "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r1, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ee4d2d45:03421f83:160cf487:36c5e88a\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0001:000b:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000095b\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.5109999776, 1.000000000, -0.5000000000, 1.525878906e-05);\n"
           "    const mediump vec4 c1 = vec4(-2.000000000, 0.000000000, 1.955999970, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = clamp(r0.xyz / max(r0.w, 1.00000e-06), vec3(0.00000), vec3(1.00000));\n"
           "    r1.xyz = pow(r1.xyz, c0.xxx);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r3.xyz = r2.xyz / max(r2.w, 1.00000e-06);\n"
           "    r4.xyz = clamp(r3.xyz, vec3(0.00000), vec3(1.00000));\n"
           "    r4.xyz = pow(r4.xyz, c0.xxx);\n"
           "    r5.xyz = c0.yyy - r1.xyz;\n"
           "    r5.xyz = c0.zzz*r5.xyz + r4.xyz;\n"
           "    r6.xyz = max(r4.xyz, c0.www);\n"
           "    r6.xyz = r5.xyz/r6.xyz;\n"
           "    r7.xyz = c0.zzz*r1.xyz + c0.yyy;\n"
           "    r7.xyz = r4.xyz - r7.xyz;\n"
           "    r8.xyz = c1.xxx*r4.xyz + -c1.xxx;\n"
           "    r9.xyz = max(r8.xyz, c0.www);\n"
           "    r9.xyz = r1.xyz/r9.xyz;\n"
           "    r1.xyz = vec3(lessThan(r4.xyz, -c0.zzz));\n"
           "    r5.xyz = vec3(greaterThan(r5.xyz, c1.yyy));\n"
           "    r10.xyz = vec3(lessThan(r7.xyz, c1.yyy));\n"
           "    r1.xyz = min(r1.xyz, r5.xyz);\n"
           "    r1.xyz = r1.xyz*r6.xyz;\n"
           "    r4.xyz = vec3(greaterThanEqual(r4.xyz, -c0.zzz));\n"
           "    r4.xyz = min(r4.xyz, r10.xyz);\n"
           "    r1.xyz = vec3(-r4.x < 0.00000 ? r9.x : r1.x, -r4.y < 0.00000 ? r9.y : r1.y, -r4.z < 0.00000 ? r9.z : r1.z"
           ");\n"
           "    r1.xyz = vec3(r7.x < 0.00000 ? r1.x : -c1.x, r7.y < 0.00000 ? r1.y : -c1.x, r7.z < 0.00000 ? r1.z : -c1.x"
           ");\n"
           "    r8.xyz = vec3(lessThanEqual(r8.xyz, c0.www));\n"
           "    r1.xyz = vec3(-r8.x < 0.00000 ? c0.y : r1.x, -r8.y < 0.00000 ? c0.y : r1.y, -r8.z < 0.00000 ? c0.y : r1.z"
           ");\n"
           "    r5.xyz = vec3(lessThanEqual(r5.xyz, c0.www));\n"
           "    r1.xyz = clamp(vec3(-r5.x < 0.00000 ? c1.y : r1.x, -r5.y < 0.00000 ? c1.y : r1.y, -r5.z < 0.00000 ? c1.y "
           ": r1.z), vec3(0.00000), vec3(1.00000));\n"
           "    r1.xyz = pow(r1.xyz, c1.zzz);\n"
           "    r1.w = c0.y;\n"
           "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r1, r2.wwww);\n"
           "}\n"
           "//MD5=08cf9d02:159f02c2:339b4c54:2a4cd7e4\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0001:000b:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendLinearLightProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000046d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-2.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r2 = r2 / half4(fmax(r2.www, 6.10350e-05h), 1.);\n"
             "    r3.xyz = c0.xxx*r2.xyz + c0.yyy;\n"
             "    r1.xyz = clamp(r1.xyz - r3.xyz, 0.00000h, 1.00000h);\n"
             "    r1.w = c0.y;\n"
             "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=9b374a4d:618dca95:31e3810e:f814ed70\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000444\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-2.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
             "    r3.xyz = c0.xxx*r2.xyz + c0.yyy;\n"
             "    r1.xyz = clamp(r1.xyz - r3.xyz, 0.00000f, 1.00000f);\n"
             "    r1.w = c0.y;\n"
             "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r1, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=40b940f3:1f266e49:9dc37cd8:be76aebf\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003f4\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(-2.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r2 = r2 / vec4(max(r2.www, 1.00000e-06), 1.);\n"
           "    r3.xyz = c0.xxx*r2.xyz + c0.yyy;\n"
           "    r1.xyz = clamp(r1.xyz - r3.xyz, vec3(0.00000), vec3(1.00000));\n"
           "    r1.w = c0.y;\n"
           "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r1, r2.wwww);\n"
           "}\n"
           "//MD5=0e6d5794:be18b5e4:26de3756:d940281d\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0004:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendLinearLightPOWProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000054c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, -2.000000000, 1.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r2 = r2 / half4(fmax(r2.www, 6.10350e-05h), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = pow(r3.xyz, half3(hg_Params[1].xyz));\n"
             "    r3.xyz = c0.yyy*r3.xyz + c0.zzz;\n"
             "    r3.xyz = clamp(r1.xyz - r3.xyz, 0.00000h, 1.00000h);\n"
             "    r3.xyz = pow(r3.xyz, half3(hg_Params[2].xyz));\n"
             "    r3.w = c0.z;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r3), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=b2adfa6d:5685d164:6c142e5d:d32c6f72\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0003:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000050e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, -2.000000000, 1.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
             "    r3.xyz = c0.yyy*r3.xyz + c0.zzz;\n"
             "    r3.xyz = clamp(r1.xyz - r3.xyz, 0.00000f, 1.00000f);\n"
             "    r3.xyz = pow(r3.xyz, hg_Params[2].xyz);\n"
             "    r3.w = c0.z;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r3, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e0ff3b42:d41f28be:204066d6:f911f41d\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0003:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000516\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, -2.000000000, 1.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r2 = r2 / vec4(max(r2.www, 1.00000e-06), 1.);\n"
           "    r3.xyz = max(r2.xyz, c0.xxx);\n"
           "    r3.xyz = pow(r3.xyz, hg_ProgramLocal1.xyz);\n"
           "    r3.xyz = c0.yyy*r3.xyz + c0.zzz;\n"
           "    r3.xyz = clamp(r1.xyz - r3.xyz, vec3(0.00000), vec3(1.00000));\n"
           "    r3.xyz = pow(r3.xyz, hg_ProgramLocal2.xyz);\n"
           "    r3.w = c0.z;\n"
           "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r3, r2.wwww);\n"
           "}\n"
           "//MD5=d732ba98:c176e883:c77ce82c:831e5c3b\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0003:0004:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendLinearLightQTProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000005b0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.330000043, 0.5109999776, -2.000000000);\n"
             "    const half4 c1 = half4(1.000000000, 1.955999970, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r2 = r2 / half4(fmax(r2.www, 6.10350e-05h), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
             "    r3.xyz = c0.www*r3.xyz + c1.xxx;\n"
             "    r3.xyz = clamp(r1.xyz - r3.xyz, 0.00000h, 1.00000h);\n"
             "    r3.xyz = pow(r3.xyz, c1.yyy);\n"
             "    r3.w = c1.x;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r3), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=bbb69a9e:8cb57392:655ac6ea:e4cfe22c\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0001:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000589\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, -2.000000000);\n"
             "    const float4 c1 = float4(1.000000000, 1.955999970, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
             "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
             "    r3.xyz = c0.www*r3.xyz + c1.xxx;\n"
             "    r3.xyz = clamp(r1.xyz - r3.xyz, 0.00000f, 1.00000f);\n"
             "    r3.xyz = pow(r3.xyz, c1.yyy);\n"
             "    r3.w = c1.x;\n"
             "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r3, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=3e7d2d63:4fc60f37:87f4c605:b892890b\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0001:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000539\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.330000043, 0.5109999776, -2.000000000);\n"
           "    const mediump vec4 c1 = vec4(1.000000000, 1.955999970, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r2 = r2 / vec4(max(r2.www, 1.00000e-06), 1.);\n"
           "    r3.xyz = max(r2.xyz, c0.xxx);\n"
           "    r3.xyz = min(r3.xyz, c0.yyy);\n"
           "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
           "    r3.xyz = c0.www*r3.xyz + c1.xxx;\n"
           "    r3.xyz = clamp(r1.xyz - r3.xyz, vec3(0.00000), vec3(1.00000));\n"
           "    r3.xyz = pow(r3.xyz, c1.yyy);\n"
           "    r3.w = c1.x;\n"
           "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r3, r2.wwww);\n"
           "}\n"
           "//MD5=b90ad3a1:89e1e496:f631717e:cdf37be6\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0001:0004:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendPinLightProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000054c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*half4(hg_Params[0]);\n"
             "    r0 = r0 / half4(fmax(r0.www, 6.10350e-05h), 1.);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r2.xyz = r1.xyz / fmax(r1.w, 6.10350e-05h);\n"
             "    r3.xyz = r0.xyz + r0.xyz;\n"
             "    r4.xyz = half3(r3.xyz < r2.xyz);\n"
             "    r5.xyz = r3.xyz*r4.xyz;\n"
             "    r3.xyz = r3.xyz - c0.xxx;\n"
             "    r6.xyz = half3(r3.xyz >= r2.xyz);\n"
             "    r5.xyz = r3.xyz*r6.xyz + r5.xyz;\n"
             "    r4.xyz = r4.xyz + r6.xyz;\n"
             "    r4.xyz = half3(-r4.xyz >= c0.yyy);\n"
             "    r5.xyz = r2.xyz*r4.xyz + r5.xyz;\n"
             "    r5.w = c0.x;\n"
             "    r5.xyz = mix(r0.xyz, r5.xyz, r1.www);\n"
             "    output.color0 = mix(float4(r1), float4(r5), float4(r0.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=7df624e8:22d53432:86d605dd:9166256c\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000526\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*hg_Params[0];\n"
             "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r2.xyz = r1.xyz / fmax(r1.w, 1.00000e-06f);\n"
             "    r3.xyz = r0.xyz + r0.xyz;\n"
             "    r4.xyz = float3(r3.xyz < r2.xyz);\n"
             "    r5.xyz = r3.xyz*r4.xyz;\n"
             "    r3.xyz = r3.xyz - c0.xxx;\n"
             "    r6.xyz = float3(r3.xyz >= r2.xyz);\n"
             "    r5.xyz = r3.xyz*r6.xyz + r5.xyz;\n"
             "    r4.xyz = r4.xyz + r6.xyz;\n"
             "    r4.xyz = float3(-r4.xyz >= c0.yyy);\n"
             "    r5.xyz = r2.xyz*r4.xyz + r5.xyz;\n"
             "    r5.w = c0.x;\n"
             "    r5.xyz = mix(r0.xyz, r5.xyz, r1.www);\n"
             "    output.color0 = mix(r1, r5, r0.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c465eebd:b5f1632e:9c876833:f8fadb07\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004ef\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5, r6;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0 = r0*hg_ProgramLocal0;\n"
           "    r0 = r0 / vec4(max(r0.www, 1.00000e-06), 1.);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r2.xyz = r1.xyz / max(r1.w, 1.00000e-06);\n"
           "    r3.xyz = r0.xyz + r0.xyz;\n"
           "    r4.xyz = vec3(lessThan(r3.xyz, r2.xyz));\n"
           "    r5.xyz = r3.xyz*r4.xyz;\n"
           "    r3.xyz = r3.xyz - c0.xxx;\n"
           "    r6.xyz = vec3(greaterThanEqual(r3.xyz, r2.xyz));\n"
           "    r5.xyz = r3.xyz*r6.xyz + r5.xyz;\n"
           "    r4.xyz = r4.xyz + r6.xyz;\n"
           "    r4.xyz = vec3(greaterThanEqual(-r4.xyz, c0.yyy));\n"
           "    r5.xyz = r2.xyz*r4.xyz + r5.xyz;\n"
           "    r5.w = c0.x;\n"
           "    r5.xyz = mix(r0.xyz, r5.xyz, r1.www);\n"
           "    gl_FragColor = mix(r1, r5, r0.wwww);\n"
           "}\n"
           "//MD5=1af7a367:c41788ce:15a4d906:3e42f215\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0007:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendPinLightPOWProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000062b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*half4(hg_Params[0]);\n"
             "    r0 = r0 / half4(fmax(r0.www, 6.10350e-05h), 1.);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r2 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 6.10350e-05h);\n"
             "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r3.xyz = pow(r3.xyz, half3(hg_Params[1].xyz));\n"
             "    r1.xyz = r1.xyz + r1.xyz;\n"
             "    r4.xyz = half3(r1.xyz < r3.xyz);\n"
             "    r5.xyz = r1.xyz*r4.xyz;\n"
             "    r1.xyz = r1.xyz - c0.yyy;\n"
             "    r6.xyz = half3(r1.xyz >= r3.xyz);\n"
             "    r5.xyz = r1.xyz*r6.xyz + r5.xyz;\n"
             "    r4.xyz = r4.xyz + r6.xyz;\n"
             "    r4.xyz = half3(-r4.xyz >= c0.xxx);\n"
             "    r5.xyz = r3.xyz*r4.xyz + r5.xyz;\n"
             "    r5.xyz = pow(r5.xyz, half3(hg_Params[2].xyz));\n"
             "    r5.w = c0.y;\n"
             "    r5.xyz = mix(r0.xyz, r5.xyz, r2.www);\n"
             "    output.color0 = mix(float4(r2), float4(r5), float4(r0.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=9af4ba9b:79bc497a:393fb1d5:90191490\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0003:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000005f0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*hg_Params[0];\n"
             "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
             "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r3.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
             "    r1.xyz = r1.xyz + r1.xyz;\n"
             "    r4.xyz = float3(r1.xyz < r3.xyz);\n"
             "    r5.xyz = r1.xyz*r4.xyz;\n"
             "    r1.xyz = r1.xyz - c0.yyy;\n"
             "    r6.xyz = float3(r1.xyz >= r3.xyz);\n"
             "    r5.xyz = r1.xyz*r6.xyz + r5.xyz;\n"
             "    r4.xyz = r4.xyz + r6.xyz;\n"
             "    r4.xyz = float3(-r4.xyz >= c0.xxx);\n"
             "    r5.xyz = r3.xyz*r4.xyz + r5.xyz;\n"
             "    r5.xyz = pow(r5.xyz, hg_Params[2].xyz);\n"
             "    r5.w = c0.y;\n"
             "    r5.xyz = mix(r0.xyz, r5.xyz, r2.www);\n"
             "    output.color0 = mix(r2, r5, r0.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e85210a2:7c50ee70:49b88d81:88ef8ea2\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0003:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000611\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5, r6;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0 = r0*hg_ProgramLocal0;\n"
           "    r0 = r0 / vec4(max(r0.www, 1.00000e-06), 1.);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r3.xyz = r2.xyz / max(r2.w, 1.00000e-06);\n"
           "    r3.xyz = max(r3.xyz, c0.xxx);\n"
           "    r3.xyz = pow(r3.xyz, hg_ProgramLocal1.xyz);\n"
           "    r1.xyz = r1.xyz + r1.xyz;\n"
           "    r4.xyz = vec3(lessThan(r1.xyz, r3.xyz));\n"
           "    r5.xyz = r1.xyz*r4.xyz;\n"
           "    r1.xyz = r1.xyz - c0.yyy;\n"
           "    r6.xyz = vec3(greaterThanEqual(r1.xyz, r3.xyz));\n"
           "    r5.xyz = r1.xyz*r6.xyz + r5.xyz;\n"
           "    r4.xyz = r4.xyz + r6.xyz;\n"
           "    r4.xyz = vec3(greaterThanEqual(-r4.xyz, c0.xxx));\n"
           "    r5.xyz = r3.xyz*r4.xyz + r5.xyz;\n"
           "    r5.xyz = pow(r5.xyz, hg_ProgramLocal2.xyz);\n"
           "    r5.w = c0.y;\n"
           "    r5.xyz = mix(r0.xyz, r5.xyz, r2.www);\n"
           "    gl_FragColor = mix(r2, r5, r0.wwww);\n"
           "}\n"
           "//MD5=79e0a9a4:c9d6f62f:1ada738e:70249948\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0003:0007:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendPinLightQTProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000006d5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
             "    const half4 c1 = half4(1.149999976, 1.955999970, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*half4(hg_Params[0]);\n"
             "    r0 = r0 / half4(fmax(r0.www, 6.10350e-05h), 1.);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 6.10350e-05h);\n"
             "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
             "    r1.xyz = r1.xyz + r1.xyz;\n"
             "    r4.xyz = half3(r1.xyz < r3.xyz);\n"
             "    r5.xyz = r1.xyz*r4.xyz;\n"
             "    r1.xyz = r1.xyz - c0.www;\n"
             "    r6.xyz = half3(r1.xyz >= r3.xyz);\n"
             "    r5.xyz = r1.xyz*r6.xyz + r5.xyz;\n"
             "    r4.xyz = r4.xyz + r6.xyz;\n"
             "    r4.xyz = half3(-r4.xyz >= c0.xxx);\n"
             "    r5.xyz = r3.xyz*r4.xyz + r5.xyz;\n"
             "    r5.xyz = fmax(r5.xyz, c0.xxx);\n"
             "    r5.xyz = fmin(r5.xyz, c1.xxx);\n"
             "    r5.xyz = pow(r5.xyz, c1.yyy);\n"
             "    r5.w = c0.w;\n"
             "    r5.xyz = mix(r0.xyz, r5.xyz, r2.www);\n"
             "    output.color0 = mix(float4(r2), float4(r5), float4(r0.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=ab0c5205:580e439b:b1f89457:0e406e50\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0001:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000006b1\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
             "    const float4 c1 = float4(1.149999976, 1.955999970, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*hg_Params[0];\n"
             "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
             "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
             "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
             "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
             "    r1.xyz = r1.xyz + r1.xyz;\n"
             "    r4.xyz = float3(r1.xyz < r3.xyz);\n"
             "    r5.xyz = r1.xyz*r4.xyz;\n"
             "    r1.xyz = r1.xyz - c0.www;\n"
             "    r6.xyz = float3(r1.xyz >= r3.xyz);\n"
             "    r5.xyz = r1.xyz*r6.xyz + r5.xyz;\n"
             "    r4.xyz = r4.xyz + r6.xyz;\n"
             "    r4.xyz = float3(-r4.xyz >= c0.xxx);\n"
             "    r5.xyz = r3.xyz*r4.xyz + r5.xyz;\n"
             "    r5.xyz = fmax(r5.xyz, c0.xxx);\n"
             "    r5.xyz = fmin(r5.xyz, c1.xxx);\n"
             "    r5.xyz = pow(r5.xyz, c1.yyy);\n"
             "    r5.w = c0.w;\n"
             "    r5.xyz = mix(r0.xyz, r5.xyz, r2.www);\n"
             "    output.color0 = mix(r2, r5, r0.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=400277fe:8c48c377:5bc2b694:718f4f05\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0001:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000678\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
           "    const mediump vec4 c1 = vec4(1.149999976, 1.955999970, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5, r6;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0 = r0*hg_ProgramLocal0;\n"
           "    r0 = r0 / vec4(max(r0.www, 1.00000e-06), 1.);\n"
           "    r1.xyz = max(r0.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r3.xyz = r2.xyz / max(r2.w, 1.00000e-06);\n"
           "    r3.xyz = max(r3.xyz, c0.xxx);\n"
           "    r3.xyz = min(r3.xyz, c0.yyy);\n"
           "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
           "    r1.xyz = r1.xyz + r1.xyz;\n"
           "    r4.xyz = vec3(lessThan(r1.xyz, r3.xyz));\n"
           "    r5.xyz = r1.xyz*r4.xyz;\n"
           "    r1.xyz = r1.xyz - c0.www;\n"
           "    r6.xyz = vec3(greaterThanEqual(r1.xyz, r3.xyz));\n"
           "    r5.xyz = r1.xyz*r6.xyz + r5.xyz;\n"
           "    r4.xyz = r4.xyz + r6.xyz;\n"
           "    r4.xyz = vec3(greaterThanEqual(-r4.xyz, c0.xxx));\n"
           "    r5.xyz = r3.xyz*r4.xyz + r5.xyz;\n"
           "    r5.xyz = max(r5.xyz, c0.xxx);\n"
           "    r5.xyz = min(r5.xyz, c1.xxx);\n"
           "    r5.xyz = pow(r5.xyz, c1.yyy);\n"
           "    r5.w = c0.w;\n"
           "    r5.xyz = mix(r0.xyz, r5.xyz, r2.www);\n"
           "    gl_FragColor = mix(r2, r5, r0.wwww);\n"
           "}\n"
           "//MD5=0c429fe7:c30c1e7d:f6c41481:35876db9\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0001:0007:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendHardMixProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000008dd\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 65535.00000, 1.525902189e-05, 0.003921568859);\n"
             "    const half4 c1 = half4(-0.7500000000, 3.039975672e-05, 1.003921628, 32895.00000);\n"
             "    const half4 c2 = half4(0.007751937956, 254.9999847, 0.000000000, 0.9960784316);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r2 = r2 / half4(fmax(r2.www, 6.10350e-05h), 1.);\n"
             "    r3.xyz = c0.xxx - r1.xyz;\n"
             "    r3.xyz = r3.xyz*c0.yyy;\n"
             "    r3.xyz = floor(r3.xyz);\n"
             "    r3.xyz = r3.xyz*c0.zzz;\n"
             "    r4.xyz = -r1.xyz*c0.www + r3.xyz;\n"
             "    r4.xyz = c1.xxx*c1.yyy + r4.xyz;\n"
             "    r5.xyz = half3(r2.xyz >= r4.xyz);\n"
             "    r3.xyz = r3.xyz*c1.zzz;\n"
             "    r6.xyz = half3(r2.xyz < r3.xyz);\n"
             "    r4.xyz = r2.xyz - r4.xyz;\n"
             "    r4.xyz = r4.xyz*c1.www;\n"
             "    r4.xyz = floor(r4.xyz);\n"
             "    r4.xyz = c2.xxx*r4.xyz;\n"
             "    r6.xyz = fmin(r5.xyz, r6.xyz);\n"
             "    r4.xyz = r4.xyz*r6.xyz;\n"
             "    r6.xyz = half3(r2.xyz >= r3.xyz);\n"
             "    r6.xyz = r6.xyz + r4.xyz;\n"
             "    r3.xyz = fmin(r3.xyz, c0.xxx);\n"
             "    r4.xyz = half3(r1.xyz < c0.www);\n"
             "    r4.xyz = fmin(r4.xyz, r5.xyz);\n"
             "    r5.xyz = r1.xyz*c2.yyy;\n"
             "    r5.xyz = r5.xyz*r4.xyz;\n"
             "    r5.xyz = fmin(r5.xyz, r6.xyz);\n"
             "    r4.xyz = half3(-r4.xyz >= c2.zzz);\n"
             "    r6.xyz = r6.xyz*r4.xyz + r5.xyz;\n"
             "    r4.xyz = half3(r1.xyz >= c2.www);\n"
             "    r3.xyz = half3(r2.xyz < r3.xyz);\n"
             "    r4.xyz = fmin(r4.xyz, r3.xyz);\n"
             "    r1.xyz = r1.xyz - c2.www;\n"
             "    r1.xyz = r1.xyz*c2.yyy;\n"
             "    r1.xyz = r1.xyz*r4.xyz;\n"
             "    r6.xyz = fmax(r1.xyz, r6.xyz);\n"
             "    r6.w = c0.x;\n"
             "    r6.xyz = mix(r2.xyz, r6.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r6), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=6abbb958:d4a3d475:7d2c51bc:e6abde98\n"
             "//SIG=00400000:00000003:00000003:00000003:0003:0001:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000008bf\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 65535.00000, 1.525902189e-05, 0.003921568859);\n"
             "    const float4 c1 = float4(-0.7500000000, 3.039975672e-05, 1.003921628, 32895.00000);\n"
             "    const float4 c2 = float4(0.007751937956, 254.9999847, 0.000000000, 0.9960784316);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
             "    r3.xyz = c0.xxx - r1.xyz;\n"
             "    r3.xyz = r3.xyz*c0.yyy;\n"
             "    r3.xyz = floor(r3.xyz);\n"
             "    r3.xyz = r3.xyz*c0.zzz;\n"
             "    r4.xyz = -r1.xyz*c0.www + r3.xyz;\n"
             "    r4.xyz = c1.xxx*c1.yyy + r4.xyz;\n"
             "    r5.xyz = float3(r2.xyz >= r4.xyz);\n"
             "    r3.xyz = r3.xyz*c1.zzz;\n"
             "    r6.xyz = float3(r2.xyz < r3.xyz);\n"
             "    r4.xyz = r2.xyz - r4.xyz;\n"
             "    r4.xyz = r4.xyz*c1.www;\n"
             "    r4.xyz = floor(r4.xyz);\n"
             "    r4.xyz = c2.xxx*r4.xyz;\n"
             "    r6.xyz = fmin(r5.xyz, r6.xyz);\n"
             "    r4.xyz = r4.xyz*r6.xyz;\n"
             "    r6.xyz = float3(r2.xyz >= r3.xyz);\n"
             "    r6.xyz = r6.xyz + r4.xyz;\n"
             "    r3.xyz = fmin(r3.xyz, c0.xxx);\n"
             "    r4.xyz = float3(r1.xyz < c0.www);\n"
             "    r4.xyz = fmin(r4.xyz, r5.xyz);\n"
             "    r5.xyz = r1.xyz*c2.yyy;\n"
             "    r5.xyz = r5.xyz*r4.xyz;\n"
             "    r5.xyz = fmin(r5.xyz, r6.xyz);\n"
             "    r4.xyz = float3(-r4.xyz >= c2.zzz);\n"
             "    r6.xyz = r6.xyz*r4.xyz + r5.xyz;\n"
             "    r4.xyz = float3(r1.xyz >= c2.www);\n"
             "    r3.xyz = float3(r2.xyz < r3.xyz);\n"
             "    r4.xyz = fmin(r4.xyz, r3.xyz);\n"
             "    r1.xyz = r1.xyz - c2.www;\n"
             "    r1.xyz = r1.xyz*c2.yyy;\n"
             "    r1.xyz = r1.xyz*r4.xyz;\n"
             "    r6.xyz = fmax(r1.xyz, r6.xyz);\n"
             "    r6.w = c0.x;\n"
             "    r6.xyz = mix(r2.xyz, r6.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r6, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c1e965ac:25bf6706:05b8ec7b:4093af55\n"
             "//SIG=00000000:00000003:00000003:00000000:0003:0001:0007:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000008b4\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000000, 65535.00000, 1.525902189e-05, 0.003921568859);\n"
           "    const mediump vec4 c1 = vec4(-0.7500000000, 3.039975672e-05, 1.003921628, 32895.00000);\n"
           "    const mediump vec4 c2 = vec4(0.007751937956, 254.9999847, 0.000000000, 0.9960784316);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5, r6;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r2 = r2 / vec4(max(r2.www, 1.00000e-06), 1.);\n"
           "    r3.xyz = c0.xxx - r1.xyz;\n"
           "    r3.xyz = r3.xyz*c0.yyy;\n"
           "    r3.xyz = floor(r3.xyz);\n"
           "    r3.xyz = r3.xyz*c0.zzz;\n"
           "    r4.xyz = -r1.xyz*c0.www + r3.xyz;\n"
           "    r4.xyz = c1.xxx*c1.yyy + r4.xyz;\n"
           "    r5.xyz = vec3(greaterThanEqual(r2.xyz, r4.xyz));\n"
           "    r3.xyz = r3.xyz*c1.zzz;\n"
           "    r6.xyz = vec3(lessThan(r2.xyz, r3.xyz));\n"
           "    r4.xyz = r2.xyz - r4.xyz;\n"
           "    r4.xyz = r4.xyz*c1.www;\n"
           "    r4.xyz = floor(r4.xyz);\n"
           "    r4.xyz = c2.xxx*r4.xyz;\n"
           "    r6.xyz = min(r5.xyz, r6.xyz);\n"
           "    r4.xyz = r4.xyz*r6.xyz;\n"
           "    r6.xyz = vec3(greaterThanEqual(r2.xyz, r3.xyz));\n"
           "    r6.xyz = r6.xyz + r4.xyz;\n"
           "    r3.xyz = min(r3.xyz, c0.xxx);\n"
           "    r4.xyz = vec3(lessThan(r1.xyz, c0.www));\n"
           "    r4.xyz = min(r4.xyz, r5.xyz);\n"
           "    r5.xyz = r1.xyz*c2.yyy;\n"
           "    r5.xyz = r5.xyz*r4.xyz;\n"
           "    r5.xyz = min(r5.xyz, r6.xyz);\n"
           "    r4.xyz = vec3(greaterThanEqual(-r4.xyz, c2.zzz));\n"
           "    r6.xyz = r6.xyz*r4.xyz + r5.xyz;\n"
           "    r4.xyz = vec3(greaterThanEqual(r1.xyz, c2.www));\n"
           "    r3.xyz = vec3(lessThan(r2.xyz, r3.xyz));\n"
           "    r4.xyz = min(r4.xyz, r3.xyz);\n"
           "    r1.xyz = r1.xyz - c2.www;\n"
           "    r1.xyz = r1.xyz*c2.yyy;\n"
           "    r1.xyz = r1.xyz*r4.xyz;\n"
           "    r6.xyz = max(r1.xyz, r6.xyz);\n"
           "    r6.w = c0.x;\n"
           "    r6.xyz = mix(r2.xyz, r6.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r6, r2.wwww);\n"
           "}\n"
           "//MD5=c83ffaba:f8e1e893:06e2d049:b3453f56\n"
           "//SIG=00000000:00000003:00000003:00000000:0003:0001:0007:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendHardMixPOWProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000005ae\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*half4(hg_Params[0]);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r0.xyz = clamp(r1.xyz, 0.00000h, 1.00000h);\n"
             "    r0.xyz = pow(r0.xyz, half3(hg_Params[1].xyz));\n"
             "    r2 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r3.xyz = clamp(r2.xyz / fmax(r2.w, 6.10350e-05h), 0.00000h, 1.00000h);\n"
             "    r3.xyz = pow(r3.xyz, half3(hg_Params[1].xyz));\n"
             "    r4.xyz = c0.xxx - r3.xyz;\n"
             "    r4.xyz = half3(r4.xyz <= r0.xyz);\n"
             "    r3.xyz = half3(r3.xyz <= c0.yyy);\n"
             "    r5.xyz = half3(r0.xyz >= c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, r5.xyz);\n"
             "    r3.xyz = select(r4.xyz, c0.yyy, -r3.xyz < 0.00000h);\n"
             "    r3.w = c0.x;\n"
             "    r3.xyz = mix(r1.xyz, r3.xyz, r2.www);\n"
             "    output.color0 = mix(float4(r2), float4(r3), float4(r0.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=cbd2f72c:10e44047:4a5970ce:dbe69896\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0002:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000579\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*hg_Params[0];\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r0.xyz = clamp(r1.xyz, 0.00000f, 1.00000f);\n"
             "    r0.xyz = pow(r0.xyz, hg_Params[1].xyz);\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r3.xyz = clamp(r2.xyz / fmax(r2.w, 1.00000e-06f), 0.00000f, 1.00000f);\n"
             "    r3.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
             "    r4.xyz = c0.xxx - r3.xyz;\n"
             "    r4.xyz = float3(r4.xyz <= r0.xyz);\n"
             "    r3.xyz = float3(r3.xyz <= c0.yyy);\n"
             "    r5.xyz = float3(r0.xyz >= c0.xxx);\n"
             "    r3.xyz = fmin(r3.xyz, r5.xyz);\n"
             "    r3.xyz = select(r4.xyz, c0.yyy, -r3.xyz < 0.00000f);\n"
             "    r3.w = c0.x;\n"
             "    r3.xyz = mix(r1.xyz, r3.xyz, r2.www);\n"
             "    output.color0 = mix(r2, r3, r0.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=9e7d49d5:be156bfe:8f123f5e:66202703\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0002:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000005be\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0 = r0*hg_ProgramLocal0;\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r0.xyz = clamp(r1.xyz, vec3(0.00000), vec3(1.00000));\n"
           "    r0.xyz = pow(r0.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r3.xyz = clamp(r2.xyz / max(r2.w, 1.00000e-06), vec3(0.00000), vec3(1.00000));\n"
           "    r3.xyz = pow(r3.xyz, hg_ProgramLocal1.xyz);\n"
           "    r4.xyz = c0.xxx - r3.xyz;\n"
           "    r4.xyz = vec3(lessThanEqual(r4.xyz, r0.xyz));\n"
           "    r3.xyz = vec3(lessThanEqual(r3.xyz, c0.yyy));\n"
           "    r5.xyz = vec3(greaterThanEqual(r0.xyz, c0.xxx));\n"
           "    r3.xyz = min(r3.xyz, r5.xyz);\n"
           "    r3.xyz = vec3(-r3.x < 0.00000 ? c0.y : r4.x, -r3.y < 0.00000 ? c0.y : r4.y, -r3.z < 0.00000 ? c0.y : r4.z"
           ");\n"
           "    r3.w = c0.x;\n"
           "    r3.xyz = mix(r1.xyz, r3.xyz, r2.www);\n"
           "    gl_FragColor = mix(r2, r3, r0.wwww);\n"
           "}\n"
           "//MD5=50f562ff:ef85c03c:af2578db:ac8cd17a\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0002:0006:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendHardMixQTProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000005b7\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5109999776, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*half4(hg_Params[0]);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r0.xyz = clamp(r1.xyz, 0.00000h, 1.00000h);\n"
             "    r2.xyz = r0.xyz;\n"
             "    r2.xyz = pow(r2.xyz, c0.xxx);\n"
             "    r0.xyz = r2.xyz;\n"
             "    r2 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r3.xyz = clamp(r2.xyz / fmax(r2.w, 6.10350e-05h), 0.00000h, 1.00000h);\n"
             "    r3.xyz = pow(r3.xyz, c0.xxx);\n"
             "    r4.xyz = c0.yyy - r3.xyz;\n"
             "    r4.xyz = half3(r4.xyz <= r0.xyz);\n"
             "    r3.xyz = half3(r3.xyz <= c0.zzz);\n"
             "    r5.xyz = half3(r0.xyz >= c0.yyy);\n"
             "    r3.xyz = fmin(r3.xyz, r5.xyz);\n"
             "    r3.xyz = select(r4.xyz, c0.zzz, -r3.xyz < 0.00000h);\n"
             "    r3.w = c0.y;\n"
             "    r3.xyz = mix(r1.xyz, r3.xyz, r2.www);\n"
             "    output.color0 = mix(float4(r2), float4(r3), float4(r0.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=77b52b70:424956c9:4d640b7c:4911f1d0\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000590\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5109999776, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*hg_Params[0];\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r0.xyz = clamp(r1.xyz, 0.00000f, 1.00000f);\n"
             "    r2.xyz = r0.xyz;\n"
             "    r2.xyz = pow(r2.xyz, c0.xxx);\n"
             "    r0.xyz = r2.xyz;\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r3.xyz = clamp(r2.xyz / fmax(r2.w, 1.00000e-06f), 0.00000f, 1.00000f);\n"
             "    r3.xyz = pow(r3.xyz, c0.xxx);\n"
             "    r4.xyz = c0.yyy - r3.xyz;\n"
             "    r4.xyz = float3(r4.xyz <= r0.xyz);\n"
             "    r3.xyz = float3(r3.xyz <= c0.zzz);\n"
             "    r5.xyz = float3(r0.xyz >= c0.yyy);\n"
             "    r3.xyz = fmin(r3.xyz, r5.xyz);\n"
             "    r3.xyz = select(r4.xyz, c0.zzz, -r3.xyz < 0.00000f);\n"
             "    r3.w = c0.y;\n"
             "    r3.xyz = mix(r1.xyz, r3.xyz, r2.www);\n"
             "    output.color0 = mix(r2, r3, r0.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ca1350d1:fc2694e6:6e384c30:3a8ef345\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000005a6\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.5109999776, 1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0 = r0*hg_ProgramLocal0;\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r0.xyz = clamp(r1.xyz, vec3(0.00000), vec3(1.00000));\n"
           "    r2.xyz = r0.xyz;\n"
           "    r2.xyz = pow(r2.xyz, c0.xxx);\n"
           "    r0.xyz = r2.xyz;\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r3.xyz = clamp(r2.xyz / max(r2.w, 1.00000e-06), vec3(0.00000), vec3(1.00000));\n"
           "    r3.xyz = pow(r3.xyz, c0.xxx);\n"
           "    r4.xyz = c0.yyy - r3.xyz;\n"
           "    r4.xyz = vec3(lessThanEqual(r4.xyz, r0.xyz));\n"
           "    r3.xyz = vec3(lessThanEqual(r3.xyz, c0.zzz));\n"
           "    r5.xyz = vec3(greaterThanEqual(r0.xyz, c0.yyy));\n"
           "    r3.xyz = min(r3.xyz, r5.xyz);\n"
           "    r3.xyz = vec3(-r3.x < 0.00000 ? c0.z : r4.x, -r3.y < 0.00000 ? c0.z : r4.y, -r3.z < 0.00000 ? c0.z : r4.z"
           ");\n"
           "    r3.w = c0.y;\n"
           "    r3.xyz = mix(r1.xyz, r3.xyz, r2.www);\n"
           "    gl_FragColor = mix(r2, r3, r0.wwww);\n"
           "}\n"
           "//MD5=d10b6575:504b3910:06449ca6:e5a9005d\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0006:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendDifferenceProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000038d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*half4(hg_Params[0]);\n"
             "    r2 = r1*r0.wwww;\n"
             "    r3 = r0*r1.wwww;\n"
             "    r1 = r1 + r0;\n"
             "    r0 = r2 - r3;\n"
             "    r1 = r1 - r2;\n"
             "    r1.xyz = r1.xyz - r3.xyz;\n"
             "    output.color0 = float4(r1) + float4(fabs(r0));\n"
             "    return output;\n"
             "}\n"
             "//MD5=28640d6b:a7f4cbd7:1398d5ad:4f2b97e5\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0001:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000369\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*hg_Params[0];\n"
             "    r2 = r1*r0.wwww;\n"
             "    r3 = r0*r1.wwww;\n"
             "    r1 = r1 + r0;\n"
             "    r0 = r2 - r3;\n"
             "    r1 = r1 - r2;\n"
             "    r1.xyz = r1.xyz - r3.xyz;\n"
             "    output.color0 = r1 + fabs(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=78eeb002:cd99131f:366f4560:2b2f0811\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0001:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000312\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = r1*hg_ProgramLocal0;\n"
           "    r2 = r1*r0.wwww;\n"
           "    r3 = r0*r1.wwww;\n"
           "    r1 = r1 + r0;\n"
           "    r0 = r2 - r3;\n"
           "    r1 = r1 - r2;\n"
           "    r1.xyz = r1.xyz - r3.xyz;\n"
           "    gl_FragColor = r1 + abs(r0);\n"
           "}\n"
           "//MD5=167e3881:cda035d5:2b7bb7d9:07a634d1\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0001:0004:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendDifferencePOWProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000510\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 6.10350e-05h);\n"
             "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r4.xyz = pow(r4.xyz, half3(hg_Params[1].xyz));\n"
             "    r1.xyz = r1.xyz - r4.xyz;\n"
             "    r1.xyz = pow(fabs(r1.xyz), half3(hg_Params[2].xyz));\n"
             "    r1.w = c0.y;\n"
             "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=832d1e12:7e146cc6:ed9fa6b8:960b6859\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0003:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004d1\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
             "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r4.xyz = pow(r4.xyz, hg_Params[1].xyz);\n"
             "    r1.xyz = r1.xyz - r4.xyz;\n"
             "    r1.xyz = pow(fabs(r1.xyz), hg_Params[2].xyz);\n"
             "    r1.w = c0.y;\n"
             "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r1, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=95e972db:78c79115:c2255fa8:a9b642e4\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0003:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004d0\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r3.xyz = r2.xyz / max(r2.w, 1.00000e-06);\n"
           "    r4.xyz = max(r3.xyz, c0.xxx);\n"
           "    r4.xyz = pow(r4.xyz, hg_ProgramLocal1.xyz);\n"
           "    r1.xyz = r1.xyz - r4.xyz;\n"
           "    r1.xyz = pow(abs(r1.xyz), hg_ProgramLocal2.xyz);\n"
           "    r1.w = c0.y;\n"
           "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r1, r2.wwww);\n"
           "}\n"
           "//MD5=844141b7:6f0dff52:1ccf774d:e6df7bdf\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0003:0005:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendDifferenceQTProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000597\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.330000043, 0.5109999776, 1.149999976);\n"
             "    const half4 c1 = half4(1.955999970, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 6.10350e-05h);\n"
             "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r4.xyz = fmin(r4.xyz, c0.yyy);\n"
             "    r4.xyz = pow(r4.xyz, c0.zzz);\n"
             "    r1.xyz = r1.xyz - r4.xyz;\n"
             "    r1.xyz = fmin(fabs(r1.xyz), c0.www);\n"
             "    r1.xyz = pow(r1.xyz, c1.xxx);\n"
             "    r1.w = c1.y;\n"
             "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=7e88c717:604f97d1:354f9a24:f0876eac\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000056f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.149999976);\n"
             "    const float4 c1 = float4(1.955999970, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
             "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r4.xyz = fmin(r4.xyz, c0.yyy);\n"
             "    r4.xyz = pow(r4.xyz, c0.zzz);\n"
             "    r1.xyz = r1.xyz - r4.xyz;\n"
             "    r1.xyz = fmin(fabs(r1.xyz), c0.www);\n"
             "    r1.xyz = pow(r1.xyz, c1.xxx);\n"
             "    r1.w = c1.y;\n"
             "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r1, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=010388f2:1c3aea3e:579d0770:458ba830\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000515\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.330000043, 0.5109999776, 1.149999976);\n"
           "    const mediump vec4 c1 = vec4(1.955999970, 1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r3.xyz = r2.xyz / max(r2.w, 1.00000e-06);\n"
           "    r4.xyz = max(r3.xyz, c0.xxx);\n"
           "    r4.xyz = min(r4.xyz, c0.yyy);\n"
           "    r4.xyz = pow(r4.xyz, c0.zzz);\n"
           "    r1.xyz = r1.xyz - r4.xyz;\n"
           "    r1.xyz = min(abs(r1.xyz), c0.www);\n"
           "    r1.xyz = pow(r1.xyz, c1.xxx);\n"
           "    r1.w = c1.y;\n"
           "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r1, r2.wwww);\n"
           "}\n"
           "//MD5=f9e8be4c:9ffa5667:af0daeb8:121866ac\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0001:0005:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendExclusionProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000406\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*half4(hg_Params[0]);\n"
             "    r2 = r1*r0.wwww;\n"
             "    r3 = r0*r1.wwww;\n"
             "    r4 = r0*r1;\n"
             "    r4 = c0.xxxx*r4 + r2;\n"
             "    r4 = r4 + r3;\n"
             "    r1 = r1 + r0;\n"
             "    r1 = r1 - r2;\n"
             "    r1.xyz = r1.xyz - r3.xyz;\n"
             "    output.color0 = float4(r1) + float4(r4);\n"
             "    return output;\n"
             "}\n"
             "//MD5=1be1e8b8:4f83dbba:c5944c1a:4d913d97\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003e4\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*hg_Params[0];\n"
             "    r2 = r1*r0.wwww;\n"
             "    r3 = r0*r1.wwww;\n"
             "    r4 = r0*r1;\n"
             "    r4 = c0.xxxx*r4 + r2;\n"
             "    r4 = r4 + r3;\n"
             "    r1 = r1 + r0;\n"
             "    r1 = r1 - r2;\n"
             "    r1.xyz = r1.xyz - r3.xyz;\n"
             "    output.color0 = r1 + r4;\n"
             "    return output;\n"
             "}\n"
             "//MD5=0f532412:67fd3d19:e6e32c9a:f2d80e5e\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000393\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(-2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = r1*hg_ProgramLocal0;\n"
           "    r2 = r1*r0.wwww;\n"
           "    r3 = r0*r1.wwww;\n"
           "    r4 = r0*r1;\n"
           "    r4 = c0.xxxx*r4 + r2;\n"
           "    r4 = r4 + r3;\n"
           "    r1 = r1 + r0;\n"
           "    r1 = r1 - r2;\n"
           "    r1.xyz = r1.xyz - r3.xyz;\n"
           "    gl_FragColor = r1 + r4;\n"
           "}\n"
           "//MD5=7c7ef45c:2a9b315f:68065765:88d684a8\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0005:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendExclusionPOWProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000550\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, -2.000000000, 1.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 6.10350e-05h);\n"
             "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r4.xyz = pow(r4.xyz, half3(hg_Params[1].xyz));\n"
             "    r5.xyz = r1.xyz + r4.xyz;\n"
             "    r4.xyz = r1.xyz*r4.xyz;\n"
             "    r4.xyz = c0.yyy*r4.xyz + r5.xyz;\n"
             "    r4.xyz = pow(r4.xyz, half3(hg_Params[2].xyz));\n"
             "    r4.w = c0.z;\n"
             "    r4.xyz = mix(r3.xyz, r4.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r4), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=9ada872c:69cf577f:d04e3da1:b5571db0\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0003:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000511\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, -2.000000000, 1.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
             "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r4.xyz = pow(r4.xyz, hg_Params[1].xyz);\n"
             "    r5.xyz = r1.xyz + r4.xyz;\n"
             "    r4.xyz = r1.xyz*r4.xyz;\n"
             "    r4.xyz = c0.yyy*r4.xyz + r5.xyz;\n"
             "    r4.xyz = pow(r4.xyz, hg_Params[2].xyz);\n"
             "    r4.w = c0.z;\n"
             "    r4.xyz = mix(r3.xyz, r4.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r4, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ae6728af:869ecc44:7da2cc97:129b83d9\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0003:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000511\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, -2.000000000, 1.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = pow(r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r3.xyz = r2.xyz / max(r2.w, 1.00000e-06);\n"
           "    r4.xyz = max(r3.xyz, c0.xxx);\n"
           "    r4.xyz = pow(r4.xyz, hg_ProgramLocal1.xyz);\n"
           "    r5.xyz = r1.xyz + r4.xyz;\n"
           "    r4.xyz = r1.xyz*r4.xyz;\n"
           "    r4.xyz = c0.yyy*r4.xyz + r5.xyz;\n"
           "    r4.xyz = pow(r4.xyz, hg_ProgramLocal2.xyz);\n"
           "    r4.w = c0.z;\n"
           "    r4.xyz = mix(r3.xyz, r4.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r4, r2.wwww);\n"
           "}\n"
           "//MD5=aae0a4a9:2a6b5046:aca59177:262e0a3c\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0003:0006:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendExclusionQTProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000005fa\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.330000043, 0.5109999776, -2.000000000);\n"
             "    const half4 c1 = half4(1.149999976, 1.955999970, 1.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*half4(hg_Params[0]);\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 6.10350e-05h);\n"
             "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r4.xyz = fmin(r4.xyz, c0.yyy);\n"
             "    r4.xyz = pow(r4.xyz, c0.zzz);\n"
             "    r5.xyz = r1.xyz + r4.xyz;\n"
             "    r4.xyz = r1.xyz*r4.xyz;\n"
             "    r4.xyz = c0.www*r4.xyz + r5.xyz;\n"
             "    r4.xyz = fmax(r4.xyz, c0.xxx);\n"
             "    r4.xyz = fmin(r4.xyz, c1.xxx);\n"
             "    r4.xyz = pow(r4.xyz, c1.yyy);\n"
             "    r4.w = c1.z;\n"
             "    r4.xyz = mix(r3.xyz, r4.xyz, r0.www);\n"
             "    output.color0 = mix(float4(r0), float4(r4), float4(r2.wwww));\n"
             "    return output;\n"
             "}\n"
             "//MD5=453c5bfe:3a2b37d9:78df4aea:008674ec\n"
             "//SIG=00400000:00000003:00000003:00000003:0002:0001:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000005d2\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, -2.000000000);\n"
             "    const float4 c1 = float4(1.149999976, 1.955999970, 1.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
             "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = r2*hg_Params[0];\n"
             "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
             "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
             "    r4.xyz = fmin(r4.xyz, c0.yyy);\n"
             "    r4.xyz = pow(r4.xyz, c0.zzz);\n"
             "    r5.xyz = r1.xyz + r4.xyz;\n"
             "    r4.xyz = r1.xyz*r4.xyz;\n"
             "    r4.xyz = c0.www*r4.xyz + r5.xyz;\n"
             "    r4.xyz = fmax(r4.xyz, c0.xxx);\n"
             "    r4.xyz = fmin(r4.xyz, c1.xxx);\n"
             "    r4.xyz = pow(r4.xyz, c1.yyy);\n"
             "    r4.w = c1.z;\n"
             "    r4.xyz = mix(r3.xyz, r4.xyz, r0.www);\n"
             "    output.color0 = mix(r0, r4, r2.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=0a9ccd72:b47ae297:d4668882:ade8d5d9\n"
             "//SIG=00000000:00000003:00000003:00000000:0002:0001:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000578\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.330000043, 0.5109999776, -2.000000000);\n"
           "    const mediump vec4 c1 = vec4(1.149999976, 1.955999970, 1.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.xyz = min(r1.xyz, c0.yyy);\n"
           "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = r2*hg_ProgramLocal0;\n"
           "    r3.xyz = r2.xyz / max(r2.w, 1.00000e-06);\n"
           "    r4.xyz = max(r3.xyz, c0.xxx);\n"
           "    r4.xyz = min(r4.xyz, c0.yyy);\n"
           "    r4.xyz = pow(r4.xyz, c0.zzz);\n"
           "    r5.xyz = r1.xyz + r4.xyz;\n"
           "    r4.xyz = r1.xyz*r4.xyz;\n"
           "    r4.xyz = c0.www*r4.xyz + r5.xyz;\n"
           "    r4.xyz = max(r4.xyz, c0.xxx);\n"
           "    r4.xyz = min(r4.xyz, c1.xxx);\n"
           "    r4.xyz = pow(r4.xyz, c1.yyy);\n"
           "    r4.w = c1.z;\n"
           "    r4.xyz = mix(r3.xyz, r4.xyz, r0.www);\n"
           "    gl_FragColor = mix(r0, r4, r2.wwww);\n"
           "}\n"
           "//MD5=d59a60b1:f04eab3d:b9d735e0:71fcfd2a\n"
           "//SIG=00000000:00000003:00000003:00000000:0002:0001:0006:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendStencilAlphaProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000030c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).w;\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = r0.w*half(hg_Params[0].w);\n"
             "    output.color0 = float4(r0.xxxx)*float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=01f634c8:f7748912:786afaf7:eb888de8\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002ea\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).w;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = r0.w*hg_Params[0].w;\n"
             "    output.color0 = r0.xxxx*r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=e1ec9237:e9f18bbe:72542b57:68628fe1\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000294\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.w = texture2D(hg_Texture1, hg_TexCoord1.xy).w;\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.x = r0.w*hg_ProgramLocal0.w;\n"
           "    gl_FragColor = r0.xxxx*r1;\n"
           "}\n"
           "//MD5=b08281d5:65ec7cc3:7ffdfd68:7096132c\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendStencilLumaProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000038b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.3000000119, 0.5899999738, 0.1099999994, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = (half3) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xyz;\n"
             "    r0.xyz = r0.xyz*half3(hg_Params[0].xyz);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0.xyz, c0.xyz);\n"
             "    output.color0 = float4(r0.xxxx)*float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=cb176b52:a0693719:b9ea283b:0759c643\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000369\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.3000000119, 0.5899999738, 0.1099999994, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xyz;\n"
             "    r0.xyz = r0.xyz*hg_Params[0].xyz;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0.xyz, c0.xyz);\n"
             "    output.color0 = r0.xxxx*r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=d4787518:3c8759ce:80b33876:1f8c5248\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000318\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.3000000119, 0.5899999738, 0.1099999994, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.xyz = texture2D(hg_Texture1, hg_TexCoord1.xy).xyz;\n"
           "    r0.xyz = r0.xyz*hg_ProgramLocal0.xyz;\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.x = dot(r0.xyz, c0.xyz);\n"
           "    gl_FragColor = r0.xxxx*r1;\n"
           "}\n"
           "//MD5=23b25b93:d546e82f:8b4aad79:2f25e687\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendSilhouetteAlphaProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000031a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).w;\n"
             "    r0.x = -r0.w*half(hg_Params[0].w);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = float4(r0.xxxx)*float4(r1) + float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=9639d417:186a031c:6b3aa441:ce5f8528\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002f0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).w;\n"
             "    r0.x = -r0.w*hg_Params[0].w;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = r0.xxxx*r1 + r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=2ff209aa:1783dfd7:95f3f37d:6ad71923\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000029a\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.w = texture2D(hg_Texture1, hg_TexCoord1.xy).w;\n"
           "    r0.x = -r0.w*hg_ProgramLocal0.w;\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = r0.xxxx*r1 + r1;\n"
           "}\n"
           "//MD5=19e8d72e:ec77a61e:4a0e0cff:0c6215d9\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendSilhouetteLumaProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003e6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.3000000119, 0.5899999738, 0.1099999994, 1.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r0.xyz = r0.xyz*half3(hg_Params[0].xyz);\n"
             "    r0.x = clamp(dot(r0.xyz, c0.xyz), 0.00000h, 1.00000h);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = c0.w - r0.x;\n"
             "    output.color0 = float4(r0.xxxx)*float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=9e7e6220:f1380266:ad59740d:425602c4\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003c4\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.3000000119, 0.5899999738, 0.1099999994, 1.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r0.xyz = r0.xyz*hg_Params[0].xyz;\n"
             "    r0.x = clamp(dot(r0.xyz, c0.xyz), 0.00000f, 1.00000f);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = c0.w - r0.x;\n"
             "    output.color0 = r0.xxxx*r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=fb2eb236:cf333580:86a36a28:2a089a43\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000036c\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.3000000119, 0.5899999738, 0.1099999994, 1.000000000);\n"
           "    mediump vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r0.xyz = r0.xyz*hg_ProgramLocal0.xyz;\n"
           "    r0.x = clamp(dot(r0.xyz, c0.xyz), 0.00000, 1.00000);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.x = c0.w - r0.x;\n"
           "    gl_FragColor = r0.xxxx*r1;\n"
           "}\n"
           "//MD5=e2bac880:05dd91d1:f2a01b5a:12c55cfd\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendBehindProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000037c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*half4(hg_Params[0]);\n"
             "    r2 = c0.xxxx - r0.wwww;\n"
             "    output.color0 = float4(r1)*float4(r2) + float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c58d73cf:5abaf669:0ed24989:47f4d1f7\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000352\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*hg_Params[0];\n"
             "    r2 = c0.xxxx - r0.wwww;\n"
             "    output.color0 = r1*r2 + r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=02fd7083:75fd7153:81b391cd:51351952\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000301\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = r1*hg_ProgramLocal0;\n"
           "    r2 = c0.xxxx - r0.wwww;\n"
           "    gl_FragColor = r1*r2 + r0;\n"
           "}\n"
           "//MD5=82fdf0d8:1de86e49:9e296160:488420c6\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendAlphaAddProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000426\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*half4(hg_Params[0]);\n"
             "    r2.x = c0.x - r1.w;\n"
             "    r0 = r0 / half4(fmax(r0.www, 6.10350e-05h), 1.);\n"
             "    r2.x = fmin(r0.w, r2.x);\n"
             "    output.color0.xyz = float3(r2.xxx)*float3(r0.xyz) + float3(r1.xyz);\n"
             "    output.color0.w = clamp(float(r0.w) + float(r1.w), 0.00000f, 1.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=f90028c9:ac63ee31:0582ec0a:01d4319f\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003ef\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r1*hg_Params[0];\n"
             "    r2.x = c0.x - r1.w;\n"
             "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
             "    r2.x = fmin(r0.w, r2.x);\n"
             "    output.color0.xyz = r2.xxx*r0.xyz + r1.xyz;\n"
             "    output.color0.w = clamp(r0.w + r1.w, 0.00000f, 1.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c0565429:874f6bf5:70c5b692:ec699c87\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000393\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = r1*hg_ProgramLocal0;\n"
           "    r2.x = c0.x - r1.w;\n"
           "    r0 = r0 / vec4(max(r0.www, 1.00000e-06), 1.);\n"
           "    r2.x = min(r0.w, r2.x);\n"
           "    gl_FragColor.xyz = r2.xxx*r0.xyz + r1.xyz;\n"
           "    gl_FragColor.w = clamp(r0.w + r1.w, 0.00000, 1.00000);\n"
           "}\n"
           "//MD5=519e231c:8b7219f5:a42034e9:24325591\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendLuminescentPremulProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000003b2\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*half4(hg_Params[0]);\n"
             "    r1 = r0 / half4(fmax(r0.www, 6.10350e-05h), 1.);\n"
             "    r0.x = c0.x - r0.w;\n"
             "    r2 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = float4(r0.xxxx)*float4(r2) + float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=4132c413:bcc37b85:4b94d3c8:0580063c\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000389\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0*hg_Params[0];\n"
             "    r1 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
             "    r0.x = c0.x - r0.w;\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = r0.xxxx*r2 + r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=c94102b6:ee9b78d3:499e2062:7f0e1fd3\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000331\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0 = r0*hg_ProgramLocal0;\n"
           "    r1 = r0 / vec4(max(r0.www, 1.00000e-06), 1.);\n"
           "    r0.x = c0.x - r0.w;\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = r0.xxxx*r2 + r1;\n"
           "}\n"
           "//MD5=9933e453:22266e50:58e77a45:3ff8c33e\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendMinStraightProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002e5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = fmin(float4(r1), float4(r0));\n"
             "    return output;\n"
             "}\n"
             "//MD5=e422aa77:fd499568:6292261a:786077e6\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002c8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = fmin(r1, r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c2060382:fef5a3d6:92ed6008:7e348a1a\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000245\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = min(r1, r0);\n"
           "}\n"
           "//MD5=1f97ac0b:acd5be17:20490fe1:20b20394\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendMaxStraightProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002e5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = fmax(float4(r1), float4(r0));\n"
             "    return output;\n"
             "}\n"
             "//MD5=03194d2d:d20b76be:1b007e7e:6478a81a\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002c8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = fmax(r1, r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=171e71e1:20e2dcdc:551a9dc4:7e3e5749\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000245\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = max(r1, r0);\n"
           "}\n"
           "//MD5=e85b8e93:7e9743a9:dad95728:be4f740e\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendSubtractStraightProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002fb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = clamp(float4(r1) - float4(r0), 0.00000f, 1.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=92942aee:6402e443:1f8f2364:d3f2b823\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002de\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = clamp(r1 - r0, 0.00000f, 1.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c7624c53:65bc4fcc:16ba9d4f:cb0cc5f3\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000266\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = clamp(r1 - r0, vec4(0.00000), vec4(1.00000));\n"
           "}\n"
           "//MD5=a985dc25:2f53039b:0982af3e:9557b499\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetBlendReplaceProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000267\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0 = (float4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=d0da0c39:be03e007:4040bbc7:73e91771\n"
             "//SIG=00400000:00000002:00000002:00000002:0000:0000:0000:0000:0000:0000:0004:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000260\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=691a6891:f45ce721:5a5c5bc2:06c9787e\n"
             "//SIG=00000000:00000002:00000002:00000000:0000:0000:0000:0000:0000:0000:0004:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000001bb\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "\n"
           "    gl_FragColor = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "}\n"
           "//MD5=a4b83d08:d3b1ca52:9cad844e:b351838f\n"
           "//SIG=00000000:00000002:00000002:00000000:0000:0000:0000:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void InitBlendNormalProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendNormal_hgc_visible", "//Metal1.0     \n//LEN=00000001ac\n[[ visible ]] FragmentOut BlendNormal_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1 = r1*hg_Params[0];\n"
    "    r2 = c0.xxxx - r1.wwww;\n"
    "    output.color0 = r0*r2 + r1;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendNormal");
}

void sub_1B78BE65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78BE690(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78BE688);
}

void InitBlendSubtractProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendSubtract_hgc_visible", "//Metal1.0     \n//LEN=00000001da\n[[ visible ]] FragmentOut BlendSubtract_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1 = r1*hg_Params[0];\n"
    "    r2 = r1*r0.wwww;\n"
    "    r3 = r0*r1.wwww;\n"
    "    r1 = r1 + r0;\n"
    "    r0 = clamp(r3 - r2, 0.00000f, 1.00000f);\n"
    "    r1 = r1 - r2;\n"
    "    r1.xyz = r1.xyz - r3.xyz;\n"
    "    output.color0 = r1 + r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendSubtract");
}

void sub_1B78BE934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78BE968(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78BE960);
}

void InitBlendSubtractPOWProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendSubtractPOW_hgc_visible", "//Metal1.0     \n//LEN=0000000345\n[[ visible ]] FragmentOut BlendSubtractPOW_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
    "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
    "    r4.xyz = pow(r4.xyz, hg_Params[1].xyz);\n"
    "    r1.xyz = clamp(r1.xyz - r4.xyz, 0.00000f, 1.00000f);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[2].xyz);\n"
    "    r1.w = c0.y;\n"
    "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r1, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendSubtractPOW");
}

void sub_1B78BEC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78BEC40(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78BEC38);
}

void InitBlendSubtractQTProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendSubtractQT_hgc_visible", "//Metal1.0     \n//LEN=00000003bf\n[[ visible ]] FragmentOut BlendSubtractQT_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.955999970);\n"
    "    const float4 c1 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
    "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
    "    r4.xyz = fmin(r4.xyz, c0.yyy);\n"
    "    r4.xyz = pow(r4.xyz, c0.zzz);\n"
    "    r1.xyz = clamp(r1.xyz - r4.xyz, 0.00000f, 1.00000f);\n"
    "    r1.xyz = pow(r1.xyz, c0.www);\n"
    "    r1.w = c1.w;\n"
    "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r1, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendSubtractQT");
}

void sub_1B78BEEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78BEF18(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78BEF10);
}

void InitBlendDarkenProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendDarken_hgc_visible", "//Metal1.0     \n//LEN=00000001ba\n[[ visible ]] FragmentOut BlendDarken_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1 = r1*hg_Params[0];\n"
    "    r2 = r1*r0.wwww;\n"
    "    r3 = r0*r1.wwww;\n"
    "    r4 = fmin(r2, r3);\n"
    "    r1 = r1 + r0;\n"
    "    r1 = r1 - r2;\n"
    "    r1 = r1 - r3;\n"
    "    output.color0 = r1 + r4;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendDarken");
}

void sub_1B78BF1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78BF1F0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78BF1E8);
}

void InitBlendMultiplyProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendMultiply_hgc_visible", "//Metal1.0     \n//LEN=000000018c\n[[ visible ]] FragmentOut BlendMultiply_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1 = r1*hg_Params[0];\n"
    "    r2 = -r1*r0.wwww + r1;\n"
    "    r3 = -r0*r1.wwww + r0;\n"
    "    r0 = r1*r0 + r2;\n"
    "    output.color0 = r0 + r3;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendMultiply");
}

void sub_1B78BF494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78BF4C8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78BF4C0);
}

void InitBlendColorBurnProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendColorBurn_hgc_visible", "//Metal1.0     \n//LEN=000000045d\n[[ visible ]] FragmentOut BlendColorBurn_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(9.999999717e-10, 0.000000000, 1.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r0 = r0*hg_Params[0];\n"
    "    r1 = color0;\n"
    "    r2.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r0.xyz = fmax(r2.xyz, c0.xxx);\n"
    "    r3.xyz = r1.xyz / fmax(r1.w, 1.00000e-06f);\n"
    "    r4.xyz = float3(r2.xyz == c0.yyy);\n"
    "    r5.xyz = r4.xyz;\n"
    "    r6.xyz = float3(r3.xyz == c0.zzz);\n"
    "    r6.xyz = fmin(r4.xyz, r6.xyz);\n"
    "    r3.xyz = c0.zzz - r3.xyz;\n"
    "    r0.xyz = r3.xyz/r0.xyz;\n"
    "    r0.xyz = fmin(r0.xyz, c0.zzz);\n"
    "    r4.xyz = c0.zzz - r0.xyz;\n"
    "    r0.xyz = float3(c0.yyy < r2.xyz);\n"
    "    r0.xyz = r0.xyz*r4.xyz;\n"
    "    r0.xyz = select(c0.yyy, r0.xyz, -r0.www < 0.00000f);\n"
    "    r0.xyz = select(r0.xyz, c0.yyy, -r5.xyz < 0.00000f);\n"
    "    r0.xyz = select(r0.xyz, c0.zzz, -r6.xyz < 0.00000f);\n"
    "    r2.w = c0.z;\n"
    "    r2.xyz = mix(r2.xyz, r0.xyz, r1.www);\n"
    "    output.color0 = mix(r1, r2, r0.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendColorBurn");
}

void sub_1B78BF76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78BF7A0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78BF798);
}

void InitBlendColorBurnPOWProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendColorBurnPOW_hgc_visible", "//Metal1.0     \n//LEN=000000043a\n[[ visible ]] FragmentOut BlendColorBurnPOW_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 9.999999717e-10, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
    "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
    "    r2.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
    "    r4.xyz = c0.yyy - r1.xyz;\n"
    "    r5.xyz = fmax(r2.xyz, c0.zzz);\n"
    "    r4.xyz = r4.xyz/r5.xyz;\n"
    "    r4.xyz = fmin(r4.xyz, c0.yyy);\n"
    "    r4.xyz = c0.yyy - r4.xyz;\n"
    "    r5.xyz = float3(r2.xyz <= c0.zzz);\n"
    "    r1.xyz = float3(r1.xyz >= c0.yyy);\n"
    "    r2.xyz = select(r4.xyz, r1.xyz, -r5.xyz < 0.00000f);\n"
    "    r2.xyz = pow(r2.xyz, hg_Params[2].xyz);\n"
    "    r3.w = c0.y;\n"
    "    r3.xyz = mix(r3.xyz, r2.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r3, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendColorBurnPOW");
}

void sub_1B78BFA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78BFA78(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78BFA70);
}

void InitBlendColorBurnQTProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendColorBurnQT_hgc_visible", "//Metal1.0     \n//LEN=0000000524\n[[ visible ]] FragmentOut BlendColorBurnQT_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
    "    const float4 c1 = float4(9.999999717e-10, 1.149999976, 1.955999970, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
    "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
    "    r4.xyz = fmin(r3.xyz, c0.yyy);\n"
    "    r4.xyz = pow(r4.xyz, c0.zzz);\n"
    "    r2.xyz = r4.xyz;\n"
    "    r4.xyz = c0.www - r1.xyz;\n"
    "    r5.xyz = fmax(r2.xyz, c1.xxx);\n"
    "    r4.xyz = r4.xyz/r5.xyz;\n"
    "    r4.xyz = fmin(r4.xyz, c0.www);\n"
    "    r4.xyz = c0.www - r4.xyz;\n"
    "    r5.xyz = float3(r2.xyz <= c1.xxx);\n"
    "    r1.xyz = float3(r1.xyz >= c0.www);\n"
    "    r2.xyz = select(r4.xyz, r1.xyz, -r5.xyz < 0.00000f);\n"
    "    r5.xyz = fmax(r2.xyz, c0.xxx);\n"
    "    r5.xyz = fmin(r5.xyz, c1.yyy);\n"
    "    r5.xyz = pow(r5.xyz, c1.zzz);\n"
    "    r2.xyz = r5.xyz;\n"
    "    r3.w = c0.w;\n"
    "    r3.xyz = mix(r3.xyz, r2.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r3, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendColorBurnQT");
}

void sub_1B78BFD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78BFD50(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78BFD48);
}

void InitBlendLinearBurnProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendLinearBurn_hgc_visible", "//Metal1.0     \n//LEN=00000001f4\n[[ visible ]] FragmentOut BlendLinearBurn_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1 = r1*hg_Params[0];\n"
    "    r2 = r1*r0.wwww;\n"
    "    r3 = r0*r1.wwww;\n"
    "    r4 = r2 + r3;\n"
    "    r4 = clamp(-r0.wwww*r1.wwww + r4, 0.00000f, 1.00000f);\n"
    "    r1 = r1 + r0;\n"
    "    r1 = r1 - r2;\n"
    "    r1 = r1 - r3;\n"
    "    output.color0 = r1 + r4;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendLinearBurn");
}

void sub_1B78BFFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C0028(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C0020);
}

void InitBlendLinearBurnPOWProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendLinearBurnPOW_hgc_visible", "//Metal1.0     \n//LEN=0000000367\n[[ visible ]] FragmentOut BlendLinearBurnPOW_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
    "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
    "    r3.xyz = r1.xyz + r3.xyz;\n"
    "    r3.xyz = clamp(r3.xyz - c0.yyy, 0.00000f, 1.00000f);\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[2].xyz);\n"
    "    r3.w = c0.y;\n"
    "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r3, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendLinearBurnPOW");
}

void sub_1B78C02CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C0300(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C02F8);
}

void InitBlendLinearBurnQTProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendLinearBurnQT_hgc_visible", "//Metal1.0     \n//LEN=00000003e1\n[[ visible ]] FragmentOut BlendLinearBurnQT_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
    "    const float4 c1 = float4(1.955999970, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
    "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
    "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
    "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
    "    r3.xyz = r1.xyz + r3.xyz;\n"
    "    r3.xyz = clamp(r3.xyz - c0.www, 0.00000f, 1.00000f);\n"
    "    r3.xyz = pow(r3.xyz, c1.xxx);\n"
    "    r3.w = c0.w;\n"
    "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r3, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendLinearBurnQT");
}

void sub_1B78C05A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C05D8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C05D0);
}

void InitBlendAddProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendAdd_hgc_visible", "//Metal1.0     \n//LEN=0000000185\n[[ visible ]] FragmentOut BlendAdd_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r1 = color0;\n"
    "    r0 = r0*hg_Params[0];\n"
    "    r2.x = r0.w + r1.w;\n"
    "    output.color0.xyz = r0.xyz + r1.xyz;\n"
    "    output.color0.w = -r0.w*r1.w + r2.x;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendAdd");
}

void sub_1B78C087C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C08B0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C08A8);
}

void InitBlendLightenProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendLighten_hgc_visible", "//Metal1.0     \n//LEN=00000001bb\n[[ visible ]] FragmentOut BlendLighten_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1 = r1*hg_Params[0];\n"
    "    r2 = r1*r0.wwww;\n"
    "    r3 = r0*r1.wwww;\n"
    "    r4 = fmax(r2, r3);\n"
    "    r1 = r1 + r0;\n"
    "    r1 = r1 - r2;\n"
    "    r1 = r1 - r3;\n"
    "    output.color0 = r1 + r4;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendLighten");
}

void sub_1B78C0B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C0B88(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C0B80);
}

void InitBlendScreenProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendScreen_hgc_visible", "//Metal1.0     \n//LEN=000000018b\n[[ visible ]] FragmentOut BlendScreen_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1 = r1*hg_Params[0];\n"
    "    r2 = r1*r0;\n"
    "    r2 = fmin(r2, r1);\n"
    "    r2 = fmin(r2, r0);\n"
    "    r1 = r1 + r0;\n"
    "    output.color0 = r1 - r2;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendScreen");
}

void sub_1B78C0E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C0E60(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C0E58);
}

void InitBlendScreenPOWProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendScreenPOW_hgc_visible", "//Metal1.0     \n//LEN=00000003ae\n[[ visible ]] FragmentOut BlendScreenPOW_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
    "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
    "    r4.xyz = r3.xyz*r1.xyz;\n"
    "    r4.xyz = fmin(r4.xyz, r3.xyz);\n"
    "    r4.xyz = fmin(r4.xyz, r1.xyz);\n"
    "    r3.xyz = r3.xyz + r1.xyz;\n"
    "    r3.xyz = r3.xyz - r4.xyz;\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[2].xyz);\n"
    "    r3.w = c0.y;\n"
    "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r3, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendScreenPOW");
}

void sub_1B78C1104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C1138(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C1130);
}

void InitBlendScreenQTProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendScreenQT_hgc_visible", "//Metal1.0     \n//LEN=000000046e\n[[ visible ]] FragmentOut BlendScreenQT_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.149999976);\n"
    "    const float4 c1 = float4(1.955999970, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
    "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
    "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
    "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
    "    r4.xyz = r3.xyz*r1.xyz;\n"
    "    r4.xyz = fmin(r4.xyz, r3.xyz);\n"
    "    r4.xyz = fmin(r4.xyz, r1.xyz);\n"
    "    r3.xyz = r3.xyz + r1.xyz;\n"
    "    r3.xyz = r3.xyz - r4.xyz;\n"
    "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
    "    r3.xyz = fmin(r3.xyz, c0.www);\n"
    "    r3.xyz = pow(r3.xyz, c1.xxx);\n"
    "    r3.w = c1.y;\n"
    "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r3, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendScreenQT");
}

void sub_1B78C13DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C1410(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C1408);
}

void InitBlendColorDodgeProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendColorDodge_hgc_visible", "//Metal1.0     \n//LEN=000000035e\n[[ visible ]] FragmentOut BlendColorDodge_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 9.999999717e-10, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r0 = r0*hg_Params[0];\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r2 = color0;\n"
    "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
    "    r4.xyz = c0.xxx - r1.xyz;\n"
    "    r4.xyz = fmax(r4.xyz, c0.yyy);\n"
    "    r4.xyz = r3.xyz/r4.xyz;\n"
    "    r4.xyz = fmin(r4.xyz, c0.xxx);\n"
    "    r4.xyz = select(c0.zzz, r4.xyz, -r3.xyz < 0.00000f);\n"
    "    r3.xyz = float3(r0.xyz >= r0.www);\n"
    "    r4.xyz = select(r4.xyz, c0.xxx, -r3.xyz < 0.00000f);\n"
    "    r1.w = c0.x;\n"
    "    r1.xyz = mix(r1.xyz, r4.xyz, r2.www);\n"
    "    output.color0 = mix(r2, r1, r0.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendColorDodge");
}

void sub_1B78C16B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C16E8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C16E0);
}

void InitBlendColorDodgePOWProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendColorDodgePOW_hgc_visible", "//Metal1.0     \n//LEN=0000000427\n[[ visible ]] FragmentOut BlendColorDodgePOW_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 9.999999717e-10, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = clamp(r0.xyz / fmax(r0.w, 1.00000e-06f), 0.00000f, 1.00000f);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
    "    r2 = color1;\n"
    "    r3.w = r2.w*hg_Params[0].w;\n"
    "    r2.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
    "    r4.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    r4.xyz = pow(r4.xyz, hg_Params[1].xyz);\n"
    "    r4.xyz = c0.xxx - r4.xyz;\n"
    "    r5.xyz = fmax(r4.xyz, c0.yyy);\n"
    "    r5.xyz = r1.xyz/r5.xyz;\n"
    "    r5.xyz = fmin(r5.xyz, c0.xxx);\n"
    "    r4.xyz = float3(r4.xyz <= c0.yyy);\n"
    "    r1.xyz = float3(r1.xyz > c0.zzz);\n"
    "    r4.xyz = select(r5.xyz, r1.xyz, -r4.xyz < 0.00000f);\n"
    "    r4.xyz = pow(r4.xyz, hg_Params[2].xyz);\n"
    "    r1.w = c0.x;\n"
    "    r1.xyz = mix(r2.xyz, r4.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r1, r3.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendColorDodgePOW");
}

void sub_1B78C198C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C19C0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C19B8);
}

void InitBlendColorDodgeQTProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendColorDodgeQT_hgc_visible", "//Metal1.0     \n//LEN=00000004a1\n[[ visible ]] FragmentOut BlendColorDodgeQT_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.5109999776, 1.000000000, 9.999999717e-10, 0.000000000);\n"
    "    const float4 c1 = float4(1.149999976, 1.955999970, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = clamp(r0.xyz / fmax(r0.w, 1.00000e-06f), 0.00000f, 1.00000f);\n"
    "    r1.xyz = pow(r1.xyz, c0.xxx);\n"
    "    r2 = color1;\n"
    "    r3.w = r2.w*hg_Params[0].w;\n"
    "    r2.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
    "    r4.xyz = clamp(r2.xyz, 0.00000f, 1.00000f);\n"
    "    r4.xyz = pow(r4.xyz, c0.xxx);\n"
    "    r4.xyz = c0.yyy - r4.xyz;\n"
    "    r5.xyz = fmax(r4.xyz, c0.zzz);\n"
    "    r5.xyz = r1.xyz/r5.xyz;\n"
    "    r5.xyz = fmin(r5.xyz, c0.yyy);\n"
    "    r4.xyz = float3(r4.xyz <= c0.zzz);\n"
    "    r1.xyz = float3(r1.xyz > c0.www);\n"
    "    r4.xyz = select(r5.xyz, r1.xyz, -r4.xyz < 0.00000f);\n"
    "    r4.xyz = fmax(r4.xyz, c0.www);\n"
    "    r4.xyz = fmin(r4.xyz, c1.xxx);\n"
    "    r4.xyz = pow(r4.xyz, c1.yyy);\n"
    "    r1.w = c0.y;\n"
    "    r1.xyz = mix(r2.xyz, r4.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r1, r3.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendColorDodgeQT");
}

void sub_1B78C1C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C1C98(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C1C90);
}

void InitBlendLinearDodgeProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendLinearDodge_hgc_visible", "//Metal1.0     \n//LEN=0000000281\n[[ visible ]] FragmentOut BlendLinearDodge_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = r1.xyz + r2.xyz;\n"
    "    r1.xyz = fmin(r1.xyz, c0.xxx);\n"
    "    r1.w = c0.x;\n"
    "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r1, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendLinearDodge");
}

void sub_1B78C1F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C1F70(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C1F68);
}

void InitBlendLinearDodgePOWProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendLinearDodgePOW_hgc_visible", "//Metal1.0     \n//LEN=0000000352\n[[ visible ]] FragmentOut BlendLinearDodgePOW_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
    "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
    "    r3.xyz = r1.xyz + r3.xyz;\n"
    "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[2].xyz);\n"
    "    r3.w = c0.y;\n"
    "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r3, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendLinearDodgePOW");
}

void sub_1B78C2214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C2248(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C2240);
}

void InitBlendLinearDodgeQTProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendLinearDodgeQT_hgc_visible", "//Metal1.0     \n//LEN=00000003ef\n[[ visible ]] FragmentOut BlendLinearDodgeQT_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
    "    const float4 c1 = float4(1.955999970, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
    "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
    "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
    "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
    "    r3.xyz = r1.xyz + r3.xyz;\n"
    "    r3.xyz = fmin(r3.xyz, c0.www);\n"
    "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
    "    r3.xyz = pow(r3.xyz, c1.xxx);\n"
    "    r3.w = c0.w;\n"
    "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r3, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendLinearDodgeQT");
}

void sub_1B78C24EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C2520(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C2518);
}

void InitBlendOverlayProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendOverlay_hgc_visible", "//Metal1.0     \n//LEN=0000000340\n[[ visible ]] FragmentOut BlendOverlay_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(2.000000000, 1.000000000, 0.5000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r0 = r0*hg_Params[0];\n"
    "    r1 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r2.xyz = r1.xyz / fmax(r1.w, 1.00000e-06f);\n"
    "    r3.xyz = r2.xyz*r0.xyz;\n"
    "    r3.xyz = r3.xyz + r3.xyz;\n"
    "    r4.xyz = r2.xyz + r0.xyz;\n"
    "    r4.xyz = r4.xyz*c0.xxx + -r3.xyz;\n"
    "    r4.xyz = r4.xyz - c0.yyy;\n"
    "    r2.xyz = float3(r2.xyz < c0.zzz);\n"
    "    r2.xyz = select(r4.xyz, r3.xyz, -r2.xyz < 0.00000f);\n"
    "    r2.w = c0.y;\n"
    "    r2.xyz = mix(r0.xyz, r2.xyz, r1.www);\n"
    "    output.color0 = mix(r1, r2, r0.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendOverlay");
}

void sub_1B78C27C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C27F8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C27F0);
}

void InitBlendOverlayPOWProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendOverlayPOW_hgc_visible", "//Metal1.0     \n//LEN=0000000470\n[[ visible ]] FragmentOut BlendOverlayPOW_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.5000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
    "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
    "    r4.xyz = r1.xyz + r1.xyz;\n"
    "    r5.xyz = r3.xyz*r4.xyz;\n"
    "    r4.xyz = r4.xyz - c0.yyy;\n"
    "    r6.xyz = r4.xyz*r3.xyz;\n"
    "    r6.xyz = fmin(r6.xyz, r4.xyz);\n"
    "    r6.xyz = fmin(r6.xyz, r3.xyz);\n"
    "    r4.xyz = r4.xyz + r3.xyz;\n"
    "    r6.xyz = r4.xyz - r6.xyz;\n"
    "    r1.xyz = float3(r1.xyz <= c0.zzz);\n"
    "    r1.xyz = select(r6.xyz, r5.xyz, -r1.xyz < 0.00000f);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[2].xyz);\n"
    "    r1.w = c0.y;\n"
    "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r1, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendOverlayPOW");
}

void sub_1B78C2A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C2AD0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C2AC8);
}

void InitBlendOverlayQTProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendOverlayQT_hgc_visible", "//Metal1.0     \n//LEN=0000000530\n[[ visible ]] FragmentOut BlendOverlayQT_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
    "    const float4 c1 = float4(0.5000000000, 1.149999976, 1.955999970, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
    "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
    "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
    "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
    "    r4.xyz = r1.xyz + r1.xyz;\n"
    "    r5.xyz = r3.xyz*r4.xyz;\n"
    "    r4.xyz = r4.xyz - c0.www;\n"
    "    r6.xyz = r4.xyz*r3.xyz;\n"
    "    r6.xyz = fmin(r6.xyz, r4.xyz);\n"
    "    r6.xyz = fmin(r6.xyz, r3.xyz);\n"
    "    r4.xyz = r4.xyz + r3.xyz;\n"
    "    r6.xyz = r4.xyz - r6.xyz;\n"
    "    r1.xyz = float3(r1.xyz <= c1.xxx);\n"
    "    r1.xyz = select(r6.xyz, r5.xyz, -r1.xyz < 0.00000f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c1.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c1.zzz);\n"
    "    r1.w = c0.w;\n"
    "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r1, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendOverlayQT");
}

void sub_1B78C2D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C2DA8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C2DA0);
}

void InitBlendSoftLightProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendSoftLight_hgc_visible", "//Metal1.0     \n//LEN=0000000474\n[[ visible ]] FragmentOut BlendSoftLight_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(16.00000000, -12.00000000, 4.000000000, 0.2500000000);\n"
    "    const float4 c1 = float4(2.000000000, 1.000000000, 0.5000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r2.xyz = r1.xyz*c0.xxx + c0.yyy;\n"
    "    r2.xyz = r1.xyz*r2.xyz + c0.zzz;\n"
    "    r2.xyz = r1.xyz*r2.xyz;\n"
    "    r3.xyz = sqrt(r1.xyz);\n"
    "    r4.xyz = float3(c0.www >= r1.xyz);\n"
    "    r3.xyz = select(r3.xyz, r2.xyz, -r4.xyz < 0.00000f);\n"
    "    r4 = color1;\n"
    "    r4 = r4*hg_Params[0];\n"
    "    r4 = r4 / float4(fmax(r4.www, 1.00000e-06f), 1.);\n"
    "    r2.xyz = -r4.xyz*c1.xxx + c1.yyy;\n"
    "    r3.xyz = mix(r1.xyz, r3.xyz, -r2.xyz);\n"
    "    r2.xyz = r2.xyz*r1.xyz;\n"
    "    r2.xyz = mix(r1.xyz, c1.yyy, -r2.xyz);\n"
    "    r1.xyz = float3(c1.zzz >= r4.xyz);\n"
    "    r1.xyz = select(r3.xyz, r2.xyz, -r1.xyz < 0.00000f);\n"
    "    r1.w = c1.y;\n"
    "    r1.xyz = mix(r4.xyz, r1.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r1, r4.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendSoftLight");
}

void sub_1B78C304C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C3080(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C3078);
}

void InitBlendSoftLightPOWProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendSoftLightPOW_hgc_visible", "//Metal1.0     \n//LEN=000000053f\n[[ visible ]] FragmentOut BlendSoftLightPOW_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 16.00000000, -12.00000000, 4.000000000);\n"
    "    const float4 c1 = float4(0.2500000000, 2.000000000, 1.000000000, 0.5000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
    "    r2.xyz = r1.xyz*c0.yyy + c0.zzz;\n"
    "    r2.xyz = r1.xyz*r2.xyz + c0.www;\n"
    "    r2.xyz = r1.xyz*r2.xyz;\n"
    "    r3.xyz = sqrt(r1.xyz);\n"
    "    r4.xyz = float3(c1.xxx >= r1.xyz);\n"
    "    r3.xyz = select(r3.xyz, r2.xyz, -r4.xyz < 0.00000f);\n"
    "    r4 = color1;\n"
    "    r4 = r4*hg_Params[0];\n"
    "    r2.xyz = r4.xyz / fmax(r4.w, 1.00000e-06f);\n"
    "    r4.xyz = fmax(r2.xyz, c0.xxx);\n"
    "    r4.xyz = pow(r4.xyz, hg_Params[1].xyz);\n"
    "    r5.xyz = -r4.xyz*c1.yyy + c1.zzz;\n"
    "    r3.xyz = mix(r1.xyz, r3.xyz, -r5.xyz);\n"
    "    r5.xyz = r5.xyz*r1.xyz;\n"
    "    r5.xyz = mix(r1.xyz, c1.zzz, -r5.xyz);\n"
    "    r1.xyz = float3(c1.www >= r4.xyz);\n"
    "    r1.xyz = select(r3.xyz, r5.xyz, -r1.xyz < 0.00000f);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[2].xyz);\n"
    "    r1.w = c1.z;\n"
    "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r1, r4.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendSoftLightPOW");
}

void sub_1B78C3324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C3358(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C3350);
}

void InitBlendSoftLightQTProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendSoftLightQT_hgc_visible", "//Metal1.0     \n//LEN=0000000614\n[[ visible ]] FragmentOut BlendSoftLightQT_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 16.00000000);\n"
    "    const float4 c1 = float4(-12.00000000, 4.000000000, 0.2500000000, 2.000000000);\n"
    "    const float4 c2 = float4(1.000000000, 0.5000000000, 1.149999976, 1.955999970);\n"
    "    float4 r0, r1, r2, r3, r4, r5;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2.xyz = r1.xyz*c0.www + c1.xxx;\n"
    "    r2.xyz = r1.xyz*r2.xyz + c1.yyy;\n"
    "    r2.xyz = r1.xyz*r2.xyz;\n"
    "    r3.xyz = sqrt(r1.xyz);\n"
    "    r4.xyz = float3(c1.zzz >= r1.xyz);\n"
    "    r3.xyz = select(r3.xyz, r2.xyz, -r4.xyz < 0.00000f);\n"
    "    r4 = color1;\n"
    "    r4 = r4*hg_Params[0];\n"
    "    r2.xyz = r4.xyz / fmax(r4.w, 1.00000e-06f);\n"
    "    r4.xyz = fmax(r2.xyz, c0.xxx);\n"
    "    r5.xyz = fmin(r4.xyz, c0.yyy);\n"
    "    r5.xyz = pow(r5.xyz, c0.zzz);\n"
    "    r4.xyz = r5.xyz;\n"
    "    r5.xyz = -r4.xyz*c1.www + c2.xxx;\n"
    "    r3.xyz = mix(r1.xyz, r3.xyz, -r5.xyz);\n"
    "    r5.xyz = r5.xyz*r1.xyz;\n"
    "    r5.xyz = mix(r1.xyz, c2.xxx, -r5.xyz);\n"
    "    r1.xyz = float3(c2.yyy >= r4.xyz);\n"
    "    r1.xyz = select(r3.xyz, r5.xyz, -r1.xyz < 0.00000f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c2.zzz);\n"
    "    r1.xyz = pow(r1.xyz, c2.www);\n"
    "    r1.w = c2.x;\n"
    "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r1, r4.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendSoftLightQT");
}

void sub_1B78C35FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C3630(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C3628);
}

void InitBlendHardLightProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendHardLight_hgc_visible", "//Metal1.0     \n//LEN=00000003b2\n[[ visible ]] FragmentOut BlendHardLight_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r0 = r0*hg_Params[0];\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r2 = color0;\n"
    "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
    "    r4.xyz = r1.xyz + r1.xyz;\n"
    "    r5.xyz = r4.xyz - c0.xxx;\n"
    "    r6.xyz = r3.xyz*r5.xyz;\n"
    "    r6.xyz = fmin(r5.xyz, r6.xyz);\n"
    "    r6.xyz = fmin(r3.xyz, r6.xyz);\n"
    "    r5.xyz = r3.xyz + r5.xyz;\n"
    "    r5.xyz = r5.xyz - r6.xyz;\n"
    "    r4.xyz = r4.xyz*r3.xyz + -r5.xyz;\n"
    "    r0.xyz = r0.xyz*c0.yyy;\n"
    "    r6.xyz = float3(r0.xyz >= -r0.www);\n"
    "    r6.xyz = r6.xyz*r4.xyz + r5.xyz;\n"
    "    r6.w = c0.x;\n"
    "    r6.xyz = mix(r1.xyz, r6.xyz, r2.www);\n"
    "    output.color0 = mix(r2, r6, r0.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendHardLight");
}

void sub_1B78C38D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C3908(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C3900);
}

void InitBlendHardLightPOWProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendHardLightPOW_hgc_visible", "//Metal1.0     \n//LEN=0000000472\n[[ visible ]] FragmentOut BlendHardLightPOW_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.5000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
    "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
    "    r4.xyz = r3.xyz + r3.xyz;\n"
    "    r5.xyz = r1.xyz*r4.xyz;\n"
    "    r4.xyz = r4.xyz - c0.yyy;\n"
    "    r6.xyz = r4.xyz*r1.xyz;\n"
    "    r6.xyz = fmin(r6.xyz, r4.xyz);\n"
    "    r6.xyz = fmin(r6.xyz, r1.xyz);\n"
    "    r4.xyz = r4.xyz + r1.xyz;\n"
    "    r6.xyz = r4.xyz - r6.xyz;\n"
    "    r3.xyz = float3(r3.xyz <= c0.zzz);\n"
    "    r3.xyz = select(r6.xyz, r5.xyz, -r3.xyz < 0.00000f);\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[2].xyz);\n"
    "    r3.w = c0.y;\n"
    "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r3, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendHardLightPOW");
}

void sub_1B78C3BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C3BE0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C3BD8);
}

void InitBlendHardLightQTProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendHardLightQT_hgc_visible", "//Metal1.0     \n//LEN=0000000532\n[[ visible ]] FragmentOut BlendHardLightQT_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
    "    const float4 c1 = float4(0.5000000000, 1.149999976, 1.955999970, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
    "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
    "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
    "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
    "    r4.xyz = r3.xyz + r3.xyz;\n"
    "    r5.xyz = r1.xyz*r4.xyz;\n"
    "    r4.xyz = r4.xyz - c0.www;\n"
    "    r6.xyz = r4.xyz*r1.xyz;\n"
    "    r6.xyz = fmin(r6.xyz, r4.xyz);\n"
    "    r6.xyz = fmin(r6.xyz, r1.xyz);\n"
    "    r4.xyz = r4.xyz + r1.xyz;\n"
    "    r6.xyz = r4.xyz - r6.xyz;\n"
    "    r3.xyz = float3(r3.xyz <= c1.xxx);\n"
    "    r3.xyz = select(r6.xyz, r5.xyz, -r3.xyz < 0.00000f);\n"
    "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
    "    r3.xyz = fmin(r3.xyz, c1.yyy);\n"
    "    r3.xyz = pow(r3.xyz, c1.zzz);\n"
    "    r3.w = c0.w;\n"
    "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r3, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendHardLightQT");
}

void sub_1B78C3E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C3EB8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C3EB0);
}

void InitBlendVividLightProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendVividLight_hgc_visible", "//Metal1.0     \n//LEN=000000068f\n[[ visible ]] FragmentOut BlendVividLight_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(65536.00000, 0.5000000000, 1.525878906e-05, 1.000000000);\n"
    "    const float4 c1 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.xyz = fmin(r0.xyz, r0.www);\n"
    "    r1.xyz = clamp(r0.xyz / fmax(r0.w, 1.00000e-06f), 0.00000f, 1.00000f);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r2.xyz = fmin(r2.xyz, r2.www);\n"
    "    r3 = clamp(r2 / float4(fmax(r2.www, 1.00000e-06f), 1.), 0.00000f, 1.00000f);\n"
    "    r1.xyz = r1.xyz*c0.xxx + c0.yyy;\n"
    "    r1.xyz = floor(r1.xyz);\n"
    "    r1.xyz = r1.xyz*c0.zzz;\n"
    "    r4.xyz = r3.xyz*c0.xxx + c0.yyy;\n"
    "    r4.xyz = floor(r4.xyz);\n"
    "    r3.xyz = r4.xyz*c0.zzz;\n"
    "    r4.xyz = c0.www - r1.xyz;\n"
    "    r5.xyz = fmax(r3.xyz, c0.zzz);\n"
    "    r6.xyz = -c0.yyy*r4.xyz + r5.xyz;\n"
    "    r6.xyz = r6.xyz/r5.xyz;\n"
    "    r4.xyz = r4.xyz*c0.yyy;\n"
    "    r5.xyz = float3(-r3.xyz < -r4.xyz);\n"
    "    r6.xyz = r6.xyz*r5.xyz;\n"
    "    r5.xyz = c0.yyy*r2.www;\n"
    "    r5.xyz = float3(r2.xyz < r5.xyz);\n"
    "    r6.xyz = r6.xyz*r5.xyz;\n"
    "    r5.xyz = c0.www - r5.xyz;\n"
    "    r4.xyz = r4.xyz + c0.yyy;\n"
    "    r4.xyz = float3(r3.xyz < r4.xyz);\n"
    "    r4.xyz = fmin(r5.xyz, r4.xyz);\n"
    "    r2.xyz = c0.www - r3.xyz;\n"
    "    r2.xyz = fmax(r2.xyz, c0.zzz);\n"
    "    r2.xyz = r2.xyz + r2.xyz;\n"
    "    r2.xyz = r1.xyz/r2.xyz;\n"
    "    r6.xyz = r2.xyz*r4.xyz + r6.xyz;\n"
    "    r4.xyz = float3(-r4.xyz >= c1.xxx);\n"
    "    r6.xyz = r5.xyz*r4.xyz + r6.xyz;\n"
    "    r6.w = c0.w;\n"
    "    r6.xyz = mix(r3.xyz, r6.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r6, r3.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendVividLight");
}

void sub_1B78C415C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C4190(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C4188);
}

void InitBlendVividLightPOWProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendVividLightPOW_hgc_visible", "//Metal1.0     \n//LEN=00000006fb\n[[ visible ]] FragmentOut BlendVividLightPOW_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, -0.5000000000, 1.525878906e-05, -2.000000000);\n"
    "    const float4 c1 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = clamp(r0.xyz / fmax(r0.w, 1.00000e-06f), 0.00000f, 1.00000f);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
    "    r4.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    r4.xyz = pow(r4.xyz, hg_Params[1].xyz);\n"
    "    r5.xyz = c0.xxx - r1.xyz;\n"
    "    r5.xyz = c0.yyy*r5.xyz + r4.xyz;\n"
    "    r6.xyz = fmax(r4.xyz, c0.zzz);\n"
    "    r6.xyz = r5.xyz/r6.xyz;\n"
    "    r7.xyz = c0.yyy*r1.xyz + c0.xxx;\n"
    "    r7.xyz = r4.xyz - r7.xyz;\n"
    "    r8.xyz = c0.www*r4.xyz + -c0.www;\n"
    "    r9.xyz = fmax(r8.xyz, c0.zzz);\n"
    "    r9.xyz = r1.xyz/r9.xyz;\n"
    "    r1.xyz = float3(r4.xyz < -c0.yyy);\n"
    "    r5.xyz = float3(r5.xyz > c1.xxx);\n"
    "    r10.xyz = float3(r7.xyz < c1.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, r5.xyz);\n"
    "    r1.xyz = r1.xyz*r6.xyz;\n"
    "    r4.xyz = float3(r4.xyz >= -c0.yyy);\n"
    "    r4.xyz = fmin(r4.xyz, r10.xyz);\n"
    "    r1.xyz = select(r1.xyz, r9.xyz, -r4.xyz < 0.00000f);\n"
    "    r1.xyz = select(-c0.www, r1.xyz, r7.xyz < 0.00000f);\n"
    "    r8.xyz = float3(r8.xyz <= c0.zzz);\n"
    "    r1.xyz = select(r1.xyz, c0.xxx, -r8.xyz < 0.00000f);\n"
    "    r5.xyz = float3(r5.xyz <= c0.zzz);\n"
    "    r1.xyz = clamp(select(r1.xyz, c1.xxx, -r5.xyz < 0.00000f), 0.00000f, 1.00000f);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[2].xyz);\n"
    "    r1.w = c0.x;\n"
    "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r1, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendVividLightPOW");
}

void sub_1B78C4434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C4468(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C4460);
}

void InitBlendVividLightQTProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendVividLightQT_hgc_visible", "//Metal1.0     \n//LEN=00000006dd\n[[ visible ]] FragmentOut BlendVividLightQT_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.5109999776, 1.000000000, -0.5000000000, 1.525878906e-05);\n"
    "    const float4 c1 = float4(-2.000000000, 0.000000000, 1.955999970, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = clamp(r0.xyz / fmax(r0.w, 1.00000e-06f), 0.00000f, 1.00000f);\n"
    "    r1.xyz = pow(r1.xyz, c0.xxx);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
    "    r4.xyz = clamp(r3.xyz, 0.00000f, 1.00000f);\n"
    "    r4.xyz = pow(r4.xyz, c0.xxx);\n"
    "    r5.xyz = c0.yyy - r1.xyz;\n"
    "    r5.xyz = c0.zzz*r5.xyz + r4.xyz;\n"
    "    r6.xyz = fmax(r4.xyz, c0.www);\n"
    "    r6.xyz = r5.xyz/r6.xyz;\n"
    "    r7.xyz = c0.zzz*r1.xyz + c0.yyy;\n"
    "    r7.xyz = r4.xyz - r7.xyz;\n"
    "    r8.xyz = c1.xxx*r4.xyz + -c1.xxx;\n"
    "    r9.xyz = fmax(r8.xyz, c0.www);\n"
    "    r9.xyz = r1.xyz/r9.xyz;\n"
    "    r1.xyz = float3(r4.xyz < -c0.zzz);\n"
    "    r5.xyz = float3(r5.xyz > c1.yyy);\n"
    "    r10.xyz = float3(r7.xyz < c1.yyy);\n"
    "    r1.xyz = fmin(r1.xyz, r5.xyz);\n"
    "    r1.xyz = r1.xyz*r6.xyz;\n"
    "    r4.xyz = float3(r4.xyz >= -c0.zzz);\n"
    "    r4.xyz = fmin(r4.xyz, r10.xyz);\n"
    "    r1.xyz = select(r1.xyz, r9.xyz, -r4.xyz < 0.00000f);\n"
    "    r1.xyz = select(-c1.xxx, r1.xyz, r7.xyz < 0.00000f);\n"
    "    r8.xyz = float3(r8.xyz <= c0.www);\n"
    "    r1.xyz = select(r1.xyz, c0.yyy, -r8.xyz < 0.00000f);\n"
    "    r5.xyz = float3(r5.xyz <= c0.www);\n"
    "    r1.xyz = clamp(select(r1.xyz, c1.yyy, -r5.xyz < 0.00000f), 0.00000f, 1.00000f);\n"
    "    r1.xyz = pow(r1.xyz, c1.zzz);\n"
    "    r1.w = c0.y;\n"
    "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r1, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendVividLightQT");
}

void sub_1B78C470C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C4740(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C4738);
}

void InitBlendLinearLightProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendLinearLight_hgc_visible", "//Metal1.0     \n//LEN=00000002a3\n[[ visible ]] FragmentOut BlendLinearLight_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(-2.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
    "    r3.xyz = c0.xxx*r2.xyz + c0.yyy;\n"
    "    r1.xyz = clamp(r1.xyz - r3.xyz, 0.00000f, 1.00000f);\n"
    "    r1.w = c0.y;\n"
    "    r1.xyz = mix(r2.xyz, r1.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r1, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendLinearLight");
}

void sub_1B78C49E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C4A18(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C4A10);
}

void InitBlendLinearLightPOWProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendLinearLightPOW_hgc_visible", "//Metal1.0     \n//LEN=0000000370\n[[ visible ]] FragmentOut BlendLinearLightPOW_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, -2.000000000, 1.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
    "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
    "    r3.xyz = c0.yyy*r3.xyz + c0.zzz;\n"
    "    r3.xyz = clamp(r1.xyz - r3.xyz, 0.00000f, 1.00000f);\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[2].xyz);\n"
    "    r3.w = c0.z;\n"
    "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r3, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendLinearLightPOW");
}

void sub_1B78C4CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C4CF0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C4CE8);
}

void InitBlendLinearLightQTProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendLinearLightQT_hgc_visible", "//Metal1.0     \n//LEN=00000003ea\n[[ visible ]] FragmentOut BlendLinearLightQT_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, -2.000000000);\n"
    "    const float4 c1 = float4(1.000000000, 1.955999970, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
    "    r3.xyz = fmax(r2.xyz, c0.xxx);\n"
    "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
    "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
    "    r3.xyz = c0.www*r3.xyz + c1.xxx;\n"
    "    r3.xyz = clamp(r1.xyz - r3.xyz, 0.00000f, 1.00000f);\n"
    "    r3.xyz = pow(r3.xyz, c1.yyy);\n"
    "    r3.w = c1.x;\n"
    "    r3.xyz = mix(r2.xyz, r3.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r3, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendLinearLightQT");
}

void sub_1B78C4F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C4FC8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C4FC0);
}

void InitBlendPinLightProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendPinLight_hgc_visible", "//Metal1.0     \n//LEN=0000000382\n[[ visible ]] FragmentOut BlendPinLight_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r0 = r0*hg_Params[0];\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1 = color0;\n"
    "    r2.xyz = r1.xyz / fmax(r1.w, 1.00000e-06f);\n"
    "    r3.xyz = r0.xyz + r0.xyz;\n"
    "    r4.xyz = float3(r3.xyz < r2.xyz);\n"
    "    r5.xyz = r3.xyz*r4.xyz;\n"
    "    r3.xyz = r3.xyz - c0.xxx;\n"
    "    r6.xyz = float3(r3.xyz >= r2.xyz);\n"
    "    r5.xyz = r3.xyz*r6.xyz + r5.xyz;\n"
    "    r4.xyz = r4.xyz + r6.xyz;\n"
    "    r4.xyz = float3(-r4.xyz >= c0.yyy);\n"
    "    r5.xyz = r2.xyz*r4.xyz + r5.xyz;\n"
    "    r5.w = c0.x;\n"
    "    r5.xyz = mix(r0.xyz, r5.xyz, r1.www);\n"
    "    output.color0 = mix(r1, r5, r0.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendPinLight");
}

void sub_1B78C526C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C52A0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C5298);
}

void InitBlendPinLightPOWProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendPinLightPOW_hgc_visible", "//Metal1.0     \n//LEN=000000044f\n[[ visible ]] FragmentOut BlendPinLightPOW_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r0 = r0*hg_Params[0];\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
    "    r2 = color0;\n"
    "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
    "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
    "    r1.xyz = r1.xyz + r1.xyz;\n"
    "    r4.xyz = float3(r1.xyz < r3.xyz);\n"
    "    r5.xyz = r1.xyz*r4.xyz;\n"
    "    r1.xyz = r1.xyz - c0.yyy;\n"
    "    r6.xyz = float3(r1.xyz >= r3.xyz);\n"
    "    r5.xyz = r1.xyz*r6.xyz + r5.xyz;\n"
    "    r4.xyz = r4.xyz + r6.xyz;\n"
    "    r4.xyz = float3(-r4.xyz >= c0.xxx);\n"
    "    r5.xyz = r3.xyz*r4.xyz + r5.xyz;\n"
    "    r5.xyz = pow(r5.xyz, hg_Params[2].xyz);\n"
    "    r5.w = c0.y;\n"
    "    r5.xyz = mix(r0.xyz, r5.xyz, r2.www);\n"
    "    output.color0 = mix(r2, r5, r0.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendPinLightPOW");
}

void sub_1B78C5544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C5578(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C5570);
}

void InitBlendPinLightQTProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendPinLightQT_hgc_visible", "//Metal1.0     \n//LEN=000000050f\n[[ visible ]] FragmentOut BlendPinLightQT_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.000000000);\n"
    "    const float4 c1 = float4(1.149999976, 1.955999970, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r0 = r0*hg_Params[0];\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xyz = fmax(r0.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2 = color0;\n"
    "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
    "    r3.xyz = fmax(r3.xyz, c0.xxx);\n"
    "    r3.xyz = fmin(r3.xyz, c0.yyy);\n"
    "    r3.xyz = pow(r3.xyz, c0.zzz);\n"
    "    r1.xyz = r1.xyz + r1.xyz;\n"
    "    r4.xyz = float3(r1.xyz < r3.xyz);\n"
    "    r5.xyz = r1.xyz*r4.xyz;\n"
    "    r1.xyz = r1.xyz - c0.www;\n"
    "    r6.xyz = float3(r1.xyz >= r3.xyz);\n"
    "    r5.xyz = r1.xyz*r6.xyz + r5.xyz;\n"
    "    r4.xyz = r4.xyz + r6.xyz;\n"
    "    r4.xyz = float3(-r4.xyz >= c0.xxx);\n"
    "    r5.xyz = r3.xyz*r4.xyz + r5.xyz;\n"
    "    r5.xyz = fmax(r5.xyz, c0.xxx);\n"
    "    r5.xyz = fmin(r5.xyz, c1.xxx);\n"
    "    r5.xyz = pow(r5.xyz, c1.yyy);\n"
    "    r5.w = c0.w;\n"
    "    r5.xyz = mix(r0.xyz, r5.xyz, r2.www);\n"
    "    output.color0 = mix(r2, r5, r0.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendPinLightQT");
}

void sub_1B78C581C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C5850(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C5848);
}

void InitBlendHardMixProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendHardMix_hgc_visible", "//Metal1.0     \n//LEN=000000071a\n[[ visible ]] FragmentOut BlendHardMix_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 65535.00000, 1.525902189e-05, 0.003921568859);\n"
    "    const float4 c1 = float4(-0.7500000000, 3.039975672e-05, 1.003921628, 32895.00000);\n"
    "    const float4 c2 = float4(0.007751937956, 254.9999847, 0.000000000, 0.9960784316);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r2 = r2 / float4(fmax(r2.www, 1.00000e-06f), 1.);\n"
    "    r3.xyz = c0.xxx - r1.xyz;\n"
    "    r3.xyz = r3.xyz*c0.yyy;\n"
    "    r3.xyz = floor(r3.xyz);\n"
    "    r3.xyz = r3.xyz*c0.zzz;\n"
    "    r4.xyz = -r1.xyz*c0.www + r3.xyz;\n"
    "    r4.xyz = c1.xxx*c1.yyy + r4.xyz;\n"
    "    r5.xyz = float3(r2.xyz >= r4.xyz);\n"
    "    r3.xyz = r3.xyz*c1.zzz;\n"
    "    r6.xyz = float3(r2.xyz < r3.xyz);\n"
    "    r4.xyz = r2.xyz - r4.xyz;\n"
    "    r4.xyz = r4.xyz*c1.www;\n"
    "    r4.xyz = floor(r4.xyz);\n"
    "    r4.xyz = c2.xxx*r4.xyz;\n"
    "    r6.xyz = fmin(r5.xyz, r6.xyz);\n"
    "    r4.xyz = r4.xyz*r6.xyz;\n"
    "    r6.xyz = float3(r2.xyz >= r3.xyz);\n"
    "    r6.xyz = r6.xyz + r4.xyz;\n"
    "    r3.xyz = fmin(r3.xyz, c0.xxx);\n"
    "    r4.xyz = float3(r1.xyz < c0.www);\n"
    "    r4.xyz = fmin(r4.xyz, r5.xyz);\n"
    "    r5.xyz = r1.xyz*c2.yyy;\n"
    "    r5.xyz = r5.xyz*r4.xyz;\n"
    "    r5.xyz = fmin(r5.xyz, r6.xyz);\n"
    "    r4.xyz = float3(-r4.xyz >= c2.zzz);\n"
    "    r6.xyz = r6.xyz*r4.xyz + r5.xyz;\n"
    "    r4.xyz = float3(r1.xyz >= c2.www);\n"
    "    r3.xyz = float3(r2.xyz < r3.xyz);\n"
    "    r4.xyz = fmin(r4.xyz, r3.xyz);\n"
    "    r1.xyz = r1.xyz - c2.www;\n"
    "    r1.xyz = r1.xyz*c2.yyy;\n"
    "    r1.xyz = r1.xyz*r4.xyz;\n"
    "    r6.xyz = fmax(r1.xyz, r6.xyz);\n"
    "    r6.w = c0.x;\n"
    "    r6.xyz = mix(r2.xyz, r6.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r6, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendHardMix");
}

void sub_1B78C5AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C5B28(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C5B20);
}

void InitBlendHardMixPOWProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendHardMixPOW_hgc_visible", "//Metal1.0     \n//LEN=00000003d7\n[[ visible ]] FragmentOut BlendHardMixPOW_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r0 = r0*hg_Params[0];\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r0.xyz = clamp(r1.xyz, 0.00000f, 1.00000f);\n"
    "    r0.xyz = pow(r0.xyz, hg_Params[1].xyz);\n"
    "    r2 = color0;\n"
    "    r3.xyz = clamp(r2.xyz / fmax(r2.w, 1.00000e-06f), 0.00000f, 1.00000f);\n"
    "    r3.xyz = pow(r3.xyz, hg_Params[1].xyz);\n"
    "    r4.xyz = c0.xxx - r3.xyz;\n"
    "    r4.xyz = float3(r4.xyz <= r0.xyz);\n"
    "    r3.xyz = float3(r3.xyz <= c0.yyy);\n"
    "    r5.xyz = float3(r0.xyz >= c0.xxx);\n"
    "    r3.xyz = fmin(r3.xyz, r5.xyz);\n"
    "    r3.xyz = select(r4.xyz, c0.yyy, -r3.xyz < 0.00000f);\n"
    "    r3.w = c0.x;\n"
    "    r3.xyz = mix(r1.xyz, r3.xyz, r2.www);\n"
    "    output.color0 = mix(r2, r3, r0.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendHardMixPOW");
}

void sub_1B78C5DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C5E00(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C5DF8);
}

void InitBlendHardMixQTProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendHardMixQT_hgc_visible", "//Metal1.0     \n//LEN=00000003ed\n[[ visible ]] FragmentOut BlendHardMixQT_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.5109999776, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r0 = r0*hg_Params[0];\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r0.xyz = clamp(r1.xyz, 0.00000f, 1.00000f);\n"
    "    r2.xyz = r0.xyz;\n"
    "    r2.xyz = pow(r2.xyz, c0.xxx);\n"
    "    r0.xyz = r2.xyz;\n"
    "    r2 = color0;\n"
    "    r3.xyz = clamp(r2.xyz / fmax(r2.w, 1.00000e-06f), 0.00000f, 1.00000f);\n"
    "    r3.xyz = pow(r3.xyz, c0.xxx);\n"
    "    r4.xyz = c0.yyy - r3.xyz;\n"
    "    r4.xyz = float3(r4.xyz <= r0.xyz);\n"
    "    r3.xyz = float3(r3.xyz <= c0.zzz);\n"
    "    r5.xyz = float3(r0.xyz >= c0.yyy);\n"
    "    r3.xyz = fmin(r3.xyz, r5.xyz);\n"
    "    r3.xyz = select(r4.xyz, c0.zzz, -r3.xyz < 0.00000f);\n"
    "    r3.w = c0.y;\n"
    "    r3.xyz = mix(r1.xyz, r3.xyz, r2.www);\n"
    "    output.color0 = mix(r2, r3, r0.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendHardMixQT");
}

void sub_1B78C60A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C60D8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C60D0);
}

void InitBlendDifferenceProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendDifference_hgc_visible", "//Metal1.0     \n//LEN=00000001c7\n[[ visible ]] FragmentOut BlendDifference_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1 = r1*hg_Params[0];\n"
    "    r2 = r1*r0.wwww;\n"
    "    r3 = r0*r1.wwww;\n"
    "    r1 = r1 + r0;\n"
    "    r0 = r2 - r3;\n"
    "    r1 = r1 - r2;\n"
    "    r1.xyz = r1.xyz - r3.xyz;\n"
    "    output.color0 = r1 + fabs(r0);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendDifference");
}

void sub_1B78C637C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C63B0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C63A8);
}

void InitBlendDifferencePOWProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendDifferencePOW_hgc_visible", "//Metal1.0     \n//LEN=0000000332\n[[ visible ]] FragmentOut BlendDifferencePOW_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
    "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
    "    r4.xyz = pow(r4.xyz, hg_Params[1].xyz);\n"
    "    r1.xyz = r1.xyz - r4.xyz;\n"
    "    r1.xyz = pow(fabs(r1.xyz), hg_Params[2].xyz);\n"
    "    r1.w = c0.y;\n"
    "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r1, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendDifferencePOW");
}

void sub_1B78C6654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C6688(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C6680);
}

void InitBlendDifferenceQTProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendDifferenceQT_hgc_visible", "//Metal1.0     \n//LEN=00000003cf\n[[ visible ]] FragmentOut BlendDifferenceQT_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, 1.149999976);\n"
    "    const float4 c1 = float4(1.955999970, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
    "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
    "    r4.xyz = fmin(r4.xyz, c0.yyy);\n"
    "    r4.xyz = pow(r4.xyz, c0.zzz);\n"
    "    r1.xyz = r1.xyz - r4.xyz;\n"
    "    r1.xyz = fmin(fabs(r1.xyz), c0.www);\n"
    "    r1.xyz = pow(r1.xyz, c1.xxx);\n"
    "    r1.w = c1.y;\n"
    "    r1.xyz = mix(r3.xyz, r1.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r1, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendDifferenceQT");
}

void sub_1B78C692C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C6960(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C6958);
}

void InitBlendExclusionProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendExclusion_hgc_visible", "//Metal1.0     \n//LEN=0000000241\n[[ visible ]] FragmentOut BlendExclusion_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(-2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1 = r1*hg_Params[0];\n"
    "    r2 = r1*r0.wwww;\n"
    "    r3 = r0*r1.wwww;\n"
    "    r4 = r0*r1;\n"
    "    r4 = c0.xxxx*r4 + r2;\n"
    "    r4 = r4 + r3;\n"
    "    r1 = r1 + r0;\n"
    "    r1 = r1 - r2;\n"
    "    r1.xyz = r1.xyz - r3.xyz;\n"
    "    output.color0 = r1 + r4;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendExclusion");
}

void sub_1B78C6C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C6C38(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C6C30);
}

void InitBlendExclusionPOWProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendExclusionPOW_hgc_visible", "//Metal1.0     \n//LEN=0000000371\n[[ visible ]] FragmentOut BlendExclusionPOW_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, -2.000000000, 1.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = pow(r1.xyz, hg_Params[1].xyz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
    "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
    "    r4.xyz = pow(r4.xyz, hg_Params[1].xyz);\n"
    "    r5.xyz = r1.xyz + r4.xyz;\n"
    "    r4.xyz = r1.xyz*r4.xyz;\n"
    "    r4.xyz = c0.yyy*r4.xyz + r5.xyz;\n"
    "    r4.xyz = pow(r4.xyz, hg_Params[2].xyz);\n"
    "    r4.w = c0.z;\n"
    "    r4.xyz = mix(r3.xyz, r4.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r4, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendExclusionPOW");
}

void sub_1B78C6EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C6F10(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C6F08);
}

void InitBlendExclusionQTProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendExclusionQT_hgc_visible", "//Metal1.0     \n//LEN=0000000431\n[[ visible ]] FragmentOut BlendExclusionQT_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 1.330000043, 0.5109999776, -2.000000000);\n"
    "    const float4 c1 = float4(1.149999976, 1.955999970, 1.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.xyz = fmin(r1.xyz, c0.yyy);\n"
    "    r1.xyz = pow(r1.xyz, c0.zzz);\n"
    "    r2 = color1;\n"
    "    r2 = r2*hg_Params[0];\n"
    "    r3.xyz = r2.xyz / fmax(r2.w, 1.00000e-06f);\n"
    "    r4.xyz = fmax(r3.xyz, c0.xxx);\n"
    "    r4.xyz = fmin(r4.xyz, c0.yyy);\n"
    "    r4.xyz = pow(r4.xyz, c0.zzz);\n"
    "    r5.xyz = r1.xyz + r4.xyz;\n"
    "    r4.xyz = r1.xyz*r4.xyz;\n"
    "    r4.xyz = c0.www*r4.xyz + r5.xyz;\n"
    "    r4.xyz = fmax(r4.xyz, c0.xxx);\n"
    "    r4.xyz = fmin(r4.xyz, c1.xxx);\n"
    "    r4.xyz = pow(r4.xyz, c1.yyy);\n"
    "    r4.w = c1.z;\n"
    "    r4.xyz = mix(r3.xyz, r4.xyz, r0.www);\n"
    "    output.color0 = mix(r0, r4, r2.wwww);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendExclusionQT");
}

void sub_1B78C71B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C71E8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C71E0);
}

void InitBlendStencilAlphaProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendStencilAlpha_hgc_visible", "//Metal1.0     \n//LEN=000000014a\n[[ visible ]] FragmentOut BlendStencilAlpha_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = color1.w;\n"
    "    r1 = color0;\n"
    "    r0.x = r0.w*hg_Params[0].w;\n"
    "    output.color0 = r0.xxxx*r1;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendStencilAlpha");
}

void sub_1B78C748C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C74C0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C74B8);
}

void InitBlendStencilLumaProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendStencilLuma_hgc_visible", "//Metal1.0     \n//LEN=00000001c8\n[[ visible ]] FragmentOut BlendStencilLuma_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.3000000119, 0.5899999738, 0.1099999994, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = color1.xyz;\n"
    "    r0.xyz = r0.xyz*hg_Params[0].xyz;\n"
    "    r1 = color0;\n"
    "    r0.x = dot(r0.xyz, c0.xyz);\n"
    "    output.color0 = r0.xxxx*r1;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendStencilLuma");
}

void sub_1B78C7764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C7798(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C7790);
}

void InitBlendSilhouetteAlphaProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendSilhouetteAlpha_hgc_visible", "//Metal1.0     \n//LEN=0000000153\n[[ visible ]] FragmentOut BlendSilhouetteAlpha_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = color1.w;\n"
    "    r0.x = -r0.w*hg_Params[0].w;\n"
    "    r1 = color0;\n"
    "    output.color0 = r0.xxxx*r1 + r1;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendSilhouetteAlpha");
}

void sub_1B78C7A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C7A70(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C7A68);
}

void InitBlendSilhouetteLumaProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendSilhouetteLuma_hgc_visible", "//Metal1.0     \n//LEN=0000000226\n[[ visible ]] FragmentOut BlendSilhouetteLuma_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.3000000119, 0.5899999738, 0.1099999994, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r0.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r0.xyz = r0.xyz*hg_Params[0].xyz;\n"
    "    r0.x = clamp(dot(r0.xyz, c0.xyz), 0.00000f, 1.00000f);\n"
    "    r1 = color0;\n"
    "    r0.x = c0.w - r0.x;\n"
    "    output.color0 = r0.xxxx*r1;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendSilhouetteLuma");
}

void sub_1B78C7D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C7D48(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C7D40);
}

void InitBlendBehindProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendBehind_hgc_visible", "//Metal1.0     \n//LEN=00000001ac\n[[ visible ]] FragmentOut BlendBehind_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1 = r1*hg_Params[0];\n"
    "    r2 = c0.xxxx - r0.wwww;\n"
    "    output.color0 = r1*r2 + r0;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendBehind");
}

void sub_1B78C7FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C8020(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C8018);
}

void InitBlendAlphaAddProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendAlphaAdd_hgc_visible", "//Metal1.0     \n//LEN=000000024b\n[[ visible ]] FragmentOut BlendAlphaAdd_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1 = r1*hg_Params[0];\n"
    "    r2.x = c0.x - r1.w;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r2.x = fmin(r0.w, r2.x);\n"
    "    output.color0.xyz = r2.xxx*r0.xyz + r1.xyz;\n"
    "    output.color0.w = clamp(r0.w + r1.w, 0.00000f, 1.00000f);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendAlphaAdd");
}

void sub_1B78C82C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C82F8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C82F0);
}

void InitBlendLuminescentPremulProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendLuminescentPremul_hgc_visible", "//Metal1.0     \n//LEN=00000001ee\n[[ visible ]] FragmentOut BlendLuminescentPremul_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r0 = r0*hg_Params[0];\n"
    "    r1 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r0.x = c0.x - r0.w;\n"
    "    r2 = color0;\n"
    "    output.color0 = r0.xxxx*r2 + r1;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendLuminescentPremul");
}

void sub_1B78C859C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C85D0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C85C8);
}

void InitBlendMinStraightProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendMinStraight_hgc_visible", "//Metal1.0     \n//LEN=0000000127\n[[ visible ]] FragmentOut BlendMinStraight_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r1 = color0;\n"
    "    output.color0 = fmin(r1, r0);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendMinStraight");
}

void sub_1B78C8874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C88A8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C88A0);
}

void InitBlendMaxStraightProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendMaxStraight_hgc_visible", "//Metal1.0     \n//LEN=0000000127\n[[ visible ]] FragmentOut BlendMaxStraight_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r1 = color0;\n"
    "    output.color0 = fmax(r1, r0);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendMaxStraight");
}

void sub_1B78C8B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C8B80(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C8B78);
}

void InitBlendSubtractStraightProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendSubtractStraight_hgc_visible", "//Metal1.0     \n//LEN=0000000142\n[[ visible ]] FragmentOut BlendSubtractStraight_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r1 = color0;\n"
    "    output.color0 = clamp(r1 - r0, 0.00000f, 1.00000f);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendSubtractStraight");
}

void sub_1B78C8E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C8E58(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C8E50);
}

void InitBlendReplaceProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "BlendReplace_hgc_visible", "//Metal1.0     \n//LEN=0000000114\n[[ visible ]] FragmentOut BlendReplace_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 color1)\n{\n    FragmentOut output;\n"
    "\n"
    "    output.color0 = color1;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "BlendReplace");
}

void sub_1B78C9194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78C91CC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78C91C4);
}

void HGLightWrap::HGLightWrap(HGLightWrap *this)
{
  HGNode::HGNode((HGNode *)this);
  *(void *)uint64_t v1 = &unk_1F10E4820;
  *(void *)(v1 + 416) = 0;
  *(void *)(v1 + 424) = 0;
  *(void *)(v1 + 408) = 0;
  *(_DWORD *)(v1 + 432) = 1065353216;
  *(_DWORD *)(v1 + 16) |= 0x600u;
}

void HGLightWrap::~HGLightWrap(HGNode *this)
{
  *(void *)this = &unk_1F10E4820;
  int v3 = (char *)this + 408;
  uint64_t v2 = (void *)*((void *)this + 51);
  unint64_t v4 = *((void *)v3 + 1) - (void)v2;
  if ((int)(v4 >> 3) >= 1)
  {
    unint64_t v5 = (v4 >> 3) + 1;
    do
    {
      uint64_t v6 = *(void *)(*((void *)this + 51) + 8 * (v5 - 2));
      if (v6) {
        MEMORY[0x1BA9BFBA0](v6, 0x1000C40EED21634);
      }
      --v5;
    }
    while (v5 > 1);
    uint64_t v2 = (void *)*((void *)this + 51);
  }
  if (v2)
  {
    *((void *)this + 52) = v2;
    operator delete(v2);
  }

  HGNode::~HGNode(this);
}

{
  void *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F10E4820;
  int v3 = (char *)this + 408;
  uint64_t v2 = (void *)*((void *)this + 51);
  unint64_t v4 = *((void *)v3 + 1) - (void)v2;
  if ((int)(v4 >> 3) >= 1)
  {
    unint64_t v5 = (v4 >> 3) + 1;
    do
    {
      uint64_t v6 = *(void *)(*((void *)this + 51) + 8 * (v5 - 2));
      if (v6) {
        MEMORY[0x1BA9BFBA0](v6, 0x1000C40EED21634);
      }
      --v5;
    }
    while (v5 > 1);
    uint64_t v2 = (void *)*((void *)this + 51);
  }
  if (v2)
  {
    *((void *)this + 52) = v2;
    operator delete(v2);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v7);
}

uint64_t HGLightWrap::SetState(HGLightWrap *this, HGRenderer *a2, int a3)
{
  if (a3 == 1)
  {
    if ((*(unsigned int (**)(HGRenderer *))(*(void *)a2 + 304))(a2))
    {
      if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 5) <= (unint64_t)((uint64_t)(*((void *)this + 52) - *((void *)this + 51)) >> 3)) {
        goto LABEL_7;
      }
    }
    else if ((uint64_t)(*((void *)this + 52) - *((void *)this + 51)) >> 3)
    {
      goto LABEL_7;
    }
    __asm { FMOV            V0.4S, #1.0 }
    operator new();
  }
LABEL_7:

  return HGNode::SetState((uint64_t)this, (uint64_t)a2, a3);
}

uint64_t HGLightWrap::GetDOD(HGLightWrap *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3 >= 4) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HGLightWrap::GetROI(HGLightWrap *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3 <= 3) {
    return *(void *)&a4.var0;
  }
  else {
    return 0;
  }
}

HGLightWrap *HGLightWrap::GetOutput(HGLightWrap *this, HGRenderer *a2)
{
  return this;
}

uint64_t HGLightWrap::SetParameter(HGLightWrap *this, int a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  *((float *)this + 108) = a3;
  return HGNode::SetParameter((HGNode *)this, 0, a3, a3, a3, a3, a7);
}

uint64_t HGLightWrap::Bind(HGLightWrap *this, HGHandler *a2)
{
  return 0;
}

float32x4_t HGLightWrap::UpdateLocalParameters(HGLightWrap *this, int a2)
{
  uint64_t v2 = (const float *)((char *)this + 432);
  float32x4_t result = vld1q_dup_f32(v2);
  *(float32x4_t *)*(void *)(*((void *)this + 51) + 8 * a2) = result;
  return result;
}

uint64_t HGLightWrap::RenderTile(HGLightWrap *this, HGTile *a2)
{
  unsigned int v4 = *(_DWORD *)(*((void *)a2 + 42) + 160);
  (*(void (**)(HGLightWrap *, void))(*(void *)this + 576))(this, v4);
  unint64_t v5 = (int32x4_t *)*((void *)a2 + 10);
  if (v5
    && (uint64_t v6 = (float32x4_t *)*((void *)a2 + 12)) != 0
    && (uint64_t v7 = (float32x4_t *)*((void *)a2 + 14)) != 0
    && *((float *)this + 108) > 0.0)
  {
    int v8 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
    if (v8 >= 1)
    {
      int v9 = *(float32x4_t **)(*((void *)this + 51) + 8 * (int)v4);
      unint64_t v10 = (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
      uint64_t v11 = (float32x4_t *)*((void *)a2 + 2);
      uint64_t v12 = *((int *)a2 + 6);
      uint64_t v13 = *((int *)a2 + 30);
      uint64_t v14 = *((int *)a2 + 26);
      uint64_t v15 = *((int *)a2 + 22);
      if ((int)v10 < 4)
      {
        if ((int)v10 >= 1)
        {
          int v64 = 0;
          uint64_t v65 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
          uint64_t v66 = 16 * v13;
          uint64_t v67 = 16 * v14;
          uint64_t v68 = 16 * v15;
          do
          {
            unint64_t v69 = 0;
            do
            {
              v11[v69 / 0x10] = vmulq_f32(*v9, vmulq_f32(v6[v69 / 0x10], vmulq_laneq_f32(vminq_f32(vmaxq_f32(vsubq_f32(v9[1], (float32x4_t)vdupq_laneq_s32(v5[v69 / 0x10], 3)), v9[2]), v9[1]), v7[v69 / 0x10], 3)));
              v69 += 16;
            }
            while (v65 != v69);
            ++v64;
            v11 += v12;
            uint64_t v7 = (float32x4_t *)((char *)v7 + v66);
            uint64_t v6 = (float32x4_t *)((char *)v6 + v67);
            unint64_t v5 = (int32x4_t *)((char *)v5 + v68);
          }
          while (v64 != v8);
        }
      }
      else
      {
        int v16 = 0;
        uint64_t v17 = 16 * v15;
        uint64_t v18 = 16 * v13;
        uint64_t v19 = 16 * v14;
        long long v20 = v11 + 4;
        uint64_t v21 = 16 * v12;
        long long v22 = v7 + 4;
        float32x4_t v23 = v6 + 4;
        long long v24 = v5 + 4;
        do
        {
          unint64_t v25 = 0;
          unint64_t v26 = 0;
          uint64_t v27 = v24;
          uint64_t v28 = v23;
          uint64_t v29 = v22;
          float32x4_t v30 = v20;
          do
          {
            float32x4_t v31 = v30;
            float32x4_t v32 = v29;
            float32x4_t v33 = v28;
            float32x4_t v34 = v27;
            float32x4_t v35 = v9[1];
            float32x4_t v36 = v9[2];
            float32x4_t v37 = vmulq_f32(vmulq_f32(v6[v25 + 1], vmulq_laneq_f32(vminq_f32(vmaxq_f32(vsubq_f32(v35, (float32x4_t)vdupq_laneq_s32(v5[v25 + 1], 3)), v36), v35), v7[v25 + 1], 3)), *v9);
            float32x4_t v38 = vmulq_f32(vmulq_f32(v6[v25 + 2], vmulq_laneq_f32(vminq_f32(vmaxq_f32(vsubq_f32(v35, (float32x4_t)vdupq_laneq_s32(v5[v25 + 2], 3)), v36), v35), v7[v25 + 2], 3)), *v9);
            float32x4_t v39 = vmulq_f32(*v9, vmulq_f32(v6[v25 + 3], vmulq_laneq_f32(vminq_f32(vmaxq_f32(vsubq_f32(v35, (float32x4_t)vdupq_laneq_s32(v5[v25 + 3], 3)), v36), v35), v7[v25 + 3], 3)));
            unint64_t v40 = &v11[v25];
            *unint64_t v40 = vmulq_f32(vmulq_f32(v6[v25], vmulq_laneq_f32(vminq_f32(vmaxq_f32(vsubq_f32(v35, (float32x4_t)vdupq_laneq_s32(v5[v25], 3)), v36), v35), v7[v25], 3)), *v9);
            v40[1] = v37;
            v26 += 4;
            v25 += 4;
            v30 += 4;
            v40[2] = v38;
            v40[3] = v39;
            v29 += 4;
            v28 += 4;
            uint64_t v27 = v34 + 4;
          }
          while ((uint64_t)v26 < (uint64_t)(v10 - 3));
          if ((int)v10 > (int)v26)
          {
            do
            {
              int32x4_t v41 = *v34++;
              int32x4_t v42 = v41;
              float32x4_t v43 = *v33++;
              float32x4_t v44 = v43;
              float32x4_t v45 = *v32++;
              *v31++ = vmulq_f32(*v9, vmulq_f32(v44, vmulq_laneq_f32(vminq_f32(vmaxq_f32(vsubq_f32(v9[1], (float32x4_t)vdupq_laneq_s32(v42, 3)), v9[2]), v9[1]), v45, 3)));
              ++v26;
            }
            while (v26 < v10);
          }
          ++v16;
          unint64_t v5 = (int32x4_t *)((char *)v5 + v17);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v18);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v19);
          uint64_t v11 = (float32x4_t *)((char *)v11 + v21);
          long long v20 = (float32x4_t *)((char *)v20 + v21);
          long long v22 = (float32x4_t *)((char *)v22 + v18);
          float32x4_t v23 = (float32x4_t *)((char *)v23 + v19);
          long long v24 = (int32x4_t *)((char *)v24 + v17);
        }
        while (v16 != v8);
      }
    }
  }
  else
  {
    int v46 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
    if (v46 >= 1)
    {
      int v47 = *((_DWORD *)a2 + 2);
      int v48 = *(_DWORD *)a2;
      int v49 = v47 - *(_DWORD *)a2;
      int v50 = v49 - 4;
      if (v49 < 4)
      {
        if (v49 >= 1)
        {
          int v60 = 0;
          size_t v61 = 16 * (v47 + ~v48) + 16;
          do
            bzero((void *)(*((void *)a2 + 2) + 16 * *((_DWORD *)a2 + 6) * v60++), v61);
          while (v46 != v60);
        }
      }
      else
      {
        if (v49 >= 7) {
          int v51 = 7;
        }
        else {
          int v51 = v47 - *(_DWORD *)a2;
        }
        unsigned int v52 = v47 - v48 - v51 + 3;
        size_t v53 = ((unint64_t)(v52 >> 2) << 6) + 64;
        unsigned int v54 = v52 & 0xFFFFFFFC;
        int v55 = v49 - v54;
        int v56 = v50 - v54;
        if ((int)(v50 - v54) >= 1) {
          int v56 = 1;
        }
        if (v55 <= 4)
        {
          for (int i = 0; i != v46; ++i)
            bzero((void *)(*((void *)a2 + 2) + 16 * *((_DWORD *)a2 + 6) * i), v53);
        }
        else
        {
          int v57 = 0;
          size_t v58 = 16 * (v50 - v54 - v56) + 16;
          do
          {
            float32x4_t v59 = (char *)(*((void *)a2 + 2) + 16 * *((_DWORD *)a2 + 6) * v57);
            bzero(v59, v53);
            bzero(&v59[v53], v58);
            ++v57;
          }
          while (v46 != v57);
        }
      }
    }
  }
  return 0;
}

uint64_t HGLightWrap::RenderPage(HGNode *this, HGRect *a2)
{
  (*(void (**)(HGNode *, void))(*(void *)this + 576))(this, 0);

  return HGNode::RenderPage(this, a2);
}

uint64_t HGLightWrap::RenderPageMetal(HGNode *this, HGPage *a2)
{
  (*(void (**)(HGNode *, void))(*(void *)this + 576))(this, 0);

  return HGNode::RenderPageMetal(this, a2);
}

const char *HGLightWrap::GetProgram(HGLightWrap *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000043c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2.w = (half) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).w;\n"
             "    r0 = clamp(c0.xxxx - r0.wwww, 0.00000h, 1.00000h);\n"
             "    r0 = r0*r2.wwww;\n"
             "    r1 = r0*r1;\n"
             "    output.color0 = float4(r1)*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=75ca94e5:4c8b94c4:97725edc:ddf254f3\n"
             "//SIG=00400000:00000007:00000007:00000007:0001:0001:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000424\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2.w = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).w;\n"
             "    r0 = clamp(c0.xxxx - r0.wwww, 0.00000f, 1.00000f);\n"
             "    r0 = r0*r2.wwww;\n"
             "    r0 = r0*r1;\n"
             "    output.color0 = r0*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=c8c5dd81:110d3923:ff429a4b:4018d85f\n"
             "//SIG=00000000:00000007:00000007:00000000:0001:0001:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003b9\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.w = texture2D(hg_Texture0, hg_TexCoord0.xy).w;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2.w = texture2D(hg_Texture2, hg_TexCoord2.xy).w;\n"
           "    r0 = clamp(c0.xxxx - r0.wwww, vec4(0.00000), vec4(1.00000));\n"
           "    r0 = r0*r2.wwww;\n"
           "    r0 = r0*r1;\n"
           "    gl_FragColor = r0*hg_ProgramLocal0;\n"
           "}\n"
           "//MD5=1b8aa5b8:6e01dc15:8dfa7c9e:d9ed25f9\n"
           "//SIG=00000000:00000007:00000007:00000000:0001:0001:0003:0000:0000:0000:0000:0000:0003:03:0:1:0\n";
  }
}

void HGLightWrap::InitProgramDescriptor(HGLightWrap *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "LightWrap_hgc_visible", "//Metal1.0     \n//LEN=0000000201\n[[ visible ]] FragmentOut LightWrap_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = color0.w;\n"
    "    r1 = color1;\n"
    "    r2.w = color2.w;\n"
    "    r0 = clamp(c0.xxxx - r0.wwww, 0.00000f, 1.00000f);\n"
    "    r0 = r0*r2.wwww;\n"
    "    r0 = r0*r1;\n"
    "    output.color0 = r0*hg_Params[0];\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "LightWrap");
}

void sub_1B78CA04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void **a21,void **a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a21)
  {
    float32x4_t v23 = a22;
    long long v24 = a21;
    if (a22 != a21)
    {
      do
      {
        if (*((char *)v23 - 17) < 0) {
          operator delete(*(v23 - 5));
        }
        v23 -= 6;
      }
      while (v23 != a21);
      long long v24 = a21;
    }
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void HGStencil::HGStencil(HGStencil *this)
{
  HGNode::HGNode((HGNode *)this);
  *(void *)uint64_t v2 = &unk_1F10E4A90;
  *(void *)(v2 + 408) = 0;
  *(void *)(v2 + 416) = 0;
  *(void *)(v2 + 424) = 0;
  *(void *)(v2 + 4(*(void (**)(HGLightWrap *, uint64_t, uint64_t))(*(void *)this + 136))(this, 0xFFFFFFFFLL, 32) = 1065353216;
  HGNode::SetFlags((HGNode *)v2, 0xFFFFFFFFLL, 512);
  (*(void (**)(HGStencil *, uint64_t, uint64_t))(*(void *)this + 136))(this, 0xFFFFFFFFLL, 1024);
  (*(void (**)(HGStencil *, void, uint64_t))(*(void *)this + 136))(this, 0, 32);
  (*(void (**)(HGStencil *, uint64_t, uint64_t))(*(void *)this + 136))(this, 1, 32);
  (*(void (**)(HGStencil *, uint64_t, uint64_t))(*(void *)this + 136))(this, 0xFFFFFFFFLL, 32);
}

void sub_1B78CA1F8(_Unwind_Exception *a1)
{
  int v3 = v2;
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 416) = v5;
    operator delete(v5);
  }
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HGStencil::~HGStencil(HGNode *this)
{
  *(void *)this = &unk_1F10E4A90;
  int v3 = (char *)this + 408;
  uint64_t v2 = (void *)*((void *)this + 51);
  unint64_t v4 = *((void *)v3 + 1) - (void)v2;
  if ((int)(v4 >> 3) >= 1)
  {
    unint64_t v5 = (v4 >> 3) + 1;
    do
    {
      uint64_t v6 = *(void *)(*((void *)this + 51) + 8 * (v5 - 2));
      if (v6) {
        MEMORY[0x1BA9BFBA0](v6, 0x1000C40E0EAB150);
      }
      --v5;
    }
    while (v5 > 1);
    uint64_t v2 = (void *)*((void *)this + 51);
  }
  if (v2)
  {
    *((void *)this + 52) = v2;
    operator delete(v2);
  }

  HGNode::~HGNode(this);
}

{
  void *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F10E4A90;
  int v3 = (char *)this + 408;
  uint64_t v2 = (void *)*((void *)this + 51);
  unint64_t v4 = *((void *)v3 + 1) - (void)v2;
  if ((int)(v4 >> 3) >= 1)
  {
    unint64_t v5 = (v4 >> 3) + 1;
    do
    {
      uint64_t v6 = *(void *)(*((void *)this + 51) + 8 * (v5 - 2));
      if (v6) {
        MEMORY[0x1BA9BFBA0](v6, 0x1000C40E0EAB150);
      }
      --v5;
    }
    while (v5 > 1);
    uint64_t v2 = (void *)*((void *)this + 51);
  }
  if (v2)
  {
    *((void *)this + 52) = v2;
    operator delete(v2);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v7);
}

uint64_t HGStencil::SetState(HGStencil *this, HGRenderer *a2, int a3)
{
  if (a3 == 1)
  {
    if ((*(unsigned int (**)(HGRenderer *))(*(void *)a2 + 304))(a2))
    {
      if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 5) <= (unint64_t)((uint64_t)(*((void *)this + 52) - *((void *)this + 51)) >> 3)) {
        goto LABEL_7;
      }
    }
    else if ((uint64_t)(*((void *)this + 52) - *((void *)this + 51)) >> 3)
    {
      goto LABEL_7;
    }
    operator new();
  }
LABEL_7:

  return HGNode::SetState((uint64_t)this, (uint64_t)a2, a3);
}

uint64_t HGStencil::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t DOD = HGRenderer::GetDOD(a2, Input);
  uint64_t v10 = v9;
  uint64_t v11 = HGRenderer::GetInput(a2, this, 1u);
  uint64_t v12 = HGRenderer::GetDOD(a2, v11);
  return HGRectIntersection(DOD, v10, v12, v13);
}

uint64_t HGStencil::GetROI(HGStencil *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3 <= 1) {
    return *(void *)&a4.var0;
  }
  else {
    return 0;
  }
}

uint64_t HGStencil::SetParameter(HGStencil *this, int a2, float a3, float a4, float a5, float a6)
{
  if (a2 == 1)
  {
    *((float *)this + 108) = a3;
    return 1;
  }
  else if (a2)
  {
    return 0;
  }
  else
  {
    *((_DWORD *)this + 109) = vcvtms_s32_f32(a3);
    return 1;
  }
}

uint64_t HGStencil::Bind(HGStencil *this, HGHandler *a2)
{
  return 0;
}

float32x4_t HGStencil::UpdateLocalParameters(HGStencil *this, int a2)
{
  uint64_t v2 = (const float *)((char *)this + 432);
  float32x4_t result = vld1q_dup_f32(v2);
  *(float32x4_t *)*(void *)(*((void *)this + 51) + 8 * a2) = result;
  return result;
}

uint64_t HGStencil::RenderTile(HGStencil *this, HGTile *a2)
{
  unsigned int v4 = *(_DWORD *)(*((void *)a2 + 42) + 160);
  (*(void (**)(HGStencil *, void))(*(void *)this + 576))(this, v4);
  if (*((void *)a2 + 10) && *((void *)a2 + 12) && *((float *)this + 108) > 0.0)
  {
    unint64_t v5 = s_func_stencil_table[*((int *)this + 109)];
    uint64_t v6 = *(void *)(*((void *)this + 51) + 8 * (int)v4);
    return ((uint64_t (*)(HGTile *, uint64_t, HGStencil *))v5)(a2, v6, this);
  }
  else
  {
    uint64_t v8 = (*((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1));
    if ((int)v8 >= 1)
    {
      int v9 = *((_DWORD *)a2 + 2);
      int v10 = v9 - *(_DWORD *)a2;
      uint64_t v11 = (char *)*((void *)a2 + 2);
      uint64_t v12 = *((int *)a2 + 6);
      unsigned int v13 = v10 - 4;
      if (v10 < 4)
      {
        if (v10 >= 1)
        {
          size_t v20 = 16 * (v9 + ~*(_DWORD *)a2) + 16;
          uint64_t v21 = 16 * v12;
          do
          {
            bzero(v11, v20);
            v11 += v21;
            LODWORD(v8) = v8 - 1;
          }
          while (v8);
        }
      }
      else
      {
        size_t v14 = ((unint64_t)(v13 >> 2) << 6) + 64;
        uint64_t v15 = 16 * v12;
        unsigned int v16 = v13 & 0xFFFFFFFC;
        signed int v17 = (v13 & 0xFFFFFFFC) + 5;
        if (v10 > v17) {
          signed int v17 = v10;
        }
        size_t v18 = 16 * (v17 - v16 - 5) + 16;
        int v19 = v16 + 4;
        do
        {
          bzero(v11, v14);
          if (v10 > v19) {
            bzero(&v11[v14], v18);
          }
          v11 += v15;
          --v8;
        }
        while (v8);
      }
    }
    return 0;
  }
}

char *HGStencil::RenderPage(HGNode *this, HGRect *a2)
{
  (*(void (**)(HGNode *, void))(*(void *)this + 576))(this, 0);

  return HGStencil::RenderPagePlain(this, a2);
}

char *HGStencil::RenderPagePlain(HGNode *this, HGRect *a2)
{
  HGPagePullTexturesGuard::HGPagePullTexturesGuard((HGPagePullTexturesGuard *)&v13, this, (HGPage *)a2);
  Buffer = *(char **)&a2->var2;
  if (Buffer)
  {
    (*(void (**)(void))(*(void *)Buffer + 16))(*(void *)&a2->var2);
  }
  else
  {
    Buffer = HGGPURenderer::CreateBuffer(*(void *)&a2->var0, a2[1], a2[2].var0, 0, (*((_DWORD *)this + 4) >> 12) & 1, LOBYTE(a2[15].var2));
    *(void *)&a2->var2 = Buffer;
  }
  (*(void (**)(void, char *))(**(void **)&a2->var0 + 144))(*(void *)&a2->var0, Buffer);
  (*(void (**)(void, void, void, void, void))(**(void **)&a2->var0 + 152))(*(void *)&a2->var0, 0, *(void *)&a2[10].var2, 0, 0);
  (*(void (**)(void, uint64_t, void, void, void))(**(void **)&a2->var0 + 152))(*(void *)&a2->var0, 1, *(void *)&a2[11].var0, 0, 0);
  (*(void (**)(void, uint64_t, void, void, void))(**(void **)&a2->var0 + 152))(*(void *)&a2->var0, 2, *(void *)&a2[11].var2, 0, 0);
  (*(void (**)(void, uint64_t, void, void, void))(**(void **)&a2->var0 + 152))(*(void *)&a2->var0, 3, *(void *)&a2[12].var0, 0, 0);
  (*(void (**)(void, uint64_t, void, void, void))(**(void **)&a2->var0 + 152))(*(void *)&a2->var0, 4, *(void *)&a2[12].var2, 0, 0);
  (*(void (**)(void, uint64_t, void, void, void))(**(void **)&a2->var0 + 152))(*(void *)&a2->var0, 5, *(void *)&a2[13].var0, 0, 0);
  (*(void (**)(void, uint64_t, void, void, void))(**(void **)&a2->var0 + 152))(*(void *)&a2->var0, 6, *(void *)&a2[13].var2, 0, 0);
  (*(void (**)(void, uint64_t, void, void, void))(**(void **)&a2->var0 + 152))(*(void *)&a2->var0, 7, *(void *)&a2[14].var0, 0, 0);
  unint64_t v5 = (HGHandler *)(*(uint64_t (**)(void, void, HGNode *))(**(void **)&a2->var0 + 368))(*(void *)&a2->var0, *((void *)this + 8), this);
  (*(void (**)(HGNode *, HGRect *, void, HGHandler *))(*(void *)this + 488))(this, a2, 0, v5);
  uint64_t v6 = (*(uint64_t (**)(HGNode *, void, uint64_t, void, void))(*(void *)this + 400))(this, *(void *)&a2->var0, 1, *(void *)&a2[1].var0, *(void *)&a2[1].var2);
  if (HGRectIsNull(v6, v7)
    || (uint64_t v10 = (*(uint64_t (**)(HGNode *, void, void, void, void))(*(void *)this + 400))(this, *(void *)&a2->var0, 0, *(void *)&a2[1].var0, *(void *)&a2[1].var2), HGRectIsNull(v10, v11)))
  {
    HGGPURenderer::Clear(*(HGGPURenderer **)&a2->var0, a2[1], v8, v9);
  }
  else
  {
    HGGPURenderer::Rect(*(HGGPURenderer **)&a2->var0, v5, a2[1], 8);
  }
  (*(void (**)(HGNode *, HGRect *, void, HGHandler *))(*(void *)this + 496))(this, a2, 0, v5);
  HGPagePullTexturesGuard::~HGPagePullTexturesGuard(&v13);
  return Buffer;
}

void sub_1B78CAD88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HGPagePullTexturesGuard::~HGPagePullTexturesGuard((HGPage **)va);
  _Unwind_Resume(a1);
}

void sub_1B78CAD9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HGPagePullTexturesGuard::~HGPagePullTexturesGuard((HGPage **)va);
  _Unwind_Resume(a1);
}

void sub_1B78CADB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HGPagePullTexturesGuard::~HGPagePullTexturesGuard((HGPage **)va);
  _Unwind_Resume(a1);
}

char *HGStencil::RenderPageMetal(HGNode *this, HGRect *a2)
{
  (*(void (**)(HGNode *, void))(*(void *)this + 576))(this, 0);

  return HGStencil::RenderPagePlainMetal(this, a2);
}

char *HGStencil::RenderPagePlainMetal(HGNode *this, HGRect *a2)
{
  HGPagePullMetalTexturesGuard::HGPagePullMetalTexturesGuard((HGPagePullMetalTexturesGuard *)&v17, this, (HGPage *)a2);
  Buffer = *(char **)&a2->var2;
  if (Buffer)
  {
    (*(void (**)(void))(*(void *)Buffer + 16))(*(void *)&a2->var2);
  }
  else
  {
    Buffer = HGGPURenderer::CreateBuffer(*(void *)&a2->var0, a2[1], a2[2].var0, 1, (*((_DWORD *)this + 4) >> 12) & 1, LOBYTE(a2[15].var2));
    *(void *)&a2->var2 = Buffer;
  }
  uint64_t v5 = (*(uint64_t (**)(HGNode *, void, uint64_t, void, void))(*(void *)this + 400))(this, *(void *)&a2->var0, 1, *(void *)&a2[1].var0, *(void *)&a2[1].var2);
  if (HGRectIsNull(v5, v6)
    || (uint64_t v8 = (*(uint64_t (**)(HGNode *, void, void, void, void))(*(void *)this + 400))(this, *(void *)&a2->var0, 0, *(void *)&a2[1].var0, *(void *)&a2[1].var2), HGRectIsNull(v8, v9)))
  {
    HGGPURenderer::ClearMetal(*(HGGPURenderer **)&a2->var0, (HGBitmap *)Buffer, a2[1], v7);
  }
  else
  {
    uint64_t v11 = (const void *)(*(uint64_t (**)(void, void, HGNode *))(**(void **)&a2->var0 + 368))(*(void *)&a2->var0, *((void *)this + 8), this);
    if (v11)
    {
      if (v12)
      {
        unsigned int v13 = v12;
        (*(void (**)(HGNode *, HGRect *, void, HGMetalHandler *))(*(void *)this + 488))(this, a2, 0, v12);
        HGMetalHandler::BindBuffer(v13, (HGBitmap *)Buffer);
        for (uint64_t i = 0; i != 8; ++i)
        {
          uint64_t v15 = *((void *)&a2[10].var2 + i);
          __n128 v16 = HGMetalHandler::BindTexture((HGMetalTexture ***)v13, i, (HGBitmap *)v15);
          if (v15)
          {
            (*(void (**)(HGMetalHandler *, uint64_t, void, __n128))(*(void *)v13 + 72))(v13, i, 0, v16);
            (*(void (**)(HGMetalHandler *, void, void))(*(void *)v13 + 48))(v13, 0, 0);
            (*(void (**)(HGMetalHandler *, uint64_t))(*(void *)v13 + 80))(v13, i);
            (*(void (**)(HGMetalHandler *))(*(void *)v13 + 88))(v13);
            (*(void (**)(HGMetalHandler *, double, double, double))(*(void *)v13 + 96))(v13, (double)-*(_DWORD *)(v15 + 20), (double)-*(_DWORD *)(v15 + 24), 0.0);
            (*(void (**)(HGMetalHandler *, void))(*(void *)v13 + 56))(v13, 0);
          }
        }
        (*(void (**)(HGMetalHandler *, void, void, uint64_t, __n128))(*(void *)v13 + 192))(v13, *(void *)&a2[1].var0, *(void *)&a2[1].var2, 8, v16);
        (*(void (**)(HGNode *, HGRect *, void, HGMetalHandler *))(*(void *)this + 496))(this, a2, 0, v13);
      }
    }
  }
  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard(&v17);
  return Buffer;
}

void sub_1B78CB20C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard((HGPage **)va);
  _Unwind_Resume(a1);
}

void sub_1B78CB220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard((HGPage **)va);
  _Unwind_Resume(a1);
}

void sub_1B78CB234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HGPagePullMetalTexturesGuard::~HGPagePullMetalTexturesGuard((HGPage **)va);
  _Unwind_Resume(a1);
}

uint64_t HGStencil::GetProgram(HGStencil *this, HGRenderer *a2)
{
  return s_gpu_stencil_table[*((int *)this + 109)](a2);
}

uint64_t HGStencil::InitProgramDescriptor(HGStencil *this, HGProgramDescriptor *a2)
{
  return s_programdesc_stencil_table[*((int *)this + 109)](a2);
}

uint64_t GetStencilAlphaTile(uint64_t a1, float32x4_t *a2)
{
  int v2 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
  if (v2 >= 1)
  {
    unint64_t v3 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
    unsigned int v4 = *(float32x4_t **)(a1 + 96);
    uint64_t v5 = *(float32x4_t **)(a1 + 80);
    uint64_t v6 = *(float32x4_t **)(a1 + 16);
    uint64_t v7 = *(int *)(a1 + 24);
    uint64_t v8 = *(int *)(a1 + 88);
    uint64_t v9 = *(int *)(a1 + 104);
    if ((int)v3 < 4)
    {
      if ((int)v3 >= 1)
      {
        int v33 = 0;
        uint64_t v34 = 16 * v9;
        uint64_t v35 = 16 * v8;
        uint64_t v36 = 16 * v7;
        uint64_t v37 = 16 * (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
        do
        {
          unint64_t v38 = 0;
          do
          {
            v6[v38 / 0x10] = vmulq_laneq_f32(v5[v38 / 0x10], vmulq_f32(v4[v38 / 0x10], *a2), 3);
            v38 += 16;
          }
          while (v37 != v38);
          ++v33;
          unsigned int v4 = (float32x4_t *)((char *)v4 + v34);
          uint64_t v5 = (float32x4_t *)((char *)v5 + v35);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v36);
        }
        while (v33 != v2);
      }
    }
    else
    {
      int v10 = 0;
      uint64_t v11 = 16 * v8;
      uint64_t v12 = 16 * v7;
      uint64_t v13 = 16 * v9;
      size_t v14 = v4 + 4;
      uint64_t v15 = v5 + 4;
      __n128 v16 = v6 + 4;
      do
      {
        unint64_t v17 = 0;
        unint64_t v18 = 0;
        int v19 = v16;
        size_t v20 = v15;
        uint64_t v21 = v14;
        do
        {
          long long v22 = v21;
          float32x4_t v23 = v20;
          long long v24 = v19;
          float32x4_t v25 = (float32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 0xCuLL);
          float32x4_t v26 = vmulq_n_f32(v5[v17 + 1], vmulq_laneq_f32(v25, v4[v17 + 1], 3).f32[0]);
          float32x4_t v27 = vmulq_n_f32(v5[v17 + 2], vmulq_laneq_f32(v25, v4[v17 + 2], 3).f32[0]);
          float32x4_t v28 = vmulq_n_f32(v5[v17 + 3], vmulq_laneq_f32(v25, v4[v17 + 3], 3).f32[0]);
          uint64_t v29 = &v6[v17];
          *uint64_t v29 = vmulq_n_f32(v5[v17], vmulq_laneq_f32(v25, v4[v17], 3).f32[0]);
          v29[1] = v26;
          v18 += 4;
          v17 += 4;
          v29[2] = v27;
          v29[3] = v28;
          v21 += 4;
          v20 += 4;
          int v19 = v24 + 4;
        }
        while ((uint64_t)v18 < (uint64_t)(v3 - 3));
        if ((int)v3 > (int)v18)
        {
          do
          {
            float32x4_t v30 = *v22++;
            float32x4_t v31 = v30;
            float32x4_t v32 = *v23++;
            *v24++ = vmulq_laneq_f32(v32, vmulq_f32(v31, *a2), 3);
            ++v18;
          }
          while (v18 < v3);
        }
        ++v10;
        uint64_t v5 = (float32x4_t *)((char *)v5 + v11);
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        unsigned int v4 = (float32x4_t *)((char *)v4 + v13);
        size_t v14 = (float32x4_t *)((char *)v14 + v13);
        uint64_t v15 = (float32x4_t *)((char *)v15 + v11);
        __n128 v16 = (float32x4_t *)((char *)v16 + v12);
      }
      while (v10 != v2);
    }
  }
  return 0;
}

uint64_t GetStencilLumaTile(uint64_t a1, float32x4_t *a2)
{
  int v2 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 4);
  if (v2 >= 1)
  {
    unint64_t v3 = (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
    unsigned int v4 = *(float32x4_t **)(a1 + 96);
    uint64_t v5 = *(float32x4_t **)(a1 + 80);
    uint64_t v6 = *(float32x4_t **)(a1 + 16);
    uint64_t v7 = *(int *)(a1 + 24);
    uint64_t v8 = *(int *)(a1 + 88);
    uint64_t v9 = *(int *)(a1 + 104);
    if ((int)v3 < 4)
    {
      if ((int)v3 >= 1)
      {
        int v38 = 0;
        uint64_t v39 = 16 * v9;
        uint64_t v40 = 16 * v8;
        uint64_t v41 = 16 * v7;
        uint64_t v42 = 16 * (*(_DWORD *)(a1 + 8) - *(_DWORD *)a1);
        do
        {
          unint64_t v43 = 0;
          do
          {
            float32x4_t v44 = vmulq_f32(vmulq_f32(v4[v43 / 0x10], *a2), a2[1]);
            v6[v43 / 0x10] = vmulq_n_f32(v5[v43 / 0x10], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0]);
            v43 += 16;
          }
          while (v42 != v43);
          ++v38;
          unsigned int v4 = (float32x4_t *)((char *)v4 + v39);
          uint64_t v5 = (float32x4_t *)((char *)v5 + v40);
          uint64_t v6 = (float32x4_t *)((char *)v6 + v41);
        }
        while (v38 != v2);
      }
    }
    else
    {
      int v10 = 0;
      uint64_t v11 = 16 * v8;
      uint64_t v12 = 16 * v7;
      uint64_t v13 = 16 * v9;
      size_t v14 = v4 + 4;
      uint64_t v15 = v5 + 4;
      __n128 v16 = v6 + 4;
      do
      {
        unint64_t v17 = 0;
        unint64_t v18 = 0;
        int v19 = v16;
        size_t v20 = v15;
        uint64_t v21 = v14;
        do
        {
          long long v22 = v21;
          float32x4_t v23 = v20;
          long long v24 = v19;
          float32x4_t v25 = a2[1];
          float32x4_t v26 = vmulq_f32(vmulq_f32(v4[v17], *a2), v25);
          float32x4_t v27 = vmulq_f32(vmulq_f32(v4[v17 + 1], *a2), v25);
          float32x4_t v28 = vmulq_f32(vmulq_f32(v4[v17 + 2], *a2), v25);
          float32x4_t v29 = vmulq_f32(vmulq_f32(v4[v17 + 3], *a2), v25);
          float32x4_t v30 = vmulq_n_f32(v5[v17 + 1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]);
          float32x4_t v31 = vmulq_n_f32(v5[v17 + 2], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]);
          float32x4_t v32 = vmulq_n_f32(v5[v17 + 3], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]);
          int v33 = &v6[v17];
          *int v33 = vmulq_n_f32(v5[v17], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]);
          v33[1] = v30;
          v18 += 4;
          v17 += 4;
          v33[2] = v31;
          v33[3] = v32;
          v21 += 4;
          v20 += 4;
          int v19 = v24 + 4;
        }
        while ((uint64_t)v18 < (uint64_t)(v3 - 3));
        if ((int)v3 > (int)v18)
        {
          do
          {
            float32x4_t v34 = *v22++;
            float32x4_t v35 = vmulq_f32(v34, *a2);
            float32x4_t v36 = *v23++;
            float32x4_t v37 = vmulq_f32(v35, a2[1]);
            *v24++ = vmulq_n_f32(v36, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0]);
            ++v18;
          }
          while (v18 < v3);
        }
        ++v10;
        uint64_t v5 = (float32x4_t *)((char *)v5 + v11);
        uint64_t v6 = (float32x4_t *)((char *)v6 + v12);
        unsigned int v4 = (float32x4_t *)((char *)v4 + v13);
        size_t v14 = (float32x4_t *)((char *)v14 + v13);
        uint64_t v15 = (float32x4_t *)((char *)v15 + v11);
        __n128 v16 = (float32x4_t *)((char *)v16 + v12);
      }
      while (v10 != v2);
    }
  }
  return 0;
}

const char *GetStencilAlphaProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000030c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).w;\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = r0.w*half(hg_Params[0].w);\n"
             "    output.color0 = float4(r0.xxxx)*float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=01f634c8:f7748912:786afaf7:eb888de8\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002ea\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).w;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = r0.w*hg_Params[0].w;\n"
             "    output.color0 = r0.xxxx*r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=e1ec9237:e9f18bbe:72542b57:68628fe1\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000294\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.w = texture2D(hg_Texture1, hg_TexCoord1.xy).w;\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.x = r0.w*hg_ProgramLocal0.w;\n"
           "    gl_FragColor = r0.xxxx*r1;\n"
           "}\n"
           "//MD5=b08281d5:65ec7cc3:7ffdfd68:7096132c\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

const char *GetStencilLumaProgram(HGRenderer *a1)
{
  unsigned int Target = HGRenderer::GetTarget(a1, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000038b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.3000000119, 0.5899999738, 0.1099999994, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = (half3) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xyz;\n"
             "    r0.xyz = r0.xyz*half3(hg_Params[0].xyz);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0.xyz, c0.xyz);\n"
             "    output.color0 = float4(r0.xxxx)*float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=cb176b52:a0693719:b9ea283b:0759c643\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000369\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.3000000119, 0.5899999738, 0.1099999994, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xyz;\n"
             "    r0.xyz = r0.xyz*hg_Params[0].xyz;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0.xyz, c0.xyz);\n"
             "    output.color0 = r0.xxxx*r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=d4787518:3c8759ce:80b33876:1f8c5248\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a1 + 128))(a1, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000318\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.3000000119, 0.5899999738, 0.1099999994, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.xyz = texture2D(hg_Texture1, hg_TexCoord1.xy).xyz;\n"
           "    r0.xyz = r0.xyz*hg_ProgramLocal0.xyz;\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.x = dot(r0.xyz, c0.xyz);\n"
           "    gl_FragColor = r0.xxxx*r1;\n"
           "}\n"
           "//MD5=23b25b93:d546e82f:8b4aad79:2f25e687\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void InitStencilAlphaProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "StencilAlpha_hgc_visible", "//Metal1.0     \n//LEN=0000000145\n[[ visible ]] FragmentOut StencilAlpha_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = color1.w;\n"
    "    r1 = color0;\n"
    "    r0.x = r0.w*hg_Params[0].w;\n"
    "    output.color0 = r0.xxxx*r1;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "StencilAlpha");
}

void sub_1B78CBA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78CBAC8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78CBAC0);
}

void InitStencilLumaProgramDescriptor(HGProgramDescriptor *a1)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a1, "StencilLuma_hgc_visible", "//Metal1.0     \n//LEN=00000001c3\n[[ visible ]] FragmentOut StencilLuma_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.3000000119, 0.5899999738, 0.1099999994, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = color1.xyz;\n"
    "    r0.xyz = r0.xyz*hg_Params[0].xyz;\n"
    "    r1 = color0;\n"
    "    r0.x = dot(r0.xyz, c0.xyz);\n"
    "    output.color0 = r0.xxxx*r1;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a1, "StencilLuma");
}

void sub_1B78CBD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78CBDA0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78CBD98);
}

const char *HgcSMAAEdgeDetect::GetProgram(HgcSMAAEdgeDetect *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000005fd\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 0.000000000, 1.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6, r7;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy).x;\n"
             "    r1.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r2.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy).x;\n"
             "    r2.y = r0.x;\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy).x;\n"
             "    r3.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord4.xy).x;\n"
             "    r2.z = r0.x;\n"
             "    r2.w = r3.x;\n"
             "    r1 = r1.xxxx - r2;\n"
             "    r1 = abs(r1);\n"
             "    r4.xy = half2(half2(hg_Params[0].xy) < r1.xy);\n"
             "    r5.xy = fmax(r1.xy, r1.zw);\n"
             "    r5.xy = fmax(r5.xx, r5.yy);\n"
             "    r6.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord5.xy).x;\n"
             "    r7.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord6.xy).x;\n"
             "    r2.z = r6.x;\n"
             "    r2.w = r7.x;\n"
             "    r2.xy = r2.xy - r2.zw;\n"
             "    r5.xy = fmax(r5.xy, fabs(r2.xy));\n"
             "    r5.xy = r5.xy*c0.xx;\n"
             "    r5.xy = half2(r5.xy < r1.xy);\n"
             "    output.color0.xy = fmin(float2(r4.xy), float2(r5.xy));\n"
             "    output.color0.zw = float2(c0.yz);\n"
             "    return output;\n"
             "}\n"
             "//MD5=f63bcefb:e47eb4ef:de86d16a:09e989d0\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0001:0008:0000:0000:0000:00fe:0000:0007:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000005ab\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 0.000000000, 1.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy).x;\n"
             "    r1.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r2.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy).x;\n"
             "    r2.y = r0.x;\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy).x;\n"
             "    r3.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord4.xy).x;\n"
             "    r2.z = r0.x;\n"
             "    r2.w = r3.x;\n"
             "    r1 = r1.xxxx - r2;\n"
             "    r1 = abs(r1);\n"
             "    r0.xy = float2(hg_Params[0].xy < r1.xy);\n"
             "    r3.xy = fmax(r1.xy, r1.zw);\n"
             "    r3.xy = fmax(r3.xx, r3.yy);\n"
             "    r4.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord5.xy).x;\n"
             "    r5.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord6.xy).x;\n"
             "    r2.z = r4.x;\n"
             "    r2.w = r5.x;\n"
             "    r2.xy = r2.xy - r2.zw;\n"
             "    r3.xy = fmax(r3.xy, fabs(r2.xy));\n"
             "    r3.xy = r3.xy*c0.xx;\n"
             "    r3.xy = float2(r3.xy < r1.xy);\n"
             "    output.color0.xy = fmin(r0.xy, r3.xy);\n"
             "    output.color0.zw = c0.yz;\n"
             "    return output;\n"
             "}\n"
             "//MD5=9b909250:9a031bd2:3464edfe:3dce087f\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0001:0006:0000:0000:0000:00fe:0000:0007:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000604\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "varying highp vec4 hg_TexCoord4;\n"
           "varying highp vec4 hg_TexCoord5;\n"
           "varying highp vec4 hg_TexCoord6;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.5000000000, 0.000000000, 1.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2, r3, r4, r5;\n"
           "\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord1.xy).x;\n"
           "    r1.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r2.x = texture2D(hg_Texture0, hg_TexCoord2.xy).x;\n"
           "    r2.y = r0.x;\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord3.xy).x;\n"
           "    r3.x = texture2D(hg_Texture0, hg_TexCoord4.xy).x;\n"
           "    r2.z = r0.x;\n"
           "    r2.w = r3.x;\n"
           "    r1 = r1.xxxx - r2;\n"
           "    r1 = abs(r1);\n"
           "    r0.xy = vec2(lessThan(hg_ProgramLocal0.xy, r1.xy));\n"
           "    r3.xy = max(r1.xy, r1.zw);\n"
           "    r3.xy = max(r3.xx, r3.yy);\n"
           "    r4.x = texture2D(hg_Texture0, hg_TexCoord5.xy).x;\n"
           "    r5.x = texture2D(hg_Texture0, hg_TexCoord6.xy).x;\n"
           "    r2.z = r4.x;\n"
           "    r2.w = r5.x;\n"
           "    r2.xy = r2.xy - r2.zw;\n"
           "    r3.xy = max(r3.xy, abs(r2.xy));\n"
           "    r3.xy = r3.xy*c0.xx;\n"
           "    r3.xy = vec2(lessThan(r3.xy, r1.xy));\n"
           "    gl_FragColor.xy = min(r0.xy, r3.xy);\n"
           "    gl_FragColor.zw = c0.yz;\n"
           "}\n"
           "//MD5=10405cea:bdc87dfa:dc2a500e:aab26e6b\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0001:0006:0000:0000:0000:0000:0000:0007:01:0:1:0\n";
  }
}

void HgcSMAAEdgeDetect::InitProgramDescriptor(HgcSMAAEdgeDetect *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSMAAEdgeDetect_hgc_visible", "//Metal1.0     \n//LEN=000000054f\n[[ visible ]] FragmentOut HgcSMAAEdgeDetect_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0,\n    float4 texCoord1,\n    float4 texCoord2,\n    float4 texCoord3,\n    float4 texCoord4,\n    float4 texCoord5,\n    float4 texCoord6)\n{\n    const float4 c0 = float4(0.5000000000, 0.000000000, 1.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = hg_Texture0.sample(hg_Sampler0, texCoord1.xy).x;\n"
    "    r1.x = hg_Texture0.sample(hg_Sampler0, texCoord0.xy).x;\n"
    "    r2.x = hg_Texture0.sample(hg_Sampler0, texCoord2.xy).x;\n"
    "    r2.y = r0.x;\n"
    "    r0.x = hg_Texture0.sample(hg_Sampler0, texCoord3.xy).x;\n"
    "    r3.x = hg_Texture0.sample(hg_Sampler0, texCoord4.xy).x;\n"
    "    r2.z = r0.x;\n"
    "    r2.w = r3.x;\n"
    "    r1 = r1.xxxx - r2;\n"
    "    r1 = abs(r1);\n"
    "    r0.xy = float2(hg_Params[0].xy < r1.xy);\n"
    "    r3.xy = fmax(r1.xy, r1.zw);\n"
    "    r3.xy = fmax(r3.xx, r3.yy);\n"
    "    r4.x = hg_Texture0.sample(hg_Sampler0, texCoord5.xy).x;\n"
    "    r5.x = hg_Texture0.sample(hg_Sampler0, texCoord6.xy).x;\n"
    "    r2.z = r4.x;\n"
    "    r2.w = r5.x;\n"
    "    r2.xy = r2.xy - r2.zw;\n"
    "    r3.xy = fmax(r3.xy, fabs(r2.xy));\n"
    "    r3.xy = r3.xy*c0.xx;\n"
    "    r3.xy = float2(r3.xy < r1.xy);\n"
    "    output.color0.xy = fmin(r0.xy, r3.xy);\n"
    "    output.color0.zw = c0.yz;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcSMAAEdgeDetect");
}

void sub_1B78CC550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78CC5A0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78CC598);
}

char *HgcSMAAEdgeDetect::shaderDescription@<X0>(uint64_t a1@<X8>)
{
  float32x4_t result = (char *)operator new(0x20uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1B8349210;
  strcpy(result, "HgcSMAAEdgeDetect [hgc1]");
  return result;
}

uint64_t HgcSMAAEdgeDetect::BindTexture(HgcSMAAEdgeDetect *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, 0.0, -1.0, 0.0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  HGHandler::TexCoord(a2, 2, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, -1.0, 0.0, 0.0);
  HGHandler::TexCoord(a2, 3, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, 1.0, 0.0, 0.0);
  HGHandler::TexCoord(a2, 4, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, 0.0, 1.0, 0.0);
  HGHandler::TexCoord(a2, 5, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, -2.0, 0.0, 0.0);
  HGHandler::TexCoord(a2, 6, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, 0.0, -2.0, 0.0);
  return 0;
}

uint64_t HgcSMAAEdgeDetect::Bind(HgcSMAAEdgeDetect *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcSMAAEdgeDetect::RenderTile(HgcSMAAEdgeDetect *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((int *)a2 + 22);
    uint64_t v6 = *((void *)a2 + 2);
    uint64_t v7 = 16 * v5;
    uint64_t v8 = *((void *)a2 + 10);
    uint64_t v9 = v8 + 16 * v5;
    int v10 = -2 * v5;
    uint64_t v11 = 16 * *((int *)a2 + 6);
    while (v4 < 2)
    {
      LODWORD(v13) = 0;
      if (v4 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v8 += v7;
      v6 += v11;
      ++v3;
      v9 += v7;
      if (v3 == v2) {
        return 0;
      }
    }
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    for (int i = v4; i > 1; i -= 2)
    {
      uint64_t v15 = *((void *)this + 51);
      int8x16_t v16 = *(int8x16_t *)(v15 + 16);
      int8x8_t v17 = (int8x8_t)vmvnq_s8(v16).u64[0];
      long long v18 = *(_OWORD *)(v8 + v12);
      *(int8x8_t *)v19.i8 = vorr_s8(vand_s8(*(int8x8_t *)v16.i8, *(int8x8_t *)(v8 + 16 * v13 - 16)), vand_s8((int8x8_t)*(_OWORD *)&vrev64q_s32(*(int32x4_t *)(v8 + 16 * ((int)v13 - (int)v5))), v17));
      *(int8x8_t *)v20.i8 = vorr_s8(vand_s8(*(int8x8_t *)v16.i8, *(int8x8_t *)&v18), vand_s8((int8x8_t)*(_OWORD *)&vrev64q_s32(*(int32x4_t *)(v8 + 16 * ((int)v13 - (int)v5 + 1))), v17));
      v19.i64[1] = *(void *)(v8 + v12 + 16);
      v20.i64[1] = *(void *)(v8 + v12 + 32);
      int8x16_t v21 = *(int8x16_t *)(v15 + 32);
      int8x16_t v22 = *(int8x16_t *)(v15 + 48);
      float32x4_t v23 = (float32x4_t)vbslq_s8(v21, vextq_s8(*(int8x16_t *)(v9 + v12), *(int8x16_t *)(v9 + v12), 4uLL), v19);
      float32x4_t v24 = (float32x4_t)vbslq_s8(v21, vextq_s8(*(int8x16_t *)(v9 + v12 + 16), *(int8x16_t *)(v9 + v12 + 16), 4uLL), v20);
      float32x4_t v25 = vabdq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v18, 0), v23);
      float32x4_t v26 = vabdq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v8 + v12 + 16), 0), v24);
      int32x2_t v27 = (int32x2_t)vmaxq_f32(v25, (float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL)).u64[0];
      int32x2_t v28 = (int32x2_t)vmaxq_f32(v26, (float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL)).u64[0];
      v23.i64[1] = *(void *)(v8 + v12 - 32);
      int8x16_t v29 = *(int8x16_t *)(v8 + 16 * (v10 + (int)v13));
      float32x4_t v30 = (float32x4_t)vbslq_s8(v21, vextq_s8(v29, v29, 4uLL), (int8x16_t)v23);
      v24.i64[1] = *(void *)(v8 + 16 * v13 - 16);
      float32x4_t v31 = (float32x4_t)vbslq_s8(v21, vextq_s8(*(int8x16_t *)(v8 + 16 * (v10 + (int)v13 + 1)), *(int8x16_t *)(v8 + 16 * (v10 + (int)v13 + 1)), 4uLL), (int8x16_t)v24);
      float32x4_t v32 = *(float32x4_t *)(v15 + 64);
      int8x16_t v33 = *(int8x16_t *)(v15 + 80);
      int8x16_t v34 = vbslq_s8(v33, (int8x16_t)vminq_f32((float32x4_t)vandq_s8(v22, (int8x16_t)vcgtq_f32(v25, *(float32x4_t *)v15)), (float32x4_t)vandq_s8(v22, (int8x16_t)vcgtq_f32(v25, vmulq_f32(vmaxq_f32(vmaxq_f32((float32x4_t)vdupq_lane_s32(v27, 0), (float32x4_t)vdupq_lane_s32(v27, 1)), vabdq_f32(v30, (float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL))), v32)))), (int8x16_t)v32);
      int8x16_t v35 = vbslq_s8(v33, (int8x16_t)vminq_f32((float32x4_t)vandq_s8(v22, (int8x16_t)vcgtq_f32(v26, *(float32x4_t *)v15)), (float32x4_t)vandq_s8(v22, (int8x16_t)vcgtq_f32(v26, vmulq_f32(vmaxq_f32(vmaxq_f32((float32x4_t)vdupq_lane_s32(v28, 0), (float32x4_t)vdupq_lane_s32(v28, 1)), vabdq_f32(v31, (float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL))), v32)))), (int8x16_t)v32);
      v13 += 2;
      float32x4_t v36 = (int8x16_t *)(v6 + v12);
      *float32x4_t v36 = v34;
      v36[1] = v35;
      v12 += 32;
    }
    if ((int)v13 >= v4) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v37 = 16 * v13;
    uint64_t v38 = v8 + 16 * (int)v13;
    uint64_t v39 = *((void *)this + 51);
    *(int8x8_t *)v40.i8 = vbsl_s8(*(int8x8_t *)(v39 + 16), *(int8x8_t *)(v38 - 16), (int8x8_t)*(_OWORD *)&vrev64q_s32(*(int32x4_t *)(v8 + 16 * ((int)v13 - (int)v5))));
    v40.i64[1] = *(void *)(v8 + 16 * (v13 | 1));
    int8x16_t v41 = *(int8x16_t *)(v39 + 32);
    float32x4_t v42 = (float32x4_t)vbslq_s8(v41, vextq_s8(*(int8x16_t *)(v8 + 16 * ((int)v13 + (int)v5)), *(int8x16_t *)(v8 + 16 * ((int)v13 + (int)v5)), 4uLL), v40);
    float32x4_t v43 = vabdq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v8 + v37), 0), v42);
    int32x2_t v44 = (int32x2_t)vmaxq_f32(v43, (float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL)).u64[0];
    v42.i64[1] = *(void *)(v38 - 32);
    float32x4_t v45 = (float32x4_t)vbslq_s8(v41, vextq_s8(*(int8x16_t *)(v8 + 16 * ((int)v13 - 2 * (int)v5)), *(int8x16_t *)(v8 + 16 * ((int)v13 - 2 * (int)v5)), 4uLL), (int8x16_t)v42);
    *(int8x16_t *)(v6 + v37) = vbslq_s8(*(int8x16_t *)(v39 + 80), (int8x16_t)vminq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(v39 + 48), (int8x16_t)vcgtq_f32(v43, *(float32x4_t *)v39)), (float32x4_t)vandq_s8(*(int8x16_t *)(v39 + 48), (int8x16_t)vcgtq_f32(v43, vmulq_f32(vmaxq_f32(vmaxq_f32((float32x4_t)vdupq_lane_s32(v44, 0), (float32x4_t)vdupq_lane_s32(v44, 1)), vabdq_f32(v45, (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45,
                                                                                               8uLL))),
                                                                            *(float32x4_t *)(v39 + 64))))),
                                 *(int8x16_t *)(v39 + 64));
    goto LABEL_3;
  }
  return 0;
}

uint64_t HgcSMAAEdgeDetect::GetDOD(HgcSMAAEdgeDetect *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  uint64_t v5 = *(void *)&a4.var2;
  uint64_t v6 = *(void *)&a4.var0;
  uint64_t v7 = HGRectMake4i(0xFFFFFFFE, 0xFFFFFFFE, 1u, 1u);
  return HGRectGrow(v6, v5, v7);
}

uint64_t HgcSMAAEdgeDetect::GetROI(HgcSMAAEdgeDetect *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  uint64_t v5 = *(void *)&a4.var2;
  uint64_t v6 = *(void *)&a4.var0;
  uint64_t v7 = HGRectMake4i(0xFFFFFFFE, 0xFFFFFFFE, 1u, 1u);
  return HGRectGrow(v6, v5, v7);
}

void HgcSMAAEdgeDetect::~HgcSMAAEdgeDetect(HGNode *this)
{
  *(void *)this = &unk_1F10E4D30;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E4D30;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HgcSMAAEdgeDetect::SetParameter(HgcSMAAEdgeDetect *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = (float *)*((void *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6) {
    return 0;
  }
  *uint64_t v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcSMAAEdgeDetect::GetParameter(HgcSMAAEdgeDetect *this, int a2, float *a3)
{
  if (!a2)
  {
    int v3 = (float *)*((void *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    float result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgcSMAAPatternSearch::GetProgram(HgcSMAAPatternSearch *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return aMetal10Len0000_923;
    }
    else {
      return aMetal10Len0000_924;
    }
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return aGlfs20Len00000_362;
  }
}

void HgcSMAAPatternSearch::InitProgramDescriptor(HgcSMAAPatternSearch *this, HGProgramDescriptor *a2)
{
}

void sub_1B78CD930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

void sub_1B78CD988(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78CD980);
}

double HgcSMAAPatternSearch::shaderDescription@<D0>(uint64_t a1@<X8>)
{
  int v3 = (char *)operator new(0x20uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1B8349220;
  strcpy(v3, "HgcSMAAPatternSearch [hgc1]");
  return *(double *)"ernSearch [hgc1]";
}

uint64_t HgcSMAAPatternSearch::BindTexture(HgcSMAAPatternSearch *this, HGHandler *a2, int a3)
{
  if (a3 == 2)
  {
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    if ((*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 43) == 1)
    {
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
      (*(void (**)(HGHandler *, void))(*(void *)a2 + 56))(a2, 0);
    }
    v8.n128_f32[0] = (float)(*((_DWORD *)a2 + 49) - *((_DWORD *)a2 + 47));
    v9.n128_f32[0] = (float)(*((_DWORD *)a2 + 50) - *((_DWORD *)a2 + 48));
    v10.n128_u64[0] = 0;
    v11.n128_u64[0] = 0;
    (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 2, v8, v9, v10, v11);
    return 0;
  }
  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    if ((*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 43) == 1)
    {
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, void))(*(void *)a2 + 56))(a2, 0);
    }
    v12.n128_f32[0] = (float)(*((_DWORD *)a2 + 49) - *((_DWORD *)a2 + 47));
    v13.n128_f32[0] = (float)(*((_DWORD *)a2 + 50) - *((_DWORD *)a2 + 48));
    v14.n128_u64[0] = 0;
    v15.n128_u64[0] = 0;
    (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 1, v12, v13, v14, v15);
    return 0;
  }
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46))
  {
    v6.n128_u32[0] = 1.0;
    v7.n128_u32[0] = 1.0;
  }
  else
  {
    v6.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
    v7.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
  }
  v4.n128_f32[0] = (float)*((int *)a2 + 60);
  v5.n128_f32[0] = (float)*((int *)a2 + 61);
  (*(void (**)(HGHandler *, void, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 0, v4, v5, v6, v7);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  HGHandler::TexCoord(a2, 4, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, -4.0, 4.0, 0.0);
  HGHandler::TexCoord(a2, 3, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, -3.0, 3.0, 0.0);
  HGHandler::TexCoord(a2, 2, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, -0.125, 1.25, 0.0);
  return 0;
}

uint64_t HgcSMAAPatternSearch::Bind(HgcSMAAPatternSearch *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcSMAAPatternSearch::RenderTile(HgcSMAAPatternSearch *this, int32x2_t *a2)
{
  uint64_t v4 = HGTile::Renderer((HGTile *)a2);
  int v5 = (*(uint64_t (**)(HgcSMAAPatternSearch *, uint64_t))(*(void *)this + 312))(this, v4);
  int32x2_t v6 = *a2;
  uint64_t v436 = (a2[1].i32[1] - HIDWORD(*(unint64_t *)a2));
  if ((int)v436 >= 1)
  {
    int v7 = a2[1].i32[0] - v6.i32[0];
    if (v7 >= 1)
    {
      uint64_t v8 = 0;
      *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
      v9.i64[1] = 0x3F80000000000000;
      uint64_t v10 = a2[11].i32[0];
      int32x2_t v11 = a2[10];
      uint64_t v12 = (v10 << 34) + 0x500000000;
      uint64_t v435 = v10 << 32;
      __asm { FMOV            V1.2S, #-1.0 }
      float32x2_t v456 = vcvt_f32_s32(vsub_s32(a2[29], a2[28]));
      float32x2_t v455 = vadd_f32(v456, _D1);
      float32x2_t v461 = vcvt_f32_s32(vsub_s32(a2[31], a2[30]));
      float32x2_t v460 = vadd_f32(v461, _D1);
      int32x2_t v442 = a2[2];
      uint64_t v434 = 16 * a2[3].i32[0];
      uint64_t v18 = *(void *)&v11 - 16 * v10;
      uint64_t v433 = 16 * v10;
      uint64_t v19 = *(void *)&v11 + 16 * v10;
      uint64_t v440 = 16 * v7;
      uint64_t v20 = *(void *)&v11 - 32 * v10;
      uint64_t v21 = *(void *)&v11 + 32 * v10;
      uint64_t v22 = *(void *)&v11 - 48 * (int)v10;
      uint64_t v23 = *(void *)&v11 + 48 * (int)v10;
      uint64_t v24 = *(void *)&v11 + (v10 << 6);
      uint64_t v25 = *(void *)&v11 - (v10 << 6);
      v26.i64[0] = 0x3F0000003F000000;
      v26.i64[1] = 0x3F0000003F000000;
      int32x2_t v441 = v11;
      float32x4_t v27 = (float32x4_t)v9;
      do
      {
        uint64_t v28 = 0;
        uint64_t v438 = v12;
        uint64_t v439 = v8 + 1;
        float32x4_t v437 = v27;
        do
        {
          uint64_t v38 = *((void *)this + 51);
          int32x2_t v39 = a2[10];
          uint64_t v40 = a2[11].i32[0];
          float32x4_t v41 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 448)), (float32x4_t)v9);
          if (v5)
          {
            int32x4_t v42 = vaddq_s32(vcvtq_s32_f32(v41), vcltzq_f32(v41));
            float32x2_t v43 = (float32x2_t)vsubq_f32(v41, vcvtq_f32_s32(v42)).u64[0];
            int32x2_t v44 = (float32x4_t *)(*(void *)&v39 + 16 * (v42.i32[0] + v42.i32[1] * (int)v40));
            float32x4_t v45 = vaddq_f32(*v44, vmulq_n_f32(vsubq_f32(v44[1], *v44), v43.f32[0]));
            uint64_t v46 = (int)v40 + 1;
            int8x16_t v47 = (int8x16_t)vaddq_f32(v45, vmulq_lane_f32(vsubq_f32(vaddq_f32(v44[v40], vmulq_n_f32(vsubq_f32(v44[v46], v44[v40]), v43.f32[0])), v45), v43, 1));
            float32x4_t v48 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 464)), (float32x4_t)v9);
            int32x4_t v49 = vaddq_s32(vcvtq_s32_f32(v48), vcltzq_f32(v48));
            v48.i64[0] = vsubq_f32(v48, vcvtq_f32_s32(v49)).u64[0];
            int v50 = (float32x4_t *)(*(void *)&v39 + 16 * (v49.i32[0] + v49.i32[1] * (int)v40));
            float32x4_t v51 = vaddq_f32(*v50, vmulq_n_f32(vsubq_f32(v50[1], *v50), v48.f32[0]));
            int8x16_t v52 = (int8x16_t)vaddq_f32(v51, vmulq_lane_f32(vsubq_f32(vaddq_f32(v50[v40], vmulq_n_f32(vsubq_f32(v50[v46], v50[v40]), v48.f32[0])), v51), *(float32x2_t *)v48.f32, 1));
            float32x4_t v53 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 528)), (float32x4_t)v9);
            int32x4_t v54 = vaddq_s32(vcvtq_s32_f32(v53), vcltzq_f32(v53));
            v53.i64[0] = vsubq_f32(v53, vcvtq_f32_s32(v54)).u64[0];
            int v55 = (float32x4_t *)(*(void *)&v39 + 16 * (v54.i32[0] + v54.i32[1] * (int)v40));
            float32x4_t v56 = vaddq_f32(*v55, vmulq_n_f32(vsubq_f32(v55[1], *v55), v53.f32[0]));
            int8x16_t v57 = (int8x16_t)vaddq_f32(v56, vmulq_lane_f32(vsubq_f32(vaddq_f32(v55[v40], vmulq_n_f32(vsubq_f32(v55[v46], v55[v40]), v53.f32[0])), v56), *(float32x2_t *)v53.f32, 1));
            float32x4_t v58 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 560)), (float32x4_t)v9);
            int32x4_t v59 = vaddq_s32(vcvtq_s32_f32(v58), vcltzq_f32(v58));
            float32x2_t v60 = (float32x2_t)vsubq_f32(v58, vcvtq_f32_s32(v59)).u64[0];
            size_t v61 = (float32x4_t *)(*(void *)&v39 + 16 * (v59.i32[0] + v59.i32[1] * (int)v40));
            float32x4_t v62 = vaddq_f32(*v61, vmulq_n_f32(vsubq_f32(v61[1], *v61), v60.f32[0]));
            int8x16_t v63 = (int8x16_t)vaddq_f32(v62, vmulq_lane_f32(vsubq_f32(vaddq_f32(v61[v40], vmulq_n_f32(vsubq_f32(v61[(int)v40 + 1], v61[v40]), v60.f32[0])), v62), v60, 1));
            float32x4_t v64 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 592)), (float32x4_t)v9);
            int32x4_t v65 = vaddq_s32(vcvtq_s32_f32(v64), vcltzq_f32(v64));
            float32x2_t v66 = (float32x2_t)vsubq_f32(v64, vcvtq_f32_s32(v65)).u64[0];
            uint64_t v67 = (float32x4_t *)(*(void *)&v39 + 16 * (v65.i32[0] + v65.i32[1] * (int)v40));
            float32x4_t v68 = vaddq_f32(*v67, vmulq_n_f32(vsubq_f32(v67[1], *v67), v66.f32[0]));
            int8x16_t v69 = (int8x16_t)vaddq_f32(v68, vmulq_lane_f32(vsubq_f32(vaddq_f32(v67[v40], vmulq_n_f32(vsubq_f32(v67[(int)v40 + 1], v67[v40]), v66.f32[0])), v68), v66, 1));
            float32x4_t v70 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 624)), (float32x4_t)v9);
            int32x4_t v71 = vaddq_s32(vcvtq_s32_f32(v70), vcltzq_f32(v70));
            float32x2_t v72 = (float32x2_t)vsubq_f32(v70, vcvtq_f32_s32(v71)).u64[0];
            float32x4_t v73 = (float32x4_t *)(*(void *)&v39 + 16 * (v71.i32[0] + v71.i32[1] * (int)v40));
            float32x4_t v74 = vaddq_f32(*v73, vmulq_n_f32(vsubq_f32(v73[1], *v73), v72.f32[0]));
            float32x4_t v75 = vaddq_f32(v74, vmulq_lane_f32(vsubq_f32(vaddq_f32(v73[v40], vmulq_n_f32(vsubq_f32(v73[(int)v40 + 1], v73[v40]), v72.f32[0])), v74), v72, 1));
          }
          else
          {
            float32x4_t v76 = vaddq_f32(v41, v26);
            int32x4_t v77 = vcvtq_s32_f32(v76);
            v76.i64[0] = vaddq_s32(v77, vcgtq_f32(vcvtq_f32_s32(v77), v76)).u64[0];
            int8x16_t v47 = *(int8x16_t *)(*(void *)&v39 + 16 * (v76.i32[0] + v76.i32[1] * (int)v40));
            float32x4_t v78 = vaddq_f32(vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 464)), (float32x4_t)v9), v26);
            int32x4_t v79 = vcvtq_s32_f32(v78);
            v78.i64[0] = vaddq_s32(v79, vcgtq_f32(vcvtq_f32_s32(v79), v78)).u64[0];
            int8x16_t v52 = *(int8x16_t *)(*(void *)&v39 + 16 * (v78.i32[0] + v78.i32[1] * (int)v40));
            float32x4_t v80 = vaddq_f32(vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 528)), (float32x4_t)v9), v26);
            int32x4_t v81 = vcvtq_s32_f32(v80);
            v80.i64[0] = vaddq_s32(v81, vcgtq_f32(vcvtq_f32_s32(v81), v80)).u64[0];
            int8x16_t v57 = *(int8x16_t *)(*(void *)&v39 + 16 * (v80.i32[0] + v80.i32[1] * (int)v40));
            float32x4_t v82 = vaddq_f32(vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 560)), (float32x4_t)v9), v26);
            int32x4_t v83 = vcvtq_s32_f32(v82);
            v82.i64[0] = vaddq_s32(v83, vcgtq_f32(vcvtq_f32_s32(v83), v82)).u64[0];
            int8x16_t v63 = *(int8x16_t *)(*(void *)&v39 + 16 * (v82.i32[0] + v82.i32[1] * (int)v40));
            float32x4_t v84 = vaddq_f32(vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 592)), (float32x4_t)v9), v26);
            int32x4_t v85 = vcvtq_s32_f32(v84);
            v84.i64[0] = vaddq_s32(v85, vcgtq_f32(vcvtq_f32_s32(v85), v84)).u64[0];
            int8x16_t v69 = *(int8x16_t *)(*(void *)&v39 + 16 * (v84.i32[0] + v84.i32[1] * (int)v40));
            float32x4_t v86 = vaddq_f32(vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 624)), (float32x4_t)v9), v26);
            int32x4_t v87 = vcvtq_s32_f32(v86);
            v86.i64[0] = vaddq_s32(v87, vcgtq_f32(vcvtq_f32_s32(v87), v86)).u64[0];
            float32x4_t v75 = *(float32x4_t *)(*(void *)&v39 + 16 * (v86.i32[0] + v86.i32[1] * (int)v40));
          }
          int8x16_t v88 = *(int8x16_t *)(v38 + 64);
          int8x16_t v90 = *(int8x16_t *)(v38 + 176);
          int8x16_t v89 = *(int8x16_t *)(v38 + 192);
          int8x16_t v91 = vmvnq_s8(v89);
          int8x16_t v92 = *(int8x16_t *)(v38 + 208);
          float32x4_t v93 = *(float32x4_t *)(v38 + 480);
          int32x2_t v94 = (int32x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v93, (float32x4_t)v52)), v90, v92).u64[0];
          int8x16_t v95 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v94, 0), (float32x4_t)vdupq_lane_s32(v94, 1)), (float32x4_t)v88);
          int8x16_t v96 = vbslq_s8(v95, v52, v47);
          int32x2_t v97 = (int32x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v93, (float32x4_t)v57)), v90, v92).u64[0];
          int8x16_t v98 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v97, 0), (float32x4_t)vdupq_lane_s32(v97, 1)), (float32x4_t)v88);
          int8x16_t v99 = vbslq_s8(v98, *(int8x16_t *)(v38 + 544), vbslq_s8(v95, *(int8x16_t *)(v38 + 512), *(int8x16_t *)(v38 + 496)));
          int8x16_t v100 = vbslq_s8(v98, v57, v96);
          v98.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v93, (float32x4_t)v63)), v90, v92).u64[0];
          int8x16_t v101 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.i8, 1)), (float32x4_t)v88);
          int8x16_t v102 = vbslq_s8(v101, *(int8x16_t *)(v38 + 576), v99);
          int8x16_t v103 = vbslq_s8(v101, v63, v100);
          v101.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v93, (float32x4_t)v69)), v90, v92).u64[0];
          int8x16_t v104 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v101.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v101.i8, 1)), (float32x4_t)v88);
          int8x16_t v105 = vbslq_s8(v104, *(int8x16_t *)(v38 + 608), v102);
          v103.i64[0] = vbslq_s8(v104, v69, v103).u64[0];
          v104.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v93, v75)), v90, v92).u64[0];
          int8x16_t v106 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v104.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v104.i8, 1)), (float32x4_t)v88);
          int8x16_t v107 = vbslq_s8(v106, *(int8x16_t *)(v38 + 640), v105);
          int32x2_t v108 = a2[14];
          long long v458 = *(_OWORD *)(v38 + 672);
          long long v459 = *(_OWORD *)(v38 + 656);
          *(int32x2_t *)v103.i8 = vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v461, vmul_f32(*(float32x2_t *)&v458, vmul_f32(*(float32x2_t *)(v38 + 656), (float32x2_t)vorr_s8(vand_s8(*(int8x8_t *)v106.i8, *(int8x8_t *)v75.f32), vand_s8(*(int8x8_t *)v103.i8, (int8x8_t)*(_OWORD *)&vmvnq_s8(v106)))))), 0), v460));
          __int32 v109 = a2[15].i32[0];
          float32x4_t v457 = *(float32x4_t *)(v38 + 688);
          int8x16_t v110 = vandq_s8(v89, (int8x16_t)vsubq_f32((float32x4_t)v107, vmulq_f32(*(float32x4_t *)(*(void *)&v108 + 16 * (v103.i32[0] + v103.i32[1] * v109)), v457)));
          float32x4_t v111 = vsubq_f32(vaddq_f32(v27, (float32x4_t)vorrq_s8(v110, vandq_s8(v107, v91))), (float32x4_t)v9);
          int8x16_t v446 = v110;
          if (v5)
          {
            int32x4_t v112 = vaddq_s32(vcvtq_s32_f32(v111), vcltzq_f32(v111));
            float32x2_t v113 = (float32x2_t)vsubq_f32(v111, vcvtq_f32_s32(v112)).u64[0];
            float32x4_t v114 = (float32x4_t *)(*(void *)&v39 + 16 * (v112.i32[0] + v112.i32[1] * (int)v40));
            float32x4_t v115 = vaddq_f32(*v114, vmulq_n_f32(vsubq_f32(v114[1], *v114), v113.f32[0]));
            uint64_t v116 = (int)v40 + 1;
            int8x16_t v445 = (int8x16_t)vaddq_f32(v115, vmulq_lane_f32(vsubq_f32(vaddq_f32(v114[v40], vmulq_n_f32(vsubq_f32(v114[v116], v114[v40]), v113.f32[0])), v115), v113, 1));
            float32x4_t v117 = vsubq_f32(vaddq_f32(v27, *(float32x4_t *)(v38 + 704)), (float32x4_t)v9);
            int32x4_t v118 = vaddq_s32(vcvtq_s32_f32(v117), vcltzq_f32(v117));
            v117.i64[0] = vsubq_f32(v117, vcvtq_f32_s32(v118)).u64[0];
            float32x4_t v119 = (float32x4_t *)(*(void *)&v39 + 16 * (v118.i32[0] + v118.i32[1] * (int)v40));
            float32x4_t v120 = vaddq_f32(*v119, vmulq_n_f32(vsubq_f32(v119[1], *v119), v117.f32[0]));
            int8x16_t v454 = (int8x16_t)vaddq_f32(v120, vmulq_lane_f32(vsubq_f32(vaddq_f32(v119[v40], vmulq_n_f32(vsubq_f32(v119[v116], v119[v40]), v117.f32[0])), v120), *(float32x2_t *)v117.f32, 1));
            float32x4_t v121 = vsubq_f32(vaddq_f32(v27, *(float32x4_t *)(v38 + 720)), (float32x4_t)v9);
            int32x4_t v122 = vaddq_s32(vcvtq_s32_f32(v121), vcltzq_f32(v121));
            v121.i64[0] = vsubq_f32(v121, vcvtq_f32_s32(v122)).u64[0];
            float32x4_t v123 = (float32x4_t *)(*(void *)&v39 + 16 * (v122.i32[0] + v122.i32[1] * (int)v40));
            float32x4_t v124 = vaddq_f32(*v123, vmulq_n_f32(vsubq_f32(v123[1], *v123), v121.f32[0]));
            int8x16_t v125 = (int8x16_t)vaddq_f32(v124, vmulq_lane_f32(vsubq_f32(vaddq_f32(v123[v40], vmulq_n_f32(vsubq_f32(v123[v116], v123[v40]), v121.f32[0])), v124), *(float32x2_t *)v121.f32, 1));
          }
          else
          {
            float32x4_t v126 = vaddq_f32(v111, v26);
            int32x4_t v127 = vcvtq_s32_f32(v126);
            v126.i64[0] = vaddq_s32(v127, vcgtq_f32(vcvtq_f32_s32(v127), v126)).u64[0];
            int8x16_t v445 = *(int8x16_t *)(*(void *)&v39 + 16 * (v126.i32[0] + v126.i32[1] * (int)v40));
            float32x4_t v128 = vaddq_f32(vsubq_f32(vaddq_f32(v27, *(float32x4_t *)(v38 + 704)), (float32x4_t)v9), v26);
            int32x4_t v129 = vcvtq_s32_f32(v128);
            v128.i64[0] = vaddq_s32(v129, vcgtq_f32(vcvtq_f32_s32(v129), v128)).u64[0];
            int8x16_t v454 = *(int8x16_t *)(*(void *)&v39 + 16 * (v128.i32[0] + v128.i32[1] * (int)v40));
            float32x4_t v130 = vaddq_f32(vsubq_f32(vaddq_f32(v27, *(float32x4_t *)(v38 + 720)), (float32x4_t)v9), v26);
            int32x4_t v131 = vcvtq_s32_f32(v130);
            v130.i64[0] = vaddq_s32(v131, vcgtq_f32(vcvtq_f32_s32(v131), v130)).u64[0];
            int8x16_t v125 = *(int8x16_t *)(*(void *)&v39 + 16 * (v130.i32[0] + v130.i32[1] * (int)v40));
          }
          int8x16_t v132 = *(int8x16_t *)(v24 + v28 - 64);
          float32x4_t v134 = *(float32x4_t *)v38;
          float32x4_t v133 = *(float32x4_t *)(v38 + 16);
          float32x4_t v135 = vmulq_f32((float32x4_t)v132, *(float32x4_t *)v38);
          int8x16_t v136 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(vaddq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1)), v133), 0)), *(int8x16_t *)(v38 + 48), *(int8x16_t *)(v38 + 32));
          int8x16_t v137 = *(int8x16_t *)(v23 + v28 - 48);
          float32x4_t v138 = vmulq_f32(*(float32x4_t *)v38, (float32x4_t)v137);
          int32x4_t v139 = (int32x4_t)vsubq_f32(vaddq_f32(v138, (float32x4_t)vrev64q_s32((int32x4_t)v138)), v133);
          int8x16_t v140 = *(int8x16_t *)(v38 + 96);
          int8x16_t v141 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v139.i8, 0)), *(int8x16_t *)(v38 + 80), v136);
          int8x16_t v142 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vrev64q_s32(v139)), v137, v132);
          int8x16_t v143 = *(int8x16_t *)(v21 + v28 - 32);
          float32x4_t v144 = vmulq_f32(*(float32x4_t *)v38, (float32x4_t)v143);
          int32x4_t v145 = (int32x4_t)vsubq_f32(vaddq_f32(v144, (float32x4_t)vrev64q_s32((int32x4_t)v144)), v133);
          int8x16_t v146 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v145.i8, 0)), v140, v141);
          int8x16_t v147 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vrev64q_s32(v145)), v143, v142);
          int8x16_t v148 = *(int8x16_t *)(v19 + v28 - 16);
          float32x4_t v149 = vmulq_f32(*(float32x4_t *)v38, (float32x4_t)v148);
          int32x4_t v150 = (int32x4_t)vsubq_f32(vaddq_f32(v149, (float32x4_t)vrev64q_s32((int32x4_t)v149)), v133);
          long long v453 = *(_OWORD *)(*(void *)&v11 + v28);
          int8x16_t v452 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v453, 0), (float32x4_t)v88);
          int8x16_t v151 = vbslq_s8(v452, (int8x16_t)vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vrev64q_s32(v150)), v148, v147), 1), v133), 0), (float32x4_t)v88), v140, v88), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v150.i8, 0)), v88, v146)), v88);
          float32x4_t v152 = vmulq_f32(*(float32x4_t *)v38, *(float32x4_t *)(v25 + v28 + 64));
          float32x4_t v153 = vmulq_f32(*(float32x4_t *)v38, *(float32x4_t *)(v22 + v28 + 48));
          float32x4_t v154 = vmulq_f32(*(float32x4_t *)v38, *(float32x4_t *)(v20 + v28 + 32));
          int8x16_t v155 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(vaddq_f32(v154, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v154.f32, 1)), v133), 0)), *(int8x16_t *)(v38 + 160), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(vaddq_f32(v153,
                                                                            (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v153.f32, 1)), v133), 0)), *(int8x16_t *)(v38 + 144), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(vaddq_f32(v152, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v152.f32, 1)), v133), 0)), *(int8x16_t *)(v38 + 128), *(int8x16_t *)(v38 + 112))));
          float32x4_t v156 = vmulq_f32(*(float32x4_t *)v38, *(float32x4_t *)(v18 + v28 + 16));
          int8x16_t v157 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(vaddq_f32(v156, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v156.f32, 1)), v133), 0)), v88, v155);
          int8x16_t v158 = (int8x16_t)vaddq_f32(v27, (float32x4_t)v151);
          int8x16_t v159 = (int8x16_t)vaddq_f32(v27, (float32x4_t)v157);
          float32x4_t v160 = vaddq_f32(vsubq_f32((float32x4_t)v158, (float32x4_t)v9), v26);
          int32x4_t v161 = vcvtq_s32_f32(v160);
          v160.i64[0] = vaddq_s32(v161, vcgtq_f32(vcvtq_f32_s32(v161), v160)).u64[0];
          float32x4_t v162 = vaddq_f32(vsubq_f32((float32x4_t)vbslq_s8(v89, (int8x16_t)vsubq_f32((float32x4_t)v158, (float32x4_t)v90), v158), (float32x4_t)v9), v26);
          int32x4_t v163 = vcvtq_s32_f32(v162);
          v162.i64[0] = vaddq_s32(v163, vcgtq_f32(vcvtq_f32_s32(v163), v162)).u64[0];
          int8x16_t v164 = (int8x16_t)vaddq_f32((float32x4_t)v90, (float32x4_t)v159);
          float32x4_t v165 = (float32x4_t)vbslq_s8(v89, v164, v159);
          float32x4_t v166 = vaddq_f32(vsubq_f32(v165, (float32x4_t)v9), v26);
          int32x4_t v167 = vcvtq_s32_f32(v166);
          v166.i64[0] = vaddq_s32(v167, vcgtq_f32(vcvtq_f32_s32(v167), v166)).u64[0];
          v162.i64[0] = vbslq_s8(v89, (int8x16_t)vrev64q_s32(*(int32x4_t *)(*(void *)&v39+ 16 * (v162.i32[0] + v162.i32[1] * (int)v40))), (int8x16_t)vrev64q_s32(*(int32x4_t *)(*(void *)&v39+ 16 * (v160.i32[0] + v160.i32[1] * (int)v40)))).u64[0];
          int8x16_t v168 = vextq_s8(v9, *(int8x16_t *)(*(void *)&v39 + 16 * (v166.i32[0] + v166.i32[1] * (int)v40)), 0xCuLL);
          v168.i64[0] = v162.i64[0];
          float32x4_t v169 = vaddq_f32(vsubq_f32((float32x4_t)vbslq_s8(v89, v164, (int8x16_t)vsubq_f32(v165, (float32x4_t)v92)), (float32x4_t)v9), v26);
          int32x4_t v170 = vcvtq_s32_f32(v169);
          v169.i64[0] = vaddq_s32(v170, vcgtq_f32(vcvtq_f32_s32(v170), v169)).u64[0];
          int8x16_t v171 = *(int8x16_t *)(*(void *)&v39 + 16 * (v169.i32[0] + v169.i32[1] * (int)v40));
          int8x16_t v172 = vbslq_s8(*(int8x16_t *)(v38 + 224), vextq_s8(v171, v171, 4uLL), v168);
          v171.i64[0] = *(void *)(v38 + 240);
          int8x16_t v174 = *(int8x16_t *)(v38 + 256);
          int8x16_t v173 = *(int8x16_t *)(v38 + 272);
          int8x16_t v175 = *(int8x16_t *)(v38 + 288);
          int32x4_t v176 = vrev64q_s32((int32x4_t)v151);
          *(float32x2_t *)v172.i8 = vmul_f32(vadd_f32(vmul_f32((float32x2_t)vqtbl1_s8(v172, *(int8x8_t *)v171.i8), *(float32x2_t *)v174.i8), (float32x2_t)vqtbl1_s8(v172, *(int8x8_t *)v173.i8)), (float32x2_t)vand_s8(*(int8x8_t *)v175.i8, (int8x8_t)*(_OWORD *)&vcgtq_f32((float32x4_t)v175, (float32x4_t)vbslq_s8(v89, vextq_s8(v151, v151, 8uLL), vextq_s8(v157, v157, 4uLL)))));
          v151.i64[0] = *(void *)(v38 + 304);
          float32x4_t v177 = vmulq_f32(*(float32x4_t *)v38, (float32x4_t)vbslq_s8(v89, *(int8x16_t *)(v25 + v28 - 48), *(int8x16_t *)(v25 + v28 - 64)));
          *(float32x2_t *)v172.i8 = vmul_f32(*(float32x2_t *)v151.i8, *(float32x2_t *)v172.i8);
          float32x4_t v178 = vmulq_f32(*(float32x4_t *)v38, (float32x4_t)vbslq_s8(v89, *(int8x16_t *)(v22 + v28 - 32), *(int8x16_t *)(v22 + v28 - 48)));
          int8x16_t v179 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(vaddq_f32(v178, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v178.f32, 1)), v133), 0)), *(int8x16_t *)(v38 + 384), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(vaddq_f32(v177,
                                                                            (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v177.f32, 1)), v133), 0)), *(int8x16_t *)(v38 + 368), *(int8x16_t *)(v38 + 352)));
          float32x4_t v180 = vmulq_f32(*(float32x4_t *)v38, (float32x4_t)vbslq_s8(v89, *(int8x16_t *)(v20 + v28 - 16), *(int8x16_t *)(v20 + v28 - 32)));
          int8x16_t v181 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(vaddq_f32(v180, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v180.f32, 1)), v133), 0)), *(int8x16_t *)(v38 + 400), v179);
          int8x16_t v182 = vbslq_s8(v89, *(int8x16_t *)(*(void *)&v441 + (v12 >> 28)), *(int8x16_t *)(v24 + v28 + 64));
          int8x16_t v183 = vbslq_s8(v89, *(int8x16_t *)(v23 + v28 + 64), *(int8x16_t *)(v23 + v28 + 48));
          float32x4_t v184 = vmulq_f32(*(float32x4_t *)v38, (float32x4_t)v183);
          int32x4_t v185 = (int32x4_t)vsubq_f32(vaddq_f32(v184, (float32x4_t)vrev64q_s32((int32x4_t)v184)), v133);
          int8x16_t v186 = vbslq_s8(v89, *(int8x16_t *)(v21 + v28 + 48), *(int8x16_t *)(v21 + v28 + 32));
          float32x4_t v187 = vmulq_f32(*(float32x4_t *)v38, (float32x4_t)v186);
          int32x4_t v188 = (int32x4_t)vsubq_f32(vaddq_f32(v187, (float32x4_t)vrev64q_s32((int32x4_t)v187)), v133);
          int8x16_t v189 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v90, (float32x4_t)vrev64q_s32(v188)), v186, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v90, (float32x4_t)vrev64q_s32(v185)), v183, v182));
          int8x16_t v190 = vbslq_s8(v89, *(int8x16_t *)(v19 + v28 + 32), *(int8x16_t *)(v19 + v28 + 16));
          float32x4_t v191 = vmulq_f32(*(float32x4_t *)v38, (float32x4_t)v190);
          int32x4_t v192 = (int32x4_t)vsubq_f32(vaddq_f32(v191, (float32x4_t)vrev64q_s32((int32x4_t)v191)), v133);
          v190.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v90, (float32x4_t)vrev64q_s32(v192)), v190, v189).u64[0];
          *(int8x8_t *)v189.i8 = vand_s8(*(int8x8_t *)v172.i8, *(int8x8_t *)v91.i8);
          float32x4_t v449 = (float32x4_t)v176;
          *(int8x8_t *)v172.i8 = vand_s8(*(int8x8_t *)v89.i8, (int8x8_t)vadd_f32(*(float32x2_t *)v176.i8, *(float32x2_t *)v172.i8));
          float32x4_t v451 = (float32x4_t)v157;
          int8x16_t v193 = *(int8x16_t *)(v38 + 416);
          *(int8x8_t *)v172.i8 = vorr_s8(vand_s8((int8x8_t)vadd_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v157.i8), (float32x2_t)vorr_s8(*(int8x8_t *)v172.i8, *(int8x8_t *)v189.i8)), *(int8x8_t *)v91.i8), *(int8x8_t *)v172.i8);
          float32x4_t v194 = vmulq_f32(*(float32x4_t *)v38, (float32x4_t)vbslq_s8(v89, *(int8x16_t *)(v18 + v28), *(int8x16_t *)(v18 + v28 - 16)));
          float32x4_t v195 = vmulq_f32(*(float32x4_t *)v38, (float32x4_t)v182);
          int8x16_t v196 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(vaddq_f32(v194, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v194.f32, 1)), v133), 0)), v88, v181);
          int8x16_t v197 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)(*(void *)&v11 + v28 + 16), 0), (float32x4_t)v88), (int8x16_t)vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v190.i8, 1), v133), 0), (float32x4_t)v88), v175, v88), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v192.i8, 0)), v88,
                                               vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v188.i8, 0)), v175, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v185.i8, 0)), v174, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(vaddq_f32(v195, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v195.f32, 1)), v133), 0)), *(int8x16_t *)(v38 + 432), v193))))), v88);
          int8x16_t v198 = (int8x16_t)vaddq_f32(v27, (float32x4_t)v196);
          float32x4_t v199 = (float32x4_t)vbslq_s8(v89, (int8x16_t)vsubq_f32((float32x4_t)v198, (float32x4_t)v90), v198);
          float32x4_t v200 = vaddq_f32(vsubq_f32(v199, (float32x4_t)v9), v26);
          int32x4_t v201 = vcvtq_s32_f32(v200);
          v200.i64[0] = vaddq_s32(v201, vcgtq_f32(vcvtq_f32_s32(v201), v200)).u64[0];
          __int32 v202 = v200.i32[1];
          __int32 v203 = v200.i32[0];
          float32x4_t v204 = vaddq_f32(vsubq_f32(vsubq_f32(v199, (float32x4_t)v140), (float32x4_t)v9), v26);
          int32x4_t v205 = vcvtq_s32_f32(v204);
          int8x16_t v206 = (int8x16_t)vaddq_f32(v27, (float32x4_t)v197);
          int v207 = v203 + v202 * v40;
          v204.i64[0] = vaddq_s32(v205, vcgtq_f32(vcvtq_f32_s32(v205), v204)).u64[0];
          __int32 v208 = v204.i32[1];
          __int32 v209 = v204.i32[0];
          float32x4_t v210 = vaddq_f32(vsubq_f32((float32x4_t)vbslq_s8(v89, (int8x16_t)vaddq_f32((float32x4_t)v90, (float32x4_t)v206), v206), (float32x4_t)v9), v26);
          int8x16_t v211 = (int8x16_t)vcvtq_s32_f32(v210);
          v210.i64[0] = vaddq_s32((int32x4_t)v211, vcgtq_f32(vcvtq_f32_s32((int32x4_t)v211), v210)).u64[0];
          *(int8x8_t *)v211.i8 = vorr_s8(vand_s8((int8x8_t)vrev64_s32(*(int32x2_t *)(*(void *)&v39+ 16 * (v209 + v208 * (int)v40))), *(int8x8_t *)v91.i8), vand_s8((int8x8_t)vrev64_s32(*(int32x2_t *)(*(void *)&v39 + 16 * v207)), *(int8x8_t *)v89.i8));
          v211.u64[1] = (unint64_t)vqtbl1_s8(*(int8x16_t *)(*(void *)&v39+ 16 * (v210.i32[0] + v210.i32[1] * (int)v40)), (int8x8_t)*(_OWORD *)&vextq_s8(v173, v173, 8uLL));
          long long v212 = *(_OWORD *)(v38 + 336);
          unsigned int v213 = a2[13].u32[0];
          *(float32x2_t *)v210.f32 = vadd_f32(vmul_f32(*(float32x2_t *)v174.i8, (float32x2_t)vqtbl1_s8(v211, *(int8x8_t *)v171.i8)), (float32x2_t)vqtbl1_s8(v211, *(int8x8_t *)v173.i8));
          v211.i64[0] = *(void *)(v38 + 320);
          v214.i64[0] = 0x3F0000003F000000;
          v214.i64[1] = 0x3F0000003F000000;
          *(int32x2_t *)v201.i8 = vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v456, vadd_f32(*(float32x2_t *)v211.i8, vmul_f32(*(float32x2_t *)&v212, *(float32x2_t *)v172.i8))), 0), v455));
          *(float32x2_t *)v210.f32 = vmul_f32(*(float32x2_t *)v151.i8, vmul_f32(*(float32x2_t *)v210.f32, (float32x2_t)vand_s8(*(int8x8_t *)v175.i8, (int8x8_t)*(_OWORD *)&vcgtq_f32((float32x4_t)v175, (float32x4_t)vbslq_s8(v89, vextq_s8(v196, v196, 8uLL), vextq_s8(v197, v197, 4uLL))))));
          *(int8x8_t *)v206.i8 = vand_s8(*(int8x8_t *)v210.f32, *(int8x8_t *)v91.i8);
          *(int8x8_t *)v210.f32 = vand_s8(*(int8x8_t *)v89.i8, (int8x8_t)vsub_f32(*(float32x2_t *)v210.f32, *(float32x2_t *)v196.i8));
          *(int32x2_t *)v210.f32 = vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v456, vadd_f32(*(float32x2_t *)v211.i8, vmul_f32(*(float32x2_t *)&v212, (float32x2_t)vorr_s8(vand_s8((int8x8_t)vadd_f32(*(float32x2_t *)v197.i8, (float32x2_t)vorr_s8(*(int8x8_t *)v210.f32, *(int8x8_t *)v206.i8)), *(int8x8_t *)v91.i8), *(int8x8_t *)v210.f32)))), 0), v455));
          *(int32x2_t *)v210.f32 = vmla_s32(vzip1_s32(*(int32x2_t *)v201.i8, *(int32x2_t *)v210.f32), vzip2_s32(*(int32x2_t *)v201.i8, *(int32x2_t *)v210.f32), vdup_n_s32(v213));
          int32x2_t v215 = a2[12];
          int32x4_t v216 = *(int32x4_t *)(*(void *)&v215 + 16 * v210.i32[1]);
          float32x4_t v217 = vsubq_f32(vaddq_f32(v27, *(float32x4_t *)(v38 + 768)), (float32x4_t)v9);
          float32x4_t v447 = *(float32x4_t *)(*(void *)&v215 + 16 * v210.i32[0]);
          if (v5)
          {
            int32x4_t v218 = vaddq_s32(vcvtq_s32_f32(v217), vcltzq_f32(v217));
            float32x2_t v219 = (float32x2_t)vsubq_f32(v217, vcvtq_f32_s32(v218)).u64[0];
            v220 = (float32x4_t *)(*(void *)&v39 + 16 * (v218.i32[0] + v218.i32[1] * (int)v40));
            float32x4_t v221 = vaddq_f32(*v220, vmulq_n_f32(vsubq_f32(v220[1], *v220), v219.f32[0]));
            int8x16_t v222 = (int8x16_t)vaddq_f32(v221, vmulq_lane_f32(vsubq_f32(vaddq_f32(v220[v40], vmulq_n_f32(vsubq_f32(v220[(int)v40 + 1], v220[v40]), v219.f32[0])), v221), v219, 1));
            v223.i64[0] = 0x3F0000003F000000;
            v223.i64[1] = 0x3F0000003F000000;
            int8x16_t v224 = *(int8x16_t *)(v38 + 784);
            float32x4_t v225 = vsubq_f32(vaddq_f32(v27, *(float32x4_t *)(v38 + 800)), (float32x4_t)v9);
            int32x4_t v226 = vaddq_s32(vcvtq_s32_f32(v225), vcltzq_f32(v225));
            v225.i64[0] = vsubq_f32(v225, vcvtq_f32_s32(v226)).u64[0];
            v227 = (float32x4_t *)(*(void *)&v39 + 16 * (v226.i32[0] + v226.i32[1] * (int)v40));
            float32x4_t v228 = vaddq_f32(*v227, vmulq_n_f32(vsubq_f32(v227[1], *v227), v225.f32[0]));
            int8x16_t v229 = (int8x16_t)vaddq_f32(v228, vmulq_lane_f32(vsubq_f32(vaddq_f32(v227[v40], vmulq_n_f32(vsubq_f32(v227[(int)v40 + 1], v227[v40]), v225.f32[0])), v228), *(float32x2_t *)v225.f32, 1));
            int8x16_t v230 = *(int8x16_t *)(v38 + 816);
            float32x4_t v231 = vsubq_f32(vaddq_f32(v27, *(float32x4_t *)(v38 + 832)), (float32x4_t)v9);
            int32x4_t v232 = vaddq_s32(vcvtq_s32_f32(v231), vcltzq_f32(v231));
            float32x2_t v233 = (float32x2_t)vsubq_f32(v231, vcvtq_f32_s32(v232)).u64[0];
            v234 = (float32x4_t *)(*(void *)&v39 + 16 * (v232.i32[0] + v232.i32[1] * (int)v40));
            float32x4_t v235 = vaddq_f32(*v234, vmulq_n_f32(vsubq_f32(v234[1], *v234), v233.f32[0]));
            int8x16_t v236 = (int8x16_t)vaddq_f32(v235, vmulq_lane_f32(vsubq_f32(vaddq_f32(v234[v40], vmulq_n_f32(vsubq_f32(v234[(int)v40 + 1], v234[v40]), v233.f32[0])), v235), v233, 1));
            int8x16_t v237 = *(int8x16_t *)(v38 + 848);
            float32x4_t v238 = vsubq_f32(vaddq_f32(v27, *(float32x4_t *)(v38 + 864)), (float32x4_t)v9);
            int32x4_t v448 = v216;
            int32x4_t v239 = vaddq_s32(vcvtq_s32_f32(v238), vcltzq_f32(v238));
            float32x2_t v240 = (float32x2_t)vsubq_f32(v238, vcvtq_f32_s32(v239)).u64[0];
            v241 = (float32x4_t *)(*(void *)&v39 + 16 * (v239.i32[0] + v239.i32[1] * (int)v40));
            float32x4_t v242 = vaddq_f32(*v241, vmulq_n_f32(vsubq_f32(v241[1], *v241), v240.f32[0]));
            float32x4_t v243 = vaddq_f32(v242, vmulq_lane_f32(vsubq_f32(vaddq_f32(v241[v40], vmulq_n_f32(vsubq_f32(v241[(int)v40 + 1], v241[v40]), v240.f32[0])), v242), v240, 1));
          }
          else
          {
            float32x4_t v244 = vaddq_f32(v217, v214);
            int32x4_t v245 = vcvtq_s32_f32(v244);
            v244.i64[0] = vaddq_s32(v245, vcgtq_f32(vcvtq_f32_s32(v245), v244)).u64[0];
            int8x16_t v222 = *(int8x16_t *)(*(void *)&v39 + 16 * (v244.i32[0] + v244.i32[1] * (int)v40));
            v223.i64[0] = 0x3F0000003F000000;
            v223.i64[1] = 0x3F0000003F000000;
            int8x16_t v224 = *(int8x16_t *)(v38 + 784);
            float32x4_t v246 = vaddq_f32(vsubq_f32(vaddq_f32(v27, *(float32x4_t *)(v38 + 800)), (float32x4_t)v9), v223);
            int32x4_t v247 = vcvtq_s32_f32(v246);
            v246.i64[0] = vaddq_s32(v247, vcgtq_f32(vcvtq_f32_s32(v247), v246)).u64[0];
            int8x16_t v229 = *(int8x16_t *)(*(void *)&v39 + 16 * (v246.i32[0] + v246.i32[1] * (int)v40));
            int8x16_t v230 = *(int8x16_t *)(v38 + 816);
            float32x4_t v248 = vaddq_f32(vsubq_f32(vaddq_f32(v27, *(float32x4_t *)(v38 + 832)), (float32x4_t)v9), v223);
            int32x4_t v249 = vcvtq_s32_f32(v248);
            v248.i64[0] = vaddq_s32(v249, vcgtq_f32(vcvtq_f32_s32(v249), v248)).u64[0];
            int8x16_t v236 = *(int8x16_t *)(*(void *)&v39 + 16 * (v248.i32[0] + v248.i32[1] * (int)v40));
            int8x16_t v237 = *(int8x16_t *)(v38 + 848);
            int32x4_t v448 = v216;
            float32x4_t v250 = vaddq_f32(vsubq_f32(vaddq_f32(v27, *(float32x4_t *)(v38 + 864)), (float32x4_t)v9), v223);
            int32x4_t v251 = vcvtq_s32_f32(v250);
            v250.i64[0] = vaddq_s32(v251, vcgtq_f32(vcvtq_f32_s32(v251), v250)).u64[0];
            float32x4_t v243 = *(float32x4_t *)(*(void *)&v39 + 16 * (v250.i32[0] + v250.i32[1] * (int)v40));
          }
          int32x2_t v252 = (int32x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v93, (float32x4_t)v125)), v90, v92).u64[0];
          int8x16_t v253 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v252, 0), (float32x4_t)vdupq_lane_s32(v252, 1)), (float32x4_t)v88);
          int8x16_t v254 = vbslq_s8(v253, *(int8x16_t *)(v38 + 752), *(int8x16_t *)(v38 + 736));
          int8x16_t v255 = vbslq_s8(v253, v125, v454);
          int32x2_t v256 = (int32x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v93, (float32x4_t)v222)), v90, v92).u64[0];
          int8x16_t v257 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v256, 0), (float32x4_t)vdupq_lane_s32(v256, 1)), (float32x4_t)v88);
          int8x16_t v258 = vbslq_s8(v257, v224, v254);
          int8x16_t v259 = vbslq_s8(v257, v222, v255);
          v257.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v93, (float32x4_t)v229)), v90, v92).u64[0];
          int8x16_t v260 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v257.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v257.i8, 1)), (float32x4_t)v88);
          int8x16_t v261 = vbslq_s8(v260, v230, v258);
          int8x16_t v262 = vbslq_s8(v260, v229, v259);
          v260.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v93, (float32x4_t)v236)), v90, v92).u64[0];
          int8x16_t v263 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v260.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v260.i8, 1)), (float32x4_t)v88);
          int8x16_t v264 = vbslq_s8(v263, v237, v261);
          int32x2_t v265 = (int32x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v93, v243)), v90, v92).u64[0];
          v262.i64[0] = vbslq_s8(v263, v236, v262).u64[0];
          int8x16_t v266 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v265, 0), (float32x4_t)vdupq_lane_s32(v265, 1)), (float32x4_t)v88);
          *(int32x2_t *)v262.i8 = vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v461, vmul_f32(*(float32x2_t *)&v458, vadd_f32(*(float32x2_t *)(v38 + 896), vmul_f32(*(float32x2_t *)&v459, (float32x2_t)vorr_s8(vand_s8(*(int8x8_t *)v266.i8, *(int8x8_t *)v243.f32), vand_s8(*(int8x8_t *)v262.i8, (int8x8_t)*(_OWORD *)&vmvnq_s8(v266))))))), 0), v460));
          int8x16_t v267 = vbslq_s8(v266, *(int8x16_t *)(v38 + 880), v264);
          float32x4_t v268 = (float32x4_t)vorrq_s8(vandq_s8(v89, (int8x16_t)vaddq_f32(vmulq_f32(v457, *(float32x4_t *)(*(void *)&v108+ 16 * (v262.i32[0] + v262.i32[1] * v109))), (float32x4_t)v267)), vandq_s8(v267, v91));
          int8x16_t v269 = (int8x16_t)vaddq_f32(v27, v268);
          float32x4_t v270 = vsubq_f32((float32x4_t)vorrq_s8(vandq_s8(v89, (int8x16_t)vaddq_f32((float32x4_t)v90, (float32x4_t)v269)), vandq_s8(v269, v91)), (float32x4_t)v9);
          if (v5)
          {
            int32x4_t v271 = vaddq_s32(vcvtq_s32_f32(v270), vcltzq_f32(v270));
            float32x2_t v272 = (float32x2_t)vsubq_f32(v270, vcvtq_f32_s32(v271)).u64[0];
            v273 = (float32x4_t *)(*(void *)&v39 + 16 * (v271.i32[0] + v271.i32[1] * (int)v40));
            float32x4_t v274 = vaddq_f32(*v273, vmulq_n_f32(vsubq_f32(v273[1], *v273), v272.f32[0]));
            int32x4_t v275 = (int32x4_t)vaddq_f32(v274, vmulq_lane_f32(vsubq_f32(vaddq_f32(v273[v40], vmulq_n_f32(vsubq_f32(v273[(int)v40 + 1], v273[v40]), v272.f32[0])), v274), v272, 1));
          }
          else
          {
            float32x4_t v276 = vaddq_f32(v270, v223);
            int32x4_t v277 = vcvtq_s32_f32(v276);
            v276.i64[0] = vaddq_s32(v277, vcgtq_f32(vcvtq_f32_s32(v277), v276)).u64[0];
            int32x4_t v275 = *(int32x4_t *)(*(void *)&v39 + 16 * (v276.i32[0] + v276.i32[1] * (int)v40));
          }
          float32x4_t v278 = vabsq_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32((int32x4_t)v268), v91), v446));
          float32x4_t v279 = *(float32x4_t *)(v38 + 928);
          float32x4_t v280 = vminq_f32(vmulq_f32(vrsqrteq_f32(v278), *(float32x4_t *)(v38 + 912)), v279);
          *(int32x2_t *)v278.f32 = vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v456, vadd_f32(*(float32x2_t *)(v38 + 960), vmul_f32(*(float32x2_t *)&v212, vadd_f32(vmul_f32(*(float32x2_t *)v278.f32, vmin_f32(vmul_f32(*(float32x2_t *)v280.f32, (float32x2_t)*(_OWORD *)&vrsqrtsq_f32(vmulq_f32(v278, v280), v280)), *(float32x2_t *)v279.f32)), vmul_f32(
                                                   *(float32x2_t *)(v38 + 944),
                                                   (float32x2_t)*(_OWORD *)&vcvtq_f32_s32(vcvtq_s32_f32(vaddq_f32(v134, vmulq_f32((float32x4_t)v193, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32(v275), v91), vandq_s8(v89, v445))))))))))), 0), v455));
          int8x16_t v281 = *(int8x16_t *)(*(void *)&v215 + 16 * (int)(v278.i32[0] + v278.i32[1] * v213));
          float32x4_t v282 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 976)), (float32x4_t)v9);
          if (v5)
          {
            int32x4_t v283 = vaddq_s32(vcvtq_s32_f32(v282), vcltzq_f32(v282));
            float32x2_t v284 = (float32x2_t)vsubq_f32(v282, vcvtq_f32_s32(v283)).u64[0];
            v285 = (float32x4_t *)(*(void *)&v39 + 16 * (v283.i32[0] + v283.i32[1] * (int)v40));
            float32x4_t v286 = vaddq_f32(*v285, vmulq_n_f32(vsubq_f32(v285[1], *v285), v284.f32[0]));
            uint64_t v287 = (int)v40 + 1;
            int8x16_t v288 = (int8x16_t)vaddq_f32(v286, vmulq_lane_f32(vsubq_f32(vaddq_f32(v285[v40], vmulq_n_f32(vsubq_f32(v285[v287], v285[v40]), v284.f32[0])), v286), v284, 1));
            float32x4_t v289 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 992)), (float32x4_t)v9);
            int32x4_t v290 = vaddq_s32(vcvtq_s32_f32(v289), vcltzq_f32(v289));
            v289.i64[0] = vsubq_f32(v289, vcvtq_f32_s32(v290)).u64[0];
            v291 = (float32x4_t *)(*(void *)&v39 + 16 * (v290.i32[0] + v290.i32[1] * (int)v40));
            float32x4_t v292 = vaddq_f32(*v291, vmulq_n_f32(vsubq_f32(v291[1], *v291), v289.f32[0]));
            int8x16_t v293 = (int8x16_t)vaddq_f32(v292, vmulq_lane_f32(vsubq_f32(vaddq_f32(v291[v40], vmulq_n_f32(vsubq_f32(v291[v287], v291[v40]), v289.f32[0])), v292), *(float32x2_t *)v289.f32, 1));
          }
          else
          {
            float32x4_t v294 = vaddq_f32(v282, v223);
            int32x4_t v295 = vcvtq_s32_f32(v294);
            v294.i64[0] = vaddq_s32(v295, vcgtq_f32(vcvtq_f32_s32(v295), v294)).u64[0];
            int8x16_t v288 = *(int8x16_t *)(*(void *)&v39 + 16 * (v294.i32[0] + v294.i32[1] * (int)v40));
            float32x4_t v296 = vaddq_f32(vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 992)), (float32x4_t)v9), v223);
            int32x4_t v297 = vcvtq_s32_f32(v296);
            v296.i64[0] = vaddq_s32(v297, vcgtq_f32(vcvtq_f32_s32(v297), v296)).u64[0];
            int8x16_t v293 = *(int8x16_t *)(*(void *)&v39 + 16 * (v296.i32[0] + v296.i32[1] * (int)v40));
          }
          float32x4_t v298 = *(float32x4_t *)(v38 + 1008);
          float32x4_t v299 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1056)), (float32x4_t)v9);
          if (v5)
          {
            int32x4_t v300 = vaddq_s32(vcvtq_s32_f32(v299), vcltzq_f32(v299));
            float32x2_t v301 = (float32x2_t)vsubq_f32(v299, vcvtq_f32_s32(v300)).u64[0];
            v302 = (float32x4_t *)(*(void *)&v39 + 16 * (v300.i32[0] + v300.i32[1] * (int)v40));
            float32x4_t v303 = vaddq_f32(*v302, vmulq_n_f32(vsubq_f32(v302[1], *v302), v301.f32[0]));
            int8x16_t v304 = (int8x16_t)vaddq_f32(v303, vmulq_lane_f32(vsubq_f32(vaddq_f32(v302[v40], vmulq_n_f32(vsubq_f32(v302[(int)v40 + 1], v302[v40]), v301.f32[0])), v303), v301, 1));
            int8x16_t v305 = *(int8x16_t *)(v38 + 1072);
            float32x4_t v306 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1088)), (float32x4_t)v9);
            long long v444 = *(_OWORD *)(v38 + 944);
            int32x4_t v307 = vaddq_s32(vcvtq_s32_f32(v306), vcltzq_f32(v306));
            v306.i64[0] = vsubq_f32(v306, vcvtq_f32_s32(v307)).u64[0];
            v308 = (float32x4_t *)(*(void *)&v39 + 16 * (v307.i32[0] + v307.i32[1] * (int)v40));
            float32x4_t v309 = vaddq_f32(*v308, vmulq_n_f32(vsubq_f32(v308[1], *v308), v306.f32[0]));
            int8x16_t v310 = (int8x16_t)vaddq_f32(v309, vmulq_lane_f32(vsubq_f32(vaddq_f32(v308[v40], vmulq_n_f32(vsubq_f32(v308[(int)v40 + 1], v308[v40]), v306.f32[0])), v309), *(float32x2_t *)v306.f32, 1));
            int8x16_t v311 = *(int8x16_t *)(v38 + 1104);
            float32x4_t v312 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1120)), (float32x4_t)v9);
            int8x16_t v443 = v281;
            int32x4_t v313 = vaddq_s32(vcvtq_s32_f32(v312), vcltzq_f32(v312));
            float32x2_t v314 = (float32x2_t)vsubq_f32(v312, vcvtq_f32_s32(v313)).u64[0];
            v315 = (float32x4_t *)(*(void *)&v39 + 16 * (v313.i32[0] + v313.i32[1] * (int)v40));
            float32x4_t v316 = vaddq_f32(*v315, vmulq_n_f32(vsubq_f32(v315[1], *v315), v314.f32[0]));
            int8x16_t v317 = (int8x16_t)vaddq_f32(v316, vmulq_lane_f32(vsubq_f32(vaddq_f32(v315[v40], vmulq_n_f32(vsubq_f32(v315[(int)v40 + 1], v315[v40]), v314.f32[0])), v316), v314, 1));
            int8x16_t v318 = *(int8x16_t *)(v38 + 1136);
            float32x4_t v319 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1152)), (float32x4_t)v9);
            float32x4_t v450 = *(float32x4_t *)(v38 + 416);
            int32x4_t v320 = vaddq_s32(vcvtq_s32_f32(v319), vcltzq_f32(v319));
            float32x2_t v321 = (float32x2_t)vsubq_f32(v319, vcvtq_f32_s32(v320)).u64[0];
            v322 = (float32x4_t *)(*(void *)&v39 + 16 * (v320.i32[0] + v320.i32[1] * (int)v40));
            float32x4_t v323 = vaddq_f32(*v322, vmulq_n_f32(vsubq_f32(v322[1], *v322), v321.f32[0]));
            float32x4_t v324 = vaddq_f32(v323, vmulq_lane_f32(vsubq_f32(vaddq_f32(v322[v40], vmulq_n_f32(vsubq_f32(v322[(int)v40 + 1], v322[v40]), v321.f32[0])), v323), v321, 1));
          }
          else
          {
            float32x4_t v325 = vaddq_f32(v299, v223);
            int32x4_t v326 = vcvtq_s32_f32(v325);
            v325.i64[0] = vaddq_s32(v326, vcgtq_f32(vcvtq_f32_s32(v326), v325)).u64[0];
            int8x16_t v304 = *(int8x16_t *)(*(void *)&v39 + 16 * (v325.i32[0] + v325.i32[1] * (int)v40));
            int8x16_t v305 = *(int8x16_t *)(v38 + 1072);
            long long v444 = *(_OWORD *)(v38 + 944);
            float32x4_t v327 = vaddq_f32(vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1088)), (float32x4_t)v9), v223);
            int32x4_t v328 = vcvtq_s32_f32(v327);
            v327.i64[0] = vaddq_s32(v328, vcgtq_f32(vcvtq_f32_s32(v328), v327)).u64[0];
            int8x16_t v310 = *(int8x16_t *)(*(void *)&v39 + 16 * (v327.i32[0] + v327.i32[1] * (int)v40));
            int8x16_t v311 = *(int8x16_t *)(v38 + 1104);
            int8x16_t v443 = v281;
            float32x4_t v329 = vaddq_f32(vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1120)), (float32x4_t)v9), v223);
            int32x4_t v330 = vcvtq_s32_f32(v329);
            v329.i64[0] = vaddq_s32(v330, vcgtq_f32(vcvtq_f32_s32(v330), v329)).u64[0];
            int8x16_t v317 = *(int8x16_t *)(*(void *)&v39 + 16 * (v329.i32[0] + v329.i32[1] * (int)v40));
            int8x16_t v318 = *(int8x16_t *)(v38 + 1136);
            float32x4_t v450 = *(float32x4_t *)(v38 + 416);
            float32x4_t v331 = vaddq_f32(vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1152)), (float32x4_t)v9), v223);
            int32x4_t v332 = vcvtq_s32_f32(v331);
            v331.i64[0] = vaddq_s32(v332, vcgtq_f32(vcvtq_f32_s32(v332), v331)).u64[0];
            float32x4_t v324 = *(float32x4_t *)(*(void *)&v39 + 16 * (v331.i32[0] + v331.i32[1] * (int)v40));
          }
          int32x2_t v333 = (int32x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v298, (float32x4_t)v293)), v92, v90).u64[0];
          int8x16_t v334 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v333, 0), (float32x4_t)vdupq_lane_s32(v333, 1)), (float32x4_t)v88);
          int8x16_t v335 = vbslq_s8(v334, *(int8x16_t *)(v38 + 1040), *(int8x16_t *)(v38 + 1024));
          int8x16_t v336 = vbslq_s8(v334, v293, v288);
          int32x2_t v337 = (int32x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v298, (float32x4_t)v304)), v92, v90).u64[0];
          int8x16_t v338 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v337, 0), (float32x4_t)vdupq_lane_s32(v337, 1)), (float32x4_t)v88);
          int8x16_t v339 = vbslq_s8(v338, v305, v335);
          int8x16_t v340 = vbslq_s8(v338, v304, v336);
          v338.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v298, (float32x4_t)v310)), v92, v90).u64[0];
          int8x16_t v341 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v338.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v338.i8, 1)), (float32x4_t)v88);
          int8x16_t v342 = vbslq_s8(v341, v311, v339);
          int32x2_t v343 = (int32x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v298, (float32x4_t)v317)), v92, v90).u64[0];
          int8x16_t v344 = vbslq_s8(v341, v310, v340);
          int8x16_t v345 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v343, 0), (float32x4_t)vdupq_lane_s32(v343, 1)), (float32x4_t)v88);
          int8x16_t v346 = vbslq_s8(v345, v318, v342);
          v344.i64[0] = vbslq_s8(v345, v317, v344).u64[0];
          v345.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v298, v324)), v92, v90).u64[0];
          int8x16_t v347 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v345.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v345.i8, 1)), (float32x4_t)v88);
          *(int32x2_t *)v344.i8 = vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v461, vmul_f32(*(float32x2_t *)&v458, vmul_f32(*(float32x2_t *)&v459, (float32x2_t)vrev64_s32((int32x2_t)vorr_s8(vand_s8(*(int8x8_t *)v347.i8, *(int8x8_t *)v324.f32), vand_s8(*(int8x8_t *)v344.i8, (int8x8_t)*(_OWORD *)&vmvnq_s8(v347))))))), 0), v460));
          int8x16_t v348 = vbslq_s8(v347, *(int8x16_t *)(v38 + 1168), v346);
          float32x4_t v349 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vsubq_f32((float32x4_t)v348, vmulq_n_f32(v457, COERCE_FLOAT(*(_OWORD *)(*(void *)&v108+ 16 * (v344.i32[0] + v344.i32[1] * v109))))), v91), vandq_s8(v348, v89));
          float32x4_t v350 = vsubq_f32(vaddq_f32(v27, v349), (float32x4_t)v9);
          if (v5)
          {
            int32x4_t v351 = vaddq_s32(vcvtq_s32_f32(v350), vcltzq_f32(v350));
            float32x2_t v352 = (float32x2_t)vsubq_f32(v350, vcvtq_f32_s32(v351)).u64[0];
            v353 = (float32x4_t *)(*(void *)&v39 + 16 * (v351.i32[0] + v351.i32[1] * (int)v40));
            float32x4_t v354 = vaddq_f32(*v353, vmulq_n_f32(vsubq_f32(v353[1], *v353), v352.f32[0]));
            uint64_t v355 = (int)v40 + 1;
            int8x16_t v356 = (int8x16_t)vrev64q_s32((int32x4_t)vaddq_f32(v354, vmulq_lane_f32(vsubq_f32(vaddq_f32(v353[v40], vmulq_n_f32(vsubq_f32(v353[v355], v353[v40]), v352.f32[0])), v354), v352, 1)));
            float32x4_t v357 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1184)), (float32x4_t)v9);
            int32x4_t v358 = vaddq_s32(vcvtq_s32_f32(v357), vcltzq_f32(v357));
            v357.i64[0] = vsubq_f32(v357, vcvtq_f32_s32(v358)).u64[0];
            v359 = (float32x4_t *)(*(void *)&v39 + 16 * (v358.i32[0] + v358.i32[1] * (int)v40));
            float32x4_t v360 = vaddq_f32(*v359, vmulq_n_f32(vsubq_f32(v359[1], *v359), v357.f32[0]));
            int8x16_t v361 = (int8x16_t)vaddq_f32(v360, vmulq_lane_f32(vsubq_f32(vaddq_f32(v359[v40], vmulq_n_f32(vsubq_f32(v359[v355], v359[v40]), v357.f32[0])), v360), *(float32x2_t *)v357.f32, 1));
            float32x4_t v362 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1200)), (float32x4_t)v9);
            int32x4_t v363 = vaddq_s32(vcvtq_s32_f32(v362), vcltzq_f32(v362));
            v362.i64[0] = vsubq_f32(v362, vcvtq_f32_s32(v363)).u64[0];
            v364 = (float32x4_t *)(*(void *)&v39 + 16 * (v363.i32[0] + v363.i32[1] * (int)v40));
            float32x4_t v365 = vaddq_f32(*v364, vmulq_n_f32(vsubq_f32(v364[1], *v364), v362.f32[0]));
            int8x16_t v366 = (int8x16_t)vaddq_f32(v365, vmulq_lane_f32(vsubq_f32(vaddq_f32(v364[v40], vmulq_n_f32(vsubq_f32(v364[v355], v364[v40]), v362.f32[0])), v365), *(float32x2_t *)v362.f32, 1));
            int8x16_t v367 = *(int8x16_t *)(v38 + 1232);
            int8x16_t v368 = *(int8x16_t *)(v38 + 1216);
            float32x4_t v369 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1248)), (float32x4_t)v9);
            int32x4_t v370 = vaddq_s32(vcvtq_s32_f32(v369), vcltzq_f32(v369));
            v369.i64[0] = vsubq_f32(v369, vcvtq_f32_s32(v370)).u64[0];
            v371 = (float32x4_t *)(*(void *)&v39 + 16 * (v370.i32[0] + v370.i32[1] * (int)v40));
            float32x4_t v372 = vaddq_f32(*v371, vmulq_n_f32(vsubq_f32(v371[1], *v371), v369.f32[0]));
            int8x16_t v373 = (int8x16_t)vaddq_f32(v372, vmulq_lane_f32(vsubq_f32(vaddq_f32(v371[v40], vmulq_n_f32(vsubq_f32(v371[v355], v371[v40]), v369.f32[0])), v372), *(float32x2_t *)v369.f32, 1));
            int8x16_t v374 = *(int8x16_t *)(v38 + 1264);
            float32x4_t v375 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1280)), (float32x4_t)v9);
            int32x4_t v376 = vaddq_s32(vcvtq_s32_f32(v375), vcltzq_f32(v375));
            float32x2_t v377 = (float32x2_t)vsubq_f32(v375, vcvtq_f32_s32(v376)).u64[0];
            v378 = (float32x4_t *)(*(void *)&v39 + 16 * (v376.i32[0] + v376.i32[1] * (int)v40));
            float32x4_t v379 = vaddq_f32(*v378, vmulq_n_f32(vsubq_f32(v378[1], *v378), v377.f32[0]));
            int8x16_t v380 = (int8x16_t)vaddq_f32(v379, vmulq_lane_f32(vsubq_f32(vaddq_f32(v378[v40], vmulq_n_f32(vsubq_f32(v378[(int)v40 + 1], v378[v40]), v377.f32[0])), v379), v377, 1));
            int8x16_t v381 = *(int8x16_t *)(v38 + 1296);
            float32x4_t v382 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1312)), (float32x4_t)v9);
            int32x4_t v383 = vaddq_s32(vcvtq_s32_f32(v382), vcltzq_f32(v382));
            float32x2_t v384 = (float32x2_t)vsubq_f32(v382, vcvtq_f32_s32(v383)).u64[0];
            v385 = (float32x4_t *)(*(void *)&v39 + 16 * (v383.i32[0] + v383.i32[1] * (int)v40));
            float32x4_t v386 = vaddq_f32(*v385, vmulq_n_f32(vsubq_f32(v385[1], *v385), v384.f32[0]));
            int8x16_t v387 = (int8x16_t)vaddq_f32(v386, vmulq_lane_f32(vsubq_f32(vaddq_f32(v385[v40], vmulq_n_f32(vsubq_f32(v385[(int)v40 + 1], v385[v40]), v384.f32[0])), v386), v384, 1));
            int8x16_t v388 = *(int8x16_t *)(v38 + 1328);
            float32x4_t v389 = vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1344)), (float32x4_t)v9);
            v390.i64[0] = 0x3F0000003F000000;
            v390.i64[1] = 0x3F0000003F000000;
            int32x4_t v391 = vaddq_s32(vcvtq_s32_f32(v389), vcltzq_f32(v389));
            float32x2_t v392 = (float32x2_t)vsubq_f32(v389, vcvtq_f32_s32(v391)).u64[0];
            v393 = (float32x4_t *)(*(void *)&v39 + 16 * (v391.i32[0] + v391.i32[1] * (int)v40));
            float32x4_t v394 = vaddq_f32(*v393, vmulq_n_f32(vsubq_f32(v393[1], *v393), v392.f32[0]));
            float32x4_t v395 = vaddq_f32(v394, vmulq_lane_f32(vsubq_f32(vaddq_f32(v393[v40], vmulq_n_f32(vsubq_f32(v393[(int)v40 + 1], v393[v40]), v392.f32[0])), v394), v392, 1));
          }
          else
          {
            float32x4_t v396 = vaddq_f32(v350, v223);
            int32x4_t v397 = vcvtq_s32_f32(v396);
            v396.i64[0] = vaddq_s32(v397, vcgtq_f32(vcvtq_f32_s32(v397), v396)).u64[0];
            int8x16_t v356 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(*(void *)&v39 + 16 * (v396.i32[0] + v396.i32[1] * (int)v40)));
            float32x4_t v398 = vaddq_f32(vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1184)), (float32x4_t)v9), v223);
            int32x4_t v399 = vcvtq_s32_f32(v398);
            v398.i64[0] = vaddq_s32(v399, vcgtq_f32(vcvtq_f32_s32(v399), v398)).u64[0];
            int8x16_t v361 = *(int8x16_t *)(*(void *)&v39 + 16 * (v398.i32[0] + v398.i32[1] * (int)v40));
            float32x4_t v400 = vaddq_f32(vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1200)), (float32x4_t)v9), v223);
            int32x4_t v401 = vcvtq_s32_f32(v400);
            v400.i64[0] = vaddq_s32(v401, vcgtq_f32(vcvtq_f32_s32(v401), v400)).u64[0];
            int8x16_t v366 = *(int8x16_t *)(*(void *)&v39 + 16 * (v400.i32[0] + v400.i32[1] * (int)v40));
            int8x16_t v367 = *(int8x16_t *)(v38 + 1232);
            int8x16_t v368 = *(int8x16_t *)(v38 + 1216);
            float32x4_t v402 = vaddq_f32(vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1248)), (float32x4_t)v9), v223);
            int32x4_t v403 = vcvtq_s32_f32(v402);
            v402.i64[0] = vaddq_s32(v403, vcgtq_f32(vcvtq_f32_s32(v403), v402)).u64[0];
            int8x16_t v373 = *(int8x16_t *)(*(void *)&v39 + 16 * (v402.i32[0] + v402.i32[1] * (int)v40));
            int8x16_t v374 = *(int8x16_t *)(v38 + 1264);
            float32x4_t v404 = vaddq_f32(vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1280)), (float32x4_t)v9), v223);
            int32x4_t v405 = vcvtq_s32_f32(v404);
            v404.i64[0] = vaddq_s32(v405, vcgtq_f32(vcvtq_f32_s32(v405), v404)).u64[0];
            int8x16_t v380 = *(int8x16_t *)(*(void *)&v39 + 16 * (v404.i32[0] + v404.i32[1] * (int)v40));
            int8x16_t v381 = *(int8x16_t *)(v38 + 1296);
            float32x4_t v406 = vaddq_f32(vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1312)), (float32x4_t)v9), v223);
            int32x4_t v407 = vcvtq_s32_f32(v406);
            v406.i64[0] = vaddq_s32(v407, vcgtq_f32(vcvtq_f32_s32(v407), v406)).u64[0];
            int8x16_t v387 = *(int8x16_t *)(*(void *)&v39 + 16 * (v406.i32[0] + v406.i32[1] * (int)v40));
            int8x16_t v388 = *(int8x16_t *)(v38 + 1328);
            v390.i64[0] = 0x3F0000003F000000;
            v390.i64[1] = 0x3F0000003F000000;
            float32x4_t v408 = vaddq_f32(vsubq_f32(vsubq_f32(v27, *(float32x4_t *)(v38 + 1344)), (float32x4_t)v9), v223);
            int32x4_t v409 = vcvtq_s32_f32(v408);
            v408.i64[0] = vaddq_s32(v409, vcgtq_f32(vcvtq_f32_s32(v409), v408)).u64[0];
            float32x4_t v395 = *(float32x4_t *)(*(void *)&v39 + 16 * (v408.i32[0] + v408.i32[1] * (int)v40));
          }
          int32x2_t v410 = (int32x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v298, (float32x4_t)v366)), v92, v90).u64[0];
          int8x16_t v411 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v410, 0), (float32x4_t)vdupq_lane_s32(v410, 1)), (float32x4_t)v88);
          int32x2_t v412 = (int32x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v298, (float32x4_t)v373)), v92, v90).u64[0];
          int8x16_t v413 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v412, 0), (float32x4_t)vdupq_lane_s32(v412, 1)), (float32x4_t)v88);
          int8x16_t v414 = vbslq_s8(v413, v374, vbslq_s8(v411, v367, v368));
          int8x16_t v415 = vbslq_s8(v413, v373, vbslq_s8(v411, v366, v361));
          v413.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v298, (float32x4_t)v380)), v92, v90).u64[0];
          int8x16_t v416 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v413.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v413.i8, 1)), (float32x4_t)v88);
          int8x16_t v417 = vbslq_s8(v416, v381, v414);
          int8x16_t v418 = vbslq_s8(v416, v380, v415);
          v416.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v298, (float32x4_t)v387)), v92, v90).u64[0];
          int8x16_t v419 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v416.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v416.i8, 1)), (float32x4_t)v88);
          int32x2_t v420 = (int32x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, vsubq_f32(v298, v395)), v92, v90).u64[0];
          int8x16_t v421 = (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(v420, 0), (float32x4_t)vdupq_lane_s32(v420, 1)), (float32x4_t)v88);
          int32x2_t v422 = vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v461, vmul_f32(*(float32x2_t *)&v458, vadd_f32(*(float32x2_t *)(v38 + 896), vmul_f32(*(float32x2_t *)&v459, (float32x2_t)vrev64_s32((int32x2_t)vorr_s8(vand_s8(*(int8x8_t *)v421.i8, *(int8x8_t *)v395.f32), vand_s8((int8x8_t)*(_OWORD *)&vbslq_s8(v419, v387, v418), (int8x8_t)*(_OWORD *)&vmvnq_s8(v421)))))))), 0), v460));
          int8x16_t v423 = vbslq_s8(v421, *(int8x16_t *)(v38 + 1360), vbslq_s8(v419, v388, v417));
          int8x16_t v424 = vandq_s8(v423, v89);
          int8x16_t v425 = vandq_s8((int8x16_t)vaddq_f32(vmulq_n_f32(v457, COERCE_FLOAT(*(_OWORD *)(*(void *)&v108 + 16 * (v422.i32[0] + v422.i32[1] * v109)))), (float32x4_t)v423), v91);
          int8x16_t v426 = (int8x16_t)vaddq_f32(v27, (float32x4_t)vorrq_s8(v425, v424));
          float32x4_t v427 = vsubq_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_f32((float32x4_t)v92, (float32x4_t)v426), v91), vandq_s8(v89, v426)), (float32x4_t)v9);
          if (v5)
          {
            int32x4_t v428 = vaddq_s32(vcvtq_s32_f32(v427), vcltzq_f32(v427));
            float32x2_t v429 = (float32x2_t)vsubq_f32(v427, vcvtq_f32_s32(v428)).u64[0];
            v430 = (float32x4_t *)(*(void *)&v39 + 16 * (v428.i32[0] + v428.i32[1] * (int)v40));
            float32x4_t v431 = vaddq_f32(*v430, vmulq_n_f32(vsubq_f32(v430[1], *v430), v429.f32[0]));
            int8x16_t v31 = (int8x16_t)vaddq_f32(v431, vmulq_lane_f32(vsubq_f32(vaddq_f32(v430[v40], vmulq_n_f32(vsubq_f32(v430[(int)v40 + 1], v430[v40]), v429.f32[0])), v431), v429, 1));
          }
          else
          {
            float32x4_t v29 = vaddq_f32(v427, v390);
            int32x4_t v30 = vcvtq_s32_f32(v29);
            v29.i64[0] = vaddq_s32(v30, vcgtq_f32(vcvtq_f32_s32(v30), v29)).u64[0];
            int8x16_t v31 = *(int8x16_t *)(*(void *)&v39 + 16 * (v29.i32[0] + v29.i32[1] * (int)v40));
          }
          float32x4_t v32 = vaddq_f32(vmulq_n_f32(v447, *(float *)vandq_s8(v175, (int8x16_t)vcgtq_f32(vaddq_f32(v449, v451), (float32x4_t)v174)).i32), vmulq_n_f32((float32x4_t)vrev64q_s32(v448), *(float *)vandq_s8(v175, (int8x16_t)vcgtq_f32(vsubq_f32((float32x4_t)v197, (float32x4_t)v196), (float32x4_t)v174)).i32));
          float32x4_t v33 = vabsq_f32((float32x4_t)vorrq_s8(v425, vandq_s8((int8x16_t)vrev64q_s32((int32x4_t)v349), v89)));
          float32x4_t v34 = vminq_f32(vmulq_f32(*(float32x4_t *)(v38 + 912), vrsqrteq_f32(v33)), v279);
          int32x2_t v35 = vcvt_s32_f32(vmin_f32(vmax_f32(vmul_f32(v456, vadd_f32(*(float32x2_t *)(v38 + 960), vmul_f32(*(float32x2_t *)&v212, vadd_f32(vmul_f32(*(float32x2_t *)v33.f32, vmin_f32(vmul_f32(*(float32x2_t *)v34.f32, (float32x2_t)*(_OWORD *)&vrsqrtsq_f32(vmulq_f32(v33, v34), v34)), *(float32x2_t *)v279.f32)), vmul_f32(*(float32x2_t *)&v444, (float32x2_t)*(_OWORD *)&vcvtq_f32_s32(
                                                           vcvtq_s32_f32(vaddq_f32(v134, vmulq_f32(v450, (float32x4_t)vorrq_s8(vandq_s8(v31, v91), vandq_s8(v89, v356))))))))))), 0), v455));
          int8x16_t v36 = (int8x16_t)vcgtq_f32(v32, (float32x4_t)v88);
          v34.i64[0] = vmvnq_s8(v36).u64[0];
          int8x8_t v37 = vorr_s8(vand_s8(vorr_s8(vand_s8(*(int8x8_t *)(*(void *)&v215 + 16 * (int)(v35.i32[0] + v35.i32[1] * v213)), *(int8x8_t *)v452.i8), (int8x8_t)*(_OWORD *)&vbicq_s8(v88, v452)), *(int8x8_t *)v34.f32), vand_s8(*(int8x8_t *)v36.i8, *(int8x8_t *)v88.i8));
          *(int8x8_t *)v36.i8 = vorr_s8(vand_s8((int8x8_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v453, 1), (float32x4_t)v88), v443, v88), *(int8x8_t *)v34.f32), vand_s8(*(int8x8_t *)v36.i8, *(int8x8_t *)v32.f32));
          v36.u64[1] = (unint64_t)v37;
          *(int8x16_t *)(*(void *)&v442 + v28) = v36;
          float32x4_t v27 = vaddq_f32(v27, (float32x4_t)xmmword_1B7E736B0);
          v12 += 0x100000000;
          v28 += 16;
          v26.i64[0] = 0x3F0000003F000000;
          v26.i64[1] = 0x3F0000003F000000;
        }
        while (v440 != v28);
        uint64_t v8 = v439;
        uint64_t v12 = v438 + v435;
        *(void *)&v442 += v434;
        float32x4_t v27 = vaddq_f32(v437, (float32x4_t)xmmword_1B7E736C0);
        v18 += v433;
        v19 += v433;
        v20 += v433;
        v21 += v433;
        *(void *)&v11 += v433;
        v22 += v433;
        v23 += v433;
        v24 += v433;
        v25 += v433;
      }
      while (v439 != v436);
    }
  }
  return 0;
}

uint64_t HgcSMAAPatternSearch::GetDOD(HGNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  if (a3 == 2 || a3 == 1)
  {
    Input = HGRenderer::GetInput(a2, this, a3);
    uint64_t DOD = HGRenderer::GetDOD(a2, Input);
    uint64_t v13 = HGRectIntersection(v5, v4, DOD, v12);
    if (!HGRectIsNull(v13, v14))
    {
      __n128 v15 = HGRenderer::GetInput(a2, this, 0);
      uint64_t v16 = HGRenderer::GetDOD(a2, v15);
      return HGRectUnion(v16, v17, 0, 0);
    }
    return 0;
  }
  if (a3) {
    return 0;
  }
  if ((*(int (**)(HGNode *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
  {
    uint64_t v8 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    HGRectGrow(v5, v4, v8);
  }
  return 0x8000000080000000;
}

uint64_t HgcSMAAPatternSearch::GetROI(HGNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 == 2 || a3 == 1)
  {
    Input = HGRenderer::GetInput(a2, this, a3);
    return HGRenderer::GetDOD(a2, Input);
  }
  if (!a3)
  {
    int32x2_t v6 = HGRenderer::GetInput(a2, this, 0);
    uint64_t DOD = HGRenderer::GetDOD(a2, v6);
    uint64_t v9 = v8;
    if ((*(int (**)(HGNode *, HGRenderer *))(*(void *)this + 312))(this, a2) < 1) {
      return DOD;
    }
    uint64_t v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return 0;
}

void HgcSMAAPatternSearch::HgcSMAAPatternSearch(HgcSMAAPatternSearch *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F10E4F80;
  operator new();
}

void sub_1B78D02D4(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSMAAPatternSearch::~HgcSMAAPatternSearch(HGNode *this)
{
  *(void *)this = &unk_1F10E4F80;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C4040DFEAD7);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E4F80;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C4040DFEAD7);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HgcSMAAPatternSearch::SetParameter(HgcSMAAPatternSearch *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcSMAAPatternSearch::GetParameter(HgcSMAAPatternSearch *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcSMAABlend::GetProgram(HgcSMAABlend *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000054f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 9.999999747e-06, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    float4 s0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xz = (half2) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xz;\n"
             "    r0.y = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord2.xy).y;\n"
             "    r0.w = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord3.xy).w;\n"
             "    r1.xy = r0.wy - r0.zx;\n"
             "    r1.xy = select(-r0.zx, r0.wy, r1.xy > 0.00000h);\n"
             "    r2.xy = abs(r1.xy);\n"
             "    r2.xy = r2.yy - r2.xx;\n"
             "    r2.xy = select(c0.yx, c0.xy, r2.xy < 0.00000h);\n"
             "    r1.xy = r1.xy*r2.xy;\n"
             "    r0.xy = half2(dot(r0, 1.00000h));\n"
             "    r0.xy = half2(c0.zz < r0.xy);\n"
             "    s0.xy = float2(r1.xy)*float2(r0.xy) + frag._texCoord0.xy;\n"
             "    s0.xy = s0.xy + hg_Params[0].xy;\n"
             "    s0.xy = s0.xy*hg_Params[0].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=741f56be:ab313603:865b46ac:82d181bb\n"
             "//SIG=00400000:00000000:00000000:00000003:0001:0001:0004:0000:0000:0000:001e:0000:0004:02:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000518\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 9.999999747e-06, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xz = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xz;\n"
             "    r0.y = hg_Texture1.sample(hg_Sampler1, frag._texCoord2.xy).y;\n"
             "    r0.w = hg_Texture1.sample(hg_Sampler1, frag._texCoord3.xy).w;\n"
             "    r1.xy = r0.wy - r0.zx;\n"
             "    r1.xy = select(-r0.zx, r0.wy, r1.xy > 0.00000f);\n"
             "    r2.xy = abs(r1.xy);\n"
             "    r2.xy = r2.yy - r2.xx;\n"
             "    r2.xy = select(c0.yx, c0.xy, r2.xy < 0.00000f);\n"
             "    r1.xy = r1.xy*r2.xy;\n"
             "    r0.xy = float2(dot(r0, 1.00000f));\n"
             "    r0.xy = float2(c0.zz < r0.xy);\n"
             "    r1.xy = r1.xy*r0.xy + frag._texCoord0.xy;\n"
             "    r1.xy = r1.xy + hg_Params[0].xy;\n"
             "    r1.xy = r1.xy*hg_Params[0].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b7af3f41:6b37361f:a8d61853:9193c802\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0001:0003:0000:0000:0000:001e:0000:0004:02:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000052b\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(1.000000000, 0.000000000, 9.999999747e-06, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xz = texture2D(hg_Texture1, hg_TexCoord1.xy).xz;\n"
           "    r0.y = texture2D(hg_Texture1, hg_TexCoord2.xy).y;\n"
           "    r0.w = texture2D(hg_Texture1, hg_TexCoord3.xy).w;\n"
           "    r1.xy = r0.wy - r0.zx;\n"
           "    r1.xy = vec2(r1.x > 0.00000 ? r0.w : -r0.z, r1.y > 0.00000 ? r0.y : -r0.x);\n"
           "    r2.xy = abs(r1.xy);\n"
           "    r2.xy = r2.yy - r2.xx;\n"
           "    r2.xy = vec2(r2.x < 0.00000 ? c0.x : c0.y, r2.y < 0.00000 ? c0.y : c0.x);\n"
           "    r1.xy = r1.xy*r2.xy;\n"
           "    r0.xy = vec2(dot(r0, vec4(1.00000)));\n"
           "    r0.xy = vec2(lessThan(c0.zz, r0.xy));\n"
           "    r1.xy = r1.xy*r0.xy + hg_TexCoord0.xy;\n"
           "    r1.xy = r1.xy + hg_ProgramLocal0.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal0.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r1.xy);\n"
           "}\n"
           "//MD5=5856c31f:bb2d9d4d:b266418a:0cacbda8\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0001:0003:0000:0000:0000:0000:0000:0004:02:0:1:0\n";
  }
}

void HgcSMAABlend::InitProgramDescriptor(HgcSMAABlend *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSMAABlend_hgc_visible", "//Metal1.0     \n//LEN=0000000465\n[[ visible ]] FragmentOut HgcSMAABlend_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 texCoord0,\n    float4 texCoord1,\n    float4 texCoord2,\n    float4 texCoord3)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 9.999999747e-06, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xz = hg_Texture1.sample(hg_Sampler1, texCoord1.xy).xz;\n"
    "    r0.y = hg_Texture1.sample(hg_Sampler1, texCoord2.xy).y;\n"
    "    r0.w = hg_Texture1.sample(hg_Sampler1, texCoord3.xy).w;\n"
    "    r1.xy = r0.wy - r0.zx;\n"
    "    r1.xy = select(-r0.zx, r0.wy, r1.xy > 0.00000f);\n"
    "    r2.xy = abs(r1.xy);\n"
    "    r2.xy = r2.yy - r2.xx;\n"
    "    r2.xy = select(c0.yx, c0.xy, r2.xy < 0.00000f);\n"
    "    r1.xy = r1.xy*r2.xy;\n"
    "    r0.xy = float2(dot(r0, 1.00000f));\n"
    "    r0.xy = float2(c0.zz < r0.xy);\n"
    "    r1.xy = r1.xy*r0.xy + texCoord0.xy;\n"
    "    r1.xy = r1.xy + hg_Params[0].xy;\n"
    "    r1.xy = r1.xy*hg_Params[0].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcSMAABlend");
}

void sub_1B78D0AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

void sub_1B78D0B1C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78D0B14);
}

void HgcSMAABlend::shaderDescription(char *a1@<X8>)
{
  a1[23] = 19;
  strcpy(a1, "HgcSMAABlend [hgc1]");
}

uint64_t HgcSMAABlend::BindTexture(HgcSMAABlend *this, HGHandler *a2, int a3)
{
  if (a3)
  {
    if (a3 == 1)
    {
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      HGHandler::TexCoord(a2, 1, 0, 0, 0);
      if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46))(*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2); {
      HGHandler::TexCoord(a2, 2, 0, 0, 0);
      }
      if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46))(*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2); {
      (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, 0.0, 1.0, 0.0);
      }
      HGHandler::TexCoord(a2, 3, 0, 0, 0);
      if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46))(*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2); {
      (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, 1.0, 0.0, 0.0);
      }
      return 0;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    if ((*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46))
    {
      v7.n128_u32[0] = 1.0;
      v8.n128_u32[0] = 1.0;
    }
    else
    {
      v7.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v8.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v5.n128_f32[0] = (float)*((int *)a2 + 60);
    v6.n128_f32[0] = (float)*((int *)a2 + 61);
    (*(void (**)(HGHandler *, void, __n128, __n128, __n128, __n128))(*(void *)a2 + 136))(a2, 0, v5, v6, v7, v8);
    return 0;
  }
}

uint64_t HgcSMAABlend::Bind(HgcSMAABlend *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcSMAABlend::RenderTile(HgcSMAABlend *this, HGTile *a2)
{
  uint64_t v4 = HGTile::Renderer(a2);
  int v5 = (*(uint64_t (**)(HgcSMAABlend *, uint64_t))(*(void *)this + 312))(this, v4);
  int32x2_t v6 = *(int32x2_t *)a2;
  int v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(void *)a2);
  if (v7 >= 1)
  {
    int v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    int v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    uint64_t v11 = *((void *)a2 + 2);
    uint64_t v12 = *((void *)a2 + 12);
    uint64_t v13 = 16 * *((int *)a2 + 6);
    uint64_t v14 = 16 * *((int *)a2 + 26);
    uint64_t v15 = v12 + v14;
    v16.i64[0] = 0x3F0000003F000000;
    v16.i64[1] = 0x3F0000003F000000;
    float32x4_t v17 = v9;
    do
    {
      if (v10 < 3)
      {
        LODWORD(v86) = 0;
        float32x4_t v21 = v17;
        if (v10 > 0) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v18 = 0;
        int v19 = 0;
        uint64_t v20 = v12 + v14;
        float32x4_t v21 = v17;
        do
        {
          int8x16_t v39 = *(int8x16_t *)(v12 + v18 + 16);
          uint64_t v40 = *((void *)this + 51);
          int8x16_t v41 = *(int8x16_t *)(v40 + 16);
          int8x16_t v42 = vbslq_s8(*(int8x16_t *)v40, *(int8x16_t *)(v20 + v18 + 16), v39);
          int8x16_t v43 = *(int8x16_t *)(v12 + v18 + 32);
          int8x16_t v44 = vbslq_s8(v41, v39, vbslq_s8(*(int8x16_t *)v40, *(int8x16_t *)(v20 + v18), *(int8x16_t *)(v12 + v18)));
          int8x16_t v45 = vbslq_s8(v41, v43, v42);
          int8x16_t v46 = *(int8x16_t *)(v40 + 32);
          int8x16_t v47 = *(int8x16_t *)(v40 + 48);
          *(int8x8_t *)v48.f32 = vqtbl1_s8(v44, *(int8x8_t *)v46.i8);
          int8x8_t v49 = (int8x8_t)vextq_s8(v46, v46, 8uLL).u64[0];
          *(int8x8_t *)&v48.u32[2] = vqtbl1_s8(v44, v49);
          int8x16_t v50 = vbslq_s8(v41, *(int8x16_t *)(v12 + v18 + 48), vbslq_s8(*(int8x16_t *)v40, *(int8x16_t *)(v20 + v18 + 32), v43));
          *(int8x8_t *)v51.f32 = vqtbl1_s8(v45, *(int8x8_t *)v46.i8);
          *(int8x8_t *)&v51.u32[2] = vqtbl1_s8(v45, v49);
          *(int8x8_t *)v52.f32 = vqtbl1_s8(v50, *(int8x8_t *)v46.i8);
          *(int8x8_t *)&v52.u32[2] = vqtbl1_s8(v50, v49);
          *(int8x8_t *)v41.i8 = vqtbl1_s8(v44, *(int8x8_t *)v47.i8);
          int8x8_t v53 = (int8x8_t)vextq_s8(v47, v47, 8uLL).u64[0];
          v41.u64[1] = (unint64_t)vqtbl1_s8(v44, v53);
          *(int8x8_t *)v46.i8 = vqtbl1_s8(v45, *(int8x8_t *)v47.i8);
          v46.u64[1] = (unint64_t)vqtbl1_s8(v45, v53);
          *(int8x8_t *)v47.i8 = vqtbl1_s8(v50, *(int8x8_t *)v47.i8);
          v47.u64[1] = (unint64_t)vqtbl1_s8(v50, v53);
          float32x4_t v54 = vsubq_f32(v51, (float32x4_t)v46);
          float32x4_t v55 = vsubq_f32(v52, (float32x4_t)v47);
          int8x16_t v56 = (int8x16_t)vnegq_f32((float32x4_t)v44);
          int8x16_t v57 = (int8x16_t)vnegq_f32((float32x4_t)v45);
          int8x16_t v58 = (int8x16_t)vnegq_f32((float32x4_t)v50);
          float32x4_t v59 = *(float32x4_t *)(v40 + 64);
          int8x16_t v60 = *(int8x16_t *)(v40 + 80);
          float32x4_t v61 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(vsubq_f32(v48, (float32x4_t)v41), v59), (int8x16_t)v48, (int8x16_t)vzip1q_s32((int32x4_t)vextq_s8(v56, v56, 8uLL), (int32x4_t)v56));
          float32x4_t v62 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v54, v59), (int8x16_t)v51, (int8x16_t)vzip1q_s32((int32x4_t)vextq_s8(v57, v57, 8uLL), (int32x4_t)v57));
          *(float32x2_t *)v48.f32 = vabs_f32(*(float32x2_t *)v61.f32);
          *(float32x2_t *)v56.i8 = vabs_f32(*(float32x2_t *)v62.f32);
          float32x4_t v63 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v55, v59), (int8x16_t)v52, (int8x16_t)vzip1q_s32((int32x4_t)vextq_s8(v58, v58, 8uLL), (int32x4_t)v58));
          *(float32x2_t *)v55.f32 = vabs_f32(*(float32x2_t *)v63.f32);
          float32x4_t v64 = vaddq_f32(v21, (float32x4_t)xmmword_1B7E736B0);
          float32x4_t v65 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 0));
          float32x4_t v66 = vaddq_f32(v64, (float32x4_t)xmmword_1B7E736B0);
          int8x16_t v67 = *(int8x16_t *)(v40 + 96);
          float32x4_t v68 = *(float32x4_t *)(v40 + 112);
          float32x4_t v69 = vmulq_f32(v61, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v59, v65), v67, v60));
          int8x16_t v70 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v44, v44, 4uLL), (float32x4_t)v44);
          int8x16_t v71 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v45, v45, 4uLL), (float32x4_t)v45);
          int8x16_t v72 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v50, v50, 4uLL), (float32x4_t)v50);
          int8x16_t v73 = *(int8x16_t *)(v40 + 128);
          float32x4_t v74 = vaddq_f32(v21, vmulq_f32((float32x4_t)vandq_s8(v73, (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)v70, (float32x4_t)vextq_s8(v70, v70, 8uLL)), v68)), v69));
          float32x4_t v75 = vaddq_f32(v64, vmulq_f32((float32x4_t)vandq_s8(v73, (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)v71, (float32x4_t)vextq_s8(v71, v71, 8uLL)), v68)), vmulq_f32(v62, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v59, vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.i8, 1), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.i8, 0))), v67, v60))));
          float32x4_t v76 = vaddq_f32(v66, vmulq_f32((float32x4_t)vandq_s8(v73, (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)v72, (float32x4_t)vextq_s8(v72, v72, 8uLL)), v68)), vmulq_f32(v63, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v59, vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0))), v67, v60))));
          uint64_t v77 = *((void *)a2 + 10);
          uint64_t v78 = *((int *)a2 + 22);
          float32x4_t v79 = vsubq_f32(v74, v9);
          if (v5)
          {
            int32x4_t v22 = vaddq_s32(vcvtq_s32_f32(v79), vcltzq_f32(v79));
            float32x2_t v23 = (float32x2_t)vsubq_f32(v79, vcvtq_f32_s32(v22)).u64[0];
            uint64_t v24 = (float32x4_t *)(v77 + 16 * (v22.i32[0] + v22.i32[1] * (int)v78));
            float32x4_t v25 = vaddq_f32(*v24, vmulq_n_f32(vsubq_f32(v24[1], *v24), v23.f32[0]));
            uint64_t v26 = (int)v78 + 1;
            float32x4_t v27 = vaddq_f32(v25, vmulq_lane_f32(vsubq_f32(vaddq_f32(v24[v78], vmulq_n_f32(vsubq_f32(v24[v26], v24[v78]), v23.f32[0])), v25), v23, 1));
            float32x4_t v28 = vsubq_f32(v75, v9);
            int32x4_t v29 = vaddq_s32(vcvtq_s32_f32(v28), vcltzq_f32(v28));
            v28.i64[0] = vsubq_f32(v28, vcvtq_f32_s32(v29)).u64[0];
            int32x4_t v30 = (float32x4_t *)(v77 + 16 * (v29.i32[0] + v29.i32[1] * (int)v78));
            float32x4_t v31 = vaddq_f32(*v30, vmulq_n_f32(vsubq_f32(v30[1], *v30), v28.f32[0]));
            float32x4_t v32 = vaddq_f32(v31, vmulq_lane_f32(vsubq_f32(vaddq_f32(v30[v78], vmulq_n_f32(vsubq_f32(v30[v26], v30[v78]), v28.f32[0])), v31), *(float32x2_t *)v28.f32, 1));
            float32x4_t v33 = vsubq_f32(v76, v9);
            int32x4_t v34 = vaddq_s32(vcvtq_s32_f32(v33), vcltzq_f32(v33));
            v33.i64[0] = vsubq_f32(v33, vcvtq_f32_s32(v34)).u64[0];
            int32x2_t v35 = (float32x4_t *)(v77 + 16 * (v34.i32[0] + v34.i32[1] * (int)v78));
            float32x4_t v36 = vaddq_f32(*v35, vmulq_n_f32(vsubq_f32(v35[1], *v35), v33.f32[0]));
            float32x4_t v37 = vaddq_f32(v36, vmulq_lane_f32(vsubq_f32(vaddq_f32(v35[v78], vmulq_n_f32(vsubq_f32(v35[v26], v35[v78]), v33.f32[0])), v36), *(float32x2_t *)v33.f32, 1));
          }
          else
          {
            float32x4_t v80 = vaddq_f32(v79, v16);
            int32x4_t v81 = vcvtq_s32_f32(v80);
            v80.i64[0] = vaddq_s32(v81, vcgtq_f32(vcvtq_f32_s32(v81), v80)).u64[0];
            float32x4_t v27 = *(float32x4_t *)(v77 + 16 * (v80.i32[0] + v80.i32[1] * (int)v78));
            float32x4_t v82 = vaddq_f32(vsubq_f32(v75, v9), v16);
            int32x4_t v83 = vcvtq_s32_f32(v82);
            v82.i64[0] = vaddq_s32(v83, vcgtq_f32(vcvtq_f32_s32(v83), v82)).u64[0];
            float32x4_t v32 = *(float32x4_t *)(v77 + 16 * (v82.i32[0] + v82.i32[1] * (int)v78));
            float32x4_t v84 = vaddq_f32(vsubq_f32(v76, v9), v16);
            int32x4_t v85 = vcvtq_s32_f32(v84);
            v84.i64[0] = vaddq_s32(v85, vcgtq_f32(vcvtq_f32_s32(v85), v84)).u64[0];
            float32x4_t v37 = *(float32x4_t *)(v77 + 16 * (v84.i32[0] + v84.i32[1] * (int)v78));
          }
          uint64_t v38 = (float32x4_t *)(v11 + v18);
          *uint64_t v38 = v27;
          v38[1] = v32;
          v38[2] = v37;
          float32x4_t v21 = vaddq_f32(v66, (float32x4_t)xmmword_1B7E736B0);
          v19 -= 3;
          v18 += 48;
        }
        while (v10 + v19 > 2);
        LODWORD(v86) = -v19;
        if ((int)v86 < v10)
        {
LABEL_13:
          uint64_t v86 = v86;
          do
          {
            while (1)
            {
              uint64_t v91 = *((void *)this + 51);
              uint64_t v92 = v86 + 1;
              int8x16_t v93 = vbslq_s8(*(int8x16_t *)(v91 + 16), *(int8x16_t *)(v12 + 16 * (v86 + 1)), vbslq_s8(*(int8x16_t *)v91, *(int8x16_t *)(v15 + 16 * v86), *(int8x16_t *)(v12 + 16 * v86)));
              int8x16_t v94 = *(int8x16_t *)(v91 + 32);
              int8x16_t v95 = *(int8x16_t *)(v91 + 48);
              *(int8x8_t *)v96.f32 = vqtbl1_s8(v93, *(int8x8_t *)v94.i8);
              *(int8x8_t *)&v96.u32[2] = vqtbl1_s8(v93, (int8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL));
              *(int8x8_t *)v94.i8 = vqtbl1_s8(v93, *(int8x8_t *)v95.i8);
              v94.u64[1] = (unint64_t)vqtbl1_s8(v93, (int8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL));
              int8x16_t v97 = (int8x16_t)vnegq_f32((float32x4_t)v93);
              float32x4_t v98 = *(float32x4_t *)(v91 + 64);
              float32x4_t v99 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(vsubq_f32(v96, (float32x4_t)v94), v98), (int8x16_t)v96, (int8x16_t)vzip1q_s32((int32x4_t)vextq_s8(v97, v97, 8uLL), (int32x4_t)v97));
              *(float32x2_t *)v97.i8 = vabs_f32(*(float32x2_t *)v99.f32);
              int8x16_t v100 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v93, v93, 4uLL), (float32x4_t)v93);
              float32x4_t v101 = vaddq_f32(v21, vmulq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(v91 + 128), (int8x16_t)vcgtq_f32(vaddq_f32((float32x4_t)v100, (float32x4_t)vextq_s8(v100, v100, 8uLL)), *(float32x4_t *)(v91 + 112))), vmulq_f32(v99, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v98, vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.i8, 1), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.i8, 0))), *(int8x16_t *)(v91 + 96), *(int8x16_t *)(v91 + 80)))));
              uint64_t v102 = *((void *)a2 + 10);
              uint64_t v103 = *((int *)a2 + 22);
              float32x4_t v104 = vsubq_f32(v101, v9);
              if (!v5) {
                break;
              }
              int32x4_t v87 = vaddq_s32(vcvtq_s32_f32(v104), vcltzq_f32(v104));
              float32x2_t v88 = (float32x2_t)vsubq_f32(v104, vcvtq_f32_s32(v87)).u64[0];
              int8x16_t v89 = (float32x4_t *)(v102 + 16 * (v87.i32[0] + v87.i32[1] * (int)v103));
              float32x4_t v90 = vaddq_f32(*v89, vmulq_n_f32(vsubq_f32(v89[1], *v89), v88.f32[0]));
              *(float32x4_t *)(v11 + 16 * v86) = vaddq_f32(v90, vmulq_lane_f32(vsubq_f32(vaddq_f32(v89[v103], vmulq_n_f32(vsubq_f32(v89[(int)v103 + 1], v89[v103]), v88.f32[0])), v90), v88, 1));
              float32x4_t v21 = vaddq_f32(v21, (float32x4_t)xmmword_1B7E736B0);
              ++v86;
              if (v92 >= v10) {
                goto LABEL_3;
              }
            }
            float32x4_t v105 = vaddq_f32(v104, v16);
            int32x4_t v106 = vcvtq_s32_f32(v105);
            v105.i64[0] = vaddq_s32(v106, vcgtq_f32(vcvtq_f32_s32(v106), v105)).u64[0];
            *(_OWORD *)(v11 + 16 * v86) = *(_OWORD *)(v102 + 16 * (v105.i32[0] + v105.i32[1] * (int)v103));
            float32x4_t v21 = vaddq_f32(v21, (float32x4_t)xmmword_1B7E736B0);
            ++v86;
          }
          while (v92 < v10);
        }
      }
LABEL_3:
      float32x4_t v17 = vaddq_f32(v17, (float32x4_t)xmmword_1B7E736C0);
      v12 += v14;
      ++v8;
      v11 += v13;
      v15 += v14;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcSMAABlend::GetDOD(HgcSMAABlend *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v6 = HGRectMake4i(0, 0, 1u, 1u);
      return HGRectGrow(v5, v4, v6);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if ((*(int (**)(HgcSMAABlend *, HGRenderer *))(*(void *)this + 312))(this, a2) >= 1)
    {
      uint64_t v8 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v5, v4, v8);
    }
    return 0x8000000080000000;
  }
}

uint64_t HgcSMAABlend::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (!a3)
  {
    Input = HGRenderer::GetInput(a2, this, 0);
    uint64_t DOD = HGRenderer::GetDOD(a2, Input);
    uint64_t v14 = v13;
    if ((*(int (**)(HGNode *, HGRenderer *))(*(void *)this + 312))(this, a2) < 1) {
      return DOD;
    }
    uint64_t v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    uint64_t v7 = DOD;
    uint64_t v8 = v14;
    return HGRectGrow(v7, v8, v6);
  }
  if (a3 == 1)
  {
    uint64_t v4 = *(void *)&a4.var2;
    uint64_t v5 = *(void *)&a4.var0;
    uint64_t v6 = HGRectMake4i(0, 0, 1u, 1u);
    uint64_t v7 = v5;
    uint64_t v8 = v4;
    return HGRectGrow(v7, v8, v6);
  }
  return 0;
}

void HgcSMAABlend::~HgcSMAABlend(HGNode *this)
{
  *(void *)this = &unk_1F10E51D0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40265AC83CLL);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E51D0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40265AC83CLL);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HgcSMAABlend::SetParameter(HgcSMAABlend *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcSMAABlend::GetParameter(HgcSMAABlend *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

void HGAntiAlias::HGAntiAlias(HGNode *a1, int a2)
{
  HGNode::HGNode(a1);
  *(void *)uint64_t v3 = &unk_1F10E5420;
  *(void *)(v3 + 408) = 0;
  *(_DWORD *)(v3 + 416) = 1028443341;
  *(_DWORD *)(v3 + 420) = a2;
}

void HGAntiAlias::~HGAntiAlias(HGNode *this)
{
  *(void *)this = &unk_1F10E5420;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E5420;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HGAntiAlias::SetParameter(HGAntiAlias *this, int a2, float a3, float a4, float a5, float a6)
{
  if (a2 || *((float *)this + 104) == a3) {
    return 0;
  }
  *((float *)this + 104) = a3;
  return 1;
}

void HGAntiAlias::GetOutput(HGNode *this, HGRenderer *a2)
{
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t v4 = (HGColorConform *)HGObject::operator new(0x320uLL);
  HGColorConform::HGColorConform(v4);
  (*(void (**)(HGColorConform *, void, HGNode *))(*(void *)v4 + 120))(v4, 0, Input);
  if (*((_DWORD *)this + 105) == 1) {
    int v5 = 3;
  }
  else {
    int v5 = 0;
  }
  if (*((_DWORD *)this + 105) == 1) {
    int v6 = 3;
  }
  else {
    int v6 = 1;
  }
  HGColorConform::SetConversion((uint64_t)v4, v5, 8, 0, v5, 1, v6);
  uint64_t v7 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v7);
  *(void *)uint64_t v7 = &unk_1F10E4D30;
  operator new();
}

void sub_1B78D20DC(_Unwind_Exception *a1)
{
  HGObject::operator delete(v8);
  (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void HGAntiAliasLUTEntryFactory::~HGAntiAliasLUTEntryFactory(HGAntiAliasLUTEntryFactory *this)
{
}

void HGAntiAliasLUTEntryFactory::createLUTEntry()
{
}

void sub_1B78D23D4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0xA1C40987D6AD5);
  _Unwind_Resume(a1);
}

double HgcSMAAPatternSearch::State::State(HgcSMAAPatternSearch::State *this)
{
  *(_OWORD *)this = xmmword_1B7E76310;
  *((_OWORD *)this + 1) = xmmword_1B8349240;
  *((_OWORD *)this + 2) = xmmword_1B8349250;
  *((_OWORD *)this + 3) = xmmword_1B8349260;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((_OWORD *)this + 5) = xmmword_1B8349270;
  *((_OWORD *)this + 6) = xmmword_1B8347770;
  *((_OWORD *)this + 7) = xmmword_1B8349280;
  *((_OWORD *)this + 8) = xmmword_1B8349290;
  *((_OWORD *)this + 9) = xmmword_1B83492A0;
  *((_OWORD *)this + 10) = xmmword_1B7E76AD0;
  *((_OWORD *)this + 11) = xmmword_1B7E736B0;
  *((_OWORD *)this + 12) = xmmword_1B7E751A0;
  *((_OWORD *)this + 13) = xmmword_1B7E736C0;
  *((_OWORD *)this + 14) = xmmword_1B7E752F0;
  *((_OWORD *)this + 15) = xmmword_1B7E75430;
  *((_OWORD *)this + 16) = xmmword_1B7E778D0;
  *((_OWORD *)this + 17) = xmmword_1B83492B0;
  *((_OWORD *)this + 18) = xmmword_1B7E76300;
  *((_OWORD *)this + 19) = xmmword_1B83492C0;
  *((_OWORD *)this + 20) = xmmword_1B83492D0;
  *((_OWORD *)this + 21) = xmmword_1B83492E0;
  *((_OWORD *)this + 22) = xmmword_1B83492F0;
  *((_OWORD *)this + 23) = xmmword_1B7E778C0;
  *((_OWORD *)this + 24) = xmmword_1B8349300;
  *((_OWORD *)this + 25) = xmmword_1B7E76AE0;
  *((_OWORD *)this + 26) = xmmword_1B8349310;
  *((_OWORD *)this + 27) = xmmword_1B8349320;
  *((_OWORD *)this + 28) = xmmword_1B8349330;
  *((_OWORD *)this + 29) = xmmword_1B8349340;
  *((_OWORD *)this + 30) = xmmword_1B8349350;
  *((_OWORD *)this + 31) = xmmword_1B8349360;
  *((_OWORD *)this + (*(void (**)(HGLightWrap *, uint64_t, uint64_t))(*(void *)this + 136))(this, 0xFFFFFFFFLL, 32) = xmmword_1B8349370;
  *((_OWORD *)this + 33) = xmmword_1B8349380;
  *((_OWORD *)this + 34) = xmmword_1B8349390;
  *((_OWORD *)this + 35) = xmmword_1B83493A0;
  *((_OWORD *)this + 36) = xmmword_1B83493B0;
  *((_OWORD *)this + 37) = xmmword_1B83493C0;
  *((_OWORD *)this + 38) = xmmword_1B83493D0;
  *((_OWORD *)this + 39) = xmmword_1B83493E0;
  *((_OWORD *)this + 40) = xmmword_1B83493F0;
  *((_OWORD *)this + 41) = xmmword_1B8349400;
  *((_OWORD *)this + 42) = xmmword_1B8349410;
  *((_OWORD *)this + 43) = xmmword_1B7E76C40;
  *((_OWORD *)this + 44) = xmmword_1B8349420;
  *((_OWORD *)this + 45) = xmmword_1B8349430;
  *((_OWORD *)this + 46) = xmmword_1B8349440;
  *((_OWORD *)this + 47) = xmmword_1B8349450;
  *((_OWORD *)this + 48) = xmmword_1B8349460;
  *((_OWORD *)this + 49) = xmmword_1B8349470;
  *((_OWORD *)this + 50) = xmmword_1B8349480;
  *((_OWORD *)this + 51) = xmmword_1B8349490;
  *((_OWORD *)this + 52) = xmmword_1B83494A0;
  *((_OWORD *)this + 53) = xmmword_1B83494B0;
  *((_OWORD *)this + 54) = xmmword_1B83494C0;
  *((_OWORD *)this + 55) = xmmword_1B83494D0;
  *((_OWORD *)this + 56) = xmmword_1B83494E0;
  *((_OWORD *)this + 57) = xmmword_1B7E76FC0;
  *((_OWORD *)this + 58) = xmmword_1B7E76E70;
  *((_OWORD *)this + 59) = xmmword_1B83494F0;
  *((_OWORD *)this + 60) = xmmword_1B8349500;
  *((_OWORD *)this + 61) = xmmword_1B8349510;
  *((_OWORD *)this + 62) = xmmword_1B8349520;
  *((_OWORD *)this + 63) = xmmword_1B8349530;
  *((_OWORD *)this + 64) = xmmword_1B8349540;
  *((_OWORD *)this + 65) = xmmword_1B8349550;
  *((_OWORD *)this + 66) = xmmword_1B8349560;
  *((_OWORD *)this + 67) = xmmword_1B8349570;
  *((_OWORD *)this + 68) = xmmword_1B8349580;
  *((_OWORD *)this + 69) = xmmword_1B8349590;
  *((_OWORD *)this + 70) = xmmword_1B83495A0;
  *((_OWORD *)this + 71) = xmmword_1B83495B0;
  *((_OWORD *)this + 72) = xmmword_1B83495C0;
  *((_OWORD *)this + 73) = xmmword_1B83495D0;
  *((_OWORD *)this + 74) = xmmword_1B83495E0;
  *((_OWORD *)this + 75) = xmmword_1B83495F0;
  *((_OWORD *)this + 76) = xmmword_1B8349600;
  *((_OWORD *)this + 77) = xmmword_1B8349610;
  *((_OWORD *)this + 78) = xmmword_1B8349620;
  *((_OWORD *)this + 79) = xmmword_1B8349630;
  *((_OWORD *)this + 80) = xmmword_1B8349640;
  *((_OWORD *)this + 81) = xmmword_1B8349650;
  *((_OWORD *)this + 82) = xmmword_1B8349660;
  *((_OWORD *)this + 83) = xmmword_1B8349670;
  *((_OWORD *)this + 84) = xmmword_1B8349680;
  *(void *)&double result = 3196059648;
  *((_OWORD *)this + 85) = xmmword_1B7E771F0;
  return result;
}

void HGAntiAliasLUTInfo::~HGAntiAliasLUTInfo(HGAntiAliasLUTInfo *this)
{
}

void HGAntiAliasLUTInfo::duplicate(HGAntiAliasLUTInfo *this)
{
}

_DWORD *HGAntiAliasLUTInfo::isEqual(uint64_t a1, void *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  if (result) {
    return (_DWORD *)(*(_DWORD *)(a1 + 8) == result[2]);
  }
  return result;
}

void HGSMAAPatternSearch::~HGSMAAPatternSearch(HGNode *this)
{
  *(void *)this = &unk_1F10E4F80;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C4040DFEAD7);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E4F80;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C4040DFEAD7);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HGSMAAPatternSearch::GetDOD(HGSMAAPatternSearch *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HGSMAAPatternSearch::GetROI(HGSMAAPatternSearch *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3 == 2) {
    return *((void *)this + 54);
  }
  if (a3 == 1) {
    return *((void *)this + 52);
  }
  if (a3) {
    return 0;
  }
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  uint64_t v6 = HGRectMake4i(0xFFFFFFF5, 0xFFFFFFF5, 0xCu, 0xCu);
  return HGRectGrow(v5, v4, v6);
}

void HGSMAABlend::HGSMAABlend(HGSMAABlend *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F10E51D0;
  operator new();
}

void sub_1B78D2B50(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HGSMAABlend::~HGSMAABlend(HGNode *this)
{
  *(void *)this = &unk_1F10E51D0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40265AC83CLL);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E51D0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40265AC83CLL);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HGSMAABlend::GetDOD(HGSMAABlend *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 2) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HGSMAABlend::GetROI(HGSMAABlend *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  if (a3 == 1)
  {
    unsigned int v6 = 1;
    unsigned int v7 = 1;
    unsigned int v8 = 0;
    unsigned int v9 = 0;
    goto LABEL_5;
  }
  if (!a3)
  {
    unsigned int v6 = -1;
    unsigned int v7 = -1;
    unsigned int v8 = 1;
    unsigned int v9 = 1;
LABEL_5:
    uint64_t v10 = HGRectMake4i(v6, v7, v8, v9);
    return HGRectGrow(v5, v4, v10);
  }
  return 0;
}

void *HGAntiAliasLUTEntry::HGAntiAliasLUTEntry(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = HGLUTCache::LUTEntry::LUTEntry(a1, (uint64_t)a2, a3);
  *uint64_t v5 = &unk_1F10E5C28;
  v5[3] = 0;
  unsigned int v6 = (void **)(v5 + 3);
  v5[4] = 0;
  if (a2)
  {
    if (v7)
    {
      int v8 = v7[2];
      if (v8 == 1)
      {
        uint64_t v9 = HGRectMake4f(1107558400, 0.0, 0.0, 66.0, 33.0);
        uint64_t v11 = v14;
        uint64_t v12 = &searchTexBytes;
        uint64_t v13 = 1;
      }
      else if (v8)
      {
        uint64_t v13 = 0;
        uint64_t v12 = 0;
        uint64_t v9 = 0;
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v9 = HGRectMake4f(1141637120, 0.0, 0.0, 160.0, 560.0);
        uint64_t v11 = v10;
        uint64_t v12 = &areaTexBytes;
        uint64_t v13 = 10;
      }
      uint64_t v15 = HGObject::operator new(0x80uLL);
      __n128 v16 = HGBitmap::HGBitmap(v15, v9, v11, v13);
      float32x4_t v17 = *v6;
      if (*v6 == v15)
      {
        if (v15) {
          (*(void (**)(void *, __n128))(*(void *)v15 + 24))(v15, v16);
        }
      }
      else
      {
        if (v17) {
          (*(void (**)(void *, __n128))(*(void *)v17 + 24))(v17, v16);
        }
        *unsigned int v6 = v15;
      }
      uint64_t v18 = HGObject::operator new(0x80uLL);
      HGBitmap::HGBitmap(v18, v9, v11, v13, v12);
      HGRenderUtils::BufferCopier::BufferCopier((HGRenderUtils::BufferCopier *)v20);
    }
  }
  return a1;
}

void sub_1B78D2F20(_Unwind_Exception *a1)
{
  uint64_t v4 = *((void *)v1 + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  if (*v2) {
    (*(void (**)(void))(*(void *)*v2 + 24))(*v2);
  }
  HGLUTCache::LUTEntry::~LUTEntry(v1);
  _Unwind_Resume(a1);
}

void HGAntiAliasLUTEntry::~HGAntiAliasLUTEntry(HGAntiAliasLUTEntry *this)
{
  *(void *)this = &unk_1F10E5C28;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }

  HGLUTCache::LUTEntry::~LUTEntry(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E5C28;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  HGLUTCache::LUTEntry::~LUTEntry(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t HGAntiAliasLUTEntry::GetBitmap(HGAntiAliasLUTEntry *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2 {
    || ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 304))(v2) & 1) != 0
  }
    || (uint64_t v3 = (uint64_t *)*((void *)this + 2),
        uint64_t v4 = *v3,
  {
    unsigned int v6 = (HGMetalTexture *)*((void *)this + 3);
    unsigned int v7 = (char *)this + 24;
    if (!v6) {
      return *(void *)v7;
    }
    goto LABEL_11;
  }
  unsigned int v7 = (char *)this + 32;
  unsigned int v6 = (HGMetalTexture *)*((void *)this + 4);
  if (v6) {
    goto LABEL_11;
  }
  uint64_t MetalContext = HGGPURenderer::GetMetalContext(v5);
  HGMetalTexture::createWithCopy(*(void **)(*(void *)(MetalContext + 16) + 16), 0, *((void *)this + 3), *(void *)(*((void *)this + 3) + 20), *(void *)(*((void *)this + 3) + 28), 0, 0, &v11);
  uint64_t v9 = (HGMetalTexture *)*((void *)this + 4);
  unsigned int v6 = v11;
  if (v9 == v11)
  {
    if (!v9) {
      return *(void *)v7;
    }
    (*(void (**)(void))(*(void *)v9 + 24))(*((void *)this + 4));
    unsigned int v6 = *(HGMetalTexture **)v7;
    if (!*(void *)v7) {
      return *(void *)v7;
    }
LABEL_11:
    (*(void (**)(HGMetalTexture *))(*(void *)v6 + 16))(v6);
    return *(void *)v7;
  }
  if (v9)
  {
    (*(void (**)(void))(*(void *)v9 + 24))(*((void *)this + 4));
    unsigned int v6 = v11;
  }
  *(void *)unsigned int v7 = v6;
  if (v6) {
    goto LABEL_11;
  }
  return *(void *)v7;
}

void sub_1B78D337C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  _Unwind_Resume(exception_object);
}

const char *MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)0>::label_A()
{
  return "MinMax<MIN,X>";
}

const char *MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)1>::label_A()
{
  return "MinMax<MIN,Y>";
}

const char *MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)0>::label_A()
{
  return "MinMax<MAX,X>";
}

const char *MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)1>::label_A()
{
  return "MinMax<MAX,Y>";
}

void HGMinMax::HGMinMax(HGMinMax *this)
{
  HGNode::HGNode((HGNode *)this);
  *(void *)uint64_t v1 = &unk_1F10E5C68;
  *(void *)(v1 + 416) = 0;
  *(void *)(v1 + 424) = 0;
  *(void *)(v1 + 408) = 0;
  *(_DWORD *)(v1 + 4(*(void (**)(HGLightWrap *, uint64_t, uint64_t))(*(void *)this + 136))(this, 0xFFFFFFFFLL, 32) = 0;
}

void HGMinMax::~HGMinMax(HGNode *this)
{
  *(void *)this = &unk_1F10E5C68;
  uint64_t v2 = *((void *)this + 52);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 51);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F10E5C68;
  uint64_t v2 = *((void *)this + 52);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 51);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v4);
}

uint64_t HGMinMax::SetParameter(HGMinMax *this, int a2, float a3, float a4, float a5, float a6)
{
  if (a2 == 1)
  {
    unsigned int v8 = vcvtms_s32_f32(a3);
    uint64_t v9 = 0xFFFFFFFFLL;
    if ((v8 & 0x80000000) != 0) {
      return v9;
    }
    unsigned int v10 = vcvtms_s32_f32(a4);
    if ((v10 & 0x80000000) != 0) {
      return v9;
    }
    if (*((_DWORD *)this + 107) == v8 && *((_DWORD *)this + 108) == v10) {
      return 0;
    }
    *((_DWORD *)this + 107) = v8;
    *((_DWORD *)this + 108) = v10;
  }
  else
  {
    if (a2) {
      return 0xFFFFFFFFLL;
    }
    unsigned int v6 = vcvtms_u32_f32(a3);
    if (*((_DWORD *)this + 106) == v6) {
      return 0;
    }
    *((_DWORD *)this + 106) = v6;
  }
  return 1;
}

uint64_t HGMinMax::GetOutput(HGNode *this, HGRenderer *a2)
{
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t v5 = Input;
  if (Input)
  {
    (*(void (**)(HGNode *))(*(void *)Input + 16))(Input);
    unsigned int v6 = (HGNode **)((char *)this + 408);
    unsigned int v7 = (HGNode *)*((void *)this + 51);
    if (v7 == v5)
    {
      (*(void (**)(HGNode *))(*(void *)v5 + 24))(v5);
      uint64_t v5 = *v6;
      unsigned int v8 = (HGNode *)*((void *)this + 52);
      if (v8 == *v6) {
        goto LABEL_13;
      }
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v6 = (HGNode **)((char *)this + 408);
    unsigned int v7 = (HGNode *)*((void *)this + 51);
    if (!v7)
    {
      uint64_t v5 = 0;
      unsigned int v8 = (HGNode *)*((void *)this + 52);
      if (!v8) {
        goto LABEL_13;
      }
      goto LABEL_9;
    }
  }
  if (v7) {
    (*(void (**)(HGNode *))(*(void *)v7 + 24))(v7);
  }
  *unsigned int v6 = v5;
  unsigned int v8 = (HGNode *)*((void *)this + 52);
  if (v8 != v5)
  {
LABEL_9:
    if (v8)
    {
      (*(void (**)(HGNode *))(*(void *)v8 + 24))(v8);
      uint64_t v5 = *v6;
    }
    *((void *)this + 52) = v5;
    if (v5) {
      (*(void (**)(HGNode *))(*(void *)v5 + 16))(v5);
    }
  }
LABEL_13:
  if (*((_DWORD *)this + 107) || *((_DWORD *)this + 108)) {
    HGMinMax::_buildGraph((HGMinMax *)this, a2);
  }
  return *((void *)this + 52);
}

void sub_1B78D379C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HGMinMax::_buildGraph(HGMinMax *this, HGRenderer *a2)
{
  (*(void (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 1);
  uint64_t result = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 2);
  if (*((_DWORD *)this + 107))
  {
    uint64_t result = (*(uint64_t (**)(HGRenderer *))(*(void *)a2 + 304))(a2);
    int v5 = result;
    if (*((_DWORD *)this + 108)) {
      goto LABEL_3;
    }
LABEL_7:
    int v6 = 0;
    if (*((_DWORD *)this + 107)) {
      goto LABEL_4;
    }
LABEL_8:
    unsigned int v8 = 0;
    goto LABEL_15;
  }
  int v5 = 0;
  if (!*((_DWORD *)this + 108)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = (*(uint64_t (**)(HGRenderer *))(*(void *)a2 + 304))(a2);
  int v6 = result;
  if (!*((_DWORD *)this + 107)) {
    goto LABEL_8;
  }
LABEL_4:
  int v7 = *((_DWORD *)this + 106);
  unsigned int v8 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v8);
  if (v7) {
    uint64_t v9 = (void (**)(void *, void, float, double, double, double))&unk_1F10E6138;
  }
  else {
    uint64_t v9 = (void (**)(void *, void, float, double, double, double))&unk_1F10E5ED0;
  }
  *(void *)unsigned int v8 = v9;
  *((_DWORD *)v8 + 4) = *((_DWORD *)v8 + 4) & 0xFFFFF9FF | 0x400;
  v9[12](v8, 0, (float)*((unsigned int *)this + 107), 0.0, 0.0, 0.0);
  (*(void (**)(HGNode *))(*(void *)v8 + 16))(v8);
  (*(void (**)(HGNode *, void, void))(*(void *)v8 + 120))(v8, 0, *((void *)this + 52));
  unsigned int v10 = (HGNode *)*((void *)this + 52);
  if (v10 != v8)
  {
    if (v10) {
      (*(void (**)(HGNode *))(*(void *)v10 + 24))(v10);
    }
    *((void *)this + 52) = v8;
    (*(void (**)(HGNode *))(*(void *)v8 + 16))(v8);
  }
  uint64_t result = (*(uint64_t (**)(HGNode *))(*(void *)v8 + 24))(v8);
LABEL_15:
  if (*((_DWORD *)this + 108))
  {
    int v11 = *((_DWORD *)this + 106);
    if (v6)
    {
      if (v11)
      {
        uint64_t v12 = (HGNode *)HGObject::operator new(0x1A0uLL);
        HGNode::HGNode(v12);
        uint64_t v13 = &unk_1F10E6138;
      }
      else
      {
        uint64_t v12 = (HGNode *)HGObject::operator new(0x1A0uLL);
        HGNode::HGNode(v12);
        uint64_t v13 = &unk_1F10E5ED0;
      }
      *(void *)uint64_t v12 = v13;
      *((_DWORD *)v12 + 4) = *((_DWORD *)v12 + 4) & 0xFFFFF9FF | 0x400;
      uint64_t v15 = (HGXForm *)HGObject::operator new(0x210uLL);
      HGXForm::HGXForm(v15);
      __n128 v16 = (HGTransform *)HGObject::operator new(0x90uLL);
      HGTransform::HGTransform(v16);
      (*(void (**)(HGTransform *, double, double, double, double))(*(void *)v16 + 128))(v16, 90.0, 0.0, 0.0, 1.0);
      (*(void (**)(HGXForm *, HGTransform *))(*(void *)v15 + 576))(v15, v16);
      (*(void (**)(HGXForm *))(*(void *)v15 + 16))(v15);
      (*(void (**)(HGXForm *, void, void))(*(void *)v15 + 120))(v15, 0, *((void *)this + 52));
      float32x4_t v17 = (HGXForm *)*((void *)this + 52);
      if (v17 != v15)
      {
        if (v17) {
          (*(void (**)(HGXForm *))(*(void *)v17 + 24))(v17);
        }
        *((void *)this + 52) = v15;
        (*(void (**)(HGXForm *))(*(void *)v15 + 16))(v15);
      }
      (*(void (**)(HGXForm *))(*(void *)v15 + 24))(v15);
      (*(void (**)(HGTransform *))(*(void *)v16 + 24))(v16);
      (*(void (**)(HGXForm *))(*(void *)v15 + 24))(v15);
      uint64_t v14 = *(void (***)(void *, void, float, double, double, double))v12;
    }
    else
    {
      if (v11)
      {
        uint64_t v12 = (HGNode *)HGObject::operator new(0x1A0uLL);
        HGNode::HGNode(v12);
        uint64_t v14 = (void (**)(void *, void, float, double, double, double))&unk_1F10E6608;
      }
      else
      {
        uint64_t v12 = (HGNode *)HGObject::operator new(0x1A0uLL);
        HGNode::HGNode(v12);
        uint64_t v14 = (void (**)(void *, void, float, double, double, double))&unk_1F10E63A0;
      }
      *(void *)uint64_t v12 = v14;
      *((_DWORD *)v12 + 4) = *((_DWORD *)v12 + 4) & 0xFFFFF9FF | 0x400;
    }
    v14[12](v12, 0, (float)*((unsigned int *)this + 108), 0.0, 0.0, 0.0);
    (*(void (**)(HGNode *))(*(void *)v12 + 16))(v12);
    (*(void (**)(HGNode *, void, void))(*(void *)v12 + 120))(v12, 0, *((void *)this + 52));
    uint64_t v18 = (HGNode *)*((void *)this + 52);
    if (v18 != v12)
    {
      if (v18) {
        (*(void (**)(HGNode *))(*(void *)v18 + 24))(v18);
      }
      *((void *)this + 52) = v12;
      (*(void (**)(HGNode *))(*(void *)v12 + 16))(v12);
    }
    uint64_t result = (*(uint64_t (**)(HGNode *))(*(void *)v12 + 24))(v12);
    if (v6)
    {
      int v19 = (HGXForm *)HGObject::operator new(0x210uLL);
      HGXForm::HGXForm(v19);
      uint64_t v20 = (HGTransform *)HGObject::operator new(0x90uLL);
      HGTransform::HGTransform(v20);
      (*(void (**)(HGTransform *, double, double, double, double))(*(void *)v20 + 128))(v20, -90.0, 0.0, 0.0, 1.0);
      (*(void (**)(HGXForm *, HGTransform *))(*(void *)v19 + 576))(v19, v20);
      (*(void (**)(HGXForm *))(*(void *)v19 + 16))(v19);
      (*(void (**)(HGXForm *, void, void))(*(void *)v19 + 120))(v19, 0, *((void *)this + 52));
      float32x4_t v21 = (HGXForm *)*((void *)this + 52);
      if (v21 != v19)
      {
        if (v21) {
          (*(void (**)(HGXForm *))(*(void *)v21 + 24))(v21);
        }
        *((void *)this + 52) = v19;
        (*(void (**)(HGXForm *))(*(void *)v19 + 16))(v19);
      }
      (*(void (**)(HGXForm *))(*(void *)v19 + 24))(v19);
      (*(void (**)(HGTransform *))(*(void *)v20 + 24))(v20);
      uint64_t result = (*(uint64_t (**)(HGXForm *))(*(void *)v19 + 24))(v19);
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (v5) {
    uint64_t result = (*(uint64_t (**)(HGNode *, void, uint64_t))(*(void *)v8 + 136))(v8, 0, 2);
  }
  if (v6)
  {
    (*(void (**)(HGNode *, void, uint64_t))(*(void *)v12 + 136))(v12, 0, 2);
  }
  else if (!v12)
  {
    goto LABEL_46;
  }
  uint64_t result = (*(uint64_t (**)(HGNode *))(*(void *)v12 + 24))(v12);
LABEL_46:
  if (v8) {
    return (*(uint64_t (**)(HGNode *))(*(void *)v8 + 24))(v8);
  }
  return result;
}

void sub_1B78D40D8(_Unwind_Exception *a1)
{
  HGObject::operator delete(v2);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(a1);
}

void MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)0>::~MMNode(HGNode *a1)
{
  HGNode::~HGNode(a1);

  HGObject::operator delete(v1);
}

uint64_t MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)0>::SetParameter(uint64_t a1, int a2, float a3)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v4 = vcvtms_s32_f32(a3);
  if ((v4 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 408) == v4) {
    return 0;
  }
  *(_DWORD *)(a1 + 408) = v4;
  return 1;
}

uint64_t MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)0>::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    uint64_t v3 = (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2);
    if ((int)v3 >= 1)
    {
      int v4 = 0;
      uint64_t v5 = *(int *)(a2 + 24);
      uint64_t v6 = *(int *)(a2 + 88);
      int v7 = *(float32x4_t **)(a2 + 80);
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = v7 - 1;
      uint64_t v10 = 16 * v6;
      int v11 = v7 + 1;
      do
      {
        uint64_t v12 = 0;
        uint64_t v13 = v11;
        uint64_t v14 = v9;
        do
        {
          float32x4_t v15 = v7[v12];
          uint64_t v16 = *(unsigned int *)(a1 + 408);
          if ((int)v16 >= 1)
          {
            float32x4_t v17 = v13;
            uint64_t v18 = v14;
            do
            {
              float32x4_t v19 = *v17++;
              float32x4_t v20 = v19;
              float32x4_t v21 = *v18--;
              float32x4_t v15 = vminq_f32(vminq_f32(v15, v20), v21);
              --v16;
            }
            while (v16);
          }
          *(float32x4_t *)(v8 + 16 * v12++) = v15;
          ++v14;
          ++v13;
        }
        while (v12 != v3);
        v7 += v6;
        v8 += 16 * v5;
        ++v4;
        uint64_t v9 = (float32x4_t *)((char *)v9 + v10);
        int v11 = (float32x4_t *)((char *)v11 + v10);
      }
      while (v4 != v2);
    }
  }
  return 0;
}

const char *MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)0>::GetProgram(int a1, HGRenderer *this)
{
  unsigned int Target = HGRenderer::GetTarget(this, 393216);
  int v4 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(void *)this + 128))(this, 19);
  uint64_t v5 = "//Metal1.0     \n"
       "//LEN=00000004e7\n"
       "fragment FragmentOut fragmentFunc(VertexInOut             frag        [[ stage_in ]],\n"
       "                                  const constant float4 * hg_Params   [[ buffer(0) ]],\n"
       "                                  texture2d< float >      hg_Texture0 [[ texture(0) ]],\n"
       "                                  sampler                 hg_Sampler0 [[ sampler(0) ]])\n"
       "{\n"
       "    // convolution radius\n"
       "    const int16_t radius {static_cast<int16_t>(hg_Params[0].x)};\n"
       "    \n"
       "    // Accumulator\n"
       "    float4 R0 {hg_Texture0.sample(hg_Sampler0,\n"
       "               float2(frag._texCoord0.x, frag._texCoord0.y))};\n"
       "    \n"
       "    for (int16_t k {1}; k <= radius; ++k)\n"
       "    {\n"
       "        const float uPos {frag._texCoord0.x + k};\n"
       "        const float uNeg {frag._texCoord0.x - k};\n"
       "        const float v {frag._texCoord0.y};\n"
       "        \n"
       "        float4 R1 {hg_Texture0.sample(hg_Sampler0,\n"
       "            float2(uPos, v))};\n"
       "        float4 R2 {hg_Texture0.sample(hg_Sampler0,\n"
       "            float2(uNeg, v))};\n"
       "            \n"
       "        R0 = min(R0,R1);\n"
       "        R0 = min(R0,R2);\n"
       "    }\n"
       "    \n"
       "    FragmentOut out {static_cast<float4>(R0)};\n"
       "    return out;\n"
       "}\n"
       "//MD5=2a507d29:fd0172ea:c65d89d1:7ab9dcdb\n"
       "//SIG=00000000:00000000:00000000:00000000:0001:0001:0000:0000:0000:0000:0002:0000:0001:01:0:0:0\n";
  if (v4 == 27) {
    uint64_t v5 = "//Metal1.0     \n"
  }
         "//LEN=000000054e\n"
         "fragment FragmentOut fragmentFunc(VertexInOut             frag        [[ stage_in ]],\n"
         "                                  const constant float4 * hg_Params   [[ buffer(0) ]],\n"
         "                                  texture2d< half >       hg_Texture0 [[ texture(0) ]],\n"
         "                                  sampler                 hg_Sampler0 [[ sampler(0) ]])\n"
         "{\n"
         "    // convolution radius\n"
         "    const int16_t radius {static_cast<int16_t>(hg_Params[0].x)};\n"
         "    \n"
         "    // Accumulator\n"
         "    half4 R0 {hg_Texture0.sample(hg_Sampler0,\n"
         "               float2(frag._texCoord0.x, frag._texCoord0.y))};\n"
         "    \n"
         "    for (int16_t k {1}; k <= radius; ++k)\n"
         "    {\n"
         "        const float uPos {frag._texCoord0.x + k};\n"
         "        const float uNeg {frag._texCoord0.x - k};\n"
         "        const float v {frag._texCoord0.y};\n"
         "        \n"
         "        half4 R1 {hg_Texture0.sample(hg_Sampler0,\n"
         "            float2(uPos, v))};\n"
         "        half4 R2 {hg_Texture0.sample(hg_Sampler0,\n"
         "            float2(uNeg, v))};\n"
         "\n"
         "        R0 = half4(min(R0.x,R1.x), min(R0.y,R1.y), min(R0.z,R1.z), min(R0.a,R1.a));\n"
         "        R0 = half4(min(R0.x,R2.x), min(R0.y,R2.y), min(R0.z,R2.z), min(R0.a,R2.a));\n"
         "    }\n"
         "    \n"
         "    FragmentOut out {static_cast<float4>(R0)};\n"
         "    return out;\n"
         "}\n"
         "//MD5=45a3d5e6:b2dbfac3:d747b97d:f2fc53a8\n"
         "//SIG=00000000:00000000:00000000:00000001:0001:0001:0000:0000:0000:0000:0002:0000:0001:01:0:0:0\n";
  if (Target <= 0x60B0F) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)0>::BindTexture(int a1, HGHandler *this, uint64_t a3)
{
  return 0;
}

uint64_t MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)0>::GetOutput(uint64_t a1, uint64_t a2, char *a3)
{
  return a1;
}

uint64_t MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)0>::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3) {
    return 0;
  }
  uint64_t v8 = HGRectMake4i(-*(_DWORD *)(a1 + 408), 0, *(_DWORD *)(a1 + 408), 0);
  return HGRectGrow(a4, a5, v8);
}

uint64_t MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)0>::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3) {
    return 0;
  }
  uint64_t v8 = HGRectMake4i(-*(_DWORD *)(a1 + 408), 0, *(_DWORD *)(a1 + 408), 0);
  return HGRectGrow(a4, a5, v8);
}

void MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)0>::~MMNode(HGNode *a1)
{
  HGNode::~HGNode(a1);

  HGObject::operator delete(v1);
}

uint64_t MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)0>::SetParameter(uint64_t a1, int a2, float a3)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v4 = vcvtms_s32_f32(a3);
  if ((v4 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 408) == v4) {
    return 0;
  }
  *(_DWORD *)(a1 + 408) = v4;
  return 1;
}

uint64_t MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)0>::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    uint64_t v3 = (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2);
    if ((int)v3 >= 1)
    {
      int v4 = 0;
      uint64_t v5 = *(int *)(a2 + 24);
      uint64_t v6 = *(int *)(a2 + 88);
      int v7 = *(float32x4_t **)(a2 + 80);
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = v7 - 1;
      uint64_t v10 = 16 * v6;
      int v11 = v7 + 1;
      do
      {
        uint64_t v12 = 0;
        uint64_t v13 = v11;
        uint64_t v14 = v9;
        do
        {
          float32x4_t v15 = v7[v12];
          uint64_t v16 = *(unsigned int *)(a1 + 408);
          if ((int)v16 >= 1)
          {
            float32x4_t v17 = v13;
            uint64_t v18 = v14;
            do
            {
              float32x4_t v19 = *v17++;
              float32x4_t v20 = v19;
              float32x4_t v21 = *v18--;
              float32x4_t v15 = vmaxq_f32(vmaxq_f32(v15, v20), v21);
              --v16;
            }
            while (v16);
          }
          *(float32x4_t *)(v8 + 16 * v12++) = v15;
          ++v14;
          ++v13;
        }
        while (v12 != v3);
        v7 += v6;
        v8 += 16 * v5;
        ++v4;
        uint64_t v9 = (float32x4_t *)((char *)v9 + v10);
        int v11 = (float32x4_t *)((char *)v11 + v10);
      }
      while (v4 != v2);
    }
  }
  return 0;
}

const char *MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)0>::GetProgram(int a1, HGRenderer *this)
{
  unsigned int Target = HGRenderer::GetTarget(this, 393216);
  int v4 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(void *)this + 128))(this, 19);
  uint64_t v5 = "//Metal1.0     \n"
       "//LEN=00000004e7\n"
       "fragment FragmentOut fragmentFunc(VertexInOut             frag        [[ stage_in ]],\n"
       "                                  const constant float4 * hg_Params   [[ buffer(0) ]],\n"
       "                                  texture2d< float >      hg_Texture0 [[ texture(0) ]],\n"
       "                                  sampler                 hg_Sampler0 [[ sampler(0) ]])\n"
       "{\n"
       "    // convolution radius\n"
       "    const int16_t radius {static_cast<int16_t>(hg_Params[0].x)};\n"
       "    \n"
       "    // Accumulator\n"
       "    float4 R0 {hg_Texture0.sample(hg_Sampler0,\n"
       "               float2(frag._texCoord0.x, frag._texCoord0.y))};\n"
       "    \n"
       "    for (int16_t k {1}; k <= radius; ++k)\n"
       "    {\n"
       "        const float uPos {frag._texCoord0.x + k};\n"
       "        const float uNeg {frag._texCoord0.x - k};\n"
       "        const float v {frag._texCoord0.y};\n"
       "        \n"
       "        float4 R1 {hg_Texture0.sample(hg_Sampler0,\n"
       "            float2(uPos, v))};\n"
       "        float4 R2 {hg_Texture0.sample(hg_Sampler0,\n"
       "            float2(uNeg, v))};\n"
       "            \n"
       "        R0 = max(R0,R1);\n"
       "        R0 = max(R0,R2);\n"
       "    }\n"
       "    \n"
       "    FragmentOut out {static_cast<float4>(R0)};\n"
       "    return out;\n"
       "}\n"
       "//MD5=057d1bde:ee1f0d66:240beb34:b82edddc\n"
       "//SIG=00000000:00000000:00000000:00000000:0001:0001:0000:0000:0000:0000:0002:0000:0001:01:0:0:0\n";
  if (v4 == 27) {
    uint64_t v5 = "//Metal1.0     \n"
  }
         "//LEN=000000054d\n"
         "fragment FragmentOut fragmentFunc(VertexInOut             frag        [[ stage_in ]],\n"
         "                                  const constant float4 * hg_Params   [[ buffer(0) ]],\n"
         "                                  texture2d< half >       hg_Texture0 [[ texture(0) ]],\n"
         "                                  sampler                 hg_Sampler0 [[ sampler(0) ]])\n"
         "{\n"
         "    // convolution radius\n"
         "    const int16_t radius {static_cast<int16_t>(hg_Params[0].x)};\n"
         "    \n"
         "    // Accumulator\n"
         "    half4 R0 {hg_Texture0.sample(hg_Sampler0,\n"
         "              float2(frag._texCoord0.x, frag._texCoord0.y))};\n"
         "    \n"
         "    for (int16_t k {1}; k <= radius; ++k)\n"
         "    {\n"
         "        const float uPos {frag._texCoord0.x + k};\n"
         "        const float uNeg {frag._texCoord0.x - k};\n"
         "        const float v {frag._texCoord0.y};\n"
         "        \n"
         "        half4 R1 {hg_Texture0.sample(hg_Sampler0,\n"
         "            float2(uPos, v))};\n"
         "        half4 R2 {hg_Texture0.sample(hg_Sampler0,\n"
         "            float2(uNeg, v))};\n"
         "\n"
         "        R0 = half4(max(R0.x,R1.x), max(R0.y,R1.y), max(R0.z,R1.z), max(R0.a,R1.a));\n"
         "        R0 = half4(max(R0.x,R2.x), max(R0.y,R2.y), max(R0.z,R2.z), max(R0.a,R2.a));\n"
         "    }\n"
         "    \n"
         "    FragmentOut out {static_cast<float4>(R0)};\n"
         "    return out;\n"
         "}\n"
         "//MD5=cfa1a81a:a28a7961:458c8d2d:93677577\n"
         "//SIG=00000000:00000000:00000000:00000001:0001:0001:0000:0000:0000:0000:0002:0000:0001:01:0:0:0\n";
  if (Target <= 0x60B0F) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)0>::BindTexture(int a1, HGHandler *this, uint64_t a3)
{
  return 0;
}

uint64_t MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)0>::GetOutput(uint64_t a1, uint64_t a2, char *a3)
{
  return a1;
}

uint64_t MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)0>::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3) {
    return 0;
  }
  uint64_t v8 = HGRectMake4i(-*(_DWORD *)(a1 + 408), 0, *(_DWORD *)(a1 + 408), 0);
  return HGRectGrow(a4, a5, v8);
}

uint64_t MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)0>::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3) {
    return 0;
  }
  uint64_t v8 = HGRectMake4i(-*(_DWORD *)(a1 + 408), 0, *(_DWORD *)(a1 + 408), 0);
  return HGRectGrow(a4, a5, v8);
}

void MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)1>::~MMNode(HGNode *a1)
{
  HGNode::~HGNode(a1);

  HGObject::operator delete(v1);
}

uint64_t MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)1>::SetParameter(uint64_t a1, int a2, float a3)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v4 = vcvtms_s32_f32(a3);
  if ((v4 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 408) == v4) {
    return 0;
  }
  *(_DWORD *)(a1 + 408) = v4;
  return 1;
}

uint64_t MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)1>::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    uint64_t v3 = (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2);
    if ((int)v3 >= 1)
    {
      int v4 = 0;
      uint64_t v5 = *(int *)(a2 + 88);
      uint64_t v6 = *(int *)(a2 + 24);
      uint64_t v7 = *(void *)(a2 + 80);
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = 16 * v5;
      uint64_t v10 = (float32x4_t *)(v7 - 16 * v5);
      int v11 = (float32x4_t *)(v7 + 16 * v5);
      do
      {
        uint64_t v12 = 0;
        uint64_t v13 = v11;
        uint64_t v14 = v10;
        do
        {
          float32x4_t v15 = *(float32x4_t *)(v7 + 16 * v12);
          uint64_t v16 = *(unsigned int *)(a1 + 408);
          if ((int)v16 >= 1)
          {
            float32x4_t v17 = v13;
            uint64_t v18 = v14;
            do
            {
              float32x4_t v15 = vminq_f32(vminq_f32(v15, *v17), *v18);
              v18 -= v5;
              float32x4_t v17 = (float32x4_t *)((char *)v17 + v9);
              --v16;
            }
            while (v16);
          }
          *(float32x4_t *)(v8 + 16 * v12++) = v15;
          ++v14;
          ++v13;
        }
        while (v12 != v3);
        v7 += 16 * v5;
        v8 += 16 * v6;
        ++v4;
        uint64_t v10 = (float32x4_t *)((char *)v10 + v9);
        int v11 = (float32x4_t *)((char *)v11 + v9);
      }
      while (v4 != v2);
    }
  }
  return 0;
}

const char *MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)1>::GetProgram(int a1, HGRenderer *this)
{
  unsigned int Target = HGRenderer::GetTarget(this, 393216);
  int v4 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(void *)this + 128))(this, 19);
  uint64_t v5 = "//Metal1.0     \n"
       "//LEN=00000004e7\n"
       "fragment FragmentOut fragmentFunc(VertexInOut             frag        [[ stage_in ]],\n"
       "                                  const constant float4 * hg_Params   [[ buffer(0) ]],\n"
       "                                  texture2d< float >      hg_Texture0 [[ texture(0) ]],\n"
       "                                  sampler                 hg_Sampler0 [[ sampler(0) ]])\n"
       "{\n"
       "    // convolution radius\n"
       "    const int16_t radius {static_cast<int16_t>(hg_Params[0].x)};\n"
       "    \n"
       "    // Accumulator\n"
       "    float4 R0 {hg_Texture0.sample(hg_Sampler0,\n"
       "               float2(frag._texCoord0.x, frag._texCoord0.y))};\n"
       "    \n"
       "    for (int16_t k {1}; k <= radius; ++k)\n"
       "    {\n"
       "        const float uPos {frag._texCoord0.y + k};\n"
       "        const float uNeg {frag._texCoord0.y - k};\n"
       "        const float v {frag._texCoord0.x};\n"
       "        \n"
       "        float4 R1 {hg_Texture0.sample(hg_Sampler0,\n"
       "            float2(v, uPos))};\n"
       "        float4 R2 {hg_Texture0.sample(hg_Sampler0,\n"
       "            float2(v, uNeg))};\n"
       "            \n"
       "        R0 = min(R0,R1);\n"
       "        R0 = min(R0,R2);\n"
       "    }\n"
       "    \n"
       "    FragmentOut out {static_cast<float4>(R0)};\n"
       "    return out;\n"
       "}\n"
       "//MD5=3726e26e:551a7f4a:f371f4cb:58ef313b\n"
       "//SIG=00000000:00000000:00000000:00000000:0001:0001:0000:0000:0000:0000:0002:0000:0001:01:0:0:0\n";
  if (v4 == 27) {
    uint64_t v5 = "//Metal1.0     \n"
  }
         "//LEN=000000054e\n"
         "fragment FragmentOut fragmentFunc(VertexInOut             frag        [[ stage_in ]],\n"
         "                                  const constant float4 * hg_Params   [[ buffer(0) ]],\n"
         "                                  texture2d< half >       hg_Texture0 [[ texture(0) ]],\n"
         "                                  sampler                 hg_Sampler0 [[ sampler(0) ]])\n"
         "{\n"
         "    // convolution radius\n"
         "    const int16_t radius {static_cast<int16_t>(hg_Params[0].x)};\n"
         "    \n"
         "    // Accumulator\n"
         "    half4 R0 {hg_Texture0.sample(hg_Sampler0,\n"
         "               float2(frag._texCoord0.x, frag._texCoord0.y))};\n"
         "    \n"
         "    for (int16_t k {1}; k <= radius; ++k)\n"
         "    {\n"
         "        const float uPos {frag._texCoord0.y + k};\n"
         "        const float uNeg {frag._texCoord0.y - k};\n"
         "        const float v {frag._texCoord0.x};\n"
         "        \n"
         "        half4 R1 {hg_Texture0.sample(hg_Sampler0,\n"
         "            float2(v, uPos))};\n"
         "        half4 R2 {hg_Texture0.sample(hg_Sampler0,\n"
         "            float2(v, uNeg))};\n"
         "\n"
         "        R0 = half4(min(R0.x,R1.x), min(R0.y,R1.y), min(R0.z,R1.z), min(R0.a,R1.a));\n"
         "        R0 = half4(min(R0.x,R2.x), min(R0.y,R2.y), min(R0.z,R2.z), min(R0.a,R2.a));\n"
         "    }\n"
         "    \n"
         "    FragmentOut out {static_cast<float4>(R0)};\n"
         "    return out;\n"
         "}\n"
         "//MD5=3bf26023:798dc819:7b701366:6a323336\n"
         "//SIG=00000000:00000000:00000000:00000001:0001:0001:0000:0000:0000:0000:0002:0000:0001:01:0:0:0\n";
  if (Target <= 0x60B0F) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)1>::BindTexture(int a1, HGHandler *this, uint64_t a3)
{
  return 0;
}

uint64_t MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)1>::GetOutput(uint64_t a1, uint64_t a2, char *a3)
{
  return a1;
}

uint64_t MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)1>::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3) {
    return 0;
  }
  uint64_t v8 = HGRectMake4i(0, -*(_DWORD *)(a1 + 408), 0, *(_DWORD *)(a1 + 408));
  return HGRectGrow(a4, a5, v8);
}

uint64_t MinMax::MMNode<(MinMax::Mode)0,(MinMax::Axis)1>::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3) {
    return 0;
  }
  uint64_t v8 = HGRectMake4i(0, -*(_DWORD *)(a1 + 408), 0, *(_DWORD *)(a1 + 408));
  return HGRectGrow(a4, a5, v8);
}

void MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)1>::~MMNode(HGNode *a1)
{
  HGNode::~HGNode(a1);

  HGObject::operator delete(v1);
}

uint64_t MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)1>::SetParameter(uint64_t a1, int a2, float a3)
{
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v4 = vcvtms_s32_f32(a3);
  if ((v4 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 408) == v4) {
    return 0;
  }
  *(_DWORD *)(a1 + 408) = v4;
  return 1;
}

uint64_t MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)1>::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    uint64_t v3 = (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2);
    if ((int)v3 >= 1)
    {
      int v4 = 0;
      uint64_t v5 = *(int *)(a2 + 88);
      uint64_t v6 = *(int *)(a2 + 24);
      uint64_t v7 = *(void *)(a2 + 80);
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = 16 * v5;
      uint64_t v10 = (float32x4_t *)(v7 - 16 * v5);
      int v11 = (float32x4_t *)(v7 + 16 * v5);
      do
      {
        uint64_t v12 = 0;
        uint64_t v13 = v11;
        uint64_t v14 = v10;
        do
        {
          float32x4_t v15 = *(float32x4_t *)(v7 + 16 * v12);
          uint64_t v16 = *(unsigned int *)(a1 + 408);
          if ((int)v16 >= 1)
          {
            float32x4_t v17 = v13;
            uint64_t v18 = v14;
            do
            {
              float32x4_t v15 = vmaxq_f32(vmaxq_f32(v15, *v17), *v18);
              v18 -= v5;
              float32x4_t v17 = (float32x4_t *)((char *)v17 + v9);
              --v16;
            }
            while (v16);
          }
          *(float32x4_t *)(v8 + 16 * v12++) = v15;
          ++v14;
          ++v13;
        }
        while (v12 != v3);
        v7 += 16 * v5;
        v8 += 16 * v6;
        ++v4;
        uint64_t v10 = (float32x4_t *)((char *)v10 + v9);
        int v11 = (float32x4_t *)((char *)v11 + v9);
      }
      while (v4 != v2);
    }
  }
  return 0;
}

const char *MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)1>::GetProgram(int a1, HGRenderer *this)
{
  unsigned int Target = HGRenderer::GetTarget(this, 393216);
  int v4 = (*(uint64_t (**)(HGRenderer *, uint64_t))(*(void *)this + 128))(this, 19);
  uint64_t v5 = "//Metal1.0     \n"
       "//LEN=00000004e7\n"
       "fragment FragmentOut fragmentFunc(VertexInOut             frag        [[ stage_in ]],\n"
       "                                  const constant float4 * hg_Params   [[ buffer(0) ]],\n"
       "                                  texture2d< float >      hg_Texture0 [[ texture(0) ]],\n"
       "                                  sampler                 hg_Sampler0 [[ sampler(0) ]])\n"
       "{\n"
       "    // convolution radius\n"
       "    const int16_t radius {static_cast<int16_t>(hg_Params[0].x)};\n"
       "    \n"
       "    // Accumulator\n"
       "    float4 R0 {hg_Texture0.sample(hg_Sampler0,\n"
       "               float2(frag._texCoord0.x, frag._texCoord0.y))};\n"
       "    \n"
       "    for (int16_t k {1}; k <= radius; ++k)\n"
       "    {\n"
       "        const float uPos {frag._texCoord0.y + k};\n"
       "        const float uNeg {frag._texCoord0.y - k};\n"
       "        const float v {frag._texCoord0.x};\n"
       "        \n"
       "        float4 R1 {hg_Texture0.sample(hg_Sampler0,\n"
       "            float2(v, uPos))};\n"
       "        float4 R2 {hg_Texture0.sample(hg_Sampler0,\n"
       "            float2(v, uNeg))};\n"
       "            \n"
       "        R0 = max(R0,R1);\n"
       "        R0 = max(R0,R2);\n"
       "    }\n"
       "    \n"
       "    FragmentOut out {static_cast<float4>(R0)};\n"
       "    return out;\n"
       "}\n"
       "//MD5=34c81472:306e105f:9f48d6d1:aef98b68\n"
       "//SIG=00000000:00000000:00000000:00000000:0001:0001:0000:0000:0000:0000:0002:0000:0001:01:0:0:0\n";
  if (v4 == 27) {
    uint64_t v5 = "//Metal1.0     \n"
  }
         "//LEN=000000054e\n"
         "fragment FragmentOut fragmentFunc(VertexInOut             frag        [[ stage_in ]],\n"
         "                                  const constant float4 * hg_Params   [[ buffer(0) ]],\n"
         "                                  texture2d< half >       hg_Texture0 [[ texture(0) ]],\n"
         "                                  sampler                 hg_Sampler0 [[ sampler(0) ]])\n"
         "{\n"
         "    // convolution radius\n"
         "    const int16_t radius {static_cast<int16_t>(hg_Params[0].x)};\n"
         "    \n"
         "    // Accumulator\n"
         "    half4 R0 {hg_Texture0.sample(hg_Sampler0,\n"
         "               float2(frag._texCoord0.x, frag._texCoord0.y))};\n"
         "    \n"
         "    for (int16_t k {1}; k <= radius; ++k)\n"
         "    {\n"
         "        const float uPos {frag._texCoord0.y + k};\n"
         "        const float uNeg {frag._texCoord0.y - k};\n"
         "        const float v {frag._texCoord0.x};\n"
         "        \n"
         "        half4 R1 {hg_Texture0.sample(hg_Sampler0,\n"
         "            float2(v, uPos))};\n"
         "        half4 R2 {hg_Texture0.sample(hg_Sampler0,\n"
         "            float2(v, uNeg))};\n"
         "\n"
         "        R0 = half4(max(R0.x,R1.x), max(R0.y,R1.y), max(R0.z,R1.z), max(R0.a,R1.a));\n"
         "        R0 = half4(max(R0.x,R2.x), max(R0.y,R2.y), max(R0.z,R2.z), max(R0.a,R2.a));\n"
         "    }\n"
         "    \n"
         "    FragmentOut out {static_cast<float4>(R0)};\n"
         "    return out;\n"
         "}\n"
         "//MD5=244a8df3:77093f9d:67a0f5ac:f9949def\n"
         "//SIG=00000000:00000000:00000000:00000001:0001:0001:0000:0000:0000:0000:0002:0000:0001:01:0:0:0\n";
  if (Target <= 0x60B0F) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)1>::BindTexture(int a1, HGHandler *this, uint64_t a3)
{
  return 0;
}

uint64_t MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)1>::GetOutput(uint64_t a1, uint64_t a2, char *a3)
{
  return a1;
}

uint64_t MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)1>::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3) {
    return 0;
  }
  uint64_t v8 = HGRectMake4i(0, -*(_DWORD *)(a1 + 408), 0, *(_DWORD *)(a1 + 408));
  return HGRectGrow(a4, a5, v8);
}

uint64_t MinMax::MMNode<(MinMax::Mode)1,(MinMax::Axis)1>::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3) {
    return 0;
  }
  uint64_t v8 = HGRectMake4i(0, -*(_DWORD *)(a1 + 408), 0, *(_DWORD *)(a1 + 408));
  return HGRectGrow(a4, a5, v8);
}

const char *HgcBlendBlur_2::GetProgram(HgcBlendBlur_2 *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000048d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = (half4) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy);\n"
             "    r0.x = fmax(r0.x, c0.x);\n"
             "    r0.x = r0.x*half(hg_Params[0].x) + half(hg_Params[1].x);\n"
             "    r0.x = clamp(r0.x*half(hg_Params[2].x), 0.00000h, 1.00000h);\n"
             "    output.color0 = mix(float4(r1), float4(r2), float4(r0.xxxx));\n"
             "    return output;\n"
             "}\n"
             "//MD5=aa767a30:43e6c19d:194499ff:c7dbf93e\n"
             "//SIG=00400000:00000007:00000007:00000007:0001:0003:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000452\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy);\n"
             "    r0.x = fmax(r0.x, c0.x);\n"
             "    r0.x = r0.x*hg_Params[0].x + hg_Params[1].x;\n"
             "    r0.x = clamp(r0.x*hg_Params[2].x, 0.00000f, 1.00000f);\n"
             "    output.color0 = mix(r1, r2, r0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e6a820fd:1bf2525f:b73f4bfa:536e503b\n"
             "//SIG=00000000:00000007:00000007:00000000:0001:0003:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000432\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "uniform defaultp vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = texture2D(hg_Texture2, hg_TexCoord2.xy);\n"
           "    r0.x = max(r0.x, c0.x);\n"
           "    r0.x = r0.x*hg_ProgramLocal0.x + hg_ProgramLocal1.x;\n"
           "    r0.x = clamp(r0.x*hg_ProgramLocal2.x, 0.00000, 1.00000);\n"
           "    gl_FragColor = mix(r1, r2, r0.xxxx);\n"
           "}\n"
           "//MD5=ad430f94:4dc630c7:b0e05cdb:f026c832\n"
           "//SIG=00000000:00000007:00000007:00000000:0001:0003:0003:0000:0000:0000:0000:0000:0003:03:0:1:0\n";
  }
}

void HgcBlendBlur_2::InitProgramDescriptor(HgcBlendBlur_2 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcBlendBlur_2_hgc_visible", "//Metal1.0     \n//LEN=0000000234\n[[ visible ]] FragmentOut HgcBlendBlur_2_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = color0.x;\n"
    "    r1 = color1;\n"
    "    r2 = color2;\n"
    "    r0.x = fmax(r0.x, c0.x);\n"
    "    r0.x = r0.x*hg_Params[0].x + hg_Params[1].x;\n"
    "    r0.x = clamp(r0.x*hg_Params[2].x, 0.00000f, 1.00000f);\n"
    "    output.color0 = mix(r1, r2, r0.xxxx);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcBlendBlur_2");
}

void sub_1B78D5524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78D555C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78D5554);
}

void HgcBlendBlur_2::shaderDescription(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "HgcBlendBlur_2 [hgc1]");
}

uint64_t HgcBlendBlur_2::BindTexture(HgcBlendBlur_2 *this, HGHandler *a2, int a3)
{
  if (a3 == 2)
  {
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 2;
  }
  else if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 1;
  }
  else
  {
    if (a3) {
      return 0xFFFFFFFFLL;
    }
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    int v4 = a2;
    int v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcBlendBlur_2::Bind(HgcBlendBlur_2 *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcBlendBlur_2::RenderTile(HgcBlendBlur_2 *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    unint64_t v3 = (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
    int v4 = (float32x4_t *)*((void *)a2 + 10);
    int v5 = (float32x4_t *)*((void *)a2 + 12);
    int v6 = (float32x4_t *)*((void *)a2 + 14);
    uint64_t v7 = (float32x4_t *)*((void *)a2 + 2);
    uint64_t v8 = *((int *)a2 + 6);
    uint64_t v9 = *((int *)a2 + 30);
    uint64_t v10 = *((int *)a2 + 26);
    uint64_t v11 = *((int *)a2 + 22);
    if ((int)v3 < 4)
    {
      if ((int)v3 >= 1)
      {
        int v50 = 0;
        uint64_t v51 = 16 * v11;
        uint64_t v52 = 16 * v10;
        uint64_t v53 = 16 * v9;
        uint64_t v54 = 16 * v8;
        uint64_t v55 = 16 * v3;
        do
        {
          unint64_t v56 = 0;
          do
          {
            int8x16_t v57 = (float32x4_t *)*((void *)this + 51);
            v7[v56 / 0x10] = vaddq_f32(v5[v56 / 0x10], vmulq_n_f32(vsubq_f32(v6[v56 / 0x10], v5[v56 / 0x10]), vminq_f32(vmaxq_f32(vmulq_f32(v57[2], vaddq_f32(v57[1], vmulq_f32(vmaxq_f32(v4[v56 / 0x10], v57[3]), *v57))), v57[3]), v57[4]).f32[0]));
            v56 += 16;
          }
          while (v55 != v56);
          ++v50;
          int v4 = (float32x4_t *)((char *)v4 + v51);
          int v5 = (float32x4_t *)((char *)v5 + v52);
          int v6 = (float32x4_t *)((char *)v6 + v53);
          uint64_t v7 = (float32x4_t *)((char *)v7 + v54);
        }
        while (v50 != v2);
      }
    }
    else
    {
      int v12 = 0;
      uint64_t v13 = 16 * v10;
      uint64_t v14 = 16 * v9;
      uint64_t v15 = 16 * v8;
      uint64_t v16 = v4 + 4;
      uint64_t v17 = 16 * v11;
      uint64_t v18 = v5 + 4;
      float32x4_t v19 = v6 + 4;
      float32x4_t v20 = v7 + 4;
      do
      {
        unint64_t v21 = 0;
        unint64_t v22 = 0;
        float32x2_t v23 = v20;
        uint64_t v24 = v19;
        float32x4_t v25 = v18;
        uint64_t v26 = v16;
        do
        {
          float32x4_t v27 = v26;
          float32x4_t v28 = v25;
          int32x4_t v29 = v24;
          int32x4_t v30 = v23;
          float32x4_t v31 = (float32x4_t *)*((void *)this + 51);
          float32x4_t v33 = v31[2];
          float32x4_t v32 = v31[3];
          float32x4_t v34 = v31[1];
          float32x4_t v35 = vmaxq_f32(vmulq_f32(v33, vaddq_f32(v34, vmulq_f32(vmaxq_f32(v4[v21], v32), *v31))), v32);
          float32x4_t v36 = vmaxq_f32(vmulq_f32(v33, vaddq_f32(v34, vmulq_f32(vmaxq_f32(v4[v21 + 1], v32), *v31))), v32);
          float32x4_t v37 = vmaxq_f32(vmulq_f32(v33, vaddq_f32(v34, vmulq_f32(vmaxq_f32(v4[v21 + 2], v32), *v31))), v32);
          float32x4_t v38 = vmaxq_f32(vmulq_f32(v33, vaddq_f32(v34, vmulq_f32(vmaxq_f32(v4[v21 + 3], v32), *v31))), v32);
          float32x4_t v39 = v31[4];
          float32x4_t v40 = vaddq_f32(v5[v21 + 1], vmulq_n_f32(vsubq_f32(v6[v21 + 1], v5[v21 + 1]), vminq_f32(v36, v39).f32[0]));
          float32x4_t v41 = vaddq_f32(v5[v21 + 2], vmulq_n_f32(vsubq_f32(v6[v21 + 2], v5[v21 + 2]), vminq_f32(v37, v39).f32[0]));
          float32x4_t v42 = vaddq_f32(v5[v21 + 3], vmulq_n_f32(vsubq_f32(v6[v21 + 3], v5[v21 + 3]), vminq_f32(v38, v39).f32[0]));
          int8x16_t v43 = &v7[v21];
          *int8x16_t v43 = vaddq_f32(v5[v21], vmulq_n_f32(vsubq_f32(v6[v21], v5[v21]), vminq_f32(v35, v39).f32[0]));
          v43[1] = v40;
          v22 += 4;
          v21 += 4;
          v26 += 4;
          v43[2] = v41;
          v43[3] = v42;
          v25 += 4;
          uint64_t v24 = v29 + 4;
          float32x2_t v23 = v30 + 4;
        }
        while ((uint64_t)v22 < (uint64_t)(v3 - 3));
        if ((int)v3 > (int)v22)
        {
          do
          {
            float32x4_t v44 = *v27++;
            float32x4_t v45 = v44;
            float32x4_t v46 = *v28++;
            float32x4_t v47 = v46;
            float32x4_t v48 = (float32x4_t *)*((void *)this + 51);
            float32x4_t v49 = *v29++;
            *v30++ = vaddq_f32(v47, vmulq_n_f32(vsubq_f32(v49, v47), vminq_f32(vmaxq_f32(vmulq_f32(v48[2], vaddq_f32(v48[1], vmulq_f32(vmaxq_f32(v45, v48[3]), *v48))), v48[3]), v48[4]).f32[0]));
            ++v22;
          }
          while (v22 < v3);
        }
        ++v12;
        int v5 = (float32x4_t *)((char *)v5 + v13);
        int v6 = (float32x4_t *)((char *)v6 + v14);
        uint64_t v7 = (float32x4_t *)((char *)v7 + v15);
        int v4 = (float32x4_t *)((char *)v4 + v17);
        uint64_t v16 = (float32x4_t *)((char *)v16 + v17);
        uint64_t v18 = (float32x4_t *)((char *)v18 + v13);
        float32x4_t v19 = (float32x4_t *)((char *)v19 + v14);
        float32x4_t v20 = (float32x4_t *)((char *)v20 + v15);
      }
      while (v12 != v2);
    }
  }
  return 0;
}

uint64_t HgcBlendBlur_2::GetDOD(HgcBlendBlur_2 *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcBlendBlur_2::GetROI(HgcBlendBlur_2 *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcBlendBlur_2::~HgcBlendBlur_2(HGNode *this)
{
  *(void *)this = &unk_1F10E6870;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C404247E4FDLL);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E6870;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C404247E4FDLL);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HgcBlendBlur_2::SetParameter(HgcBlendBlur_2 *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *uint64_t v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcBlendBlur_2::GetParameter(HgcBlendBlur_2 *this, unsigned int a2, float *a3)
{
  if (a2 > 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  int v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcBlendBlur_3::GetProgram(HgcBlendBlur_3 *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000005d4\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]], \n"
             "    texture2d< half > hg_Texture3 [[ texture(3) ]], \n"
             "    sampler hg_Sampler3 [[ sampler(3) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = (half4) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy);\n"
             "    r3 = (half4) hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy);\n"
             "    r0.x = fmax(r0.x, c0.x);\n"
             "    r0.x = r0.x*half(hg_Params[0].x);\n"
             "    r4.x = r0.x + half(hg_Params[1].x);\n"
             "    r4.x = clamp(r4.x*half(hg_Params[2].x), 0.00000h, 1.00000h);\n"
             "    r4 = mix(r1, r2, r4.xxxx);\n"
             "    r0.x = r0.x + half(hg_Params[3].x);\n"
             "    r0.x = clamp(r0.x*half(hg_Params[4].x), 0.00000h, 1.00000h);\n"
             "    output.color0 = mix(float4(r4), float4(r3), float4(r0.xxxx));\n"
             "    return output;\n"
             "}\n"
             "//MD5=4d97c1a1:51645ce4:7fcb49ff:f74049af\n"
             "//SIG=00400000:0000000f:0000000f:0000000f:0001:0005:0005:0000:0000:0000:001e:0000:0004:04:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000586\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]], \n"
             "    texture2d< float > hg_Texture3 [[ texture(3) ]], \n"
             "    sampler hg_Sampler3 [[ sampler(3) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy);\n"
             "    r3 = hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy);\n"
             "    r0.x = fmax(r0.x, c0.x);\n"
             "    r0.x = r0.x*hg_Params[0].x;\n"
             "    r4.x = r0.x + hg_Params[1].x;\n"
             "    r4.x = clamp(r4.x*hg_Params[2].x, 0.00000f, 1.00000f);\n"
             "    r4 = mix(r1, r2, r4.xxxx);\n"
             "    r0.x = r0.x + hg_Params[3].x;\n"
             "    r0.x = clamp(r0.x*hg_Params[4].x, 0.00000f, 1.00000f);\n"
             "    output.color0 = mix(r4, r3, r0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=1a704606:298fad20:53f42e0b:42d4cdc2\n"
             "//SIG=00000000:0000000f:0000000f:00000000:0001:0005:0005:0000:0000:0000:001e:0000:0004:04:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000598\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp sampler2D hg_Texture3;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "uniform defaultp vec4 hg_ProgramLocal2;\n"
           "uniform defaultp vec4 hg_ProgramLocal3;\n"
           "uniform defaultp vec4 hg_ProgramLocal4;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = texture2D(hg_Texture2, hg_TexCoord2.xy);\n"
           "    r3 = texture2D(hg_Texture3, hg_TexCoord3.xy);\n"
           "    r0.x = max(r0.x, c0.x);\n"
           "    r0.x = r0.x*hg_ProgramLocal0.x;\n"
           "    r4.x = r0.x + hg_ProgramLocal1.x;\n"
           "    r4.x = clamp(r4.x*hg_ProgramLocal2.x, 0.00000, 1.00000);\n"
           "    r4 = mix(r1, r2, r4.xxxx);\n"
           "    r0.x = r0.x + hg_ProgramLocal3.x;\n"
           "    r0.x = clamp(r0.x*hg_ProgramLocal4.x, 0.00000, 1.00000);\n"
           "    gl_FragColor = mix(r4, r3, r0.xxxx);\n"
           "}\n"
           "//MD5=fe2d5407:e86404d7:349ecd54:74bb66cc\n"
           "//SIG=00000000:0000000f:0000000f:00000000:0001:0005:0005:0000:0000:0000:0000:0000:0004:04:0:1:0\n";
  }
}

void HgcBlendBlur_3::InitProgramDescriptor(HgcBlendBlur_3 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcBlendBlur_3_hgc_visible", "//Metal1.0     \n//LEN=00000002ed\n[[ visible ]] FragmentOut HgcBlendBlur_3_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2,\n    float4 color3)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = color0.x;\n"
    "    r1 = color1;\n"
    "    r2 = color2;\n"
    "    r3 = color3;\n"
    "    r0.x = fmax(r0.x, c0.x);\n"
    "    r0.x = r0.x*hg_Params[0].x;\n"
    "    r4.x = r0.x + hg_Params[1].x;\n"
    "    r4.x = clamp(r4.x*hg_Params[2].x, 0.00000f, 1.00000f);\n"
    "    r4 = mix(r1, r2, r4.xxxx);\n"
    "    r0.x = r0.x + hg_Params[3].x;\n"
    "    r0.x = clamp(r0.x*hg_Params[4].x, 0.00000f, 1.00000f);\n"
    "    output.color0 = mix(r4, r3, r0.xxxx);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcBlendBlur_3");
}

void sub_1B78D61F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78D6234(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78D622CLL);
}

void HgcBlendBlur_3::shaderDescription(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "HgcBlendBlur_3 [hgc1]");
}

uint64_t HgcBlendBlur_3::BindTexture(HgcBlendBlur_3 *this, HGHandler *a2, int a3)
{
  switch(a3)
  {
    case 0:
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 72))(a2, 0, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 0;
      goto LABEL_7;
    case 1:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 1;
      goto LABEL_7;
    case 2:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 2;
      goto LABEL_7;
    case 3:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 3, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 3;
LABEL_7:
      HGHandler::TexCoord(v4, v5, 0, 0, 0);
      int v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
      uint64_t result = 0;
      if (!v7)
      {
        (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
        uint64_t result = 0;
      }
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcBlendBlur_3::Bind(HgcBlendBlur_3 *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcBlendBlur_3::RenderTile(HgcBlendBlur_3 *this, HGTile *a2)
{
  int v85 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v85 >= 1)
  {
    uint64_t v2 = (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
    unint64_t v3 = (float32x4_t *)*((void *)a2 + 10);
    int v4 = (float32x4_t *)*((void *)a2 + 12);
    int v5 = (float32x4_t *)*((void *)a2 + 14);
    int v6 = (float32x4_t *)*((void *)a2 + 16);
    int v7 = (float32x4_t *)*((void *)a2 + 2);
    uint64_t v8 = *((int *)a2 + 6);
    uint64_t v9 = *((int *)a2 + 34);
    uint64_t v10 = *((int *)a2 + 30);
    uint64_t v11 = *((int *)a2 + 26);
    uint64_t v12 = *((int *)a2 + 22);
    if ((int)v2 < 3)
    {
      if ((int)v2 >= 1)
      {
        int v67 = 0;
        uint64_t v68 = 16 * v12;
        uint64_t v69 = 16 * v11;
        uint64_t v70 = 16 * v10;
        uint64_t v71 = 16 * v9;
        uint64_t v72 = 16 * v8;
        uint64_t v73 = 16 * v2;
        do
        {
          unint64_t v74 = 0;
          do
          {
            float32x4_t v75 = (float32x4_t *)*((void *)this + 51);
            float32x4_t v76 = v75[5];
            float32x4_t v77 = vmulq_f32(vmaxq_f32(v3[v74 / 0x10], v76), *v75);
            float32x4_t v78 = v75[6];
            float32x4_t v79 = vaddq_f32(v4[v74 / 0x10], vmulq_n_f32(vsubq_f32(v5[v74 / 0x10], v4[v74 / 0x10]), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v77, v75[1]), v75[2]), v76), v78).f32[0]));
            v7[v74 / 0x10] = vaddq_f32(v79, vmulq_n_f32(vsubq_f32(v6[v74 / 0x10], v79), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v77, v75[3]), v75[4]), v76), v78).f32[0]));
            v74 += 16;
          }
          while (v73 != v74);
          ++v67;
          unint64_t v3 = (float32x4_t *)((char *)v3 + v68);
          int v4 = (float32x4_t *)((char *)v4 + v69);
          int v5 = (float32x4_t *)((char *)v5 + v70);
          int v6 = (float32x4_t *)((char *)v6 + v71);
          int v7 = (float32x4_t *)((char *)v7 + v72);
        }
        while (v67 != v85);
      }
    }
    else
    {
      int v13 = 0;
      uint64_t v83 = 16 * v10;
      uint64_t v84 = 16 * v11;
      uint64_t v14 = v3 + 3;
      uint64_t v81 = 16 * v8;
      uint64_t v82 = 16 * v9;
      uint64_t v15 = v4 + 3;
      uint64_t v16 = 16 * v12;
      uint64_t v17 = v5 + 3;
      uint64_t v18 = v6 + 3;
      float32x4_t v19 = v7 + 3;
      do
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        int v22 = 3;
        float32x2_t v23 = v19;
        uint64_t v24 = v18;
        float32x4_t v25 = v17;
        uint64_t v26 = v15;
        float32x4_t v27 = v14;
        do
        {
          float32x4_t v28 = v27;
          int32x4_t v29 = v26;
          int32x4_t v30 = v25;
          float32x4_t v31 = v24;
          float32x4_t v32 = v23;
          int v33 = v22;
          float32x4_t v34 = (float32x4_t *)*((void *)this + 51);
          float32x4_t v36 = v34[4];
          float32x4_t v35 = v34[5];
          float32x4_t v37 = v34[1];
          float32x4_t v38 = vmulq_f32(vmaxq_f32(v3[v20], v35), *v34);
          float32x4_t v39 = vmulq_f32(vmaxq_f32(v3[v20 + 1], v35), *v34);
          float32x4_t v40 = vmulq_f32(vmaxq_f32(v3[v20 + 2], v35), *v34);
          float32x4_t v41 = vaddq_f32(v38, v37);
          float32x4_t v42 = v34[2];
          float32x4_t v43 = v34[3];
          float32x4_t v44 = vmulq_f32(vaddq_f32(v39, v37), v42);
          float32x4_t v45 = vmulq_f32(vaddq_f32(v40, v37), v42);
          float32x4_t v46 = vmaxq_f32(vmulq_f32(v41, v42), v35);
          float32x4_t v47 = v34[6];
          float32x4_t v48 = vaddq_f32(v4[v20], vmulq_n_f32(vsubq_f32(v5[v20], v4[v20]), vminq_f32(v46, v47).f32[0]));
          float32x4_t v49 = vaddq_f32(v4[v20 + 1], vmulq_n_f32(vsubq_f32(v5[v20 + 1], v4[v20 + 1]), vminq_f32(vmaxq_f32(v44, v35), v47).f32[0]));
          float32x4_t v50 = vaddq_f32(v4[v20 + 2], vmulq_n_f32(vsubq_f32(v5[v20 + 2], v4[v20 + 2]), vminq_f32(vmaxq_f32(v45, v35), v47).f32[0]));
          float32x4_t v51 = vaddq_f32(v48, vmulq_n_f32(vsubq_f32(v6[v20], v48), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v38, v43), v36), v35), v47).f32[0]));
          uint64_t v52 = &v7[v20];
          v21 += 3;
          float32x4_t v53 = vaddq_f32(v49, vmulq_n_f32(vsubq_f32(v6[v20 + 1], v49), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v39, v43), v36), v35), v47).f32[0]));
          float32x4_t v54 = vaddq_f32(v50, vmulq_n_f32(vsubq_f32(v6[v20 + 2], v50), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v40, v43), v36), v35), v47).f32[0]));
          v20 += 3;
          float32x4_t v27 = v28 + 3;
          v26 += 3;
          v25 += 3;
          *uint64_t v52 = v51;
          v52[1] = v53;
          v52[2] = v54;
          uint64_t v24 = v31 + 3;
          v23 += 3;
          v22 += 3;
        }
        while (v21 < v2 - 2);
        if ((int)v2 > (int)v21)
        {
          do
          {
            float32x4_t v55 = *v28++;
            float32x4_t v56 = v55;
            float32x4_t v57 = *v29++;
            float32x4_t v58 = v57;
            float32x4_t v59 = *v30++;
            float32x4_t v60 = v59;
            float32x4_t v61 = *v31++;
            float32x4_t v62 = (float32x4_t *)*((void *)this + 51);
            float32x4_t v63 = v62[5];
            float32x4_t v64 = vmulq_f32(vmaxq_f32(v56, v63), *v62);
            float32x4_t v65 = v62[6];
            float32x4_t v66 = vaddq_f32(v58, vmulq_n_f32(vsubq_f32(v60, v58), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v64, v62[1]), v62[2]), v63), v65).f32[0]));
            *v32++ = vaddq_f32(v66, vmulq_n_f32(vsubq_f32(v61, v66), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v64, v62[3]), v62[4]), v63), v65).f32[0]));
            ++v33;
          }
          while ((int)v2 > v33);
        }
        ++v13;
        int v4 = (float32x4_t *)((char *)v4 + v84);
        int v5 = (float32x4_t *)((char *)v5 + v83);
        int v6 = (float32x4_t *)((char *)v6 + v82);
        int v7 = (float32x4_t *)((char *)v7 + v81);
        unint64_t v3 = (float32x4_t *)((char *)v3 + v16);
        uint64_t v14 = (float32x4_t *)((char *)v14 + v16);
        uint64_t v15 = (float32x4_t *)((char *)v15 + v84);
        uint64_t v17 = (float32x4_t *)((char *)v17 + v83);
        uint64_t v18 = (float32x4_t *)((char *)v18 + v82);
        float32x4_t v19 = (float32x4_t *)((char *)v19 + v81);
      }
      while (v13 != v85);
    }
  }
  return 0;
}

uint64_t HgcBlendBlur_3::GetDOD(HgcBlendBlur_3 *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 4) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcBlendBlur_3::GetROI(HgcBlendBlur_3 *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 4) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcBlendBlur_3::~HgcBlendBlur_3(HGNode *this)
{
  *(void *)this = &unk_1F10E6AC0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40AC4F46D1);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E6AC0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40AC4F46D1);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HgcBlendBlur_3::SetParameter(HgcBlendBlur_3 *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *uint64_t v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcBlendBlur_3::GetParameter(HgcBlendBlur_3 *this, unsigned int a2, float *a3)
{
  if (a2 > 4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  int v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcBlendBlur_4::GetProgram(HgcBlendBlur_4 *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000706\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]], \n"
             "    texture2d< half > hg_Texture3 [[ texture(3) ]], \n"
             "    sampler hg_Sampler3 [[ sampler(3) ]], \n"
             "    texture2d< half > hg_Texture4 [[ texture(4) ]], \n"
             "    sampler hg_Sampler4 [[ sampler(4) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = (half4) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy);\n"
             "    r3 = (half4) hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy);\n"
             "    r4 = (half4) hg_Texture4.sample(hg_Sampler4, frag._texCoord4.xy);\n"
             "    r0.x = fmax(r0.x, c0.x);\n"
             "    r0.x = r0.x*half(hg_Params[0].x);\n"
             "    r5.x = r0.x + half(hg_Params[1].x);\n"
             "    r5.x = clamp(r5.x*half(hg_Params[2].x), 0.00000h, 1.00000h);\n"
             "    r5 = mix(r1, r2, r5.xxxx);\n"
             "    r2.x = r0.x + half(hg_Params[3].x);\n"
             "    r2.x = clamp(r2.x*half(hg_Params[4].x), 0.00000h, 1.00000h);\n"
             "    r5 = mix(r5, r3, r2.xxxx);\n"
             "    r0.x = r0.x + half(hg_Params[5].x);\n"
             "    r0.x = clamp(r0.x*half(hg_Params[6].x), 0.00000h, 1.00000h);\n"
             "    output.color0 = mix(float4(r5), float4(r4), float4(r0.xxxx));\n"
             "    return output;\n"
             "}\n"
             "//MD5=627e420d:ac3f65df:3d6a2763:e2f8e48d\n"
             "//SIG=00400000:0000001f:0000001f:0000001f:0001:0007:0006:0000:0000:0000:003e:0000:0005:05:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000006a5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]], \n"
             "    texture2d< float > hg_Texture3 [[ texture(3) ]], \n"
             "    sampler hg_Sampler3 [[ sampler(3) ]], \n"
             "    texture2d< float > hg_Texture4 [[ texture(4) ]], \n"
             "    sampler hg_Sampler4 [[ sampler(4) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy);\n"
             "    r3 = hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy);\n"
             "    r4 = hg_Texture4.sample(hg_Sampler4, frag._texCoord4.xy);\n"
             "    r0.x = fmax(r0.x, c0.x);\n"
             "    r0.x = r0.x*hg_Params[0].x;\n"
             "    r5.x = r0.x + hg_Params[1].x;\n"
             "    r5.x = clamp(r5.x*hg_Params[2].x, 0.00000f, 1.00000f);\n"
             "    r5 = mix(r1, r2, r5.xxxx);\n"
             "    r2.x = r0.x + hg_Params[3].x;\n"
             "    r2.x = clamp(r2.x*hg_Params[4].x, 0.00000f, 1.00000f);\n"
             "    r5 = mix(r5, r3, r2.xxxx);\n"
             "    r0.x = r0.x + hg_Params[5].x;\n"
             "    r0.x = clamp(r0.x*hg_Params[6].x, 0.00000f, 1.00000f);\n"
             "    output.color0 = mix(r5, r4, r0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=80d6b672:6abcf68f:93b3ec5c:4ec43f78\n"
             "//SIG=00000000:0000001f:0000001f:00000000:0001:0007:0006:0000:0000:0000:003e:0000:0005:05:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000006e9\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp sampler2D hg_Texture3;\n"
           "uniform defaultp sampler2D hg_Texture4;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "uniform defaultp vec4 hg_ProgramLocal2;\n"
           "uniform defaultp vec4 hg_ProgramLocal3;\n"
           "uniform defaultp vec4 hg_ProgramLocal4;\n"
           "uniform defaultp vec4 hg_ProgramLocal5;\n"
           "uniform defaultp vec4 hg_ProgramLocal6;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "varying highp vec4 hg_TexCoord4;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2, r3, r4, r5;\n"
           "\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = texture2D(hg_Texture2, hg_TexCoord2.xy);\n"
           "    r3 = texture2D(hg_Texture3, hg_TexCoord3.xy);\n"
           "    r4 = texture2D(hg_Texture4, hg_TexCoord4.xy);\n"
           "    r0.x = max(r0.x, c0.x);\n"
           "    r0.x = r0.x*hg_ProgramLocal0.x;\n"
           "    r5.x = r0.x + hg_ProgramLocal1.x;\n"
           "    r5.x = clamp(r5.x*hg_ProgramLocal2.x, 0.00000, 1.00000);\n"
           "    r5 = mix(r1, r2, r5.xxxx);\n"
           "    r2.x = r0.x + hg_ProgramLocal3.x;\n"
           "    r2.x = clamp(r2.x*hg_ProgramLocal4.x, 0.00000, 1.00000);\n"
           "    r5 = mix(r5, r3, r2.xxxx);\n"
           "    r0.x = r0.x + hg_ProgramLocal5.x;\n"
           "    r0.x = clamp(r0.x*hg_ProgramLocal6.x, 0.00000, 1.00000);\n"
           "    gl_FragColor = mix(r5, r4, r0.xxxx);\n"
           "}\n"
           "//MD5=66a338c1:c5285239:914c20c7:2234eca0\n"
           "//SIG=00000000:0000001f:0000001f:00000000:0001:0007:0006:0000:0000:0000:0000:0000:0005:05:0:1:0\n";
  }
}

void HgcBlendBlur_4::InitProgramDescriptor(HgcBlendBlur_4 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcBlendBlur_4_hgc_visible", "//Metal1.0     \n//LEN=0000000391\n[[ visible ]] FragmentOut HgcBlendBlur_4_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2,\n    float4 color3,\n    float4 color4)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = color0.x;\n"
    "    r1 = color1;\n"
    "    r2 = color2;\n"
    "    r3 = color3;\n"
    "    r4 = color4;\n"
    "    r0.x = fmax(r0.x, c0.x);\n"
    "    r0.x = r0.x*hg_Params[0].x;\n"
    "    r5.x = r0.x + hg_Params[1].x;\n"
    "    r5.x = clamp(r5.x*hg_Params[2].x, 0.00000f, 1.00000f);\n"
    "    r5 = mix(r1, r2, r5.xxxx);\n"
    "    r2.x = r0.x + hg_Params[3].x;\n"
    "    r2.x = clamp(r2.x*hg_Params[4].x, 0.00000f, 1.00000f);\n"
    "    r5 = mix(r5, r3, r2.xxxx);\n"
    "    r0.x = r0.x + hg_Params[5].x;\n"
    "    r0.x = clamp(r0.x*hg_Params[6].x, 0.00000f, 1.00000f);\n"
    "    output.color0 = mix(r5, r4, r0.xxxx);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcBlendBlur_4");
}

void sub_1B78D7160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78D71A0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78D7198);
}

void HgcBlendBlur_4::shaderDescription(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "HgcBlendBlur_4 [hgc1]");
}

uint64_t HgcBlendBlur_4::BindTexture(HgcBlendBlur_4 *this, HGHandler *a2, int a3)
{
  switch(a3)
  {
    case 0:
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 72))(a2, 0, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 0;
      goto LABEL_8;
    case 1:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 1;
      goto LABEL_8;
    case 2:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 2;
      goto LABEL_8;
    case 3:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 3, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 3;
      goto LABEL_8;
    case 4:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 4, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 4;
LABEL_8:
      HGHandler::TexCoord(v4, v5, 0, 0, 0);
      int v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
      uint64_t result = 0;
      if (!v7)
      {
        (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
        uint64_t result = 0;
      }
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcBlendBlur_4::Bind(HgcBlendBlur_4 *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcBlendBlur_4::RenderTile(HgcBlendBlur_4 *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    int v4 = (float32x4_t *)*((void *)a2 + 10);
    int v5 = (float32x4_t *)*((void *)a2 + 12);
    int v6 = (float32x4_t *)*((void *)a2 + 14);
    int v7 = (float32x4_t *)*((void *)a2 + 16);
    uint64_t v8 = (float32x4_t *)*((void *)a2 + 18);
    uint64_t v9 = (float32x4_t *)*((void *)a2 + 2);
    uint64_t v10 = *((int *)a2 + 6);
    uint64_t v11 = *((int *)a2 + 38);
    uint64_t v12 = *((int *)a2 + 34);
    uint64_t v13 = *((int *)a2 + 30);
    uint64_t v14 = *((int *)a2 + 26);
    uint64_t v15 = *((int *)a2 + 22);
    if (v3 < 2)
    {
      if (v3 == 1)
      {
        uint64_t v53 = 16 * v13;
        uint64_t v54 = 16 * v12;
        uint64_t v55 = 16 * v11;
        uint64_t v56 = 16 * v10;
        do
        {
          float32x4_t v57 = (float32x4_t *)*((void *)this + 51);
          float32x4_t v58 = v57[7];
          float32x4_t v59 = vmulq_f32(vmaxq_f32(*v4, v58), *v57);
          float32x4_t v60 = v57[8];
          float32x4_t v61 = vaddq_f32(*v5, vmulq_n_f32(vsubq_f32(*v6, *v5), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v59, v57[1]), v57[2]), v58), v60).f32[0]));
          float32x4_t v62 = vaddq_f32(v61, vmulq_n_f32(vsubq_f32(*v7, v61), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v59, v57[3]), v57[4]), v58), v60).f32[0]));
          v4 += v15;
          v5 += v14;
          int v6 = (float32x4_t *)((char *)v6 + v53);
          *uint64_t v9 = vaddq_f32(v62, vmulq_n_f32(vsubq_f32(*v8, v62), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v59, v57[5]), v57[6]), v58), v60).f32[0]));
          int v7 = (float32x4_t *)((char *)v7 + v54);
          uint64_t v8 = (float32x4_t *)((char *)v8 + v55);
          uint64_t v9 = (float32x4_t *)((char *)v9 + v56);
          --v2;
        }
        while (v2);
      }
    }
    else
    {
      int v16 = 0;
      uint64_t v17 = 16 * v13;
      uint64_t v18 = 16 * v12;
      uint64_t v19 = 16 * v11;
      uint64_t v20 = 16 * v10;
      uint64_t v21 = 16 * v15;
      uint64_t v22 = 16 * v14;
      do
      {
        uint64_t v23 = 0;
        int v24 = 0;
        do
        {
          float32x4_t v25 = v5[v23];
          uint64_t v26 = (float32x4_t *)*((void *)this + 51);
          float32x4_t v28 = v26[6];
          float32x4_t v27 = v26[7];
          float32x4_t v29 = v26[1];
          float32x4_t v30 = vmulq_f32(vmaxq_f32(v4[v23], v27), *v26);
          float32x4_t v31 = vmulq_f32(vmaxq_f32(v4[v23 + 1], v27), *v26);
          float32x4_t v32 = vaddq_f32(v30, v29);
          float32x4_t v33 = v26[2];
          float32x4_t v34 = v26[3];
          float32x4_t v35 = vmulq_f32(vaddq_f32(v31, v29), v33);
          float32x4_t v36 = vmaxq_f32(vmulq_f32(v32, v33), v27);
          float32x4_t v37 = v26[8];
          float32x4_t v38 = vmulq_n_f32(vsubq_f32(v6[v23], v25), vminq_f32(v36, v37).f32[0]);
          float32x4_t v39 = v26[4];
          float32x4_t v40 = v26[5];
          float32x4_t v41 = vaddq_f32(v25, v38);
          float32x4_t v42 = vaddq_f32(v5[v23 + 1], vmulq_n_f32(vsubq_f32(v6[v23 + 1], v5[v23 + 1]), vminq_f32(vmaxq_f32(v35, v27), v37).f32[0]));
          float32x4_t v43 = vaddq_f32(v41, vmulq_n_f32(vsubq_f32(v7[v23], v41), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v30, v34), v39), v27), v37).f32[0]));
          float32x4_t v44 = vaddq_f32(v42, vmulq_n_f32(vsubq_f32(v7[v23 + 1], v42), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v31, v34), v39), v27), v37).f32[0]));
          float32x4_t v45 = vaddq_f32(v44, vmulq_n_f32(vsubq_f32(v8[v23 + 1], v44), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v31, v40), v28), v27), v37).f32[0]));
          float32x4_t v46 = &v9[v23];
          *float32x4_t v46 = vaddq_f32(v43, vmulq_n_f32(vsubq_f32(v8[v23], v43), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v30, v40), v28), v27), v37).f32[0]));
          v46[1] = v45;
          v24 -= 2;
          v23 += 2;
        }
        while (v3 + v24 > 1);
        if (v3 > -v24)
        {
          float32x4_t v47 = (float32x4_t *)*((void *)this + 51);
          float32x4_t v48 = v47[7];
          float32x4_t v49 = vmulq_f32(vmaxq_f32(v4[v23], v48), *v47);
          float32x4_t v50 = v47[8];
          float32x4_t v51 = vaddq_f32(v5[v23], vmulq_n_f32(vsubq_f32(v6[v23], v5[v23]), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v49, v47[1]), v47[2]), v48), v50).f32[0]));
          float32x4_t v52 = vaddq_f32(v51, vmulq_n_f32(vsubq_f32(v7[v23], v51), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v49, v47[3]), v47[4]), v48), v50).f32[0]));
          v9[v23] = vaddq_f32(v52, vmulq_n_f32(vsubq_f32(v8[v23], v52), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v49, v47[5]), v47[6]), v48), v50).f32[0]));
        }
        ++v16;
        int v6 = (float32x4_t *)((char *)v6 + v17);
        int v7 = (float32x4_t *)((char *)v7 + v18);
        uint64_t v8 = (float32x4_t *)((char *)v8 + v19);
        uint64_t v9 = (float32x4_t *)((char *)v9 + v20);
        int v4 = (float32x4_t *)((char *)v4 + v21);
        int v5 = (float32x4_t *)((char *)v5 + v22);
      }
      while (v16 != v2);
    }
  }
  return 0;
}

uint64_t HgcBlendBlur_4::GetDOD(HgcBlendBlur_4 *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 5) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcBlendBlur_4::GetROI(HgcBlendBlur_4 *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 5) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcBlendBlur_4::~HgcBlendBlur_4(HGNode *this)
{
  *(void *)this = &unk_1F10E6D10;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40265AC83CLL);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E6D10;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40265AC83CLL);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HgcBlendBlur_4::SetParameter(HgcBlendBlur_4 *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *uint64_t v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcBlendBlur_4::GetParameter(HgcBlendBlur_4 *this, unsigned int a2, float *a3)
{
  if (a2 > 6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  int v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcBlendBlur_5::GetProgram(HgcBlendBlur_5 *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000838\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]], \n"
             "    texture2d< half > hg_Texture3 [[ texture(3) ]], \n"
             "    sampler hg_Sampler3 [[ sampler(3) ]], \n"
             "    texture2d< half > hg_Texture4 [[ texture(4) ]], \n"
             "    sampler hg_Sampler4 [[ sampler(4) ]], \n"
             "    texture2d< half > hg_Texture5 [[ texture(5) ]], \n"
             "    sampler hg_Sampler5 [[ sampler(5) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = (half4) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy);\n"
             "    r3 = (half4) hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy);\n"
             "    r4 = (half4) hg_Texture4.sample(hg_Sampler4, frag._texCoord4.xy);\n"
             "    r5 = (half4) hg_Texture5.sample(hg_Sampler5, frag._texCoord5.xy);\n"
             "    r0.x = fmax(r0.x, c0.x);\n"
             "    r0.x = r0.x*half(hg_Params[0].x);\n"
             "    r6.x = r0.x + half(hg_Params[1].x);\n"
             "    r6.x = clamp(r6.x*half(hg_Params[2].x), 0.00000h, 1.00000h);\n"
             "    r6 = mix(r1, r2, r6.xxxx);\n"
             "    r2.x = r0.x + half(hg_Params[3].x);\n"
             "    r2.x = clamp(r2.x*half(hg_Params[4].x), 0.00000h, 1.00000h);\n"
             "    r6 = mix(r6, r3, r2.xxxx);\n"
             "    r1.x = r0.x + half(hg_Params[5].x);\n"
             "    r1.x = clamp(r1.x*half(hg_Params[6].x), 0.00000h, 1.00000h);\n"
             "    r6 = mix(r6, r4, r1.xxxx);\n"
             "    r0.x = r0.x + half(hg_Params[7].x);\n"
             "    r0.x = clamp(r0.x*half(hg_Params[8].x), 0.00000h, 1.00000h);\n"
             "    output.color0 = mix(float4(r6), float4(r5), float4(r0.xxxx));\n"
             "    return output;\n"
             "}\n"
             "//MD5=1f819f5b:a3841d5a:cbe2d3a5:bdaf89e4\n"
             "//SIG=00400000:0000003f:0000003f:0000003f:0001:0009:0007:0000:0000:0000:007e:0000:0006:06:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000007c4\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]], \n"
             "    texture2d< float > hg_Texture3 [[ texture(3) ]], \n"
             "    sampler hg_Sampler3 [[ sampler(3) ]], \n"
             "    texture2d< float > hg_Texture4 [[ texture(4) ]], \n"
             "    sampler hg_Sampler4 [[ sampler(4) ]], \n"
             "    texture2d< float > hg_Texture5 [[ texture(5) ]], \n"
             "    sampler hg_Sampler5 [[ sampler(5) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy);\n"
             "    r3 = hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy);\n"
             "    r4 = hg_Texture4.sample(hg_Sampler4, frag._texCoord4.xy);\n"
             "    r5 = hg_Texture5.sample(hg_Sampler5, frag._texCoord5.xy);\n"
             "    r0.x = fmax(r0.x, c0.x);\n"
             "    r0.x = r0.x*hg_Params[0].x;\n"
             "    r6.x = r0.x + hg_Params[1].x;\n"
             "    r6.x = clamp(r6.x*hg_Params[2].x, 0.00000f, 1.00000f);\n"
             "    r6 = mix(r1, r2, r6.xxxx);\n"
             "    r2.x = r0.x + hg_Params[3].x;\n"
             "    r2.x = clamp(r2.x*hg_Params[4].x, 0.00000f, 1.00000f);\n"
             "    r6 = mix(r6, r3, r2.xxxx);\n"
             "    r1.x = r0.x + hg_Params[5].x;\n"
             "    r1.x = clamp(r1.x*hg_Params[6].x, 0.00000f, 1.00000f);\n"
             "    r6 = mix(r6, r4, r1.xxxx);\n"
             "    r0.x = r0.x + hg_Params[7].x;\n"
             "    r0.x = clamp(r0.x*hg_Params[8].x, 0.00000f, 1.00000f);\n"
             "    output.color0 = mix(r6, r5, r0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=9de98d5c:330bb5b9:d2d07cff:4179144b\n"
             "//SIG=00000000:0000003f:0000003f:00000000:0001:0009:0007:0000:0000:0000:007e:0000:0006:06:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000083a\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp sampler2D hg_Texture3;\n"
           "uniform defaultp sampler2D hg_Texture4;\n"
           "uniform defaultp sampler2D hg_Texture5;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "uniform defaultp vec4 hg_ProgramLocal2;\n"
           "uniform defaultp vec4 hg_ProgramLocal3;\n"
           "uniform defaultp vec4 hg_ProgramLocal4;\n"
           "uniform defaultp vec4 hg_ProgramLocal5;\n"
           "uniform defaultp vec4 hg_ProgramLocal6;\n"
           "uniform defaultp vec4 hg_ProgramLocal7;\n"
           "uniform defaultp vec4 hg_ProgramLocal8;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "varying highp vec4 hg_TexCoord4;\n"
           "varying highp vec4 hg_TexCoord5;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2, r3, r4, r5, r6;\n"
           "\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = texture2D(hg_Texture2, hg_TexCoord2.xy);\n"
           "    r3 = texture2D(hg_Texture3, hg_TexCoord3.xy);\n"
           "    r4 = texture2D(hg_Texture4, hg_TexCoord4.xy);\n"
           "    r5 = texture2D(hg_Texture5, hg_TexCoord5.xy);\n"
           "    r0.x = max(r0.x, c0.x);\n"
           "    r0.x = r0.x*hg_ProgramLocal0.x;\n"
           "    r6.x = r0.x + hg_ProgramLocal1.x;\n"
           "    r6.x = clamp(r6.x*hg_ProgramLocal2.x, 0.00000, 1.00000);\n"
           "    r6 = mix(r1, r2, r6.xxxx);\n"
           "    r2.x = r0.x + hg_ProgramLocal3.x;\n"
           "    r2.x = clamp(r2.x*hg_ProgramLocal4.x, 0.00000, 1.00000);\n"
           "    r6 = mix(r6, r3, r2.xxxx);\n"
           "    r1.x = r0.x + hg_ProgramLocal5.x;\n"
           "    r1.x = clamp(r1.x*hg_ProgramLocal6.x, 0.00000, 1.00000);\n"
           "    r6 = mix(r6, r4, r1.xxxx);\n"
           "    r0.x = r0.x + hg_ProgramLocal7.x;\n"
           "    r0.x = clamp(r0.x*hg_ProgramLocal8.x, 0.00000, 1.00000);\n"
           "    gl_FragColor = mix(r6, r5, r0.xxxx);\n"
           "}\n"
           "//MD5=47fbfc85:922bffb2:16d6ac3a:3532e4be\n"
           "//SIG=00000000:0000003f:0000003f:00000000:0001:0009:0007:0000:0000:0000:0000:0000:0006:06:0:1:0\n";
  }
}

void HgcBlendBlur_5::InitProgramDescriptor(HgcBlendBlur_5 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcBlendBlur_5_hgc_visible", "//Metal1.0     \n//LEN=0000000435\n[[ visible ]] FragmentOut HgcBlendBlur_5_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2,\n    float4 color3,\n    float4 color4,\n    float4 color5)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = color0.x;\n"
    "    r1 = color1;\n"
    "    r2 = color2;\n"
    "    r3 = color3;\n"
    "    r4 = color4;\n"
    "    r5 = color5;\n"
    "    r0.x = fmax(r0.x, c0.x);\n"
    "    r0.x = r0.x*hg_Params[0].x;\n"
    "    r6.x = r0.x + hg_Params[1].x;\n"
    "    r6.x = clamp(r6.x*hg_Params[2].x, 0.00000f, 1.00000f);\n"
    "    r6 = mix(r1, r2, r6.xxxx);\n"
    "    r2.x = r0.x + hg_Params[3].x;\n"
    "    r2.x = clamp(r2.x*hg_Params[4].x, 0.00000f, 1.00000f);\n"
    "    r6 = mix(r6, r3, r2.xxxx);\n"
    "    r1.x = r0.x + hg_Params[5].x;\n"
    "    r1.x = clamp(r1.x*hg_Params[6].x, 0.00000f, 1.00000f);\n"
    "    r6 = mix(r6, r4, r1.xxxx);\n"
    "    r0.x = r0.x + hg_Params[7].x;\n"
    "    r0.x = clamp(r0.x*hg_Params[8].x, 0.00000f, 1.00000f);\n"
    "    output.color0 = mix(r6, r5, r0.xxxx);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcBlendBlur_5");
}

void sub_1B78D81B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78D81FC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78D81F4);
}

void HgcBlendBlur_5::shaderDescription(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "HgcBlendBlur_5 [hgc1]");
}

uint64_t HgcBlendBlur_5::BindTexture(HgcBlendBlur_5 *this, HGHandler *a2, int a3)
{
  switch(a3)
  {
    case 0:
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 72))(a2, 0, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 0;
      goto LABEL_9;
    case 1:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 1;
      goto LABEL_9;
    case 2:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 2;
      goto LABEL_9;
    case 3:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 3, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 3;
      goto LABEL_9;
    case 4:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 4, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 4;
      goto LABEL_9;
    case 5:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 5, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 5;
LABEL_9:
      HGHandler::TexCoord(v4, v5, 0, 0, 0);
      int v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
      uint64_t result = 0;
      if (!v7)
      {
        (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
        uint64_t result = 0;
      }
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcBlendBlur_5::Bind(HgcBlendBlur_5 *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcBlendBlur_5::RenderTile(HgcBlendBlur_5 *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 20);
    uint64_t v7 = *((void *)a2 + 18);
    uint64_t v8 = *((void *)a2 + 16);
    uint64_t v9 = 16 * *((int *)a2 + 38);
    uint64_t v10 = 16 * *((int *)a2 + 34);
    uint64_t v11 = 16 * *((int *)a2 + 30);
    uint64_t v12 = 16 * *((int *)a2 + 26);
    uint64_t v13 = 16 * *((int *)a2 + 22);
    uint64_t v14 = *((void *)a2 + 14);
    uint64_t v15 = *((void *)a2 + 12);
    uint64_t v16 = 16 * *((int *)a2 + 6);
    uint64_t v17 = 16 * *((int *)a2 + 42);
    uint64_t v18 = *((void *)a2 + 10);
    while (v4 < 2)
    {
      int v43 = 0;
      if (v4 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v18 += v13;
      v15 += v12;
      v14 += v11;
      v8 += v10;
      v7 += v9;
      v6 += v17;
      v5 += v16;
      if (++v3 == v2) {
        return 0;
      }
    }
    uint64_t v19 = 0;
    int v20 = 0;
    do
    {
      uint64_t v21 = (float32x4_t *)*((void *)this + 51);
      float32x4_t v23 = v21[8];
      float32x4_t v22 = v21[9];
      float32x4_t v24 = v21[1];
      float32x4_t v25 = vmulq_f32(vmaxq_f32(*(float32x4_t *)(v18 + v19), v22), *v21);
      float32x4_t v26 = vmulq_f32(vmaxq_f32(*(float32x4_t *)(v18 + v19 + 16), v22), *v21);
      float32x4_t v27 = v21[2];
      float32x4_t v28 = v21[3];
      float32x4_t v29 = v21[10];
      float32x4_t v30 = vaddq_f32(*(float32x4_t *)(v15 + v19), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v14 + v19), *(float32x4_t *)(v15 + v19)), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v25, v24), v27), v22), v29).f32[0]));
      float32x4_t v31 = vaddq_f32(*(float32x4_t *)(v15 + v19 + 16), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v14 + v19 + 16), *(float32x4_t *)(v15 + v19 + 16)), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v26, v24), v27), v22), v29).f32[0]));
      float32x4_t v32 = v21[4];
      float32x4_t v33 = v21[5];
      float32x4_t v34 = vaddq_f32(v30, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v8 + v19), v30), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v25, v28), v32), v22), v29).f32[0]));
      float32x4_t v35 = vaddq_f32(v31, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v8 + v19 + 16), v31), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v26, v28), v32), v22), v29).f32[0]));
      float32x4_t v36 = v21[6];
      float32x4_t v37 = v21[7];
      float32x4_t v38 = vaddq_f32(v34, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v7 + v19), v34), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v25, v33), v36), v22), v29).f32[0]));
      float32x4_t v39 = vaddq_f32(v35, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v7 + v19 + 16), v35), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v26, v33), v36), v22), v29).f32[0]));
      float32x4_t v40 = vmaxq_f32(vmulq_f32(vaddq_f32(v25, v37), v23), v22);
      float32x4_t v41 = vaddq_f32(v39, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v6 + v19 + 16), v39), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v26, v37), v23), v22), v29).f32[0]));
      float32x4_t v42 = (float32x4_t *)(v5 + v19);
      *float32x4_t v42 = vaddq_f32(v38, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v6 + v19), v38), vminq_f32(v40, v29).f32[0]));
      v42[1] = v41;
      v20 -= 2;
      v19 += 32;
    }
    while (v4 + v20 > 1);
    int v43 = -v20;
    if (v43 >= v4) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v44 = 16 * v43;
    float32x4_t v45 = (float32x4_t *)*((void *)this + 51);
    float32x4_t v46 = v45[9];
    float32x4_t v47 = vmulq_f32(vmaxq_f32(*(float32x4_t *)(v18 + v44), v46), *v45);
    float32x4_t v48 = v45[10];
    float32x4_t v49 = vaddq_f32(*(float32x4_t *)(v15 + v44), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v14 + v44), *(float32x4_t *)(v15 + v44)), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v47, v45[1]), v45[2]), v46), v48).f32[0]));
    float32x4_t v50 = vaddq_f32(v49, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v8 + v44), v49), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v47, v45[3]), v45[4]), v46), v48).f32[0]));
    float32x4_t v51 = vaddq_f32(v50, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v7 + v44), v50), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v47, v45[5]), v45[6]), v46), v48).f32[0]));
    *(float32x4_t *)(v5 + v44) = vaddq_f32(v51, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v6 + v44), v51), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v47, v45[7]), v45[8]), v46), v48).f32[0]));
    goto LABEL_3;
  }
  return 0;
}

uint64_t HgcBlendBlur_5::GetDOD(HgcBlendBlur_5 *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 6) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcBlendBlur_5::GetROI(HgcBlendBlur_5 *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 6) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcBlendBlur_5::~HgcBlendBlur_5(HGNode *this)
{
  *(void *)this = &unk_1F10E6F60;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40C3A7E6FCLL);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E6F60;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40C3A7E6FCLL);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HgcBlendBlur_5::SetParameter(HgcBlendBlur_5 *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 8) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *uint64_t v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcBlendBlur_5::GetParameter(HgcBlendBlur_5 *this, unsigned int a2, float *a3)
{
  if (a2 > 8) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcBlendBlur_6::GetProgram(HgcBlendBlur_6 *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=000000096b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]], \n"
             "    texture2d< half > hg_Texture3 [[ texture(3) ]], \n"
             "    sampler hg_Sampler3 [[ sampler(3) ]], \n"
             "    texture2d< half > hg_Texture4 [[ texture(4) ]], \n"
             "    sampler hg_Sampler4 [[ sampler(4) ]], \n"
             "    texture2d< half > hg_Texture5 [[ texture(5) ]], \n"
             "    sampler hg_Sampler5 [[ sampler(5) ]], \n"
             "    texture2d< half > hg_Texture6 [[ texture(6) ]], \n"
             "    sampler hg_Sampler6 [[ sampler(6) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6, r7;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = (half4) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy);\n"
             "    r3 = (half4) hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy);\n"
             "    r4 = (half4) hg_Texture4.sample(hg_Sampler4, frag._texCoord4.xy);\n"
             "    r5 = (half4) hg_Texture5.sample(hg_Sampler5, frag._texCoord5.xy);\n"
             "    r6 = (half4) hg_Texture6.sample(hg_Sampler6, frag._texCoord6.xy);\n"
             "    r0.x = fmax(r0.x, c0.x);\n"
             "    r0.x = r0.x*half(hg_Params[0].x);\n"
             "    r7.x = r0.x + half(hg_Params[1].x);\n"
             "    r7.x = clamp(r7.x*half(hg_Params[2].x), 0.00000h, 1.00000h);\n"
             "    r7 = mix(r1, r2, r7.xxxx);\n"
             "    r2.x = r0.x + half(hg_Params[3].x);\n"
             "    r2.x = clamp(r2.x*half(hg_Params[4].x), 0.00000h, 1.00000h);\n"
             "    r7 = mix(r7, r3, r2.xxxx);\n"
             "    r1.x = r0.x + half(hg_Params[5].x);\n"
             "    r1.x = clamp(r1.x*half(hg_Params[6].x), 0.00000h, 1.00000h);\n"
             "    r7 = mix(r7, r4, r1.xxxx);\n"
             "    r2.x = r0.x + half(hg_Params[7].x);\n"
             "    r2.x = clamp(r2.x*half(hg_Params[8].x), 0.00000h, 1.00000h);\n"
             "    r7 = mix(r7, r5, r2.xxxx);\n"
             "    r0.x = r0.x + half(hg_Params[9].x);\n"
             "    r0.x = clamp(r0.x*half(hg_Params[10].x), 0.00000h, 1.00000h);\n"
             "    output.color0 = mix(float4(r7), float4(r6), float4(r0.xxxx));\n"
             "    return output;\n"
             "}\n"
             "//MD5=623268ba:866116ad:d3b9f927:5f12c758\n"
             "//SIG=00400000:0000007f:0000007f:0000007f:0001:000b:0008:0000:0000:0000:00fe:0000:0007:07:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000008e4\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]], \n"
             "    texture2d< float > hg_Texture3 [[ texture(3) ]], \n"
             "    sampler hg_Sampler3 [[ sampler(3) ]], \n"
             "    texture2d< float > hg_Texture4 [[ texture(4) ]], \n"
             "    sampler hg_Sampler4 [[ sampler(4) ]], \n"
             "    texture2d< float > hg_Texture5 [[ texture(5) ]], \n"
             "    sampler hg_Sampler5 [[ sampler(5) ]], \n"
             "    texture2d< float > hg_Texture6 [[ texture(6) ]], \n"
             "    sampler hg_Sampler6 [[ sampler(6) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6, r7;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy);\n"
             "    r3 = hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy);\n"
             "    r4 = hg_Texture4.sample(hg_Sampler4, frag._texCoord4.xy);\n"
             "    r5 = hg_Texture5.sample(hg_Sampler5, frag._texCoord5.xy);\n"
             "    r6 = hg_Texture6.sample(hg_Sampler6, frag._texCoord6.xy);\n"
             "    r0.x = fmax(r0.x, c0.x);\n"
             "    r0.x = r0.x*hg_Params[0].x;\n"
             "    r7.x = r0.x + hg_Params[1].x;\n"
             "    r7.x = clamp(r7.x*hg_Params[2].x, 0.00000f, 1.00000f);\n"
             "    r7 = mix(r1, r2, r7.xxxx);\n"
             "    r2.x = r0.x + hg_Params[3].x;\n"
             "    r2.x = clamp(r2.x*hg_Params[4].x, 0.00000f, 1.00000f);\n"
             "    r7 = mix(r7, r3, r2.xxxx);\n"
             "    r1.x = r0.x + hg_Params[5].x;\n"
             "    r1.x = clamp(r1.x*hg_Params[6].x, 0.00000f, 1.00000f);\n"
             "    r7 = mix(r7, r4, r1.xxxx);\n"
             "    r2.x = r0.x + hg_Params[7].x;\n"
             "    r2.x = clamp(r2.x*hg_Params[8].x, 0.00000f, 1.00000f);\n"
             "    r7 = mix(r7, r5, r2.xxxx);\n"
             "    r0.x = r0.x + hg_Params[9].x;\n"
             "    r0.x = clamp(r0.x*hg_Params[10].x, 0.00000f, 1.00000f);\n"
             "    output.color0 = mix(r7, r6, r0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=95acf123:9baa8dfd:20ef2a98:1f1b8416\n"
             "//SIG=00000000:0000007f:0000007f:00000000:0001:000b:0008:0000:0000:0000:00fe:0000:0007:07:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000098d\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp sampler2D hg_Texture3;\n"
           "uniform defaultp sampler2D hg_Texture4;\n"
           "uniform defaultp sampler2D hg_Texture5;\n"
           "uniform defaultp sampler2D hg_Texture6;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "uniform defaultp vec4 hg_ProgramLocal2;\n"
           "uniform defaultp vec4 hg_ProgramLocal3;\n"
           "uniform defaultp vec4 hg_ProgramLocal4;\n"
           "uniform defaultp vec4 hg_ProgramLocal5;\n"
           "uniform defaultp vec4 hg_ProgramLocal6;\n"
           "uniform defaultp vec4 hg_ProgramLocal7;\n"
           "uniform defaultp vec4 hg_ProgramLocal8;\n"
           "uniform defaultp vec4 hg_ProgramLocal9;\n"
           "uniform defaultp vec4 hg_ProgramLocal10;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "varying highp vec4 hg_TexCoord4;\n"
           "varying highp vec4 hg_TexCoord5;\n"
           "varying highp vec4 hg_TexCoord6;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2, r3, r4, r5, r6, r7;\n"
           "\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = texture2D(hg_Texture2, hg_TexCoord2.xy);\n"
           "    r3 = texture2D(hg_Texture3, hg_TexCoord3.xy);\n"
           "    r4 = texture2D(hg_Texture4, hg_TexCoord4.xy);\n"
           "    r5 = texture2D(hg_Texture5, hg_TexCoord5.xy);\n"
           "    r6 = texture2D(hg_Texture6, hg_TexCoord6.xy);\n"
           "    r0.x = max(r0.x, c0.x);\n"
           "    r0.x = r0.x*hg_ProgramLocal0.x;\n"
           "    r7.x = r0.x + hg_ProgramLocal1.x;\n"
           "    r7.x = clamp(r7.x*hg_ProgramLocal2.x, 0.00000, 1.00000);\n"
           "    r7 = mix(r1, r2, r7.xxxx);\n"
           "    r2.x = r0.x + hg_ProgramLocal3.x;\n"
           "    r2.x = clamp(r2.x*hg_ProgramLocal4.x, 0.00000, 1.00000);\n"
           "    r7 = mix(r7, r3, r2.xxxx);\n"
           "    r1.x = r0.x + hg_ProgramLocal5.x;\n"
           "    r1.x = clamp(r1.x*hg_ProgramLocal6.x, 0.00000, 1.00000);\n"
           "    r7 = mix(r7, r4, r1.xxxx);\n"
           "    r2.x = r0.x + hg_ProgramLocal7.x;\n"
           "    r2.x = clamp(r2.x*hg_ProgramLocal8.x, 0.00000, 1.00000);\n"
           "    r7 = mix(r7, r5, r2.xxxx);\n"
           "    r0.x = r0.x + hg_ProgramLocal9.x;\n"
           "    r0.x = clamp(r0.x*hg_ProgramLocal10.x, 0.00000, 1.00000);\n"
           "    gl_FragColor = mix(r7, r6, r0.xxxx);\n"
           "}\n"
           "//MD5=345256d6:7773697d:9580f084:324af0ce\n"
           "//SIG=00000000:0000007f:0000007f:00000000:0001:000b:0008:0000:0000:0000:0000:0000:0007:07:0:1:0\n";
  }
}

void HgcBlendBlur_6::InitProgramDescriptor(HgcBlendBlur_6 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcBlendBlur_6_hgc_visible", "//Metal1.0     \n//LEN=00000004da\n[[ visible ]] FragmentOut HgcBlendBlur_6_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2,\n    float4 color3,\n    float4 color4,\n    float4 color5,\n    float4 color6)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6, r7;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = color0.x;\n"
    "    r1 = color1;\n"
    "    r2 = color2;\n"
    "    r3 = color3;\n"
    "    r4 = color4;\n"
    "    r5 = color5;\n"
    "    r6 = color6;\n"
    "    r0.x = fmax(r0.x, c0.x);\n"
    "    r0.x = r0.x*hg_Params[0].x;\n"
    "    r7.x = r0.x + hg_Params[1].x;\n"
    "    r7.x = clamp(r7.x*hg_Params[2].x, 0.00000f, 1.00000f);\n"
    "    r7 = mix(r1, r2, r7.xxxx);\n"
    "    r2.x = r0.x + hg_Params[3].x;\n"
    "    r2.x = clamp(r2.x*hg_Params[4].x, 0.00000f, 1.00000f);\n"
    "    r7 = mix(r7, r3, r2.xxxx);\n"
    "    r1.x = r0.x + hg_Params[5].x;\n"
    "    r1.x = clamp(r1.x*hg_Params[6].x, 0.00000f, 1.00000f);\n"
    "    r7 = mix(r7, r4, r1.xxxx);\n"
    "    r2.x = r0.x + hg_Params[7].x;\n"
    "    r2.x = clamp(r2.x*hg_Params[8].x, 0.00000f, 1.00000f);\n"
    "    r7 = mix(r7, r5, r2.xxxx);\n"
    "    r0.x = r0.x + hg_Params[9].x;\n"
    "    r0.x = clamp(r0.x*hg_Params[10].x, 0.00000f, 1.00000f);\n"
    "    output.color0 = mix(r7, r6, r0.xxxx);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcBlendBlur_6");
}

void sub_1B78D9354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78D939C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78D9394);
}

void HgcBlendBlur_6::shaderDescription(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "HgcBlendBlur_6 [hgc1]");
}

uint64_t HgcBlendBlur_6::BindTexture(HgcBlendBlur_6 *this, HGHandler *a2, int a3)
{
  switch(a3)
  {
    case 0:
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 72))(a2, 0, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 0;
      goto LABEL_10;
    case 1:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 1;
      goto LABEL_10;
    case 2:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 2;
      goto LABEL_10;
    case 3:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 3, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 3;
      goto LABEL_10;
    case 4:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 4, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 4;
      goto LABEL_10;
    case 5:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 5, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 5;
      goto LABEL_10;
    case 6:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 6, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 6;
LABEL_10:
      HGHandler::TexCoord(v4, v5, 0, 0, 0);
      int v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
      uint64_t result = 0;
      if (!v7)
      {
        (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
        uint64_t result = 0;
      }
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcBlendBlur_6::Bind(HgcBlendBlur_6 *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcBlendBlur_6::RenderTile(HgcBlendBlur_6 *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 22);
    uint64_t v7 = *((void *)a2 + 20);
    uint64_t v8 = *((void *)a2 + 18);
    uint64_t v9 = *((void *)a2 + 16);
    uint64_t v10 = 16 * *((int *)a2 + 42);
    uint64_t v11 = 16 * *((int *)a2 + 38);
    uint64_t v12 = 16 * *((int *)a2 + 34);
    uint64_t v13 = 16 * *((int *)a2 + 30);
    uint64_t v14 = 16 * *((int *)a2 + 26);
    uint64_t v15 = 16 * *((int *)a2 + 22);
    uint64_t v16 = *((void *)a2 + 14);
    uint64_t v17 = *((void *)a2 + 12);
    uint64_t v18 = 16 * *((int *)a2 + 6);
    uint64_t v19 = 16 * *((int *)a2 + 46);
    uint64_t v20 = *((void *)a2 + 10);
    while (v4 < 2)
    {
      int v57 = 0;
      if (v4 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      v20 += v15;
      v17 += v14;
      v16 += v13;
      v9 += v12;
      v8 += v11;
      v7 += v10;
      v6 += v19;
      v5 += v18;
      if (++v3 == v2) {
        return 0;
      }
    }
    uint64_t v21 = 0;
    int v22 = 0;
    do
    {
      float32x4_t v23 = *(float32x4_t *)(v17 + v21 + 16);
      float32x4_t v24 = (float32x4_t *)*((void *)this + 51);
      float32x4_t v26 = v24[10];
      float32x4_t v25 = v24[11];
      float32x4_t v27 = v24[1];
      float32x4_t v28 = vmulq_f32(vmaxq_f32(*(float32x4_t *)(v20 + v21), v25), *v24);
      float32x4_t v29 = vmulq_f32(vmaxq_f32(*(float32x4_t *)(v20 + v21 + 16), v25), *v24);
      float32x4_t v30 = v24[2];
      float32x4_t v31 = v24[3];
      float32x4_t v32 = vmaxq_f32(vmulq_f32(vaddq_f32(v28, v27), v30), v25);
      float32x4_t v33 = vmaxq_f32(vmulq_f32(vaddq_f32(v29, v27), v30), v25);
      float32x4_t v34 = v24[12];
      float32x4_t v35 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v16 + v21 + 16), v23), vminq_f32(v33, v34).f32[0]);
      float32x4_t v36 = vaddq_f32(*(float32x4_t *)(v17 + v21), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v16 + v21), *(float32x4_t *)(v17 + v21)), vminq_f32(v32, v34).f32[0]));
      float32x4_t v37 = vaddq_f32(v28, v31);
      float32x4_t v38 = vaddq_f32(v29, v31);
      float32x4_t v39 = v24[4];
      float32x4_t v40 = v24[5];
      float32x4_t v41 = vaddq_f32(v23, v35);
      float32x4_t v42 = vaddq_f32(v36, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v9 + v21), v36), vminq_f32(vmaxq_f32(vmulq_f32(v37, v39), v25), v34).f32[0]));
      float32x4_t v43 = vaddq_f32(v28, v40);
      float32x4_t v44 = vaddq_f32(v29, v40);
      float32x4_t v45 = v24[6];
      float32x4_t v46 = v24[7];
      float32x4_t v47 = vaddq_f32(v41, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v9 + v21 + 16), v41), vminq_f32(vmaxq_f32(vmulq_f32(v38, v39), v25), v34).f32[0]));
      float32x4_t v48 = vaddq_f32(v42, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v8 + v21), v42), vminq_f32(vmaxq_f32(vmulq_f32(v43, v45), v25), v34).f32[0]));
      float32x4_t v49 = vaddq_f32(v47, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v8 + v21 + 16), v47), vminq_f32(vmaxq_f32(vmulq_f32(v44, v45), v25), v34).f32[0]));
      float32x4_t v50 = v24[8];
      float32x4_t v51 = v24[9];
      float32x4_t v52 = vaddq_f32(v48, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v7 + v21), v48), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v28, v46), v50), v25), v34).f32[0]));
      float32x4_t v53 = vaddq_f32(v49, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v7 + v21 + 16), v49), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v29, v46), v50), v25), v34).f32[0]));
      float32x4_t v54 = vmaxq_f32(vmulq_f32(vaddq_f32(v28, v51), v26), v25);
      float32x4_t v55 = vaddq_f32(v53, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v6 + v21 + 16), v53), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v29, v51), v26), v25), v34).f32[0]));
      uint64_t v56 = (float32x4_t *)(v5 + v21);
      *uint64_t v56 = vaddq_f32(v52, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v6 + v21), v52), vminq_f32(v54, v34).f32[0]));
      v56[1] = v55;
      v22 -= 2;
      v21 += 32;
    }
    while (v4 + v22 > 1);
    int v57 = -v22;
    if (v57 >= v4) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v58 = 16 * v57;
    float32x4_t v59 = (float32x4_t *)*((void *)this + 51);
    float32x4_t v60 = v59[11];
    float32x4_t v61 = vmulq_f32(vmaxq_f32(*(float32x4_t *)(v20 + v58), v60), *v59);
    float32x4_t v62 = v59[12];
    float32x4_t v63 = vaddq_f32(*(float32x4_t *)(v17 + v58), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v16 + v58), *(float32x4_t *)(v17 + v58)), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v61, v59[1]), v59[2]), v60), v62).f32[0]));
    float32x4_t v64 = vaddq_f32(v63, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v9 + v58), v63), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v61, v59[3]), v59[4]), v60), v62).f32[0]));
    float32x4_t v65 = vaddq_f32(v64, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v8 + v58), v64), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v61, v59[5]), v59[6]), v60), v62).f32[0]));
    float32x4_t v66 = vaddq_f32(v65, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v7 + v58), v65), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v61, v59[7]), v59[8]), v60), v62).f32[0]));
    *(float32x4_t *)(v5 + v58) = vaddq_f32(v66, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v6 + v58), v66), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v61, v59[9]), v59[10]), v60), v62).f32[0]));
    goto LABEL_3;
  }
  return 0;
}

uint64_t HgcBlendBlur_6::GetDOD(HgcBlendBlur_6 *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 7) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcBlendBlur_6::GetROI(HgcBlendBlur_6 *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 7) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcBlendBlur_6::~HgcBlendBlur_6(HGNode *this)
{
  *(void *)this = &unk_1F10E71B0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C400F93440CLL);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E71B0;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C400F93440CLL);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HgcBlendBlur_6::SetParameter(HgcBlendBlur_6 *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 0xA) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *uint64_t v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcBlendBlur_6::GetParameter(HgcBlendBlur_6 *this, unsigned int a2, float *a3)
{
  if (a2 > 0xA) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcBlendBlur_7::GetProgram(HgcBlendBlur_7 *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000a9f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]], \n"
             "    texture2d< half > hg_Texture3 [[ texture(3) ]], \n"
             "    sampler hg_Sampler3 [[ sampler(3) ]], \n"
             "    texture2d< half > hg_Texture4 [[ texture(4) ]], \n"
             "    sampler hg_Sampler4 [[ sampler(4) ]], \n"
             "    texture2d< half > hg_Texture5 [[ texture(5) ]], \n"
             "    sampler hg_Sampler5 [[ sampler(5) ]], \n"
             "    texture2d< half > hg_Texture6 [[ texture(6) ]], \n"
             "    sampler hg_Sampler6 [[ sampler(6) ]], \n"
             "    texture2d< half > hg_Texture7 [[ texture(7) ]], \n"
             "    sampler hg_Sampler7 [[ sampler(7) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6, r7, r8;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = (half4) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy);\n"
             "    r3 = (half4) hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy);\n"
             "    r4 = (half4) hg_Texture4.sample(hg_Sampler4, frag._texCoord4.xy);\n"
             "    r5 = (half4) hg_Texture5.sample(hg_Sampler5, frag._texCoord5.xy);\n"
             "    r6 = (half4) hg_Texture6.sample(hg_Sampler6, frag._texCoord6.xy);\n"
             "    r7 = (half4) hg_Texture7.sample(hg_Sampler7, frag._texCoord7.xy);\n"
             "    r0.x = fmax(r0.x, c0.x);\n"
             "    r0.x = r0.x*half(hg_Params[0].x);\n"
             "    r8.x = r0.x + half(hg_Params[1].x);\n"
             "    r8.x = clamp(r8.x*half(hg_Params[2].x), 0.00000h, 1.00000h);\n"
             "    r8 = mix(r1, r2, r8.xxxx);\n"
             "    r2.x = r0.x + half(hg_Params[3].x);\n"
             "    r2.x = clamp(r2.x*half(hg_Params[4].x), 0.00000h, 1.00000h);\n"
             "    r8 = mix(r8, r3, r2.xxxx);\n"
             "    r1.x = r0.x + half(hg_Params[5].x);\n"
             "    r1.x = clamp(r1.x*half(hg_Params[6].x), 0.00000h, 1.00000h);\n"
             "    r8 = mix(r8, r4, r1.xxxx);\n"
             "    r2.x = r0.x + half(hg_Params[7].x);\n"
             "    r2.x = clamp(r2.x*half(hg_Params[8].x), 0.00000h, 1.00000h);\n"
             "    r8 = mix(r8, r5, r2.xxxx);\n"
             "    r3.x = r0.x + half(hg_Params[9].x);\n"
             "    r3.x = clamp(r3.x*half(hg_Params[10].x), 0.00000h, 1.00000h);\n"
             "    r8 = mix(r8, r6, r3.xxxx);\n"
             "    r0.x = r0.x + half(hg_Params[11].x);\n"
             "    r0.x = clamp(r0.x*half(hg_Params[12].x), 0.00000h, 1.00000h);\n"
             "    output.color0 = mix(float4(r8), float4(r7), float4(r0.xxxx));\n"
             "    return output;\n"
             "}\n"
             "//MD5=51e82de0:83cef4b8:dbcd9194:23d36838\n"
             "//SIG=00400000:000000ff:000000ff:000000ff:0001:000d:0009:0000:0000:0000:01fe:0000:0008:08:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000a05\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]], \n"
             "    texture2d< float > hg_Texture3 [[ texture(3) ]], \n"
             "    sampler hg_Sampler3 [[ sampler(3) ]], \n"
             "    texture2d< float > hg_Texture4 [[ texture(4) ]], \n"
             "    sampler hg_Sampler4 [[ sampler(4) ]], \n"
             "    texture2d< float > hg_Texture5 [[ texture(5) ]], \n"
             "    sampler hg_Sampler5 [[ sampler(5) ]], \n"
             "    texture2d< float > hg_Texture6 [[ texture(6) ]], \n"
             "    sampler hg_Sampler6 [[ sampler(6) ]], \n"
             "    texture2d< float > hg_Texture7 [[ texture(7) ]], \n"
             "    sampler hg_Sampler7 [[ sampler(7) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6, r7, r8;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2 = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy);\n"
             "    r3 = hg_Texture3.sample(hg_Sampler3, frag._texCoord3.xy);\n"
             "    r4 = hg_Texture4.sample(hg_Sampler4, frag._texCoord4.xy);\n"
             "    r5 = hg_Texture5.sample(hg_Sampler5, frag._texCoord5.xy);\n"
             "    r6 = hg_Texture6.sample(hg_Sampler6, frag._texCoord6.xy);\n"
             "    r7 = hg_Texture7.sample(hg_Sampler7, frag._texCoord7.xy);\n"
             "    r0.x = fmax(r0.x, c0.x);\n"
             "    r0.x = r0.x*hg_Params[0].x;\n"
             "    r8.x = r0.x + hg_Params[1].x;\n"
             "    r8.x = clamp(r8.x*hg_Params[2].x, 0.00000f, 1.00000f);\n"
             "    r8 = mix(r1, r2, r8.xxxx);\n"
             "    r2.x = r0.x + hg_Params[3].x;\n"
             "    r2.x = clamp(r2.x*hg_Params[4].x, 0.00000f, 1.00000f);\n"
             "    r8 = mix(r8, r3, r2.xxxx);\n"
             "    r1.x = r0.x + hg_Params[5].x;\n"
             "    r1.x = clamp(r1.x*hg_Params[6].x, 0.00000f, 1.00000f);\n"
             "    r8 = mix(r8, r4, r1.xxxx);\n"
             "    r2.x = r0.x + hg_Params[7].x;\n"
             "    r2.x = clamp(r2.x*hg_Params[8].x, 0.00000f, 1.00000f);\n"
             "    r8 = mix(r8, r5, r2.xxxx);\n"
             "    r3.x = r0.x + hg_Params[9].x;\n"
             "    r3.x = clamp(r3.x*hg_Params[10].x, 0.00000f, 1.00000f);\n"
             "    r8 = mix(r8, r6, r3.xxxx);\n"
             "    r0.x = r0.x + hg_Params[11].x;\n"
             "    r0.x = clamp(r0.x*hg_Params[12].x, 0.00000f, 1.00000f);\n"
             "    output.color0 = mix(r8, r7, r0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=aefb9964:b413e645:3f06c610:528cb829\n"
             "//SIG=00000000:000000ff:000000ff:00000000:0001:000d:0009:0000:0000:0000:01fe:0000:0008:08:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000ae2\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp sampler2D hg_Texture3;\n"
           "uniform defaultp sampler2D hg_Texture4;\n"
           "uniform defaultp sampler2D hg_Texture5;\n"
           "uniform defaultp sampler2D hg_Texture6;\n"
           "uniform defaultp sampler2D hg_Texture7;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "uniform defaultp vec4 hg_ProgramLocal2;\n"
           "uniform defaultp vec4 hg_ProgramLocal3;\n"
           "uniform defaultp vec4 hg_ProgramLocal4;\n"
           "uniform defaultp vec4 hg_ProgramLocal5;\n"
           "uniform defaultp vec4 hg_ProgramLocal6;\n"
           "uniform defaultp vec4 hg_ProgramLocal7;\n"
           "uniform defaultp vec4 hg_ProgramLocal8;\n"
           "uniform defaultp vec4 hg_ProgramLocal9;\n"
           "uniform defaultp vec4 hg_ProgramLocal10;\n"
           "uniform defaultp vec4 hg_ProgramLocal11;\n"
           "uniform defaultp vec4 hg_ProgramLocal12;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "varying highp vec4 hg_TexCoord4;\n"
           "varying highp vec4 hg_TexCoord5;\n"
           "varying highp vec4 hg_TexCoord6;\n"
           "varying highp vec4 hg_TexCoord7;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2, r3, r4, r5, r6, r7, r8;\n"
           "\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2 = texture2D(hg_Texture2, hg_TexCoord2.xy);\n"
           "    r3 = texture2D(hg_Texture3, hg_TexCoord3.xy);\n"
           "    r4 = texture2D(hg_Texture4, hg_TexCoord4.xy);\n"
           "    r5 = texture2D(hg_Texture5, hg_TexCoord5.xy);\n"
           "    r6 = texture2D(hg_Texture6, hg_TexCoord6.xy);\n"
           "    r7 = texture2D(hg_Texture7, hg_TexCoord7.xy);\n"
           "    r0.x = max(r0.x, c0.x);\n"
           "    r0.x = r0.x*hg_ProgramLocal0.x;\n"
           "    r8.x = r0.x + hg_ProgramLocal1.x;\n"
           "    r8.x = clamp(r8.x*hg_ProgramLocal2.x, 0.00000, 1.00000);\n"
           "    r8 = mix(r1, r2, r8.xxxx);\n"
           "    r2.x = r0.x + hg_ProgramLocal3.x;\n"
           "    r2.x = clamp(r2.x*hg_ProgramLocal4.x, 0.00000, 1.00000);\n"
           "    r8 = mix(r8, r3, r2.xxxx);\n"
           "    r1.x = r0.x + hg_ProgramLocal5.x;\n"
           "    r1.x = clamp(r1.x*hg_ProgramLocal6.x, 0.00000, 1.00000);\n"
           "    r8 = mix(r8, r4, r1.xxxx);\n"
           "    r2.x = r0.x + hg_ProgramLocal7.x;\n"
           "    r2.x = clamp(r2.x*hg_ProgramLocal8.x, 0.00000, 1.00000);\n"
           "    r8 = mix(r8, r5, r2.xxxx);\n"
           "    r3.x = r0.x + hg_ProgramLocal9.x;\n"
           "    r3.x = clamp(r3.x*hg_ProgramLocal10.x, 0.00000, 1.00000);\n"
           "    r8 = mix(r8, r6, r3.xxxx);\n"
           "    r0.x = r0.x + hg_ProgramLocal11.x;\n"
           "    r0.x = clamp(r0.x*hg_ProgramLocal12.x, 0.00000, 1.00000);\n"
           "    gl_FragColor = mix(r8, r7, r0.xxxx);\n"
           "}\n"
           "//MD5=a4232dfd:d5009303:f8b376c4:de0134f6\n"
           "//SIG=00000000:000000ff:000000ff:00000000:0001:000d:0009:0000:0000:0000:0000:0000:0008:08:0:1:0\n";
  }
}

void HgcBlendBlur_7::InitProgramDescriptor(HgcBlendBlur_7 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcBlendBlur_7_hgc_visible", "//Metal1.0     \n//LEN=0000000580\n[[ visible ]] FragmentOut HgcBlendBlur_7_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2,\n    float4 color3,\n    float4 color4,\n    float4 color5,\n    float4 color6,\n    float4 color7)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6, r7, r8;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = color0.x;\n"
    "    r1 = color1;\n"
    "    r2 = color2;\n"
    "    r3 = color3;\n"
    "    r4 = color4;\n"
    "    r5 = color5;\n"
    "    r6 = color6;\n"
    "    r7 = color7;\n"
    "    r0.x = fmax(r0.x, c0.x);\n"
    "    r0.x = r0.x*hg_Params[0].x;\n"
    "    r8.x = r0.x + hg_Params[1].x;\n"
    "    r8.x = clamp(r8.x*hg_Params[2].x, 0.00000f, 1.00000f);\n"
    "    r8 = mix(r1, r2, r8.xxxx);\n"
    "    r2.x = r0.x + hg_Params[3].x;\n"
    "    r2.x = clamp(r2.x*hg_Params[4].x, 0.00000f, 1.00000f);\n"
    "    r8 = mix(r8, r3, r2.xxxx);\n"
    "    r1.x = r0.x + hg_Params[5].x;\n"
    "    r1.x = clamp(r1.x*hg_Params[6].x, 0.00000f, 1.00000f);\n"
    "    r8 = mix(r8, r4, r1.xxxx);\n"
    "    r2.x = r0.x + hg_Params[7].x;\n"
    "    r2.x = clamp(r2.x*hg_Params[8].x, 0.00000f, 1.00000f);\n"
    "    r8 = mix(r8, r5, r2.xxxx);\n"
    "    r3.x = r0.x + hg_Params[9].x;\n"
    "    r3.x = clamp(r3.x*hg_Params[10].x, 0.00000f, 1.00000f);\n"
    "    r8 = mix(r8, r6, r3.xxxx);\n"
    "    r0.x = r0.x + hg_Params[11].x;\n"
    "    r0.x = clamp(r0.x*hg_Params[12].x, 0.00000f, 1.00000f);\n"
    "    output.color0 = mix(r8, r7, r0.xxxx);\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcBlendBlur_7");
}

void sub_1B78DA6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78DA738(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78DA730);
}

void HgcBlendBlur_7::shaderDescription(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "HgcBlendBlur_7 [hgc1]");
}

uint64_t HgcBlendBlur_7::BindTexture(HgcBlendBlur_7 *this, HGHandler *a2, int a3)
{
  switch(a3)
  {
    case 0:
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 72))(a2, 0, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 0;
      goto LABEL_11;
    case 1:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 1;
      goto LABEL_11;
    case 2:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 2;
      goto LABEL_11;
    case 3:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 3, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 3;
      goto LABEL_11;
    case 4:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 4, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 4;
      goto LABEL_11;
    case 5:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 5, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 5;
      goto LABEL_11;
    case 6:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 6, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 6;
      goto LABEL_11;
    case 7:
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 7, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      int v4 = a2;
      int v5 = 7;
LABEL_11:
      HGHandler::TexCoord(v4, v5, 0, 0, 0);
      int v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
      uint64_t result = 0;
      if (!v7)
      {
        (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
        uint64_t result = 0;
      }
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcBlendBlur_7::Bind(HgcBlendBlur_7 *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcBlendBlur_7::RenderTile(HgcBlendBlur_7 *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1 && *((_DWORD *)a2 + 2) - *(_DWORD *)a2 >= 1)
  {
    int v3 = 0;
    uint64_t v4 = 16 * *((int *)a2 + 22);
    uint64_t v5 = 16 * *((int *)a2 + 26);
    uint64_t v6 = *((void *)a2 + 10);
    uint64_t v7 = *((void *)a2 + 12);
    uint64_t v8 = 16 * *((int *)a2 + 30);
    uint64_t v9 = 16 * *((int *)a2 + 34);
    uint64_t v10 = *((void *)a2 + 14);
    uint64_t v11 = *((void *)a2 + 16);
    uint64_t v12 = 16 * *((int *)a2 + 38);
    uint64_t v13 = 16 * *((int *)a2 + 42);
    uint64_t v14 = *((void *)a2 + 18);
    uint64_t v15 = *((void *)a2 + 20);
    uint64_t v16 = 16 * *((int *)a2 + 46);
    uint64_t v17 = 16 * *((int *)a2 + 50);
    uint64_t v18 = *((void *)a2 + 22);
    uint64_t v19 = *((void *)a2 + 24);
    uint64_t v20 = 16 * *((int *)a2 + 6);
    uint64_t v21 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
    uint64_t v22 = *((void *)a2 + 2);
    do
    {
      uint64_t v23 = 0;
      do
      {
        float32x4_t v24 = (float32x4_t *)*((void *)this + 51);
        float32x4_t v25 = v24[13];
        float32x4_t v26 = vmulq_f32(vmaxq_f32(*(float32x4_t *)(v6 + v23), v25), *v24);
        float32x4_t v27 = v24[14];
        float32x4_t v28 = vaddq_f32(*(float32x4_t *)(v7 + v23), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v10 + v23), *(float32x4_t *)(v7 + v23)), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v26, v24[1]), v24[2]), v25), v27).f32[0]));
        float32x4_t v29 = vaddq_f32(v28, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v11 + v23), v28), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v26, v24[3]), v24[4]), v25), v27).f32[0]));
        float32x4_t v30 = vaddq_f32(v29, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v14 + v23), v29), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v26, v24[5]), v24[6]), v25), v27).f32[0]));
        float32x4_t v31 = vaddq_f32(v30, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v15 + v23), v30), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v26, v24[7]), v24[8]), v25), v27).f32[0]));
        float32x4_t v32 = vaddq_f32(v31, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v18 + v23), v31), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v26, v24[9]), v24[10]), v25), v27).f32[0]));
        *(float32x4_t *)(v22 + v23) = vaddq_f32(v32, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v19 + v23), v32), vminq_f32(vmaxq_f32(vmulq_f32(vaddq_f32(v26, v24[11]), v24[12]), v25), v27).f32[0]));
        v23 += 16;
      }
      while (v21 != v23);
      ++v3;
      v6 += v4;
      v7 += v5;
      v10 += v8;
      v11 += v9;
      v14 += v12;
      v15 += v13;
      v18 += v16;
      v19 += v17;
      v22 += v20;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcBlendBlur_7::GetDOD(HgcBlendBlur_7 *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 8) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcBlendBlur_7::GetROI(HgcBlendBlur_7 *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  if (a3 >= 8) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcBlendBlur_7::~HgcBlendBlur_7(HGNode *this)
{
  *(void *)this = &unk_1F10E7400;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C4019FCA701);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E7400;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C4019FCA701);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HgcBlendBlur_7::SetParameter(HgcBlendBlur_7 *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 0xC) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  uint64_t v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *uint64_t v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcBlendBlur_7::GetParameter(HgcBlendBlur_7 *this, unsigned int a2, float *a3)
{
  if (a2 > 0xC) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

void HGModulatedBlur::HGModulatedBlur(HGModulatedBlur *this)
{
  HGNode::HGNode((HGNode *)this);
  *(void *)uint64_t v1 = &unk_1F10E7650;
  *(void *)(v1 + 416) = 0;
  *(void *)(v1 + 424) = 0;
  *(void *)(v1 + 408) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v1 + 4(*(void (**)(HGLightWrap *, uint64_t, uint64_t))(*(void *)this + 136))(this, 0xFFFFFFFFLL, 32) = _D0;
  *(_DWORD *)(v1 + 44(*(void (**)(HGHandler *, void))(*(void *)this + 56))(this, 0) = 1065353216;
  *(void *)(v1 + 448) = 0;
  *(unsigned char *)(v1 + 456) = 1;
  HGModulatedBlur::setBlurValues((HGModulatedBlur *)v1, HGModulatedBlur::HGModulatedBlur(void)::defaultBlurValues, 9);
}

void sub_1B78DB364(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 448);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 416) = v5;
    operator delete(v5);
  }
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HGModulatedBlur::setBlurValues(HGModulatedBlur *this, const float *a2, uint64_t a3)
{
  uint64_t v4 = (float *)*((void *)this + 51);
  *((void *)this + 52) = v4;
  if (a3)
  {
    uint64_t v7 = 0;
    float32x4_t v27 = (void **)((char *)this + 408);
    while (1)
    {
      unint64_t v9 = *((void *)this + 53);
      if ((unint64_t)v4 >= v9) {
        break;
      }
      *uint64_t v4 = a2[v7];
      uint64_t v8 = (uint64_t)(v4 + 1);
LABEL_4:
      *((void *)this + 52) = v8;
      ++v7;
      uint64_t v4 = (float *)v8;
      if (v7 == a3) {
        goto LABEL_31;
      }
    }
    uint64_t v10 = (float *)*v27;
    uint64_t v11 = (char *)v4 - (unsigned char *)*v27;
    uint64_t v12 = v11 >> 2;
    unint64_t v13 = (v11 >> 2) + 1;
    if (v13 >> 62) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v9 - (void)v10;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v16 = operator new(4 * v15);
      uint64_t v17 = (float *)&v16[4 * v12];
      *uint64_t v17 = a2[v7];
      uint64_t v8 = (uint64_t)(v17 + 1);
      if (v4 == v10) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = (float *)(4 * v12);
      *(float *)(4 * v12) = a2[v7];
      uint64_t v8 = 4 * v12 + 4;
      if (v4 == v10) {
        goto LABEL_29;
      }
    }
    unint64_t v18 = (char *)(v4 - 1) - (char *)v10;
    if (v18 >= 0xBC)
    {
      if (&v16[v11 - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[v11 - 4])
      {
        uint64_t v19 = v4;
      }
      else if ((float *)((char *)v4 - (v18 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v4 - 1)
      {
        uint64_t v19 = v4;
      }
      else if ((unint64_t)((char *)v4 - &v16[v11]) >= 0x20)
      {
        uint64_t v20 = (v18 >> 2) + 1;
        uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v19 = &v4[v21 / 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v17 = (float *)((char *)v17 - v21);
        uint64_t v22 = &v16[4 * v12 - 16];
        uint64_t v23 = v4 - 4;
        uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v25 = *(_OWORD *)v23;
          *(v22 - 1) = *((_OWORD *)v23 - 1);
          *uint64_t v22 = v25;
          v22 -= 2;
          v23 -= 8;
          v24 -= 8;
        }
        while (v24);
        if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_29:
          *((void *)this + 51) = v17;
          *((void *)this + 52) = v8;
          *((void *)this + 53) = &v16[4 * v15];
          if (v10) {
            operator delete(v10);
          }
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v19 = v4;
      }
    }
    else
    {
      uint64_t v19 = v4;
    }
    do
    {
      int v26 = *((_DWORD *)v19-- - 1);
      *((_DWORD *)v17-- - 1) = v26;
    }
    while (v19 != v10);
    goto LABEL_29;
  }
LABEL_31:
  *((unsigned char *)this + 456) = 1;
}

void HGModulatedBlur::~HGModulatedBlur(HGNode *this)
{
  *(void *)this = &unk_1F10E7650;
  uint64_t v2 = *((void *)this + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  int v3 = (void *)*((void *)this + 51);
  if (v3)
  {
    *((void *)this + 52) = v3;
    operator delete(v3);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E7650;
  uint64_t v2 = *((void *)this + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  int v3 = (void *)*((void *)this + 51);
  if (v3)
  {
    *((void *)this + 52) = v3;
    operator delete(v3);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F10E7650;
  uint64_t v2 = *((void *)this + 56);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  int v3 = (void *)*((void *)this + 51);
  if (v3)
  {
    *((void *)this + 52) = v3;
    operator delete(v3);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v4);
}

uint64_t HGModulatedBlur::SetParameter(HGModulatedBlur *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 == 1)
  {
    if (*((float *)this + 109) != a3 || *((float *)this + 110) != a4)
    {
      uint64_t v7 = 0xFFFFFFFFLL;
      if (a3 < 0.0 || a4 < 0.0) {
        return v7;
      }
      *((float *)this + 109) = a3;
      *((float *)this + 11(*(void (**)(HGHandler *, void))(*(void *)this + 56))(this, 0) = a4;
LABEL_10:
      uint64_t v7 = 1;
      *((unsigned char *)this + 456) = 1;
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return v7;
    }
  }
  else
  {
    if (a2) {
      return 0xFFFFFFFFLL;
    }
    if (*((float *)this + 108) != a3)
    {
      *((float *)this + 108) = a3;
      goto LABEL_10;
    }
  }
  return 0;
}

uint64_t HGModulatedBlur::GetOutput(HGNode *this, HGRenderer *a2)
{
  uint64_t v2 = this;
  if (!*((unsigned char *)this + 456)) {
    return *((void *)v2 + 56);
  }
  Input = HGRenderer::GetInput(a2, this, 0);
  uint64_t v81 = HGRenderer::GetInput(a2, v2, 1u);
  uint64_t v5 = (HGBlurGroup *)HGObject::operator new(0x70uLL);
  HGBlurGroup::HGBlurGroup(v5, Input, 0);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = *((void *)v2 + 51);
  uint64_t v82 = v5;
  do
  {
    float v16 = *((float *)v2 + 109) * *(float *)(v14 + 4 * v10);
    unsigned int v86 = v11;
    if (v7 < v9)
    {
      *v7++ = v16;
      float v17 = *((float *)v2 + 110) * *(float *)(v14 + 4 * v10);
      if (v6 < v8) {
        goto LABEL_3;
      }
      goto LABEL_23;
    }
    uint64_t v18 = v7 - v12;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 62) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v84 = (unint64_t)v8;
    if (((char *)v9 - (char *)v12) >> 1 > v19) {
      unint64_t v19 = ((char *)v9 - (char *)v12) >> 1;
    }
    if ((unint64_t)((char *)v9 - (char *)v12) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20)
    {
      float32x4_t v80 = v6;
      if (v20 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v21 = v14;
      unint64_t v22 = v20;
      uint64_t v23 = operator new(4 * v20);
      uint64_t v14 = v21;
      uint64_t v6 = v80;
      unint64_t v20 = v22;
      uint64_t v24 = (float *)&v23[4 * v18];
      *uint64_t v24 = v16;
      uint64_t v25 = (uint64_t)(v24 + 1);
      if (v7 != v12)
      {
LABEL_17:
        unint64_t v26 = (char *)(v7 - 1) - (char *)v12;
        if (v26 < 0xBC
          || &v23[(char *)v7 - (char *)v12 - 4 - (v26 & 0xFFFFFFFFFFFFFFFCLL)] > &v23[(char *)v7 - (char *)v12 - 4]
          || (float *)((char *)v7 - (v26 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v7 - 1
          || (unint64_t)((char *)v12 - v23) < 0x20)
        {
          float32x4_t v27 = v7;
          uint64_t v5 = v82;
        }
        else
        {
          uint64_t v45 = (v26 >> 2) + 1;
          uint64_t v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
          float32x4_t v27 = &v7[v46 / 0xFFFFFFFFFFFFFFFCLL];
          uint64_t v24 = (float *)((char *)v24 - v46);
          float32x4_t v47 = &v23[4 * v18 - 16];
          float32x4_t v48 = v7 - 4;
          uint64_t v49 = v45 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *float32x4_t v47 = v50;
            v47 -= 2;
            v48 -= 8;
            v49 -= 8;
          }
          while (v49);
          uint64_t v5 = v82;
          if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_20:
            unint64_t v9 = (float *)&v23[4 * v20];
            if (!v12) {
              goto LABEL_22;
            }
LABEL_21:
            float32x4_t v29 = (float *)v12;
            float32x4_t v30 = v6;
            operator delete(v29);
            uint64_t v6 = v30;
            uint64_t v14 = *((void *)v2 + 51);
            goto LABEL_22;
          }
        }
        do
        {
          int v28 = *((_DWORD *)v27-- - 1);
          *((_DWORD *)v24-- - 1) = v28;
        }
        while (v27 != v12);
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = (float *)(4 * v18);
      *(float *)(4 * v18) = v16;
      uint64_t v25 = 4 * v18 + 4;
      if (v7 != v12) {
        goto LABEL_17;
      }
    }
    uint64_t v5 = v82;
    unint64_t v9 = (float *)&v23[4 * v20];
    if (v12) {
      goto LABEL_21;
    }
LABEL_22:
    uint64_t v12 = v24;
    uint64_t v7 = (float *)v25;
    unsigned int v11 = v86;
    uint64_t v8 = (float *)v84;
    float v17 = *((float *)v2 + 110) * *(float *)(v14 + 4 * v10);
    if ((unint64_t)v6 < v84)
    {
LABEL_3:
      *v6++ = v17;
      goto LABEL_4;
    }
LABEL_23:
    int64_t v31 = (char *)v6 - (char *)v13;
    uint64_t v32 = v6 - v13;
    unint64_t v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 62) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v83 = v9;
    if (((char *)v8 - (char *)v13) >> 1 > v33) {
      unint64_t v33 = ((char *)v8 - (char *)v13) >> 1;
    }
    if ((unint64_t)((char *)v8 - (char *)v13) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v34 = v33;
    }
    if (v34)
    {
      float32x4_t v35 = v6;
      if (v34 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      float32x4_t v36 = v2;
      uint64_t v37 = v14;
      unint64_t v38 = v34;
      float32x4_t v39 = operator new(4 * v34);
      uint64_t v14 = v37;
      uint64_t v6 = v35;
      unint64_t v34 = v38;
      uint64_t v2 = v36;
      float32x4_t v40 = (float *)&v39[4 * v32];
      *float32x4_t v40 = v17;
      uint64_t v41 = (uint64_t)(v40 + 1);
      if (v35 == v13)
      {
LABEL_42:
        uint64_t v5 = v82;
        uint64_t v8 = (float *)&v39[4 * v34];
        if (!v13) {
          goto LABEL_37;
        }
LABEL_36:
        operator delete(v13);
        uint64_t v14 = *((void *)v2 + 51);
        goto LABEL_37;
      }
    }
    else
    {
      float32x4_t v39 = 0;
      float32x4_t v40 = (float *)(4 * v32);
      *(float *)(4 * v(*(void (**)(HGLightWrap *, uint64_t, uint64_t))(*(void *)this + 136))(this, 0xFFFFFFFFLL, 32) = v17;
      uint64_t v41 = 4 * v32 + 4;
      if (v6 == v13) {
        goto LABEL_42;
      }
    }
    unint64_t v42 = (char *)(v6 - 1) - (char *)v13;
    if (v42 < 0xBC
      || &v39[v31 - 4 - (v42 & 0xFFFFFFFFFFFFFFFCLL)] > &v39[v31 - 4]
      || (float *)((char *)v6 - (v42 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v6 - 1
      || (unint64_t)((char *)v6 - &v39[v31]) < 0x20)
    {
      float32x4_t v43 = v6;
      uint64_t v5 = v82;
      do
      {
LABEL_34:
        int v44 = *((_DWORD *)v43-- - 1);
        *((_DWORD *)v40-- - 1) = v44;
      }
      while (v43 != v13);
      goto LABEL_35;
    }
    uint64_t v51 = (v42 >> 2) + 1;
    uint64_t v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
    float32x4_t v43 = &v6[v52 / 0xFFFFFFFFFFFFFFFCLL];
    float32x4_t v40 = (float *)((char *)v40 - v52);
    float32x4_t v53 = &v39[4 * v32 - 16];
    float32x4_t v54 = v6 - 4;
    uint64_t v55 = v51 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v56 = *(_OWORD *)v54;
      *(v53 - 1) = *((_OWORD *)v54 - 1);
      *float32x4_t v53 = v56;
      v53 -= 2;
      v54 -= 8;
      v55 -= 8;
    }
    while (v55);
    uint64_t v5 = v82;
    if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_34;
    }
LABEL_35:
    uint64_t v8 = (float *)&v39[4 * v34];
    if (v13) {
      goto LABEL_36;
    }
LABEL_37:
    unint64_t v13 = v40;
    uint64_t v6 = (float *)v41;
    unsigned int v11 = v86;
    unint64_t v9 = v83;
LABEL_4:
    unint64_t v15 = (*((void *)v2 + 52) - v14) >> 2;
    uint64_t v10 = ++v11;
  }
  while (v15 > v11);
  int8x16_t v89 = (float *)v12;
  __p = v13;
  HGBlurGroup::setBlurValues(v5, v12, v13, v15);
  signed int v57 = ((*((void *)v2 + 52) - *((void *)v2 + 51)) >> 2) - 1;
  uint64_t v58 = HGBlurGroup::level(v5, v57);
  uint64_t v59 = v58;
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 16))(v58);
  }
  unint64_t v85 = *((void *)v2 + 52) - *((void *)v2 + 51);
  while (v57)
  {
    if ((v57 + 1) < 7) {
      uint64_t v60 = (v57 + 1);
    }
    else {
      uint64_t v60 = 7;
    }
    int32x4_t v87 = (HGNode *)v59;
    switch((int)v60)
    {
      case 2:
        float32x4_t v61 = (HGNode *)HGObject::operator new(0x1A0uLL);
        HGNode::HGNode(v61);
        *(void *)float32x4_t v61 = &unk_1F10E6870;
        operator new();
      case 3:
        float32x4_t v65 = (HGNode *)HGObject::operator new(0x1A0uLL);
        HGNode::HGNode(v65);
        *(void *)float32x4_t v65 = &unk_1F10E6AC0;
        operator new();
      case 4:
        float32x4_t v63 = (HGNode *)HGObject::operator new(0x1A0uLL);
        HGNode::HGNode(v63);
        *(void *)float32x4_t v63 = &unk_1F10E6D10;
        operator new();
      case 5:
        float32x4_t v64 = (HGNode *)HGObject::operator new(0x1A0uLL);
        HGNode::HGNode(v64);
        *(void *)float32x4_t v64 = &unk_1F10E6F60;
        operator new();
      case 6:
        float32x4_t v62 = (HGNode *)HGObject::operator new(0x1A0uLL);
        HGNode::HGNode(v62);
        *(void *)float32x4_t v62 = &unk_1F10E71B0;
        operator new();
      case 7:
        float32x4_t v66 = (HGNode *)HGObject::operator new(0x1A0uLL);
        HGNode::HGNode(v66);
        *(void *)float32x4_t v66 = &unk_1F10E7400;
        operator new();
      default:
        float32x4_t v76 = (HGNode *)HGObject::operator new(0x1A0uLL);
        HGNode::HGNode(v76);
        (*(void (**)(HGNode *, void, HGNode *))(*(void *)v76 + 120))(v76, 0, v81);
        (*(void (**)(HGNode *, void, float, double, double, double))(*(void *)v76 + 96))(v76, 0, *((float *)v2 + 108), 0.0, 0.0, 0.0);
        if (v85 >= 0x1D) {
          (*(void (**)(HGNode *, void, uint64_t))(*(void *)v76 + 136))(v76, 0, 2);
        }
        uint64_t v67 = (v60 - 1);
        v57 -= v67;
        if (v60 >= 2)
        {
          uint64_t v68 = 0;
          uint64_t v69 = 4 * v57 + 4;
          uint64_t v70 = 1;
          do
          {
            uint64_t v71 = (float *)(*((void *)v2 + 51) + v69);
            float v72 = *(v71 - 1);
            float v73 = *v71;
            uint64_t v74 = HGBlurGroup::level(v5, v57 + (int)v68);
            uint64_t v75 = v74;
            if (v74) {
              (*(void (**)(uint64_t))(*(void *)v74 + 16))(v74);
            }
            (*(void (**)(HGNode *, uint64_t, uint64_t))(*(void *)v76 + 120))(v76, ++v68, v75);
            (*(void (**)(HGNode *, uint64_t, float, double, double, double))(*(void *)v76 + 96))(v76, v70, -v72, 0.0, 0.0, 0.0);
            (*(void (**)(HGNode *, void, float, double, double, double))(*(void *)v76 + 96))(v76, (v70 + 1), 1.0 / (float)(v73 - v72), 0.0, 0.0, 0.0);
            if (v75) {
              (*(void (**)(uint64_t))(*(void *)v75 + 24))(v75);
            }
            uint64_t v70 = (v70 + 2);
            v69 += 4;
          }
          while (v67 != v68);
        }
        uint64_t v59 = (uint64_t)v87;
        (*(void (**)(HGNode *, uint64_t, HGNode *))(*(void *)v76 + 120))(v76, v60, v87);
        if (v87 != v76)
        {
          if (v87) {
            (*(void (**)(HGNode *))(*(void *)v87 + 24))(v87);
          }
          uint64_t v59 = (uint64_t)v76;
          (*(void (**)(HGNode *))(*(void *)v76 + 16))(v76);
        }
        (*(void (**)(HGNode *))(*(void *)v76 + 24))(v76);
        break;
    }
  }
  uint64_t v77 = *((void *)v2 + 56);
  if (v77 != v59)
  {
    if (v77) {
      (*(void (**)(uint64_t))(*(void *)v77 + 24))(v77);
    }
    *((void *)v2 + 56) = v59;
    if (v59)
    {
      (*(void (**)(uint64_t))(*(void *)v59 + 16))(v59);
      *((unsigned char *)v2 + 456) = 0;
      goto LABEL_93;
    }
    *((unsigned char *)v2 + 456) = 0;
    float32x4_t v78 = __p;
    if (!__p) {
      goto LABEL_96;
    }
LABEL_95:
    operator delete(v78);
    goto LABEL_96;
  }
  *((unsigned char *)v2 + 456) = 0;
  if (v59) {
LABEL_93:
  }
    (*(void (**)(uint64_t))(*(void *)v59 + 24))(v59);
  float32x4_t v78 = __p;
  if (__p) {
    goto LABEL_95;
  }
LABEL_96:
  if (v89) {
    operator delete(v89);
  }
  if (v5) {
    (*(void (**)(HGBlurGroup *))(*(void *)v5 + 24))(v5);
  }
  return *((void *)v2 + 56);
}

void sub_1B78DC3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 24))(v23);
  }
  if (__p)
  {
    operator delete(__p);
    uint64_t v25 = a20;
    if (!a20)
    {
LABEL_5:
      if (!v22) {
LABEL_10:
      }
        _Unwind_Resume(exception_object);
LABEL_9:
      (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v25 = a20;
    if (!a20) {
      goto LABEL_5;
    }
  }
  operator delete(v25);
  if (!v22) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

const char *HgcYUV444BiPlanar_chroma_pack2::GetProgram(HgcYUV444BiPlanar_chroma_pack2 *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000002ab\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.yz = (half2) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).yz;\n"
             "    r1.yz = (half2) hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy).yz;\n"
             "    output.color0.xy = float2(r0.yz);\n"
             "    output.color0.zw = float2(r1.yz);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ce6ee523:9a7b8c67:08d8a35c:044b1494\n"
             "//SIG=00400000:00000000:00000000:00000001:0000:0000:0002:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=000000028d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.yz = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).yz;\n"
             "    r1.yz = hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy).yz;\n"
             "    output.color0.xy = r0.yz;\n"
             "    output.color0.zw = r1.yz;\n"
             "    return output;\n"
             "}\n"
             "//MD5=fd23e448:1f27c2f2:089c40e5:1564cc7f\n"
             "//SIG=00000000:00000000:00000000:00000000:0000:0000:0002:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000243\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.yz = texture2D(hg_Texture0, hg_TexCoord0.xy).yz;\n"
           "    r1.yz = texture2D(hg_Texture0, hg_TexCoord1.xy).yz;\n"
           "    gl_FragColor.xy = r0.yz;\n"
           "    gl_FragColor.zw = r1.yz;\n"
           "}\n"
           "//MD5=7da700af:7eb22f7e:dd24a356:2070ab44\n"
           "//SIG=00000000:00000000:00000000:00000000:0000:0000:0002:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void HgcYUV444BiPlanar_chroma_pack2::InitProgramDescriptor(HgcYUV444BiPlanar_chroma_pack2 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcYUV444BiPlanar_chroma_pack2_hgc_visible", "//Metal1.0     \n//LEN=00000001ee\n[[ visible ]] FragmentOut HgcYUV444BiPlanar_chroma_pack2_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0,\n    float4 texCoord1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.yz = hg_Texture0.sample(hg_Sampler0, texCoord0.xy).yz;\n"
    "    r1.yz = hg_Texture0.sample(hg_Sampler0, texCoord1.xy).yz;\n"
    "    output.color0.xy = r0.yz;\n"
    "    output.color0.zw = r1.yz;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcYUV444BiPlanar_chroma_pack2");
}

void sub_1B78DCAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78DCADC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78DCAD4);
}

char *HgcYUV444BiPlanar_chroma_pack2::shaderDescription@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1B8375D30;
  strcpy(result, "HgcYUV444BiPlanar_chroma_pack2 [hgc1]");
  return result;
}

uint64_t HgcYUV444BiPlanar_chroma_pack2::BindTexture(HgcYUV444BiPlanar_chroma_pack2 *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46)) {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
  }
  (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 96))(a2, 1.0, 1.0, 0.0);
  return 0;
}

uint64_t HgcYUV444BiPlanar_chroma_pack2::Bind(HgcYUV444BiPlanar_chroma_pack2 *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcYUV444BiPlanar_chroma_pack2::RenderTile(HgcYUV444BiPlanar_chroma_pack2 *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    unint64_t v3 = (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
    uint64_t v4 = (int8x16_t *)*((void *)a2 + 10);
    uint64_t v5 = *((void *)a2 + 2);
    uint64_t v6 = *((int *)a2 + 22);
    uint64_t v7 = *((int *)a2 + 6);
    if ((int)v3 < 4)
    {
      if ((int)v3 >= 1)
      {
        int v33 = 0;
        int v34 = v6 + 1;
        uint64_t v35 = 16 * v6;
        uint64_t v36 = 16 * v7;
        do
        {
          for (uint64_t i = 0; i != v3; ++i)
          {
            int8x16_t v38 = v4[i];
            int8x16_t v39 = vextq_s8(v38, v4[v34 + (int)i], 0xCuLL);
            *(int8x8_t *)v38.i8 = vext_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL), 4uLL);
            v38.i64[1] = vextq_s8(v39, v39, 8uLL).u64[0];
            *(int8x16_t *)(v5 + 16 * i) = v38;
          }
          uint64_t v4 = (int8x16_t *)((char *)v4 + v35);
          ++v33;
          v5 += v36;
        }
        while (v33 != v2);
      }
    }
    else
    {
      int v8 = 0;
      uint64_t v9 = 16 * v6;
      uint64_t v10 = 16 * v7;
      int v11 = v6 + 1;
      uint64_t v12 = v4 + 4;
      unint64_t v13 = (_OWORD *)(v5 + 64);
      do
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        float v16 = &v4[(unint64_t)v9 / 0x10];
        float v17 = v13;
        uint64_t v18 = v12;
        do
        {
          int8x16_t v19 = v4[v14];
          int8x16_t v20 = vextq_s8(v19, v16[v14 + 1], 0xCuLL);
          *(int8x8_t *)v19.i8 = vext_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), 4uLL);
          v19.i64[1] = vextq_s8(v20, v20, 8uLL).u64[0];
          int8x16_t v21 = vextq_s8(v19, v16[v14 + 2], 0xCuLL);
          *(int8x8_t *)v22.i8 = vext_s8(*(int8x8_t *)v4[v14 + 1].i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4[v14 + 1], v4[v14 + 1], 8uLL), 4uLL);
          v22.i64[1] = vextq_s8(v21, v21, 8uLL).u64[0];
          int8x16_t v23 = vextq_s8(v19, v16[v14 + 3], 0xCuLL);
          *(int8x8_t *)v24.i8 = vext_s8(*(int8x8_t *)v4[v14 + 2].i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4[v14 + 2], v4[v14 + 2], 8uLL), 4uLL);
          v24.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
          int8x16_t v25 = vextq_s8(v19, v16[v14 + 4], 0xCuLL);
          *(int8x8_t *)v26.i8 = vext_s8(*(int8x8_t *)v4[v14 + 3].i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4[v14 + 3], v4[v14 + 3], 8uLL), 4uLL);
          v26.i64[1] = vextq_s8(v25, v25, 8uLL).u64[0];
          float32x4_t v27 = v18;
          int v28 = v17;
          float32x4_t v29 = (int8x16_t *)(v5 + v14 * 16);
          *float32x4_t v29 = v19;
          v29[1] = v22;
          v15 += 4;
          v29[2] = v24;
          v29[3] = v26;
          v14 += 4;
          uint64_t v18 = v27 + 4;
          v17 += 4;
        }
        while ((uint64_t)v15 < (uint64_t)(v3 - 3));
        if ((int)v3 > (int)v15)
        {
          do
          {
            int8x16_t v30 = *v27++;
            int8x16_t v31 = vextq_s8(v30, v4[v11 + (int)v15], 0xCuLL);
            *(int8x8_t *)&long long v32 = vext_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), 4uLL);
            *((void *)&v32 + 1) = vextq_s8(v31, v31, 8uLL).u64[0];
            *v28++ = v32;
            ++v15;
          }
          while (v15 < v3);
        }
        uint64_t v4 = (int8x16_t *)((char *)v4 + v9);
        ++v8;
        v5 += v10;
        uint64_t v12 = (int8x16_t *)((char *)v12 + v9);
        unint64_t v13 = (_OWORD *)((char *)v13 + v10);
      }
      while (v8 != v2);
    }
  }
  return 0;
}

uint64_t HgcYUV444BiPlanar_chroma_pack2::GetDOD(HgcYUV444BiPlanar_chroma_pack2 *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  uint64_t v5 = *(void *)&a4.var2;
  uint64_t v6 = *(void *)&a4.var0;
  uint64_t v7 = HGRectMake4i(0, 0, 1u, 1u);
  return HGRectGrow(v6, v5, v7);
}

uint64_t HgcYUV444BiPlanar_chroma_pack2::GetROI(HgcYUV444BiPlanar_chroma_pack2 *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  uint64_t v5 = *(void *)&a4.var2;
  uint64_t v6 = *(void *)&a4.var0;
  uint64_t v7 = HGRectMake4i(0, 0, 1u, 1u);
  return HGRectGrow(v6, v5, v7);
}

void HgcYUV444BiPlanar_chroma_pack2::HgcYUV444BiPlanar_chroma_pack2(HgcYUV444BiPlanar_chroma_pack2 *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F10E7948;
  operator new();
}

void sub_1B78DD05C(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcYUV444BiPlanar_chroma_pack2::~HgcYUV444BiPlanar_chroma_pack2(HGNode *this)
{
  *(void *)this = &unk_1F10E7948;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0xC400A2AC0F1);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E7948;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0xC400A2AC0F1);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HgcYUV444BiPlanar_chroma_pack2::SetParameter(HgcYUV444BiPlanar_chroma_pack2 *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcYUV444BiPlanar_chroma_pack2::GetParameter(HgcYUV444BiPlanar_chroma_pack2 *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcYUV444BiPlanar_chroma::GetProgram(HgcYUV444BiPlanar_chroma *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000235\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.yz = (half2) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).yz;\n"
             "    output.color0.xy = float2(r0.yz);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b5ceef05:898edb99:9f947171:98dbaa5b\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0000:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=0000000227\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.yz = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).yz;\n"
             "    output.color0.xy = r0.yz;\n"
             "    return output;\n"
             "}\n"
             "//MD5=513314b2:face81c8:9010d868:78fd2bc7\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0000:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000001c9\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0.yz = texture2D(hg_Texture0, hg_TexCoord0.xy).yz;\n"
           "    gl_FragColor.xy = r0.yz;\n"
           "}\n"
           "//MD5=6e8f9b59:fe470076:deb0cf55:8a2a4614\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0000:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcYUV444BiPlanar_chroma::InitProgramDescriptor(HgcYUV444BiPlanar_chroma *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcYUV444BiPlanar_chroma_hgc_visible", "//Metal1.0     \n//LEN=0000000109\n[[ visible ]] FragmentOut HgcYUV444BiPlanar_chroma_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.yz = color0.yz;\n"
    "    output.color0.xy = r0.yz;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcYUV444BiPlanar_chroma");
}

void sub_1B78DD42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78DD45C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78DD454);
}

double HgcYUV444BiPlanar_chroma::shaderDescription@<D0>(uint64_t a1@<X8>)
{
  unint64_t v3 = (char *)operator new(0x20uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1B8375D70;
  strcpy(v3, "HgcYUV444BiPlanar_chroma [hgc1]");
  return *(double *)"ar_chroma [hgc1]";
}

uint64_t HgcYUV444BiPlanar_chroma::BindTexture(HgcYUV444BiPlanar_chroma *this, HGHandler *a2, int a3)
{
  if (a3) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  int v5 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcYUV444BiPlanar_chroma::Bind(HgcYUV444BiPlanar_chroma *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcYUV444BiPlanar_chroma::RenderTile(HgcYUV444BiPlanar_chroma *this, HGTile *a2)
{
  int v2 = *((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1);
  if (v2 >= 1)
  {
    unint64_t v3 = (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
    uint64_t v4 = (int8x16_t *)*((void *)a2 + 10);
    int v5 = (int8x16_t *)*((void *)a2 + 2);
    uint64_t v6 = *((int *)a2 + 6);
    uint64_t v7 = *((int *)a2 + 22);
    if ((int)v3 < 4)
    {
      if ((int)v3 >= 1)
      {
        int v27 = 0;
        uint64_t v28 = 16 * v7;
        uint64_t v29 = 16 * v6;
        uint64_t v30 = 16 * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
        do
        {
          unint64_t v31 = 0;
          do
          {
            v5[v31 / 0x10] = vbslq_s8(*(int8x16_t *)(*((void *)this + 62) + 128), vextq_s8(v4[v31 / 0x10], v4[v31 / 0x10], 4uLL), *(int8x16_t *)(*((void *)this + 62) + 112));
            v31 += 16;
          }
          while (v30 != v31);
          ++v27;
          uint64_t v4 = (int8x16_t *)((char *)v4 + v28);
          int v5 = (int8x16_t *)((char *)v5 + v29);
        }
        while (v27 != v2);
      }
    }
    else
    {
      int v8 = 0;
      uint64_t v9 = 16 * v6;
      uint64_t v10 = 16 * v7;
      int v11 = v4 + 4;
      uint64_t v12 = v5 + 4;
      do
      {
        unint64_t v13 = 0;
        uint64_t v14 = v12;
        unint64_t v15 = v11;
        uint64_t v16 = 2;
        do
        {
          float v17 = v15;
          uint64_t v18 = v14;
          int8x16_t v19 = (int8x16_t *)*((void *)this + 62);
          int8x16_t v21 = v19[7];
          int8x16_t v20 = v19[8];
          int8x16_t v22 = vbslq_s8(v20, vextq_s8(v4[v16 - 1], v4[v16 - 1], 4uLL), v21);
          int8x16_t v23 = vbslq_s8(v20, vextq_s8(v4[v16], v4[v16], 4uLL), v21);
          int8x16_t v24 = vbslq_s8(v20, vextq_s8(v4[v16 + 1], v4[v16 + 1], 4uLL), v21);
          int8x16_t v25 = &v5[v16];
          v25[-2] = vbslq_s8(v20, vextq_s8(v4[v16 - 2], v4[v16 - 2], 4uLL), v21);
          v25[-1] = v22;
          v13 += 4;
          *int8x16_t v25 = v23;
          v25[1] = v24;
          v16 += 4;
          v15 += 4;
          uint64_t v14 = v18 + 4;
        }
        while ((uint64_t)v13 < (uint64_t)(v3 - 3));
        if ((int)v3 > (int)v13)
        {
          do
          {
            int8x16_t v26 = *v17++;
            *v18++ = vbslq_s8(*(int8x16_t *)(*((void *)this + 62) + 128), vextq_s8(v26, v26, 4uLL), *(int8x16_t *)(*((void *)this + 62) + 112));
            ++v13;
          }
          while (v13 < v3);
        }
        ++v8;
        int v5 = (int8x16_t *)((char *)v5 + v9);
        uint64_t v4 = (int8x16_t *)((char *)v4 + v10);
        int v11 = (int8x16_t *)((char *)v11 + v10);
        uint64_t v12 = (int8x16_t *)((char *)v12 + v9);
      }
      while (v8 != v2);
    }
  }
  return 0;
}

uint64_t HgcYUV444BiPlanar_chroma::GetDOD(HgcYUV444BiPlanar_chroma *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

uint64_t HgcYUV444BiPlanar_chroma::GetROI(HgcYUV444BiPlanar_chroma *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (a3) {
    return 0;
  }
  else {
    return *(void *)&a4.var0;
  }
}

void HgcYUV444BiPlanar_chroma::HgcYUV444BiPlanar_chroma(HgcYUV444BiPlanar_chroma *this)
{
}

void sub_1B78DD874(_Unwind_Exception *a1)
{
  HGColorMatrix::~HGColorMatrix(v1);
  _Unwind_Resume(a1);
}

void HgcYUV444BiPlanar_chroma::~HgcYUV444BiPlanar_chroma(HgcYUV444BiPlanar_chroma *this)
{
  *(void *)this = &unk_1F10E7BB0;
  uint64_t v2 = *((void *)this + 62);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40265AC83CLL);
  }

  HGColorMatrix::~HGColorMatrix(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E7BB0;
  uint64_t v2 = *((void *)this + 62);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40265AC83CLL);
  }
  HGColorMatrix::~HGColorMatrix(this);

  HGObject::operator delete(v3);
}

uint64_t HgcYUV444BiPlanar_chroma::SetParameter(HgcYUV444BiPlanar_chroma *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcYUV444BiPlanar_chroma::GetParameter(HgcYUV444BiPlanar_chroma *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

HGNode *HgcYUV444BiPlanar_chroma::GetOutput(__n128 *this, HGRenderer *a2, __n128 a3, __n128 a4, int32x2_t a5)
{
  if (this[31].n128_u32[2])
  {
    unint64_t v5 = this[31].n128_u64[0];
    int8x16_t v6 = vextq_s8(*(int8x16_t *)(v5 + 80), *(int8x16_t *)(v5 + 80), 4uLL);
    a4 = (__n128)vextq_s8(*(int8x16_t *)(v5 + 96), *(int8x16_t *)(v5 + 96), 4uLL);
    *(double *)&a5 = 0.0;
    *(_OWORD *)unint64_t v5 = 0u;
    *(int8x16_t *)(this[31].n128_u64[0] + 16) = v6;
    *(__n128 *)(this[31].n128_u64[0] + (*(void (**)(HGLightWrap *, uint64_t, uint64_t))(*(void *)this + 136))(this, 0xFFFFFFFFLL, 32) = a4;
    *(_OWORD *)(this[31].n128_u64[0] + 48) = 0u;
    uint64_t v7 = (__n128 *)this[31].n128_u64[0];
    this[27] = *v7;
    this[28] = v7[1];
    this[29] = v7[2];
    a3 = v7[3];
    this[30] = a3;
    this[31].n128_u32[2] = 0;
  }
  return HGColorMatrix::GetOutput((HGColorMatrix *)this, a2, a3.n128_f64[0], a4.n128_f64[0], a5);
}

const char *HgcYUV420TriPlanar_601ToRGB::GetProgram(HgcYUV420TriPlanar_601ToRGB *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004f3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, -0.3441362977, 1.771999955, 0.000000000);\n"
             "    const half4 c1 = half4(1.401999950, -0.7141363025, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = (half2) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xy;\n"
             "    r0.yz = r0.xy;\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.xyz = r0.xyz*half3(hg_Params[0].xyz) + half3(hg_Params[1].xyz);\n"
             "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
             "    r0.x = (half) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    output.color0.xyz = float3(r0.zzz)*float3(c1.xyz) + float3(r1.xyz);\n"
             "    output.color0.w = float(r0.x);\n"
             "    return output;\n"
             "}\n"
             "//MD5=6c0cd9a4:962f63d5:0783359b:49528c86\n"
             "//SIG=00400000:00000005:00000005:00000007:0002:0002:0002:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004b8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, -0.3441362977, 1.771999955, 0.000000000);\n"
             "    const float4 c1 = float4(1.401999950, -0.7141363025, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xy;\n"
             "    r0.yz = r0.xy;\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.xyz = r0.xyz*hg_Params[0].xyz + hg_Params[1].xyz;\n"
             "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
             "    r0.x = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    output.color0.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
             "    output.color0.w = r0.x;\n"
             "    return output;\n"
             "}\n"
             "//MD5=24010ee7:6e1cd76d:c31b9c85:b9fbda97\n"
             "//SIG=00000000:00000005:00000005:00000000:0002:0002:0002:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000473\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, -0.3441362977, 1.771999955, 0.000000000);\n"
           "    const defaultp vec4 c1 = vec4(1.401999950, -0.7141363025, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.xy = texture2D(hg_Texture1, hg_TexCoord1.xy).xy;\n"
           "    r0.yz = r0.xy;\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r0.xyz = r0.xyz*hg_ProgramLocal0.xyz + hg_ProgramLocal1.xyz;\n"
           "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
           "    r0.x = texture2D(hg_Texture2, hg_TexCoord2.xy).x;\n"
           "    gl_FragColor.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
           "    gl_FragColor.w = r0.x;\n"
           "}\n"
           "//MD5=6448df2f:b4b78b65:3a0dc9a8:4e1d16fb\n"
           "//SIG=00000000:00000005:00000005:00000000:0002:0002:0002:0000:0000:0000:0000:0000:0003:03:0:1:0\n";
  }
}

void HgcYUV420TriPlanar_601ToRGB::InitProgramDescriptor(HgcYUV420TriPlanar_601ToRGB *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcYUV420TriPlanar_601ToRGB_hgc_visible", "//Metal1.0     \n//LEN=0000000310\n[[ visible ]] FragmentOut HgcYUV420TriPlanar_601ToRGB_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 color2,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, -0.3441362977, 1.771999955, 0.000000000);\n"
    "    const float4 c1 = float4(1.401999950, -0.7141363025, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = hg_Texture1.sample(hg_Sampler1, texCoord1.xy).xy;\n"
    "    r0.yz = r0.xy;\n"
    "    r0.x = color0.x;\n"
    "    r0.xyz = r0.xyz*hg_Params[0].xyz + hg_Params[1].xyz;\n"
    "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
    "    r0.x = color2.x;\n"
    "    output.color0.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
    "    output.color0.w = r0.x;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcYUV420TriPlanar_601ToRGB");
}

void sub_1B78DDF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78DDF4C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78DDF44);
}

char *HgcYUV420TriPlanar_601ToRGB::shaderDescription@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1B8375DB0;
  strcpy(result, "HgcYUV420TriPlanar_601ToRGB [hgc1]");
  return result;
}

uint64_t HgcYUV420TriPlanar_601ToRGB::BindTexture(HgcYUV420TriPlanar_601ToRGB *this, HGHandler *a2, int a3)
{
  if (a3)
  {
    if (a3 != 2)
    {
      if (a3 != 1) {
        return 0xFFFFFFFFLL;
      }
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      HGHandler::TexCoord(a2, 1, 0, 0, 0);
      if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46))(*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2); {
      (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 104))(a2, 0.5, 0.5, 1.0);
      }
      return 0;
    }
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    unint64_t v5 = a2;
    int v6 = 2;
  }
  else
  {
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    unint64_t v5 = a2;
    int v6 = 0;
  }
  HGHandler::TexCoord(v5, v6, 0, 0, 0);
  int v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v7)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcYUV420TriPlanar_601ToRGB::Bind(HgcYUV420TriPlanar_601ToRGB *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcYUV420TriPlanar_601ToRGB::RenderTile(HgcYUV420TriPlanar_601ToRGB *this, int32x2_t *a2)
{
  int32x2_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    int v6 = a2[1].i32[0] - v2.i32[0];
    float32x4_t v7 = vmulq_f32(v5, (float32x4_t)xmmword_1B7E77360);
    int32x2_t v8 = a2[2];
    int32x2_t v9 = a2[14];
    int32x2_t v10 = a2[10];
    uint64_t v11 = 16 * a2[11].i32[0];
    uint64_t v12 = 16 * a2[15].i32[0];
    uint64_t v13 = 16 * a2[3].i32[0];
    float32x4_t v14 = 0uLL;
    __asm { FMOV            V5.4S, #4.0 }
    v20.i64[0] = 0x3F0000003F000000;
    v20.i64[1] = 0x3F0000003F000000;
    while (1)
    {
      float32x4_t v21 = vaddq_f32(v7, vmulq_f32(v14, (float32x4_t)xmmword_1B7E75610));
      if (v6 >= 4) {
        break;
      }
      LODWORD(v68) = 0;
      float32x4_t v23 = 0uLL;
      __asm { FMOV            V17.4S, #1.0 }
      if (v6 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      float32x4_t v14 = vaddq_f32(v14, _Q17);
      *(void *)&v10 += v11;
      *(void *)&v9 += v12;
      *(void *)&v8 += v13;
      if (v4 == v3) {
        return 0;
      }
    }
    int v22 = 0;
    float32x4_t v23 = 0uLL;
    uint64_t v24 = 32;
    do
    {
      float32x4_t v25 = vaddq_f32(v21, vmulq_f32(v23, (float32x4_t)xmmword_1B7E75B20));
      float32x4_t v26 = vaddq_f32(v25, (float32x4_t)xmmword_1B7E75B20);
      float32x4_t v27 = vaddq_f32(v26, (float32x4_t)xmmword_1B7E75B20);
      float32x4_t v28 = vaddq_f32(v27, (float32x4_t)xmmword_1B7E75B20);
      int32x2_t v29 = a2[12];
      __int32 v30 = a2[13].i32[0];
      float32x4_t v31 = vaddq_f32(vsubq_f32(v25, v5), v20);
      int32x4_t v32 = vcvtq_s32_f32(v31);
      v31.i64[0] = vaddq_s32(v32, vcgtq_f32(vcvtq_f32_s32(v32), v31)).u64[0];
      __int32 v33 = v31.i32[1];
      __int32 v34 = v31.i32[0];
      float32x4_t v35 = vaddq_f32(vsubq_f32(v26, v5), v20);
      int32x4_t v36 = vcvtq_s32_f32(v35);
      v35.i64[0] = vaddq_s32(v36, vcgtq_f32(vcvtq_f32_s32(v36), v35)).u64[0];
      int8x16_t v37 = *(int8x16_t *)(*(void *)&v29 + 16 * (v34 + v33 * v30));
      __int32 v38 = v35.i32[1];
      __int32 v39 = v35.i32[0];
      float32x4_t v40 = vaddq_f32(vsubq_f32(v27, v5), v20);
      int32x4_t v41 = vcvtq_s32_f32(v40);
      v40.i64[0] = vaddq_s32(v41, vcgtq_f32(vcvtq_f32_s32(v41), v40)).u64[0];
      int8x16_t v42 = *(int8x16_t *)(*(void *)&v29 + 16 * (v39 + v38 * v30));
      __int32 v43 = v40.i32[1];
      __int32 v44 = v40.i32[0];
      float32x4_t v45 = vaddq_f32(vsubq_f32(v28, v5), v20);
      int32x4_t v46 = vcvtq_s32_f32(v45);
      v45.i64[0] = vaddq_s32(v46, vcgtq_f32(vcvtq_f32_s32(v46), v45)).u64[0];
      int8x16_t v47 = *(int8x16_t *)(*(void *)&v29 + 16 * (v44 + v43 * v30));
      int8x16_t v48 = *(int8x16_t *)(*(void *)&v29 + 16 * (v45.i32[0] + v45.i32[1] * v30));
      uint64_t v49 = *((void *)this + 51);
      int8x16_t v50 = *(int8x16_t *)(v49 + 32);
      float32x4_t v51 = *(float32x4_t *)(v49 + 48);
      float32x4_t v52 = *(float32x4_t *)(v49 + 16);
      float32x4_t v53 = vaddq_f32(v52, vmulq_f32(*(float32x4_t *)v49, (float32x4_t)vbslq_s8(v50, *(int8x16_t *)(*(void *)&v10 + v24 - 32), vextq_s8(v37, v37, 0xCuLL))));
      float32x4_t v54 = vaddq_f32(v52, vmulq_f32(*(float32x4_t *)v49, (float32x4_t)vbslq_s8(v50, *(int8x16_t *)(*(void *)&v10 + v24 - 16), vextq_s8(v42, v42, 0xCuLL))));
      float32x4_t v55 = vaddq_f32(v52, vmulq_f32(*(float32x4_t *)v49, (float32x4_t)vbslq_s8(v50, *(int8x16_t *)(*(void *)&v10 + v24), vextq_s8(v47, v47, 0xCuLL))));
      float32x4_t v56 = vaddq_f32(v52, vmulq_f32(*(float32x4_t *)v49, (float32x4_t)vbslq_s8(v50, *(int8x16_t *)(*(void *)&v10 + v24 + 16), vextq_s8(v48, v48, 0xCuLL))));
      float32x4_t v57 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0), vmulq_lane_f32(v51, *(float32x2_t *)v53.f32, 1));
      float32x4_t v58 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), vmulq_lane_f32(v51, *(float32x2_t *)v54.f32, 1));
      int8x16_t v59 = *(int8x16_t *)(*(void *)&v9 + v24 - 32);
      int8x16_t v60 = *(int8x16_t *)(*(void *)&v9 + v24 - 16);
      v59.i64[1] = v53.i64[1];
      float32x4_t v61 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0), vmulq_lane_f32(v51, *(float32x2_t *)v55.f32, 1));
      int8x16_t v63 = *(int8x16_t *)(*(void *)&v9 + v24);
      int8x16_t v62 = *(int8x16_t *)(*(void *)&v9 + v24 + 16);
      v60.i64[1] = v54.i64[1];
      v63.i64[1] = v55.i64[1];
      float32x4_t v64 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 0), vmulq_lane_f32(v51, *(float32x2_t *)v56.f32, 1));
      v62.i64[1] = v56.i64[1];
      float32x4_t v65 = *(float32x4_t *)(v49 + 64);
      int8x16_t v66 = *(int8x16_t *)(v49 + 80);
      float32x4_t v23 = vaddq_f32(v23, _Q5);
      uint64_t v67 = (int8x16_t *)(*(void *)&v8 + v24);
      v67[-2] = vbslq_s8(v66, vextq_s8(v59, v59, 4uLL), (int8x16_t)vaddq_f32(v57, vmulq_laneq_f32(v65, v53, 2)));
      v67[-1] = vbslq_s8(v66, vextq_s8(v60, v60, 4uLL), (int8x16_t)vaddq_f32(v58, vmulq_laneq_f32(v65, v54, 2)));
      *uint64_t v67 = vbslq_s8(v66, vextq_s8(v63, v63, 4uLL), (int8x16_t)vaddq_f32(v61, vmulq_laneq_f32(v65, v55, 2)));
      v67[1] = vbslq_s8(v66, vextq_s8(v62, v62, 4uLL), (int8x16_t)vaddq_f32(v64, vmulq_laneq_f32(v65, v56, 2)));
      v22 -= 4;
      v24 += 64;
    }
    while (v6 + v22 > 3);
    LODWORD(v68) = -v22;
    __asm { FMOV            V17.4S, #1.0 }
    if ((int)v68 >= v6) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v68 = v68;
    do
    {
      float32x4_t v70 = vaddq_f32(vsubq_f32(vaddq_f32(v21, vmulq_f32(v23, (float32x4_t)xmmword_1B7E75B20)), v5), v20);
      int32x4_t v71 = vcvtq_s32_f32(v70);
      v70.i64[0] = vaddq_s32(v71, vcgtq_f32(vcvtq_f32_s32(v71), v70)).u64[0];
      int8x16_t v72 = *(int8x16_t *)(*(void *)&a2[12] + 16 * (v70.i32[0] + v70.i32[1] * a2[13].i32[0]));
      uint64_t v73 = *((void *)this + 51);
      float32x4_t v74 = vaddq_f32(*(float32x4_t *)(v73 + 16), vmulq_f32(*(float32x4_t *)v73, (float32x4_t)vbslq_s8(*(int8x16_t *)(v73 + 32), *(int8x16_t *)(*(void *)&v10 + 16 * v68), vextq_s8(v72, v72, 0xCuLL))));
      int8x16_t v75 = *(int8x16_t *)(*(void *)&v9 + 16 * v68);
      v75.i64[1] = v74.i64[1];
      *(int8x16_t *)(*(void *)&v8 + 16 * v68) = vbslq_s8(*(int8x16_t *)(v73 + 80), vextq_s8(v75, v75, 4uLL), (int8x16_t)vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)(v73 + 64), v74, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.f32, 0), vmulq_lane_f32(*(float32x4_t *)(v73 + 48), *(float32x2_t *)v74.f32, 1))));
      float32x4_t v23 = vaddq_f32(v23, _Q17);
      ++v68;
    }
    while (v68 < v6);
    goto LABEL_3;
  }
  return 0;
}

uint64_t HgcYUV420TriPlanar_601ToRGB::GetDOD(HgcYUV420TriPlanar_601ToRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  if (!a3 || a3 == 2) {
    return v5;
  }
  if (a3 == 1)
  {
    uint64_t v6 = HGRectMake4i(0, 0, 1u, 1u);
    int v7 = HGRectGrow(v5, v4, v6);
    float v8 = HGRectFloat(v7);
    float v12 = HGRectScale(v8, v9, v10, v11, 2.0);
    uint64_t v17 = HGRectIntegral(v13, v12, v14, v15, v16);
    return HGRectUnion(0, 0, v17, v18);
  }
  return 0;
}

uint64_t HgcYUV420TriPlanar_601ToRGB::GetROI(HgcYUV420TriPlanar_601ToRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t result = *(void *)&a4.var0;
  if (a3 && a3 != 2)
  {
    if (a3 == 1)
    {
      float v5 = HGRectFloat(a4.var0);
      float v9 = HGRectScale(v5, v6, v7, v8, 0.5);
      uint64_t v14 = HGRectIntegral(v10, v9, v11, v12, v13);
      uint64_t v16 = v15;
      uint64_t v17 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 0, 0);
      uint64_t v18 = HGRectGrow(v14, v16, v17);
      return HGRectUnion(0, 0, v18, v19);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void HgcYUV420TriPlanar_601ToRGB::HgcYUV420TriPlanar_601ToRGB(HgcYUV420TriPlanar_601ToRGB *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F10E7E28;
  operator new();
}

void sub_1B78DE8C8(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcYUV420TriPlanar_601ToRGB::~HgcYUV420TriPlanar_601ToRGB(HGNode *this)
{
  *(void *)this = &unk_1F10E7E28;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F10E7E28;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E7E28;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HgcYUV420TriPlanar_601ToRGB::SetParameter(HgcYUV420TriPlanar_601ToRGB *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  double v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *double v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcYUV420TriPlanar_601ToRGB::GetParameter(HgcYUV420TriPlanar_601ToRGB *this, unsigned int a2, float *a3)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  float v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcYUV420TriPlanar_709ToRGB::GetProgram(HgcYUV420TriPlanar_709ToRGB *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004f3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, -0.1873242706, 1.855599999, 0.000000000);\n"
             "    const half4 c1 = half4(1.574800014, -0.4681242704, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = (half2) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xy;\n"
             "    r0.yz = r0.xy;\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.xyz = r0.xyz*half3(hg_Params[0].xyz) + half3(hg_Params[1].xyz);\n"
             "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
             "    r0.x = (half) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    output.color0.xyz = float3(r0.zzz)*float3(c1.xyz) + float3(r1.xyz);\n"
             "    output.color0.w = float(r0.x);\n"
             "    return output;\n"
             "}\n"
             "//MD5=cdf2c357:0e58722b:1e4f6b69:f6729461\n"
             "//SIG=00400000:00000005:00000005:00000007:0002:0002:0002:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004b8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, -0.1873242706, 1.855599999, 0.000000000);\n"
             "    const float4 c1 = float4(1.574800014, -0.4681242704, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xy;\n"
             "    r0.yz = r0.xy;\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.xyz = r0.xyz*hg_Params[0].xyz + hg_Params[1].xyz;\n"
             "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
             "    r0.x = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    output.color0.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
             "    output.color0.w = r0.x;\n"
             "    return output;\n"
             "}\n"
             "//MD5=05c81fc8:e3feb89a:8a806bcd:71aa8c88\n"
             "//SIG=00000000:00000005:00000005:00000000:0002:0002:0002:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000473\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, -0.1873242706, 1.855599999, 0.000000000);\n"
           "    const defaultp vec4 c1 = vec4(1.574800014, -0.4681242704, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.xy = texture2D(hg_Texture1, hg_TexCoord1.xy).xy;\n"
           "    r0.yz = r0.xy;\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r0.xyz = r0.xyz*hg_ProgramLocal0.xyz + hg_ProgramLocal1.xyz;\n"
           "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
           "    r0.x = texture2D(hg_Texture2, hg_TexCoord2.xy).x;\n"
           "    gl_FragColor.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
           "    gl_FragColor.w = r0.x;\n"
           "}\n"
           "//MD5=d2915400:9b8d3537:638e9298:f328421c\n"
           "//SIG=00000000:00000005:00000005:00000000:0002:0002:0002:0000:0000:0000:0000:0000:0003:03:0:1:0\n";
  }
}

void HgcYUV420TriPlanar_709ToRGB::InitProgramDescriptor(HgcYUV420TriPlanar_709ToRGB *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcYUV420TriPlanar_709ToRGB_hgc_visible", "//Metal1.0     \n//LEN=0000000310\n[[ visible ]] FragmentOut HgcYUV420TriPlanar_709ToRGB_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 color2,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, -0.1873242706, 1.855599999, 0.000000000);\n"
    "    const float4 c1 = float4(1.574800014, -0.4681242704, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = hg_Texture1.sample(hg_Sampler1, texCoord1.xy).xy;\n"
    "    r0.yz = r0.xy;\n"
    "    r0.x = color0.x;\n"
    "    r0.xyz = r0.xyz*hg_Params[0].xyz + hg_Params[1].xyz;\n"
    "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
    "    r0.x = color2.x;\n"
    "    output.color0.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
    "    output.color0.w = r0.x;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcYUV420TriPlanar_709ToRGB");
}

void sub_1B78DF034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78DF074(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78DF06CLL);
}

char *HgcYUV420TriPlanar_709ToRGB::shaderDescription@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1B8375DB0;
  strcpy(result, "HgcYUV420TriPlanar_709ToRGB [hgc1]");
  return result;
}

uint64_t HgcYUV420TriPlanar_709ToRGB::BindTexture(HgcYUV420TriPlanar_709ToRGB *this, HGHandler *a2, int a3)
{
  if (a3)
  {
    if (a3 != 2)
    {
      if (a3 != 1) {
        return 0xFFFFFFFFLL;
      }
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      HGHandler::TexCoord(a2, 1, 0, 0, 0);
      if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46))(*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2); {
      (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 104))(a2, 0.5, 0.5, 1.0);
      }
      return 0;
    }
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    float v5 = a2;
    int v6 = 2;
  }
  else
  {
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    float v5 = a2;
    int v6 = 0;
  }
  HGHandler::TexCoord(v5, v6, 0, 0, 0);
  int v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v7)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcYUV420TriPlanar_709ToRGB::Bind(HgcYUV420TriPlanar_709ToRGB *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcYUV420TriPlanar_709ToRGB::RenderTile(HgcYUV420TriPlanar_709ToRGB *this, int32x2_t *a2)
{
  int32x2_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    int v6 = a2[1].i32[0] - v2.i32[0];
    float32x4_t v7 = vmulq_f32(v5, (float32x4_t)xmmword_1B7E77360);
    int32x2_t v8 = a2[2];
    int32x2_t v9 = a2[14];
    int32x2_t v10 = a2[10];
    uint64_t v11 = 16 * a2[11].i32[0];
    uint64_t v12 = 16 * a2[15].i32[0];
    uint64_t v13 = 16 * a2[3].i32[0];
    float32x4_t v14 = 0uLL;
    __asm { FMOV            V5.4S, #4.0 }
    v20.i64[0] = 0x3F0000003F000000;
    v20.i64[1] = 0x3F0000003F000000;
    while (1)
    {
      float32x4_t v21 = vaddq_f32(v7, vmulq_f32(v14, (float32x4_t)xmmword_1B7E75610));
      if (v6 >= 4) {
        break;
      }
      LODWORD(v68) = 0;
      float32x4_t v23 = 0uLL;
      __asm { FMOV            V17.4S, #1.0 }
      if (v6 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      float32x4_t v14 = vaddq_f32(v14, _Q17);
      *(void *)&v10 += v11;
      *(void *)&v9 += v12;
      *(void *)&v8 += v13;
      if (v4 == v3) {
        return 0;
      }
    }
    int v22 = 0;
    float32x4_t v23 = 0uLL;
    uint64_t v24 = 32;
    do
    {
      float32x4_t v25 = vaddq_f32(v21, vmulq_f32(v23, (float32x4_t)xmmword_1B7E75B20));
      float32x4_t v26 = vaddq_f32(v25, (float32x4_t)xmmword_1B7E75B20);
      float32x4_t v27 = vaddq_f32(v26, (float32x4_t)xmmword_1B7E75B20);
      float32x4_t v28 = vaddq_f32(v27, (float32x4_t)xmmword_1B7E75B20);
      int32x2_t v29 = a2[12];
      __int32 v30 = a2[13].i32[0];
      float32x4_t v31 = vaddq_f32(vsubq_f32(v25, v5), v20);
      int32x4_t v32 = vcvtq_s32_f32(v31);
      v31.i64[0] = vaddq_s32(v32, vcgtq_f32(vcvtq_f32_s32(v32), v31)).u64[0];
      __int32 v33 = v31.i32[1];
      __int32 v34 = v31.i32[0];
      float32x4_t v35 = vaddq_f32(vsubq_f32(v26, v5), v20);
      int32x4_t v36 = vcvtq_s32_f32(v35);
      v35.i64[0] = vaddq_s32(v36, vcgtq_f32(vcvtq_f32_s32(v36), v35)).u64[0];
      int8x16_t v37 = *(int8x16_t *)(*(void *)&v29 + 16 * (v34 + v33 * v30));
      __int32 v38 = v35.i32[1];
      __int32 v39 = v35.i32[0];
      float32x4_t v40 = vaddq_f32(vsubq_f32(v27, v5), v20);
      int32x4_t v41 = vcvtq_s32_f32(v40);
      v40.i64[0] = vaddq_s32(v41, vcgtq_f32(vcvtq_f32_s32(v41), v40)).u64[0];
      int8x16_t v42 = *(int8x16_t *)(*(void *)&v29 + 16 * (v39 + v38 * v30));
      __int32 v43 = v40.i32[1];
      __int32 v44 = v40.i32[0];
      float32x4_t v45 = vaddq_f32(vsubq_f32(v28, v5), v20);
      int32x4_t v46 = vcvtq_s32_f32(v45);
      v45.i64[0] = vaddq_s32(v46, vcgtq_f32(vcvtq_f32_s32(v46), v45)).u64[0];
      int8x16_t v47 = *(int8x16_t *)(*(void *)&v29 + 16 * (v44 + v43 * v30));
      int8x16_t v48 = *(int8x16_t *)(*(void *)&v29 + 16 * (v45.i32[0] + v45.i32[1] * v30));
      uint64_t v49 = *((void *)this + 51);
      int8x16_t v50 = *(int8x16_t *)(v49 + 32);
      float32x4_t v51 = *(float32x4_t *)(v49 + 48);
      float32x4_t v52 = *(float32x4_t *)(v49 + 16);
      float32x4_t v53 = vaddq_f32(v52, vmulq_f32(*(float32x4_t *)v49, (float32x4_t)vbslq_s8(v50, *(int8x16_t *)(*(void *)&v10 + v24 - 32), vextq_s8(v37, v37, 0xCuLL))));
      float32x4_t v54 = vaddq_f32(v52, vmulq_f32(*(float32x4_t *)v49, (float32x4_t)vbslq_s8(v50, *(int8x16_t *)(*(void *)&v10 + v24 - 16), vextq_s8(v42, v42, 0xCuLL))));
      float32x4_t v55 = vaddq_f32(v52, vmulq_f32(*(float32x4_t *)v49, (float32x4_t)vbslq_s8(v50, *(int8x16_t *)(*(void *)&v10 + v24), vextq_s8(v47, v47, 0xCuLL))));
      float32x4_t v56 = vaddq_f32(v52, vmulq_f32(*(float32x4_t *)v49, (float32x4_t)vbslq_s8(v50, *(int8x16_t *)(*(void *)&v10 + v24 + 16), vextq_s8(v48, v48, 0xCuLL))));
      float32x4_t v57 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0), vmulq_lane_f32(v51, *(float32x2_t *)v53.f32, 1));
      float32x4_t v58 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), vmulq_lane_f32(v51, *(float32x2_t *)v54.f32, 1));
      int8x16_t v59 = *(int8x16_t *)(*(void *)&v9 + v24 - 32);
      int8x16_t v60 = *(int8x16_t *)(*(void *)&v9 + v24 - 16);
      v59.i64[1] = v53.i64[1];
      float32x4_t v61 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0), vmulq_lane_f32(v51, *(float32x2_t *)v55.f32, 1));
      int8x16_t v63 = *(int8x16_t *)(*(void *)&v9 + v24);
      int8x16_t v62 = *(int8x16_t *)(*(void *)&v9 + v24 + 16);
      v60.i64[1] = v54.i64[1];
      v63.i64[1] = v55.i64[1];
      float32x4_t v64 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 0), vmulq_lane_f32(v51, *(float32x2_t *)v56.f32, 1));
      v62.i64[1] = v56.i64[1];
      float32x4_t v65 = *(float32x4_t *)(v49 + 64);
      int8x16_t v66 = *(int8x16_t *)(v49 + 80);
      float32x4_t v23 = vaddq_f32(v23, _Q5);
      uint64_t v67 = (int8x16_t *)(*(void *)&v8 + v24);
      v67[-2] = vbslq_s8(v66, vextq_s8(v59, v59, 4uLL), (int8x16_t)vaddq_f32(v57, vmulq_laneq_f32(v65, v53, 2)));
      v67[-1] = vbslq_s8(v66, vextq_s8(v60, v60, 4uLL), (int8x16_t)vaddq_f32(v58, vmulq_laneq_f32(v65, v54, 2)));
      *uint64_t v67 = vbslq_s8(v66, vextq_s8(v63, v63, 4uLL), (int8x16_t)vaddq_f32(v61, vmulq_laneq_f32(v65, v55, 2)));
      v67[1] = vbslq_s8(v66, vextq_s8(v62, v62, 4uLL), (int8x16_t)vaddq_f32(v64, vmulq_laneq_f32(v65, v56, 2)));
      v22 -= 4;
      v24 += 64;
    }
    while (v6 + v22 > 3);
    LODWORD(v68) = -v22;
    __asm { FMOV            V17.4S, #1.0 }
    if ((int)v68 >= v6) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v68 = v68;
    do
    {
      float32x4_t v70 = vaddq_f32(vsubq_f32(vaddq_f32(v21, vmulq_f32(v23, (float32x4_t)xmmword_1B7E75B20)), v5), v20);
      int32x4_t v71 = vcvtq_s32_f32(v70);
      v70.i64[0] = vaddq_s32(v71, vcgtq_f32(vcvtq_f32_s32(v71), v70)).u64[0];
      int8x16_t v72 = *(int8x16_t *)(*(void *)&a2[12] + 16 * (v70.i32[0] + v70.i32[1] * a2[13].i32[0]));
      uint64_t v73 = *((void *)this + 51);
      float32x4_t v74 = vaddq_f32(*(float32x4_t *)(v73 + 16), vmulq_f32(*(float32x4_t *)v73, (float32x4_t)vbslq_s8(*(int8x16_t *)(v73 + 32), *(int8x16_t *)(*(void *)&v10 + 16 * v68), vextq_s8(v72, v72, 0xCuLL))));
      int8x16_t v75 = *(int8x16_t *)(*(void *)&v9 + 16 * v68);
      v75.i64[1] = v74.i64[1];
      *(int8x16_t *)(*(void *)&v8 + 16 * v68) = vbslq_s8(*(int8x16_t *)(v73 + 80), vextq_s8(v75, v75, 4uLL), (int8x16_t)vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)(v73 + 64), v74, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.f32, 0), vmulq_lane_f32(*(float32x4_t *)(v73 + 48), *(float32x2_t *)v74.f32, 1))));
      float32x4_t v23 = vaddq_f32(v23, _Q17);
      ++v68;
    }
    while (v68 < v6);
    goto LABEL_3;
  }
  return 0;
}

uint64_t HgcYUV420TriPlanar_709ToRGB::GetDOD(HgcYUV420TriPlanar_709ToRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  if (!a3 || a3 == 2) {
    return v5;
  }
  if (a3 == 1)
  {
    uint64_t v6 = HGRectMake4i(0, 0, 1u, 1u);
    int v7 = HGRectGrow(v5, v4, v6);
    float v8 = HGRectFloat(v7);
    float v12 = HGRectScale(v8, v9, v10, v11, 2.0);
    uint64_t v17 = HGRectIntegral(v13, v12, v14, v15, v16);
    return HGRectUnion(0, 0, v17, v18);
  }
  return 0;
}

uint64_t HgcYUV420TriPlanar_709ToRGB::GetROI(HgcYUV420TriPlanar_709ToRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t result = *(void *)&a4.var0;
  if (a3 && a3 != 2)
  {
    if (a3 == 1)
    {
      float v5 = HGRectFloat(a4.var0);
      float v9 = HGRectScale(v5, v6, v7, v8, 0.5);
      uint64_t v14 = HGRectIntegral(v10, v9, v11, v12, v13);
      uint64_t v16 = v15;
      uint64_t v17 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 0, 0);
      uint64_t v18 = HGRectGrow(v14, v16, v17);
      return HGRectUnion(0, 0, v18, v19);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void HgcYUV420TriPlanar_709ToRGB::HgcYUV420TriPlanar_709ToRGB(HgcYUV420TriPlanar_709ToRGB *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F10E8090;
  operator new();
}

void sub_1B78DF9F0(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcYUV420TriPlanar_709ToRGB::~HgcYUV420TriPlanar_709ToRGB(HGNode *this)
{
  *(void *)this = &unk_1F10E8090;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F10E8090;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E8090;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HgcYUV420TriPlanar_709ToRGB::SetParameter(HgcYUV420TriPlanar_709ToRGB *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  double v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *double v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcYUV420TriPlanar_709ToRGB::GetParameter(HgcYUV420TriPlanar_709ToRGB *this, unsigned int a2, float *a3)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  float v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcYUV420TriPlanar_2020ToRGB::GetProgram(HgcYUV420TriPlanar_2020ToRGB *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004f3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, -0.1645531207, 1.881399989, 0.000000000);\n"
             "    const half4 c1 = half4(1.474599957, -0.5713531375, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = (half2) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xy;\n"
             "    r0.yz = r0.xy;\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.xyz = r0.xyz*half3(hg_Params[0].xyz) + half3(hg_Params[1].xyz);\n"
             "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
             "    r0.x = (half) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    output.color0.xyz = float3(r0.zzz)*float3(c1.xyz) + float3(r1.xyz);\n"
             "    output.color0.w = float(r0.x);\n"
             "    return output;\n"
             "}\n"
             "//MD5=f79a664b:38284d73:72f9ca6b:398dd0ca\n"
             "//SIG=00400000:00000005:00000005:00000007:0002:0002:0002:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004b8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, -0.1645531207, 1.881399989, 0.000000000);\n"
             "    const float4 c1 = float4(1.474599957, -0.5713531375, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xy;\n"
             "    r0.yz = r0.xy;\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.xyz = r0.xyz*hg_Params[0].xyz + hg_Params[1].xyz;\n"
             "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
             "    r0.x = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    output.color0.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
             "    output.color0.w = r0.x;\n"
             "    return output;\n"
             "}\n"
             "//MD5=7637b7ca:94e18948:9249a20f:2be63cfc\n"
             "//SIG=00000000:00000005:00000005:00000000:0002:0002:0002:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000473\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, -0.1645531207, 1.881399989, 0.000000000);\n"
           "    const defaultp vec4 c1 = vec4(1.474599957, -0.5713531375, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.xy = texture2D(hg_Texture1, hg_TexCoord1.xy).xy;\n"
           "    r0.yz = r0.xy;\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r0.xyz = r0.xyz*hg_ProgramLocal0.xyz + hg_ProgramLocal1.xyz;\n"
           "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
           "    r0.x = texture2D(hg_Texture2, hg_TexCoord2.xy).x;\n"
           "    gl_FragColor.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
           "    gl_FragColor.w = r0.x;\n"
           "}\n"
           "//MD5=a3e884d8:41b7c32f:d6ccb16b:fb255cb1\n"
           "//SIG=00000000:00000005:00000005:00000000:0002:0002:0002:0000:0000:0000:0000:0000:0003:03:0:1:0\n";
  }
}

void HgcYUV420TriPlanar_2020ToRGB::InitProgramDescriptor(HgcYUV420TriPlanar_2020ToRGB *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcYUV420TriPlanar_2020ToRGB_hgc_visible", "//Metal1.0     \n//LEN=0000000311\n[[ visible ]] FragmentOut HgcYUV420TriPlanar_2020ToRGB_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 color2,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, -0.1645531207, 1.881399989, 0.000000000);\n"
    "    const float4 c1 = float4(1.474599957, -0.5713531375, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = hg_Texture1.sample(hg_Sampler1, texCoord1.xy).xy;\n"
    "    r0.yz = r0.xy;\n"
    "    r0.x = color0.x;\n"
    "    r0.xyz = r0.xyz*hg_Params[0].xyz + hg_Params[1].xyz;\n"
    "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
    "    r0.x = color2.x;\n"
    "    output.color0.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
    "    output.color0.w = r0.x;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcYUV420TriPlanar_2020ToRGB");
}

void sub_1B78E015C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78E019C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78E0194);
}

char *HgcYUV420TriPlanar_2020ToRGB::shaderDescription@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1B8375E40;
  strcpy(result, "HgcYUV420TriPlanar_2020ToRGB [hgc1]");
  return result;
}

uint64_t HgcYUV420TriPlanar_2020ToRGB::BindTexture(HgcYUV420TriPlanar_2020ToRGB *this, HGHandler *a2, int a3)
{
  if (a3)
  {
    if (a3 != 2)
    {
      if (a3 != 1) {
        return 0xFFFFFFFFLL;
      }
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      HGHandler::TexCoord(a2, 1, 0, 0, 0);
      if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46))(*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2); {
      (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 104))(a2, 0.5, 0.5, 1.0);
      }
      return 0;
    }
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    float v5 = a2;
    int v6 = 2;
  }
  else
  {
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    float v5 = a2;
    int v6 = 0;
  }
  HGHandler::TexCoord(v5, v6, 0, 0, 0);
  int v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v7)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcYUV420TriPlanar_2020ToRGB::Bind(HgcYUV420TriPlanar_2020ToRGB *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcYUV420TriPlanar_2020ToRGB::RenderTile(HgcYUV420TriPlanar_2020ToRGB *this, int32x2_t *a2)
{
  int32x2_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    int v6 = a2[1].i32[0] - v2.i32[0];
    float32x4_t v7 = vmulq_f32(v5, (float32x4_t)xmmword_1B7E77360);
    int32x2_t v8 = a2[2];
    int32x2_t v9 = a2[14];
    int32x2_t v10 = a2[10];
    uint64_t v11 = 16 * a2[11].i32[0];
    uint64_t v12 = 16 * a2[15].i32[0];
    uint64_t v13 = 16 * a2[3].i32[0];
    float32x4_t v14 = 0uLL;
    __asm { FMOV            V5.4S, #4.0 }
    v20.i64[0] = 0x3F0000003F000000;
    v20.i64[1] = 0x3F0000003F000000;
    while (1)
    {
      float32x4_t v21 = vaddq_f32(v7, vmulq_f32(v14, (float32x4_t)xmmword_1B7E75610));
      if (v6 >= 4) {
        break;
      }
      LODWORD(v68) = 0;
      float32x4_t v23 = 0uLL;
      __asm { FMOV            V17.4S, #1.0 }
      if (v6 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      float32x4_t v14 = vaddq_f32(v14, _Q17);
      *(void *)&v10 += v11;
      *(void *)&v9 += v12;
      *(void *)&v8 += v13;
      if (v4 == v3) {
        return 0;
      }
    }
    int v22 = 0;
    float32x4_t v23 = 0uLL;
    uint64_t v24 = 32;
    do
    {
      float32x4_t v25 = vaddq_f32(v21, vmulq_f32(v23, (float32x4_t)xmmword_1B7E75B20));
      float32x4_t v26 = vaddq_f32(v25, (float32x4_t)xmmword_1B7E75B20);
      float32x4_t v27 = vaddq_f32(v26, (float32x4_t)xmmword_1B7E75B20);
      float32x4_t v28 = vaddq_f32(v27, (float32x4_t)xmmword_1B7E75B20);
      int32x2_t v29 = a2[12];
      __int32 v30 = a2[13].i32[0];
      float32x4_t v31 = vaddq_f32(vsubq_f32(v25, v5), v20);
      int32x4_t v32 = vcvtq_s32_f32(v31);
      v31.i64[0] = vaddq_s32(v32, vcgtq_f32(vcvtq_f32_s32(v32), v31)).u64[0];
      __int32 v33 = v31.i32[1];
      __int32 v34 = v31.i32[0];
      float32x4_t v35 = vaddq_f32(vsubq_f32(v26, v5), v20);
      int32x4_t v36 = vcvtq_s32_f32(v35);
      v35.i64[0] = vaddq_s32(v36, vcgtq_f32(vcvtq_f32_s32(v36), v35)).u64[0];
      int8x16_t v37 = *(int8x16_t *)(*(void *)&v29 + 16 * (v34 + v33 * v30));
      __int32 v38 = v35.i32[1];
      __int32 v39 = v35.i32[0];
      float32x4_t v40 = vaddq_f32(vsubq_f32(v27, v5), v20);
      int32x4_t v41 = vcvtq_s32_f32(v40);
      v40.i64[0] = vaddq_s32(v41, vcgtq_f32(vcvtq_f32_s32(v41), v40)).u64[0];
      int8x16_t v42 = *(int8x16_t *)(*(void *)&v29 + 16 * (v39 + v38 * v30));
      __int32 v43 = v40.i32[1];
      __int32 v44 = v40.i32[0];
      float32x4_t v45 = vaddq_f32(vsubq_f32(v28, v5), v20);
      int32x4_t v46 = vcvtq_s32_f32(v45);
      v45.i64[0] = vaddq_s32(v46, vcgtq_f32(vcvtq_f32_s32(v46), v45)).u64[0];
      int8x16_t v47 = *(int8x16_t *)(*(void *)&v29 + 16 * (v44 + v43 * v30));
      int8x16_t v48 = *(int8x16_t *)(*(void *)&v29 + 16 * (v45.i32[0] + v45.i32[1] * v30));
      uint64_t v49 = *((void *)this + 51);
      int8x16_t v50 = *(int8x16_t *)(v49 + 32);
      float32x4_t v51 = *(float32x4_t *)(v49 + 48);
      float32x4_t v52 = *(float32x4_t *)(v49 + 16);
      float32x4_t v53 = vaddq_f32(v52, vmulq_f32(*(float32x4_t *)v49, (float32x4_t)vbslq_s8(v50, *(int8x16_t *)(*(void *)&v10 + v24 - 32), vextq_s8(v37, v37, 0xCuLL))));
      float32x4_t v54 = vaddq_f32(v52, vmulq_f32(*(float32x4_t *)v49, (float32x4_t)vbslq_s8(v50, *(int8x16_t *)(*(void *)&v10 + v24 - 16), vextq_s8(v42, v42, 0xCuLL))));
      float32x4_t v55 = vaddq_f32(v52, vmulq_f32(*(float32x4_t *)v49, (float32x4_t)vbslq_s8(v50, *(int8x16_t *)(*(void *)&v10 + v24), vextq_s8(v47, v47, 0xCuLL))));
      float32x4_t v56 = vaddq_f32(v52, vmulq_f32(*(float32x4_t *)v49, (float32x4_t)vbslq_s8(v50, *(int8x16_t *)(*(void *)&v10 + v24 + 16), vextq_s8(v48, v48, 0xCuLL))));
      float32x4_t v57 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0), vmulq_lane_f32(v51, *(float32x2_t *)v53.f32, 1));
      float32x4_t v58 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), vmulq_lane_f32(v51, *(float32x2_t *)v54.f32, 1));
      int8x16_t v59 = *(int8x16_t *)(*(void *)&v9 + v24 - 32);
      int8x16_t v60 = *(int8x16_t *)(*(void *)&v9 + v24 - 16);
      v59.i64[1] = v53.i64[1];
      float32x4_t v61 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0), vmulq_lane_f32(v51, *(float32x2_t *)v55.f32, 1));
      int8x16_t v63 = *(int8x16_t *)(*(void *)&v9 + v24);
      int8x16_t v62 = *(int8x16_t *)(*(void *)&v9 + v24 + 16);
      v60.i64[1] = v54.i64[1];
      v63.i64[1] = v55.i64[1];
      float32x4_t v64 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 0), vmulq_lane_f32(v51, *(float32x2_t *)v56.f32, 1));
      v62.i64[1] = v56.i64[1];
      float32x4_t v65 = *(float32x4_t *)(v49 + 64);
      int8x16_t v66 = *(int8x16_t *)(v49 + 80);
      float32x4_t v23 = vaddq_f32(v23, _Q5);
      uint64_t v67 = (int8x16_t *)(*(void *)&v8 + v24);
      v67[-2] = vbslq_s8(v66, vextq_s8(v59, v59, 4uLL), (int8x16_t)vaddq_f32(v57, vmulq_laneq_f32(v65, v53, 2)));
      v67[-1] = vbslq_s8(v66, vextq_s8(v60, v60, 4uLL), (int8x16_t)vaddq_f32(v58, vmulq_laneq_f32(v65, v54, 2)));
      *uint64_t v67 = vbslq_s8(v66, vextq_s8(v63, v63, 4uLL), (int8x16_t)vaddq_f32(v61, vmulq_laneq_f32(v65, v55, 2)));
      v67[1] = vbslq_s8(v66, vextq_s8(v62, v62, 4uLL), (int8x16_t)vaddq_f32(v64, vmulq_laneq_f32(v65, v56, 2)));
      v22 -= 4;
      v24 += 64;
    }
    while (v6 + v22 > 3);
    LODWORD(v68) = -v22;
    __asm { FMOV            V17.4S, #1.0 }
    if ((int)v68 >= v6) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v68 = v68;
    do
    {
      float32x4_t v70 = vaddq_f32(vsubq_f32(vaddq_f32(v21, vmulq_f32(v23, (float32x4_t)xmmword_1B7E75B20)), v5), v20);
      int32x4_t v71 = vcvtq_s32_f32(v70);
      v70.i64[0] = vaddq_s32(v71, vcgtq_f32(vcvtq_f32_s32(v71), v70)).u64[0];
      int8x16_t v72 = *(int8x16_t *)(*(void *)&a2[12] + 16 * (v70.i32[0] + v70.i32[1] * a2[13].i32[0]));
      uint64_t v73 = *((void *)this + 51);
      float32x4_t v74 = vaddq_f32(*(float32x4_t *)(v73 + 16), vmulq_f32(*(float32x4_t *)v73, (float32x4_t)vbslq_s8(*(int8x16_t *)(v73 + 32), *(int8x16_t *)(*(void *)&v10 + 16 * v68), vextq_s8(v72, v72, 0xCuLL))));
      int8x16_t v75 = *(int8x16_t *)(*(void *)&v9 + 16 * v68);
      v75.i64[1] = v74.i64[1];
      *(int8x16_t *)(*(void *)&v8 + 16 * v68) = vbslq_s8(*(int8x16_t *)(v73 + 80), vextq_s8(v75, v75, 4uLL), (int8x16_t)vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)(v73 + 64), v74, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.f32, 0), vmulq_lane_f32(*(float32x4_t *)(v73 + 48), *(float32x2_t *)v74.f32, 1))));
      float32x4_t v23 = vaddq_f32(v23, _Q17);
      ++v68;
    }
    while (v68 < v6);
    goto LABEL_3;
  }
  return 0;
}

uint64_t HgcYUV420TriPlanar_2020ToRGB::GetDOD(HgcYUV420TriPlanar_2020ToRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  if (!a3 || a3 == 2) {
    return v5;
  }
  if (a3 == 1)
  {
    uint64_t v6 = HGRectMake4i(0, 0, 1u, 1u);
    int v7 = HGRectGrow(v5, v4, v6);
    float v8 = HGRectFloat(v7);
    float v12 = HGRectScale(v8, v9, v10, v11, 2.0);
    uint64_t v17 = HGRectIntegral(v13, v12, v14, v15, v16);
    return HGRectUnion(0, 0, v17, v18);
  }
  return 0;
}

uint64_t HgcYUV420TriPlanar_2020ToRGB::GetROI(HgcYUV420TriPlanar_2020ToRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t result = *(void *)&a4.var0;
  if (a3 && a3 != 2)
  {
    if (a3 == 1)
    {
      float v5 = HGRectFloat(a4.var0);
      float v9 = HGRectScale(v5, v6, v7, v8, 0.5);
      uint64_t v14 = HGRectIntegral(v10, v9, v11, v12, v13);
      uint64_t v16 = v15;
      uint64_t v17 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 0, 0);
      uint64_t v18 = HGRectGrow(v14, v16, v17);
      return HGRectUnion(0, 0, v18, v19);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void HgcYUV420TriPlanar_2020ToRGB::HgcYUV420TriPlanar_2020ToRGB(HgcYUV420TriPlanar_2020ToRGB *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F10E82F8;
  operator new();
}

void sub_1B78E0B1C(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcYUV420TriPlanar_2020ToRGB::~HgcYUV420TriPlanar_2020ToRGB(HGNode *this)
{
  *(void *)this = &unk_1F10E82F8;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F10E82F8;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E82F8;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HgcYUV420TriPlanar_2020ToRGB::SetParameter(HgcYUV420TriPlanar_2020ToRGB *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  double v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *double v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcYUV420TriPlanar_2020ToRGB::GetParameter(HgcYUV420TriPlanar_2020ToRGB *this, unsigned int a2, float *a3)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  float v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcYUV422TriPlanar_601ToRGB::GetProgram(HgcYUV422TriPlanar_601ToRGB *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004f3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, -0.3441362977, 1.771999955, 0.000000000);\n"
             "    const half4 c1 = half4(1.401999950, -0.7141363025, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = (half2) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xy;\n"
             "    r0.yz = r0.xy;\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.xyz = r0.xyz*half3(hg_Params[0].xyz) + half3(hg_Params[1].xyz);\n"
             "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
             "    r0.x = (half) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    output.color0.xyz = float3(r0.zzz)*float3(c1.xyz) + float3(r1.xyz);\n"
             "    output.color0.w = float(r0.x);\n"
             "    return output;\n"
             "}\n"
             "//MD5=6c0cd9a4:962f63d5:0783359b:49528c86\n"
             "//SIG=00400000:00000005:00000005:00000007:0002:0002:0002:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004b8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, -0.3441362977, 1.771999955, 0.000000000);\n"
             "    const float4 c1 = float4(1.401999950, -0.7141363025, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xy;\n"
             "    r0.yz = r0.xy;\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.xyz = r0.xyz*hg_Params[0].xyz + hg_Params[1].xyz;\n"
             "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
             "    r0.x = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    output.color0.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
             "    output.color0.w = r0.x;\n"
             "    return output;\n"
             "}\n"
             "//MD5=24010ee7:6e1cd76d:c31b9c85:b9fbda97\n"
             "//SIG=00000000:00000005:00000005:00000000:0002:0002:0002:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000473\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, -0.3441362977, 1.771999955, 0.000000000);\n"
           "    const defaultp vec4 c1 = vec4(1.401999950, -0.7141363025, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.xy = texture2D(hg_Texture1, hg_TexCoord1.xy).xy;\n"
           "    r0.yz = r0.xy;\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r0.xyz = r0.xyz*hg_ProgramLocal0.xyz + hg_ProgramLocal1.xyz;\n"
           "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
           "    r0.x = texture2D(hg_Texture2, hg_TexCoord2.xy).x;\n"
           "    gl_FragColor.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
           "    gl_FragColor.w = r0.x;\n"
           "}\n"
           "//MD5=6448df2f:b4b78b65:3a0dc9a8:4e1d16fb\n"
           "//SIG=00000000:00000005:00000005:00000000:0002:0002:0002:0000:0000:0000:0000:0000:0003:03:0:1:0\n";
  }
}

void HgcYUV422TriPlanar_601ToRGB::InitProgramDescriptor(HgcYUV422TriPlanar_601ToRGB *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcYUV422TriPlanar_601ToRGB_hgc_visible", "//Metal1.0     \n//LEN=0000000310\n[[ visible ]] FragmentOut HgcYUV422TriPlanar_601ToRGB_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 color2,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, -0.3441362977, 1.771999955, 0.000000000);\n"
    "    const float4 c1 = float4(1.401999950, -0.7141363025, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = hg_Texture1.sample(hg_Sampler1, texCoord1.xy).xy;\n"
    "    r0.yz = r0.xy;\n"
    "    r0.x = color0.x;\n"
    "    r0.xyz = r0.xyz*hg_Params[0].xyz + hg_Params[1].xyz;\n"
    "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
    "    r0.x = color2.x;\n"
    "    output.color0.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
    "    output.color0.w = r0.x;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcYUV422TriPlanar_601ToRGB");
}

void sub_1B78E1288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78E12C8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78E12C0);
}

char *HgcYUV422TriPlanar_601ToRGB::shaderDescription@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1B8375DB0;
  strcpy(result, "HgcYUV422TriPlanar_601ToRGB [hgc1]");
  return result;
}

uint64_t HgcYUV422TriPlanar_601ToRGB::BindTexture(HgcYUV422TriPlanar_601ToRGB *this, HGHandler *a2, int a3)
{
  if (a3)
  {
    if (a3 != 2)
    {
      if (a3 != 1) {
        return 0xFFFFFFFFLL;
      }
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      HGHandler::TexCoord(a2, 1, 0, 0, 0);
      if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46))(*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2); {
      (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 104))(a2, 0.5, 1.0, 1.0);
      }
      return 0;
    }
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    float v5 = a2;
    int v6 = 2;
  }
  else
  {
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    float v5 = a2;
    int v6 = 0;
  }
  HGHandler::TexCoord(v5, v6, 0, 0, 0);
  int v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v7)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcYUV422TriPlanar_601ToRGB::Bind(HgcYUV422TriPlanar_601ToRGB *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcYUV422TriPlanar_601ToRGB::RenderTile(HgcYUV422TriPlanar_601ToRGB *this, int32x2_t *a2)
{
  int32x2_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    int v6 = a2[1].i32[0] - v2.i32[0];
    float32x4_t v7 = vmulq_f32(v5, (float32x4_t)xmmword_1B8375E70);
    int32x2_t v8 = a2[2];
    int32x2_t v9 = a2[14];
    int32x2_t v10 = a2[10];
    uint64_t v11 = 16 * a2[11].i32[0];
    uint64_t v12 = 16 * a2[15].i32[0];
    uint64_t v13 = 16 * a2[3].i32[0];
    __asm { FMOV            V4.4S, #4.0 }
    v19.i64[0] = 0x3F0000003F000000;
    v19.i64[1] = 0x3F0000003F000000;
    while (v6 < 4)
    {
      LODWORD(v66) = 0;
      float32x4_t v21 = 0uLL;
      if (v6 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      float32x4_t v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B7E736C0);
      *(void *)&v10 += v11;
      *(void *)&v9 += v12;
      *(void *)&v8 += v13;
      if (v4 == v3) {
        return 0;
      }
    }
    int v20 = 0;
    float32x4_t v21 = 0uLL;
    uint64_t v22 = 32;
    do
    {
      float32x4_t v23 = vaddq_f32(v7, vmulq_f32(v21, (float32x4_t)xmmword_1B7E75B20));
      float32x4_t v24 = vaddq_f32(v23, (float32x4_t)xmmword_1B7E75B20);
      float32x4_t v25 = vaddq_f32(v24, (float32x4_t)xmmword_1B7E75B20);
      float32x4_t v26 = vaddq_f32(v25, (float32x4_t)xmmword_1B7E75B20);
      int32x2_t v27 = a2[12];
      __int32 v28 = a2[13].i32[0];
      float32x4_t v29 = vaddq_f32(vsubq_f32(v23, v5), v19);
      int32x4_t v30 = vcvtq_s32_f32(v29);
      v29.i64[0] = vaddq_s32(v30, vcgtq_f32(vcvtq_f32_s32(v30), v29)).u64[0];
      __int32 v31 = v29.i32[1];
      __int32 v32 = v29.i32[0];
      float32x4_t v33 = vaddq_f32(vsubq_f32(v24, v5), v19);
      int32x4_t v34 = vcvtq_s32_f32(v33);
      v33.i64[0] = vaddq_s32(v34, vcgtq_f32(vcvtq_f32_s32(v34), v33)).u64[0];
      int8x16_t v35 = *(int8x16_t *)(*(void *)&v27 + 16 * (v32 + v31 * v28));
      __int32 v36 = v33.i32[1];
      __int32 v37 = v33.i32[0];
      float32x4_t v38 = vaddq_f32(vsubq_f32(v25, v5), v19);
      int32x4_t v39 = vcvtq_s32_f32(v38);
      v38.i64[0] = vaddq_s32(v39, vcgtq_f32(vcvtq_f32_s32(v39), v38)).u64[0];
      int8x16_t v40 = *(int8x16_t *)(*(void *)&v27 + 16 * (v37 + v36 * v28));
      __int32 v41 = v38.i32[1];
      __int32 v42 = v38.i32[0];
      float32x4_t v43 = vaddq_f32(vsubq_f32(v26, v5), v19);
      int32x4_t v44 = vcvtq_s32_f32(v43);
      v43.i64[0] = vaddq_s32(v44, vcgtq_f32(vcvtq_f32_s32(v44), v43)).u64[0];
      int8x16_t v45 = *(int8x16_t *)(*(void *)&v27 + 16 * (v42 + v41 * v28));
      int8x16_t v46 = *(int8x16_t *)(*(void *)&v27 + 16 * (v43.i32[0] + v43.i32[1] * v28));
      uint64_t v47 = *((void *)this + 51);
      int8x16_t v48 = *(int8x16_t *)(v47 + 32);
      float32x4_t v49 = *(float32x4_t *)(v47 + 48);
      float32x4_t v50 = *(float32x4_t *)(v47 + 16);
      float32x4_t v51 = vaddq_f32(v50, vmulq_f32(*(float32x4_t *)v47, (float32x4_t)vbslq_s8(v48, *(int8x16_t *)(*(void *)&v10 + v22 - 32), vextq_s8(v35, v35, 0xCuLL))));
      float32x4_t v52 = vaddq_f32(v50, vmulq_f32(*(float32x4_t *)v47, (float32x4_t)vbslq_s8(v48, *(int8x16_t *)(*(void *)&v10 + v22 - 16), vextq_s8(v40, v40, 0xCuLL))));
      float32x4_t v53 = vaddq_f32(v50, vmulq_f32(*(float32x4_t *)v47, (float32x4_t)vbslq_s8(v48, *(int8x16_t *)(*(void *)&v10 + v22), vextq_s8(v45, v45, 0xCuLL))));
      float32x4_t v54 = vaddq_f32(v50, vmulq_f32(*(float32x4_t *)v47, (float32x4_t)vbslq_s8(v48, *(int8x16_t *)(*(void *)&v10 + v22 + 16), vextq_s8(v46, v46, 0xCuLL))));
      float32x4_t v55 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 0), vmulq_lane_f32(v49, *(float32x2_t *)v51.f32, 1));
      float32x4_t v56 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), vmulq_lane_f32(v49, *(float32x2_t *)v52.f32, 1));
      int8x16_t v57 = *(int8x16_t *)(*(void *)&v9 + v22 - 32);
      int8x16_t v58 = *(int8x16_t *)(*(void *)&v9 + v22 - 16);
      v57.i64[1] = v51.i64[1];
      float32x4_t v59 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0), vmulq_lane_f32(v49, *(float32x2_t *)v53.f32, 1));
      int8x16_t v61 = *(int8x16_t *)(*(void *)&v9 + v22);
      int8x16_t v60 = *(int8x16_t *)(*(void *)&v9 + v22 + 16);
      v58.i64[1] = v52.i64[1];
      v61.i64[1] = v53.i64[1];
      float32x4_t v62 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), vmulq_lane_f32(v49, *(float32x2_t *)v54.f32, 1));
      v60.i64[1] = v54.i64[1];
      float32x4_t v63 = *(float32x4_t *)(v47 + 64);
      int8x16_t v64 = *(int8x16_t *)(v47 + 80);
      float32x4_t v21 = vaddq_f32(v21, _Q4);
      float32x4_t v65 = (int8x16_t *)(*(void *)&v8 + v22);
      v65[-2] = vbslq_s8(v64, vextq_s8(v57, v57, 4uLL), (int8x16_t)vaddq_f32(v55, vmulq_laneq_f32(v63, v51, 2)));
      v65[-1] = vbslq_s8(v64, vextq_s8(v58, v58, 4uLL), (int8x16_t)vaddq_f32(v56, vmulq_laneq_f32(v63, v52, 2)));
      *float32x4_t v65 = vbslq_s8(v64, vextq_s8(v61, v61, 4uLL), (int8x16_t)vaddq_f32(v59, vmulq_laneq_f32(v63, v53, 2)));
      v65[1] = vbslq_s8(v64, vextq_s8(v60, v60, 4uLL), (int8x16_t)vaddq_f32(v62, vmulq_laneq_f32(v63, v54, 2)));
      v20 -= 4;
      v22 += 64;
    }
    while (v6 + v20 > 3);
    LODWORD(v66) = -v20;
    if ((int)v66 >= v6) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v66 = v66;
    do
    {
      float32x4_t v67 = vaddq_f32(vsubq_f32(vaddq_f32(v7, vmulq_f32(v21, (float32x4_t)xmmword_1B7E75B20)), v5), v19);
      int32x4_t v68 = vcvtq_s32_f32(v67);
      v67.i64[0] = vaddq_s32(v68, vcgtq_f32(vcvtq_f32_s32(v68), v67)).u64[0];
      int8x16_t v69 = *(int8x16_t *)(*(void *)&a2[12] + 16 * (v67.i32[0] + v67.i32[1] * a2[13].i32[0]));
      uint64_t v70 = *((void *)this + 51);
      float32x4_t v71 = vaddq_f32(*(float32x4_t *)(v70 + 16), vmulq_f32(*(float32x4_t *)v70, (float32x4_t)vbslq_s8(*(int8x16_t *)(v70 + 32), *(int8x16_t *)(*(void *)&v10 + 16 * v66), vextq_s8(v69, v69, 0xCuLL))));
      int8x16_t v72 = *(int8x16_t *)(*(void *)&v9 + 16 * v66);
      v72.i64[1] = v71.i64[1];
      *(int8x16_t *)(*(void *)&v8 + 16 * v66) = vbslq_s8(*(int8x16_t *)(v70 + 80), vextq_s8(v72, v72, 4uLL), (int8x16_t)vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)(v70 + 64), v71, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 0), vmulq_lane_f32(*(float32x4_t *)(v70 + 48), *(float32x2_t *)v71.f32, 1))));
      __asm { FMOV            V7.4S, #1.0 }
      float32x4_t v21 = vaddq_f32(v21, _Q7);
      ++v66;
    }
    while (v66 < v6);
    goto LABEL_3;
  }
  return 0;
}

uint64_t HgcYUV422TriPlanar_601ToRGB::GetDOD(HgcYUV422TriPlanar_601ToRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  if (!a3 || a3 == 2) {
    return v5;
  }
  if (a3 == 1)
  {
    uint64_t v6 = HGRectMake4i(0, 0, 1u, 0);
    int v7 = HGRectGrow(v5, v4, v6);
    float v8 = HGRectFloat(v7);
    float v12 = HGRectScale(v8, v9, v10, v11, 2.0);
    uint64_t v17 = HGRectIntegral(v13, v12, v14, v15, v16);
    return HGRectUnion(0, 0, v17, v18);
  }
  return 0;
}

uint64_t HgcYUV422TriPlanar_601ToRGB::GetROI(HgcYUV422TriPlanar_601ToRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t result = *(void *)&a4.var0;
  if (a3 && a3 != 2)
  {
    if (a3 == 1)
    {
      float v5 = HGRectFloat(a4.var0);
      float v9 = HGRectScale(v5, v6, v7, v8, 0.5);
      uint64_t v14 = HGRectIntegral(v10, v9, v11, v12, v13);
      uint64_t v16 = v15;
      uint64_t v17 = HGRectMake4i(0xFFFFFFFF, 0, 0, 0);
      uint64_t v18 = HGRectGrow(v14, v16, v17);
      return HGRectUnion(0, 0, v18, v19);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void HgcYUV422TriPlanar_601ToRGB::HgcYUV422TriPlanar_601ToRGB(HgcYUV422TriPlanar_601ToRGB *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F10E8560;
  operator new();
}

void sub_1B78E1C34(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcYUV422TriPlanar_601ToRGB::~HgcYUV422TriPlanar_601ToRGB(HGNode *this)
{
  *(void *)this = &unk_1F10E8560;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F10E8560;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E8560;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HgcYUV422TriPlanar_601ToRGB::SetParameter(HgcYUV422TriPlanar_601ToRGB *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  double v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *double v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcYUV422TriPlanar_601ToRGB::GetParameter(HgcYUV422TriPlanar_601ToRGB *this, unsigned int a2, float *a3)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  float v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcYUV422TriPlanar_709ToRGB::GetProgram(HgcYUV422TriPlanar_709ToRGB *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004f3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, -0.1873242706, 1.855599999, 0.000000000);\n"
             "    const half4 c1 = half4(1.574800014, -0.4681242704, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = (half2) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xy;\n"
             "    r0.yz = r0.xy;\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.xyz = r0.xyz*half3(hg_Params[0].xyz) + half3(hg_Params[1].xyz);\n"
             "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
             "    r0.x = (half) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    output.color0.xyz = float3(r0.zzz)*float3(c1.xyz) + float3(r1.xyz);\n"
             "    output.color0.w = float(r0.x);\n"
             "    return output;\n"
             "}\n"
             "//MD5=cdf2c357:0e58722b:1e4f6b69:f6729461\n"
             "//SIG=00400000:00000005:00000005:00000007:0002:0002:0002:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004b8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, -0.1873242706, 1.855599999, 0.000000000);\n"
             "    const float4 c1 = float4(1.574800014, -0.4681242704, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xy;\n"
             "    r0.yz = r0.xy;\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.xyz = r0.xyz*hg_Params[0].xyz + hg_Params[1].xyz;\n"
             "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
             "    r0.x = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    output.color0.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
             "    output.color0.w = r0.x;\n"
             "    return output;\n"
             "}\n"
             "//MD5=05c81fc8:e3feb89a:8a806bcd:71aa8c88\n"
             "//SIG=00000000:00000005:00000005:00000000:0002:0002:0002:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000473\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, -0.1873242706, 1.855599999, 0.000000000);\n"
           "    const defaultp vec4 c1 = vec4(1.574800014, -0.4681242704, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.xy = texture2D(hg_Texture1, hg_TexCoord1.xy).xy;\n"
           "    r0.yz = r0.xy;\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r0.xyz = r0.xyz*hg_ProgramLocal0.xyz + hg_ProgramLocal1.xyz;\n"
           "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
           "    r0.x = texture2D(hg_Texture2, hg_TexCoord2.xy).x;\n"
           "    gl_FragColor.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
           "    gl_FragColor.w = r0.x;\n"
           "}\n"
           "//MD5=d2915400:9b8d3537:638e9298:f328421c\n"
           "//SIG=00000000:00000005:00000005:00000000:0002:0002:0002:0000:0000:0000:0000:0000:0003:03:0:1:0\n";
  }
}

void HgcYUV422TriPlanar_709ToRGB::InitProgramDescriptor(HgcYUV422TriPlanar_709ToRGB *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcYUV422TriPlanar_709ToRGB_hgc_visible", "//Metal1.0     \n//LEN=0000000310\n[[ visible ]] FragmentOut HgcYUV422TriPlanar_709ToRGB_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 color2,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, -0.1873242706, 1.855599999, 0.000000000);\n"
    "    const float4 c1 = float4(1.574800014, -0.4681242704, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = hg_Texture1.sample(hg_Sampler1, texCoord1.xy).xy;\n"
    "    r0.yz = r0.xy;\n"
    "    r0.x = color0.x;\n"
    "    r0.xyz = r0.xyz*hg_Params[0].xyz + hg_Params[1].xyz;\n"
    "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
    "    r0.x = color2.x;\n"
    "    output.color0.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
    "    output.color0.w = r0.x;\n"
    "    return output;\n"
    "}\n");
  HGProgramDescriptor::SetFragmentFunctionName(a2, "HgcYUV422TriPlanar_709ToRGB");
}

void sub_1B78E23A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::vector<HGBinding>::~vector[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void sub_1B78E23E0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 33) < 0)
  {
    operator delete(*(void **)(v1 - 56));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B78E23D8);
}

char *HgcYUV422TriPlanar_709ToRGB::shaderDescription@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1B8375DB0;
  strcpy(result, "HgcYUV422TriPlanar_709ToRGB [hgc1]");
  return result;
}

uint64_t HgcYUV422TriPlanar_709ToRGB::BindTexture(HgcYUV422TriPlanar_709ToRGB *this, HGHandler *a2, int a3)
{
  if (a3)
  {
    if (a3 != 2)
    {
      if (a3 != 1) {
        return 0xFFFFFFFFLL;
      }
      (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
      HGHandler::TexCoord(a2, 1, 0, 0, 0);
      if (!(*(unsigned int (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46))(*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2); {
      (*(void (**)(HGHandler *, double, double, double))(*(void *)a2 + 104))(a2, 0.5, 1.0, 1.0);
      }
      return 0;
    }
    (*(void (**)(HGHandler *, uint64_t, void))(*(void *)a2 + 72))(a2, 2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    float v5 = a2;
    int v6 = 2;
  }
  else
  {
    (*(void (**)(HGHandler *, void))(*(void *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, void, void))(*(void *)a2 + 48))(a2, 0, 0);
    float v5 = a2;
    int v6 = 0;
  }
  HGHandler::TexCoord(v5, v6, 0, 0, 0);
  int v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)a2 + 18) + 128))(*((void *)a2 + 18), 46);
  uint64_t result = 0;
  if (!v7)
  {
    (*(void (**)(HGHandler *))(*(void *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcYUV422TriPlanar_709ToRGB::Bind(HgcYUV422TriPlanar_709ToRGB *this, HGHandler *a2)
{
  return 0;
}

uint64_t HgcYUV422TriPlanar_709ToRGB::RenderTile(HgcYUV422TriPlanar_709ToRGB *this, int32x2_t *a2)
{
  int32x2_t v2 = *a2;
  int v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    int v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    int v6 = a2[1].i32[0] - v2.i32[0];
    float32x4_t v7 = vmulq_f32(v5, (float32x4_t)xmmword_1B8375E70);
    int32x2_t v8 = a2[2];
    int32x2_t v9 = a2[14];
    int32x2_t v10 = a2[10];
    uint64_t v11 = 16 * a2[11].i32[0];
    uint64_t v12 = 16 * a2[15].i32[0];
    uint64_t v13 = 16 * a2[3].i32[0];
    __asm { FMOV            V4.4S, #4.0 }
    v19.i64[0] = 0x3F0000003F000000;
    v19.i64[1] = 0x3F0000003F000000;
    while (v6 < 4)
    {
      LODWORD(v66) = 0;
      float32x4_t v21 = 0uLL;
      if (v6 > 0) {
        goto LABEL_10;
      }
LABEL_3:
      ++v4;
      float32x4_t v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B7E736C0);
      *(void *)&v10 += v11;
      *(void *)&v9 += v12;
      *(void *)&v8 += v13;
      if (v4 == v3) {
        return 0;
      }
    }
    int v20 = 0;
    float32x4_t v21 = 0uLL;
    uint64_t v22 = 32;
    do
    {
      float32x4_t v23 = vaddq_f32(v7, vmulq_f32(v21, (float32x4_t)xmmword_1B7E75B20));
      float32x4_t v24 = vaddq_f32(v23, (float32x4_t)xmmword_1B7E75B20);
      float32x4_t v25 = vaddq_f32(v24, (float32x4_t)xmmword_1B7E75B20);
      float32x4_t v26 = vaddq_f32(v25, (float32x4_t)xmmword_1B7E75B20);
      int32x2_t v27 = a2[12];
      __int32 v28 = a2[13].i32[0];
      float32x4_t v29 = vaddq_f32(vsubq_f32(v23, v5), v19);
      int32x4_t v30 = vcvtq_s32_f32(v29);
      v29.i64[0] = vaddq_s32(v30, vcgtq_f32(vcvtq_f32_s32(v30), v29)).u64[0];
      __int32 v31 = v29.i32[1];
      __int32 v32 = v29.i32[0];
      float32x4_t v33 = vaddq_f32(vsubq_f32(v24, v5), v19);
      int32x4_t v34 = vcvtq_s32_f32(v33);
      v33.i64[0] = vaddq_s32(v34, vcgtq_f32(vcvtq_f32_s32(v34), v33)).u64[0];
      int8x16_t v35 = *(int8x16_t *)(*(void *)&v27 + 16 * (v32 + v31 * v28));
      __int32 v36 = v33.i32[1];
      __int32 v37 = v33.i32[0];
      float32x4_t v38 = vaddq_f32(vsubq_f32(v25, v5), v19);
      int32x4_t v39 = vcvtq_s32_f32(v38);
      v38.i64[0] = vaddq_s32(v39, vcgtq_f32(vcvtq_f32_s32(v39), v38)).u64[0];
      int8x16_t v40 = *(int8x16_t *)(*(void *)&v27 + 16 * (v37 + v36 * v28));
      __int32 v41 = v38.i32[1];
      __int32 v42 = v38.i32[0];
      float32x4_t v43 = vaddq_f32(vsubq_f32(v26, v5), v19);
      int32x4_t v44 = vcvtq_s32_f32(v43);
      v43.i64[0] = vaddq_s32(v44, vcgtq_f32(vcvtq_f32_s32(v44), v43)).u64[0];
      int8x16_t v45 = *(int8x16_t *)(*(void *)&v27 + 16 * (v42 + v41 * v28));
      int8x16_t v46 = *(int8x16_t *)(*(void *)&v27 + 16 * (v43.i32[0] + v43.i32[1] * v28));
      uint64_t v47 = *((void *)this + 51);
      int8x16_t v48 = *(int8x16_t *)(v47 + 32);
      float32x4_t v49 = *(float32x4_t *)(v47 + 48);
      float32x4_t v50 = *(float32x4_t *)(v47 + 16);
      float32x4_t v51 = vaddq_f32(v50, vmulq_f32(*(float32x4_t *)v47, (float32x4_t)vbslq_s8(v48, *(int8x16_t *)(*(void *)&v10 + v22 - 32), vextq_s8(v35, v35, 0xCuLL))));
      float32x4_t v52 = vaddq_f32(v50, vmulq_f32(*(float32x4_t *)v47, (float32x4_t)vbslq_s8(v48, *(int8x16_t *)(*(void *)&v10 + v22 - 16), vextq_s8(v40, v40, 0xCuLL))));
      float32x4_t v53 = vaddq_f32(v50, vmulq_f32(*(float32x4_t *)v47, (float32x4_t)vbslq_s8(v48, *(int8x16_t *)(*(void *)&v10 + v22), vextq_s8(v45, v45, 0xCuLL))));
      float32x4_t v54 = vaddq_f32(v50, vmulq_f32(*(float32x4_t *)v47, (float32x4_t)vbslq_s8(v48, *(int8x16_t *)(*(void *)&v10 + v22 + 16), vextq_s8(v46, v46, 0xCuLL))));
      float32x4_t v55 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 0), vmulq_lane_f32(v49, *(float32x2_t *)v51.f32, 1));
      float32x4_t v56 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), vmulq_lane_f32(v49, *(float32x2_t *)v52.f32, 1));
      int8x16_t v57 = *(int8x16_t *)(*(void *)&v9 + v22 - 32);
      int8x16_t v58 = *(int8x16_t *)(*(void *)&v9 + v22 - 16);
      v57.i64[1] = v51.i64[1];
      float32x4_t v59 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0), vmulq_lane_f32(v49, *(float32x2_t *)v53.f32, 1));
      int8x16_t v61 = *(int8x16_t *)(*(void *)&v9 + v22);
      int8x16_t v60 = *(int8x16_t *)(*(void *)&v9 + v22 + 16);
      v58.i64[1] = v52.i64[1];
      v61.i64[1] = v53.i64[1];
      float32x4_t v62 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0), vmulq_lane_f32(v49, *(float32x2_t *)v54.f32, 1));
      v60.i64[1] = v54.i64[1];
      float32x4_t v63 = *(float32x4_t *)(v47 + 64);
      int8x16_t v64 = *(int8x16_t *)(v47 + 80);
      float32x4_t v21 = vaddq_f32(v21, _Q4);
      float32x4_t v65 = (int8x16_t *)(*(void *)&v8 + v22);
      v65[-2] = vbslq_s8(v64, vextq_s8(v57, v57, 4uLL), (int8x16_t)vaddq_f32(v55, vmulq_laneq_f32(v63, v51, 2)));
      v65[-1] = vbslq_s8(v64, vextq_s8(v58, v58, 4uLL), (int8x16_t)vaddq_f32(v56, vmulq_laneq_f32(v63, v52, 2)));
      *float32x4_t v65 = vbslq_s8(v64, vextq_s8(v61, v61, 4uLL), (int8x16_t)vaddq_f32(v59, vmulq_laneq_f32(v63, v53, 2)));
      v65[1] = vbslq_s8(v64, vextq_s8(v60, v60, 4uLL), (int8x16_t)vaddq_f32(v62, vmulq_laneq_f32(v63, v54, 2)));
      v20 -= 4;
      v22 += 64;
    }
    while (v6 + v20 > 3);
    LODWORD(v66) = -v20;
    if ((int)v66 >= v6) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v66 = v66;
    do
    {
      float32x4_t v67 = vaddq_f32(vsubq_f32(vaddq_f32(v7, vmulq_f32(v21, (float32x4_t)xmmword_1B7E75B20)), v5), v19);
      int32x4_t v68 = vcvtq_s32_f32(v67);
      v67.i64[0] = vaddq_s32(v68, vcgtq_f32(vcvtq_f32_s32(v68), v67)).u64[0];
      int8x16_t v69 = *(int8x16_t *)(*(void *)&a2[12] + 16 * (v67.i32[0] + v67.i32[1] * a2[13].i32[0]));
      uint64_t v70 = *((void *)this + 51);
      float32x4_t v71 = vaddq_f32(*(float32x4_t *)(v70 + 16), vmulq_f32(*(float32x4_t *)v70, (float32x4_t)vbslq_s8(*(int8x16_t *)(v70 + 32), *(int8x16_t *)(*(void *)&v10 + 16 * v66), vextq_s8(v69, v69, 0xCuLL))));
      int8x16_t v72 = *(int8x16_t *)(*(void *)&v9 + 16 * v66);
      v72.i64[1] = v71.i64[1];
      *(int8x16_t *)(*(void *)&v8 + 16 * v66) = vbslq_s8(*(int8x16_t *)(v70 + 80), vextq_s8(v72, v72, 4uLL), (int8x16_t)vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)(v70 + 64), v71, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 0), vmulq_lane_f32(*(float32x4_t *)(v70 + 48), *(float32x2_t *)v71.f32, 1))));
      __asm { FMOV            V7.4S, #1.0 }
      float32x4_t v21 = vaddq_f32(v21, _Q7);
      ++v66;
    }
    while (v66 < v6);
    goto LABEL_3;
  }
  return 0;
}

uint64_t HgcYUV422TriPlanar_709ToRGB::GetDOD(HgcYUV422TriPlanar_709ToRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4 = *(void *)&a4.var2;
  uint64_t v5 = *(void *)&a4.var0;
  if (!a3 || a3 == 2) {
    return v5;
  }
  if (a3 == 1)
  {
    uint64_t v6 = HGRectMake4i(0, 0, 1u, 0);
    int v7 = HGRectGrow(v5, v4, v6);
    float v8 = HGRectFloat(v7);
    float v12 = HGRectScale(v8, v9, v10, v11, 2.0);
    uint64_t v17 = HGRectIntegral(v13, v12, v14, v15, v16);
    return HGRectUnion(0, 0, v17, v18);
  }
  return 0;
}

uint64_t HgcYUV422TriPlanar_709ToRGB::GetROI(HgcYUV422TriPlanar_709ToRGB *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t result = *(void *)&a4.var0;
  if (a3 && a3 != 2)
  {
    if (a3 == 1)
    {
      float v5 = HGRectFloat(a4.var0);
      float v9 = HGRectScale(v5, v6, v7, v8, 0.5);
      uint64_t v14 = HGRectIntegral(v10, v9, v11, v12, v13);
      uint64_t v16 = v15;
      uint64_t v17 = HGRectMake4i(0xFFFFFFFF, 0, 0, 0);
      uint64_t v18 = HGRectGrow(v14, v16, v17);
      return HGRectUnion(0, 0, v18, v19);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void HgcYUV422TriPlanar_709ToRGB::HgcYUV422TriPlanar_709ToRGB(HgcYUV422TriPlanar_709ToRGB *this)
{
  HGNode::HGNode((HGNode *)this);
  *uint64_t v1 = &unk_1F10E87C8;
  operator new();
}

void sub_1B78E2D4C(_Unwind_Exception *a1)
{
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcYUV422TriPlanar_709ToRGB::~HgcYUV422TriPlanar_709ToRGB(HGNode *this)
{
  *(void *)this = &unk_1F10E87C8;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F10E87C8;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }

  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10E87C8;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    MEMORY[0x1BA9BFBA0](v2, 0x1000C40565EDBD2);
  }
  HGNode::~HGNode(this);

  HGObject::operator delete(v3);
}

uint64_t HgcYUV422TriPlanar_709ToRGB::SetParameter(HgcYUV422TriPlanar_709ToRGB *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *((void *)this + 51);
  double v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    uint64_t v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6) {
      return 0;
    }
  }
  *double v8 = a3;
  uint64_t v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcYUV422TriPlanar_709ToRGB::GetParameter(HgcYUV422TriPlanar_709ToRGB *this, unsigned int a2, float *a3)
{
  if (a2 > 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  float v5 = (float *)(*((void *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcYUV422TriPlanar_2020ToRGB::GetProgram(HgcYUV422TriPlanar_2020ToRGB *this, HGRenderer *a2)
{
  unsigned int Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 20) == 27) {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004f3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, -0.1645531207, 1.881399989, 0.000000000);\n"
             "    const half4 c1 = half4(1.474599957, -0.5713531375, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = (half2) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xy;\n"
             "    r0.yz = r0.xy;\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.xyz = r0.xyz*half3(hg_Params[0].xyz) + half3(hg_Params[1].xyz);\n"
             "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
             "    r0.x = (half) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    output.color0.xyz = float3(r0.zzz)*float3(c1.xyz) + float3(r1.xyz);\n"
             "    output.color0.w = float(r0.x);\n"
             "    return output;\n"
             "}\n"
             "//MD5=f79a664b:38284d73:72f9ca6b:398dd0ca\n"
             "//SIG=00400000:00000005:00000005:00000007:0002:0002:0002:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
    else {
      return "//Metal1.0     \n"
    }
             "//LEN=00000004b8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, -0.1645531207, 1.881399989, 0.000000000);\n"
             "    const float4 c1 = float4(1.474599957, -0.5713531375, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xy;\n"
             "    r0.yz = r0.xy;\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.xyz = r0.xyz*hg_Params[0].xyz + hg_Params[1].xyz;\n"
             "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
             "    r0.x = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).x;\n"
             "    output.color0.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
             "    output.color0.w = r0.x;\n"
             "    return output;\n"
             "}\n"
             "//MD5=7637b7ca:94e18948:9249a20f:2be63cfc\n"
             "//SIG=00000000:00000005:00000005:00000000:0002:0002:0002:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
  }
  else if (Target <= 0x6060F {
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(void *)a2 + 128))(a2, 46))
  }
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000473\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, -0.1645531207, 1.881399989, 0.000000000);\n"
           "    const defaultp vec4 c1 = vec4(1.474599957, -0.5713531375, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.xy = texture2D(hg_Texture1, hg_TexCoord1.xy).xy;\n"
           "    r0.yz = r0.xy;\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r0.xyz = r0.xyz*hg_ProgramLocal0.xyz + hg_ProgramLocal1.xyz;\n"
           "    r1.xyz = r0.yyy*c0.xyz + r0.xxx;\n"
           "    r0.x = texture2D(hg_Texture2, hg_TexCoord2.xy).x;\n"
           "    gl_FragColor.xyz = r0.zzz*c1.xyz + r1.xyz;\n"
           "    gl_FragColor.w = r0.x;\n"
           "}\n"
           "//MD5=a3e884d8:41b7c32f:d6ccb16b:fb255cb1\n"
           "//SIG=00000000:00000005:00000005:00000000:0002:0002:0002:0000:0000:0000:0000:0000:0003:03:0:1:0\n";
  }
}