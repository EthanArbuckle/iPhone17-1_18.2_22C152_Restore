void sub_1B75D89E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TXFontManager::addFontFace(uint64_t a1, uint64_t a2)
{
  v4 = (PCMutex *)(a1 + 64);
  uint64_t v16 = a1 + 64;
  PCMutex::lock((PCMutex *)(a1 + 64));
  char v17 = 1;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v14 = *(const void **)a2;
  v15 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  OZFontManagerBase::addFontFace(a1, (uint64_t *)&v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v13 = v6[8];
  v18 = &v13;
  v8 = std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)(a1 + 192), &v13, (uint64_t)&std::piecewise_construct, &v18);
  v10 = *(uint64_t **)a2;
  v9 = *(uint64_t **)(a2 + 8);
  if (v9) {
    atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
  }
  v11 = (std::__shared_weak_count *)v8[6];
  v8[5] = v10;
  v8[6] = v9;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return PCMutex::unlock(v4);
}

void sub_1B75D8B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TXFontManager::getCoreTextFont(TXFontManager *this, const PCString *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 56))(&v7);
  uint64_t v4 = v7;
  v3 = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  if (!v4)
  {
    uint64_t CoreTextFont = 0;
    if (!v3) {
      return CoreTextFont;
    }
    goto LABEL_6;
  }
  uint64_t CoreTextFont = TXFontManager::getCoreTextFont(this, *(_DWORD *)(v4 + 32));
  if (v3) {
LABEL_6:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return CoreTextFont;
}

void sub_1B75D8C10(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

PCString *TXFontManager::getDefaultFontKey@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "TXFontManager::kDefaultFont");
}

PCString *TXFontManager::getDefaultFontSizeKey@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "TXFontManager::kDefaultFontSize");
}

void std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

OZFontManagerBase *TXFontManager::initFonts(OZFontManagerBase *this)
{
  if (!*((unsigned char *)this + 136))
  {
    v1 = this;
    TXFontManager::registerCustomFonts(this);
    return (OZFontManagerBase *)OZFontManagerBase::initFonts(v1);
  }
  return this;
}

void TXFontManager::registerCustomFonts(TXFontManager *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ((TXFontManager::registerCustomFonts(void)::customFontsRegistered & 1) == 0)
  {
    OZChannelBase::setRangeName(&v15, (const PCString *)@"Motion Effect");
    v1 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "pathsForResourcesOfType:inDirectory:", 0, @"Fonts");
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v3 = [v1 countByEnumeratingWithState:&v11 objects:(char *)&v15.var0 + 1 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v12;
      do
      {
        uint64_t v5 = 0;
        do
        {
          if (*(void *)v12 != v4) {
            objc_enumerationMutation(v1);
          }
          CFURLRef v6 = CFURLCreateWithFileSystemPath(0, *(CFStringRef *)(*((void *)&v11 + 1) + 8 * v5), kCFURLPOSIXPathStyle, 0);
          CFURLRef v7 = v6;
          if (v6)
          {
            CFErrorRef error = 0;
            if (!CTFontManagerRegisterFontsForURL(v6, kCTFontManagerScopeProcess, &error))
            {
              CFStringRef v8 = CFErrorCopyDescription(error);
              PCURL::PCURL((PCURL *)&v9, v8);
              PCString::~PCString(&v9);
            }
            CFRelease(v7);
          }
          ++v5;
        }
        while (v3 != v5);
        uint64_t v3 = [v1 countByEnumeratingWithState:&v11 objects:(char *)&v15.var0 + 1 count:16];
      }
      while (v3);
    }
    TXFontManager::registerCustomFonts(void)::customFontsRegistered = 1;
    OZChannelBase::setRangeName(&v15, v2);
  }
}

void sub_1B75D8F50(_Unwind_Exception *a1, const PCString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, OZChannelBase *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

uint64_t TXFontManager::getFontFace@<X0>(const PCString *this@<X0>, PCString *a2@<X1>, void *a3@<X8>)
{
  CFURLRef v6 = (PCMutex *)&this[8];
  long long v12 = this + 8;
  PCMutex::lock((PCMutex *)&this[8]);
  char v13 = 1;
  OZFontManagerBase::getFontFace(this, a2, &v10);
  if (!v10)
  {
    CFStringRef v8 = PCString::cf_str(a2);
    OZGetNewFontID(v8);
    operator new();
  }
  uint64_t v7 = v11;
  *a3 = v10;
  a3[1] = v7;
  unsigned int v10 = 0;
  uint64_t v11 = 0;
  return PCMutex::unlock(v6);
}

void sub_1B75D90F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, PCString a11, PCString a12, uint64_t a13, std::__shared_weak_count *a14, char a15)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  char v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL TXFontManager::containsFontWithName(const PCString *this, PCString *a2)
{
  uint64_t v4 = (PCMutex *)&this[8];
  PCString v9 = this + 8;
  PCMutex::lock((PCMutex *)&this[8]);
  char v10 = 1;
  OZFontManagerBase::getFontFace(this, a2, &v7);
  uint64_t v5 = v7;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  PCMutex::unlock(v4);
  return v5 != 0;
}

void sub_1B75D9208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::shared_ptr<OZFontFace>::shared_ptr[abi:ne180100]<TXCoreTextTypeface,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B75D9284(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<OZFontFace>::shared_ptr[abi:ne180100]<TXCoreTextTypeface,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<TXCoreTextTypeface *,std::shared_ptr<OZFontFace>::__shared_ptr_default_delete<OZFontFace,TXCoreTextTypeface>,std::allocator<TXCoreTextTypeface>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t std::__shared_ptr_pointer<TXCoreTextTypeface *,std::shared_ptr<OZFontFace>::__shared_ptr_default_delete<OZFontFace,TXCoreTextTypeface>,std::allocator<TXCoreTextTypeface>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<TXCoreTextTypeface *,std::shared_ptr<OZFontFace>::__shared_ptr_default_delete<OZFontFace,TXCoreTextTypeface>,std::allocator<TXCoreTextTypeface>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

uint64_t **std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  CFURLRef v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        CFStringRef v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        CFURLRef v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        CFURLRef v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    CFStringRef v8 = a1 + 1;
LABEL_10:
    char v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t std::shared_ptr<OZFontFace>::shared_ptr[abi:ne180100]<TXCoreTextTypeface,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void TXTimeGlyphPropertiesMap::TXTimeGlyphPropertiesMap(TXTimeGlyphPropertiesMap *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = (char *)this + 32;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 12) = 0;
}

_OWORD *TXTimeGlyphPropertiesMap::preSelectGlyphMap(uint64_t **this, CMTime *a2)
{
  uint64_t v4 = a2;
  uint64_t result = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>(this, a2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v4);
  this[12] = (uint64_t *)result + 7;
  return result;
}

uint64_t TXTimeGlyphPropertiesMap::clearPreSelectedGlyphMap(uint64_t this)
{
  *(void *)(this + 96) = 0;
  return this;
}

__n128 TXTimeGlyphPropertiesMap::setPosition(uint64_t a1, _DWORD *a2, _DWORD *a3, __n128 *a4)
{
  unsigned int v7 = *(uint64_t ***)(a1 + 96);
  if (!v7)
  {
    char v10 = a2;
    unsigned int v7 = (uint64_t **)std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)a1, (CMTime *)a2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v10)+ 7;
  }
  char v10 = a3;
  CFStringRef v8 = std::__tree<std::__value_type<unsigned int,GlyphProperties>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,GlyphProperties>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,GlyphProperties>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v7, a3, (uint64_t)&std::piecewise_construct, &v10);
  __n128 result = *a4;
  v8[7] = (uint64_t *)a4[1].n128_u64[0];
  *(__n128 *)(v8 + 5) = result;
  return result;
}

_OWORD *TXTimeGlyphPropertiesMap::getPosition@<X0>(_OWORD *this@<X0>, CMTime *a2@<X1>, unsigned int *a3@<X2>, void *a4@<X8>)
{
  CFURLRef v6 = (char *)*((void *)this + 12);
  if (!v6)
  {
    v19 = a2;
    this = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)this, a2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v19);
    CFURLRef v6 = (char *)this + 56;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  CFStringRef v8 = v6 + 8;
  uint64_t v7 = *((void *)v6 + 1);
  if (!v7)
  {
    if (*((void *)v6 + 2))
    {
      do
      {
        uint64_t v15 = *((void *)v8 + 2);
        BOOL v16 = *(void *)v15 == (void)v8;
        CFStringRef v8 = (char *)v15;
      }
      while (v16);
      goto LABEL_19;
    }
LABEL_20:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return this;
  }
  unsigned int v9 = *a3;
  char v10 = v6 + 8;
  uint64_t v11 = *((void *)v6 + 1);
  do
  {
    unsigned int v12 = *(_DWORD *)(v11 + 32);
    BOOL v13 = v12 >= v9;
    if (v12 >= v9) {
      long long v14 = (uint64_t *)v11;
    }
    else {
      long long v14 = (uint64_t *)(v11 + 8);
    }
    if (v13) {
      char v10 = (char *)v11;
    }
    uint64_t v11 = *v14;
  }
  while (*v14);
  if (v10 != v8 && v9 >= *((_DWORD *)v10 + 8))
  {
    long long v17 = *(_OWORD *)(v10 + 40);
    uint64_t v18 = *((void *)v10 + 7);
    goto LABEL_22;
  }
  if (!*((void *)v6 + 2)) {
    goto LABEL_20;
  }
  do
  {
    uint64_t v15 = v7;
    uint64_t v7 = *(void *)(v7 + 8);
  }
  while (v7);
LABEL_19:
  long long v17 = *(_OWORD *)(v15 + 40);
  uint64_t v18 = *(void *)(v15 + 56);
LABEL_22:
  a4[2] = v18;
  *(_OWORD *)a4 = v17;
  return this;
}

__n128 TXTimeGlyphPropertiesMap::setPathRotation(uint64_t a1, _DWORD *a2, _DWORD *a3, __n128 *a4)
{
  uint64_t v7 = *(uint64_t ***)(a1 + 96);
  if (!v7)
  {
    char v10 = a2;
    uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)a1, (CMTime *)a2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v10)+ 7;
  }
  char v10 = a3;
  CFStringRef v8 = (__n128 *)std::__tree<std::__value_type<unsigned int,GlyphProperties>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,GlyphProperties>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,GlyphProperties>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v7, a3, (uint64_t)&std::piecewise_construct, &v10);
  __n128 result = *a4;
  v8[5].n128_u64[0] = a4[1].n128_u64[0];
  v8[4] = result;
  return result;
}

_OWORD *TXTimeGlyphPropertiesMap::getPathRotation@<X0>(_OWORD *this@<X0>, CMTime *a2@<X1>, unsigned int *a3@<X2>, void *a4@<X8>)
{
  CFURLRef v6 = (char *)*((void *)this + 12);
  if (!v6)
  {
    v19 = a2;
    this = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)this, a2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v19);
    CFURLRef v6 = (char *)this + 56;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  CFStringRef v8 = v6 + 8;
  uint64_t v7 = *((void *)v6 + 1);
  if (!v7)
  {
    if (*((void *)v6 + 2))
    {
      do
      {
        uint64_t v15 = *((void *)v8 + 2);
        BOOL v16 = *(void *)v15 == (void)v8;
        CFStringRef v8 = (char *)v15;
      }
      while (v16);
      goto LABEL_19;
    }
LABEL_20:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return this;
  }
  unsigned int v9 = *a3;
  char v10 = v6 + 8;
  uint64_t v11 = *((void *)v6 + 1);
  do
  {
    unsigned int v12 = *(_DWORD *)(v11 + 32);
    BOOL v13 = v12 >= v9;
    if (v12 >= v9) {
      long long v14 = (uint64_t *)v11;
    }
    else {
      long long v14 = (uint64_t *)(v11 + 8);
    }
    if (v13) {
      char v10 = (char *)v11;
    }
    uint64_t v11 = *v14;
  }
  while (*v14);
  if (v10 != v8 && v9 >= *((_DWORD *)v10 + 8))
  {
    long long v17 = *((_OWORD *)v10 + 4);
    uint64_t v18 = *((void *)v10 + 10);
    goto LABEL_22;
  }
  if (!*((void *)v6 + 2)) {
    goto LABEL_20;
  }
  do
  {
    uint64_t v15 = v7;
    uint64_t v7 = *(void *)(v7 + 8);
  }
  while (v7);
LABEL_19:
  long long v17 = *(_OWORD *)(v15 + 64);
  uint64_t v18 = *(void *)(v15 + 80);
LABEL_22:
  a4[2] = v18;
  *(_OWORD *)a4 = v17;
  return this;
}

uint64_t **TXTimeGlyphPropertiesMap::setTypeOn(TXTimeGlyphPropertiesMap *this, double a2, unsigned int a3, CMTime *a4)
{
  unsigned int v8 = a3;
  CFURLRef v6 = (uint64_t **)*((void *)this + 12);
  if (!v6)
  {
    unsigned int v9 = (unsigned int *)a4;
    CFURLRef v6 = (uint64_t **)std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)this, a4, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7;
  }
  unsigned int v9 = &v8;
  __n128 result = std::__tree<std::__value_type<unsigned int,GlyphProperties>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,GlyphProperties>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,GlyphProperties>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v6, &v8, (uint64_t)&std::piecewise_construct, &v9);
  *((double *)result + 11) = a2;
  return result;
}

double TXTimeGlyphPropertiesMap::getTypeOn(TXTimeGlyphPropertiesMap *this, unsigned int a2, CMTime *a3)
{
  uint64_t v4 = (char *)*((void *)this + 12);
  if (!v4)
  {
    BOOL v13 = a3;
    uint64_t v4 = (char *)std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)this, a3, (uint64_t)&std::piecewise_construct, (_OWORD **)&v13)+ 56;
  }
  uint64_t v7 = *((void *)v4 + 1);
  uint64_t v5 = v4 + 8;
  uint64_t v6 = v7;
  double result = 1.0;
  if (v7)
  {
    unsigned int v9 = v5;
    do
    {
      unsigned int v10 = *(_DWORD *)(v6 + 32);
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        unsigned int v12 = (uint64_t *)v6;
      }
      else {
        unsigned int v12 = (uint64_t *)(v6 + 8);
      }
      if (v11) {
        unsigned int v9 = (char *)v6;
      }
      uint64_t v6 = *v12;
    }
    while (*v12);
    if (v9 != v5 && *((_DWORD *)v9 + 8) <= a2) {
      return *((double *)v9 + 11);
    }
  }
  return result;
}

double TXTimeGlyphPropertiesMap::setHash(TXTimeGlyphPropertiesMap *this, CMTime *a2, const PCHash128 *a3)
{
  if (*((void *)this + 11) >= 0x19uLL)
  {
    uint64_t v6 = 8;
    do
    {
      uint64_t v7 = *((void *)this + 11) - 1;
      unint64_t v8 = *(void *)(*((void *)this + 7) + 8 * ((v7 + *((void *)this + 10)) / 0xAAuLL))
         + 24 * ((v7 + *((void *)this + 10)) % 0xAAuLL);
      CMTimeEpoch v9 = *(void *)(v8 + 16);
      *(_OWORD *)&v11.value = *(_OWORD *)v8;
      v11.epoch = v9;
      *((void *)this + 11) = v7;
      std::deque<CMTime>::__maybe_remove_back_spare[abi:ne180100]((void *)this + 6, 1);
      TXTimeGlyphPropertiesMap::evict((uint64_t **)this, &v11);
      --v6;
    }
    while (v6);
  }
  v11.value = (CMTimeValue)a2;
  *(_OWORD *)((char *)std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t **)this + 3, a2, (uint64_t)&std::piecewise_construct, &v11)+ 52) = *(_OWORD *)a3;
  return TXTimeGlyphPropertiesMap::promoteTime((int64x2_t *)this, a2);
}

void TXTimeGlyphPropertiesMap::evict(uint64_t **this, CMTime *a2)
{
  uint64_t v4 = (TXTimeGlyphPropertiesMap *)std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::find<CMTime>((uint64_t)this, a2);
  if (this + 1 != (uint64_t **)v4) {
    std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::erase(this, (uint64_t)v4);
  }
  uint64_t v5 = (uint64_t *)std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::find<CMTime>((uint64_t)(this + 3), a2);
  if (this + 4 != (uint64_t **)v5)
  {
    uint64_t v6 = v5;
    std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(this + 3, v5);
    operator delete(v6);
  }
}

double TXTimeGlyphPropertiesMap::promoteTime(int64x2_t *this, const CMTime *a2)
{
  unint64_t v4 = this[5].u64[0];
  uint64_t v5 = this[3].i64[1];
  uint64_t v6 = this[4].i64[0];
  uint64_t v7 = (long long **)(v5 + 8 * (v4 / 0xAA));
  if (v6 == v5)
  {
    unint64_t v8 = 0;
    CMTime v11 = 0;
    unsigned int v10 = (long long **)(v5 + 8 * ((this[5].i64[1] + v4) / 0xAA));
  }
  else
  {
    unint64_t v8 = (long long *)(*(void *)(v5 + 8 * (v4 / 0xAA)) + 24 * (v4 % 0xAA));
    unint64_t v9 = this[5].i64[1] + v4;
    unsigned int v10 = (long long **)(v5 + 8 * (v9 / 0xAA));
    CMTime v11 = (long long *)((char *)*v10 + 24 * (v9 % 0xAA));
  }
  BOOL v13 = std::__find_segment_if[abi:ne180100]<std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,std::__find_segment<CMTime>,std::__identity>(v7, v8, v10, v11, (long long *)&a2->value);
  uint64_t v14 = this[3].i64[1];
  if (this[4].i64[0] == v14)
  {
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v15 = this[5].i64[1] + this[5].i64[0];
    unint64_t v16 = *(void *)(v14 + 8 * (v15 / 0xAA)) + 24 * (v15 % 0xAA);
  }
  if ((char *)v16 != v12) {
    std::deque<CMTime>::erase(this + 3, v13, v12);
  }
  *(void *)&double result = std::deque<CMTime>::push_front((uint64_t)this[3].i64, (long long *)&a2->value).u64[0];
  return result;
}

unint64_t std::deque<CMTime>::erase(int64x2_t *a1, void *a2, char *a3)
{
  unint64_t v4 = a1[2].u64[0];
  uint64_t v5 = a1->i64[1];
  uint64_t v6 = (char **)(v5 + 8 * (v4 / 0xAA));
  if (a1[1].i64[0] == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = &(*v6)[24 * (v4 % 0xAA)];
  }
  if (a3 == v7) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = 170 * ((char **)a2 - v6)
  }
       - 0x5555555555555555 * ((uint64_t)&a3[-*a2] >> 3)
       + 0x5555555555555555 * ((v7 - *v6) >> 3);
  v27[0].n128_u64[0] = v5 + 8 * (v4 / 0xAA);
  v27[0].n128_u64[1] = (unint64_t)v7;
  std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>::operator+=[abi:ne180100](v27, v8);
  uint64_t v9 = a1[2].i64[1];
  int64_t v10 = v27[0].n128_u64[1] - *(void *)v27[0].n128_u64[0];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
  if (v8 <= (unint64_t)(v9 - 1) >> 1)
  {
    if (v10 < -23)
    {
      unint64_t v15 = (void *)(v27[0].n128_u64[0] - 8 * ((168 - v11) / 0xAA));
      unint64_t v16 = (char *)(*v15 + 24 * (170 * ((168 - v11) / 0xAA) - (168 - v11)) + 4056);
    }
    else
    {
      unint64_t v15 = (void *)(v27[0].n128_u64[0] + 8 * ((v11 + 1) / 0xAA));
      unint64_t v16 = (char *)(*v15 + 24 * ((v11 + 1) % 0xAA));
    }
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,0>(v6, v7, (char **)v27[0].n128_u64[0], (char *)v27[0].n128_u64[1], v15, v16, v27);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1B7E73580);
    std::deque<CMTime>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
  }
  else
  {
    if (v10 < -23)
    {
      unint64_t v17 = 168 - v11;
      BOOL v13 = (void *)(v27[0].n128_u64[0] - 8 * (v17 / 0xAA));
      uint64_t v14 = (unsigned char *)(*v13 + 24 * (170 * (v17 / 0xAA) - v17) + 4056);
    }
    else
    {
      unint64_t v12 = v11 + 1;
      BOOL v13 = (void *)(v27[0].n128_u64[0] + 8 * (v12 / 0xAA));
      uint64_t v14 = (unsigned char *)(*v13 + 24 * (v12 % 0xAA));
    }
    unint64_t v18 = a1[2].i64[0] + v9;
    uint64_t v19 = a1->i64[1];
    v20 = (unsigned char **)(v19 + 8 * (v18 / 0xAA));
    if (a1[1].i64[0] == v19) {
      v21 = 0;
    }
    else {
      v21 = &(*v20)[24 * (v18 % 0xAA)];
    }
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>>>(v13, v14, v20, v21, (uint64_t)v27);
    --a1[2].i64[1];
    std::deque<CMTime>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
  }
  unint64_t v22 = a1[2].u64[0];
  uint64_t v23 = a1->i64[1];
  v24 = (void *)(v23 + 8 * (v22 / 0xAA));
  if (a1[1].i64[0] == v23) {
    unint64_t v25 = 0;
  }
  else {
    unint64_t v25 = *v24 + 24 * (v22 % 0xAA);
  }
  v27[0].n128_u64[0] = (unint64_t)v24;
  v27[0].n128_u64[1] = v25;
  std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>::operator+=[abi:ne180100](v27, v8);
  return v27[0].n128_u64[0];
}

int64x2_t std::deque<CMTime>::push_front(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    std::deque<CMTime>::__add_front_capacity((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0xAA));
  uint64_t v7 = *v6 + 24 * (v4 % 0xAA);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4080;
  }
  long long v8 = *a2;
  *(void *)(v7 - 8) = *((void *)a2 + 2);
  *(_OWORD *)(v7 - 24) = v8;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1B7E73590);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

__n128 TXTimeGlyphPropertiesMap::getHash@<Q0>(TXTimeGlyphPropertiesMap *this@<X0>, CMTime *a2@<X1>, PCWorkingColorVector *a3@<X8>)
{
  PCWorkingColorVector::PCWorkingColorVector(a3);
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v6 = std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::find<CMTime>((uint64_t)this + 24, a2);
  if ((TXTimeGlyphPropertiesMap *)((char *)this + 32) != (TXTimeGlyphPropertiesMap *)v6)
  {
    __n128 result = *(__n128 *)(v6 + 52);
    *(__n128 *)a3 = result;
  }
  return result;
}

void TXTimeGlyphPropertiesMap::flush(TXTimeGlyphPropertiesMap *this)
{
  unint64_t v1 = *((void *)this + 11);
  if (v1 >= 2)
  {
    uint64_t v3 = (void *)((char *)this + 48);
    do
    {
      unint64_t v4 = v1 - 1;
      unint64_t v5 = *(void *)(*((void *)this + 7) + 8 * ((*((void *)this + 10) + v4) / 0xAA))
         + 24 * ((*((void *)this + 10) + v4) % 0xAA);
      CMTimeEpoch v6 = *(void *)(v5 + 16);
      *(_OWORD *)&v7.value = *(_OWORD *)v5;
      v7.epoch = v6;
      *((void *)this + 11) = v4;
      std::deque<CMTime>::__maybe_remove_back_spare[abi:ne180100](v3, 1);
      TXTimeGlyphPropertiesMap::evict((uint64_t **)this, &v7);
      unint64_t v1 = *((void *)this + 11);
    }
    while (v1 > 1);
  }
}

_OWORD *std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>(uint64_t **a1, CMTime *a2, uint64_t a3, _OWORD **a4)
{
  CMTimeEpoch v6 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__find_equal<CMTime>((uint64_t)a1, &v11, a2);
  CMTime v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    CMTime v7 = operator new(0x50uLL);
    uint64_t v9 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 6) = v9;
    *((void *)v7 + 7) = v7 + 4;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__find_equal<CMTime>(uint64_t a1, void *a2, CMTime *a3)
{
  unint64_t v5 = (uint64_t *)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        CMTime v7 = v4;
        CMTime time1 = *a3;
        CMTime v9 = *(CMTime *)(v4 + 4);
        if ((CMTimeCompare(&time1, &v9) & 0x80000000) == 0) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      CMTime time1 = *(CMTime *)(v7 + 4);
      CMTime v9 = *a3;
      if ((CMTimeCompare(&time1, &v9) & 0x80000000) == 0) {
        break;
      }
      unint64_t v5 = v7 + 1;
      unint64_t v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    CMTime v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t **std::__tree<std::__value_type<unsigned int,GlyphProperties>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,GlyphProperties>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,GlyphProperties>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  CMTime v7 = a1 + 1;
  CMTimeEpoch v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        CMTime v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        CMTimeEpoch v6 = *v9;
        CMTime v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      CMTimeEpoch v6 = v9[1];
      if (!v6)
      {
        CMTime v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    CMTime v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (char *)operator new(0x60uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *((void *)v11 + 11) = 0x3FF0000000000000;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::deque<CMTime>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 170 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA) {
    a2 = 1;
  }
  if (v5 < 0x154) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t *std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::__emplace_unique_key_args<CMTime,std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>(uint64_t **a1, CMTime *a2, uint64_t a3, _OWORD **a4)
{
  CMTimeEpoch v6 = (uint64_t **)std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::__find_equal<CMTime>((uint64_t)a1, &v9, a2);
  __n128 result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::__find_equal<CMTime>(uint64_t a1, void *a2, CMTime *a3)
{
  unint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        int v7 = v4;
        CMTime time1 = *a3;
        CMTime v9 = *(CMTime *)((char *)v4 + 28);
        if ((CMTimeCompare(&time1, &v9) & 0x80000000) == 0) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      CMTime time1 = *(CMTime *)((char *)v7 + 28);
      CMTime v9 = *a3;
      if ((CMTimeCompare(&time1, &v9) & 0x80000000) == 0) {
        break;
      }
      unint64_t v5 = v7 + 1;
      uint64_t v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    int v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<CMTime const&>,std::tuple<>>(uint64_t a1@<X0>, _OWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  CMTimeEpoch v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = *((void *)*a2 + 2);
  *(_OWORD *)(v6 + 28) = **a2;
  *(void *)(v6 + 44) = v7;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(v6 + 52));
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B75DA4E0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

long long **std::__find_segment_if[abi:ne180100]<std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,std::__find_segment<CMTime>,std::__identity>(long long **a1, long long *a2, long long **a3, long long *a4, long long *a5)
{
  uint64_t v7 = a2;
  unsigned int v8 = a1;
  if (a1 == a3)
  {
    if (a2 != a4)
    {
      while (1)
      {
        long long v13 = *v7;
        time1.epoch = *((void *)v7 + 2);
        *(_OWORD *)&time1.value = v13;
        long long v14 = *a5;
        v26.epoch = *((void *)a5 + 2);
        *(_OWORD *)&v26.value = v14;
        if (!CMTimeCompare(&time1, &v26)) {
          break;
        }
        uint64_t v7 = (long long *)((char *)v7 + 24);
        if (v7 == a4)
        {
          uint64_t v7 = a4;
          break;
        }
      }
    }
    if (!v8) {
      return 0;
    }
    CMTime v9 = v8;
    if (*v8 + 255 == v7) {
      return v8 + 1;
    }
  }
  else
  {
    CMTime v9 = a3;
    uint64_t v10 = (uint64_t)(*a1 + 255);
    if ((long long *)v10 == a2) {
      goto LABEL_21;
    }
    while (1)
    {
      long long v11 = *v7;
      time1.epoch = *((void *)v7 + 2);
      *(_OWORD *)&time1.value = v11;
      long long v12 = *a5;
      v26.epoch = *((void *)a5 + 2);
      *(_OWORD *)&v26.value = v12;
      if (!CMTimeCompare(&time1, &v26)) {
        break;
      }
      uint64_t v7 = (long long *)((char *)v7 + 24);
      if (v7 == (long long *)v10) {
        goto LABEL_21;
      }
    }
    if (v7 == (long long *)v10)
    {
LABEL_21:
      v20 = (uint64_t *)(v8 + 1);
      if (v8 + 1 == v9)
      {
        v21 = *v9;
        if (*v9 == a4)
        {
          v24 = *v9;
        }
        else
        {
          while (1)
          {
            long long v22 = *v21;
            time1.epoch = *((void *)v21 + 2);
            *(_OWORD *)&time1.value = v22;
            long long v23 = *a5;
            v26.epoch = *((void *)a5 + 2);
            *(_OWORD *)&v26.value = v23;
            if (!CMTimeCompare(&time1, &v26)) {
              break;
            }
            v21 = (long long *)((char *)v21 + 24);
            if (v21 == a4)
            {
              v21 = a4;
              break;
            }
          }
          v24 = v21;
          v21 = *v9;
        }
        if (v21 + 255 == v24) {
          return v8 + 2;
        }
      }
      else
      {
        uint64_t v15 = 0;
        unint64_t v16 = v8++;
        uint64_t v17 = *v20;
        while (1)
        {
          long long v18 = *(_OWORD *)(v17 + v15);
          time1.epoch = *(void *)(v17 + v15 + 16);
          *(_OWORD *)&time1.value = v18;
          long long v19 = *a5;
          v26.epoch = *((void *)a5 + 2);
          *(_OWORD *)&v26.value = v19;
          if (!CMTimeCompare(&time1, &v26)) {
            break;
          }
          v15 += 24;
          if (v15 == 4080) {
            goto LABEL_21;
          }
        }
        CMTime v9 = v8;
        if ((long long *)(v17 + v15) == *v8 + 255) {
          return v16 + 2;
        }
      }
    }
    else
    {
      CMTime v9 = v8;
      if (v7 == *v8 + 255) {
        return v8 + 1;
      }
    }
  }
  return v9;
}

uint64_t std::deque<CMTime>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0xAA) {
    a2 = 1;
  }
  if (v2 < 0x154) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 170;
  }
  return v4 ^ 1u;
}

void *std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>::operator+=[abi:ne180100](void *result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 169 - v3;
      CMTimeEpoch v6 = &v2[-(v5 / 0xAA)];
      *__n128 result = v6;
      unint64_t v4 = *v6 + 24 * (170 * (v5 / 0xAA) - v5) + 4056;
    }
    else
    {
      *__n128 result = &v2[v3 / 0xAA];
      unint64_t v4 = v2[v3 / 0xAA] + 24 * (v3 % 0xAA);
    }
    result[1] = v4;
  }
  return result;
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,0>@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    long long v19 = a2;
    long long v18 = a4;
    uint64_t v15 = a5;
    unint64_t v16 = a6;
  }
  else
  {
    long long v13 = a3 - 1;
    long long v12 = *a3;
    long long v14 = a4;
    uint64_t v15 = a5;
    unint64_t v16 = a6;
    while (1)
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CMTime *,std::__deque_iterator<CMTime,CMTime *,CMTime&,CMTime **,long,170l>,0>(v12, v14, v15, v16, &v21);
      unint64_t v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      long long v12 = v17;
      long long v14 = v17 + 4080;
    }
    long long v18 = *a1 + 4080;
    long long v19 = a2;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CMTime *,std::__deque_iterator<CMTime,CMTime *,CMTime&,CMTime **,long,170l>,0>(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CMTime *,std::__deque_iterator<CMTime,CMTime *,CMTime&,CMTime **,long,170l>,0>@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  CMTimeEpoch v6 = a3;
  if (a1 == a2)
  {
    CMTime v9 = a1;
  }
  else
  {
    CMTime v9 = a2;
    uint64_t v10 = *a3;
    long long v11 = a2;
    while (1)
    {
      int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 3)) < v12) {
        int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 3);
      }
      v11 -= 24 * v12;
      a4 -= 24 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 24 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4080);
    }
    if ((char *)(*v6 + 4080) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>,std::__deque_iterator<CMTime,CMTime*,CMTime&,CMTime**,long,170l>>>(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v7 = *(void ***)a5;
  unsigned int v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (i = (unsigned char *)(*a1 + 4080); ; i = v12 + 4080)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CMTime *,std::__deque_iterator<CMTime,CMTime *,CMTime&,CMTime **,long,170l>,0>(a2, v8, i, v7, &v14);
      unsigned int v8 = (char *)*((void *)&v15 + 1);
      uint64_t v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CMTime *,std::__deque_iterator<CMTime,CMTime *,CMTime&,CMTime **,long,170l>,0>(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CMTime *,std::__deque_iterator<CMTime,CMTime *,CMTime&,CMTime **,long,170l>,0>@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  CMTimeEpoch v6 = a4;
  uint64_t v7 = __src;
  if (__src == a3)
  {
    CMTime v9 = __src;
  }
  else
  {
    CMTime v9 = a3;
    CMTimeEpoch v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - __dst + 4080) >> 3);
      unint64_t v12 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 24 * v12);
      }
      v7 += 24 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __dst = v14;
    }
    __dst += 24 * v12;
    if ((char *)*(v6 - 1) + 4080 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void std::deque<CMTime>::__add_front_capacity(void **a1)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 170 * v4 - 1;
  }
  CMTimeEpoch v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0xAA)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    unsigned int v8 = a1[3];
    CMTime v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFF0uLL);
      std::__split_buffer<unsigned long *>::push_back(&__p, &v41);
      long long v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v46, v23);
              CMTime v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              __n128 v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 85;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFF0uLL);
        std::__split_buffer<unsigned long *>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFF0uLL);
      }
      std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 85;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 170;
    __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1B75DAE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::find<CMTime>(uint64_t a1, CMTime *a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::__lower_bound<CMTime>(a1, a2, *(void *)(a1 + 8), a1 + 8);
  if (v3 == v4) {
    return v3;
  }
  uint64_t v5 = v4;
  CMTime time1 = *a2;
  CMTime v7 = *(CMTime *)(v4 + 28);
  if (CMTimeCompare(&time1, &v7) < 0) {
    return v3;
  }
  return v5;
}

uint64_t std::__tree<std::__value_type<CMTime,PCHash128>,std::__map_value_compare<CMTime,std::__value_type<CMTime,PCHash128>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,PCHash128>>>::__lower_bound<CMTime>(uint64_t a1, CMTime *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      CMTime time1 = *(CMTime *)(v5 + 28);
      CMTime v10 = *a2;
      int32_t v7 = CMTimeCompare(&time1, &v10);
      unsigned int v8 = (uint64_t *)(v5 + 8);
      if (v7 >= 0)
      {
        unsigned int v8 = (uint64_t *)v5;
        a4 = v5;
      }
      uint64_t v5 = *v8;
    }
    while (*v8);
  }
  return a4;
}

uint64_t std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::find<CMTime>(uint64_t a1, CMTime *a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__lower_bound<CMTime>(a1, a2, *(void *)(a1 + 8), a1 + 8);
  if (v3 == v4) {
    return v3;
  }
  uint64_t v5 = v4;
  CMTime time1 = *a2;
  CMTime v7 = *(CMTime *)(v4 + 32);
  if (CMTimeCompare(&time1, &v7) < 0) {
    return v3;
  }
  return v5;
}

uint64_t std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__lower_bound<CMTime>(uint64_t a1, CMTime *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      CMTime time1 = *(CMTime *)(v5 + 32);
      CMTime v10 = *a2;
      int32_t v7 = CMTimeCompare(&time1, &v10);
      unsigned int v8 = (uint64_t *)(v5 + 8);
      if (v7 >= 0)
      {
        unsigned int v8 = (uint64_t *)v5;
        a4 = v5;
      }
      uint64_t v5 = *v8;
    }
    while (*v8);
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a2 + 56, *(void **)(a2 + 64));
  operator delete((void *)a2);
  return v3;
}

void TXGlyph::~TXGlyph(TXGlyph *this)
{
}

void TXGlyph::TXGlyph(TXGlyph *this, __int16 a2, __int16 a3, TXFont *a4)
{
  *(void *)this = &unk_1F10AB220;
  *((_WORD *)this + 4) = a2;
  *((_WORD *)this + 5) = a3;
  *((void *)this + 2) = a4;
}

void TXGrowShrinkCurveNode1D::TXGrowShrinkCurveNode1D(OZBehaviorCurveNode *a1, OZBehavior *a2, OZChannel *a3)
{
  OZBehaviorCurveNode::OZBehaviorCurveNode(a1, a2, a3);
  void *v4 = &unk_1F10AB250;
  v4[4] = a2;
}

void TXGrowShrinkCurveNode1D::~TXGrowShrinkCurveNode1D(TXGrowShrinkCurveNode1D *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

double TXGrowShrinkCurveNode1D::solveNode(TXGrowShrinkCurveNode1D *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v4 = *((void *)this + 4);
  CMTime v6 = *a2;
  return (*(double (**)(uint64_t, CMTime *))(*(void *)v4 + 680))(v4, &v6) + a4;
}

void TXGrowShrinkCurveNode1D::solveNode(TXGrowShrinkCurveNode1D *this, OZCurveNodeParam *a2, uint64_t a3)
{
  uint64_t v3 = *((void *)a2 + 19);
  uint64_t v4 = *((void *)a2 + 10);
  CMTime v12 = *(CMTime *)((unsigned char *)a2 + 5);
  CMTime v11 = *(CMTime *)((unsigned char *)a2 + 4);
  if (*((_DWORD *)a2 + 36))
  {
    unint64_t v7 = 0;
    do
    {
      double v8 = *(double *)(v4 + 8 * v7);
      uint64_t v9 = *((void *)this + 4);
      CMTime v10 = v11;
      *(double *)(v3 + 8 * v7) = v8
                               * (*(double (**)(uint64_t, CMTime *, uint64_t))(*(void *)v9 + 680))(v9, &v10, a3);
      CMTime v14 = v11;
      CMTime v13 = v12;
      PC_CMTimeSaferAdd(&v14, &v13, (uint64_t)&v11);
      ++v7;
    }
    while (v7 < *((unsigned int *)a2 + 36));
  }
}

void TXGrowShrinkCurveNode1D::cloneNode(TXGrowShrinkCurveNode1D *this)
{
}

void sub_1B75DB378(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t TXGrowShrinkCurveNode1D::compare(int a1, void *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

__n128 TXGrowShrinkCurveNode1D::getNeededRange(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a2 + 96);
  *(void *)(a2 + 40) = *(void *)(a2 + 112);
  __n128 result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 64) = *(void *)(a2 + 136);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a2 + 88) = 0;
  *(void *)(a2 + 80) = *(void *)(a2 + 152);
  return result;
}

__n128 OZCurveNode::getCurrentRange@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4F1FA48];
  __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
  *(_OWORD *)a1 = *MEMORY[0x1E4F1FA48];
  *(void *)(a1 + 16) = *(void *)(v2 + 16);
  return result;
}

__n128 OZCurveNode::getNeededTime@<Q0>(const CMTime *a1@<X1>, CMTime *a2@<X8>)
{
  __n128 result = *(__n128 *)&a1->value;
  *a2 = *a1;
  return result;
}

char *AddMaterialToSequenceChannels(TXSequenceChannels *a1, OZMaterialBase *a2, unsigned int a3)
{
  OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 720), MEMORY[0x1E4F1FA48], 0.0);

  return TXSequenceChannels::addMaterialChannels(a1, a2, a3);
}

char *AddAllMaterialsToSequenceChannels(char *result, TXSequenceChannels *a2)
{
  uint64_t v2 = *(uint64_t **)(*(void *)result + 480);
  uint64_t v3 = *(uint64_t **)(*(void *)result + 488);
  if (v2 != v3)
  {
    uint64_t v5 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      uint64_t v6 = *v2++;
      unsigned int v7 = ((*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3) - 6;
      OZChannel::getValueAsInt((OZChannel *)(v6 + 720), v5, 0.0);
      __n128 result = TXSequenceChannels::addMaterialChannels(a2, (OZMaterialBase *)v6, v7);
    }
    while (v2 != v3);
  }
  return result;
}

TXSequenceChannels *RemoveAllMaterialsFromSequenceChannels(TXSequenceChannels *this)
{
  uint64_t v1 = (*((void *)this + 2) - *((void *)this + 1)) >> 3;
  int v2 = v1 - 6;
  if (v1 != 6)
  {
    uint64_t v3 = this;
    do
    {
      this = (TXSequenceChannels *)TXSequenceChannels::removeMaterialChannelsAtIndex(v3, 0);
      --v2;
    }
    while (v2);
  }
  return this;
}

uint64_t TXTextLayout::pixelTransformSupport(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 144)) {
    return 0;
  }
  else {
    return 6;
  }
}

void TXTextLayout::updateStringTokenizer(TXTextLayout *this)
{
  int v2 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v10, v2);
  uint64_t v3 = (CFStringTokenizerRef *)((char *)this + 63872);
  uint64_t v4 = (const void *)*((void *)this + 7984);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (TXTextLayout *)((char *)this + 19048);
  StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
  unsigned int v7 = PCString::cf_str((PCString *)StringPtr);
  double v8 = TXChannelString::getStringPtr(v5);
  uint64_t v9 = PCString::cf_str((PCString *)v8);
  v11.length = CFStringGetLength(v9);
  v11.location = 0;
  CFStringTokenizerRef *v3 = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v7, v11, 4uLL, 0);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v10);
}

void sub_1B75DB664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

CFIndex TXTextLayout::getWordRange(__CFStringTokenizer **this, unsigned int a2, char a3)
{
  uint64_t v6 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v12, v6);
  unsigned int v7 = this[7984];
  if (!v7)
  {
    TXTextLayout::updateStringTokenizer((TXTextLayout *)this);
    unsigned int v7 = this[7984];
  }
  CFStringTokenizerTokenType v8 = CFStringTokenizerGoToTokenAtIndex(v7, a2);
  CFIndex location = CFStringTokenizerGetCurrentTokenRange(v7).location;
  if (location == a2) {
    char v10 = a3;
  }
  else {
    char v10 = 1;
  }
  if (!v8 || (v10 & 1) == 0)
  {
    if (CFStringTokenizerGoToTokenAtIndex(v7, a2 - 1)) {
      CFIndex location = CFStringTokenizerGetCurrentTokenRange(v7).location;
    }
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v12);
  return location;
}

void sub_1B75DB750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::TXTextLayout(TXTextLayout *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5 = (char *)this + 18984;
  OZTextLayout::OZTextLayout(this, a2, a3, a4);
  *(void *)uint64_t v6 = &unk_1F10AB348;
  *(void *)(v6 + 200) = &unk_1F10AB810;
  *(void *)(v6 + 216) = &unk_1F10AC0E8;
  *(void *)(v6 + 248) = &unk_1F10AC340;
  *(void *)(v6 + 6728) = &unk_1F10AC398;
  *(void *)(v6 + 18976) = &unk_1F10AC470;
  *(_DWORD *)uint64_t v5 = -1;
  v5[4] = 1;
  *(_OWORD *)(v6 + 19000) = 0u;
  *(_OWORD *)(v6 + 19016) = 0u;
  *(_OWORD *)(v6 + 19032) = 0u;
  PCURL::PCURL((PCURL *)&v117, @"Text Layout String");
  TXChannelString::TXChannelString((TXTextLayout *)((char *)this + 19048), &v117, (OZChannelFolder *)((char *)this + 648), 0x171u, 0);
  PCString::~PCString(&v117);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 2402);
  *((void *)this + 2405) = 0;
  *((void *)this + 2404) = 0;
  *((void *)this + 2403) = (char *)this + 19232;
  *((void *)this + 2406) = &unk_1F10AC4C8;
  *((void *)this + 2407) = 0;
  TXDiscontinuousSelection::TXDiscontinuousSelection((TXTextLayout *)((char *)this + 19272));
  *((_WORD *)v5 + 168) = 0;
  *((_DWORD *)v5 + 85) = 1;
  v5[348] = 0;
  *((_DWORD *)v5 + 88) = 0;
  *((void *)this + 2418) = (char *)this + 19344;
  *((void *)this + 2419) = (char *)this + 19344;
  *((void *)this + 2420) = 0;
  *((void *)this + 2421) = (char *)this + 19368;
  *((void *)this + 2422) = (char *)this + 19368;
  v5[408] = 1;
  *((void *)this + 2423) = 0;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 19396));
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 19412));
  PCURL::PCURL((PCURL *)&v117, @"Text Face Opacity");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 19448), 1.0, &v117, (OZChannelFolder *)((char *)this + 648), 0x16Eu, 0, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v7, @"Text Layout Tracking");
  Instance = (OZChannelInfo *)TXTextLayout::TXTextLayout_oldTrackingInfo::getInstance(v8);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 19600), &v117, (OZChannelFolder *)((char *)this + 648), 0x152u, 2, 0, Instance);
  PCString::~PCString(&v117);
  PCURL::PCURL(v10, @"Text Layout Tracking");
  CMTime v12 = (TXTextLayout::TXTextLayout_trackingInfo *)TXTextLayout::TXTextLayout_trackingImpl::getInstance(v11);
  CMTime v13 = (OZChannelInfo *)TXTextLayout::TXTextLayout_trackingInfo::getInstance(v12);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 19752), 0.0, &v117, (OZChannelFolder *)((char *)this + 648), 0x170u, 2u, (OZChannelImpl *)v12, v13);
  PCString::~PCString(&v117);
  PCURL::PCURL(v14, @"Text Layout Flatten");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19904), 0, &v117, (OZChannelFolder *)((char *)this + 648), 0x15Fu, 0, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v15, @"Text Layout Render Space Enum");
  PCURL::PCURL((PCURL *)&v118, @"Text Layout Render Space");
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 20056), &v117, &v118, (OZChannelFolder *)((char *)this + 648), 0x168u, 0, 0, 0);
  PCString::~PCString(&v118);
  PCString::~PCString(&v117);
  PCURL::PCURL(v16, @"Text Layout Face Camera");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 20312), 0, &v117, (OZChannelFolder *)((char *)this + 648), 0x160u, 0, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v17, @"Text Layout Method Enum");
  PCURL::PCURL((PCURL *)&v118, @"Text Layout Method");
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 20464), 0, &v117, &v118, (OZChannelFolder *)((char *)this + 648), 0x13Au, 0, 0, 0);
  PCString::~PCString(&v118);
  PCString::~PCString(&v117);
  PCURL::PCURL(v18, @"Text Layout Direction Enum");
  PCURL::PCURL((PCURL *)&v118, @"Text Layout Direction");
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 20720), 0, &v117, &v118, (OZChannelFolder *)((char *)this + 648), 0x13Cu, 0, 0, 0);
  PCString::~PCString(&v118);
  PCString::~PCString(&v117);
  PCURL::PCURL(v19, @"Text Layout Alignment");
  TXChannelAlignment::TXChannelAlignment((TXTextLayout *)((char *)this + 20976), &v117, (OZChannelFolder *)((char *)this + 648), 0x175u, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v20, @"Text Layout Alignment Enum");
  PCURL::PCURL((PCURL *)&v118, @"Text Layout Alignment");
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 21624), 0, &v117, &v118, (OZChannelFolder *)((char *)this + 648), 0x13Du, 0, 0, 0);
  PCString::~PCString(&v118);
  PCString::~PCString(&v117);
  PCURL::PCURL(v21, @"Text Layout Justification Enum");
  PCURL::PCURL((PCURL *)&v118, @"Text Layout Justification");
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 21880), &v117, &v118, (OZChannelFolder *)((char *)this + 648), 0x13Eu, 0, 0, 0);
  PCString::~PCString(&v118);
  PCString::~PCString(&v117);
  PCURL::PCURL(v22, @"Text Layout Line Spacing");
  v24 = (OZChannelInfo *)TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::getInstance(v23);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 22136), &v117, (OZChannelFolder *)((char *)this + 648), 0x138u, 8, 0, v24);
  PCString::~PCString(&v117);
  PCURL::PCURL(v25, @"Text Layout Anchor Point Enum");
  PCURL::PCURL((PCURL *)&v118, @"Text Layout Anchor Point");
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 22288), &v117, &v118, (OZChannelFolder *)((char *)this + 648), 0x165u, 0, 0, 0);
  PCString::~PCString(&v118);
  PCString::~PCString(&v117);
  PCURL::PCURL(v26, @"Text Layout Anchor Position Enum");
  PCURL::PCURL((PCURL *)&v118, @"Text Layout Anchor Position");
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 22544), &v117, &v118, (OZChannelFolder *)((char *)this + 648), 0x177u, 0, 0, 0);
  PCString::~PCString(&v118);
  PCString::~PCString(&v117);
  PCURL::PCURL(v27, @"Text Layout Anchor Point Position");
  OZChannelPosition3D::OZChannelPosition3D((TXTextLayout *)((char *)this + 22800), &v117, (OZChannelFolder *)((char *)this + 648), 0x166u, 0, 3u);
  PCString::~PCString(&v117);
  PCURL::PCURL(v28, @"Text Layout Type On");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 23688), &v117, (OZChannelFolder *)((char *)this + 648), 0x13Fu, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v29, @"Text Layout Type On Start");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 23816), 0.0, &v117, (OZChannelFolder *)((char *)this + 23688), 0x140u, 0, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v30, @"Text Layout Type On End");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 23968), 1.0, &v117, (OZChannelFolder *)((char *)this + 23688), 0x141u, 0, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v31, @"Text Layout Type On Fade In");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 24120), 1, &v117, (OZChannelFolder *)((char *)this + 23688), 0x142u, 0, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v32, @"Text Layout Left Margin");
  v34 = (OZChannelImpl *)TXTextLayout::TXTextLayout_leftMarginImpl::getInstance(v33);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 24272), &v117, (OZChannelFolder *)((char *)this + 648), 0x143u, 0, v34, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v35, @"Text Layout Right Margin");
  v37 = (OZChannelImpl *)TXTextLayout::TXTextLayout_rightMarginImpl::getInstance(v36);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 24424), &v117, (OZChannelFolder *)((char *)this + 648), 0x144u, 0, v37, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v38, @"Text Layout Top Margin");
  uint64_t v40 = (OZChannelImpl *)TXTextLayout::TXTextLayout_topMarginImpl::getInstance(v39);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 24576), &v117, (OZChannelFolder *)((char *)this + 648), 0x145u, 0, v40, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v41, @"Text Layout Bottom Margin");
  v43 = (OZChannelImpl *)TXTextLayout::TXTextLayout_bottomMarginImpl::getInstance(v42);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 24728), &v117, (OZChannelFolder *)((char *)this + 648), 0x146u, 0, v43, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v44, @"Text Layout Sequence");
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 24880), &v117, (OZChannelFolder *)((char *)this + 648), 0x148u, 10, 0, 0);
  PCString::~PCString(&v117);
  TXSequenceChannels::TXSequenceChannels((TXTextLayout *)((char *)this + 25032), (OZChannelFolder *)((char *)this + 648), 0x148u);
  *((void *)this + 6525) = &unk_1F10AD6E8;
  *((_OWORD *)this + 3263) = 0u;
  *((_OWORD *)this + 3264) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v114 = _Q0;
  *((_OWORD *)this + 3265) = _Q0;
  *((_WORD *)this + 26128) = 0;
  *((unsigned char *)this + 52258) = 0;
  *((_DWORD *)this + 13090) = 16777472;
  *((unsigned char *)this + 52364) = 0;
  *((_DWORD *)this + 13092) = 0;
  PCURL::PCURL((PCURL *)&v117, @"Text Layout Path Heading");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 52376), &v117, (OZChannelFolder *)((char *)this + 648), 0x149u, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v50, @"Text Layout Line Path");
  OZChannelPosition3D::OZChannelPosition3D((TXTextLayout *)((char *)this + 52504), &v117, (OZChannelFolder *)((char *)this + 52376), 0x14Eu, 0x28000002u, 3u);
  PCString::~PCString(&v117);
  PCURL::PCURL(v51, @"Text Layout Loop Path");
  OZChannelPosition3D::OZChannelPosition3D((TXTextLayout *)((char *)this + 53392), &v117, (OZChannelFolder *)((char *)this + 52376), 0x14Fu, 0x28000002u, 3u);
  PCString::~PCString(&v117);
  PCURL::PCURL(v52, @"Text Layout Path Shape Enum");
  PCURL::PCURL((PCURL *)&v118, @"Text Layout Path Shape");
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 54280), &v117, &v118, (OZChannelFolder *)((char *)this + 52376), 0x14Au, 0, 0, 0);
  PCString::~PCString(&v118);
  PCString::~PCString(&v117);
  PCURL::PCURL(v53, @"Text Layout Path Type Enum");
  PCURL::PCURL((PCURL *)&v118, @"Text Layout Path Type");
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 54536), 0, &v117, &v118, (OZChannelFolder *)((char *)this + 52376), 0x151u, 0, 0, 0);
  PCString::~PCString(&v118);
  PCString::~PCString(&v117);
  PCURL::PCURL(v54, @"Motion Path Behavior Circle Radius");
  v56 = (TXTextLayout::TXTextLayout_radiusInfo *)TXTextLayout::TXTextLayout_radiusImpl::getInstance(v55);
  v57 = (OZChannelInfo *)TXTextLayout::TXTextLayout_radiusInfo::getInstance(v56);
  OZChannel2D::OZChannel2D((TXTextLayout *)((char *)this + 54792), 200.0, 200.0, &v117, (OZChannelFolder *)((char *)this + 52376), 0x154u, 0, 2u, (OZChannelImpl *)v56, v57);
  PCString::~PCString(&v117);
  PCURL::PCURL(v58, @"Motion Path Behavior Rect Size");
  v60 = (TXTextLayout::TXTextLayout_rectSizeInfo *)TXTextLayout::TXTextLayout_rectSizeImpl::getInstance(v59);
  v61 = (OZChannelInfo *)TXTextLayout::TXTextLayout_rectSizeInfo::getInstance(v60);
  OZChannel2D::OZChannel2D((TXTextLayout *)((char *)this + 55232), 400.0, 400.0, &v117, (OZChannelFolder *)((char *)this + 52376), 0x155u, 0, 2u, (OZChannelImpl *)v60, v61);
  PCString::~PCString(&v117);
  PCURL::PCURL(v62, @"Motion Path Behavior Wave Start Point");
  OZChannelPosition::OZChannelPosition((TXTextLayout *)((char *)this + 55672), 0.0, 0.0, &v117, (OZChannelFolder *)((char *)this + 52376), 0x156u, 0, 2u, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v63, @"Motion Path Behavior Wave End Point");
  OZChannelPosition::OZChannelPosition((TXTextLayout *)((char *)this + 56376), 400.0, 0.0, &v117, (OZChannelFolder *)((char *)this + 52376), 0x157u, 0, 2u, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v64, @"Motion Path Behavior Wave Amplitude");
  v66 = (TXTextLayout::TXTextLayout_waveAmplitudeInfo *)TXTextLayout::TXTextLayout_waveAmplitudeImpl::getInstance(v65);
  v67 = (OZChannelInfo *)TXTextLayout::TXTextLayout_waveAmplitudeInfo::getInstance(v66);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 57080), 100.0, &v117, (OZChannelFolder *)((char *)this + 52376), 0x158u, 0, (OZChannelImpl *)v66, v67);
  PCString::~PCString(&v117);
  PCURL::PCURL(v68, @"Motion Path Behavior Wave Frequency");
  v70 = (TXTextLayout::TXTextLayout_waveFrequencyInfo *)TXTextLayout::TXTextLayout_waveFrequencyImpl::getInstance(v69);
  v71 = (OZChannelInfo *)TXTextLayout::TXTextLayout_waveFrequencyInfo::getInstance(v70);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 57232), 1.0, &v117, (OZChannelFolder *)((char *)this + 52376), 0x159u, 0, (OZChannelImpl *)v70, v71);
  PCString::~PCString(&v117);
  PCURL::PCURL(v72, @"Motion Path Behavior Wave Phase");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 57384), 0.0, &v117, (OZChannelFolder *)((char *)this + 52376), 0x15Au, 0, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v73, @"Motion Path Behavior Wave Damping");
  v75 = (TXTextLayout::TXTextLayout_waveDampingInfo *)TXTextLayout::TXTextLayout_waveDampingImpl::getInstance(v74);
  v76 = (OZChannelInfo *)TXTextLayout::TXTextLayout_waveDampingInfo::getInstance(v75);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 57536), 0.0, &v117, (OZChannelFolder *)((char *)this + 52376), 0x15Du, 0, (OZChannelImpl *)v75, v76);
  PCString::~PCString(&v117);
  PCURL::PCURL(v77, @"Text Layout Path Align To Shape");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 57688), 1, &v117, (OZChannelFolder *)((char *)this + 52376), 0x15Cu, 0, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v78, @"Text Layout Path Offset");
  v80 = (TXTextLayout::TXTextLayout_pathOffsetInfo *)TXTextLayout::TXTextLayout_pathOffsetImpl::getInstance(v79);
  v81 = (OZChannelInfo *)TXTextLayout::TXTextLayout_pathOffsetInfo::getInstance(v80);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 57840), 0.0, &v117, (OZChannelFolder *)((char *)this + 52376), 0x14Bu, 0, (OZChannelImpl *)v80, v81);
  PCString::~PCString(&v117);
  PCURL::PCURL(v82, @"Text Layout Path Wrap Around");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 57992), 1, &v117, (OZChannelFolder *)((char *)this + 52376), 0x15Bu, 0, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v83, @"Text Layout Path Inside Path");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 58144), &v117, (OZChannelFolder *)((char *)this + 52376), 0x14Cu, 0, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v84, @"Text Layout Path Align To Path");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 58296), 1, &v117, (OZChannelFolder *)((char *)this + 52376), 0x14Du, 0, 0, 0);
  PCString::~PCString(&v117);
  PCString::PCString(v85, "Align To Text");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 58448), 0, &v117, (OZChannelFolder *)((char *)this + 52376), 0x161u, 0, 0, 0);
  PCString::~PCString(&v117);
  PCEvaluator::PCEvaluator((TXTextLayout *)((char *)this + 58600));
  PCString::PCString(&v117, "Text Object Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 58696), &v117, (OZChannelFolder *)((char *)this + 648), 0x150u, 0x801000Au, 0);
  PCString::~PCString(&v117);
  *((void *)this + 7355) = 0;
  *(_OWORD *)((char *)this + 58824) = 0u;
  *((_DWORD *)this + 14712) = -1;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7357);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7358);
  PCURL::PCURL((PCURL *)&v117, @"Text Paragraph Style Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 58880), &v117, (OZChannelFolder *)((char *)this + 648), 0x162u, 0, 0);
  PCString::~PCString(&v117);
  *((_OWORD *)this + 3688) = 0u;
  *((_OWORD *)this + 3689) = v114;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 59040));
  *((_OWORD *)this + 3693) = xmmword_1B7E736F0;
  *((_OWORD *)this + 3692) = xmmword_1B7E736F0;
  *((_OWORD *)this + 3691) = xmmword_1B7E736F0;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 59104));
  PCURL::PCURL((PCURL *)&v117, @"Text Layout Is FCP Editable");
  OZChannelBool::OZChannelBool((OZChannelBool *)this + 389, 1, &v117, (OZChannelFolder *)((char *)this + 648), 0x15Eu, 0x80u, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v86, @"Text Layout Scale Heading");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 59280), &v117, (OZChannelFolder *)((char *)this + 648), 0x163u, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v87, @"Text Layout Scale Affects Layout");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 59408), 1, &v117, (OZChannelFolder *)((char *)this + 59280), 0x164u, 0, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v88, @"Text Layout Credit Scroll Line Spacing");
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 59560), &v117, (OZChannelFolder *)((char *)this + 648), 0x167u, 134283274, 0, 0);
  PCString::~PCString(&v117);
  *((_OWORD *)this + 3733) = xmmword_1B7E74760;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 59744));
  PCURL::PCURL((PCURL *)&v117, @"Text Layout Pan Heading");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 59760), &v117, (OZChannelFolder *)((char *)this + 648), 0x169u, 0xAu, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v89, @"Text Layout Pan Position");
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 59888), 0.0, &v117, (OZChannelFolder *)((char *)this + 59760), 0x16Au, 10, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v90, @"Text Layout Show Scroll Bars");
  v92 = (OZChannelImpl *)TXTextLayout::TXTextLayout_showScrollBarsImpl::getInstance(v91);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 60056), 1, &v117, (OZChannelFolder *)((char *)this + 648), 0x16Bu, 0x41000Au, v92, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v93, @"Text Layout Show Rulers");
  v95 = (OZChannelImpl *)TXTextLayout::TXTextLayout_showRulersImpl::getInstance(v94);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 60208), 1, &v117, (OZChannelFolder *)((char *)this + 648), 0x16Cu, 0x41000Au, v95, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v96, @"Text Layout Ticker Position");
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 60360), 0.0, &v117, (OZChannelFolder *)((char *)this + 59760), 0x16Du, 10, 0, 0);
  PCString::~PCString(&v117);
  v98 = (TXTextLayout::TXTextLayout_versionImpl *)PCString::PCString(v97, "Hidden Channel");
  v99 = (OZChannelImpl *)TXTextLayout::TXTextLayout_versionImpl::getInstance(v98);
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 60520), 5, &v117, (OZChannelFolder *)((char *)this + 648), 0x16Fu, 2, v99, 0);
  PCString::~PCString(&v117);
  *((int64x2_t *)this + 3792) = vdupq_n_s64((unint64_t)this + 60672);
  *((void *)this + 7586) = 0;
  *((void *)this + 7589) = 0;
  *((void *)this + 7588) = 0;
  *((void *)this + 7587) = (char *)this + 60704;
  *((_OWORD *)this + 3795) = 0u;
  *((_OWORD *)this + 3796) = 0u;
  *((_OWORD *)this + 3797) = 0u;
  PCSharedMutex::PCSharedMutex((TXTextLayout *)((char *)this + 60768));
  *((void *)this + 7613) = 0;
  *((void *)this + 7612) = (char *)this + 60904;
  *((void *)this + 7609) = (char *)this + 60872;
  *((void *)this + 7610) = (char *)this + 60872;
  *((void *)this + 7611) = 0;
  *((void *)this + 7614) = 0;
  *(_OWORD *)((char *)this + 60920) = 0u;
  *(_OWORD *)((char *)this + 60936) = 0u;
  *(_OWORD *)((char *)this + 60952) = 0u;
  *((void *)this + 7623) = 0;
  *((void *)this + 7622) = (char *)this + 60984;
  *((void *)this + 7624) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 61000));
  *(_OWORD *)((char *)this + 61080) = 0u;
  *((void *)this + 7634) = (char *)this + 61080;
  *(_OWORD *)((char *)this + 61096) = 0u;
  *((void *)this + 7648) = 0;
  *(_OWORD *)((char *)this + 61112) = 0u;
  *(_OWORD *)((char *)this + 61128) = 0u;
  *(_OWORD *)((char *)this + 61160) = 0u;
  PCURL::PCURL((PCURL *)&v117, @"Text Layout Scale To Margins Enum");
  PCURL::PCURL((PCURL *)&v118, @"Text Layout Scale To Margins");
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 61208), 0, &v117, &v118, (OZChannelFolder *)((char *)this + 648), 0x172u, 0, 0, 0);
  PCString::~PCString(&v118);
  PCString::~PCString(&v117);
  PCURL::PCURL(v100, @"Text Layout Margin Scale");
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 61464), 1.0, &v117, (OZChannelFolder *)((char *)this + 648), 0x178u, 0x400000, 0, 0);
  PCString::~PCString(&v117);
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 61632));
  PCURL::PCURL((PCURL *)&v117, @"Text Layout Crop To Margins");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 61648), 0, &v117, (OZChannelFolder *)((char *)this + 648), 0x174u, 0, 0, 0);
  PCString::~PCString(&v117);
  PCString::PCString(v101, "Wrap To Bottom Margin");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 61800), &v117, (OZChannelFolder *)((char *)this + 648), 0x17Du, 0, 0, 0);
  PCString::~PCString(&v117);
  PCURL::PCURL(v102, @"Text Background Color");
  OZChannelColor::OZChannelColor((TXTextLayout *)((char *)this + 61952), 0.0, 0.0, 0.0, 1.0, &v117, (OZChannelFolder *)((char *)this + 648), 0x176u, 0, 6u);
  PCString::~PCString(&v117);
  PCString::PCString(v103, "Add Extra Line Spacing For Diacritics");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 63112), 0, &v117, (OZChannelFolder *)((char *)this + 648), 0x17Bu, 0, 0, 0);
  PCString::~PCString(&v117);
  PCString::PCString(v104, "Extra Line Spacing");
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 63264), 0.0, &v117, (OZChannelFolder *)((char *)this + 648), 0x17Cu, 0, 0, 0);
  PCString::~PCString(&v117);
  PCString::PCString(v105, "Dynamic Line Spacing for Diacritics");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 63416), 0, &v117, (OZChannelFolder *)((char *)this + 648), 0x17Eu, 0, 0, 0);
  PCString::~PCString(&v117);
  PCString::PCString(v106, "Minimum Line Spacing");
  OZChannelDouble::OZChannelDouble((TXTextLayout *)((char *)this + 63568), 0.0, &v117, (OZChannelFolder *)((char *)this + 648), 0x17Fu, 0, 0, 0);
  PCString::~PCString(&v117);
  *((void *)this + 7967) = 0;
  *((void *)this + 7968) = 0;
  *((void *)this + 7969) = 0;
  *((unsigned char *)this + 63761) = 0;
  *((_DWORD *)this + 15951) = 0;
  *((_DWORD *)this + 15952) = 0;
  *(_OWORD *)((char *)this + 63816) = 0u;
  *((_DWORD *)this + 15953) = -1;
  *((void *)this + 7984) = 0;
  *(_OWORD *)((char *)this + 63832) = 0u;
  *(_OWORD *)((char *)this + 63848) = 0u;
  OZValueCache<OZBoundsCacheItem>::OZValueCache((uint64_t)this + 63888);
  OZValueCache<OZProjectedBoundsCacheItem>::OZValueCache((uint64_t)this + 64032);
  *((unsigned char *)this + 64176) = 0;
  *((void *)this + 8023) = 0;
  *((_OWORD *)this + 4012) = xmmword_1B7E733D0;
  *(_OWORD *)((char *)this + 64216) = 0u;
  *((void *)this + 8026) = (char *)this + 64216;
  *((_OWORD *)this + 4015) = 0u;
  *((void *)this + 8029) = (char *)this + 64240;
  *((_OWORD *)this + 4016) = 0u;
  *((_OWORD *)this + 4017) = 0u;
  *((_OWORD *)this + 4019) = 0u;
  *((_DWORD *)this + 16072) = 1065353216;
  *((void *)this + 8037) = (char *)this + 64304;
  *((_DWORD *)this + 16080) = 0;
  *((unsigned char *)this + 64324) = 1;
  *(_OWORD *)((char *)this + 64328) = 0u;
  *(_OWORD *)((char *)this + 64344) = v114;
  *((_DWORD *)this + 16090) = 0;
  *((void *)this + 8047) = 0;
  *((void *)this + 8046) = (char *)this + 64376;
  *((void *)this + 8048) = 0;
  *((void *)this + 8051) = 0;
  *((void *)this + 7649) = 0;
  *((void *)this + 7621) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 25064), 8, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 28592), 8, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 33424), 8, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 38664), 8, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 45048), 8, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 256), 0x2000000, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 256));
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 256), @"TXTextLayoutChanObjectRootController");
  uint64_t v108 = TXTextStyleManager::getInstance(v107);
  v109 = *(OZSceneNode ***)(v108 + 8);
  uint64_t v110 = *(void *)(v108 + 16);
  if (v110) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v110 + 8), 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,void>(v109, &v117);
  v112 = (OZFontManagerBase *)TXFontManager::getInstance(v111);
  var0 = v117.var0;
  OZFontManagerBase::getDefaultSystemFontFace(v112, &v115);
  TXTextStyle::setFont((TXTextStyle *)var0, &v115);
  if (v116) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v116);
  }
  TXTextLayout::addStyle((uint64_t)this, (uint64_t)&v117, 1);
  operator new();
}

void sub_1B75DD544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, OZChannel *a16, OZChannelBool *a17, OZChannel *a18, OZChannelBool *a19, OZChannelColor *a20,OZChannelBool *a21,OZChannelBool *a22,OZChannel *a23,OZChannelEnum *a24,void **a25,uint64_t a26,PCString **a27,PCMutex *a28,void *a29,void **a30,uint64_t *a31,std::mutex *a32,uint64_t *a33,OZChannel *a34,OZChannel *a35,OZChannel *a36,OZChannel *a37,OZChannelBool *a38,OZChannelBool *a39,OZChannelFolder *a40,PCString *a41,PCString *a42,uint64_t a43,OZChannelFolder *a44,PCEvaluator *a45,OZChannelBool *a46,OZChannelBool *a47,OZChannelBool *a48,OZChannelBool *a49,OZChannelPercent *a50,OZChannelBool *a51,OZChannel *a52,OZChannel *a53,OZChannelPercent *a54,uint64_t *a55,void **a56,PCString *a57,uint64_t a58,OZChannel *a59,OZChannel *a60,OZChannelPosition *a61,OZChannelPosition *a62,OZChannel2D *a63)
{
  *(void *)(v80 - 160) = a1;
  v81 = *(std::__shared_weak_count **)(v80 - 104);
  if (v81) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v81);
  }
  if (v75) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v75);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v78, *(void **)(v79 + 168));
  std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::destroy(a11, *(PCString **)(v79 + 96));
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::~__hash_table((uint64_t)v72 + 64256);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a12, *(void **)(v79 + 32));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v79, *(void **)(v79 + 8));
  OZValueCache<OZProjectedBoundsCacheItem>::~OZValueCache(a13);
  OZValueCache<OZBoundsCacheItem>::~OZValueCache(a14);
  v82 = *(void **)(v77 + 104);
  if (v82)
  {
    *(void *)(v77 + 112) = v82;
    operator delete(v82);
  }
  v83 = *a15;
  if (*a15)
  {
    *(void *)(v77 + 88) = v83;
    operator delete(v83);
  }
  v84 = *(void **)v77;
  if (*(void *)v77)
  {
    *(void *)(v77 + 8) = v84;
    operator delete(v84);
  }
  OZChannel::~OZChannel(a16);
  OZChannelBool::~OZChannelBool(a17);
  OZChannel::~OZChannel(a18);
  OZChannelBool::~OZChannelBool(a19);
  OZChannelColor::~OZChannelColor(a20);
  OZChannelBool::~OZChannelBool(a21);
  OZChannelBool::~OZChannelBool(a22);
  OZChannel::~OZChannel(a23);
  OZChannelEnum::~OZChannelEnum(a24);
  v85 = *(void **)(v74 + 144);
  if (v85)
  {
    *(void *)(v74 + 152) = v85;
    operator delete(v85);
  }
  v86 = *a25;
  if (*a25)
  {
    *(void *)(v74 + 128) = v86;
    operator delete(v86);
  }
  std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy(a26, *a27);
  PCMutex::~PCMutex(a28);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v74, *(void **)(v74 + 8));
  std::deque<PCHash128>::~deque[abi:ne180100](a29);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v76, *a30);
  std::__list_imp<TXTextLayout::HGMetalNodeCacheEntry>::clear(a31);
  PCSharedMutex::~PCSharedMutex(a32);
  std::deque<PCHash128>::~deque[abi:ne180100]((void *)v72 + 7590);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(STACK[0x278], *(void **)(STACK[0x278] + 8));
  std::__list_imp<TXTextLayout::HGNodeCacheEntry>::clear(a33);
  OZChannel::~OZChannel(a34);
  OZChannel::~OZChannel(a35);
  OZChannelBool::~OZChannelBool((OZChannelBool *)STACK[0x268]);
  OZChannelBool::~OZChannelBool((OZChannelBool *)STACK[0x270]);
  OZChannel::~OZChannel(a36);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v80 - 176));
  OZChannel::~OZChannel(a37);
  OZChannelBool::~OZChannelBool(a38);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v80 - 256));
  OZChannelBool::~OZChannelBool(a39);
  OZChannelFolder::~OZChannelFolder(a40);
  PCString::~PCString(a41);
  PCString::~PCString(a42);
  *(void *)(v80 - 112) = a43;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v80 - 112));
  OZChannelFolder::~OZChannelFolder(a44);
  PCEvaluator::~PCEvaluator(a45);
  OZChannelBool::~OZChannelBool(a46);
  OZChannelBool::~OZChannelBool(a47);
  OZChannelBool::~OZChannelBool(a48);
  OZChannelBool::~OZChannelBool(a49);
  OZChannelPercent::~OZChannelPercent(a50);
  OZChannelBool::~OZChannelBool(a51);
  OZChannel::~OZChannel(a52);
  OZChannel::~OZChannel(a53);
  OZChannel::~OZChannel(a59);
  v87 = *(_Unwind_Exception **)(v80 - 160);
  OZChannel::~OZChannel(a60);
  v88 = *(OZChannelEnum **)(v80 - 216);
  OZChannelPosition::~OZChannelPosition(a61);
  OZChannelPosition::~OZChannelPosition(a62);
  OZChannel2D::~OZChannel2D(a63);
  OZChannel2D::~OZChannel2D(a64);
  OZChannelEnum::~OZChannelEnum(a65);
  OZChannelEnum::~OZChannelEnum(a66);
  OZChannelPosition3D::~OZChannelPosition3D(a67);
  OZChannelPosition3D::~OZChannelPosition3D(a68);
  OZChannelFolder::~OZChannelFolder(v73);
  PCArray<unsigned long,PCArray_Traits<unsigned long>>::~PCArray(*(void *)(v80 - 136));
  TXSequenceChannels::~TXSequenceChannels(a69);
  OZChannel::~OZChannel(a70);
  OZChannel::~OZChannel(*(OZChannel **)(v80 - 248));
  OZChannel::~OZChannel(*(OZChannel **)(v80 - 240));
  OZChannel::~OZChannel(*(OZChannel **)(v80 - 232));
  OZChannel::~OZChannel(*(OZChannel **)(v80 - 224));
  OZChannelBool::~OZChannelBool(a71);
  OZChannelPercent::~OZChannelPercent(a72);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)STACK[0x200]);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v80 - 144));
  OZChannelPosition3D::~OZChannelPosition3D((OZChannelPosition3D *)STACK[0x208]);
  OZChannelEnum::~OZChannelEnum(v88);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x210]);
  OZChannel::~OZChannel((OZChannel *)STACK[0x218]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x220]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x228]);
  TXChannelAlignment::~TXChannelAlignment(*(TXChannelAlignment **)(v80 - 168));
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x230]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x238]);
  OZChannelBool::~OZChannelBool((OZChannelBool *)STACK[0x240]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x248]);
  OZChannelBool::~OZChannelBool((OZChannelBool *)STACK[0x250]);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)STACK[0x258]);
  OZChannel::~OZChannel((OZChannel *)STACK[0x260]);
  OZChannelPercent::~OZChannelPercent(a54);
  std::__list_imp<unsigned int>::clear(*(void **)(v80 - 200));
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear(a55);
  v89 = (void *)*((void *)v72 + 2409);
  *((void *)v72 + 2410) = v89;
  if (v89) {
    operator delete(v89);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v72 + 19224, *a56);
  PCString::~PCString(a57);
  OZChannelText::~OZChannelText(*(OZChannelText **)(v80 - 208));
  v90 = **(void ***)(v80 - 152);
  if (v90)
  {
    *((void *)v72 + 2379) = v90;
    operator delete(v90);
  }
  *(void *)(v80 - 112) = a58;
  std::vector<TXTabStop>::__destroy_vector::operator()[abi:ne180100]((void ***)(v80 - 112));
  OZLockingElement::~OZLockingElement(v72);
  _Unwind_Resume(v87);
}

void TXTextLayout::addStyle(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    updated = OZChannelBase::updateIDGenerator((OZChannelBase *)(*(_DWORD *)(a1 + 280) + 1));
    uint64_t v6 = *(OZChannelBase **)a2;
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(updated);
    OZChannelBase::setID((OZChannelBase *)&v6->var9, NextUniqueID);
    OZStyle::assignUniqueIDsToAllMaterials(*(OZChannelBase **)a2);
  }
  else
  {
    CFStringTokenizerTokenType v8 = *(void **)(a1 + 19352);
    if (v8 != (void *)(a1 + 19344))
    {
      while (1)
      {
        uint64_t v9 = v8[2];
        if (*(_DWORD *)(v9 + 96) == *(_DWORD *)(*(void *)a2 + 96)) {
          break;
        }
        CFStringTokenizerTokenType v8 = (void *)v8[1];
        if (v8 == (void *)(a1 + 19344)) {
          goto LABEL_20;
        }
      }
      char v10 = (std::__shared_weak_count *)v8[3];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = a1 + 19368;
      uint64_t v12 = *(void *)(a1 + 19376);
      if (v12 != a1 + 19368)
      {
        do
        {
          uint64_t v13 = *(void *)(v12 + 16);
          uint64_t v15 = *(void *)(v13 + 8);
          CMTime v14 = *(std::__shared_weak_count **)(v13 + 16);
          if (v14)
          {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          if (v15 == v9)
          {
            BOOL v17 = *(OZChannelBase **)a2;
            uint64_t v16 = *(void *)(a2 + 8);
            if (v16) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v18 = *(std::__shared_weak_count **)(v13 + 16);
            *(void *)(v13 + 8) = v17;
            *(void *)(v13 + 16) = v16;
            if (v18) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v18);
            }
          }
          uint64_t v12 = *(void *)(v12 + 8);
        }
        while (v12 != v11);
      }
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
  }
LABEL_20:
  OZStyle::setSceneNode(*(void *)a2, (OZSceneNode *)(a1 + 200));
  uint64_t v19 = *(OZChannelBase **)a2;
  *(void *)(*(void *)a2 + 48944) = a1;
  v20 = *(void **)(a1 + 19352);
  if (v20 == (void *)(a1 + 19344))
  {
LABEL_24:
    uint64_t v35 = a1 + 200;
    v36 = 0;
  }
  else
  {
    int var12 = (int)v19->var12;
    while (1)
    {
      __n128 v22 = (_DWORD *)v20[2];
      if (v22[24] == var12) {
        break;
      }
      v20 = (void *)v20[1];
      if (v20 == (void *)(a1 + 19344)) {
        goto LABEL_24;
      }
    }
    v31 = (std::__shared_weak_count *)v20[3];
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(unsigned char *)(a1 + 61200))
    {
      uint64_t v33 = (*(uint64_t (**)(_DWORD *))(*(void *)v22 + 112))(v22);
      uint64_t v34 = (*(uint64_t (**)(void))(**(void **)a2 + 112))();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 256))(v33, v34);
      goto LABEL_39;
    }
    uint64_t v35 = a1 + 200;
    v36 = v31;
  }
  v37 = (void *)a2;
  if (!*(void *)(a1 + 19360))
  {
    v24 = *(OZMaterialBase ***)(*(void *)a2 + 480);
    unint64_t v23 = *(OZMaterialBase ***)(*v37 + 488);
    if (v24 != v23)
    {
      uint64_t v25 = (const CMTime *)MEMORY[0x1E4F1FA48];
      do
      {
        CMTime v26 = *v24;
        uint64_t v27 = (OZChannel *)((char *)*v24 + 720);
        if (!OZChannel::getValueAsInt(v27, v25, 0.0))
        {
          unsigned int AvailableMaterialSequenceID = NextAvailableMaterialSequenceID((TXSequenceChannels *)(a1 + 25032));
          OZMaterialBase::setSequenceID(v26, AvailableMaterialSequenceID);
        }
        uint64_t v29 = *(void *)(a1 + 25048);
        uint64_t v30 = *(void *)(a1 + 25040);
        OZChannel::getValueAsInt(v27, v25, 0.0);
        TXSequenceChannels::addMaterialChannels((TXSequenceChannels *)(a1 + 25032), v26, ((unint64_t)(v29 - v30) >> 3) - 6);
        ++v24;
      }
      while (v24 != v23);
    }
  }
  v31 = v36;
  std::list<std::shared_ptr<TXTextStyle>>::push_back((uint64_t *)(a1 + 19344), v37);
  uint64_t v32 = (std::__shared_weak_count *)v37[1];
  v38 = (OZScene *)*v37;
  v39 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  OZSceneNode::addStyle(v35, &v38);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
LABEL_39:
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
}

void sub_1B75DE430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void TXPathResetCallback(OZChannelBase *a1, void *a2)
{
  if (a1)
  {
    (*((void (**)(OZChannelBase *, void))a1->var0 + 35))(a1, 0);
    ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(a1);
    if (ObjectManipulator)
    {
      if (v4)
      {
        uint64_t v5 = (uint64_t)v4;
        OZRenderState::OZRenderState(&v14);
        if ((*(uint64_t (**)(uint64_t))(*(void *)(v5 + 200) + 272))(v5 + 200))
        {
          uint64_t v6 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)(v5 + 200) + 272))(v5 + 200);
          OZScene::getCurrentTime(v6, &v12);
          *(__n128 *)&v14.var0.var0 = v12;
          v14.var0.var3 = v13;
        }
        __n128 v12 = 0uLL;
        __asm { FMOV            V0.2D, #-1.0 }
        long long v13 = _Q0;
        TXTextLayout::getTypographicBounds(v5, (uint64_t)&v12, (CMTime *)&v14, 1, 0);
        TXTextLayout::initializePaths(v5, (uint64_t)&v12);
      }
    }
  }
}

void std::vector<TXParagraphStyle *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<TXParagraphStyle *>::__append((void **)a1, a2 - v2);
  }
}

char *std::vector<TXParagraphStyle *>::insert(uint64_t a1, char *__src, void *a3)
{
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    OZRenderState v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v15 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = (__src - v14) >> 3;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 2 > v15) {
      unint64_t v15 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    __p = v19;
    __n128 v22 = &v19[8 * v16];
    unint64_t v23 = v22;
    v24 = &v19[8 * v18];
    std::__split_buffer<unsigned long *>::push_back(&__p, a3);
    uint64_t v4 = std::vector<OZChannelBase *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    char v10 = __src + 8;
    uint64_t v11 = v6 - 8;
    __n128 v12 = v6;
    while (v11 < v6)
    {
      uint64_t v13 = *(void *)v11;
      v11 += 8;
      *(void *)__n128 v12 = v13;
      v12 += 8;
    }
    *(void *)(a1 + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    }
    *(void *)uint64_t v4 = *a3;
  }
  return v4;
}

void sub_1B75DE780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZChannelColor::~OZChannelColor(OZChannelColor *this)
{
  *(void *)this = &unk_1F1107698;
  *((void *)this + 2) = &unk_1F1107A08;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1008));

  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F1107698;
  *((void *)this + 2) = &unk_1F1107A08;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1008));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t PCArray<unsigned long,PCArray_Traits<unsigned long>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F10AD6E8;
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0) {
    int v3 = 1;
  }
  else {
    int v3 = v2 & ~(v2 >> 31);
  }
  if (v3 == v2)
  {
    uint64_t v4 = *(int *)(a1 + 12);
    uint64_t v5 = *(void *)(a1 + 16);
    if ((v4 & 0x80000000) != 0) {
      bzero((void *)(v5 + 8 * v4), 8 * ~v4 + 8);
    }
  }
  else
  {
    if (v3) {
      operator new[]();
    }
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6) {
      MEMORY[0x1BA9BFB70](v6, 0x1000C8077774924);
    }
    *(void *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  if (v5) {
    MEMORY[0x1BA9BFB70](v5, 0x1000C8077774924);
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void TXTextLayout::TXTextLayout(TXTextLayout *this, const TXTextLayout *a2, uint64_t a3)
{
  uint64_t v5 = (char *)this + 18984;
  OZTextLayout::OZTextLayout(this, a2, a3);
  *(void *)uint64_t v6 = &unk_1F10AB348;
  *(void *)(v6 + 200) = &unk_1F10AB810;
  *(void *)(v6 + 216) = &unk_1F10AC0E8;
  *(void *)(v6 + 248) = &unk_1F10AC340;
  *(void *)(v6 + 6728) = &unk_1F10AC398;
  *(void *)(v6 + 18976) = &unk_1F10AC470;
  *(_DWORD *)uint64_t v5 = -1;
  v5[4] = 1;
  uint64_t v7 = (OZChannelFolder *)(v6 + 648);
  *(_OWORD *)(v6 + 19000) = 0u;
  *(_OWORD *)(v6 + 19016) = 0u;
  *(_OWORD *)(v6 + 19032) = 0u;
  TXChannelString::TXChannelString((TXChannelString *)(v6 + 19048), (const OZChannelBase *)((char *)a2 + 19048), (OZChannelFolder *)(v6 + 648));
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 2402);
  std::map<long,double>::map[abi:ne180100]((uint64_t *)this + 2403, (uint64_t)a2 + 19224);
  *((void *)this + 2406) = &unk_1F10AC4C8;
  *((void *)this + 2407) = 0;
  TXDiscontinuousSelection::TXDiscontinuousSelection((TXTextLayout *)((char *)this + 19272));
  *((_WORD *)v5 + 168) = *((_WORD *)a2 + 9660);
  *((_DWORD *)v5 + 85) = *((_DWORD *)a2 + 4831);
  v5[348] = 0;
  *((_DWORD *)v5 + 88) = 0;
  *((void *)this + 2418) = (char *)this + 19344;
  *((void *)this + 2419) = (char *)this + 19344;
  *((void *)this + 2420) = 0;
  *((void *)this + 2421) = (char *)this + 19368;
  *((void *)this + 2422) = (char *)this + 19368;
  *((void *)this + 2423) = 0;
  v5[408] = 1;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 19396));
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 19412));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 19448), (const OZChannelBase *)((char *)a2 + 19448), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 19600), (const OZChannelBase *)a2 + 175, v7);
  *((void *)this + 2450) = &unk_1F1100CF0;
  *((void *)this + 2452) = &unk_1F1101050;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 19752), (const OZChannelBase *)((char *)a2 + 19752), v7);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19904), (const OZChannelBase *)((char *)a2 + 19904), v7);
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 20056), (const TXTextLayout *)((char *)a2 + 20056), v7);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 20312), (const OZChannelBase *)((char *)a2 + 20312), v7);
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 20464), (const TXTextLayout *)((char *)a2 + 20464), v7);
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 20720), (const TXTextLayout *)((char *)a2 + 20720), v7);
  TXChannelAlignment::TXChannelAlignment((TXTextLayout *)((char *)this + 20976), (const TXTextLayout *)((char *)a2 + 20976), v7);
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 21624), (const TXTextLayout *)((char *)a2 + 21624), v7);
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 21880), (const TXTextLayout *)((char *)a2 + 21880), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 22136), (const OZChannelBase *)((char *)a2 + 22136), v7);
  *((void *)this + 2767) = &unk_1F1100CF0;
  *((void *)this + 2769) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 22288), (const TXTextLayout *)((char *)a2 + 22288), v7);
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 22544), (const TXTextLayout *)((char *)a2 + 22544), v7);
  OZChannelPosition3D::OZChannelPosition3D((TXTextLayout *)((char *)this + 22800), (const TXTextLayout *)((char *)a2 + 22800), v7);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 23688), (const OZChannelFolder *)((char *)a2 + 23688), v7);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 23816), (const OZChannelBase *)((char *)a2 + 23816), (OZChannelFolder *)((char *)this + 23688));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 23968), (const OZChannelBase *)a2 + 214, (OZChannelFolder *)((char *)this + 23688));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 24120), (const OZChannelBase *)((char *)a2 + 24120), (OZChannelFolder *)((char *)this + 23688));
  OZChannel::OZChannel((OZChannel *)((char *)this + 24272), (const OZChannelBase *)((char *)a2 + 24272), v7);
  *((void *)this + 3034) = &unk_1F1100CF0;
  *((void *)this + 3036) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 24424), (const OZChannelBase *)((char *)a2 + 24424), v7);
  *((void *)this + 3053) = &unk_1F1100CF0;
  *((void *)this + 3055) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 24576), (const OZChannelBase *)((char *)a2 + 24576), v7);
  *((void *)this + 3072) = &unk_1F1100CF0;
  *((void *)this + 3074) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 24728), (const OZChannelBase *)((char *)a2 + 24728), v7);
  *((void *)this + 3091) = &unk_1F1100CF0;
  *((void *)this + 3093) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 24880), (const OZChannelBase *)((char *)a2 + 24880), v7);
  *((void *)this + 3110) = &unk_1F1100CF0;
  *((void *)this + 3112) = &unk_1F1101050;
  TXSequenceChannels::TXSequenceChannels((TXTextLayout *)((char *)this + 25032), (const TXTextLayout *)((char *)a2 + 25032), v7);
  *((void *)this + 6525) = &unk_1F10AD6E8;
  *((_OWORD *)this + 3263) = 0u;
  *((_OWORD *)this + 3264) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v17 = _Q0;
  *((_OWORD *)this + 3265) = _Q0;
  *((_WORD *)this + 26128) = *((_WORD *)a2 + 26128);
  *((_DWORD *)this + 13090) = 16777217;
  *((unsigned char *)this + 52364) = 0;
  *((_DWORD *)this + 13092) = *((_DWORD *)a2 + 13092);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 52376), (const OZChannelFolder *)((char *)a2 + 52376), v7);
  OZChannelPosition3D::OZChannelPosition3D((TXTextLayout *)((char *)this + 52504), (const TXTextLayout *)((char *)a2 + 52504), (OZChannelFolder *)((char *)this + 52376));
  OZChannelPosition3D::OZChannelPosition3D((TXTextLayout *)((char *)this + 53392), (const TXTextLayout *)((char *)a2 + 53392), (OZChannelFolder *)((char *)this + 52376));
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 54280), (const TXTextLayout *)((char *)a2 + 54280), (OZChannelFolder *)((char *)this + 52376));
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 54536), (const TXTextLayout *)((char *)a2 + 54536), (OZChannelFolder *)((char *)this + 52376));
  OZChannel2D::OZChannel2D((TXTextLayout *)((char *)this + 54792), (const TXTextLayout *)((char *)a2 + 54792), (OZChannelFolder *)((char *)this + 52376));
  OZChannel2D::OZChannel2D((TXTextLayout *)((char *)this + 55232), (const TXTextLayout *)((char *)a2 + 55232), (OZChannelFolder *)((char *)this + 52376));
  OZChannelPosition::OZChannelPosition((TXTextLayout *)((char *)this + 55672), (const TXTextLayout *)((char *)a2 + 55672), (OZChannelFolder *)((char *)this + 52376));
  OZChannelPosition::OZChannelPosition((TXTextLayout *)((char *)this + 56376), (const TXTextLayout *)((char *)a2 + 56376), (OZChannelFolder *)((char *)this + 52376));
  OZChannel::OZChannel((OZChannel *)((char *)this + 57080), (const OZChannelBase *)((char *)a2 + 57080), (OZChannelFolder *)((char *)this + 52376));
  *((void *)this + 7135) = &unk_1F1100CF0;
  *((void *)this + 7137) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 57232), (const OZChannelBase *)a2 + 511, (OZChannelFolder *)((char *)this + 52376));
  *((void *)this + 7154) = &unk_1F1100CF0;
  *((void *)this + 7156) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 57384), (const OZChannelBase *)((char *)a2 + 57384), (OZChannelFolder *)((char *)this + 52376));
  *((void *)this + 7173) = &unk_1F11010C0;
  *((void *)this + 7175) = &unk_1F1101420;
  OZChannel::OZChannel((OZChannel *)((char *)this + 57536), (const OZChannelBase *)((char *)a2 + 57536), (OZChannelFolder *)((char *)this + 52376));
  *((void *)this + 7192) = &unk_1F1100CF0;
  *((void *)this + 7194) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 57688), (const OZChannelBase *)((char *)a2 + 57688), (OZChannelFolder *)((char *)this + 52376));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 57840), (const OZChannelBase *)((char *)a2 + 57840), (OZChannelFolder *)((char *)this + 52376));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 57992), (const OZChannelBase *)((char *)a2 + 57992), (OZChannelFolder *)((char *)this + 52376));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 58144), (const OZChannelBase *)((char *)a2 + 58144), (OZChannelFolder *)((char *)this + 52376));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 58296), (const OZChannelBase *)((char *)a2 + 58296), (OZChannelFolder *)((char *)this + 52376));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 58448), (const OZChannelBase *)((char *)a2 + 58448), (OZChannelFolder *)((char *)this + 52376));
  PCEvaluator::PCEvaluator((TXTextLayout *)((char *)this + 58600));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 58696), (const OZChannelFolder *)((char *)a2 + 58696), v7);
  *((void *)this + 7355) = 0;
  *(_OWORD *)((char *)this + 58824) = 0u;
  *((_DWORD *)this + 14712) = -1;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7357);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7358);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 58880), (const OZChannelFolder *)((char *)a2 + 58880), v7);
  *((_OWORD *)this + 3688) = 0u;
  *((_OWORD *)this + 3689) = v17;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 59040));
  *((_OWORD *)this + 3693) = xmmword_1B7E736F0;
  *((_OWORD *)this + 3692) = xmmword_1B7E736F0;
  *((_OWORD *)this + 3691) = xmmword_1B7E736F0;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 59104));
  OZChannelBool::OZChannelBool((OZChannelBool *)this + 389, (const OZChannelBase *)((char *)a2 + 59128), v7);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 59280), (const OZChannelFolder *)((char *)a2 + 59280), v7);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 59408), (const OZChannelBase *)((char *)a2 + 59408), (OZChannelFolder *)((char *)this + 59280));
  OZChannel::OZChannel((OZChannel *)((char *)this + 59560), (const OZChannelBase *)((char *)a2 + 59560), v7);
  *((void *)this + 7445) = &unk_1F1100CF0;
  *((void *)this + 7447) = &unk_1F1101050;
  *((_OWORD *)this + 3733) = xmmword_1B7E74760;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 59744));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 59760), (const OZChannelFolder *)((char *)a2 + 59760), v7);
  OZChannel::OZChannel((OZChannel *)this + 394, (const OZChannelBase *)((char *)a2 + 59888), (OZChannelFolder *)((char *)this + 59760));
  *uint64_t v13 = &unk_1F1100CF0;
  v13[2] = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 60056), (const OZChannelBase *)((char *)a2 + 60056), v7);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 60208), (const OZChannelBase *)((char *)a2 + 60208), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 60360), (const OZChannelBase *)((char *)a2 + 60360), (OZChannelFolder *)((char *)this + 59760));
  *((void *)this + 7545) = &unk_1F1100CF0;
  *((void *)this + 7547) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 60520), (const OZChannelBase *)((char *)a2 + 60520), v7);
  *((void *)this + 7565) = &unk_1F1100CF0;
  *((void *)this + 7567) = &unk_1F1101050;
  *((int64x2_t *)this + 3792) = vdupq_n_s64((unint64_t)this + 60672);
  *((void *)this + 7586) = 0;
  *((void *)this + 7589) = 0;
  *((void *)this + 7588) = 0;
  *((void *)this + 7587) = (char *)this + 60704;
  *((_OWORD *)this + 3795) = 0u;
  *((_OWORD *)this + 3796) = 0u;
  *((_OWORD *)this + 3797) = 0u;
  PCSharedMutex::PCSharedMutex((TXTextLayout *)((char *)this + 60768));
  *((void *)this + 7613) = 0;
  *((void *)this + 7612) = (char *)this + 60904;
  *((void *)this + 7609) = (char *)this + 60872;
  *((void *)this + 7610) = (char *)this + 60872;
  *((void *)this + 7611) = 0;
  *((void *)this + 7614) = 0;
  *(_OWORD *)((char *)this + 60920) = 0u;
  *(_OWORD *)((char *)this + 60936) = 0u;
  *(_OWORD *)((char *)this + 60952) = 0u;
  *((void *)this + 7623) = 0;
  *((void *)this + 7622) = (char *)this + 60984;
  *((void *)this + 7624) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 61000));
  *(_OWORD *)((char *)this + 61080) = 0u;
  *((void *)this + 7634) = (char *)this + 61080;
  *(_OWORD *)((char *)this + 61096) = 0u;
  *((void *)this + 7648) = 0;
  *(_OWORD *)((char *)this + 61112) = 0u;
  *(_OWORD *)((char *)this + 61160) = 0u;
  *(_OWORD *)((char *)this + 61128) = 0u;
  *((unsigned char *)this + 61200) = *((unsigned char *)a2 + 61200);
  OZChannelEnum::OZChannelEnum((TXTextLayout *)((char *)this + 61208), (const TXTextLayout *)((char *)a2 + 61208), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 61464), (const OZChannelBase *)((char *)a2 + 61464), v7);
  void *v14 = &unk_1F1100CF0;
  uint64_t v16 = (uint64_t)v14;
  v14[2] = &unk_1F1101050;
  PCWorkingColorVector::PCWorkingColorVector((TXTextLayout *)((char *)this + 61632));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 61648), (const OZChannelBase *)((char *)a2 + 61648), v7);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 61800), (const OZChannelBase *)((char *)a2 + 61800), v7);
  OZChannelColor::OZChannelColor((TXTextLayout *)((char *)this + 61952), (const TXTextLayout *)((char *)a2 + 61952), v7);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 63112), (const OZChannelBase *)((char *)a2 + 63112), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 63264), (const OZChannelBase *)((char *)a2 + 63264), v7);
  void *v15 = &unk_1F1100CF0;
  v15[2] = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 63416), (const OZChannelBase *)((char *)a2 + 63416), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 63568), (const OZChannelBase *)((char *)a2 + 63568), v7);
  *((void *)this + 7946) = &unk_1F1100CF0;
  *((void *)this + 7948) = &unk_1F1101050;
  *((void *)this + 7967) = 0;
  *((void *)this + 7968) = 0;
  *((void *)this + 7969) = 0;
  *((unsigned char *)this + 63761) = *((unsigned char *)a2 + 63761);
  *((void *)this + 7971) = *((void *)a2 + 7971);
  *((unsigned char *)this + 63776) = *((unsigned char *)a2 + 63776);
  *((_DWORD *)this + 15951) = 0;
  *((_DWORD *)this + 15952) = 0;
  *(_OWORD *)((char *)this + 63816) = 0u;
  *((_DWORD *)this + 15953) = -1;
  *((void *)this + 7984) = 0;
  *(_OWORD *)((char *)this + 63832) = 0u;
  *(_OWORD *)((char *)this + 63848) = 0u;
  OZValueCache<OZBoundsCacheItem>::OZValueCache((uint64_t)this + 63888);
  OZValueCache<OZProjectedBoundsCacheItem>::OZValueCache((uint64_t)this + 64032);
  *((unsigned char *)this + 64176) = 0;
  *((void *)this + 8023) = 0;
  *((_OWORD *)this + 4012) = xmmword_1B7E733D0;
  *(_OWORD *)((char *)this + 64216) = 0u;
  *((void *)this + 8026) = (char *)this + 64216;
  *((_OWORD *)this + 4015) = 0u;
  *((void *)this + 8029) = (char *)this + 64240;
  *((_OWORD *)this + 4016) = 0u;
  *((_OWORD *)this + 4017) = 0u;
  *((_DWORD *)this + 16072) = 1065353216;
  *((_OWORD *)this + 4019) = 0u;
  *((void *)this + 8037) = (char *)this + 64304;
  *((_DWORD *)this + 16080) = 0;
  *((unsigned char *)this + 64324) = 1;
  *(_OWORD *)((char *)this + 64328) = 0u;
  *(_OWORD *)((char *)this + 64344) = v17;
  *((_DWORD *)this + 16090) = 0;
  *((void *)this + 8048) = 0;
  *((void *)this + 8047) = 0;
  *((void *)this + 8046) = (char *)this + 64376;
  *((void *)this + 8051) = 0;
  *((void *)this + 7649) = 0;
  *((void *)this + 7621) = 0;
  TXTextLayout::copyLayout(this, a2);
  TXTextLayout::updateLineBreaksByHardLine(this);
  (*(void (**)(TXTextLayout *, uint64_t))(*(void *)this + 336))(this, 1);
  *((_WORD *)v5 + 4) = *((_WORD *)a2 + 9496);
  v5[10] = *((unsigned char *)a2 + 18994);
  *((_DWORD *)this + 15128) = *((_DWORD *)a2 + 15128);
  std::vector<TXParagraphStyle *>::resize((uint64_t)this + 63736, 0);
  OZChannelBase::operator=(v16, (uint64_t)a2 + 61464);
  *((unsigned char *)this + 63720) = 0;
  *((unsigned char *)this + 63728) = 0;
  *((_DWORD *)this + 15288) = 0;
  v5[456] = *((unsigned char *)a2 + 19440);
  PCString::set((PCString *)this + 7357, (const PCString *)a2 + 7357);
  PCString::set((PCString *)this + 7358, (const PCString *)a2 + 7358);
  *((_DWORD *)this + 14718) = *((_DWORD *)a2 + 14718);
  *((unsigned char *)this + 63760) = *((unsigned char *)a2 + 63760);
  *((unsigned char *)this + 63800) = *((unsigned char *)a2 + 63800);
  if (this != a2)
  {
    std::vector<PCVector3<double>>::__assign_with_size[abi:ne180100]<PCVector3<double>*,PCVector3<double>*>((void *)this + 7977, *((long long **)a2 + 7977), *((long long **)a2 + 7978), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7978) - *((void *)a2 + 7977)) >> 3));
    std::vector<PCVector2<double>>::__assign_with_size[abi:ne180100]<PCVector2<double>*,PCVector2<double>*>((void *)this + 7980, *((long long **)a2 + 7980), *((long long **)a2 + 7981), (uint64_t)(*((void *)a2 + 7981) - *((void *)a2 + 7980)) >> 4);
  }
  *((void *)this + 7983) = *((void *)a2 + 7983);
  *((unsigned char *)this + 63801) = *((unsigned char *)a2 + 63801);
  *((unsigned char *)this + 64392) = *((unsigned char *)a2 + 64392);
  *((void *)this + 8050) = *((void *)a2 + 8050);
  OZChannelBase::setResetCallback((OZChannelBase *)((char *)this + 52376), TXPathResetCallback, 0, 0);
}

void sub_1B75DFAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, OZChannelBool *a13, OZChannel *a14, OZChannelBool *a15, OZChannelColor *a16, OZChannelBool *a17, OZChannelBool *a18, OZChannelEnum *a19, void **a20,uint64_t a21,PCString **a22,PCMutex *a23,void *a24,uint64_t a25,void **a26,uint64_t *a27,std::mutex *a28,uint64_t *a29,OZChannel *a30,OZChannelBool *a31,OZChannelBool *a32,OZChannel *a33,OZChannel *a34,OZChannelBool *a35,OZChannelFolder *a36,OZChannelBool *a37,OZChannelFolder *a38,uint64_t a39,OZChannelFolder *a40,PCEvaluator *a41,OZChannelBool *a42,OZChannelBool *a43,OZChannelBool *a44,OZChannelBool *a45,OZChannelPercent *a46,OZChannelBool *a47,OZChannel *a48,OZChannel *a49,OZChannel *a50,OZChannelPosition *a51,OZChannelPosition *a52,OZChannel2D *a53,OZChannel2D *a54,OZChannelEnum *a55,OZChannelEnum *a56,OZChannelPosition3D *a57,OZChannelPosition3D *a58,uint64_t a59,TXSequenceChannels *a60,OZChannel *a61,OZChannel *a62,OZChannel *a63)
{
  OZValueCache<OZBoundsCacheItem>::~OZValueCache(a12);
  uint64_t v78 = *(void **)v75;
  if (*(void *)v75)
  {
    *(void *)(v75 + 8) = v78;
    operator delete(v78);
  }
  uint64_t v79 = *v74;
  if (*v74)
  {
    *(void *)(v73 + 256) = v79;
    operator delete(v79);
  }
  uint64_t v80 = **(void ***)(v76 - 216);
  if (v80)
  {
    *(void *)(v73 + 176) = v80;
    operator delete(v80);
  }
  OZChannel::~OZChannel((OZChannel *)v73);
  OZChannelBool::~OZChannelBool(a13);
  OZChannel::~OZChannel(a14);
  OZChannelBool::~OZChannelBool(a15);
  OZChannelColor::~OZChannelColor(a16);
  OZChannelBool::~OZChannelBool(a17);
  OZChannelBool::~OZChannelBool(a18);
  OZChannel::~OZChannel(*(OZChannel **)(v76 - 208));
  OZChannelEnum::~OZChannelEnum(a19);
  v81 = *(void **)(*(void *)(v76 - 120) + 144);
  if (v81)
  {
    *(void *)(*(void *)(v76 - 120) + 152) = v81;
    operator delete(v81);
  }
  v82 = *a20;
  if (*a20)
  {
    *(void *)(*(void *)(v76 - 120) + 128) = v82;
    operator delete(v82);
  }
  std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy(a21, *a22);
  PCMutex::~PCMutex(a23);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*(void *)(v76 - 120), *(void **)(*(void *)(v76 - 120) + 8));
  std::deque<PCHash128>::~deque[abi:ne180100](a24);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a25, *a26);
  std::__list_imp<TXTextLayout::HGMetalNodeCacheEntry>::clear(a27);
  PCSharedMutex::~PCSharedMutex(a28);
  std::deque<PCHash128>::~deque[abi:ne180100]((void *)(v72 + 60720));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*(void *)(v76 - 192), *(void **)(*(void *)(v76 - 192) + 8));
  std::__list_imp<TXTextLayout::HGNodeCacheEntry>::clear(a29);
  OZChannel::~OZChannel(a30);
  OZChannel::~OZChannel(*(OZChannel **)(v76 - 200));
  OZChannelBool::~OZChannelBool(a31);
  OZChannelBool::~OZChannelBool(a32);
  OZChannel::~OZChannel(a33);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v76 - 168));
  OZChannel::~OZChannel(a34);
  OZChannelBool::~OZChannelBool(a35);
  OZChannelFolder::~OZChannelFolder(a36);
  OZChannelBool::~OZChannelBool(a37);
  OZChannelFolder::~OZChannelFolder(a38);
  PCString::~PCString(*(PCString **)(v76 - 184));
  PCString::~PCString(*(PCString **)(v76 - 160));
  *(void *)(v76 - 96) = a39;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v76 - 96));
  OZChannelFolder::~OZChannelFolder(a40);
  PCEvaluator::~PCEvaluator(a41);
  OZChannelBool::~OZChannelBool(a42);
  OZChannelBool::~OZChannelBool(a43);
  OZChannelBool::~OZChannelBool(a44);
  OZChannelBool::~OZChannelBool(a45);
  OZChannelPercent::~OZChannelPercent(a46);
  OZChannelBool::~OZChannelBool(a47);
  OZChannel::~OZChannel(a48);
  OZChannel::~OZChannel(*(OZChannel **)(v76 - 152));
  OZChannel::~OZChannel(a49);
  OZChannel::~OZChannel(a50);
  OZChannelPosition::~OZChannelPosition(a51);
  OZChannelPosition::~OZChannelPosition(a52);
  OZChannel2D::~OZChannel2D(a53);
  OZChannel2D::~OZChannel2D(a54);
  OZChannelEnum::~OZChannelEnum(a55);
  OZChannelEnum::~OZChannelEnum(a56);
  OZChannelPosition3D::~OZChannelPosition3D(a57);
  OZChannelPosition3D::~OZChannelPosition3D(a58);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v76 - 144));
  PCArray<unsigned long,PCArray_Traits<unsigned long>>::~PCArray(a59);
  TXSequenceChannels::~TXSequenceChannels(a60);
  OZChannel::~OZChannel(a61);
  OZChannel::~OZChannel(a62);
  OZChannel::~OZChannel(a63);
  OZChannel::~OZChannel(a64);
  OZChannel::~OZChannel(a65);
  OZChannelBool::~OZChannelBool(a66);
  OZChannelPercent::~OZChannelPercent(a67);
  OZChannelPercent::~OZChannelPercent(a68);
  OZChannelFolder::~OZChannelFolder(a69);
  OZChannelPosition3D::~OZChannelPosition3D(a70);
  OZChannelEnum::~OZChannelEnum(a71);
  OZChannelEnum::~OZChannelEnum(a72);
  OZChannel::~OZChannel((OZChannel *)STACK[0x200]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x208]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x210]);
  TXChannelAlignment::~TXChannelAlignment((TXChannelAlignment *)STACK[0x218]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x220]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x228]);
  OZChannelBool::~OZChannelBool((OZChannelBool *)STACK[0x230]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)STACK[0x238]);
  OZChannelBool::~OZChannelBool((OZChannelBool *)STACK[0x240]);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)STACK[0x248]);
  OZChannel::~OZChannel((OZChannel *)STACK[0x250]);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)STACK[0x258]);
  std::__list_imp<unsigned int>::clear((void *)STACK[0x260]);
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear((uint64_t *)STACK[0x268]);
  v83 = *(void **)(v72 + 19272);
  *(void *)(v72 + 19280) = v83;
  if (v83) {
    operator delete(v83);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*(void *)(v76 - 256), *(void **)(v72 + 19232));
  PCString::~PCString(*(PCString **)(v76 - 248));
  OZChannelText::~OZChannelText(*(OZChannelText **)(v76 - 240));
  v84 = *(void **)(v72 + 19024);
  if (v84)
  {
    *(void *)(v72 + 19032) = v84;
    operator delete(v84);
  }
  *(void *)(v76 - 96) = *(void *)(v76 - 232);
  std::vector<TXTabStop>::__destroy_vector::operator()[abi:ne180100]((void ***)(v76 - 96));
  OZLockingElement::~OZLockingElement((OZLockingElement *)v72);
  _Unwind_Resume(a1);
}

void TXTextLayout::copyLayout(TXTextLayout *this, const TXTextLayout *a2)
{
  uint64_t v4 = (char *)this + 19208;
  uint64_t v5 = (char *)a2 + 19208;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__clear[abi:ne180100]((uint64_t *)this + 7353);
  OZChannelBase::operator=((uint64_t)this + 19048, (uint64_t)a2 + 19048);
  PCString::set((PCString *)this + 2400, (const PCString *)a2 + 2400);
  char *v4 = *v5;
  (*(void (**)(TXTextLayout *))(*(void *)this + 1096))(this);
  TXTextLayout::updateDisplayString((PCString *)this, MEMORY[0x1E4F1FA48]);
  TXTextLayout::clearParagraphs(this);
  if (*((void *)a2 + 2378) != *((void *)a2 + 2379)) {
    operator new();
  }
  if (*((void *)this + 2379) == *((void *)this + 2378)) {
    TXTextLayout::createParagraphStylesFromNewLines(this);
  }
  TXTextLayout::rebuildParagraphStyles((PCString *)this);
  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
  v4[112] = v5[112];
  TXSelectionRange::operator=((uint64_t)this + 19248, (uint64_t)a2 + 19248);
  *((_DWORD *)v4 + 29) = *((_DWORD *)v5 + 29);
  OZChannelBase::operator=((uint64_t)this + 57688, (uint64_t)a2 + 57688);
  OZChannelFolder::operator=((uint64_t)this + 54792);
  OZChannelBase::operator=((uint64_t)this + 54928, (uint64_t)a2 + 54928);
  OZChannelBase::operator=((uint64_t)this + 55080, (uint64_t)a2 + 55080);
  OZChannelFolder::operator=((uint64_t)this + 55232);
  OZChannelBase::operator=((uint64_t)this + 55368, (uint64_t)a2 + 55368);
  OZChannelBase::operator=((uint64_t)this + 55520, (uint64_t)a2 + 55520);
  OZChannelPosition::operator=((uint64_t)this + 55672, (uint64_t)a2 + 55672);
  OZChannelPosition::operator=((uint64_t)this + 56376, (uint64_t)a2 + 56376);
  OZChannelBase::operator=((uint64_t)this + 57080, (uint64_t)a2 + 57080);
  OZChannelBase::operator=((uint64_t)this + 57232, (uint64_t)a2 + 57232);
  OZChannelBase::operator=((uint64_t)this + 57384, (uint64_t)a2 + 57384);
  OZChannelBase::operator=((uint64_t)this + 57992, (uint64_t)a2 + 57992);
  *((unsigned char *)this + 52256) = *((unsigned char *)a2 + 52256);
  *(_WORD *)((char *)this + 52257) = *(_WORD *)((char *)a2 + 52257);
  *((void *)this + 2429) = *((void *)a2 + 2429);
  OZChannelBase::operator=((uint64_t)this + 60360, (uint64_t)a2 + 60360);
  *((void *)this + 2408) = *((void *)a2 + 2408);
  if (this != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 19272, *((char **)a2 + 2409), *((void *)a2 + 2410), (uint64_t)(*((void *)a2 + 2410) - *((void *)a2 + 2409)) >> 2);
  }
  *(_OWORD *)((char *)this + 52264) = *(_OWORD *)((char *)a2 + 52264);
  *(_OWORD *)((char *)this + 52280) = *(_OWORD *)((char *)a2 + 52280);
  *(_OWORD *)((char *)this + 52296) = *(_OWORD *)((char *)a2 + 52296);
  *(_OWORD *)((char *)this + 52312) = *(_OWORD *)((char *)a2 + 52312);
  *(_OWORD *)((char *)this + 52328) = *(_OWORD *)((char *)a2 + 52328);
  *(_OWORD *)((char *)this + 52344) = *(_OWORD *)((char *)a2 + 52344);
  *((unsigned char *)this + 52360) = *((unsigned char *)a2 + 52360);
  *((unsigned char *)this + 61200) = *((unsigned char *)a2 + 61200);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 52640), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 52792), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 53240), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 53528), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 53680), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 54128), 0, 0);
  *((_DWORD *)this + 15288) = 0;
  *((void *)this + 7638) = *((void *)this + 7637);
  *((void *)this + 7641) = *((void *)this + 7640);
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::clear((uint64_t)this + 64256);
  *((unsigned char *)this + 63776) = *((unsigned char *)a2 + 63776);
}

void sub_1B75E0598(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4017F5857CLL);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::deleteThis(TXTextLayout *this, OZChannelBase *a2)
{
  uint64_t v4 = (char *)this + 19344;
  uint64_t v5 = (char *)*((void *)this + 2419);
  if (v5 == (char *)this + 19344) {
    goto LABEL_27;
  }
  do
  {
    uint64_t v6 = *((void *)v5 + 2);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 3);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v8 = *(uint64_t **)(v6 + 480);
    unint64_t v9 = *(uint64_t **)(v6 + 488);
    uint64_t v10 = (char *)v9 - (char *)v8;
    unsigned int v11 = 0;
    if ((char *)v9 - (char *)v8 == 8 || v8 == v9)
    {
LABEL_10:
      uint64_t v13 = 0;
      if (v7) {
        goto LABEL_11;
      }
    }
    else
    {
      while ((OZChannelBase *)(*(uint64_t (**)(void))(*(void *)*v8 + 208))() != a2)
      {
        ++v8;
        ++v11;
        if (v8 == v9) {
          goto LABEL_10;
        }
      }
      uint64_t v13 = *v8;
      if (v7) {
LABEL_11:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v10 == 8) {
      break;
    }
    uint64_t v5 = (char *)*((void *)v5 + 1);
    if (v5 == v4) {
      break;
    }
  }
  while (!v13);
  if (v13)
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v13 + 568), MEMORY[0x1E4F1FA48], 0.0);
    TXTextLayout::removeMaterialFromSequenceBehaviors(this, v11);
    TXSequenceChannels::removeMaterialChannelsAtIndex((TXTextLayout *)((char *)this + 25032), v11);
    for (i = (char *)*((void *)this + 2419); i != v4; i = (char *)*((void *)i + 1))
    {
      long long v17 = (OZStyle *)*((void *)i + 2);
      uint64_t v16 = (std::__shared_weak_count *)*((void *)i + 3);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = *((void *)v17 + 60);
      if (v11 >= (unint64_t)((*((void *)v17 + 61) - v18) >> 3)) {
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      }
      OZStyle::unregisterMaterial(v17, *(OZMaterialBase **)(v18 + 8 * v11));
      OZStyle::removeMaterialAtIndex(v17, v11);
      OZStyle::didDeleteMaterialWithFacetAssignment(v17, ValueAsInt);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
    }
    return 1;
  }
LABEL_27:

  return OZSceneNode::deleteThis((TXTextLayout *)((char *)this + 200), a2);
}

void sub_1B75E07A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *TXTextLayout::removeMaterialFromSequenceBehaviors(void *this, unsigned int a2)
{
  int v2 = this + 150;
  int v3 = (void *)this[151];
  if (v3 != this + 150)
  {
    do
    {
      this = (void *)v3[2];
      if (this)
      {
        if (this) {
          this = (void *)TXSequenceBehavior::removeMaterial((TXSequenceBehavior *)this, a2);
        }
      }
      int v3 = (void *)v3[1];
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t non-virtual thunk to'TXTextLayout::deleteThis(TXTextLayout *this, OZChannelBase *a2)
{
  return TXTextLayout::deleteThis((TXTextLayout *)((char *)this - 200), a2);
}

{
  return TXTextLayout::deleteThis((TXTextLayout *)((char *)this - 216), a2);
}

void TXTextLayout::~TXTextLayout(TXTextLayout *this)
{
  int v2 = (char *)this + 60696;
  *(void *)this = &unk_1F10AB348;
  *((void *)this + 25) = &unk_1F10AB810;
  *((void *)this + 27) = &unk_1F10AC0E8;
  *((void *)this + 31) = &unk_1F10AC340;
  *((void *)this + 841) = &unk_1F10AC398;
  *((void *)this + 2372) = &unk_1F10AC470;
  int v3 = (void **)((char *)this + 58824);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__clear[abi:ne180100]((uint64_t *)this + 7353);
  std::__list_imp<TXTextLayout::HGNodeCacheEntry>::clear((uint64_t *)this + 7584);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v2, *((void **)v2 + 1));
  *(void *)int v2 = v2 + 8;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v4 = (void **)*((void *)v2 + 4);
  uint64_t v5 = *((void *)v2 + 5);
  *((void *)v2 + 8) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = *((void *)v2 + 5);
      uint64_t v4 = (void **)(*((void *)v2 + 4) + 8);
      *((void *)v2 + 4) = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 128;
  }
  else
  {
    if (v6 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v8 = 256;
  }
  *((void *)v2 + 7) = v8;
LABEL_8:
  unint64_t v9 = (void **)*((void *)v2 + 29);
  uint64_t v10 = *((void *)v2 + 30);
  *((void *)v2 + 33) = 0;
  unint64_t v11 = v10 - (void)v9;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v9);
      uint64_t v12 = *((void *)v2 + 30);
      unint64_t v9 = (void **)(*((void *)v2 + 29) + 8);
      *((void *)v2 + 29) = v9;
      unint64_t v11 = v12 - (void)v9;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 128;
  }
  else
  {
    if (v11 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v13 = 256;
  }
  *((void *)v2 + 32) = v13;
LABEL_15:
  TXTextLayout::clearParagraphs(this);
  TXTextLayout::clearStyleRuns(this);
  OZRenderState v14 = (void **)((char *)this + 63736);
  unint64_t v15 = (void **)((char *)this + 61096);
  uint64_t v16 = *((void *)this + 7649);
  if (v16)
  {
    std::deque<CMTime>::~deque[abi:ne180100]((void *)(v16 + 48));
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v16 + 24, *(void **)(v16 + 32));
    std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::destroy(v16, *(void **)(v16 + 8));
    MEMORY[0x1BA9BFBA0](v16, 0x10A0C4023076DA7);
    *((void *)this + 7649) = 0;
  }
  long long v17 = (uint64_t *)*((void *)v2 + 34);
  if (v17)
  {
    uint64_t v18 = PCCache<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::~PCCache(v17);
    MEMORY[0x1BA9BFBA0](v18, 0x20C4093837F09);
    *((void *)v2 + 34) = 0;
  }
  uint64_t v19 = (const void *)*((void *)this + 7984);
  if (v19) {
    CFRelease(v19);
  }
  v20 = (void *)*((void *)this + 8051);
  if (v20) {
    CFRelease(v20);
  }
  uint64_t v21 = (*((void *)this + 3131) - *((void *)this + 3130)) >> 3;
  int v22 = v21 - 6;
  if (v21 != 6)
  {
    do
    {
      v20 = (void *)TXSequenceChannels::removeMaterialChannelsAtIndex((TXTextLayout *)((char *)this + 25032), 0);
      --v22;
    }
    while (v22);
  }
  if (TXTextLayout::scaleEmojiToCapHeight((TXTextLayout *)v20))
  {
    unint64_t v23 = (const void *)*((void *)this + 8023);
    if (v23)
    {
      CFRelease(v23);
      *((void *)this + 8023) = 0;
    }
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 64368, *((void **)this + 8047));
  std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::destroy((uint64_t)this + 64296, *((PCString **)this + 8038));
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::~__hash_table((uint64_t)this + 64256);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 64232, *((void **)this + 8030));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 64208, *((void **)this + 8027));
  OZValueCache<OZProjectedBoundsCacheItem>::~OZValueCache((uint64_t)this + 64032);
  OZValueCache<OZBoundsCacheItem>::~OZValueCache((uint64_t)this + 63888);
  v24 = (void *)*((void *)this + 7980);
  if (v24)
  {
    *((void *)this + 7981) = v24;
    operator delete(v24);
  }
  uint64_t v25 = (void *)*((void *)this + 7977);
  if (v25)
  {
    *((void *)this + 7978) = v25;
    operator delete(v25);
  }
  CMTime v26 = *v14;
  if (*v14)
  {
    *((void *)this + 7968) = v26;
    operator delete(v26);
  }
  OZChannel::~OZChannel((OZChannel *)((char *)this + 63568));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 63416));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 63264));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 63112));
  *((void *)this + 7744) = &unk_1F1107698;
  *((void *)this + 7746) = &unk_1F1107A08;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 62960));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((TXTextLayout *)((char *)this + 61952));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 61800));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 61648));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 61464));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 61208));
  uint64_t v27 = (void *)*((void *)this + 7640);
  if (v27)
  {
    *((void *)this + 7641) = v27;
    operator delete(v27);
  }
  uint64_t v28 = *v15;
  if (*v15)
  {
    *((void *)this + 7638) = v28;
    operator delete(v28);
  }
  std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy((uint64_t)this + 61072, *((PCString **)v2 + 48));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 61000));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 60976, *((void **)v2 + 36));
  std::deque<PCHash128>::~deque[abi:ne180100]((void *)this + 7615);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 60896, *((void **)v2 + 26));
  std::__list_imp<TXTextLayout::HGMetalNodeCacheEntry>::clear((uint64_t *)this + 7609);
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 60768));
  std::deque<PCHash128>::~deque[abi:ne180100]((void *)this + 7590);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v2, *((void **)v2 + 1));
  std::__list_imp<TXTextLayout::HGNodeCacheEntry>::clear((uint64_t *)this + 7584);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 60520));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 60360));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 60208));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 60056));
  OZChannel::~OZChannel((OZChannel *)this + 394);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 59760));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 59560));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 59408));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 59280));
  OZChannelBool::~OZChannelBool((OZChannelBool *)this + 389);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 58880));
  PCString::~PCString((PCString *)this + 7358);
  PCString::~PCString((PCString *)this + 7357);
  v36 = v3;
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&v36);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 58696));
  PCEvaluator::~PCEvaluator((TXTextLayout *)((char *)this + 58600));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 58448));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 58296));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 58144));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 57992));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 57840));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 57688));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 57536));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 57384));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 57232));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 57080));
  OZChannelPosition::~OZChannelPosition((TXTextLayout *)((char *)this + 56376));
  OZChannelPosition::~OZChannelPosition((TXTextLayout *)((char *)this + 55672));
  OZChannel2D::~OZChannel2D((TXTextLayout *)((char *)this + 55232));
  OZChannel2D::~OZChannel2D((TXTextLayout *)((char *)this + 54792));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 54536));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 54280));
  OZChannelPosition3D::~OZChannelPosition3D((TXTextLayout *)((char *)this + 53392));
  OZChannelPosition3D::~OZChannelPosition3D((TXTextLayout *)((char *)this + 52504));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 52376));
  *((void *)this + 6525) = &unk_1F10AD6E8;
  int v29 = *((_DWORD *)this + 13052);
  if (v29 < 0) {
    int v30 = 1;
  }
  else {
    int v30 = v29 & ~(v29 >> 31);
  }
  if (v30 == v29)
  {
    uint64_t v31 = *((int *)this + 13053);
    uint64_t v32 = *((void *)this + 6527);
    if ((v31 & 0x80000000) != 0) {
      bzero((void *)(v32 + 8 * v31), 8 * ~v31 + 8);
    }
  }
  else
  {
    if (v30) {
      operator new[]();
    }
    uint64_t v32 = 0;
    uint64_t v33 = *((void *)this + 6527);
    if (v33) {
      MEMORY[0x1BA9BFB70](v33, 0x1000C8077774924);
    }
    *((void *)this + 6527) = 0;
  }
  *((_DWORD *)this + 13052) = v30;
  *((_DWORD *)this + 13053) = 0;
  if (v32) {
    MEMORY[0x1BA9BFB70](v32, 0x1000C8077774924);
  }
  *((void *)this + 6527) = 0;
  *((_DWORD *)this + 13052) = 0;
  TXSequenceChannels::~TXSequenceChannels((TXTextLayout *)((char *)this + 25032));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24880));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24728));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24576));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24424));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 24272));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 24120));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 23968));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 23816));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 23688));
  OZChannelPosition3D::~OZChannelPosition3D((TXTextLayout *)((char *)this + 22800));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 22544));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 22288));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 22136));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 21880));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 21624));
  TXChannelAlignment::~TXChannelAlignment((TXTextLayout *)((char *)this + 20976));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 20720));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 20464));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 20312));
  OZChannelEnum::~OZChannelEnum((TXTextLayout *)((char *)this + 20056));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 19904));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 19752));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19600));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 19448));
  std::__list_imp<unsigned int>::clear((void *)this + 2421);
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear((uint64_t *)this + 2418);
  uint64_t v34 = (void *)*((void *)this + 2409);
  *((void *)this + 2410) = v34;
  if (v34) {
    operator delete(v34);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 19224, *((void **)this + 2404));
  PCString::~PCString((PCString *)this + 2402);
  OZChannelText::~OZChannelText((OZChannelText *)((char *)this + 19048));
  uint64_t v35 = (void *)*((void *)this + 2378);
  if (v35)
  {
    *((void *)this + 2379) = v35;
    operator delete(v35);
  }
  v36 = (void **)((char *)this + 19000);
  std::vector<TXTabStop>::__destroy_vector::operator()[abi:ne180100](&v36);
  OZLockingElement::~OZLockingElement(this);
}

{
  uint64_t vars8;

  TXTextLayout::~TXTextLayout(this);

  JUMPOUT(0x1BA9BFBA0);
}

void *TXTextLayout::clearParagraphs(void *this)
{
  uint64_t v1 = this;
  int v2 = (void **)this[2378];
  int v3 = (void **)this[2379];
  if (v2 != v3)
  {
    do
    {
      this = *v2;
      if (*v2) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
      ++v2;
    }
    while (v2 != v3);
    int v2 = (void **)v1[2378];
  }
  v1[2379] = v2;
  return this;
}

void *TXTextLayout::clearStyleRuns(TXTextLayout *this)
{
  uint64_t v1 = (void *)((char *)this + 19368);
  int v2 = (void *)*((void *)this + 2422);
  if (v2 != (void *)((char *)this + 19368))
  {
    do
    {
      uint64_t v4 = (void *)v2[1];
      uint64_t v10 = (void *)v2[2];
      uint64_t v6 = v10[1];
      uint64_t v5 = (std::__shared_weak_count *)v10[2];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = v6;
      unint64_t v9 = v5;
      (*(void (**)(TXTextLayout *, uint64_t *))(*(void *)this + 272))(this, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      std::list<TXTextStyleRun *>::remove((uint64_t)v1, &v10);
      if (v10) {
        (*(void (**)(void *))(*v10 + 8))(v10);
      }
      int v2 = v4;
    }
    while (v4 != v1);
  }
  return std::__list_imp<unsigned int>::clear(v1);
}

void sub_1B75E1308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'TXTextLayout::~TXTextLayout(TXTextLayout *this)
{
}

{
  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 216));
}

{
  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 248));
}

{
  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 6728));
}

{
  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 18976));
}

{
  uint64_t vars8;

  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 200));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 216));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 248));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 6728));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTextLayout::~TXTextLayout((TXTextLayout *)((char *)this - 18976));

  JUMPOUT(0x1BA9BFBA0);
}

void TXTextLayout::updateDisplayString(PCString *this, const CMTime *a2)
{
  uint64_t v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v8, v4);
  TXChannelString::getString(this + 2381, &v7);
  uint64_t v5 = PCString::cf_str(&v7);
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v5);
  PCString::~PCString(&v7);
  TXTextLayout::applyAllCaps((TXTextLayout *)this, MutableCopy);
  TXTextLayout::applySequenceCharacterOffsets((TXTextLayout *)this, MutableCopy, a2);
  PCString::set(this + 2402, MutableCopy);
  CFRelease(MutableCopy);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v8);
}

void sub_1B75E157C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::createParagraphStylesFromNewLines(TXTextLayout *this)
{
  int v2 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsInt((OZChannel *)((char *)this + 21624), MEMORY[0x1E4F1FA48], 0.0);
  OZChannel::getValueAsInt((OZChannel *)((char *)this + 21880), v2, 0.0);
  if (*((void *)this + 2379) == *((void *)this + 2378)) {
    operator new();
  }
  *((_DWORD *)this + 4831) = 1;
  StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
  unsigned int v4 = PCString::size((PCString *)StringPtr);
  TXChannelString::getString((PCString *)this + 2381, (PCString *)&theString);
  if (v4)
  {
    for (int i = 0; i != v4; ++i)
    {
      UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(theString, i);
      if (TXCharacterSetIsNewline(CharacterAtIndex)) {
        operator new();
      }
    }
  }
  PCString::~PCString((PCString *)&theString);
}

void sub_1B75E18B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  MEMORY[0x1BA9BFBA0](v10, 0x10F1C4017F5857CLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::rebuildParagraphStyles(PCString *this)
{
  uint64_t v1 = this + 2378;
  var0 = (uint64_t *)this[2378].var0;
  if ((uint64_t *)this[2379].var0 == var0) {
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  }
  unsigned int v4 = (TXParagraphStyle *)*var0;
  TXParagraphStyle::setStart(*var0, 0);
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  int v6 = OZHostApplicationDelegateHandler::wantsSameAlignmentForAllLinesOfText(HostApplicationDelegate);
  PCString v7 = this[26].var0;
  int info = v7->info;
  int info_high = HIDWORD(v7->info);
  int data = (int)v7->data;
  int data_high = HIDWORD(v7->data);
  if (info == 792898163 && info_high == 1337411563 && data == -1926054385 && data_high == 1588990368) {
    int v15 = 1;
  }
  else {
    int v15 = v6;
  }
  TXChannelString::getString(this + 2381, &v28);
  uint64_t v16 = PCString::createUniStr(&v28);
  unint64_t v17 = 0;
  LODWORD(v18) = 0;
  while (v17 < PCString::size(&v28))
  {
    if (TXCharacterSetIsNewline(v16[v17]))
    {
      TXParagraphStyle::setLength((uint64_t)v4, ++v17 - *((void *)v4 + 107));
      int Alignment = TXParagraphStyle::getAlignment(v4);
      unint64_t v18 = (v18 + 1);
      v20 = this[2378].var0;
      if (((char *)this[2379].var0 - (char *)v20) >> 3 <= v18) {
        operator new();
      }
      unsigned int v4 = (TXParagraphStyle *)*((void *)&v20->isa + v18);
      if (v15) {
        TXParagraphStyle::setAlignment(*((TXParagraphStyle **)&v20->isa + v18), Alignment, 1);
      }
      TXParagraphStyle::setStart((uint64_t)v4, v17);
    }
    else
    {
      ++v17;
    }
  }
  unsigned int v21 = PCString::size(&v28);
  TXParagraphStyle::setLength((uint64_t)v4, v21 - *((void *)v4 + 107));
  unint64_t v22 = (v18 + 1);
  unint64_t v23 = this[2379].var0;
  for (int i = this[2378].var0; v22 < ((char *)v23 - (char *)i) >> 3; int i = v1->var0)
  {
    uint64_t v25 = &i->isa + v22;
    CMTime v26 = *v25;
    int64_t v27 = (char *)v23 - (char *)(v25 + 1);
    if (v23 != (__CFString *)(v25 + 1)) {
      memmove(&i->isa + v22, v25 + 1, (char *)v23 - (char *)(v25 + 1));
    }
    unint64_t v23 = (__CFString *)((char *)v25 + v27);
    this[2379].var0 = (__CFString *)((char *)v25 + v27);
    if (v26)
    {
      (*(void (**)(void *))(*(void *)v26 + 8))(v26);
      unint64_t v23 = this[2379].var0;
    }
  }
  if (v16) {
    MEMORY[0x1BA9BFB70](v16, 0x1000C80BDFB0063);
  }
  PCString::~PCString(&v28);
}

void sub_1B75E1C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void TXTextLayout::setAllParagraphsDirty(TXParagraphStyle ***this)
{
  int v2 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v5, v2);
  int v3 = this[2378];
  unsigned int v4 = this[2379];
  while (v3 != v4)
    TXParagraphStyle::dirty(*v3++, 1);
  *((unsigned char *)this + 19392) = 1;
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v5);
}

void sub_1B75E1D28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::operator=(uint64_t a1, const void *a2)
{
  unsigned int v4 = (std::mutex *)(a1 + 8);
  PCSharedMutex::lock((std::mutex *)(a1 + 8));
  OZElement::operator=(a1 + 200, a2);
  if (!v5) {
    __cxa_bad_cast();
  }
  int v6 = v5;
  OZChannelBase::operator=(a1 + 24272, (uint64_t)v5 + 24272);
  OZChannelBase::operator=(a1 + 24424, (uint64_t)v6 + 24424);
  OZChannelBase::operator=(a1 + 24576, (uint64_t)v6 + 24576);
  OZChannelBase::operator=(a1 + 24728, (uint64_t)v6 + 24728);
  PCString v7 = (uint64_t *)(a1 + 1200);
  if (a1 + 1200 != *(void *)(a1 + 1208))
  {
    uint64_t v8 = (uint64_t *)(a1 + 1200);
    do
    {
      unint64_t v9 = *(void **)(*v8 + 16);
      unint64_t v10 = v9[1];
      long long v13 = xmmword_1B7E78230;
      if ((OZFactory::isKindOfClass(v10, (int32x4_t *)&v13) & 1) == 0) {
        (*(void (**)(void *))(*v9 + 120))(v9);
      }
      uint64_t v8 = (uint64_t *)*v8;
    }
    while (v8 != *(uint64_t **)(a1 + 1208));
  }
  TXTextLayout::copyLayout((TXTextLayout *)a1, v6);
  if (v6 != (const TXTextLayout *)a1) {
    std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<long,double>,std::__tree_node<std::__value_type<long,double>,void *> *,long>>((uint64_t **)(a1 + 19224), *((void **)v6 + 2403), (void *)v6 + 2404);
  }
  OZChannelFolder::operator=(a1 + 648);
  for (; v7 != *(uint64_t **)(a1 + 1208); PCString v7 = (uint64_t *)*v7)
  {
    unint64_t v11 = *(void **)(*v7 + 16);
    unint64_t v12 = v11[1];
    long long v13 = xmmword_1B7E78230;
    if ((OZFactory::isKindOfClass(v12, (int32x4_t *)&v13) & 1) == 0) {
      (*(void (**)(void *, uint64_t))(*v11 + 96))(v11, a1 + 200);
    }
  }
  TXTextLayout::updateLineBreaksByHardLine((TXTextLayout *)a1);
  PCSharedMutex::unlock(v4);
}

void sub_1B75E1F60(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'TXTextLayout::operator=(uint64_t a1, const void *a2)
{
  TXTextLayout::operator=(a1 - 200, a2);
}

char *TXTextLayout::cloneBehaviorsEffects(TXTextLayout *this, const OZSceneNode *a2, unsigned int a3)
{
  int v6 = (uint64_t *)((char *)this + 200);
  (*(void (**)(char *))(*((void *)this + 25) + 768))((char *)this + 200);
  for (uint64_t i = v6[2394]; (uint64_t *)i != v6 + 2393; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v8 = (OZChannelBase *)(*(uint64_t (**)(void))(**(void **)(i + 16) + 112))(*(void *)(i + 16));
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 1032), v8);
    if (*((void *)this + 146))
    {
      OZStyle::unregisterAllMaterials(*(OZStyle **)(i + 16));
      uint64_t v9 = *(void *)(i + 16);
      if (v9) {
        unint64_t v10 = (OZObjectManipulator *)(v9 + 16);
      }
      else {
        unint64_t v10 = 0;
      }
      OZScene::unregisterObject(*((OZScene **)this + 146), v10);
      OZScene::removeAllDependencies(*((OZScene **)this + 146), *(_DWORD *)(*(void *)(i + 16) + 96));
    }
  }
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear(v6 + 2393);
  TXTextLayout::clearStyleRuns(this);
  if (!v11) {
    __cxa_bad_cast();
  }
  unint64_t v12 = v11;
  long long v13 = (char *)(v11 + 2418);
  uint64_t v14 = v11[2419];
  if ((void *)v14 != v11 + 2418)
  {
    do
    {
      std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,decltype(nullptr),void>(*(const TXTextStyle **)(v14 + 16), &v16);
      if (*(void *)(v14 + 16) == *(void *)(v12[2419] + 16)) {
        RemoveAllMaterialsFromSequenceChannels((TXTextLayout *)((char *)this + 25032));
      }
      TXTextLayout::addStyle((uint64_t)this, (uint64_t)&v16, 0);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      uint64_t v14 = *(void *)(v14 + 8);
    }
    while ((char *)v14 != v13);
  }
  if ((void *)v12[2422] != v12 + 2421) {
    operator new();
  }
  (*(void (**)(uint64_t *))(*v6 + 776))(v6);
  return OZSceneNode::cloneBehaviorsEffects((char *)v6, a2, a3);
}

void sub_1B75E22C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(exception_object);
}

char *non-virtual thunk to'TXTextLayout::cloneBehaviorsEffects(TXTextLayout *this, const OZSceneNode *a2, unsigned int a3)
{
  return TXTextLayout::cloneBehaviorsEffects((TXTextLayout *)((char *)this - 200), a2, a3);
}

double TXTextLayout::didChangeChannelState(TXTextLayout *this, OZChannelBase *a2)
{
  p_var4 = &a2->var4;
  PCURL::PCURL((PCURL *)&v6, @"Text Format Kerning");
  LODWORD(p_var4) = PCString::compare(p_var4, &v6);
  PCString::~PCString(&v6);
  if (!p_var4)
  {
    ParagraphStyleContainingCurrentInsertionPoint = (TXParagraphStyle *)TXTextLayout::getParagraphStyleContainingCurrentInsertionPoint(this);
    if (ParagraphStyleContainingCurrentInsertionPoint) {
      return TXParagraphStyle::dirty(ParagraphStyleContainingCurrentInsertionPoint, 1);
    }
  }
  return result;
}

void sub_1B75E2398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t TXTextLayout::getParagraphStyleContainingCurrentInsertionPoint(TXTextLayout *this)
{
  int v2 = (char *)this + 19256;
  unsigned int v3 = *((_DWORD *)this + 4814);
  unsigned int v4 = (*(uint64_t (**)(TXTextLayout *))(*(void *)this + 216))(this);
  if (v3 >= v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = v3;
  }
  if (v2[40])
  {
    unsigned int v6 = *(_DWORD *)v2;
    unsigned int v7 = (*(uint64_t (**)(TXTextLayout *))(*(void *)this + 216))(this);
    if (v6 >= v7) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = v6;
    }
  }
  else
  {
    unsigned int v8 = v5 - 1;
  }
  uint64_t v9 = *((void *)this + 2378);
  uint64_t v10 = *((void *)this + 2379);
  if (v9 == v10) {
    return *(void *)(v10 - 8);
  }
  while (1)
  {
    uint64_t result = *(void *)v9;
    unint64_t v12 = *(void *)(*(void *)v9 + 856);
    if (v12 <= v8 && *(void *)(result + 864) + v12 > v8) {
      break;
    }
    v9 += 8;
    if (v9 == v10) {
      return *(void *)(v10 - 8);
    }
  }
  return result;
}

double non-virtual thunk to'TXTextLayout::didChangeChannelState(TXTextLayout *this, OZChannelBase *a2)
{
  return TXTextLayout::didChangeChannelState((TXTextLayout *)((char *)this - 216), a2);
}

void TXTextLayout::getIconName(TXTextLayout *this@<X0>, PCURL *a2@<X8>)
{
  if ((*(unsigned int (**)(TXTextLayout *))(*(void *)this + 296))(this))
  {
    uint64_t v4 = *((void *)this + 2419);
    uint64_t v6 = *(void *)(v4 + 16);
    unsigned int v5 = *(std::__shared_weak_count **)(v4 + 24);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (OZChannel::getValueAsInt((OZChannel *)(v6 + 43240), MEMORY[0x1E4F1FA48], 0.0)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = OZ3DExtrusionProperties::environmentType((OZ3DExtrusionProperties *)(v6 + 40520)) == 0;
    }
    int v9 = (*(uint64_t (**)(TXTextLayout *, void))(*(void *)this + 936))(this, MEMORY[0x1E4F1FA48]);
    uint64_t v10 = @"M_LayersList_ObjectIconColor-3DTextWithLighting";
    if (v7) {
      uint64_t v10 = @"M_LayersList_ObjectIconColor-3DText";
    }
    unint64_t v11 = @"M_LayersList_ObjectIconColor-3DTextRasterized";
    if (!v7) {
      unint64_t v11 = @"M_LayersList_ObjectIconColor-3DTextWithLightingRasterized";
    }
    if (v9) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = v10;
    }
    PCURL::PCURL(a2, v12);
    if (v5)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else if ((*(unsigned int (**)(TXTextLayout *, void))(*(void *)this + 936))(this, MEMORY[0x1E4F1FA48]))
  {
    PCURL::PCURL(a2, @"M_LayersList_ObjectIconColor-TextRasterized");
  }
  else
  {
    unsigned int v8 = *(void (**)(void))(**((void **)this + 26) + 80);
    v8();
  }
}

void sub_1B75E2698(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'TXTextLayout::getIconName(TXTextLayout *this@<X0>, PCURL *a2@<X8>)
{
}

void TXTextLayout::getIconNameBW(TXTextLayout *this@<X0>, PCURL *a2@<X8>)
{
  if ((*(unsigned int (**)(TXTextLayout *))(*(void *)this + 296))(this))
  {
    uint64_t v4 = *((void *)this + 2419);
    uint64_t v6 = *(void *)(v4 + 16);
    unsigned int v5 = *(std::__shared_weak_count **)(v4 + 24);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (OZChannel::getValueAsInt((OZChannel *)(v6 + 43240), MEMORY[0x1E4F1FA48], 0.0)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = OZ3DExtrusionProperties::environmentType((OZ3DExtrusionProperties *)(v6 + 40520)) == 0;
    }
    int v9 = (*(uint64_t (**)(TXTextLayout *, void))(*(void *)this + 936))(this, MEMORY[0x1E4F1FA48]);
    uint64_t v10 = @"M_LayersList_ObjectIconGrey-3DTextWithLighting";
    if (v7) {
      uint64_t v10 = @"M_LayersList_ObjectIconGrey-3DText";
    }
    unint64_t v11 = @"M_LayersList_ObjectIconGrey-3DTextRasterized";
    if (!v7) {
      unint64_t v11 = @"M_LayersList_ObjectIconGrey-3DTextWithLightingRasterized";
    }
    if (v9) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = v10;
    }
    PCURL::PCURL(a2, v12);
    if (v5)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else if ((*(unsigned int (**)(TXTextLayout *, void))(*(void *)this + 936))(this, MEMORY[0x1E4F1FA48]))
  {
    PCURL::PCURL(a2, @"M_LayersList_ObjectIconGrey-TextRasterized");
  }
  else
  {
    unsigned int v8 = *(void (**)(void))(**((void **)this + 26) + 88);
    v8();
  }
}

void sub_1B75E28B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'TXTextLayout::getIconNameBW(TXTextLayout *this@<X0>, PCURL *a2@<X8>)
{
}

uint64_t TXTextLayout::getIconID(TXTextLayout *this)
{
  if ((*(unsigned int (**)(TXTextLayout *))(*(void *)this + 296))(this))
  {
    uint64_t v2 = *((void *)this + 2419);
    uint64_t v4 = *(void *)(v2 + 16);
    unsigned int v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (OZChannel::getValueAsInt((OZChannel *)(v4 + 43240), MEMORY[0x1E4F1FA48], 0.0)) {
      BOOL v5 = 0;
    }
    else {
      BOOL v5 = OZ3DExtrusionProperties::environmentType((OZ3DExtrusionProperties *)(v4 + 40520)) == 0;
    }
    int v9 = (*(uint64_t (**)(TXTextLayout *, void))(*(void *)this + 936))(this, MEMORY[0x1E4F1FA48]);
    if (v5) {
      unsigned int v10 = 39;
    }
    else {
      unsigned int v10 = 40;
    }
    if (v5) {
      unsigned int v11 = 37;
    }
    else {
      unsigned int v11 = 38;
    }
    if (v9) {
      uint64_t v6 = v10;
    }
    else {
      uint64_t v6 = v11;
    }
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    return v6;
  }
  if ((*(uint64_t (**)(TXTextLayout *, void))(*(void *)this + 936))(this, MEMORY[0x1E4F1FA48])) {
    return 28;
  }
  BOOL v7 = *(uint64_t (**)(void))(**((void **)this + 26) + 96);

  return v7();
}

void sub_1B75E2A64(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'TXTextLayout::getIconID(TXTextLayout *this)
{
  return TXTextLayout::getIconID((TXTextLayout *)((char *)this - 200));
}

void TXTextLayout::didUndoLastChange(TXTextLayout *this)
{
  uint64_t v2 = (char *)this + 200;
  OZSceneNode::didUndoLastChange((uint64_t)this + 200);
  (*(void (**)(char *))(*((void *)this + 25) + 232))(v2);
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))(v2);
  if (v3)
  {
    uint64_t v4 = (OZScene *)v3;
    for (uint64_t i = *((void *)this + 2419); (TXTextLayout *)i != (TXTextLayout *)((char *)this + 19344); uint64_t i = *(void *)(i + 8))
    {
      uint64_t v6 = *(void *)(i + 16);
      if (v6) {
        BOOL v7 = (OZObjectManipulator *)(v6 + 16);
      }
      else {
        BOOL v7 = 0;
      }
      OZScene::registerObject(v4, v7);
      OZScene::addNodeDependency((uint64_t)v4, *(_DWORD *)(*(void *)(i + 16) + 96), *((_DWORD *)this + 70));
      OZStyle::registerAllMaterials(*(OZScene **)(i + 16));
    }
    unsigned int v8 = (OZDocument *)*((void *)v4 + 198);
    OZDocument::postNotification(v8, 0x80000);
  }
}

void non-virtual thunk to'TXTextLayout::didUndoLastChange(TXTextLayout *this)
{
}

void TXTextLayout::setString(TXTextLayout *this, const PCString *a2, char a3)
{
  uint64_t v6 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v9, v6);
  PCString::PCString(&v8, a2);
  v7.var0 = (__CFString *)&v8;
  TXChannelString::setString((OZChannelBase *)((char *)this + 19048), v7, a3, 0);
  PCString::~PCString(&v8);
  (*(void (**)(TXTextLayout *))(*(void *)this + 1096))(this);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v9);
}

void sub_1B75E2C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void TXTextLayout::getString(PCString *this, PCString *a2)
{
  TXChannelString::getString(this + 2381, &v3);
  PCString::set(a2, &v3);
  PCString::~PCString(&v3);
}

void sub_1B75E2CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void TXTextLayout::getDisplayString(PCString *this@<X0>, PCString *a2@<X8>)
{
  uint64_t v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v5, v4);
  PCString::PCString(a2, this + 2402);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v5);
}

void sub_1B75E2D28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::resetState(TXTextLayout *this)
{
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__clear[abi:ne180100]((uint64_t *)this + 7353);
  uint64_t v2 = *((void *)this + 2379);
  uint64_t v3 = *((void *)this + 2378);
  if ((unint64_t)(v2 - v3) >= 9)
  {
    do
    {
      uint64_t v4 = *(void *)(v2 - 8);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        uint64_t v2 = *((void *)this + 2379);
        uint64_t v3 = *((void *)this + 2378);
      }
      v2 -= 8;
      *((void *)this + 2379) = v2;
    }
    while ((unint64_t)(v2 - v3) > 8);
  }
  if (v2 != v3)
  {
    uint64_t v5 = *(void *)(v2 - 8);
    TXParagraphStyle::setStart(v5, 0);
    TXParagraphStyle::setLength(v5, 0);
  }
  if (*((void *)this + 2423) >= 2uLL)
  {
    do
    {
      uint64_t v6 = *(void **)(*((void *)this + 2421) + 16);
      uint64_t v8 = v6[1];
      PCString v7 = (std::__shared_weak_count *)v6[2];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = v8;
      uint64_t v14 = v7;
      (*(void (**)(TXTextLayout *, uint64_t *))(*(void *)this + 272))(this, &v13);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      (*(void (**)(void *))(*v6 + 8))(v6);
      int v9 = (uint64_t *)*((void *)this + 2421);
      uint64_t v10 = *v9;
      *(void *)(v10 + 8) = v9[1];
      *(void *)v9[1] = v10;
      --*((void *)this + 2423);
      operator delete(v9);
    }
    while (*((void *)this + 2423) > 1uLL);
  }
  *(void *)(*(void *)(*((void *)this + 2421) + 16) + 24) = 0;
  *((unsigned char *)this + 19320) = 0;
  TXTextLayout::resetKernings(this);
  *((void *)this + 2407) = 0;
  if (*((unsigned char *)this + 19296)
    && OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0) == 4)
  {
    int v11 = 0;
    char v12 = 0;
  }
  else
  {
    char v12 = 1;
    int v11 = -1;
  }
  *((_DWORD *)this + 4746) = v11;
  *((unsigned char *)this + 18988) = v12;
}

void sub_1B75E2F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void TXTextLayout::resetKernings(TXTextLayout *this)
{
  uint64_t v2 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v3, v2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 19224, *((void **)this + 2404));
  *((void *)this + 2403) = (char *)this + 19232;
  *((void *)this + 2405) = 0;
  *((void *)this + 2404) = 0;
  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
  (*(void (**)(TXTextLayout *))(*(void *)this + 544))(this);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v3);
}

void sub_1B75E2FE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::resetName(PCString *this)
{
  if (!BYTE2(this[6545].var0))
  {
    PCSharedCount::PCSharedCount(&v6);
    TXChannelString::getString(this + 2381, &v5);
    if (PCString::size(&v5))
    {
      PCString::PCString(&v4, "\n");
      int v2 = PCString::find(&v5, &v4);
      PCString::~PCString(&v4);
      uint64_t v3 = (v2 - 1);
      if (v3 > 0x1C)
      {
        if (PCString::size(&v5) < 0x1F)
        {
          PCString::set((PCString *)&v6, &v5);
          goto LABEL_9;
        }
        PCString::substrTo(&v5, 30, (CFStringRef *)&v4.var0);
        PCString::set((PCString *)&v6, &v4);
      }
      else
      {
        PCString::substrTo(&v5, v3, (CFStringRef *)&v4.var0);
        PCString::set((PCString *)&v6, &v4);
      }
    }
    else
    {
      PCURL::PCURL((PCURL *)&v4, @"Text Name");
      PCString::set((PCString *)&v6, &v4);
    }
    PCString::~PCString(&v4);
LABEL_9:
    OZObjectManipulator::setName((OZObjectManipulator *)&this[27], (const PCString *)&v6, 0);
    PCString::~PCString(&v5);
    PCString::~PCString((PCString *)&v6);
  }
}

void sub_1B75E3134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12)
{
}

void TXTextLayout::updateDisplayStringAndAffectedState(PCString *this, const CMTime *a2)
{
  TXChannelString::getString(this + 2381, &v4);
  PCString::size(&v4);
  PCString::~PCString(&v4);
  TXTextLayout::updateDisplayString(this, a2);
  TXTextLayout::rebuildParagraphStyles(this);
  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
}

void sub_1B75E31F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t TXTextLayout::getNumWords(TXTextLayout *this)
{
  uint64_t v1 = (_DWORD *)((char *)this + 63812);
  uint64_t result = *((unsigned int *)this + 15953);
  if ((result & 0x80000000) != 0)
  {
    uint64_t result = 0;
    _DWORD *v1 = 0;
  }
  return result;
}

void TXTextLayout::getTextObject(TXTextLayout *this@<X0>, TXTextLayout *a2@<X1>, void *a3@<X8>)
{
}

uint64_t TXTextLayout::setSelection(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 19256) = a2;
  *(_DWORD *)(this + 19260) = a3;
  return this;
}

void TXTextLayout::selectAllGlyphs(TXTextLayout *this)
{
  int v2 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v9, v2);
  uint64_t v3 = (TXTextLayout *)((char *)this + 19272);
  TXDiscontinuousSelection::removeAll((void *)this + 2409);
  int v4 = 0;
  PCString v5 = (TXTextLayout *)((char *)this + 19048);
  while (1)
  {
    StringPtr = TXChannelString::getStringPtr(v5);
    if (v4 >= PCString::size((PCString *)StringPtr)) {
      break;
    }
    PCString v7 = TXChannelString::getStringPtr(v5);
    UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(*(CFStringRef *)v7, v4);
    if (!TXCharacterSetIsWhitespace(CharacterAtIndex)) {
      TXDiscontinuousSelection::addChar(v3, v4);
    }
    ++v4;
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v9);
}

void sub_1B75E32EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getParagraphStyleContainingOffset(TXTextLayout *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 2378);
  uint64_t v3 = *((void *)this + 2379);
  while (v2 != v3)
  {
    uint64_t result = *(void *)v2;
    unint64_t v5 = *(void *)(*(void *)v2 + 856);
    if (v5 <= a2 && *(void *)(result + 864) + v5 > a2) {
      return result;
    }
    v2 += 8;
  }
  return *(void *)(v3 - 8);
}

uint64_t TXTextLayout::doLayout(TXTextLayout *this, const OZRenderState *a2, PCHash128 *a3)
{
  uint64_t v3 = (Li3DEngineScene *)MEMORY[0x1F4188790](this);
  unint64_t v5 = v4;
  PCString v7 = v6;
  uint64_t v8 = (uint64_t)v3;
  v121[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  int v9 = (OZLockingGroup *)Li3DEngineScene::sceneManager(v3);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v117, v9);
  uint64_t v10 = v8 + 200;
  if (!(*(uint64_t (**)(uint64_t))(*(void *)(v8 + 200) + 272))(v8 + 200)
    || *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 272))(v8 + 200) + 1584) + 324) != 1
    || ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 296))(v8) & 1) == 0)
  {
    StringPtr = TXChannelString::getStringPtr((TXChannelString *)(v8 + 19048));
    if (PCString::size((PCString *)StringPtr))
    {
      CMTime v116 = *v7;
      uint64_t v115 = 0;
      long long v114 = 0;
      v113 = &v114;
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v121);
      OZRenderParams::OZRenderParams((OZRenderParams *)time2);
      v118.value = (CMTimeValue)&v118;
      *(void *)&v118.timescale = &v118;
      v118.epoch = 0;
      double v12 = OZRenderParams::setState((OZRenderParams *)time2, (const OZRenderState *)v7);
      v103 = (_DWORD *)(v8 + 18984);
      if ((*(uint64_t (**)(uint64_t, double))(*(void *)v10 + 272))(v8 + 200, v12)
        && *(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 272))(v8 + 200) + 1579)
        && *(double *)(v8 + 19432) != 0.0)
      {
        (*(void (**)(uint64_t, uint64_t, double))(*(void *)v8 + 824))(v8, 1, 0.0);
        *(unsigned char *)(v8 + 19392) = 1;
      }
      OZRenderParams::setWorkingColorDescriptionFromRenderNode((uint64_t)time2, v8 + 6728, 0);
      float v13 = (*(float (**)(uint64_t))(*(void *)v10 + 296))(v8 + 200);
      OZRenderParams::setBlendingGamma((uint64_t)time2, v13);
      TXTextLayout::getTextHashForState(v121, v8, time2, 1, (int8x8_t *)&v110);
      if (v5) {
        _OWORD *v5 = *(_OWORD *)&v110.value;
      }
      uint64_t v14 = (TXTimeGlyphPropertiesMap *)TXTextLayout::timeGlyphPropertiesMap((TXTextLayout *)v8);
      TXTimeGlyphPropertiesMap::getHash(v14, v7, (PCWorkingColorVector *)&time1);
      int8x16_t v101 = (int8x16_t)vceqq_s32(*(int32x4_t *)&time1.value, *(int32x4_t *)&v110.value);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(v101))) & 1) == 0)
      {
        int v15 = (int64x2_t *)TXTextLayout::timeGlyphPropertiesMap((TXTextLayout *)v8);
        TXTimeGlyphPropertiesMap::promoteTime(v15, &v116);
      }
      uint64_t v98 = v8 + 200;
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&time1);
      for (uint64_t i = *(void *)(v8 + 19376); i != v8 + 19368; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v17 = *(void *)(i + 16);
        PCHashWriteStream::reset((uint64_t)&time1);
        unint64_t v18 = *(TXTextStyle **)(v17 + 8);
        uint64_t v19 = *(std::__shared_weak_count **)(v17 + 16);
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        CMTime v111 = time2[0];
        TXTextStyle::calcHashForStateAffectingLayout(v18, (PCSerializerWriteStream *)&time1, &v111);
        Hash = PCHashWriteStream::getHash((int8x8_t *)&time1);
        LODWORD(v109.value) = *(_DWORD *)(v17 + 24);
        v111.value = (CMTimeValue)&v109;
        *((_OWORD *)std::__tree<std::__value_type<unsigned int,PCHash128>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCHash128>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCHash128>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)&v113, (unsigned int *)&v109, (uint64_t)&std::piecewise_construct, &v111)+ 2) = *(_OWORD *)Hash->i8;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
      }
      unsigned int v21 = *(uint64_t **)(v8 + 19024);
      unint64_t v22 = *(uint64_t **)(v8 + 19032);
      while (v21 != v22)
        TXParagraphStyle::calcHashForStateAndSetDirty(*v21++);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)&v110.value, *(int32x4_t *)(v8 + 19396))))) & 1) == 0&& !*(unsigned char *)(v8 + 19392))
      {
        BOOL v23 = !TXTextLayout::isAnyParagraphDirty((TXTextLayout *)v8);
        if ((vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1B7E78240, v101)) & 0xF) != 0) {
          BOOL v23 = 0;
        }
        if (v23)
        {
          PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&time1);
          std::__list_imp<unsigned int>::clear(&v118);
          OZRenderParams::~OZRenderParams((OZRenderParams *)time2);
LABEL_147:
          PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v121);
          std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v113, v114);
          goto LABEL_148;
        }
      }
      v102 = v7;
      uint64_t v24 = v8 + 1200;
      uint64_t v25 = *(void *)(v8 + 1208);
      if (v25 != v8 + 1200)
      {
        do
        {
          CMTime v26 = *(const void **)(v25 + 16);
          if (v26)
          {
            if (v27)
            {
              PCString v28 = v27;
              if (OZChannelBase::testFlag((OZChannelBase *)(v27 + 3336), 2)
                && OZChannelBase::testFlag((OZChannelBase *)(v28 + 3488), 2))
              {
                goto LABEL_39;
              }
              goto LABEL_38;
            }
            if (v29)
            {
              int v30 = v29;
              if (((*(uint64_t (**)(void *, uint64_t, void, void))(*(void *)v29 + 616))(v29, 1045, 0, 0) & 1) == 0&& ((*(uint64_t (**)(void *, uint64_t, void, void))(*(void *)v30 + 616))(v30, 1004, 0, 0) & 1) == 0)
              {
                goto LABEL_39;
              }
LABEL_38:
              TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)v8);
              goto LABEL_39;
            }
            {
              goto LABEL_38;
            }
          }
LABEL_39:
          uint64_t v25 = *(void *)(v25 + 8);
        }
        while (v25 != v24);
      }
      *(_OWORD *)(v8 + 19396) = *(_OWORD *)&v110.value;
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&time1);
      std::__list_imp<unsigned int>::clear(&v118);
      OZRenderParams::~OZRenderParams((OZRenderParams *)time2);
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v121);
      uint64_t v31 = (TXTimeGlyphPropertiesMap *)TXTextLayout::timeGlyphPropertiesMap((TXTextLayout *)v8);
      TXTimeGlyphPropertiesMap::setHash(v31, &v116, (const PCHash128 *)(v8 + 19396));
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v121);
      uint64_t v32 = v102;
      uint64_t v33 = *(void *)(v8 + 19352);
      if (v33 != v8 + 19344)
      {
        uint64_t v34 = (const CMTime *)MEMORY[0x1E4F1FA48];
        do
        {
          OZChannel::getValueAsDouble((OZChannel *)(*(void *)(v33 + 16) + 5504), v34, 0.0);
          PCHashWriteStream::writeValue(v121, v35);
          uint64_t v33 = *(void *)(v33 + 8);
        }
        while (v33 != v8 + 19344);
      }
      v36 = PCHashWriteStream::getHash(v121);
      __int32 v37 = v36->i32[1];
      __int32 v38 = v36[1].i32[0];
      __int32 v39 = v36[1].i32[1];
      BOOL v43 = *(_DWORD *)(v8 + 19412) != v36->i32[0]
         || *(_DWORD *)(v8 + 19416) != v37
         || *(_DWORD *)(v8 + 19420) != v38
         || *(_DWORD *)(v8 + 19424) != v39;
      *(_DWORD *)(v8 + 19412) = v36->i32[0];
      *(_DWORD *)(v8 + 19416) = v37;
      *(_DWORD *)(v8 + 19420) = v38;
      *(_DWORD *)(v8 + 19424) = v39;
      for (uint64_t j = *(void *)(v8 + 19024); ; j += 8)
      {
        if (j == *(void *)(v8 + 19032))
        {
          char v45 = 1;
          goto LABEL_62;
        }
        if (*(unsigned char *)(*(void *)j + 872)) {
          break;
        }
      }
      char v45 = 0;
      *(_DWORD *)(v8 + 61152) = 0;
      *(void *)(v8 + 61104) = *(void *)(v8 + 61096);
      *(void *)(v8 + 61128) = *(void *)(v8 + 61120);
LABEL_62:
      if (*(unsigned char *)(v8 + 19321)) {
        BOOL v43 = 1;
      }
      if (v43) {
        (*(void (**)(uint64_t, CMTime *))(*(void *)v8 + 1088))(v8, &v116);
      }
      if ((TXTextLayout::shouldScaleToBothMargins((TXTextLayout *)v8) & 1) == 0) {
        OZChannel::setInitialValue((OZChannel *)(v8 + 61464), 1.0, 1);
      }
      __asm { FMOV            V0.2D, #1.0 }
      long long v99 = _Q0;
      if (*(unsigned char *)(v8 + 19392) || TXTextLayout::isAnyParagraphDirty((TXTextLayout *)v8))
      {
        *(_OWORD *)(v8 + 61616) = v99;
        char v50 = 1;
      }
      else
      {
        char v50 = 0;
      }
      if ((TXTextLayout::shouldScaleToLRMargins((TXTextLayout *)v8) & 1) != 0
        || (TXTextLayout::shouldScaleProportionallyToLeftRightMargins((TXTextLayout *)v8) & 1) != 0
        || (TXTextLayout::shouldScaleToTBMargins((TXTextLayout *)v8) & 1) != 0
        || TXTextLayout::hasLinkedMarginScale((TXTextLayout *)v8))
      {
        if ((v50 & 1) == 0) {
          *(_OWORD *)(v8 + 61616) = v99;
        }
        TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)v8);
      }
      if (OZChannel::getValueAsInt((OZChannel *)(v8 + 20720), MEMORY[0x1E4F1FA48], 0.0))
      {
        if (OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 1
          || (double v51 = 0.0, OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 3))
        {
          OZChannel::getValueAsDouble((OZChannel *)(v8 + 24576), MEMORY[0x1E4F1FA48], 0.0);
          double v53 = v52;
          OZChannel::getValueAsDouble((OZChannel *)(v8 + 24728), MEMORY[0x1E4F1FA48], 0.0);
LABEL_85:
          double v51 = v53 - v54 + 1.0;
        }
      }
      else if (OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 1 {
             || (double v51 = 0.0,
      }
                 OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 3))
      {
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 24424), MEMORY[0x1E4F1FA48], 0.0);
        double v53 = v55;
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 24272), MEMORY[0x1E4F1FA48], 0.0);
        goto LABEL_85;
      }
      if (((TXTextLayout::shouldScaleToLRMargins((TXTextLayout *)v8) & 1) != 0
         || TXTextLayout::shouldScaleProportionallyToLeftRightMargins((TXTextLayout *)v8))
        && !OZChannel::getValueAsInt((OZChannel *)(v8 + 20720), MEMORY[0x1E4F1FA48], 0.0)
        || TXTextLayout::shouldScaleToTBMargins((TXTextLayout *)v8)
        && OZChannel::getValueAsInt((OZChannel *)(v8 + 20720), MEMORY[0x1E4F1FA48], 0.0))
      {
        double v51 = 0.0;
      }
      double v56 = fabs(v51);
      int v57 = TXTextLayout::doLayoutForParagraphs((TXTextLayout *)v8, v56, v102);
      if ((v45 & 1) == 0
        && OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E4F1FA48], 0.0) != 3
        && OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E4F1FA48], 0.0) != 4)
      {
        std::vector<int>::size_type v58 = ((*(void *)(v8 + 58832) - *(void *)(v8 + 58824)) >> 4);
        std::vector<unsigned int>::resize((std::vector<int> *)(v8 + 61096), v58);
        std::vector<unsigned int>::resize((std::vector<int> *)(v8 + 61120), v58);
        *(void *)(v8 + 61144) = 0;
        *(unsigned char *)(v8 + 61154) = 0;
      }
      v59 = (CMTime *)MEMORY[0x1E4F1FA48];
      if (!OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E4F1FA48], 0.0)
        || OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 2)
      {
        v60 = *(TXParagraphStyle ***)(v8 + 19024);
        v61 = *(TXParagraphStyle ***)(v8 + 19032);
        if ((((char *)v61 - (char *)v60) & 0x7FFFFFFF0) != 0) {
          int v62 = v57;
        }
        else {
          int v62 = 0;
        }
        for (double k = 0.0; v60 != v61; ++v60)
        {
          v64 = *v60;
          if (k < *((double *)*v60 + 115)) {
            double k = *((double *)*v60 + 115);
          }
          if (v62
            && (TXParagraphStyle::getJustification(*v60)
             || TXParagraphStyle::getAlignment(v64)))
          {
            TXParagraphStyle::dirty(v64, 1);
          }
        }
        *(double *)(v8 + 59720) = k;
        uint64_t v32 = v102;
        TXTextLayout::doLayoutForParagraphs((TXTextLayout *)v8, k, v102);
      }
      if (v57)
      {
        if ((OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 1
           || OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 3
           || OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 4)
          && ((TXTextLayout::shouldScaleToLRMargins((TXTextLayout *)v8) & 1) != 0
           || TXTextLayout::shouldScaleProportionallyToLeftRightMargins((TXTextLayout *)v8)))
        {
          TXTextLayout::shrinkToLeftRightMargins((TXTextLayout *)v8, v32);
        }
        if ((OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 1
           || OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 3
           || OZChannel::getValueAsInt((OZChannel *)(v8 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 4)
          && TXTextLayout::shouldScaleToTBMargins((TXTextLayout *)v8))
        {
          TXTextLayout::shrinkToTopBottomMargins((TXTextLayout *)v8, v56, v32);
        }
      }
      TXTextLayout::getNumLinesInParagraphBounds((TXTextLayout *)v8);
      if (TXTextLayout::shouldScaleToBothMargins((TXTextLayout *)v8)
        && (((*(unsigned int (**)(uint64_t))(*(void *)v8 + 1144))(v8) & v57 & 1) != 0
         || ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 1144))(v8) & 1) == 0))
      {
        (*(void (**)(uint64_t, CMTime *))(*(void *)v8 + 1152))(v8, v32);
      }
      TXTextLayout::doMotionLayout((TXTextLayout *)v8, (const OZRenderState *)v32);
      uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v98 + 272))(v98);
      __asm { FMOV            V0.2D, #-1.0 }
      long long v100 = _Q0;
      if (!v65) {
        goto LABEL_135;
      }
      uint64_t v67 = *(void *)(v8 + 1208);
      if (v67 == v24)
      {
LABEL_133:
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 59560), MEMORY[0x1E4F1FA48], 0.0);
        uint64_t v32 = v102;
        if (v71 != 0.0)
        {
          OZChannel::setValue((OZChannel *)(v8 + 59560), MEMORY[0x1E4F1FA48], 0.0, 1);
          *(_DWORD *)(v8 + 59712) = 0;
          TXTextLayout::doMotionLayout((TXTextLayout *)v8, (const OZRenderState *)v102);
        }
LABEL_135:
        TXTextLayout::updateLineBreaks((TXTextLayout *)v8);
        TXTextLayout::performLayoutWithPath((TXTextLayout *)v8, v32);
        *(unsigned char *)(v8 + 19392) = 0;
        *(unsigned char *)(v8 + 19321) = 0;
        *(_OWORD *)(v8 + 59024) = v100;
        *(_OWORD *)(v8 + 59088) = xmmword_1B7E736F0;
        *(_OWORD *)(v8 + 59072) = xmmword_1B7E736F0;
        *(_OWORD *)(v8 + 59056) = xmmword_1B7E736F0;
        if (v115)
        {
          OZRenderParams::OZRenderParams((OZRenderParams *)&time1);
          OZRenderParams::setState((OZRenderParams *)&time1, (const OZRenderState *)v32);
          uint64_t v72 = *(uint64_t **)(v8 + 19024);
          uint64_t v73 = *(uint64_t **)(v8 + 19032);
          while (v72 != v73)
            TXParagraphStyle::calcHashForStateAndSetDirty(*v72++);
          OZRenderParams::~OZRenderParams((OZRenderParams *)&time1);
        }
        uint64_t v74 = *v103;
        if (v74 != -1)
        {
          (*(void (**)(uint64_t, uint64_t, void, double))(*(void *)v8 + 832))(v8, v74, *(unsigned __int8 *)(v8 + 18988), 0.0);
          _DWORD *v103 = -1;
        }
        for (uint64_t m = *(void *)(v8 + 1208); m != v24; uint64_t m = *(void *)(m + 8))
        {
          uint64_t v76 = *(const void **)(m + 16);
          if (v76)
          {
            if (v77) {
              v77[584] = 1;
            }
          }
        }
        goto LABEL_147;
      }
      while (1)
      {
        v68 = *(const void **)(v67 + 16);
        if (v68)
        {
          if (v69)
          {
            v70 = v69;
            if ((*(unsigned int (**)(void))(v69[2] + 24))())
            {
              if ((*(unsigned int (**)(void *))(*v70 + 760))(v70)) {
                break;
              }
            }
          }
        }
        uint64_t v67 = *(void *)(v67 + 8);
        if (v67 == v24) {
          goto LABEL_133;
        }
      }
      BOOL ComputeOffsetForPreInceptionProjects = TXTextScrollBehavior::getComputeOffsetForPreInceptionProjects((TXTextScrollBehavior *)v70);
      uint64_t v80 = *(uint64_t (**)(void *))(*v70 + 760);
      if (ComputeOffsetForPreInceptionProjects)
      {
        *(_DWORD *)(v8 + 59712) = v80(v70);
        *(_OWORD *)&time2[0].value = 0uLL;
        *(_OWORD *)&time2[0].epoch = v100;
        TXTextLayout::getTypographicBounds(v8, (uint64_t)time2, v102, 1, 0);
        double v81 = *(double *)&time2[1].value;
        int v82 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v98 + 272))(v98) + 348);
        (*(void (**)(CMTime *__return_ptr, void *))(*v70 + 608))(&time1, v70);
        CMTime v118 = v120;
        uint64_t v83 = (*(uint64_t (**)(uint64_t))(*(void *)v98 + 272))(v98);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v83 + 336), (__n128 *)&v111);
        operator/((long long *)&v118.value, (uint64_t)&v111, (uint64_t)&time);
        double v84 = (CMTimeGetSeconds(&time) + -1.0) * *((double *)v70 + 483) - (v81 + (double)v82);
        uint64_t v32 = v102;
        if (v84 > 0.0)
        {
          double v85 = *(_DWORD *)(v8 + 59712) == 1
              ? (double)(*(_DWORD *)(v8 + 19324) - 1)
              : (double)(unint64_t)(((uint64_t)(*(void *)(v8 + 19032) - *(void *)(v8 + 19024)) >> 3) - 1);
          if (v85 > 0.0)
          {
            OZChannel::setValue((OZChannel *)(v8 + 59560), MEMORY[0x1E4F1FA48], v84 / v85, 1);
            TXTextLayout::doMotionLayout((TXTextLayout *)v8, (const OZRenderState *)v102);
          }
        }
        goto LABEL_135;
      }
      *(_DWORD *)(v8 + 59712) = v80(v70);
      int v86 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)(v8 + 200) + 272))() + 348);
      double v87 = 1.0;
      if (*(unsigned char *)(theApp + 81) && (*(uint64_t (**)(uint64_t))(*(void *)v98 + 272))(v98))
      {
        uint64_t v88 = (*(uint64_t (**)(uint64_t))(*(void *)v98 + 272))(v98);
        int HostAppProjectHeight = OZSceneSettings::getHostAppProjectHeight((OZSceneSettings *)(v88 + 336));
        double v87 = (double)HostAppProjectHeight
            / (float)*(int *)((*(uint64_t (**)(uint64_t))(*(void *)v98 + 272))(v98) + 348);
      }
      TXTextScrollBehavior::getContentBounds((TXTextScrollBehavior *)v70, v102, (uint64_t)&time1);
      double v90 = *(double *)&v120.value;
      CurrentConversion = OZMEChannelTimeConverter::GetCurrentConversion(v91);
      v93 = CurrentConversion;
      memset(&v111, 0, sizeof(v111));
      if (CurrentConversion
        && (CMTime time1 = *(CMTime *)((char *)CurrentConversion + 76), time2[0] = *v59, CMTimeCompare(&time1, time2)))
      {
        CMTime v111 = *(CMTime *)((char *)v93 + 76);
      }
      else
      {
        uint64_t v94 = (*(uint64_t (**)(uint64_t))(*(void *)v98 + 272))(v98);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v94 + 336), (__n128 *)&v111);
        memset(&v110, 0, sizeof(v110));
        if (!v93)
        {
          CMTimeMake(&v110, 1, 1);
          goto LABEL_167;
        }
      }
      CMTime v110 = *(CMTime *)((char *)v93 + 52);
LABEL_167:
      (*(void (**)(CMTime *__return_ptr, void *))(*v70 + 608))(&time1, v70);
      memset(&v109, 0, sizeof(v109));
      time2[0] = v120;
      operator*((long long *)&time2[0].value, (uint64_t)&v110, (uint64_t)&v109);
      memset(&v108, 0, sizeof(v108));
      OZChannel::getValueAsDouble((OZChannel *)(v70 + 386), MEMORY[0x1E4F1FA48], 0.0);
      uint64_t v32 = v102;
      operator*(&v110, &v108, v95);
      operator*((long long *)&v111.value, (uint64_t)&v108, (uint64_t)&v105);
      time2[0] = v109;
      CMTime v118 = v105;
      PC_CMTimeSaferSubtract(time2, &v118, (uint64_t)&v106);
      operator/(&v106, (uint64_t)&v111, (uint64_t)&v107);
      double v96 = (CMTimeGetSeconds(&v107) + -1.0) * *((double *)v70 + 483) - (v87 * (double)v86 + v87 * v90);
      if (v96 > 0.0)
      {
        double v97 = *(_DWORD *)(v8 + 59712) == 1
            ? (double)(*(_DWORD *)(v8 + 19324) - 1)
            : (double)(unint64_t)(((uint64_t)(*(void *)(v8 + 19032) - *(void *)(v8 + 19024)) >> 3) - 1);
        if (v97 > 0.0)
        {
          OZChannel::setValue((OZChannel *)(v8 + 59560), MEMORY[0x1E4F1FA48], v96 / v97 / v87, 1);
          TXTextLayout::doMotionLayout((TXTextLayout *)v8, (const OZRenderState *)v102);
        }
      }
      goto LABEL_135;
    }
    TXTextLayout::doLayoutForEmptyString((TXTextLayout *)v8);
  }
LABEL_148:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v117);
  return 0;
}

void sub_1B75E47E8(_Unwind_Exception *a1)
{
}

uint64_t TXTextLayout::getHardLine(TXTextLayout *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 2378);
  uint64_t v3 = *((void *)this + 2379);
  if (v2 == v3) {
    return ((unint64_t)(v3 - v2) >> 3) - 1;
  }
  uint64_t result = 0;
  uint64_t v5 = v2;
  while (1)
  {
    unint64_t v6 = *(void *)(*(void *)v5 + 856);
    if (v6 <= a2 && *(void *)(*(void *)v5 + 864) + v6 > a2) {
      break;
    }
    v5 += 8;
    uint64_t result = (result + 1);
    if (v5 == v3) {
      return ((unint64_t)(v3 - v2) >> 3) - 1;
    }
  }
  return result;
}

uint64_t TXTextLayout::getParagraphStyleAtIndex(TXTextLayout *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 2378);
  if (a2 >= (unint64_t)((*((void *)this + 2379) - v2) >> 3)) {
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  }
  return *(void *)(v2 + 8 * a2);
}

uint64_t *TXTextLayout::getComposedCharacter(TXTextLayout *this, unsigned int a2)
{
  uint64_t v2 = (void *)((char *)this + 64296);
  unsigned int v15 = a2;
  uint64_t v3 = v2 + 1;
  for (uint64_t i = (uint64_t *)v2[1]; i; uint64_t i = (uint64_t *)*i)
  {
    unsigned int v5 = *((_DWORD *)i + 8);
    if (v5 <= a2)
    {
      if (v5 >= a2)
      {
        uint64_t v16 = &v15;
        float v13 = std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v2, &v15, (uint64_t)&std::piecewise_construct, &v16);
        return v13 + 5;
      }
      ++i;
    }
  }
  unint64_t v6 = (void *)*v2;
  if ((void *)*v2 == v3) {
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v7 = v6[6];
    if (v7 <= a2 && v6[7] + v7 > a2) {
      break;
    }
    int v9 = (void *)v6[1];
    if (v9)
    {
      do
      {
        uint64_t v10 = v9;
        int v9 = (void *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        uint64_t v10 = (void *)v6[2];
        BOOL v11 = *v10 == (void)v6;
        unint64_t v6 = v10;
      }
      while (!v11);
    }
    unint64_t v6 = v10;
    if (v10 == v3) {
      goto LABEL_21;
    }
  }
  if (v6 == v3)
  {
LABEL_21:
    unsigned int v14 = 0;
    uint64_t v16 = &v14;
    float v13 = std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v2, &v14, (uint64_t)&std::piecewise_construct, &v16);
    return v13 + 5;
  }
  return v6 + 5;
}

void TXTextLayout::addStyle(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    if (v4)
    {
      unsigned int v5 = *(std::__shared_weak_count **)(a2 + 8);
      unint64_t v6 = v4;
      uint64_t v7 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void **, void))(*(void *)a1 + 280))(a1, &v6, 0);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
}

void sub_1B75E4B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'TXTextLayout::addStyle(uint64_t a1, uint64_t a2)
{
}

void TXTextLayout::addStyle(TXTextLayout *this, OZSceneNode **a2)
{
  std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle const&,void>(a2, &v5);
  uint64_t v3 = v5;
  int v4 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(TXTextLayout *, uint64_t *))(*(void *)this + 264))(this, &v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1B75E4C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'TXTextLayout::addStyle(TXTextLayout *this, OZSceneNode **a2)
{
}

uint64_t MaterialSequenceIDIncrement(void)
{
  return 200;
}

uint64_t NextAvailableMaterialSequenceID(TXSequenceChannels *a1)
{
  uint64_t v1 = &v14;
  unsigned int v14 = &v14;
  unsigned int v15 = &v14;
  uint64_t v16 = 0;
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *((void *)a1 + 2) - v2;
  if ((unint64_t)v3 < 0x29)
  {
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v4 = v3 >> 3;
    unint64_t v5 = 5;
    uint64_t v6 = 1;
    uint64_t v7 = &v14;
    do
    {
      int v9 = operator new(0x18uLL);
      void *v9 = v7;
      v9[1] = &v14;
      v7[1] = v9;
      unint64_t v5 = (v6 + 5);
      unsigned int v14 = v9;
      uint64_t v16 = v6++;
      uint64_t v7 = (void **)v9;
      *((_DWORD *)v9 + 4) = v8;
    }
    while (v4 > v5);
    uint64_t v1 = v15;
    unint64_t v10 = v6 - 1;
  }
  std::list<unsigned int>::__sort<std::__less<void,void>>((uint64_t)v1, (uint64_t)&v14, v10, (uint64_t)&v17);
  BOOL v11 = v15;
  for (i = 2000; v11 != &v14; BOOL v11 = (void **)v11[1])
  {
    if (i == *((_DWORD *)v11 + 4)) {
      uint64_t i = (i + 200);
    }
    else {
      uint64_t i = i;
    }
  }
  std::__list_imp<unsigned int>::clear(&v14);
  return i;
}

void sub_1B75E4DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t OZMaterialBase::setSequenceID(OZMaterialBase *this, unsigned int a2)
{
  uint64_t v2 = (OZChannelBase *)((char *)this + 720);
  OZChannel::setValue((OZChannel *)((char *)this + 720), MEMORY[0x1E4F1FA48], (double)a2, 0);
  OZChannelBase::finishInitializing(v2);

  return OZChannel::setDefaultToCurrentValue((OZChannel *)v2);
}

void *std::list<std::shared_ptr<TXTextStyle>>::push_back(uint64_t *a1, void *a2)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v5 = a2[1];
  result[2] = *a2;
  result[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *a1;
  *uint64_t result = *a1;
  result[1] = a1;
  *(void *)(v6 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

void *RemoveAllMaterialsFromSequenceBehaviors(void *result)
{
  uint64_t v1 = result + 150;
  uint64_t v2 = (void *)result[151];
  if (v2 != result + 150)
  {
    do
    {
      uint64_t result = (void *)v2[2];
      if (result)
      {
        if (result) {
          uint64_t result = RemoveAllMaterialsFromSequenceChannels((TXSequenceChannels *)(result + 102));
        }
      }
      uint64_t v2 = (void *)v2[1];
    }
    while (v2 != v1);
  }
  return result;
}

void *AddAllMaterialsToSequenceBehaviors(void *result, char *a2)
{
  uint64_t v2 = result + 150;
  uint64_t v3 = (void *)result[151];
  if (v3 != result + 150)
  {
    do
    {
      uint64_t result = (void *)v3[2];
      if (result)
      {
        if (result) {
          uint64_t result = AddAllMaterialsToSequenceChannels(a2, (TXSequenceChannels *)(result + 102));
        }
      }
      uint64_t v3 = (void *)v3[1];
    }
    while (v3 != v2);
  }
  return result;
}

OZScene *ReplaceAllMaterialsInStyles(OZScene *result, uint64_t a2)
{
  uint64_t v2 = (char *)result + 19344;
  uint64_t v3 = *((void *)result + 2419);
  if ((OZScene *)v3 != (OZScene *)((char *)result + 19344))
  {
    do
    {
      while (1)
      {
        uint64_t result = *(OZScene **)(v3 + 16);
        uint64_t v5 = (OZMaterialBase **)*((void *)result + 60);
        if (*((OZMaterialBase ***)result + 61) == v5) {
          break;
        }
        OZStyle::unregisterMaterial(result, *v5);
        OZStyle::removeMaterialAtIndex(*(OZStyle **)(v3 + 16), 0);
      }
      uint64_t v6 = *(void **)a2;
      uint64_t v7 = *(void **)(a2 + 8);
      while (v6 != v7)
      {
        int v8 = (const void *)(*(uint64_t (**)(void, void, uint64_t))(**(void **)(*v6 + 8) + 24))(*(void *)(*v6 + 8), *v6, 2);
        if (v8) {
        else
        }
          int v9 = 0;
        OZStyle::addMaterial(*(OZStyle **)(v3 + 16), v9);
        uint64_t result = OZStyle::registerMaterial(*(OZStyle **)(v3 + 16), v9);
        ++v6;
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while ((char *)v3 != v2);
  }
  return result;
}

void TXTextLayout::setStyle(unsigned int *a1, TXTextStyle **a2, unsigned char *a3)
{
  if (*((void *)a1 + 2420))
  {
    uint64_t v6 = *((void *)a1 + 2419);
    int v8 = *(const TXTextStyle **)(v6 + 16);
    uint64_t v7 = *(std::__shared_weak_count **)(v6 + 24);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t isEnabled = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 296))(a1);
    unint64_t v10 = *a2;
    if (*((_DWORD *)*a2 + 12238) != 1)
    {
      unint64_t isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)v10 + 40520), 1, 1);
      unint64_t v10 = *a2;
    }
    int v11 = StyleWillReplaceMaterial(v10, v8);
    if (isEnabled != (*(unsigned int (**)(unsigned int *))(*(void *)a1 + 296))(a1)) {
      TXTextLayout::didToggleIs3D((TXTextLayout *)a1, isEnabled);
    }
    uint64_t v12 = *((void *)*a2 + 60);
    if (*((void *)*a2 + 61) == v12)
    {
      TXTextStyle::addDefaultMaterial(*a2);
      uint64_t v12 = *((void *)*a2 + 60);
    }
    if (!OZChannel::getValueAsInt((OZChannel *)(*(void *)v12 + 720), MEMORY[0x1E4F1FA48], 0.0))
    {
      float v13 = (OZMaterialBase *)**((void **)*a2 + 60);
      unsigned int AvailableMaterialSequenceID = NextAvailableMaterialSequenceID((TXSequenceChannels *)(a1 + 6258));
      OZMaterialBase::setSequenceID(v13, AvailableMaterialSequenceID);
    }
    unsigned int v15 = a1 + 4814;
    if (a3) {
      *a3 = v11;
    }
    unsigned int v16 = *v15;
    unsigned int v17 = a1[4815];
    if (*v15 == v17)
    {
      if (v11)
      {
        RemoveAllMaterialsFromSequenceBehaviors(a1);
        RemoveAllMaterialsFromSequenceChannels((TXSequenceChannels *)(a1 + 6258));
        ReplaceAllMaterialsInStyles((OZScene *)a1, (uint64_t)*a2 + 480);
      }
      if (*((unsigned char *)*a2 + 49857))
      {
        TXTextLayout::getCurrentStyleForInsertion((uint64_t)a1, &v27);
        TXTextStyle::copyStyle((Li3DEngineScene **)v27, *a2);
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
      }
      else
      {
        for (uint64_t i = *((void *)a1 + 2419); (unsigned int *)i != a1 + 4836; uint64_t i = *(void *)(i + 8))
          TXTextStyle::copyStyle(*(Li3DEngineScene ***)(i + 16), *a2);
      }
      if (v11)
      {
        AddAllMaterialsToSequenceChannels((char *)a2, (TXSequenceChannels *)(a1 + 6258));
        AddAllMaterialsToSequenceBehaviors(a1, (char *)a2);
      }
    }
    else
    {
      unsigned int v18 = v17 - v16;
      unsigned int v20 = v16 - v17;
      BOOL v19 = v16 > v17;
      if (v16 >= v17) {
        unsigned int v16 = a1[4815];
      }
      if (v19) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = v18;
      }
      v30[0] = v16;
      v30[1] = v21;
      if (*((_DWORD *)*a2 + 12238) != 0xFFFF) {
        TXTextLayout::splitStyleRunsInRange((Li3DEngineScene *)a1, v30);
      }
      if (v11)
      {
        RemoveAllMaterialsFromSequenceBehaviors(a1);
        RemoveAllMaterialsFromSequenceChannels((TXSequenceChannels *)(a1 + 6258));
        ReplaceAllMaterialsInStyles((OZScene *)a1, (uint64_t)*a2 + 480);
      }
      int64_t v27 = (TXTextStyle *)&v27;
      PCString v28 = (std::__shared_weak_count *)&v27;
      uint64_t v29 = 0;
      unsigned int v22 = *v15;
      unsigned int v23 = a1[4815];
      if (*v15 >= v23) {
        unsigned int v22 = a1[4815];
      }
      if (*v15 <= v23) {
        unsigned int v24 = v23 - *v15;
      }
      else {
        unsigned int v24 = *v15 - v23;
      }
      v31[0] = v22;
      v31[1] = v24;
      TXTextLayout::getStylesInRange(a1, (uint64_t *)&v27, v31);
      for (uint64_t j = v28; j != (std::__shared_weak_count *)&v27; uint64_t j = (std::__shared_weak_count *)j->__shared_owners_)
        TXTextStyle::copyStyle((Li3DEngineScene **)j->__shared_weak_owners_, *a2);
      if (v11)
      {
        AddAllMaterialsToSequenceChannels((char *)a2, (TXSequenceChannels *)(a1 + 6258));
        AddAllMaterialsToSequenceBehaviors(a1, (char *)a2);
      }
      std::__list_imp<std::shared_ptr<TXTextStyle>>::clear((uint64_t *)&v27);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1B75E543C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextLayout::didToggleIs3D(TXTextLayout *this, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (char *)this + 19344;
  unint64_t v4 = (char *)*((void *)this + 2419);
  if (v4 != (char *)this + 19344)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*((void *)v4 + 2) + 40520) + 104))(*((void *)v4 + 2) + 40520, a2, 0);
      uint64_t v5 = *((void *)v4 + 2);
      if (a2)
      {
        OZChannelFolder::setFoldFlag((OZChannelFolder *)(v5 + 31080), 4);
        OZChannelFolder::setFoldFlag((OZChannelFolder *)(*((void *)v4 + 2) + 13848), 4);
        (*(void (**)(double))(*(void *)(*((void *)v4 + 2) + 31208) + 712))(0.0);
        (*(void (**)(double))(*(void *)(*((void *)v4 + 2) + 13976) + 712))(0.0);
        (*(void (**)(uint64_t, void, void))(*(void *)(*((void *)v4 + 2) + 31208) + 104))(*((void *)v4 + 2) + 31208, 0, 0);
        (*(void (**)(uint64_t, void, void))(*(void *)(*((void *)v4 + 2) + 13976) + 104))(*((void *)v4 + 2) + 13976, 0, 0);
        OZChannelBase::setFlag((OZChannelBase *)(*((void *)v4 + 2) + 31208), 0x400000, 0);
        OZChannelBase::setFlag((OZChannelBase *)(*((void *)v4 + 2) + 36168), 0x400000, 0);
        OZChannelBase::setFlag((OZChannelBase *)(*((void *)v4 + 2) + 37568), 0x400000, 0);
        OZChannelBase::setFlag((OZChannelBase *)(*((void *)v4 + 2) + 13976), 0x400000, 0);
        OZChannelBase::setFlag((OZChannelBase *)(*((void *)v4 + 2) + 19528), 0x400000, 0);
        OZChannelBase::setFlag((OZChannelBase *)(*((void *)v4 + 2) + 18784), 0x400000, 0);
        OZChannelBase::setFlag((OZChannelBase *)(*((void *)v4 + 2) + 19680), 0x400000, 0);
        OZChannelBase::setFlag((OZChannelBase *)(*((void *)v4 + 2) + 5960), 2, 1);
        OZChannelBase::setFlag((OZChannelBase *)(*((void *)v4 + 2) + 22632), 2, 1);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)(v5 + 31208) + 104))(v5 + 31208, 1, 0);
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*((void *)v4 + 2) + 13976) + 104))(*((void *)v4 + 2) + 13976, 1, 0);
        OZChannelFolder::resetFoldFlag((OZChannelFolder *)(*((void *)v4 + 2) + 31080), 4);
        OZChannelFolder::resetFoldFlag((OZChannelFolder *)(*((void *)v4 + 2) + 13848), 4);
        OZChannelBase::resetFlag((OZChannelBase *)(*((void *)v4 + 2) + 31208), 0x400000, 0);
        OZChannelBase::resetFlag((OZChannelBase *)(*((void *)v4 + 2) + 36168), 0x400000, 0);
        OZChannelBase::resetFlag((OZChannelBase *)(*((void *)v4 + 2) + 37568), 0x400000, 0);
        OZChannelBase::resetFlag((OZChannelBase *)(*((void *)v4 + 2) + 13976), 0x400000, 0);
        OZChannelBase::resetFlag((OZChannelBase *)(*((void *)v4 + 2) + 19528), 0x400000, 0);
        OZChannelBase::resetFlag((OZChannelBase *)(*((void *)v4 + 2) + 18784), 0x400000, 0);
        OZChannelBase::resetFlag((OZChannelBase *)(*((void *)v4 + 2) + 19680), 0x400000, 0);
        OZChannelBase::resetFlag((OZChannelBase *)(*((void *)v4 + 2) + 5960), 2, 1);
        OZChannelBase::resetFlag((OZChannelBase *)(*((void *)v4 + 2) + 22632), 2, 1);
      }
      unint64_t v4 = (char *)*((void *)v4 + 1);
    }
    while (v4 != v3);
  }
  uint64_t v6 = (OZChannelBase *)((char *)this + 9120);
  uint64_t v7 = (OZChannelBase *)((char *)this + 8968);
  if (a2)
  {
    OZChannelBase::setFlag(v6, 0x400000, 0);
    OZChannelBase::setFlag(v7, 0x400000, 0);
  }
  else
  {
    OZChannelBase::resetFlag(v6, 0x400000, 0);
    OZChannelBase::resetFlag(v7, 0x400000, 0);
  }
  snprintf(__str, 0x40uLL, "%d", a2);
  return OZChannelBase::setRangeName((OZChannelBase *)"3D Text Toggle", (const PCString *)"3D Text");
}

uint64_t TXTextLayout::getCurrentStyleForInsertion@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  unsigned int v2 = *(_DWORD *)(this + 19256);
  unsigned int v3 = *(_DWORD *)(this + 19260);
  if (v2 != v3)
  {
    unsigned int v4 = v3 - v2;
    unsigned int v6 = v2 - v3;
    BOOL v5 = v2 > v3;
    if (v2 < v3) {
      unsigned int v3 = *(_DWORD *)(this + 19256);
    }
    if (v5) {
      unsigned int v4 = v6;
    }
    for (uint64_t i = *(void *)(this + 19376); i != this + 19368; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v8 = *(void *)(i + 16);
      if (*(_DWORD *)(v8 + 24) == v3 && *(_DWORD *)(v8 + 28) == v4)
      {
        uint64_t v9 = *(void *)(v8 + 16);
        *a2 = *(void *)(v8 + 8);
        a2[1] = v9;
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        return this;
      }
    }
  }
  return (*(uint64_t (**)(void))(*(void *)this + 288))();
}

uint64_t TXTextLayout::splitStyleRunsInRange(Li3DEngineScene *a1, unsigned int *a2)
{
  unsigned int v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager(a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v23, v4);
  BOOL v5 = (void *)*((void *)a1 + 2422);
  if (v5 != (void *)((char *)a1 + 19368))
  {
    while (1)
    {
      uint64_t v6 = v5[2];
      uint64_t v8 = *(OZSceneNode ***)(v6 + 8);
      uint64_t v7 = *(std::__shared_weak_count **)(v6 + 16);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v9 = *(_DWORD *)(v6 + 24);
      int v10 = *(_DWORD *)(v6 + 28);
      unsigned int v11 = *a2;
      unsigned int v12 = a2[1] + *a2;
      unsigned int v13 = v10 + v9;
      if ((int)(v10 + v9 - 1) >= (int)*a2 && (int)v9 <= (int)(v12 - 1)) {
        break;
      }
      BOOL v5 = (void *)v5[1];
      if (v7) {
        goto LABEL_9;
      }
LABEL_10:
      if (v5 == (void *)((char *)a1 + 19368)) {
        goto LABEL_31;
      }
    }
    double v15 = (double)v11;
    double v16 = (double)v12;
    uint64_t v22 = 0;
    if ((double)v11 <= (double)v9) {
      double v15 = (double)v9;
    }
    if (v16 >= (double)v13) {
      double v16 = (double)v13;
    }
    if (v15 <= v16)
    {
      LODWORD(v22) = v15;
      HIDWORD(v22) = v16 - v15;
    }
    PCSharedCount::PCSharedCount(&v21);
    TXTextLayout::getString((PCString *)a1, (PCString *)&v21);
    if (v22 != v9 || HIDWORD(v22) != v10)
    {
      int v18 = v22 - v9;
      if (v22 > v9)
      {
        if (HIDWORD(v22) + (int)v22 < v13)
        {
          *(_DWORD *)(v6 + 24) = v9;
          *(_DWORD *)(v6 + 28) = v18;
          std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,void>(v8, &v20);
          operator new();
        }
        if (v13 == HIDWORD(v22) + v22)
        {
          *(_DWORD *)(v6 + 24) = v9;
          *(_DWORD *)(v6 + 28) = v18;
          std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,void>(v8, &v20);
          operator new();
        }
      }
      std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,void>(v8, &v20);
      operator new();
    }
    BOOL v5 = (void *)v5[1];
    PCString::~PCString((PCString *)&v21);
    if (!v7) {
      goto LABEL_10;
    }
LABEL_9:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    goto LABEL_10;
  }
LABEL_31:
  TXTextLayout::updateStyleNames(a1);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v23);
  return 0;
}

void sub_1B75E5DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, PCString a15, uint64_t a16, char a17)
{
  MEMORY[0x1BA9BFBA0](v18, 0x10A1C40CEA811D0);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  PCString::~PCString(&a15);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a17);
  _Unwind_Resume(a1);
}

void TXTextLayout::removeStyle(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    if (v4)
    {
      BOOL v5 = *(std::__shared_weak_count **)(a2 + 8);
      double v16 = v4;
      unsigned int v17 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      for (uint64_t i = *(void *)(a1 + 1208); i != a1 + 1200; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v7 = *(const void **)(i + 16);
        if (v7)
        {
          if (v8)
          {
            unsigned int v9 = v8;
            if (OZSingleChannelBehavior::getChanBase(v8))
            {
              ChanBase = (OZChannelBase *)OZSingleChannelBehavior::getChanBase(v9);
              unsigned int v11 = (OZChannelBase *)(*(uint64_t (**)(void))(**(void **)a2 + 112))();
              OZChannelBase::isDescendantOf(ChanBase, v11);
              if (*(void *)a2) {
                uint64_t v12 = *(void *)a2 + 16;
              }
              else {
                uint64_t v12 = 0;
              }
              (*(void (**)(OZSingleChannelBehavior *, uint64_t))(*(void *)v9 + 152))(v9, v12);
            }
          }
        }
      }
      std::list<std::shared_ptr<TXTextStyle>>::remove(a1 + 19344, &v16);
      unsigned int v14 = v16;
      double v15 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      OZSceneNode::removeStyle((OZScene **)(a1 + 200), &v14);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      unsigned int v13 = v16;
      *((void *)v16 + 6118) = 0;
      OZStyle::setSceneNode((uint64_t)v13, 0);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
    }
  }
}

void sub_1B75E6088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::list<std::shared_ptr<TXTextStyle>>::remove(uint64_t a1, void *a2)
{
  v9[0] = (uint64_t)v9;
  v9[1] = (uint64_t)v9;
  v9[2] = 0;
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)a1)
  {
    do
    {
      uint64_t v6 = (void *)v2[1];
      uint64_t v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (void *)a1)
        {
          BOOL v8 = 1;
LABEL_8:
          uint64_t v6 = (void *)a1;
        }
        else
        {
          while (1)
          {
            uint64_t v7 = v6[2];
            BOOL v8 = v7 == v5;
            if (v7 != v5) {
              break;
            }
            uint64_t v6 = (void *)v6[1];
            if (v6 == (void *)a1) {
              goto LABEL_8;
            }
          }
        }
        std::list<std::shared_ptr<TXTextStyle>>::splice((uint64_t)v9, v9, a1, v2, v6);
        if (!v8) {
          uint64_t v6 = (void *)v6[1];
        }
      }
      unsigned int v2 = v6;
    }
    while (v6 != (void *)a1);
  }
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear(v9);
}

void sub_1B75E6174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'TXTextLayout::removeStyle(uint64_t a1, uint64_t a2)
{
}

uint64_t TXTextLayout::getStyleAtInsertionPoint@<X0>(TXTextLayout *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t result = TXTextLayout::getStyleRunAtInsertionPoint(this, a2);
  if (result)
  {
    uint64_t v5 = *(void *)(result + 16);
    *a3 = *(void *)(result + 8);
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t TXTextLayout::getStyleRunAtInsertionPoint(TXTextLayout *this, unsigned int a2)
{
  unsigned int v2 = (void *)*((void *)this + 2422);
  if (v2 == (void *)((char *)this + 19368))
  {
    uint64_t Instance = TXTextStyleManager::getInstance(this);
    uint64_t v7 = *(OZSceneNode ***)(Instance + 8);
    uint64_t v8 = *(void *)(Instance + 16);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,void>(v7, &v10);
    TXTextLayout::addStyle((uint64_t)this, (uint64_t)&v10, 1);
    operator new();
  }
  do
  {
    uint64_t v3 = v2[2];
    unsigned int v4 = *(_DWORD *)(v3 + 24);
    if (v4 <= a2 && *(_DWORD *)(v3 + 28) + v4 >= a2) {
      break;
    }
    unsigned int v2 = (void *)v2[1];
  }
  while (v2 != (void *)((char *)this + 19368));
  return v3;
}

void sub_1B75E62E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  MEMORY[0x1BA9BFBA0](v12, 0x10A1C40CEA811D0);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getStyleAtCharOffset@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(this + 19376);
  if (v3 == this + 19368)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    do
    {
      uint64_t v4 = *(void *)(v3 + 16);
      unsigned int v5 = *(_DWORD *)(v4 + 24);
      if (v5 <= a2 && *(_DWORD *)(v4 + 28) + v5 > a2) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != this + 19368);
    uint64_t v6 = *(void *)(v4 + 16);
    *a3 = *(void *)(v4 + 8);
    a3[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return this;
}

uint64_t TXTextLayout::getStyleRunAtCharOffset(TXTextLayout *this, unsigned int a2)
{
  unsigned int v2 = (char *)this + 19368;
  uint64_t v3 = (char *)*((void *)this + 2422);
  if (v3 == (char *)this + 19368) {
    return 0;
  }
  do
  {
    uint64_t result = *((void *)v3 + 2);
    unsigned int v5 = *(_DWORD *)(result + 24);
    if (v5 <= a2 && *(_DWORD *)(result + 28) + v5 > a2) {
      break;
    }
    uint64_t v3 = (char *)*((void *)v3 + 1);
  }
  while (v3 != v2);
  return result;
}

void TXTextLayout::getGlyphSelectedStyles(uint64_t a1, uint64_t *a2)
{
  if (((*(void *)(a1 + 19280) - *(void *)(a1 + 19272)) & 0x3FFFFFFFCLL) != 0)
  {
    unsigned int v4 = 0;
    do
    {
      unsigned int CharOffsetAt = TXDiscontinuousSelection::getCharOffsetAt((TXDiscontinuousSelection *)(a1 + 19272), v4);
      TXTextLayout::getStyleAtCharOffset(a1, CharOffsetAt, &v9);
      std::list<std::shared_ptr<TXTextStyle>>::push_back(a2, &v9);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      ++v4;
    }
    while (v4 < ((*(void *)(a1 + 19280) - *(void *)(a1 + 19272)) >> 2));
  }
  if (!a2[2])
  {
    unsigned int v6 = *(_DWORD *)(a1 + 19256);
    unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
    if (v6 >= v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = v6;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 288))(&v9, a1, v8);
    std::list<std::shared_ptr<TXTextStyle>>::push_back(a2, &v9);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

void sub_1B75E6520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void TXTextLayout::getStylesInRange(void *a1, uint64_t *a2, _DWORD *a3)
{
  if (a3[1])
  {
    unsigned int v5 = a1 + 2421;
    unsigned int v6 = (void *)a1[2422];
    if (v6 != a1 + 2421)
    {
      do
      {
        uint64_t v7 = v6[2];
        int v8 = *(_DWORD *)(v7 + 24);
        if (v8 <= *a3 + a3[1] - 1 && v8 + *(_DWORD *)(v7 + 28) - 1 >= *a3)
        {
          uint64_t v11 = *(void *)(v7 + 8);
          uint64_t v10 = *(void *)(v7 + 16);
          if (v10) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v12 = operator new(0x20uLL);
          v12[2] = v11;
          v12[3] = v10;
          uint64_t v13 = *a2;
          *uint64_t v12 = *a2;
          v12[1] = a2;
          *(void *)(v13 + 8) = v12;
          *a2 = (uint64_t)v12;
          ++a2[2];
        }
        unsigned int v6 = (void *)v6[1];
      }
      while (v6 != v5);
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*a1 + 288))(&v14);
    std::list<std::shared_ptr<TXTextStyle>>::push_back(a2, &v14);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1B75E665C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void TXTextLayout::updateStyleRun(TXTextLayout *this, TXTextStyleRun *a2)
{
  uint64_t v3 = (char *)this + 58824;
  unsigned int v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v9, v4);
  unsigned int v5 = *(uint64_t **)v3;
  unsigned int v6 = (uint64_t *)*((void *)v3 + 1);
  while (v5 != v6)
  {
    unsigned int v7 = *(_DWORD *)(*v5 + 736);
    unsigned int v8 = *((_DWORD *)a2 + 6);
    if (v8 <= v7 && *((_DWORD *)a2 + 7) + v8 > v7) {
      TXTextObject::setStyleRun(*v5, (uint64_t)a2);
    }
    v5 += 2;
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v9);
}

void sub_1B75E6714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void *std::list<TXTextStyleRun *>::remove(uint64_t a1, void *a2)
{
  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)a1)
  {
    do
    {
      unsigned int v6 = (void *)v2[1];
      uint64_t v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (void *)a1)
        {
          BOOL v8 = 1;
LABEL_8:
          unsigned int v6 = (void *)a1;
        }
        else
        {
          while (1)
          {
            uint64_t v7 = v6[2];
            BOOL v8 = v7 == v5;
            if (v7 != v5) {
              break;
            }
            unsigned int v6 = (void *)v6[1];
            if (v6 == (void *)a1) {
              goto LABEL_8;
            }
          }
        }
        std::list<std::shared_ptr<TXTextStyle>>::splice((uint64_t)v10, v10, a1, v2, v6);
        if (!v8) {
          unsigned int v6 = (void *)v6[1];
        }
      }
      unsigned int v2 = v6;
    }
    while (v6 != (void *)a1);
  }
  return std::__list_imp<unsigned int>::clear(v10);
}

void sub_1B75E67E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL TXTextLayout::isAnyParagraphDirty(TXTextLayout *this)
{
  unsigned int v2 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::ReadSentry::ReadSentry((OZLockingGroup::ReadSentry *)v9, v2);
  uint64_t v3 = *((void *)this + 2378);
  uint64_t v4 = *((void *)this + 2379);
  if (v3 == v4)
  {
    BOOL v6 = 0;
  }
  else
  {
    uint64_t v5 = v3 + 8;
    do
    {
      BOOL v6 = *(unsigned char *)(*(void *)(v5 - 8) + 872) != 0;
      if (*(unsigned char *)(*(void *)(v5 - 8) + 872)) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v5 == v4;
      }
      v5 += 8;
    }
    while (!v7);
  }
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)v9);
  return v6;
}

void TXTextLayout::updateParagraphStylesAfterTextDelete(uint64_t **this, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = a2;
  int HardLine = TXTextLayout::getHardLine((TXTextLayout *)this, a2);
  unint64_t v8 = a3 + a2;
  int v9 = TXTextLayout::getHardLine((TXTextLayout *)this, v8);
  uint64_t v10 = this[2378];
  uint64_t v11 = this[2379];
  if (v10 != v11)
  {
    int v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = this[2378];
    while (1)
    {
      if (HardLine == v12) {
        uint64_t v13 = *v14;
      }
      if (v9 == v12) {
        break;
      }
      ++v12;
      if (++v14 == v11) {
        return;
      }
    }
    if (v13)
    {
      uint64_t v15 = v10[v9];
      if (v15)
      {
        unint64_t v29 = v6 - *(void *)(v13 + 856);
        unint64_t v16 = *(void *)(v15 + 856) - v8 + *(void *)(v15 + 864);
        int v17 = v9 - HardLine;
        if (v9 != HardLine)
        {
          uint64_t v18 = (HardLine + 1);
          if (v18 < v9 + 1)
          {
            do
            {
              BOOL v19 = &this[2378][v18];
              uint64_t v20 = *v19;
              PCSharedCount v21 = (char *)this[2379];
              int64_t v22 = v21 - (char *)(v19 + 1);
              if (v21 != (char *)(v19 + 1)) {
                memmove(&this[2378][v18], v19 + 1, v21 - (char *)(v19 + 1));
              }
              this[2379] = (uint64_t *)((char *)v19 + v22);
              if (v20) {
                (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
              }
              --v17;
            }
            while (v17);
          }
        }
        TXParagraphStyle::setLength(v13, v16 + v29);
        TXParagraphStyle::dirty((TXParagraphStyle *)v13, 1);
        if (!(v16 + v29))
        {
          *(void *)&double v30 = *(unsigned int *)(v13 + 1032);
          TXParagraphStyle::setGlyphRange(v13, &v30);
        }
        unsigned int v23 = this[2378];
        unsigned int v24 = this[2379];
        if (v23 != v24)
        {
          uint64_t v25 = a3;
          int v26 = -a3;
          do
          {
            int64_t v27 = (TXParagraphStyle *)*v23;
            unint64_t v28 = *(void *)(*v23 + 856);
            if (v28 > v6)
            {
              TXParagraphStyle::setStart(*v23, v28 - v25);
              TXParagraphStyle::shiftLineBreaksBy((uint64_t)v27, v26);
              TXParagraphStyle::shiftDirectionalRunsBy((uint64_t)v27, v26);
              TXParagraphStyle::shiftCaretInsertionIndices(v27, v26);
            }
            ++v23;
          }
          while (v23 != v24);
        }
      }
    }
  }
}

void TXTextLayout::updateParagraphStylesAfterTextInsert(TXTextLayout *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = (TXParagraphStyle **)*((void *)this + 2378);
  uint64_t v4 = (TXParagraphStyle **)*((void *)this + 2379);
  if (v3 != v4)
  {
    unsigned int v7 = 0;
    unint64_t v8 = v4 - v3 - 1;
    while (1)
    {
      int v9 = *v3;
      if (v8 <= v7 || (uint64_t v10 = v3[1]) == 0 || *((void *)v10 + 107) != a2)
      {
        unint64_t v11 = *((void *)v9 + 107);
        if (v11 <= a2)
        {
          uint64_t v12 = *((void *)v9 + 108);
          if (v12 + v11 >= a2) {
            break;
          }
        }
      }
      ++v3;
      ++v7;
      if (v3 == v4)
      {
        uint64_t v12 = *((void *)v9 + 108);
        uint64_t v3 = (TXParagraphStyle **)*((void *)this + 2379);
        break;
      }
    }
    TXParagraphStyle::setLength((uint64_t)v9, v12 + a3);
    TXParagraphStyle::dirty(v9, 1);
    uint64_t v13 = v3 + 1;
    if (v13 != v4)
    {
      unsigned int v14 = v7 + 1;
      do
      {
        if (v14 >= (unint64_t)((uint64_t)(*((void *)this + 2379) - *((void *)this + 2378)) >> 3)) {
          break;
        }
        uint64_t v15 = *v13++;
        TXParagraphStyle::setStart((uint64_t)v15, *((void *)v15 + 107) + a3);
        TXParagraphStyle::shiftLineBreaksBy((uint64_t)v15, a3);
        TXParagraphStyle::shiftDirectionalRunsBy((uint64_t)v15, a3);
        TXParagraphStyle::shiftCaretInsertionIndices(v15, a3);
        ++v14;
      }
      while (v13 != v4);
    }
  }
}

void TXTextLayout::updateParagraphStylesAfterNewLineInsert(TXTextLayout *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 2378);
  uint64_t v3 = *((void *)this + 2379);
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *(void *)(*(void *)v2 + 856);
      if (v4 <= a2 && *(void *)(*(void *)v2 + 864) + v4 > a2) {
        break;
      }
      v2 += 8;
    }
    while (v2 != v3);
    operator new();
  }
  std::vector<TXParagraphStyle *>::resize((uint64_t)this + 19024, 0);
  operator new();
}

void sub_1B75E6E38(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4017F5857CLL);
  _Unwind_Resume(a1);
}

char *std::vector<TXParagraphStyle *>::insert(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      BOOL v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 16, v18);
    }
    else {
      BOOL v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    __p = v19;
    int64_t v27 = v20;
    unint64_t v28 = v20;
    unint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        unsigned int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        int64_t v27 = v20;
        unint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        int64_t v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    unint64_t v28 = v20 + 8;
    unint64_t v4 = std::vector<OZChannelBase *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    int v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    unint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)unint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1B75E706C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextLayout::updateStyleRunsAfterTextInsert(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3 = this + 19368;
  for (uint64_t i = *(void *)(this + 19376); i != v3; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v5 = *(void *)(i + 16);
    unsigned int v7 = *(_DWORD *)(v5 + 24);
    int v6 = *(_DWORD *)(v5 + 28);
    if (v7 <= a2 && v6 + v7 >= a2)
    {
      *(_DWORD *)(v5 + 28) = v6 + a3;
      while (1)
      {
        uint64_t i = *(void *)(i + 8);
        if (i == v3) {
          break;
        }
        *(_DWORD *)(*(void *)(i + 16) + 24) += a3;
      }
      return this;
    }
  }
  return this;
}

void TXTextLayout::updateStyleRunsAfterTextDelete(TXTextLayout *this, int a2, int a3)
{
  uint64_t v3 = (char *)this + 19368;
  unint64_t v4 = (TXTextLayout *)*((void *)this + 2422);
  if (v4 == (TXTextLayout *)((char *)this + 19368)) {
    return;
  }
  int v7 = a3 + a2 - 1;
  double v8 = (double)a2;
  double v9 = (double)(a3 + a2);
  uint64_t v10 = (TXTextLayout *)*((void *)this + 2422);
  do
  {
    uint64_t v11 = *((void *)v10 + 2);
    unsigned int v13 = *(_DWORD *)(v11 + 24);
    int v12 = *(_DWORD *)(v11 + 28);
    if ((int)v13 > v7 || (int)(v12 + v13 - 1) < a2) {
      goto LABEL_30;
    }
    double v15 = (double)v13;
    double v16 = (double)(v12 + v13);
    if (v8 > (double)v13) {
      double v15 = v8;
    }
    if (v9 < v16) {
      double v16 = v9;
    }
    if (v15 <= v16) {
      unsigned int v17 = v15;
    }
    else {
      unsigned int v17 = 0;
    }
    if (v15 <= v16) {
      unsigned int v18 = v16 - v15;
    }
    else {
      unsigned int v18 = 0;
    }
    if (v17 != v13 || v12 != v18)
    {
      int v20 = v12 - v18;
LABEL_29:
      *(_DWORD *)(v11 + 28) = v20;
LABEL_30:
      uint64_t v10 = (TXTextLayout *)*((void *)v10 + 1);
      continue;
    }
    if (v10 == v4)
    {
      int v20 = 0;
      goto LABEL_29;
    }
    unint64_t v21 = (TXTextLayout *)*((void *)v10 + 1);
    uint64_t v23 = *(void *)(v11 + 8);
    unint64_t v22 = *(std::__shared_weak_count **)(v11 + 16);
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = v23;
    uint64_t v30 = v22;
    (*(void (**)(TXTextLayout *, uint64_t *))(*(void *)this + 272))(this, &v29);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v24 = *(void *)v10;
    *(void *)(v24 + 8) = *((void *)v10 + 1);
    **((void **)v10 + 1) = v24;
    --*((void *)this + 2423);
    operator delete(v10);
    uint64_t v10 = v21;
  }
  while (v10 != (TXTextLayout *)v3);
  uint64_t v25 = *((void *)this + 2422);
  if ((char *)v25 != v3)
  {
    int v26 = 0;
    do
    {
      uint64_t v27 = *(void *)(v25 + 16);
      int v28 = *(_DWORD *)(v27 + 28);
      *(_DWORD *)(v27 + 24) = v26;
      v26 += v28;
      uint64_t v25 = *(void *)(v25 + 8);
    }
    while ((char *)v25 != v3);
  }
}

void sub_1B75E72D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void TXTextLayout::setKerningAtCharOffset(TXParagraphStyle ***this, double a2, int64_t a3)
{
  unint64_t v16 = a3;
  int v6 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)&v15, v6);
  if (a3 < 0) {
    goto LABEL_19;
  }
  int v7 = (uint64_t **)(this + 2403);
  if (a2 <= -0.0000001 || a2 >= 0.0000001)
  {
    unsigned int v17 = &v16;
    *((double *)std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(v7, (uint64_t *)&v16, (uint64_t)&std::piecewise_construct, (uint64_t **)&v17)+ 5) = a2;
LABEL_12:
    uint64_t v10 = this[2378];
    uint64_t v11 = this[2379];
    if (v10 == v11)
    {
LABEL_16:
      int v12 = *(v11 - 1);
      if (!v12)
      {
LABEL_18:
        ((void (*)(TXParagraphStyle ***, __n128))(*this)[68])(this, v14);
        goto LABEL_19;
      }
    }
    else
    {
      while (1)
      {
        int v12 = *v10;
        unint64_t v13 = *((void *)*v10 + 107);
        if (v13 <= v16 && *((void *)v12 + 108) + v13 > v16) {
          break;
        }
        if (++v10 == v11) {
          goto LABEL_16;
        }
      }
    }
    v14.n128_f64[0] = TXParagraphStyle::dirty(v12, 1);
    goto LABEL_18;
  }
  for (uint64_t i = this[2404]; i; uint64_t i = (TXParagraphStyle **)*i)
  {
    int64_t v9 = (int64_t)i[4];
    if (v9 <= a3)
    {
      if (v9 >= a3)
      {
        std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__erase_unique<long>((uint64_t)v7, (uint64_t *)&v16);
        goto LABEL_12;
      }
      ++i;
    }
  }
LABEL_19:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&v15);
}

void sub_1B75E7448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t TXTextLayout::getOutlineOrder(TXTextLayout *this, TXTextObject *a2)
{
  uint64_t v2 = *((void *)a2 + 33);
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  uint64_t v5 = (OZChannel *)((char *)this + 35456);
  char isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 35456), 0, 1);
  int v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
  if ((isEnabled & 1) == 0)
  {
    long long v10 = *MEMORY[0x1E4F1FA48];
    uint64_t v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    uint64_t v5 = (OZChannel *)(v4 + 27720);
    int v7 = (const CMTime *)&v10;
  }
  uint64_t ValueAsInt = OZChannel::getValueAsInt(v5, v7, 0.0);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return ValueAsInt;
}

void sub_1B75E7514(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextLayout::getGlowOrder(TXTextLayout *this, TXTextObject *a2)
{
  uint64_t v2 = *((void *)a2 + 33);
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  uint64_t v5 = (OZChannel *)((char *)this + 41840);
  char isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 41840), 0, 1);
  int v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
  if ((isEnabled & 1) == 0)
  {
    long long v10 = *MEMORY[0x1E4F1FA48];
    uint64_t v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    uint64_t v5 = (OZChannel *)(v4 + 37312);
    int v7 = (const CMTime *)&v10;
  }
  uint64_t ValueAsInt = OZChannel::getValueAsInt(v5, v7, 0.0);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return ValueAsInt;
}

void sub_1B75E75E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

double TXTextLayout::cacheMargins(TXTextLayout *this, int a2)
{
  uint64_t v3 = (double *)((char *)this + 52264);
  switch(a2)
  {
    case 4:
      int v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
      *((double *)this + 6541) = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24272), MEMORY[0x1E4F1FA48], 0.0);
      v3[9] = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24424), v6, 0.0);
      v3[10] = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24576), v6, 0.0);
      double result = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24728), v6, 0.0);
      v3[11] = result;
      break;
    case 3:
      int v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
      *((double *)this + 6537) = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24272), MEMORY[0x1E4F1FA48], 0.0);
      v3[5] = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24424), v7, 0.0);
      v3[6] = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24576), v7, 0.0);
      double result = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24728), v7, 0.0);
      v3[7] = result;
      break;
    case 1:
      uint64_t v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
      double *v3 = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24272), MEMORY[0x1E4F1FA48], 0.0);
      v3[1] = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24424), v4, 0.0);
      v3[2] = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24576), v4, 0.0);
      double result = (double)(int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 24728), v4, 0.0);
      v3[3] = result;
      break;
  }
  return result;
}

CGColorSpace **TXTextLayout::initializeScrollMargins(TXTextLayout *this)
{
  uint64_t v2 = (OZTransformNode *)((char *)this + 200);
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200);
  uint64_t v4 = OZSceneSettings::OZSceneSettings((OZSceneSettings *)&v33, (const OZSceneSettings *)(v3 + 336));
  int v5 = v34;
  int v6 = v35;
  int v7 = (OZPreferenceManager *)OZPreferenceManager::Instance(v4);
  SafeZonesTitlePercentage = (OZPreferenceManager *)OZPreferenceManager::getSafeZonesTitlePercentage(v7);
  float v10 = v9;
  int v11 = v35;
  int v12 = (OZPreferenceManager *)OZPreferenceManager::Instance(SafeZonesTitlePercentage);
  OZPreferenceManager::getSafeZonesTitlePercentage(v12);
  float v14 = v13;
  uint64_t v15 = (*(uint64_t (**)(OZTransformNode *))(*(void *)v2 + 272))(v2);
  double v16 = (*(double (**)(uint64_t))(*(void *)v15 + 96))(v15);
  double v31 = 0.0;
  double v32 = 0.0;
  memset(&v30, 0, sizeof(v30));
  unsigned int v17 = (OZScene *)(*(uint64_t (**)(OZTransformNode *))(*(void *)v2 + 272))(v2);
  OZScene::getCurrentTime(v17, (__n128 *)&v30);
  OZTransformNode::getTranslation(v2, &v32, &v31, &v30);
  double v32 = v16 * v32;
  double v28 = 0.0;
  double v29 = 0.0;
  uint64_t v27 = 0;
  OZTransformNode::getPivot(v2, &v29, &v28, (double *)&v27, &v30);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0))
  {
    double v18 = (double)v5;
    double v19 = (float)(v14 * (float)v11);
  }
  else
  {
    double v19 = (double)v6;
    double v18 = (float)(v10 * (float)v5);
  }
  double v20 = v16 * v18;
  double v21 = v31;
  double v22 = v28;
  double v23 = v20 * -0.5 - v32 + v29;
  double v24 = v20 * 0.5 - v32 + v29;
  double v25 = v19 * -0.5 - v31 + v28;
  OZChannel::setMax((OZChannel *)((char *)this + 24272), 1.79769313e308);
  OZChannel::setMin((OZChannel *)((char *)this + 24272), -1.79769313e308);
  OZChannel::setMax((OZChannel *)((char *)this + 24424), 1.79769313e308);
  OZChannel::setMin((OZChannel *)((char *)this + 24424), -1.79769313e308);
  OZChannel::setMax((OZChannel *)((char *)this + 24728), 1.79769313e308);
  OZChannel::setMin((OZChannel *)((char *)this + 24728), -1.79769313e308);
  OZChannel::setMax((OZChannel *)((char *)this + 24576), 1.79769313e308);
  OZChannel::setMin((OZChannel *)((char *)this + 24576), -1.79769313e308);
  OZChannel::setValue((OZChannel *)((char *)this + 24272), MEMORY[0x1E4F1FA48], v23, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 24424), MEMORY[0x1E4F1FA48], v24, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 24728), MEMORY[0x1E4F1FA48], v25, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 24576), MEMORY[0x1E4F1FA48], v19 * 0.5 - v21 + v22, 0);
  *((unsigned char *)this + 52257) = 1;
  uint64_t v33 = &unk_1F113E428;
  PCString::~PCString(&v37);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v36);
}

void sub_1B75E7AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  OZSceneSettings::~OZSceneSettings((PCString *)va);
  _Unwind_Resume(a1);
}

BOOL TXTextLayout::isVerticalLayout(TXTextLayout *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

CGColorSpace **TXTextLayout::initializeTickerMargins(TXTextLayout *this)
{
  uint64_t v2 = (OZTransformNode *)((char *)this + 200);
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200);
  uint64_t v4 = OZSceneSettings::OZSceneSettings((OZSceneSettings *)&v35, (const OZSceneSettings *)(v3 + 336));
  int v6 = v36;
  int v5 = v37;
  int v7 = (OZPreferenceManager *)OZPreferenceManager::Instance(v4);
  SafeZonesTitlePercentage = (OZPreferenceManager *)OZPreferenceManager::getSafeZonesTitlePercentage(v7);
  float v10 = v9;
  int v11 = v36;
  int v12 = (OZPreferenceManager *)OZPreferenceManager::Instance(SafeZonesTitlePercentage);
  OZPreferenceManager::getSafeZonesTitlePercentage(v12);
  float v14 = v13;
  uint64_t v15 = (*(uint64_t (**)(OZTransformNode *))(*(void *)v2 + 272))(v2);
  double v16 = (*(double (**)(uint64_t))(*(void *)v15 + 96))(v15);
  double v33 = 0.0;
  double v34 = 0.0;
  memset(&v32, 0, sizeof(v32));
  unsigned int v17 = (OZScene *)(*(uint64_t (**)(OZTransformNode *))(*(void *)v2 + 272))(v2);
  OZScene::getCurrentTime(v17, (__n128 *)&v32);
  OZTransformNode::getTranslation(v2, &v34, &v33, &v32);
  double v34 = v16 * v34;
  double v30 = 0.0;
  double v31 = 0.0;
  uint64_t v29 = 0;
  OZTransformNode::getPivot(v2, &v31, &v30, (double *)&v29, &v32);
  uint64_t v18 = *((void *)this + 2378);
  double v19 = 0.0;
  while (v18 != *((void *)this + 2379))
  {
    uint64_t v20 = *(unsigned int *)(*(void *)v18 + 876);
    if (v20)
    {
      double v21 = (double *)(*(void *)(*(void *)v18 + 888) + 8);
      do
      {
        if (*(v21 - 1) - *v21 > v19) {
          double v19 = *(v21 - 1) - *v21;
        }
        v21 += 8;
        --v20;
      }
      while (v20);
    }
    v18 += 8;
  }
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0))
  {
    double v22 = v16 * (float)(v14 * (float)v11);
    double v23 = (double)v5 * 0.5 - v33 + v30;
    double v24 = (double)v5 * -0.5 - v33 + v30;
    double v25 = v22 * 0.5 - v34 + v31;
    double v26 = v25 - v19;
  }
  else
  {
    double v27 = v16 * (double)v6;
    double v26 = v27 * -0.5 - v34 + v31;
    double v25 = v27 * 0.5 - v34 + v31;
    double v24 = (float)(v10 * (float)v5) * -0.5 - v33 + v30;
    double v23 = v19 + v24;
  }
  OZChannel::setMax((OZChannel *)((char *)this + 24272), 1.79769313e308);
  OZChannel::setMin((OZChannel *)((char *)this + 24272), -1.79769313e308);
  OZChannel::setMax((OZChannel *)((char *)this + 24424), 1.79769313e308);
  OZChannel::setMin((OZChannel *)((char *)this + 24424), -1.79769313e308);
  OZChannel::setMax((OZChannel *)((char *)this + 24728), 1.79769313e308);
  OZChannel::setMin((OZChannel *)((char *)this + 24728), -1.79769313e308);
  OZChannel::setMax((OZChannel *)((char *)this + 24576), 1.79769313e308);
  OZChannel::setMin((OZChannel *)((char *)this + 24576), -1.79769313e308);
  OZChannel::setValue((OZChannel *)((char *)this + 24272), MEMORY[0x1E4F1FA48], v26, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 24424), MEMORY[0x1E4F1FA48], v25, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 24728), MEMORY[0x1E4F1FA48], v24, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 24576), MEMORY[0x1E4F1FA48], v23, 0);
  *((unsigned char *)this + 52258) = 1;
  int v35 = &unk_1F113E428;
  PCString::~PCString(&v39);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v38);
}

void sub_1B75E7F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  OZSceneSettings::~OZSceneSettings((PCString *)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::setCachedMargins(uint64_t this, int a2)
{
  uint64_t v2 = this;
  uint64_t v3 = (double *)(this + 52264);
  switch(a2)
  {
    case 4:
      int v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::setValue((OZChannel *)(this + 24272), MEMORY[0x1E4F1FA48], *(double *)(this + 52328), 0);
      OZChannel::setValue((OZChannel *)(v2 + 24424), v6, v3[9], 0);
      OZChannel::setValue((OZChannel *)(v2 + 24728), v6, v3[11], 0);
      int v5 = v3 + 10;
      break;
    case 3:
      int v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::setValue((OZChannel *)(this + 24272), MEMORY[0x1E4F1FA48], *(double *)(this + 52296), 0);
      OZChannel::setValue((OZChannel *)(v2 + 24424), v7, v3[5], 0);
      OZChannel::setValue((OZChannel *)(v2 + 24728), v7, v3[7], 0);
      int v5 = v3 + 6;
      break;
    case 1:
      uint64_t v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::setValue((OZChannel *)(this + 24272), MEMORY[0x1E4F1FA48], *v3, 0);
      OZChannel::setValue((OZChannel *)(v2 + 24424), v4, v3[1], 0);
      OZChannel::setValue((OZChannel *)(v2 + 24728), v4, v3[3], 0);
      int v5 = v3 + 2;
      break;
    default:
      return this;
  }
  double v8 = *v5;
  float v9 = (const CMTime *)MEMORY[0x1E4F1FA48];

  return OZChannel::setValue((OZChannel *)(v2 + 24576), v9, v8, 0);
}

void TXTextLayout::setLayoutMethod(TXTextLayout *this, int a2)
{
  uint64_t v4 = (char *)this + 52256;
  int v5 = (OZChannel *)((char *)this + 20464);
  int v6 = (CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::setValue((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], (double)a2, 0);
  int ValueAsInt = OZChannel::getValueAsInt(v5, v6, 0.0);
  __asm { FMOV            V0.2D, #-1.0 }
  long long v21 = _Q0;
  if (ValueAsInt == 1)
  {
    if (!*v4)
    {
      StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
      if (PCString::size((PCString *)StringPtr))
      {
        __n128 v23 = 0uLL;
        long long v24 = v21;
        OZRenderState::OZRenderState(&v22);
        TXTextLayout::getTypographicBounds((uint64_t)this, (uint64_t)&v23, (CMTime *)&v22, 1, 0);
        double v14 = *(double *)&v24 + 2.0;
        *(double *)&long long v24 = *(double *)&v24 + 2.0;
        uint64_t v15 = *((void *)this + 2378);
        if (*((void *)this + 2379) == v15) {
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        }
        if (*(_DWORD *)(*(void *)v15 + 960) == 1)
        {
          v16.n128_u64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)v23, (float64x2_t)*(unint64_t *)&v14);
          v16.n128_u64[1] = *(void *)&vaddq_f64(*(float64x2_t *)&v23, (float64x2_t)0).f64[1];
          __n128 v23 = v16;
        }
        (*(void (**)(TXTextLayout *, __n128 *))(*(void *)this + 344))(this, &v23);
      }
      else
      {
        TXTextLayout::getStyleAtCharOffset((uint64_t)this, 0, &v22);
        CMTime v25 = *v6;
        float Size = TXTextStyle::getSize((OZChannel *)v22.var0.var0, &v25, 0.0);
        OZChannel::setValue((OZChannel *)((char *)this + 24272), MEMORY[0x1E4F1FA48], 0.0, 0);
        OZChannel::setValue((OZChannel *)((char *)this + 24424), MEMORY[0x1E4F1FA48], 300.0, 0);
        double v20 = Size;
        OZChannel::setValue((OZChannel *)((char *)this + 24728), MEMORY[0x1E4F1FA48], v20 + -300.0, 0);
        OZChannel::setValue((OZChannel *)((char *)this + 24576), MEMORY[0x1E4F1FA48], v20, 0);
        if (*(void *)&v22.var0.var1) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v22.var0.var1);
        }
      }
      char *v4 = 1;
      goto LABEL_25;
    }
LABEL_13:
    TXTextLayout::setCachedMargins((uint64_t)this, a2);
LABEL_26:
    TXTextLayout::interlockMargins(this, 0);
    goto LABEL_27;
  }
  if (OZChannel::getValueAsInt(v5, MEMORY[0x1E4F1FA48], 0.0) == 3)
  {
    if (v4[1]) {
      goto LABEL_13;
    }
    TXTextLayout::initializeScrollMargins(this);
LABEL_25:
    TXTextLayout::cacheMargins(this, a2);
    goto LABEL_26;
  }
  if (OZChannel::getValueAsInt(v5, MEMORY[0x1E4F1FA48], 0.0) == 4)
  {
    if (v4[2]) {
      goto LABEL_13;
    }
    TXTextLayout::initializeTickerMargins(this);
    goto LABEL_25;
  }
  if (OZChannel::getValueAsInt(v5, MEMORY[0x1E4F1FA48], 0.0))
  {
    OZRenderState::OZRenderState(&v22);
    unsigned int v17 = (OZScene *)(*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200);
    OZScene::getCurrentTime(v17, &v23);
    *(__n128 *)&v22.var0.var0 = v23;
    v22.var0.var3 = v24;
    __n128 v23 = 0uLL;
    long long v24 = v21;
    TXTextLayout::getTypographicBounds((uint64_t)this, (uint64_t)&v23, (CMTime *)&v22, 1, 0);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 54280), MEMORY[0x1E4F1FA48], 0.0)) {
      uint64_t v18 = (char *)this + 53528;
    }
    else {
      uint64_t v18 = (char *)this + 52640;
    }
    if (((*(uint64_t (**)(char *, void))(*(void *)v18 + 552))(v18, 0) & 1) == 0)
    {
      TXTextLayout::initializePaths((uint64_t)this, (uint64_t)&v23);
      *((unsigned char *)this + 63760) = 1;
    }
    TXTextLayout::doLayout(this, &v22, 0);
  }
  else
  {
    TXTextLayout::updateLineBreaksByHardLine(this);
  }
LABEL_27:
  *((_OWORD *)this + 3689) = v21;
  *((_OWORD *)this + 3693) = xmmword_1B7E736F0;
  *((_OWORD *)this + 3692) = xmmword_1B7E736F0;
  *((_OWORD *)this + 3691) = xmmword_1B7E736F0;
  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
}

void sub_1B75E84D4(_Unwind_Exception *exception_object)
{
}

void sub_1B75E84EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  JUMPOUT(0x1B75E84E4);
}

uint64_t TXTextLayout::getTypographicBounds(uint64_t a1, uint64_t a2, CMTime *a3, char a4, int a5)
{
  StringPtr = TXChannelString::getStringPtr((TXChannelString *)(a1 + 19048));
  if (PCString::size((PCString *)StringPtr))
  {
    char v57 = a4;
    uint64_t v58 = a2;
    float64x2_t v74 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v64 = _Q0;
    long long v75 = _Q0;
    CMTime v73 = *a3;
    double v56 = a3;
    double v14 = (const CMTime *)MEMORY[0x1E4F1FA48];
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), MEMORY[0x1E4F1FA48], 0.0);
    int v16 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20720), v14, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 22136), &v73, 0.0);
    double v60 = v17;
    uint64_t v18 = *(void **)(a1 + 19024);
    v61 = *(void **)(a1 + 19032);
    if (v18 != v61)
    {
      int v19 = 0;
      double v59 = *(double *)(a1 + 64400);
      double v20 = 0.0;
      double v63 = 0.0;
      do
      {
        uint64_t v21 = *v18;
        CMTime v72 = v73;
        OZChannel::getValueAsDouble((OZChannel *)(v21 + 680), &v72, 0.0);
        double v23 = v22;
        (*(void (**)(uint64_t, CMTime *))(*(void *)a1 + 712))(a1, &v73);
        if (*(_DWORD *)(v21 + 876))
        {
          int v62 = v18;
          uint64_t v25 = 0;
          unint64_t v26 = 0;
          double v27 = v59 + (v60 + v23) * v24;
          do
          {
            double v28 = (double *)(*(void *)(v21 + 888) + v25);
            double v29 = *v28;
            double v30 = v28[1];
            if (a5 && v29 == 0.0 && v30 == 0.0)
            {
              uint64_t v31 = *(void *)(v21 + 856);
              _CF = v31 != 0;
              CMTime v32 = (TXTextLayout *)(v31 - 1);
              if (_CF) {
                double v33 = v32;
              }
              else {
                double v33 = 0;
              }
              TXHelperFunctions::GetTextObjectContainingCharIndex((TXHelperFunctions *)a1, v33, 1, 0, &v66);
              if (*(void *)&v66.f64[0])
              {
                TXTextLayout::getStyleAtCharOffset(a1, v33, &v70);
                double v34 = v70;
                CMTime v69 = v73;
                float Size = TXTextStyle::getSize((OZChannel *)v70, &v69, 0.0);
                TXTextStyle::getFontName(v34, &v68);
                uint64_t Font = TXTextLayout::getFont((const PCString *)a1, &v68);
                PCString::~PCString(&v68);
                if (Font)
                {
                  double v37 = Size;
                  float v38 = (*(float (**)(uint64_t, double))(*(void *)Font + 40))(Font, v37);
                  float v39 = (*(float (**)(uint64_t, double))(*(void *)Font + 48))(Font, v37);
                  double v29 = v38;
                  double v30 = (float)(0.0
                              - (float)(v39
                                      + (*(float (**)(uint64_t, double))(*(void *)Font + 56))(Font, v37)));
                }
                if (v71) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v71);
                }
              }
              if (*(void *)&v66.f64[1]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v66.f64[1]);
              }
            }
            double v40 = fabs(*(double *)(v21 + 920));
            double v41 = vabdd_f64(v29, v30);
            if (v19 + v26) {
              _ZF = ValueAsInt == 4;
            }
            else {
              _ZF = 1;
            }
            int v43 = _ZF;
            if (v16) {
              double v44 = v20;
            }
            else {
              double v44 = v30;
            }
            if (!v43) {
              double v30 = v44;
            }
            float64x2_t v66 = 0uLL;
            long long v67 = v64;
            int v45 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), MEMORY[0x1E4F1FA48], 0.0);
            if (v16)
            {
              v66.f64[0] = v30;
              double v46 = 0.0 - v63 - v40;
              if (v45 != 4) {
                double v46 = 0.0 - v40;
              }
              double v47 = v41;
            }
            else
            {
              if (v43) {
                double v48 = v29;
              }
              else {
                double v48 = v20;
              }
              double v46 = v48 - v41;
              if (v45 == 4) {
                v66.f64[0] = v63;
              }
              else {
                v66.f64[0] = 0.0;
              }
              double v47 = v40;
              double v40 = v41;
            }
            double v49 = v27 - v30;
            if (v19 + v26)
            {
              double v49 = v27 + v41;
              BOOL v50 = 1;
            }
            else
            {
              BOOL v50 = v16 == 0;
            }
            v66.f64[1] = v46;
            *(double *)&long long v67 = v47;
            *((double *)&v67 + 1) = v40;
            double v51 = v20 - v49;
            if (v50) {
              double v52 = 0.0;
            }
            else {
              double v52 = v27 + v41;
            }
            PCRect<double>::operator|=(&v74, &v66);
            double v20 = v51 - v52;
            ++v26;
            v25 += 64;
          }
          while (v26 < *(unsigned int *)(v21 + 876));
          v19 += v26;
          uint64_t v18 = v62;
        }
        double v63 = v63 + *(double *)(v21 + 920);
        ++v18;
      }
      while (v18 != v61);
    }
    long long v53 = v75;
    *(float64x2_t *)uint64_t v58 = v74;
    *(_OWORD *)(v58 + 16) = v53;
    if ((v57 & 1) != 0
      && (OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 1
       && *(unsigned char *)(a1 + 52256)
       || OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 3
       && *(unsigned char *)(a1 + 52257)
       || ValueAsInt == 4 && *(unsigned char *)(a1 + 52258)))
    {
      v66.f64[0] = 0.0;
      *(double *)&v70 = 0.0;
      (*(void (**)(uint64_t, float64x2_t *, TXTextStyle **, CMTime *))(*(void *)a1 + 1016))(a1, &v66, &v70, v56);
      double v54 = *(double *)&v70 + *(double *)(v58 + 8);
      *(double *)uint64_t v58 = v66.f64[0] + *(double *)v58;
      *(double *)(v58 + 8) = v54;
    }
  }
  return 0;
}

void sub_1B75E8A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,PCString a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::interlockMargins(TXTextLayout *this, char a2)
{
  if (a2)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E4F1FA48], 0.0);
    OZChannel::setSliderMax((OZChannel *)((char *)this + 24272), v4);
  }
  else
  {
    double v5 = *(double *)(*((void *)this + 3050) + 8);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E4F1FA48], 0.0);
    if (v5 < v6)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E4F1FA48], 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 24272), v7);
    }
    double v8 = *(double *)(*((void *)this + 3050) + 16);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E4F1FA48], 0.0);
    if (v8 <= v9) {
      goto LABEL_8;
    }
  }
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E4F1FA48], 0.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 24272), v10);
  if (a2)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E4F1FA48], 0.0);
    OZChannel::setSliderMax((OZChannel *)((char *)this + 24424), v11);
    goto LABEL_11;
  }
LABEL_8:
  double v12 = *(double *)(*((void *)this + 3069) + 8);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E4F1FA48], 0.0);
  if (v12 < v13)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E4F1FA48], 0.0);
    OZChannel::setSliderMax((OZChannel *)((char *)this + 24424), v14);
  }
  double v15 = *(double *)(*((void *)this + 3069) + 16);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E4F1FA48], 0.0);
  if (v15 <= v16)
  {
LABEL_13:
    double v19 = *(double *)(*((void *)this + 3107) + 8);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E4F1FA48], 0.0);
    if (v19 < v20)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E4F1FA48], 0.0);
      OZChannel::setSliderMax((OZChannel *)((char *)this + 24728), v21);
    }
    double v22 = *(double *)(*((void *)this + 3107) + 16);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), MEMORY[0x1E4F1FA48], 0.0);
    if (v22 <= v23) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
LABEL_11:
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E4F1FA48], 0.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 24424), v17);
  if ((a2 & 1) == 0) {
    goto LABEL_13;
  }
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E4F1FA48], 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 24728), v18);
LABEL_16:
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), MEMORY[0x1E4F1FA48], 0.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 24728), v24);
  if (a2)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E4F1FA48], 0.0);
    OZChannel::setSliderMax((OZChannel *)((char *)this + 24576), v25);
LABEL_21:
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), MEMORY[0x1E4F1FA48], 0.0);
    OZChannel::setSliderMin((OZChannel *)((char *)this + 24576), v31);
    goto LABEL_22;
  }
LABEL_18:
  double v26 = *(double *)(*((void *)this + 3088) + 8);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E4F1FA48], 0.0);
  if (v26 < v27)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E4F1FA48], 0.0);
    OZChannel::setSliderMax((OZChannel *)((char *)this + 24576), v28);
  }
  double v29 = *(double *)(*((void *)this + 3088) + 16);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), MEMORY[0x1E4F1FA48], 0.0);
  if (v29 > v30) {
    goto LABEL_21;
  }
LABEL_22:
  CMTime v32 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E4F1FA48], 0.0);
  OZChannel::setMax((OZChannel *)((char *)this + 24272), v33);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), v32, 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 24424), v34);
  int v35 = (OZChannel *)((char *)this + 24728);
  int v36 = (OZChannel *)((char *)this + 24576);
  OZChannel::getValueAsDouble(v36, v32, 0.0);
  OZChannel::setMax(v35, v37);
  OZChannel::getValueAsDouble(v35, v32, 0.0);

  return OZChannel::setMin(v36, v38);
}

void TXTextLayout::initializePaths(uint64_t a1, uint64_t a2)
{
  double v4 = (OZChannel *)(a1 + 20720);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 20720), MEMORY[0x1E4F1FA48], 0.0);
  double v6 = (double *)(a2 + 16);
  if (ValueAsInt) {
    double v6 = (double *)(a2 + 24);
  }
  if (*v6 >= 0.0000001 || *v6 <= -0.0000001) {
    double v8 = *v6;
  }
  else {
    double v8 = 300.0;
  }
  double v9 = *(TXParagraphStyle ***)(a1 + 19024);
  if (*(TXParagraphStyle ***)(a1 + 19032) == v9) {
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  }
  unsigned int Alignment = TXParagraphStyle::getAlignment(*v9);
  double v11 = (OZCurrentThread *)(*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 52640) + 552))(a1 + 52640, 0);
  if ((v11 & 1) == 0)
  {
    uint64_t Instance = OZCurrentThread::getInstance(v11);
    if (PCThread::isSelf(*(_opaque_pthread_t ***)(Instance + 8)))
    {
      OZChannelPosition3D::willBeModified((os_unfair_lock_s *)(a1 + 52504), 1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 52640) + 480))(a1 + 52640, 1);
      (*(void (**)(void))(*(void *)(a1 + 52792) + 480))();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 53240) + 480))(a1 + 53240, 1);
    }
    OZChannel::setDiscrete((OZChannel *)(a1 + 52640), 0, 0);
    OZChannel::setDiscrete((OZChannel *)(a1 + 52792), 0, 0);
    OZChannel::setDiscrete((OZChannel *)(a1 + 53240), 0, 0);
    OZChannel::setParametric((OZChannel *)(a1 + 52640), 1);
    OZChannel::setParametric((OZChannel *)(a1 + 52792), 1);
    OZChannel::setParametric((OZChannel *)(a1 + 53240), 1);
    double v13 = 0.0;
    if (OZChannel::getValueAsInt(v4, MEMORY[0x1E4F1FA48], 0.0))
    {
      if (Alignment > 6) {
        goto LABEL_23;
      }
      if (((1 << Alignment) & 0x49) != 0)
      {
        double v14 = (const CMTime *)MEMORY[0x1E4F1FA48];
        OZChannel::setKeyframe((OZChannel *)(a1 + 52640), MEMORY[0x1E4F1FA48], 0.0, 0);
        OZChannel::setKeyframe((OZChannel *)(a1 + 52792), v14, 0.0, 0);
        OZChannel::setKeyframe((OZChannel *)(a1 + 53240), v14, 0.0, 0);
        OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
        OZChannel::setKeyframe((OZChannel *)(a1 + 52640), (const CMTime *)v44, 0.0, 0);
        OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
        OZChannel::setKeyframe((OZChannel *)(a1 + 52792), (const CMTime *)v44, -v8, 0);
        OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
        OZChannel::setKeyframe((OZChannel *)(a1 + 53240), (const CMTime *)v44, 0.0, 0);
        CMTimeMake((CMTime *)v44, 1, 1);
        double v15 = -0.5;
LABEL_24:
        double v18 = v8 * v15;
        double v19 = 0.0;
LABEL_41:
        OZChannelPosition3D::insertBezierPoint((OZChannelPosition3D *)(a1 + 52504), (const CMTime *)v44, v19, v18, 0.0);
        goto LABEL_42;
      }
      if (((1 << Alignment) & 0x12) == 0)
      {
LABEL_23:
        double v17 = (const CMTime *)MEMORY[0x1E4F1FA48];
        OZChannel::setKeyframe((OZChannel *)(a1 + 52792), MEMORY[0x1E4F1FA48], v8, 0);
        OZChannel::setKeyframe((OZChannel *)(a1 + 52640), v17, 0.0, 0);
        OZChannel::setKeyframe((OZChannel *)(a1 + 53240), v17, 0.0, 0);
        OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
        OZChannel::setKeyframe((OZChannel *)(a1 + 52640), (const CMTime *)v44, 0.0, 0);
        OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
        OZChannel::setKeyframe((OZChannel *)(a1 + 52792), (const CMTime *)v44, 0.0, 0);
        OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
        OZChannel::setKeyframe((OZChannel *)(a1 + 53240), (const CMTime *)v44, 0.0, 0);
        CMTimeMake((CMTime *)v44, 1, 1);
        double v15 = 0.5;
        goto LABEL_24;
      }
      double v16 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::setKeyframe((OZChannel *)(a1 + 52640), MEMORY[0x1E4F1FA48], 0.0, 0);
      OZChannel::setKeyframe((OZChannel *)(a1 + 52792), v16, v8 * 0.5, 0);
      OZChannel::setKeyframe((OZChannel *)(a1 + 53240), v16, 0.0, 0);
      OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
      OZChannel::setKeyframe((OZChannel *)(a1 + 52640), (const CMTime *)v44, 0.0, 0);
      OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
      OZChannel::setKeyframe((OZChannel *)(a1 + 52792), (const CMTime *)v44, v8 * -0.5, 0);
      OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
      OZChannel::setKeyframe((OZChannel *)(a1 + 53240), (const CMTime *)v44, 0.0, 0);
      goto LABEL_37;
    }
    if (Alignment <= 6)
    {
      if (((1 << Alignment) & 0x49) != 0)
      {
LABEL_26:
        double v20 = (const CMTime *)MEMORY[0x1E4F1FA48];
        OZChannel::setKeyframe((OZChannel *)(a1 + 52640), MEMORY[0x1E4F1FA48], v13, 0);
        OZChannel::setKeyframe((OZChannel *)(a1 + 52792), v20, 0.0, 0);
        OZChannel::setKeyframe((OZChannel *)(a1 + 53240), v20, 0.0, 0);
        if (Alignment > 6) {
          goto LABEL_31;
        }
        if (((1 << Alignment) & 0x49) != 0)
        {
          OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
          double v21 = (OZChannel *)(a1 + 52640);
          double v22 = v8;
          goto LABEL_33;
        }
        if (((1 << Alignment) & 0x12) != 0)
        {
          OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
          double v22 = v8 * 0.5;
        }
        else
        {
LABEL_31:
          OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
          double v22 = 0.0;
        }
        double v21 = (OZChannel *)(a1 + 52640);
LABEL_33:
        OZChannel::setKeyframe(v21, (const CMTime *)v44, v22, 0);
        OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
        OZChannel::setKeyframe((OZChannel *)(a1 + 52792), (const CMTime *)v44, 0.0, 0);
        OZFigTimeForChannelSeconds((CMTime *)v44, 2.0, 0x40000);
        OZChannel::setKeyframe((OZChannel *)(a1 + 53240), (const CMTime *)v44, 0.0, 0);
        if (Alignment <= 6)
        {
          if (((1 << Alignment) & 0x49) != 0)
          {
            CMTimeMake((CMTime *)v44, 1, 1);
            double v23 = 0.5;
LABEL_39:
            double v19 = v8 * v23;
            goto LABEL_40;
          }
          if (((1 << Alignment) & 0x12) != 0)
          {
LABEL_37:
            CMTimeMake((CMTime *)v44, 1, 1);
            double v19 = 0.0;
LABEL_40:
            double v18 = 0.0;
            goto LABEL_41;
          }
        }
        CMTimeMake((CMTime *)v44, 1, 1);
        double v23 = -0.5;
        goto LABEL_39;
      }
      if (((1 << Alignment) & 0x12) != 0)
      {
        double v13 = v8 * -0.5;
        goto LABEL_26;
      }
    }
    double v13 = -v8;
    goto LABEL_26;
  }
LABEL_42:
  if (((*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 53528) + 552))(a1 + 53528, 0) & 1) == 0)
  {
    *(_OWORD *)double v44 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v44[16] = _Q0;
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 200) + 272))(a1 + 200);
    OZScene::getSceneBounds(v29, (float64x2_t *)v44);
    if (*(double *)&v44[16] * 0.75 <= *(double *)&v44[24] * 0.75) {
      double v30 = *(double *)&v44[16] * 0.75;
    }
    else {
      double v30 = *(double *)&v44[24] * 0.75;
    }
    OZChannelPosition3D::willBeModified((os_unfair_lock_s *)(a1 + 53392), 1);
    OZChannel::setDiscrete((OZChannel *)(a1 + 53528), 0, 0);
    OZChannel::setDiscrete((OZChannel *)(a1 + 53680), 0, 0);
    OZChannel::setDiscrete((OZChannel *)(a1 + 54128), 0, 0);
    OZChannel::setParametric((OZChannel *)(a1 + 53528), 1);
    OZChannel::setParametric((OZChannel *)(a1 + 53680), 1);
    OZChannel::setParametric((OZChannel *)(a1 + 54128), 1);
    double v31 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::setKeyframe((OZChannel *)(a1 + 53528), MEMORY[0x1E4F1FA48], 0.0, 1);
    OZChannel::setKeyframe((OZChannel *)(a1 + 53680), v31, 0.0, 1);
    OZChannel::setKeyframe((OZChannel *)(a1 + 54128), v31, 0.0, 1);
    CMTimeMake(&v43, 1, 1);
    OZChannel::setKeyframe((OZChannel *)(a1 + 53528), &v43, v30 * 0.5, 1);
    CMTimeMake(&v43, 1, 1);
    OZChannel::setKeyframe((OZChannel *)(a1 + 53680), &v43, v30 * 0.5, 1);
    CMTimeMake(&v43, 1, 1);
    Keyframe = (void *)OZChannel::getKeyframe((OZChannel *)(a1 + 53528), &v43);
    CMTimeMake(&v43, 1, 1);
    double v33 = (void *)OZChannel::getKeyframe((OZChannel *)(a1 + 53680), &v43);
    OZChannel::setKeyframeInputTangents((OZChannel *)(a1 + 53528), Keyframe, 0.0, v30 * 0.5 * -0.546761902, 1);
    OZChannel::setKeyframeInputTangents((OZChannel *)(a1 + 53680), v33, 0.0, 0.0, 1);
    OZChannel::setKeyframeOutputTangents((OZChannel *)(a1 + 53528), Keyframe, 0.0, v30 * 0.5 * 0.546761902, 1);
    OZChannel::setKeyframeOutputTangents((OZChannel *)(a1 + 53680), v33, 0.0, 0.0, 1);
    CMTimeMake(&v43, 1, 1);
    OZChannel::setKeyframe((OZChannel *)(a1 + 54128), &v43, 0.0, 1);
    OZFigTimeForChannelSeconds(&v43, 2.0, 0x40000);
    OZChannel::setKeyframe((OZChannel *)(a1 + 53528), &v43, v30 * 0.5 + v30 * 0.5, 1);
    OZFigTimeForChannelSeconds(&v43, 2.0, 0x40000);
    OZChannel::setKeyframe((OZChannel *)(a1 + 53680), &v43, 0.0, 1);
    OZFigTimeForChannelSeconds(&v43, 2.0, 0x40000);
    double v34 = (void *)OZChannel::getKeyframe((OZChannel *)(a1 + 53528), &v43);
    OZFigTimeForChannelSeconds(&v43, 2.0, 0x40000);
    int v35 = (void *)OZChannel::getKeyframe((OZChannel *)(a1 + 53680), &v43);
    OZChannel::setKeyframeInputTangents((OZChannel *)(a1 + 53528), v34, 0.0, 0.0, 1);
    OZChannel::setKeyframeInputTangents((OZChannel *)(a1 + 53680), v35, 0.0, v30 * 0.5 * 0.546761902, 1);
    OZChannel::setKeyframeOutputTangents((OZChannel *)(a1 + 53528), v34, 0.0, 0.0, 1);
    OZChannel::setKeyframeOutputTangents((OZChannel *)(a1 + 53680), v35, 0.0, v30 * 0.5 * -0.546761902, 1);
    OZFigTimeForChannelSeconds(&v43, 2.0, 0x40000);
    OZChannel::setKeyframe((OZChannel *)(a1 + 54128), &v43, 0.0, 1);
    OZFigTimeForChannelSeconds(&v43, 3.0, 0x40000);
    OZChannel::setKeyframe((OZChannel *)(a1 + 53528), &v43, v30 * 0.5, 1);
    OZFigTimeForChannelSeconds(&v43, 3.0, 0x40000);
    OZChannel::setKeyframe((OZChannel *)(a1 + 53680), &v43, -(v30 * 0.5), 1);
    OZFigTimeForChannelSeconds(&v43, 3.0, 0x40000);
    int v36 = (void *)OZChannel::getKeyframe((OZChannel *)(a1 + 53528), &v43);
    OZFigTimeForChannelSeconds(&v43, 3.0, 0x40000);
    double v37 = (void *)OZChannel::getKeyframe((OZChannel *)(a1 + 53680), &v43);
    OZChannel::setKeyframeInputTangents((OZChannel *)(a1 + 53528), v36, 0.0, v30 * 0.5 * 0.546761902, 1);
    OZChannel::setKeyframeInputTangents((OZChannel *)(a1 + 53680), v37, 0.0, 0.0, 1);
    OZChannel::setKeyframeOutputTangents((OZChannel *)(a1 + 53528), v36, 0.0, v30 * 0.5 * -0.546761902, 1);
    OZChannel::setKeyframeOutputTangents((OZChannel *)(a1 + 53680), v37, 0.0, 0.0, 1);
    OZFigTimeForChannelSeconds(&v43, 3.0, 0x40000);
    OZChannel::setKeyframe((OZChannel *)(a1 + 54128), &v43, 0.0, 1);
    double v38 = (void *)OZChannel::getKeyframe((OZChannel *)(a1 + 53528), v31);
    float v39 = (void *)OZChannel::getKeyframe((OZChannel *)(a1 + 53680), v31);
    OZChannel::setKeyframeInputTangents((OZChannel *)(a1 + 53528), v38, 0.0, 0.0, 1);
    OZChannel::setKeyframeInputTangents((OZChannel *)(a1 + 53680), v39, 0.0, v30 * 0.5 * -0.546761902, 1);
    OZChannel::setKeyframeOutputTangents((OZChannel *)(a1 + 53528), v38, 0.0, 0.0, 1);
    OZChannel::setKeyframeOutputTangents((OZChannel *)(a1 + 53680), v39, 0.0, v30 * 0.5 * 0.546761902, 1);
    OZChannel::closeParametricCurve((OZChannel *)(a1 + 53528));
    OZChannel::closeParametricCurve((OZChannel *)(a1 + 53680));
    OZChannel::closeParametricCurve((OZChannel *)(a1 + 54128));
  }
  initializeNormalsForPath((OZChannelPosition3D *)(a1 + 52504));
  initializeNormalsForPath((OZChannelPosition3D *)(a1 + 53392));
  uint64_t v41 = OZCurrentThread::getInstance(v40);
  if (PCThread::isSelf(*(_opaque_pthread_t ***)(v41 + 8)))
  {
    uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 200) + 272))(a1 + 200);
    OZDocument::postNotification(*(OZDocument **)(v42 + 1584), 8);
  }
}

BOOL TXTextLayout::isFlattened(TXTextLayout *this)
{
  if ((*(uint64_t (**)(TXTextLayout *))(*(void *)this + 296))(this)) {
    return 0;
  }
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0) == 3
    || OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0) == 4)
  {
    return 1;
  }
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 19904), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

BOOL non-virtual thunk to'TXTextLayout::isFlattened(TXTextLayout *this)
{
  return TXTextLayout::isFlattened((TXTextLayout *)((char *)this - 200));
}

BOOL TXTextLayout::alignToPath(TXTextLayout *this)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 60520), MEMORY[0x1E4F1FA48], 0.0);
  return (v2 < 4.0
       || !OZChannel::getValueAsInt((OZChannel *)((char *)this + 20312), MEMORY[0x1E4F1FA48], 0.0))
      && OZChannel::getValueAsInt((OZChannel *)((char *)this + 58296), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

uint64_t TXTextLayout::canFourCorner(TXTextLayout *this)
{
  uint64_t result = OZElement::canFourCorner((OZElement *)((char *)this + 200));
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(TXTextLayout *))(*(void *)this + 304);
    return v3(this);
  }
  return result;
}

uint64_t non-virtual thunk to'TXTextLayout::canFourCorner(OZElement *this)
{
  uint64_t result = OZElement::canFourCorner(this);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(char *))(*((void *)this - 25) + 304);
    return v3((char *)this - 200);
  }
  return result;
}

uint64_t TXTextLayout::canCrop(TXTextLayout *this)
{
  uint64_t result = OZElement::canCrop((OZElement *)((char *)this + 200));
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(TXTextLayout *))(*(void *)this + 304);
    return v3(this);
  }
  return result;
}

uint64_t non-virtual thunk to'TXTextLayout::canCrop(OZElement *this)
{
  uint64_t result = OZElement::canCrop(this);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(char *))(*((void *)this - 25) + 304);
    return v3((char *)this - 200);
  }
  return result;
}

uint64_t TXTextLayout::updateHiddenChannels(TXTextLayout *this, char a2)
{
  double v4 = (char *)this + 53233;
  if ((*(unsigned int (**)(TXTextLayout *))(*(void *)this + 304))(this))
  {
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 12872), 2, a2);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 20056), 2, a2);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 20312), 2, a2);
    char v5 = 1;
  }
  else
  {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 12872), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20056), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 20312), 2, a2);
    OZChannelBase::setRangeName((OZChannelBase *)((char *)this + 200), v6);
    char v5 = 0;
  }
  char *v4 = v5;
  v4[888] = v5;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20312), MEMORY[0x1E4F1FA48], 0.0);
  double v8 = (OZChannelBase *)((char *)this + 58296);
  if (ValueAsInt) {
    OZChannelBase::resetFlag(v8, 2, a2);
  }
  else {
    OZChannelBase::setFlag(v8, 2, a2);
  }
  double v9 = (char *)this + 200;
  if ((*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200)
    && *(void *)((*(uint64_t (**)(char *))(*(void *)v9 + 272))((char *)this + 200) + 1584))
  {
    uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)v9 + 272))((char *)this + 200);
    OZDocument::postNotification(*(OZDocument **)(v10 + 1584), 32);
  }
  *((unsigned char *)this + 19392) = 1;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 3689) = _Q0;
  *((_OWORD *)this + 3693) = xmmword_1B7E736F0;
  *((_OWORD *)this + 3692) = xmmword_1B7E736F0;
  *((_OWORD *)this + 3691) = xmmword_1B7E736F0;

  return OZElement::updateHiddenChannels((OZElement *)((char *)this + 200), a2);
}

double TXTextLayout::invalidateLayout(TXTextLayout *this)
{
  *((unsigned char *)this + 19392) = 1;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 3689) = _Q0;
  double result = 1.0;
  *((_OWORD *)this + 3693) = xmmword_1B7E736F0;
  *((_OWORD *)this + 3692) = xmmword_1B7E736F0;
  *((_OWORD *)this + 3691) = xmmword_1B7E736F0;
  return result;
}

uint64_t non-virtual thunk to'TXTextLayout::updateHiddenChannels(TXTextLayout *this, char a2)
{
  return TXTextLayout::updateHiddenChannels((TXTextLayout *)((char *)this - 200), a2);
}

double TXTextLayout::setAlignmentAtCursor(TXTextLayout *this, double a2, int a3)
{
  unsigned int v5 = *((_DWORD *)this + 4814);
  unsigned int v6 = *((_DWORD *)this + 4815);
  if (a3)
  {
    StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
    unsigned int v8 = PCString::size((PCString *)StringPtr);
    unsigned int v9 = 0;
  }
  else
  {
    if (v5 >= v6) {
      unsigned int v9 = *((_DWORD *)this + 4815);
    }
    else {
      unsigned int v9 = *((_DWORD *)this + 4814);
    }
    if (v5 <= v6) {
      unsigned int v8 = *((_DWORD *)this + 4815);
    }
    else {
      unsigned int v8 = *((_DWORD *)this + 4814);
    }
  }
  do
  {
    int HardLine = TXTextLayout::getHardLine(this, v9);
    uint64_t v11 = *((void *)this + 2378);
    if (HardLine >= (unint64_t)((*((void *)this + 2379) - v11) >> 3)) {
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    }
    double v12 = *(TXParagraphStyle **)(v11 + 8 * HardLine);
    TXParagraphStyle::setAlignment(v12, (int)a2, 0);
    TXParagraphStyle::dirty(v12, 1);
    int v13 = *((_DWORD *)v12 + 216) + *((_DWORD *)v12 + 214);
    double v14 = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
    if (PCString::size((PCString *)v14) == v13) {
      unsigned int v9 = v13 + 1;
    }
    else {
      unsigned int v9 = v13;
    }
  }
  while (v9 <= v8);
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 3689) = _Q0;
  double result = 1.0;
  *((_OWORD *)this + 3693) = xmmword_1B7E736F0;
  *((_OWORD *)this + 3692) = xmmword_1B7E736F0;
  *((_OWORD *)this + 3691) = xmmword_1B7E736F0;
  return result;
}

double TXTextLayout::getAlignmentAtCursor(TXTextLayout *this)
{
  unsigned int v3 = *((_DWORD *)this + 4814);
  unsigned int v2 = *((_DWORD *)this + 4815);
  if (v3 >= v2) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = v3;
  }
  unsigned int HardLine = TXTextLayout::getHardLine(this, v4);
  uint64_t v6 = *((void *)this + 2378);
  if (HardLine >= (unint64_t)((*((void *)this + 2379) - v6) >> 3)) {
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  }
  return (double)(int)TXParagraphStyle::getAlignment(*(TXParagraphStyle **)(v6 + 8 * HardLine));
}

void TXTextLayout::setParagraphBounds(uint64_t a1, double *a2)
{
  unint64_t v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::setValue((OZChannel *)(a1 + 24272), MEMORY[0x1E4F1FA48], *a2, 0);
  OZChannel::setValue((OZChannel *)(a1 + 24424), v4, *a2 + a2[2], 0);
  OZChannel::setValue((OZChannel *)(a1 + 24728), v4, a2[1], 0);
  OZChannel::setValue((OZChannel *)(a1 + 24576), v4, a2[1] + a2[3], 0);
  TXTextLayout::interlockMargins((TXTextLayout *)a1, 0);

  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)a1);
}

double TXTextLayout::getParagraphBounds(uint64_t a1, double *a2)
{
  unint64_t v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24272), MEMORY[0x1E4F1FA48], 0.0);
  double v6 = v5;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24576), v4, 0.0);
  double v8 = v7;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24424), v4, 0.0);
  double v10 = v9;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24728), v4, 0.0);
  if (v6 <= v10) {
    double v12 = v6;
  }
  else {
    double v12 = v10;
  }
  if (v6 <= v10) {
    double v13 = v10;
  }
  else {
    double v13 = v6;
  }
  if (v8 >= v11) {
    double v14 = v8;
  }
  else {
    double v14 = v11;
  }
  if (v8 < v11) {
    double v11 = v8;
  }
  *a2 = v12;
  a2[1] = v11;
  double result = v14 - v11;
  a2[2] = v13 - v12;
  a2[3] = result;
  return result;
}

double TXTextLayout::getScrollableHeight(TXTextLayout *this, CMTime *a2)
{
  unint64_t v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v16, v4);
  v14[0] = 0;
  v14[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v15 = _Q0;
  TXTextLayout::getTypographicBounds((uint64_t)this, (uint64_t)v14, a2, 0, 0);
  double v10 = (double *)&v15;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0)
    || OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0) != 4)
  {
    if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0)
      || (double v11 = (OZChannel *)((char *)this + 20464),
          OZChannel::getValueAsInt(v11, MEMORY[0x1E4F1FA48], 0.0) != 3)
      && OZChannel::getValueAsInt(v11, MEMORY[0x1E4F1FA48], 0.0) != 1)
    {
      double v10 = (double *)&v15 + 1;
    }
  }
  double v12 = *v10;
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v16);
  return v12;
}

void sub_1B75EA474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

__CFString *TXTextLayout::setScrollPosition(TXTextLayout *this, double a2, int a3)
{
  uint64_t v5 = *((void *)this + 25);
  *((double *)this + 2429) = a2;
  double result = (__CFString *)(*(uint64_t (**)(void))(v5 + 272))();
  if (a3)
  {
    double v7 = (OZScene *)result;
    if (result)
    {
      OZRenderState::OZRenderState(&v22);
      OZScene::getCurrentTime(v7, &v20);
      __n128 v8 = v20;
      v22.var0.var3 = v21;
      double v9 = (double *)&v21;
      __n128 v20 = 0uLL;
      __asm { FMOV            V1.2D, #-1.0 }
      long long v21 = _Q1;
      *(__n128 *)&v22.var0.var0 = v8;
      OZRenderState::OZRenderState(&v19, &v22);
      double ScrollableHeight = TXTextLayout::getScrollableHeight(this, (CMTime *)&v19);
      (*(void (**)(TXTextLayout *, __n128 *))(*(void *)this + 352))(this, &v20);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0)
        || (double result = (__CFString *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0), result != 4))
      {
        double result = (__CFString *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0);
        if (!result
          || (double result = (__CFString *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0), result != 3)&& (double result = (__CFString *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0), result != 1))
        {
          double v9 = (double *)&v21 + 1;
        }
      }
      double v16 = 0.0;
      if (ScrollableHeight <= *v9
        || (StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048)),
            double result = PCString::size((PCString *)StringPtr),
            !result)
        || (double v18 = *((double *)this + 2429), v18 < 0.0)
        || (double v16 = 1.0, v18 > 1.0))
      {
        *((double *)this + 2429) = v16;
      }
    }
  }
  return result;
}

double TXTextLayout::scrollToFitCharOffset(TXTextLayout *this, unsigned int a2, int a3, double a4)
{
  __n128 v8 = (OZChannel *)((char *)this + 20464);
  double v9 = 0.0;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0))
  {
    if (OZChannel::getValueAsInt(v8, MEMORY[0x1E4F1FA48], 0.0) != 2)
    {
      uint64_t v10 = (*((void *)this + 7354) - *((void *)this + 7353)) >> 4;
      if (v10)
      {
        if (v10 <= a2) {
          unint64_t v11 = (v10 - 1);
        }
        else {
          unint64_t v11 = a2;
        }
        OZRenderState::OZRenderState(&v60);
        double v12 = (OZScene *)(*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200);
        if (v12)
        {
          OZScene::getCurrentTime(v12, &v58);
          __n128 v13 = v58;
          v60.var0.var3 = v59;
          double v14 = (double *)&v59;
          __n128 v58 = 0uLL;
          __asm { FMOV            V1.2D, #-1.0 }
          long long v59 = _Q1;
          *(__n128 *)&v60.var0.var0 = v13;
          OZRenderState::OZRenderState(&v57, &v60);
          double ScrollableHeight = TXTextLayout::getScrollableHeight(this, (CMTime *)&v57);
          (*(void (**)(TXTextLayout *, __n128 *))(*(void *)this + 352))(this, &v58);
          if ((OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0)
             || OZChannel::getValueAsInt(v8, MEMORY[0x1E4F1FA48], 0.0) != 4)
            && (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0)
             || OZChannel::getValueAsInt(v8, MEMORY[0x1E4F1FA48], 0.0) != 3
             && OZChannel::getValueAsInt(v8, MEMORY[0x1E4F1FA48], 0.0) != 1))
          {
            double v14 = (double *)&v59 + 1;
          }
          double v20 = *v14;
          if (ScrollableHeight >= *v14)
          {
            TXHelperFunctions::GetTextObjectContainingCharIndex(this, (TXTextLayout *)v11, 1, 0, &v55);
            if (v55)
            {
              if (OZChannel::getValueAsInt(v8, MEMORY[0x1E4F1FA48], 0.0) == 4)
              {
                if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0))
                {
                  double v21 = *((double *)v55 + 25);
                  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E4F1FA48], 0.0);
                }
                else
                {
                  double v21 = *((double *)v55 + 24);
                  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E4F1FA48], 0.0);
                }
                double v34 = v21 - v22;
                uint64_t v35 = (*((void *)this + 7354) - *((void *)this + 7353)) >> 4;
                _CF = v35 != 0;
                unsigned int v36 = v35 - 1;
                if (_CF) {
                  double v37 = (TXTextLayout *)v36;
                }
                else {
                  double v37 = 0;
                }
                TXHelperFunctions::GetTextObjectContainingCharIndex(this, v37, 1, 0, &v53);
                if (v53)
                {
                  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0))
                  {
                    uint64_t TypographicBounds = TXTextObject::getTypographicBounds(v53);
                    double v39 = *(double *)(TypographicBounds + 8) + *(double *)(TypographicBounds + 24);
                  }
                  else
                  {
                    double v39 = *(double *)TXTextObject::getTypographicBounds(v53);
                  }
                }
                else
                {
                  double v39 = 0.0;
                }
                double v40 = (double *)TXTextObject::getTypographicBounds(v55);
                double v41 = *v40;
                double v42 = v40[1];
                double v43 = v40[2];
                double v44 = v40[3];
                int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0);
                v46.n128_f64[0] = vabdd_f64(v34 - v39, v42 + v44) / (ScrollableHeight - v20);
                double v47 = (fabs(v34 - v39 + v42) - v20) / (ScrollableHeight - v20);
                double v48 = (fabs(v34 + v39 + v41) - v20) / (ScrollableHeight - v20);
                double v49 = fabs(v34 + v39 + v41 + v43) / (ScrollableHeight - v20);
                if (ValueAsInt) {
                  double v49 = v47;
                }
                else {
                  v46.n128_f64[0] = v48;
                }
                double v50 = *((double *)this + 2429);
                if (v49 < v50 || v46.n128_f64[0] > v50)
                {
                  if (!a3) {
                    v46.n128_f64[0] = v49;
                  }
                  (*(void (**)(TXTextLayout *, uint64_t, __n128))(*(void *)this + 824))(this, 1, v46);
                }
                if (v54) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v54);
                }
              }
              else
              {
                double v23 = *((double *)v55 + 25);
                if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0))double v23 = *((double *)v55 + 24); {
                double v24 = (TXParagraphStyle **)*((void *)this + 2378);
                }
                double v25 = (double *)*((void *)*v24 + 111);
                double v26 = (TXParagraphStyle **)*((void *)this + 2379);
                while (v24 != v26)
                {
                  double v27 = *v24;
                  unint64_t v28 = *((void *)*v24 + 107);
                  if (v28 <= v11 && *((void *)v27 + 108) + v28 > v11) {
                    goto LABEL_31;
                  }
                  ++v24;
                }
                double v27 = *(v26 - 1);
LABEL_31:
                double v29 = *v25;
                v30.n128_f64[0] = fabs(v23 - *v25 + TXParagraphStyle::getAscenderForCharOffset(v27, v11))
                                / (ScrollableHeight - v20);
                double v31 = (vabdd_f64(v23, v29) - v20) / (ScrollableHeight - v20);
                double v32 = *((double *)this + 2429);
                if (v31 - a4 > v32 || v30.n128_f64[0] - a4 < v32)
                {
                  if (!a3) {
                    v30.n128_f64[0] = v31;
                  }
                  (*(void (**)(TXTextLayout *, uint64_t, __n128))(*(void *)this + 824))(this, 1, v30);
                }
              }
              double v9 = *((double *)this + 2429);
            }
            else
            {
              double v9 = 0.0;
            }
            if (v56) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v56);
            }
          }
          else
          {
            double v9 = 0.0;
            (*(void (**)(TXTextLayout *, void, double))(*(void *)this + 824))(this, 0, 0.0);
          }
        }
        else
        {
          (*(void (**)(TXTextLayout *, void, double))(*(void *)this + 824))(this, 0, 0.0);
        }
      }
    }
  }
  return v9;
}

void sub_1B75EAC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextLayout::getEnableScroll(TXTextLayout *this)
{
  if (!*((unsigned char *)this + 19440) || *(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 25) + 272))() + 1579)) {
    return 0;
  }
  if (!TXTextLayout::shouldScaleToTBMargins(this)
    || (uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0), result))
  {
    if ((TXTextLayout::shouldScaleToLRMargins(this) & 1) == 0
      && !TXTextLayout::shouldScaleProportionallyToLeftRightMargins(this)
      || !OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0))
    {
      return TXTextLayout::shouldScaleToBothMargins(this) ^ 1;
    }
    return 0;
  }
  return result;
}

uint64_t TXTextLayout::shouldScaleToTBMargins(TXTextLayout *this)
{
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 61208), MEMORY[0x1E4F1FA48], 0.0) != 2) {
    return 0;
  }
  unsigned int v2 = (OZChannel *)((char *)this + 20464);
  uint64_t result = OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0);
  if (result != 1) {
    return OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0) == 3
  }
        || OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0) == 4;
  return result;
}

uint64_t TXTextLayout::shouldScaleToLRMargins(TXTextLayout *this)
{
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 61208), MEMORY[0x1E4F1FA48], 0.0) != 1) {
    return 0;
  }
  unsigned int v2 = (OZChannel *)((char *)this + 20464);
  uint64_t result = OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0);
  if (result != 1) {
    return OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0) == 3
  }
        || OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0) == 4;
  return result;
}

uint64_t TXTextLayout::shouldScaleProportionallyToLeftRightMargins(TXTextLayout *this)
{
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 61208), MEMORY[0x1E4F1FA48], 0.0) != 4) {
    return 0;
  }
  unsigned int v2 = (OZChannel *)((char *)this + 20464);
  uint64_t result = OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0);
  if (result != 1) {
    return OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0) == 3
  }
        || OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0) == 4;
  return result;
}

uint64_t TXTextLayout::shouldScaleToBothMargins(TXTextLayout *this)
{
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 61208), MEMORY[0x1E4F1FA48], 0.0) != 3) {
    return 0;
  }
  unsigned int v2 = (OZChannel *)((char *)this + 20464);
  uint64_t result = OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0);
  if (result != 1) {
    return OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0) == 3
  }
        || OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0) == 4;
  return result;
}

double TXTextLayout::getScrollPositionInPixels(TXTextLayout *this)
{
  unsigned int v2 = (OZChannel *)((char *)this + 20464);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0) == 1
    || (double v3 = 0.0, OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0) == 3)
    || OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0) == 4)
  {
    double v3 = 0.0;
    if (TXTextLayout::getEnableScroll(this))
    {
      unint64_t v4 = (double *)&v21;
      v20[0] = 0;
      v20[1] = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v21 = _Q0;
      OZRenderState::OZRenderState(&v19);
      if ((*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200)) {
        uint64_t v10 = (OZScene *)(*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200);
      }
      else {
        uint64_t v10 = (OZScene *)*((void *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
      }
      OZScene::getCurrentTime(v10, &v17);
      *(__n128 *)&v19.var0.var0 = v17;
      v19.var0.var3 = v18;
      OZRenderState::OZRenderState(&v16, &v19);
      double ScrollableHeight = TXTextLayout::getScrollableHeight(this, (CMTime *)&v16);
      (*(void (**)(TXTextLayout *, void *))(*(void *)this + 352))(this, v20);
      if ((OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0)
         || OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0) != 4)
        && (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0)
         || OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0) != 3
         && OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0) != 1))
      {
        unint64_t v4 = (double *)&v21 + 1;
      }
      double v12 = *v4;
      if (ScrollableHeight > *v4
        && (StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048)),
            PCString::size((PCString *)StringPtr)))
      {
        double v14 = *((double *)this + 2429);
      }
      else
      {
        *((void *)this + 2429) = 0;
        double v14 = 0.0;
      }
      return (ScrollableHeight - v12) * v14;
    }
  }
  return v3;
}

uint64_t *TXTextLayout::updateKerningsAfterTextInsertion(uint64_t *this, uint64_t a2, uint64_t a3)
{
  double v3 = this + 2404;
  if (this + 2404 != (uint64_t *)this[2403])
  {
    double v6 = (uint64_t **)(this + 2403);
    do
    {
      uint64_t v18 = 0;
      double v7 = (uint64_t *)*v3;
      __n128 v8 = (uint64_t *)*v3;
      double v9 = v3;
      if (*v3)
      {
        do
        {
          uint64_t v10 = v8;
          __n128 v8 = (uint64_t *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v10 = (uint64_t *)v9[2];
          BOOL v11 = *v10 == (void)v9;
          double v9 = v10;
        }
        while (v11);
      }
      uint64_t v18 = v10[4];
      if (v18 < a2) {
        break;
      }
      double v12 = v3;
      if (v7)
      {
        do
        {
          __n128 v13 = v7;
          double v7 = (uint64_t *)v7[1];
        }
        while (v7);
      }
      else
      {
        do
        {
          __n128 v13 = (uint64_t *)v12[2];
          BOOL v11 = *v13 == (void)v12;
          double v12 = v13;
        }
        while (v11);
      }
      uint64_t v14 = v13[5];
      std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__erase_unique<long>((uint64_t)v6, &v18);
      uint64_t v17 = v18 + a3;
      OZRenderState v19 = &v17;
      this = std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(v6, &v17, (uint64_t)&std::piecewise_construct, &v19);
      this[5] = v14;
      long long v15 = (uint64_t *)*v3;
      if (*v3)
      {
        do
        {
          OZRenderState v16 = v15;
          long long v15 = (uint64_t *)v15[1];
        }
        while (v15);
      }
      else
      {
        do
        {
          OZRenderState v16 = (uint64_t *)v3[2];
          BOOL v11 = *v16 == (void)v3;
          double v3 = v16;
        }
        while (v11);
      }
      double v3 = v16;
    }
    while (v16 != *v6);
  }
  return this;
}

void TXTextLayout::updateKerningsAfterTextDeletion(TXTextLayout *this, uint64_t a2, uint64_t a3)
{
  double v3 = (uint64_t *)*((void *)this + 2403);
  unint64_t v4 = (uint64_t *)((char *)this + 19232);
  if (v3 != (uint64_t *)((char *)this + 19232))
  {
    uint64_t v7 = a3 + a2;
    __n128 v8 = (uint64_t **)((char *)this + 19224);
    do
    {
      uint64_t v9 = v3[4];
      if (v9 >= a2 && v9 < v7)
      {
        double v12 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v8, v3);
        operator delete(v3);
      }
      else if (v9 >= v7)
      {
        uint64_t v14 = v3[5];
        long long v15 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v8, v3);
        operator delete(v3);
        v18[0] = v9 - a3;
        v18[1] = v14;
        OZRenderState v16 = std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_hint_unique_key_args<long,std::pair<long,double>>(v8, v15, v18, v18);
        uint64_t v17 = (uint64_t *)v16[1];
        if (v17)
        {
          do
          {
            double v12 = v17;
            uint64_t v17 = (uint64_t *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            double v12 = (uint64_t *)v16[2];
            BOOL v13 = *v12 == (void)v16;
            OZRenderState v16 = v12;
          }
          while (!v13);
        }
      }
      else
      {
        BOOL v11 = (uint64_t *)v3[1];
        if (v11)
        {
          do
          {
            double v12 = v11;
            BOOL v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            double v12 = (uint64_t *)v3[2];
            BOOL v13 = *v12 == (void)v3;
            double v3 = v12;
          }
          while (!v13);
        }
      }
      double v3 = v12;
    }
    while (v12 != v4);
  }
}

uint64_t *TXTextLayout::getKerningsForRange(uint64_t *result, void *a2, uint64_t **a3)
{
  double v3 = (uint64_t *)result[2403];
  unint64_t v4 = result + 2404;
  if (v3 != result + 2404)
  {
    do
    {
      unint64_t v7 = v3[4];
      if (v7 >= *a2)
      {
        if (v7 >= a2[1] + *a2) {
          return result;
        }
        uint64_t v8 = v3[5];
        unint64_t v12 = v7 - *a2;
        BOOL v13 = &v12;
        uint64_t result = std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(a3, (uint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v13);
        result[5] = v8;
      }
      uint64_t v9 = (uint64_t *)v3[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (uint64_t *)v3[2];
          BOOL v11 = *v10 == (void)v3;
          double v3 = v10;
        }
        while (!v11);
      }
      double v3 = v10;
    }
    while (v10 != v4);
  }
  return result;
}

void TXTextLayout::shiftKerningsToLeft(uint64_t **this)
{
  unsigned int v2 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v5, v2);
  double v3 = this[2403];
  if (this + 2404 != (uint64_t **)v3)
  {
    do
    {
      TXTextLayout::setKerningAtCharOffset((TXParagraphStyle ***)this, *((double *)v3 + 5), v3[4] - 1);
      unint64_t v4 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(this + 2403, v3);
      operator delete(v3);
      double v3 = v4;
    }
    while (this + 2404 != (uint64_t **)v4);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v5);
}

void sub_1B75EB68C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::getTrackingForRange(uint64_t a1, uint64_t *a2, CMTime *a3, uint64_t a4)
{
  unint64_t v4 = (PCString *)(a1 + 64304);
  uint64_t v5 = *(void *)(a1 + 64304);
  if (v5)
  {
    uint64_t v10 = *a2;
    BOOL v11 = (PCString *)(a1 + 64304);
    uint64_t v12 = *(void *)(a1 + 64304);
    do
    {
      unsigned int v13 = *(_DWORD *)(v12 + 32);
      BOOL v14 = v13 >= v10;
      if (v13 >= v10) {
        long long v15 = (uint64_t *)v12;
      }
      else {
        long long v15 = (uint64_t *)(v12 + 8);
      }
      if (v14) {
        BOOL v11 = (PCString *)v12;
      }
      uint64_t v12 = *v15;
    }
    while (*v15);
    if (v11 != v4 && LODWORD(v11[4].var0) <= v10)
    {
      unsigned int v16 = *((_DWORD *)a2 + 2) + v10;
      uint64_t v17 = (PCString *)(a1 + 64304);
      do
      {
        unsigned int v18 = *(_DWORD *)(v5 + 32);
        BOOL v19 = v18 >= v16;
        if (v18 >= v16) {
          double v20 = (uint64_t *)v5;
        }
        else {
          double v20 = (uint64_t *)(v5 + 8);
        }
        if (v19) {
          uint64_t v17 = (PCString *)v5;
        }
        uint64_t v5 = *v20;
      }
      while (*v20);
      if (v17 == v4 || LODWORD(v17[4].var0) > v16) {
        uint64_t v17 = (PCString *)(a1 + 64304);
      }
      var0 = (PCString *)v17->var0;
      if (v17->var0)
      {
        do
        {
          double v22 = var0;
          var0 = (PCString *)var0[1].var0;
        }
        while (var0);
      }
      else
      {
        do
        {
          double v22 = (PCString *)v17[2].var0;
          BOOL v23 = v22->var0 == (__CFString *)v17;
          uint64_t v17 = v22;
        }
        while (v23);
      }
      if (v11 != v22)
      {
        while (v22 == v4 || PCString::isWhitespaceAndNewline(v22 + 5))
        {
          double v24 = v22->var0;
          if (v22->var0)
          {
            do
            {
              double v25 = v24;
              double v24 = (__CFString *)v24->info;
            }
            while (v24);
          }
          else
          {
            do
            {
              double v25 = v22[2].var0;
              BOOL v23 = v25->isa == v22;
              double v22 = (PCString *)v25;
            }
            while (v23);
          }
          double v22 = (PCString *)v25;
          if (v11 == (PCString *)v25) {
            return;
          }
        }
        if (v11 != v22)
        {
          do
          {
            uint64_t var0_low = LODWORD(v11[4].var0);
            if ((PCString::isNewline(v11 + 5) & 1) == 0)
            {
              TXTextLayout::getStyleAtCharOffset(a1, var0_low, &v56);
              double v27 = v56;
              CMTime v55 = *a3;
              float Size = TXTextStyle::getSize(v56, &v55, 0.0);
              unsigned int v29 = v11[8].var0;
              CMTime v54 = *a3;
              OZChannel::getValueAsDouble((OZChannel *)(a1 + 19600), &v54, 0.0);
              double v31 = v30;
              CMTime v53 = *a3;
              OZChannel::getValueAsDouble((OZChannel *)((char *)v27 + 2256), &v53, 0.0);
              double v33 = v32;
              CMTime v52 = *a3;
              OZChannel::getValueAsDouble((OZChannel *)(a1 + 27832), &v52, (double)v29);
              double v35 = v34;
              CMTime v51 = *a3;
              OZChannel::getValueAsDouble((OZChannel *)(a1 + 19752), &v51, 0.0);
              double v37 = v36;
              CMTime v50 = *a3;
              OZChannel::getValueAsDouble((OZChannel *)((char *)v27 + 49416), &v50, 0.0);
              double v39 = v38;
              CMTime v49 = *a3;
              OZChannel::getValueAsDouble((OZChannel *)(a1 + 27984), &v49, (double)v29);
              double v41 = (v31 + v33 + v35 + (v37 + v39 + v40) * Size) * TXTextLayout::getXMarginScale((TXTextLayout *)a1);
              uint64_t v42 = var0_low - *a2;
              uint64_t v48 = v42;
              for (uint64_t i = *(void **)(a4 + 8); i; uint64_t i = (void *)*i)
              {
                uint64_t v44 = i[4];
                if (v42 >= v44)
                {
                  if (v44 >= v42)
                  {
                    v58[0] = &v48;
                    int v45 = std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t **)a4, &v48, (uint64_t)&std::piecewise_construct, v58);
                    *((double *)v45 + 5) = v41 + *((double *)v45 + 5);
                    goto LABEL_45;
                  }
                  ++i;
                }
              }
              v58[0] = &v48;
              *((double *)std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t **)a4, &v48, (uint64_t)&std::piecewise_construct, v58)+ 5) = v41;
LABEL_45:
              if (v57) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v57);
              }
            }
            __n128 v46 = v11[1].var0;
            if (v46)
            {
              do
              {
                double v47 = (PCString *)v46;
                __n128 v46 = (__CFString *)v46->isa;
              }
              while (v46);
            }
            else
            {
              do
              {
                double v47 = (PCString *)v11[2].var0;
                BOOL v23 = v47->var0 == (__CFString *)v11;
                BOOL v11 = v47;
              }
              while (!v23);
            }
            BOOL v11 = v47;
          }
          while (v47 != v22);
        }
      }
    }
  }
}

void sub_1B75EBA88(_Unwind_Exception *exception_object)
{
  double v3 = *(std::__shared_weak_count **)(v1 - 184);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

double TXTextLayout::getXMarginScale(TXTextLayout *this)
{
  if ((TXTextLayout::shouldScaleToLRMargins(this) & 1) != 0
    || (int shouldScaleProportionallyToLeftRightMargins = TXTextLayout::shouldScaleProportionallyToLeftRightMargins(this),
        double result = 1.0,
        shouldScaleProportionallyToLeftRightMargins))
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0);
    uint64_t v5 = (char *)this + 61624;
    if (!ValueAsInt) {
      uint64_t v5 = (char *)this + 61616;
    }
    return *(double *)v5;
  }
  return result;
}

void TXTextLayout::applyKerningAndTrackingToAttributedString(TXTextLayout *this, __CFAttributedString *a2, CMTime *a3, const CFRange *a4)
{
  uint64_t v8 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v14, v8);
  v13[0] = 0;
  v13[1] = 0;
  v11[1] = 0;
  uint64_t v12 = (uint64_t *)v13;
  uint64_t v10 = v11;
  v11[0] = 0;
  *(CFRange *)uint64_t v9 = *a4;
  TXTextLayout::getKerningsForRange((uint64_t *)this, v9, &v12);
  TXTextLayout::getTrackingForRange((uint64_t)this, v9, a3, (uint64_t)&v10);
  applyKerningsToAttributedString(&v12, @"SimpeValueDict::kerning", a2);
  applyKerningsToAttributedString(&v10, @"SimpeValueDict::tracking", a2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v10, v11[0]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v12, v13[0]);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v14);
}

void sub_1B75EBBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, char a15, void *a16)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a12, a13);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a15, a16);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v16 - 40));
  _Unwind_Resume(a1);
}

void applyKerningsToAttributedString(void *a1, const __CFString *a2, CFMutableAttributedStringRef aStr)
{
  CFAttributedStringBeginEditing(aStr);
  CFStringRef String = CFAttributedStringGetString(aStr);
  CFIndex Length = CFStringGetLength(String);
  uint64_t v10 = (double *)*a1;
  uint64_t v8 = (double *)(a1 + 1);
  uint64_t v9 = v10;
  if (v10 != v8)
  {
    unint64_t v11 = Length;
    CFStringRef v12 = (const __CFString *)*MEMORY[0x1E4F24778];
    do
    {
      unint64_t v13 = *((void *)v9 + 4);
      if (v13 >= v11) {
        break;
      }
      double v14 = v9[5];
      double v26 = v14;
      if (v14 <= -0.0000001 || v14 >= 0.0000001)
      {
        CFRange RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(String, v13);
        double valuePtr = 0.0;
        CFNumberRef Attribute = (const __CFNumber *)CFAttributedStringGetAttribute(aStr, v13, v12, 0);
        if (Attribute)
        {
          int Value = CFNumberGetValue(Attribute, kCFNumberDoubleType, &valuePtr);
          double v18 = valuePtr;
          if (!Value) {
            double v18 = -0.0;
          }
        }
        else
        {
          double v18 = -0.0;
        }
        double v24 = v18 + v26;
        CFNumberRef v19 = CFNumberCreate(0, kCFNumberDoubleType, &v24);
        CFAttributedStringSetAttribute(aStr, RangeOfComposedCharactersAtIndex, v12, v19);
        CFRelease(v19);
        if (a2)
        {
          CFNumberRef v20 = CFNumberCreate(0, kCFNumberDoubleType, &v26);
          CFAttributedStringSetAttribute(aStr, RangeOfComposedCharactersAtIndex, a2, v20);
          CFRelease(v20);
        }
      }
      long long v21 = (double *)*((void *)v9 + 1);
      if (v21)
      {
        do
        {
          double v22 = v21;
          long long v21 = *(double **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          double v22 = (double *)*((void *)v9 + 2);
          BOOL v23 = *(void *)v22 == (void)v9;
          uint64_t v9 = v22;
        }
        while (!v23);
      }
      uint64_t v9 = v22;
    }
    while (v22 != v8);
  }
  CFAttributedStringEndEditing(aStr);
}

uint64_t TXTextLayout::getAlignmentOffset(TXTextLayout *this, double *a2, double *a3, CMTime *a4)
{
  uint64_t v8 = (CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), MEMORY[0x1E4F1FA48], 0.0);
  double v10 = v9;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), v8, 0.0);
  double v12 = v11;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), v8, 0.0);
  double v14 = v13;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), v8, 0.0);
  double v16 = v15;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), v8, 0.0);
  int v18 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v8, 0.0);
  int v19 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v8, 0.0);
  int v20 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v8, 0.0);
  if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v8, 0.0)) {
    goto LABEL_14;
  }
  if (v18 == 1 || v19 == 3)
  {
    if (ValueAsInt) {
      double v31 = v16;
    }
    else {
      double v31 = v12;
    }
    *a2 = v31;
    long long v105 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)long long v106 = _Q0;
    v103[0] = 0;
    v103[1] = 0;
    long long v104 = _Q0;
    TXTextLayout::getTypographicBounds((uint64_t)this, (uint64_t)&v105, a4, 0, 0);
    if (TXTextLayout::shouldScaleToBothMargins(this) && *(unsigned char *)(theApp + 82))
    {
      TXTextLayout::_getImageBoundsFromParagraphs(this, a4, (uint64_t)v102);
      long long v105 = *(_OWORD *)v102;
      *(_OWORD *)long long v106 = *(_OWORD *)&v102[16];
      double DiffBetweenTopImageBoundAndTopTypographicBound = TXTextLayout::_getDiffBetweenTopImageBoundAndTopTypographicBound(this, v36);
      v106[1] = DiffBetweenTopImageBoundAndTopTypographicBound + v106[1];
      char v38 = 1;
    }
    else
    {
      char v38 = 0;
    }
    BOOL v40 = v19 == 3 || v18 == 1;
    if (ValueAsInt) {
      BOOL v41 = v40;
    }
    else {
      BOOL v41 = v20 == 4;
    }
    double v42 = v106[1];
    if (v41) {
      double v43 = v106[0];
    }
    else {
      double v43 = v106[1];
    }
    (*(void (**)(TXTextLayout *, void *))(*(void *)this + 352))(this, v103);
    uint64_t v44 = 3;
    if (v41) {
      uint64_t v44 = 2;
    }
    double v45 = *(double *)&v103[v44];
    __n128 v46 = (OZChannel *)((char *)this + 21368);
    double v47 = (CMTime *)MEMORY[0x1E4F1FA48];
    uint64_t v48 = (uint64_t *)((char *)this + 58824);
    if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 21368), MEMORY[0x1E4F1FA48], 0.0)
      || v43 > v45 && *((unsigned char *)this + 19440))
    {
      TXTextLayout::getStyleAtCharOffset((uint64_t)this, 0, v102);
      uint64_t v49 = *((void *)this + 2378);
      if (*((void *)this + 2379) == v49)
      {
        CMTime v101 = *v47;
        double Size = TXTextStyle::getSize(*(OZChannel **)v102, &v101, 0.0);
      }
      else
      {
        double Size = **(double **)(*(void *)v49 + 888);
      }
      if (*((_DWORD *)this + 15128) == 1)
      {
        CMTime v100 = *v47;
        float v66 = TXTextStyle::getSize(*(OZChannel **)v102, &v100, 0.0);
        long long v67 = (void *)*((void *)this + 2419);
        if (v67 != (void *)((char *)this + 19344))
        {
          double v68 = Size - v66;
          uint64_t v69 = MEMORY[0x1E4F1FA48];
          do
          {
            (*(void (**)(uint64_t, uint64_t, double))(*(void *)(v67[2] + 2560) + 768))(v67[2] + 2560, v69, v68);
            long long v67 = (void *)v67[1];
          }
          while (v67 != (void *)((char *)this + 19344));
        }
        *((_DWORD *)this + 15128) = 2;
      }
      if (ValueAsInt)
      {
        v70 = *(double **)(**((void **)this + 2378) + 888);
        *a2 = *a2 + (*v70 - v70[1]) * -0.5;
      }
      else
      {
        double v14 = v14 - Size;
      }
      *a3 = v14;
      double v71 = *(std::__shared_weak_count **)&v102[8];
      if (*(void *)&v102[8]) {
        goto LABEL_67;
      }
      return 0;
    }
    *(_OWORD *)v102 = *(_OWORD *)&a4->value;
    *(void *)&v102[16] = a4->epoch;
    double v51 = **(double **)(**((void **)this + 2378) + 888);
    if ((v38 & 1) == 0)
    {
      double v42 = 0.0;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 22136), (const CMTime *)v102, 0.0);
      CMTime v53 = (uint64_t *)*((void *)this + 2378);
      CMTime v54 = (uint64_t *)*((void *)this + 2379);
      if (v53 == v54) {
        goto LABEL_70;
      }
      double v55 = v52;
      double v94 = v51;
      double v56 = *((double *)this + 8050);
      do
      {
        uint64_t v57 = *v53;
        CMTime v99 = *(CMTime *)v102;
        OZChannel::getValueAsDouble((OZChannel *)(v57 + 680), &v99, 0.0);
        double v59 = v58;
        (*(void (**)(TXTextLayout *, unsigned char *))(*(void *)this + 712))(this, v102);
        uint64_t v61 = *(unsigned int *)(v57 + 876);
        if (v61)
        {
          double v62 = v56 + v59 * v60;
          double v63 = (double *)(*(void *)(v57 + 888) + 8);
          do
          {
            double v42 = v42 + v55 + v62 + *(v63 - 1) - *v63;
            v63 += 8;
            --v61;
          }
          while (v61);
        }
        ++v53;
      }
      while (v53 != v54);
      if (v42 <= 0.0)
      {
        double v51 = v94;
      }
      else
      {
        uint64_t v64 = *(void *)(*((void *)this + 2379) - 8);
        CMTime v98 = *(CMTime *)v102;
        OZChannel::getValueAsDouble((OZChannel *)(v64 + 680), &v98, 0.0);
        double v51 = v94;
        double v42 = v42 - v65 * (*(double (**)(TXTextLayout *, unsigned char *))(*(void *)this + 712))(this, v102);
      }
      if (v42 <= 0.0)
      {
LABEL_70:
        uint64_t v74 = **((void **)this + 2378);
        CMTime v97 = *(CMTime *)v102;
        OZChannel::getValueAsDouble((OZChannel *)(v74 + 680), &v97, 0.0);
        double v42 = v42 - v75 * (*(double (**)(TXTextLayout *, unsigned char *))(*(void *)this + 712))(this, v102);
      }
      HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
      if (OZHostApplicationDelegateHandler::wantsToComputeTypographicHeightWithoutLastLineLeading(HostApplicationDelegate))
      {
        uint64_t v77 = *(void *)(*((void *)this + 2379) - 8);
        int v78 = *(_DWORD *)(v77 + 876);
        if (v78) {
          double v79 = 0.0 - *(double *)(*(void *)(v77 + 888) + ((unint64_t)(v78 - 1) << 6) + 16);
        }
        else {
          double v79 = 0.0;
        }
        double v42 = v42 - v79;
      }
    }
    uint64_t v80 = (TXTextLayout *)((char *)this + 19048);
    StringPtr = TXChannelString::getStringPtr(v80);
    unsigned int v82 = PCString::size((PCString *)StringPtr);
    TXChannelString::getString((PCString *)v80, (PCString *)&theString);
    UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(theString, (int)(v82 - 1));
    if (TXCharacterSetIsNewline(CharacterAtIndex))
    {
      uint64_t v84 = *v48;
      if (*v48 != v48[1])
      {
        double v85 = *(TXTextObject **)v84;
        int v86 = *(std::__shared_weak_count **)(v84 + 8);
        if (v86) {
          atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        double v42 = v42 + *(double *)(TXTextObject::getTypographicBounds(v85) + 24);
        if (v86) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v86);
        }
      }
    }
    int v87 = OZChannel::getValueAsInt(v46, MEMORY[0x1E4F1FA48], 0.0);
    double v88 = v14 - v10;
    double v89 = v16 - v12;
    if (v87 == 1)
    {
      double v90 = v42 * 0.5;
      if (ValueAsInt)
      {
        *a3 = v14;
        double v91 = v16 + v89 * -0.5 + v90;
LABEL_87:
        *a2 = v91 - v51;
LABEL_91:
        PCString::~PCString((PCString *)&theString);
        return 0;
      }
      double v92 = v14 - v51 + v88 * -0.5 + v90;
    }
    else
    {
      if (ValueAsInt)
      {
        *a3 = v14;
        double v91 = v16 - v89 + v42;
        goto LABEL_87;
      }
      double v92 = v14 - v51 - v88 + v42;
    }
    *a3 = v92;
    goto LABEL_91;
  }
  if (v20 != 4)
  {
LABEL_14:
    *a2 = 0.0;
    *a3 = 0.0;
    return 0;
  }
  TXTextLayout::getStyleAtCharOffset((uint64_t)this, 0, &v105);
  long long v21 = (uint64_t *)*((void *)this + 2379);
  double v22 = (uint64_t *)*((void *)this + 2378);
  if (v21 == v22)
  {
    CMTime v95 = *v8;
    double v23 = 0.0;
    double v24 = TXTextStyle::getSize((OZChannel *)v105, &v95, 0.0);
  }
  else
  {
    double v23 = 0.0;
    double v24 = 0.0;
    do
    {
      uint64_t v25 = *v22;
      uint64_t v26 = *(unsigned int *)(*v22 + 876);
      if (v26)
      {
        double v27 = *(double *)(v25 + 920);
        unint64_t v28 = (double *)(*(void *)(v25 + 888) + 8);
        do
        {
          double v23 = v23 + v27;
          double v29 = *v28;
          v28 += 8;
          double v30 = v29;
          if (v29 < v24) {
            double v24 = v30;
          }
          --v26;
        }
        while (v26);
      }
      ++v22;
    }
    while (v22 != v21);
  }
  double v72 = v10 - v24;
  if (!ValueAsInt) {
    double v24 = -v23;
  }
  double v73 = v16 + v24;
  if (ValueAsInt) {
    double v72 = v14;
  }
  *a2 = v73;
  *a3 = v72;
  double v71 = (std::__shared_weak_count *)*((void *)&v105 + 1);
  if (*((void *)&v105 + 1)) {
LABEL_67:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  return 0;
}

void sub_1B75EC5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

void TXTextLayout::_getImageBoundsFromParagraphs(TXTextLayout *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 16) = _Q0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 22136), a2, 0.0);
  double v12 = (uint64_t *)*((void *)this + 2378);
  double v13 = (uint64_t *)*((void *)this + 2379);
  if (v12 != v13)
  {
    double v14 = v11;
    uint64_t v15 = 1;
    double v16 = 0.0;
    do
    {
      uint64_t v17 = *v12;
      CMTime v29 = *a2;
      OZChannel::getValueAsDouble((OZChannel *)(v17 + 680), &v29, 0.0);
      double v19 = v18;
      (*(void (**)(TXTextLayout *, const CMTime *))(*(void *)this + 712))(this, a2);
      uint64_t v21 = *(unsigned int *)(*v12 + 876);
      if (v21)
      {
        uint64_t v22 = 0;
        double v23 = (v14 + v19) * v20;
        uint64_t v24 = *(void *)(*v12 + 888);
        uint64_t v25 = v21 << 6;
        do
        {
          float64x2_t v26 = *(float64x2_t *)(v24 + v22 + 48);
          v28[0] = *(float64x2_t *)(v24 + v22 + 32);
          v28[1] = v26;
          if ((v15 & 1) == 0) {
            double v16 = v16 - (v23 + *(double *)(v24 + v22));
          }
          v28[0].f64[0] = v28[0].f64[0] + 0.0;
          v28[0].f64[1] = v16 + v28[0].f64[1];
          PCRect<double>::operator|=((float64x2_t *)a3, v28);
          uint64_t v27 = 0;
          LOBYTE(v15) = 0;
          uint64_t v24 = *(void *)(*v12 + 888);
          double v16 = v16 + *(double *)(v24 + v22 + 8);
          v22 += 64;
        }
        while (v25 != v22);
      }
      else
      {
        uint64_t v27 = v15;
      }
      ++v12;
      uint64_t v15 = v27;
    }
    while (v12 != v13);
  }
}

double TXTextLayout::_getDiffBetweenTopImageBoundAndTopTypographicBound(TXTextLayout *this, const OZRenderState *a2)
{
  uint64_t v2 = *((void *)this + 2378);
  if (*((void *)this + 2379) == v2) {
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  }
  return **(double **)(*(void *)v2 + 888)
       - (*(double *)(*(void *)(*(void *)v2 + 888) + 40)
        + *(double *)(*(void *)(*(void *)v2 + 888) + 56));
}

uint64_t TXTextLayout::_computeTypographicHeightWithoutLastLineLeading(TXTextLayout *this)
{
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);

  return OZHostApplicationDelegateHandler::wantsToComputeTypographicHeightWithoutLastLineLeading(HostApplicationDelegate);
}

double TXTextLayout::_lastLineLeading(TXTextLayout *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2379) - 8);
  int v2 = *(_DWORD *)(v1 + 876);
  if (v2) {
    return 0.0 - *(double *)(*(void *)(v1 + 888) + ((unint64_t)(v2 - 1) << 6) + 16);
  }
  else {
    return 0.0;
  }
}

OZRenderState *TXTextLayout::getAlignmentOffsetForParagraph(OZRenderState *this, const TXParagraphStyle *a2, double *a3, double *a4, int a5, unsigned int a6, double a7, double a8)
{
  uint64_t v12 = (uint64_t)this;
  if (a6 <= 4 && ((1 << a6) & 0x1A) != 0)
  {
    double v24 = 0.0;
    double v25 = 0.0;
    this = OZRenderState::OZRenderState(&v23);
    if (a7 == -1.0 || a8 == -1.0)
    {
      this = (OZRenderState *)(*(uint64_t (**)(uint64_t, double *, double *, OZRenderState *))(*(void *)v12 + 1016))(v12, &v25, &v24, &v23);
      a8 = v24;
      a7 = v25;
    }
    *a3 = a7;
    *a4 = a8;
    return this;
  }
  if (!a5) {
    goto LABEL_18;
  }
  if (a6)
  {
    double v16 = *((double *)a2 + 115);
    double v17 = *(double *)&this[226].var5;
    if (a5 != 1)
    {
      if (a5 != 2) {
        return this;
      }
      double v18 = -(v16 - v17);
LABEL_21:
      *a3 = v18;
      return this;
    }
    double v19 = v16 - v17;
    double v20 = -0.5;
LABEL_20:
    double v18 = v19 * v20;
    goto LABEL_21;
  }
  if (a5 == 3 || a5 == 6)
  {
LABEL_18:
    *a3 = 0.0;
    return this;
  }
  uint64_t v21 = (OZChannel *)&this[78].var7.var0[1][3];
  this = (OZRenderState *)OZChannel::getValueAsInt((OZChannel *)&this[78].var7.var0[1][3], MEMORY[0x1E4F1FA48], 0.0);
  double v22 = *((double *)a2 + 115);
  if (this) {
    *a4 = v22;
  }
  else {
    *a3 = -v22;
  }
  if (a5 == 4 || a5 == 1)
  {
    this = (OZRenderState *)OZChannel::getValueAsInt(v21, MEMORY[0x1E4F1FA48], 0.0);
    if (this)
    {
      *a4 = *a4 * 0.5;
      return this;
    }
    double v19 = *a3;
    double v20 = 0.5;
    goto LABEL_20;
  }
  return this;
}

uint64_t TXTextLayout::getBaseline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 19024);
  if (*(void *)(a1 + 19032) == v6) {
    double v7 = -0.0;
  }
  else {
    double v7 = (**(double **)(*(void *)v6 + 888) - *(double *)(*(void *)(*(void *)v6 + 888) + 8)) * -0.5;
  }
  uint64_t v8 = (OZChannel *)(a1 + 20720);
  double v9 = (const CMTime *)MEMORY[0x1E4F1FA48];
  if (!OZChannel::getValueAsInt((OZChannel *)(a1 + 20720), MEMORY[0x1E4F1FA48], 0.0)) {
    double v7 = 0.0;
  }
  uint64_t result = OZChannel::getValueAsInt((OZChannel *)(a1 + 20720), v9, 0.0);
  *(double *)a2 = v7;
  *(void *)(a2 + 8) = 0;
  double v11 = *(TXParagraphStyle ***)(a1 + 19024);
  if (*(TXParagraphStyle ***)(a1 + 19032) == v11)
  {
LABEL_33:
    *(double *)a3 = v7;
    *(void *)(a3 + 8) = 0;
    return result;
  }
  int v12 = result;
  double v13 = *v11;
  double v14 = *((double *)*v11 + 115);
  if (result) {
    double v15 = *((double *)*v11 + 115);
  }
  else {
    double v15 = 0.0;
  }
  if (result) {
    double v16 = v7;
  }
  else {
    double v16 = *((double *)*v11 + 115);
  }
  *(double *)a3 = v16;
  *(double *)(a3 + 8) = v15;
  uint64_t result = TXParagraphStyle::getAlignment(v13);
  if (result != 1)
  {
    uint64_t result = TXParagraphStyle::getAlignment(v13);
    if (result != 2) {
      return result;
    }
    uint64_t result = OZChannel::getValueAsInt(v8, MEMORY[0x1E4F1FA48], 0.0);
    double v21 = -v14;
    if (result) {
      double v21 = v14;
    }
    if (v12) {
      double v22 = v21;
    }
    else {
      double v22 = 0.0;
    }
    if (v12) {
      double v21 = v7;
    }
    *(double *)a2 = v21;
    *(double *)(a2 + 8) = v22;
    goto LABEL_33;
  }
  double v17 = v14 * -0.5;
  if (v12) {
    double v18 = v7;
  }
  else {
    double v18 = v14 * -0.5;
  }
  double v19 = 0.0;
  if (v12) {
    double v19 = v14 * 0.5;
  }
  else {
    double v17 = 0.0;
  }
  *(double *)a2 = v18;
  *(double *)(a2 + 8) = v17;
  if (v12) {
    double v20 = v7;
  }
  else {
    double v20 = v14 * 0.5;
  }
  *(double *)a3 = v20;
  *(double *)(a3 + 8) = v19;
  return result;
}

void TXTextLayout::getOriginalBounds(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v4 = v2;
  v87[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  uint64_t v5 = (unsigned int *)(v1 + 52212);
  if (!*(unsigned char *)(v1 + 52360))
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v2 + 16) = _Q0;
    return;
  }
  uint64_t v6 = v3;
  uint64_t v7 = v1;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v86);
  TXTextLayout::doLayout((TXTextLayout *)v7, v6, (PCHash128 *)&v86);
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v87);
  PCHashWriteStream::writeValue(v87, v6->var20);
  PCHashWriteStream::writeValue(v87, v6->var29);
  Hash = PCHashWriteStream::getHash(v87);
  PCHash128::operator+=(v86.i32, (int *)Hash);
  double v9 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)v7);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v85, v9);
  double v10 = (_OWORD *)(v7 + 59008);
  if (*(double *)(v7 + 59024) >= 0.0
    && *(double *)(v7 + 59032) >= 0.0
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v86, *(int32x4_t *)(v7 + 59040))))) & 1) == 0
    && !*(unsigned char *)(v7 + 19392)
    && !TXTextLayout::isAnyParagraphDirty((TXTextLayout *)v7)
    && OZChannel::getValueAsInt((OZChannel *)(v7 + 20464), MEMORY[0x1E4F1FA48], 0.0) != 2
    && !v6->var22)
  {
    long long v64 = *(_OWORD *)(v7 + 59024);
    *(_OWORD *)uint64_t v4 = *v10;
    *(_OWORD *)(v4 + 16) = v64;
    goto LABEL_92;
  }
  CMTime var0 = (CMTime)v6->var0;
  OZChannel::getValueAsDouble((OZChannel *)(v7 + 59888), &var0, 0.0);
  double v12 = v11;
  CMTime v83 = (CMTime)v6->var0;
  OZChannel::getValueAsDouble((OZChannel *)(v7 + 60360), &v83, 0.0);
  double v14 = v13;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v7 + 20464), MEMORY[0x1E4F1FA48], 0.0);
  int v16 = OZChannel::getValueAsInt((OZChannel *)(v7 + 20464), MEMORY[0x1E4F1FA48], 0.0);
  __asm { FMOV            V0.2D, #-1.0 }
  long long v68 = _Q0;
  *(_OWORD *)(v4 + 16) = _Q0;
  if (OZChannel::getValueAsInt((OZChannel *)(v7 + 20464), MEMORY[0x1E4F1FA48], 0.0) != 1 || !v6->var20)
  {
    double v22 = *(TXTextObject ***)(v7 + 58824);
    OZRenderState v23 = *(TXTextObject ***)(v7 + 58832);
    OZRenderParams::OZRenderParams((OZRenderParams *)v82);
    long long v67 = v5;
    OZRenderParams::setState((OZRenderParams *)v82, v6);
    v82[0].var4 = 1;
    HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
    int v66 = OZHostApplicationDelegateHandler::wantsToAdjustTextBoundsHeightUsingCapHeight(HostApplicationDelegate);
    int v25 = OZHostApplicationDelegateHandler::wantsToIgnoreTextBoundsOfTransparentObjects(HostApplicationDelegate);
    int v26 = OZHostApplicationDelegateHandler::wantsToIgnoreTextBoundsOfNewlinesOfTranscriptions(HostApplicationDelegate);
    if (v22 == v23)
    {
LABEL_90:
      OZRenderParams::~OZRenderParams((OZRenderParams *)v82);
      double v10 = (_OWORD *)(v7 + 59008);
      goto LABEL_91;
    }
    int v27 = v26;
    BOOL v29 = ValueAsInt == 3 || v16 == 4;
    BOOL v65 = v29;
    while (1)
    {
      int v30 = *((unsigned __int16 *)*v22 + 60);
      if (!v25
        || (double FaceOpacity = TXTextObject::getFaceOpacity(*v22, (CMTime *)v6), v6->var25)
        || FaceOpacity <= -0.0000001
        || FaceOpacity >= 0.0000001)
      {
        int v32 = v30 == 10 ? v27 : 0;
        if (v32 != 1
          || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)(v7 + 208) + 8), (int32x4_t)xmmword_1B7E78250)))) & 1) != 0)
        {
          float64x2_t v80 = 0uLL;
          long long v81 = v68;
          if (*((unsigned char *)*v22 + 138))
          {
            int v33 = *((unsigned __int16 *)*v22 + 60);
            if (v22 + 2 != v23)
            {
              double v35 = v22[2];
              double v34 = (std::__shared_weak_count *)v22[3];
              if (v34) {
                atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (*((_WORD *)v35 + 60) == 10)
              {
                BOOL v36 = 1;
                if (!v34) {
                  goto LABEL_49;
                }
                goto LABEL_48;
              }
              uint64_t v37 = *((unsigned int *)v35 + 184);
              unint64_t v38 = *v67;
              if ((int)v38 >= 1)
              {
                uint64_t v39 = *(void *)(v67 + 1);
                goto LABEL_43;
              }
              if (v38)
              {
                uint64_t v39 = 0;
LABEL_43:
                uint64_t v40 = 0;
                BOOL v36 = 1;
                do
                {
                  if (v39 && *(void *)(v39 + 8 * v40) == v37) {
                    break;
                  }
                  BOOL v36 = ++v40 < v38;
                }
                while (v38 != v40);
                if (!v34)
                {
LABEL_49:
                  if (v30 != 10 && (!v36 || v33 != 32 || *(void *)(v7 + 58832) - *(void *)(v7 + 58824) <= 0x10uLL))
                  {
                    switch(v6->var29)
                    {
                      case 0:
                        uint64_t TypographicBounds = TXTextObject::getTypographicBounds(*v22);
                        long long v42 = *(_OWORD *)(TypographicBounds + 16);
                        float64x2_t v80 = *(float64x2_t *)TypographicBounds;
                        long long v81 = v42;
                        goto LABEL_80;
                      case 1:
                        uint64_t v43 = *((void *)*v22 + 33);
                        if (v43)
                        {
                          uint64_t v44 = *(OZChannel **)(v43 + 8);
                          double v45 = *(std::__shared_weak_count **)(v43 + 16);
                          if (v45) {
                            atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                        }
                        else
                        {
                          double v45 = 0;
                          uint64_t v44 = 0;
                        }
                        CMTime v78 = (CMTime)v6->var0;
                        float Size = TXTextStyle::getSize(v44, &v78, 0.0);
                        if (v45) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
                        }
                        double v54 = Size;
                        float CapHeight = TXTextObject::getCapHeight(*v22, Size);
                        TXTextObject::getBoundingRectForGlyph(*v22, v54);
                        goto LABEL_78;
                      case 2:
                        uint64_t v46 = *((void *)*v22 + 33);
                        if (v46)
                        {
                          double v47 = *(OZChannel **)(v46 + 8);
                          uint64_t v48 = *(std::__shared_weak_count **)(v46 + 16);
                          if (v48) {
                            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                        }
                        else
                        {
                          uint64_t v48 = 0;
                          double v47 = 0;
                        }
                        CMTime v77 = (CMTime)v6->var0;
                        float v58 = TXTextStyle::getSize(v47, &v77, 0.0);
                        if (v48) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
                        }
                        double v59 = v58;
                        float CapHeight = TXTextObject::getXHeight(*v22, v58);
                        TXTextObject::getBoundingRectForGlyph(*v22, v59);
LABEL_78:
                        float64x2_t v80 = (float64x2_t)v56;
                        double v60 = CapHeight;
                        *(void *)&long long v81 = v57;
                        goto LABEL_79;
                      case 3:
                        uint64_t v49 = *v22;
                        if (v65) {
                          TXTextObject::getImageBoundsOfAttribute((uint64_t)v49, v80.f64, v82, 5, 1, 1, 1, 0, 0.0, 0.0, 0.0, 0.0);
                        }
                        else {
                          TXTextObject::getImageBoundsWithFourCornerPinning(v49, (CMTime *)v82, &v80, 5);
                        }
                        if (*((_WORD *)*v22 + 60) != 32) {
                          goto LABEL_80;
                        }
                        *(void *)&long long v81 = *(void *)(TXTextObject::getTypographicBounds(*v22) + 16);
                        if (!v66) {
                          goto LABEL_80;
                        }
                        uint64_t v50 = *((void *)*v22 + 33);
                        if (v50)
                        {
                          double v51 = *(OZChannel **)(v50 + 8);
                          double v52 = *(std::__shared_weak_count **)(v50 + 16);
                          if (v52) {
                            atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                        }
                        else
                        {
                          double v52 = 0;
                          double v51 = 0;
                        }
                        CMTime v79 = (CMTime)v6->var0;
                        float v61 = TXTextStyle::getSize(v51, &v79, 0.0);
                        if (v52) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v52);
                        }
                        double v60 = TXTextObject::getCapHeight(*v22, v61);
LABEL_79:
                        *((double *)&v81 + 1) = v60;
LABEL_80:
                        uint64_t v76 = 0x3FF0000000000000;
                        uint64_t v73 = 0x3FF0000000000000;
                        uint64_t v70 = 0x3FF0000000000000;
                        *(void *)uint64_t v69 = 0x3FF0000000000000;
                        memset(&v69[8], 0, 32);
                        long long v71 = 0u;
                        long long v72 = 0u;
                        long long v74 = 0u;
                        long long v75 = 0u;
                        TXTextObject::getTransformMatrix((uint64_t)*v22, (uint64_t)v69, (long long *)&v82[0].var0.var0, 1, 0, 0, 0, v14, v12);
                        if (PCMatrix44Tmpl<double>::transformRect<double>((double *)v69, v80.f64, (uint64_t)&v80)) {
                          goto LABEL_81;
                        }
                        goto LABEL_84;
                      default:
                        goto LABEL_80;
                    }
                  }
                  goto LABEL_84;
                }
              }
              else
              {
                BOOL v36 = 0;
                if (!v34) {
                  goto LABEL_49;
                }
              }
LABEL_48:
              std::__shared_weak_count::__release_shared[abi:ne180100](v34);
              goto LABEL_49;
            }
            if (v30 != 10)
            {
              BOOL v36 = 1;
              goto LABEL_49;
            }
            TXTextLayout::getCursorRectForNewline((TXTextLayout *)v7, *v22, (CMTime *)v6, (double *)v69);
            float64x2_t v80 = *(float64x2_t *)v69;
            long long v81 = *(_OWORD *)&v69[16];
LABEL_81:
            if (*(double *)&v81 > 0.0 && *((double *)&v81 + 1) > 0.0) {
              PCRect<double>::operator|=((float64x2_t *)v4, &v80);
            }
          }
        }
      }
LABEL_84:
      v22 += 2;
      if (v22 == v23) {
        goto LABEL_90;
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 352))(v7, v4);
LABEL_91:
  *(unsigned char *)(v7 + 64324) = 0;
  long long v62 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v7 + 64328) = *(_OWORD *)v4;
  *(_OWORD *)(v7 + 64344) = v62;
  TXTextLayout::offsetBoundsBasedOnScrollPosition((TXTextLayout *)v7, (float64x2_t *)v4);
  long long v63 = *(_OWORD *)(v4 + 16);
  _OWORD *v10 = *(_OWORD *)v4;
  v10[1] = v63;
  *(int32x4_t *)(v7 + 59040) = v86;
LABEL_92:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v85);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v87);
}

void sub_1B75ED3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void TXTextLayout::getCursorRectForNewline(TXTextLayout *this@<X0>, TXTextObject *a2@<X1>, CMTime *a3@<X2>, double *a4@<X8>)
{
  unint64_t v8 = *((unsigned int *)a2 + 184);
  double v9 = (uint64_t *)*((void *)this + 2378);
  double v10 = (uint64_t *)*((void *)this + 2379);
  while (v9 != v10)
  {
    uint64_t v11 = *v9;
    unint64_t v12 = *(void *)(*v9 + 856);
    if (v12 <= v8 && *(void *)(v11 + 864) + v12 > v8) {
      goto LABEL_7;
    }
    ++v9;
  }
  uint64_t v11 = *(v10 - 1);
LABEL_7:
  double DescenderForCharOffset = TXParagraphStyle::getDescenderForCharOffset((TXParagraphStyle *)v11, v8);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t TypographicBounds = TXTextObject::getTypographicBounds(a2);
  int v16 = (double *)(TypographicBounds + 16);
  if (!ValueAsInt) {
    int v16 = (double *)(TypographicBounds + 24);
  }
  double v17 = *v16;
  uint64_t v18 = *((void *)a2 + 33);
  if (v18)
  {
    uint64_t v20 = *(void *)(v18 + 8);
    double v19 = *(std::__shared_weak_count **)(v18 + 16);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v20 = 0;
    double v19 = 0;
  }
  double v21 = v17;
  if (!TXTextLayout::scaleAffectsLayout(this))
  {
    v32[0] = 0.0;
    double v35 = 0.0;
    double v36 = 0.0;
    CMTime v34 = *a3;
    OZChannelScale3D::getValue((OZChannelScale3D *)(v20 + 2864), &v34, v32, &v36, &v35, 0.0);
    double v21 = v17 * v36;
    double DescenderForCharOffset = DescenderForCharOffset * v36;
  }
  CMTime v33 = *a3;
  OZChannel::getValueAsDouble((OZChannel *)(v11 + 680), &v33, 0.0);
  double v23 = v22;
  double v24 = (*(double (**)(TXTextLayout *, CMTime *))(*(void *)this + 712))(this, a3);
  double v35 = 0.0;
  double v36 = 0.0;
  TXTextLayout::getCursorOrigin(this, &v36, &v35);
  double v25 = v23 * v24;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0))
  {
    TXTextObject::getPosition(a2, a3, v32);
    double v26 = DescenderForCharOffset + v32[0] - v17 - v25;
    double v27 = v35;
    double v28 = v21;
    double v21 = 1.0;
  }
  else
  {
    OZChannel::getValueAsDouble((OZChannel *)(v20 + 3592), a3, 0.0);
    double v30 = v29;
    double v31 = v36;
    TXTextObject::getPosition(a2, a3, v32);
    double v26 = v30 + v31;
    double v27 = DescenderForCharOffset + v32[1] - v17 - v25;
    double v28 = 1.0;
  }
  *a4 = v26;
  a4[1] = v27;
  a4[2] = v28;
  a4[3] = v21;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void sub_1B75ED6F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextLayout::offsetBoundsBasedOnScrollPosition(TXTextLayout *a1, float64x2_t *a2)
{
  double ScrollPositionInPixels = TXTextLayout::getScrollPositionInPixels(a1);
  uint64_t v4 = (OZChannel *)((char *)a1 + 20464);
  uint64_t result = OZChannel::getValueAsInt(v4, MEMORY[0x1E4F1FA48], 0.0);
  if (result == 1 || (uint64_t result = OZChannel::getValueAsInt(v4, MEMORY[0x1E4F1FA48], 0.0), result == 3))
  {
    float64_t v6 = a2->f64[1] - ScrollPositionInPixels;
    a2->f64[0] = a2->f64[0] + 0.0;
    a2->f64[1] = v6;
  }
  else
  {
    uint64_t result = OZChannel::getValueAsInt(v4, MEMORY[0x1E4F1FA48], 0.0);
    if (result == 4)
    {
      *(void *)&v7.f64[0] = *(_OWORD *)&vsubq_f64(*a2, (float64x2_t)*(unint64_t *)&ScrollPositionInPixels);
      v7.f64[1] = vaddq_f64(*a2, (float64x2_t)0).f64[1];
      *a2 = v7;
    }
  }
  return result;
}

void non-virtual thunk to'TXTextLayout::getOriginalBounds(uint64_t a1)
{
}

BOOL TXTextLayout::getProjectedBounds(uint64_t a1, float64x2_t *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v79, v8);
  int v9 = *(unsigned __int8 *)(a1 + 52360);
  if (*(unsigned char *)(a1 + 52360))
  {
    CMTime time = *(CMTime *)a4;
    double Seconds = CMTimeGetSeconds(&time);
    float64x2_t v66 = 0uLL;
    __asm { FMOV            V1.2D, #-1.0 }
    float64x2_t v36 = _Q1;
    float64x2_t v67 = _Q1;
    uint64_t v77 = 0x3FF0000000000000;
    uint64_t v74 = 0x3FF0000000000000;
    uint64_t v71 = 0x3FF0000000000000;
    long long v64 = &unk_1F10AD530;
    uint64_t v68 = 0x3FF0000000000000;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    if (OZValueCache<OZProjectedBoundsCacheItem>::find(a1 + 64032, (uint64_t)&v64, Seconds))
    {
      unint64_t v15 = 0;
      BOOL v16 = 0;
      double v17 = &v68;
      uint64_t v18 = a3;
LABEL_4:
      uint64_t v19 = 0;
      while (vabdd_f64(*(double *)&v17[v19], *(double *)&v18[v19]) < 0.0000001)
      {
        if (++v19 == 4)
        {
          BOOL v16 = v15 > 2;
          v18 += 4;
          v17 += 4;
          if (++v15 != 4) {
            goto LABEL_4;
          }
          goto LABEL_11;
        }
      }
      if (!v16) {
        goto LABEL_13;
      }
LABEL_11:
      if (a2)
      {
        float64x2_t v21 = v67;
        *a2 = v66;
        a2[1] = v21;
      }
    }
    else
    {
LABEL_13:
      PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v63);
      TXTextLayout::doLayout((TXTextLayout *)a1, (const OZRenderState *)a4, (PCHash128 *)v63);
      a2[1] = v36;
      OZRenderParams::OZRenderParams((OZRenderParams *)v62);
      OZRenderParams::setState((OZRenderParams *)v62, (const OZRenderState *)a4);
      v62[0].var4 = 1;
      uint64_t v61 = 0x3FF0000000000000;
      uint64_t v58 = 0x3FF0000000000000;
      uint64_t v55 = 0x3FF0000000000000;
      uint64_t v52 = 0x3FF0000000000000;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      (*(void (**)(uint64_t, uint64_t *, OZRenderState *))(*(void *)(a1 + 200) + 1256))(a1 + 200, &v52, v62);
      uint64_t v33 = a1 + 200;
      uint64_t v34 = a1 + 64032;
      int v35 = v9;
      PCMatrix44Tmpl<double>::operator*((uint64_t)a3, (long long *)&v52, (uint64_t)v51);
      double v23 = *(uint64_t **)(a1 + 58824);
      double v22 = *(uint64_t **)(a1 + 58832);
      if (v23 != v22)
      {
        double v24 = (OZChannel *)(a1 + 20464);
        double v25 = (const CMTime *)MEMORY[0x1E4F1FA48];
        do
        {
          v50[0] = 0uLL;
          v50[1] = v36;
          if (*(unsigned char *)(*v23 + 138))
          {
            if (OZChannel::getValueAsInt(v24, v25, 0.0) == 3
              || OZChannel::getValueAsInt(v24, v25, 0.0) == 4)
            {
              TXTextObject::getImageBoundsOfAttribute(*v23, v50[0].f64, v62, 5, 1, 1, 1, 0, 0.0, 0.0, 0.0, 0.0);
            }
            else
            {
              TXTextObject::getImageBoundsWithFourCornerPinning((TXTextObject *)*v23, (CMTime *)v62, v50, 5);
            }
            uint64_t v49 = 0x3FF0000000000000;
            uint64_t v46 = 0x3FF0000000000000;
            uint64_t v43 = 0x3FF0000000000000;
            uint64_t v40 = 0x3FF0000000000000;
            long long v41 = 0u;
            long long v42 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v47 = 0u;
            long long v48 = 0u;
            TXTextObject::getTransformMatrix(*v23, (uint64_t)&v40, (long long *)&v62[0].var0.var0, 1, 1, 0, 1, 0.0, 0.0);
            float64x2_t v38 = 0uLL;
            float64x2_t v39 = v36;
            PCMatrix44Tmpl<double>::operator*((uint64_t)v51, (long long *)&v40, (uint64_t)v37);
            BOOL v26 = PCMatrix44Tmpl<double>::transformRect<double>(v37, v50[0].f64, (uint64_t)&v38);
            BOOL v27 = v39.f64[0] > 0.0 && v26;
            if (v27 && v39.f64[1] > 0.0) {
              PCRect<double>::operator|=(a2, &v38);
            }
          }
          v23 += 2;
        }
        while (v23 != v22);
      }
      int v9 = v35;
      if (*(unsigned char *)(a4 + 241)) {
        OZElement::expandBoundsToIncludeDropShadow(v33, a2, (const CMTime *)a4);
      }
      float64x2_t v28 = a2[1];
      float64x2_t v66 = *a2;
      float64x2_t v67 = v28;
      if (&v68 != a3)
      {
        for (uint64_t i = 0; i != 16; i += 4)
        {
          double v30 = (_OWORD *)((char *)&v68 + i * 8);
          long long v31 = *(_OWORD *)&a3[i + 2];
          *double v30 = *(_OWORD *)&a3[i];
          v30[1] = v31;
        }
      }
      OZValueCache<OZProjectedBoundsCacheItem>::add(v34, (uint64_t)&v64);
      OZRenderParams::~OZRenderParams((OZRenderParams *)v62);
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    a2[1] = _Q0;
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v79);
  return v9 != 0;
}

void sub_1B75EDCC8(_Unwind_Exception *a1)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x280]);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t OZValueCache<OZProjectedBoundsCacheItem>::find(uint64_t a1, uint64_t a2, double a3)
{
  float64_t v6 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock_shared((std::mutex *)(a1 + 40));
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == a1 + 8)
    {
      uint64_t v9 = 0;
      goto LABEL_12;
    }
    double v8 = *(double *)(i + 24);
    if (v8 == a3) {
      break;
    }
  }
  *(double *)(a2 + 8) = v8;
  long long v10 = *(_OWORD *)(i + 48);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(i + 32);
  *(_OWORD *)(a2 + 32) = v10;
  if (i + 16 != a2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a2 + 48;
    uint64_t v13 = i + 64;
    do
    {
      for (uint64_t j = 0; j != 32; j += 8)
        *(void *)(v12 + j) = *(void *)(v13 + j);
      ++v11;
      v12 += 32;
      v13 += 32;
    }
    while (v11 != 4);
  }
  uint64_t v9 = 1;
LABEL_12:
  PCSharedMutex::unlock_shared(v6);
  return v9;
}

void OZValueCache<OZProjectedBoundsCacheItem>::add(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock((std::mutex *)(a1 + 40));
  std::list<OZProjectedBoundsCacheItem>::remove_if<OZ_VC_SameKey<OZProjectedBoundsCacheItem>>(a1 + 8, *(double *)(a2 + 8));
  if (*(void *)(a1 + 24) >= *(void *)(a1 + 32)) {
    std::list<OZProjectedBoundsCacheItem>::pop_front(a1 + 8);
  }
  uint64_t v5 = operator new(0xC0uLL);
  v5[3] = *(void *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v5 + 2) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v5 + 3) = v6;
  v5[1] = a1 + 8;
  v5[2] = &unk_1F10AD530;
  long long v7 = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v5 + 8) = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v5 + 9) = v7;
  long long v8 = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v5 + 10) = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v5 + 11) = v8;
  long long v9 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v5 + 4) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v5 + 5) = v9;
  long long v10 = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v5 + 6) = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v5 + 7) = v10;
  uint64_t v11 = *(void *)(a1 + 8);
  void *v5 = v11;
  *(void *)(v11 + 8) = v5;
  *(void *)(a1 + 8) = v5;
  ++*(void *)(a1 + 24);
  PCSharedMutex::unlock(v4);
}

void sub_1B75EDEC4(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL non-virtual thunk to'TXTextLayout::getProjectedBounds(uint64_t a1, float64x2_t *a2, uint64_t *a3, uint64_t a4)
{
  return TXTextLayout::getProjectedBounds(a1 - 200, a2, a3, a4);
}

void TXTextLayout::getBoundsIgnoringParagraphMargins(TXTextLayout *this@<X0>, OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = (char *)this + 58824;
  CMTime time = (CMTime)a2->var0;
  double Seconds = CMTimeGetSeconds(&time);
  float64x2_t v72 = 0uLL;
  long long v70 = &unk_1F10AD590;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v52 = _Q1;
  long long v73 = _Q1;
  if (OZValueCache<OZBoundsCacheItem>::find((uint64_t)this + 63888, (uint64_t)&v70, Seconds)
    && a2->var29 == *((_DWORD *)v6 + 1264))
  {
    long long v12 = v73;
    *(float64x2_t *)a3 = v72;
    *(_OWORD *)(a3 + 16) = v12;
    return;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(a3 + 16) = v52;
  uint64_t v13 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v69, v13);
  if (*((unsigned char *)this + 52360))
  {
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v68);
    TXTextLayout::doLayout(this, a2, (PCHash128 *)v68);
    double v14 = *(TXTextObject ***)v6;
    unint64_t v15 = (TXTextObject **)*((void *)v6 + 1);
    OZRenderParams::OZRenderParams((OZRenderParams *)v66);
    uint64_t v50 = v6;
    OZRenderParams::setState((OZRenderParams *)v66, a2);
    int v67 = 1;
    BOOL v51 = *((void *)this + 2423) == 1;
    if (v14 != v15)
    {
      while (1)
      {
        if (!*((unsigned char *)*v14 + 138)) {
          goto LABEL_20;
        }
        float64x2_t v64 = 0uLL;
        *(_OWORD *)BOOL v65 = v52;
        double v17 = v14 + 2;
        BOOL v16 = *v14;
        int v18 = *((unsigned __int16 *)*v14 + 60);
        if (v14 + 2 == v15 && v18 == 10)
        {
          TXTextLayout::getCursorRectForNewline(this, v16, (CMTime *)a2, (double *)v53);
          char v19 = 0;
          float64x2_t v64 = *(float64x2_t *)v53;
          *(_OWORD *)BOOL v65 = *(_OWORD *)&v53[16];
LABEL_10:
          if (v65[0] <= 0.0 || v65[1] <= 0.0)
          {
LABEL_48:
            if (v19) {
              break;
            }
            v14 += 2;
            if (v17 == v15) {
              break;
            }
          }
          else
          {
            PCRect<double>::operator|=((float64x2_t *)a3, &v64);
            if (v17 == v15) {
              char v20 = 1;
            }
            else {
              char v20 = v19;
            }
            v14 += 2;
            if (v20) {
              break;
            }
          }
        }
        else
        {
          if (v18 != 10)
          {
            switch(a2->var29)
            {
              case 0:
                uint64_t TypographicBounds = TXTextObject::getTypographicBounds(*v14);
                char v19 = 0;
                long long v22 = *(_OWORD *)(TypographicBounds + 16);
                float64x2_t v64 = *(float64x2_t *)TypographicBounds;
                *(_OWORD *)BOOL v65 = v22;
                break;
              case 1:
                uint64_t v23 = *((void *)v16 + 33);
                if (v23)
                {
                  double v24 = *(OZChannel **)(v23 + 8);
                  double v25 = *(std::__shared_weak_count **)(v23 + 16);
                  if (v25) {
                    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                }
                else
                {
                  double v25 = 0;
                  double v24 = 0;
                }
                CMTime var0 = (CMTime)a2->var0;
                float Size = TXTextStyle::getSize(v24, &var0, 0.0);
                if (v25) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
                }
                double v38 = Size;
                float CapHeight = TXTextObject::getCapHeight(*v14, Size);
                TXTextObject::getBoundingRectForGlyph(*v14, v38);
                goto LABEL_44;
              case 2:
                uint64_t v26 = *((void *)v16 + 33);
                if (v26)
                {
                  BOOL v27 = *(OZChannel **)(v26 + 8);
                  float64x2_t v28 = *(std::__shared_weak_count **)(v26 + 16);
                  if (v28) {
                    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                }
                else
                {
                  float64x2_t v28 = 0;
                  BOOL v27 = 0;
                }
                CMTime v61 = (CMTime)a2->var0;
                float v42 = TXTextStyle::getSize(v27, &v61, 0.0);
                if (v28) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
                }
                double v43 = v42;
                float CapHeight = TXTextObject::getXHeight(*v14, v42);
                TXTextObject::getBoundingRectForGlyph(*v14, v43);
LABEL_44:
                float64x2_t v64 = (float64x2_t)v40;
                double v33 = CapHeight;
                v65[0] = v41;
                goto LABEL_45;
              case 3:
                TXTextObject::getImageBounds(*v14, a2, (uint64_t)v53);
                float64x2_t v64 = *(float64x2_t *)v53;
                *(_OWORD *)BOOL v65 = *(_OWORD *)&v53[16];
                if (!*((unsigned char *)*v14 + 64)) {
                  goto LABEL_30;
                }
                char v19 = 0;
                v65[1] = 0.0;
                break;
              case 4:
                uint64_t v29 = TXTextObject::getTypographicBounds(*v14);
                long long v30 = *(_OWORD *)(v29 + 16);
                float64x2_t v64 = *(float64x2_t *)v29;
                *(void *)&v65[0] = v30;
                v65[1] = v64.f64[1] + *((double *)&v30 + 1);
                v64.f64[1] = 0.0;
                goto LABEL_46;
              case 5:
                uint64_t v31 = TXTextObject::getTypographicBounds(*v14);
                long long v32 = *(_OWORD *)(v31 + 16);
                float64x2_t v64 = *(float64x2_t *)v31;
                *(_OWORD *)BOOL v65 = v32;
                double v33 = -v64.f64[1];
LABEL_45:
                v65[1] = v33;
LABEL_46:
                char v19 = v51;
                break;
              case 6:
                uint64_t v34 = *((void *)v16 + 33);
                if (v34)
                {
                  int v35 = *(OZChannel **)(v34 + 8);
                  float64x2_t v36 = *(std::__shared_weak_count **)(v34 + 16);
                  if (v36) {
                    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                }
                else
                {
                  float64x2_t v36 = 0;
                  int v35 = 0;
                }
                CMTime v63 = (CMTime)a2->var0;
                float v44 = TXTextStyle::getSize(v35, &v63, 0.0);
                if (v36) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v36);
                }
                double v45 = v44;
                float v46 = TXTextObject::getCapHeight(*v14, v44);
                TXTextObject::getBoundingRectForGlyph(*v14, v45);
                char v19 = 0;
                float64x2_t v64 = (float64x2_t)v47;
                v65[0] = v48;
                v65[1] = v46;
                break;
              default:
LABEL_30:
                char v19 = 0;
                break;
            }
            uint64_t v60 = 0x3FF0000000000000;
            uint64_t v57 = 0x3FF0000000000000;
            uint64_t v54 = 0x3FF0000000000000;
            *(void *)long long v53 = 0x3FF0000000000000;
            memset(&v53[8], 0, 32);
            long long v55 = 0u;
            long long v56 = 0u;
            long long v58 = 0u;
            long long v59 = 0u;
            TXTextObject::getTransformMatrix((uint64_t)*v14, (uint64_t)v53, v66, 1, 1, 0, 1, 0.0, 0.0);
            if (!PCMatrix44Tmpl<double>::transformRect<double>((double *)v53, v64.f64, (uint64_t)&v64)) {
              goto LABEL_48;
            }
            goto LABEL_10;
          }
LABEL_20:
          v14 += 2;
          if (v14 == v15) {
            break;
          }
        }
      }
    }
    long long v49 = *(_OWORD *)(a3 + 16);
    float64x2_t v72 = *(float64x2_t *)a3;
    long long v73 = v49;
    OZValueCache<OZBoundsCacheItem>::add((uint64_t)this + 63888, (uint64_t)&v70);
    *((_DWORD *)v50 + 1264) = a2->var29;
    OZRenderParams::~OZRenderParams((OZRenderParams *)v66);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v69);
}

void sub_1B75EE3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a48);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v48 - 184));
  _Unwind_Resume(a1);
}

uint64_t OZValueCache<OZBoundsCacheItem>::find(uint64_t a1, uint64_t a2, double a3)
{
  long long v6 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock_shared((std::mutex *)(a1 + 40));
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == a1 + 8)
    {
      uint64_t v9 = 0;
      goto LABEL_7;
    }
    double v8 = *(double *)(i + 24);
    if (v8 == a3) {
      break;
    }
  }
  *(double *)(a2 + 8) = v8;
  long long v10 = *(_OWORD *)(i + 48);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(i + 32);
  *(_OWORD *)(a2 + 32) = v10;
  uint64_t v9 = 1;
LABEL_7:
  PCSharedMutex::unlock_shared(v6);
  return v9;
}

void OZValueCache<OZBoundsCacheItem>::add(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock((std::mutex *)(a1 + 40));
  std::list<OZProjectedBoundsCacheItem>::remove_if<OZ_VC_SameKey<OZProjectedBoundsCacheItem>>(a1 + 8, *(double *)(a2 + 8));
  if (*(void *)(a1 + 24) >= *(void *)(a1 + 32)) {
    std::list<OZProjectedBoundsCacheItem>::pop_front(a1 + 8);
  }
  uint64_t v5 = operator new(0x40uLL);
  v5[3] = *(void *)(a2 + 8);
  v5[1] = a1 + 8;
  v5[2] = &unk_1F10AD590;
  long long v6 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v5 + 2) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v5 + 3) = v6;
  uint64_t v7 = *(void *)(a1 + 8);
  void *v5 = v7;
  *(void *)(v7 + 8) = v5;
  *(void *)(a1 + 8) = v5;
  ++*(void *)(a1 + 24);
  PCSharedMutex::unlock(v4);
}

void sub_1B75EE5CC(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'TXTextLayout::getBoundsForLinkBehavior(TXTextLayout *this@<X0>, OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t TXTextLayout::getBoundsForHitCheck(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 200) + 1488))();
}

uint64_t TXTextLayout::getLocalVolumeForHitCheck(PCString *a1, uint64_t a2, uint64_t a3)
{
  long long v6 = (OZChannel *)&a1[2558];
  if (OZChannel::getValueAsInt((OZChannel *)&a1[2558], MEMORY[0x1E4F1FA48], 0.0) == 1
    || OZChannel::getValueAsInt(v6, MEMORY[0x1E4F1FA48], 0.0) == 3
    || OZChannel::getValueAsInt(v6, MEMORY[0x1E4F1FA48], 0.0) == 4
    || (StringPtr = TXChannelString::getStringPtr((TXChannelString *)&a1[2381]),
        PCString::size((PCString *)StringPtr))
    && (TXTextLayout::isAllWhitespace(a1) & 1) == 0)
  {
    length = (uint64_t (*)(PCString *, uint64_t, uint64_t))a1->var0[13].length;
    return length(a1, a2, a3);
  }
  else
  {
    double v18 = 0.0;
    double v19 = 0.0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v20 = _Q0;
    uint64_t result = ((uint64_t (*)(PCString *, double *, uint64_t))a1->var0[14].isa)(a1, &v18, a3);
    double v14 = v19;
    double v15 = v18 + *(double *)&v20;
    double v16 = v19 + *((double *)&v20 + 1);
    *(double *)a2 = v18;
    *(double *)(a2 + 8) = v15;
    *(double *)(a2 + 16) = v14;
    *(double *)(a2 + 24) = v16;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
  }
  return result;
}

void TXTextLayout::getLocalVolume(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  double v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 304))(v1))
  {
    OZElement::getLocalVolume(v6 + 200, v5);
    return;
  }
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 296))(v6);
  double v8 = (OZChannel *)(v6 + 20464);
  if OZChannel::getValueAsInt((OZChannel *)(v6 + 20464), MEMORY[0x1E4F1FA48], 0.0) != 1 || (v7)
  {
    double v14 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)v6);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v99, v14);
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v98);
    TXTextLayout::doLayout((TXTextLayout *)v6, v3, (PCHash128 *)&v98);
    uint64_t v15 = v6 + 58824;
    long long v76 = (OZChannel *)(v6 + 20464);
    char v78 = v7;
    if (v7)
    {
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&v103);
      PCHashWriteStream::writeValue((int8x8_t *)&v103, 1);
      double v16 = *(TXTextObject ***)v15;
      double v17 = *(TXTextObject ***)(v6 + 58832);
      if (*(TXTextObject ***)v15 != v17)
      {
        double v18 = (const CMTime *)MEMORY[0x1E4F1FA48];
        do
        {
          double ExtrusionDepth = TXTextObject::getExtrusionDepth(*v16, (const CMTime *)v3);
          PCHashWriteStream::writeValue((int8x8_t *)&v103, ExtrusionDepth);
          uint64_t v20 = *((void *)*v16 + 33);
          if (v20)
          {
            uint64_t v21 = *(void *)(v20 + 8);
            long long v22 = *(std::__shared_weak_count **)(v20 + 16);
            if (v22) {
              atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            long long v22 = 0;
            uint64_t v21 = 0;
          }
          int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v21 + 41056), v18, 0.0);
          PCHashWriteStream::writeValue((int8x8_t *)&v103, ValueAsInt);
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
          v16 += 2;
        }
        while (v16 != v17);
      }
      Hash = PCHashWriteStream::getHash((int8x8_t *)&v103);
      PCHash128::operator+=(v98.i32, (int *)Hash);
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&v103);
      double v8 = (OZChannel *)(v6 + 20464);
    }
    float64x2_t v80 = (double *)(v6 + 59056);
    if (*(double *)(v6 + 59056) <= *(double *)(v6 + 59064)
      && *(double *)(v6 + 59072) <= *(double *)(v6 + 59080)
      && *(double *)(v6 + 59088) <= *(double *)(v6 + 59096)
      && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v98, *(int32x4_t *)(v6 + 59104))))) & 1) == 0
      && !*(unsigned char *)(v6 + 19392)
      && !TXTextLayout::isAnyParagraphDirty((TXTextLayout *)v6)
      && OZChannel::getValueAsInt(v8, MEMORY[0x1E4F1FA48], 0.0) != 2
      && !v3->var22)
    {
      long long v25 = *(_OWORD *)v80;
      long long v26 = *(_OWORD *)(v6 + 59088);
      *(_OWORD *)(v5 + 16) = *(_OWORD *)(v6 + 59072);
      *(_OWORD *)(v5 + 32) = v26;
      *(_OWORD *)uint64_t v5 = v25;
LABEL_110:
      OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v99);
      return;
    }
    *(_OWORD *)(v6 + 59088) = xmmword_1B7E736F0;
    *(_OWORD *)(v6 + 59072) = xmmword_1B7E736F0;
    *(_OWORD *)(v6 + 59056) = xmmword_1B7E736F0;
    OZRenderParams::OZRenderParams((OZRenderParams *)&v103);
    OZRenderParams::setState((OZRenderParams *)&v103, v3);
    CMTime v79 = (double *)(v6 + 59064);
    long long v75 = (int32x4_t *)v6;
    int v105 = 1;
    float64x2_t v28 = *(TXTextObject ***)v15;
    BOOL v27 = *(TXTextObject ***)(v15 + 8);
    if (*(TXTextObject ***)v15 != v27)
    {
      __asm { FMOV            V0.2D, #-1.0 }
      long long v77 = _Q0;
      do
      {
        float64x2_t v96 = 0uLL;
        long long v97 = v77;
        long long v94 = xmmword_1B7E736F0;
        long long v95 = xmmword_1B7E736F0;
        long long v93 = xmmword_1B7E736F0;
        if (v78)
        {
          TXTextObject::getBoundingImageVolume(*v28, (uint64_t)&v93, (uint64_t)&v103);
        }
        else
        {
          switch(v3->var29)
          {
            case 0:
              uint64_t TypographicBounds = TXTextObject::getTypographicBounds(*v28);
              long long v31 = *(_OWORD *)(TypographicBounds + 16);
              float64x2_t v96 = *(float64x2_t *)TypographicBounds;
              long long v97 = v31;
              break;
            case 1:
              uint64_t v32 = *((void *)*v28 + 33);
              if (v32)
              {
                double v33 = *(OZChannel **)(v32 + 8);
                uint64_t v34 = *(std::__shared_weak_count **)(v32 + 16);
                if (v34) {
                  atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v34 = 0;
                double v33 = 0;
              }
              CMTime var0 = (CMTime)v3->var0;
              float Size = TXTextStyle::getSize(v33, &var0, 0.0);
              if (v34) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v34);
              }
              double v39 = Size;
              float CapHeight = TXTextObject::getCapHeight(*v28, Size);
              TXTextObject::getBoundingRectForGlyph(*v28, v39);
              goto LABEL_50;
            case 2:
              uint64_t v35 = *((void *)*v28 + 33);
              if (v35)
              {
                float64x2_t v36 = *(OZChannel **)(v35 + 8);
                uint64_t v37 = *(std::__shared_weak_count **)(v35 + 16);
                if (v37) {
                  atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v37 = 0;
                float64x2_t v36 = 0;
              }
              CMTime v91 = (CMTime)v3->var0;
              float v43 = TXTextStyle::getSize(v36, &v91, 0.0);
              if (v37) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v37);
              }
              double v44 = v43;
              float CapHeight = TXTextObject::getXHeight(*v28, v43);
              TXTextObject::getBoundingRectForGlyph(*v28, v44);
LABEL_50:
              float64x2_t v96 = (float64x2_t)v41;
              *(void *)&long long v97 = v42;
              *((double *)&v97 + 1) = CapHeight;
              break;
            case 3:
              TXTextObject::getImageBoundsWithFourCornerPinning(*v28, (CMTime *)&v103, &v96, 5);
              break;
            default:
              break;
          }
          *(float64_t *)&long long v93 = v96.f64[0];
          *((double *)&v93 + 1) = v96.f64[0] + *(double *)&v97;
          *(float64_t *)&long long v94 = v96.f64[1];
          *((double *)&v94 + 1) = v96.f64[1] + *((double *)&v97 + 1);
          long long v95 = 0uLL;
        }
        uint64_t v90 = 0x3FF0000000000000;
        uint64_t v87 = 0x3FF0000000000000;
        uint64_t v84 = 0x3FF0000000000000;
        uint64_t v81 = 0x3FF0000000000000;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        TXTextObject::getTransformMatrix((uint64_t)*v28, (uint64_t)&v81, &v103, 1, 1, 0, 1, 0.0, 0.0);
        int v45 = 0;
        double v46 = -1.0;
        double v47 = 1.0;
        double v48 = 1.0;
        double v49 = -1.0;
        double v50 = 1.0;
        double v51 = -1.0;
        do
        {
          long long v52 = (long long *)((char *)&v93 + 8);
          if (v45) {
            long long v52 = &v93;
          }
          double v53 = *(double *)v52;
          uint64_t v54 = (long long *)((char *)&v94 + 8);
          if ((v45 & 2) != 0) {
            uint64_t v54 = &v94;
          }
          double v55 = *(double *)v54;
          long long v56 = (long long *)((char *)&v95 + 8);
          if ((v45 & 4) != 0) {
            long long v56 = &v95;
          }
          double v57 = *(double *)v56;
          double v100 = v53;
          double v101 = v55;
          double v102 = v57;
          PCMatrix44Tmpl<double>::transform<double>((double *)&v81, &v100, &v100);
          if (v45)
          {
            if (v47 >= v100) {
              double v47 = v100;
            }
            if (v46 <= v100) {
              double v46 = v100;
            }
            if (v48 >= v101) {
              double v48 = v101;
            }
            if (v49 <= v101) {
              double v49 = v101;
            }
            if (v50 >= v102) {
              double v50 = v102;
            }
            if (v51 <= v102) {
              double v51 = v102;
            }
          }
          else
          {
            double v49 = v101;
            double v51 = v102;
            double v46 = v100;
            double v47 = v100;
            double v48 = v101;
            double v50 = v102;
          }
          ++v45;
        }
        while (v45 != 8);
        double v58 = *v80;
        double v59 = *v79;
        if (*v80 <= *v79
          && (v61 = *(double *)(v15 + 248), double v60 = *(double *)(v15 + 256), v61 <= v60)
          && (v63 = *(double *)(v15 + 264), double v62 = *(double *)(v15 + 272), v63 <= v62))
        {
          if (v47 > v46 || v48 > v49 || v50 > v51) {
            goto LABEL_80;
          }
          if (v58 >= v47) {
            double v58 = v47;
          }
          if (v59 <= v46) {
            double v59 = v46;
          }
          *(double *)(v15 + 232) = v58;
          *(double *)(v15 + 240) = v59;
          if (v61 >= v48) {
            double v66 = v48;
          }
          else {
            double v66 = v61;
          }
          if (v60 <= v49) {
            double v60 = v49;
          }
          *(double *)(v15 + 248) = v66;
          *(double *)(v15 + 256) = v60;
          if (v63 >= v50) {
            double v67 = v50;
          }
          else {
            double v67 = v63;
          }
          *(double *)(v15 + 264) = v67;
          if (v62 > v51) {
            double v51 = v62;
          }
        }
        else
        {
          *(double *)(v15 + 232) = v47;
          *(double *)(v15 + 240) = v46;
          *(double *)(v15 + 248) = v48;
          *(double *)(v15 + 256) = v49;
          *(double *)(v15 + 264) = v50;
        }
        *(double *)(v15 + 272) = v51;
LABEL_80:
        v28 += 2;
      }
      while (v28 != v27);
    }
    uint64_t v68 = v79;
    if (OZChannel::getValueAsInt(v76, MEMORY[0x1E4F1FA48], 0.0) == 1
      || OZChannel::getValueAsInt(v76, MEMORY[0x1E4F1FA48], 0.0) == 3)
    {
      *(double *)(v15 + 248) = 0.0
                             - TXTextLayout::getScrollPositionInPixels((TXTextLayout *)v75)
                             + *(double *)(v15 + 248);
      double ScrollPositionInPixels = TXTextLayout::getScrollPositionInPixels((TXTextLayout *)v75);
      uint64_t v68 = (double *)(v15 + 256);
    }
    else
    {
      if (OZChannel::getValueAsInt(v76, MEMORY[0x1E4F1FA48], 0.0) != 4) {
        goto LABEL_109;
      }
      double *v80 = 0.0 - TXTextLayout::getScrollPositionInPixels((TXTextLayout *)v75) + *v80;
      double ScrollPositionInPixels = TXTextLayout::getScrollPositionInPixels((TXTextLayout *)v75);
    }
    double *v68 = 0.0 - ScrollPositionInPixels + *v68;
LABEL_109:
    long long v70 = *(_OWORD *)v80;
    long long v71 = *((_OWORD *)v80 + 2);
    *(_OWORD *)(v5 + 16) = *((_OWORD *)v80 + 1);
    *(_OWORD *)(v5 + 32) = v71;
    *(_OWORD *)uint64_t v5 = v70;
    v75[3694] = v98;
    OZRenderParams::~OZRenderParams((OZRenderParams *)&v103);
    goto LABEL_110;
  }
  long long v103 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v104 = _Q0;
  if (v3->var20) {
    (*(void (**)(uint64_t, long long *))(*(void *)v6 + 352))(v6, &v103);
  }
  else {
    (*(void (**)(uint64_t, long long *, const OZRenderState *))(*(void *)(v6 + 200) + 1488))(v6 + 200, &v103, v3);
  }
  uint64_t v72 = *((void *)&v103 + 1);
  double v73 = *(double *)&v103 + *(double *)&v104;
  double v74 = *((double *)&v103 + 1) + *((double *)&v104 + 1);
  *(void *)uint64_t v5 = v103;
  *(double *)(v5 + 8) = v73;
  *(void *)(v5 + 16) = v72;
  *(double *)(v5 + 24) = v74;
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 40) = 0;
}

void sub_1B75EF040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void non-virtual thunk to'TXTextLayout::getLocalVolume(uint64_t a1)
{
}

uint64_t TXTextLayout::getResolution(TXTextLayout *this, double *a2, double *a3, const OZRenderState *a4)
{
  uint64_t v5 = 0;
  return (*(uint64_t (**)(void))(*((void *)this + 25) + 1312))();
}

void TXTextLayout::updateLineBreaksByHardLine(TXTextLayout *this)
{
  uint64_t v2 = (char *)this + 52208;
  uint64_t v3 = *((void *)this + 2379) - *((void *)this + 2378);
  if (v3)
  {
    unint64_t v4 = v3 >> 3;
    int v5 = -1;
    do
    {
      unint64_t v6 = (v5 + 2);
      ++v5;
    }
    while (v4 > v6);
  }
  else
  {
    int v5 = -1;
  }
  int v7 = (char *)this + 52200;
  if (*(_DWORD *)v2 >= v5) {
    int v8 = *(_DWORD *)v2;
  }
  else {
    int v8 = (2 * v5) | 1;
  }
  PCArray<unsigned long,PCArray_Traits<unsigned long>>::resize((uint64_t)v7, v5, v8);
  if (v5)
  {
    uint64_t v9 = (void *)*((void *)v2 + 1);
    long long v10 = (uint64_t *)*((void *)this + 2378);
    uint64_t v11 = (uint64_t)(*((void *)this + 2379) - (void)v10) >> 3;
    uint64_t v12 = v5;
    do
    {
      if (!v11) {
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v13 = *v10++;
      *v9++ = *(void *)(v13 + 864) + *(void *)(v13 + 856);
      --v11;
      --v12;
    }
    while (v12);
  }
}

uint64_t TXTextLayout::getLineBreaks(TXTextLayout *this, unint64_t **a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = (char *)this + 52212;
  uint64_t result = *((unsigned int *)this + 13053);
  if ((int)result < 1) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = *(unint64_t **)(v2 + 4);
  }
  *a2 = v4;
  return result;
}

void TXTextLayout::updateLineBreaks(TXTextLayout *this)
{
  uint64_t v2 = (char *)this + 52208;
  uint64_t v3 = (_DWORD *)((char *)this + 19324);
  unint64_t v4 = (uint64_t *)*((void *)this + 2378);
  int v5 = (uint64_t *)*((void *)this + 2379);
  if (v4 == v5)
  {
    int v6 = 0;
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
    uint64_t v8 = v5 - v4 - 1;
    do
    {
      uint64_t v9 = *v4++;
      int v6 = v6 - (v8 == v7++) + *(_DWORD *)(v9 + 876);
    }
    while (v4 != v5);
  }
  long long v10 = (char *)this + 52200;
  if (*(_DWORD *)v2 >= v6) {
    int v11 = *(_DWORD *)v2;
  }
  else {
    int v11 = (2 * v6) | 1;
  }
  PCArray<unsigned long,PCArray_Traits<unsigned long>>::resize((uint64_t)v10, v6, v11);
  if (v6)
  {
    uint64_t v12 = *((void *)this + 2378);
    uint64_t v13 = *((void *)this + 2379);
    if (v12 != v13)
    {
      uint64_t v14 = 0;
      int v15 = 0;
      uint64_t v16 = *((void *)v2 + 1);
      uint64_t v17 = ((v13 - v12) >> 3) - 1;
      do
      {
        double v18 = *(void **)v12;
        uint64_t v19 = (*(_DWORD *)(*(void *)v12 + 876) - 1);
        if (*(_DWORD *)(*(void *)v12 + 876) == 1)
        {
          uint64_t v23 = v14;
        }
        else
        {
          uint64_t v20 = (unsigned int *)v18[114];
          uint64_t v21 = v20;
          do
          {
            if (v20) {
              uint64_t v22 = *v21;
            }
            else {
              uint64_t v22 = 0;
            }
            uint64_t v23 = (v14 + 1);
            *(void *)(v16 + 8 * v14) = v22;
            ++v21;
            LODWORD(v14) = v14 + 1;
            --v19;
          }
          while (v19);
        }
        if (v17 != v15)
        {
          *(void *)(v16 + 8 * v23) = v18[108] + v18[107];
          uint64_t v23 = (v23 + 1);
        }
        v12 += 8;
        ++v15;
        uint64_t v14 = v23;
      }
      while (v12 != v13);
    }
  }
  _DWORD *v3 = v6 + 1;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*((void *)this + 26) + 8), (int32x4_t)xmmword_1B7E78250)))) & 1) == 0)
  {
    double v24 = (TXTextLayout *)((char *)this + 19048);
    StringPtr = TXChannelString::getStringPtr(v24);
    unsigned int v26 = PCString::size((PCString *)StringPtr);
    TXChannelString::getString((PCString *)v24, (PCString *)&theString);
    UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(theString, (int)(v26 - 1));
    if (TXCharacterSetIsNewline(CharacterAtIndex)) {
      --*v3;
    }
    PCString::~PCString((PCString *)&theString);
  }
}

void sub_1B75EF41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

BOOL TXTextLayout::isLineBreak(TXTextLayout *this, uint64_t a2, unint64_t *a3, unsigned int a4)
{
  if (a4)
  {
    uint64_t v4 = 0;
    BOOL v5 = 1;
    do
    {
      if (a3 && a3[v4] == a2) {
        break;
      }
      BOOL v5 = ++v4 < (unint64_t)a4;
    }
    while (a4 != v4);
  }
  else
  {
    return 0;
  }
  return v5;
}

void TXTextLayout::computeLineOffsets(PCString *this, int a2, int a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  if (!a4)
  {
    *a5 = 0;
    TXChannelString::getString(this + 2381, &v9);
    unsigned int v7 = PCString::size(&v9);
    goto LABEL_6;
  }
  if (a2)
  {
    *a5 = a4[a2 - 1];
    if (a3 - 1 == a2)
    {
      TXChannelString::getString(this + 2381, &v9);
      unsigned int v7 = PCString::size(&v9);
LABEL_6:
      *a6 = v7;
      PCString::~PCString(&v9);
      return;
    }
    unint64_t v8 = a4[a2];
  }
  else
  {
    *a5 = 0;
    unint64_t v8 = *a4;
  }
  *a6 = v8;
}

void sub_1B75EF51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t TXTextLayout::timeGlyphPropertiesMap(TXTextLayout *this)
{
  if (!*((void *)this + 7649)) {
    operator new();
  }
  return *((void *)this + 7649);
}

void sub_1B75EF588(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A0C4023076DA7);
  _Unwind_Resume(a1);
}

_OWORD *TXTextLayout::getPosition@<X0>(TXTextLayout *this@<X0>, CMTime *a2@<X1>, unsigned int *a3@<X2>, void *a4@<X8>)
{
  unsigned int v7 = (_OWORD *)TXTextLayout::timeGlyphPropertiesMap(this);

  return TXTimeGlyphPropertiesMap::getPosition(v7, a2, a3, a4);
}

double TXTextLayout::setPosition(TXTextLayout *a1, _DWORD *a2, _DWORD *a3, __n128 *a4)
{
  uint64_t v7 = TXTextLayout::timeGlyphPropertiesMap(a1);

  *(void *)&double result = TXTimeGlyphPropertiesMap::setPosition(v7, a2, a3, a4).n128_u64[0];
  return result;
}

_OWORD *TXTextLayout::getPathRotation@<X0>(TXTextLayout *this@<X0>, CMTime *a2@<X1>, unsigned int *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = (_OWORD *)TXTextLayout::timeGlyphPropertiesMap(this);

  return TXTimeGlyphPropertiesMap::getPathRotation(v7, a2, a3, a4);
}

double TXTextLayout::setPathRotation(TXTextLayout *a1, _DWORD *a2, _DWORD *a3, __n128 *a4)
{
  uint64_t v7 = TXTextLayout::timeGlyphPropertiesMap(a1);

  *(void *)&double result = TXTimeGlyphPropertiesMap::setPathRotation(v7, a2, a3, a4).n128_u64[0];
  return result;
}

double TXTextLayout::getTypeOn(TXTextLayout *this, unsigned int a2, CMTime *a3)
{
  BOOL v5 = (TXTimeGlyphPropertiesMap *)TXTextLayout::timeGlyphPropertiesMap(this);

  return TXTimeGlyphPropertiesMap::getTypeOn(v5, a2, a3);
}

void TXTextLayout::getSelectionBounds(uint64_t a1, uint64_t a2, const OZRenderState *a3)
{
  int v6 = (unsigned int *)(a1 + 19256);
  if (*(unsigned char *)(a1 + 19320)) {
    _ZF = 1;
  }
  else {
    _ZF = *(_DWORD *)(a1 + 19256) == *(_DWORD *)(a1 + 19260);
  }
  if (_ZF)
  {
    unint64_t v8 = *(void (**)(uint64_t))(*(void *)(a1 + 200) + 1488);
    uint64_t v9 = a1 + 200;
    v8(v9);
  }
  else
  {
    OZRenderParams::OZRenderParams((OZRenderParams *)v28);
    OZRenderParams::setState((OZRenderParams *)v28, a3);
    __asm { FMOV            V0.2D, #-1.0 }
    long long v24 = _Q0;
    *(_OWORD *)(a2 + 16) = _Q0;
    uint64_t v14 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v27, v14);
    uint64_t v15 = a1 + 58824;
    uint64_t v16 = *(TXTextObject ***)(a1 + 58824);
    uint64_t v17 = *(TXTextObject ***)(v15 + 8);
    while (v16 != v17)
    {
      double v18 = *v16;
      unsigned int v19 = *((_DWORD *)*v16 + 184);
      unsigned int v20 = *v6;
      unsigned int v21 = v6[1];
      if (*v6 >= v21) {
        unsigned int v22 = v6[1];
      }
      else {
        unsigned int v22 = *v6;
      }
      if (v20 <= v21) {
        unsigned int v20 = v6[1];
      }
      if (v22 <= v19 && v20 > v19)
      {
        float64x2_t v25 = 0uLL;
        long long v26 = v24;
        TXTextObject::getTransformedImageBoundsWithStyles(v18, &v25, v28);
        if (*(double *)&v26 >= 0.0 && *((double *)&v26 + 1) >= 0.0) {
          PCRect<double>::operator|=((float64x2_t *)a2, &v25);
        }
      }
      v16 += 2;
    }
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v27);
    OZRenderParams::~OZRenderParams((OZRenderParams *)v28);
  }
}

void sub_1B75EF8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::getBothMarginScale(TXTextLayout *this, const CMTime *a2)
{
  char shouldScaleToBothMargins = TXTextLayout::shouldScaleToBothMargins(this);
  int hasLinkedMarginScale = TXTextLayout::hasLinkedMarginScale(this);
  if ((shouldScaleToBothMargins & 1) != 0 || hasLinkedMarginScale)
  {
    int v6 = (OZChannel *)((char *)this + 61464);
    OZChannel::getInitialValue(v6);
    OZChannel::getValueAsDouble(v6, a2, 0.0);
  }
}

uint64_t TXTextLayout::hasLinkedMarginScale(TXTextLayout *this)
{
  uint64_t v11 = (uint64_t)&v11;
  uint64_t v12 = &v11;
  uint64_t v13 = 0;
  OZBehavior::GetBehaviorsAffectingChannel((void *)this + 7683, &v11, 1);
  uint64_t v1 = v12;
  if (v12 == &v11)
  {
LABEL_13:
    uint64_t v9 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v2 = (const void *)v1[2];
      if (v2)
      {
        if (v3)
        {
          uint64_t v4 = v3;
          if (OZBehavior::isEnabledAndUseBehaviors(v3))
          {
            ChanBase = (const void *)OZSingleChannelBehavior::getChanBase(v4);
            int v6 = ChanBase
            SourceChannel = OZLinkBehavior::getSourceChannel(v4);
            if (SourceChannel)
            {
              if (v6)
              {
                if (v8 && v8[6] == 376) {
                  break;
                }
              }
            }
          }
        }
      }
      uint64_t v1 = (uint64_t *)v1[1];
      if (v1 == &v11) {
        goto LABEL_13;
      }
    }
    uint64_t v9 = 1;
  }
  std::__list_imp<unsigned int>::clear(&v11);
  return v9;
}

void sub_1B75EFB04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

double TXTextLayout::getYMarginScale(TXTextLayout *this)
{
  if ((TXTextLayout::shouldScaleToTBMargins(this) & 1) != 0
    || (int shouldScaleProportionallyToLeftRightMargins = TXTextLayout::shouldScaleProportionallyToLeftRightMargins(this),
        double result = 1.0,
        shouldScaleProportionallyToLeftRightMargins))
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0);
    BOOL v5 = (char *)this + 61624;
    if (ValueAsInt) {
      BOOL v5 = (char *)this + 61616;
    }
    return *(double *)v5;
  }
  return result;
}

BOOL TXTextLayout::scaleAffectsLayout(TXTextLayout *this)
{
  if (*((unsigned char *)this + 63728))
  {
    BOOL v1 = *((_DWORD *)this + 15933) == 0;
  }
  else
  {
    uint64_t v4 = (OZChannel *)((char *)this + 20464);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0) == 3
      || OZChannel::getValueAsInt(v4, MEMORY[0x1E4F1FA48], 0.0) == 4)
    {
      return 1;
    }
    BOOL v1 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 59408), MEMORY[0x1E4F1FA48], 0.0) == 0;
  }
  return !v1;
}

void TXTextLayout::getWordVolume(TXTextLayout *this@<X0>, unint64_t a2@<X1>, int a3@<W2>, double *a4@<X8>)
{
  *((_OWORD *)a4 + 1) = xmmword_1B7E736F0;
  *((_OWORD *)a4 + 2) = xmmword_1B7E736F0;
  *(_OWORD *)a4 = xmmword_1B7E736F0;
  unint64_t v8 = (TXTextLayout *)((char *)this + 19048);
  StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
  unsigned int v10 = PCString::size((PCString *)StringPtr);
  if (v10)
  {
    unsigned int v11 = v10;
    uint64_t v12 = 0;
    do
    {
      do
      {
        uint64_t v13 = TXChannelString::getStringPtr(v8);
        UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(*(CFStringRef *)v13, (int)v12);
        if (!TXCharacterSetIsWhitespace(CharacterAtIndex)) {
          break;
        }
        uint64_t v12 = (v12 + 1);
      }
      while (v12 < v11);
      uint64_t v15 = (*(uint64_t (**)(TXTextLayout *, uint64_t, uint64_t))(*(void *)this + 1112))(this, v12, 1);
      if (v15 == -1) {
        break;
      }
      uint64_t v17 = (TXTextLayout *)v15;
      unint64_t v18 = (v15 + v16);
      if (v15 <= a2 && v18 > a2)
      {
        unsigned int v20 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
        OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v46, v20);
        uint64_t TextObjectIterWithCharOffset = TXTextLayout::getTextObjectIterWithCharOffset(this, v17);
        uint64_t v22 = TXTextLayout::getTextObjectIterWithCharOffset(this, (TXTextLayout *)v18);
        if (TextObjectIterWithCharOffset != v22)
        {
          uint64_t v23 = MEMORY[0x1E4F1FA48];
          do
          {
            if (!TXCharacterSetIsWhitespaceOrNewline(*(_WORD *)(*(void *)TextObjectIterWithCharOffset + 120)))
            {
              long long v44 = xmmword_1B7E736F0;
              long long v45 = xmmword_1B7E736F0;
              long long v43 = xmmword_1B7E736F0;
              long long v24 = *(double **)TextObjectIterWithCharOffset;
              if (a3) {
                TXTextObject::getBoundingTypographicVolume(v24, (uint64_t)&v43);
              }
              else {
                TXTextObject::getBoundingImageVolume((TXTextObject *)v24, (uint64_t)&v43, v23);
              }
              double v25 = *(double *)(*(void *)TextObjectIterWithCharOffset + 168);
              double v26 = *(double *)(*(void *)TextObjectIterWithCharOffset + 176);
              double v27 = v25 + *(double *)&v43;
              double v28 = v25 + *((double *)&v43 + 1);
              *(double *)&long long v43 = v25 + *(double *)&v43;
              *((double *)&v43 + 1) = v25 + *((double *)&v43 + 1);
              double v29 = v26 + *(double *)&v44;
              double v30 = v26 + *((double *)&v44 + 1);
              *(double *)&long long v44 = v26 + *(double *)&v44;
              *((double *)&v44 + 1) = v26 + *((double *)&v44 + 1);
              double v31 = *(double *)&v45 + 0.0;
              double v32 = *((double *)&v45 + 1) + 0.0;
              *(double *)&long long v45 = *(double *)&v45 + 0.0;
              *((double *)&v45 + 1) = *((double *)&v45 + 1) + 0.0;
              double v33 = a4[1];
              if (*a4 <= v33 && (double v35 = a4[2], v34 = a4[3], v35 <= v34) && (v37 = a4[4], v36 = a4[5], v37 <= v36))
              {
                if (v27 <= v28 && v29 <= v30 && v31 <= v32)
                {
                  if (*a4 < v27) {
                    double v27 = *a4;
                  }
                  if (v33 > v28) {
                    double v28 = a4[1];
                  }
                  *a4 = v27;
                  a4[1] = v28;
                  if (v35 >= v29) {
                    double v41 = v29;
                  }
                  else {
                    double v41 = v35;
                  }
                  if (v34 > v30) {
                    double v30 = v34;
                  }
                  a4[2] = v41;
                  a4[3] = v30;
                  if (v37 >= v31) {
                    double v42 = v31;
                  }
                  else {
                    double v42 = v37;
                  }
                  if (v36 > v32) {
                    double v32 = v36;
                  }
                  a4[4] = v42;
                  a4[5] = v32;
                }
              }
              else
              {
                long long v38 = v44;
                *(_OWORD *)a4 = v43;
                *((_OWORD *)a4 + 1) = v38;
                *((_OWORD *)a4 + 2) = v45;
              }
            }
            TextObjectIterWithCharOffset += 16;
          }
          while (TextObjectIterWithCharOffset != v22);
        }
        OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v46);
        return;
      }
      uint64_t v12 = v15 + v16;
    }
    while (v11 > (int)v15 + (int)v16);
  }
}

void sub_1B75EFEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getTextObjectIterWithCharOffset(TXTextLayout *this, TXTextLayout *a2)
{
  uint64_t v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::ReadSentry::ReadSentry((OZLockingGroup::ReadSentry *)v9, v4);
  TXHelperFunctions::GetTextObjectContainingCharIndex(this, a2, 1, 0, &v7);
  if (v7) {
    uint64_t v5 = *((void *)this + 7353) + 16 * *(unsigned int *)(v7 + 388);
  }
  else {
    uint64_t v5 = *((void *)this + 7354);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)v9);
  return v5;
}

void sub_1B75EFF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::getLineVolume(TXTextLayout *this@<X0>, CMTime *a2@<X2>, unint64_t a3@<X1>, int a4@<W3>, double *a5@<X8>)
{
  for (uint64_t i = *((void *)this + 2378); i != *((void *)this + 2379); i += 8)
  {
    unsigned int v10 = *(TXTextLayout **)(*(void *)i + 856);
    if ((unint64_t)v10 <= a3)
    {
      unsigned int v11 = (TXTextLayout *)((char *)v10 + *(void *)(*(void *)i + 864));
      if ((unint64_t)v11 > a3) {
        goto LABEL_7;
      }
    }
  }
  unsigned int v11 = 0;
  unsigned int v10 = 0;
LABEL_7:
  *((_OWORD *)a5 + 1) = xmmword_1B7E736F0;
  *((_OWORD *)a5 + 2) = xmmword_1B7E736F0;
  *(_OWORD *)a5 = xmmword_1B7E736F0;
  uint64_t TextObjectIterWithCharOffset = (double **)TXTextLayout::getTextObjectIterWithCharOffset(this, v10);
  uint64_t v13 = TXTextLayout::getTextObjectIterWithCharOffset(this, v11);
  if (TextObjectIterWithCharOffset != (double **)v13)
  {
    uint64_t v14 = (double **)v13;
    do
    {
      if (!TXCharacterSetIsWhitespaceOrNewline(*((_WORD *)*TextObjectIterWithCharOffset + 60)))
      {
        long long v35 = xmmword_1B7E736F0;
        long long v36 = xmmword_1B7E736F0;
        long long v34 = xmmword_1B7E736F0;
        unsigned int v15 = *((_DWORD *)*TextObjectIterWithCharOffset + 97);
        if (a4)
        {
          if (!TXTextLayout::getTextObjectTypographicVolumeFromMap((uint64_t)this, &v34, v15)) {
            TXTextObject::getBoundingTypographicVolume(*TextObjectIterWithCharOffset, (uint64_t)&v34);
          }
        }
        else if (!TXTextLayout::getTextObjectVolumeFromMap((uint64_t)this, &v34, v15))
        {
          TXTextObject::getBoundingImageVolume((TXTextObject *)*TextObjectIterWithCharOffset, (uint64_t)&v34, (uint64_t)a2);
        }
        double v16 = (*TextObjectIterWithCharOffset)[21];
        double v17 = (*TextObjectIterWithCharOffset)[22];
        double v18 = v16 + *(double *)&v34;
        double v19 = v16 + *((double *)&v34 + 1);
        *(double *)&long long v34 = v16 + *(double *)&v34;
        *((double *)&v34 + 1) = v16 + *((double *)&v34 + 1);
        double v20 = v17 + *(double *)&v35;
        double v21 = v17 + *((double *)&v35 + 1);
        *(double *)&long long v35 = v17 + *(double *)&v35;
        *((double *)&v35 + 1) = v17 + *((double *)&v35 + 1);
        double v22 = *(double *)&v36 + 0.0;
        double v23 = *((double *)&v36 + 1) + 0.0;
        *(double *)&long long v36 = *(double *)&v36 + 0.0;
        *((double *)&v36 + 1) = *((double *)&v36 + 1) + 0.0;
        double v24 = a5[1];
        if (*a5 <= v24 && (v26 = a5[2], double v25 = a5[3], v26 <= v25) && (v28 = a5[4], v27 = a5[5], v28 <= v27))
        {
          if (v18 <= v19 && v20 <= v21 && v22 <= v23)
          {
            if (*a5 < v18) {
              double v18 = *a5;
            }
            if (v24 > v19) {
              double v19 = a5[1];
            }
            *a5 = v18;
            a5[1] = v19;
            if (v26 >= v20) {
              double v32 = v20;
            }
            else {
              double v32 = v26;
            }
            if (v25 > v21) {
              double v21 = v25;
            }
            a5[2] = v32;
            a5[3] = v21;
            if (v28 >= v22) {
              double v33 = v22;
            }
            else {
              double v33 = v28;
            }
            if (v27 > v23) {
              double v23 = v27;
            }
            a5[4] = v33;
            a5[5] = v23;
          }
        }
        else
        {
          long long v29 = v35;
          *(_OWORD *)a5 = v34;
          *((_OWORD *)a5 + 1) = v29;
          *((_OWORD *)a5 + 2) = v36;
        }
      }
      TextObjectIterWithCharOffset += 2;
    }
    while (TextObjectIterWithCharOffset != v14);
  }
}

BOOL TXTextLayout::getTextObjectTypographicVolumeFromMap(uint64_t a1, _OWORD *a2, unsigned int a3)
{
  unsigned int v9 = a3;
  uint64_t v3 = *(uint64_t ***)(a1 + 61176);
  if (v3)
  {
    unsigned int v10 = &v9;
    uint64_t v5 = std::__tree<std::__value_type<unsigned int,PCBox<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCBox<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCBox<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, &v9, (uint64_t)&std::piecewise_construct, &v10);
    long long v6 = *(_OWORD *)(v5 + 5);
    long long v7 = *(_OWORD *)(v5 + 9);
    a2[1] = *(_OWORD *)(v5 + 7);
    a2[2] = v7;
    *a2 = v6;
  }
  return v3 != 0;
}

BOOL TXTextLayout::getTextObjectVolumeFromMap(uint64_t a1, _OWORD *a2, unsigned int a3)
{
  unsigned int v9 = a3;
  uint64_t v3 = *(uint64_t ***)(a1 + 61168);
  if (v3)
  {
    unsigned int v10 = &v9;
    uint64_t v5 = std::__tree<std::__value_type<unsigned int,PCBox<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCBox<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCBox<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, &v9, (uint64_t)&std::piecewise_construct, &v10);
    long long v6 = *(_OWORD *)(v5 + 5);
    long long v7 = *(_OWORD *)(v5 + 9);
    a2[1] = *(_OWORD *)(v5 + 7);
    a2[2] = v7;
    *a2 = v6;
  }
  return v3 != 0;
}

void TXTextLayout::getWordBounds(TXTextLayout *this@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v8 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v41, v8);
  int v9 = (*(uint64_t (**)(TXTextLayout *, uint64_t))(*(void *)this + 720))(this, a2);
  for (uint64_t i = (uint64_t *)*((void *)this + 8030); i; uint64_t i = (uint64_t *)*i)
  {
    int v11 = *((_DWORD *)i + 8);
    if (v9 >= v11)
    {
      if (v11 >= v9)
      {
        LODWORD(v35.f64[0]) = v9;
        v34.var0.CMTime var0 = (int64_t)&v35;
        double v30 = std::__tree<std::__value_type<int,PCRect<double>>,std::__map_value_compare<int,std::__value_type<int,PCRect<double>>,std::less<int>,true>,std::allocator<std::__value_type<int,PCRect<double>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)this + 8029, (int *)&v35, (uint64_t)&std::piecewise_construct, &v34);
        long long v31 = *(_OWORD *)(v30 + 7);
        *(_OWORD *)a4 = *(_OWORD *)(v30 + 5);
        *(_OWORD *)(a4 + 16) = v31;
        goto LABEL_33;
      }
      ++i;
    }
  }
  TXChannelString::getString((PCString *)this + 2381, &v40);
  if (PCString::empty(&v40)
    || (uint64_t v12 = (*(uint64_t (**)(TXTextLayout *, uint64_t, uint64_t))(*(void *)this + 1112))(this, a2, 1),
        v12 == -1))
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a4 + 16) = _Q0;
  }
  else
  {
    uint64_t v14 = 0;
    unsigned int v15 = v12 + v13;
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    float64x2_t v32 = _Q0;
    *(float64x2_t *)(a4 + 16) = _Q0;
    unsigned int v39 = v12;
    if (v12 < (int)v12 + v13)
    {
      double v21 = 0;
      uint64_t v14 = 0;
      do
      {
        if (std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::find<unsigned int>((void *)this + 8032, &v39))
        {
          TXTextLayout::cachedTextObjectForCharIndex(this, v39, &v37);
          double v22 = v37;
          if (v37 == v21)
          {
            double v22 = v21;
          }
          else
          {
            float64x2_t v35 = 0uLL;
            float64x2_t v36 = v32;
            if (a3)
            {
              uint64_t TypographicBounds = (float64x2_t *)TXTextObject::getTypographicBounds(v37);
              float64x2_t v24 = *TypographicBounds;
              float64x2_t v25 = TypographicBounds[1];
            }
            else
            {
              OZRenderState::OZRenderState(&v34);
              TXTextObject::getImageBounds(v22, &v34, (uint64_t)v33);
              float64x2_t v24 = (float64x2_t)v33[0];
              float64x2_t v25 = (float64x2_t)v33[1];
            }
            float64x2_t v35 = v24;
            float64x2_t v36 = v25;
            if (v25.f64[0] > 0.0 && v36.f64[1] > 0.0)
            {
              float64x2_t v35 = vaddq_f64(*(float64x2_t *)((char *)v22 + 168), v35);
              PCRect<double>::operator|=((float64x2_t *)a4, &v35);
            }
            double v26 = v38;
            if (v38) {
              atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v14) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            }
            uint64_t v14 = v26;
          }
          if (v38) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v38);
          }
          double v21 = v22;
        }
        ++v39;
      }
      while (v39 < v15);
    }
    LODWORD(v35.f64[0]) = v9;
    v34.var0.CMTime var0 = (int64_t)&v35;
    double v27 = std::__tree<std::__value_type<int,PCRect<double>>,std::__map_value_compare<int,std::__value_type<int,PCRect<double>>,std::less<int>,true>,std::allocator<std::__value_type<int,PCRect<double>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)this + 8029, (int *)&v35, (uint64_t)&std::piecewise_construct, &v34);
    float64x2_t v28 = *(float64x2_t *)a4;
    *(_OWORD *)(v27 + 7) = *(_OWORD *)(a4 + 16);
    *(float64x2_t *)(v27 + 5) = v28;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  PCString::~PCString(&v40);
LABEL_33:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v41);
}

void sub_1B75F054C(_Unwind_Exception *a1)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v1 - 104));
  _Unwind_Resume(a1);
}

void *TXTextLayout::cachedTextObjectForCharIndex@<X0>(TXTextLayout *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  unsigned int v6 = a2;
  long long v7 = &v6;
  double result = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 64256, &v6, (uint64_t)&std::piecewise_construct, &v7);
  uint64_t v5 = result[4];
  *a3 = result[3];
  a3[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void TXTextLayout::getLineBounds(TXTextLayout *this@<X0>, CMTime *a2@<X2>, unint64_t a3@<X1>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a6 + 16) = _Q0;
  double v16 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 22136), a2, 0.0);
  double v40 = v17;
  double v18 = (uint64_t *)*((void *)this + 2378);
  double v41 = (uint64_t *)*((void *)this + 2379);
  if (v18 != v41)
  {
    int v19 = 0;
    do
    {
      uint64_t v20 = *v18;
      unint64_t v52 = 0;
      CMTime v51 = *a2;
      OZChannel::getValueAsDouble((OZChannel *)(v20 + 680), &v51, 0.0);
      double v22 = v21;
      (*(void (**)(TXTextLayout *, CMTime *))(*(void *)this + 712))(this, a2);
      if (*(_DWORD *)(v20 + 876))
      {
        unsigned int v24 = 0;
        double v25 = (v40 + v22) * v23;
        while (1)
        {
          TXParagraphStyle::getLineMetrics(v20, v24, &v48);
          double v26 = v49;
          double v27 = v49 + v50;
          long long v28 = v48;
          if (a4)
          {
            double v29 = vabdd_f64(v27, v49);
            double v30 = vabdd_f64(*(double *)&v48, *((double *)&v48 + 1));
            double v31 = v25 + v30;
            if (v19)
            {
              double v32 = v16;
            }
            else
            {
              double v31 = v25 - *((double *)&v48 + 1);
              double v32 = *(double *)&v48;
            }
          }
          else
          {
            OZRenderState::OZRenderState(&v47);
            *(_OWORD *)&v47.var0.CMTime var0 = *(_OWORD *)&a2->value;
            v47.var0.var3 = a2->epoch;
            double v33 = *(TXTextLayout **)(v20 + 856);
            double v32 = 0.0;
            double v34 = 3.40282347e38;
            if (v33 < (TXTextLayout *)((char *)v33 + *(void *)(v20 + 864)))
            {
              double v34 = 3.40282347e38;
              do
              {
                TXHelperFunctions::GetTextObjectContainingCharIndex(this, v33, a5, &v52, &v45);
                if (!TXCharacterSetIsWhitespaceOrNewline(*((_WORD *)v45 + 60)))
                {
                  TXTextObject::getImageBounds(v45, &v47, (uint64_t)&v42);
                  if (v32 < v43 + v44) {
                    double v32 = v43 + v44;
                  }
                  if (v34 > v43) {
                    double v34 = v43;
                  }
                }
                if (v46) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v46);
                }
                double v33 = (TXTextLayout *)((char *)v33 + 1);
              }
              while ((unint64_t)v33 < *(void *)(v20 + 864) + *(void *)(v20 + 856));
            }
            double v29 = vabdd_f64(v27, v26);
            double v30 = vabdd_f64(v32, v34);
            double v31 = v25 + vabdd_f64(*(double *)&v28, *((double *)&v28 + 1));
            if (v19) {
              double v32 = v16 - (*(double *)&v28 - v32);
            }
            else {
              double v31 = v25 - *((double *)&v28 + 1);
            }
          }
          double v16 = v16 - v31;
          unint64_t v35 = *(void *)(v20 + 856);
          if (v35 <= a3 && *(void *)(v20 + 864) + v35 > a3) {
            break;
          }
          ++v24;
          ++v19;
          if (v24 >= *(_DWORD *)(v20 + 876)) {
            goto LABEL_27;
          }
        }
        v47.var0.CMTime var0 = 0;
        double v42 = 0.0;
        int Alignment = TXParagraphStyle::getAlignment((TXParagraphStyle *)v20);
        unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0);
        TXTextLayout::getAlignmentOffsetForParagraph((OZRenderState *)this, (const TXParagraphStyle *)v20, (double *)&v47.var0.var0, &v42, Alignment, ValueAsInt, -1.0, -1.0);
        *(double *)(a6 + 16) = v29;
        *(double *)(a6 + 24) = v30;
        double v38 = v32 - v30 + v42;
        *(double *)a6 = v26 + *(double *)&v47.var0.var0;
        *(double *)(a6 + 8) = v38;
      }
LABEL_27:
      ++v18;
    }
    while (v18 != v41);
  }
}

void sub_1B75F0948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextLayout::getTypographicBox(uint64_t a1, float64x2_t *a2, CMTime *a3, int a4)
{
  StringPtr = TXChannelString::getStringPtr((TXChannelString *)(a1 + 19048));
  if (PCString::size((PCString *)StringPtr))
  {
    CMTime v82 = *a3;
    int v9 = *(void **)(a1 + 19024);
    unsigned int v10 = *(void **)(a1 + 19032);
    int v11 = (const CMTime *)MEMORY[0x1E4F1FA48];
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), MEMORY[0x1E4F1FA48], 0.0);
    int v13 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20720), v11, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 22136), &v82, 0.0);
    double v65 = v14;
    double v66 = v10;
    double v63 = a3;
    int v64 = a4;
    if (v9 == v10)
    {
      double v47 = -1.0;
      double v43 = 1.0;
      double v44 = 1.0;
      double v46 = -1.0;
      double v45 = 1.0;
      double v42 = -1.0;
    }
    else
    {
      int v15 = 0;
      double v16 = 1.0;
      double v17 = -1.0;
      double v18 = (const CMTime *)MEMORY[0x1E4F1FA48];
      double v77 = 0.0;
      double v68 = 0.0;
      double v19 = -1.0;
      double v20 = 1.0;
      double v21 = -1.0;
      double v22 = 1.0;
      do
      {
        double v70 = v22;
        double v71 = v17;
        double v72 = v20;
        uint64_t v23 = *v9;
        CMTime v81 = v82;
        OZChannel::getValueAsDouble((OZChannel *)(v23 + 680), &v81, 0.0);
        double v25 = v24;
        (*(void (**)(uint64_t, CMTime *))(*(void *)a1 + 712))(a1, &v82);
        double v67 = v9;
        if (*(_DWORD *)(v23 + 876))
        {
          unint64_t v27 = 0;
          double v69 = (v65 + v25) * v26;
          double v28 = v77;
          do
          {
            double v29 = (double *)(*(void *)(v23 + 888) + (v27 << 6));
            double v30 = *v29;
            double v31 = fabs(*(double *)(v23 + 920));
            double v32 = vabdd_f64(*v29, v29[1]);
            if (v15) {
              BOOL v33 = ValueAsInt == 4;
            }
            else {
              BOOL v33 = 1;
            }
            int v34 = v33;
            if (v13) {
              double v35 = v28;
            }
            else {
              double v35 = v29[1];
            }
            if (v34) {
              double v36 = v29[1];
            }
            else {
              double v36 = v35;
            }
            int v37 = OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), v18, 0.0);
            double v74 = v36;
            if (v13)
            {
              if (v37 == 4) {
                double v38 = 0.0 - v68 - v31;
              }
              else {
                double v38 = 0.0 - v31;
              }
              double v73 = v31;
              double v31 = v32;
            }
            else
            {
              if (v34) {
                double v39 = v30;
              }
              else {
                double v39 = v28;
              }
              double v38 = v39 - v32;
              if (v37 == 4) {
                double v36 = v68;
              }
              else {
                double v36 = 0.0;
              }
              double v73 = v32;
            }
            double v75 = v32;
            double v76 = v38;
            double v40 = *(TXTextLayout **)(v23 + 856);
            double v41 = (TXTextLayout *)((char *)v40 + *(void *)(v23 + 864));
            double v42 = 0.0;
            double v43 = 3.40282347e38;
            while (v40 < v41)
            {
              TXHelperFunctions::GetTextObjectContainingCharIndex((TXHelperFunctions *)a1, v40, 1, 0, &v79);
              double v78 = 0.0;
              OZChannelBase::setRangeName(v79, (const PCString *)&v82);
              if (v43 > 0.0) {
                double v43 = v78;
              }
              if (v80) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v80);
              }
              double v40 = (TXTextLayout *)((char *)v40 + 1);
              double v41 = (TXTextLayout *)(*(void *)(v23 + 864) + *(void *)(v23 + 856));
            }
            double v45 = v36;
            double v44 = v76;
            double v46 = v36 + v31;
            double v47 = v73 + v76;
            if (v16 > v19)
            {
              double v48 = v74;
            }
            else
            {
              double v48 = v74;
              if (v72 <= v21 && v70 <= v71)
              {
                if (v16 >= v36) {
                  double v49 = v36;
                }
                else {
                  double v49 = v16;
                }
                if (v19 <= v46) {
                  double v50 = v36 + v31;
                }
                else {
                  double v50 = v19;
                }
                if (v72 >= v76) {
                  double v51 = v76;
                }
                else {
                  double v51 = v72;
                }
                if (v21 <= v47) {
                  double v52 = v73 + v76;
                }
                else {
                  double v52 = v21;
                }
                if (v70 >= v43) {
                  double v53 = v43;
                }
                else {
                  double v53 = v70;
                }
                if (v71 <= 0.0) {
                  double v54 = 0.0;
                }
                else {
                  double v54 = v71;
                }
                BOOL v56 = v36 <= v46 && v76 <= v47 && v43 <= 0.0;
                if (v56) {
                  double v43 = v53;
                }
                else {
                  double v43 = v70;
                }
                if (v56) {
                  double v47 = v52;
                }
                else {
                  double v47 = v21;
                }
                if (v56) {
                  double v44 = v51;
                }
                else {
                  double v44 = v72;
                }
                if (v56) {
                  double v46 = v50;
                }
                else {
                  double v46 = v19;
                }
                if (v56) {
                  double v45 = v49;
                }
                else {
                  double v45 = v16;
                }
                if (v56) {
                  double v42 = v54;
                }
                else {
                  double v42 = v71;
                }
              }
            }
            double v57 = v69 - v48;
            double v58 = v69 + v75;
            if (v15)
            {
              double v57 = v69 + v75;
              BOOL v59 = 1;
            }
            else
            {
              BOOL v59 = v13 == 0;
            }
            double v60 = v28 - v57;
            if (v59) {
              double v58 = 0.0;
            }
            double v28 = v60 - v58;
            ++v27;
            ++v15;
            double v71 = v42;
            double v72 = v44;
            double v16 = v45;
            double v19 = v46;
            double v21 = v47;
            double v70 = v43;
          }
          while (v27 < *(unsigned int *)(v23 + 876));
        }
        else
        {
          double v43 = v70;
          double v42 = v71;
          double v47 = v21;
          double v44 = v72;
          double v46 = v19;
          double v45 = v16;
          double v28 = v77;
        }
        double v77 = v28;
        int v9 = v67 + 1;
        double v17 = v42;
        double v16 = v45;
        double v19 = v46;
        double v68 = v68 + *(double *)(v23 + 920);
        double v20 = v44;
        double v21 = v47;
        double v22 = v43;
      }
      while (v67 + 1 != v66);
    }
    a2->f64[0] = v45;
    a2->f64[1] = v46;
    a2[1].f64[0] = v44;
    a2[1].f64[1] = v47;
    a2[2].f64[0] = v43;
    a2[2].f64[1] = v42;
    if (v64
      && (OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 1
       && *(unsigned char *)(a1 + 52256)
       || OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 3
       && *(unsigned char *)(a1 + 52257)
       || ValueAsInt == 4 && *(unsigned char *)(a1 + 52258)))
    {
      double v78 = 0.0;
      CMTime v79 = 0;
      (*(void (**)(uint64_t, OZChannelBase **, double *, CMTime *))(*(void *)a1 + 1016))(a1, &v79, &v78, v63);
      float64x2_t v61 = vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v78, 0), a2[1]);
      *a2 = vaddq_f64((float64x2_t)vdupq_lane_s64((uint64_t)v79, 0), *a2);
      a2[1] = v61;
    }
  }
  return 0;
}

void sub_1B75F0E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextLayout::getFont(const PCString *this, PCString *a2)
{
  uint64_t v4 = (PCMutex *)&this[7625];
  PCMutex::lock((PCMutex *)&this[7625]);
  uint64_t v5 = (PCString *)&this[7634];
  unsigned int v6 = (PCString *)std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::find<PCString>(this + 7634, a2);
  if (&this[7635] == v6)
  {
    uint64_t Instance = (TXFontManager *)TXFontManager::getInstance((TXFontManager *)v6);
    uint64_t CoreTextFont = TXFontManager::getCoreTextFont(Instance, a2);
    unsigned int v10 = a2;
    std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(v5, a2, (uint64_t)&std::piecewise_construct, &v10)[5] = CoreTextFont;
  }
  else
  {
    uint64_t CoreTextFont = (uint64_t)v6[5].var0;
  }
  PCMutex::unlock(v4);
  return CoreTextFont;
}

void sub_1B75F0F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void TXTextLayout::getTypographicBoundsWithAlignment(TXTextLayout *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 16) = _Q0;
  StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
  if (PCString::size((PCString *)StringPtr))
  {
    double v11 = 0.0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 22136), a2, 0.0);
    int v13 = (uint64_t *)*((void *)this + 2378);
    double v26 = (uint64_t *)*((void *)this + 2379);
    if (v13 != v26)
    {
      double v14 = v12;
      int v15 = 0;
      double v16 = *((double *)this + 8050);
      double v17 = (const CMTime *)MEMORY[0x1E4F1FA48];
      do
      {
        uint64_t v18 = *v13;
        CMTime v32 = *a2;
        OZChannel::getValueAsDouble((OZChannel *)(v18 + 680), &v32, 0.0);
        double v20 = v19;
        (*(void (**)(TXTextLayout *, const CMTime *))(*(void *)this + 712))(this, a2);
        if (*(_DWORD *)(v18 + 876))
        {
          unsigned int v22 = 0;
          double v23 = v16 + (v14 + v20) * v21;
          do
          {
            TXParagraphStyle::getLineMetrics(v18, v22, v31);
            v30[0] = (float64x2_t)v31[2];
            v30[1] = (float64x2_t)v31[3];
            if ((int)(v15 + v22) >= 1) {
              v30[0].f64[1] = v11;
            }
            double v28 = 0.0;
            double v29 = 0.0;
            int Alignment = TXParagraphStyle::getAlignment((TXParagraphStyle *)v18);
            unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v17, 0.0);
            TXTextLayout::getAlignmentOffsetForParagraph((OZRenderState *)this, (const TXParagraphStyle *)v18, &v29, &v28, Alignment, ValueAsInt, -1.0, -1.0);
            v30[0].f64[0] = v29 + v30[0].f64[0];
            v30[0].f64[1] = v28 + v30[0].f64[1];
            PCRect<double>::operator|=((float64x2_t *)a3, v30);
            double v11 = v11 - (v23 + *(double *)v31 - *((double *)v31 + 1));
            ++v22;
          }
          while (v22 < *(_DWORD *)(v18 + 876));
          v15 += v22;
        }
        ++v13;
      }
      while (v13 != v26);
    }
  }
}

void TXTextLayout::doLineLayout(PCString *this, unsigned int a2, double a3, CMTime *a4)
{
  long long v7 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v139, v7);
  v113 = (TXTextLayout *)this;
  CMTime var0 = this[2378].var0;
  if (a2 >= (unint64_t)(((char *)this[2379].var0 - (char *)var0) >> 3)) {
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v9 = *((void *)&var0->isa + a2);
  uint64_t v10 = *(void *)(v9 + 864);
  if (v10)
  {
    CFIndex v11 = *(void *)(v9 + 856);
    TXChannelString::getString(this + 2381, (PCString *)&valuePtr);
    unint64_t v111 = v11;
    PCString::substr((PCString *)&valuePtr, v11, v10, (CFStringRef *)&v136.var0);
    PCString::~PCString((PCString *)&valuePtr);
    TXTextLayout::getDisplayString(this, (PCString *)&valuePtr);
    PCString::substr((PCString *)&valuePtr, v11, v10, (CFStringRef *)&v135.var0);
    PCString::~PCString((PCString *)&valuePtr);
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    aStr = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    CFAttributedStringBeginEditing(aStr);
    int v13 = PCString::cf_str(&v135);
    v140.unsigned int location = 0;
    v140.CFIndex length = 0;
    CFAttributedStringReplaceString(aStr, v140, v13);
    v132 = 0;
    v133 = 0;
    unint64_t v134 = 0;
    CFMutableArrayRef Mutable = 0;
    TXParagraphStyle::getTabs((TXParagraphStyle *)v9, &valuePtr);
    uint64_t v14 = *(void *)&valuePtr.b - *(void *)&valuePtr.a;
    if (*(void *)&valuePtr.a)
    {
      valuePtr.CGFloat b = valuePtr.a;
      operator delete(*(void **)&valuePtr.a);
    }
    if (v14 <= 0)
    {
      double v26 = v133;
    }
    else
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(v12, v14 >> 3, MEMORY[0x1E4F1D510]);
      TXParagraphStyle::getTabs((TXParagraphStyle *)v9, &valuePtr);
      CGFloat b = valuePtr.b;
      CGFloat a = valuePtr.a;
      if (*(void *)&valuePtr.a != *(void *)&valuePtr.b)
      {
        do
        {
          CTTextTabRef v17 = TXMakeCTTextTab(**(TXTabStop ***)&a);
          CFArrayAppendValue(Mutable, v17);
          CFRelease(v17);
          *(void *)&a += 8;
        }
        while (*(void *)&a != *(void *)&b);
        CGFloat a = valuePtr.a;
      }
      if (a != 0.0)
      {
        valuePtr.CGFloat b = a;
        operator delete(*(void **)&a);
      }
      uint64_t v18 = v133;
      if ((unint64_t)v133 >= v134)
      {
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v133 - (char *)v132) >> 3);
        unint64_t v28 = v27 + 1;
        if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v134 - (void)v132) >> 3) > v28) {
          unint64_t v28 = 0x5555555555555556 * ((uint64_t)(v134 - (void)v132) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - (void)v132) >> 3) >= 0x555555555555555) {
          unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29) {
          double v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v134, v29);
        }
        else {
          double v30 = 0;
        }
        double v31 = &v30[24 * v27];
        CMTime v32 = &v30[24 * v29];
        *(_DWORD *)double v31 = 4;
        *((void *)v31 + 1) = 8;
        *((void *)v31 + 2) = &Mutable;
        double v19 = (CTParagraphStyleSetting *)(v31 + 24);
        int v34 = v132;
        BOOL v33 = v133;
        if (v133 != v132)
        {
          do
          {
            long long v35 = *(_OWORD *)&v33[-1].spec;
            *((void *)v31 - 1) = v33[-1].value;
            *(_OWORD *)(v31 - 24) = v35;
            v31 -= 24;
            --v33;
          }
          while (v33 != v34);
          BOOL v33 = v132;
        }
        v132 = (CTParagraphStyleSetting *)v31;
        v133 = v19;
        unint64_t v134 = (unint64_t)v32;
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        v133->spec = kCTParagraphStyleSpecifierTabStops;
        v18->valueCGFloat Size = 8;
        v18->value = &Mutable;
        double v19 = v18 + 1;
      }
      v133 = v19;
      valuePtr.CGFloat a = 28.0;
      if ((unint64_t)v19 >= v134)
      {
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v132) >> 3);
        if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v37 = 0x5555555555555556 * ((uint64_t)(v134 - (void)v132) >> 3);
        if (v37 <= v36 + 1) {
          unint64_t v37 = v36 + 1;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - (void)v132) >> 3) >= 0x555555555555555) {
          unint64_t v38 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v38 = v37;
        }
        if (v38) {
          double v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v134, v38);
        }
        else {
          double v39 = 0;
        }
        double v40 = (CTParagraphStyleSetting *)&v39[24 * v36];
        double v41 = &v39[24 * v38];
        v40->spec = kCTParagraphStyleSpecifierDefaultTabInterval;
        v40->valueCGFloat Size = 8;
        v40->value = &valuePtr;
        double v26 = v40 + 1;
        double v43 = v132;
        double v42 = v133;
        if (v133 != v132)
        {
          do
          {
            long long v44 = *(_OWORD *)&v42[-1].spec;
            v40[-1].value = v42[-1].value;
            *(_OWORD *)&v40[-1].spec = v44;
            --v40;
            --v42;
          }
          while (v42 != v43);
          double v42 = v132;
        }
        v132 = v40;
        v133 = v26;
        unint64_t v134 = (unint64_t)v41;
        if (v42) {
          operator delete(v42);
        }
      }
      else
      {
        v19->spec = kCTParagraphStyleSpecifierDefaultTabInterval;
        v19->valueCGFloat Size = 8;
        v19->value = &valuePtr;
        double v26 = v19 + 1;
      }
      v133 = v26;
    }
    if (v26 != v132)
    {
      CTParagraphStyleRef v45 = CTParagraphStyleCreate(v132, 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v132) >> 3));
      v141.unsigned int location = 0;
      v141.CFIndex length = v10;
      CFAttributedStringSetAttribute(aStr, v141, (CFStringRef)*MEMORY[0x1E4F24790], v45);
      CFRelease(v45);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (OZChannel::getValueAsInt((OZChannel *)((char *)v113 + 20720), MEMORY[0x1E4F1FA48], 0.0))
    {
      v142.unsigned int location = 0;
      v142.CFIndex length = v10;
      CFAttributedStringSetAttribute(aStr, v142, (CFStringRef)*MEMORY[0x1E4F248A8], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      LODWORD(valuePtr.a) = 2;
      CFNumberRef v46 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      v143.unsigned int location = 0;
      v143.CFIndex length = v10;
      CFAttributedStringSetAttribute(aStr, v143, (CFStringRef)*MEMORY[0x1E4F245C0], v46);
      CFRelease(v46);
    }
    int v130 = 0;
    CFNumberRef v47 = CFNumberCreate(0, kCFNumberIntType, &v130);
    v144.unsigned int location = 0;
    v144.CFIndex length = v10;
    CFAttributedStringSetAttribute(aStr, v144, (CFStringRef)*MEMORY[0x1E4F24788], v47);
    CFRelease(v47);
    unint64_t v48 = v111 + v10;
    CMTime v110 = (uint64_t *)v9;
    if (v111 + v10 > v111)
    {
      double v49 = (char *)v113 + 19368;
      double v50 = (const CMTime *)MEMORY[0x1E4F1FA48];
      LODWORD(v51) = v111;
      do
      {
        uint64_t v52 = *((void *)v113 + 2422);
        if ((char *)v52 == v49)
        {
          uint64_t v53 = 0;
        }
        else
        {
          do
          {
            uint64_t v53 = *(void *)(v52 + 16);
            unsigned int v54 = *(_DWORD *)(v53 + 24);
            if (v54 <= v51 && *(_DWORD *)(v53 + 28) + v54 > v51) {
              break;
            }
            uint64_t v52 = *(void *)(v52 + 8);
          }
          while ((char *)v52 != v49);
        }
        uint64_t v56 = *(void *)(v53 + 8);
        double v55 = *(std::__shared_weak_count **)(v53 + 16);
        if (v55) {
          atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v58 = *(_DWORD *)(v53 + 24);
        int v57 = *(_DWORD *)(v53 + 28);
        if (v58 <= (int)v51) {
          int v59 = v51;
        }
        else {
          int v59 = v58;
        }
        unint64_t v60 = (v57 + v58);
        if (v60 >= v48) {
          unint64_t v51 = v111 + v10;
        }
        else {
          unint64_t v51 = (v57 + v58);
        }
        *(void *)&valuePtr.CGFloat a = v59 - v111;
        *(void *)&valuePtr.CGFloat b = v51 - v59;
        if (OZChannel::getValueAsInt((OZChannel *)(v56 + 5504), v50, 0.0))
        {
          float64x2_t v61 = PCString::cf_str(&v136);
          uint64_t v128 = v56;
          v129 = v55;
          if (v55) {
            atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          TXTextLayout::applyAllCapsSizeToAttributedString(v113, aStr, v61, &v128, &valuePtr, a4);
          uint64_t v9 = (uint64_t)v110;
          double v62 = v129;
          if (!v129) {
            goto LABEL_73;
          }
        }
        else
        {
          v126 = (TXTextStyle *)v56;
          v127 = v55;
          if (v55) {
            atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          TXTextLayout::applyFontToAttributedString(v113, aStr, &v126, (CFRange *)&valuePtr, a4, 0);
          uint64_t v9 = (uint64_t)v110;
          double v62 = v127;
          if (!v127) {
            goto LABEL_73;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
LABEL_73:
        if (v55) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v55);
        }
      }
      while (v48 > v60);
    }
    CFAttributedStringEndEditing(aStr);
    v125[0] = 0;
    v125[1] = 0;
    v123[1] = v10;
    v124 = (uint64_t *)v125;
    v123[0] = v111;
    TXTextLayout::getKerningsForRange((uint64_t *)v113, v123, &v124);
    TXTextLayout::getTrackingForRange((uint64_t)v113, v123, a4, (uint64_t)&v124);
    applyKerningsToAttributedString(&v124, 0, aStr);
    __p = 0;
    v121 = 0;
    v122 = 0;
    double v63 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
    double v64 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
    uint64_t v106 = (CFTypeRef *)((char *)v113 + 64184);
    if (TXTextLayout::scaleEmojiToCapHeight(v65) && *v106 && __p != v121)
    {
      CFAttributedStringBeginEditing(aStr);
      *((CGFloat *)v113 + 8024) = CTFontGetCapHeight(*((CTFontRef *)v113 + 8023)) / v64;
      *((double *)v113 + 8025) = -v63;
      double v66 = (CFRange *)__p;
      double v67 = (CFRange *)v121;
      if (__p != v121)
      {
        CFStringRef v68 = (const __CFString *)*MEMORY[0x1E4F243F0];
        do
        {
          unsigned int location = v66->location;
          double v70 = (void *)*((void *)v113 + 2422);
          do
          {
            uint64_t v71 = v70[2];
            unsigned int v72 = *(_DWORD *)(v71 + 24);
            if (v72 <= location && *(_DWORD *)(v71 + 28) + v72 > location) {
              break;
            }
            double v70 = (void *)v70[1];
          }
          while (v70 != (void *)((char *)v113 + 19368));
          double v73 = *(OZChannel **)(v71 + 8);
          double v74 = *(std::__shared_weak_count **)(v71 + 16);
          if (v74) {
            atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          CMTime v119 = *a4;
          CGFloat Size = TXTextStyle::getSize(v73, &v119, 0.0);
          memset(&valuePtr, 0, sizeof(valuePtr));
          CGAffineTransformMakeScale(&valuePtr, *((CGFloat *)v113 + 8024), *((CGFloat *)v113 + 8024));
          CTFontRef v76 = CTFontCreateWithName(@"AppleColorEmoji", Size, &valuePtr);
          CFAttributedStringSetAttribute(aStr, *v66, v68, v76);
          CFRelease(v76);
          if (v74) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v74);
          }
          ++v66;
        }
        while (v66 != v67);
      }
      CFAttributedStringEndEditing(aStr);
    }
    *(void *)&valuePtr.CGFloat a = CTLineCreateWithAttributedString(aStr);
    TXParagraphStyle::clearDirectionalRuns(v9);
    CFArrayRef GlyphRuns = CTLineGetGlyphRuns(*(CTLineRef *)&valuePtr.a);
    CFIndex Count = CFArrayGetCount(GlyphRuns);
    if (Count < 1)
    {
      CFIndex length = 0;
      CFIndex v85 = -1;
      LOBYTE(v103) = 1;
    }
    else
    {
      CFIndex v107 = Count;
      CFArrayRef theArray = GlyphRuns;
      CFIndex v79 = 0;
      CFIndex v80 = 0;
      key = (void *)*MEMORY[0x1E4F243F0];
      uint64_t v81 = 1;
      uint64_t v82 = -1;
      do
      {
        ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(theArray, v79);
        CFRange StringRange = CTRunGetStringRange(ValueAtIndex);
        CFIndex v85 = StringRange.location;
        CFIndex length = StringRange.length;
        if (TXTextLayout::scaleEmojiToCapHeight((TXTextLayout *)StringRange.location))
        {
          CFDictionaryRef Attributes = CTRunGetAttributes(ValueAtIndex);
          int Value = (const __CTFont *)CFDictionaryGetValue(Attributes, key);
          CFStringRef v89 = CTFontCopyPostScriptName(Value);
          GlyphCFIndex Count = CTRunGetGlyphCount(ValueAtIndex);
          if (CFStringCompare(v89, @"AppleColorEmoji", 0))
          {
            CFTypeRef *v106 = CFRetain(Value);
          }
          else
          {
            GlyphsPtr = CTRunGetGlyphsPtr(ValueAtIndex);
            if (!GlyphsPtr) {
              operator new[]();
            }
            CTFontGetBoundingRectsForGlyphs(Value, kCTFontOrientationDefault, GlyphsPtr, 0, GlyphCount);
            double v92 = v121;
            if (v121 >= v122)
            {
              long long v94 = (char *)__p;
              uint64_t v95 = (v121 - (unsigned char *)__p) >> 4;
              unint64_t v96 = v95 + 1;
              if ((unint64_t)(v95 + 1) >> 60) {
                std::vector<double>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v97 = v122 - (unsigned char *)__p;
              if ((v122 - (unsigned char *)__p) >> 3 > v96) {
                unint64_t v96 = v97 >> 3;
              }
              if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v98 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v98 = v96;
              }
              if (v98)
              {
                CMTime v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)&v122, v98);
                long long v94 = (char *)__p;
                double v92 = v121;
              }
              else
              {
                CMTime v99 = 0;
              }
              double v100 = (CFRange *)&v99[16 * v95];
              CFRange *v100 = StringRange;
              double v101 = v100;
              if (v92 != v94)
              {
                do
                {
                  v101[-1] = *((CFRange *)v92 - 1);
                  --v101;
                  v92 -= 16;
                }
                while (v92 != v94);
                long long v94 = (char *)__p;
              }
              long long v93 = v100 + 1;
              __p = v101;
              v121 = (char *)&v100[1];
              v122 = &v99[16 * v98];
              if (v94) {
                operator delete(v94);
              }
            }
            else
            {
              *(void *)v121 = StringRange.location;
              *((void *)v92 + 1) = StringRange.length;
              long long v93 = (CFRange *)(v92 + 16);
            }
            v121 = (char *)v93;
          }
          CFRelease(v89);
        }
        CTRunStatus v102 = CTRunGetStatus(ValueAtIndex) & 1;
        BOOL v103 = v102 == 0;
        if (v79)
        {
          if ((v102 ^ 1) == v81)
          {
            CFIndex length = StringRange.length + v80;
            if (!v102) {
              CFIndex v85 = v82;
            }
            BOOL v103 = v81;
          }
          else
          {
            v116[0] = v82 + v111;
            v116[1] = v80;
            char v117 = v81;
            TXParagraphStyle::pushDirectionalRun(v110, (uint64_t)v116);
          }
        }
        ++v79;
        uint64_t v82 = v85;
        CFIndex v80 = length;
        uint64_t v81 = v103;
      }
      while (v79 != v107);
    }
    v114[0] = v85 + v111;
    v114[1] = length;
    BOOL v115 = v103;
    TXParagraphStyle::pushDirectionalRun(v110, (uint64_t)v114);
    long long v104 = (OZChannel *)((char *)v113 + 20464);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)v113 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 1
      || OZChannel::getValueAsInt(v104, MEMORY[0x1E4F1FA48], 0.0) == 3
      || OZChannel::getValueAsInt(v104, MEMORY[0x1E4F1FA48], 0.0) == 4)
    {
      TXTextLayout::doParagraphLayout(v113, (TXParagraphStyle *)v110, &v136, aStr, a3, (const OZRenderState *)a4);
    }
    else
    {
      TXTextLayout::doTypeLayout(v113, *(CTLineRef *)&valuePtr.a, (TXParagraphStyle *)v110, &v136, aStr, a3, (const OZRenderState *)a4);
    }
    TXParagraphStyle::dirty((TXParagraphStyle *)v110, 0);
    TXParagraphStyle::setAttributedString((TXParagraphStyle *)v110, aStr);
    PCCFRef<__CTLine const*>::~PCCFRef((const void **)&valuePtr);
    if (__p)
    {
      v121 = (char *)__p;
      operator delete(__p);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v124, v125[0]);
    if (v132)
    {
      v133 = v132;
      operator delete(v132);
    }
    PCString::~PCString(&v135);
    PCString::~PCString(&v136);
  }
  else
  {
    TXParagraphStyle::dirty(*((TXParagraphStyle **)&var0->isa + a2), 0);
    *(void *)(v9 + 920) = 0;
    *(_DWORD *)(v9 + 876) = 1;
    double v20 = (long long *)operator new(0x40uLL);
    long long *v20 = 0u;
    v20[1] = 0u;
    __asm { FMOV            V1.2D, #-1.0 }
    void v20[2] = 0u;
    v20[3] = _Q1;
    std::vector<TXLineMetrics>::__assign_with_size[abi:ne180100]<TXLineMetrics*,TXLineMetrics*>((void *)(v9 + 888), v20, v20 + 4, 1uLL);
    TXParagraphStyle::clearDirectionalRuns(v9);
    v137[0] = *(void *)(v9 + 856);
    v137[1] = 0;
    char v138 = 1;
    TXParagraphStyle::pushDirectionalRun((uint64_t *)v9, (uint64_t)v137);
    TXParagraphStyle::setCaretPositionPair(v9, *(void *)(v9 + 856), 0xFFFFFFFFLL, 0xFFFFFFFFLL);
    operator delete(v20);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v139);
}

void sub_1B75F1E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,void *a43)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a42, a43);
  CTParagraphStyleRef v45 = *(void **)(v43 - 192);
  if (v45)
  {
    *(void *)(v43 - 184) = v45;
    operator delete(v45);
  }
  PCString::~PCString((PCString *)(v43 - 168));
  PCString::~PCString((PCString *)(v43 - 160));
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v43 - 128));
  _Unwind_Resume(a1);
}

CTTextTabRef TXMakeCTTextTab(TXTabStop *a1)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v2 = (OZChannel *)((char *)a1 + 288);
  unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)a1 + 288), MEMORY[0x1E4F1FA48], 0.0);
  if (ValueAsInt >= 4)
  {
    printf("Unrecognized TXTabType");
    LOBYTE(v4) = 0;
  }
  else
  {
    unsigned int v4 = 0x10200u >> (8 * ValueAsInt);
  }
  uint64_t v5 = (OZChannel *)((char *)a1 + 136);
  unsigned int v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble(v5, MEMORY[0x1E4F1FA48], 0.0);
  double v8 = v7;
  if (OZChannel::getValueAsInt(v2, v6, 0.0) == 3)
  {
    keys[0] = *(void **)MEMORY[0x1E4F247C8];
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    values = CFCharacterSetCreateWithCharactersInString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @".");
    CFDictionaryRef v10 = CFDictionaryCreate(v9, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    return CTTextTabCreate(kCTTextAlignmentLeft, v8, v10);
  }
  else
  {
    return CTTextTabCreate((CTTextAlignment)v4, v8, 0);
  }
}

void TXTextLayout::doParagraphLayout(TXTextLayout *this, TXParagraphStyle *a2, PCString *a3, __CFAttributedString *a4, double a5, const OZRenderState *a6)
{
  CFDictionaryRef v10 = PCString::cf_str(a3);
  CFIndex Length = CFStringGetLength(v10);
  *((void *)a2 + 3) = *((void *)a2 + 2);
  TXParagraphStyle::clearLeftRightCaretPositionMaps(a2);
  uint64_t v79 = *((void *)a2 + 107);
  uint64_t v11 = *((void *)a2 + 108);
  int v105 = 0;
  uint64_t v106 = 0;
  CFIndex v107 = 0;
  CTRunStatus v102 = 0;
  BOOL v103 = 0;
  long long v104 = 0;
  __p = 0;
  double v100 = 0;
  unint64_t v101 = 0;
  typesetter = CTTypesetterCreateWithAttributedString(a4);
  CFAllocatorRef v12 = (TXParagraphStyle **)*((void *)this + 2378);
  int v13 = (TXParagraphStyle **)*((void *)this + 2379);
  if (v12 == v13)
  {
    unsigned int v15 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    do
    {
      double v16 = *v12;
      if (*v12 == a2) {
        break;
      }
      v15 += *((_DWORD *)v16 + 259);
      v14 += *((void *)v16 + 108);
      ++v12;
    }
    while (v12 != v13);
  }
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  int v18 = OZHostApplicationDelegateHandler::wantsToSkipSuggestedLineBreaksInParagraphLayout(HostApplicationDelegate);
  int v83 = OZHostApplicationDelegateHandler::wantsToIncludeTrailingWhitespaceInParagraphLineWidth(HostApplicationDelegate);
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  unint64_t v98 = 0;
  if (Length < 1)
  {
    unsigned int v20 = 0;
    double v23 = 0.0;
  }
  else
  {
    CFIndex v19 = 0;
    unsigned int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v78 = v11 + v79;
    int v22 = v18 ^ 1;
    if (a5 <= 0.0) {
      int v22 = 0;
    }
    int v82 = v22;
    long long v86 = this;
    CFIndex v80 = (OZChannel *)((char *)this + 20720);
    unsigned int v81 = v15;
    double v23 = 0.0;
    do
    {
      if (v82) {
        CFIndex v24 = (*(uint64_t (**)(TXTextLayout *, const __CTTypesetter *, CFIndex, uint64_t, double))(*(void *)v86 + 1120))(v86, typesetter, v19, v14, a5);
      }
      else {
        CFIndex v24 = *((void *)a2 + 108);
      }
      double v25 = a4;
      CFIndex v26 = v24 + v19;
      unint64_t v27 = v24 + v19 + v14;
      unint64_t v28 = v106;
      if (v106 >= v107)
      {
        double v30 = v105;
        uint64_t v31 = v106 - v105;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v33 = (char *)v107 - (char *)v105;
        if (((char *)v107 - (char *)v105) >> 2 > v32) {
          unint64_t v32 = v33 >> 2;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v32;
        }
        if (v34)
        {
          long long v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v107, v34);
          double v30 = v105;
          unint64_t v28 = v106;
        }
        else
        {
          long long v35 = 0;
        }
        unint64_t v36 = (unint64_t *)&v35[8 * v31];
        unint64_t *v36 = v27;
        unint64_t v29 = v36 + 1;
        while (v28 != v30)
        {
          unint64_t v37 = *--v28;
          *--unint64_t v36 = v37;
        }
        int v105 = v36;
        uint64_t v106 = v29;
        CFIndex v107 = (unint64_t *)&v35[8 * v34];
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        unint64_t *v106 = v27;
        unint64_t v29 = v28 + 1;
      }
      uint64_t v106 = v29;
      v108.unsigned int location = v19;
      v108.CFIndex length = v24;
      CTLineRef line = CTTypesetterCreateLine(typesetter, v108);
      a4 = v25;
      CGFloat v38 = 0.0;
      int v39 = TXParagraphStyle::getAlignment(a2) - 1;
      unsigned int v15 = v81;
      CFIndex v40 = v19 + v79 + v24;
      double v41 = 1.0;
      switch(v39)
      {
        case 0:
          CGFloat v38 = 0.5;
          break;
        case 1:
          CGFloat v38 = 1.0;
          break;
        case 2:
          if (v40 == v78) {
            double v41 = 0.0;
          }
          else {
            double v41 = 1.0;
          }
          goto LABEL_43;
        case 3:
          if (v40 == v78) {
            double v41 = 0.0;
          }
          else {
            double v41 = 1.0;
          }
          CGFloat v38 = 0.5;
          goto LABEL_43;
        case 4:
          CGFloat v38 = 1.0;
          if (v40 == v78) {
            double v41 = 0.0;
          }
          else {
            double v41 = 1.0;
          }
          goto LABEL_43;
        case 5:
LABEL_43:
          if (a5 > 0.0 && v41 > 0.0)
          {
            *(void *)&long long v91 = CTLineCreateJustifiedLine(line, v41, a5);
            if ((void)v91) {
              PCCFRef<__CTLine const*>::operator=((const void **)&line, (const void **)&v91);
            }
            PCCFRef<__CTLine const*>::~PCCFRef((const void **)&v91);
          }
          break;
        default:
          break;
      }
      double TrailingKerningWidth = getTrailingKerningWidth(line);
      double PenOffsetForFlush = CTLineGetPenOffsetForFlush(line, v38, a5);
      int ValueAsInt = OZChannel::getValueAsInt(v80, MEMORY[0x1E4F1FA48], 0.0);
      double v46 = TrailingKerningWidth * 0.5 + PenOffsetForFlush;
      if (ValueAsInt) {
        double v46 = -v46;
      }
      TXTextLayout::applyCTLineDataToTextObjects(v86, line, a2, a3, a4, v46, v45, (uint64_t)&v91);
      CFNumberRef v47 = v100;
      if ((unint64_t)v100 >= v101)
      {
        double v49 = (char *)__p;
        int64_t v50 = (v100 - (unsigned char *)__p) >> 6;
        unint64_t v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 58) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v52 = v101 - (void)__p;
        if ((uint64_t)(v101 - (void)__p) >> 5 > v51) {
          unint64_t v51 = v52 >> 5;
        }
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v53 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v51;
        }
        if (v53)
        {
          unsigned int v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>((uint64_t)&v101, v53);
          double v49 = (char *)__p;
          CFNumberRef v47 = v100;
        }
        else
        {
          unsigned int v54 = 0;
        }
        double v55 = (long long *)&v54[64 * v50];
        long long *v55 = v91;
        v55[1] = v92;
        v55[2] = v93;
        v55[3] = v94;
        if (v47 == v49)
        {
          int v57 = &v54[64 * v50];
        }
        else
        {
          uint64_t v56 = &v54[64 * v50];
          do
          {
            int v57 = v56 - 64;
            long long v58 = *((_OWORD *)v47 - 4);
            long long v59 = *((_OWORD *)v47 - 3);
            long long v60 = *((_OWORD *)v47 - 1);
            *((_OWORD *)v56 - 2) = *((_OWORD *)v47 - 2);
            *((_OWORD *)v56 - 1) = v60;
            *((_OWORD *)v56 - 4) = v58;
            *((_OWORD *)v56 - 3) = v59;
            v47 -= 64;
            v56 -= 64;
          }
          while (v47 != v49);
        }
        unint64_t v48 = v55 + 4;
        __p = v57;
        double v100 = (char *)(v55 + 4);
        unint64_t v101 = (unint64_t)&v54[64 * v53];
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        *(_OWORD *)double v100 = v91;
        *((_OWORD *)v47 + 1) = v92;
        *((_OWORD *)v47 + 2) = v93;
        *((_OWORD *)v47 + 3) = v94;
        unint64_t v48 = (long long *)(v47 + 64);
      }
      double v100 = (char *)v48;
      double TrailingWhitespaceWidth = CTLineGetTrailingWhitespaceWidth(line);
      double TypographicBounds = CTLineGetTypographicBounds(line, 0, 0, 0);
      if (v83) {
        double v64 = 0.0;
      }
      else {
        double v64 = TrailingWhitespaceWidth;
      }
      double v65 = TypographicBounds - v64;
      if (TypographicBounds - v64 >= v23) {
        double v23 = TypographicBounds - v64;
      }
      double v66 = v103;
      if (v103 >= v104)
      {
        double v62 = v102;
        uint64_t v68 = v103 - v102;
        unint64_t v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v70 = (char *)v104 - (char *)v102;
        if (((char *)v104 - (char *)v102) >> 2 > v69) {
          unint64_t v69 = v70 >> 2;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v71 = v69;
        }
        if (v71)
        {
          unsigned int v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v104, v71);
          double v62 = v102;
          double v66 = v103;
        }
        else
        {
          unsigned int v72 = 0;
        }
        double v73 = (double *)&v72[8 * v68];
        double *v73 = v65;
        double v67 = v73 + 1;
        while (v66 != v62)
        {
          uint64_t v74 = *((void *)v66-- - 1);
          *((void *)v73-- - 1) = v74;
        }
        CTRunStatus v102 = v73;
        BOOL v103 = v67;
        long long v104 = (double *)&v72[8 * v71];
        if (v62) {
          operator delete(v62);
        }
      }
      else
      {
        double *v103 = v65;
        double v67 = v66 + 1;
      }
      BOOL v103 = v67;
      long long v88 = 0;
      CFStringRef v89 = 0;
      uint64_t v90 = 0;
      TXTextLayout::addCaretInsertionPoints((int)v62, a4, v19, v24, (uint64_t)a2, (uint64_t)&v88);
      double v75 = v97;
      if ((unint64_t)v97 >= v98)
      {
        uint64_t v76 = std::vector<std::vector<unsigned long>>::__push_back_slow_path<std::vector<unsigned long> const&>(&v96, (uint64_t)&v88);
      }
      else
      {
        void *v97 = 0;
        v75[1] = 0;
        v75[2] = 0;
        std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(v75, v88, (uint64_t)v89, (v89 - (unsigned char *)v88) >> 3);
        uint64_t v76 = (uint64_t)(v75 + 3);
      }
      uint64_t v97 = (void *)v76;
      GlyphCFIndex Count = CTLineGetGlyphCount(line);
      if (v88)
      {
        CFStringRef v89 = v88;
        operator delete(v88);
      }
      v21 += GlyphCount;
      v20 += GlyphCount;
      PCCFRef<__CTLine const*>::~PCCFRef((const void **)&line);
      CFIndex v19 = v26;
    }
    while (v26 < Length);
  }
  CFRelease(typesetter);
  TXHelperFunctions::SetCaretMovementMap((uint64_t)a2, &v96);
  if ((void **)((char *)a2 + 888) != &__p) {
    std::vector<TXLineMetrics>::__assign_with_size[abi:ne180100]<TXLineMetrics*,TXLineMetrics*>((void *)a2 + 111, (long long *)__p, (long long *)v100, (v100 - (unsigned char *)__p) >> 6);
  }
  *((_DWORD *)a2 + 219) = (unint64_t)(v100 - (unsigned char *)__p) >> 6;
  TXParagraphStyle::setLineBreaks(a2, v105, (unint64_t)((char *)v106 - (char *)v105) >> 3);
  *((double *)a2 + 115) = v23;
  *(void *)&long long v91 = __PAIR64__(v20, v15);
  TXParagraphStyle::setGlyphRange((uint64_t)a2, (double *)&v91);
  *(void *)&long long v91 = &v96;
  std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
  if (__p)
  {
    double v100 = (char *)__p;
    operator delete(__p);
  }
  if (v102)
  {
    BOOL v103 = v102;
    operator delete(v102);
  }
  if (v105)
  {
    uint64_t v106 = v105;
    operator delete(v105);
  }
}

void sub_1B75F28D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,__int16 *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  a25 = &a35;
  std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v43 = *(void **)(v41 - 200);
  if (v43)
  {
    *(void *)(v41 - 192) = v43;
    operator delete(v43);
  }
  long long v44 = *(void **)(v41 - 176);
  if (v44)
  {
    *(void *)(v41 - 168) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

void TXTextLayout::doTypeLayout(TXTextLayout *this, CTLineRef line, TXParagraphStyle *a3, const PCString *a4, __CFAttributedString *a5, double a6, const OZRenderState *a7)
{
  uint64_t v11 = line;
  *((void *)a3 + 3) = *((void *)a3 + 2);
  __p = 0;
  long long v35 = 0;
  unint64_t v36 = 0;
  CGFloat leading = 0.0;
  double TypographicBounds = CTLineGetTypographicBounds(line, 0, 0, &leading);
  double TrailingWhitespaceWidth = CTLineGetTrailingWhitespaceWidth(v11);
  double TrailingKerningWidth = getTrailingKerningWidth(v11);
  uint64_t v17 = *((void *)this + 2378);
  uint64_t v18 = *((void *)this + 2379);
  if (v17 == v18)
  {
    int v19 = 0;
  }
  else
  {
    int v19 = 0;
    do
    {
      if (*(TXParagraphStyle **)v17 == a3) {
        break;
      }
      v19 += *(_DWORD *)(*(void *)v17 + 1036);
      v17 += 8;
    }
    while (v17 != v18);
  }
  CFTypeRef cf = 0;
  if (a6 > 0.0 && TXParagraphStyle::getAlignment(a3) == 6)
  {
    CFTypeRef cf = CTLineCreateJustifiedLine(v11, 1.0, a6);
    *(void *)&v31[0] = 0;
    PCCFRef<__CTLine const*>::~PCCFRef((const void **)v31);
    if (cf) {
      uint64_t v11 = (const __CTLine *)cf;
    }
  }
  TXTextLayout::applyCTLineDataToTextObjects(this, v11, a3, a4, a5, 0.0, v15, (uint64_t)v31);
  unsigned int v20 = (long long *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>((uint64_t)&v36, 1uLL);
  uint64_t v21 = (char *)__p;
  int v22 = v35;
  CFIndex v24 = &v20[4 * v23];
  long long *v20 = v31[0];
  v20[1] = v31[1];
  void v20[2] = v31[2];
  v20[3] = v31[3];
  double v25 = v20 + 4;
  if (v22 != v21)
  {
    CFIndex v26 = v20;
    do
    {
      unsigned int v20 = v26 - 4;
      long long v27 = *((_OWORD *)v22 - 4);
      long long v28 = *((_OWORD *)v22 - 3);
      long long v29 = *((_OWORD *)v22 - 1);
      *(v26 - 2) = *((_OWORD *)v22 - 2);
      *(v26 - 1) = v29;
      *(v26 - 4) = v27;
      *(v26 - 3) = v28;
      v22 -= 64;
      v26 -= 4;
    }
    while (v22 != v21);
  }
  __p = v20;
  long long v35 = (char *)v25;
  unint64_t v36 = v24;
  if (v21) {
    operator delete(v21);
  }
  long long v35 = (char *)v25;
  if ((void **)((char *)a3 + 888) != &__p) {
    std::vector<TXLineMetrics>::__assign_with_size[abi:ne180100]<TXLineMetrics*,TXLineMetrics*>((void *)a3 + 111, (long long *)__p, v25, ((char *)v25 - (unsigned char *)__p) >> 6);
  }
  *((_DWORD *)a3 + 219) = 1;
  TXParagraphStyle::setLineBreaks(a3, 0, 0);
  *((double *)a3 + 115) = TypographicBounds - TrailingWhitespaceWidth - TrailingKerningWidth;
  LODWORD(v30) = v19;
  HIDWORD(v30) = CTLineGetGlyphCount(v11);
  TXParagraphStyle::setGlyphRange((uint64_t)a3, &v30);
  PCCFRef<__CTLine const*>::~PCCFRef(&cf);
  if (__p)
  {
    long long v35 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B75F2C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, const void *a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

const void **PCCFRef<__CTLine const*>::operator=(const void **a1, const void **a2)
{
  uint64_t v3 = *a1;
  unsigned int v4 = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      CFRelease(v3);
      unsigned int v4 = *a2;
    }
    *a1 = v4;
    if (*a2) {
      CFRetain(v4);
    }
  }
  return a1;
}

double getTrailingKerningWidth(const __CTLine *a1)
{
  CFArrayRef GlyphRuns = CTLineGetGlyphRuns(a1);
  CFIndex Count = CFArrayGetCount(GlyphRuns);
  ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, Count - 1);

  return getTrailingKerningWidthForRun(ValueAtIndex);
}

void TXTextLayout::applyCTLineDataToTextObjects(TXTextLayout *this@<X0>, CTLineRef line@<X1>, TXParagraphStyle *a3@<X2>, const PCString *a4@<X4>, const __CFAttributedString *a5@<X5>, double a6@<D0>, const OZRenderState *a7@<X6>, uint64_t a8@<X8>)
{
  CFArrayRef theArray = CTLineGetGlyphRuns(line);
  CFIndex Count = CFArrayGetCount(theArray);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0);
  (*(void (**)(TXTextLayout *))(*(void *)this + 304))(this);
  CFAttributedStringRef aStr = a5;
  CFNumberRef Attribute = (const __CFNumber *)CFAttributedStringGetAttribute(a5, 0, (CFStringRef)*MEMORY[0x1E4F245C0], 0);
  valuePtr[0] = 1;
  if (Attribute)
  {
    valuePtr[0] = 2;
    CFNumberRef v11 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
    CFNumberCompare(v11, Attribute, 0);
    CFRelease(v11);
  }
  long long v39 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v40 = _Q0;
  CFStringRef String = CFAttributedStringGetString(aStr);
  PCURL::PCURL((PCURL *)&v38, String);
  if (Count >= 1)
  {
    CFStringRef v18 = (const __CFString *)*MEMORY[0x1E4F243F0];
    ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(theArray, 0);
    CTRunGetGlyphCount(ValueAtIndex);
    CFDictionaryRef Attributes = CTRunGetAttributes(ValueAtIndex);
    font = (const __CTFont *)CFDictionaryGetValue(Attributes, v18);
    uint64_t v21 = (const __CTFont *)CFAttributedStringGetAttribute(aStr, 0, v18, 0);
    CTRunGetStringRange(ValueAtIndex);
    CFStringRef v37 = CTFontCopyPostScriptName(font);
    CFStringRef v36 = CTFontCopyPostScriptName(v21);
    CTFontGetAscent(v21);
    CTFontGetDescent(v21);
    CTFontGetLeading(v21);
    CTRunGetStatus(ValueAtIndex);
    buffer = (CGGlyph *)CTRunGetGlyphsPtr(ValueAtIndex);
    PositionsPtr = (CGPoint *)CTRunGetPositionsPtr(ValueAtIndex);
    StringIndicesPtr = (CFIndex *)CTRunGetStringIndicesPtr(ValueAtIndex);
    AdvancesPtr = (CGSize *)CTRunGetAdvancesPtr(ValueAtIndex);
    if (!buffer) {
      operator new[]();
    }
    if (!PositionsPtr) {
      operator new[]();
    }
    if (!StringIndicesPtr) {
      operator new[]();
    }
    if (!AdvancesPtr) {
      operator new[]();
    }
    if (ValueAsInt) {
      operator new[]();
    }
    memset(&v35, 0, sizeof(v35));
    CTRunGetTextMatrix(&v35, ValueAtIndex);
    operator new[]();
  }
  if (2.22507386e-308 == 0.0) {
    double v22 = 0.0;
  }
  else {
    double v22 = -0.0;
  }
  *(void *)a8 = 0;
  *(double *)(a8 + 8) = v22;
  long long v23 = v40;
  *(_OWORD *)(a8 + 32) = v39;
  *(_OWORD *)(a8 + 48) = v23;
  if (2.22507386e-308 == 0.0) {
    double v24 = 0.0;
  }
  else {
    double v24 = -0.0;
  }
  *(double *)(a8 + 16) = v24;
  *(void *)(a8 + 24) = 0;
  PCString::~PCString(&v38);
}

void sub_1B75F3F54(_Unwind_Exception *a1)
{
  PCCFRef<__CTLine const*>::~PCCFRef((const void **)(v1 - 224));
  PCCFRef<__CTLine const*>::~PCCFRef((const void **)(v1 - 216));
  PCString::~PCString((PCString *)(v1 - 208));
  _Unwind_Resume(a1);
}

void TXTextLayout::addCaretInsertionPoints(int a1, CFAttributedStringRef aStr, CFIndex a3, CFIndex a4, uint64_t a5, uint64_t a6)
{
  CFStringRef String = CFAttributedStringGetString(aStr);
  CFIndex Length = CFStringGetLength(String);
  AttributedStringCopyForCaretInsertionInfo = CreateAttributedStringCopyForCaretInsertionInfo(aStr);
  int v13 = CTTypesetterCreateWithAttributedString(AttributedStringCopyForCaretInsertionInfo);
  v98.unsigned int location = a3;
  v98.CFIndex length = a4;
  Line = CTTypesetterCreateLine(v13, v98);
  CFRelease(AttributedStringCopyForCaretInsertionInfo);
  CFRelease(v13);
  uint64_t v90 = 0;
  long long v91 = &v90;
  uint64_t v92 = 0x4002000000;
  long long v93 = __Block_byref_object_copy__12;
  long long v94 = __Block_byref_object_dispose__12;
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  v88[0] = 0;
  v88[1] = v88;
  v88[2] = 0x2000000000;
  int v89 = 0;
  uint64_t v84 = 0;
  CFIndex v85 = &v84;
  uint64_t v86 = 0x2000000000;
  BOOL v87 = *(_DWORD *)(a5 + 960) == 0;
  uint64_t v15 = *(void *)(a5 + 856);
  v82[0] = 0;
  v82[1] = v82;
  v82[2] = 0x2000000000;
  char v83 = 0;
  double v16 = operator new(0x20uLL);
  *double v16 = xmmword_1B7E75300;
  v16[1] = xmmword_1B7E75300;
  uint64_t v96 = v16 + 2;
  uint64_t v97 = v16 + 2;
  uint64_t v95 = v16;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN12TXTextLayout23addCaretInsertionPointsEPK20__CFAttributedString7CFRangeP16TXParagraphStyleRNSt3__16vectorImNS6_9allocatorImEEEE_block_invoke;
  block[3] = &unk_1E616BC80;
  block[4] = v82;
  block[5] = v88;
  block[8] = Line;
  block[9] = v15;
  block[6] = &v90;
  block[7] = &v84;
  CTLineEnumerateCaretOffsets(Line, block);
  BOOL v17 = Length >= 1 && (CFStringGetCharacterAtIndex(String, Length - 1) == 10 || a3 + a4 < Length);
  __p = 0;
  uint64_t v79 = 0;
  CFIndex v80 = 0;
  uint64_t v19 = v91[5];
  uint64_t v18 = v91[6];
  uint64_t v20 = v18 - v19;
  if (v18 != v19)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    unsigned int v23 = 0;
    unint64_t v24 = v20 >> 5;
    CFIndex v25 = v15 + a3;
    do
    {
      if (v23)
      {
        if (v24 - 1 != v22)
        {
          unint64_t v34 = (uint64_t *)(v19 + 32 * v22);
          uint64_t v35 = *v34;
          uint64_t v36 = v34[2];
          if ((v34[1] & 1) == (v34[3] & 1))
          {
            if (v34[1])
            {
              uint64_t v36 = v35 + 1;
              if (v21 < v80) {
                goto LABEL_96;
              }
              long long v27 = __p;
              uint64_t v53 = (v21 - __p) >> 3;
              unint64_t v54 = v53 + 1;
              if ((unint64_t)(v53 + 1) >> 61) {
                std::vector<double>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v55 = v80 - __p;
              if ((v80 - __p) >> 2 > v54) {
                unint64_t v54 = v55 >> 2;
              }
              if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v31 = v54;
              }
              if (v31)
              {
                unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
                long long v27 = __p;
                uint64_t v21 = v79;
              }
              else
              {
                unint64_t v32 = 0;
              }
              long long v60 = &v32[8 * v53];
              *(void *)long long v60 = v36;
              long long v59 = v60 + 8;
              while (v21 != v27)
              {
                uint64_t v70 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v60 - 1) = v70;
                v60 -= 8;
              }
            }
            else
            {
              ++v36;
              if (v21 < v80) {
                goto LABEL_96;
              }
              long long v27 = __p;
              uint64_t v37 = (v21 - __p) >> 3;
              unint64_t v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 61) {
                std::vector<double>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v39 = v80 - __p;
              if ((v80 - __p) >> 2 > v38) {
                unint64_t v38 = v39 >> 2;
              }
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v31 = v38;
              }
              if (v31)
              {
                unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
                long long v27 = __p;
                uint64_t v21 = v79;
              }
              else
              {
                unint64_t v32 = 0;
              }
              long long v60 = &v32[8 * v37];
              *(void *)long long v60 = v36;
              long long v59 = v60 + 8;
              while (v21 != v27)
              {
                uint64_t v69 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v60 - 1) = v69;
                v60 -= 8;
              }
            }
          }
          else
          {
            char v43 = *((unsigned char *)v34 + 9);
            if (*((unsigned char *)v85 + 24))
            {
              if (v43)
              {
                uint64_t v36 = v35 + 1;
                if (v21 < v80) {
                  goto LABEL_96;
                }
                long long v27 = __p;
                uint64_t v63 = (v21 - __p) >> 3;
                unint64_t v64 = v63 + 1;
                if ((unint64_t)(v63 + 1) >> 61) {
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v65 = v80 - __p;
                if ((v80 - __p) >> 2 > v64) {
                  unint64_t v64 = v65 >> 2;
                }
                if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v31 = v64;
                }
                if (v31)
                {
                  unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
                  long long v27 = __p;
                  uint64_t v21 = v79;
                }
                else
                {
                  unint64_t v32 = 0;
                }
                long long v60 = &v32[8 * v63];
                *(void *)long long v60 = v36;
                long long v59 = v60 + 8;
                while (v21 != v27)
                {
                  uint64_t v74 = *((void *)v21 - 1);
                  v21 -= 8;
                  *((void *)v60 - 1) = v74;
                  v60 -= 8;
                }
              }
              else
              {
                if (v21 < v80) {
                  goto LABEL_96;
                }
                long long v27 = __p;
                uint64_t v44 = (v21 - __p) >> 3;
                unint64_t v45 = v44 + 1;
                if ((unint64_t)(v44 + 1) >> 61) {
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v46 = v80 - __p;
                if ((v80 - __p) >> 2 > v45) {
                  unint64_t v45 = v46 >> 2;
                }
                if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v31 = v45;
                }
                if (v31)
                {
                  unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
                  long long v27 = __p;
                  uint64_t v21 = v79;
                }
                else
                {
                  unint64_t v32 = 0;
                }
                long long v60 = &v32[8 * v44];
                *(void *)long long v60 = v36;
                long long v59 = v60 + 8;
                while (v21 != v27)
                {
                  uint64_t v73 = *((void *)v21 - 1);
                  v21 -= 8;
                  *((void *)v60 - 1) = v73;
                  v60 -= 8;
                }
              }
            }
            else if (v43)
            {
              if (v21 < v80)
              {
                *(void *)uint64_t v21 = v35;
                uint64_t v33 = v21 + 8;
                goto LABEL_97;
              }
              long long v27 = __p;
              uint64_t v66 = (v21 - __p) >> 3;
              unint64_t v67 = v66 + 1;
              if ((unint64_t)(v66 + 1) >> 61) {
                std::vector<double>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v68 = v80 - __p;
              if ((v80 - __p) >> 2 > v67) {
                unint64_t v67 = v68 >> 2;
              }
              if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v31 = v67;
              }
              if (v31)
              {
                unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
                long long v27 = __p;
                uint64_t v21 = v79;
              }
              else
              {
                unint64_t v32 = 0;
              }
              long long v60 = &v32[8 * v66];
              *(void *)long long v60 = v35;
              long long v59 = v60 + 8;
              while (v21 != v27)
              {
                uint64_t v76 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v60 - 1) = v76;
                v60 -= 8;
              }
            }
            else
            {
              ++v36;
              if (v21 < v80) {
                goto LABEL_96;
              }
              long long v27 = __p;
              uint64_t v56 = (v21 - __p) >> 3;
              unint64_t v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 61) {
                std::vector<double>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v58 = v80 - __p;
              if ((v80 - __p) >> 2 > v57) {
                unint64_t v57 = v58 >> 2;
              }
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v31 = v57;
              }
              if (v31)
              {
                unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
                long long v27 = __p;
                uint64_t v21 = v79;
              }
              else
              {
                unint64_t v32 = 0;
              }
              long long v60 = &v32[8 * v56];
              *(void *)long long v60 = v36;
              long long v59 = v60 + 8;
              while (v21 != v27)
              {
                uint64_t v75 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v60 - 1) = v75;
                v60 -= 8;
              }
            }
          }
          goto LABEL_156;
        }
        if (*((unsigned char *)v85 + 24)) {
          char v26 = v17;
        }
        else {
          char v26 = 1;
        }
        if ((v26 & 1) == 0)
        {
          uint64_t v36 = v25 + CTLineGetStringRange(Line).length;
          uint64_t v21 = v79;
          if (v79 >= v80)
          {
            long long v27 = __p;
            uint64_t v40 = (v79 - __p) >> 3;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 61) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v42 = v80 - __p;
            if ((v80 - __p) >> 2 > v41) {
              unint64_t v41 = v42 >> 2;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v41;
            }
            if (v31)
            {
              unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
              long long v27 = __p;
              uint64_t v21 = v79;
            }
            else
            {
              unint64_t v32 = 0;
            }
            long long v60 = &v32[8 * v40];
            *(void *)long long v60 = v36;
            long long v59 = v60 + 8;
            while (v21 != v27)
            {
              uint64_t v62 = *((void *)v21 - 1);
              v21 -= 8;
              *((void *)v60 - 1) = v62;
              v60 -= 8;
            }
            goto LABEL_156;
          }
LABEL_96:
          *(void *)uint64_t v21 = v36;
          uint64_t v33 = v21 + 8;
LABEL_97:
          long long v59 = v33;
LABEL_158:
          uint64_t v79 = v59;
          uint64_t v21 = v59;
          goto LABEL_159;
        }
        if (!*((unsigned char *)v85 + 24))
        {
          if (v21 >= v80)
          {
            long long v27 = __p;
            uint64_t v28 = (v21 - __p) >> 3;
            unint64_t v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 61) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v30 = v80 - __p;
            if ((v80 - __p) >> 2 > v29) {
              unint64_t v29 = v30 >> 2;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v29;
            }
            if (v31)
            {
              unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
              long long v27 = __p;
              uint64_t v21 = v79;
            }
            else
            {
              unint64_t v32 = 0;
            }
            long long v60 = &v32[8 * v28];
            *(void *)long long v60 = v25;
            long long v59 = v60 + 8;
            while (v21 != v27)
            {
              uint64_t v72 = *((void *)v21 - 1);
              v21 -= 8;
              *((void *)v60 - 1) = v72;
              v60 -= 8;
            }
            goto LABEL_156;
          }
          goto LABEL_26;
        }
      }
      else
      {
        if (*((unsigned char *)v85 + 24))
        {
          if (v21 < v80)
          {
LABEL_26:
            *(void *)uint64_t v21 = v25;
            uint64_t v33 = v21 + 8;
            goto LABEL_97;
          }
          long long v27 = __p;
          uint64_t v50 = (v21 - __p) >> 3;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v52 = v80 - __p;
          if ((v80 - __p) >> 2 > v51) {
            unint64_t v51 = v52 >> 2;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v51;
          }
          if (v31)
          {
            unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
            long long v27 = __p;
            uint64_t v21 = v79;
          }
          else
          {
            unint64_t v32 = 0;
          }
          long long v60 = &v32[8 * v50];
          *(void *)long long v60 = v25;
          long long v59 = v60 + 8;
          while (v21 != v27)
          {
            uint64_t v61 = *((void *)v21 - 1);
            v21 -= 8;
            *((void *)v60 - 1) = v61;
            v60 -= 8;
          }
LABEL_156:
          __p = v60;
          CFIndex v80 = &v32[8 * v31];
          if (v27) {
            operator delete(v27);
          }
          goto LABEL_158;
        }
        if (!v17)
        {
          uint64_t v36 = v25 + CTLineGetStringRange(Line).length;
          uint64_t v21 = v79;
          if (v79 < v80) {
            goto LABEL_96;
          }
          long long v27 = __p;
          uint64_t v47 = (v79 - __p) >> 3;
          unint64_t v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v49 = v80 - __p;
          if ((v80 - __p) >> 2 > v48) {
            unint64_t v48 = v49 >> 2;
          }
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v48;
          }
          if (v31)
          {
            unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v80, v31);
            long long v27 = __p;
            uint64_t v21 = v79;
          }
          else
          {
            unint64_t v32 = 0;
          }
          long long v60 = &v32[8 * v47];
          *(void *)long long v60 = v36;
          long long v59 = v60 + 8;
          while (v21 != v27)
          {
            uint64_t v71 = *((void *)v21 - 1);
            v21 -= 8;
            *((void *)v60 - 1) = v71;
            v60 -= 8;
          }
          goto LABEL_156;
        }
      }
LABEL_159:
      uint64_t v19 = v91[5];
      unint64_t v24 = (v91[6] - v19) >> 5;
      uint64_t v22 = ++v23;
    }
    while (v24 > v23);
  }
  CFRelease(Line);
  std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(a6, *(void *)(a6 + 8), __p, v79, (v79 - __p) >> 3);
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(v82, 8);
  _Block_object_dispose(&v84, 8);
  _Block_object_dispose(v88, 8);
  _Block_object_dispose(&v90, 8);
  if (v95)
  {
    uint64_t v96 = v95;
    operator delete(v95);
  }
}

void sub_1B75F49B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  unint64_t v34 = *(void **)(v32 - 112);
  if (v34)
  {
    *(void *)(v32 - 104) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

CFIndex TXTextLayout::suggestLineBreak(TXTextLayout *this, CTTypesetterRef typesetter, CFIndex startIndex, double a4)
{
  return CTTypesetterSuggestLineBreak(typesetter, startIndex, a4);
}

uint64_t GetNumBytesForGlyph(const __CTRun *a1, uint64_t a2, const uint64_t *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a3[a2];
  GlyphCFIndex Count = CTRunGetGlyphCount(a1);
  CFRange StringRange = CTRunGetStringRange(a1);
  if (CTRunGetStatus(a1))
  {
    if (a2 < 1)
    {
      CFRange v15 = CTRunGetStringRange(a1);
      CFIndex v14 = v15.length - v6 + v15.location;
    }
    else
    {
      CFIndex v14 = v3[a2 - 1] - v6;
    }
    double v16 = fabs((double)v14);
    return (v16 + v16);
  }
  else
  {
    CFIndex v9 = StringRange.location + StringRange.length;
    if (GlyphCount >= 1)
    {
      do
      {
        uint64_t v11 = *v3++;
        CFIndex v10 = v11;
        if (v11 > v6 && v10 < v9) {
          CFIndex v9 = v10;
        }
        --GlyphCount;
      }
      while (GlyphCount);
    }
    return (2 * (v9 - v6));
  }
}

double getTrailingKerningWidthForRun(const __CTRun *a1)
{
  CFDictionaryRef Attributes = CTRunGetAttributes(a1);
  uint64_t v2 = (const void *)*MEMORY[0x1E4F24778];
  if (!CFDictionaryContainsKey(Attributes, (const void *)*MEMORY[0x1E4F24778])) {
    return 0.0;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(Attributes, v2);
  double valuePtr = 0.0;
  int v4 = CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
  double result = valuePtr;
  if (valuePtr <= 0.0 || v4 == 0) {
    return 0.0;
  }
  return result;
}

void *std::vector<std::shared_ptr<TXTextObject>>::insert(uint64_t *a1, void *a2, void *a3)
{
  int v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = (uint64_t)a2 - *a1;
  uint64_t v9 = v8 >> 4;
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v16 = ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v16 >> 60) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v10 - v7;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    unint64_t v41 = a1 + 2;
    if (v18)
    {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a1 + 2), v18);
      uint64_t v21 = v20;
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v21 = 0;
    }
    unsigned int v23 = (long long *)&v19[16 * v9];
    unint64_t v38 = v19;
    *(void *)&long long v39 = v23;
    *((void *)&v39 + 1) = v23;
    uint64_t v40 = &v19[16 * v21];
    if (v9 == v21)
    {
      if (v8 < 1)
      {
        if ((void *)v7 == v4) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v8 >> 3;
        }
        uint64_t v45 = v11;
        char v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v11, v25);
        uint64_t v28 = v39;
        uint64_t v29 = *((void *)&v39 + 1) - v39;
        if (*((void *)&v39 + 1) == (void)v39)
        {
          int64x2_t v34 = vdupq_n_s64(v39);
          unint64_t v31 = (unint64_t)&v26[16 * (v25 >> 2)];
        }
        else
        {
          uint64_t v30 = v29 >> 4;
          unint64_t v31 = (unint64_t)&v26[16 * (v25 >> 2) + (v29 & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v32 = 16 * v30;
          uint64_t v33 = &v26[16 * (v25 >> 2)];
          do
          {
            *(_OWORD *)uint64_t v33 = *(_OWORD *)v28;
            v33 += 16;
            *(void *)uint64_t v28 = 0;
            *(void *)(v28 + 8) = 0;
            v28 += 16;
            v32 -= 16;
          }
          while (v32);
          int64x2_t v34 = (int64x2_t)v39;
        }
        uint64_t v35 = v40;
        uint64_t v42 = v38;
        unint64_t v38 = v26;
        *(void *)&long long v39 = &v26[16 * (v25 >> 2)];
        int64x2_t v43 = v34;
        *((void *)&v39 + 1) = v31;
        uint64_t v40 = &v26[16 * v27];
        uint64_t v44 = v35;
        std::__split_buffer<std::shared_ptr<TXTextObject>>::~__split_buffer(&v42);
        unsigned int v23 = (long long *)*((void *)&v39 + 1);
      }
      else
      {
        if (v9 >= -1) {
          uint64_t v24 = v9 + 1;
        }
        else {
          uint64_t v24 = v9 + 2;
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<TXTextObject> *,std::shared_ptr<TXTextObject> *,std::shared_ptr<TXTextObject> *>((uint64_t)&v42, v23, v23, (uint64_t)&v23[-(v24 >> 1)]);
        *(void *)&long long v39 = v39 - 16 * (v24 >> 1);
        *((void *)&v39 + 1) = v23;
      }
    }
    *(void *)unsigned int v23 = *a3;
    uint64_t v36 = a3[1];
    *((void *)v23 + 1) = v36;
    if (v36)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
      unsigned int v23 = (long long *)*((void *)&v39 + 1);
    }
    *((void *)&v39 + 1) = v23 + 1;
    int v4 = (void *)std::vector<std::shared_ptr<TXTextObject>>::__swap_out_circular_buffer(a1, &v38, v4);
    std::__split_buffer<std::shared_ptr<TXTextObject>>::~__split_buffer(&v38);
  }
  else if (a2 == (void *)v6)
  {
    long long v22 = *(_OWORD *)a3;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    if (*((void *)&v22 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    a1[1] = (uint64_t)(a2 + 2);
  }
  else
  {
    std::vector<std::shared_ptr<TXTextObject>>::__move_range((uint64_t)a1, a2, v6, (uint64_t)(a2 + 2));
    if (v4 <= a3) {
      a3 += 2 * (a1[1] > (unint64_t)a3);
    }
    uint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    void *v4 = v13;
    uint64_t v14 = v7 + 16 * v9;
    CFRange v15 = *(std::__shared_weak_count **)(v14 + 8);
    *(void *)(v14 + 8) = v12;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  return v4;
}

void sub_1B75F4E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void std::shared_ptr<OZCoreTextTypeface>::reset[abi:ne180100]<TXCoreTextTypeface,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<OZCoreTextTypeface>::shared_ptr[abi:ne180100]<TXCoreTextTypeface,void>(&v2, a2);
}

__CFAttributedString *CreateAttributedStringCopyForCaretInsertionInfo(const __CFAttributedString *a1)
{
  CFStringRef String = CFAttributedStringGetString(a1);
  CFIndex Length = CFStringGetLength(String);
  CFMutableStringRef MutableCopy = CFAttributedStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a1);
  v17.unsigned int location = 0;
  v17.CFIndex length = Length;
  CFAttributedStringRemoveAttribute(MutableCopy, v17, (CFStringRef)*MEMORY[0x1E4F24778]);
  uint64_t v5 = CFAttributedStringGetLength(MutableCopy);
  if (v5 >= 1)
  {
    uint64_t v6 = v5;
    CFIndex v7 = 0;
    CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F243F0];
    uint64_t v9 = (_OWORD *)MEMORY[0x1E4F1DAB8];
    v10.CFIndex length = v5;
    do
    {
      v10.unsigned int location = v7;
      AttributeAndLongestEffectiveRange = (const __CTFont *)CFAttributedStringGetAttributeAndLongestEffectiveRange(MutableCopy, v7, v8, v10, &longestEffectiveRange);
      long long v12 = v9[1];
      *(_OWORD *)&v15.CGFloat a = *v9;
      *(_OWORD *)&v15.c = v12;
      *(_OWORD *)&v15.tx = v9[2];
      CTFontRef v13 = CTFontCreateCopyWithAttributes(AttributeAndLongestEffectiveRange, 72.0, &v15, 0);
      CFAttributedStringSetAttribute(MutableCopy, longestEffectiveRange, v8, v13);
      CFRelease(v13);
      CFIndex v7 = longestEffectiveRange.length + longestEffectiveRange.location;
      v10.CFIndex length = v6 - (longestEffectiveRange.length + longestEffectiveRange.location);
    }
    while (v6 > longestEffectiveRange.length + longestEffectiveRange.location);
  }
  return MutableCopy;
}

__n128 __Block_byref_object_copy__12(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZN12TXTextLayout23addCaretInsertionPointsEPK20__CFAttributedString7CFRangeP16TXParagraphStyleRNSt3__16vectorImNS6_9allocatorImEEEE_block_invoke(uint64_t a1, CFIndex a2, int a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v6 + 24))
  {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    CFIndex v7 = *(void **)(*(void *)(a1 + 48) + 8);
    uint64_t v9 = (char *)v7[6];
    unint64_t v8 = v7[7];
    if ((unint64_t)v9 >= v8)
    {
      long long v12 = (char *)v7[5];
      uint64_t v13 = (v9 - v12) >> 5;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 59) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v8 - (void)v12;
      if (v15 >> 4 > v14) {
        unint64_t v14 = v15 >> 4;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        if (v16 >> 59) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        CFRange v17 = (char *)operator new(32 * v16);
      }
      else
      {
        CFRange v17 = 0;
      }
      unint64_t v18 = &v17[32 * v13];
      *(_OWORD *)unint64_t v18 = xmmword_1B7E75300;
      *((_OWORD *)v18 + 1) = xmmword_1B7E75300;
      CFRange v10 = v18 + 32;
      if (v9 != v12)
      {
        do
        {
          long long v19 = *((_OWORD *)v9 - 1);
          *((_OWORD *)v18 - 2) = *((_OWORD *)v9 - 2);
          *((_OWORD *)v18 - 1) = v19;
          v18 -= 32;
          v9 -= 32;
        }
        while (v9 != v12);
        uint64_t v9 = (char *)v7[5];
      }
      v7[5] = v18;
      v7[6] = v10;
      v7[7] = &v17[32 * v16];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v9 = xmmword_1B7E75300;
      *((_OWORD *)v9 + 1) = xmmword_1B7E75300;
      CFRange v10 = v9 + 32;
    }
    v7[6] = v10;
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    char v11 = *(unsigned char *)(v6 + 24) ^ 1;
  }
  else
  {
    char v11 = 1;
  }
  *(unsigned char *)(v6 + 24) = v11;
  CFArrayRef GlyphRuns = CTLineGetGlyphRuns(*(CTLineRef *)(a1 + 64));
  uint64_t result = CFArrayGetCount(GlyphRuns);
  if (result < 1)
  {
LABEL_29:
    int v27 = 0;
  }
  else
  {
    uint64_t v22 = result;
    CFIndex v23 = 0;
    while (1)
    {
      ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, v23);
      CFRange StringRange = CTRunGetStringRange(ValueAtIndex);
      uint64_t result = StringRange.location;
      if (StringRange.location <= a2 && StringRange.location + StringRange.length > a2) {
        break;
      }
      if (v22 == ++v23) {
        goto LABEL_29;
      }
    }
    uint64_t result = CTRunGetStatus(ValueAtIndex);
    int v27 = (result & 1) == 0;
  }
  uint64_t v28 = *(void *)(*(void *)(a1 + 48) + 8);
  unint64_t v29 = *(int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  uint64_t v30 = *(void *)(v28 + 40);
  if (v29 >= (*(void *)(v28 + 48) - v30) >> 5) {
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  }
  BOOL v31 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) == v27;
  uint64_t v32 = v30 + 32 * v29;
  if (v27 == a3) {
    v32 += 16;
  }
  *(void *)uint64_t v32 = *(void *)(a1 + 72) + a2;
  *(unsigned char *)(v32 + 8) = v27;
  *(unsigned char *)(v32 + 9) = v31;
  *(unsigned char *)(v32 + 10) = a3;
  return result;
}

void TXTextLayout::computeComposedCharacterIndices(PCString *this)
{
  long long v2 = this + 8037;
  uint64_t v3 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v74, v3);
  std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::destroy((uint64_t)v2, (PCString *)v2[1].var0);
  v2->CMTime var0 = (__CFString *)&v2[1];
  v2[2].CMTime var0 = 0;
  v2[1].CMTime var0 = 0;
  int v4 = (uint64_t **)&v2[9];
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v2[9], &v2[10].var0->isa);
  v2[9].CMTime var0 = (__CFString *)&v2[10];
  uint64_t v69 = (uint64_t)v2;
  v2[11].CMTime var0 = 0;
  v2[10].CMTime var0 = 0;
  TXChannelString::getString(this + 2381, &v73);
  uint64_t v5 = PCString::cf_str(&v73);
  CFAttributedStringRef v6 = CFAttributedStringCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, 0);
  uint64_t v65 = CTLineCreateWithAttributedString(v6);
  CFArrayRef GlyphRuns = CTLineGetGlyphRuns(v65);
  CFIndex Count = CFArrayGetCount(GlyphRuns);
  uint64_t v63 = (char *)&v2[1];
  CFAttributedStringRef cf = v6;
  __p = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, i);
      CFRange StringRange = CTRunGetStringRange(ValueAtIndex);
      CTRunStatus v12 = CTRunGetStatus(ValueAtIndex) & 1;
      if (!StringRange.location) {
        *(_DWORD *)(v69 + 64) = v12;
      }
      if (v71 >= v72)
      {
        uint64_t v14 = (v71 - __p) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v15 = (v72 - __p) >> 2;
        if (v15 <= v14 + 1) {
          unint64_t v15 = v14 + 1;
        }
        if ((unint64_t)(v72 - __p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          CFRange v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v72, v16);
        }
        else {
          CFRange v17 = 0;
        }
        unint64_t v18 = (const __CTRun **)&v17[8 * v14];
        char *v18 = ValueAtIndex;
        uint64_t v13 = (char *)(v18 + 1);
        long long v19 = v71;
        if (v71 != __p)
        {
          do
          {
            uint64_t v20 = (const __CTRun *)*((void *)v19 - 1);
            v19 -= 8;
            *--unint64_t v18 = v20;
          }
          while (v19 != __p);
          long long v19 = __p;
        }
        __p = (char *)v18;
        uint64_t v72 = &v17[8 * v16];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(void *)uint64_t v71 = ValueAtIndex;
        uint64_t v13 = v71 + 8;
      }
      uint64_t v71 = v13;
      v83[0] = StringRange.location;
      v76.CMTime var0 = (__CFString *)v83;
      uint64_t v21 = std::__tree<std::__value_type<int,TXDirectionalRun>,std::__map_value_compare<int,std::__value_type<int,TXDirectionalRun>,std::less<int>,true>,std::allocator<std::__value_type<int,TXDirectionalRun>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v4, v83, (uint64_t)&std::piecewise_construct, &v76);
      *(CFRange *)(v21 + 5) = StringRange;
      *((unsigned char *)v21 + 56) = v12 == 0;
    }
  }
  int v67 = *(_DWORD *)(v69 + 64);
  if (v67)
  {
    uint64_t v22 = v71;
    if (v71 != __p)
    {
      unsigned int v23 = 0;
      int v24 = 0;
      do
      {
        unint64_t v25 = (const __CTRun *)*((void *)v22 - 1);
        uint64_t v66 = v22 - 8;
        char Status = CTRunGetStatus(v25);
        CFRange v27 = CTRunGetStringRange(v25);
        CFIndex location = v27.location;
        PCString::substr(&v73, LODWORD(v27.location), v27.length, (CFStringRef *)&v82.var0);
        int v29 = Status & 1;
        unsigned int v30 = v23 + PCString::composedCharacterCount(&v82) - 1;
        if (v29 == v67) {
          unsigned int v31 = v23;
        }
        else {
          unsigned int v31 = v30;
        }
        PCString::stringWithoutSpacesAndNewlines(&v82, &v81);
        int v32 = PCString::composedCharacterCount(&v81);
        if (v27.length >= 1)
        {
          if (v29 == v67) {
            int v33 = v24;
          }
          else {
            int v33 = v24 + v32 - 1;
          }
          if (v29 == v67) {
            int v34 = 1;
          }
          else {
            int v34 = -1;
          }
          do
          {
            uint64_t v35 = PCString::cf_str(&v73);
            CFRange RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(v35, location);
            PCString::substr(&v73, LODWORD(RangeOfComposedCharactersAtIndex.location), RangeOfComposedCharactersAtIndex.length, (CFStringRef *)&v80.var0);
            PCString::PCString(&v76, &v80);
            CFRange v77 = RangeOfComposedCharactersAtIndex;
            *(void *)&long long v78 = __PAIR64__(v31, v23);
            *((void *)&v78 + 1) = __PAIR64__(v33, v24);
            int v79 = v29;
            unsigned int v75 = RangeOfComposedCharactersAtIndex.location;
            *(void *)char v83 = &v75;
            uint64_t v37 = std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v69, &v75, (uint64_t)&std::piecewise_construct, (_DWORD **)v83);
            PCString::set((PCString *)v37 + 5, &v76);
            long long v38 = v78;
            *((CFRange *)v37 + 3) = v77;
            *((_OWORD *)v37 + 4) = v38;
            *((_DWORD *)v37 + 20) = v79;
            if ((PCString::isWhitespaceAndNewline(&v80) & 1) == 0)
            {
              ++v24;
              if (v29 == v67) {
                ++v33;
              }
              else {
                --v33;
              }
            }
            location += RangeOfComposedCharactersAtIndex.length;
            v31 += v34;
            PCString::~PCString(&v76);
            PCString::~PCString(&v80);
            ++v23;
          }
          while (location < v27.location + v27.length);
        }
        PCString::~PCString(&v81);
        PCString::~PCString(&v82);
        uint64_t v22 = v66;
      }
      while (v66 != __p);
    }
  }
  else
  {
    long long v39 = (CTRunRef *)__p;
    if (v71 != __p)
    {
      unsigned int v40 = 0;
      int v41 = 0;
      do
      {
        uint64_t v68 = v39;
        uint64_t v42 = *v39;
        char v43 = CTRunGetStatus(*v39);
        CFRange v44 = CTRunGetStringRange(v42);
        CFIndex v45 = v44.location;
        PCString::substr(&v73, LODWORD(v44.location), v44.length, (CFStringRef *)&v82.var0);
        int v46 = v43 & 1;
        unsigned int v47 = v40 + PCString::composedCharacterCount(&v82) - 1;
        if (v43) {
          unsigned int v48 = v47;
        }
        else {
          unsigned int v48 = v40;
        }
        PCString::stringWithoutSpacesAndNewlines(&v82, &v81);
        int v49 = PCString::composedCharacterCount(&v81);
        if (v44.length >= 1)
        {
          if (v43) {
            int v50 = v41 + v49 - 1;
          }
          else {
            int v50 = v41;
          }
          if (v43) {
            int v51 = -1;
          }
          else {
            int v51 = 1;
          }
          do
          {
            uint64_t v52 = PCString::cf_str(&v73);
            CFRange v53 = CFStringGetRangeOfComposedCharactersAtIndex(v52, v45);
            PCString::substr(&v73, LODWORD(v53.location), v53.length, (CFStringRef *)&v80.var0);
            PCString::PCString(&v76, &v80);
            CFRange v77 = v53;
            *(void *)&long long v78 = __PAIR64__(v48, v40);
            *((void *)&v78 + 1) = __PAIR64__(v50, v41);
            int v79 = v46;
            unsigned int v75 = v53.location;
            *(void *)char v83 = &v75;
            unint64_t v54 = std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v69, &v75, (uint64_t)&std::piecewise_construct, (_DWORD **)v83);
            PCString::set((PCString *)v54 + 5, &v76);
            long long v55 = v78;
            *((CFRange *)v54 + 3) = v77;
            *((_OWORD *)v54 + 4) = v55;
            *((_DWORD *)v54 + 20) = v79;
            if ((PCString::isWhitespaceAndNewline(&v80) & 1) == 0)
            {
              ++v41;
              if (v46) {
                --v50;
              }
              else {
                ++v50;
              }
            }
            v45 += v53.length;
            v48 += v51;
            PCString::~PCString(&v76);
            PCString::~PCString(&v80);
            ++v40;
          }
          while (v45 < v44.location + v44.length);
        }
        PCString::~PCString(&v81);
        PCString::~PCString(&v82);
        long long v39 = v68 + 1;
      }
      while (v68 + 1 != (CTRunRef *)v71);
    }
  }
  CFRelease(cf);
  CFRelease(v65);
  *(_DWORD *)(v69 + 24) = 0;
  uint64_t v56 = v63;
  if (v63 != *(char **)v69)
  {
    while (1)
    {
      unint64_t v57 = *(char **)v56;
      uint64_t v58 = v56;
      if (*(void *)v56)
      {
        do
        {
          long long v59 = v57;
          unint64_t v57 = (char *)*((void *)v57 + 1);
        }
        while (v57);
      }
      else
      {
        do
        {
          long long v59 = (char *)*((void *)v58 + 2);
          BOOL v60 = *(void *)v59 == (void)v58;
          uint64_t v58 = v59;
        }
        while (v60);
      }
      if ((PCString::isWhitespaceAndNewline((PCString *)v59 + 5) & 1) == 0) {
        break;
      }
      uint64_t v61 = *(char **)v56;
      if (*(void *)v56)
      {
        do
        {
          uint64_t v62 = v61;
          uint64_t v61 = (char *)*((void *)v61 + 1);
        }
        while (v61);
      }
      else
      {
        do
        {
          uint64_t v62 = (char *)*((void *)v56 + 2);
          BOOL v60 = *(void *)v62 == (void)v56;
          uint64_t v56 = v62;
        }
        while (v60);
      }
      uint64_t v56 = v62;
      if (v62 == *(char **)v69) {
        goto LABEL_73;
      }
    }
    *(_DWORD *)(v69 + 24) = *((_DWORD *)v59 + 18) + 1;
  }
LABEL_73:
  if (__p) {
    operator delete(__p);
  }
  PCString::~PCString(&v73);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v74);
}

void sub_1B75F5894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, PCString a20,char a21,uint64_t a22,PCString a23)
{
}

void TXTextLayout::updateTextStateInParagraph(TXTextLayout *this, unsigned int a2)
{
  int v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v29, v4);
  uint64_t v5 = *((void *)this + 2378);
  CFAttributedStringRef v6 = *(_DWORD **)(v5 + 8 * (a2 - 1));
  uint64_t v7 = *(void *)(v5 + 8 * a2);
  int v8 = v6[259] + v6[258];
  unsigned int v9 = v8 + *(_DWORD *)(v7 + 1036);
  *(_DWORD *)(v7 + 1032) = v8;
  if (v8 < v9)
  {
    CFRange v10 = (uint64_t *)((char *)this + 58824);
    char v11 = (uint64_t *)(*((void *)this + 7353) + 16 * v8);
    unsigned int v12 = -1;
    unsigned int v13 = v8;
    do
    {
      uint64_t v14 = *v11;
      v11 += 2;
      *(_DWORD *)(v14 + 388) = v13;
      unsigned int v15 = *(_DWORD *)(v14 + 736);
      if (v15 < v12) {
        unsigned int v12 = v15;
      }
      ++v13;
    }
    while (v9 > v13);
    unsigned int v16 = v6[216] + v6[214] - v12;
    uint64_t v17 = 16 * v8;
    do
    {
      uint64_t v18 = *v10;
      uint64_t v19 = *(void *)(*v10 + v17);
      unsigned int v28 = *(_DWORD *)(v19 + 736) + v16;
      *(_DWORD *)(v19 + 736) = v28;
      ComposedCharacter = TXTextLayout::getComposedCharacter(this, v16 + *(_DWORD *)(v19 + 80));
      uint64_t v21 = *(void *)(v18 + v17);
      PCString::set((PCString *)(v21 + 72), (const PCString *)ComposedCharacter);
      long long v22 = *(_OWORD *)(ComposedCharacter + 1);
      long long v23 = *(_OWORD *)(ComposedCharacter + 3);
      *(_DWORD *)(v21 + 112) = *((_DWORD *)ComposedCharacter + 10);
      *(_OWORD *)(v21 + 80) = v22;
      *(_OWORD *)(v21 + 96) = v23;
      unsigned int v30 = &v28;
      int v24 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 64256, &v28, (uint64_t)&std::piecewise_construct, &v30);
      long long v25 = *(_OWORD *)(v18 + v17);
      uint64_t v26 = *(void *)(v18 + v17 + 8);
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      CFRange v27 = (std::__shared_weak_count *)v24[4];
      *(_OWORD *)(v24 + 3) = v25;
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      v17 += 16;
      ++v8;
    }
    while (v9 > v8);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v29);
}

void sub_1B75F5B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::clearInvalidTextObjects(TXTextLayout *this)
{
  uint64_t v1 = (char *)this + 58824;
  long long v2 = (long long *)*((void *)this + 7353);
  uint64_t v3 = (long long *)*((void *)this + 7354);
  if (v2 != v3)
  {
    int v4 = (void *)((char *)this + 64256);
    do
    {
      if (!*(unsigned char *)(*(void *)v2 + 744))
      {
        unsigned int v11 = *(_DWORD *)(*(void *)v2 + 736);
        std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__erase_unique<unsigned int>(v4, &v11);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v5 = *(long long **)v1;
    long long v2 = (long long *)*((void *)v1 + 1);
    while (v5 != v2)
    {
      if (!*(unsigned char *)(*(void *)v5 + 744))
      {
        if (v5 != v2)
        {
          uint64_t v7 = v5 + 1;
          if (v5 + 1 != v2)
          {
            do
            {
              uint64_t v8 = *(void *)v7;
              if (*(unsigned char *)(*(void *)v7 + 744))
              {
                uint64_t v9 = *((void *)v7 + 1);
                *(void *)uint64_t v7 = 0;
                *((void *)v7 + 1) = 0;
                CFRange v10 = (std::__shared_weak_count *)*((void *)v5 + 1);
                *(void *)uint64_t v5 = v8;
                *((void *)v5 + 1) = v9;
                if (v10) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
                }
                ++v5;
              }
              ++v7;
            }
            while (v7 != v2);
            long long v2 = (long long *)*((void *)v1 + 1);
          }
        }
        return std::vector<std::shared_ptr<TXTextObject>>::erase((uint64_t)v1, (uint64_t)v5, v2);
      }
      ++v5;
    }
  }
  uint64_t v5 = v2;
  return std::vector<std::shared_ptr<TXTextObject>>::erase((uint64_t)v1, (uint64_t)v5, v2);
}

uint64_t std::vector<std::shared_ptr<TXTextObject>>::erase(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<TXTextObject> *,std::shared_ptr<TXTextObject> *,std::shared_ptr<TXTextObject> *>((uint64_t)&v10, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v7 - 8);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        v7 -= 16;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

char *TXTextLayout::getDirectionalRun(TXTextLayout *this, int a2)
{
  long long v2 = (char **)((char *)this + 64368);
  uint64_t v3 = (char *)this + 64376;
  int v4 = (char *)*((void *)this + 8047);
  uint64_t v5 = (char *)this + 64376;
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v6 = (char *)this + 64376;
  do
  {
    int v7 = *((_DWORD *)v4 + 8);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      uint64_t v9 = (char **)v4;
    }
    else {
      uint64_t v9 = (char **)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    int v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *((_DWORD *)v6 + 8) <= a2) {
    return v6 + 40;
  }
LABEL_11:
  if (*v2 != v3)
  {
    uint64_t v5 = *v2;
    while (1)
    {
      uint64_t v10 = *((void *)v5 + 5);
      if (v10 <= a2 && *((void *)v5 + 6) + v10 > a2) {
        break;
      }
      unsigned int v12 = (char *)*((void *)v5 + 1);
      if (v12)
      {
        do
        {
          unsigned int v13 = v12;
          unsigned int v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unsigned int v13 = (char *)*((void *)v5 + 2);
          BOOL v14 = *(void *)v13 == (void)v5;
          uint64_t v5 = v13;
        }
        while (!v14);
      }
      uint64_t v5 = v13;
      if (v13 == v3) {
        return 0;
      }
    }
  }
  if (v5 == v3) {
    return 0;
  }
  else {
    return v5 + 40;
  }
}

uint64_t TXTextLayout::getComposedCharacterCount(TXTextLayout *this)
{
  long long v2 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::ReadSentry::ReadSentry((OZLockingGroup::ReadSentry *)v5, v2);
  uint64_t v3 = *((unsigned int *)this + 16078);
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)v5);
  return v3;
}

uint64_t TXTextLayout::getComposedCharacterCountIgnoringSpaces(TXTextLayout *this)
{
  long long v2 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::ReadSentry::ReadSentry((OZLockingGroup::ReadSentry *)v5, v2);
  uint64_t v3 = *((unsigned int *)this + 16080);
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)v5);
  return v3;
}

void TXTextLayout::invalidateTextObjectsInRange(Li3DEngineScene *a1, int *a2)
{
  uint64_t v3 = (void *)((char *)a1 + 58824);
  int v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager(a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v11, v4);
  uint64_t v5 = *a2;
  unint64_t v6 = (a2[1] + v5);
  if (v6 >= (uint64_t)(v3[1] - *v3) >> 4) {
    unint64_t v6 = (uint64_t)(v3[1] - *v3) >> 4;
  }
  if ((int)v5 < (int)v6)
  {
    int v7 = (uint64_t *)(*v3 + 16 * v5);
    uint64_t v8 = v5 - (int)v6;
    do
    {
      uint64_t v9 = *v7;
      v7 += 2;
      *(unsigned char *)(v9 + 744) = 0;
    }
    while (!__CFADD__(v8++, 1));
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v11);
}

double TXTextLayout::computeExtraLineSpacingForDiacritics(TXTextLayout *this, const CMTime *a2)
{
  double v4 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 61464), a2, 0.0);
  unint64_t v6 = (uint64_t *)*((void *)this + 2378);
  int v7 = (uint64_t *)*((void *)this + 2379);
  double v8 = 0.0;
  if (v6 != v7)
  {
    double v9 = v5;
    int v10 = 0;
    uint64_t v11 = 0;
    int v12 = 0;
    while (1)
    {
      uint64_t v13 = *v6;
      if (*(void *)(*v6 + 864)) {
        break;
      }
LABEL_25:
      if (++v6 == v7) {
        goto LABEL_26;
      }
    }
    uint64_t v14 = *(unsigned int *)(v13 + 876);
    CMTime v30 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v13 + 680), &v30, 0.0);
    if (v11)
    {
      uint64_t v16 = (uint64_t)(*(void *)(v11 + 896) - *(void *)(v11 + 888)) >> 6;
      if (v14) {
        goto LABEL_6;
      }
      goto LABEL_23;
    }
    uint64_t v16 = 0;
    if (!v14)
    {
LABEL_23:
      double v22 = v8;
LABEL_24:
      int v12 = *(_DWORD *)(v13 + 876);
      double v8 = v22;
      uint64_t v11 = v13;
      goto LABEL_25;
    }
LABEL_6:
    uint64_t v17 = 0;
    double v18 = v9 * v15;
    unsigned int v19 = -1;
    while (1)
    {
      if (!v11 && !v17) {
        goto LABEL_19;
      }
      uint64_t v20 = *(void *)(v13 + 888);
      if (*(void *)(v13 + 896) == v20) {
        goto LABEL_19;
      }
      unint64_t v21 = v17 || !v16
          ? v20 + ((unint64_t)v19 << 6)
          : *(void *)(v11 + 888) + ((unint64_t)(v12 - 1) << 6);
      double v22 = fabs(*(double *)(v21 + 40))
          + *(double *)(v20 + v17 + 40)
          + *(double *)(v20 + v17 + 56)
          - (v18
           + *(double *)(v20 + v17)
           + fabs(*(double *)(v21 + 8)));
      if (v22 <= v8) {
        break;
      }
      double v4 = 0.0;
      int v10 = 1;
LABEL_20:
      ++v19;
      v17 += 64;
      double v8 = v22;
      if (v14 << 6 == v17) {
        goto LABEL_24;
      }
    }
    if (v22 < 0.0)
    {
      double v23 = -v22;
      int v24 = v10 ^ 1 | (v4 > v23);
      v10 |= v24;
      if (v24) {
        double v4 = v23;
      }
    }
LABEL_19:
    double v22 = v8;
    goto LABEL_20;
  }
LABEL_26:
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 63568), MEMORY[0x1E4F1FA48], 0.0);
  double v26 = v25 - v4;
  BOOL v27 = v4 < v25;
  double v28 = -0.0;
  if (v27) {
    double v28 = v26;
  }
  return v8 + v28;
}

uint64_t TXTextLayout::doMotionLayout(TXTextLayout *this, const OZRenderState *a2)
{
  double v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v141, v4);
  CMTime var0 = (CMTime)a2->var0;
  double v5 = (uint64_t **)TXTextLayout::timeGlyphPropertiesMap(this);
  TXTimeGlyphPropertiesMap::preSelectGlyphMap(v5, &var0);
  double v138 = 0.0;
  double v139 = 0.0;
  double v136 = 0.0;
  double v137 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 22136), &var0, 0.0);
  double v101 = v6;
  double ScrollPositionInPixels = 0.0;
  if (TXTextLayout::getEnableScroll(this)) {
    double ScrollPositionInPixels = TXTextLayout::getScrollPositionInPixels(this);
  }
  double v7 = 0.0;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0) == 4) {
    double v8 = 0.0;
  }
  else {
    double v8 = ScrollPositionInPixels + 0.0;
  }
  CMTime v118 = (uint64_t *)((char *)this + 58824);
  int v9 = *((_DWORD *)this + 14928);
  if (v9 == 1)
  {
    double v10 = 0.0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 59560), MEMORY[0x1E4F1FA48], 0.0);
    double v7 = v12;
  }
  else
  {
    double v10 = 0.0;
    if (v9 == 2)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 59560), MEMORY[0x1E4F1FA48], 0.0);
      double v10 = v11;
    }
  }
  int EnableScroll = TXTextLayout::getEnableScroll(this);
  double v14 = 0.0;
  if (EnableScroll) {
    double v15 = 0.0;
  }
  else {
    double v15 = v7;
  }
  double v112 = v15;
  if (!EnableScroll) {
    double v14 = v10;
  }
  double v100 = v14;
  BOOL v103 = (uint64_t *)*((void *)this + 2378);
  long long v104 = (uint64_t *)*((void *)this + 2379);
  int v16 = *(_DWORD *)(*v103 + 960);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0);
  int v117 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0);
  int v18 = (*(uint64_t (**)(TXTextLayout *))(*(void *)this + 304))(this);
  int v129 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0);
  unsigned int v19 = (_DWORD *)*((void *)this + 26);
  int v20 = v19[2];
  int v21 = v19[3];
  int v23 = v19[4];
  int v22 = v19[5];
  BOOL v27 = v20 == 792898163 && v21 == 1337411563 && v23 == -1926054385 && v22 == 1588990368;
  int NumLinesInParagraphBounds = TXTextLayout::getNumLinesInParagraphBounds(this);
  double v28 = (TXTextLayout *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 61800), MEMORY[0x1E4F1FA48], 0.0);
  if (v28)
  {
    BOOL v29 = NumLinesInParagraphBounds > 0 && v27;
    BOOL v110 = v29;
  }
  else
  {
    BOOL v110 = 0;
  }
  int isExtraLineSpacingForDiacriticsEnabled = TXTextLayout::isExtraLineSpacingForDiacriticsEnabled(v28);
  if (TXTextLayout::dynamicLineSpacingForDiacriticsEnabled(this))
  {
    double v30 = TXTextLayout::computeExtraLineSpacingForDiacritics(this, &var0);
    (*(void (**)(TXTextLayout *, double))(*(void *)this + 1128))(this, v30);
  }
  double v134 = 0.0;
  double v135 = 0.0;
  (*(void (**)(TXTextLayout *, double *, double *, const OZRenderState *))(*(void *)this + 1016))(this, &v135, &v134, a2);
  unsigned int v105 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0);
  int v31 = 0;
  LODWORD(v119) = 0;
  BOOL v32 = v117 == 4 || ValueAsInt == 3;
  BOOL v33 = v16 == 1 && v117 == 4;
  BOOL v102 = v33;
  BOOL v122 = v32;
  int v115 = v32 | v18;
  double v34 = 0.0;
  double v109 = 0.0;
  double v35 = 0.0;
  uint64_t v37 = v103;
  uint64_t v36 = v104;
  double v113 = 0.0;
  do
  {
    long long v38 = v36 - 1;
    if (v102) {
      long long v39 = v38;
    }
    else {
      long long v39 = v37;
    }
    uint64_t v40 = *v39;
    CMTime v133 = var0;
    OZChannel::getValueAsDouble((OZChannel *)(v40 + 680), &v133, 0.0);
    double v42 = v41;
    double v43 = *((double *)this + 7703);
    double v44 = (*(double (**)(TXTextLayout *, CMTime *))(*(void *)this + 712))(this, &var0);
    if (*(_DWORD *)(v40 + 876) < 2u)
    {
      uint64_t v46 = *(void *)(v40 + 856);
    }
    else
    {
      CFIndex v45 = *(_DWORD **)(v40 + 912);
      if (v45) {
        LODWORD(v46) = *v45;
      }
      else {
        LODWORD(v46) = 0;
      }
    }
    if (v119)
    {
      unsigned int v47 = *(double **)(v40 + 888);
      double v48 = v129 ? v47[3] : *v47 - v34;
      double v8 = v8 - (v100 + v112 + v113 + v48);
      if (v110 && !(v119 % NumLinesInParagraphBounds)) {
        double v8 = 0.0;
      }
    }
    double v49 = *((double *)this + 8050);
    int Alignment = TXParagraphStyle::getAlignment((TXParagraphStyle *)v40);
    TXTextLayout::getAlignmentOffsetForParagraph((OZRenderState *)this, (const TXParagraphStyle *)v40, &v139, &v138, Alignment, v105, v135, v134);
    if (TXParagraphStyle::getAlignment((TXParagraphStyle *)v40) != 1) {
      TXTextLayout::getAlignmentOffsetForParagraph((OZRenderState *)this, (const TXParagraphStyle *)v40, &v137, &v136, 1, v105, v135, v134);
    }
    double v109 = v109 + v35;
    if (v117 == 4)
    {
      if (v129) {
        double v138 = v138 - v109;
      }
      else {
        double v139 = v109 + v139;
      }
    }
    uint64_t v106 = v37;
    CFIndex v107 = v38;
    double v113 = (v101 + v42) * v43 * v44 + v49;
    int v51 = *(_DWORD *)(v40 + 1036);
    if (v51)
    {
      uint64_t v52 = 0;
      CFRange v53 = 0;
      uint64_t v54 = 16 * v31;
      double v55 = 0.0;
      char v56 = 1;
      HIDWORD(v57) = 0;
      double v121 = 0.0;
      double v123 = 0.0;
      double v124 = 0.0;
      double v125 = 0.0;
      while (1)
      {
        uint64_t v58 = *v118;
        uint64_t v59 = *(void *)(*v118 + v54);
        LODWORD(v57) = *(_DWORD *)(v59 + 736);
        double v60 = (double)*(unint64_t *)&v57;
        uint64_t v61 = *(void *)(v59 + 264);
        if ((v56 & 1) == 0) {
          break;
        }
        if (v61) {
          goto LABEL_70;
        }
        uint64_t v62 = 0;
        uint64_t v63 = 0;
LABEL_72:
        if (v53) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v53);
        }
        double v55 = 0.0;
        if (!v122)
        {
          CMTime v132 = var0;
          OZChannel::getValueAsDouble((OZChannel *)(v62 + 2560), &v132, v60);
          double v55 = v64;
        }
        OZChannel::getValueAsDouble((OZChannel *)(v62 + 3592), &var0, 0.0);
        double v125 = v65;
        OZChannel::getValueAsDouble((OZChannel *)(v62 + 3744), &var0, 0.0);
        double v124 = v66;
        OZChannel::getValueAsDouble((OZChannel *)(v62 + 4192), &var0, 0.0);
        double v123 = v67;
        uint64_t v52 = v61;
LABEL_77:
        CMTime v131 = var0;
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 28136), &v131, v60);
        double v126 = v55;
        double v69 = v55 + v68;
        if (v129)
        {
          double v70 = v139;
          double LayoutRealPos = TXTextObject::getLayoutRealPos(*(TXTextObject **)(v58 + v54));
          double v120 = v138;
          double v127 = 0.0 - v69 + v70;
          double v128 = LayoutRealPos + v138;
          double v72 = v70;
        }
        else
        {
          double v73 = TXTextObject::getLayoutRealPos(*(TXTextObject **)(v58 + v54));
          double v70 = v139;
          double v72 = v73 + v139;
          double v120 = v138;
          double v127 = v73 + v139;
          double v128 = v69 + v138;
        }
        if (v122) {
          double v74 = -0.0;
        }
        else {
          double v74 = v125;
        }
        if (v122) {
          double v75 = -0.0;
        }
        else {
          double v75 = v124;
        }
        if (v115) {
          double v76 = 0.0;
        }
        else {
          double v76 = v123 + 0.0;
        }
        unsigned int v77 = *(_DWORD *)(v40 + 876);
        if (v77 >= 2 && v60 >= (double)v46)
        {
          double v121 = v121 + 1.0;
          if (v121 >= (double)(v77 - 1))
          {
            LODWORD(v46) = -1;
          }
          else
          {
            uint64_t v78 = *(void *)(v40 + 912);
            if (v78) {
              LODWORD(v46) = *(_DWORD *)(v78 + 4 * v121);
            }
            else {
              LODWORD(v46) = 0;
            }
          }
          uint64_t v119 = (v119 + 1);
          if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*((void *)this + 26)+ 8), (int32x4_t)xmmword_1B7E78250)))))
          {
            uint64_t v79 = *(void *)(v40 + 888);
            double v114 = *(double *)(v79 + ((unint64_t)v121 << 6));
            double v80 = *(double *)(v79 + ((unint64_t)(v121 + -1.0) << 6) + 8);
            if (isExtraLineSpacingForDiacriticsEnabled)
            {
              uint64_t v81 = *(void *)(*(void *)(v58 + v54) + 264);
              if (v81)
              {
                PCString v82 = *(OZChannel **)(v81 + 8);
                char v83 = *(std::__shared_weak_count **)(v81 + 16);
                if (v83) {
                  atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                PCString v82 = 0;
                char v83 = 0;
              }
              CMTime v130 = var0;
              float Size = TXTextStyle::getSize(v82, &v130, 0.0);
              if (v83) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v83);
              }
              float CapHeight = TXTextObject::getCapHeight(*(TXTextObject **)(v58 + v54), Size);
              int v87 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 63112), MEMORY[0x1E4F1FA48], 0.0);
              double v88 = 0.0;
              if (v87
                && *(double *)(*(void *)(v40 + 888) + (v119 << 6) + 40)
                 + *(double *)(*(void *)(v40 + 888) + (v119 << 6) + 56)
                 - CapHeight > 5.0)
              {
                OZChannel::getValueAsDouble((OZChannel *)((char *)this + 63264), &var0, 0.0);
              }
              double v8 = v8 - v88;
            }
            double v84 = v112 + v113 + v114 + 0.0 - v80;
          }
          else
          {
            (*(void (**)(TXTextLayout *))(*(void *)this + 1200))(this);
          }
          double v8 = v8 - v84;
        }
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*((void *)this + 26)+ 8), (int32x4_t)xmmword_1B7E78250)))) & 1) == 0&& !*(_DWORD *)(*(void *)(v58 + v54) + 388))
        {
          int v89 = *((_DWORD *)this + 15951);
          double v8 = v8 - (*(double (**)(TXTextLayout *))(*(void *)this + 1200))(this) * (double)v89;
        }
        double v90 = v74 + v127;
        double v91 = v75 + v128;
        if (v117 == 4)
        {
          if (!v129)
          {
            double v90 = ScrollPositionInPixels + v90;
            double v92 = v75 + v128;
            double v93 = v8;
            goto LABEL_124;
          }
          double v92 = ScrollPositionInPixels + v91;
          double v72 = v8;
        }
        else
        {
          double v93 = v8 - ScrollPositionInPixels;
          if (!v129)
          {
            if (v110 && !(v119 % NumLinesInParagraphBounds))
            {
              double v8 = 0.0;
              double v92 = v75 + v128;
            }
            else
            {
              double v92 = v91 + v8;
            }
            goto LABEL_124;
          }
          double v90 = v90 + v8;
          double v72 = v8 - ScrollPositionInPixels;
          double v92 = v75 + v128;
        }
        double v93 = v75 + v128;
LABEL_124:
        TXTextObject::setPosition(*(TXTextObject **)(v58 + v54), &var0, v90, v92, v76);
        uint64_t v94 = *(void *)(v58 + v54);
        *(double *)(v94 + 168) = v90;
        *(double *)(v94 + 176) = v92;
        *(double *)(v94 + 184) = v76;
        *(double *)(v94 + 192) = v72;
        *(double *)(v94 + 200) = v93;
        *(_OWORD *)(v94 + 208) = 0u;
        *(_OWORD *)(v94 + 224) = 0u;
        int v95 = TXParagraphStyle::getAlignment((TXParagraphStyle *)v40);
        uint64_t v96 = *(void *)(v58 + v54);
        if (v95 == 1)
        {
          *(void *)(v96 + 240) = 0;
          *(void *)(v96 + 248) = 0;
        }
        else
        {
          double v57 = v70 - v137;
          double v97 = v120 - v136;
          *(double *)(v96 + 240) = v70 - v137;
          *(double *)(v96 + 248) = v97;
        }
        double v55 = v126;
        char v56 = 0;
        v54 += 16;
        ++v31;
        CFRange v53 = v63;
        if (!--v51) {
          goto LABEL_131;
        }
      }
      if (*(_DWORD *)(v52 + 24) == *(_DWORD *)(v61 + 24))
      {
        uint64_t v63 = v53;
        goto LABEL_77;
      }
LABEL_70:
      uint64_t v62 = *(void *)(v61 + 8);
      uint64_t v63 = *(std::__shared_weak_count **)(v61 + 16);
      if (v63) {
        atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_72;
    }
    uint64_t v63 = 0;
    double v121 = 0.0;
LABEL_131:
    double v34 = *(double *)(*(void *)(v40 + 888) + ((unint64_t)v121 << 6) + 8);
    double v35 = *(double *)(v40 + 920);
    if (v63) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v63);
    }
    uint64_t v36 = v107;
    uint64_t v37 = v106 + 1;
    if (v106 + 1 == v104) {
      break;
    }
    LODWORD(v119) = v119 + 1;
  }
  while (v107 != v103);
  uint64_t v98 = TXTextLayout::timeGlyphPropertiesMap(this);
  TXTimeGlyphPropertiesMap::clearPreSelectedGlyphMap(v98);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v141);
  return 0;
}

void sub_1B75F6BAC(_Unwind_Exception *a1)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v1 - 160));
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getNumLinesInParagraphBounds(TXTextLayout *this)
{
  uint64_t v1 = (char *)this + 19332;
  if (*((unsigned char *)this + 19332)) {
    return *((unsigned int *)this + 4834);
  }
  uint64_t v4 = *((void *)this + 2419);
  double v6 = *(OZChannel **)(v4 + 16);
  double v5 = *(std::__shared_weak_count **)(v4 + 24);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  var8 = (const void *)v6[3].var8;
  var9 = (std::__shared_weak_count *)v6[3].var9;
  if (var9) {
    atomic_fetch_add_explicit(&var9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!var8)
  {
    int v9 = 0;
    goto LABEL_12;
  }
  if (!v9)
  {
LABEL_12:
    double v10 = 0;
    goto LABEL_13;
  }
  if (var9)
  {
    atomic_fetch_add_explicit(&var9->__shared_owners_, 1uLL, memory_order_relaxed);
    double v10 = var9;
LABEL_13:
    std::__shared_weak_count::__release_shared[abi:ne180100](var9);
    goto LABEL_14;
  }
  double v10 = 0;
LABEL_14:
  uint64_t v11 = v9[5];
  double v12 = (CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble(v6 + 13, MEMORY[0x1E4F1FA48], 0.0);
  double v14 = v13;
  float v15 = (*(float (**)(uint64_t))(*(void *)v11 + 40))(v11);
  LODWORD(v14) = (*(float (**)(uint64_t, double))(*(void *)v11 + 48))(v11, v14);
  uint64_t v16 = **((void **)this + 2378);
  CMTime v27 = *v12;
  OZChannel::getValueAsDouble((OZChannel *)(v16 + 680), &v27, 0.0);
  double v18 = v17;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E4F1FA48], 0.0);
  double v20 = v19;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), MEMORY[0x1E4F1FA48], 0.0);
  double v22 = v15 + *(float *)&v14;
  double v23 = v22 + v18;
  if (v22 + v18 <= 0.0)
  {
    uint64_t v2 = 0xFFFFFFFFLL;
    if (v10) {
LABEL_24:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  else
  {
    double v24 = vabdd_f64(v20, v21);
    unsigned int v25 = 0;
    while (v22 < v24)
    {
      double v22 = v23 + v22;
      ++v25;
    }
    if (v25 <= 1) {
      uint64_t v2 = 1;
    }
    else {
      uint64_t v2 = v25;
    }
    char *v1 = 1;
    *((_DWORD *)v1 + 1) = v2;
    if (v10) {
      goto LABEL_24;
    }
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_1B75F6E9C(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextLayout::doLayoutForEmptyString(TXTextLayout *this)
{
  *((_DWORD *)this + 4831) = 1;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0) == 2)
  {
    uint64_t v2 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 54280), MEMORY[0x1E4F1FA48], 0.0)
       ? (TXTextLayout *)((char *)this + 53528)
       : (TXTextLayout *)((char *)this + 52640);
    if (((*(uint64_t (**)(void))(*(void *)v2 + 552))() & 1) == 0)
    {
      v13[0] = 0;
      v13[1] = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v14 = _Q0;
      TXTextLayout::initializePaths((uint64_t)this, (uint64_t)v13);
    }
  }
  (*(void (**)(TXTextLayout *, uint64_t, double))(*(void *)this + 824))(this, 1, 0.0);
  TXTextLayout::updateStringTokenizer(this);
  double v8 = (uint64_t *)*((void *)this + 2378);
  if (*((uint64_t **)this + 2379) == v8) {
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  }
  int v9 = (uint64_t *)*v8;
  if (*v8)
  {
    TXParagraphStyle::clearDirectionalRuns(*v8);
    v11[0] = 0;
    v11[1] = 0;
    char v12 = 1;
    TXParagraphStyle::pushDirectionalRun(v9, (uint64_t)v11);
  }
  return TXTextLayout::clearInvalidTextObjects(this);
}

int *TXTextLayout::getTextHashForState@<X0>(void *lpsrc@<X1>, uint64_t a2@<X0>, CMTime *a3@<X2>, int a4@<W4>, int8x8_t *a5@<X8>)
{
  if (!v32) {
    __cxa_bad_cast();
  }
  if (a4)
  {
    CMTime v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 19600), (PCSerializerWriteStream *)lpsrc, &v34);
    CMTime v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 19752), (PCSerializerWriteStream *)lpsrc, &v34);
    CMTime v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 20312), (PCSerializerWriteStream *)lpsrc, &v34);
    CMTime v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 20720), (PCSerializerWriteStream *)lpsrc, &v34);
    CMTime v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 22136), (PCSerializerWriteStream *)lpsrc, &v34);
    CMTime v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 59560), (PCSerializerWriteStream *)lpsrc, &v34);
    CMTime v34 = *a3;
    OZChannelFolder::calcHashForState((OZChannelFolder *)(a2 + 23688), (PCSerializerWriteStream *)lpsrc, &v34);
    CMTime v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 24272), (PCSerializerWriteStream *)lpsrc, &v34);
    CMTime v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 24424), (PCSerializerWriteStream *)lpsrc, &v34);
    CMTime v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 24576), (PCSerializerWriteStream *)lpsrc, &v34);
    CMTime v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 24728), (PCSerializerWriteStream *)lpsrc, &v34);
    CMTime v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 24880), (PCSerializerWriteStream *)lpsrc, &v34);
    CMTime v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 59128), (PCSerializerWriteStream *)lpsrc, &v34);
    CMTime v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 59888), (PCSerializerWriteStream *)lpsrc, &v34);
    CMTime v34 = *a3;
    OZChannel::calcHashForState((OZChannel *)(a2 + 60360), (PCSerializerWriteStream *)lpsrc, &v34);
    CMTime v34 = *a3;
    OZChannelFolder::calcHashForState((OZChannelFolder *)(a2 + 20976), (PCSerializerWriteStream *)lpsrc, &v34);
  }
  OZChannel::getValueAsInt((OZChannel *)(a2 + 20464), MEMORY[0x1E4F1FA48], 0.0);
  for (uint64_t i = *(void *)(a2 + 19352); i != a2 + 19344; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v10 = *(void *)(i + 16) + 1304;
    CMTime v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(void *)v10 + 448))(v10, lpsrc, &v34);
    uint64_t v11 = *(void *)(i + 16) + 536;
    CMTime v34 = *a3;
    (*(void (**)(uint64_t))(*(void *)v11 + 448))(v11);
    uint64_t v12 = *(void *)(i + 16) + 1696;
    CMTime v34 = *a3;
    (*(void (**)(uint64_t))(*(void *)v12 + 448))(v12);
    uint64_t v13 = *(void *)(i + 16) + 1976;
    CMTime v34 = *a3;
    (*(void (**)(uint64_t))(*(void *)v13 + 448))(v13);
    uint64_t v14 = *(void *)(i + 16) + 2256;
    CMTime v34 = *a3;
    (*(void (**)(uint64_t))(*(void *)v14 + 448))(v14);
    uint64_t v15 = *(void *)(i + 16) + 49416;
    CMTime v34 = *a3;
    (*(void (**)(uint64_t))(*(void *)v15 + 448))(v15);
    uint64_t v16 = *(void *)(i + 16) + 2408;
    CMTime v34 = *a3;
    (*(void (**)(uint64_t))(*(void *)v16 + 448))(v16);
    uint64_t v17 = *(void *)(i + 16) + 2560;
    CMTime v34 = *a3;
    (*(void (**)(uint64_t))(*(void *)v17 + 448))(v17);
    uint64_t v18 = *(void *)(i + 16) + 5352;
    CMTime v34 = *a3;
    (*(void (**)(uint64_t))(*(void *)v18 + 448))(v18);
    uint64_t v19 = *(void *)(i + 16) + 5504;
    CMTime v34 = *a3;
    (*(void (**)(uint64_t))(*(void *)v19 + 448))(v19);
    uint64_t v20 = *(void *)(i + 16) + 2864;
    CMTime v34 = *a3;
    (*(void (**)(uint64_t))(*(void *)v20 + 448))(v20);
    uint64_t v21 = *(void *)(i + 16) + 3456;
    CMTime v34 = *a3;
    (*(void (**)(uint64_t))(*(void *)v21 + 448))(v21);
    uint64_t v22 = *(void *)(i + 16) + 4344;
    CMTime v34 = *a3;
    (*(void (**)(uint64_t))(*(void *)v22 + 448))(v22);
  }
  double v23 = *(TXParagraphStyle ***)(a2 + 19024);
  double v24 = *(TXParagraphStyle ***)(a2 + 19032);
  while (v23 != v24)
  {
    unsigned int v25 = *v23++;
    uint64_t LineSpacingChannel = TXParagraphStyle::getLineSpacingChannel(v25);
    CMTime v34 = *a3;
    (*(void (**)(uint64_t, void *, CMTime *))(*(void *)LineSpacingChannel + 448))(LineSpacingChannel, lpsrc, &v34);
  }
  Hash = PCHashWriteStream::getHash((int8x8_t *)v32);
  *a5 = *Hash;
  a5[1] = Hash[1];
  uint64_t v28 = *(void *)(a2 + 1208);
  if (v28 == a2 + 1200)
  {
LABEL_14:
    (*(void (**)(void *))(*(void *)lpsrc + 40))(lpsrc);
  }
  else
  {
    while (1)
    {
      BOOL v29 = *(const void **)(v28 + 16);
      if (v29)
      {
        {
          break;
        }
      }
      uint64_t v28 = *(void *)(v28 + 8);
      if (v28 == a2 + 1200) {
        goto LABEL_14;
      }
    }
    (*(void (**)(void *))(*(void *)lpsrc + 40))(lpsrc);
    CMTime v34 = *a3;
    (*(void (**)(void))(*(void *)(a2 + 27984) + 448))();
    (*(void (**)(void *, CMTime *))(*(void *)lpsrc + 112))(lpsrc, &v34);
  }
  TXChannelString::getString((PCString *)(a2 + 19048), (PCString *)&v34);
  (*(void (**)(void *, CMTime *))(*(void *)lpsrc + 104))(lpsrc, &v34);
  PCString::~PCString((PCString *)&v34);
  OZChannel::getValueAsDouble((OZChannel *)(a2 + 61464), MEMORY[0x1E4F1FA48], 0.0);
  (*(void (**)(void *))(*(void *)lpsrc + 88))(lpsrc);
  double v30 = PCHashWriteStream::getHash((int8x8_t *)v32);
  return PCHash128::operator+=((int *)a5, (int *)v30);
}

void sub_1B75F7A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
}

uint64_t TXTextLayout::doLayoutForParagraphs(TXTextLayout *this, double a2, CMTime *a3)
{
  TXTextLayout::clearInvalidTextObjects(this);
  uint64_t v6 = *((void *)this + 2378);
  uint64_t v7 = *((void *)this + 2379);
  if (v6 != v7)
  {
    LOBYTE(v8) = 0;
    unsigned int v9 = 0;
    while (1)
    {
      if (*(unsigned char *)(*(void *)v6 + 872))
      {
        TXTextLayout::doLineLayout((PCString *)this, v9, a2, a3);
      }
      else
      {
        if ((v8 & 1) == 0)
        {
          uint64_t v8 = 0;
          goto LABEL_8;
        }
        TXTextLayout::updateTextStateInParagraph(this, v9);
      }
      uint64_t v8 = 1;
LABEL_8:
      ++v9;
      v6 += 8;
      if (v6 == v7) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v8 = 0;
LABEL_12:
  TXTextLayout::applyTypeOnToTextObjects(this, a3);
  return v8;
}

uint64_t TXTextLayout::shrinkToLeftRightMargins(TXTextLayout *this, CMTime *a2)
{
  uint64_t v4 = (uint64_t *)*((void *)this + 2378);
  double v5 = (uint64_t *)*((void *)this + 2379);
  if (v4 == v5)
  {
    double v9 = 0.0;
    double v8 = 0.0;
    double v7 = 0.0;
    double v6 = 0.0;
  }
  else
  {
    double v6 = 0.0;
    double v7 = 0.0;
    double v8 = 0.0;
    double v9 = 0.0;
    do
    {
      uint64_t v10 = *v4;
      uint64_t v11 = *(unsigned int *)(*v4 + 876);
      if (v11)
      {
        uint64_t v12 = (double *)(*(void *)(v10 + 888) + 8);
        do
        {
          double v13 = *(v12 - 1) - *v12;
          double v6 = v6 + v13;
          if (v13 > v7) {
            double v7 = *(v12 - 1) - *v12;
          }
          v12 += 8;
          --v11;
        }
        while (v11);
      }
      double v14 = *(double *)(v10 + 920);
      double v8 = v8 + v14;
      if (v14 > v9) {
        double v9 = *(double *)(v10 + 920);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  uint64_t v15 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E4F1FA48], 0.0);
  double v17 = v16;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), v15, 0.0);
  double v19 = v17 - v18;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v15, 0.0);
  int v21 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), v15, 0.0);
  if (v21) {
    double v22 = v7;
  }
  else {
    double v22 = v8;
  }
  if (v21) {
    double v23 = v6;
  }
  else {
    double v23 = v9;
  }
  if (ValueAsInt != 4) {
    double v22 = v23;
  }
  double v24 = v19 / v22;
  if (v19 / v22 >= 1.0)
  {
    __asm { FMOV            V0.2D, #1.0 }
    *((_OWORD *)this + 3851) = _Q0;
    int v31 = (TXParagraphStyle **)*((void *)this + 2378);
    BOOL v32 = (TXParagraphStyle **)*((void *)this + 2379);
    while (v31 != v32)
    {
      BOOL v33 = *v31;
      if (TXParagraphStyle::getAlignment(*v31)) {
        TXParagraphStyle::dirty(v33, 1);
      }
      ++v31;
    }
    CMTime v34 = this;
    double v35 = v19;
  }
  else
  {
    unsigned int v25 = (double *)((char *)this + 61616);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 61208), MEMORY[0x1E4F1FA48], 0.0) == 4)
    {
      *unsigned int v25 = v24;
      unsigned int v25 = (double *)((char *)this + 61624);
    }
    else if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0))
    {
      unsigned int v25 = (double *)((char *)this + 61624);
    }
    *unsigned int v25 = v24;
    TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
    double v35 = v19 + 1.0;
    CMTime v34 = this;
  }

  return TXTextLayout::doLayoutForParagraphs(v34, v35, a2);
}

uint64_t TXTextLayout::shrinkToTopBottomMargins(TXTextLayout *this, double a2, CMTime *a3)
{
  double v6 = (double *)((char *)this + 61616);
  CMTime v39 = *a3;
  double v7 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 22136), &v39, 0.0);
  double v9 = (uint64_t *)*((void *)this + 2378);
  uint64_t v10 = (uint64_t *)*((void *)this + 2379);
  if (v9 == v10)
  {
    double v14 = 0.0;
    double v13 = 0.0;
    double v12 = 0.0;
  }
  else
  {
    double v11 = v8;
    double v12 = 0.0;
    double v13 = 0.0;
    double v14 = 0.0;
    do
    {
      uint64_t v15 = *v9;
      CMTime v38 = v39;
      OZChannel::getValueAsDouble((OZChannel *)(v15 + 680), &v38, 0.0);
      double v17 = v16;
      (*(void (**)(TXTextLayout *, CMTime *))(*(void *)this + 712))(this, &v39);
      uint64_t v19 = *(unsigned int *)(v15 + 876);
      if (v19)
      {
        double v20 = (v11 + v17) * v18;
        int v21 = (double *)(*(void *)(v15 + 888) + 8);
        do
        {
          double v22 = v20 + *(v21 - 1) - *v21;
          double v12 = v12 + v22;
          if (v22 > v7) {
            double v7 = v20 + *(v21 - 1) - *v21;
          }
          v21 += 8;
          --v19;
        }
        while (v19);
      }
      double v23 = *(double *)(v15 + 920);
      double v14 = v14 + v23;
      if (v23 > v13) {
        double v13 = *(double *)(v15 + 920);
      }
      ++v9;
    }
    while (v9 != v10);
    double v9 = (uint64_t *)*((void *)this + 2379);
  }
  uint64_t v24 = *(v9 - 1);
  CMTime v37 = v39;
  OZChannel::getValueAsDouble((OZChannel *)(v24 + 680), &v37, 0.0);
  double v26 = v25;
  double v27 = (*(double (**)(TXTextLayout *, CMTime *))(*(void *)this + 712))(this, &v39);
  uint64_t v28 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E4F1FA48], 0.0);
  double v30 = v29;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), v28, 0.0);
  double v32 = v30 - v31;
  if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), v28, 0.0)) {
    ++v6;
  }
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v28, 0.0) == 4)
  {
    uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0);
    if (result) {
      double v34 = v14;
    }
    else {
      double v34 = v7;
    }
  }
  else
  {
    double v35 = v12 - v26 * v27;
    uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0);
    if (result) {
      double v34 = v13;
    }
    else {
      double v34 = v35;
    }
  }
  double v36 = v32 / v34;
  double *v6 = v36;
  if (v36 >= 1.0)
  {
    double *v6 = 1.0;
  }
  else
  {
    TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
    return TXTextLayout::doLayoutForParagraphs(this, a2, a3);
  }
  return result;
}

BOOL TXTextScrollBehavior::getComputeOffsetForPreInceptionProjects(TXTextScrollBehavior *this)
{
  return (int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 3392), MEMORY[0x1E4F1FA48], 0.0) <= 5
      && (int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 3544), MEMORY[0x1E4F1FA48], 0.0) < 7;
}

void TXTextLayout::performLayoutWithPath(TXTextLayout *this, CMTime *a2)
{
  uint64_t v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v60, v4);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0) == 2)
  {
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 54280), MEMORY[0x1E4F1FA48], 0.0)) {
      double v5 = (char *)this + 53528;
    }
    else {
      double v5 = (char *)this + 52640;
    }
    if (((*(uint64_t (**)(char *, void))(*(void *)v5 + 552))(v5, 0) & 1) == 0)
    {
      OZRenderState::OZRenderState(&v59);
      long long v6 = *(_OWORD *)&a2->value;
      v59.var0.var3 = a2->epoch;
      double v56 = 0.0;
      double v57 = 0.0;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v58 = _Q0;
      *(_OWORD *)&v59.var0.CMTime var0 = v6;
      TXTextLayout::getTypographicBounds((uint64_t)this, (uint64_t)&v56, (CMTime *)&v59, 1, 0);
      TXTextLayout::initializePaths((uint64_t)this, (uint64_t)&v56);
    }
    CMTime v55 = *a2;
    PathCFIndex Length = TXTextLayout::getPathLength(this, &v55);
    int v13 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 58144), MEMORY[0x1E4F1FA48], 0.0)
        ? TXTextLayout::isLoopPath(this)
        : 0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 57840), a2, 0.0);
    double v15 = v14;
    int v45 = (*(uint64_t (**)(TXTextLayout *))(*(void *)this + 304))(this);
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0);
    double v16 = (uint64_t *)((char *)this + 58824);
    unint64_t v17 = *((void *)this + 7354) - *((void *)this + 7353);
    memset(&v59, 0, 24);
    if ((v17 & 0xFFFFFFFF0) != 0)
    {
      uint64_t v18 = 0;
      double v19 = PathLength * v15;
      double v43 = fabs(PathLength);
      uint64_t v20 = (v17 >> 4);
      int32x2_t v21 = vdup_n_s32(ValueAsInt == 0);
      v22.i64[0] = v21.u32[0];
      v22.i64[1] = v21.u32[1];
      int8x16_t v44 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v22, 0x3FuLL)), (int8x16_t)xmmword_1B7E733E0, (int8x16_t)xmmword_1B7E733D0);
      do
      {
        uint64_t v23 = *v16;
        TXTextObject::getPosition(*(TXTextObject **)(*v16 + v18), a2, &v56);
        double v24 = v56;
        double v25 = v57;
        double v52 = 0.0;
        double v53 = 0.0;
        double v54 = 0.0;
        double v50 = 0.0;
        double v51 = 0.0;
        double v49 = 0.0;
        *(int8x16_t *)&v59.var0.CMTime var0 = v44;
        v59.var0.var3 = 0;
        int v26 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 58448), MEMORY[0x1E4F1FA48], 0.0);
        if (v13) {
          double v27 = PathLength - (v19 + v24);
        }
        else {
          double v27 = v19 + v24;
        }
        if (v13) {
          double v28 = PathLength - (v19 + 0.0 - v25);
        }
        else {
          double v28 = v19 + 0.0 - v25;
        }
        if (OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 57992), 0, 1)
          && OZChannel::getValueAsInt((OZChannel *)((char *)this + 57992), MEMORY[0x1E4F1FA48], 0.0)
          && v43 >= 0.0000001)
        {
          if (!ValueAsInt)
          {
            if (v27 <= 0.0 || v27 >= PathLength) {
              double v27 = PathLength * (v27 / PathLength - floor(v27 / PathLength));
            }
LABEL_30:
            double AdvanceWidth = TXTextObject::getAdvanceWidth(*(TXTextLayout ***)(v23 + v18), a2);
            CMTime v48 = *a2;
            TXTextLayout::getPathPosition((uint64_t)this, &v48, v13, &v52, &v51, &v50, &v49, v26 != 0, v27, AdvanceWidth, (int)&v59);
            double v35 = v52;
            __double2 v36 = __sincos_stret(v49);
            double v33 = v35 - v25 * v36.__sinval;
            double v32 = v53 + v25 * v36.__cosval;
            goto LABEL_31;
          }
          if (v28 <= 0.0 || v28 >= PathLength) {
            double v28 = PathLength * (v28 / PathLength - floor(v28 / PathLength));
          }
        }
        else if (!ValueAsInt)
        {
          goto LABEL_30;
        }
        double v29 = TXTextObject::getAdvanceWidth(*(TXTextLayout ***)(v23 + v18), a2);
        CMTime v47 = *a2;
        TXTextLayout::getPathPosition((uint64_t)this, &v47, v13, &v52, &v51, &v50, &v49, v26 != 0, v28, v29, (int)&v59);
        double v30 = v53;
        __double2 v31 = __sincos_stret(v49);
        double v32 = v30 + v24 * v31.__sinval;
        double v33 = v52 + v24 * v31.__cosval;
LABEL_31:
        if (v45) {
          double v37 = 0.0;
        }
        else {
          double v37 = v54;
        }
        BOOL v38 = TXTextLayout::alignToPath(this);
        double v40 = v50;
        double v39 = v51;
        double v41 = v49;
        if (!v38)
        {
          double v39 = 0.0;
          double v40 = 0.0;
          double v41 = 0.0;
        }
        TXTextObject::setPathRotation(*(TXTextObject **)(v23 + v18), a2, v39, v40, v41);
        TXTextObject::setPosition(*(TXTextObject **)(v23 + v18), a2, v33, v32, v37);
        double v42 = *(double **)(v23 + v18);
        v42[21] = v33;
        v42[22] = v32;
        v42[23] = v37;
        v18 += 16;
        --v20;
      }
      while (v20);
    }
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v60);
}

void sub_1B75F8588(_Unwind_Exception *a1)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v1 - 160));
  _Unwind_Resume(a1);
}

double TXTextLayout::getPathLength(TXTextLayout *this, CMTime *a2)
{
  double v4 = 0.0;
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 54280), MEMORY[0x1E4F1FA48], 0.0))
  {
    case 0u:
      uint64_t v5 = 52504;
      goto LABEL_4;
    case 1u:
      uint64_t v5 = 53392;
LABEL_4:
      long long v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
      return OZChannelPosition3D::getLength((os_unfair_lock_s *)((char *)this + v5), v6);
    case 2u:
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 54928), a2, 0.0);
      double v9 = fabs(v8);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 55080), a2, 0.0);
      double v11 = fabs(v10);
      if (v9 >= 0.001) {
        double v12 = v9;
      }
      else {
        double v12 = 0.001;
      }
      if (v11 < 0.001) {
        double v11 = 0.001;
      }
      return PCEvaluator::findLengthOfEllipse((TXTextLayout *)((char *)this + 58600), v12, v11, 0.0, 0.0);
    case 3u:
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 55368), a2, 0.0);
      double v14 = fabs(v13);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 55520), a2, 0.0);
      double v16 = fabs(v15);
      double v17 = v16 + v16;
      BOOL v18 = v16 < 0.001;
      double v19 = 0.002;
      if (v18) {
        double v17 = 0.002;
      }
      if (v14 >= 0.001) {
        double v19 = v14 + v14;
      }
      return v19 + v17;
    case 4u:
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 56512), a2, 0.0);
      double v21 = v20;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 56664), a2, 0.0);
      double v23 = v22;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 57080), a2, 0.0);
      double v25 = v24;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 57232), a2, 0.0);
      double v27 = v26;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 57384), a2, 0.0);
      double v29 = v28;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 57536), a2, 0.0);
      return PCEvaluator::findLengthOfSineWave((os_unfair_lock_s *)this + 14650, v25, v27, v29, v30, v21, v23, 400);
    default:
      return v4;
  }
}

uint64_t TXTextLayout::isLoopPath(TXTextLayout *this)
{
  uint64_t v1 = (OZChannel *)((char *)this + 54280);
  uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 54280), MEMORY[0x1E4F1FA48], 0.0);
  if (result) {
    return OZChannel::getValueAsInt(v1, MEMORY[0x1E4F1FA48], 0.0) != 4;
  }
  return result;
}

uint64_t TXTextLayout::getPathPosition(uint64_t a1, const CMTime *a2, int a3, double *a4, void *a5, void *a6, double *a7, int a8, double a9, double a10, int a11)
{
  double v136 = 0.0;
  v137[0] = 0.0;
  Float64 v134 = 0.0;
  double v135 = 0.0;
  double v21 = a10 * 0.5;
  double v22 = 0.0;
  if (TXTextLayout::alignToPath((TXTextLayout *)a1)) {
    double v23 = a10 * 0.5;
  }
  else {
    double v23 = 0.0;
  }
  double v111 = v23;
  if (!OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E4F1FA48], 0.0))
  {
    OZChannelPosition3D::getPositionOnPath((OZChannelPosition3D *)(a1 + 52504), a2, v21 + a9, v137, &v136, &v135, 0, 0, 0, &v134);
    double v111 = a10 * 0.5;
LABEL_11:
    double v25 = 0.0;
    goto LABEL_12;
  }
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E4F1FA48], 0.0) == 1)
  {
    if (TXTextLayout::alignToPath((TXTextLayout *)a1)) {
      double v24 = 0.0;
    }
    else {
      double v24 = a10 * 0.5;
    }
    double v111 = v24;
    OZChannelPosition3D::getPositionOnPath((OZChannelPosition3D *)(a1 + 53392), a2, v24 + a9, v137, &v136, &v135, 0, 0, 0, &v134);
    goto LABEL_11;
  }
  double v30 = 0.0;
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E4F1FA48], 0.0) == 2)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 54928), a2, 0.0);
    double v32 = fabs(v31);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 55080), a2, 0.0);
    double v34 = fabs(v33);
    if (v32 < 0.001) {
      double v32 = 0.001;
    }
    if (v34 >= 0.001) {
      double v35 = v34;
    }
    else {
      double v35 = 0.001;
    }
    double v36 = sqrt((v32 * v32 + v35 * v35) * 0.5) * 6.28318531;
    if (fabs(v36) >= 0.0000001)
    {
      double v37 = -v111;
      if (!a3) {
        double v37 = v111;
      }
      double v30 = (v37 + a9) / v36;
    }
    double v38 = 0.0;
    BOOL v39 = v30 > 1.0 || v30 < 0.0;
    double v40 = floor(v30);
    if (v39) {
      double v38 = v40;
    }
    double v41 = v30 - v38;
    v117.value = 0;
    v112[0].value = 0;
    double v132 = 0.0;
    double v133 = 0.0;
    PCEvaluator::findPointOnEllipse((PCEvaluator *)(a1 + 58600), v41, v32, v35, 0.0, 0.0, v137, &v136, 0);
    PCEvaluator::findPointOnEllipse((PCEvaluator *)(a1 + 58600), v41 + -0.01, v32, v35, 0.0, 0.0, (double *)&v117.value, &v133, 0);
    PCEvaluator::findPointOnEllipse((PCEvaluator *)(a1 + 58600), v41 + 0.01, v32, v35, 0.0, 0.0, (double *)&v112[0].value, &v132, 0);
    v137[0] = v32 + v137[0];
    double v42 = sqrt((*(double *)&v112[0].value - *(double *)&v117.value) * (*(double *)&v112[0].value - *(double *)&v117.value)+ (v132 - v133) * (v132 - v133));
    double v25 = -(v132 - v133) / v42;
    double v22 = (*(double *)&v112[0].value - *(double *)&v117.value) / v42;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 54928), a2, 0.0);
    if (v43 < 0.0)
    {
      v137[0] = -v137[0];
      double v25 = -v25;
    }
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 55080), a2, 0.0);
    BOOL v45 = v44 < 0.0;
    if (v44 >= 0.0) {
      double v46 = v136;
    }
    else {
      double v46 = -v136;
    }
    if (v45) {
      double v22 = -v22;
    }
    double v47 = -v25;
    double v48 = -v22;
    if (a3) {
      double v47 = v25;
    }
    else {
      double v48 = v22;
    }
    double v136 = v46 - v111 * v47;
    v137[0] = v137[0] - v111 * v48;
    goto LABEL_12;
  }
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E4F1FA48], 0.0) == 3)
  {
    int v109 = a8;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 55368), a2, 0.0);
    double v54 = fabs(v53);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 55520), a2, 0.0);
    double v56 = fabs(v55);
    double v57 = v54 + v54;
    double v58 = v54 + v54 + v56 + v56;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 55520), a2, 0.0);
    BOOL v60 = v59 >= 0.0;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 55368), a2, 0.0);
    BOOL v62 = v61 < 0.0;
    BOOL v63 = TXTextLayout::alignToPath((TXTextLayout *)a1);
    double v64 = -a10;
    if (!a3) {
      double v64 = a10;
    }
    if (!v63) {
      double v64 = 0.0;
    }
    if (v58 < 0.0000001) {
      a9 = 0.0;
    }
    if (a9 < 0.0 || a9 > v58) {
      a9 = v58 * (a9 / v58 - floor(a9 / v58));
    }
    char v66 = v60 ^ v62;
    double v67 = -v111;
    if (!a3) {
      double v67 = v111;
    }
    double v68 = v67 + a9;
    double v69 = v56 * 0.5;
    if (v68 <= v56 * 0.5)
    {
      v137[0] = 0.0;
      double v136 = a9;
      double v25 = -1.0;
      double v54 = 0.0;
      if ((v60 ^ v62))
      {
        double v69 = a9;
      }
      else
      {
        double v69 = v64 + a9;
        double v136 = v64 + a9;
      }
      double v22 = 0.0;
    }
    else if (v68 <= v54 + v69)
    {
      double v54 = a9 - v69;
      double v136 = v56 * 0.5;
      v137[0] = a9 - v69;
      double v25 = 0.0;
      double v22 = 1.0;
      if (((v60 ^ v62) & 1) == 0)
      {
        double v54 = v64 + v54;
        v137[0] = v54;
      }
    }
    else
    {
      double v70 = v56 * 3.0 * 0.5;
      if (v68 > v54 + v70)
      {
        if (v68 <= v57 + v70)
        {
          double v54 = v54 + v70 - (a9 - v54);
          double v69 = v56 * -0.5;
          double v136 = v56 * -0.5;
          v137[0] = v54;
          double v25 = 0.0;
          double v22 = -1.0;
          a8 = v109;
          uint64_t v71 = (OZChannel *)(a1 + 55520);
          if ((v66 & 1) == 0)
          {
            double v54 = v54 - v64;
            v137[0] = v54;
          }
        }
        else
        {
          v137[0] = 0.0;
          double v69 = a9 - (v57 + v70) - v69;
          double v136 = v69;
          double v25 = -1.0;
          double v54 = 0.0;
          a8 = v109;
          uint64_t v71 = (OZChannel *)(a1 + 55520);
          if ((v66 & 1) == 0)
          {
            double v69 = v64 + v69;
            double v136 = v69;
          }
          double v22 = 0.0;
        }
        goto LABEL_94;
      }
      double v69 = v69 - (a9 - v54 - v69);
      double v136 = v69;
      v137[0] = v54;
      double v25 = 1.0;
      double v22 = 0.0;
      if (((v60 ^ v62) & 1) == 0)
      {
        double v69 = v69 - v64;
        double v136 = v69;
      }
    }
    a8 = v109;
    uint64_t v71 = (OZChannel *)(a1 + 55520);
LABEL_94:
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 55368), a2, 0.0);
    if (v100 < 0.0)
    {
      v137[0] = -v54;
      double v25 = -v25;
    }
    OZChannel::getValueAsDouble(v71, a2, 0.0);
    if (v101 < 0.0)
    {
      double v136 = -v69;
      double v22 = -v22;
    }
    goto LABEL_12;
  }
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E4F1FA48], 0.0) != 4)
  {
    OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E4F1FA48], 0.0);
    goto LABEL_11;
  }
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 55808), a2, 0.0);
  double v74 = v73;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 55960), a2, 0.0);
  double v76 = v75;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 56512), a2, 0.0);
  double v78 = v77;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 56664), a2, 0.0);
  double v105 = v76;
  double v106 = v74;
  double v79 = v78 - v74;
  double v81 = v80 - v76;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 57080), a2, 0.0);
  double v110 = v82;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 57232), a2, 0.0);
  double v84 = v83;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 57384), a2, 0.0);
  double v86 = v85;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 57536), a2, 0.0);
  double v87 = sqrt(v79 * v79 + v81 * v81);
  double v104 = v84;
  double v108 = v88;
  double v89 = (v111 + a9)
      / PCEvaluator::findLengthOfSineWave((os_unfair_lock_s *)(a1 + 58600), v110, v84, v86, v88, v79, v81, 400);
  BOOL v90 = v89 > 1.0 || v89 < 0.0;
  double v91 = floor(v89);
  double v107 = 0.0;
  if (!v90) {
    double v91 = 0.0;
  }
  double v103 = v91;
  double v92 = v89 - v91;
  v117.value = 0;
  v112[0].value = 0;
  double v93 = 0.0;
  if (v87 > 0.0)
  {
    double v107 = -v81 / v87;
    double v93 = v79 / v87;
  }
  double v102 = v93;
  double v132 = 0.0;
  double v133 = 0.0;
  double v130 = 0.0;
  double v131 = 0.0;
  PCEvaluator::findPointOnSineWave((os_unfair_lock_s *)(a1 + 58600), v92, v110, v104, v86, v108, v79, v81, 400, (double *)&v117.value, (double *)&v112[0].value);
  PCEvaluator::findPointOnSineWave((os_unfair_lock_s *)(a1 + 58600), v92 + -0.0025, v110, v104, v86, v108, v79, v81, 400, &v133, &v131);
  PCEvaluator::findPointOnSineWave((os_unfair_lock_s *)(a1 + 58600), v92 + 0.0025, v110, v104, v86, v108, v79, v81, 400, &v132, &v130);
  double v94 = v74 + v79 * v132 + v107 * v130 - (v74 + v79 * v133 + v107 * v131);
  double v95 = v105 + v81 * v132 + v102 * v130 - (v105 + v81 * v133 + v102 * v131);
  double v96 = -v95;
  double v97 = sqrt(v95 * v95 + v94 * v94);
  double v25 = v96 / v97;
  double v22 = v94 / v97;
  double v98 = -(v96 / v97);
  double v99 = -v22;
  if (a3) {
    double v98 = v25;
  }
  else {
    double v99 = v22;
  }
  double v136 = v102 * *(double *)&v112[0].value + v105 + v81 * (v103 + *(double *)&v117.value) - v111 * v98;
  v137[0] = v107 * *(double *)&v112[0].value + v106 + v79 * (v103 + *(double *)&v117.value) - v111 * v99;
LABEL_12:
  uint64_t result = OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E4F1FA48], 0.0);
  if (result != 5)
  {
    double v27 = v136;
    double v28 = v135;
    *a4 = v137[0];
    a4[1] = v27;
    a4[2] = v28;
    if (OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E4F1FA48], 0.0))
    {
      unint64_t v29 = 0;
      if (OZChannel::getValueAsInt((OZChannel *)(a1 + 54280), MEMORY[0x1E4F1FA48], 0.0) == 1)
      {
        OZFigTimeForChannelSeconds(&v117, v134, 0x40000);
        OZChannelPosition3D::getOrientations((OZChannelPosition3D *)(a1 + 53392), &v117, a5, a6, a7, 0, a8, a11, v21 + a9, a3);
      }
      else
      {
        double v51 = -v25;
        if (a3)
        {
          double v22 = -v22;
          unint64_t v29 = 0x8000000000000000;
          double v52 = v25;
        }
        else
        {
          double v52 = -v25;
          double v51 = v25;
        }
        *(double *)&v117.value = v22;
        *(double *)&v117.timescale = v51;
        double v119 = v52;
        double v120 = v22;
        unint64_t v123 = v29;
        unint64_t v124 = v29;
        uint64_t v127 = 0;
        uint64_t v128 = 0;
        v117.epoch = 0;
        uint64_t v118 = 0;
        uint64_t v121 = 0;
        uint64_t v122 = 0;
        uint64_t v125 = 0x3FF0000000000000;
        uint64_t v126 = 0;
        long long v129 = xmmword_1B7E733E0;
        memset(v112, 0, sizeof(v112));
        int v113 = 4;
        long long v114 = 0u;
        long long v115 = 0u;
        uint64_t v116 = 0;
        PCMatrix44Tmpl<double>::getTransformation((long long *)&v117.value, (uint64_t)v112);
        uint64_t v72 = *((void *)&v114 + 1);
        *a5 = v114;
        *a6 = v72;
        *(void *)a7 = v115;
      }
      uint64_t result = OZChannel::getValueAsInt((OZChannel *)(a1 + 20720), MEMORY[0x1E4F1FA48], 0.0);
      if (result) {
        *a7 = *a7 + 1.57079633;
      }
    }
    else
    {
      uint64_t result = TXTextLayout::alignToPath((TXTextLayout *)a1);
      if (result)
      {
        memset(&v117, 0, sizeof(v117));
        OZFigTimeForChannelSeconds(v112, v134, 0x40000);
        OZChannelPosition3D::getOrientations((OZChannelPosition3D *)(a1 + 52504), v112, a5, a6, a7, (uint64_t)&v117, a8, a11, v111 + a9, a3);
        uint64_t result = OZChannel::getValueAsInt((OZChannel *)(a1 + 20720), MEMORY[0x1E4F1FA48], 0.0);
        if (result) {
          *a7 = *a7 + 1.57079633;
        }
        v49.f64[0] = v137[0];
        double v50 = v135 - v111 * *(double *)&v117.epoch;
        v49.f64[1] = v136;
        *(float64x2_t *)a4 = vsubq_f64(v49, vmulq_n_f64(*(float64x2_t *)&v117.value, v111));
        a4[2] = v50;
      }
    }
  }
  return result;
}

uint64_t **TXTextLayout::applyTypeOnToTextObjects(TXTextLayout *this, CMTime *a2)
{
  double v4 = (OZChannel *)((char *)this + 20464);
  uint64_t result = (uint64_t **)OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0);
  if (result != 3)
  {
    uint64_t result = (uint64_t **)OZChannel::getValueAsInt(v4, MEMORY[0x1E4F1FA48], 0.0);
    if (result != 4)
    {
      long long v6 = (uint64_t *)*((void *)this + 7353);
      double v7 = (uint64_t *)*((void *)this + 7354);
      while (v6 != v7)
      {
        unsigned int v8 = *(_DWORD *)(*v6 + 96);
        CMTime v13 = *a2;
        double v9 = TXTextLayout::computeTypeOnFactor(this, v8, &v13);
        uint64_t v10 = *v6;
        v6 += 2;
        unsigned int v11 = *(_DWORD *)(v10 + 96);
        double v12 = (TXTimeGlyphPropertiesMap *)TXTextLayout::timeGlyphPropertiesMap(this);
        uint64_t result = TXTimeGlyphPropertiesMap::setTypeOn(v12, v9, v11, a2);
      }
    }
  }
  return result;
}

double TXTextLayout::computeTypeOnFactor(TXTextLayout *this, unsigned int a2, CMTime *a3)
{
  ComposedCharacterCFIndex Count = TXTextLayout::getComposedCharacterCount(this);
  double v7 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 23816), a3, 0.0);
  double v8 = (double)ComposedCharacterCount;
  double v10 = v9 * (double)ComposedCharacterCount;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 23968), a3, 0.0);
  double v12 = v11;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 24120), a3, 0.0);
  double v14 = (double)a2;
  if (floor(v10 + 0.0000001) <= (double)a2)
  {
    double v15 = ceil(v10);
    if (v15 <= v14)
    {
      double v16 = v12 * v8;
      double v17 = floor(v12 * v8 + 0.0000001);
      double v7 = 1.0;
      if (v17 <= v14)
      {
        double v18 = ceil(v16);
        double v19 = v16 - v17;
        if (!ValueAsInt) {
          double v19 = 1.0;
        }
        if (v18 > v14) {
          return v19;
        }
        else {
          return 0.0;
        }
      }
    }
    else if (ValueAsInt)
    {
      return v15 - v10;
    }
    else
    {
      return 0.0;
    }
  }
  return v7;
}

uint64_t TXTextLayout::hitCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 472))(a1, a2, a3, a4, a5, a6, 1, 0);
}

uint64_t non-virtual thunk to'TXTextLayout::hitCheck(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 200) + 472))();
}

PCString *TXTextLayout::hitCheckWithTransform(uint64_t a1, float32x2_t *a2, OZRenderState *a3, const LiCamera *a4, double *a5, unsigned int a6, int a7, double *a8)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  if (a6 & 4) != 0 && ((*(uint64_t (**)(void))(*(void *)(a1 + 200) + 680))()) {
    return 0;
  }
  if ((a6 & 2) != 0)
  {
    long long v102 = *(_OWORD *)&a3->var0.var0;
    int64_t var3 = a3->var0.var3;
    if (!(*(unsigned int (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 216) + 104))(a1 + 216, &v102, 1, 1, 1))return 0; {
  }
    }
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v101);
  TXTextLayout::doLayout((TXTextLayout *)a1, a3, (PCHash128 *)v101);
  if ((a6 & 8) != 0) {
    double v14 = (double)HIBYTE(a6);
  }
  else {
    double v14 = 0.0;
  }
  uint64_t v15 = a1 + 200;
  if (((*(unsigned int (**)(uint64_t))(*(void *)(a1 + 200) + 680))(a1 + 200) & a7) == 1)
  {
    v96[2] = xmmword_1B7E736F0;
    v96[1] = xmmword_1B7E736F0;
    v96[0] = xmmword_1B7E736F0;
    (*(void (**)(uint64_t, long long *, OZRenderState *))(*(void *)a1 + 440))(a1, v96, a3);
    float64x2_t v99 = vcvtq_f64_f32(*a2);
    uint64_t v100 = 0;
    (*(void (**)(long long *__return_ptr, uint64_t, float64x2_t *, const LiCamera *, OZRenderState *, void))(*(void *)v15 + 1384))(v94, a1 + 200, &v99, a4, a3, 0);
    if (!PCRayIntersectsBox((double *)v94, (double *)v96, a5)) {
      return 0;
    }
    return (PCString *)v15;
  }
  double v16 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 272))(a1 + 200);
  OZScene::calcWorldToFilmSpaceMatrixForCamera(v16, a4, &v99);
  double v55 = a5;
  double v17 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 272))(a1 + 200);
  OZScene::calcWorldToFilmSpaceMatrixForCamera(v17, a4, v96);
  unint64_t v18 = 0;
  double v19 = (TXTextObject ***)(a1 + 58824);
  do
  {
    double v20 = (_OWORD *)&v99.f64[v18 / 8];
    long long v21 = v96[v18 / 0x10 + 1];
    _OWORD *v20 = v96[v18 / 0x10];
    v20[1] = v21;
    v18 += 32;
  }
  while (v18 != 128);
  double v22 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v98, v22);
  OZRenderParams::OZRenderParams((OZRenderParams *)v96);
  OZRenderParams::setState((OZRenderParams *)v96, a3);
  int v97 = 0;
  OZRenderParams::OZRenderParams((OZRenderParams *)v94, (const OZRenderParams *)v96);
  int v95 = 1;
  uint64_t v93 = 0x3FF0000000000000;
  uint64_t v90 = 0x3FF0000000000000;
  uint64_t v87 = 0x3FF0000000000000;
  uint64_t v84 = 0x3FF0000000000000;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  if (!a8) {
    (*(void (**)(uint64_t, uint64_t *, OZRenderState *))(*(void *)v15 + 1256))(a1 + 200, &v84, a3);
  }
  CMTime var0 = (CMTime)a3->var0;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 59888), &var0, 0.0);
  double v24 = v23;
  CMTime v82 = (CMTime)a3->var0;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 60360), &v82, 0.0);
  double v26 = v25;
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  int v61 = OZHostApplicationDelegateHandler::wantsToIgnoreTextBoundsOfTransparentObjects(HostApplicationDelegate);
  double v56 = a4;
  uint64_t v57 = a1 + 200;
  double v28 = *v19;
  double v58 = (PCString *)a1;
  double v59 = *(TXTextObject ***)(a1 + 58832);
  if (*v19 != v59)
  {
    char v29 = 0;
    while (1)
    {
      int v30 = 0;
      memset(v81, 0, sizeof(v81));
      float64x2_t v80 = 0u;
      memset(v79, 0, sizeof(v79));
      do
      {
        double v31 = *v28;
        uint64_t v32 = *((void *)*v28 + 33);
        if (v32)
        {
          uint64_t v33 = *(void *)(v32 + 8);
          double v34 = *(std::__shared_weak_count **)(v32 + 16);
          if (v34)
          {
            atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
            double v31 = *v28;
          }
        }
        else
        {
          double v34 = 0;
          uint64_t v33 = 0;
        }
        CMTime v78 = (CMTime)a3->var0;
        if (!TXTextObject::isAttributeEnabled(v31, v30, &v78)
          || v61
          && (double FaceOpacity = TXTextObject::getFaceOpacity(*v28, (CMTime *)a3), !a3->var25)
          && FaceOpacity > -0.0000001
          && FaceOpacity < 0.0000001)
        {
          int v50 = 6;
          if (!v34) {
            goto LABEL_51;
          }
LABEL_50:
          std::__shared_weak_count::__release_shared[abi:ne180100](v34);
          goto LABEL_51;
        }
        if (a8)
        {
          uint64_t v110 = 0x3FF0000000000000;
          uint64_t v107 = 0x3FF0000000000000;
          *((void *)&v104[2] + 1) = 0x3FF0000000000000;
          *(void *)&v104[0] = 0x3FF0000000000000;
          memset((char *)v104 + 8, 0, 32);
          long long v105 = 0u;
          long long v106 = 0u;
          long long v108 = 0u;
          long long v109 = 0u;
          TXTextObject::getTransformMatrix((uint64_t)*v28, (uint64_t)v104, v94, 1, 0, 0, 1, v26, v24);
          PCMatrix44Tmpl<double>::leftMult((uint64_t)v104, a8);
          float64x2_t v77 = 0uLL;
          float64x2_t v76 = 0uLL;
          float64x2_t v75 = 0uLL;
          float64x2_t v74 = 0uLL;
          TXTextObject::getFourCornerPointsInObjectSpaceForAttribute((uint64_t)*v28, a3, &v77, &v76, &v75, &v74, v30, 1, 0.0, 0.0, 0.0, 0.0, 1u, 0);
          uint64_t v73 = 0;
          OZChannelBase::setRangeName((OZChannelBase *)*v28, (const PCString *)a3);
          float64x2_t v71 = v74;
          uint64_t v72 = v73;
          float64x2_t v69 = v75;
          uint64_t v70 = v73;
          float64x2_t v67 = v77;
          uint64_t v68 = v73;
          float64x2_t v65 = v76;
          uint64_t v66 = v73;
          PCMatrix44Tmpl<double>::transform<double>((double *)v104, v71.f64, v71.f64);
          PCMatrix44Tmpl<double>::transform<double>((double *)v104, v69.f64, v69.f64);
          PCMatrix44Tmpl<double>::transform<double>((double *)v104, v67.f64, v67.f64);
          PCMatrix44Tmpl<double>::transform<double>((double *)v104, v65.f64, v65.f64);
          *(float64x2_t *)((char *)v81 + 8) = v71;
          *((void *)&v81[1] + 1) = v72;
          float64x2_t v80 = v69;
          *(void *)&v81[0] = v70;
          *(float64x2_t *)((char *)&v79[1] + 8) = v65;
          *((void *)&v79[2] + 1) = v66;
          *(void *)&v79[1] = v68;
          v79[0] = v67;
        }
        else
        {
          TXTextObject::getTransformedImageCornersWithFourCornerPinning((uint64_t)*v28, v96, (uint64_t)v79, v30, v26, v24, 1, 0, (uint64_t)&v84);
        }
        uint64_t v36 = 0;
        long long v106 = 0u;
        long long v105 = 0u;
        double v37 = (double *)v79;
        memset(v104, 0, sizeof(v104));
        do
        {
          float64x2_t v71 = 0uLL;
          uint64_t v72 = 0;
          PCMatrix44Tmpl<double>::transform<double>(v99.f64, v37, v71.f64);
          if ((v36 - 1) < 2) {
            int v38 = 1;
          }
          else {
            int v38 = -1;
          }
          if ((v36 & 0x7FFFFFFE) == 2) {
            double v39 = v14;
          }
          else {
            double v39 = -v14;
          }
          v40.f64[1] = v39;
          v40.f64[0] = v14 * (double)v38;
          v104[v36++] = vaddq_f64(v40, v71);
          v37 += 3;
        }
        while (v36 != 4);
        long long v106 = v104[0];
        if (v30 == 3 && OZChannel::getValueAsInt((OZChannel *)(v33 + 19528), MEMORY[0x1E4F1FA48], 0.0))
        {
          double v41 = *v28;
          CMTime v64 = (CMTime)a3->var0;
          double DropShadowDistance = TXTextObject::getDropShadowDistance(v41, &v64);
          double v43 = *v28;
          CMTime v63 = (CMTime)a3->var0;
          double DropShadowAngle = TXTextObject::getDropShadowAngle(v43, &v63);
          __double2 v45 = __sincos_stret(DropShadowAngle);
          for (uint64_t i = 0; i != 5; ++i)
          {
            double v47 = (double *)&v104[i];
            double v48 = DropShadowDistance * v45.__sinval + *((double *)&v104[i] + 1);
            *double v47 = DropShadowDistance * v45.__cosval + *(double *)&v104[i];
            v47[1] = v48;
          }
        }
        float64x2_t v71 = vcvtq_f64_f32(*a2);
        int v49 = pointInPolygon(v71.f64, (uint64_t)v104, 5);
        v29 |= v49;
        if (v49) {
          int v50 = 4;
        }
        else {
          int v50 = 0;
        }
        if (v34) {
          goto LABEL_50;
        }
LABEL_51:
        if (v50 != 6 && v50) {
          break;
        }
        ++v30;
      }
      while (v30 != 4);
      v28 += 2;
      if (v28 == v59) {
        goto LABEL_57;
      }
    }
  }
  char v29 = 0;
LABEL_57:
  uint64_t v15 = v57;
  double v51 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v57 + 272))(v57);
  if ((OZChannelBase::isObjectRef(v51) != 1) | v29 & 1) {
    goto LABEL_62;
  }
  StringPtr = TXChannelString::getStringPtr((TXChannelString *)&v58[2381]);
  if (PCString::size((PCString *)StringPtr))
  {
    if (!TXTextLayout::isAllWhitespace(v58)) {
      goto LABEL_62;
    }
  }
  v104[2] = xmmword_1B7E736F0;
  v104[1] = xmmword_1B7E736F0;
  v104[0] = xmmword_1B7E736F0;
  TXTextLayout::getLocalVolumeForHitCheck(v58, (uint64_t)v104, (uint64_t)a3);
  float64x2_t v71 = vcvtq_f64_f32(*a2);
  uint64_t v72 = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, float64x2_t *, const LiCamera *, OZRenderState *, void))(*(void *)v57 + 1384))(v79, v57, &v71, v56, a3, 0);
  if (!PCRayIntersectsBox((double *)v79, (double *)v104, v55))
  {
LABEL_62:
    OZRenderParams::~OZRenderParams((OZRenderParams *)v94);
    OZRenderParams::~OZRenderParams((OZRenderParams *)v96);
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v98);
    if (v29) {
      double v53 = v58;
    }
    else {
      double v53 = 0;
    }
    if (v53) {
      return v53 + 25;
    }
    else {
      return 0;
    }
  }
  else
  {
    OZRenderParams::~OZRenderParams((OZRenderParams *)v94);
    OZRenderParams::~OZRenderParams((OZRenderParams *)v96);
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v98);
  }
  return (PCString *)v15;
}

void sub_1B75FA068(_Unwind_Exception *a1)
{
}

void *TXTextLayout::didAddToScene(TXTextLayout *this, OZScene *a2)
{
  OZTransformNode::didAddToScene((OZTransformNode *)((char *)this + 200), a2);
  uint64_t result = OZDocument::addCPPObserver(*((void *)a2 + 198), (uint64_t)this + 18976, 1001);
  for (uint64_t i = *((void *)this + 2419); (TXTextLayout *)i != (TXTextLayout *)((char *)this + 19344); uint64_t i = *(void *)(i + 8))
  {
    uint64_t v6 = *(void *)(i + 16);
    if (v6) {
      double v7 = (OZObjectManipulator *)(v6 + 16);
    }
    else {
      double v7 = 0;
    }
    OZScene::registerObject(a2, v7);
    OZScene::addNodeDependency((uint64_t)a2, *(_DWORD *)(*(void *)(i + 16) + 96), *((_DWORD *)this + 70));
    uint64_t result = OZStyle::registerAllMaterials(*(OZScene **)(i + 16));
  }
  return result;
}

void *non-virtual thunk to'TXTextLayout::didAddToScene(TXTextLayout *this, OZScene *a2)
{
  return TXTextLayout::didAddToScene((TXTextLayout *)((char *)this - 200), a2);
}

OZLockingElement *TXTextLayout::willRemoveFromScene(OZLockingElement *this, OZScene *a2)
{
  if (a2)
  {
    uint64_t v3 = this;
    double v4 = (void *)((char *)this + 19344);
    for (uint64_t i = *((void *)this + 2419); (void *)i != v4; uint64_t i = *(void *)(i + 8))
    {
      OZStyle::unregisterAllMaterials(*(OZStyle **)(i + 16));
      uint64_t v6 = *(void *)(i + 16);
      if (v6) {
        double v7 = (OZObjectManipulator *)(v6 + 16);
      }
      else {
        double v7 = 0;
      }
      OZScene::unregisterObject(a2, v7);
      OZScene::removeAllDependencies(a2, *(_DWORD *)(*(void *)(i + 16) + 96));
    }
    OZLockingElement::willRemoveFromScene(v3, a2);
    uint64_t v8 = *((void *)a2 + 198);
    return (OZLockingElement *)OZDocument::removeCPPObserver(v8);
  }
  return this;
}

OZLockingElement *non-virtual thunk to'TXTextLayout::willRemoveFromScene(TXTextLayout *this, OZScene *a2)
{
  return TXTextLayout::willRemoveFromScene((TXTextLayout *)((char *)this - 200), a2);
}

void *non-virtual thunk to'TXTextLayout::willDeleteFromScene(TXTextLayout *this, OZScene *a2)
{
  return TXTextLayout::clearStyleRuns((TXTextLayout *)((char *)this - 200));
}

BOOL TXTextLayout::addEffect(TXTextLayout *this, OZEffect *a2, OZEffect *a3)
{
  return OZSceneNode::addEffect((TXTextLayout *)((char *)this + 200), a2, a3);
}

BOOL TXTextLayout::insertEffectAfter(TXTextLayout *this, OZEffect *a2, OZEffect *a3)
{
  return OZSceneNode::insertEffectAfter((TXTextLayout *)((char *)this + 200), a2, a3);
}

void TXTextLayout::setName(TXTextLayout *this, PCString *a2, int a3)
{
  if (PCString::size(a2) < 0x1F)
  {
    OZObjectManipulator::setName((TXTextLayout *)((char *)this + 216), a2, a3);
  }
  else
  {
    PCString::substrTo(a2, 30, (CFStringRef *)&v6.var0);
    OZObjectManipulator::setName((TXTextLayout *)((char *)this + 216), &v6, a3);
    PCString::~PCString(&v6);
  }
  *((unsigned char *)this + 52362) = 1;
}

void sub_1B75FA314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void non-virtual thunk to'TXTextLayout::setName(TXTextLayout *this, PCString *a2, int a3)
{
}

__n128 TXTextLayout::getNaturalDuration@<Q0>(TXTextLayout *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = (char *)this + 200;
  if ((*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200))
  {
    double v4 = (OZSceneSettings *)((*(uint64_t (**)(char *))(*(void *)v3 + 272))(v3) + 336);
    result.n128_u64[0] = OZSceneSettings::getFrameDuration(v4, a2).n128_u64[0];
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *a2 = *(__n128 *)MEMORY[0x1E4F1FA48];
    a2[1].n128_u64[0] = *(void *)(v6 + 16);
  }
  return result;
}

double non-virtual thunk to'TXTextLayout::getNaturalDuration@<D0>(TXTextLayout *this@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = TXTextLayout::getNaturalDuration((TXTextLayout *)((char *)this - 216), a2).n128_u64[0];
  return result;
}

void TXTextLayout::dirty(TXTextLayout *this)
{
  (*(void (**)(TXTextLayout *, void))(*(void *)this + 552))(this, 0);
  *((_OWORD *)this + 3852) = 0u;
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 63888);
  OZValueCache<OZBoundsCacheItem>::flush((uint64_t)this + 64032);
  uint64_t v2 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v7, v2);
  uint64_t v3 = (TXTimeGlyphPropertiesMap *)TXTextLayout::timeGlyphPropertiesMap(this);
  TXTimeGlyphPropertiesMap::flush(v3);
  double v4 = (CFTypeRef *)((char *)this + 64184);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 64232, *((void **)this + 8030));
  *((void *)this + 8029) = (char *)this + 64240;
  *((void *)this + 8030) = 0;
  uint64_t v5 = (void *)*((void *)this + 8027);
  *((void *)this + 8031) = 0;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 64208, v5);
  *((void *)this + 8026) = (char *)this + 64216;
  *((void *)this + 8027) = 0;
  *((void *)this + 8028) = 0;
  if (TXTextLayout::scaleEmojiToCapHeight(v6) && *v4)
  {
    CFRelease(*v4);
    CFTypeRef *v4 = 0;
    *((_OWORD *)this + 4012) = xmmword_1B7E733D0;
  }
  *((unsigned char *)this + 19332) = 0;
  *((unsigned char *)this + 64324) = 1;
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v7);
}

void sub_1B75FA518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void OZValueCache<OZBoundsCacheItem>::flush(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 40);
  PCSharedMutex::lock((std::mutex *)(a1 + 40));
  std::__list_imp<OZBoundsCacheItem>::clear((uint64_t *)(a1 + 8));
  PCSharedMutex::unlock(v2);
}

void non-virtual thunk to'TXTextLayout::dirty(TXTextLayout *this)
{
}

{
  TXTextLayout::dirty((TXTextLayout *)((char *)this - 216));
}

double TXTextLayout::dirtyTextAndObjects(TXTextLayout *this, int a2)
{
  OZElement::dirty((OZElement *)((char *)this + 200));
  *((unsigned char *)this + 19392) = 1;
  if (a2)
  {
    uint64_t v5 = (char *)this + 58824;
    uint64_t v6 = (TXTextObject **)*((void *)this + 7353);
    double v7 = (TXTextObject **)*((void *)v5 + 1);
    while (v6 != v7)
    {
      uint64_t v8 = *v6;
      v6 += 2;
      *(void *)&double result = TXTextObject::dirty(v8).n128_u64[0];
    }
  }
  return result;
}

uint64_t TXTextLayout::doEval(TXTextLayout *this, OZChannelBase *a2, const CMTime *a3)
{
  return 1;
}

uint64_t non-virtual thunk to'TXTextLayout::doEval(TXTextLayout *this, OZChannelBase *a2, const CMTime *a3)
{
  return 1;
}

void TXTextLayout::transform(Li3DEngineScene *a1, double *a2, const OZRenderState *a3)
{
  uint64_t v6 = (OZLockingGroup *)Li3DEngineScene::sceneManager(a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v22, v6);
  uint64_t v21 = 0x3FF0000000000000;
  uint64_t v18 = 0x3FF0000000000000;
  uint64_t v15 = 0x3FF0000000000000;
  uint64_t v12 = 0x3FF0000000000000;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  if (OZChannelBase::isObjectRef((OZChannelBase *)a1)
    && (uint64_t v7 = *((void *)a1 + 7353), v8 = *((void *)a1 + 7354) - v7, (v8 & 0xFFFFFFFF0) != 0))
  {
    if (*((void *)a1 + 2408) >= (unint64_t)(v8 >> 4)) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = *((void *)a1 + 2408);
    }
    double v10 = (uint64_t *)(v7 + 16 * v9);
    if (*v10)
    {
      OZRenderParams::OZRenderParams((OZRenderParams *)v11);
      OZRenderParams::setState((OZRenderParams *)v11, a3);
      TXTextObject::getTransformMatrix(*v10, (uint64_t)&v12, v11, 1, 1, 0, 1, 0.0, 0.0);
      OZRenderParams::~OZRenderParams((OZRenderParams *)v11);
    }
  }
  else
  {
    (*(void (**)(void *, uint64_t *, const OZRenderState *))(*((void *)a1 + 25) + 1256))((void *)a1 + 25, &v12, a3);
  }
  PCMatrix44Tmpl<double>::transform<double>((double *)&v12, a2, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v22);
}

void sub_1B75FA7A8(_Unwind_Exception *a1)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v1 - 56));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'TXTextLayout::transform(uint64_t a1, double *a2, const OZRenderState *a3)
{
}

void TXTextLayout::createSnapSetForCamera(void *a1, const LiCamera *a2, uint64_t **a3, OZRenderState *a4, int a5, int a6)
{
  double v59 = 0.0;
  double v60 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v61 = _Q0;
  OZRenderState::OZRenderState(&v58, a4);
  v58.var4 = 1;
  TXTextLayout::getSelectionBounds((uint64_t)a1, (uint64_t)&v59, &v58);
  double v57 = 1.0;
  uint64_t v54 = 0x3FF0000000000000;
  double v51 = 1.0;
  double v48 = 1.0;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v55 = 0u;
  uint64_t v17 = a1[25];
  a1 += 25;
  long long v56 = 0u;
  (*(void (**)(void *, double *, OZRenderState *))(v17 + 1256))(a1, &v48, a4);
  uint64_t v18 = (OZScene *)(*(uint64_t (**)(void *))(*a1 + 272))(a1);
  OZScene::calcWorldToFilmSpaceMatrixForCamera(v18, a2, v47);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v48, v47);
  double v19 = v57 + v59 * *((double *)&v55 + 1) + (v60 + *((double *)&v61 + 1)) * *(double *)&v56;
  double v20 = (*(double *)&v50 + v59 * v48 + (v60 + *((double *)&v61 + 1)) * *(double *)&v49) / v19;
  double v21 = (v60 + *((double *)&v61 + 1)) * v51;
  double v22 = (*((double *)&v52 + 1) + v59 * *((double *)&v50 + 1) + v21) / v19;
  double v23 = v57 + (v59 + *(double *)&v61) * *((double *)&v55 + 1) + (v60 + *((double *)&v61 + 1)) * *(double *)&v56;
  double v24 = (v59 + *(double *)&v61) * v48;
  double v25 = (*(double *)&v50 + v24 + (v60 + *((double *)&v61 + 1)) * *(double *)&v49) / v23;
  double v26 = (v59 + *(double *)&v61) * *((double *)&v50 + 1);
  double v27 = (*((double *)&v52 + 1) + v26 + v21) / v23;
  double v28 = v57 + v59 * *((double *)&v55 + 1) + v60 * *(double *)&v56;
  double v29 = v60 * *(double *)&v49;
  double v30 = (*(double *)&v50 + v59 * v48 + v60 * *(double *)&v49) / v28;
  double v31 = (*((double *)&v52 + 1) + v59 * *((double *)&v50 + 1) + v60 * v51) / v28;
  double v32 = v57 + (v59 + *(double *)&v61) * *((double *)&v55 + 1) + v60 * *(double *)&v56;
  double v33 = (*(double *)&v50 + v24 + v60 * *(double *)&v49) / v32;
  double v34 = (*((double *)&v52 + 1) + v26 + v60 * v51) / v32;
  if (v30 <= v33) {
    double v35 = (*(double *)&v50 + v59 * v48 + v60 * *(double *)&v49) / v28;
  }
  else {
    double v35 = (*(double *)&v50 + v24 + v29) / v32;
  }
  if (v30 >= v33) {
    double v36 = (*(double *)&v50 + v59 * v48 + v60 * *(double *)&v49) / v28;
  }
  else {
    double v36 = (*(double *)&v50 + v24 + v29) / v32;
  }
  if (v25 <= v35) {
    double v35 = v25;
  }
  if (v20 <= v35) {
    double v35 = v20;
  }
  if (v25 >= v36) {
    double v36 = v25;
  }
  if (v20 >= v36) {
    double v36 = v20;
  }
  if (v31 <= v34) {
    double v37 = (*((double *)&v52 + 1) + v59 * *((double *)&v50 + 1) + v60 * v51) / v28;
  }
  else {
    double v37 = v34;
  }
  if (v31 < v34) {
    double v31 = v34;
  }
  if (v27 <= v37) {
    double v38 = v27;
  }
  else {
    double v38 = v37;
  }
  if (v22 <= v38) {
    double v38 = v22;
  }
  if (v27 >= v31) {
    double v31 = v27;
  }
  if (v22 >= v31) {
    double v39 = v22;
  }
  else {
    double v39 = v31;
  }
  if (v35 <= v36) {
    double v40 = v35;
  }
  else {
    double v40 = v36;
  }
  if (v35 <= v36) {
    double v35 = v36;
  }
  if (v39 >= v38) {
    double v41 = v39;
  }
  else {
    double v41 = v38;
  }
  if (v39 < v38) {
    double v38 = v39;
  }
  double v59 = v40;
  double v60 = v38;
  double v42 = v35 - v40;
  *(double *)&long long v61 = v42;
  *((double *)&v61 + 1) = v41 - v38;
  if (a5)
  {
    OZSnap::OZSnap((OZSnap *)v46, 258, (v40 + v40 + v42) * 0.5, v38, v38 + v41 - v38);
    std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v46, (uint64_t)v46);
    OZSnap::OZSnap((OZSnap *)v46, 514, (v60 + v60 + *((double *)&v61 + 1)) * 0.5, v59, v59 + *(double *)&v61);
    std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v46, (uint64_t)v46);
  }
  if (a6)
  {
    if (*(double *)&v61 > 3.0)
    {
      double v43 = *(double *)&v61 - (v59 + 1.0 - v59) + -2.0;
      double v59 = v59 + 1.0;
      *(double *)&long long v61 = v43;
    }
    double v44 = *((double *)&v61 + 1);
    double v45 = v60;
    if (*((double *)&v61 + 1) > 3.0)
    {
      double v44 = *((double *)&v61 + 1) - (v60 + 1.0 - v60) + -2.0;
      double v60 = v60 + 1.0;
      *((double *)&v61 + 1) = v44;
      double v45 = v45 + 1.0;
    }
    OZSnap::OZSnap((OZSnap *)v46, 257, v59, v45, v45 + v44);
    std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v46, (uint64_t)v46);
    OZSnap::OZSnap((OZSnap *)v46, 260, v59 + *(double *)&v61, v60, v60 + *((double *)&v61 + 1));
    std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v46, (uint64_t)v46);
    OZSnap::OZSnap((OZSnap *)v46, 513, v60, v59, v59 + *(double *)&v61);
    std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v46, (uint64_t)v46);
    OZSnap::OZSnap((OZSnap *)v46, 516, v60 + *((double *)&v61 + 1), v59, v59 + *(double *)&v61);
    std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v46, (uint64_t)v46);
  }
}

void non-virtual thunk to'TXTextLayout::createSnapSetForCamera(uint64_t a1, const LiCamera *a2, uint64_t **a3, OZRenderState *a4, int a5, int a6)
{
}

unint64_t TXTextLayout::isGlowEnabled(TXTextLayout *this, const CMTime *a2)
{
  unint64_t isEnabled = 1;
  if ((OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 38664), 0, 1) & 1) == 0)
  {
    double v4 = (char *)this + 19344;
    uint64_t v5 = *((void *)this + 2419);
    if ((char *)v5 == v4)
    {
      return 0;
    }
    else
    {
      do
      {
        unint64_t isEnabled = OZChannelBase::isEnabled((OZChannelBase *)(*(void *)(v5 + 16) + 31080), 0, 1);
        if (isEnabled) {
          break;
        }
        uint64_t v5 = *(void *)(v5 + 8);
      }
      while ((char *)v5 != v4);
    }
  }
  return isEnabled;
}

unint64_t TXTextLayout::isTextDropShadowEnabled(TXTextLayout *this)
{
  unint64_t isEnabled = 1;
  if ((OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 45048), 0, 1) & 1) == 0)
  {
    uint64_t v3 = (char *)this + 19344;
    uint64_t v4 = *((void *)this + 2419);
    if ((char *)v4 == v3)
    {
      return 0;
    }
    else
    {
      do
      {
        unint64_t isEnabled = OZChannelBase::isEnabled((OZChannelBase *)(*(void *)(v4 + 16) + 13848), 0, 1);
        if (isEnabled) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 8);
      }
      while ((char *)v4 != v3);
    }
  }
  return isEnabled;
}

double TXTextLayout::calcStaticHash(uint64_t a1, const void *a2, uint64_t **a3)
{
  (*(void (**)(void))(*(void *)(a1 + 200) + 528))();
  if (!v6) {
    __cxa_bad_cast();
  }
  uint64_t v7 = v6;
  __n128 v18 = *(__n128 *)PCHashWriteStream::getHash(v6)->i8;
  (*(void (**)(int8x8_t *))(*(void *)v7 + 40))(v7);
  unint64_t v8 = *(void *)(a1 + 208);
  long long v17 = xmmword_1B7E78260;
  if ((OZFactory::isKindOfClass(v8, (int32x4_t *)&v17) & 1) == 0)
  {
    TXChannelString::getString((PCString *)(a1 + 19048), &v16);
    unsigned int v9 = PCString::size(&v16);
    PCString::~PCString(&v16);
    if (v9)
    {
      TXChannelString::getString((PCString *)(a1 + 19048), &v16);
      (*(void (**)(const void *, PCString *))(*(void *)a2 + 104))(a2, &v16);
      PCString::~PCString(&v16);
    }
  }
  (*(void (**)(const void *, double))(*(void *)a2 + 88))(a2, *(double *)(a1 + 19432));
  double v10 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24272), MEMORY[0x1E4F1FA48], 0.0);
  (*(void (**)(const void *))(*(void *)a2 + 88))(a2);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24424), v10, 0.0);
  (*(void (**)(const void *))(*(void *)a2 + 88))(a2);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24576), v10, 0.0);
  (*(void (**)(const void *))(*(void *)a2 + 88))(a2);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24728), v10, 0.0);
  (*(void (**)(const void *))(*(void *)a2 + 88))(a2);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 61464), v10, 0.0);
  (*(void (**)(const void *))(*(void *)a2 + 88))(a2);
  uint64_t v11 = a1 + 19344;
  for (uint64_t i = *(void *)(a1 + 19352); i != v11; uint64_t i = *(void *)(i + 8))
  {
    StaticHash = (int *)OZObjectManipulator::getStaticHash((_OWORD *)(*(void *)(i + 16) + 16), a2, a3);
    PCHash128::operator+=((int *)&v18, StaticHash);
  }
  Hash = PCHashWriteStream::getHash(v7);
  PCHash128::operator+=((int *)&v18, (int *)Hash);
  *(void *)&double result = PCHashWriteStream::setHash((__n128 *)v7, &v18).n128_u64[0];
  return result;
}

void sub_1B75FB05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

double non-virtual thunk to'TXTextLayout::calcStaticHash(uint64_t a1, const void *a2, uint64_t **a3)
{
  return TXTextLayout::calcStaticHash(a1 - 200, a2, a3);
}

{
  return TXTextLayout::calcStaticHash(a1 - 216, a2, a3);
}

void TXTextLayout::calcStaticHash(PCString *a1, const void *a2, uint64_t **a3)
{
  OZTransformNode::calcStaticHash(&a1[25]);
  if (!v6) {
    __cxa_bad_cast();
  }
  uint64_t v7 = v6;
  __n128 v18 = *(__n128 *)PCHashWriteStream::getHash(v6)->i8;
  (*(void (**)(int8x8_t *))(*(void *)v7 + 40))(v7);
  unint64_t v8 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v17, v8);
  TXChannelString::getString(a1 + 2381, &v16);
  unsigned int v9 = PCString::size(&v16);
  PCString::~PCString(&v16);
  if (v9)
  {
    TXChannelString::getString(a1 + 2381, &v16);
    (*(void (**)(const void *, PCString *))(*(void *)a2 + 104))(a2, &v16);
    PCString::~PCString(&v16);
  }
  for (uint64_t i = (PCString *)a1[2419].var0; i != &a1[2418]; uint64_t i = (PCString *)i[1].var0)
  {
    StaticHash = (int *)OZObjectManipulator::getStaticHash(&i[2].var0->data, a2, a3);
    PCHash128::operator+=((int *)&v18, StaticHash);
  }
  CMTime var0 = (uint64_t *)a1[2378].var0;
  long long v13 = (uint64_t *)a1[2379].var0;
  while (var0 != v13)
  {
    long long v14 = TXParagraphStyle::getStaticHash(*var0, a2);
    PCHash128::operator+=((int *)&v18, (int *)v14);
    ++var0;
  }
  Hash = PCHashWriteStream::getHash(v7);
  PCHash128::operator+=((int *)&v18, (int *)Hash);
  PCHashWriteStream::setHash((__n128 *)v7, &v18);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v17);
}

void sub_1B75FB268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void non-virtual thunk to'TXTextLayout::calcStaticHash(uint64_t a1, const void *a2, uint64_t **a3)
{
}

uint64_t TXTextLayout::colorConversionCache(TXTextLayout *this)
{
  if (!*((void *)this + 7621)) {
    operator new();
  }
  return *((void *)this + 7621);
}

void sub_1B75FB344(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void TXTextLayout::cacheColorConversion(TXTextLayout *a1, PCColor *this, uint64_t a3, int a4, int a5)
{
  HIDWORD(v12) = a4;
  int v13 = a5;
  int v14 = *(_DWORD *)(a3 + 24);
  uint64_t v15 = *(void *)(a3 + 28);
  CGColorSpace = PCColor::getCGColorSpace(this);
  PCColor::getRGB(this, (float *)&v12, (float *)&v12 + 1, (float *)&v12 + 2, CGColorSpace);
  std::allocate_shared[abi:ne180100]<PCWorkingColor,std::allocator<PCWorkingColor>,PCWorkingColor const&,void>(a3, &v10);
  unsigned int v9 = (uint64_t *)TXTextLayout::colorConversionCache(a1);
  PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::addValue(*v9, &v12, &v10, 0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1B75FB420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextLayout::workingColorFromColor(TXTextLayout *a1, PCColor *this, uint64_t a3, int a4, int a5)
{
  LODWORD(v15[1]) = a4;
  LODWORD(v15[2]) = a5;
  v15[3] = *(float *)(a3 + 24);
  uint64_t v16 = *(void *)(a3 + 28);
  CGColorSpace = PCColor::getCGColorSpace(this);
  PCColor::getRGB(this, &v13, &v14, v15, CGColorSpace);
  unint64_t v8 = *(void **)TXTextLayout::colorConversionCache(a1);
  char v17 = 0;
  PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::findValue(v8, (uint64_t)&v13, &v17, &v11);
  uint64_t v9 = v11;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

double TXTextLayout::calcHashForState(PCString *a1, void *a2, OZRenderParams *a3, uint64_t **a4)
{
  ((void (*)(void))a1[25].var0[16].length)();
  if (!v8) {
    __cxa_bad_cast();
  }
  uint64_t v9 = v8;
  __n128 v15 = *(__n128 *)PCHashWriteStream::getHash(v8)->i8;
  (*(void (**)(void *))(*(void *)a2 + 40))(a2);
  TXChannelString::getString(a1 + 2381, (PCString *)&v14);
  (*(void (**)(void *, long long *))(*(void *)a2 + 104))(a2, &v14);
  PCString::~PCString((PCString *)&v14);
  uint64_t v10 = a1 + 2418;
  for (uint64_t i = a1[2419].var0; i != (__CFString *)v10; uint64_t i = (__CFString *)i->info)
  {
    OZObjectManipulator::getHashForState((_OWORD *)i->data + 1, (uint64_t *)a2, a3, a4, &v14);
    PCHash128::operator+=((int *)&v15, (int *)&v14);
  }
  Hash = PCHashWriteStream::getHash(v9);
  PCHash128::operator+=((int *)&v15, (int *)Hash);
  *(void *)&double result = PCHashWriteStream::setHash((__n128 *)v9, &v15).n128_u64[0];
  return result;
}

void sub_1B75FB67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
}

double non-virtual thunk to'TXTextLayout::calcHashForState(uint64_t a1, void *a2, OZRenderParams *a3, uint64_t **a4)
{
  return TXTextLayout::calcHashForState((PCString *)(a1 - 200), a2, a3, a4);
}

{
  return TXTextLayout::calcHashForState((PCString *)(a1 - 216), a2, a3, a4);
}

void TXTextLayout::calcHashForState(uint64_t a1, void *lpsrc, CMTime *a3, uint64_t **a4, int a5)
{
  if (!v10) {
    __cxa_bad_cast();
  }
  uint64_t v11 = v10;
  long long v49 = *(_OWORD *)&a3->value;
  CMTimeEpoch epoch = a3->epoch;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 216) + 104))(a1 + 216, &v49, 1, 1, 1);
  (*(void (**)(void *, void))(*(void *)lpsrc + 16))(lpsrc, 0);
  (*(void (**)(void *, uint64_t))(*(void *)lpsrc + 48))(lpsrc, v12);
  (*(void (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
  uint64_t v13 = *(unsigned int *)(a1 + 1224);
  (*(void (**)(void *, void))(*(void *)lpsrc + 16))(lpsrc, 0);
  (*(void (**)(void *, uint64_t))(*(void *)lpsrc + 56))(lpsrc, v13);
  (*(void (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
  CMTime v48 = *a3;
  OZChannelObjectRootBase::calcHashForStateSelfOnly((OZChannelObjectRootBase *)(a1 + 256), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 520), (PCSerializerWriteStream *)lpsrc, &v48);
  long long v14 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)&v47, v14);
  CMTime v48 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 19448), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 19600), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 19752), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 22136), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 20720), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 20976), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 22288), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 22544), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 22800), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 23688), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 24880), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 52376), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 58880), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 59280), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 59560), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 59760), (PCSerializerWriteStream *)lpsrc, &v48);
  CMTime v48 = *a3;
  OZChannel::calcHashForState((OZChannel *)(a1 + 61648), (PCSerializerWriteStream *)lpsrc, &v48);
  __n128 v15 = *(double **)(a1 + 19224);
  if (v15 != (double *)(a1 + 19232))
  {
    do
    {
      double v16 = v15[5];
      (*(void (**)(void *, void))(*(void *)lpsrc + 64))(lpsrc, *((void *)v15 + 4));
      (*(void (**)(void *, double))(*(void *)lpsrc + 88))(lpsrc, v16);
      char v17 = (double *)*((void *)v15 + 1);
      if (v17)
      {
        do
        {
          __n128 v18 = v17;
          char v17 = *(double **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          __n128 v18 = (double *)*((void *)v15 + 2);
          BOOL v19 = *(void *)v18 == (void)v15;
          __n128 v15 = v18;
        }
        while (!v19);
      }
      __n128 v15 = v18;
    }
    while (v18 != (double *)(a1 + 19232));
  }
  CMTime v48 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 1032), (PCSerializerWriteStream *)lpsrc, &v48);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&v47);
  __n128 v47 = *(__n128 *)PCHashWriteStream::getHash(v11)->i8;
  if (a5)
  {
    for (uint64_t i = *(void *)(a1 + 1184); i != a1 + 1176; uint64_t i = *(void *)(i + 8))
    {
      double v21 = *(_OWORD **)(i + 16);
      long long v45 = *(_OWORD *)&a3->value;
      CMTimeEpoch v46 = a3->epoch;
      if ((*(unsigned int (**)(_OWORD *, long long *, void, uint64_t, uint64_t))(*(void *)v21 + 280))(v21, &v45, 0, 1, 1))
      {
        OZObjectManipulator::getHashForState(v21 + 3, (uint64_t *)lpsrc, (OZRenderParams *)a3, a4, &v48);
        PCHash128::operator+=((int *)&v47, (int *)&v48);
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 496))(a1))
  {
    for (uint64_t j = *(void *)(a1 + 1208); j != a1 + 1200; uint64_t j = *(void *)(j + 8))
    {
      uint64_t v23 = *(void *)(j + 16);
      uint64_t v25 = *(void *)(v23 + 16);
      double v24 = (_OWORD *)(v23 + 16);
      if ((*(unsigned int (**)(_OWORD *, void, uint64_t))(v25 + 24))(v24, 0, 1))
      {
        OZObjectManipulator::getHashForState(v24, (uint64_t *)lpsrc, (OZRenderParams *)a3, a4, &v48);
        PCHash128::operator+=((int *)&v47, (int *)&v48);
      }
    }
  }
  *(void *)&v48.timescale = 0;
  v48.CMTimeEpoch epoch = 0;
  v48.CMTimeValue value = (CMTimeValue)&v48.timescale;
  double v26 = *(uint64_t ***)(a1 + 1168);
  if (v26)
  {
    OZScene::getImmediatelyReferencedNodes(v26, *(_DWORD *)(a1 + 280), (uint64_t **)&v48);
    CMTimeValue value = v48.value;
    if ((CMTimeScale *)v48.value != &v48.timescale)
    {
      do
      {
        double v28 = *(OZScene **)(a1 + 1168);
        if (v28)
        {
          Node = OZScene::getNode(v28, *(_DWORD *)(value + 28));
          double v30 = Node;
          if (Node)
          {
            if (Node[120] != a1 + 200
              || (CMTimeEpoch v44 = a3->epoch, v43[1] = *(_OWORD *)&a3->value, ((*(uint64_t (**)(void))(Node[2] + 104))() & 1) != 0))
            {
              double v31 = v30 + 2;
              if (!OZObjectManipulator::isInObjectList((uint64_t)v31, (uint64_t)a4))
              {
                OZObjectManipulator::getHashForState(v31, (uint64_t *)lpsrc, (OZRenderParams *)a3, a4, v43);
                PCHash128::operator+=((int *)&v47, (int *)v43);
              }
            }
          }
        }
        double v32 = *(CMTime **)(value + 8);
        if (v32)
        {
          do
          {
            double v33 = v32;
            double v32 = (CMTime *)v32->value;
          }
          while (v32);
        }
        else
        {
          do
          {
            double v33 = *(CMTime **)(value + 16);
            BOOL v19 = v33->value == value;
            CMTimeValue value = (CMTimeValue)v33;
          }
          while (!v19);
        }
        CMTimeValue value = (CMTimeValue)v33;
      }
      while (v33 != (CMTime *)&v48.timescale);
    }
  }
  __n128 v34 = PCHashWriteStream::setHash((__n128 *)v11, &v47);
  (*(void (**)(void *, __n128))(*(void *)lpsrc + 40))(lpsrc, v34);
  unint64_t v35 = *(void *)(a1 + 208);
  long long v42 = xmmword_1B7E78260;
  if (OZFactory::isKindOfClass(v35, (int32x4_t *)&v42))
  {
    double v36 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v43, v36);
    TXChannelString::getString((PCString *)(a1 + 19048), &v41);
    (*(void (**)(void *, PCString *))(*(void *)lpsrc + 104))(lpsrc, &v41);
    PCString::~PCString(&v41);
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v43);
  }
  else
  {
    TXChannelString::getString((PCString *)(a1 + 19048), (PCString *)v43);
    (*(void (**)(void *, _OWORD *))(*(void *)lpsrc + 104))(lpsrc, v43);
    PCString::~PCString((PCString *)v43);
  }
  (*(void (**)(void *, double))(*(void *)lpsrc + 88))(lpsrc, *(double *)(a1 + 19432));
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24272), MEMORY[0x1E4F1FA48], 0.0);
  (*(void (**)(void *))(*(void *)lpsrc + 88))(lpsrc);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24424), MEMORY[0x1E4F1FA48], 0.0);
  (*(void (**)(void *))(*(void *)lpsrc + 88))(lpsrc);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24576), MEMORY[0x1E4F1FA48], 0.0);
  (*(void (**)(void *))(*(void *)lpsrc + 88))(lpsrc);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 24728), MEMORY[0x1E4F1FA48], 0.0);
  (*(void (**)(void *))(*(void *)lpsrc + 88))(lpsrc);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 61464), MEMORY[0x1E4F1FA48], 0.0);
  (*(void (**)(void *))(*(void *)lpsrc + 88))(lpsrc);
  Hash = PCHashWriteStream::getHash(v11);
  PCHash128::operator+=((int *)&v47, (int *)Hash);
  uint64_t v38 = a1 + 19344;
  for (uint64_t k = *(void *)(a1 + 19352); k != v38; uint64_t k = *(void *)(k + 8))
  {
    OZObjectManipulator::getHashForState((_OWORD *)(*(void *)(k + 16) + 16), (uint64_t *)lpsrc, (OZRenderParams *)a3, a4, v43);
    PCHash128::operator+=((int *)&v47, (int *)v43);
  }
  double v40 = PCHashWriteStream::getHash(v11);
  PCHash128::operator+=((int *)&v47, (int *)v40);
  PCHashWriteStream::setHash((__n128 *)v11, &v47);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v48, *(void **)&v48.timescale);
}

void sub_1B75FC170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,void *a26)
{
}

void non-virtual thunk to'TXTextLayout::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4, int a5)
{
}

void TXTextLayout::getTextObjectWithIndex(TXTextLayout *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = (void *)((char *)this + 58824);
  uint64_t v6 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::ReadSentry::ReadSentry((OZLockingGroup::ReadSentry *)v8, v6);
  if (a2 >= (unint64_t)((uint64_t)(v5[1] - *v5) >> 4))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    long long v7 = *(_OWORD *)(*v5 + 16 * a2);
    *(_OWORD *)a3 = v7;
    if (*((void *)&v7 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
    }
  }
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)v8);
}

uint64_t TXTextLayout::getDirectOffset(uint64_t a1, float32x2_t *a2, const OZRenderState *a3, unsigned char *a4, const LiCamera *a5, int a6, unsigned char *a7)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  if (a4) {
    *a4 = 1;
  }
  StringPtr = TXChannelString::getStringPtr((TXChannelString *)(a1 + 19048));
  if (!PCString::size((PCString *)StringPtr)) {
    return 0;
  }
  uint64_t v12 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 200) + 272))(a1 + 200);
  OZScene::calcWorldToFilmSpaceMatrixForCamera(v12, a5, v94);
  uint64_t v13 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v93, v13);
  OZRenderParams::OZRenderParams((OZRenderParams *)v92);
  OZRenderParams::setState((OZRenderParams *)v92, a3);
  v92[0].var4 = 1;
  OZRenderState::OZRenderState(&v91, a3);
  v91.var4 = 0;
  uint64_t v90 = 0x3FF0000000000000;
  uint64_t v87 = 0x3FF0000000000000;
  uint64_t v84 = 0x3FF0000000000000;
  uint64_t v81 = 0x3FF0000000000000;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  (*(void (**)(uint64_t, uint64_t *, OZRenderState *))(*(void *)(a1 + 200) + 1256))(a1 + 200, &v81, &v91);
  memset(v80, 0, sizeof(v80));
  float64x2_t v79 = 0u;
  memset(v78, 0, sizeof(v78));
  CMTime var0 = (CMTime)a3->var0;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 59888), &var0, 0.0);
  double v15 = v14;
  CMTime v76 = (CMTime)a3->var0;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 60360), &v76, 0.0);
  double v17 = v16;
  __n128 v18 = (uint64_t **)(a1 + 58824);
  if (a7) {
    *a7 = 0;
  }
  BOOL v19 = *v18;
  double v43 = *(uint64_t **)(a1 + 58832);
  if (*v18 != v43)
  {
    CMTime v48 = 0;
    unsigned int v46 = 0;
    double v20 = -1.0;
LABEL_8:
    uint64_t v75 = 0x3FF0000000000000;
    uint64_t v72 = 0x3FF0000000000000;
    uint64_t v69 = 0x3FF0000000000000;
    uint64_t v66 = 0x3FF0000000000000;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    TXTextObject::getTransformMatrix(*v19, (uint64_t)&v66, (long long *)&v92[0].var0.var0, 1, 0, 0, 1, v17, v15);
    int v21 = 0;
    while (1)
    {
      if (a6 != 5 && v21 != a6) {
        goto LABEL_43;
      }
      double v22 = (TXTextObject *)*v19;
      CMTime v65 = (CMTime)a3->var0;
      if (!TXTextObject::isAttributeEnabled(v22, v21, &v65)) {
        goto LABEL_43;
      }
      uint64_t v23 = *(void *)(*v19 + 264);
      if (v23)
      {
        uint64_t v24 = *(void *)(v23 + 8);
        uint64_t v25 = *(std::__shared_weak_count **)(v23 + 16);
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v24 = 0;
      }
      float64x2_t v64 = 0uLL;
      float64x2_t v63 = 0uLL;
      float64x2_t v62 = 0uLL;
      float64x2_t v61 = 0uLL;
      TXTextObject::getFourCornerPointsInObjectSpaceForAttribute(*v19, v92, &v62, &v61, &v63, &v64, a6, 1, 0.0, 0.0, 0.0, 0.0, 1u, 0);
      float64x2_t v59 = v64;
      uint64_t v60 = 0;
      float64x2_t v57 = v63;
      uint64_t v58 = 0;
      float64x2_t v55 = v62;
      uint64_t v56 = 0;
      float64x2_t v53 = v61;
      uint64_t v54 = 0;
      PCMatrix44Tmpl<double>::transform<double>((double *)&v66, v59.f64, v59.f64);
      PCMatrix44Tmpl<double>::transform<double>((double *)&v66, v57.f64, v57.f64);
      PCMatrix44Tmpl<double>::transform<double>((double *)&v66, v55.f64, v55.f64);
      PCMatrix44Tmpl<double>::transform<double>((double *)&v66, v53.f64, v53.f64);
      PCMatrix44Tmpl<double>::transform<double>((double *)&v81, v59.f64, v59.f64);
      PCMatrix44Tmpl<double>::transform<double>((double *)&v81, v57.f64, v57.f64);
      PCMatrix44Tmpl<double>::transform<double>((double *)&v81, v55.f64, v55.f64);
      PCMatrix44Tmpl<double>::transform<double>((double *)&v81, v53.f64, v53.f64);
      uint64_t v26 = 0;
      *(float64x2_t *)((char *)v80 + 8) = v59;
      *((void *)&v80[1] + 1) = v60;
      float64x2_t v79 = v57;
      *(void *)&v80[0] = v58;
      *(float64x2_t *)((char *)&v78[1] + 8) = v53;
      *((void *)&v78[2] + 1) = v54;
      *(void *)&v78[1] = v56;
      v78[0] = v55;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v96 = 0u;
      double v27 = (double *)v78;
      memset(v95, 0, sizeof(v95));
      do
      {
        float64x2_t v51 = 0uLL;
        uint64_t v52 = 0;
        PCMatrix44Tmpl<double>::transform<double>((double *)&v81, v27, v51.f64);
        PCMatrix44Tmpl<double>::transform<double>(v94, v27, v51.f64);
        v95[v26++] = v51;
        v27 += 3;
      }
      while (v26 != 4);
      long long v98 = v95[0];
      if (v21 == 3 && OZChannel::getValueAsInt((OZChannel *)(v24 + 19528), MEMORY[0x1E4F1FA48], 0.0))
      {
        double v28 = (TXTextObject *)*v19;
        CMTime v50 = (CMTime)a3->var0;
        double DropShadowDistance = TXTextObject::getDropShadowDistance(v28, &v50);
        double v30 = (TXTextObject *)*v19;
        CMTime v49 = (CMTime)a3->var0;
        double DropShadowAngle = TXTextObject::getDropShadowAngle(v30, &v49);
        __double2 v32 = __sincos_stret(DropShadowAngle);
        for (uint64_t i = 0; i != 5; ++i)
        {
          __n128 v34 = (double *)&v95[i];
          double v35 = DropShadowDistance * v32.__sinval + *((double *)&v95[i] + 1);
          double *v34 = DropShadowDistance * v32.__cosval + *(double *)&v95[i];
          v34[1] = v35;
        }
      }
      float64x2_t v51 = vcvtq_f64_f32(*a2);
      int v36 = pointInPolygon(v51.f64, (uint64_t)v95, 5);
      char v37 = v36;
      if (v36)
      {
        uint64_t v38 = (std::__shared_weak_count *)v19[1];
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
        if (a7) {
          *a7 = 1;
        }
        unsigned int v46 = *(_DWORD *)(*v19 + 388);
        uint64_t v44 = v46;
        if (!v25) {
          goto LABEL_41;
        }
      }
      else
      {
        double v39 = hypot((*(double *)v95 + *(double *)&v96) * 0.5 - a2->f32[0], (*((double *)v95 + 1) + *((double *)&v96 + 1)) * 0.5 - a2->f32[1]);
        double v40 = v39;
        if (v20 < 0.0 || v39 < v20)
        {
          uint64_t v38 = (std::__shared_weak_count *)v19[1];
          if (v38) {
            atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v48) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v48);
          }
          unsigned int v46 = *(_DWORD *)(*v19 + 736);
          double v20 = v40;
          if (!v25) {
            goto LABEL_41;
          }
        }
        else
        {
          uint64_t v38 = v48;
          if (!v25) {
            goto LABEL_41;
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
LABEL_41:
      if (v37)
      {
        uint64_t v41 = v44;
        if (!v38) {
          goto LABEL_49;
        }
        goto LABEL_48;
      }
      CMTime v48 = v38;
LABEL_43:
      if (++v21 == 4)
      {
        v19 += 2;
        if (v19 != v43) {
          goto LABEL_8;
        }
        goto LABEL_52;
      }
    }
  }
  CMTime v48 = 0;
  unsigned int v46 = 0;
LABEL_52:
  uint64_t v41 = v46;
  uint64_t v38 = v48;
  if (v48) {
LABEL_48:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
LABEL_49:
  OZRenderParams::~OZRenderParams((OZRenderParams *)v92);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v93);
  return v41;
}

void sub_1B75FC99C(_Unwind_Exception *a1)
{
}

void TXTextLayout::getCursorOrigin(TXTextLayout *this, double *a2, double *a3)
{
  uint64_t v6 = (OZChannel *)((char *)this + 20464);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0)
    && (long long v7 = (CMTime *)MEMORY[0x1E4F1FA48], OZChannel::getValueAsInt(v6, MEMORY[0x1E4F1FA48], 0.0) != 2))
  {
    TXTextLayout::getStyleAtCharOffset((uint64_t)this, 0, &v23);
    CMTime v22 = *v7;
    float Size = TXTextStyle::getSize((OZChannel *)v23, &v22, 0.0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E4F1FA48], 0.0);
    double v10 = v9;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E4F1FA48], 0.0);
    double v12 = v10 - v11;
    int AlignmentAtCursor = (int)TXTextLayout::getAlignmentAtCursor(this);
    if (AlignmentAtCursor == 1)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E4F1FA48], 0.0);
      double v15 = v12 * 0.5 + v16;
    }
    else if (AlignmentAtCursor == 2)
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E4F1FA48], 0.0);
      double v15 = v12 + v14;
    }
    else
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E4F1FA48], 0.0);
    }
    *a2 = v15;
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0))
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E4F1FA48], 0.0);
      *(void *)a2 = v17;
    }
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0);
    BOOL v19 = (OZChannel *)((char *)this + 24576);
    if (ValueAsInt)
    {
      OZChannel::getValueAsDouble(v19, MEMORY[0x1E4F1FA48], 0.0);
    }
    else
    {
      OZChannel::getValueAsDouble(v19, MEMORY[0x1E4F1FA48], 0.0);
      double v20 = v21 - Size;
    }
    *a3 = v20;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
  }
  else
  {
    *a2 = 0.0;
    *a3 = 0.0;
  }
}

void sub_1B75FCC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void TXTextLayout::getVisibleCharacterRange(TXTextLayout *this@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (char *)this + 58824;
  uint64_t v6 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v18, v6);
  *(void *)a3 = 0;
  long long v7 = *(TXTextObject ***)v5;
  unint64_t v8 = (TXTextObject **)*((void *)v5 + 1);
  if (v7 == v8)
  {
    int v10 = 0;
    int v11 = 0;
  }
  else
  {
    while (1)
    {
      double FaceOpacity = TXTextObject::getFaceOpacity(*v7, a2);
      if (FaceOpacity <= -0.0000001 || FaceOpacity >= 0.0000001) {
        break;
      }
      v7 += 2;
      if (v7 == v8) {
        goto LABEL_16;
      }
    }
    int v11 = *((_DWORD *)*v7 + 184);
    int v10 = *((_DWORD *)*v7 + 185);
    *(_DWORD *)a3 = v11;
    *(_DWORD *)(a3 + 4) = v10;
  }
  for (; v7 != v8; *(_DWORD *)(a3 + 4) = v17 - v11)
  {
    double v12 = TXTextObject::getFaceOpacity(*v7, a2);
    if (v12 > -0.0000001 && v12 < 0.0000001) {
      break;
    }
    uint64_t v13 = *v7;
    v7 += 2;
    int v14 = *((_DWORD *)v13 + 184);
    int v15 = *((_DWORD *)v13 + 185);
    int v16 = v10 + v11;
    if (v11 >= v14) {
      int v11 = v14;
    }
    int v17 = v15 + v14;
    if (v16 > v17) {
      int v17 = v16;
    }
    int v10 = v17 - v11;
    *(_DWORD *)a3 = v11;
  }
LABEL_16:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v18);
}

void sub_1B75FCD8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t NumLinesInParagraphs(TXTextLayout *a1)
{
  uint64_t v1 = (uint64_t *)*((void *)a1 + 2378);
  uint64_t v2 = *((void *)a1 + 2379) - (void)v1;
  if ((v2 & 0x7FFFFFFF8) == 0) {
    return 0;
  }
  LODWORD(result) = 0;
  unint64_t v4 = (unint64_t)v2 >> 3;
  unint64_t v5 = v2 >> 3;
  uint64_t v6 = ((unint64_t)v2 >> 3);
  unint64_t v7 = (v4 - 1);
  do
  {
    if (v5 <= v7) {
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v8 = *v1++;
    uint64_t result = (*(_DWORD *)(v8 + 876) + result);
    --v6;
  }
  while (v6);
  return result;
}

uint64_t TXTextLayout::shouldUseBinarySearchForScalingToBothMargins(TXTextLayout *this)
{
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);

  return OZHostApplicationDelegateHandler::wantsToUseBinarySearchForScalingToBothMargins(HostApplicationDelegate);
}

void TXTextLayout::scaleToBothMargins(TXTextLayout *this, CMTime *a2)
{
  if ((*(unsigned int (**)(TXTextLayout *))(*(void *)this + 1144))(this))
  {
    TXTextLayout::shrinkToBothMarginsBinary(this, a2);
  }
  else
  {
    TXTextLayout::shrinkToBothMarginsLinear(this, a2);
  }
}

void TXTextLayout::shrinkToBothMarginsBinary(TXTextLayout *this, CMTime *a2)
{
  TXTextLayout::calcMarginScaleHash(this, a2);
  int32x4_t v4 = *((int32x4_t *)this + 3852);
  if (!*(void *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL))
    || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v22, v4)))) & 1) != 0)
  {
    double v5 = TXTextLayout::computeMarginWidth(this);
    double v6 = TXTextLayout::computeMarginHeight(this);
    int v7 = 0;
    double v8 = *((double *)this + 7971);
    char v9 = 1;
    double v10 = -1.0;
    double v11 = 0.01;
    int v12 = 8;
    double v13 = 1.0;
    do
    {
      InitialCFNumberRef Value = OZChannel::getInitialValue((OZChannel *)((char *)this + 61464));
      int isBiggerThanMargins = TXTextLayout::isBiggerThanMargins(this, v5, v6, a2);
      if (v10 >= InitialValue) {
        double v16 = v10;
      }
      else {
        double v16 = InitialValue;
      }
      if (!isBiggerThanMargins) {
        double v10 = v16;
      }
      if (v9)
      {
        double v17 = 1.0;
      }
      else
      {
        int v18 = isBiggerThanMargins;
        double v19 = OZChannel::getInitialValue((OZChannel *)((char *)this + 61464));
        if (v18) {
          double v13 = v19;
        }
        else {
          double v11 = v19;
        }
        double v17 = (v13 + v11) * 0.5;
      }
      BOOL v20 = v12 == 1;
      if (v20 && v10 > 0.0) {
        double v17 = v10;
      }
      OZChannel::setInitialValue((OZChannel *)((char *)this + 61464), v17, 1);
      TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
      TXTextLayout::doLayoutForParagraphs(this, v5, a2);
      v7 |= v20;
      if ((v7 & 1) != 0 && v8 < 1.0) {
        TXTextLayout::shrinkDownToOneLine(this, v5, a2);
      }
      char v9 = 0;
      --v12;
    }
    while (v12);
    TXTextLayout::calcMarginScaleHash(this, a2);
    *((_OWORD *)this + 3852) = v21;
  }
}

void TXTextLayout::shrinkToBothMarginsLinear(TXTextLayout *this, const CMTime *a2)
{
  uint64_t v2 = (CMTime *)a2;
  TXTextLayout::calcMarginScaleHash(this, a2);
  int32x4_t v4 = *((int32x4_t *)this + 3852);
  if (*(void *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL))
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v80, v4)))) & 1) == 0)
  {
    return;
  }
  double v5 = (double *)((char *)this + 63768);
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  char v72 = OZHostApplicationDelegateHandler::wantsToLimitLinesOfText(HostApplicationDelegate);
  unsigned int NumberOfLinesToLimitTextTo = OZHostApplicationDelegateHandler::getNumberOfLinesToLimitTextTo(HostApplicationDelegate);
  CMTime v79 = *v2;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 22136), &v79, 0.0);
  double v8 = v7;
  uint64_t v9 = 0;
  int v10 = 0;
  long long v74 = (OZChannel *)((char *)this + 20720);
  long long v70 = (OZChannel *)((char *)this + 61464);
  int v73 = 1;
  double v11 = (const CMTime *)MEMORY[0x1E4F1FA48];
  uint64_t v69 = v2;
  while (1)
  {
    uint64_t v12 = v9;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), v11, 0.0);
    double v14 = v13;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), v11, 0.0);
    double v16 = v15;
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v11, 0.0) == 4
      || OZChannel::getValueAsInt(v74, v11, 0.0))
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), v11, 0.0);
      double v18 = v17;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), v11, 0.0);
      double v20 = vabdd_f64(v18, v19);
    }
    else
    {
      double v20 = vabdd_f64(v14, v16);
    }
    if (*(unsigned char *)(theApp + 82))
    {
      TXTextLayout::_getImageBoundsFromParagraphs(this, v2, (uint64_t)v77);
      double v21 = v78;
      unsigned int v23 = 0;
      double v24 = v21 + TXTextLayout::_getDiffBetweenTopImageBoundAndTopTypographicBound(this, v22);
    }
    else
    {
      double v25 = v5[79];
      uint64_t v26 = (uint64_t *)*((void *)this + 2378);
      double v27 = (uint64_t *)*((void *)this + 2379);
      if (v26 == v27)
      {
        unsigned int v23 = 0;
        double v28 = 0.0;
      }
      else
      {
        unsigned int v23 = 0;
        double v28 = 0.0;
        do
        {
          uint64_t v29 = *v26;
          CMTime v76 = v79;
          OZChannel::getValueAsDouble((OZChannel *)(v29 + 680), &v76, 0.0);
          double v31 = v30;
          double v32 = (*(double (**)(TXTextLayout *, CMTime *))(*(void *)this + 712))(this, &v79);
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v11, 0.0) == 4)
          {
            double v33 = 0.0;
            if (*(void *)(v29 + 856) < *(_DWORD *)(v29 + 864) + *(void *)(v29 + 856))
            {
              unint64_t v34 = *(void *)(v29 + 856);
              double v35 = 0.0;
              double v36 = 0.0;
              do
              {
                TXHelperFunctions::GetTextObjectContainingCharIndex(this, (TXTextLayout *)v34, 1, 0, v77);
                double TypographicBounds = (double *)TXTextObject::getTypographicBounds(v77[0]);
                double v38 = *TypographicBounds;
                double v39 = TypographicBounds[2];
                double LayoutRealPos = TXTextObject::getLayoutRealPos(v77[0]);
                BOOL v41 = v34 == 0;
                if (v36 > LayoutRealPos || v34 == 0) {
                  double v36 = LayoutRealPos;
                }
                if (v35 < v38 + v39 + LayoutRealPos) {
                  BOOL v41 = 1;
                }
                if (v41) {
                  double v35 = v38 + v39 + LayoutRealPos;
                }
                if (v77[1]) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v77[1]);
                }
                ++v34;
              }
              while (v34 < (*(_DWORD *)(v29 + 864) + *(_DWORD *)(v29 + 856)));
              double v33 = v35 - v36;
            }
            double v28 = v28 + v33;
          }
          else
          {
            uint64_t v43 = *(unsigned int *)(v29 + 876);
            v23 += v43;
            if (v43)
            {
              uint64_t v44 = (double *)(*(void *)(v29 + 888) + 8);
              do
              {
                double v28 = v28 + v25 + (v8 + v31) * v32 + *(v44 - 1) - *v44;
                v44 += 8;
                --v43;
              }
              while (v43);
            }
          }
          ++v26;
        }
        while (v26 != v27);
        uint64_t v26 = (uint64_t *)*((void *)this + 2379);
        double v5 = (double *)((char *)this + 63768);
      }
      uint64_t v45 = *(v26 - 1);
      CMTime v75 = *v11;
      OZChannel::getValueAsDouble((OZChannel *)(v45 + 680), &v75, 0.0);
      double v24 = v28
          - (v25
           + v46 * (*(double (**)(TXTextLayout *, CMTime *))(*(void *)this + 712))(this, &v79));
      uint64_t v2 = v69;
    }
    int ValueAsInt = OZChannel::getValueAsInt(v74, v11, 0.0);
    BOOL v48 = ValueAsInt == 0;
    CMTime v49 = ValueAsInt ? (OZChannel *)((char *)this + 24576) : (OZChannel *)((char *)this + 24424);
    CMTime v50 = v48 ? (OZChannel *)((char *)this + 24272) : (OZChannel *)((char *)this + 24728);
    OZChannel::getValueAsDouble(v49, v11, 0.0);
    double v52 = v51;
    OZChannel::getValueAsDouble(v50, v11, 0.0);
    double v54 = v52 - v53;
    char v55 = v23 > NumberOfLinesToLimitTextTo ? v72 : 0;
    int v56 = TXTextLayout::linesFitInParagraphWidth(this, v54);
    int v57 = TXTextLayout::wordsFitInParagraphWidth((uint64_t **)this, v54);
    int isPunctuationSeparatedByLineBreaks = TXTextLayout::isPunctuationSeparatedByLineBreaks((uint64_t **)this);
    double v59 = *v5;
    BOOL v60 = v24 > v20 || v56 == 0;
    if (!v60 && (v55 & 1) == 0 && v57 && isPunctuationSeparatedByLineBreaks == 0) {
      break;
    }
    if (((v73 | v10) & 1) != 0 && OZChannel::getInitialValue(v70) >= 0.02)
    {
      int v10 = 1;
      double v62 = -0.01;
LABEL_62:
      InitialCFNumberRef Value = OZChannel::getInitialValue(v70);
      OZChannel::setInitialValue(v70, InitialValue + v62, 1);
      TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
      TXTextLayout::doLayoutForParagraphs(this, v54, v2);
      int v73 = 0;
      uint64_t v9 = v12;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      if ((v12 & 1) == 0) {
        goto LABEL_63;
      }
    }
  }
  if (((v73 | v12) & 1) != 0 && OZChannel::getInitialValue(v70) < 1.0)
  {
    uint64_t v12 = 1;
    double v62 = 0.01;
    goto LABEL_62;
  }
LABEL_63:
  if (v59 < 1.0
    && (int)NumLinesInParagraphs(this) >= 2
    && ((*((void *)this + 2379) - *((void *)this + 2378)) & 0x7FFFFFFF8) == 8)
  {
    double v64 = OZChannel::getInitialValue(v70);
    do
    {
      double v65 = OZChannel::getInitialValue(v70);
      double v66 = v65 + -0.05;
      double v67 = *v5;
      if (v65 + -0.05 >= *v5) {
        double v68 = v65 + -0.05;
      }
      else {
        double v68 = v64;
      }
      OZChannel::setInitialValue(v70, v68, 1);
      TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
      TXTextLayout::doLayoutForParagraphs(this, v54, v2);
    }
    while (NumLinesInParagraphs(this) != 1 && v66 >= v67);
  }
  TXTextLayout::calcMarginScaleHash(this, v2);
  *((_OWORD *)this + 3852) = *(_OWORD *)v77;
}

void sub_1B75FD73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(exception_object);
}

void TXTextLayout::calcMarginScaleHash(TXTextLayout *this, const CMTime *a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](this);
  int32x4_t v4 = v3;
  uint64_t v5 = v2;
  double v7 = v6;
  v16[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v16);
  double v8 = (void *)(v5 + 19344);
  uint64_t v9 = *(void **)(v5 + 19352);
  if (v9 != (void *)(v5 + 19344))
  {
    do
    {
      double v11 = (OZChannel *)v9[2];
      int v10 = (std::__shared_weak_count *)v9[3];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CMTime v15 = *v4;
      float Size = TXTextStyle::getSize(v11, &v15, 0.0);
      PCHashWriteStream::writeValue(v16, Size);
      var8 = (PCString *)v11[3].var8;
      var9 = (std::__shared_weak_count *)v11[3].var9;
      if (var9) {
        atomic_fetch_add_explicit(&var9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      PCHashWriteStream::writeValue(v16, var8 + 1);
      if (var9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](var9);
      }
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      uint64_t v9 = (void *)v9[1];
    }
    while (v9 != v8);
  }
  _OWORD *v7 = *(_OWORD *)PCHashWriteStream::getHash(v16)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v16);
}

void sub_1B75FD898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)va);
  _Unwind_Resume(a1);
}

double TXTextLayout::computeMarginWidth(TXTextLayout *this)
{
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0))
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E4F1FA48], 0.0);
    double v3 = v2;
    uint64_t v4 = 24728;
  }
  else
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E4F1FA48], 0.0);
    double v3 = v5;
    uint64_t v4 = 24272;
  }
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + v4), MEMORY[0x1E4F1FA48], 0.0);
  return v3 - v6;
}

double TXTextLayout::computeMarginHeight(TXTextLayout *this)
{
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0) == 4
    || OZChannel::getValueAsInt((OZChannel *)((char *)this + 20720), MEMORY[0x1E4F1FA48], 0.0))
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), MEMORY[0x1E4F1FA48], 0.0);
    double v3 = v2;
    uint64_t v4 = (OZChannel *)((char *)this + 24424);
  }
  else
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), MEMORY[0x1E4F1FA48], 0.0);
    double v3 = v5;
    uint64_t v4 = (OZChannel *)((char *)this + 24576);
  }
  OZChannel::getValueAsDouble(v4, MEMORY[0x1E4F1FA48], 0.0);
  return vabdd_f64(v3, v6);
}

uint64_t TXTextLayout::isBiggerThanMargins(TXTextLayout *this, double a2, double a3, const CMTime *a4)
{
  TXTextLayout::computeTotalHeight(this, a4);
  if (v7 > a3
    || !TXTextLayout::linesFitInParagraphWidth(this, a2)
    || (TXTextLayout::isTooManyLines(this) & 1) != 0
    || !TXTextLayout::wordsFitInParagraphWidth((uint64_t **)this, a2))
  {
    return 1;
  }

  return TXTextLayout::isPunctuationSeparatedByLineBreaks((uint64_t **)this);
}

uint64_t TXTextLayout::shrinkDownToOneLine(TXTextLayout *this, double a2, CMTime *a3)
{
  uint64_t result = NumLinesInParagraphs(this);
  if ((int)result >= 2 && ((*((void *)this + 2379) - *((void *)this + 2378)) & 0x7FFFFFFF8) == 8)
  {
    InitialCFNumberRef Value = OZChannel::getInitialValue((OZChannel *)((char *)this + 61464));
    double v8 = (double *)((char *)this + 63768);
    do
    {
      double v9 = OZChannel::getInitialValue((OZChannel *)((char *)this + 61464));
      double v10 = v9 + -0.05;
      double v11 = *v8;
      if (v9 + -0.05 >= *v8) {
        double v12 = v9 + -0.05;
      }
      else {
        double v12 = InitialValue;
      }
      OZChannel::setInitialValue((OZChannel *)((char *)this + 61464), v12, 1);
      TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
      TXTextLayout::doLayoutForParagraphs(this, a2, a3);
      uint64_t result = NumLinesInParagraphs(this);
    }
    while (result != 1 && v10 >= v11);
  }
  return result;
}

void TXTextLayout::computeTotalHeight(TXTextLayout *this, const CMTime *a2)
{
  double v4 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 22136), a2, 0.0);
  if (*(unsigned char *)(theApp + 82))
  {
    TXTextLayout::_getImageBoundsFromParagraphs(this, a2, (uint64_t)&v35);
    TXTextLayout::_getDiffBetweenTopImageBoundAndTopTypographicBound(this, v6);
  }
  else
  {
    double v7 = *((double *)this + 8050);
    double v8 = (uint64_t *)*((void *)this + 2378);
    double v9 = (uint64_t *)*((void *)this + 2379);
    if (v8 != v9)
    {
      double v10 = v5;
      double v11 = (const CMTime *)MEMORY[0x1E4F1FA48];
      do
      {
        uint64_t v12 = *v8;
        CMTime v34 = *a2;
        OZChannel::getValueAsDouble((OZChannel *)(v12 + 680), &v34, 0.0);
        double v14 = v13;
        double v15 = (*(double (**)(TXTextLayout *, const CMTime *))(*(void *)this + 712))(this, a2);
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v11, 0.0) == 4)
        {
          double v16 = 0.0;
          if (*(void *)(v12 + 856) < *(_DWORD *)(v12 + 864) + *(void *)(v12 + 856))
          {
            unint64_t v17 = *(void *)(v12 + 856);
            double v18 = 0.0;
            double v19 = 0.0;
            do
            {
              TXHelperFunctions::GetTextObjectContainingCharIndex(this, (TXTextLayout *)v17, 1, 0, &v35);
              double TypographicBounds = (double *)TXTextObject::getTypographicBounds(v35);
              double v21 = *TypographicBounds;
              double v22 = TypographicBounds[2];
              double LayoutRealPos = TXTextObject::getLayoutRealPos(v35);
              BOOL v24 = v17 == 0;
              if (v19 > LayoutRealPos || v17 == 0) {
                double v19 = LayoutRealPos;
              }
              if (v18 < v21 + v22 + LayoutRealPos) {
                BOOL v24 = 1;
              }
              if (v24) {
                double v18 = v21 + v22 + LayoutRealPos;
              }
              if (v36) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v36);
              }
              ++v17;
            }
            while (v17 < (*(_DWORD *)(v12 + 864) + *(_DWORD *)(v12 + 856)));
            double v16 = v18 - v19;
          }
          double v4 = v4 + v16;
        }
        else
        {
          uint64_t v26 = *(unsigned int *)(v12 + 876);
          if (v26)
          {
            uint64_t v27 = 0;
            double v28 = v7 + (v10 + v14) * v15;
            uint64_t v29 = v26 << 6;
            do
            {
              double v30 = *(double *)(*(void *)(v12 + 888) + v27) - *(double *)(*(void *)(v12 + 888) + v27 + 8);
              if (v30 == 0.0 && !*(void *)(v12 + 864))
              {
                uint64_t v31 = *(void *)(v12 + 856);
                if (v31)
                {
                  TXHelperFunctions::GetTextObjectContainingCharIndex(this, (TXTextLayout *)(v31 - 1), 1, 0, &v35);
                  if (v35) {
                    double v30 = *(double *)(TXTextObject::getTypographicBounds(v35) + 24);
                  }
                  if (v36) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
                  }
                }
              }
              double v4 = v4 + v28 + v30;
              v27 += 64;
            }
            while (v29 != v27);
          }
        }
        ++v8;
      }
      while (v8 != v9);
      double v8 = (uint64_t *)*((void *)this + 2379);
    }
    uint64_t v32 = *(v8 - 1);
    CMTime v33 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble((OZChannel *)(v32 + 680), &v33, 0.0);
    (*(double (**)(TXTextLayout *, const CMTime *))(*(void *)this + 712))(this, a2);
  }
}

void sub_1B75FDEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextLayout::computeNumberOfLines(TXTextLayout *this)
{
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0) == 4) {
    return 1;
  }
  double v3 = (uint64_t *)*((void *)this + 2378);
  double v4 = (uint64_t *)*((void *)this + 2379);
  if (v3 == v4) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    uint64_t v5 = *v3++;
    uint64_t result = (*(_DWORD *)(v5 + 876) + result);
  }
  while (v3 != v4);
  return result;
}

uint64_t TXTextLayout::isTooManyLines(TXTextLayout *this)
{
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  uint64_t result = OZHostApplicationDelegateHandler::wantsToLimitLinesOfText(HostApplicationDelegate);
  if (result)
  {
    unsigned int NumberOfLinesToLimitTextTo = OZHostApplicationDelegateHandler::getNumberOfLinesToLimitTextTo(HostApplicationDelegate);
    return TXTextLayout::computeNumberOfLines(this) > NumberOfLinesToLimitTextTo;
  }
  return result;
}

void TXTextLayout::updateShrinkToMarginsChannel(TXTextLayout *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)double v3 = xmmword_1B7E78354;
  int v4 = 3;
  uint64_t v1 = (const PCString *)((char *)this + 61208);
  OZChannelEnum::setTags((TXTextLayout *)((char *)this + 61208), (char *)v3, 5);
  PCURL::PCURL((PCURL *)&v2, @"Text Layout Scale To Margins Proportional Enum");
  OZChannelEnum::setStrings(v1, &v2, 1);
  PCString::~PCString(&v2);
}

void sub_1B75FE098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t TXTextLayout::didReplaceString(TXTextLayout *this)
{
  return (*(uint64_t (**)(void))(*((void *)this + 25) + 232))();
}

double TXTextLayout::getSeqPosScaleForChar(TXTextLayout *this, unsigned int a2, CMTime *a3)
{
  TXTextLayout::getStyleAtCharOffset((uint64_t)this, a2, &v7);
  CMTime v6 = *a3;
  float Size = TXTextStyle::getSize((OZChannel *)v7, &v6, 0.0);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return Size / 100.0;
}

void sub_1B75FE150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextLayout::getComposedCharacterIndex(TXTextLayout *this, unsigned int a2)
{
  return *((unsigned int *)TXTextLayout::getComposedCharacter(this, a2) + 7);
}

uint64_t TXTextLayout::getComposedCharacterIndexWithoutSpaces(TXTextLayout *this, unsigned int a2)
{
  return *((unsigned int *)TXTextLayout::getComposedCharacter(this, a2) + 9);
}

uint64_t TXTextLayout::getWordIndex(TXTextLayout *this, int a2)
{
  int v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::ReadSentry::ReadSentry((OZLockingGroup::ReadSentry *)v12, v4);
  uint64_t v5 = *((void *)this + 7623);
  if (!v5) {
    goto LABEL_11;
  }
  CMTime v6 = (_DWORD *)((char *)this + 60984);
  do
  {
    int v7 = *(_DWORD *)(v5 + 28);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      double v9 = (uint64_t *)v5;
    }
    else {
      double v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      CMTime v6 = (_DWORD *)v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != (_DWORD *)((char *)this + 60984) && v6[7] <= a2) {
    uint64_t v10 = v6[8];
  }
  else {
LABEL_11:
  }
    uint64_t v10 = 0;
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)v12);
  return v10;
}

uint64_t TXTextLayout::getLineIndex(TXTextLayout *this, int a2)
{
  unint64_t v3 = *((unsigned int *)this + 13053);
  if ((int)v3 < 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *((void *)this + 6527);
  }
  StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
  unsigned int v6 = PCString::size((PCString *)StringPtr);
  if (v6) {
    BOOL v7 = a2 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 0;
  }
  unsigned int v9 = v6;
  uint64_t v10 = 0;
  uint64_t result = 0;
  unsigned int v11 = v9 - 1;
  if (v11 >= a2 - 1) {
    unsigned int v11 = a2 - 1;
  }
  uint64_t v12 = v11 + 1;
  do
  {
    ++v10;
    if (v3)
    {
      uint64_t v13 = 0;
      BOOL v14 = 1;
      do
      {
        if (v4 && *(void *)(v4 + 8 * v13) == v10) {
          break;
        }
        BOOL v14 = ++v13 < v3;
      }
      while (v3 != v13);
      uint64_t result = result + v14;
    }
  }
  while (v10 != v12);
  return result;
}

uint64_t TXTextLayout::lineIndexToCharIndex(TXTextLayout *this, int a2)
{
  int v2 = *((_DWORD *)this + 13053);
  if (v2 >= 1 && (unint64_t v3 = (unint64_t *)*((void *)this + 6527)) != 0)
  {
    unint64_t v6 = 0;
    TXTextLayout::computeLineOffsets((PCString *)this, a2, v2 + 1, v3, &v6, &v5);
    return v6;
  }
  else if (a2)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 0;
  }
}

uint64_t TXTextLayout::writeBody(TXTextLayout *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10 = (double *)((char *)this + 52256);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&TXLayoutScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 508);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 152))(a2, 1, *(unsigned __int8 *)v10);
  if (*(unsigned char *)v10)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 2, v10[1]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 3, v10[2]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 4, v10[3]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 5, v10[4]);
  }
  unsigned int v11 = (char *)this + 61200;
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 509);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 152))(a2, 1, *((unsigned __int8 *)v10 + 1));
  if (*((unsigned char *)v10 + 1))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 2, v10[5]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 3, v10[6]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 4, v10[7]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 5, v10[8]);
  }
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 510);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 152))(a2, 1, *((unsigned __int8 *)v10 + 2));
  if (*((unsigned char *)v10 + 2))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 2, v10[9]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 3, v10[10]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 4, v10[11]);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 5, v10[12]);
  }
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 511);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 152))(a2, 6, *v11);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 512);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 152))(a2, 7, *((unsigned __int8 *)this + 63760));
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v12 = (uint64_t *)*((void *)this + 2378);
  uint64_t v13 = (uint64_t *)*((void *)this + 2379);
  while (v12 != v13)
  {
    uint64_t v14 = *v12++;
    (*(void (**)(uint64_t, PCSerializerWriteStream *, void))(*(void *)v14 + 16))(v14, a2, 0);
    (*(void (**)(uint64_t, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v14 + 24))(v14, a2, 0, 1, a5);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  double v15 = (void *)*((void *)this + 2419);
  if (v15 != (void *)((char *)this + 19344))
  {
    do
    {
      double v16 = (void *)v15[2];
      uint64_t v17 = v16[6];
      v16 += 6;
      (*(void (**)(void *, PCSerializerWriteStream *, void))(v17 + 16))(v16, a2, 0);
      (*(void (**)(void *, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*v16 + 24))(v16, a2, 0, 1, a5);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      double v15 = (void *)v15[1];
    }
    while (v15 != (void *)((char *)this + 19344));
    if (!this) {
      goto LABEL_32;
    }
  }
  {
LABEL_32:
    for (uint64_t i = (void *)*((void *)this + 2422); i != (void *)((char *)this + 19368); uint64_t i = (void *)i[1])
    {
      double v19 = (_DWORD *)i[2];
      if (v19[7] || *v11)
      {
        (*(void (**)(void, PCSerializerWriteStream *, void))(*(void *)v19 + 16))(i[2], a2, 0);
        (*(void (**)(_DWORD *, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v19 + 24))(v19, a2, 0, 1, a5);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      }
    }
    double v20 = (TXTextLayout *)*((void *)this + 2403);
    if (v20 != (TXTextLayout *)((char *)this + 19232))
    {
      do
      {
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 513);
        (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 168))(a2, 9, *((void *)v20 + 4));
        (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 10, *((double *)v20 + 5));
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
        double v21 = (TXTextLayout *)*((void *)v20 + 1);
        if (v21)
        {
          do
          {
            double v22 = v21;
            double v21 = *(TXTextLayout **)v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            double v22 = (TXTextLayout *)*((void *)v20 + 2);
            BOOL v23 = *(void *)v22 == (void)v20;
            double v20 = v22;
          }
          while (!v23);
        }
        double v20 = v22;
      }
      while (v22 != (TXTextLayout *)((char *)this + 19232));
    }
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);

  return OZElement::writeBody((OZElement *)((char *)this + 200), a2, a3, a4, a5);
}

uint64_t non-virtual thunk to'TXTextLayout::writeBody(TXTextLayout *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return TXTextLayout::writeBody((TXTextLayout *)((char *)this - 200), a2, a3, a4, a5);
}

{
  return TXTextLayout::writeBody((TXTextLayout *)((char *)this - 248), a2, a3, a4, a5);
}

void TXTextLayout::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  OZSceneNode::markFactoriesForSerialization(this + 25, a2);
  uint64_t v4 = this + 2418;
  unint64_t v5 = (OZFactory **)this[2419];
  if (v5 != this + 2418)
  {
    do
    {
      unint64_t v6 = v5[2];
      BOOL v7 = (std::__shared_weak_count *)v5[3];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(OZFactory *, PCSerializerWriteStream *, void))(*(void *)v6 + 192))(v6, a2, 0);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      unint64_t v5 = (OZFactory **)v5[1];
    }
    while (v5 != v4);
  }
}

void sub_1B75FED0C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'TXTextLayout::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
}

{
  TXTextLayout::markFactoriesForSerialization(this - 31, a2);
}

uint64_t TXTextLayout::parseBegin(TXTextLayout *this, PCSerializerReadStream *a2)
{
  if ((*(unsigned int (**)(TXTextLayout *))(*(void *)this + 296))(this)
    && (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200))
  {
    uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200);
    OZScene::decNum3DTextObjects(v4);
  }
  *((unsigned char *)this + 52363) = 1;
  TXTextLayout::clearParagraphs(this);
  OZElement::parseBegin((OZElement *)((char *)this + 200), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXLayoutScope);
  LODWORD(v5) = *((_DWORD *)a2 + 26);
  OZChannel::setValue((OZChannel *)((char *)this + 60520), MEMORY[0x1E4F1FA48], (double)v5, 0);
  return 1;
}

uint64_t non-virtual thunk to'TXTextLayout::parseBegin(TXTextLayout *this, PCSerializerReadStream *a2)
{
  return 1;
}

{
  TXTextLayout::parseBegin((TXTextLayout *)((char *)this - 248), a2);
  return 1;
}

uint64_t TXTextLayout::parseEnd(TXTextLayout *this, PCSerializerReadStream *a2)
{
  (*(void (**)(TXTextLayout *))(*(void *)this + 1096))(this);
  if ((*(unsigned int (**)(TXTextLayout *))(*(void *)this + 296))(this)
    && (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200))
  {
    uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200);
    OZScene::incNum3DTextObjects(v4);
  }
  unint64_t v5 = (char *)this + 200;
  OZElement::parseEnd((OZElement *)((char *)this + 200), a2);
  if (!*((void *)this + 2423))
  {
    uint64_t v6 = *((void *)this + 2419);
    uint64_t v7 = *(void *)(v6 + 16);
    BOOL v8 = *(std::__shared_weak_count **)(v6 + 24);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7) {
      operator new();
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  unsigned int v9 = (int *)((char *)this + 60512);
  unsigned int v10 = *((_DWORD *)a2 + 26);
  if (v10 <= 2)
  {
    TXTextLayout::shiftKerningsToLeft((uint64_t **)this);
    unsigned int v10 = *((_DWORD *)a2 + 26);
  }
  if (v10 <= 3
    && OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0) == 1
    && !*v9)
  {
    int v11 = 1;
  }
  else
  {
    int v11 = 2;
  }
  int *v9 = v11;
  unsigned int v12 = *((_DWORD *)a2 + 26);
  if (v12 <= 5)
  {
    if (*((_DWORD *)a2 + 27) <= 6u) {
      *((unsigned char *)this + 63801) = 1;
    }
    if (v12 <= 2
      && (((*(uint64_t (**)(char *))(*(void *)v5 + 1600))((char *)this + 200) & 1) != 0
       || ((*(uint64_t (**)(char *))(*(void *)v5 + 1608))((char *)this + 200) & 1) != 0
       || ((*(uint64_t (**)(char *))(*(void *)v5 + 1624))((char *)this + 200) & 1) != 0
       || OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0) == 2))
    {
      OZChannel::setValue((OZChannel *)((char *)this + 19904), MEMORY[0x1E4F1FA48], 1.0, 0);
    }
  }
  if ((*(unsigned int (**)(char *))(*(void *)v5 + 1864))((char *)this + 200)
    && ((*(uint64_t (**)(char *))(*(void *)v5 + 1888))((char *)this + 200) & 1) == 0)
  {
    OZChannel::setValue((OZChannel *)((char *)this + 19904), MEMORY[0x1E4F1FA48], 1.0, 0);
  }
  OZChannel::setDiscrete((OZChannel *)((char *)this + 52640), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 52792), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 53240), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 53528), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 53680), 0, 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 54128), 0, 0);
  unsigned int v13 = *((_DWORD *)a2 + 26);
  if (v13 < 3 || v13 == 3 && *((_DWORD *)a2 + 27) < 2u || !TXTextLayout::isPathNormalInitialized(this))
  {
    initializeNormalsForPath((TXTextLayout *)((char *)this + 52504));
    initializeNormalsForPath((TXTextLayout *)((char *)this + 53392));
  }
  unsigned int v14 = *((_DWORD *)a2 + 26);
  if (v14 < 5 || v14 == 5 && *((_DWORD *)a2 + 27) <= 1u)
  {
    double v15 = (TXParagraphStyle **)*((void *)this + 2378);
    double v16 = (TXParagraphStyle **)*((void *)this + 2379);
    while (v15 != v16)
    {
      uint64_t v17 = *v15++;
      uint64_t LineSpacingChannel = TXParagraphStyle::getLineSpacingChannel(v17);
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)LineSpacingChannel + 232))(LineSpacingChannel, (char *)this + 22136, 1);
      double v19 = (OZChannelBase *)TXParagraphStyle::getLineSpacingChannel(v17);
      OZChannelBase::setID(v19, 0x194u);
      double v20 = (OZChannelBase *)TXParagraphStyle::getLineSpacingChannel(v17);
      OZChannelBase::resetFlag(v20, 8, 0);
    }
    (*(void (**)(char *, void))(*((void *)this + 2767) + 280))((char *)this + 22136, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 22136), 8, 0);
  }
  return 1;
}

void sub_1B75FF3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL TXTextLayout::isPathNormalInitialized(TXTextLayout *this)
{
  int v2 = (OZChannel *)((char *)this + 52640);
  if (!(*(unsigned int (**)(char *))(*((void *)this + 6580) + 832))((char *)this + 52640)) {
    return 0;
  }
  OZChannel::getKeyframes(v2, 0, &v17);
  unint64_t v3 = (OZChannel *)((char *)this + 52792);
  OZChannel::getKeyframes((OZChannel *)((char *)this + 52792), 0, v16);
  uint64_t v4 = (OZChannel *)((char *)this + 53240);
  OZChannel::getKeyframes(v4, 0, __p);
  unint64_t v5 = (void **)v17;
  if (v18 == v17)
  {
    BOOL v13 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    unsigned int v7 = 1;
    do
    {
      double KeyframeNormal = OZChannel::getKeyframeNormal(v2, v5[v6]);
      double v9 = OZChannel::getKeyframeNormal(v3, *((void **)v16[0] + v6));
      double v10 = OZChannel::getKeyframeNormal(v4, *((void **)__p[0] + v6));
      BOOL v11 = fabs(KeyframeNormal) < 0.0000001;
      if (fabs(v9) >= 0.0000001) {
        BOOL v11 = 0;
      }
      BOOL v12 = fabs(v10) < 0.0000001 && v11;
      if (!v12) {
        break;
      }
      unint64_t v6 = v7;
      unint64_t v5 = (void **)v17;
      ++v7;
    }
    while (v6 < (v18 - (unsigned char *)v17) >> 3);
    BOOL v13 = !v12;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  if (v17)
  {
    double v18 = v17;
    operator delete(v17);
  }
  return v13;
}

void sub_1B75FF5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'TXTextLayout::parseEnd(TXTextLayout *this, PCSerializerReadStream *a2)
{
  return 1;
}

{
  TXTextLayout::parseEnd((TXTextLayout *)((char *)this - 248), a2);
  return 1;
}

uint64_t TXTextLayout::parseElement(TXTextLayout *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCSharedCount::PCSharedCount(&v33);
  uint64_t v32 = 0;
  OZElement::parseElement((OZElement *)((char *)this + 200), a2, a3);
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 <= 499)
  {
    if (v6 == 77)
    {
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)&v32);
      PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v33);
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v32 + 4);
      double v15 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v32);
      if (v15)
      {
        if (v16)
        {
          v30.CMTime var0 = 0;
          uint64_t v31 = 0;
          if (!*((unsigned char *)this + 52363))
          {
            uint64_t v21 = (*(uint64_t (**)(void *, PCSharedCount *, void))(*(void *)v16 + 168))(v16, &v33, HIDWORD(v32));
            std::shared_ptr<TXTextStyle>::reset[abi:ne180100]<TXTextStyle,void>((uint64_t)&v30, v21);
          }
          uint64_t v17 = *((void *)this + 2419);
          double v19 = *(PC_Sp_counted_base **)(v17 + 16);
          double v18 = *(std::__shared_weak_count **)(v17 + 24);
          if (v18)
          {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
            v30.CMTime var0 = v19;
            uint64_t v31 = v18;
            uint64_t v28 = (uint64_t)v19;
            uint64_t v29 = v18;
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            v30.CMTime var0 = v19;
            uint64_t v31 = 0;
            uint64_t v28 = (uint64_t)v19;
            uint64_t v29 = 0;
          }
          (*(void (**)(TXTextLayout *, uint64_t *))(*(void *)this + 272))(this, &v28);
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
          TXTextLayout::clearStyleRuns(this);
          if (*((void *)this + 146))
          {
            OZStyle::unregisterAllMaterials((OZStyle *)v30.var0);
            if (v30.var0) {
              double v22 = (OZObjectManipulator *)((char *)v30.var0 + 16);
            }
            else {
              double v22 = 0;
            }
            OZScene::unregisterObject(*((OZScene **)this + 146), v22);
            OZScene::removeAllDependencies(*((OZScene **)this + 146), *((_DWORD *)v30.var0 + 24));
          }
          OZChannelBase::setID((OZChannelBase *)((char *)v30.var0 + 72), HIDWORD(v32));
          (*(void (**)(char *, PCSharedCount *, void))(*((void *)v30.var0 + 2) + 120))((char *)v30.var0 + 16, &v33, 0);
          OZChannelBase::updateIDGenerator((OZChannelBase *)HIDWORD(v32));
          OZStyle::assignUniqueIDsToAllMaterials((OZChannelBase *)v30.var0);
          if (v30.var0)
          {
            int v23 = *((unsigned __int8 *)this + 52363);
            if (*((unsigned char *)this + 52363))
            {
              RemoveAllMaterialsFromSequenceChannels((TXTextLayout *)((char *)this + 25032));
              TXTextLayout::clearStyleRuns(this);
              *((unsigned char *)this + 52363) = 0;
            }
            TXTextLayout::addStyle((uint64_t)this, (uint64_t)&v30, 0);
            if (v30.var0) {
              BOOL v24 = (PCSerializer *)((char *)v30.var0 + 48);
            }
            else {
              BOOL v24 = 0;
            }
            PCSerializerReadStream::pushHandler(a2, v24);
            if (v23) {
              RemoveAllMaterialsFromSequenceChannels((TXTextLayout *)((char *)this + 25032));
            }
          }
          *((unsigned char *)this + 52363) = 0;
          double v20 = v31;
          if (v31) {
            goto LABEL_61;
          }
        }
      }
    }
    else if (v6 == 110)
    {
      if (PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v33))
      {
        PCString::PCString((PCString *)&v30, "Kerning");
        int v7 = PCString::compare((PCString *)&v33, (const PCString *)&v30);
        PCString::~PCString((PCString *)&v30);
        if (!v7)
        {
          uint64_t v28 = 0;
          if (PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 114, (uint64_t)&v28))
          {
            uint64_t v8 = v28;
            uint64_t v27 = *((int *)this + 14712);
            v30.CMTime var0 = (PC_Sp_counted_base *)&v27;
            double v9 = std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t **)this + 2403, &v27, (uint64_t)&std::piecewise_construct, (uint64_t **)&v30);
LABEL_27:
            v9[5] = v8;
          }
        }
      }
    }
  }
  else
  {
    switch(v6)
    {
      case 500:
        operator new();
      case 501:
        PCSharedCount::PCSharedCount(&v30);
        (*(void (**)(PCStreamElement *, PCSharedCount *))(*(void *)a3 + 16))(a3, &v30);
        TXTextLayout::setString(this, (const PCString *)&v30, 1);
        PCString::~PCString((PCString *)&v30);
        goto LABEL_62;
      case 502:
      case 503:
      case 504:
      case 505:
      case 506:
      case 507:
      case 514:
      case 515:
      case 516:
      case 517:
      case 518:
      case 519:
        goto LABEL_62;
      case 508:
        PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)this + 52256);
        if (!*((unsigned char *)this + 52256)) {
          goto LABEL_62;
        }
        PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)this + 52264);
        PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 3, (uint64_t)this + 52272);
        PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 4, (uint64_t)this + 52280);
        uint64_t v12 = 52288;
        goto LABEL_30;
      case 509:
        PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)this + 52257);
        if (!*((unsigned char *)this + 52257)) {
          goto LABEL_62;
        }
        PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)this + 52296);
        PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 3, (uint64_t)this + 52304);
        PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 4, (uint64_t)this + 52312);
        uint64_t v12 = 52320;
        goto LABEL_30;
      case 510:
        PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)this + 52258);
        if (!*((unsigned char *)this + 52258)) {
          goto LABEL_62;
        }
        PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)this + 52328);
        PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 3, (uint64_t)this + 52336);
        PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 4, (uint64_t)this + 52344);
        uint64_t v12 = 52352;
LABEL_30:
        PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 5, (uint64_t)this + v12);
        goto LABEL_62;
      case 511:
        double v10 = (char *)this + 61200;
        uint64_t v11 = 6;
        goto LABEL_23;
      case 512:
        double v10 = (char *)this + 63760;
        uint64_t v11 = 7;
LABEL_23:
        PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, v11, (uint64_t)v10);
        goto LABEL_62;
      case 513:
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        if (!PCSerializerReadStream::getAttributeAsInt64((uint64_t)a2, (uint64_t)a3, 9, (uint64_t)&v28)
          || !PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 10, (uint64_t)&v27))
        {
          goto LABEL_62;
        }
        uint64_t v8 = v27;
        uint64_t v26 = v28;
        v30.CMTime var0 = (PC_Sp_counted_base *)&v26;
        double v9 = std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t **)this + 2403, &v26, (uint64_t)&std::piecewise_construct, (uint64_t **)&v30);
        goto LABEL_27;
      case 520:
        LODWORD(v28) = 0;
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 7, (uint64_t)&v28);
        uint64_t v13 = *((void *)this + 2419);
        if ((TXTextLayout *)v13 == (TXTextLayout *)((char *)this + 19344)) {
          goto LABEL_19;
        }
        break;
      default:
        if (v6 == 600) {
          ++*((_DWORD *)this + 14712);
        }
        goto LABEL_62;
    }
    while (*(_DWORD *)(*(void *)(v13 + 16) + 96) != v28)
    {
      uint64_t v13 = *(void *)(v13 + 8);
      if ((TXTextLayout *)v13 == (TXTextLayout *)((char *)this + 19344))
      {
LABEL_19:
        unsigned int v14 = 0;
        v30.CMTime var0 = 0;
        uint64_t v31 = 0;
        goto LABEL_38;
      }
    }
    unsigned int v14 = *(std::__shared_weak_count **)(v13 + 24);
    v30.CMTime var0 = *(PC_Sp_counted_base **)(v13 + 16);
    uint64_t v31 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
LABEL_38:
    LODWORD(v27) = 0;
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 9, (uint64_t)&v27);
    LODWORD(v26) = 0;
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 10, (uint64_t)&v26);
    if (v26 || *((unsigned char *)this + 61200)) {
      operator new();
    }
    if (v14)
    {
      double v20 = v14;
LABEL_61:
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
LABEL_62:
  PCString::~PCString((PCString *)&v33);
  return 1;
}

void sub_1B75FFECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14, uint64_t a15, uint64_t a16, PCString a17)
{
}

void std::shared_ptr<TXTextStyle>::reset[abi:ne180100]<TXTextStyle,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<TXTextStyle>::shared_ptr[abi:ne180100]<TXTextStyle,void>(&v2, a2);
}

uint64_t non-virtual thunk to'TXTextLayout::parseElement(TXTextLayout *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

{
  TXTextLayout::parseElement((TXTextLayout *)((char *)this - 248), a2, a3);
  return 1;
}

uint64_t TXTextLayout::centerAnchorPoint(TXTextLayout *this, double a2, int a3)
{
  long long v45 = 0uLL;
  double v46 = 0.0;
  int v6 = (OZTransformNode *)((char *)this + 200);
  if ((*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200)) {
    int v7 = (OZScene *)(*(uint64_t (**)(OZTransformNode *))(*(void *)v6 + 272))(v6);
  }
  else {
    int v7 = (OZScene *)*((void *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
  }
  memset(&v44, 0, sizeof(v44));
  OZScene::getCurrentTime(v7, (__n128 *)&v44);
  OZTransformNode::getPivot((uint64_t)v6, &v45, &v44);
  uint64_t v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E4F1FA48], 0.0);
  if (v9 == a2) {
    double v10 = (OZChannel *)((char *)this + 24728);
  }
  else {
    double v10 = (OZChannel *)((char *)this + 24576);
  }
  OZChannel::getValueAsDouble(v10, v8, 0.0);
  double v12 = v11;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), v8, 0.0);
  if (v13 == a2) {
    unsigned int v14 = (OZChannel *)((char *)this + 24576);
  }
  else {
    unsigned int v14 = (OZChannel *)((char *)this + 24728);
  }
  OZChannel::getValueAsDouble(v14, v8, 0.0);
  double v16 = v15;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), v8, 0.0);
  double v18 = v17;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), v8, 0.0);
  double v20 = v18 - v19;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), v8, 0.0);
  if (v21 == 0.0) {
    int v22 = a3;
  }
  else {
    int v22 = 1;
  }
  double v23 = v12 - v16;
  if (!v22) {
    double v23 = v16 - v12;
  }
  double v24 = v23 * 0.5;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), v8, 0.0);
  if (v25 == 0.0) {
    double v26 = -(v20 * 0.5);
  }
  else {
    double v26 = v20 * 0.5;
  }
  OZTransformNode::setPivot(v6, v26, v24, v46, &v44);
  uint64_t v43 = 0x3FF0000000000000;
  uint64_t v40 = 0x3FF0000000000000;
  uint64_t v37 = 0x3FF0000000000000;
  uint64_t v34 = 0x3FF0000000000000;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  OZRenderState::OZRenderState(&v33);
  v33.var4 = 1;
  (*(void (**)(OZTransformNode *, uint64_t *, OZRenderState *))(*((void *)this + 25) + 1256))(v6, &v34, &v33);
  long long v31 = v45;
  double v32 = v46;
  double v28 = v26;
  double v29 = v24;
  double v30 = v46;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v34, &v28, &v28);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v34, (double *)&v31, (double *)&v31);
  return OZTransformNode::offsetTranslation(v6, v28 - *(double *)&v31, v29 - *((double *)&v31 + 1), v30 - v32, &v44, 1);
}

void TXTextLayout::didFinishInitializing(TXTextLayout *this, int a2)
{
  int v22 = (OZChannel *)((char *)this + 54128);
  unint64_t v3 = (OZChannel *)((char *)this + 53240);
  uint64_t v4 = (char *)this + 19344;
  uint64_t v5 = *((void *)this + 2419);
  if ((TXTextLayout *)v5 != (TXTextLayout *)((char *)this + 19344))
  {
    int v7 = (char *)this + 200;
    do
    {
      uint64_t v8 = (OZChannelObjectRootBase *)(*(uint64_t (**)(void))(**(void **)(v5 + 16) + 112))(*(void *)(v5 + 16));
      (*(void (**)(CMTime *__return_ptr, char *))(*(void *)v7 + 1128))(&v24, (char *)this + 200);
      OZChannelObjectRootBase::setTimeExtent(v8, (const PCTimeRange *)&v24, a2);
      OZChannelObjectRootBase::getTimeOffset((__n128 *)this + 16, (__n128 *)&v24);
      __n128 v9 = OZChannelObjectRootBase::setTimeOffset((__n128 *)v8, &v24, a2);
      uint64_t v10 = *(void *)(v5 + 16);
      double v12 = *(uint64_t **)(v10 + 480);
      double v11 = *(uint64_t **)(v10 + 488);
      while (v12 != v11)
      {
        double v13 = (OZChannelObjectRootBase *)(*(uint64_t (**)(__n128))(*(void *)*v12 + 208))(v9);
        (*(void (**)(CMTime *__return_ptr, char *))(*(void *)v7 + 1128))(&v24, (char *)this + 200);
        OZChannelObjectRootBase::setTimeExtent(v13, (const PCTimeRange *)&v24, 0);
        uint64_t v14 = *v12++;
        double v15 = (__n128 *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 208))(v14);
        OZChannelObjectRootBase::getTimeOffset((__n128 *)this + 16, (__n128 *)&v24);
        __n128 v9 = OZChannelObjectRootBase::setTimeOffset(v15, &v24, 0);
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while ((char *)v5 != v4);
  }
  OZChannelPosition3D::willBeModified((os_unfair_lock_s *)this + 13348, 1);
  OZChannelPosition3D::willBeModified((os_unfair_lock_s *)this + 13126, 1);
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 53528));
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 53680));
  OZChannel::reparametrizeChannel(v22);
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 52640));
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 52792));
  OZChannel::reparametrizeChannel(v3);
  if (!(*((unsigned int (**)(OZChannel *))v3->var0 + 104))(v3))
  {
    OZChannel::getKeyframes((OZChannel *)((char *)this + 52640), 0, &v24);
    CMTimeValue value = *(void ***)&v24.timescale;
    if (*(void *)&v24.timescale != v24.value)
    {
      unint64_t v17 = 0;
      unsigned int v18 = 1;
      CMTimeValue value = (void **)v24.value;
      do
      {
        OZChannel::getKeyframe((OZChannel *)((char *)this + 52640), value[v17], &v23, 0);
        OZChannel::setKeyframe(v3, &v23);
        unint64_t v17 = v18;
        CMTimeValue value = (void **)v24.value;
        ++v18;
      }
      while (v17 < (*(void *)&v24.timescale - v24.value) >> 3);
    }
    if (value)
    {
      *(void *)&v24.timescale = value;
      operator delete(value);
    }
  }
  if (!(*((unsigned int (**)(OZChannel *))v22->var0 + 104))(v22))
  {
    OZChannel::getKeyframes((OZChannel *)((char *)this + 53528), 0, &v24);
    double v19 = *(void ***)&v24.timescale;
    if (*(void *)&v24.timescale != v24.value)
    {
      unint64_t v20 = 0;
      unsigned int v21 = 1;
      double v19 = (void **)v24.value;
      do
      {
        OZChannel::getKeyframe((OZChannel *)((char *)this + 53528), v19[v20], &v23, 0);
        OZChannel::setKeyframe(v22, &v23);
        unint64_t v20 = v21;
        double v19 = (void **)v24.value;
        ++v21;
      }
      while (v20 < (*(void *)&v24.timescale - v24.value) >> 3);
    }
    if (v19)
    {
      *(void *)&v24.timescale = v19;
      operator delete(v19);
    }
  }
  *((unsigned char *)this + 52360) = 1;
  TXTextLayout::interlockMargins(this, 1);
  TXTextLayout::updateShrinkToMarginsChannel(this);
}

void sub_1B7600758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *TXTextLayout::validateStyleRunAndParagraphRanges(void *this)
{
  uint64_t v1 = (uint64_t *)this[2378];
  long long v2 = (uint64_t *)this[2379];
  if (v1 == v2)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *v1++;
      v3 += *(void *)(v4 + 864);
    }
    while (v1 != v2);
  }
  uint64_t v5 = (void *)this[2422];
  if (v5 != this + 2421)
  {
    unsigned int v6 = 0;
    do
    {
      uint64_t v8 = v5 + 1;
      uint64_t v5 = (void *)v5[1];
      uint64_t v7 = v8[1];
      int v9 = *(_DWORD *)(v7 + 28);
      v6 += v9;
    }
    while (v5 != this + 2421);
    if (v3 > v6) {
      *(_DWORD *)(v7 + 28) = v3 - v6 + v9;
    }
  }
  return this;
}

uint64_t TXTextLayout::didFinishLoadingIntoScene(TXTextLayout *this)
{
  long long v2 = (char *)this + 18988;
  OZElement::didFinishLoadingIntoScene((OZElement *)((char *)this + 200));
  (*(void (**)(TXTextLayout *))(*(void *)this + 1096))(this);
  *((unsigned char *)this + 63761) = 0;
  if (*((void *)this + 2379) == *((void *)this + 2378)) {
    TXTextLayout::createParagraphStylesFromNewLines(this);
  }
  TXTextLayout::rebuildParagraphStyles((PCString *)this);
  unint64_t v3 = (const CMTime *)MEMORY[0x1E4F1FA48];
  TXTextLayout::updateDisplayString((PCString *)this, MEMORY[0x1E4F1FA48]);
  TXTextLayout::validateStyleRunAndParagraphRanges(this);
  TXTextLayout::updateLineBreaksByHardLine(this);
  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
  TXTextLayout::didFinishInitializing(this, 0);
  TXTextLayout::selectAll(this);
  (*(void (**)(TXTextLayout *, uint64_t))(*(void *)this + 336))(this, 1);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), v3, 0.0);
  TXTextLayout::cacheMargins(this, ValueAsInt);
  unsigned char *v2 = 1;
  OZRenderState::OZRenderState(&v6);
  return TXTextLayout::doLayout(this, &v6, 0);
}

uint64_t non-virtual thunk to'TXTextLayout::didFinishLoadingIntoScene(TXTextLayout *this)
{
  return TXTextLayout::didFinishLoadingIntoScene((TXTextLayout *)((char *)this - 200));
}

{
  return TXTextLayout::didFinishLoadingIntoScene((TXTextLayout *)((char *)this - 216));
}

void TXTextLayout::didChangeString(PCString *this)
{
  TXTextLayout::computeComposedCharacterIndices(this);
  ((void (*)(PCString *))this->var0[34].data)(this);

  TXTextLayout::updateStringTokenizer((TXTextLayout *)this);
}

void initializeNormalsForPath(OZChannelPosition3D *a1)
{
  long long v2 = (OZChannel *)((char *)a1 + 136);
  if ((*(unsigned int (**)(char *))(*((void *)a1 + 17) + 832))((char *)a1 + 136) >= 2)
  {
    OZChannel::getKeyframes(v2, 0, &v10);
    unint64_t v3 = (OZChannel *)((char *)a1 + 288);
    OZChannel::getKeyframes((OZChannel *)((char *)a1 + 288), 0, v9);
    uint64_t v4 = (OZChannel *)((char *)a1 + 736);
    OZChannel::getKeyframes(v4, 0, __p);
    uint64_t v5 = (void **)v10;
    if (v11 != v10)
    {
      unint64_t v6 = 0;
      unsigned int v7 = 1;
      do
      {
        OZChannel::setKeyframeNormal(v2, v5[v6], 0.0);
        OZChannel::setKeyframeNormal(v3, *((void **)v9[0] + v6), 1.0);
        OZChannel::setKeyframeNormal(v4, *((void **)__p[0] + v6), 0.0);
        unint64_t v6 = v7;
        uint64_t v5 = (void **)v10;
        ++v7;
      }
      while (v6 < (v11 - (unsigned char *)v10) >> 3);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v9[0])
    {
      v9[1] = v9[0];
      operator delete(v9[0]);
    }
    if (v10)
    {
      double v11 = v10;
      operator delete(v10);
    }
  }
}

void sub_1B7600B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZCurrentThread::getInstance(OZCurrentThread *this)
{
  if (!OZCurrentThread::_instance) {
    operator new();
  }
  return OZCurrentThread::_instance;
}

void sub_1B7600BA8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

BOOL PCMatrix44Tmpl<double>::getTransformation(long long *a1, uint64_t a2)
{
  uint64_t v44 = 0x3FF0000000000000;
  long double v41 = 1.0;
  long double v38 = 1.0;
  double v35 = 1.0;
  long long v36 = 0u;
  long long __x = 0u;
  long long v39 = 0u;
  long long __y = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  BOOL PartialTransformation = PCMatrix44Tmpl<double>::getPartialTransformation(a1, a2, (uint64_t)&v35);
  if (PartialTransformation)
  {
    switch(*(_DWORD *)(a2 + 48))
    {
      case 0:
        double v11 = asin(-*(double *)&__y);
        *(double *)(a2 + 64) = v11;
        double v12 = cos(v11);
        if (v12 > -0.0000001 && v12 < 0.0000001)
        {
          long double v13 = v38;
          double v14 = -*(double *)&v39;
          goto LABEL_24;
        }
        *(long double *)(a2 + 56) = atan2(*((long double *)&__y + 1), v41);
        double v29 = *((double *)&__x + 1);
        long double v30 = v35;
        goto LABEL_34;
      case 1:
        double v15 = asin(*((long double *)&__x + 1));
        *(double *)(a2 + 72) = v15;
        double v16 = cos(v15);
        if (v16 > -0.0000001 && v16 < 0.0000001)
        {
          double v17 = *((double *)&__y + 1);
          long double v18 = v41;
          goto LABEL_16;
        }
        *(long double *)(a2 + 56) = atan2(-*(double *)&v39, v38);
        long double v31 = v35;
        double v32 = -*(double *)&__y;
        goto LABEL_30;
      case 2:
        double v19 = asin(*((long double *)&__y + 1));
        *(double *)(a2 + 56) = v19;
        double v20 = cos(v19);
        if (v20 > -0.0000001 && v20 < 0.0000001)
        {
          double v21 = *((double *)&v36 + 1);
          long double v22 = v35;
          goto LABEL_20;
        }
        *(long double *)(a2 + 64) = atan2(-*(double *)&__y, v41);
        double v33 = *(double *)&v36;
        long double v30 = v38;
        goto LABEL_33;
      case 3:
        double v23 = asin(-*(double *)&v36);
        *(double *)(a2 + 72) = v23;
        double v24 = cos(v23);
        if (v24 <= -0.0000001 || v24 >= 0.0000001)
        {
          *(long double *)(a2 + 56) = atan2(*((long double *)&__y + 1), v38);
          double v32 = *((double *)&v36 + 1);
          long double v31 = v35;
LABEL_30:
          *(long double *)(a2 + 64) = atan2(v32, v31);
        }
        else
        {
          long double v18 = v41;
          double v17 = -*(double *)&v39;
LABEL_16:
          *(long double *)(a2 + 56) = atan2(v17, v18);
          *(void *)(a2 + 64) = 0;
        }
        return PartialTransformation;
      case 4:
        double v25 = asin(-*(double *)&v39);
        *(double *)(a2 + 56) = v25;
        double v26 = cos(v25);
        if (v26 <= -0.0000001 || v26 >= 0.0000001)
        {
          *(long double *)(a2 + 64) = atan2(*((long double *)&v36 + 1), v41);
          double v29 = *((double *)&__x + 1);
          long double v30 = v38;
          goto LABEL_34;
        }
        long double v22 = v35;
        double v21 = -*(double *)&__y;
LABEL_20:
        *(long double *)(a2 + 64) = atan2(v21, v22);
        goto LABEL_25;
      case 5:
        double v27 = asin(*((long double *)&v36 + 1));
        *(double *)(a2 + 64) = v27;
        double v28 = cos(v27);
        if (v28 <= -0.0000001 || v28 >= 0.0000001)
        {
          *(long double *)(a2 + 56) = atan2(-*(double *)&v39, v41);
          long double v30 = v35;
          double v33 = *(double *)&v36;
LABEL_33:
          double v29 = -v33;
LABEL_34:
          *(long double *)(a2 + 72) = atan2(v29, v30);
        }
        else
        {
          double v14 = *((double *)&__y + 1);
          long double v13 = v38;
LABEL_24:
          *(long double *)(a2 + 56) = atan2(v14, v13);
LABEL_25:
          *(void *)(a2 + 72) = 0;
        }
        break;
      default:
        PCPrint("File %s, line %d should not have been reached:\n\t", v3, v4, v5, v6, v7, v8, v9, (char)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ProCore/PCMatrix44.h");
        pcAbortImpl();
    }
  }
  return PartialTransformation;
}

void TXTextLayout::allowDrag(TXTextLayout *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  *a5 = 0;
  if (!lpsrc)
  {
LABEL_16:
    OZElement::allowDrag((OZElement *)((char *)this + 200), lpsrc, a3, a4, a5, a6, a7);
    return;
  }
  double v19 = a6;
  unsigned int v20 = a4;
  if (a7 != 1 && v15) {
    return;
  }
  if (a7 != 1
    || !v12
    || (OZChannelBase *)(*(uint64_t (**)(char *))(*((void *)this + 25) + 640))((char *)this + 200) != a3)
  {
    if (a7 == 1 && v13)
    {
      *a5 = v20 & 1;
      return;
    }
    a4 = v20;
    a6 = v19;
    if (v14)
    {
      ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(a3);
      if (ObjectManipulator)
      {
        double v17 = ObjectManipulator;
        {
          v18();
        }
      }
      return;
    }
    goto LABEL_16;
  }
  TXTextLayout::getCurrentStyleForInsertion((uint64_t)this, &v21);
  if (v21 && v12 != a3) {
    *a5 = v20 & 1;
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
}

void non-virtual thunk to'TXTextLayout::allowDrag(TXTextLayout *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
}

{
  TXTextLayout::allowDrag((TXTextLayout *)((char *)this - 216), a2, a3, a4, a5, a6, a7);
}

uint64_t TXTextLayout::prepareForDragOperation()
{
  return 1;
}

uint64_t non-virtual thunk to'TXTextLayout::prepareForDragOperation()
{
  return 1;
}

{
  return 1;
}

uint64_t TXTextLayout::performDragOperation(OZChannelBase *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  if (lpsrc)
  {
  }
  else
  {
    double v15 = 0;
    double v14 = 0;
    double v16 = 0;
  }
  p_var11 = (OZElement *)&this[1].var11;
  if (((uint64_t (*)(__CFString **))this[1].var11[8].data)(&this[1].var11)) {
    double v120 = (OZDocument **)(*(uint64_t (**)(__CFString **))(*(void *)p_var11 + 272))(&this[1].var11);
  }
  else {
    double v120 = (OZDocument **)*((void *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
  }
  unint64_t v18 = *((void *)lpsrc + 1);
  *(_OWORD *)&v128[0].CMTime var0 = xmmword_1B7E78280;
  int isKindOfClass = OZFactory::isKindOfClass(v18, (int32x4_t *)v128);
  if (v15) {
    int v20 = 1;
  }
  else {
    int v20 = isKindOfClass;
  }
  if (v20 == 1) {
    OZDocument::postNotification(v120[198], 0x80000);
  }
  if (a6 == 1 && v14)
  {
    if (a3) {
    else
    }
      uint64_t v21 = 0;
    uint64_t v58 = (uint64_t)v120[198];
    PCURL::PCURL((PCURL *)v128, @"Undo Gradient Change");
    OZDocument::startCaptureModifiedChannels(v58, v128);
    PCString::~PCString(v128);
    if (v21)
    {
      int v59 = v21[30];
      OZChannelFolder::operator=((uint64_t)v21);
      OZChannelFolder::operator=((uint64_t)(v21 + 32));
      OZChannelFolder::operator=((uint64_t)(v21 + 64));
      OZChannelBase::operator=((uint64_t)(v21 + 96), (uint64_t)(v14 + 48));
      OZChannelBase::operator=((uint64_t)(v21 + 134), (uint64_t)(v14 + 67));
      int v60 = *((_DWORD *)v14 + 198);
      *((unsigned char *)v21 + 796) = *((unsigned char *)v14 + 796);
      v21[198] = v60;
      OZChannelFolder::setFoldFlags((OZChannelFolder *)v21, v59);
    }
    else
    {
      unsigned int var13 = this[171].var13;
      unsigned int var13_high = HIDWORD(this[171].var13);
      unsigned int v64 = var13;
      if (var13 != var13_high)
      {
        unsigned int v65 = var13_high - var13;
        unsigned int v67 = var13 - var13_high;
        BOOL v66 = var13 > var13_high;
        if (var13 >= var13_high) {
          unsigned int var13 = HIDWORD(this[171].var13);
        }
        if (v66) {
          unsigned int v65 = v67;
        }
        v128[0].CMTime var0 = (__CFString *)__PAIR64__(v65, var13);
        TXTextLayout::splitStyleRunsInRange((Li3DEngineScene *)this, (unsigned int *)v128);
        unsigned int v64 = this[171].var13;
        unsigned int var13 = HIDWORD(this[171].var13);
      }
      v128[0].CMTime var0 = (__CFString *)v128;
      v128[1].CMTime var0 = (__CFString *)v128;
      uint64_t v129 = 0;
      unsigned int v68 = var13 - v64;
      unsigned int v70 = v64 - var13;
      BOOL v69 = v64 > var13;
      if (v64 < var13) {
        unsigned int var13 = v64;
      }
      if (v69) {
        unsigned int v71 = v70;
      }
      else {
        unsigned int v71 = v68;
      }
      v130.n128_u64[0] = __PAIR64__(v71, var13);
      TXTextLayout::getStylesInRange(this, (uint64_t *)v128, &v130);
      for (uint64_t i = (PCString *)v128[1].var0; i != v128; uint64_t i = (PCString *)i[1].var0)
      {
        OZChannel::setValue((OZChannel *)&i[2].var0[190].info, MEMORY[0x1E4F1FA48], 1.0, 0);
        CMTime var0 = i[2].var0;
        if (&var0[229].length != v14)
        {
          int data = (int)var0[233].data;
          OZChannelFolder::operator=((uint64_t)&var0[229].length);
          OZChannelFolder::operator=((uint64_t)&var0[233].length);
          OZChannelFolder::operator=((uint64_t)&var0[237].length);
          OZChannelBase::operator=((uint64_t)&var0[241].length, (uint64_t)(v14 + 48));
          OZChannelBase::operator=((uint64_t)&var0[246].data, (uint64_t)(v14 + 67));
          int v75 = *((_DWORD *)v14 + 198);
          BYTE4(var0[254].data) = *((unsigned char *)v14 + 796);
          LODWORD(var0[254].data) = v75;
          OZChannelFolder::setFoldFlags((OZChannelFolder *)&var0[229].length, data);
        }
      }
      std::__list_imp<std::shared_ptr<TXTextStyle>>::clear((uint64_t *)v128);
    }
    OZDocument::endCaptureModifiedChannels((OZChannelBase *)v120[198], v61);
    return 1;
  }
  uint64_t v118 = (TXTextLayout *)this;
  if (a6 == 1 && v15)
  {
    ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(a3);
    if (!ObjectManipulator
    {
      CMTime v76 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
      OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v128, v76);
      TXTextLayout::removeMaterialFromSequenceBehaviors(this, 0);
      TXSequenceChannels::removeMaterialChannelsAtIndex((TXSequenceChannels *)&this[223].var7, 0);
      var11 = this[172].var11;
      if (var11 != (__CFString *)&this[172].var10)
      {
        double v78 = (const CMTime *)MEMORY[0x1E4F1FA48];
        do
        {
          CMTime v79 = var11->data;
          int32x4_t v80 = (OZMaterialBase **)*((void *)v79 + 60);
          if (*((OZMaterialBase ***)v79 + 61) == v80) {
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v81 = *v80;
          unsigned int v82 = *((_DWORD *)*v80 + 44);
          (*(void (**)(OZMaterialBase *, char *))(*(void *)*v80 + 80))(*v80, v15);
          long long v83 = (OZChannelBase *)(*(uint64_t (**)(OZMaterialBase *))(*(void *)v81 + 208))(v81);
          OZChannelBase::setID(v83, v82);
          OZChannel::setValue((OZChannel *)((char *)v81 + 568), v78, 31.0, 0);
          OZStyle::didSetFacetAssignmentForMaterial((OZStyle *)var11->data, v81);
          var11 = (__CFString *)var11->info;
        }
        while (var11 != (__CFString *)&this[172].var10);
      }
      OZChannel::getValueAsInt((OZChannel *)(v15 + 720), MEMORY[0x1E4F1FA48], 0.0);
      TXSequenceChannels::addMaterialChannels((TXSequenceChannels *)&this[223].var7, (OZMaterialBase *)v15, 0);
      TXTextLayout::addMaterialToSequenceBehaviors(this, (OZMaterialBase *)v15, 0);
      OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v128);
      return 1;
    }
    char v115 = a7;
    uint64_t v121 = a8;
    p_var10 = (__CFString *)&this[172].var10;
    double v25 = this[172].var11;
    if (v25 == (__CFString *)&this[172].var10)
    {
      a8 = v121;
    }
    else
    {
      double v26 = v23;
      do
      {
        double v28 = v25->data;
        CFIndex length = (std::__shared_weak_count *)v25->length;
        if (length) {
          atomic_fetch_add_explicit(&length->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        double v29 = (void **)*((void *)v28 + 60);
        long double v30 = (void **)*((void *)v28 + 61);
        if (v29 == v30)
        {
LABEL_28:
          uint64_t v31 = 0xFFFFFFFFLL;
        }
        else
        {
          uint64_t v31 = 0;
          while (*v29 != v26)
          {
            ++v29;
            uint64_t v31 = (v31 + 1);
            if (v29 == v30) {
              goto LABEL_28;
            }
          }
        }
        if (length) {
          std::__shared_weak_count::__release_shared[abi:ne180100](length);
        }
        double v25 = (__CFString *)v25->info;
      }
      while (v25 != p_var10 && v31 == -1);
      a8 = v121;
      if (v31 != -1)
      {
        double v33 = this;
        TXTextLayout::removeMaterialFromSequenceBehaviors(this, v31);
        TXSequenceChannels::removeMaterialChannelsAtIndex((TXSequenceChannels *)&this[223].var7, v31);
        uint64_t v34 = this[172].var11;
        double v35 = v34->data;
        uint64_t v36 = *((void *)v35 + 60);
        if ((int)v31 >= (unint64_t)((*((void *)v35 + 61) - v36) >> 3)) {
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v37 = *(void *)(v36 + 8 * (int)v31);
        Name = (const PCString *)OZObjectManipulator::getName((OZObjectManipulator *)(v15 + 16));
        PCString::PCString(v128, Name);
        unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v37 + 720), MEMORY[0x1E4F1FA48], 0.0);
        OZMaterialBase::setSequenceID((OZMaterialBase *)v15, ValueAsInt);
        if (v34 != p_var10)
        {
          uint64_t v40 = (const CMTime *)MEMORY[0x1E4F1FA48];
          do
          {
            long double v41 = v34->data;
            long long v42 = (std::__shared_weak_count *)v34->length;
            if (v42) {
              atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v43 = *((void *)v41 + 60);
            if ((int)v31 >= (unint64_t)((*((void *)v41 + 61) - v43) >> 3)) {
              std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v44 = *(void *)(v43 + 8 * (int)v31);
            unsigned int v45 = OZChannel::getValueAsInt((OZChannel *)(v44 + 568), v40, 0.0);
            (*(void (**)(uint64_t, char *))(*(void *)v44 + 336))(v44, v15);
            OZChannel::setValue((OZChannel *)(v44 + 568), v40, (double)v45, 0);
            if (v42) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v42);
            }
            uint64_t v34 = (__CFString *)v34->info;
            double v33 = (OZChannelBase *)v118;
          }
          while (v34 != p_var10);
        }
        OZChannel::getValueAsInt((OZChannel *)(v15 + 720), MEMORY[0x1E4F1FA48], 0.0);
        TXSequenceChannels::addMaterialChannels((TXTextLayout *)((char *)v118 + 25032), (OZMaterialBase *)v15, v31);
        TXTextLayout::addMaterialToSequenceBehaviors(v33, (OZMaterialBase *)v15, v31);
        (*((void (**)(OZChannelBase *, PCString *, uint64_t, void, uint64_t))v33->var0 + 129))(v33, v128, v31, 0, 1);
        PCString::~PCString(v128);
        return 1;
      }
    }
    return OZElement::performDragOperation(p_var11, lpsrc, a3, a4, a5, a6, v115, a8);
  }
  char v115 = a7;
  if (v16)
  {
    double v46 = (const void *)OZChannelBase::getObjectManipulator(a3);
    __n128 v47 = v46;
    if (v46)
    {
      if (v48)
      {
        CMTime v49 = v48;
        if (a3)
        {
          uint64_t v122 = v50;
          if (v122)
          {
            double v52 = v51;
            if (v51)
            {
              uint64_t v53 = OZChannelBase::getObjectManipulator(v122);
              uint64_t v54 = v53 - 16;
              if (!v53) {
                uint64_t v54 = 0;
              }
              uint64_t v55 = *(void *)(v54 + 1280);
              if (v55) {
                uint64_t v56 = v55 - 16;
              }
              else {
                uint64_t v56 = 0;
              }
              if (*(OZChannelBase **)(v56 + 48944) == this)
              {
                if ((*(uint64_t (**)(OZElement *))(*(void *)p_var11 + 272))(p_var11)) {
                  uint64_t v57 = (*(uint64_t (**)(OZElement *))(*(void *)p_var11 + 272))(p_var11);
                }
                else {
                  uint64_t v57 = *((void *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
                }
                uint64_t v103 = *(void *)(v57 + 1584);
                PCURL::PCURL((PCURL *)v128, @"Undo Material Change");
                OZDocument::startCaptureModifiedChannels(v103, v128);
                PCString::~PCString(v128);
                uint64_t v104 = v49[160];
                uint64_t v105 = v104 - 16;
                if (!v104) {
                  uint64_t v105 = 0;
                }
                long long v106 = *(void ***)(v105 + 480);
                uint64_t v107 = *(void ***)(v105 + 488);
                if (v106 == v107)
                {
                  unsigned int v108 = -1;
                  long long v109 = v122;
                }
                else
                {
                  unsigned int v108 = 0;
                  long long v109 = v122;
                  while (*v106 != v49)
                  {
                    ++v106;
                    ++v108;
                    if (v106 == v107)
                    {
                      unsigned int v108 = -1;
                      break;
                    }
                  }
                }
                uint64_t v110 = (OZMaterialLayersFolder *)(v49 + 164);
                unsigned int v111 = OZMaterialLayersFolder::indexOfDescendant((OZMaterialLayersFolder *)(v49 + 164), v109);
                unsigned int v112 = OZMaterialLayersFolder::indexOfDescendant(v110, v52);
                TXTextLayout::moveMaterialLayer((TXTextLayout *)this, v111, v112, v108, a5);
                OZDocument::endCaptureModifiedChannels(*(OZChannelBase **)(v57 + 1584), v113);
              }
              return 1;
            }
          }
        }
        (*(void (**)(void))(v90 + 328))();
      }
    }
    return OZElement::performDragOperation(p_var11, lpsrc, a3, a4, a5, a6, v115, a8);
  }
  if (!OZChannelBase::isObjectRef(this)) {
    return OZElement::performDragOperation(p_var11, lpsrc, a3, a4, a5, a6, v115, a8);
  }
  if (!v85) {
    return OZElement::performDragOperation(p_var11, lpsrc, a3, a4, a5, a6, v115, a8);
  }
  long long v86 = v85;
  v128[0].CMTime var0 = (__CFString *)v128;
  v128[1].CMTime var0 = (__CFString *)v128;
  uint64_t v129 = 0;
  TXTextLayout::getGlyphSelectedStyles((uint64_t)this, (uint64_t *)v128);
  PCURL::PCURL((PCURL *)&v127, @"Text Style Name");
  PCString::PCString(&v126, &v86->var4);
  PCString::PCString((PCString *)&v130, ".");
  int v87 = PCString::find(&v126, (const PCString *)&v130);
  PCString::~PCString((PCString *)&v130);
  PCSharedCount::PCSharedCount(&v125);
  if (v87 < 1)
  {
    long long v88 = a8;
    BOOL v89 = 0;
  }
  else
  {
    PCString::substrTo(&v126, (v87 - 1), (CFStringRef *)&v130);
    PCString::set((PCString *)&v125, (const PCString *)&v130);
    long long v88 = a8;
    PCString::~PCString((PCString *)&v130);
    BOOL v89 = (int)PCString::find((PCString *)&v125, &v127) >= 0;
  }
  PCSharedCount::PCSharedCount(&v124);
  if (v89)
  {
    PCString::substrFrom(&v126, v87 + 1, (CFStringRef *)&v130);
    PCString::set((PCString *)&v124, (const PCString *)&v130);
    a8 = v88;
    PCString::~PCString((PCString *)&v130);
    PCString::PCString((PCString *)&v130, ".");
    int v91 = PCString::find((PCString *)&v124, (const PCString *)&v130);
    PCString::~PCString((PCString *)&v130);
    if (v91 < 0) {
      goto LABEL_105;
    }
    PCString::substrTo((PCString *)&v124, v91 - 1, (CFStringRef *)&v130);
    PCString::set((PCString *)&v124, (const PCString *)&v130);
  }
  else
  {
    PCString::PCString((PCString *)&v130, "Transform");
    unsigned int v92 = PCString::find(&v126, (const PCString *)&v130);
    PCString::~PCString((PCString *)&v130);
    if ((v92 & 0x80000000) == 0) {
      PCString::erase(&v126, v92, 0xAu);
    }
    PCString::PCString((PCString *)&v130, "Position");
    a8 = v88;
    PCString::PCString(&v131, "Offset");
    if ((PCString::find(&v126, (const PCString *)&v130) & 0x80000000) == 0)
    {
      int v93 = PCString::find(&v126, (const PCString *)&v130);
      unsigned int v94 = PCString::size((PCString *)&v130);
      PCString::replace(&v126, v93, v94, &v131);
    }
    PCString::set((PCString *)&v124, &v126);
    PCString::PCString(&v123, ".");
    int v95 = PCString::find((PCString *)&v124, &v123);
    PCString::~PCString(&v123);
    if ((v95 & 0x80000000) == 0)
    {
      PCString::substrTo((PCString *)&v124, v95 - 1, (CFStringRef *)&v123.var0);
      PCString::set((PCString *)&v124, &v123);
      PCString::~PCString(&v123);
    }
    PCString::~PCString(&v131);
  }
  PCString::~PCString((PCString *)&v130);
LABEL_105:
  long long v96 = (PCString *)v128[1].var0;
  if ((PCString *)v128[1].var0 == v128)
  {
    char v114 = 0;
    BOOL v119 = 1;
  }
  else
  {
    char v114 = 0;
    do
    {
      uint64_t v97 = (*((uint64_t (**)(__CFString *))v96[2].var0->isa + 14))(v96[2].var0);
      PCString::PCString(&v131, (const PCString *)(v97 + 32));
      PCString::PCString((PCString *)&v130, &v131);
      PCString::append((PCString *)&v130, ".");
      PCString::PCString(&v123, (const PCString *)&v130);
      PCString::append(&v123, (const PCString *)&v124);
      PCString::~PCString((PCString *)&v130);
      MatchingCompoundChannel = (OZChannelFolder *)OZChannelFolder::findMatchingCompoundChannel((OZChannelFolder *)v97, &v123);
      if (MatchingCompoundChannel) {
        MatchingDescendant = OZChannelFolder::findMatchingDescendant(MatchingCompoundChannel, v86);
      }
      else {
        MatchingDescendant = OZChannelFolder::findMatchingDescendant((OZChannelFolder *)v97, v86);
      }
      a3 = (OZChannelBase *)MatchingDescendant;
      BOOL v119 = MatchingDescendant != 0;
      if (MatchingDescendant)
      {
        if (!v86->var6)
        {
          if (v100)
          {
            if (v101) {
              OZChannel::setInfo(v100, v101[16]);
            }
          }
        }
        PCSharedCount::PCSharedCount((PCSharedCount *)&v130);
        (*((void (**)(OZChannelBase *, __n128 *))a3->var0 + 43))(a3, &v130);
        PCString::~PCString((PCString *)&v130);
        if ((v115 & 2) != 0)
        {
          __n128 CurrentTime = OZScene::getCurrentTime((OZScene *)v120, &v130);
          (*((void (**)(OZChannelBase *, __n128 *, const OZChannelBase *, __n128))a3->var0 + 38))(a3, &v130, v86, CurrentTime);
        }
        else
        {
          OZChannelBase::operator=((uint64_t)a3, (uint64_t)v86);
        }
        (*((void (**)(OZChannelBase *))this->var0 + 68))(this);
        OZDocument::postNotification(v120[198], 8);
        char v114 = 1;
      }
      PCString::~PCString(&v123);
      PCString::~PCString(&v131);
      if (!a3) {
        break;
      }
      long long v96 = (PCString *)v96[1].var0;
    }
    while (v96 != v128);
  }
  PCString::~PCString((PCString *)&v124);
  PCString::~PCString((PCString *)&v125);
  PCString::~PCString(&v126);
  PCString::~PCString(&v127);
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear((uint64_t *)v128);
  if (v119)
  {
    if (v114) {
      return 1;
    }
    return OZElement::performDragOperation(p_var11, lpsrc, a3, a4, a5, a6, v115, a8);
  }
  return 0;
}

void sub_1B7602308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14, PCString a15, PCString a16, PCString a17, PCString a18, PCString a19, uint64_t a20,uint64_t a21,PCString a22)
{
}

void *TXTextLayout::addMaterialToSequenceBehaviors(void *this, OZMaterialBase *a2, unsigned int a3)
{
  uint64_t v3 = this + 150;
  uint64_t v4 = (void *)this[151];
  if (v4 != this + 150)
  {
    do
    {
      this = (void *)v4[2];
      if (this)
      {
        if (this) {
          this = TXSequenceBehavior::addMaterial((TXSequenceBehavior *)this, a2, a3);
        }
      }
      uint64_t v4 = (void *)v4[1];
    }
    while (v4 != v3);
  }
  return this;
}

char *TXTextLayout::moveMaterialLayer(TXTextLayout *this, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v10 = (char *)this + 19344;
  double v11 = (char *)*((void *)this + 2419);
  if (v11 != (char *)this + 19344)
  {
    do
    {
      uint64_t v12 = *((void *)v11 + 2);
      uint64_t v13 = *(void *)(v12 + 480);
      if (a4 >= (unint64_t)((*(void *)(v12 + 488) - v13) >> 3)) {
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      }
      double v14 = *(void **)(v13 + 8 * a4);
      if (v14) {
      OZLayeredMaterial::moveMaterialLayer((OZLayeredMaterial *)v14, a2, a3, a5);
      }
      double v11 = (char *)*((void *)v11 + 1);
    }
    while (v11 != v10);
  }
  uint64_t result = TXSequenceChannels::moveMaterialLayerChannels((TXTextLayout *)((char *)this + 25032), a2, a3, a5, a4);
  for (uint64_t i = (void *)*((void *)this + 151); i != (void *)((char *)this + 1200); uint64_t i = (void *)i[1])
  {
    uint64_t result = (char *)i[2];
    if (result)
    {
      if (result) {
        uint64_t result = TXSequenceChannels::moveMaterialLayerChannels((TXSequenceChannels *)(result + 816), a2, a3, a5, a4);
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'TXTextLayout::performDragOperation(TXTextLayout *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  return TXTextLayout::performDragOperation((OZChannelBase *)((char *)this - 200), a2, a3, a4, a5, a6, a7, a8);
}

{
  return TXTextLayout::performDragOperation((OZChannelBase *)((char *)this - 216), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t TXTextLayout::is3D(TXTextLayout *this)
{
  if (*((void *)this + 2420))
  {
    uint64_t v2 = *((void *)this + 2419);
    uint64_t v3 = *(void *)(v2 + 16);
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 24);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v3 && (OZChannelBase::isEnabled((OZChannelBase *)(v3 + 40520), 0, 1) & 1) != 0)
    {
      uint64_t v5 = 1;
      if (!v4) {
        return v5;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v6 = (char *)this + 1200;
  uint64_t v7 = *((void *)this + 151);
  if ((TXTextLayout *)v7 == (TXTextLayout *)((char *)this + 1200))
  {
    uint64_t v5 = 0;
    if (!v4) {
      return v5;
    }
    goto LABEL_13;
  }
  do
  {
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(v7 + 16) + 616))(*(void *)(v7 + 16), 1046, 0, 0);
    if (v5) {
      break;
    }
    uint64_t v7 = *(void *)(v7 + 8);
  }
  while ((char *)v7 != v6);
  if (v4) {
LABEL_13:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v5;
}

void sub_1B76027FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'TXTextLayout::is3D(TXTextLayout *this)
{
  return TXTextLayout::is3D((TXTextLayout *)((char *)this - 200));
}

uint64_t TXTextLayout::hasSequenceCharacterOffset(TXTextLayout *this)
{
  uint64_t v1 = (char *)this + 1200;
  uint64_t v2 = (void *)*((void *)this + 151);
  if (v2 == (void *)((char *)this + 1200)) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = (const void *)v2[2];
    if (v3)
    {
      if (v4)
      {
        if ((*(uint64_t (**)(void *, uint64_t, void, void))(*(void *)v4 + 616))(v4, 1031, 0, 0)) {
          break;
        }
      }
    }
    uint64_t v2 = (void *)v2[1];
    if (v2 == (void *)v1) {
      return 0;
    }
  }
  return 1;
}

uint64_t TXTextLayout::isStyleEnabledBySequenceBehavior(TXTextLayout *this, uint64_t a2, CMTime *a3)
{
  uint64_t v3 = (char *)this + 1200;
  uint64_t v4 = (char *)*((void *)this + 151);
  if (v4 == (char *)this + 1200) {
    return 0;
  }
  uint64_t v7 = 1;
  while (1)
  {
    uint64_t v8 = (const void *)*((void *)v4 + 2);
    if (v8)
    {
      if (v9)
      {
        uint64_t v10 = v9;
        if ((*(unsigned int (**)(void *, uint64_t, void, void))(*(void *)v9 + 616))(v9, a2, 0, 0))
        {
          long long v12 = *(_OWORD *)&a3->value;
          CMTimeEpoch epoch = a3->epoch;
          if ((*(uint64_t (**)(void *, long long *, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 296))(v10, &v12, 1, 1, 1))break; {
        }
          }
      }
    }
    uint64_t v4 = (char *)*((void *)v4 + 1);
    if (v4 == v3) {
      return 0;
    }
  }
  return v7;
}

uint64_t TXTextLayout::isStyleEnabledByOldSequenceBehavior(TXTextLayout *this, int a2, CMTime *a3)
{
  uint64_t v3 = (char *)this + 1200;
  uint64_t v4 = (char *)*((void *)this + 151);
  if (v4 == (char *)this + 1200) {
    return 0;
  }
  uint64_t v7 = 1;
  while (1)
  {
    uint64_t v8 = (const void *)*((void *)v4 + 2);
    if (v8)
    {
      if (v9)
      {
        uint64_t v10 = v9;
        if (TXTextSequenceBehavior::isChannelEnabled(v9, a2))
        {
          long long v12 = *(_OWORD *)&a3->value;
          CMTimeEpoch epoch = a3->epoch;
          if ((*(uint64_t (**)(TXTextSequenceBehavior *, long long *, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 296))(v10, &v12, 1, 1, 1))break; {
        }
          }
      }
    }
    uint64_t v4 = (char *)*((void *)v4 + 1);
    if (v4 == v3) {
      return 0;
    }
  }
  return v7;
}

void TXTextLayout::prepareForRender(TXTextLayout *this, const OZRenderState *a2)
{
  uint64_t v4 = (_DWORD *)((char *)this + 58872);
  if (TXTextLayout::hasSequenceCharacterOffset(this)) {
    *((unsigned char *)this + 19321) = 1;
  }
  TXTextLayout::doLayout(this, a2, 0);
  CMTime var0 = (CMTime)a2->var0;
  for (uint64_t i = (void *)*((void *)this + 2419); i != (void *)((char *)this + 19344); uint64_t i = (void *)i[1])
  {
    uint64_t v6 = i[2];
    CMTime v26 = var0;
    TXTextStyle::updateGradient(v6, &v26);
  }
  if (*v4 == 2)
  {
    PCString::PCString(&v25, (const PCString *)this + 7358);
    TXChannelString::getString((PCString *)this + 2381, v21);
    int v7 = PCString::caseInsensitiveCompare(&v25, v21);
    PCString::~PCString(v21);
    if (v7)
    {
      uint64_t v8 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
      OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v24, v8);
      uint64_t v9 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 640))((char *)this + 200);
      (*(void (**)(PCString *__return_ptr))(*(void *)v9 + 712))(v21);
      CMTime v19 = (CMTime)a2->var0;
      uint64_t v10 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), &v17);
      CMTime time1 = v19;
      *(__n128 *)&time2.CMTimeValue value = v17;
      time2.CMTimeEpoch epoch = v18;
      __n128 v11 = PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v20);
      uint64_t v12 = (*(uint64_t (**)(char *, __n128))(*((void *)this + 25) + 272))((char *)this + 200, v11);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v12 + 336), &v15);
      *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)&v21[0].var0;
      time1.CMTimeEpoch epoch = v22;
      CMTime time2 = v20;
      if (CMTimeCompare(&time1, &time2) <= 0)
      {
        *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)&v21[0].var0;
        time1.CMTimeEpoch epoch = v22;
        CMTime time2 = v23;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v29);
        CMTime time1 = v29;
        *(__n128 *)&time2.CMTimeValue value = v15;
        time2.CMTimeEpoch epoch = v16;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v28);
        CMTime time1 = v20;
        CMTime time2 = v28;
        if (CMTimeCompare(&time1, &time2) <= 0 || (v23.flags & 1) != 0 && (v23.flags & 0x10) != 0)
        {
          TXTextLayout::setString(this, (const PCString *)this + 7358, 1);
          TXTextLayout::updateDisplayString((PCString *)this, &var0);
          uint64_t v13 = *(void *)(*((void *)this + 2422) + 16);
          TXTextLayout::getDisplayString((PCString *)this, v21);
          unsigned int v14 = PCString::size(v21);
          *(_DWORD *)(v13 + 24) = 0;
          *(_DWORD *)(v13 + 28) = v14;
          PCString::~PCString(v21);
          TXTextLayout::rebuildParagraphStyles((PCString *)this);
          TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
          TXTextLayout::doLayout(this, a2, 0);
        }
      }
      OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v24);
    }
    PCString::~PCString(&v25);
  }
}

void sub_1B7602EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,PCString a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,PCString a28)
{
}

void non-virtual thunk to'TXTextLayout::prepareForRender(TXTextLayout *this, const OZRenderState *a2)
{
}

uint64_t TXTextLayout::getNumberOfMissingFonts(TXTextLayout *this)
{
  uint64_t v1 = (char *)this + 19344;
  uint64_t v2 = *((void *)this + 2419);
  if ((TXTextLayout *)v2 == (TXTextLayout *)((char *)this + 19344)) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v3 = (v3 + TXTextStyle::isMissingFont(*(TXTextStyle **)(v2 + 16)));
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while ((char *)v2 != v1);
  return v3;
}

uint64_t non-virtual thunk to'TXTextLayout::getNumberOfMissingFonts(TXTextLayout *this)
{
  uint64_t v1 = (char *)this + 19144;
  uint64_t v2 = *((void *)this + 2394);
  if ((TXTextLayout *)v2 == (TXTextLayout *)((char *)this + 19144)) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v3 = (v3 + TXTextStyle::isMissingFont(*(TXTextStyle **)(v2 + 16)));
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while ((char *)v2 != v1);
  return v3;
}

uint64_t TXTextLayout::getMissingFontName(TXTextLayout *this, int a2, int *a3, PCString *a4)
{
  uint64_t v4 = (char *)this + 19344;
  uint64_t v5 = *((void *)this + 2419);
  if ((TXTextLayout *)v5 == (TXTextLayout *)((char *)this + 19344)) {
    return 0;
  }
  while (!TXTextStyle::isMissingFont(*(TXTextStyle **)(v5 + 16)))
  {
LABEL_5:
    uint64_t v5 = *(void *)(v5 + 8);
    if ((char *)v5 == v4) {
      return 0;
    }
  }
  if (*a3 != a2)
  {
    ++*a3;
    goto LABEL_5;
  }
  MissingFontName = (const PCString *)TXTextStyle::getMissingFontName(*(TXTextStyle **)(v5 + 16));
  PCString::set(a4, MissingFontName);
  return 1;
}

uint64_t non-virtual thunk to'TXTextLayout::getMissingFontName(TXTextLayout *this, int a2, int *a3, PCString *a4)
{
  return TXTextLayout::getMissingFontName((TXTextLayout *)((char *)this - 200), a2, a3, a4);
}

uint64_t TXTextLayout::getMissingFontKind(TXTextLayout *this, int a2, int *a3, PCString *a4)
{
  uint64_t v4 = (char *)this + 19344;
  uint64_t v5 = *((void *)this + 2419);
  if ((TXTextLayout *)v5 == (TXTextLayout *)((char *)this + 19344)) {
    return 0;
  }
  while (!TXTextStyle::isMissingFont(*(TXTextStyle **)(v5 + 16)))
  {
LABEL_5:
    uint64_t v5 = *(void *)(v5 + 8);
    if ((char *)v5 == v4) {
      return 0;
    }
  }
  if (*a3 != a2)
  {
    ++*a3;
    goto LABEL_5;
  }
  PCURL::PCURL((PCURL *)&v10, @"Missing Kind Font");
  PCString::set(a4, &v10);
  PCString::~PCString(&v10);
  return 1;
}

void sub_1B7603178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'TXTextLayout::getMissingFontKind(TXTextLayout *this, int a2, int *a3, PCString *a4)
{
  return TXTextLayout::getMissingFontKind((TXTextLayout *)((char *)this - 200), a2, a3, a4);
}

uint64_t TXTextLayout::acceptsShapeMasks(TXTextLayout *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 304))();
}

uint64_t non-virtual thunk to'TXTextLayout::acceptsShapeMasks(TXTextLayout *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 25) + 304))();
}

uint64_t TXTextLayout::restrictImageMaskToStencil(TXTextLayout *this)
{
  return (*(unsigned int (**)(TXTextLayout *))(*(void *)this + 304))(this) ^ 1;
}

uint64_t non-virtual thunk to'TXTextLayout::restrictImageMaskToStencil(TXTextLayout *this)
{
  return (*(unsigned int (**)(void))(*((void *)this - 25) + 304))() ^ 1;
}

uint64_t TXTextLayout::areEffectsAppliedInScreenSpace(TXTextLayout *this)
{
  return (*(unsigned int (**)(TXTextLayout *))(*(void *)this + 304))(this) ^ 1;
}

uint64_t non-virtual thunk to'TXTextLayout::areEffectsAppliedInScreenSpace(TXTextLayout *this)
{
  return (*(unsigned int (**)(char *))(*((void *)this - 841) + 304))((char *)this - 6728) ^ 1;
}

BOOL TXTextLayout::shouldRenumberChannel(TXTextLayout *this, OZChannelBase *a2)
{
  var1 = a2->var1;
  long long v6 = xmmword_1B7E78290;
  return (OZFactory::isKindOfClass((unint64_t)var1, (int32x4_t *)&v6) & 1) == 0
      && OZObjectManipulator::shouldRenumberChannel((TXTextLayout *)((char *)this + 216), a2);
}

BOOL non-virtual thunk to'TXTextLayout::shouldRenumberChannel(TXTextLayout *this, OZChannelBase *a2)
{
  return TXTextLayout::shouldRenumberChannel((TXTextLayout *)((char *)this - 216), a2);
}

void TXTextLayout::deleteMaterialLayer(TXTextLayout *this, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = (char *)this + 19344;
  uint64_t v5 = (char *)*((void *)this + 2419);
  if (v5 != (char *)this + 19344)
  {
    do
    {
      uint64_t v6 = *((void *)v5 + 2);
      uint64_t v7 = *(void *)(v6 + 480);
      if (a2 >= (unint64_t)((*(void *)(v6 + 488) - v7) >> 3)) {
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v9 = (void *)*((void *)v8 + 178);
      if (a3 >= (unint64_t)((uint64_t)(v9[1] - *v9) >> 3)) {
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      }
      PCString v10 = *(void **)(*v9 + 8 * a3);
      if (v10) {
      (*(void (**)(void *))(*(void *)v10 + 712))(v10);
      }
      OZLayeredMaterial::deleteLayer(v8, a3);
      uint64_t v5 = (char *)*((void *)v5 + 1);
    }
    while (v5 != v4);
  }
  for (uint64_t i = (void *)*((void *)this + 151); i != (void *)((char *)this + 1200); uint64_t i = (void *)i[1])
  {
    uint64_t v12 = (const void *)i[2];
    if (v12)
    {
      if (v13) {
        TXSequenceBehavior::removeMaterialLayer(v13, a3, a2);
      }
    }
  }
  TXSequenceChannels::removeMaterialLayerChannelsAtIndex((TXTextLayout *)((char *)this + 25032), a3, a2);
  unsigned int v14 = *(OZDocument **)((*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200) + 1584);

  OZDocument::postNotification(v14, 0x80000);
}

void TXTextLayout::setNameOfMaterialAtIndex(TXTextLayout *this, const PCString *a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v5 = (char *)this + 19344;
  uint64_t v6 = (char *)*((void *)this + 2419);
  if (v6 != (char *)this + 19344)
  {
    char v12 = 0;
    unint64_t v13 = a3;
    do
    {
      uint64_t v14 = *((void *)v6 + 2);
      uint64_t v15 = *(void *)(v14 + 480);
      if (v13 >= (*(void *)(v14 + 488) - v15) >> 3) {
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v16 = *(void *)(v15 + 8 * v13);
      if (!a5 || !*(unsigned char *)(v16 + 1288))
      {
        (*(void (**)(uint64_t, const PCString *, uint64_t))(*(void *)(v16 + 16) + 120))(v16 + 16, a2, a4);
        char v12 = 1;
        if ((a5 & 1) == 0) {
          *(unsigned char *)(v16 + 1288) = 1;
        }
      }
      uint64_t v6 = (char *)*((void *)v6 + 1);
    }
    while (v6 != v5);
    if (v12)
    {
      TXSequenceChannels::renameMaterialAtIndex((TXTextLayout *)((char *)this + 25032), a2, a3, a4);
      for (uint64_t i = (void *)*((void *)this + 151); i != (void *)((char *)this + 1200); uint64_t i = (void *)i[1])
      {
        CMTimeEpoch v18 = (const void *)i[2];
        if (v18)
        {
          if (v19) {
            TXSequenceChannels::renameMaterialAtIndex((TXSequenceChannels *)(v19 + 816), a2, a3, a4);
          }
        }
      }
    }
  }
}

void non-virtual thunk to'TXTextLayout::setNameOfMaterialAtIndex(TXTextLayout *this, const PCString *a2, unsigned int a3, uint64_t a4, int a5)
{
}

uint64_t TXTextLayout::selectMaterialAtIndex(uint64_t this, uint64_t a2)
{
  uint64_t v2 = this + 19344;
  uint64_t v3 = *(void *)(this + 19352);
  if (v3 != this + 19344)
  {
    do
    {
      this = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 16) + 232))(*(void *)(v3 + 16), a2);
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t non-virtual thunk to'TXTextLayout::selectMaterialAtIndex(uint64_t this, uint64_t a2)
{
  uint64_t v2 = this + 19128;
  uint64_t v3 = *(void *)(this + 19136);
  if (v3 != this + 19128)
  {
    do
    {
      this = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 16) + 232))(*(void *)(v3 + 16), a2);
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t TXTextLayout::deselectMaterialAtIndex(uint64_t this, uint64_t a2)
{
  uint64_t v2 = this + 19344;
  uint64_t v3 = *(void *)(this + 19352);
  if (v3 != this + 19344)
  {
    do
    {
      this = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 16) + 240))(*(void *)(v3 + 16), a2);
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t non-virtual thunk to'TXTextLayout::deselectMaterialAtIndex(uint64_t this, uint64_t a2)
{
  uint64_t v2 = this + 19128;
  uint64_t v3 = *(void *)(this + 19136);
  if (v3 != this + 19128)
  {
    do
    {
      this = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 16) + 240))(*(void *)(v3 + 16), a2);
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t TXTextLayout::getMaterial(TXTextLayout *this, int a2)
{
  uint64_t v2 = (char *)this + 19344;
  for (uint64_t i = *((void *)this + 2419); (char *)i != v2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = *(void *)(i + 16);
    uint64_t v5 = *(void *)(v4 + 480);
    uint64_t v6 = *(void *)(v4 + 488);
    while (v5 != v6)
    {
      uint64_t result = *(void *)v5;
      if (*(_DWORD *)(*(void *)v5 + 176) == a2) {
        return result;
      }
      v5 += 8;
    }
  }
  return 0;
}

uint64_t non-virtual thunk to'TXTextLayout::getMaterial(TXTextLayout *this, int a2)
{
  uint64_t v2 = (char *)this + 19144;
  for (uint64_t i = *((void *)this + 2394); (char *)i != v2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = *(void *)(i + 16);
    uint64_t v5 = *(void *)(v4 + 480);
    uint64_t v6 = *(void *)(v4 + 488);
    while (v5 != v6)
    {
      uint64_t result = *(void *)v5;
      if (*(_DWORD *)(*(void *)v5 + 176) == a2) {
        return result;
      }
      v5 += 8;
    }
  }
  return 0;
}

uint64_t TXTextLayout::getSequenceChannelsForMaterialLayer(TXTextLayout *this, unsigned int a2, int a3)
{
  return TXSequenceChannels::materialLayerSequenceFolder((TXTextLayout *)((char *)this + 25032), a2, a3);
}

uint64_t TXTextLayout::willResetMaterial(TXTextLayout *this, unsigned int a2)
{
  TXTextLayout::removeMaterialFromSequenceBehaviors(this, a2);

  return TXSequenceChannels::removeMaterialChannelsAtIndex((TXTextLayout *)((char *)this + 25032), a2);
}

uint64_t non-virtual thunk to'TXTextLayout::willResetMaterial(TXTextLayout *this, unsigned int a2)
{
  TXTextLayout::removeMaterialFromSequenceBehaviors((void *)this - 27, a2);

  return TXSequenceChannels::removeMaterialChannelsAtIndex((TXTextLayout *)((char *)this + 24816), a2);
}

uint64_t TXTextLayout::doResetMaterial(uint64_t this, unsigned int a2)
{
  uint64_t v2 = this + 19344;
  uint64_t v3 = *(void *)(this + 19352);
  if (v3 != this + 19344)
  {
    unint64_t v4 = a2;
    do
    {
      uint64_t v5 = *(void *)(v3 + 16);
      uint64_t v6 = *(void *)(v5 + 480);
      if (v4 >= (*(void *)(v5 + 488) - v6) >> 3) {
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v7 = *(void *)(*(uint64_t (**)(void))(**(void **)(v6 + 8 * v4) + 208))(*(void *)(v6 + 8 * v4));
      this = (*(uint64_t (**)(void))(v7 + 280))();
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t non-virtual thunk to'TXTextLayout::doResetMaterial(TXTextLayout *this, unsigned int a2)
{
  return TXTextLayout::doResetMaterial((uint64_t)this - 216, a2);
}

void TXTextLayout::didResetMaterial(TXTextLayout *this, unsigned int a2)
{
  TXTextLayout::getStyleAtCharOffset((uint64_t)this, 0, &v7);
  uint64_t v4 = *(void *)(v7 + 480);
  if (a2 >= (unint64_t)((*(void *)(v7 + 488) - v4) >> 3)) {
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v5 = *(void *)(v4 + 8 * a2);
  TXTextLayout::addMaterialToSequenceBehaviors(this, (OZMaterialBase *)v5, a2);
  OZChannel::getValueAsInt((OZChannel *)(v5 + 720), MEMORY[0x1E4F1FA48], 0.0);
  TXSequenceChannels::addMaterialChannels((TXTextLayout *)((char *)this + 25032), (OZMaterialBase *)v5, a2);
  uint64_t v6 = v8;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1B7603C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'TXTextLayout::didResetMaterial(TXTextLayout *this, unsigned int a2)
{
}

void *TXTextLayout::doReset3DExtrusionProperties(void *this)
{
  uint64_t v1 = this + 2418;
  uint64_t v2 = (void *)this[2419];
  if (v2 != this + 2418)
  {
    do
    {
      uint64_t v3 = (void *)v2[2];
      uint64_t v4 = v3[5079];
      uint64_t v5 = *(void ***)v4;
      uint64_t v6 = *(void ***)(v4 + 8);
      if (*(void ***)v4 != v6)
      {
        uint64_t v7 = v3 + 6075;
        uint64_t v8 = v3 + 5995;
        uint64_t v9 = v3 + 6011;
        PCString v10 = v3 + 6094;
        do
        {
          this = *v5;
          if (*v5 != v7 && this != v8 && this != v9 && this != v10) {
            this = (void *)(*(uint64_t (**)(void *, void))(*this + 288))(this, 0);
          }
          ++v5;
        }
        while (v5 != v6);
      }
      uint64_t v2 = (void *)v2[1];
    }
    while (v2 != v1);
  }
  return this;
}

void TXTextLayout::buildRenderGraphForLayer(TXTextLayout *this, const OZRenderParams *a2, const OZRenderGraphState *a3, int a4, unsigned int *a5)
{
}

void sub_1B7604720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, PCSharedCount *a15)
{
}

uint64_t TXTextLayout::getPrecompType(TXTextLayout *this, CMTime *a2)
{
  if (!*((unsigned char *)this + 63720))
  {
    uint64_t v5 = (char *)this + 200;
    if ((*(unsigned int (**)(TXTextLayout *))(*(void *)this + 296))(this)) {
      uint64_t v6 = (OZChannelBase *)((char *)this + 6880);
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = (OZChannelBase *)(*(uint64_t (**)(char *))(*((void *)this + 25) + 640))((char *)this + 200);
    char v8 = OZElement::checkForForcedPrecompose((OZElement *)((char *)this + 200), v7, v6);
    uint64_t v9 = (const void *)*((void *)this + 145);
    if (v9
    {
      __n128 v11 = v10;
      do
      {
        CMTime v17 = *a2;
        int v12 = OZGroup::appliesEffectToChildren(v11, &v17);
        if (v12) {
          break;
        }
        unint64_t v13 = (const void *)*((void *)v11 + 120);
        if (!v13) {
          break;
        }
      }
      while (v11);
    }
    else
    {
      int v12 = 0;
    }
    int v14 = (*(uint64_t (**)(TXTextLayout *))(*(void *)this + 304))(this);
    if ((v8 & 1) != 0
      || ((*(uint64_t (**)(char *, void))(*(void *)v5 + 1592))((char *)this + 200, MEMORY[0x1E4F1FA48]) & 1) != 0
      || OZElement::getPreserveTransparency((OZElement *)((char *)this + 200), MEMORY[0x1E4F1FA48])
      || (TXTextLayout::isGlowEnabled(this, v15) & 1) != 0
      || ((*(uint64_t (**)(TXTextLayout *))(*(void *)this + 312))(this) & 1) != 0)
    {
      uint64_t v2 = 1;
      if (!v14) {
        return v2;
      }
    }
    else
    {
      if ((v14 & 1) == 0)
      {
        if (((*(uint64_t (**)(char *))(*(void *)v5 + 416))((char *)this + 200) & 1) != 0
          || (v12 | (*(unsigned int (**)(char *))(*(void *)v5 + 1888))((char *)this + 200)) == 1)
        {
          return 1;
        }
        return 2;
      }
      LODWORD(v2) = 0;
    }
    if (((*(uint64_t (**)(TXTextLayout *))(*(void *)this + 296))(this) & 1) != 0
      || ((*(uint64_t (**)(char *))(*(void *)v5 + 416))((char *)this + 200) & 1) != 0
      || ((*(uint64_t (**)(char *))(*(void *)v5 + 1864))((char *)this + 200) & 1) != 0
      || ((*(uint64_t (**)(char *))(*(void *)v5 + 1600))((char *)this + 200) & 1) != 0
      || ((*(uint64_t (**)(char *))(*(void *)v5 + 1608))((char *)this + 200) & 1) != 0
      || (v2 | (*(unsigned int (**)(char *))(*(void *)v5 + 1624))((char *)this + 200)) == 1)
    {
      return 0;
    }
    return 2;
  }
  return *((unsigned int *)this + 15931);
}

uint64_t TXTextLayout::buildSceneObjectForFace(uint64_t a1, CMTime *a2, uint64_t a3, TXTextObject **a4)
{
  uint64_t v4 = *a4;
  CMTime v6 = *a2;
  if (TXTextObject::isFaceVisible(v4, &v6)) {
    operator new();
  }
  return 0;
}

void sub_1B7604D10(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4086B62714);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::buildSceneObjectForGlow(uint64_t a1, CMTime *a2, uint64_t a3, TXTextObject **a4)
{
  uint64_t v4 = *a4;
  CMTime v6 = *a2;
  if (TXTextObject::isGlowVisible(v4, &v6, 0, 0, 0)) {
    operator new();
  }
  return 0;
}

void sub_1B7604E78(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::buildSceneObjectForOutline(uint64_t a1, CMTime *a2, uint64_t a3, TXTextObject **a4)
{
  uint64_t v4 = *a4;
  CMTime v6 = *a2;
  if (TXTextObject::isOutlineVisible(v4, &v6, 0, 0)) {
    operator new();
  }
  return 0;
}

void sub_1B7604FC0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4086B62714);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::buildSceneObjectForDropShadow(uint64_t a1, CMTime *a2, uint64_t a3, TXTextObject **a4)
{
  uint64_t v4 = *a4;
  CMTime v6 = *a2;
  if (TXTextObject::isDropShadowVisible(v4, &v6, 0)) {
    operator new();
  }
  return 0;
}

void sub_1B76053E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  MEMORY[0x1BA9BFBA0](v37, 0x10B1C40DE3F20C5);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a35);
  PCSharedCount::~PCSharedCount(v35);
  _Unwind_Resume(a1);
}

uint64_t getAttributeForLayer(unsigned int a1, int a2, int a3)
{
  if (a3 | a2)
  {
    if (a2 || a3 != 1)
    {
      if (a2 != 1 || a3)
      {
        if (a1 < 4)
        {
          uint64_t v3 = &xmmword_1B7E782E0;
          return *((unsigned int *)v3 + (int)a1);
        }
      }
      else if (a1 < 4)
      {
        uint64_t v3 = (long long *)&unk_1B7E782D0;
        return *((unsigned int *)v3 + (int)a1);
      }
    }
    else if (a1 < 4)
    {
      uint64_t v3 = (long long *)&unk_1B7E782C0;
      return *((unsigned int *)v3 + (int)a1);
    }
  }
  else if (a1 < 3)
  {
    uint64_t v3 = (long long *)&unk_1B7E78B78;
    return *((unsigned int *)v3 + (int)a1);
  }
  return 0;
}

void TXTextLayout::buildRenderGraphForLayerAndPlanes(TXTextLayout *this, const OZRenderParams *a2, const OZRenderGraphState *a3, int a4, unsigned int *a5)
{
}

void sub_1B7606040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, PCSharedCount *a11)
{
}

void **TXGlyphGroupRender::addGlyph(void **result, int a2, uint64_t *a3, long long *a4)
{
  uint64_t v5 = (uint64_t *)result;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  long long v8 = a4[5];
  long long v36 = a4[4];
  long long v37 = v8;
  long long v9 = a4[7];
  long long v38 = a4[6];
  long long v39 = v9;
  long long v10 = a4[1];
  long long v32 = *a4;
  long long v33 = v10;
  long long v11 = a4[3];
  long long v34 = a4[2];
  long long v35 = v11;
  int v12 = (char *)result[182];
  unint64_t v13 = (char *)result[183];
  if (v12 >= v13)
  {
    CMTime v19 = result[181];
    unint64_t v20 = 0x86BCA1AF286BCA1BLL * ((v12 - v19) >> 3);
    unint64_t v21 = v20 + 1;
    if (v20 + 1 > 0x1AF286BCA1AF286) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = (uint64_t)(result + 183);
    unint64_t v23 = 0x86BCA1AF286BCA1BLL * ((v13 - v19) >> 3);
    if (2 * v23 > v21) {
      unint64_t v21 = 2 * v23;
    }
    if (v23 >= 0xD79435E50D7943) {
      unint64_t v24 = 0x1AF286BCA1AF286;
    }
    else {
      unint64_t v24 = v21;
    }
    _OWORD v31[4] = v5 + 183;
    if (v24) {
      PCString v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXGlyphRender>>(v22, v24);
    }
    else {
      PCString v25 = 0;
    }
    CMTime v26 = &v25[152 * v20];
    v31[0] = v25;
    v31[1] = v26;
    v31[3] = &v25[152 * v24];
    long long v27 = v33;
    *(_OWORD *)(v26 + 24) = v32;
    *(_OWORD *)(v26 + 40) = v27;
    long long v28 = v37;
    *(_OWORD *)(v26 + 88) = v36;
    *(_OWORD *)(v26 + 104) = v28;
    long long v29 = v39;
    *(_OWORD *)(v26 + 120) = v38;
    *(_OWORD *)(v26 + 136) = v29;
    long long v30 = v35;
    *(_OWORD *)(v26 + 56) = v34;
    *(_DWORD *)CMTime v26 = a2;
    *((void *)v26 + 1) = v7;
    *((void *)v26 + 2) = v6;
    *(_OWORD *)(v26 + 72) = v30;
    _DWORD v31[2] = v26 + 152;
    std::vector<TXGlyphRender>::__swap_out_circular_buffer(v5 + 181, v31);
    uint64_t v18 = v5[182];
    uint64_t result = std::__split_buffer<TXGlyphRender>::~__split_buffer(v31);
  }
  else
  {
    long long v14 = v37;
    *(_OWORD *)(v12 + 88) = v36;
    *(_OWORD *)(v12 + 104) = v14;
    long long v15 = v39;
    *(_OWORD *)(v12 + 120) = v38;
    *(_OWORD *)(v12 + 136) = v15;
    long long v16 = v33;
    *(_OWORD *)(v12 + 24) = v32;
    *(_OWORD *)(v12 + 40) = v16;
    long long v17 = v35;
    *(_OWORD *)(v12 + 56) = v34;
    *(_DWORD *)int v12 = a2;
    *((void *)v12 + 1) = v7;
    *((void *)v12 + 2) = v6;
    uint64_t v18 = (uint64_t)(v12 + 152);
    *(_OWORD *)(v12 + 72) = v17;
  }
  v5[182] = v18;
  return result;
}

void sub_1B76063B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<TXGlyphRender>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void LiImageTransform::LiImageTransform(LiImageTransform *this)
{
  *((void *)this + 44) = &unk_1F1199AC8;
  *((void *)this + 45) = 0;
  *((unsigned char *)this + 368) = 1;
  LiImageFilter::LiImageFilter(this, (uint64_t *)&off_1F111CF30);
  *(void *)this = &unk_1F111CE28;
  *((void *)this + 44) = &unk_1F111CF10;
  *((void *)this + 15) = 0x3FF0000000000000;
  *((void *)this + 10) = 0x3FF0000000000000;
  *((void *)this + 5) = 0x3FF0000000000000;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 36) = 0x3FF0000000000000;
  *((void *)this + 31) = 0x3FF0000000000000;
  *((void *)this + 26) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)this + 10) = _Q1;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((unsigned char *)this + 296) = 0;
  LiClipSet::LiClipSet((LiImageTransform *)((char *)this + 304));
}

void sub_1B76064D4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  LiImageFilter::~LiImageFilter((PCSharedCount *)v1, v4 + 1);
  *(void *)(v1 + 352) = v2;
  *(unsigned char *)(v1 + 368) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 360));
  _Unwind_Resume(a1);
}

uint64_t LiImageFilterChain::append(LiImageFilterChain *this, LiImageFilter *a2)
{
  uint64_t v3 = (char *)this + 16;
  unint64_t v13 = a2;
  if (a2) {
    a2 = (LiImageFilter *)((char *)a2 + *(void *)(*(void *)a2 - 24));
  }
  PCSharedCount::PCSharedCount(&v14, a2);
  int v4 = *((_DWORD *)this + 7);
  if (*((_DWORD *)this + 6) <= v4) {
    int v5 = (2 * (v4 + 1)) | 1;
  }
  else {
    int v5 = *((_DWORD *)this + 6);
  }
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)v3, v4 + 1, v5);
  uint64_t v6 = *((void *)this + 4);
  uint64_t v7 = *((int *)this + 7) - 1;
  *(void *)(v6 + 16 * v7) = v13;
  PCSharedCount::PCSharedCount(&v15, &v14);
  PCSharedCount::operator=((uint64_t *)(v6 + 16 * v7 + 8), (uint64_t *)&v15);
  PCSharedCount::~PCSharedCount(&v15);
  PCSharedCount::~PCSharedCount(&v14);
  return LiImageFilterChain::connect((uint64_t)this, v8, v9, v10, v11);
}

void sub_1B76065D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::setGlyphGeodeProperties(TXTextLayout *this, const OZRenderParams *a2, const OZRenderGraphState *a3, LiGeode *a4)
{
  uint64_t DoHighQualityResampling = OZRenderParams::getDoHighQualityResampling(a2);
  (*(void (**)(LiGeode *, uint64_t))(*(void *)a4 + 280))(a4, DoHighQualityResampling);
  if (*(unsigned char *)a3 && (*(unsigned int (**)(TXTextLayout *))(*(void *)this + 1008))(this))
  {
    (*(void (**)(LiGeode *, double))(*(void *)a4 + 192))(a4, *((double *)a3 + 1));
    *((_DWORD *)a4 + 170) = *((_DWORD *)a3 + 12);
    if (*((unsigned char *)a3 + 16))
    {
      (*(void (**)(LiGeode *, double))(*(void *)a4 + 208))(a4, *((double *)a3 + 3));
      (*(void (**)(LiGeode *, double))(*(void *)a4 + 224))(a4, *((double *)a3 + 4));
      (*(void (**)(LiGeode *, double))(*(void *)a4 + 240))(a4, *((double *)a3 + 5));
    }
    if (*((double *)a3 + 7) > 0.0) {
      (*(void (**)(LiGeode *))(*(void *)a4 + 256))(a4);
    }
  }
  else
  {
    (*(void (**)(LiGeode *, double))(*(void *)a4 + 192))(a4, 0.0);
  }
  if (*((unsigned char *)a4 + 552)) {
    BOOL v9 = *((unsigned char *)a3 + 288) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  char v10 = !v9;
  *((unsigned char *)a4 + 552) = v10;
  if (*((unsigned char *)a4 + 553)) {
    BOOL v11 = *((unsigned char *)a3 + 289) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  char v12 = !v11;
  *((unsigned char *)a4 + 553) = v12;
  *((unsigned char *)a4 + 696) = *((unsigned char *)a3 + 88);
  (*(void (**)(TXTextLayout *, LiGeode *, char *, const OZRenderParams *))(*(void *)this + 976))(this, a4, (char *)a3 + 224, a2);
  int ShowDepth = LiRenderingTechnology::getShowDepth((const OZRenderParams *)((char *)a2 + 1316));
  if (ShowDepth) {
    LOBYTE(ShowDepth) = (*(uint64_t (**)(char *))(*((void *)this + 25) + 2104))((char *)this + 200);
  }
  *((unsigned char *)a4 + 555) = ShowDepth;
  (*(void (**)(TXTextLayout *, const OZRenderParams *, const OZRenderGraphState *, LiGeode *))(*(void *)this + 944))(this, a2, a3, a4);
  uint64_t result = (*(uint64_t (**)(TXTextLayout *))(*(void *)this + 312))(this);
  if ((result & 1) != 0
    || (uint64_t result = (*(uint64_t (**)(TXTextLayout *, void))(*(void *)this + 936))(this, MEMORY[0x1E4F1FA48]), result))
  {
    *((unsigned char *)a4 + 554) = 0;
  }
  return result;
}

uint64_t TXTextLayout::clearFontMap(TXTextLayout *this)
{
  uint64_t v1 = (PCString **)((char *)this + 61072);
  uint64_t v2 = (PCMutex *)((char *)this + 61000);
  PCMutex::lock((PCMutex *)((char *)this + 61000));
  std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy((uint64_t)v1, v1[1]);
  PCSharedCount *v1 = (PCString *)(v1 + 1);
  v1[2] = 0;
  v1[1] = 0;
  return PCMutex::unlock(v2);
}

void TXTextLayout::makeRenderGraphOfElements(TXTextLayout *this, const OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  int v5 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v7, v5);
  OZRenderState::OZRenderState(&v6, a2);
  operator new();
}

void sub_1B7607318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  PCSharedCount::~PCSharedCount(a10);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v41 - 136));
  _Unwind_Resume(a1);
}

void TXTextLayout::generateGlyphPlanes(TXTextLayout *this, const OZRenderParams *a2, double a3, double a4)
{
  OZRenderState v6 = (OZChannel *)((char *)this + 20464);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E4F1FA48], 0.0) == 2
    || (uint64_t v7 = *((void *)this + 151), (TXTextLayout *)v7 == (TXTextLayout *)((char *)this + 1200)))
  {
LABEL_6:
    if (OZChannel::getValueAsInt(v6, MEMORY[0x1E4F1FA48], 0.0) != 2)
    {
      int v34 = 1;
      goto LABEL_9;
    }
  }
  else
  {
    while (1)
    {
      unint64_t v8 = *(void *)((*(uint64_t (**)(void))(**(void **)(v7 + 16) + 344))(*(void *)(v7 + 16)) + 8);
      v48[0] = (int32x4_t)xmmword_1B7E782A0;
      if (OZFactory::isKindOfClass(v8, v48)) {
        break;
      }
      unint64_t v9 = *(void *)((*(uint64_t (**)(void))(**(void **)(v7 + 16) + 344))(*(void *)(v7 + 16)) + 8);
      v48[0] = (int32x4_t)xmmword_1B7E78230;
      if (OZFactory::isKindOfClass(v9, v48)) {
        break;
      }
      uint64_t v7 = *(void *)(v7 + 8);
      if ((TXTextLayout *)v7 == (TXTextLayout *)((char *)this + 1200)) {
        goto LABEL_6;
      }
    }
  }
  int v34 = 0;
LABEL_9:
  OZRenderParams::OZRenderParams((OZRenderParams *)v48, a2);
  int v49 = 1;
  char v10 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v47, v10);
  uint64_t v11 = *((void *)this + 7353);
  uint64_t v12 = *((void *)this + 7354);
  long long v33 = (char *)this + 58824;
  if (v11 == v12)
  {
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v47);
    goto LABEL_52;
  }
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  PCSharedCount v15 = 0;
  long long v16 = (char *)this + 63736;
  do
  {
    if (*(void *)v11 && !TXCharacterSetIsWhitespaceOrNewline(*(_WORD *)(*(void *)v11 + 120)))
    {
      if (!v34) {
        goto LABEL_31;
      }
      uint64_t v17 = *(void *)(*(void *)v11 + 264);
      if (v17)
      {
        uint64_t v19 = *(void *)(v17 + 8);
        uint64_t v18 = *(std::__shared_weak_count **)(v17 + 16);
        if (v18)
        {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          if (v19 != v14 || v13 == 0)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
LABEL_31:
            unsigned int v46 = *(_DWORD *)(*(void *)v11 + 388);
            uint64_t v22 = (uint64_t **)*((void *)v33 + 292);
            *(void *)&long long v41 = &v46;
            unint64_t v23 = std::__tree<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCMatrix44Tmpl<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCMatrix44Tmpl<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v22, &v46, (uint64_t)&std::piecewise_construct, (_DWORD **)&v41);
            long long v24 = *(_OWORD *)(v23 + 15);
            v45[4] = *(_OWORD *)(v23 + 13);
            v45[5] = v24;
            long long v25 = *(_OWORD *)(v23 + 19);
            v45[6] = *(_OWORD *)(v23 + 17);
            v45[7] = v25;
            long long v26 = *(_OWORD *)(v23 + 7);
            v45[0] = *(_OWORD *)(v23 + 5);
            v45[1] = v26;
            long long v27 = *(_OWORD *)(v23 + 11);
            v45[2] = *(_OWORD *)(v23 + 9);
            v45[3] = v27;
            long long v41 = xmmword_1B7E733E0;
            float64x2_t v43 = 0uLL;
            uint64_t v42 = 0;
            double v44 = 1.0;
            long long v38 = 0u;
            float64x2_t v39 = 0u;
            uint64_t v37 = 0x3FF0000000000000;
            double v40 = 1.0;
            PCRay3<double>::transform((uint64_t)&v41, (double *)v45);
            PCRay3<double>::transform((uint64_t)&v37, (double *)v45);
            long long v35 = v41;
            v36[0] = v42;
            *(float64x2_t *)&v36[1] = vmulq_f64(v43, v39);
            *(double *)&v36[3] = v44 * v40;
            long long v29 = *(double ***)v16;
            long long v28 = (double **)*((void *)v16 + 1);
            while (1)
            {
              if (v29 == v28) {
                operator new();
              }
              if (PCMath::equal((double *)&v35, *v29, 1.0e-10)
                && (int)((*((void *)*v29 + 23) - *((void *)*v29 + 22)) >> 2) < 512)
              {
                break;
              }
              ++v29;
            }
            TXGlyphGroup::addTextObjectIndex((TXGlyphGroup *)*v29, *(_DWORD *)(*(void *)v11 + 388));
            uint64_t v30 = *(void *)(*(void *)v11 + 264);
            if (v30)
            {
              uint64_t v14 = *(void *)(v30 + 8);
              uint64_t v31 = *(std::__shared_weak_count **)(v30 + 16);
              if (v31) {
                atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v15) {
LABEL_41:
              }
                std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            else
            {
              uint64_t v14 = 0;
              uint64_t v31 = 0;
              if (v15) {
                goto LABEL_41;
              }
            }
            unint64_t v13 = *v29;
            PCSharedCount v15 = v31;
            goto LABEL_43;
          }
          uint64_t v32 = (*((void *)v13 + 23) - *((void *)v13 + 22)) >> 2;
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
          if ((int)v32 >= 512) {
            goto LABEL_31;
          }
        }
        else
        {
          BOOL v21 = v19 != v14 || v13 == 0;
          if (v21 || (int)((*((void *)v13 + 23) - *((void *)v13 + 22)) >> 2) > 511) {
            goto LABEL_31;
          }
        }
      }
      else if (v14 || !v13 || (int)((*((void *)v13 + 23) - *((void *)v13 + 22)) >> 2) >= 512)
      {
        goto LABEL_31;
      }
      TXGlyphGroup::addTextObjectIndex((TXGlyphGroup *)v13, *(_DWORD *)(*(void *)v11 + 388));
    }
LABEL_43:
    v11 += 16;
  }
  while (v11 != v12);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v47);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
LABEL_52:
  OZRenderParams::~OZRenderParams((OZRenderParams *)v48);
}

void sub_1B7607954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,int a59,char a60)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a58);
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a60);
  _Unwind_Resume(a1);
}

void TXTextLayout::clearGlyphGroups(TXTextLayout *this)
{
  uint64_t v1 = (TXGlyphGroup ***)((char *)this + 63736);
  uint64_t v2 = (TXGlyphGroup **)*((void *)this + 7967);
  uint64_t v3 = (TXGlyphGroup **)*((void *)this + 7968);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
      {
        TXGlyphGroup::~TXGlyphGroup(*v2);
        MEMORY[0x1BA9BFBA0]();
      }
      *v2++ = 0;
    }
    while (v2 != v3);
    uint64_t v2 = *v1;
  }
  v1[1] = v2;

  std::vector<TXParagraphStyle *>::resize((uint64_t)v1, 0);
}

void non-virtual thunk to'TXTextLayout::makeRenderGraphOfElements(TXTextLayout *this, const OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
}

uint64_t TXTextLayout::getPrecompCameraType(TXTextLayout *this, const OZRenderState *a2)
{
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a2->var0;
  return 2 * (TXTextLayout::getPrecompType(this, (CMTime *)&var0) != 1);
}

uint64_t non-virtual thunk to'TXTextLayout::getPrecompCameraType(TXTextLayout *this, const OZRenderState *a2)
{
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a2->var0;
  return 2
       * (TXTextLayout::getPrecompType((TXTextLayout *)((char *)this - 200), (CMTime *)&var0) != 1);
}

BOOL TXTextLayout::isPrecomposed(TXTextLayout *this, const CMTime *a2)
{
  CMTime v3 = *a2;
  return TXTextLayout::getPrecompType(this, &v3) != 2;
}

BOOL non-virtual thunk to'TXTextLayout::isPrecomposed(TXTextLayout *this, const CMTime *a2)
{
  CMTime v3 = *a2;
  return TXTextLayout::getPrecompType((TXTextLayout *)((char *)this - 200), &v3) != 2;
}

void TXTextLayout::makeRenderImageSource(TXTextLayout *this@<X0>, PCSharedCount *a2@<X8>)
{
  StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
  if (PCString::size((PCString *)StringPtr)) {
    operator new();
  }
  a2->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;

  PCSharedCount::PCSharedCount(a2 + 1);
}

void sub_1B7608284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, PCSharedCount *a11)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&STACK[0x298]);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x2A8]);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x2D8]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x2E0]);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x950]);
  std::__list_imp<unsigned int>::clear(&STACK[0x8B0]);
  std::unique_ptr<LiGraphBuilder>::reset[abi:ne180100]((LiGraphBuilder **)(v11 - 128), 0);
  PCSharedCount::~PCSharedCount(a11);
  _Unwind_Resume(a1);
}

LiGraphBuilder *std::unique_ptr<LiGraphBuilder>::reset[abi:ne180100](LiGraphBuilder **a1, LiGraphBuilder *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    LiGraphBuilder::~LiGraphBuilder(result);
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

void non-virtual thunk to'TXTextLayout::makeRenderImageSource(TXTextLayout *this@<X0>, PCSharedCount *a2@<X8>)
{
}

{
  TXTextLayout::makeRenderImageSource((TXTextLayout *)((char *)this - 6728), a2);
}

void TXGlyphGroup::addTextObjectIndex(TXGlyphGroup *this, int a2)
{
  int v4 = (char *)this + 192;
  unint64_t v5 = *((void *)this + 24);
  OZRenderState v6 = (char *)*((void *)this + 23);
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = (char *)*((void *)this + 22);
    uint64_t v9 = (v6 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v5 - (void)v8;
    unint64_t v11 = (uint64_t)(v5 - (void)v8) >> 1;
    if (v11 <= v9 + 1) {
      unint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v4, v12);
      unint64_t v8 = (char *)*((void *)this + 22);
      OZRenderState v6 = (char *)*((void *)this + 23);
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    PCSharedCount v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = a2;
    uint64_t v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *((void *)this + 22) = v14;
    *((void *)this + 23) = v7;
    *((void *)this + 24) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)OZRenderState v6 = a2;
    uint64_t v7 = v6 + 4;
  }
  *((void *)this + 23) = v7;
}

BOOL PCRay3<double>::transform(uint64_t a1, double *a2)
{
  double v4 = *(double *)(a1 + 16) + *(double *)(a1 + 40);
  unint64_t v5 = (double *)(a1 + 24);
  float64x2_t v8 = vaddq_f64(*(float64x2_t *)a1, *(float64x2_t *)(a1 + 24));
  double v9 = v4;
  PCMatrix44Tmpl<double>::transform<double>(a2, (double *)a1, (double *)a1);
  PCMatrix44Tmpl<double>::transform<double>(a2, v8.f64, v8.f64);
  double v6 = v9 - *(double *)(a1 + 16);
  *(float64x2_t *)unint64_t v5 = vsubq_f64(v8, *(float64x2_t *)a1);
  *(double *)(a1 + 40) = v6;
  return PCVector3<double>::normalize(v5, 0.000000100000001);
}

void TXTextLayout::buildRenderGraph(TXTextLayout *this, OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  float64x2_t v8 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v47, v8);
  StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
  if (PCString::size((PCString *)StringPtr) {
    || this
  }
  {
    OZRenderState::OZRenderState(&v46, a2);
    if (!v46.var31) {
      goto LABEL_15;
    }
    unint64_t v10 = (void *)*((void *)v46.var31 + 1);
    if (!v10) {
      goto LABEL_15;
    }
    unint64_t v11 = (char *)this + 200;
    unint64_t v12 = (char *)v46.var31 + 8;
    do
    {
      unint64_t v13 = v10[4];
      BOOL v14 = v13 >= (unint64_t)v11;
      if (v13 >= (unint64_t)v11) {
        PCSharedCount v15 = v10;
      }
      else {
        PCSharedCount v15 = v10 + 1;
      }
      if (v14) {
        unint64_t v12 = v10;
      }
      unint64_t v10 = (void *)*v15;
    }
    while (*v15);
    if (v12 == (void *)v46.var31 + 1
      || (unint64_t v16 = v12[4], (unint64_t)v11 < v16)
      || v16 == *((void *)v46.var31 + 5))
    {
LABEL_15:
      *((unsigned char *)this + 63720) = 0;
      *((unsigned char *)this + 63728) = 0;
      *((void *)this + 7968) = *((void *)this + 7967);
      std::vector<TXParagraphStyle *>::resize((uint64_t)this + 63736, 0);
      CMTime var0 = (CMTime)a2->var0;
      *((_DWORD *)this + 15931) = TXTextLayout::getPrecompType(this, &var0);
      *((unsigned char *)this + 63720) = 1;
      *((_DWORD *)this + 15933) = TXTextLayout::scaleAffectsLayout(this);
      *((unsigned char *)this + 63728) = 1;
      uint64_t v17 = (char *)this + 200;
      if ((*(unsigned int (**)(char *))(*((void *)this + 25) + 1440))((char *)this + 200))
      {
        (*(void (**)(char *, OZRenderState *, LiGraphBuilder *))(*(void *)v17 + 1976))((char *)this + 200, a2, a3);
      }
      else
      {
        long long v33 = a3;
        int v34 = a4;
        uint64_t v18 = (char *)this + 1200;
        uint64_t v19 = (char *)*((void *)this + 151);
        if (v19 != (char *)this + 1200)
        {
          do
          {
            unint64_t v20 = (const void *)*((void *)v19 + 2);
            if (v20)
            {
              if (v21)
              {
                uint64_t v22 = v21;
                long long v43 = *(_OWORD *)&a2->var0.var0;
                int64_t var3 = a2->var0.var3;
                if ((*(unsigned int (**)(TXSequenceBehavior *, long long *, uint64_t, uint64_t, uint64_t))(*(void *)v21 + 296))(v21, &v43, 1, 1, 1))
                {
                  CMTime v40 = (CMTime)a2->var0;
                  unint64_t v23 = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
                  PCString::size((PCString *)v23);
                  TXSequenceBehavior::createInfluenceCache(v22, &v40);
                }
              }
            }
            uint64_t v19 = (char *)*((void *)v19 + 1);
          }
          while (v19 != v18);
        }
        OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v40, a4);
        (*(void (**)(char *, OZRenderState *, CMTime *))(*(void *)v17 + 2064))((char *)this + 200, a2, &v40);
        if ((*(unsigned int (**)(TXTextLayout *, void))(*(void *)this + 936))(this, MEMORY[0x1E4F1FA48]))
        {
          TXTextLayout::doLayout(this, a2, 0);
          CMTime v39 = (CMTime)a2->var0;
          int PrecompType = TXTextLayout::getPrecompType(this, &v39);
          if (PrecompType == 1) {
            LiGraphBuilder::partitionWorld((uint64_t)v33);
          }
          OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v36, v34);
          LiGraphBuilder::getCurrentLocalToWorld(v33, (uint64_t)v35);
          for (uint64_t i = 0; i != 128; i += 32)
          {
            long long v26 = (char *)&v36 + i;
            long long v27 = *(_OWORD *)&v35[i + 16];
            *((_OWORD *)v26 + 6) = *(_OWORD *)&v35[i];
            *((_OWORD *)v26 + 7) = v27;
          }
          OZElement::buildRenderGraph((OZElement *)((char *)this + 200), (CMTime *)a2, v33, (const OZRenderGraphState *)&v36);
          if (PrecompType == 1) {
            LiGraphBuilder::partitionWorld((uint64_t)v33);
          }
          PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v38);
          std::__list_imp<unsigned int>::clear(v37);
        }
        else
        {
          (*(void (**)(TXTextLayout *, OZRenderState *))(*(void *)this + 576))(this, a2);
          (*(void (**)(TXTextLayout *, OZRenderState *, LiGraphBuilder *, CMTime *, void))(*(void *)this + 904))(this, a2, v33, &v40, 0);
        }
        long long v28 = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
        if (PCString::size((PCString *)v28))
        {
          int v29 = (*(uint64_t (**)(TXTextLayout *))(*(void *)this + 1192))(this) ^ 1;
          if (!v33) {
            LOBYTE(v29) = 1;
          }
          if ((v29 & 1) == 0)
          {
            if ((*(unsigned int (**)(TXTextLayout *))(*(void *)this + 296))(this))
            {
              LiGraphBuilder::getCurrentInsertionGroup(v33, (PCSharedCount *)&v36);
              if (!v36.value) {
                throw_PCNullPointerException(1);
              }
              (*(void (**)(CMTimeValue, uint64_t))(*(void *)v36.value + 192))(v36.value, 1);
              PCSharedCount::~PCSharedCount((PCSharedCount *)&v36.timescale);
            }
            TXTextLayout::buildBackgroundGeode(this, (CMTime *)a2, v34);
          }
        }
        std::__list_imp<TXTextLayout::HGNodeCacheEntry>::clear((uint64_t *)this + 7584);
        PCSharedMutex::lock((std::mutex *)((char *)this + 60768));
        std::__list_imp<TXTextLayout::HGMetalNodeCacheEntry>::clear((uint64_t *)this + 7609);
        PCSharedMutex::unlock((std::mutex *)((char *)this + 60768));
        *((unsigned char *)this + 63720) = 0;
        *((unsigned char *)this + 63728) = 0;
        for (uint64_t j = *((void *)this + 151); (char *)j != v18; uint64_t j = *(void *)(j + 8))
        {
          uint64_t v31 = *(const void **)(j + 16);
          if (v31)
          {
            if (v32)
            {
              CMTime v36 = (CMTime)a2->var0;
              TXSequenceBehavior::clearInfluenceCache(v32, &v36);
            }
          }
        }
        PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v42);
        std::__list_imp<unsigned int>::clear(v41);
      }
    }
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v47);
}

void sub_1B7608C40(_Unwind_Exception *a1)
{
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x2C0]);
  std::__list_imp<unsigned int>::clear(&STACK[0x220]);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v1 - 96));
  _Unwind_Resume(a1);
}

void TXTextLayout::buildBackgroundGeode(TXTextLayout *this, CMTime *a2, const OZRenderGraphState *a3)
{
  v12[0] = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v12[1] = _Q0;
  (*(void (**)(TXTextLayout *, _OWORD *, CMTime *))(*(void *)this + 400))(this, v12, a2);
  PCColor::PCColor(&v11);
  CMTime v10 = *a2;
  OZChannelColor::getColor((TXTextLayout *)((char *)this + 61952), &v10, &v11, 0.0);
  operator new();
}

void sub_1B7608F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CGColorSpace *a20)
{
  if (a10)
  {
    if (atomic_fetch_add(a10 - 3, 0xFFFFFFFF) == 1)
    {
      *(unsigned char *)a10 = 0;
      free(a10 - 3);
    }
  }
  PCSharedCount::~PCSharedCount(v20);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a20);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'TXTextLayout::buildRenderGraph(TXTextLayout *this, OZRenderState *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
}

{
  TXTextLayout::buildRenderGraph((TXTextLayout *)((char *)this - 6728), a2, a3, a4);
}

uint64_t TXTextLayout::setGeodeProperties3D(TXTextLayout *this, CMTime *a2, const OZRenderGraphState *a3, LiGeode *a4)
{
  OZElement::setGeodeProperties3D((uint64_t)this + 200, (uint64_t)a2, (uint64_t)a3, a4);
  uint64_t result = (*(uint64_t (**)(TXTextLayout *))(*(void *)this + 312))(this);
  if (result)
  {
    CMTime v9 = *a2;
    uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 20312), &v9, 0.0);
    BOOL v8 = result != 0;
  }
  else
  {
    BOOL v8 = 0;
  }
  *((unsigned char *)a4 + 556) = v8;
  return result;
}

uint64_t non-virtual thunk to'TXTextLayout::setGeodeProperties3D(TXTextLayout *this, CMTime *a2, const OZRenderGraphState *a3, LiGeode *a4)
{
  return TXTextLayout::setGeodeProperties3D((TXTextLayout *)((char *)this - 200), a2, a3, a4);
}

uint64_t TXTextLayout::doesTransformFromLocalToScreenSpace(TXTextLayout *this, const OZRenderParams *a2)
{
  if (*((unsigned char *)a2 + 1400)) {
    return 0;
  }
  if ((*(unsigned int (**)(TXTextLayout *))(*(void *)this + 304))(this))
  {
    return OZElement::doesTransformFromLocalToScreenSpace((uint64_t)this + 200);
  }
  else
  {
    int v5 = (*(uint64_t (**)(TXTextLayout *, const OZRenderParams *))(*(void *)this + 928))(this, a2);
    if ((*(unsigned int (**)(TXTextLayout *, void))(*(void *)this + 936))(this, MEMORY[0x1E4F1FA48])) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6 || ((*(uint64_t (**)(TXTextLayout *))(*(void *)this + 312))(this) & 1) != 0)
    {
      return 1;
    }
    else
    {
      uint64_t v7 = *(uint64_t (**)(char *, const OZRenderParams *))(*((void *)this + 25) + 2224);
      return v7((char *)this + 200, a2);
    }
  }
}

uint64_t non-virtual thunk to'TXTextLayout::doesTransformFromLocalToScreenSpace(TXTextLayout *this, const OZRenderParams *a2)
{
  return TXTextLayout::doesTransformFromLocalToScreenSpace((TXTextLayout *)((char *)this - 200), a2);
}

void TXTextLayout::makeGaussianBlur()
{
}

void sub_1B7609338(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void TXTextLayout::buildGlyphGeode(TXTextLayout *this, LiImageSource *a2, const OZRenderParams *a3, const OZRenderGraphState *a4, const TXTextObject *a5)
{
}

void sub_1B7609518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void TXTextLayout::addFillSource(uint64_t a1@<X0>, const PCSharedCount *a2@<X1>, TXTextObject *a3@<X2>, CMTime *a4@<X3>, const FxColorDescription *a5@<X4>, int a6@<W5>, int a7@<W6>, PCSharedCount *a8@<X8>)
{
  a8->CMTime var0 = a2->var0;
  BOOL v14 = a8 + 1;
  PCSharedCount::PCSharedCount(a8 + 1, a2 + 1);
  uint64_t v15 = *((void *)a3 + 33);
  if (v15)
  {
    uint64_t v17 = *(TXTextStyle **)(v15 + 8);
    unint64_t v16 = *(std::__shared_weak_count **)(v15 + 16);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  int FillType = TXTextStyle::getFillType(v17, a6);
  if (FillType == 1)
  {
    if (a7) {
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 60520), MEMORY[0x1E4F1FA48], 0.0);
    }
    CMTime var0 = a8->var0;
    PCSharedCount::PCSharedCount(&v23, v14);
    TXTextStyle::getGradientChannel(v17, a6);
    CMTime v21 = *a4;
    TXTextStyle::getGradient(v17, a6, &v21, a5);
    TXTextLayout::scaleAffectsLayout((TXTextLayout *)a1);
    operator new();
  }
  if (FillType == 2 && TXTextStyle::hasTexture(v17, a6))
  {
    TextureChannel = (OZChannel *)TXTextStyle::getTextureChannel(v17, a6);
    CMTime v24 = *a4;
    OZChannel::getValueAsDouble(TextureChannel + 5, &v24, 0.0);
    OZChannel::getValueAsDouble(TextureChannel + 6, &v24, 0.0);
    TXTextObject::getImageBounds(a3, (const OZRenderState *)a4, (uint64_t)&v24);
    TXTextObject::getTypographicBounds(a3);
    operator new();
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_1B7609B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,PCSharedCount a31)
{
  PCSharedCount::~PCSharedCount(v34);
  PCSharedCount::~PCSharedCount(v33);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  PCSharedCount::~PCSharedCount(v32);
  _Unwind_Resume(a1);
}

PC_Sp_counted_base **PCPtr<LiImageSource>::operator=<TXTextureDecal>(PC_Sp_counted_base **a1, const PCSharedCount *a2)
{
  CMTime var0 = a2->var0;
  *a1 = a2->var0;
  if (var0)
  {
    double v4 = &v6;
    PCSharedCount::PCSharedCount(&v6, a2 + 1);
    PCSharedCount::operator=((uint64_t *)a1 + 1, (uint64_t *)&v6);
  }
  else
  {
    double v4 = &v7;
    PCSharedCount::PCSharedCount(&v7);
    PCSharedCount::operator=((uint64_t *)a1 + 1, (uint64_t *)&v7);
  }
  PCSharedCount::~PCSharedCount(v4);
  return a1;
}

void sub_1B7609CE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::getLiImageSourceForFace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  *a6 = 1;
  makeTextObjectRender();
}

void sub_1B7609FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,PCSharedCount a23)
{
  PCSharedCount::~PCSharedCount(v24);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a10);
  PCSharedCount::~PCSharedCount(v23 + 1);
  PCSharedCount::~PCSharedCount(&a23);
  _Unwind_Resume(a1);
}

void makeTextObjectRender()
{
}

void sub_1B760A0D4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C403D84D727);
  _Unwind_Resume(a1);
}

void TXTextLayout::getLiImageSourceForOutline(uint64_t a1, uint64_t a2, uint64_t a3, TXTextObject **a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  *a7 = 1;
  uint64_t v8 = *((void *)*a4 + 33);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    CMTime v10 = *(std::__shared_weak_count **)(v8 + 16);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v9 = 0;
    CMTime v10 = 0;
  }
  if (OZChannel::getValueAsInt((OZChannel *)(v9 + 30928), MEMORY[0x1E4F1FA48], 0.0))
  {
    TXTextObject::isEmoji(*a4);
    if (!v10) {
      goto LABEL_8;
    }
  }
  else if (!v10)
  {
LABEL_8:
    makeTextObjectRender();
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  goto LABEL_8;
}

void sub_1B760A550(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1 + 1);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v3 - 120));
  _Unwind_Resume(a1);
}

void TXTextLayout::getLiImageSourceForGlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  *a6 = 1;
  makeTextObjectRender();
}

void sub_1B760AAB0(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v4);
  PCSharedCount::~PCSharedCount(v5);
  PCSharedCount::~PCSharedCount(v3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PCSharedCount::~PCSharedCount(v1 + 1);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v6 - 112));
  _Unwind_Resume(a1);
}

void LiImageTransform::LiImageTransform(LiImageTransform *this, LiImageSource *a2)
{
  *((void *)this + 44) = &unk_1F1199AC8;
  *((void *)this + 45) = 0;
  *((unsigned char *)this + 368) = 1;
  LiImageFilter::LiImageFilter(this, (uint64_t *)&off_1F111CF30);
  *(void *)this = &unk_1F111CE28;
  *((void *)this + 44) = &unk_1F111CF10;
  *((void *)this + 15) = 0x3FF0000000000000;
  *((void *)this + 10) = 0x3FF0000000000000;
  *((void *)this + 5) = 0x3FF0000000000000;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 36) = 0x3FF0000000000000;
  *((void *)this + 31) = 0x3FF0000000000000;
  *((void *)this + 26) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)this + 10) = _Q1;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  LiClipSet::LiClipSet((LiImageTransform *)((char *)this + 304));
  (*(void (**)(LiImageTransform *, LiImageSource *))(*(void *)this + 168))(this, a2);
}

void sub_1B760ACCC(_Unwind_Exception *a1)
{
  LiClipSet::~LiClipSet(v3);
  LiImageFilter::~LiImageFilter((PCSharedCount *)v1, v4 + 1);
  *(void *)(v1 + 352) = v2;
  *(unsigned char *)(v1 + 368) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 360));
  _Unwind_Resume(a1);
}

double PCMatrix44Tmpl<double>::rightScale(double *a1, double a2, double a3, double a4)
{
  if (a2 != 1.0)
  {
    *a1 = *a1 * a2;
    a1[4] = a1[4] * a2;
    a1[8] = a1[8] * a2;
    a1[12] = a1[12] * a2;
  }
  if (a3 != 1.0)
  {
    a1[1] = a1[1] * a3;
    a1[5] = a1[5] * a3;
    a1[9] = a1[9] * a3;
    a1[13] = a1[13] * a3;
  }
  double result = 1.0;
  if (a4 != 1.0)
  {
    a1[2] = a1[2] * a4;
    a1[6] = a1[6] * a4;
    a1[10] = a1[10] * a4;
    double result = a1[14] * a4;
    a1[14] = result;
  }
  return result;
}

uint64_t TXGlowFilter::TXGlowFilter(uint64_t a1, void *a2, const OZRenderParams *a3)
{
  *(void *)(a1 + 1544) = &unk_1F1199AC8;
  *(void *)(a1 + 1552) = 0;
  *(unsigned char *)(a1 + 1560) = 1;
  LiCachedGaussianBlur::LiCachedGaussianBlur(a1, (uint64_t *)off_1F10B06D0, a2, a3);
  *(void *)a1 = &unk_1F10B05C0;
  *(void *)(a1 + 1544) = &unk_1F10B06B0;
  *(void *)(a1 + 1520) = 0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a1 + 1528));
  return a1;
}

void sub_1B760AE78(_Unwind_Exception *a1)
{
  double v4 = v3;
  LiCachedGaussianBlur::~LiCachedGaussianBlur((PCSharedCount *)v1, v4 + 1);
  *(void *)(v1 + 1544) = v2;
  *(unsigned char *)(v1 + 1560) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1552));
  _Unwind_Resume(a1);
}

void TXTextLayout::getLiImageSourceForDropShadow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  *a6 = 1;
  makeTextObjectRender();
}

void sub_1B760B1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, PCSharedCount a18)
{
  PCSharedCount::~PCSharedCount(v19);
  PCSharedCount::~PCSharedCount(&a18);
  PCSharedCount::~PCSharedCount(v18 + 1);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v20 - 80));
  _Unwind_Resume(a1);
}

void sub_1B760B288()
{
}

uint64_t TXTextLayout::buildLighting(TXTextLayout *this, LiGeode *a2, const LiLightSet *a3, const OZRenderParams *a4)
{
  int v8 = (*(uint64_t (**)(TXTextLayout *))(*(void *)this + 304))(this);
  if ((*(unsigned int (**)(TXTextLayout *))(*(void *)this + 312))(this)) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9)
  {
    OZElement::buildLighting((OZElement *)((char *)this + 200), a2, a3, a4);
    if ((((*(unsigned int (**)(TXTextLayout *, void))(*(void *)this + 936))(this, MEMORY[0x1E4F1FA48]) ^ 1 | v8) & 1) == 0) {
      LiGeode::setLit((uint64_t)a2, 0);
    }
  }
  uint64_t result = (*(uint64_t (**)(TXTextLayout *))(*(void *)this + 296))(this);
  if (result)
  {
    return LiGeode::setLit((uint64_t)a2, 0);
  }
  return result;
}

uint64_t non-virtual thunk to'TXTextLayout::buildLighting(TXTextLayout *this, LiGeode *a2, const LiLightSet *a3, const OZRenderParams *a4)
{
  return TXTextLayout::buildLighting((TXTextLayout *)((char *)this - 200), a2, a3, a4);
}

uint64_t TXTextLayout::buildMaterials@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  OZElement::buildMaterials((OZElement *)(a1 + 200), a2, a3, a4, a5);
  if (*(unsigned char *)(a5 + 101)) {
    *(unsigned char *)(a5 + 104) = OZRenderParams::getTextRenderQuality((OZRenderParams *)a2) == 6;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296))(a1);
  if (result) {
    *(_WORD *)(a5 + 101) = 1;
  }
  return result;
}

void sub_1B760B4A0(_Unwind_Exception *a1)
{
  LiMaterialProperties::~LiMaterialProperties(v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'TXTextLayout::buildMaterials@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return TXTextLayout::buildMaterials(a1 - 200, a2, a3, a4, a5);
}

double TXTextLayout::castShadowMaxScale(TXTextLayout *this, const OZRenderParams *a2)
{
  long long v6 = *(_OWORD *)a2;
  uint64_t v7 = *((void *)a2 + 2);
  if ((*(unsigned int (**)(TXTextLayout *, long long *))(*(void *)this + 936))(this, &v6)) {
    return OZElement::castShadowMaxScale((OZElement *)((char *)this + 200), a2);
  }
  int TextRenderQuality = OZRenderParams::getTextRenderQuality(a2);
  double result = 1.0;
  if (TextRenderQuality == 6) {
    return 10.0;
  }
  return result;
}

double non-virtual thunk to'TXTextLayout::castShadowMaxScale(TXTextLayout *this, const OZRenderParams *a2)
{
  return TXTextLayout::castShadowMaxScale((TXTextLayout *)((char *)this - 200), a2);
}

double TXTextLayout::setShadowBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 304))(a1))
  {
    *(void *)&double result = OZElement::setShadowBounds(a1 + 200, a2, a3, a4).n128_u64[0];
  }
  return result;
}

double non-virtual thunk to'TXTextLayout::setShadowBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 - 200) + 304))())
  {
    *(void *)&double result = OZElement::setShadowBounds(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

uint64_t TXTextLayout::canReflect(TXTextLayout *this)
{
  uint64_t result = OZElement::canReflect((OZElement *)((char *)this + 200));
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(TXTextLayout *))(*(void *)this + 304);
    return v3(this);
  }
  return result;
}

uint64_t non-virtual thunk to'TXTextLayout::canReflect(OZElement *this)
{
  uint64_t result = OZElement::canReflect(this);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(char *))(*((void *)this - 25) + 304);
    return v3((char *)this - 200);
  }
  return result;
}

__n128 PCRect<int>::operator|=(int32x2_t *a1, int32x2_t *a2)
{
  __int32 v2 = a1[1].i32[0];
  if (v2 < 0 || (__int32 v3 = a1[1].i32[1], v3 < 0))
  {
    __n128 result = *(__n128 *)a2->i8;
    *(_OWORD *)a1->i8 = *(_OWORD *)a2->i8;
  }
  else
  {
    result.n128_u64[0] = (unint64_t)a2[1];
    if ((result.n128_u32[0] & 0x80000000) == 0 && (result.n128_u32[1] & 0x80000000) == 0)
    {
      int32x2_t v5 = vmin_s32(*a1, *a2);
      result.n128_u64[0] = (unint64_t)vsub_s32(vmax_s32(vadd_s32((int32x2_t)__PAIR64__(v3, v2), *a1), vadd_s32((int32x2_t)result.n128_u64[0], *a2)), v5);
      *a1 = v5;
      a1[1] = (int32x2_t)result.n128_u64[0];
    }
  }
  return result;
}

uint64_t TXTextLayout::isColorAnimated(TXTextLayout *this, OZChannelColorNoAlpha *a2, OZChannelPercent *a3, int a4, uint64_t a5, uint64_t a6)
{
  if (!a4 && ((*(uint64_t (**)(OZChannelColorNoAlpha *, void))(*(void *)a2 + 552))(a2, 0) & 1) != 0
    || ((*((uint64_t (**)(OZChannelPercent *, void))a3->var0 + 69))(a3, 0) & 1) != 0
    || !a4
    && ((OZBehavior::IsChannelAffectedByBehaviors((OZChannelColorNoAlpha *)((char *)a2 + 136), 0) & 1) != 0
     || (OZBehavior::IsChannelAffectedByBehaviors((OZChannelColorNoAlpha *)((char *)a2 + 288), 0) & 1) != 0
     || (OZBehavior::IsChannelAffectedByBehaviors((OZChannelColorNoAlpha *)((char *)a2 + 440), 0) & 1) != 0)
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)a3, 0) & 1) != 0)
  {
    return 1;
  }
  unint64_t v12 = (void *)*((void *)this + 151);
  if (v12 == (void *)((char *)this + 1200)) {
    return 0;
  }
  while (1)
  {
    unint64_t v13 = (const void *)v12[2];
    if (!v13)
    {
      LODWORD(v14) = 0;
      goto LABEL_22;
    }
    if (v14) {
      break;
    }
LABEL_16:
    if (v15) {
      goto LABEL_17;
    }
LABEL_22:
    BOOL isChannelEnabled = 0;
LABEL_23:
    uint64_t result = v14 | isChannelEnabled;
    if (result != 1)
    {
      unint64_t v12 = (void *)v12[1];
      if (v12 != (void *)((char *)this + 1200)) {
        continue;
      }
    }
    return result;
  }
  if (!a4
    && ((*(uint64_t (**)(void *, uint64_t, void, void))(*(void *)v14 + 616))(v14, a5, 0, 0) & 1) != 0)
  {
    LODWORD(v14) = 1;
    if (!v15)
    {
      int v18 = 0;
      return v14 | v18;
    }
    goto LABEL_18;
  }
  if ((*(uint64_t (**)(void *, uint64_t, void, void))(*(void *)v14 + 616))(v14, a6, 0, 0))
  {
    LODWORD(v14) = 1;
    goto LABEL_16;
  }
  LODWORD(v14) = (*(uint64_t (**)(void *, uint64_t, void, void))(*(void *)v14 + 616))(v14, 1044, 0, 0);
  if (!v15) {
    goto LABEL_22;
  }
LABEL_17:
  if (a4) {
    goto LABEL_19;
  }
LABEL_18:
  if (TXTextSequenceBehavior::isChannelEnabled(v15, a5)) {
    goto LABEL_32;
  }
LABEL_19:
  if (!TXTextSequenceBehavior::isChannelEnabled(v15, a6))
  {
    BOOL isChannelEnabled = TXTextSequenceBehavior::isChannelEnabled(v15, 1044);
    goto LABEL_23;
  }
LABEL_32:
  int v18 = 1;
  return v14 | v18;
}

CGColorSpace **TXTextLayout::buildHGNodeForDropShadow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long *a9, long long *a10, double *a11, _DWORD *a12, unsigned __int8 a13, char a14)
{
  uint64_t v14 = MEMORY[0x1F4188790](a1);
  unsigned int v108 = v15;
  char v107 = v16;
  int v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  CMTime v24 = v23;
  uint64_t v26 = v25;
  uint64_t v27 = v14;
  int v29 = v28;
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  RequestedColorDescriptiounint64_t n = (OZEaseInInterpolator *)LiAgent::getRequestedColorDescription(v21);
  OZEaseInInterpolator::~OZEaseInInterpolator(RequestedColorDescription);
  uint64_t v32 = v31;
  int DynamicRange = FxColorDescription::getDynamicRange((FxColorDescription *)RequestedColorDescription);
  ToneMapMethod = (PCToneMapMethod *)FxColorDescription::getToneMapMethod((FxColorDescription *)RequestedColorDescription);
  PCWorkingColor::PCWorkingColor((uint64_t)&v157, v32, DynamicRange, ToneMapMethod);
  long long v35 = *(TXTextObject **)v26;
  CMTime v156 = *v24;
  if ((TXTextObject::isDropShadowVisible(v35, &v156, (PCWorkingColor *)&v157) & 1) == 0)
  {
    double *v29 = 0.0;
    return PCCFRef<CGColorSpace *>::~PCCFRef(&v158);
  }
  uint64_t v36 = *(void *)(*(void *)v26 + 264);
  if (!v36)
  {
    uint64_t v37 = 0;
    goto LABEL_13;
  }
  int v106 = v18;
  uint64_t v38 = *(void *)(v36 + 8);
  uint64_t v37 = *(std::__shared_weak_count **)(v36 + 16);
  if (v37) {
    atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v38)
  {
LABEL_13:
    double *v29 = 0.0;
    if (!v37) {
      return PCCFRef<CGColorSpace *>::~PCCFRef(&v158);
    }
    goto LABEL_112;
  }
  CMTime v39 = *(TXTextObject **)v26;
  CMTime v155 = *v24;
  uint64_t v105 = v37;
  double DropShadowDistance = TXTextObject::getDropShadowDistance(v39, &v155);
  long long v41 = *(TXTextObject **)v26;
  CMTime v154 = *v24;
  double DropShadowAngle = TXTextObject::getDropShadowAngle(v41, &v154);
  double ScenePixelAspectRatio = OZSceneNode::getScenePixelAspectRatio((OZSceneNode *)(v27 + 200));
  __double2 v44 = __sincos_stret(DropShadowAngle);
  uint64_t v153 = 0x3FF0000000000000;
  uint64_t v150 = 0x3FF0000000000000;
  uint64_t v147 = 0x3FF0000000000000;
  uint64_t v144 = 0x3FF0000000000000;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v148 = 0u;
  long long v149 = 0u;
  long long v151 = 0u;
  long long v152 = 0u;
  double v45 = DropShadowDistance * v44.__sinval;
  double v46 = DropShadowDistance * v44.__cosval;
  v47.f64[0] = v46 * ScenePixelAspectRatio;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v144, v47, v45, 0.0);
  if (OZChannel::getValueAsInt((OZChannel *)(v27 + 20464), MEMORY[0x1E4F1FA48], 0.0) != 3
    && OZChannel::getValueAsInt((OZChannel *)(v27 + 20464), MEMORY[0x1E4F1FA48], 0.0) != 4
    && LiAgent::haveROI(v22))
  {
    if (OZRenderParams::getTextRenderQuality((OZRenderParams *)v24))
    {
      long long v48 = a10[5];
      v109[4] = a10[4];
      v109[5] = v48;
      long long v49 = a10[7];
      v109[6] = a10[6];
      v109[7] = v49;
      long long v50 = a10[1];
      v109[0] = *a10;
      v109[1] = v50;
      long long v51 = a10[3];
      v109[2] = a10[2];
      v109[3] = v51;
    }
    else
    {
      LiAgent::getObjectToPixelTransform(v22, (uint64_t)v109);
    }
    OZRenderState::OZRenderState(&v159, (const OZRenderState *)v24);
    v159.var4 = 1;
    float64_t v143 = 0.0;
    float64_t v142 = 0.0;
    double v52 = *(TXTextObject **)v26;
    CMTime v141 = *v24;
    TXTextObject::getDropShadowBlur(v52, &v141, &v143, &v142);
    TXTextObject::getImageBounds(*(TXTextObject **)v26, &v159, (uint64_t)&v138);
    v53.f64[0] = v143;
    v53.f64[1] = v142;
    __asm { FMOV            V3.2D, #3.0 }
    float64x2_t v59 = vmulq_f64(v53, _Q3);
    __asm { FMOV            V3.2D, #2.0 }
    float64x2_t v61 = vaddq_f64(v59, _Q3);
    double v138 = v138 - v61.f64[0];
    double v139 = v139 - v61.f64[1];
    float64x2_t v140 = vsubq_f64(v140, vsubq_f64(vnegq_f64(v61), v61));
    double v137 = 0.0;
    float64_t v136 = 0.0;
    double v62 = *(TXTextObject **)v26;
    CMTime v135 = *v24;
    TXTextObject::getDropShadowScale(v62, &v135, &v137, &v136, 1);
    uint64_t v134 = 0x3FF0000000000000;
    uint64_t v131 = 0x3FF0000000000000;
    float64_t v128 = 1.0;
    float64_t v125 = 1.0;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    if (v137 != 1.0)
    {
      float64_t v125 = v137;
      *(double *)&long long v126 = v137 * 0.0;
      *((double *)&v126 + 1) = v137 * 0.0;
      *(double *)&long long v127 = v137 * 0.0;
    }
    if (v136 != 1.0)
    {
      *((double *)&v127 + 1) = v136 * 0.0;
      float64_t v128 = v136;
      *(double *)&long long v129 = v136 * 0.0;
      *((double *)&v129 + 1) = v136 * 0.0;
    }
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v38 + 19528), MEMORY[0x1E4F1FA48], 0.0);
    uint64_t v124 = 0x3FF0000000000000;
    uint64_t v121 = 0x3FF0000000000000;
    uint64_t v118 = 0x3FF0000000000000;
    v117.f64[0] = 1.0;
    v64.f64[1] = 0.0;
    memset(&v117.f64[1], 0, 32);
    long long v119 = 0u;
    long long v120 = 0u;
    long long v122 = 0u;
    long long v123 = 0u;
    if (ValueAsInt)
    {
      v64.f64[0] = v46;
      PCMatrix44Tmpl<double>::leftTranslate(&v117, v64, v45, 0.0);
      PCMatrix44Tmpl<double>::operator*((uint64_t)&v117, v109, (uint64_t)v110);
      PCMatrix44Tmpl<double>::operator*((uint64_t)v110, a9, (uint64_t)&v111);
      PCMatrix44Tmpl<double>::operator*((uint64_t)&v111, v108, (uint64_t)v114);
    }
    else
    {
      PCMatrix44Tmpl<double>::operator*((uint64_t)v109, a9, (uint64_t)v110);
      PCMatrix44Tmpl<double>::operator*((uint64_t)v110, v108, (uint64_t)&v111);
      PCMatrix44Tmpl<double>::operator*((uint64_t)&v111, (long long *)&v144, (uint64_t)v114);
    }
    PCMatrix44Tmpl<double>::operator*((uint64_t)v114, (long long *)&v125, (uint64_t)v116);
    LiAgent::getROI((__n128 *)v22, v114);
    v65.i64[0] = v114[0].n128_i32[0];
    v65.i64[1] = v114[0].n128_i32[1];
    float64x2_t v111 = vcvtq_f64_s64(v65);
    double v112 = (double)v114[0].n128_i32[2];
    double v113 = (double)v114[0].n128_i32[3];
    if ((v114[0].n128_u32[2] & 0x80000000) == 0 && (v114[0].n128_u32[3] & 0x80000000) == 0)
    {
      LiImagePolygon::LiImagePolygon((LiImagePolygon *)v114);
      LiImagePolygon::set((uint64_t)v114, &v138, 0);
      liTransformAndClip(v111.f64, (double *)v116[0].i64, (uint64_t **)v114);
      if (((v115[1] - *v115) & 0x1FFFFFFFE0) == 0)
      {
        double *v29 = 0.0;
        LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v114);
        if (!v37) {
          return PCCFRef<CGColorSpace *>::~PCCFRef(&v158);
        }
        goto LABEL_112;
      }
      LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v114);
    }
  }
  int v66 = OZChannel::getValueAsInt((OZChannel *)(v38 + 13976), MEMORY[0x1E4F1FA48], 0.0);
  int isColorAnimated = TXTextLayout::isColorAnimated((TXTextLayout *)v27, (OZChannelColorNoAlpha *)(v38 + 14232), (OZChannelPercent *)(v38 + 18040), v66, 1021, 1022);
  int v104 = v66;
  double v138 = 0.0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v116);
  v114[0] = (__n128)xmmword_1B7E74760;
  float64_t v143 = 1.0;
  float64_t v142 = 1.0;
  uint64_t v68 = LiAgent::getRequestedColorDescription(v22);
  float64x2_t v111 = 0uLL;
  double v137 = 0.0;
  LOBYTE(v103) = a13;
  if (TXTextLayout::getCachedTextureOrImage((Li3DEngineScene *)v27, *(TXTextObject **)v26, (OZRenderParams *)v24, v22, 3u, isColorAnimated, a9, (uint64_t)a10, v116, &v143, &v142, (int32x4_t *)v114, v103, (uint64_t)&v111, &v137, a14))
  {
    TXTextLayout::makeHGTextureOrBitmapNode((HGRenderJob *)v24, (uint64_t)&v111, (HGBitmap **)&v137, (uint64_t *)v114, (LiRenderParameters **)v22, a13, (HGBitmapLoader **)&v159);
    int64_t var0 = v159.var0.var0;
    if (*(void *)&v138 == v159.var0.var0)
    {
      if (v138 != 0.0) {
        (*(void (**)(void))(**(void **)&v138 + 24))();
      }
    }
    else
    {
      if (v138 != 0.0) {
        (*(void (**)(void))(**(void **)&v138 + 24))();
      }
      double v138 = *(double *)&var0;
      v159.var0.int64_t var0 = 0;
    }
    unsigned int v70 = a11;
    *a11 = 1.0 / v143;
    a11[5] = 1.0 / v142;
    v159.var7.var0[1][2] = 1.0;
    v159.var7.var0[0][1] = 1.0;
    v159.int64_t var3 = 1.0;
    v159.var0.int64_t var0 = 0x3FF0000000000000;
    memset(&v159.var0.var1, 0, 32);
    memset(&v159.var4, 0, 32);
    memset(&v159.var7.var0[0][2], 0, 32);
    if (!*v20)
    {
      PCMatrix44Tmpl<double>::operator*((uint64_t)a10, a9, (uint64_t)&v125);
      PCMatrix44Tmpl<double>::operator*((uint64_t)&v125, v108, (uint64_t)v109);
      for (uint64_t i = 0; i != 8; i += 2)
      {
        char v72 = (_OWORD *)((char *)&v159.var0.var0 + i * 16);
        long long v73 = v109[i + 1];
        _OWORD *v72 = v109[i];
        v72[1] = v73;
      }
      if (!OZChannel::getValueAsInt((OZChannel *)(v38 + 19528), MEMORY[0x1E4F1FA48], 0.0)) {
        PCMatrix44Tmpl<double>::rightMult((uint64_t)&v159, (double *)&v144);
      }
      PCMatrix44Tmpl<double>::rightMult((uint64_t)&v159, a11);
    }
    if (!PCMatrix44Tmpl<double>::isIdentity((double *)&v159.var0.var0))
    {
      v74.i64[0] = v114[0].n128_i32[2];
      v74.i64[1] = v114[0].n128_i32[3];
      __asm { FMOV            V2.2D, #0.5 }
      float64x2_t v76 = vmulq_f64(vcvtq_f64_s64(v74), _Q2);
      v74.i64[0] = v114[0].n128_i32[0];
      v74.i64[1] = v114[0].n128_i32[1];
      float64_t v125 = COERCE_DOUBLE(vcvt_f32_f64(vaddq_f64(v76, vcvtq_f64_s64(v74))));
      LiAgent::makeHeliumXForm((uint64_t)v22, (uint64_t)&v159, (uint64_t *)&v138, v109);
      double v77 = *(double *)v109;
      if (*(void *)&v138 == *(void *)&v109[0])
      {
        if (v138 != 0.0) {
          (*(void (**)(void))(**(void **)&v138 + 24))();
        }
      }
      else
      {
        if (v138 != 0.0)
        {
          (*(void (**)(void))(**(void **)&v138 + 24))();
          double v77 = *(double *)v109;
        }
        double v138 = v77;
      }
    }
    if ((TXTextObject::isEmoji(*(TXTextObject **)v26) & isColorAnimated) != 1) {
      goto LABEL_73;
    }
    if (a12) {
      *a12 = 1065353216;
    }
    v78.n128_u32[0] = v157.n128_u32[3];
    if (v157.n128_f32[3] == 1.0 || (v104 - 1) >= 2)
    {
      if (v104) {
        goto LABEL_66;
      }
      *(double *)&CMTime v79 = COERCE_DOUBLE(HGObject::operator new(0x200uLL));
      HgcTXColor::HgcTXColor(v79);
    }
    else
    {
      if (a12)
      {
        *a12 = v157.n128_u32[3];
        *(double *)&CMTime v79 = v138;
        if (v138 != 0.0)
        {
          (*(void (**)(double, float))(**(void **)&v138 + 16))(COERCE_DOUBLE(*(void *)&v138), v78.n128_f32[0]);
          goto LABEL_68;
        }
LABEL_73:
        if (*v20)
        {
          if (OZChannel::getValueAsInt((OZChannel *)(v38 + 13976), MEMORY[0x1E4F1FA48], 0.0) == 2) {
            unsigned __int8 v80 = TXTextStyle::hasTexture((TXTextStyle *)v38, (OZChannelImageWithOptions *)(v38 + 16448));
          }
          else {
            unsigned __int8 v80 = 0;
          }
          *(_DWORD *)uint64_t *v20 = v106;
          if (OZChannel::getValueAsInt((OZChannel *)(v38 + 19528), MEMORY[0x1E4F1FA48], 0.0))
          {
            LiAgent::getObjectToPixelTransform(v22, (uint64_t)&v117);
            int v81 = v106;
            PCMatrix44Tmpl<double>::operator*((uint64_t)&v144, (long long *)&v117, (uint64_t)&v125);
            PCMatrix44Tmpl<double>::operator*((uint64_t)&v125, a9, (uint64_t)v109);
            PCMatrix44Tmpl<double>::operator*((uint64_t)v109, v108, (uint64_t)&v159);
            unsigned int v82 = (_DWORD *)*v20;
            long long v83 = (OZRenderState *)(*v20 + 8);
            if (&v159 != v83)
            {
              uint64_t v84 = 0;
              long long v85 = &v159;
              do
              {
                for (uint64_t j = 0; j != 32; j += 8)
                  *(int64_t *)((char *)&v83->var0.var0 + j) = *(int64_t *)((char *)&v85->var0.var0 + j);
                ++v84;
                long long v83 = (OZRenderState *)((char *)v83 + 32);
                long long v85 = (OZRenderState *)((char *)v85 + 32);
              }
              while (v84 != 4);
            }
          }
          else
          {
            LiAgent::getObjectToPixelTransform(v22, (uint64_t)&v117);
            int v81 = v106;
            PCMatrix44Tmpl<double>::operator*((uint64_t)&v117, a9, (uint64_t)&v125);
            PCMatrix44Tmpl<double>::operator*((uint64_t)&v125, v108, (uint64_t)v109);
            PCMatrix44Tmpl<double>::operator*((uint64_t)v109, (long long *)&v144, (uint64_t)&v159);
            unsigned int v82 = (_DWORD *)*v20;
            int v87 = (OZRenderState *)(*v20 + 8);
            if (&v159 != v87)
            {
              uint64_t v88 = 0;
              BOOL v89 = &v159;
              do
              {
                for (uint64_t k = 0; k != 32; k += 8)
                  *(int64_t *)((char *)&v87->var0.var0 + k) = *(int64_t *)((char *)&v89->var0.var0 + k);
                ++v88;
                int v87 = (OZRenderState *)((char *)v87 + 32);
                BOOL v89 = (OZRenderState *)((char *)v89 + 32);
              }
              while (v88 != 4);
            }
          }
          int v91 = v82 + 66;
          if (v82 + 66 != (_DWORD *)a11)
          {
            for (uint64_t m = 0; m != 4; ++m)
            {
              for (unint64_t n = 0; n != 32; n += 8)
                *(double *)&v91[n / 4] = v70[n / 8];
              v91 += 8;
              v70 += 4;
            }
          }
          uint64_t v94 = 0;
          *((unsigned char *)v82 + 465) = 1;
          v159.var7.var0[1][2] = 1.0;
          v159.var7.var0[0][1] = 1.0;
          v159.int64_t var3 = 1.0;
          v159.var0.int64_t var0 = 0x3FF0000000000000;
          memset(&v159.var0.var1, 0, 32);
          memset(&v159.var4, 0, 32);
          memset(&v159.var7.var0[0][2], 0, 32);
          do
          {
            int v95 = &v82[v94 + 34];
            _OWORD *v95 = *(_OWORD *)((char *)&v159.var0.var0 + v94 * 4);
            v95[1] = *(_OWORD *)((char *)&v159.var0.var3 + v94 * 4);
            v94 += 8;
          }
          while (v94 != 32);
          if (v107)
          {
            *(int32x4_t *)(v82 + 98) = v116[0];
          }
          else
          {
            PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&v159);
            PCHashWriteStream::writeValue((int8x8_t *)&v159, v81);
            PCHashWriteStream::close((int8x8_t *)&v159);
            PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v109);
            Hash = PCHashWriteStream::getHash((int8x8_t *)&v159);
            v109[0] = *(_OWORD *)Hash->i8;
            *(_OWORD *)(*v20 + 392) = *(_OWORD *)Hash->i8;
            PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&v159);
          }
          uint64_t v97 = *v20;
          *(unsigned char *)(*v20 + 456) = 1;
          uint64_t v99 = *(TXTextObject **)v26;
          uint64_t v98 = *(void *)(v26 + 8);
          if (v98) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v98 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v100 = *(std::__shared_weak_count **)(v97 + 480);
          *(void *)(v97 + 472) = v99;
          *(void *)(v97 + 480) = v98;
          if (v100) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v100);
          }
          PCWorkingColor::operator=((__n128 *)(*v20 + 408), &v157);
          uint64_t v101 = *v20;
          *(_DWORD *)(v101 + 460) = 3;
          *(unsigned char *)(v101 + 464) = v80;
        }
        double *v29 = v138;
        double v138 = 0.0;
        goto LABEL_105;
      }
      *(double *)&CMTime v79 = COERCE_DOUBLE(HGObject::operator new(0x200uLL));
      HgcTXAlpha::HgcTXAlpha(v79);
    }
    if (*(double *)&v79 != 0.0)
    {
      (*(void (**)(HgcTXColor *, void, double))(*(void *)v79 + 120))(v79, 0, COERCE_DOUBLE(*(void *)&v138));
      LODWORD(v159.var0.var0) = 0;
      LODWORD(v109[0]) = 0;
      LODWORD(v125) = 0;
      LODWORD(v117.f64[0]) = 0;
      PCWorkingColor::getRGBA((PCWorkingColor *)&v157, (float *)&v159, (float *)v109, (float *)&v125, (float *)&v117);
      (*(void (**)(HgcTXColor *, void, float, float, float, float))(*(void *)v79 + 96))(v79, 0, *(float *)&v159.var0.var0, *(float *)v109, *(float *)&v125, *(float *)v117.f64);
      goto LABEL_68;
    }
LABEL_66:
    *(double *)&CMTime v79 = v138;
    if (v138 == 0.0) {
      goto LABEL_73;
    }
    (*(void (**)(double, __n128))(**(void **)&v138 + 16))(COERCE_DOUBLE(*(void *)&v138), v78);
LABEL_68:
    if (*(HgcTXColor **)&v138 == v79)
    {
      (*(void (**)(HgcTXColor *))(*(void *)v79 + 24))(v79);
    }
    else
    {
      if (v138 != 0.0) {
        (*(void (**)(void))(**(void **)&v138 + 24))();
      }
      double v138 = *(double *)&v79;
    }
    goto LABEL_73;
  }
  long long v126 = 0u;
  long long v127 = 0u;
  float64_t v125 = v143;
  float64_t v128 = v142;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v132 = 0u;
  long long v133 = 0u;
  uint64_t v131 = 0x3FF0000000000000;
  uint64_t v134 = 0x3FF0000000000000;
  if ((v143 <= -0.0000001 || v143 >= 0.0000001) && (v142 <= -0.0000001 || v142 >= 0.0000001))
  {
    LOBYTE(v136) = 0;
    TXTextLayout::getLiImageSourceForDropShadow(v27, (uint64_t)v24, v68, v26, (uint64_t)&v157, &v136);
  }
  double *v29 = 0.0;
LABEL_105:
  if (v137 != 0.0) {
    (*(void (**)(double))(**(void **)&v137 + 24))(COERCE_DOUBLE(*(void *)&v137));
  }
  uint64_t v37 = v105;
  if (*(void *)&v111.f64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v111.f64[1]);
  }
  if (v138 != 0.0) {
    (*(void (**)(double))(**(void **)&v138 + 24))(COERCE_DOUBLE(*(void *)&v138));
  }
  if (v105) {
LABEL_112:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v158);
}

void sub_1B760CA90(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

CGColorSpace **TXTextLayout::buildHGNodeForGlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long *a9, _OWORD *a10, uint64_t a11, _DWORD *a12, unsigned __int8 a13)
{
  uint64_t v13 = MEMORY[0x1F4188790](a1);
  uint64_t v15 = v14;
  char v17 = v16;
  int v19 = v18;
  CMTime v21 = v20;
  PCSharedCount v23 = v22;
  uint64_t v25 = v24;
  uint64_t v108 = v13;
  uint64_t v27 = v26;
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  char v107 = v28;
  RequestedColorDescriptiounint64_t n = (OZEaseInInterpolator *)LiAgent::getRequestedColorDescription(v28);
  OZEaseInInterpolator::~OZEaseInInterpolator(RequestedColorDescription);
  uint64_t v31 = v30;
  int DynamicRange = FxColorDescription::getDynamicRange((FxColorDescription *)RequestedColorDescription);
  ToneMapMethod = (PCToneMapMethod *)FxColorDescription::getToneMapMethod((FxColorDescription *)RequestedColorDescription);
  PCWorkingColor::PCWorkingColor((uint64_t)&v149, v31, DynamicRange, ToneMapMethod);
  float64_t v148 = 0.0;
  float64_t v147 = 0.0;
  int v34 = *(TXTextObject **)v25;
  CMTime v146 = *v23;
  if (TXTextObject::isGlowVisible(v34, &v146, (PCWorkingColor *)&v149, &v148, &v147))
  {
    float64_t v145 = 0.0;
    double v144 = 0.0;
    long long v35 = *(TXTextObject **)v25;
    CMTime v143 = *v23;
    TXTextObject::getGlowOffset(v35, &v143, &v145, &v144, 1);
    if (OZChannel::getValueAsInt((OZChannel *)(v108 + 20464), MEMORY[0x1E4F1FA48], 0.0) != 3
      && OZChannel::getValueAsInt((OZChannel *)(v108 + 20464), MEMORY[0x1E4F1FA48], 0.0) != 4
      && LiAgent::haveROI(v107))
    {
      if (OZRenderParams::getTextRenderQuality((OZRenderParams *)v23))
      {
        long long v36 = a10[5];
        v109[4] = a10[4];
        v109[5] = v36;
        long long v37 = a10[7];
        v109[6] = a10[6];
        v109[7] = v37;
        long long v38 = a10[1];
        v109[0] = *a10;
        v109[1] = v38;
        long long v39 = a10[3];
        v109[2] = a10[2];
        v109[3] = v39;
      }
      else
      {
        LiAgent::getObjectToPixelTransform(v107, (uint64_t)v109);
      }
      OZRenderState::OZRenderState(&v151, (const OZRenderState *)v23);
      v151.var4 = 1;
      TXTextObject::getImageBounds(*(TXTextObject **)v25, &v151, (uint64_t)&v141);
      v40.f64[0] = v148;
      v40.f64[1] = v147;
      __asm { FMOV            V3.2D, #3.0 }
      float64x2_t v45 = vmulq_f64(v40, _Q3);
      __asm { FMOV            V3.2D, #2.0 }
      float64x2_t v47 = vaddq_f64(v45, _Q3);
      *(double *)v141.i64 = *(double *)v141.i64 - v47.f64[0];
      *(double *)&v141.i64[1] = *(double *)&v141.i64[1] - v47.f64[1];
      float64x2_t v142 = vsubq_f64(v142, vsubq_f64(vnegq_f64(v47), v47));
      *(void *)&long long v114 = 0;
      double v112 = 0.0;
      long long v48 = *(TXTextObject **)v25;
      CMTime v140 = *v23;
      TXTextObject::getGlowScale(v48, &v140, (double *)&v114, &v112, 1);
      double v139 = 0.0;
      double v138 = 0.0;
      double v137 = 0.0;
      long long v49 = *(TXTextObject **)v25;
      *(_OWORD *)long long v130 = *(_OWORD *)&v23->value;
      *(void *)&v130[16] = v23->epoch;
      TXTextObject::getPivot((TXTextLayout **)v49, &v139, &v138, &v137, (CMTime *)v130, 1);
      uint64_t v136 = 0x3FF0000000000000;
      uint64_t v133 = 0x3FF0000000000000;
      memset(&v130[8], 0, 32);
      float64x2_t v131 = 0u;
      long long v132 = 0u;
      long long v134 = 0u;
      long long v135 = 0u;
      *(void *)&v130[40] = 0x3FF0000000000000;
      *(void *)long long v130 = 0x3FF0000000000000;
      float64x2_t v50 = PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v130, (float64x2_t)COERCE_UNSIGNED_INT64(-v139), -v138, 0.0);
      if (*(double *)&v114 != 1.0)
      {
        *(float64x2_t *)long long v130 = vmulq_n_f64(*(float64x2_t *)v130, *(double *)&v114);
        *(float64x2_t *)&v130[16] = vmulq_n_f64(*(float64x2_t *)&v130[16], *(double *)&v114);
      }
      if (v112 != 1.0)
      {
        float64x2_t v50 = vmulq_n_f64(v131, v112);
        *(float64x2_t *)&v130[32] = vmulq_n_f64(*(float64x2_t *)&v130[32], v112);
        float64x2_t v131 = v50;
      }
      v50.f64[0] = v139;
      float64x2_t v51 = PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v130, v50, v138, 0.0);
      v51.f64[0] = v145;
      PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v130, v51, v144, 0.0);
      PCMatrix44Tmpl<double>::operator*((uint64_t)v109, a9, (uint64_t)v115);
      PCMatrix44Tmpl<double>::operator*((uint64_t)v115, v15, (uint64_t)v118);
      PCMatrix44Tmpl<double>::operator*((uint64_t)v118, (long long *)v130, (uint64_t)&v120);
      LiAgent::getROI((__n128 *)v107, v118);
      v52.i64[0] = v118[0].n128_i32[0];
      v52.i64[1] = v118[0].n128_i32[1];
      *(float64x2_t *)char v115 = vcvtq_f64_s64(v52);
      double v116 = (double)v118[0].n128_i32[2];
      double v117 = (double)v118[0].n128_i32[3];
      if ((v118[0].n128_u32[2] & 0x80000000) == 0 && (v118[0].n128_u32[3] & 0x80000000) == 0)
      {
        LiImagePolygon::LiImagePolygon((LiImagePolygon *)v118);
        LiImagePolygon::set((uint64_t)v118, (double *)v141.i64, 0);
        liTransformAndClip((double *)v115, &v120, (uint64_t **)v118);
        if (((v119[1] - *v119) & 0x1FFFFFFFE0) == 0)
        {
          *uint64_t v27 = 0.0;
          LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v118);
          return PCCFRef<CGColorSpace *>::~PCCFRef(&v150);
        }
        LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v118);
      }
    }
    uint64_t v105 = v15;
    char v104 = v17;
    int v106 = (HGRenderJob *)v23;
    uint64_t v53 = *(void *)(v108 + 1208);
    if (v53 == v108 + 1200)
    {
      int v59 = 1;
    }
    else
    {
      uint64_t v103 = v25;
      uint64_t v54 = v21;
      uint64_t v55 = v27;
      while (1)
      {
        uint64_t v56 = *(const void **)(v53 + 16);
        if (v56)
        {
          if (v57)
          {
            if ((*(uint64_t (**)(void *, uint64_t, void, void))(*(void *)v57 + 616))(v57, 1017, 0, 0))break; {
          }
            }
          if (v58 && TXTextSequenceBehavior::isChannelEnabled(v58, 1017)) {
            break;
          }
        }
        uint64_t v53 = *(void *)(v53 + 8);
        if (v53 == v108 + 1200)
        {
          int v59 = 1;
          goto LABEL_28;
        }
      }
      int v59 = 0;
LABEL_28:
      uint64_t v27 = v55;
      CMTime v21 = v54;
      uint64_t v25 = v103;
    }
    uint64_t v60 = *(void *)(*(void *)v25 + 264);
    if (v60)
    {
      uint64_t v61 = *(void *)(v60 + 8);
      double v62 = *(std::__shared_weak_count **)(v60 + 16);
      if (v62) {
        atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      double v62 = 0;
      uint64_t v61 = 0;
    }
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v61 + 31208), MEMORY[0x1E4F1FA48], 0.0);
    double v139 = 0.0;
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v141);
    uint64_t v136 = 0x3FF0000000000000;
    uint64_t v133 = 0x3FF0000000000000;
    *(void *)&v130[40] = 0x3FF0000000000000;
    *(void *)long long v130 = 0x3FF0000000000000;
    memset(&v130[8], 0, 32);
    float64x2_t v131 = 0u;
    long long v132 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    OZChannel::getValueAsDouble((OZChannel *)(v108 + 60520), MEMORY[0x1E4F1FA48], 0.0);
    if (v64.f64[0] >= 4.0 || ValueAsInt == 0)
    {
      v64.f64[0] = v145;
      PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v130, v64, v144, 0.0);
    }
    long long v114 = xmmword_1B7E74760;
    double v138 = 1.0;
    double v137 = 1.0;
    uint64_t v66 = LiAgent::getRequestedColorDescription(v107);
    uint64_t v67 = a11;
    if (!v59)
    {
      LOBYTE(v112) = 0;
      TXTextLayout::getLiImageSourceForGlow(v108, (uint64_t)v106, v66, v25, (uint64_t)&v149, &v112);
    }
    double v112 = 0.0;
    double v113 = 0;
    float64x2_t v111 = 0;
    LOBYTE(v102) = a13;
    if (TXTextLayout::getCachedTextureOrImage((Li3DEngineScene *)v108, *(TXTextObject **)v25, (OZRenderParams *)v106, v107, 2u, 1, a9, (uint64_t)a10, &v141, &v138, &v137, (int32x4_t *)&v114, v102, (uint64_t)&v112, &v111, 1))
    {
      TXTextLayout::makeHGTextureOrBitmapNode(v106, (uint64_t)&v112, &v111, (uint64_t *)&v114, (LiRenderParameters **)v107, a13, (HGBitmapLoader **)&v151);
      int64_t var0 = v151.var0.var0;
      if (*(void *)&v139 == v151.var0.var0)
      {
        if (v139 != 0.0) {
          (*(void (**)(void))(**(void **)&v139 + 24))();
        }
      }
      else
      {
        if (v139 != 0.0) {
          (*(void (**)(void))(**(void **)&v139 + 24))();
        }
        double v139 = *(double *)&var0;
        v151.var0.int64_t var0 = 0;
      }
      *(double *)a11 = 1.0 / v138;
      *(double *)(a11 + 40) = 1.0 / v137;
      v151.var7.var0[1][2] = 1.0;
      v151.var7.var0[0][1] = 1.0;
      v151.int64_t var3 = 1.0;
      v151.var0.int64_t var0 = 0x3FF0000000000000;
      memset(&v151.var0.var1, 0, 32);
      memset(&v151.var4, 0, 32);
      memset(&v151.var7.var0[0][2], 0, 32);
      if (!*v21)
      {
        PCMatrix44Tmpl<double>::operator*((uint64_t)a10, a9, (uint64_t)v115);
        PCMatrix44Tmpl<double>::operator*((uint64_t)v115, v105, (uint64_t)v118);
        PCMatrix44Tmpl<double>::operator*((uint64_t)v118, (long long *)v130, (uint64_t)&v120);
        PCMatrix44Tmpl<double>::operator*((uint64_t)&v120, (long long *)a11, (uint64_t)v109);
        for (uint64_t i = 0; i != 8; i += 2)
        {
          unsigned int v70 = (_OWORD *)((char *)&v151.var0.var0 + i * 16);
          long long v71 = v109[i + 1];
          _OWORD *v70 = v109[i];
          v70[1] = v71;
        }
      }
      if (!PCMatrix44Tmpl<double>::isIdentity((double *)&v151.var0.var0))
      {
        v72.i64[0] = SDWORD2(v114);
        v72.i64[1] = SHIDWORD(v114);
        __asm { FMOV            V2.2D, #0.5 }
        float64x2_t v74 = vmulq_f64(vcvtq_f64_s64(v72), _Q2);
        v72.i64[0] = (int)v114;
        v72.i64[1] = SDWORD1(v114);
        *(float32x2_t *)&double v120 = vcvt_f32_f64(vaddq_f64(v74, vcvtq_f64_s64(v72)));
        LiAgent::makeHeliumXForm((uint64_t)v107, (uint64_t)&v151, (uint64_t *)&v139, v109);
        double v75 = *(double *)v109;
        if (*(void *)&v139 == *(void *)&v109[0])
        {
          if (v139 != 0.0) {
            (*(void (**)(void))(**(void **)&v139 + 24))();
          }
        }
        else
        {
          if (v139 != 0.0)
          {
            (*(void (**)(void))(**(void **)&v139 + 24))();
            double v75 = *(double *)v109;
          }
          double v139 = v75;
        }
      }
      if (v111) {
        (*(void (**)(HGBitmap *))(*(void *)v111 + 24))(v111);
      }
      if (v113) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v113);
      }
      WorkingColorSpace = (PCWorkingColor *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)v106);
      PCWorkingColor::WHITE(WorkingColorSpace, (PCWorkingColor *)&v151);
      BOOL v77 = operator!=((uint64_t)&v149, (uint64_t)&v151);
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v151.var0.var3);
      if (v77 && v149.n128_f32[3] != 1.0)
      {
        if (a12)
        {
          *a12 = v149.n128_u32[3];
        }
        else
        {
          *(double *)&__n128 v78 = COERCE_DOUBLE(HGObject::operator new(0x200uLL));
          HgcTXAlpha::HgcTXAlpha(v78);
          if (*(double *)&v78 != 0.0)
          {
            (*(void (**)(HgcTXAlpha *, void, double))(*(void *)v78 + 120))(v78, 0, COERCE_DOUBLE(*(void *)&v139));
            LODWORD(v151.var0.var0) = 0;
            LODWORD(v109[0]) = 0;
            LODWORD(v120) = 0;
            v118[0].n128_u32[0] = 0;
            PCWorkingColor::getRGBA((PCWorkingColor *)&v149, (float *)&v151, (float *)v109, (float *)&v120, (float *)v118);
            (*(void (**)(HgcTXAlpha *, void, float, float, float, float))(*(void *)v78 + 96))(v78, 0, *(float *)&v151.var0.var0, *(float *)v109, *(float *)&v120, v118[0].n128_f32[0]);
            if (*(HgcTXAlpha **)&v139 != v78)
            {
              if (v139 != 0.0) {
                (*(void (**)(void))(**(void **)&v139 + 24))();
              }
              double v139 = *(double *)&v78;
              (*(void (**)(HgcTXAlpha *))(*(void *)v78 + 16))(v78);
            }
            (*(void (**)(HgcTXAlpha *))(*(void *)v78 + 24))(v78);
          }
        }
      }
      if (*v21)
      {
        uint64_t v79 = *(void *)(*(void *)v25 + 264);
        if (v79)
        {
          uint64_t v81 = *(void *)(v79 + 8);
          unsigned __int8 v80 = *(std::__shared_weak_count **)(v79 + 16);
          unsigned int v82 = v27;
          if (v80) {
            atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          unsigned int v82 = v27;
          uint64_t v81 = 0;
          unsigned __int8 v80 = 0;
        }
        if (OZChannel::getValueAsInt((OZChannel *)(v81 + 31208), MEMORY[0x1E4F1FA48], 0.0) == 2) {
          unsigned __int8 v83 = TXTextStyle::hasTexture((TXTextStyle *)v81, (OZChannelImageWithOptions *)(v81 + 33680));
        }
        else {
          unsigned __int8 v83 = 0;
        }
        *(_DWORD *)uint64_t *v21 = v19;
        LiAgent::getObjectToPixelTransform(v107, (uint64_t)v118);
        PCMatrix44Tmpl<double>::operator*((uint64_t)v118, a9, (uint64_t)&v120);
        PCMatrix44Tmpl<double>::operator*((uint64_t)&v120, v105, (uint64_t)v109);
        PCMatrix44Tmpl<double>::operator*((uint64_t)v109, (long long *)v130, (uint64_t)&v151);
        uint64_t v84 = (_DWORD *)*v21;
        long long v85 = (OZRenderState *)(*v21 + 8);
        if (&v151 != v85)
        {
          uint64_t v86 = 0;
          int v87 = &v151;
          do
          {
            for (uint64_t j = 0; j != 32; j += 8)
              *(int64_t *)((char *)&v85->var0.var0 + j) = *(int64_t *)((char *)&v87->var0.var0 + j);
            ++v86;
            long long v85 = (OZRenderState *)((char *)v85 + 32);
            int v87 = (OZRenderState *)((char *)v87 + 32);
          }
          while (v86 != 4);
        }
        BOOL v89 = v84 + 66;
        if (v84 + 66 != (_DWORD *)a11)
        {
          for (uint64_t k = 0; k != 4; ++k)
          {
            for (uint64_t m = 0; m != 8; m += 2)
              *(void *)&v89[m] = *(void *)(v67 + m * 4);
            v89 += 8;
            v67 += 32;
          }
        }
        *((unsigned char *)v84 + 465) = 1;
        if (v104)
        {
          *(void *)&v109[0] = 0;
          double v120 = 0.0;
          *(int32x4_t *)&v151.var0.int64_t var0 = v141;
          *(int32x4_t *)(v84 + 98) = v141;
        }
        else
        {
          PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&v151);
          PCHashWriteStream::writeValue((int8x8_t *)&v151, v19);
          PCHashWriteStream::close((int8x8_t *)&v151);
          PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v109);
          Hash = PCHashWriteStream::getHash((int8x8_t *)&v151);
          v109[0] = *(_OWORD *)Hash->i8;
          *(_OWORD *)(*v21 + 392) = *(_OWORD *)Hash->i8;
          PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&v151);
        }
        uint64_t v93 = 0;
        v151.var7.var0[1][2] = 1.0;
        v151.var7.var0[0][1] = 1.0;
        v151.int64_t var3 = 1.0;
        v151.var0.int64_t var0 = 0x3FF0000000000000;
        memset(&v151.var0.var1, 0, 32);
        memset(&v151.var7.var0[0][2], 0, 32);
        uint64_t v94 = *v21;
        uint64_t v95 = *v21 + 136;
        memset(&v151.var4, 0, 32);
        do
        {
          long long v96 = (_OWORD *)(v95 + v93);
          _OWORD *v96 = *(_OWORD *)((char *)&v151.var0.var0 + v93);
          v96[1] = *(_OWORD *)((char *)&v151.var0.var3 + v93);
          v93 += 32;
        }
        while (v93 != 128);
        *(unsigned char *)(v94 + 456) = 1;
        uint64_t v98 = *(TXTextObject **)v25;
        uint64_t v97 = *(void *)(v25 + 8);
        if (v97) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v97 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v99 = *(std::__shared_weak_count **)(v94 + 480);
        *(void *)(v94 + 472) = v98;
        *(void *)(v94 + 480) = v97;
        if (v99) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v99);
        }
        PCWorkingColor::operator=((__n128 *)(*v21 + 408), &v149);
        uint64_t v100 = *v21;
        *(_DWORD *)(v100 + 460) = 2;
        *(unsigned char *)(v100 + 464) = v83;
        uint64_t v27 = v82;
        if (v80) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v80);
        }
      }
      *uint64_t v27 = v139;
    }
    else
    {
      long long v121 = 0u;
      long long v122 = 0u;
      double v120 = v138;
      double v123 = v137;
      long long v124 = 0u;
      long long v125 = 0u;
      long long v127 = 0u;
      long long v128 = 0u;
      uint64_t v126 = 0x3FF0000000000000;
      uint64_t v129 = 0x3FF0000000000000;
      if ((v138 <= -0.0000001 || v138 >= 0.0000001) && (v137 <= -0.0000001 || v137 >= 0.0000001))
      {
        char v110 = 0;
        TXTextLayout::getLiImageSourceForGlow(v108, (uint64_t)v106, v66, v25, (uint64_t)&v149, &v110);
      }
      *uint64_t v27 = 0.0;
      if (v111) {
        (*(void (**)(HGBitmap *))(*(void *)v111 + 24))(v111);
      }
      if (v113) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v113);
      }
      if (v139 != 0.0) {
        (*(void (**)(double))(**(void **)&v139 + 24))(COERCE_DOUBLE(*(void *)&v139));
      }
    }
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
  }
  else
  {
    *uint64_t v27 = 0.0;
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v150);
}

void sub_1B760DFE8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

CGColorSpace **TXTextLayout::buildHGNodeForOutline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long *a9, _OWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t v14 = MEMORY[0x1F4188790](a1);
  char v16 = v15;
  char v88 = v18;
  int v89 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v27 = v14;
  uint64_t v90 = v28;
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  RequestedColorDescriptiouint64_t n = (OZEaseInInterpolator *)LiAgent::getRequestedColorDescription(v21);
  OZEaseInInterpolator::~OZEaseInInterpolator(RequestedColorDescription);
  uint64_t v31 = v30;
  int DynamicRange = FxColorDescription::getDynamicRange((FxColorDescription *)RequestedColorDescription);
  ToneMapMethod = (PCToneMapMethod *)FxColorDescription::getToneMapMethod((FxColorDescription *)RequestedColorDescription);
  PCWorkingColor::PCWorkingColor((uint64_t)&v109, v31, DynamicRange, ToneMapMethod);
  uint64_t v108 = 0;
  int v34 = *(TXTextObject **)v26;
  CMTime v107 = *v24;
  if (TXTextObject::isOutlineVisible(v34, &v107, (PCWorkingColor *)&v109, (double *)&v108))
  {
    if (OZChannel::getValueAsInt((OZChannel *)(v27 + 20464), MEMORY[0x1E4F1FA48], 0.0) != 3
      && OZChannel::getValueAsInt((OZChannel *)(v27 + 20464), MEMORY[0x1E4F1FA48], 0.0) != 4
      && LiAgent::haveROI(v22))
    {
      if (OZRenderParams::getTextRenderQuality((OZRenderParams *)v24))
      {
        long long v35 = a10[5];
        double v106[4] = a10[4];
        v106[5] = v35;
        long long v36 = a10[7];
        v106[6] = a10[6];
        v106[7] = v36;
        long long v37 = a10[1];
        v106[0] = *a10;
        v106[1] = v37;
        long long v38 = a10[3];
        v106[2] = a10[2];
        v106[3] = v38;
      }
      else
      {
        LiAgent::getObjectToPixelTransform(v22, (uint64_t)v106);
      }
      OZRenderState::OZRenderState(&v111, (const OZRenderState *)v24);
      v111.var4 = 1;
      TXTextObject::getImageBounds(*(TXTextObject **)v26, &v111, (uint64_t)&v104);
      float64_t v92 = 0.0;
      long long v39 = *(TXTextObject **)v26;
      CMTime v102 = *v24;
      float64_t v103 = 0.0;
      TXTextObject::getOutlineBlur(v39, &v102, &v92, &v103);
      v40.f64[0] = v92;
      v40.f64[1] = v103;
      __asm { FMOV            V4.2D, #3.0 }
      float64x2_t v46 = vaddq_f64((float64x2_t)vdupq_lane_s64(v108, 0), vmulq_f64(v40, _Q4));
      __asm { FMOV            V1.2D, #2.0 }
      float64x2_t v48 = vaddq_f64(v46, _Q1);
      *(double *)v104.i64 = *(double *)v104.i64 - v48.f64[0];
      *(double *)&v104.i64[1] = *(double *)&v104.i64[1] - v48.f64[1];
      float64x2_t v105 = vsubq_f64(v105, vsubq_f64(vnegq_f64(v48), v48));
      PCMatrix44Tmpl<double>::operator*((uint64_t)v106, a9, (uint64_t)v99);
      PCMatrix44Tmpl<double>::operator*((uint64_t)v99, v16, (uint64_t)v101);
      LiAgent::getROI((__n128 *)v22, v99);
      v49.i64[0] = v99[0].n128_i32[0];
      v49.i64[1] = v99[0].n128_i32[1];
      float64x2_t v96 = vcvtq_f64_s64(v49);
      double v97 = (double)v99[0].n128_i32[2];
      double v98 = (double)v99[0].n128_i32[3];
      if ((v99[0].n128_u32[2] & 0x80000000) == 0 && (v99[0].n128_u32[3] & 0x80000000) == 0)
      {
        LiImagePolygon::LiImagePolygon((LiImagePolygon *)v99);
        LiImagePolygon::set((uint64_t)v99, (double *)v104.i64, 0);
        liTransformAndClip(v96.f64, v101, (uint64_t **)v99);
        if (((v100[1] - *v100) & 0x1FFFFFFFE0) == 0)
        {
          float64_t *v90 = 0.0;
          LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v99);
          return PCCFRef<CGColorSpace *>::~PCCFRef(&v110);
        }
        LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v99);
      }
    }
    uint64_t v50 = *(void *)(*(void *)v26 + 264);
    if (v50)
    {
      uint64_t v52 = *(void *)(v50 + 8);
      float64x2_t v51 = *(std::__shared_weak_count **)(v50 + 16);
      if (v51)
      {
        int v87 = v51;
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        int v87 = 0;
      }
    }
    else
    {
      int v87 = 0;
      uint64_t v52 = 0;
    }
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v52 + 22760), MEMORY[0x1E4F1FA48], 0.0);
    int isColorAnimated = TXTextLayout::isColorAnimated((TXTextLayout *)v27, (OZChannelColorNoAlpha *)(v52 + 23016), (OZChannelPercent *)(v52 + 26824), ValueAsInt, 1012, 1013);
    float64_t v103 = 0.0;
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v104);
    float64x2_t v96 = (float64x2_t)xmmword_1B7E74760;
    double v94 = 1.0;
    double v95 = 1.0;
    float64_t v92 = 0.0;
    uint64_t v93 = 0;
    int v91 = 0;
    LOBYTE(v86) = a14;
    if (TXTextLayout::getCachedTextureOrImage((Li3DEngineScene *)v27, *(TXTextObject **)v26, (OZRenderParams *)v24, v22, 1u, isColorAnimated, a9, (uint64_t)a10, &v104, &v95, &v94, (int32x4_t *)&v96, v86, (uint64_t)&v92, &v91, 1))
    {
      TXTextLayout::makeHGTextureOrBitmapNode((HGRenderJob *)v24, (uint64_t)&v92, &v91, (uint64_t *)&v96, (LiRenderParameters **)v22, a14, (HGBitmapLoader **)&v111);
      int64_t var0 = v111.var0.var0;
      if (*(void *)&v103 == v111.var0.var0)
      {
        if (v103 != 0.0) {
          (*(void (**)(void))(**(void **)&v103 + 24))();
        }
      }
      else
      {
        if (v103 != 0.0) {
          (*(void (**)(void))(**(void **)&v103 + 24))();
        }
        float64_t v103 = *(double *)&var0;
        v111.var0.int64_t var0 = 0;
      }
      uint64_t v56 = a11;
      *(double *)a11 = 1.0 / v95;
      *(double *)(a11 + 40) = 1.0 / v94;
      v111.var7.var0[1][2] = 1.0;
      v111.var7.var0[0][1] = 1.0;
      v111.int64_t var3 = 1.0;
      v111.var0.int64_t var0 = 0x3FF0000000000000;
      memset(&v111.var0.var1, 0, 32);
      memset(&v111.var4, 0, 32);
      memset(&v111.var7.var0[0][2], 0, 32);
      if (!*v20)
      {
        PCMatrix44Tmpl<double>::operator*((uint64_t)a10, a9, (uint64_t)v99);
        PCMatrix44Tmpl<double>::operator*((uint64_t)v99, v16, (uint64_t)v101);
        PCMatrix44Tmpl<double>::operator*((uint64_t)v101, (long long *)a11, (uint64_t)v106);
        for (uint64_t i = 0; i != 8; i += 2)
        {
          uint64_t v58 = (_OWORD *)((char *)&v111.var0.var0 + i * 16);
          long long v59 = v106[i + 1];
          _OWORD *v58 = v106[i];
          v58[1] = v59;
        }
      }
      if (!PCMatrix44Tmpl<double>::isIdentity((double *)&v111.var0.var0))
      {
        v60.i64[0] = SLODWORD(v96.f64[1]);
        v60.i64[1] = SHIDWORD(v96.f64[1]);
        __asm { FMOV            V2.2D, #0.5 }
        float64x2_t v62 = vmulq_f64(vcvtq_f64_s64(v60), _Q2);
        v60.i64[0] = SLODWORD(v96.f64[0]);
        v60.i64[1] = SHIDWORD(v96.f64[0]);
        *(float32x2_t *)&v101[0] = vcvt_f32_f64(vaddq_f64(v62, vcvtq_f64_s64(v60)));
        LiAgent::makeHeliumXForm((uint64_t)v22, (uint64_t)&v111, (uint64_t *)&v103, v106);
        float64_t v63 = *(double *)v106;
        if (*(void *)&v103 == *(void *)&v106[0])
        {
          if (v103 != 0.0) {
            (*(void (**)(void))(**(void **)&v103 + 24))();
          }
        }
        else
        {
          if (v103 != 0.0)
          {
            (*(void (**)(void))(**(void **)&v103 + 24))();
            float64_t v63 = *(double *)v106;
          }
          float64_t v103 = v63;
        }
      }
      if (v91) {
        (*(void (**)(HGBitmap *))(*(void *)v91 + 24))(v91);
      }
      if (v93) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v93);
      }
      if (*v20)
      {
        uint64_t v64 = *(void *)(*(void *)v26 + 264);
        if (v64)
        {
          uint64_t v65 = *(void *)(v64 + 8);
          uint64_t v66 = *(std::__shared_weak_count **)(v64 + 16);
          if (v66) {
            atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v66 = 0;
          uint64_t v65 = 0;
        }
        if (OZChannel::getValueAsInt((OZChannel *)(v65 + 22760), MEMORY[0x1E4F1FA48], 0.0) == 2) {
          unsigned __int8 v67 = TXTextStyle::hasTexture((TXTextStyle *)v65, (OZChannelImageWithOptions *)(v65 + 25232));
        }
        else {
          unsigned __int8 v67 = 0;
        }
        *(_DWORD *)uint64_t *v20 = v89;
        LiAgent::getObjectToPixelTransform(v22, (uint64_t)v106);
        PCMatrix44Tmpl<double>::operator*((uint64_t)v106, a9, (uint64_t)&v111);
        uint64_t v68 = (_DWORD *)*v20;
        BOOL v69 = (OZRenderState *)(*v20 + 8);
        if (&v111 != v69)
        {
          uint64_t v70 = 0;
          long long v71 = &v111;
          do
          {
            for (uint64_t j = 0; j != 32; j += 8)
              *(int64_t *)((char *)&v69->var0.var0 + j) = *(int64_t *)((char *)&v71->var0.var0 + j);
            ++v70;
            BOOL v69 = (OZRenderState *)((char *)v69 + 32);
            long long v71 = (OZRenderState *)((char *)v71 + 32);
          }
          while (v70 != 4);
        }
        long long v73 = v68 + 34;
        if (v68 + 34 != (_DWORD *)v16)
        {
          for (uint64_t k = 0; k != 4; ++k)
          {
            for (uint64_t m = 0; m != 8; m += 2)
              *(void *)&v73[m] = *(void *)((char *)v16 + m * 4);
            v73 += 8;
            v16 += 2;
          }
        }
        *((unsigned char *)v68 + 465) = 1;
        float64x2_t v76 = v68 + 66;
        if (v68 + 66 != (_DWORD *)a11)
        {
          for (uint64_t n = 0; n != 4; ++n)
          {
            for (iuint64_t i = 0; ii != 8; ii += 2)
              *(void *)&v76[ii] = *(void *)(v56 + ii * 4);
            v76 += 8;
            v56 += 32;
          }
        }
        if (v88)
        {
          *(int32x4_t *)(v68 + 98) = v104;
        }
        else
        {
          PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&v111);
          PCHashWriteStream::writeValue((int8x8_t *)&v111, v89);
          PCHashWriteStream::close((int8x8_t *)&v111);
          PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v106);
          Hash = PCHashWriteStream::getHash((int8x8_t *)&v111);
          v106[0] = *(_OWORD *)Hash->i8;
          *(_OWORD *)(*v20 + 392) = *(_OWORD *)Hash->i8;
          PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&v111);
        }
        uint64_t v80 = *v20;
        *(unsigned char *)(*v20 + 456) = 1;
        unsigned int v82 = *(TXTextObject **)v26;
        uint64_t v81 = *(void *)(v26 + 8);
        if (v81) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v81 + 8), 1uLL, memory_order_relaxed);
        }
        unsigned __int8 v83 = *(std::__shared_weak_count **)(v80 + 480);
        *(void *)(v80 + 472) = v82;
        *(void *)(v80 + 480) = v81;
        if (v83) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v83);
        }
        PCWorkingColor::operator=((__n128 *)(*v20 + 408), &v109);
        uint64_t v84 = *v20;
        *(_DWORD *)(v84 + 460) = 1;
        *(unsigned char *)(v84 + 464) = v67;
        if (v66) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v66);
        }
      }
      float64_t *v90 = v103;
    }
    else
    {
      memset(&v111.var0.var1, 0, 32);
      memset(&v111.var4, 0, 32);
      memset(&v111.var7.var0[0][2], 0, 32);
      v111.var7.var0[0][1] = 1.0;
      v111.var7.var0[1][2] = 1.0;
      *(double *)&v111.var0.int64_t var0 = v95;
      v111.int64_t var3 = v94;
      if ((v95 <= -0.0000001 || v95 >= 0.0000001) && (v94 <= -0.0000001 || v94 >= 0.0000001)) {
        TXTextLayout::outlineNodeFromTextObject(v27, (TXTextObject **)v26, (uint64_t)v24, v22, a12, isColorAnimated, (uint64_t)&v109, (int)&v111, (uint64_t)&v96);
      }
      float64_t *v90 = 0.0;
      if (v91) {
        (*(void (**)(HGBitmap *))(*(void *)v91 + 24))(v91);
      }
      if (v93) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v93);
      }
      if (v103 != 0.0) {
        (*(void (**)(float64_t))(**(void **)&v103 + 24))(COERCE_FLOAT64_T(*(void *)&v103));
      }
    }
    if (v87) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v87);
    }
  }
  else
  {
    float64_t *v90 = 0.0;
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v110);
}

void sub_1B760ED70(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void TXTextLayout::buildHGNodeForFace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long *a9, uint64_t a10, uint64_t a11, unsigned __int8 *a12, uint64_t a13, unsigned __int8 a14, char a15)
{
  uint64_t v15 = MEMORY[0x1F4188790](a1);
  uint64_t v17 = v16;
  char v19 = v18;
  unsigned int v77 = v20;
  __n128 v78 = v21;
  uint64_t v79 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  int v29 = (Li3DEngineScene *)v15;
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  OZRenderParams::OZRenderParams((OZRenderParams *)v102, v25);
  RequestedColorDescriptiouint64_t n = (OZEaseInInterpolator *)LiAgent::getRequestedColorDescription((LiAgent *)v24);
  OZEaseInInterpolator::~OZEaseInInterpolator(RequestedColorDescription);
  uint64_t v32 = v31;
  int DynamicRange = FxColorDescription::getDynamicRange((FxColorDescription *)RequestedColorDescription);
  ToneMapMethod = (PCToneMapMethod *)FxColorDescription::getToneMapMethod((FxColorDescription *)RequestedColorDescription);
  PCWorkingColor::PCWorkingColor((uint64_t)&v100, v32, DynamicRange, ToneMapMethod);
  long long v35 = *(TXTextObject **)v28;
  CMTime v103 = v102[0];
  if ((TXTextObject::isFaceVisible(v35, &v103, &v100, (uint64_t)(a12 + 8), *((_DWORD *)a12 + 17), *((_DWORD *)a12 + 16)) & 1) == 0)
  {
    double *v79 = 0.0;
    goto LABEL_78;
  }
  BOOL hasParameter = OZRenderParams::hasParameter(v26, (const char *)kTXIsBestModeUnitTest);
  uint64_t v36 = *(void *)(*(void *)v28 + 264);
  if (v36)
  {
    uint64_t v37 = *(void *)(v36 + 8);
    long long v38 = *(std::__shared_weak_count **)(v36 + 16);
    if (v38)
    {
      double v75 = v38;
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      double v75 = 0;
    }
  }
  else
  {
    double v75 = 0;
    uint64_t v37 = 0;
  }
  OZChannel::getValueAsInt((OZChannel *)(v37 + 6088), MEMORY[0x1E4F1FA48], 0.0);
  int v39 = *a12;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v99);
  uint64_t v40 = a11;
  long long v98 = xmmword_1B7E74760;
  double v97 = 1.0;
  double v96 = 1.0;
  double v95 = 0;
  uint64_t v94 = 0;
  uint64_t v93 = 0;
  if (hasParameter)
  {
    char v84 = 0;
    TXTextLayout::getLiImageSourceForFace((uint64_t)v29, (uint64_t)v102, (uint64_t)RequestedColorDescription, v28, (uint64_t)&v100, &v84);
  }
  LOBYTE(v74) = a14;
  if ((TXTextLayout::getCachedTextureOrImage(v29, *(TXTextObject **)v28, (OZRenderParams *)v102, (LiAgent *)v24, 0, v39 != 0, a9, a10, &v99, &v97, &v96, (int32x4_t *)&v98, v74, (uint64_t)&v94, &v93, a15) & 1) == 0)
  {
    memset(&v85[8], 0, 32);
    long long v87 = 0u;
    long long v88 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    uint64_t v89 = 0x3FF0000000000000;
    uint64_t v92 = 0x3FF0000000000000;
    *(double *)long long v85 = v97;
    double v86 = v96;
    if ((v97 <= -0.0000001 || v97 >= 0.0000001) && (v96 <= -0.0000001 || v96 >= 0.0000001))
    {
      char v84 = 0;
      TXTextLayout::getLiImageSourceForFace((uint64_t)v29, (uint64_t)v102, (uint64_t)RequestedColorDescription, v28, (uint64_t)&v100, &v84);
    }
    double *v79 = 0.0;
    goto LABEL_72;
  }
  TXTextLayout::makeHGTextureOrBitmapNode((HGRenderJob *)v102, (uint64_t)&v94, &v93, (uint64_t *)&v98, (LiRenderParameters **)v24, a14, (HGBitmapLoader **)&v103);
  CMTimeValue value = (void *)v103.value;
  *(double *)a11 = 1.0 / v97;
  *(double *)(a11 + 40) = 1.0 / v96;
  uint64_t v111 = 0x3FF0000000000000;
  uint64_t v108 = 0x3FF0000000000000;
  uint64_t v105 = 0x3FF0000000000000;
  v103.CMTimeValue value = 0x3FF0000000000000;
  *(_OWORD *)&v103.timescale = 0u;
  long long v104 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  if (!*v78)
  {
    PCMatrix44Tmpl<double>::operator*(a10, a9, (uint64_t)v85);
    PCMatrix44Tmpl<double>::operator*((uint64_t)v85, (long long *)a11, (uint64_t)&v81);
    for (uint64_t i = 0; i != 16; i += 4)
    {
      long long v43 = (_OWORD *)((char *)&v103.value + i * 8);
      long long v44 = *(_OWORD *)&v83[i];
      _OWORD *v43 = *(_OWORD *)((char *)&v81 + i * 8);
      v43[1] = v44;
    }
  }
  if (!PCMatrix44Tmpl<double>::isIdentity((double *)&v103.value))
  {
    double v81 = *(double *)&value;
    if (*(double *)&value != 0.0) {
      (*(void (**)(void *))(*(void *)value + 16))(value);
    }
    v45.i64[0] = SDWORD2(v98);
    v45.i64[1] = SHIDWORD(v98);
    __asm { FMOV            V2.2D, #0.5 }
    float64x2_t v51 = vmulq_f64(vcvtq_f64_s64(v45), _Q2);
    v45.i64[0] = (int)v98;
    v45.i64[1] = SDWORD1(v98);
    *(float32x2_t *)long long v85 = vcvt_f32_f64(vaddq_f64(v51, vcvtq_f64_s64(v45)));
    LiAgent::makeHeliumXForm(v24, (uint64_t)&v103, (uint64_t *)&v81, lpsrc);
    if (value == lpsrc[0])
    {
      if (*(double *)&value == 0.0)
      {
LABEL_34:
        if (v81 != 0.0) {
          (*(void (**)(double))(**(void **)&v81 + 24))(COERCE_DOUBLE(*(void *)&v81));
        }
        goto LABEL_36;
      }
      (*(void (**)(void *))(*(void *)value + 24))(value);
    }
    else
    {
      if (*(double *)&value != 0.0) {
        (*(void (**)(void *))(*(void *)value + 24))(value);
      }
      CMTimeValue value = lpsrc[0];
    }
    if (*(unsigned char *)(*(void *)(v24 + 48) + 144))
    {
      if (*(double *)&value != 0.0)
      {
        if (v52) {
          (*(void (**)(void *, float))(*(void *)v52 + 648))(v52, 0.001);
        }
      }
    }
    goto LABEL_34;
  }
LABEL_36:
  TXTextObject::isEmoji(*(TXTextObject **)v28);
  if (*v78)
  {
    uint64_t v53 = *(void *)(*(void *)v28 + 264);
    if (v53)
    {
      uint64_t v54 = *(void *)(v53 + 8);
      uint64_t v55 = *(std::__shared_weak_count **)(v53 + 16);
      if (v55) {
        atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v54 = 0;
      uint64_t v55 = 0;
    }
    if (OZChannel::getValueAsInt((OZChannel *)(v54 + 6088), MEMORY[0x1E4F1FA48], 0.0) == 2) {
      unsigned __int8 v56 = TXTextStyle::hasTexture((TXTextStyle *)v54, (OZChannelImageWithOptions *)(v54 + 8560));
    }
    else {
      unsigned __int8 v56 = 0;
    }
    *(_DWORD *)uint64_t *v78 = v77;
    LiAgent::getObjectToPixelTransform((LiAgent *)v24, (uint64_t)&v81);
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v81, a9, (uint64_t)&v103);
    uint64_t v57 = (CMTime *)(*v78 + 8);
    if (&v103 != v57)
    {
      uint64_t v58 = 0;
      long long v59 = &v103;
      do
      {
        for (uint64_t j = 0; j != 32; j += 8)
          *(CMTimeValue *)((char *)&v57->value + j) = *(CMTimeValue *)((char *)&v59->value + j);
        ++v58;
        uint64_t v57 = (CMTime *)((char *)v57 + 32);
        long long v59 = (CMTime *)((char *)v59 + 32);
      }
      while (v58 != 4);
    }
    double v81 = 0.0;
    double v82 = 0.0;
    v83[0] = 0.0;
    getScale(*(float64x2_t **)(v24 + 160), (uint64_t)&v81);
    PCMatrix44Tmpl<double>::rightScale((double *)(*v78 + 8), 1.0 / v81, 1.0 / v82, 1.0 / v83[0]);
    uint64_t v61 = *v78;
    *(unsigned char *)(v61 + 465) = 1;
    uint64_t v62 = v61 + 136;
    if (v61 + 136 != v17)
    {
      for (uint64_t k = 0; k != 4; ++k)
      {
        for (uint64_t m = 0; m != 32; m += 8)
          *(void *)(v62 + m) = *(void *)(v17 + m);
        v62 += 32;
        v17 += 32;
      }
    }
    uint64_t v65 = v61 + 264;
    if (v61 + 264 != a11)
    {
      for (uint64_t n = 0; n != 4; ++n)
      {
        for (iuint64_t i = 0; ii != 32; ii += 8)
          *(void *)(v65 + ii) = *(void *)(v40 + ii);
        v65 += 32;
        v40 += 32;
      }
    }
    if (v19)
    {
      if (hasParameter)
      {
        TXTextObject::getCacheHash(*(TXTextObject **)v28, (OZRenderParams *)v102);
        uint64_t v61 = *v78;
      }
      else
      {
        *(int32x4_t *)&v103.CMTimeValue value = v99;
      }
      *(_OWORD *)(v61 + 392) = *(_OWORD *)&v103.value;
    }
    else
    {
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&v103);
      PCHashWriteStream::reset((uint64_t)&v103);
      PCHashWriteStream::writeValue((int8x8_t *)&v103, v77);
      PCHashWriteStream::close((int8x8_t *)&v103);
      PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v85);
      Hash = PCHashWriteStream::getHash((int8x8_t *)&v103);
      *(_OWORD *)long long v85 = *(_OWORD *)Hash->i8;
      *(_OWORD *)(*v78 + 392) = *(_OWORD *)Hash->i8;
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&v103);
    }
    uint64_t v69 = *v78;
    *(unsigned char *)(*v78 + 456) = 1;
    long long v71 = *(TXTextObject **)v28;
    uint64_t v70 = *(void *)(v28 + 8);
    if (v70) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
    }
    int64x2_t v72 = *(std::__shared_weak_count **)(v69 + 480);
    *(void *)(v69 + 472) = v71;
    *(void *)(v69 + 480) = v70;
    if (v72) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v72);
    }
    PCWorkingColor::operator=((__n128 *)(*v78 + 408), &v100);
    uint64_t v73 = *v78;
    *(_DWORD *)(v73 + 460) = 0;
    *(unsigned char *)(v73 + 464) = v56;
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
  }
  double *v79 = *(double *)&value;
LABEL_72:
  if (v93) {
    (*(void (**)(HGBitmap *))(*(void *)v93 + 24))(v93);
  }
  if (v95) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v95);
  }
  if (v75) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v75);
  }
LABEL_78:
  PCCFRef<CGColorSpace *>::~PCCFRef(&v101);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v102);
}

void sub_1B760FB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a27) {
    (*(void (**)(uint64_t))(*(void *)a27 + 24))(a27);
  }
  if (STACK[0x208]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x208] + 24))(STACK[0x208]);
  }
  if (STACK[0x218]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x218]);
  }
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&STACK[0x268]);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x280]);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::shouldCacheTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(*(void *)a4 + 8) == 1)
  {
    {
      int32x2_t v5 = *(std::__shared_weak_count **)(a4 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
  return 0;
}

uint64_t TXTextLayout::getCachedImage(Li3DEngineScene *a1, TXTextObject *a2, OZRenderParams *this, const FxColorDescription *a4, unsigned int a5, int a6, long long *a7, uint64_t a8, uint64_t a9, int32x4_t *a10, double *a11, double *a12, int32x4_t *a13)
{
  if (OZRenderParams::getTextRenderQuality(this) == 6)
  {
    PCMatrix44Tmpl<double>::operator*(a8, a7, (uint64_t)&v37);
    TXTextObject::getTextureCacheHashForAttribute(a2, this, a4, a5, a11, a12);
    *a10 = v36;
    char v19 = a13;
    TXTextObject::getScaleAndHashForPixelTransform((uint64_t)a2);
    PCHash128::operator+=(a10->i32, v36.i32);
  }
  else
  {
    TXTextObject::getTextureCacheHashForAttribute(a2, this, a4, a5, a11, a12);
    *a10 = v37;
    char v19 = a13;
  }
  unsigned int v20 = (OZLockingGroup *)Li3DEngineScene::sceneManager(a1);
  RenderNodeList = OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v35, v20);
  for (uint64_t i = *((void *)a1 + 7585); ; uint64_t i = *(void *)(i + 8))
  {
    if ((Li3DEngineScene *)i == (Li3DEngineScene *)((char *)a1 + 60672))
    {
      uint64_t v24 = (PGTextureCache *)OZCacheManager::Instance(RenderNodeList);
      if (*(_DWORD *)(*(void *)HGRenderJob::GetRenderNodeList((HGRenderJob *)this) + 8))
      {
        OZRenderParams::getRenderGPU(this, &v36);
        OZCacheManager::getTextureForKey(v24, (HGGPUComputeDevice **)&v36, (const PCHash128 *)a10, 0, &v37);
        int32x4_t v25 = v37;
        int32x4_t v37 = 0uLL;
        uint64_t v26 = *(std::__shared_weak_count **)(a9 + 8);
        *(int32x4_t *)a9 = v25;
        if (v26)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          if (v37.i64[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v37.i64[1]);
          }
        }
        if (v36.i64[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v36.i64[1]);
        }
        if (!*(void *)a9) {
          goto LABEL_28;
        }
      }
      else
      {
        OZCacheManager::getImageForKey((const PCHash128 *)a10, &v37);
        int32x4_t v27 = v37;
        int32x4_t v37 = 0uLL;
        uint64_t v28 = *(std::__shared_weak_count **)(a9 + 8);
        *(int32x4_t *)a9 = v27;
        if (v28)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          if (v37.i64[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v37.i64[1]);
          }
          if (!*(void *)a9) {
            goto LABEL_28;
          }
        }
        else if (!v27.i64[0])
        {
          goto LABEL_28;
        }
      }
      int v29 = (float64x2_t *)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>((uint64_t)a1 + 60696, (const PCHash128 *)a10);
      if ((float64x2_t *)((char *)a1 + 60704) != v29)
      {
        int32x4_t *v19 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v29[3]), (int32x4_t)vcvtq_s64_f64(v29[4]));
        goto LABEL_33;
      }
LABEL_28:
      uint64_t v30 = 0;
      goto LABEL_34;
    }
    if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(i + 80), *a10))))) {
      continue;
    }
    int32x4_t *v19 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*(float64x2_t *)(i + 48)), (int32x4_t)vcvtq_s64_f64(*(float64x2_t *)(i + 64)));
    RenderNodeList = (OZCacheManager *)HGRenderJob::GetRenderNodeList((HGRenderJob *)this);
    if (!*(_DWORD *)(*(void *)RenderNodeList + 8)) {
      break;
    }
    uint64_t v23 = *(void *)(i + 16);
    if (v23)
    {
      uint64_t v31 = *(void *)(i + 24);
      if (v31) {
        goto LABEL_30;
      }
      goto LABEL_31;
    }
LABEL_11:
    ;
  }
  uint64_t v23 = *(void *)(i + 32);
  if (!v23) {
    goto LABEL_11;
  }
  uint64_t v31 = *(void *)(i + 40);
  if (!v31) {
    goto LABEL_31;
  }
LABEL_30:
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
LABEL_31:
  uint64_t v32 = *(std::__shared_weak_count **)(a9 + 8);
  *(void *)a9 = v23;
  *(void *)(a9 + 8) = v31;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
LABEL_33:
  uint64_t v30 = 1;
LABEL_34:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v35);
  return v30;
}

void sub_1B7610114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void *PCDynamicCast<PCBitmap,PCImage>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *PCDynamicCast<PGTexture,PCImage>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

BOOL TXTextLayout::getCachedMetalTexture(uint64_t a1, TXTextObject *a2, OZRenderParams *this, LiAgent *a4, unsigned int a5, int a6, long long *a7, uint64_t a8, int32x4_t *a9, double *a10, double *a11, int32x4_t *a12, void *a13, char a14)
{
  if (OZRenderParams::getTextRenderQuality(this) == 6)
  {
    RequestedColorDescriptiouint64_t n = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a4);
    TXTextObject::getTextureCacheHashForAttribute(a2, this, RequestedColorDescription, a5, a10, a11);
    *a9 = (int32x4_t)v43[0];
    char v19 = a12;
  }
  else
  {
    HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
    char v21 = OZHostApplicationDelegateHandler::wantsToImproveQualityOfDraftQualityText(HostApplicationDelegate);
    uint64_t v22 = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a4);
    TXTextObject::getTextureCacheHashForAttribute(a2, this, v22, a5, a10, a11);
    *a9 = (int32x4_t)v43[0];
    char v19 = a12;
    if ((v21 & 1) == 0) {
      goto LABEL_5;
    }
  }
  PCMatrix44Tmpl<double>::operator*(a8, a7, (uint64_t)v43);
  TXTextObject::getScaleAndHashForPixelTransform((uint64_t)a2);
  PCHash128::operator+=(a9->i32, v42);
LABEL_5:
  HeliumRenderer = (HGGPURenderer *)LiAgent::getHeliumRenderer((LiRenderParameters **)a4);
  uint64_t v24 = *(void **)(*(void *)(HGGPURenderer::GetMetalContext(HeliumRenderer) + 16) + 16);
  uint64_t v25 = OZMetalUtils::registryID(v24);
  uint64_t v26 = (std::mutex *)(a1 + 60768);
  PCSharedMutex::lock_shared((std::mutex *)(a1 + 60768));
  uint64_t v27 = *(void *)(a1 + 60880);
  if (v27 == a1 + 60872)
  {
LABEL_12:
    char v30 = 1;
    goto LABEL_13;
  }
  while (1)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v27 + 56), *a9)))) & 1) == 0)
    {
      uint64_t v28 = *(void *)(v27 + 16);
      if (v28 && *(void *)(v27 + 72) == v25) {
        break;
      }
    }
    uint64_t v27 = *(void *)(v27 + 8);
    if (v27 == a1 + 60872) {
      goto LABEL_12;
    }
  }
  int32x4_t *v19 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*(float64x2_t *)(v27 + 24)), (int32x4_t)vcvtq_s64_f64(*(float64x2_t *)(v27 + 40)));
  uint64_t v38 = *a13;
  if (*a13 != v28)
  {
    if (v38)
    {
      (*(void (**)(void))(*(void *)v38 + 24))(*a13);
      uint64_t v28 = *(void *)(v27 + 16);
      *a13 = v28;
      if (!v28) {
        goto LABEL_33;
      }
    }
    else
    {
      *a13 = v28;
    }
    (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
  }
LABEL_33:
  char v30 = 0;
LABEL_13:
  PCSharedMutex::unlock_shared(v26);
  if ((v30 & 1) == 0) {
    return 1;
  }
  uint64_t v32 = (OZMetalTextureCache *)OZCacheManager::Instance(v31);
  OZCacheManager::getMetalTextureForKey(v32, v24, (const PCHash128 *)a9, v43);
  uint64_t v33 = *a13;
  uint64_t v34 = *(void *)&v43[0];
  if (*a13 == *(void *)&v43[0])
  {
    if (!v33) {
      return 0;
    }
    (*(void (**)(uint64_t))(*(void *)v33 + 24))(v33);
    if (!*a13) {
      return 0;
    }
  }
  else
  {
    if (v33)
    {
      (*(void (**)(uint64_t))(*(void *)v33 + 24))(v33);
      uint64_t v34 = *(void *)&v43[0];
    }
    *a13 = v34;
    if (!v34) {
      return 0;
    }
  }
  PCSharedMutex::lock_shared(v26);
  int32x4_t v36 = (float64x2_t *)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(a1 + 60896, (const PCHash128 *)a9);
  BOOL v35 = a1 + 60904 != (void)v36;
  if ((float64x2_t *)(a1 + 60904) != v36) {
    int32x4_t *v19 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v36[3]), (int32x4_t)vcvtq_s64_f64(v36[4]));
  }
  PCSharedMutex::unlock_shared(v26);
  return v35;
}

void sub_1B76105F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  PCSharedMutex::unlock_shared(v16);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::getCachedTextureOrImage(Li3DEngineScene *a1, TXTextObject *a2, OZRenderParams *this, LiAgent *a4, unsigned int a5, int a6, long long *a7, uint64_t a8, int32x4_t *a9, double *a10, double *a11, int32x4_t *a12, uint64_t a13, uint64_t a14, void *a15, char a16)
{
  if ((_BYTE)a13)
  {
    return TXTextLayout::getCachedMetalTexture((uint64_t)a1, a2, this, a4, a5, a6, a7, a8, a9, a10, a11, a12, a15, a16);
  }
  else
  {
    RequestedColorDescriptiouint64_t n = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a4);
    return TXTextLayout::getCachedImage(a1, a2, this, RequestedColorDescription, a5, a6, a7, a8, a14, a9, a10, a11, a12);
  }
}

void TXTextLayout::makeHGTextureOrBitmapNode(HGRenderJob *this@<X3>, uint64_t a2@<X1>, HGBitmap **a3@<X2>, uint64_t *a4@<X4>, LiRenderParameters **a5@<X5>, int a6@<W6>, HGBitmapLoader **a7@<X8>)
{
  *a7 = 0;
  if (a6)
  {
    int v8 = *a3;
    BOOL v9 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
    HGBitmapLoader::HGBitmapLoader(v9, v8);
    if (v9) {
      *a7 = v9;
    }
  }
  else
  {
    if (*(_DWORD *)(*(void *)HGRenderJob::GetRenderNodeList(this) + 8))
    {
      HeliumRenderer = (const void *)LiAgent::getHeliumRenderer(a5);
      if (HeliumRenderer) {
      else
      }
        uint64_t v14 = 0;
      uint64_t v15 = *a4;
      PGHelium::createTextureNode(a2, (uint64_t)v14, (unsigned int *)&v15, 1, 0, &v16);
    }
    else
    {
      uint64_t v15 = *a4;
      PGHelium::createBitmapNode(a2, (unsigned int *)&v15, 1, 0, &v16);
    }
    if (v16) {
      *a7 = v16;
    }
  }
}

void sub_1B7610894(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL OZRenderParams::hasParameter(OZRenderParams *this, const char *a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = *((void *)this + 155);
  if (!v3) {
    throw_PCNullPointerException(1);
  }
  uint64_t v4 = std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::find<char const*>(v3 + 8, &v7);
  uint64_t v5 = *((void *)this + 155);
  if (!v5) {
    throw_PCNullPointerException(1);
  }
  return v5 + 16 != v4;
}

void LiRenderParameters::LiRenderParameters(LiRenderParameters *this, const LiRenderParameters *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  LiImageFilterChain::LiImageFilterChain((LiRenderParameters *)((char *)this + 16), (const LiRenderParameters *)((char *)a2 + 16));
  long long v4 = *(_OWORD *)((char *)a2 + 56);
  long long v5 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 72) = v5;
  *(_OWORD *)((char *)this + 56) = v4;
  long long v6 = *(_OWORD *)((char *)a2 + 104);
  long long v7 = *(_OWORD *)((char *)a2 + 120);
  long long v8 = *(_OWORD *)((char *)a2 + 136);
  *((void *)this + 19) = *((void *)a2 + 19);
  *(_OWORD *)((char *)this + 136) = v8;
  *(_OWORD *)((char *)this + 120) = v7;
  *(_OWORD *)((char *)this + 104) = v6;
  BOOL v9 = (CGColorSpace *)*((void *)a2 + 20);
  *((void *)this + 20) = v9;
  if (v9) {
    PCCFRefTraits<CGColorSpace *>::retain(v9);
  }
  uint64_t v10 = *((void *)a2 + 21);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((void *)this + 21) = v10;
  *((unsigned char *)this + 184) = *((unsigned char *)a2 + 184);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  uint64_t v11 = *((void *)a2 + 26);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)this + 26) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1B76109CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = &unk_1F10AD6B0;
  if (*(int *)(v1 + 40) < 0) {
    int v3 = 1;
  }
  else {
    int v3 = *(_DWORD *)(v1 + 40);
  }
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(v1 + 32, 0, v3);
  uint64_t v4 = *(void *)(v1 + 48);
  if (v4) {
    MEMORY[0x1BA9BFB70](v4, 0x1000C8077774924);
  }
  *(void *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 + 24));
  _Unwind_Resume(a1);
}

void LiRenderParameters::~LiRenderParameters(LiRenderParameters *this)
{
  __int32 v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 20);
  *((void *)this + 4) = &unk_1F10AD6B0;
  if (*((int *)this + 10) < 0) {
    int v3 = 1;
  }
  else {
    int v3 = *((_DWORD *)this + 10);
  }
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)this + 32, 0, v3);
  uint64_t v4 = *((void *)this + 6);
  if (v4) {
    MEMORY[0x1BA9BFB70](v4, 0x1000C8077774924);
  }
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 10) = 0;
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 3);
}

uint64_t *OZRenderParams::setParameter(OZRenderParams *this, const char *a2, uint64_t a3)
{
  long long v6 = a2;
  uint64_t v4 = *((void *)this + 155);
  if (!v4) {
    throw_PCNullPointerException(1);
  }
  long long v7 = &v6;
  uint64_t result = std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>((uint64_t **)(v4 + 8), &v6, (uint64_t)&std::piecewise_construct, (uint64_t **)&v7);
  result[5] = a3;
  return result;
}

void TXTextLayout::outlineNodeFromTextObject(uint64_t a1, TXTextObject **a2, uint64_t a3, LiAgent *this, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9)
{
  RequestedColorDescriptiouint64_t n = LiAgent::getRequestedColorDescription(this);
  v15[0] = 0;
  TXTextLayout::getLiImageSourceForOutline(a1, a3, RequestedColorDescription, a2, a5, a7, v15);
}

void sub_1B7610E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  (*(void (**)(uint64_t))(*(void *)v74 + 24))(v74);
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  if (*v72) {
    (*(void (**)(void))(*(void *)*v72 + 24))(*v72);
  }
  LiAgent::~LiAgent((LiAgent *)&a14);
  LiRenderParameters::~LiRenderParameters((LiRenderParameters *)&a72);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v75 - 120));
  _Unwind_Resume(a1);
}

TXTextLayout *TXTextLayout::notify(TXTextLayout *this, char a2)
{
  if ((a2 & 0xC) != 0) {
    return (TXTextLayout *)TXTextLayout::updateTextStyles(this);
  }
  return this;
}

void *TXTextLayout::updateTextStyles(TXTextLayout *this)
{
  uint64_t result = (void *)(*(uint64_t (**)(void))(*((void *)this + 25) + 272))();
  if (!result) {
    return result;
  }
  uint64_t v3 = result[198];
  if (!v3) {
    return result;
  }
  BOOL v4 = theApp && *(unsigned char *)(theApp + 81) && *(unsigned char *)(v3 + 184) == 0;
  uint64_t v5 = *((void *)this + 2419);
  if ((TXTextLayout *)v5 == (TXTextLayout *)((char *)this + 19344)) {
    return result;
  }
  do
  {
    uint64_t v13 = (uint64_t)&v13;
    uint64_t v14 = &v13;
    uint64_t v15 = 0;
    OZBehavior::GetBehaviorsAffectingChannel((void *)(*(void *)(v5 + 16) + 1304), &v13, 1);
    for (uint64_t i = v14; i != &v13; uint64_t i = (uint64_t *)i[1])
    {
      long long v7 = (const void *)i[2];
      if (v7)
      {
        if (v8)
        {
          BOOL v9 = v8;
          if (OZRigBehavior::getWidget(v8))
          {
            uint64_t v10 = (const OZChannelBase *)*((void *)OZRigBehavior::getWidget(v9) + 136);
            if (!v10)
            {
              if (!v4) {
                continue;
              }
LABEL_19:
              (*(void (**)(void, OZRigBehavior *))(**(void **)(v5 + 16) + 288))(*(void *)(v5 + 16), v9);
              continue;
            }
            uint64_t v11 = *(OZNotificationManager **)(v3 + 168);
            if (v11) {
              LODWORD(v11) = OZNotificationManager::wasChannelModified(v11, v10);
            }
            if ((v4 | v11)) {
              goto LABEL_19;
            }
          }
        }
      }
    }
    unint64_t v12 = *(OZNotificationManager **)(v3 + 168);
    if (v12 && OZNotificationManager::wasChannelModified(v12, (const OZChannelBase *)(*(void *)(v5 + 16) + 1304))) {
      TXTextStyle::updateFont(*(TXTextStyle **)(v5 + 16));
    }
    uint64_t result = std::__list_imp<unsigned int>::clear(&v13);
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while ((TXTextLayout *)v5 != (TXTextLayout *)((char *)this + 19344));
  return result;
}

void sub_1B761115C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *non-virtual thunk to'TXTextLayout::notify(void *this, char a2)
{
  if ((a2 & 0xC) != 0) {
    return TXTextLayout::updateTextStyles((TXTextLayout *)(this - 2372));
  }
  return this;
}

void non-virtual thunk to'TXTextLayout::didChangeDisplayAspectRatio(TXParagraphStyle ***this)
{
}

OZChannelBase *TXTextLayout::didCreateCopyForCopyOnWrite(TXTextLayout *this)
{
  uint64_t result = OZChannelBase::updateIDGenerator((OZChannelBase *)*((unsigned int *)this + 70));
  uint64_t v3 = (char *)this + 19344;
  for (uint64_t i = *((void *)this + 2419); (char *)i != v3; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v5 = *(void *)(i + 16);
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(result);
    OZChannelBase::setID((OZChannelBase *)(v5 + 72), NextUniqueID);
    uint64_t result = OZStyle::assignUniqueIDsToAllMaterials(*(OZChannelBase **)(i + 16));
  }
  return result;
}

OZChannelBase *non-virtual thunk to'TXTextLayout::didCreateCopyForCopyOnWrite(TXTextLayout *this)
{
  return TXTextLayout::didCreateCopyForCopyOnWrite((TXTextLayout *)((char *)this - 200));
}

uint64_t TXTextLayout::setSingleLineScaleThreshold(uint64_t this, double a2)
{
  *(double *)(this + 63768) = a2;
  return this;
}

uint64_t TXTextLayout::setRecomputeGlyphPositions(uint64_t this)
{
  *(unsigned char *)(this + 63800) = 1;
  return this;
}

uint64_t TXTextLayout::openMedia(TXTextLayout *this)
{
  TXTextLayout::getCurrentStyleForInsertion((uint64_t)this, &v23);
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200);
  uint64_t v3 = (OZScene *)v2;
  if (v23) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if ((*(uint64_t (**)(TXTextLayout *))(*(void *)this + 296))(this))
    {
      uint64_t v20 = (uint64_t)&v20;
      char v21 = &v20;
      uint64_t v22 = 0;
      uint64_t v5 = *(const void ***)(v23 + 480);
      long long v6 = *(const void ***)(v23 + 488);
      if (v5 != v6)
      {
        do
        {
          long long v7 = *v5;
          if (*v5
          {
            (*(void (**)(void))(v8 + 344))();
          }
          ++v5;
        }
        while (v5 != v6);
        for (uint64_t i = v21; i != &v20; uint64_t i = (uint64_t *)i[1])
        {
          Node = OZScene::getNode(v3, *((_DWORD *)i + 4));
          if (Node) {
            (*(void (**)(void *))(*(void *)Node + 104))(Node);
          }
        }
      }
      std::__list_imp<unsigned int>::clear(&v20);
    }
    else
    {
      unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(v23 + 8696), MEMORY[0x1E4F1FA48], 0.0);
      unint64_t v12 = OZScene::getNode(v3, ValueAsUint);
      if (v12) {
        (*(void (**)(void *))(*(void *)v12 + 104))(v12);
      }
      unsigned int v13 = OZChannel::getValueAsUint((OZChannel *)(v23 + 16584), MEMORY[0x1E4F1FA48], 0.0);
      uint64_t v14 = OZScene::getNode(v3, v13);
      if (v14) {
        (*(void (**)(void *))(*(void *)v14 + 104))(v14);
      }
      unsigned int v15 = OZChannel::getValueAsUint((OZChannel *)(v23 + 25368), MEMORY[0x1E4F1FA48], 0.0);
      uint64_t v16 = OZScene::getNode(v3, v15);
      if (v16) {
        (*(void (**)(void *))(*(void *)v16 + 104))(v16);
      }
      unsigned int v17 = OZChannel::getValueAsUint((OZChannel *)(v23 + 33816), MEMORY[0x1E4F1FA48], 0.0);
      char v18 = OZScene::getNode(v3, v17);
      if (v18) {
        (*(void (**)(void *))(*(void *)v18 + 104))(v18);
      }
    }
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  return 0;
}

void sub_1B7611568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'TXTextLayout::openMedia(TXTextLayout *this)
{
  return 0;
}

uint64_t TXTextLayout::prerollBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  OZSceneNode::prerollBegin(a1 + 200, a2, a3, a4, a5);
  uint64_t v10 = a1 + 19344;
  for (uint64_t i = *(void *)(a1 + 19352); i != v10; uint64_t i = *(void *)(i + 8))
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, double))(**(void **)(i + 16) + 304))(*(void *)(i + 16), a2, a3, a4, a5);
  return 0;
}

uint64_t non-virtual thunk to'TXTextLayout::prerollBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return 0;
}

uint64_t TXTextLayout::prerollEnd(TXTextLayout *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  OZSceneNode::prerollEnd((uint64_t)this + 200, (uint64_t)a2, (uint64_t)a3);
  long long v6 = (char *)this + 19344;
  for (uint64_t i = *((void *)this + 2419); (char *)i != v6; uint64_t i = *(void *)(i + 8))
    (*(void (**)(void, const OZRenderParams *, PMFrameRequest *))(**(void **)(i + 16) + 312))(*(void *)(i + 16), a2, a3);
  return 0;
}

uint64_t non-virtual thunk to'TXTextLayout::prerollEnd(TXTextLayout *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  return 0;
}

uint64_t TXTextLayout::setRate(TXTextLayout *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  OZSceneNode::setRate((uint64_t)this + 200, (uint64_t)a2, (uint64_t)a3, a4);
  uint64_t v8 = (char *)this + 19344;
  for (uint64_t i = *((void *)this + 2419); (char *)i != v8; uint64_t i = *(void *)(i + 8))
    (*(void (**)(void, const OZRenderParams *, PMFrameRequest *, double))(**(void **)(i + 16) + 320))(*(void *)(i + 16), a2, a3, a4);
  return 0;
}

uint64_t non-virtual thunk to'TXTextLayout::setRate(TXTextLayout *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  return 0;
}

uint64_t TXTextLayout::scheduleTokens(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4, uint64_t a5)
{
  memset(v12, 0, sizeof(v12));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v12, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)(a1 + 200) + 184))(a1 + 200, a2, v12, a4);
  OZSceneNode::scheduleTokens(a1 + 200, a2, (uint64_t)v12, a4, a5);
  uint64_t v9 = a1 + 19344;
  for (uint64_t i = *(void *)(a1 + 19352); i != v9; uint64_t i = *(void *)(i + 8))
    (*(void (**)(void, uint64_t, void *, uint64_t, uint64_t))(**(void **)(i + 16) + 328))(*(void *)(i + 16), a2, v12, a4, a5);
  unsigned int v13 = (void **)v12;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v13);
  return 0;
}

void sub_1B7611924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'TXTextLayout::scheduleTokens(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4, uint64_t a5)
{
  return 0;
}

uint64_t TXTextLayout::hintTokensWillImage(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4)
{
  memset(v10, 0, sizeof(v10));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v10, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)(a1 + 200) + 184))(a1 + 200, a2, v10, a4);
  OZSceneNode::hintTokensWillImage(a1 + 200, a2, (uint64_t)v10, a4);
  uint64_t v7 = a1 + 19344;
  for (uint64_t i = *(void *)(a1 + 19352); i != v7; uint64_t i = *(void *)(i + 8))
    (*(void (**)(void, uint64_t, void *, uint64_t))(**(void **)(i + 16) + 336))(*(void *)(i + 16), a2, v10, a4);
  uint64_t v11 = (void **)v10;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  return 0;
}

void sub_1B7611A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'TXTextLayout::hintTokensWillImage(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4)
{
  return 0;
}

uint64_t TXTextLayout::getTokensImage(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4)
{
  memset(v10, 0, sizeof(v10));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v10, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)(a1 + 200) + 184))(a1 + 200, a2, v10, a4);
  OZSceneNode::getTokensImage(a1 + 200, a2, (uint64_t)v10, a4);
  uint64_t v7 = a1 + 19344;
  for (uint64_t i = *(void *)(a1 + 19352); i != v7; uint64_t i = *(void *)(i + 8))
    (*(void (**)(void, uint64_t, void *, uint64_t))(**(void **)(i + 16) + 344))(*(void *)(i + 16), a2, v10, a4);
  uint64_t v11 = (void **)v10;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  return 0;
}

void sub_1B7611BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'TXTextLayout::getTokensImage(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4)
{
  return 0;
}

uint64_t TXTextLayout::pruneTokensAtTime(TXTextLayout *this, CMTime *a2, const char *a3)
{
  CMTime v12 = *a2;
  uint64_t result = OZSceneNode::pruneTokensAtTime((uint64_t)this + 200, &v12, a3);
  uint64_t v7 = (char *)this + 19344;
  for (uint64_t i = *((void *)this + 2419); (char *)i != v7; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v9 = *(void *)(i + 16);
    long long v10 = *(_OWORD *)&a2->value;
    CMTimeEpoch epoch = a2->epoch;
    uint64_t result = (*(uint64_t (**)(uint64_t, long long *, const char *))(*(void *)v9 + 352))(v9, &v10, a3);
  }
  return result;
}

uint64_t non-virtual thunk to'TXTextLayout::pruneTokensAtTime(TXTextLayout *this, CMTime *a2, const char *a3)
{
  return TXTextLayout::pruneTokensAtTime((TXTextLayout *)((char *)this - 200), a2, a3);
}

uint64_t TXTextLayout::pruneTokensExceptAtTime(TXTextLayout *this, CMTime *a2, const char *a3)
{
  CMTime v12 = *a2;
  uint64_t result = OZSceneNode::pruneTokensExceptAtTime((uint64_t)this + 200, &v12, a3);
  uint64_t v7 = (char *)this + 19344;
  for (uint64_t i = *((void *)this + 2419); (char *)i != v7; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v9 = *(void *)(i + 16);
    long long v10 = *(_OWORD *)&a2->value;
    CMTimeEpoch epoch = a2->epoch;
    uint64_t result = (*(uint64_t (**)(uint64_t, long long *, const char *))(*(void *)v9 + 360))(v9, &v10, a3);
  }
  return result;
}

uint64_t non-virtual thunk to'TXTextLayout::pruneTokensExceptAtTime(TXTextLayout *this, CMTime *a2, const char *a3)
{
  return TXTextLayout::pruneTokensExceptAtTime((TXTextLayout *)((char *)this - 200), a2, a3);
}

uint64_t TXTextLayout::pruneAllTokens(TXTextLayout *this, const char *a2)
{
  uint64_t result = OZSceneNode::pruneAllTokens((uint64_t)this + 200, a2);
  uint64_t v5 = (char *)this + 19344;
  for (uint64_t i = *((void *)this + 2419); (char *)i != v5; uint64_t i = *(void *)(i + 8))
    uint64_t result = (*(uint64_t (**)(void, const char *))(**(void **)(i + 16) + 368))(*(void *)(i + 16), a2);
  return result;
}

uint64_t non-virtual thunk to'TXTextLayout::pruneAllTokens(TXTextLayout *this, const char *a2)
{
  return TXTextLayout::pruneAllTokens((TXTextLayout *)((char *)this - 200), a2);
}

BOOL TXTextLayout::hasCustomGradientChannels(TXTextLayout *this)
{
  BOOL v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  (*(void (**)(TXTextLayout *, void **))(*(void *)this + 376))(this, &v4);
  uint64_t v1 = v4;
  uint64_t v2 = v5;
  if (v4)
  {
    uint64_t v5 = v4;
    operator delete(v4);
  }
  return v2 != v1;
}

void sub_1B7611E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL non-virtual thunk to'TXTextLayout::hasCustomGradientChannels(TXTextLayout *this)
{
  return TXTextLayout::hasCustomGradientChannels((TXTextLayout *)((char *)this - 216));
}

uint64_t TXTextLayout::shouldDrawGradientOSC(TXTextLayout *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 368))();
}

uint64_t non-virtual thunk to'TXTextLayout::shouldDrawGradientOSC(TXTextLayout *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 27) + 368))();
}

void *TXTextLayout::getCustomGradientChannels(void *a1, uint64_t a2)
{
  uint64_t result = (void *)(*(uint64_t (**)(void *))(*a1 + 296))(a1);
  if (result)
  {
    for (uint64_t i = (void *)a1[2419]; i != a1 + 2418; uint64_t i = (void *)i[1])
    {
      uint64_t v6 = i[2];
      uint64_t v7 = *(void ***)(v6 + 480);
      uint64_t v8 = *(void ***)(v6 + 488);
      while (v7 != v8)
      {
        uint64_t result = *v7;
        if (*v7)
        {
          if (result)
          {
            uint64_t v9 = (void *)result[178];
            if (v9)
            {
              uint64_t v11 = (void **)*v9;
              long long v10 = (void **)v9[1];
              while (v11 != v10)
              {
                uint64_t result = *v11;
                if (*v11)
                {
                  if (result) {
                    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 848))(result, a2);
                  }
                }
                ++v11;
              }
            }
          }
        }
        ++v7;
      }
    }
  }
  return result;
}

void *non-virtual thunk to'TXTextLayout::getCustomGradientChannels(uint64_t a1, uint64_t a2)
{
  return TXTextLayout::getCustomGradientChannels((void *)(a1 - 216), a2);
}

void TXTextLayout::getLineOffset(TXTextLayout *this, unsigned int a2)
{
  uint64_t v3 = *((void *)this + 2378);
  if (a2 >= (unint64_t)((*((void *)this + 2379) - v3) >> 3)) {
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v4 = *(void *)(v3 + 8 * a2);
  if (v4)
  {
    uint64_t v5 = MEMORY[0x1E4F1FA48];
    CMTime v6 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble((OZChannel *)(v4 + 680), &v6, 0.0);
    (*(double (**)(TXTextLayout *, uint64_t))(*(void *)this + 712))(this, v5);
  }
}

CGColorSpace **TXTextLayout::getSequencedColor@<X0>(TXTextLayout *this@<X0>, const CMTime *a2@<X1>, PCColor *a3@<X2>, double a4@<D0>, uint64_t a5@<X8>)
{
  long long v10 = *(_OWORD *)&a3->var0.var1[1];
  *(_OWORD *)a5 = *(_OWORD *)&a3->var0.var0;
  *(_OWORD *)(a5 + 16) = v10;
  *(_OWORD *)(a5 + 32) = *(_OWORD *)&a3->var0.var1[3];
  obuint64_t j = a3->var1._obj;
  *(void *)(a5 + 48) = obj;
  if (obj) {
    PCCFRefTraits<CGColorSpace *>::retain(obj);
  }
  CMTime v12 = (OZChannelBase *)((char *)this + 28720);
  uint64_t result = (CGColorSpace **)OZChannelBase::isEnabled(v12, 0, 1);
  if (result)
  {
    CMTime v15 = *a2;
    OZChannelColorNoAlpha::setColor((OZChannelColorNoAlpha *)v12, &v15, a3, 1);
    CMTime v14 = *a2;
    return OZChannelColorNoAlpha::getColor((OZChannelColorNoAlpha *)v12, &v14, (PCColor *)a5, a4);
  }
  return result;
}

void sub_1B76122B0(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

double TXTextLayout::getSequencedOpacity(TXTextLayout *this, OZChannel *a2, OZChannel *a3, const CMTime *a4, double a5, double a6)
{
  (*((void (**)(OZChannel *, const CMTime *, uint64_t, double))a3->var0 + 89))(a3, a4, 1, a5);
  OZChannel::getValueAsDouble(a3, a4, a6);
  double v11 = v10;
  OZChannel::getValueAsDouble(a2, a4, a6);
  return v11 * v12;
}

void TXSelectionRange::~TXSelectionRange(TXSelectionRange *this)
{
}

uint64_t TXTextLayout::TXTextLayout_oldTrackingInfo::getInstance(TXTextLayout::TXTextLayout_oldTrackingInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_oldTrackingInfo::getInstance(void)::TXTextLayout_oldTrackingInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_oldTrackingInfo::getInstance(void)::TXTextLayout_oldTrackingInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_oldTrackingInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_oldTrackingInfo::_TXTextLayout_oldTrackingInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_oldTrackingInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_oldTrackingInfo::_TXTextLayout_oldTrackingInfo) {
    operator new();
  }
}

void sub_1B761242C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_oldTrackingInfo *TXTextLayout::TXTextLayout_oldTrackingInfo::TXTextLayout_oldTrackingInfo(TXTextLayout::TXTextLayout_oldTrackingInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -100.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_oldTrackingInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10AC4F8;
  *((void *)this + 10) = &unk_1F10AC518;
  return this;
}

void sub_1B7612504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_trackingImpl::getInstance(TXTextLayout::TXTextLayout_trackingImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_trackingImpl::getInstance(void)::TXTextLayout_trackingImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_trackingImpl::getInstance(void)::TXTextLayout_trackingImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_trackingImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_trackingImpl::_TXTextLayout_tracking;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_trackingImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_trackingImpl::_TXTextLayout_tracking) {
    operator new();
  }
}

void sub_1B76125E0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::TXTextLayout_trackingImpl::TXTextLayout_trackingImpl(OZChannelPercent *this)
{
}

void sub_1B76126B8(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_trackingInfo::getInstance(TXTextLayout::TXTextLayout_trackingInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_trackingInfo::getInstance(void)::TXTextLayout_trackingInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_trackingInfo::getInstance(void)::TXTextLayout_trackingInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_trackingInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_trackingInfo::_TXTextLayout_trackingInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_trackingInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_trackingInfo::_TXTextLayout_trackingInfo) {
    operator new();
  }
}

void sub_1B7612794(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_trackingInfo *TXTextLayout::TXTextLayout_trackingInfo::TXTextLayout_trackingInfo(TXTextLayout::TXTextLayout_trackingInfo *this)
{
  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1.0, 1.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_trackingInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10AC5E8;
  *((void *)this + 10) = &unk_1F10AC608;
  return this;
}

void sub_1B761286C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::getInstance(TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::getInstance(void)::TXTextLayout_lineSpacingObsoleteInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::getInstance(void)::TXTextLayout_lineSpacingObsoleteInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::_TXTextLayout_lineSpacingObsoleteInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::_TXTextLayout_lineSpacingObsoleteInfo) {
    operator new();
  }
}

void sub_1B7612948(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo *TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo::TXTextLayout_lineSpacingObsoleteInfo(TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -100.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_lineSpacingObsoleteInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10AC660;
  *((void *)this + 10) = &unk_1F10AC680;
  return this;
}

void sub_1B7612A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_leftMarginImpl::getInstance(TXTextLayout::TXTextLayout_leftMarginImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_leftMarginImpl::getInstance(void)::TXTextLayout_leftMarginImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_leftMarginImpl::getInstance(void)::TXTextLayout_leftMarginImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_leftMarginImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_leftMarginImpl::_TXTextLayout_leftMargin;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_leftMarginImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_leftMarginImpl::_TXTextLayout_leftMargin) {
    operator new();
  }
}

void sub_1B7612AFC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::TXTextLayout_leftMarginImpl::TXTextLayout_leftMarginImpl(TXTextLayout::TXTextLayout_leftMarginImpl *this)
{
}

void sub_1B7612BD4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_rightMarginImpl::getInstance(TXTextLayout::TXTextLayout_rightMarginImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_rightMarginImpl::getInstance(void)::TXTextLayout_rightMarginImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_rightMarginImpl::getInstance(void)::TXTextLayout_rightMarginImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_rightMarginImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_rightMarginImpl::_TXTextLayout_rightMargin;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_rightMarginImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_rightMarginImpl::_TXTextLayout_rightMargin) {
    operator new();
  }
}

void sub_1B7612CB0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::TXTextLayout_rightMarginImpl::TXTextLayout_rightMarginImpl(TXTextLayout::TXTextLayout_rightMarginImpl *this)
{
}

void sub_1B7612D88(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_topMarginImpl::getInstance(TXTextLayout::TXTextLayout_topMarginImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_topMarginImpl::getInstance(void)::TXTextLayout_topMarginImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_topMarginImpl::getInstance(void)::TXTextLayout_topMarginImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_topMarginImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_topMarginImpl::_TXTextLayout_topMargin;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_topMarginImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_topMarginImpl::_TXTextLayout_topMargin) {
    operator new();
  }
}

void sub_1B7612E64(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::TXTextLayout_topMarginImpl::TXTextLayout_topMarginImpl(TXTextLayout::TXTextLayout_topMarginImpl *this)
{
}

void sub_1B7612F3C(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_bottomMarginImpl::getInstance(TXTextLayout::TXTextLayout_bottomMarginImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_bottomMarginImpl::getInstance(void)::TXTextLayout_bottomMarginImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_bottomMarginImpl::getInstance(void)::TXTextLayout_bottomMarginImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_bottomMarginImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_bottomMarginImpl::_TXTextLayout_bottomMargin;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_bottomMarginImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_bottomMarginImpl::_TXTextLayout_bottomMargin) {
    operator new();
  }
}

void sub_1B7613018(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::TXTextLayout_bottomMarginImpl::TXTextLayout_bottomMarginImpl(TXTextLayout::TXTextLayout_bottomMarginImpl *this)
{
}

void sub_1B76130F0(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_radiusImpl::getInstance(TXTextLayout::TXTextLayout_radiusImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_radiusImpl::getInstance(void)::TXTextLayout_radiusImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_radiusImpl::getInstance(void)::TXTextLayout_radiusImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_radiusImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_radiusImpl::_TXTextLayout_radius;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_radiusImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_radiusImpl::_TXTextLayout_radius) {
    operator new();
  }
}

void sub_1B76131CC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::TXTextLayout_radiusImpl::TXTextLayout_radiusImpl(TXTextLayout::TXTextLayout_radiusImpl *this)
{
}

void sub_1B76132B4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_radiusInfo::getInstance(TXTextLayout::TXTextLayout_radiusInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_radiusInfo::getInstance(void)::TXTextLayout_radiusInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_radiusInfo::getInstance(void)::TXTextLayout_radiusInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_radiusInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_radiusInfo::_TXTextLayout_radiusInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_radiusInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_radiusInfo::_TXTextLayout_radiusInfo) {
    operator new();
  }
}

void sub_1B7613390(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_radiusInfo *TXTextLayout::TXTextLayout_radiusInfo::TXTextLayout_radiusInfo(TXTextLayout::TXTextLayout_radiusInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 400.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_radiusInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10AC930;
  *((void *)this + 10) = &unk_1F10AC950;
  return this;
}

void sub_1B7613464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_rectSizeImpl::getInstance(TXTextLayout::TXTextLayout_rectSizeImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_rectSizeImpl::getInstance(void)::TXTextLayout_rectSizeImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_rectSizeImpl::getInstance(void)::TXTextLayout_rectSizeImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_rectSizeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_rectSizeImpl::_TXTextLayout_rectSize;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_rectSizeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_rectSizeImpl::_TXTextLayout_rectSize) {
    operator new();
  }
}

void sub_1B7613540(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::TXTextLayout_rectSizeImpl::TXTextLayout_rectSizeImpl(TXTextLayout::TXTextLayout_rectSizeImpl *this)
{
}

void sub_1B7613628(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_rectSizeInfo::getInstance(TXTextLayout::TXTextLayout_rectSizeInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_rectSizeInfo::getInstance(void)::TXTextLayout_rectSizeInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_rectSizeInfo::getInstance(void)::TXTextLayout_rectSizeInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_rectSizeInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_rectSizeInfo::_TXTextLayout_rectSizeInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_rectSizeInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_rectSizeInfo::_TXTextLayout_rectSizeInfo) {
    operator new();
  }
}

void sub_1B7613704(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_rectSizeInfo *TXTextLayout::TXTextLayout_rectSizeInfo::TXTextLayout_rectSizeInfo(TXTextLayout::TXTextLayout_rectSizeInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 800.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_rectSizeInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10ACA20;
  *((void *)this + 10) = &unk_1F10ACA40;
  return this;
}

void sub_1B76137D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_waveAmplitudeImpl::getInstance(TXTextLayout::TXTextLayout_waveAmplitudeImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_waveAmplitudeImpl::getInstance(void)::TXTextLayout_waveAmplitudeImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_waveAmplitudeImpl::getInstance(void)::TXTextLayout_waveAmplitudeImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_waveAmplitudeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_waveAmplitudeImpl::_TXTextLayout_waveAmplitude;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_waveAmplitudeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_waveAmplitudeImpl::_TXTextLayout_waveAmplitude) {
    operator new();
  }
}

void sub_1B76138B4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::TXTextLayout_waveAmplitudeImpl::TXTextLayout_waveAmplitudeImpl(TXTextLayout::TXTextLayout_waveAmplitudeImpl *this)
{
}

void sub_1B761399C(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_waveAmplitudeInfo::getInstance(TXTextLayout::TXTextLayout_waveAmplitudeInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_waveAmplitudeInfo::getInstance(void)::TXTextLayout_waveAmplitudeInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_waveAmplitudeInfo::getInstance(void)::TXTextLayout_waveAmplitudeInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_waveAmplitudeInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_waveAmplitudeInfo::_TXTextLayout_waveAmplitudeInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_waveAmplitudeInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_waveAmplitudeInfo::_TXTextLayout_waveAmplitudeInfo) {
    operator new();
  }
}

void sub_1B7613A78(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_waveAmplitudeInfo *TXTextLayout::TXTextLayout_waveAmplitudeInfo::TXTextLayout_waveAmplitudeInfo(TXTextLayout::TXTextLayout_waveAmplitudeInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 500.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_waveAmplitudeInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10ACB10;
  *((void *)this + 10) = &unk_1F10ACB30;
  return this;
}

void sub_1B7613B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_waveFrequencyImpl::getInstance(TXTextLayout::TXTextLayout_waveFrequencyImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_waveFrequencyImpl::getInstance(void)::TXTextLayout_waveFrequencyImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_waveFrequencyImpl::getInstance(void)::TXTextLayout_waveFrequencyImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_waveFrequencyImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_waveFrequencyImpl::_TXTextLayout_waveFrequency;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_waveFrequencyImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_waveFrequencyImpl::_TXTextLayout_waveFrequency) {
    operator new();
  }
}

void sub_1B7613C28(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::TXTextLayout_waveFrequencyImpl::TXTextLayout_waveFrequencyImpl(TXTextLayout::TXTextLayout_waveFrequencyImpl *this)
{
}

void sub_1B7613D00(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_waveFrequencyInfo::getInstance(TXTextLayout::TXTextLayout_waveFrequencyInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_waveFrequencyInfo::getInstance(void)::TXTextLayout_waveFrequencyInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_waveFrequencyInfo::getInstance(void)::TXTextLayout_waveFrequencyInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_waveFrequencyInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_waveFrequencyInfo::_TXTextLayout_waveFrequencyInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_waveFrequencyInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_waveFrequencyInfo::_TXTextLayout_waveFrequencyInfo) {
    operator new();
  }
}

void sub_1B7613DDC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_waveFrequencyInfo *TXTextLayout::TXTextLayout_waveFrequencyInfo::TXTextLayout_waveFrequencyInfo(TXTextLayout::TXTextLayout_waveFrequencyInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_waveFrequencyInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10ACC00;
  *((void *)this + 10) = &unk_1F10ACC20;
  return this;
}

void sub_1B7613EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void OZChannelAngle::OZChannelAngle(OZChannelAngle *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannelAngle_FactoryBase = (OZFactory *)getOZChannelAngle_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelAngle_FactoryBase, a3, a4, a5, a6, a7, a8);
  this->int64_t var0 = (void **)&unk_1F11010C0;
  this->var2 = (void **)&unk_1F1101420;
  OZChannelAngleInfo = (OZChannelAngle *)OZChannelAngle::createOZChannelAngleInfo(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelAngle::_OZChannelAngleInfo;
    this->var17 = (OZChannelInfo *)OZChannelAngle::_OZChannelAngleInfo;
  }
  this->var16 = var17;
  OZChannelAngle::createOZChannelAngleImpl(OZChannelAngleInfo);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelAngle::_OZChannelAngleImpl;
    this->var15 = (OZChannelImpl *)OZChannelAngle::_OZChannelAngleImpl;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, a2);
  OZChannel::setInitialValue((OZChannel *)this, a2, 0);
}

void sub_1B7613FF8(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_waveDampingImpl::getInstance(TXTextLayout::TXTextLayout_waveDampingImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_waveDampingImpl::getInstance(void)::TXTextLayout_waveDampingImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_waveDampingImpl::getInstance(void)::TXTextLayout_waveDampingImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_waveDampingImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_waveDampingImpl::_TXTextLayout_waveDamping;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_waveDampingImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_waveDampingImpl::_TXTextLayout_waveDamping) {
    operator new();
  }
}

void sub_1B76140C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::TXTextLayout_waveDampingImpl::TXTextLayout_waveDampingImpl(TXTextLayout::TXTextLayout_waveDampingImpl *this)
{
}

void sub_1B7614194(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_waveDampingInfo::getInstance(TXTextLayout::TXTextLayout_waveDampingInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_waveDampingInfo::getInstance(void)::TXTextLayout_waveDampingInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_waveDampingInfo::getInstance(void)::TXTextLayout_waveDampingInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_waveDampingInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_waveDampingInfo::_TXTextLayout_waveDampingInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_waveDampingInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_waveDampingInfo::_TXTextLayout_waveDampingInfo) {
    operator new();
  }
}

void sub_1B7614270(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_waveDampingInfo *TXTextLayout::TXTextLayout_waveDampingInfo::TXTextLayout_waveDampingInfo(TXTextLayout::TXTextLayout_waveDampingInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -20.0, 20.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_waveDampingInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10ACCF0;
  *((void *)this + 10) = &unk_1F10ACD10;
  return this;
}

void sub_1B7614340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_pathOffsetImpl::getInstance(TXTextLayout::TXTextLayout_pathOffsetImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_pathOffsetImpl::getInstance(void)::TXTextLayout_pathOffsetImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_pathOffsetImpl::getInstance(void)::TXTextLayout_pathOffsetImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_pathOffsetImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_pathOffsetImpl::_TXTextLayout_pathOffset;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_pathOffsetImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_pathOffsetImpl::_TXTextLayout_pathOffset) {
    operator new();
  }
}

void sub_1B761441C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::TXTextLayout_pathOffsetImpl::TXTextLayout_pathOffsetImpl(OZChannelPercent *this)
{
}

void sub_1B76144F4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_pathOffsetInfo::getInstance(TXTextLayout::TXTextLayout_pathOffsetInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_pathOffsetInfo::getInstance(void)::TXTextLayout_pathOffsetInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_pathOffsetInfo::getInstance(void)::TXTextLayout_pathOffsetInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_pathOffsetInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_pathOffsetInfo::_TXTextLayout_pathOffsetInfo;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_pathOffsetInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_pathOffsetInfo::_TXTextLayout_pathOffsetInfo) {
    operator new();
  }
}

void sub_1B76145D0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextLayout::TXTextLayout_pathOffsetInfo *TXTextLayout::TXTextLayout_pathOffsetInfo::TXTextLayout_pathOffsetInfo(TXTextLayout::TXTextLayout_pathOffsetInfo *this)
{
  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1.0, 1.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextLayout::TXTextLayout_pathOffsetInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10ACDE0;
  *((void *)this + 10) = &unk_1F10ACE00;
  return this;
}

void sub_1B76146A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_showScrollBarsImpl::getInstance(TXTextLayout::TXTextLayout_showScrollBarsImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_showScrollBarsImpl::getInstance(void)::TXTextLayout_showScrollBarsImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_showScrollBarsImpl::getInstance(void)::TXTextLayout_showScrollBarsImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_showScrollBarsImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_showScrollBarsImpl::_TXTextLayout_showScrollBars;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_showScrollBarsImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_showScrollBarsImpl::_TXTextLayout_showScrollBars) {
    operator new();
  }
}

void sub_1B7614784(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::TXTextLayout_showScrollBarsImpl::TXTextLayout_showScrollBarsImpl(OZChannelBool *this)
{
}

void sub_1B7614854(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZChannelBool::createOZChannelBoolCurve(OZChannelBool *this, double a2)
{
}

void sub_1B76148C8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

void OZCurveBool::OZCurveBool(OZCurveBool *this, double a2)
{
}

void sub_1B7614964(_Unwind_Exception *a1)
{
  OZCurve::~OZCurve(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCurveBoolSplineState::getInstance(OZCurveBoolSplineState *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCurveBoolSplineState::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZCurveBoolSplineState::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCurveBoolSplineState::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCurveBoolSplineState::_instance;
}

void OZCurveBool::getCurveWorkingCopy(OZCurveBool *this)
{
}

void sub_1B7614A4C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

void OZCurveBool::cloneCurve(OZCurveBool *this)
{
}

void sub_1B7614AD8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

double OZCurveBool::getValue(OZCurve *this, const CMTime *a2, void *a3, __n128 a4, __n128 a5)
{
  OZCurve::getValue(this, a2, a3, a4, a5);
  BOOL v6 = v5 <= -0.0000001;
  if (v5 >= 0.0000001) {
    return (double)1;
  }
  return (double)v6;
}

double OZCurveBool::getValue(OZCurve *this, const CMTime *a2, double a3)
{
  OZCurve::getValue(this, a2, a3);
  BOOL v4 = v3 <= -0.0000001;
  if (v3 >= 0.0000001) {
    return (double)1;
  }
  return (double)v4;
}

uint64_t TXTextLayout::TXTextLayout_showRulersImpl::getInstance(TXTextLayout::TXTextLayout_showRulersImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_showRulersImpl::getInstance(void)::TXTextLayout_showRulersImpl_once, memory_order_acquire) != -1)
  {
    BOOL v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_showRulersImpl::getInstance(void)::TXTextLayout_showRulersImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_showRulersImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_showRulersImpl::_TXTextLayout_showRulers;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_showRulersImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_showRulersImpl::_TXTextLayout_showRulers) {
    operator new();
  }
}

void sub_1B7614C30(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::TXTextLayout_showRulersImpl::TXTextLayout_showRulersImpl(OZChannelBool *this)
{
}

void sub_1B7614D00(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::TXTextLayout_versionImpl::getInstance(TXTextLayout::TXTextLayout_versionImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout::TXTextLayout_versionImpl::getInstance(void)::TXTextLayout_versionImpl_once, memory_order_acquire) != -1)
  {
    BOOL v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXTextLayout::TXTextLayout_versionImpl::getInstance(void)::TXTextLayout_versionImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout::TXTextLayout_versionImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout::TXTextLayout_versionImpl::_TXTextLayout_version;
}

void std::__call_once_param<std::tuple<TXTextLayout::TXTextLayout_versionImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextLayout::TXTextLayout_versionImpl::_TXTextLayout_version) {
    operator new();
  }
}

void sub_1B7614DDC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::TXTextLayout_versionImpl::TXTextLayout_versionImpl(TXTextLayout::TXTextLayout_versionImpl *this)
{
}

void sub_1B7614EB4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZChannelDouble::OZChannelDouble(OZChannelDouble *this, int a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannelDouble_FactoryBase = (OZFactory *)getOZChannelDouble_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelDouble_FactoryBase, a3, a4, a5, a6, a7, a8);
  *(void *)this = &unk_1F1100CF0;
  *((void *)this + 2) = &unk_1F1101050;
  OZChannelDoubleInfo = (OZChannelDouble *)OZChannelDouble::createOZChannelDoubleInfo(v17);
  if (a8)
  {
    uint64_t v19 = *((void *)this + 17);
  }
  else
  {
    uint64_t v19 = OZChannelDouble::_OZChannelDoubleInfo;
    *((void *)this + 17) = OZChannelDouble::_OZChannelDoubleInfo;
  }
  *((void *)this + 16) = v19;
  OZChannelDouble::createOZChannelDoubleImpl(OZChannelDoubleInfo);
  if (a7)
  {
    uint64_t v20 = *((void *)this + 15);
  }
  else
  {
    uint64_t v20 = OZChannelDouble::_OZChannelDoubleImpl;
    *((void *)this + 15) = OZChannelDouble::_OZChannelDoubleImpl;
  }
  *((void *)this + 14) = v20;
  OZChannel::setDefaultValue((OZChannel *)this, (double)a2);
  OZChannel::setInitialValue((OZChannel *)this, (double)a2, 0);
}

void sub_1B7615004(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void std::__list_imp<TXTextLayout::HGMetalNodeCacheEntry>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    double v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        double v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<TXTextLayout::HGMetalNodeCacheEntry,0>(v3 + 2);
        operator delete(v3);
        double v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t std::__destroy_at[abi:ne180100]<TXTextLayout::HGMetalNodeCacheEntry,0>(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void PCSharedMutex::~PCSharedMutex(std::mutex *this)
{
  uint64_t v2 = *(void **)&this[1].__m_.__opaque[8];
  if (v2)
  {
    *(void *)&this[1].__m_.__opaque[16] = v2;
    operator delete(v2);
  }

  std::mutex::~mutex(this);
}

void std::__list_imp<TXTextLayout::HGNodeCacheEntry>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    double v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        double v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<TXTextLayout::HGNodeCacheEntry,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        double v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<TXTextLayout::HGNodeCacheEntry,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  double v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void TXChannelAlignment::~TXChannelAlignment(TXChannelAlignment *this)
{
  *(void *)this = &unk_1F10B3E08;
  *((void *)this + 2) = &unk_1F10B4150;
  OZChannelEnum::~OZChannelEnum((TXChannelAlignment *)((char *)this + 392));
  OZChannelEnum::~OZChannelEnum((TXChannelAlignment *)((char *)this + 136));

  OZCompoundChannel::~OZCompoundChannel(this);
}

{
  uint64_t vars8;

  TXChannelAlignment::~TXChannelAlignment(this);

  JUMPOUT(0x1BA9BFBA0);
}

void std::__list_imp<std::shared_ptr<TXTextStyle>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    double v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        double v5 = (uint64_t *)v3[1];
        BOOL v6 = (std::__shared_weak_count *)v3[3];
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        operator delete(v3);
        double v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t std::deque<CMTime>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  double v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      double v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

void std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(a2 + 7), (void *)a2[8]);
    operator delete(a2);
  }
}

void OZProjectedBoundsCacheItem::~OZProjectedBoundsCacheItem(OZProjectedBoundsCacheItem *this)
{
}

void OZBoundsCacheItem::~OZBoundsCacheItem(OZBoundsCacheItem *this)
{
}

_OWORD *std::vector<TXLineMetrics>::__assign_with_size[abi:ne180100]<TXLineMetrics*,TXLineMetrics*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (_OWORD *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 6)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 58) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    if (v8 >> 5 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<TXLineMetrics>::__vallocate[abi:ne180100](a1, v11);
    unsigned int v13 = (_OWORD *)a1[1];
    double v12 = (_OWORD **)(a1 + 1);
    uint64_t result = v13;
    CMTime v14 = (char *)v13;
    if (v6 != a3)
    {
      CMTime v14 = (char *)result;
      do
      {
        long long v15 = *v6;
        long long v16 = v6[1];
        long long v17 = v6[3];
        *((_OWORD *)v14 + 2) = v6[2];
        *((_OWORD *)v14 + 3) = v17;
        *(_OWORD *)CMTime v14 = v15;
        *((_OWORD *)v14 + 1) = v16;
        v14 += 64;
        v6 += 4;
      }
      while (v6 != a3);
    }
LABEL_26:
    int64_t v31 = v14 - (char *)result;
    goto LABEL_27;
  }
  uint64_t v19 = (_OWORD *)a1[1];
  double v12 = (_OWORD **)(a1 + 1);
  char v18 = v19;
  unint64_t v20 = ((char *)v19 - (char *)result) >> 6;
  if (v20 >= a4)
  {
    CMTime v14 = (char *)result;
    if (a2 != a3)
    {
      uint64_t v32 = result;
      do
      {
        long long v33 = *v6;
        long long v34 = v6[1];
        long long v35 = v6[3];
        v32[2] = v6[2];
        double v32[3] = v35;
        *uint64_t v32 = v33;
        v32[1] = v34;
        v32 += 4;
        v6 += 4;
        v14 += 64;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  char v21 = &a2[4 * v20];
  if (v18 != result)
  {
    unint64_t v22 = v20 << 6;
    do
    {
      long long v23 = *v6;
      long long v24 = v6[1];
      long long v25 = v6[3];
      result[2] = v6[2];
      result[3] = v25;
      *uint64_t result = v23;
      result[1] = v24;
      result += 4;
      v6 += 4;
      v22 -= 64;
    }
    while (v22);
    uint64_t result = *v12;
  }
  uint64_t v26 = (char *)result;
  if (v21 != a3)
  {
    uint64_t v26 = (char *)result;
    uint64_t v27 = result;
    do
    {
      long long v28 = *v21;
      long long v29 = v21[1];
      long long v30 = v21[3];
      __n128 v27[2] = v21[2];
      v27[3] = v30;
      *uint64_t v27 = v28;
      v27[1] = v29;
      v27 += 4;
      v21 += 4;
      v26 += 64;
    }
    while (v21 != a3);
  }
  int64_t v31 = v26 - (char *)result;
LABEL_27:
  *double v12 = (_OWORD *)((char *)result + v31);
  return result;
}

void OZChannelScale3D::getValue(OZChannelScale3D *this, const CMTime *a2, double *a3, double *a4, double *a5, double a6)
{
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 136), a2, a6);
    *(void *)a3 = v12;
  }
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 288), a2, a6);
    *(void *)a4 = v13;
  }
  if (a5)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 440), a2, a6);
    *(void *)a5 = v14;
  }
}

void OZCurrentThread::OZCurrentThread(OZCurrentThread *this)
{
  PCSingleton::PCSingleton(this, 0);
  void *v1 = &unk_1F10AD5B0;
  operator new();
}

void sub_1B7615684(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x1BA9BFBA0](v3, 0x20C4093837F09);
  PCSingleton::~PCSingleton(v1);
  _Unwind_Resume(a1);
}

void OZCurrentThread::~OZCurrentThread(OZCurrentThread *this, const PCString *a2)
{
  OZCurrentThread::~OZCurrentThread(this, a2);

  JUMPOUT(0x1BA9BFBA0);
}

{
  OZChannelBase *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F10AD5B0;
  uint64_t v3 = (OZChannelBase *)*((void *)this + 1);
  if (v3)
  {
    unint64_t v4 = OZChannelBase::setRangeName(v3, a2);
    MEMORY[0x1BA9BFBA0](v4, 0x20C4093837F09);
  }
  *((void *)this + 1) = 0;

  PCSingleton::~PCSingleton(this);
}

uint64_t std::vector<TXGlyphRender>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TXGlyphRender>,std::reverse_iterator<TXGlyphRender*>,std::reverse_iterator<TXGlyphRender*>,std::reverse_iterator<TXGlyphRender*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TXGlyphRender>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(152 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TXGlyphRender>,std::reverse_iterator<TXGlyphRender*>,std::reverse_iterator<TXGlyphRender*>,std::reverse_iterator<TXGlyphRender*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v21 = a6;
  *((void *)&v21 + 1) = a7;
  long long v20 = v21;
  v18[0] = a1;
  v18[1] = &v20;
  uint64_t v18[2] = &v21;
  if (a3 == a5)
  {
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      *(_DWORD *)(a7 + v7 - 152) = *(_DWORD *)(a3 + v7 - 152);
      uint64_t v9 = a7 + v7 - 152;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a3 + v7 - 144);
      *(void *)(v8 - 144) = 0;
      *(void *)(v8 - 136) = 0;
      long long v10 = *(_OWORD *)(a3 + v7 - 96);
      long long v11 = *(_OWORD *)(a3 + v7 - 80);
      long long v12 = *(_OWORD *)(a3 + v7 - 112);
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(a3 + v7 - 128);
      long long v13 = *(_OWORD *)(a3 + v7 - 32);
      long long v14 = *(_OWORD *)(a3 + v7 - 16);
      long long v15 = *(_OWORD *)(a3 + v7 - 48);
      *(_OWORD *)(v9 + 88) = *(_OWORD *)(a3 + v7 - 64);
      *(_OWORD *)(v9 + 136) = v14;
      *(_OWORD *)(v9 + 120) = v13;
      *(_OWORD *)(v9 + 104) = v15;
      *(_OWORD *)(v9 + 72) = v11;
      *(_OWORD *)(v9 + 56) = v10;
      *(_OWORD *)(v9 + 40) = v12;
      *((void *)&v21 + 1) = v9;
      v7 -= 152;
    }
    while (a3 + v7 != a5);
    uint64_t v16 = v21;
  }
  char v19 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TXGlyphRender>,std::reverse_iterator<TXGlyphRender*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v18);
  return v16;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TXGlyphRender>,std::reverse_iterator<TXGlyphRender*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<TXGlyphRender>,std::reverse_iterator<TXGlyphRender*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<TXGlyphRender>,std::reverse_iterator<TXGlyphRender*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 152;
  }
}

void **std::__split_buffer<TXGlyphRender>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<TXGlyphRender>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 152;
    unint64_t v4 = *(std::__shared_weak_count **)(v1 - 136);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 152;
    }
  }
}

void LiImageFilter::LiImageFilter(LiImageFilter *this, uint64_t *a2)
{
  LiImageSource::LiImageSource((LiImageSource *)this, a2 + 1);
  uint64_t v4 = *a2;
  uint64_t *v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[5];
  *((void *)this + 2) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 3);
  *((_DWORD *)this + 8) = 0;
}

void sub_1B7615ADC(_Unwind_Exception *a1)
{
  OZChannelBase::setRangeName(v1, v2);
  _Unwind_Resume(a1);
}

void LiImageFilter::~LiImageFilter(PCSharedCount *this, const PCString *a2)
{
  int64_t var0 = a2->var0;
  this->int64_t var0 = (PC_Sp_counted_base *)a2->var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[5].var0;
  PCSharedCount::~PCSharedCount(this + 3);

  OZChannelBase::setRangeName((OZChannelBase *)this, a2 + 1);
}

void PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(uint64_t a1, int a2, int a3)
{
  if (a3 <= a2) {
    int v3 = a2;
  }
  else {
    int v3 = a3;
  }
  if (a2 < 0)
  {
    exceptiouint64_t n = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v21, "PCArray::resize");
    PCException::PCException(exception, &v21);
    *(void *)exceptiouint64_t n = &unk_1F1199218;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    uint64_t v6 = *(int *)(a1 + 12);
    if (a2 >= (int)v6)
    {
      if (a2 > (int)v6)
      {
        uint64_t v9 = 16 * v6;
        int v10 = a2 - v6;
        do
        {
          uint64_t v11 = *(void *)(a1 + 16);
          *(void *)(v11 + v9) = 0;
          PCSharedCount::PCSharedCount((PCSharedCount *)(v11 + v9 + 8));
          v9 += 16;
          --v10;
        }
        while (v10);
      }
    }
    else
    {
      uint64_t v7 = a2;
      uint64_t v8 = (16 * a2) | 8;
      do
      {
        PCSharedCount::~PCSharedCount((PCSharedCount *)(*(void *)(a1 + 16) + v8));
        ++v7;
        v8 += 16;
      }
      while (v7 < *(int *)(a1 + 12));
    }
  }
  else
  {
    if (v3) {
      operator new[]();
    }
    int v12 = *(_DWORD *)(a1 + 12);
    if (a2 >= v12) {
      int v13 = *(_DWORD *)(a1 + 12);
    }
    else {
      int v13 = a2;
    }
    if (v13 < 1)
    {
      int v13 = 0;
    }
    else
    {
      long long v14 = 0;
      do
      {
        long long v15 = (PCSharedCount *)((char *)v14 + *(void *)(a1 + 16));
        v14->int64_t var0 = v15->var0;
        PCSharedCount::PCSharedCount(v14 + 1, v15 + 1);
        PCSharedCount::~PCSharedCount((PCSharedCount *)((char *)v14 + *(void *)(a1 + 16) + 8));
        v14 += 2;
      }
      while ((PCSharedCount *)(16 * v13) != v14);
      int v12 = *(_DWORD *)(a1 + 12);
    }
    if (v13 < v12)
    {
      uint64_t v16 = (16 * v13) | 8;
      do
      {
        PCSharedCount::~PCSharedCount((PCSharedCount *)(*(void *)(a1 + 16) + v16));
        v16 += 16;
        ++v13;
      }
      while (*(_DWORD *)(a1 + 12) > v13);
    }
    if (v13 < a2)
    {
      long long v17 = (PCSharedCount *)(16 * v13 + 8);
      do
      {
        v17[-1].int64_t var0 = 0;
        PCSharedCount::PCSharedCount(v17);
        long long v17 = v18 + 2;
        ++v13;
      }
      while (v13 < a2);
    }
    uint64_t v19 = *(void *)(a1 + 16);
    if (v19) {
      MEMORY[0x1BA9BFB70](v19, 0x1000C8077774924);
    }
    *(void *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B7615DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZRenderGraphState::OZRenderGraphState(OZRenderGraphState *this, const OZRenderGraphState *a2)
{
  long long v4 = *(_OWORD *)a2;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v6 = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 3) = v6;
  *(_OWORD *)this = v4;
  *((_OWORD *)this + 1) = v5;
  std::list<OZEffect *>::list((void *)this + 8, (uint64_t)a2 + 64);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  long long v7 = *(_OWORD *)((char *)a2 + 104);
  long long v8 = *(_OWORD *)((char *)a2 + 120);
  long long v9 = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 152);
  *(_OWORD *)((char *)this + 136) = v9;
  *(_OWORD *)((char *)this + 120) = v8;
  *(_OWORD *)((char *)this + 104) = v7;
  long long v10 = *(_OWORD *)((char *)a2 + 168);
  long long v11 = *(_OWORD *)((char *)a2 + 184);
  uint64_t v12 = *((void *)a2 + 27);
  *(_OWORD *)((char *)this + 200) = *(_OWORD *)((char *)a2 + 200);
  *(_OWORD *)((char *)this + 184) = v11;
  *(_OWORD *)((char *)this + 168) = v10;
  *((void *)this + 27) = v12;
  *((void *)this + 28) = &unk_1F10AD5F8;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  int v13 = *((_DWORD *)a2 + 59);
  if (v13 <= 0) {
    int v14 = 0;
  }
  else {
    int v14 = (2 * v13) | 1;
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize((uint64_t)this + 224, v13, v14);
  if (*((int *)a2 + 59) >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    do
    {
      LiLight::operator=(*((void *)this + 30) + v15, *((void *)a2 + 30) + v15);
      ++v16;
      v15 += 944;
    }
    while (v16 < *((int *)a2 + 59));
  }
  *((unsigned char *)this + 248) = *((unsigned char *)a2 + 248);
  long long v17 = *((_OWORD *)a2 + 16);
  long long v18 = *((_OWORD *)a2 + 18);
  *((_OWORD *)this + 17) = *((_OWORD *)a2 + 17);
  *((_OWORD *)this + 18) = v18;
  *((_OWORD *)this + 16) = v17;
}

void sub_1B7615F5C(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F10AD5F8;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F10AD5F8;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;

  JUMPOUT(0x1BA9BFBA0);
}

void PCArray<LiLight,PCArray_Traits<LiLight>>::resize(uint64_t a1, int a2, int a3)
{
  if (a3 <= a2) {
    int v3 = a2;
  }
  else {
    int v3 = a3;
  }
  if (a2 < 0)
  {
    exceptiouint64_t n = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v19, "PCArray::resize");
    PCException::PCException(exception, &v19);
    *(void *)exceptiouint64_t n = &unk_1F1199218;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    int v6 = *(_DWORD *)(a1 + 12);
    if (a2 >= v6)
    {
      if (a2 > v6)
      {
        uint64_t v9 = 944 * v6;
        int v10 = a2 - v6;
        do
        {
          LiLight::LiLight((LiLight *)(*(void *)(a1 + 16) + v9));
          v9 += 944;
          --v10;
        }
        while (v10);
      }
    }
    else
    {
      uint64_t v7 = a2;
      uint64_t v8 = 944 * a2;
      do
      {
        LiLight::~LiLight((PCSharedCount *)(*(void *)(a1 + 16) + v8));
        ++v7;
        v8 += 944;
      }
      while (v7 < *(int *)(a1 + 12));
    }
  }
  else
  {
    if (v3) {
      operator new[]();
    }
    int v11 = *(_DWORD *)(a1 + 12);
    if (a2 >= v11) {
      int v12 = *(_DWORD *)(a1 + 12);
    }
    else {
      int v12 = a2;
    }
    if (v12 < 1)
    {
      int v12 = 0;
    }
    else
    {
      int v13 = 0;
      do
      {
        LiLight::LiLight(v13, (LiLight *)((char *)v13 + *(void *)(a1 + 16)));
        LiLight::~LiLight((PCSharedCount *)((char *)v13 + *(void *)(a1 + 16)));
        int v13 = (LiLight *)((char *)v13 + 944);
      }
      while ((LiLight *)(944 * v12) != v13);
      int v11 = *(_DWORD *)(a1 + 12);
    }
    if (v12 < v11)
    {
      uint64_t v14 = 944 * v12;
      do
      {
        LiLight::~LiLight((PCSharedCount *)(*(void *)(a1 + 16) + v14));
        v14 += 944;
        ++v12;
      }
      while (*(_DWORD *)(a1 + 12) > v12);
    }
    if (v12 < a2)
    {
      uint64_t v15 = (LiLight *)(944 * v12);
      do
      {
        LiLight::LiLight(v15);
        uint64_t v15 = (LiLight *)(v16 + 944);
        ++v12;
      }
      while (v12 < a2);
    }
    uint64_t v17 = *(void *)(a1 + 16);
    if (v17) {
      MEMORY[0x1BA9BFB70](v17, 0x1000C8077774924);
    }
    *(void *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B76162C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void LiString::dec(LiString *this)
{
  if (*(void *)this && atomic_fetch_add((atomic_uint *volatile)(*(void *)this - 12), 0xFFFFFFFF) == 1)
  {
    **(unsigned char **)this = 0;
    if (*(void *)this) {
      int v2 = (void *)(*(void *)this - 12);
    }
    else {
      int v2 = 0;
    }
    free(v2);
    *(void *)this = 0;
  }
}

void LiString::LiString(LiString *this, const char *a2)
{
  if (a2 && *a2)
  {
    uint64_t v4 = 0;
    while (a2[++v4])
      ;
    int v6 = (unsigned int *)malloc_type_malloc(v4 + 13, 0x8903763CuLL);
    v6[2] = v4 + 1;
    atomic_store(1u, v6);
    *(void *)this = v6 + 3;
    v6[1] = v4;
    memcpy(v6 + 3, a2, v4 + 1);
  }
  else
  {
    *(void *)this = 0;
  }
}

PCSharedCount *PCPtr<LiImageSource>::PCPtr<OZGradientSource>(PCSharedCount *a1, const PCSharedCount *a2)
{
  a1->int64_t var0 = a2->var0;
  uint64_t v4 = (uint64_t *)&a1[1];
  PCSharedCount::PCSharedCount(a1 + 1);
  if (a1->var0)
  {
    PCSharedCount::PCSharedCount(&v6, a2 + 1);
    PCSharedCount::operator=(v4, (uint64_t *)&v6);
    PCSharedCount::~PCSharedCount(&v6);
  }
  return a1;
}

void sub_1B7616458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  PCSharedCount::~PCSharedCount(v10);
  _Unwind_Resume(a1);
}

void LiClipSet::~LiClipSet(LiClipSet *this)
{
  *((void *)this + 3) = &unk_1F10AD630;
  int v2 = *((_DWORD *)this + 8);
  if (v2 < 0) {
    int v3 = 1;
  }
  else {
    int v3 = v2 & ~(v2 >> 31);
  }
  if (v3 == v2)
  {
    uint64_t v4 = *((int *)this + 9);
    uint64_t v5 = *((void *)this + 5);
    if ((v4 & 0x80000000) != 0) {
      bzero((void *)(v5 + 4 * v4), 4 * ~v4 + 4);
    }
  }
  else
  {
    if (v3) {
      operator new[]();
    }
    uint64_t v5 = 0;
    uint64_t v6 = *((void *)this + 5);
    if (v6) {
      MEMORY[0x1BA9BFB70](v6, 0x1000C8077774924);
    }
    *((void *)this + 5) = 0;
  }
  *((_DWORD *)this + 8) = v3;
  *((_DWORD *)this + 9) = 0;
  if (v5) {
    MEMORY[0x1BA9BFB70](v5, 0x1000C8077774924);
  }
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 8) = 0;
  *(void *)this = &unk_1F10AD668;
  if (*((int *)this + 2) < 0) {
    int v7 = 1;
  }
  else {
    int v7 = *((_DWORD *)this + 2);
  }
  PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::resize((uint64_t)this, 0, v7);
  uint64_t v8 = *((void *)this + 2);
  if (v8) {
    MEMORY[0x1BA9BFB70](v8, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 2) = 0;
}

uint64_t PCArray<int,PCArray_Traits<int>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F10AD630;
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0) {
    int v3 = 1;
  }
  else {
    int v3 = v2 & ~(v2 >> 31);
  }
  if (v3 == v2)
  {
    uint64_t v4 = *(int *)(a1 + 12);
    uint64_t v5 = *(void *)(a1 + 16);
    if ((v4 & 0x80000000) != 0) {
      bzero((void *)(v5 + 4 * v4), 4 * ~v4 + 4);
    }
  }
  else
  {
    if (v3) {
      operator new[]();
    }
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6) {
      MEMORY[0x1BA9BFB70](v6, 0x1000C8077774924);
    }
    *(void *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  if (v5) {
    MEMORY[0x1BA9BFB70](v5, 0x1000C8077774924);
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F10AD668;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<int,PCArray_Traits<int>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F10AD630;
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0) {
    int v3 = 1;
  }
  else {
    int v3 = v2 & ~(v2 >> 31);
  }
  if (v3 == v2)
  {
    uint64_t v4 = *(int *)(a1 + 12);
    uint64_t v5 = *(void *)(a1 + 16);
    if ((v4 & 0x80000000) != 0) {
      bzero((void *)(v5 + 4 * v4), 4 * ~v4 + 4);
    }
  }
  else
  {
    if (v3) {
      operator new[]();
    }
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6) {
      MEMORY[0x1BA9BFB70](v6, 0x1000C8077774924);
    }
    *(void *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  if (v5) {
    MEMORY[0x1BA9BFB70](v5, 0x1000C8077774924);
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;

  JUMPOUT(0x1BA9BFBA0);
}

void PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F10AD668;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::resize(uint64_t result, int a2, int a3)
{
  if (a3 <= a2) {
    int v3 = a2;
  }
  else {
    int v3 = a3;
  }
  if (a2 < 0)
  {
    exceptiouint64_t n = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v17, "PCArray::resize");
    PCException::PCException(exception, &v17);
    *(void *)exceptiouint64_t n = &unk_1F1199218;
  }
  uint64_t v5 = result;
  if (v3 == *(_DWORD *)(result + 8))
  {
    uint64_t v6 = *(int *)(result + 12);
    if ((int)v6 < a2)
    {
      uint64_t v7 = 32 * v6;
      uint64_t v8 = a2 - v6;
      do
      {
        uint64_t v9 = (_OWORD *)(*(void *)(result + 16) + v7);
        _OWORD *v9 = 0uLL;
        v9[1] = 0uLL;
        v7 += 32;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    if (v3) {
      operator new[]();
    }
    LODWORD(v10) = *(_DWORD *)(result + 12);
    if (a2 >= (int)v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = a2;
    }
    if ((int)v11 < 1)
    {
      LODWORD(v11) = 0;
    }
    else
    {
      int v12 = (long long *)(*(void *)(result + 16) + 16);
      uint64_t v13 = 16;
      uint64_t v14 = v11;
      do
      {
        *(_OWORD *)(v13 - 16) = *(v12 - 1);
        long long v15 = *v12;
        v12 += 2;
        *(_OWORD *)uint64_t v13 = v15;
        v13 += 32;
        --v14;
      }
      while (v14);
    }
    if ((int)v11 <= (int)v10) {
      uint64_t v10 = v10;
    }
    else {
      uint64_t v10 = v11;
    }
    if ((int)v10 < a2) {
      bzero((void *)(32 * v10), 32 * (~v10 + a2) + 32);
    }
    uint64_t result = *(void *)(v5 + 16);
    if (result) {
      uint64_t result = MEMORY[0x1BA9BFB70](result, 0x1000C8077774924);
    }
    *(void *)(v5 + 16) = 0;
  }
  *(_DWORD *)(v5 + 8) = v3;
  *(_DWORD *)(v5 + 12) = a2;
  return result;
}

void sub_1B7616AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void LiCachedGaussianBlur::~LiCachedGaussianBlur(PCSharedCount *this, const PCString *a2)
{
  int64_t var0 = a2->var0;
  this->int64_t var0 = (PC_Sp_counted_base *)a2->var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[9].var0;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[12]);
  uint64_t v5 = (std::__shared_weak_count *)this[11].var0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  LiGaussianBlur::~LiGaussianBlur(this, a2 + 1);
}

void LiGaussianBlur::~LiGaussianBlur(PCSharedCount *this, const PCString *a2)
{
  int64_t var0 = a2[1].var0;
  this->int64_t var0 = (PC_Sp_counted_base *)var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[6].var0;
  PCSharedCount::~PCSharedCount(this + 3);

  OZChannelBase::setRangeName((OZChannelBase *)this, a2 + 2);
}

void std::vector<LiPolygon::PosEdge>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = (a1[1] - *a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      a1[1] = *a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<LiPolygon::PosEdge>::__append(a1, a2 - v2);
  }
}

void std::vector<LiPolygon::PosEdge>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    __p = v13;
    long long v15 = &v13[32 * v10];
    PCString v17 = &v13[32 * v12];
    bzero(v15, 32 * a2);
    uint64_t v16 = &v15[32 * a2];
    std::vector<LiPolygon::PosEdge>::__swap_out_circular_buffer(a1, &__p);
    if (v16 != v15) {
      v16 += (v15 - v16 + 31) & 0xFFFFFFFFFFFFFFE0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1B7616DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<LiPolygon::PosEdge>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

double *PCMatrix44Tmpl<double>::transform_row<double>(double *a1, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = a2[1];
  double v5 = a2[2];
  double v6 = a2[3];
  *a3 = *a2 * *a1 + v4 * a1[4] + v5 * a1[8] + v6 * a1[12];
  a3[1] = v3 * a1[1] + v4 * a1[5] + v5 * a1[9] + v6 * a1[13];
  a3[2] = v3 * a1[2] + v4 * a1[6] + v5 * a1[10] + v6 * a1[14];
  a3[3] = v3 * a1[3] + v4 * a1[7] + v5 * a1[11] + v6 * a1[15];
  return a3;
}

{
  double v3;
  double v4;
  double v5;
  double v6;

  double v3 = *a2;
  double v4 = a2[1];
  double v5 = a2[2];
  double v6 = a1[15] + *a2 * a1[3] + v4 * a1[7] + v5 * a1[11];
  *a3 = (a1[12] + *a2 * *a1 + v4 * a1[4] + v5 * a1[8]) / v6;
  a3[1] = (a1[13] + v3 * a1[1] + v4 * a1[5] + v5 * a1[9]) / v6;
  a3[2] = (a1[14] + v3 * a1[2] + v4 * a1[6] + v5 * a1[10]) / v6;
  return a3;
}

uint64_t std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::find<char const*>(uint64_t a1, const char **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  double v4 = *a2;
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = strcmp(*(const char **)(v3 + 32), v4);
    uint64_t v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      uint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || strcmp(v4, *(const char **)(v5 + 32)) < 0) {
    return v2;
  }
  return v5;
}

uint64_t PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F10AD6B0;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F10AD6B0;
  if (*(int *)(a1 + 8) < 0) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(a1, 0, v2);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8077774924);
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t *std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(uint64_t **a1, const char **a2, uint64_t a3, uint64_t **a4)
{
  int v6 = (uint64_t **)std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::__find_equal<char const*>((uint64_t)a1, &v10, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    v7[4] = **a4;
    v7[5] = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::__find_equal<char const*>(uint64_t a1, void *a2, const char **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    int v6 = *a3;
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        uint64_t v8 = *(const char **)(v4 + 32);
        if ((strcmp(v6, v8) & 0x80000000) == 0) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if ((strcmp(v8, v6) & 0x80000000) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v7;
  return v5;
}

void PCArray<unsigned long,PCArray_Traits<unsigned long>>::~PCArray(uint64_t a1)
{
  *(void *)a1 = &unk_1F10AD6E8;
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0) {
    int v3 = 1;
  }
  else {
    int v3 = v2 & ~(v2 >> 31);
  }
  if (v3 == v2)
  {
    uint64_t v4 = *(int *)(a1 + 12);
    uint64_t v5 = *(void *)(a1 + 16);
    if ((v4 & 0x80000000) != 0) {
      bzero((void *)(v5 + 8 * v4), 8 * ~v4 + 8);
    }
  }
  else
  {
    if (v3) {
      operator new[]();
    }
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6) {
      MEMORY[0x1BA9BFB70](v6, 0x1000C8077774924);
    }
    *(void *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  if (v5) {
    MEMORY[0x1BA9BFB70](v5, 0x1000C8077774924);
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZValueCache<OZBoundsCacheItem>::OZValueCache(uint64_t a1)
{
  *(void *)a1 = &unk_1F10AD720;
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = xmmword_1B7E782B0;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(a1 + 40));
  return a1;
}

void sub_1B76173E0(_Unwind_Exception *a1)
{
  std::__list_imp<OZBoundsCacheItem>::clear(v1);
  _Unwind_Resume(a1);
}

void OZValueCache<OZBoundsCacheItem>::~OZValueCache(uint64_t a1)
{
  OZValueCache<OZBoundsCacheItem>::~OZValueCache(a1);

  JUMPOUT(0x1BA9BFBA0);
}

void std::__list_imp<OZBoundsCacheItem>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    int v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        (*(void (**)(void))v3[2])();
        operator delete(v3);
        int v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t OZValueCache<OZProjectedBoundsCacheItem>::OZValueCache(uint64_t a1)
{
  *(void *)a1 = &unk_1F10AD750;
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = xmmword_1B7E782B0;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(a1 + 40));
  return a1;
}

void sub_1B761751C(_Unwind_Exception *a1)
{
  std::__list_imp<OZBoundsCacheItem>::clear(v1);
  _Unwind_Resume(a1);
}

void OZValueCache<OZProjectedBoundsCacheItem>::~OZValueCache(uint64_t a1)
{
  OZValueCache<OZProjectedBoundsCacheItem>::~OZValueCache(a1);

  JUMPOUT(0x1BA9BFBA0);
}

void std::vector<TXTabStop>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void (***)(void))**a1;
  if (v2)
  {
    uint64_t v4 = (void (***)(void))v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 69;
      uint64_t v7 = v4 - 69;
      do
      {
        (**v7)(v7);
        v6 -= 69;
        BOOL v8 = v7 == v2;
        v7 -= 69;
      }
      while (!v8);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::deque<PCHash128>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  int v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

void std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy(uint64_t a1, PCString *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy(a1, a2[1].var0);
    PCString::~PCString(a2 + 4);
    operator delete(a2);
  }
}

uint64_t OZValueCache<OZBoundsCacheItem>::~OZValueCache(uint64_t a1)
{
  *(void *)a1 = &unk_1F10AD720;
  OZValueCache<OZBoundsCacheItem>::flush(a1);
  PCSharedMutex::~PCSharedMutex((std::mutex *)(a1 + 40));
  std::__list_imp<OZBoundsCacheItem>::clear((uint64_t *)(a1 + 8));
  return a1;
}

uint64_t OZValueCache<OZProjectedBoundsCacheItem>::~OZValueCache(uint64_t a1)
{
  *(void *)a1 = &unk_1F10AD750;
  OZValueCache<OZBoundsCacheItem>::flush(a1);
  PCSharedMutex::~PCSharedMutex((std::mutex *)(a1 + 40));
  std::__list_imp<OZBoundsCacheItem>::clear((uint64_t *)(a1 + 8));
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      int v3 = (void *)*v2;
      unint64_t v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::destroy(uint64_t a1, PCString *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::destroy(a1, a2[1].var0);
    PCString::~PCString(a2 + 5);
    operator delete(a2);
  }
}

void std::vector<TXParagraphStyle *>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    long long v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    uint64_t v18 = (char *)*a1;
    PCString v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      PCString v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

uint64_t *std::map<long,double>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<long,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long,double>,std::__tree_node<std::__value_type<long,double>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1B7617A10(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<long,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long,double>,std::__tree_node<std::__value_type<long,double>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_hint_unique_key_args<long,std::pair<long const,double> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_hint_unique_key_args<long,std::pair<long const,double> const&>(uint64_t **a1, void *a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__find_equal<long>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__find_equal<long>(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, uint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    uint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          PCString v17 = v16;
          uint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          unint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      PCString v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      unint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    long long v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          PCString v21 = v20;
          uint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          long long v20 = (void *)*v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        long long v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      PCString v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *std::vector<PCVector3<double>>::__assign_with_size[abi:ne180100]<PCVector3<double>*,PCVector3<double>*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (void *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) < a4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<PCVector3<double>>::__vallocate[abi:ne180100](a1, v12);
    BOOL v14 = (void *)a1[1];
    uint64_t v13 = (void **)(a1 + 1);
    uint64_t result = v14;
    uint64_t v15 = (char *)v14;
    if (v6 != a3)
    {
      uint64_t v15 = (char *)result;
      do
      {
        *(_OWORD *)uint64_t v15 = *v6;
        *((void *)v15 + 2) = *((void *)v6 + 2);
        v15 += 24;
        uint64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
LABEL_26:
    int64_t v24 = v15 - (char *)result;
    goto LABEL_27;
  }
  PCString v17 = (void *)a1[1];
  uint64_t v13 = (void **)(a1 + 1);
  uint64_t v16 = v17;
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v17 - result);
  if (v18 >= a4)
  {
    uint64_t v15 = (char *)result;
    if (a2 != a3)
    {
      long long v25 = result;
      do
      {
        long long v26 = *v6;
        v25[2] = *((void *)v6 + 2);
        *(_OWORD *)long long v25 = v26;
        v25 += 3;
        uint64_t v6 = (long long *)((char *)v6 + 24);
        v15 += 24;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  uint64_t v19 = (uint64_t)a2 + 24 * v18;
  if (v16 != result)
  {
    uint64_t v20 = 24 * v18;
    do
    {
      long long v21 = *v6;
      result[2] = *((void *)v6 + 2);
      *(_OWORD *)uint64_t result = v21;
      result += 3;
      uint64_t v6 = (long long *)((char *)v6 + 24);
      v20 -= 24;
    }
    while (v20);
    uint64_t result = *v13;
  }
  uint64_t v22 = (char *)result;
  if ((long long *)v19 != a3)
  {
    uint64_t v22 = (char *)result;
    long long v23 = result;
    do
    {
      *(_OWORD *)long long v23 = *(_OWORD *)v19;
      v23[2] = *(void *)(v19 + 16);
      v22 += 24;
      v19 += 24;
      v23 += 3;
    }
    while ((long long *)v19 != a3);
  }
  int64_t v24 = v22 - (char *)result;
LABEL_27:
  *uint64_t v13 = (void *)((char *)result + v24);
  return result;
}

char *std::vector<PCVector3<double>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t *PCCache<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::~PCCache(uint64_t *a1)
{
  uint64_t v2 = *a1 + 32;
  std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::destroy(*a1 + 24, *(void **)v2);
  *(void *)(v2 - 8) = v2;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(void *)(v2 + 24) = *(void *)(v2 + 16);
  *(void *)(v2 + 48) = 0;
  std::unique_ptr<PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

void std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::destroy(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[9];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

uint64_t std::unique_ptr<PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::~PCCacheImpl(result);
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

uint64_t PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::~PCCacheImpl(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  int v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t **std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<long,double>,std::__tree_node<std::__value_type<long,double>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  unint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    BOOL v14 = result;
    uint64_t v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      uint64_t v15 = std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        BOOL v9 = a2;
        do
        {
          v8[4] = v9[4];
          v8[5] = v9[5];
          std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__node_insert_multi(v5, v8);
          uint64_t v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            uint64_t v15 = std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          unint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              unint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              BOOL v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          BOOL v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_multi<std::pair<long const,double> const&>(v5, (_OWORD *)a2 + 2);
      unint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B76181F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  int v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        int v3 = (uint64_t **)v4;
        if (a2[4] >= v4[4]) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        unint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    unint64_t v5 = v3 + 1;
  }
  else
  {
    unint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

_OWORD *std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_multi<std::pair<long const,double> const&>(uint64_t **a1, _OWORD *a2)
{
  uint64_t v4 = operator new(0x30uLL);
  unint64_t v5 = v4;
  v4[2] = *a2;
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (*((void *)v4 + 4) >= v7[4]) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        uint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    uint64_t v8 = v6 + 1;
  }
  else
  {
    uint64_t v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v5;
}

void std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,decltype(nullptr),void>(const TXTextStyle *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xC340uLL);
  std::__shared_ptr_emplace<TXTextStyle>::__shared_ptr_emplace[abi:ne180100]<TXTextStyle&,decltype(nullptr),std::allocator<TXTextStyle>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a2, v4 + 10, (uint64_t)(v4 + 3));
}

void sub_1B761837C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<TXTextStyle>::__shared_ptr_emplace[abi:ne180100]<TXTextStyle&,decltype(nullptr),std::allocator<TXTextStyle>,0>(void *a1, const TXTextStyle *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10A9498;
  TXTextStyle::TXTextStyle((TXTextStyle *)(a1 + 3), a2, 0, 0);
  return a1;
}

void sub_1B76183E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle const&,void>(OZSceneNode **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xC340uLL);
  std::__shared_ptr_emplace<TXTextStyle>::__shared_ptr_emplace[abi:ne180100]<TXTextStyle&,std::allocator<TXTextStyle>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a2, v4 + 10, (uint64_t)(v4 + 3));
}

void sub_1B7618454(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::list<std::shared_ptr<TXTextStyle>>::splice(uint64_t result, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  if (a4 != a5)
  {
    unint64_t v5 = (void *)*a5;
    if (result != a3)
    {
      uint64_t v6 = 1;
      if (v5 != a4)
      {
        uint64_t v7 = a4;
        do
        {
          uint64_t v7 = (void *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(void *)(a3 + 16) -= v6;
      *(void *)(result + 16) += v6;
    }
    uint64_t v8 = *a4;
    *(void *)(v8 + 8) = v5[1];
    *(void *)v5[1] = v8;
    uint64_t v9 = *a2;
    *(void *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__erase_unique<long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    uint64_t v5 = v2[4];
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        uint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    BOOL v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_hint_unique_key_args<long,std::pair<long,double>>(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v6 = (uint64_t **)std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__find_equal<long>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    v7[4] = *a4;
    v7[5] = a4[1];
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void std::list<OZProjectedBoundsCacheItem>::remove_if<OZ_VC_SameKey<OZProjectedBoundsCacheItem>>(uint64_t a1, double a2)
{
  v8[0] = (uint64_t)v8;
  v8[1] = (uint64_t)v8;
  v8[2] = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != a1)
  {
    do
    {
      uint64_t v5 = *(void *)(v2 + 8);
      if (*(double *)(v2 + 24) == a2)
      {
        if (v5 == a1)
        {
          BOOL v7 = 1;
LABEL_8:
          uint64_t v5 = a1;
        }
        else
        {
          while (1)
          {
            double v6 = *(double *)(v5 + 24);
            BOOL v7 = v6 == a2;
            if (v6 != a2) {
              break;
            }
            uint64_t v5 = *(void *)(v5 + 8);
            if (v5 == a1) {
              goto LABEL_8;
            }
          }
        }
        std::list<std::shared_ptr<TXTextStyle>>::splice((uint64_t)v8, v8, a1, (void *)v2, (void *)v5);
        if (!v7) {
          uint64_t v5 = *(void *)(v5 + 8);
        }
      }
      uint64_t v2 = v5;
    }
    while (v5 != a1);
  }
  std::__list_imp<OZBoundsCacheItem>::clear(v8);
}

void sub_1B7618770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<OZBoundsCacheItem>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::list<OZProjectedBoundsCacheItem>::pop_front(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v3 = *v2;
  *(void *)(v3 + 8) = v2[1];
  *(void *)v2[1] = v3;
  *(void *)(a1 + 16) = v1 - 1;
  (*(void (**)(void))v2[2])();

  operator delete(v2);
}

void PCArray<unsigned long,PCArray_Traits<unsigned long>>::resize(uint64_t a1, int a2, int a3)
{
  if (a3 <= a2) {
    int v3 = a2;
  }
  else {
    int v3 = a3;
  }
  if (a2 < 0)
  {
    exceptiouint64_t n = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v15, "PCArray::resize");
    PCException::PCException(exception, &v15);
    *(void *)exceptiouint64_t n = &unk_1F1199218;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    uint64_t v6 = *(int *)(a1 + 12);
    if ((int)v6 < a2) {
      bzero((void *)(*(void *)(a1 + 16) + 8 * v6), 8 * (~v6 + a2) + 8);
    }
  }
  else
  {
    if (v3) {
      operator new[]();
    }
    int v7 = *(_DWORD *)(a1 + 12);
    if (a2 >= v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = a2;
    }
    if ((int)v8 < 1)
    {
      LODWORD(v8) = 0;
    }
    else
    {
      uint64_t v9 = *(uint64_t **)(a1 + 16);
      uint64_t v10 = v8;
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = *v9++;
        *v11++ = v12;
        --v10;
      }
      while (v10);
    }
    if ((int)v8 > v7) {
      int v7 = v8;
    }
    if (v7 < a2) {
      bzero((void *)(8 * v7), 8 * (~v7 + a2) + 8);
    }
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13) {
      MEMORY[0x1BA9BFB70](v13, 0x1000C8077774924);
    }
    *(void *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B7618998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t **std::__tree<std::__value_type<int,PCRect<double>>,std::__map_value_compare<int,std::__value_type<int,PCRect<double>>,std::less<int>,true>,std::allocator<std::__value_type<int,PCRect<double>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (char *)operator new(0x48uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v11 + 56) = _Q0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

const void **PCCFRef<__CTLine const*>::~PCCFRef(const void **a1)
{
  int8x8_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t std::vector<std::vector<unsigned long>>::__push_back_slow_path<std::vector<unsigned long> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  PCString v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  PCString v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B7618C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<unsigned long>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<unsigned long>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void *std::allocate_shared[abi:ne180100]<TXTextObject,std::allocator<TXTextObject>,TXTextLayout *,unsigned int,void>@<X0>(TXTextLayout **a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x328uLL);
  uint64_t result = std::__shared_ptr_emplace<TXTextObject>::__shared_ptr_emplace[abi:ne180100]<TXTextLayout *,unsigned int,std::allocator<TXTextObject>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B7618F18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<TXTextObject>::__shared_ptr_emplace[abi:ne180100]<TXTextLayout *,unsigned int,std::allocator<TXTextObject>,0>(void *a1, TXTextLayout **a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10AD780;
  TXTextObject::TXTextObject((TXTextObject *)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_1B7618F7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<TXTextObject>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F10AD780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TXTextObject>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F10AD780;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t std::__shared_ptr_emplace<TXTextObject>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::vector<std::shared_ptr<TXTextObject>>::__move_range(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  long long v8 = (_OWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    long long v8 = *(_OWORD **)(a1 + 8);
    do
    {
      *v8++ = *(_OWORD *)v9;
      void *v9 = 0;
      v9[1] = 0;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<TXTextObject> *,std::shared_ptr<TXTextObject> *,std::shared_ptr<TXTextObject> *>((uint64_t)&v11, a2, v7, v6);
}

uint64_t std::vector<std::shared_ptr<TXTextObject>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<TXTextObject>>,std::reverse_iterator<std::shared_ptr<TXTextObject>*>,std::reverse_iterator<std::shared_ptr<TXTextObject>*>,std::reverse_iterator<std::shared_ptr<TXTextObject>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<TXTextObject>>,std::shared_ptr<TXTextObject>*,std::shared_ptr<TXTextObject>*,std::shared_ptr<TXTextObject>*>(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<TXTextObject> *,std::shared_ptr<TXTextObject> *,std::shared_ptr<TXTextObject> *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      long long v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      void *v7 = 0;
      v7[1] = 0;
      uint64_t v9 = *(std::__shared_weak_count **)(a4 - 8);
      *(_OWORD *)(a4 - 16) = v8;
      a4 -= 16;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    while (v7 != a2);
  }
  return a3;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<TXTextObject> *,std::shared_ptr<TXTextObject> *,std::shared_ptr<TXTextObject> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      long long v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<TXTextObject>>,std::reverse_iterator<std::shared_ptr<TXTextObject>*>,std::reverse_iterator<std::shared_ptr<TXTextObject>*>,std::reverse_iterator<std::shared_ptr<TXTextObject>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    long long v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TXTextObject>>,std::reverse_iterator<std::shared_ptr<TXTextObject>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

_OWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<TXTextObject>>,std::shared_ptr<TXTextObject>*,std::shared_ptr<TXTextObject>*,std::shared_ptr<TXTextObject>*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v4 = a4;
  long long v9 = a4;
  long long v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    long long v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TXTextObject>>,std::shared_ptr<TXTextObject>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TXTextObject>>,std::reverse_iterator<std::shared_ptr<TXTextObject>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TXTextObject>>,std::reverse_iterator<std::shared_ptr<TXTextObject>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TXTextObject>>,std::reverse_iterator<std::shared_ptr<TXTextObject>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<TXTextObject>>,std::shared_ptr<TXTextObject>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>,std::shared_ptr<HGGPUComputeDevice const>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void **std::__split_buffer<std::shared_ptr<TXTextObject>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<TXTextObject>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    unint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  char v13 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x28uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  void v11[3] = 0;
  v11[4] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  long long v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *v11 = *v21;
LABEL_38:
    void *v21 = v11;
    goto LABEL_39;
  }
  void *v11 = *v13;
  *char v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    long long v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B7619690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::shared_ptr<OZCoreTextTypeface>::shared_ptr[abi:ne180100]<TXCoreTextTypeface,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7619770(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<OZFontFace>::shared_ptr[abi:ne180100]<TXCoreTextTypeface,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<TXCoreTextTypeface *,std::shared_ptr<OZCoreTextTypeface>::__shared_ptr_default_delete<OZCoreTextTypeface,TXCoreTextTypeface>,std::allocator<TXCoreTextTypeface>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<TXCoreTextTypeface *,std::shared_ptr<OZCoreTextTypeface>::__shared_ptr_default_delete<OZCoreTextTypeface,TXCoreTextTypeface>,std::allocator<TXCoreTextTypeface>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t **std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint8x8_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint8x8_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((unsigned char *)v11 + 32) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

char *std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    char v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v9, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    long long v28 = &v18[8 * v15];
    __p = v18;
    long long v34 = v28;
    int32x4_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    long long v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)long long v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    long long v35 = v30;
    uint64_t v5 = std::vector<OZChannelBase *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    long long v21 = &__src[8 * a5];
    long long v23 = *(char **)(v9 - 8);
LABEL_17:
    int64_t v24 = &v5[8 * a5];
    long long v25 = &v23[-8 * a5];
    long long v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      long long v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)long long v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  long long v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  long long v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1B7619A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<int,TXDirectionalRun>,std::__map_value_compare<int,std::__value_type<int,TXDirectionalRun>,std::less<int>,true>,std::allocator<std::__value_type<int,TXDirectionalRun>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    unsigned char v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::__erase_unique<unsigned int>(void *a1, unsigned int *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::find<unsigned int>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  void *v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t *)v5;
        unsigned int v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    unint64_t v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,TXComposedCharacter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,TXComposedCharacter>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

void std::__tree<std::__value_type<unsigned int,TXComposedCharacter>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,TXComposedCharacter>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,TXComposedCharacter>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = **a2;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)v6 + 5);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B7619E84(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,TXComposedCharacter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,TXComposedCharacter>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,TXComposedCharacter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,TXComposedCharacter>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(PCString **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      PCString::~PCString(v2 + 5);
    }
    operator delete(v2);
  }
}

uint64_t std::vector<PCVector3<double>>::__push_back_slow_path<PCVector3<double> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  unint64_t v11 = &v10[24 * v4];
  __p = v10;
  uint64_t v16 = v11;
  unint64_t v18 = &v10[24 * v12];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  unint64_t v17 = v11 + 24;
  std::vector<PCVector3<double>>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    unint64_t v17 = &v16[(v17 - v16 - 24) % 0x18uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_1B761A014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<PCVector3<double>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *(_OWORD *)(v2 - 24);
    v2 -= 24;
    *(_OWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *(void *)(v4 + 16) = *(void *)(v2 + 16);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t *std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  long long v5 = (uint64_t **)std::__tree<OZSnap>::__find_equal<OZSnap>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<OZSnap>::__construct_node<OZSnap>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void *std::__tree<OZSnap>::__find_equal<OZSnap>(uint64_t a1, void *a2, uint64_t a3)
{
  long long v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = (uint64_t)v4 + 28;
        if (!OZSnap::operator<(a3, (uint64_t)v4 + 28)) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        long long v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!OZSnap::operator<(v8, a3)) {
        break;
      }
      long long v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<OZSnap>::__construct_node<OZSnap>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  OZSnap::OZSnap((uint64_t)v6 + 28, a2);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B761A22C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<PCWorkingColor,std::allocator<PCWorkingColor>,PCWorkingColor const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<PCWorkingColor>::__shared_ptr_emplace[abi:ne180100]<PCWorkingColor const&,std::allocator<PCWorkingColor>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1B761A28C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<PCWorkingColor>::__shared_ptr_emplace[abi:ne180100]<PCWorkingColor const&,std::allocator<PCWorkingColor>,0>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F10AD838;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  uint64_t v4 = *(CGColorSpace **)(a2 + 16);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    PCCFRefTraits<CGColorSpace *>::retain(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v5;
  return a1;
}

void sub_1B761A310(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCWorkingColor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F10AD838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCWorkingColor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F10AD838;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1BA9BFBA0);
}

CGColorSpace **std::__shared_ptr_emplace<PCWorkingColor>::__on_zero_shared(uint64_t a1)
{
  return PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(a1 + 40));
}

void PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::addValue(uint64_t a1, long long *a2, uint64_t *a3, unint64_t a4)
{
  if (*(void *)(a1 + 88) >= a4 || *(void *)(a1 + 104))
  {
    uint64_t v8 = std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::find<ColorConversionKey>(a1 + 24, (uint64_t)a2);
    long long v35 = v8;
    if ((void *)(a1 + 32) == v8)
    {
      uint64_t v19 = *(void *)(a1 + 72) + 1;
      *(void *)(a1 + 72) = v19;
      uint64_t v20 = *a3;
      long long v21 = (std::__shared_weak_count *)a3[1];
      if (v21)
      {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        long long v22 = a2[1];
        long long v27 = *a2;
        long long v28 = v22;
        uint64_t v29 = v20;
        long long v30 = v21;
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        long long v23 = a2[1];
        long long v27 = *a2;
        long long v28 = v23;
        uint64_t v29 = v20;
        long long v30 = 0;
      }
      unint64_t v31 = a4;
      uint64_t v32 = v19;
      uint64_t v33 = 0;
      v34[0] = (uint64_t)std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::__emplace_unique_key_args<ColorConversionKey,std::pair<ColorConversionKey const,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>((uint64_t **)(a1 + 24), (uint64_t)&v27, (uint64_t)&v27);
      v34[1] = v24;
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::add((void **)(a1 + 48), v34);
      *(void *)(a1 + 80) += a4;
      if (!*(void *)(a1 + 104))
      {
        while (*(void *)(a1 + 80) > *(void *)(a1 + 88) || *(void *)(a1 + 40) > *(void *)(a1 + 96))
        {
          long long v26 = *(void **)(a1 + 48);
          if (v26 == *(void **)(a1 + 56)) {
            break;
          }
          *(void *)&long long v27 = *v26;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v27);
          long long v25 = (uint64_t *)v27;
          *(void *)(a1 + 80) -= *(void *)(v27 + 80);
          std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::erase((uint64_t **)(a1 + 24), v25);
        }
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
    }
    else
    {
      unint64_t v9 = v8;
      uint64_t v11 = *a3;
      uint64_t v10 = a3[1];
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = (std::__shared_weak_count *)v8[9];
      unsigned char v9[8] = v11;
      v9[9] = v10;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v13 = *(void *)(a1 + 72) + 1;
      *(void *)(a1 + 72) = v13;
      v9[11] = v13;
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), (uint64_t)&v35);
      unint64_t v14 = v35;
      unint64_t v15 = a4 - v35[10];
      if (v15)
      {
        unint64_t v16 = *(void *)(a1 + 80) + v15;
        *(void *)(a1 + 80) = v16;
        v14[10] = a4;
        if (!*(void *)(a1 + 104))
        {
          while (v16 > *(void *)(a1 + 88) || *(void *)(a1 + 40) > *(void *)(a1 + 96))
          {
            unint64_t v18 = *(void **)(a1 + 48);
            if (v18 == *(void **)(a1 + 56)) {
              break;
            }
            *(void *)&long long v27 = *v18;
            PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v27);
            unint64_t v17 = (uint64_t *)v27;
            *(void *)(a1 + 80) -= *(void *)(v27 + 80);
            std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::erase((uint64_t **)(a1 + 24), v17);
            unint64_t v16 = *(void *)(a1 + 80);
          }
        }
      }
    }
  }
}

void sub_1B761A5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::add(void **a1, uint64_t *a2)
{
  uint64_t v4 = (char *)*a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = ((char *)v5 - (unsigned char *)*a1) >> 3;
  uint64_t v7 = *a2;
  *(void *)(*a2 + 96) = v6;
  unint64_t v10 = (unint64_t)a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  if ((unint64_t)v5 >= v10)
  {
    if ((unint64_t)(v6 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v9 - (void)v4;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v6 + 1)) {
      uint64_t v13 = v6 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v14);
      uint64_t v7 = *a2;
    }
    else
    {
      unint64_t v15 = 0;
    }
    unint64_t v16 = &v15[8 * v6];
    unint64_t v17 = &v15[8 * v14];
    *(void *)unint64_t v16 = v7;
    uint64_t v11 = v16 + 8;
    uint64_t v19 = (char *)*a1;
    unint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v11;
    a1[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v5 = v7;
    uint64_t v11 = v5 + 1;
  }
  a1[1] = v11;
  unint64_t v21 = *(void *)(*a2 + 96);
  if (v21)
  {
    long long v22 = (char *)*a1;
    uint64_t v23 = *((void *)*a1 + v21);
    do
    {
      unint64_t v24 = v21 - 1;
      unint64_t v25 = (v21 - 1) >> 1;
      uint64_t v26 = *(void *)&v22[8 * v25];
      if (*(void *)(v26 + 88) <= *(void *)(v23 + 88)) {
        break;
      }
      *(void *)&v22[8 * v21] = v26;
      *(void *)&v22[8 * v25] = v23;
      long long v22 = (char *)*a1;
      *(void *)(*((void *)*a1 + v21) + 96) = v21;
      uint64_t v23 = *(void *)&v22[8 * v25];
      *(void *)(v23 + 96) = v25;
      unint64_t v21 = (v21 - 1) >> 1;
    }
    while (v24 > 1);
  }
}

void *std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::find<ColorConversionKey>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = ColorConversionKey::operator<((uint64_t)(v3 + 4), a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || ColorConversionKey::operator<(a2, (uint64_t)(v5 + 4))) {
    return v2;
  }
  return v5;
}

BOOL ColorConversionKey::operator<(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(float *)a1 < *(float *)a2;
  if (*(float *)a1 != *(float *)a2) {
    return v2;
  }
  float v3 = *(float *)(a1 + 4);
  float v4 = *(float *)(a2 + 4);
  BOOL v2 = v3 < v4;
  if (v3 != v4) {
    return v2;
  }
  float v5 = *(float *)(a1 + 8);
  float v6 = *(float *)(a2 + 8);
  BOOL v2 = v5 < v6;
  if (v5 != v6) {
    return v2;
  }
  int v8 = *(_DWORD *)(a1 + 12);
  int v9 = *(_DWORD *)(a2 + 12);
  BOOL v10 = v8 < v9;
  if (v8 != v9) {
    return v10;
  }
  int v11 = *(_DWORD *)(a1 + 16);
  int v12 = *(_DWORD *)(a2 + 16);
  BOOL v10 = v11 < v12;
  if (v11 != v12) {
    return v10;
  }
  int v13 = *(_DWORD *)(a1 + 20);
  int v14 = *(_DWORD *)(a2 + 20);
  BOOL v10 = v13 < v14;
  if (v13 != v14) {
    return v10;
  }
  return operator<((float *)(a1 + 24), a2 + 24);
}

uint64_t *std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::__emplace_unique_key_args<ColorConversionKey,std::pair<ColorConversionKey const,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  float v5 = (uint64_t **)std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::__find_equal<ColorConversionKey>((uint64_t)a1, &v12, a2);
  float v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    int v8 = (uint64_t *)operator new(0x68uLL);
    float v6 = v8;
    long long v9 = *(_OWORD *)(a3 + 16);
    *((_OWORD *)v8 + 2) = *(_OWORD *)a3;
    *((_OWORD *)v8 + 3) = v9;
    uint64_t v10 = *(void *)(a3 + 40);
    unsigned char v8[8] = *(void *)(a3 + 32);
    v8[9] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    *((_OWORD *)v8 + 5) = *(_OWORD *)(a3 + 48);
    v8[12] = *(void *)(a3 + 64);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v12, v7, v8);
  }
  return v6;
}

void *std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::__find_equal<ColorConversionKey>(uint64_t a1, void *a2, uint64_t a3)
{
  float v5 = (void *)(a1 + 8);
  float v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!ColorConversionKey::operator<(a3, (uint64_t)(v4 + 4))) {
          break;
        }
        float v4 = (void *)*v7;
        float v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!ColorConversionKey::operator<(v8, a3)) {
        break;
      }
      float v5 = v7 + 1;
      float v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(*(void *)a2 + 96);
  unint64_t v4 = ((a1[1] - *a1) >> 3) - 1;
  if (v3 == v4)
  {
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v3);
  }
  else
  {
    *(void *)(*a1 + 8 * v3) = *(void *)(*a1 + 8 * v4);
    *(void *)(*(void *)(*a1 + 8 * v3) + 96) = v3;
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v4);
    uint64_t v5 = *a1 + 8 * v3;
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::bubble(a1, v5);
  }
}

void std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::__append((void **)a1, a2 - v2);
  }
}

uint64_t *PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::bubble(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1] - *result;
  unint64_t v4 = *(void *)(*(void *)a2 + 96);
  unint64_t v5 = (2 * v4) | 1;
  if (v5 >= v3 >> 3)
  {
LABEL_24:
    if (v4)
    {
      uint64_t v17 = *(void *)(v2 + 8 * v4);
      do
      {
        unint64_t v18 = v4 - 1;
        unint64_t v19 = (v4 - 1) >> 1;
        uint64_t v20 = *(void *)(v2 + 8 * v19);
        if (*(void *)(v20 + 88) <= *(void *)(v17 + 88)) {
          break;
        }
        *(void *)(v2 + 8 * v4) = v20;
        *(void *)(v2 + 8 * v19) = v17;
        uint64_t v2 = *result;
        *(void *)(*(void *)(*result + 8 * v4) + 96) = v4;
        uint64_t v17 = *(void *)(v2 + 8 * v19);
        *(void *)(v17 + 96) = v19;
        unint64_t v4 = (v4 - 1) >> 1;
      }
      while (v18 > 1);
    }
    return result;
  }
  char v6 = 0;
  unint64_t v7 = v3 >> 3;
  uint64_t v8 = 2 * v4;
  uint64_t v9 = *(void *)(v2 + 8 * v4);
  while (1)
  {
    unint64_t v10 = v8 + 2;
    unint64_t v11 = *(void *)(v9 + 88);
    BOOL v12 = v10 < v7 && v11 > *(void *)(*(void *)(v2 + 8 * v10) + 88);
    unint64_t v13 = *(void *)(*(void *)(v2 + 8 * v5) + 88);
    if (v11 <= v13 && !v12) {
      break;
    }
    BOOL v15 = v11 > v13 && v12;
    if (v12) {
      unint64_t v16 = v10;
    }
    else {
      unint64_t v16 = v5;
    }
    if (v15)
    {
      if (v13 <= *(void *)(*(void *)(v2 + 8 * v10) + 88)) {
        unint64_t v16 = v5;
      }
      else {
        unint64_t v16 = v10;
      }
    }
    *(void *)(v2 + 8 * v4) = *(void *)(v2 + 8 * v16);
    *(void *)(v2 + 8 * v16) = v9;
    uint64_t v2 = *result;
    *(void *)(*(void *)(*result + 8 * v4) + 96) = v4;
    uint64_t v9 = *(void *)(v2 + 8 * v16);
    *(void *)(v9 + 96) = v16;
    uint64_t v8 = 2 * v16;
    char v6 = 1;
    unint64_t v5 = (2 * v16) | 1;
    unint64_t v4 = v16;
    if (v5 >= v7) {
      return result;
    }
  }
  if ((v6 & 1) == 0)
  {
    unint64_t v4 = *(void *)(*(void *)a2 + 96);
    goto LABEL_24;
  }
  return result;
}

void std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::__append(void **a1, unint64_t a2)
{
  char v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
      unint64_t v7 = (char *)a1[1];
    }
    else
    {
      unint64_t v13 = 0;
    }
    int v14 = &v13[8 * v10];
    BOOL v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    unint64_t v16 = &v14[8 * a2];
    uint64_t v17 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        uint64_t v18 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v7 != v17);
      unint64_t v7 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t *std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(a1, a2);
  uint64_t v4 = (std::__shared_weak_count *)a2[9];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  operator delete(a2);
  return v3;
}

void *PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::findValue@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = std::__tree<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__map_value_compare<ColorConversionKey,std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::less<ColorConversionKey>,true>,std::allocator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>>>::find<ColorConversionKey>((uint64_t)(a1 + 3), a2);
  uint64_t v10 = result;
  if (a1 + 4 == result)
  {
    *a3 = 0;
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    uint64_t v8 = result[9];
    *a4 = result[8];
    a4[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = a1[9] + 1;
    a1[9] = v9;
    result[11] = v9;
    uint64_t result = PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::bubble(a1 + 6, (uint64_t)&v10);
    *a3 = 1;
  }
  return result;
}

void sub_1B761AD84(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<TXTextStyle>::shared_ptr[abi:ne180100]<TXTextStyle,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B761AE1C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<TXTextStyle>::shared_ptr[abi:ne180100]<TXTextStyle,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<TXTextStyle *,std::shared_ptr<TXTextStyle>::__shared_ptr_default_delete<TXTextStyle,TXTextStyle>,std::allocator<TXTextStyle>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<TXTextStyle *,std::shared_ptr<TXTextStyle>::__shared_ptr_default_delete<TXTextStyle,TXTextStyle>,std::allocator<TXTextStyle>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL PCMatrix44Tmpl<double>::getPartialTransformation(long long *a1, uint64_t a2, uint64_t a3)
{
  long long v3 = a1[5];
  long long v98 = a1[4];
  long long v99 = v3;
  long long v4 = a1[7];
  long long v100 = a1[6];
  long long v101 = v4;
  long long v5 = a1[1];
  long long v94 = *a1;
  long long v95 = v5;
  long long v6 = a1[3];
  long long v96 = a1[2];
  long long v97 = v6;
  if (*((double *)&v4 + 1) == 0.0) {
    return 0;
  }
  uint64_t v11 = 0;
  unint64_t v12 = &v94;
  do
  {
    for (uint64_t i = 0; i != 32; i += 8)
      *(double *)((char *)v12 + i) = *(double *)((char *)v12 + i) / *((double *)&v101 + 1);
    ++v11;
    v12 += 2;
  }
  while (v11 != 4);
  uint64_t v14 = 0;
  uint64_t v93 = 0x3FF0000000000000;
  v85[5] = 1.0;
  uint64_t v84 = 0x3FF0000000000000;
  v85[0] = 1.0;
  memset(&v85[1], 0, 32);
  long long v86 = 0u;
  long long v87 = 0u;
  uint64_t v88 = 0x3FF0000000000000;
  uint64_t v89 = 0;
  uint64_t v81 = 0x3FF0000000000000;
  uint64_t v78 = 0x3FF0000000000000;
  double v75 = 1.0;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  do
  {
    BOOL v15 = &v85[v14];
    long long v16 = *(long long *)((char *)&v94 + v14 * 8 + 16);
    *(_OWORD *)BOOL v15 = *(long long *)((char *)&v94 + v14 * 8);
    *((_OWORD *)v15 + 1) = v16;
    v14 += 4;
  }
  while (v14 != 16);
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  uint64_t v93 = 0x3FF0000000000000;
  double v17 = PCMatrix44Tmpl<double>::determinant(v85);
  BOOL v7 = v17 != 0.0;
  if (v17 != 0.0)
  {
    long long v18 = v100;
    uint64_t v19 = v101;
    if (*(double *)&v100 != 0.0 || *((double *)&v100 + 1) != 0.0 || *(double *)&v101 != 0.0)
    {
      uint64_t v20 = 0;
      uint64_t v21 = *((void *)&v101 + 1);
      do
      {
        long long v22 = (_OWORD *)((char *)&v75 + v20 * 8);
        long long v23 = *(_OWORD *)&v85[v20 + 2];
        *long long v22 = *(_OWORD *)&v85[v20];
        v22[1] = v23;
        v20 += 4;
      }
      while (v20 != 16);
      PCMatrix44Tmpl<double>::invert(&v75, &v75, 0.0);
      long long v24 = v76;
      uint64_t v25 = v77;
      uint64_t v26 = *((void *)&v80 + 1);
      *(void *)&long long v76 = *((void *)&v77 + 1);
      *((void *)&v76 + 1) = v80;
      *(void *)&long long v77 = *((void *)&v82 + 1);
      uint64_t v27 = v82;
      *((void *)&v77 + 1) = v24;
      uint64_t v28 = *((void *)&v79 + 1);
      *(void *)&long long v80 = *((void *)&v24 + 1);
      *((void *)&v80 + 1) = v79;
      *(void *)&long long v79 = v26;
      *(void *)&long long v82 = *((void *)&v83 + 1);
      *((void *)&v79 + 1) = v83;
      *((void *)&v82 + 1) = v25;
      *(void *)&long long v83 = v28;
      *((void *)&v83 + 1) = v27;
      long long v73 = v18;
      *(void *)&long long v74 = v19;
      *((void *)&v74 + 1) = v21;
      PCMatrix44Tmpl<double>::transform<double>(&v75, (double *)&v73, (double *)&v73);
    }
    uint64_t v29 = *((void *)&v97 + 1);
    *(void *)a2 = *((void *)&v95 + 1);
    *(void *)(a2 + 8) = v29;
    *(void *)(a2 + 16) = *((void *)&v99 + 1);
    *(_OWORD *)a3 = v94;
    *(void *)(a3 + 16) = v95;
    *(_OWORD *)(a3 + 32) = v96;
    *(_OWORD *)(a3 + 64) = v98;
    double v30 = *(double *)(a3 + 24);
    double v31 = *(double *)a3 * *(double *)a3
        + *(double *)(a3 + 8) * *(double *)(a3 + 8)
        + *(double *)(a3 + 16) * *(double *)(a3 + 16);
    *(void *)(a3 + 48) = v97;
    *(void *)(a3 + 80) = v99;
    *(double *)(a2 + 24) = sqrt(v31 + v30 * v30);
    PCVector4<double>::scale((double *)a3, 1.0);
    double v32 = *(double *)(a3 + 8);
    double v33 = *(double *)(a3 + 32);
    double v34 = *(double *)(a3 + 40);
    double v35 = *(double *)(a3 + 16);
    double v36 = *(double *)(a3 + 24);
    double v37 = *(double *)(a3 + 48);
    double v38 = *(double *)(a3 + 56);
    double v39 = *(double *)a3 * v33 + v32 * v34 + v35 * v37 + v36 * v38;
    double v40 = v33 - *(double *)a3 * v39;
    double v41 = v34 - v32 * v39;
    double v42 = v37 - v35 * v39;
    double v43 = v38 - v36 * v39;
    *(double *)(a3 + 32) = v40;
    *(double *)(a3 + 40) = v41;
    *(double *)(a3 + 48) = v42;
    *(double *)(a3 + 56) = v43;
    *(double *)(a2 + 32) = sqrt(v43 * v43 + v42 * v42 + v40 * v40 + v41 * v41);
    PCVector4<double>::scale((double *)(a3 + 32), 1.0);
    double v44 = *(double *)a3;
    double v45 = *(double *)(a3 + 8);
    double v46 = *(double *)(a3 + 64);
    double v47 = *(double *)(a3 + 72);
    double v48 = *(double *)(a3 + 16);
    double v49 = *(double *)(a3 + 24);
    double v50 = *(double *)(a3 + 80);
    double v51 = *(double *)(a3 + 88);
    double v52 = *(double *)a3 * v46 + v45 * v47 + v48 * v50 + v49 * v51;
    *(double *)(a2 + 80) = v52;
    double v53 = v46 - v44 * v52;
    double v54 = v47 - v45 * v52;
    double v55 = v50 - v48 * v52;
    double v56 = v51 - v49 * v52;
    double v57 = *(double *)(a3 + 32);
    double v58 = *(double *)(a3 + 40);
    double v59 = *(double *)(a3 + 48);
    double v60 = *(double *)(a3 + 56);
    double v61 = v53 * v57 + v58 * v54 + v59 * v55 + v60 * v56;
    *(double *)(a2 + 88) = v61;
    double v62 = v53 - v57 * v61;
    double v63 = v54 - v58 * v61;
    double v64 = v55 - v59 * v61;
    double v65 = v56 - v60 * v61;
    *(double *)(a3 + 64) = v62;
    *(double *)(a3 + 72) = v63;
    *(double *)(a3 + 80) = v64;
    *(double *)(a3 + 88) = v65;
    *(double *)(a2 + 40) = sqrt(v65 * v65 + v64 * v64 + v62 * v62 + v63 * v63);
    PCVector4<double>::scale((double *)(a3 + 64), 1.0);
    uint64_t v66 = *(uint64_t *)(a2 + 40);
    *(float64x2_t *)(a2 + 80) = vdivq_f64(*(float64x2_t *)(a2 + 80), (float64x2_t)vdupq_lane_s64(v66, 0));
    float64x2_t v67 = *(float64x2_t *)(a3 + 72);
    *(void *)&v68.f64[0] = vdupq_laneq_s64((int64x2_t)v67, 1).u64[0];
    float64x2_t v69 = *(float64x2_t *)(a3 + 40);
    v68.f64[1] = *(float64_t *)(a3 + 64);
    *(void *)&v70.f64[0] = vdupq_laneq_s64((int64x2_t)v69, 1).u64[0];
    v70.f64[1] = *(float64_t *)(a3 + 32);
    if (vaddvq_f64(vmulq_f64(vsubq_f64(vmulq_f64(v69, v68), vmulq_f64(v67, v70)), *(float64x2_t *)a3))
       + (v70.f64[1] * v67.f64[0] - v68.f64[1] * v69.f64[0]) * *(double *)(a3 + 16)
       + *(double *)(a3 + 24) * 0.0 < 0.0)
    {
      uint64_t v71 = 0;
      *(float64x2_t *)(a2 + 24) = vnegq_f64(*(float64x2_t *)(a2 + 24));
      *(double *)(a2 + 40) = -*(double *)&v66;
      do
      {
        int64x2_t v72 = (double *)(a3 + v71);
        double *v72 = -*(double *)(a3 + v71);
        v72[4] = -*(double *)(a3 + v71 + 32);
        v72[8] = -*(double *)(a3 + v71 + 64);
        v71 += 8;
      }
      while (v71 != 24);
    }
  }
  return v7;
}

double PCMatrix44Tmpl<double>::determinant(double *a1)
{
  double v2 = a1[14];
  double v1 = a1[15];
  double v3 = a1[10];
  double v4 = a1[11];
  double v5 = v3 * v1 - v2 * v4;
  double v7 = a1[8];
  double v6 = a1[9];
  double v9 = a1[12];
  double v8 = a1[13];
  double v10 = v1 * v6 - v4 * v8;
  double v11 = v2 * v6 - v3 * v8;
  double v12 = v1 * v7 - v4 * v9;
  double v13 = v2 * v7 - v3 * v9;
  double v14 = v8 * v7 - v6 * v9;
  double v16 = a1[4];
  double v15 = a1[5];
  double v17 = a1[6];
  return (v14 * a1[7] + v10 * v16 - v15 * v12) * a1[2]
       + (v5 * v15 - v10 * v17 + v11 * a1[7]) * *a1
       - a1[1] * (v13 * a1[7] + v5 * v16 - v17 * v12)
       - (v17 * v14 + v11 * v16 - v15 * v13) * a1[3];
}

const PCString *std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::find<PCString>(const PCString *a1, PCString *a2)
{
  double v2 = a1 + 1;
  int64_t var0 = (PCString *)a1[1].var0;
  if (!var0) {
    return v2;
  }
  double v5 = a1 + 1;
  do
  {
    int v6 = PCString::compare(var0 + 4, a2);
    double v7 = var0 + 1;
    if (v6 >= 0)
    {
      double v7 = var0;
      double v5 = var0;
    }
    int64_t var0 = (PCString *)v7->var0;
  }
  while (v7->var0);
  if (v5 == v2 || (PCString::compare(a2, v5 + 4) & 0x80000000) != 0) {
    return v2;
  }
  return v5;
}

uint64_t *std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(PCString *a1, PCString *this, uint64_t a3, const PCString **a4)
{
  int v6 = std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__find_equal<PCString>(a1, &v11, this);
  int64_t var0 = (uint64_t *)v6->var0;
  if (!v6->var0)
  {
    double v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v11, v8, v10[0]);
    int64_t var0 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return var0;
}

const PCString *std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__find_equal<PCString>(const PCString *a1, const PCString **a2, PCString *this)
{
  double v5 = a1 + 1;
  int64_t var0 = (const PCString *)a1[1].var0;
  if (var0)
  {
    do
    {
      while (1)
      {
        double v7 = var0;
        double v8 = (PCString *)&var0[4];
        if ((PCString::compare(this, var0 + 4) & 0x80000000) == 0) {
          break;
        }
        int64_t var0 = (const PCString *)v7->var0;
        double v5 = v7;
        if (!v7->var0) {
          goto LABEL_9;
        }
      }
      if ((PCString::compare(v8, this) & 0x80000000) == 0) {
        break;
      }
      double v5 = v7 + 1;
      int64_t var0 = (const PCString *)v7[1].var0;
    }
    while (var0);
  }
  else
  {
    double v7 = a1 + 1;
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(uint64_t a1@<X0>, const PCString **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (PCString *)operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  PCString::PCString(v6 + 4, *a2);
  v6[5].int64_t var0 = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B761B628(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,TXFont *>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  double v2 = *(PCString **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      PCString::~PCString(v2 + 4);
    }
    operator delete(v2);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned int,PCBox<double>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCBox<double>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCBox<double>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  double v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        double v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        double v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        double v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    double v9 = a1 + 1;
LABEL_10:
    double v11 = (char *)operator new(0x58uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *(_OWORD *)(v11 + 72) = xmmword_1B7E736F0;
    *(_OWORD *)(v11 + 56) = xmmword_1B7E736F0;
    *(_OWORD *)(v11 + 40) = xmmword_1B7E736F0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(uint64_t a1, const PCHash128 *a2)
{
  double v2 = (void *)(a1 + 8);
  double v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = operator<((const PCHash128 *)(v3 + 4), a2);
    double v7 = v3 + 1;
    if (!v6)
    {
      double v7 = v3;
      uint64_t v5 = v3;
    }
    double v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || operator<(a2, (const PCHash128 *)(v5 + 4))) {
    return v2;
  }
  return v5;
}

_DWORD *std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3, _DWORD **a4)
{
  BOOL v6 = (void **)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__find_equal<PCHash128>((uint64_t)a1, &v16, a2);
  double v7 = *v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    double v7 = operator new(0x50uLL);
    double v9 = *a4;
    unsigned char v7[8] = **a4;
    v7[9] = v9[1];
    v7[10] = v9[2];
    v7[11] = v9[3];
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 7) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *((_OWORD *)v7 + 4) = _Q0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v16, v8, (uint64_t *)v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__find_equal<PCHash128>(uint64_t a1, void *a2, const PCHash128 *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  double v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        double v7 = v4;
        unsigned int v8 = (const PCHash128 *)(v4 + 4);
        if (!operator<(a3, (const PCHash128 *)(v4 + 4))) {
          break;
        }
        double v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!operator<(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      double v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    double v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    std::vector<std::pair<CMTime,std::vector<CMTime>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<CMTime,std::vector<CMTime>>>,std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B761B990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<CMTime,std::vector<CMTime>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<CMTime,std::vector<CMTime>>>,std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    BOOL v6 = a2;
    do
    {
      long long v7 = *v6;
      *(void *)(v4 + 16) = *((void *)v6 + 2);
      *(_OWORD *)uint64_t v4 = v7;
      *(void *)(v4 + 32) = 0;
      *(void *)(v4 + 40) = 0;
      *(void *)(v4 + 24) = 0;
      std::vector<CMTime>::__init_with_size[abi:ne180100]<CMTime*,CMTime*>((void *)(v4 + 24), *((const void **)v6 + 3), *((void *)v6 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v6 + 4) - *((void *)v6 + 3)) >> 3));
      uint64_t v4 = v12 + 48;
      v12 += 48;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CMTime,std::vector<CMTime>>>,std::pair<CMTime,std::vector<CMTime>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B761BAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<CMTime>::__init_with_size[abi:ne180100]<CMTime*,CMTime*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    uint64_t result = std::vector<PCVector3<double>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B761BB34(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CMTime,std::vector<CMTime>>>,std::pair<CMTime,std::vector<CMTime>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CMTime,std::vector<CMTime>>>,std::pair<CMTime,std::vector<CMTime>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<CMTime,std::vector<CMTime>>>,std::pair<CMTime,std::vector<CMTime>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    double v3 = *(void **)(v1 - 24);
    if (v3)
    {
      *(void *)(v1 - 16) = v3;
      operator delete(v3);
    }
    v1 -= 48;
  }
}

void std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<CMTime,std::vector<CMTime>>>::__clear[abi:ne180100]((uint64_t *)v2);
    double v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<CMTime,std::vector<CMTime>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::shared_ptr<TXTextStyle>::shared_ptr[abi:ne180100]<TXTextStyle,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t TXTextLayout_Factory::getInstance(TXTextLayout_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextLayout_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXTextLayout_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextLayout_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextLayout_Factory::_instance;
}

uint64_t TXTextInput_Factory::getInstance(TXTextInput_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextInput_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXTextInput_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextInput_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextInput_Factory::_instance;
}

uint64_t TXTextBehavior_Factory::getInstance(TXTextBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXTextBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextBehavior_Factory::_instance;
}

uint64_t TXTextTrackingBehavior_Factory::getInstance(TXTextTrackingBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextTrackingBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXTextTrackingBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextTrackingBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextTrackingBehavior_Factory::_instance;
}

uint64_t TXTypeOnBehavior_Factory::getInstance(TXTypeOnBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTypeOnBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXTypeOnBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTypeOnBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTypeOnBehavior_Factory::_instance;
}

uint64_t TXCrawlLeftBehavior_Factory::getInstance(TXCrawlLeftBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXCrawlLeftBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXCrawlLeftBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXCrawlLeftBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXCrawlLeftBehavior_Factory::_instance;
}

uint64_t TXCrawlRightBehavior_Factory::getInstance(TXCrawlRightBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXCrawlRightBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXCrawlRightBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXCrawlRightBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXCrawlRightBehavior_Factory::_instance;
}

uint64_t TXScrollUpBehavior_Factory::getInstance(TXScrollUpBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXScrollUpBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXScrollUpBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXScrollUpBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXScrollUpBehavior_Factory::_instance;
}

uint64_t TXScrollDownBehavior_Factory::getInstance(TXScrollDownBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXScrollDownBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXScrollDownBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXScrollDownBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXScrollDownBehavior_Factory::_instance;
}

uint64_t TXTextSequenceBehavior_Factory::getInstance(TXTextSequenceBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextSequenceBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXTextSequenceBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextSequenceBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextSequenceBehavior_Factory::_instance;
}

uint64_t TXSequenceBehavior_Factory::getInstance(TXSequenceBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXSequenceBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXSequenceBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXSequenceBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXSequenceBehavior_Factory::_instance;
}

uint64_t TXTextScrollBehavior_Factory::getInstance(TXTextScrollBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextScrollBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXTextScrollBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextScrollBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextScrollBehavior_Factory::_instance;
}

uint64_t TXTextStyle_Factory::getInstance(TXTextStyle_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXTextStyle_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle_Factory::_instance;
}

uint64_t TXNumberGenerator_Factory::getInstance(TXNumberGenerator_Factory *this)
{
  if (!TXNumberGenerator_Factory::_instance) {
    operator new();
  }
  return TXNumberGenerator_Factory::_instance;
}

void sub_1B761C47C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40668DDC76);
  _Unwind_Resume(a1);
}

uint64_t TXTimecodeGenerator_Factory::getInstance(TXTimecodeGenerator_Factory *this)
{
  if (!TXTimecodeGenerator_Factory::_instance) {
    operator new();
  }
  return TXTimecodeGenerator_Factory::_instance;
}

void sub_1B761C4F4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40668DDC76);
  _Unwind_Resume(a1);
}

uint64_t TXTimeDateGenerator_Factory::getInstance(TXTimeDateGenerator_Factory *this)
{
  if (!TXTimeDateGenerator_Factory::_instance) {
    operator new();
  }
  return TXTimeDateGenerator_Factory::_instance;
}

void sub_1B761C56C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40668DDC76);
  _Unwind_Resume(a1);
}

uint64_t TXTextFromFileGenerator_Factory::getInstance(TXTextFromFileGenerator_Factory *this)
{
  if (!TXTextFromFileGenerator_Factory::_instance) {
    operator new();
  }
  return TXTextFromFileGenerator_Factory::_instance;
}

void sub_1B761C5E4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40668DDC76);
  _Unwind_Resume(a1);
}

uint64_t TXTranscriptionGenerator_Factory::getInstance(TXTranscriptionGenerator_Factory *this)
{
  if (!TXTranscriptionGenerator_Factory::_instance) {
    operator new();
  }
  return TXTranscriptionGenerator_Factory::_instance;
}

void sub_1B761C65C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40668DDC76);
  _Unwind_Resume(a1);
}

uint64_t TXTextGenerator_Factory::getInstance(TXTextGenerator_Factory *this)
{
  if (!TXTextGenerator_Factory::_instance) {
    operator new();
  }
  return TXTextGenerator_Factory::_instance;
}

void sub_1B761C6D4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40668DDC76);
  _Unwind_Resume(a1);
}

uint64_t TXChannelString_Factory::getInstance(TXChannelString_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXChannelString_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXChannelString_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXChannelString_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXChannelString_Factory::_instance;
}

uint64_t TXChannelFont_Factory::getInstance(TXChannelFont_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXChannelFont_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXChannelFont_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXChannelFont_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXChannelFont_Factory::_instance;
}

uint64_t TXChannelAlignment_Factory::getInstance(TXChannelAlignment_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXChannelAlignment_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&TXChannelAlignment_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXChannelAlignment_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXChannelAlignment_Factory::_instance;
}

void std::__call_once_param<std::tuple<TXTextLayout_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B761C8CC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void TXTextLayout_Factory::TXTextLayout_Factory(TXTextLayout_Factory *this)
{
  long long v3 = xmmword_1B7E78B90;
  long long v4 = xmmword_1B7E78220;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  void *v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F10AD920;
  *((void *)this + 16) = &unk_1F10AD9F0;
  *((void *)this + 17) = 0;
}

void sub_1B761C99C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXTextLayout_Factory::~TXTextLayout_Factory(TXTextLayout_Factory *this)
{
  TXTextLayout_Factory::~TXTextLayout_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10AD920;
  char v2 = (TXTextLayout_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F10AD9F0;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *TXTextLayout_Factory::create(TXTextLayout_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v14, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)@"Motion Effect");
  uint64_t v6 = *((void *)this + 17);
  if (v6) {
    uint64_t v7 = v6 + 200;
  }
  else {
    uint64_t v7 = 0;
  }
  size_t v8 = (OZChannelBase *)(*(uint64_t (**)(TXTextLayout_Factory *, uint64_t, uint64_t))(*(void *)this + 24))(this, v7, 40);
  uint64_t v9 = v8;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  }
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  char v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B761CBB0(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C4058E05BFCLL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void TXTextLayout_Factory::createCopy(TXTextLayout_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B761CD04(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4058E05BFCLL);
  _Unwind_Resume(a1);
}

void TXTextLayout_Factory::description(PCString *a1@<X8>)
{
}

PCString *TXTextLayout_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Short Desc");
}

PCString *TXTextLayout_Factory::manufacturer@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Apple");
}

const char *TXTextLayout_Factory::getBundleID(TXTextLayout_Factory *this)
{
  return "com.apple.ozone.framework";
}

PCString *TXTextLayout_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Text");
}

PCString *TXTextLayout_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Text");
}

uint64_t TXTextLayout_Factory::getIconIDInternal(TXTextLayout_Factory *this)
{
  return 2;
}

PCString *TXTextLayout_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "");
}

uint64_t TXTextLayout_Factory::createNode(TXTextLayout_Factory *this, const PCString *a2)
{
  return (*(uint64_t (**)(TXTextLayout_Factory *, const PCString *))(*(void *)this + 16))(this, a2);
}

void TXTextLayout_Factory::createNodeCopy(TXTextLayout_Factory *this, OZSceneNode *a2)
{
}

void sub_1B761CE68(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4058E05BFCLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'TXTextLayout_Factory::~TXTextLayout_Factory(TXTextLayout_Factory *this)
{
}

{
  uint64_t vars8;

  TXTextLayout_Factory::~TXTextLayout_Factory((TXTextLayout_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<TXTextInput_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B761CFC4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void TXTextInput_Factory::TXTextInput_Factory(TXTextInput_Factory *this)
{
  long long v3 = xmmword_1B7E78220;
  long long v4 = xmmword_1B7E77B70;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  void *v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F10ADB30;
  *((void *)this + 16) = &unk_1F10ADC00;
  *((void *)this + 17) = 0;
}

void sub_1B761D094(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXTextInput_Factory::~TXTextInput_Factory(TXTextInput_Factory *this)
{
  TXTextInput_Factory::~TXTextInput_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10ADB30;
  char v2 = (TXTextInput_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F10ADC00;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *TXTextInput_Factory::create(TXTextInput_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v14, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)@"Motion Effect");
  uint64_t v6 = *((void *)this + 17);
  if (v6) {
    uint64_t v7 = v6 + 200;
  }
  else {
    uint64_t v7 = 0;
  }
  size_t v8 = (OZChannelBase *)(*(uint64_t (**)(TXTextInput_Factory *, uint64_t, uint64_t))(*(void *)this + 24))(this, v7, 40);
  uint64_t v9 = v8;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  }
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  char v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B761D2A8(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C404D45619FLL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void TXTextInput_Factory::createCopy(TXTextInput_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B761D3FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404D45619FLL);
  _Unwind_Resume(a1);
}

void TXTextInput_Factory::createNodeCopy(TXTextInput_Factory *this, OZSceneNode *a2)
{
}

void sub_1B761D4C0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404D45619FLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'TXTextInput_Factory::~TXTextInput_Factory(TXTextInput_Factory *this)
{
}

{
  uint64_t vars8;

  TXTextInput_Factory::~TXTextInput_Factory((TXTextInput_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<TXTextBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B761D61C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void TXTextBehavior_Factory::TXTextBehavior_Factory(TXTextBehavior_Factory *this)
{
  long long v3 = xmmword_1B7E78BB0;
  long long v4 = xmmword_1B7E78BA0;
  uint64_t v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 128), 0);
  *(void *)this = &unk_1F10ADC58;
  *((void *)this + 16) = &unk_1F10ADD10;
}

void sub_1B761D6D4(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PCString *TXTextBehavior_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-MissingObject");
}

PCString *TXTextBehavior_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-MissingObject");
}

uint64_t TXTextBehavior_Factory::getIconIDInternal(TXTextBehavior_Factory *this)
{
  return 18;
}

void std::__call_once_param<std::tuple<TXTextTrackingBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B761D75C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXTextTrackingBehavior_Factory::TXTextTrackingBehavior_Factory(TXTextTrackingBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BA0;
  long long v5 = xmmword_1B7E78BC0;
  long long v3 = xmmword_1B7E78220;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F10ADD68;
  *((void *)this + 18) = &unk_1F10ADE48;
}

void sub_1B761D824(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

__n128 OZBehaviorFactory::OZBehaviorFactory(uint64_t a1, long long *a2, long long *a3, __n128 *a4, int a5)
{
  long long v6 = *a2;
  long long v9 = *a3;
  long long v10 = v6;
  uint64_t v7 = OZFactory::OZFactory(a1, &v10, &v9, a5);
  *(void *)uint64_t v7 = &unk_1F10ADEB8;
  __n128 result = *a4;
  *(__n128 *)(v7 + 128) = *a4;
  return result;
}

void TXTextTrackingBehavior_Factory::~TXTextTrackingBehavior_Factory(TXTextTrackingBehavior_Factory *this)
{
  PCSingleton::~PCSingleton((TXTextTrackingBehavior_Factory *)((char *)this + 144));

  OZFactory::~OZFactory((OZFactory *)this);
}

{
  uint64_t vars8;

  PCSingleton::~PCSingleton((TXTextTrackingBehavior_Factory *)((char *)this + 144));
  OZFactory::~OZFactory((OZFactory *)this);

  JUMPOUT(0x1BA9BFBA0);
}

void TXTextTrackingBehavior_Factory::create(TXTextTrackingBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B761D9B4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C404834D347);
  _Unwind_Resume(a1);
}

void TXTextTrackingBehavior_Factory::createCopy(TXTextTrackingBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B761DA78(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C404834D347);
  _Unwind_Resume(a1);
}

void TXTextTrackingBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *TXTextTrackingBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Tracking Behavior");
}

void TXTextTrackingBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
}

PCString *TXTextTrackingBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Animation");
}

PCString *TXTextTrackingBehavior_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-TextBehavior");
}

PCString *TXTextTrackingBehavior_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-TextBehavior");
}

uint64_t TXTextTrackingBehavior_Factory::getIconIDInternal(TXTextTrackingBehavior_Factory *this)
{
  return 12;
}

PCString *TXTextTrackingBehavior_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_TextBehavior_Icon");
}

void TXTextTrackingBehavior_Factory::createBehaviorCopy(TXTextTrackingBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B761DBC4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C404834D347);
  _Unwind_Resume(a1);
}

void TXTextTrackingBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void non-virtual thunk to'TXTextTrackingBehavior_Factory::~TXTextTrackingBehavior_Factory(TXTextTrackingBehavior_Factory *this)
{
  uint64_t v1 = (OZFactory *)((char *)this - 144);
  PCSingleton::~PCSingleton(this);

  OZFactory::~OZFactory(v1);
}

{
  TXTextTrackingBehavior_Factory::~TXTextTrackingBehavior_Factory((TXTextTrackingBehavior_Factory *)((char *)this - 144));
}

void std::__call_once_param<std::tuple<TXTypeOnBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B761DC8C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXTypeOnBehavior_Factory::TXTypeOnBehavior_Factory(TXTypeOnBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BA0;
  long long v5 = xmmword_1B7E78BD0;
  long long v3 = xmmword_1B7E78220;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F10ADF98;
  *((void *)this + 18) = &unk_1F10AE078;
}

void sub_1B761DD54(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXTypeOnBehavior_Factory::create(TXTypeOnBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B761DDF0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E7221E5ELL);
  _Unwind_Resume(a1);
}

void TXTypeOnBehavior_Factory::createCopy(TXTypeOnBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B761DEB4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E7221E5ELL);
  _Unwind_Resume(a1);
}

void TXTypeOnBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *TXTypeOnBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Type On Behavior");
}

void TXTypeOnBehavior_Factory::createBehaviorCopy(TXTypeOnBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B761DFA0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E7221E5ELL);
  _Unwind_Resume(a1);
}

void TXTypeOnBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<TXCrawlLeftBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B761E028(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXCrawlLeftBehavior_Factory::TXCrawlLeftBehavior_Factory(TXCrawlLeftBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BA0;
  long long v5 = xmmword_1B7E78BE0;
  long long v3 = xmmword_1B7E78220;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F10AE0D0;
  *((void *)this + 18) = &unk_1F10AE1B0;
}

void sub_1B761E0F0(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXCrawlLeftBehavior_Factory::create(TXCrawlLeftBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B761E18C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXCrawlLeftBehavior_Factory::createCopy(TXCrawlLeftBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B761E250(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXCrawlLeftBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *TXCrawlLeftBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Crawl Left Behavior");
}

void TXCrawlLeftBehavior_Factory::createBehaviorCopy(TXCrawlLeftBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B761E33C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXCrawlLeftBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<TXCrawlRightBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B761E3C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXCrawlRightBehavior_Factory::TXCrawlRightBehavior_Factory(TXCrawlRightBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BA0;
  long long v5 = xmmword_1B7E78BF0;
  long long v3 = xmmword_1B7E78220;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F10AE208;
  *((void *)this + 18) = &unk_1F10AE2E8;
}

void sub_1B761E48C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXCrawlRightBehavior_Factory::create(TXCrawlRightBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B761E528(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXCrawlRightBehavior_Factory::createCopy(TXCrawlRightBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B761E5EC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXCrawlRightBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *TXCrawlRightBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Crawl Right Behavior");
}

void TXCrawlRightBehavior_Factory::createBehaviorCopy(TXCrawlRightBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B761E6D8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXCrawlRightBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<TXScrollUpBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B761E760(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXScrollUpBehavior_Factory::TXScrollUpBehavior_Factory(TXScrollUpBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BA0;
  long long v5 = xmmword_1B7E78C00;
  long long v3 = xmmword_1B7E78220;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F10AE340;
  *((void *)this + 18) = &unk_1F10AE420;
}

void sub_1B761E828(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXScrollUpBehavior_Factory::create(TXScrollUpBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B761E8C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXScrollUpBehavior_Factory::createCopy(TXScrollUpBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B761E988(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXScrollUpBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *TXScrollUpBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Scroll Up Behavior");
}

void TXScrollUpBehavior_Factory::createBehaviorCopy(TXScrollUpBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B761EA74(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXScrollUpBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<TXScrollDownBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B761EAFC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXScrollDownBehavior_Factory::TXScrollDownBehavior_Factory(TXScrollDownBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BA0;
  long long v5 = xmmword_1B7E78C10;
  long long v3 = xmmword_1B7E78220;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F10AE478;
  *((void *)this + 18) = &unk_1F10AE558;
}

void sub_1B761EBC4(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXScrollDownBehavior_Factory::create(TXScrollDownBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B761EC60(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXScrollDownBehavior_Factory::createCopy(TXScrollDownBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B761ED24(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXScrollDownBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *TXScrollDownBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Scroll Down Behavior");
}

void TXScrollDownBehavior_Factory::createBehaviorCopy(TXScrollDownBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B761EE10(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4016E832F1);
  _Unwind_Resume(a1);
}

void TXScrollDownBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<TXTextSequenceBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B761EE98(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXTextSequenceBehavior_Factory::TXTextSequenceBehavior_Factory(TXTextSequenceBehavior_Factory *this)
{
  long long v3 = xmmword_1B7E78BA0;
  long long v4 = xmmword_1B7E782A0;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F10AE5B0;
  *((void *)this + 18) = &unk_1F10AE690;
}

void sub_1B761EF50(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelBehaviorFactory::OZChannelBehaviorFactory(uint64_t a1, long long *a2, long long *a3, int a4)
{
  long long v7 = *a2;
  long long v6 = *a3;
  __n128 v5 = 0uLL;
  OZBehaviorFactory::OZBehaviorFactory(a1, &v7, &v6, &v5, a4);
  void *v4 = &unk_1F10AE700;
}

void TXTextSequenceBehavior_Factory::create(TXTextSequenceBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B761F04C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40D1460FDBLL);
  _Unwind_Resume(a1);
}

void TXTextSequenceBehavior_Factory::createCopy(TXTextSequenceBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B761F110(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40D1460FDBLL);
  _Unwind_Resume(a1);
}

void TXTextSequenceBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *TXTextSequenceBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Sequence Behavior Old");
}

void TXTextSequenceBehavior_Factory::createBehaviorCopy(TXTextSequenceBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B761F1FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40D1460FDBLL);
  _Unwind_Resume(a1);
}

void TXTextSequenceBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

BOOL OZChannelBehaviorFactory::canApplyToChannel(OZChannelBehaviorFactory *this, OZChannelBase *a2)
{
  return !OZChannelBase::testFlag(a2, 256);
}

void std::__call_once_param<std::tuple<TXSequenceBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B761F2A8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXSequenceBehavior_Factory::TXSequenceBehavior_Factory(TXSequenceBehavior_Factory *this)
{
  long long v3 = xmmword_1B7E78BA0;
  long long v4 = xmmword_1B7E78230;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F10AE7E0;
  *((void *)this + 18) = &unk_1F10AE8C0;
}

void sub_1B761F360(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXSequenceBehavior_Factory::create(TXSequenceBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B761F3FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C400D1D3198);
  _Unwind_Resume(a1);
}

void TXSequenceBehavior_Factory::createCopy(TXSequenceBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B761F4C0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C400D1D3198);
  _Unwind_Resume(a1);
}

void TXSequenceBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *TXSequenceBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Sequence Behavior");
}

void TXSequenceBehavior_Factory::createBehaviorCopy(TXSequenceBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B761F5AC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C400D1D3198);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<TXTextScrollBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B761F61C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void TXTextScrollBehavior_Factory::TXTextScrollBehavior_Factory(TXTextScrollBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B7E78C20;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F10AE918;
  *((void *)this + 18) = &unk_1F10AE9F8;
}

void sub_1B761F6E4(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXTextScrollBehavior_Factory::create(TXTextScrollBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B761F780(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C408C491C18);
  _Unwind_Resume(a1);
}

void TXTextScrollBehavior_Factory::createCopy(TXTextScrollBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B761F844(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C408C491C18);
  _Unwind_Resume(a1);
}

void TXTextScrollBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *TXTextScrollBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Credit Scroll Behavior");
}

PCString *TXTextScrollBehavior_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Behavior");
}

PCString *TXTextScrollBehavior_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Behavior");
}

uint64_t TXTextScrollBehavior_Factory::getIconIDInternal(TXTextScrollBehavior_Factory *this)
{
  return 10;
}

void TXTextScrollBehavior_Factory::createBehaviorCopy(TXTextScrollBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B761F958(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C408C491C18);
  _Unwind_Resume(a1);
}

void TXTextScrollBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<TXTextStyle_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B761F9E0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void TXTextStyle_Factory::TXTextStyle_Factory(TXTextStyle_Factory *this)
{
  long long v3 = xmmword_1B7E78C40;
  long long v4 = xmmword_1B7E78280;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  void *v2 = &unk_1F10AEB78;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F10AEA50;
  *((void *)this + 16) = &unk_1F10AEB20;
  *((void *)this + 17) = 0;
}

void sub_1B761FAB0(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXTextStyle_Factory::~TXTextStyle_Factory(TXTextStyle_Factory *this)
{
  TXTextStyle_Factory::~TXTextStyle_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F10AEA50;
  uint64_t v2 = (TXTextStyle_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F10AEB20;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *TXTextStyle_Factory::create(TXTextStyle_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  long long v6 = (OZChannelBase *)(*(uint64_t (**)(TXTextStyle_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  long long v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var9, NextUniqueID);
  size_t v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 14))(v7);
  OZChannelBase::setName(v8, a2, 0);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B761FC80(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C4053870830, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void TXTextStyle_Factory::createCopy(TXTextStyle_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B761FD60(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4053870830);
  _Unwind_Resume(a1);
}

void TXTextStyle_Factory::description(PCString *a1@<X8>)
{
}

PCString *TXTextStyle_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Style Name");
}

PCString *TXTextStyle_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_TextStyle_Icon");
}

void TXTextStyle_Factory::createStyleCopy(TXTextStyle_Factory *this, OZStyle *a2)
{
}

void sub_1B761FE5C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4053870830);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'TXTextStyle_Factory::~TXTextStyle_Factory(TXTextStyle_Factory *this)
{
}

{
  uint64_t vars8;

  TXTextStyle_Factory::~TXTextStyle_Factory((TXTextStyle_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void TXNumberGenerator_Factory::TXNumberGenerator_Factory(TXNumberGenerator_Factory *this)
{
  long long v1 = xmmword_1B7E78260;
  long long v2 = xmmword_1B7E78C50;
  *(void *)OZFactory::OZFactory((uint64_t)this, &v2, &v1, 0) = &unk_1F10AEC48;
}

void TXNumberGenerator_Factory::~TXNumberGenerator_Factory(OZFactory *this)
{
  OZFactory::~OZFactory(this);

  JUMPOUT(0x1BA9BFBA0);
}

void TXNumberGenerator_Factory::create(TXNumberGenerator_Factory *this, const PCString *a2)
{
}

void sub_1B7620068(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405BEC22D4);
  _Unwind_Resume(a1);
}

void TXNumberGenerator_Factory::createCopy(TXNumberGenerator_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B76201A4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405BEC22D4);
  _Unwind_Resume(a1);
}

void TXNumberGenerator_Factory::description(PCString *a1@<X8>)
{
}

PCString *TXNumberGenerator_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Number Generator");
}

void TXNumberGenerator_Factory::getCategoryName(PCString *a1@<X8>)
{
}

PCString *TXNumberGenerator_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Generator");
}

void TXNumberGenerator_Factory::createNodeCopy(TXNumberGenerator_Factory *this, OZSceneNode *a2)
{
}

void sub_1B76202BC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405BEC22D4);
  _Unwind_Resume(a1);
}

void TXNumberGenerator_Factory::longDescription(PCString *a1@<X8>)
{
}

void TXTimecodeGenerator_Factory::TXTimecodeGenerator_Factory(TXTimecodeGenerator_Factory *this)
{
  long long v1 = xmmword_1B7E78260;
  long long v2 = xmmword_1B7E78C60;
  *(void *)OZFactory::OZFactory((uint64_t)this, &v2, &v1, 0) = &unk_1F10AED50;
}

void TXTimecodeGenerator_Factory::create(TXTimecodeGenerator_Factory *this, const PCString *a2)
{
}

void sub_1B76203B8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40D8132C04);
  _Unwind_Resume(a1);
}

void TXTimecodeGenerator_Factory::createCopy(TXTimecodeGenerator_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B76204F4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40D8132C04);
  _Unwind_Resume(a1);
}

void TXTimecodeGenerator_Factory::description(PCString *a1@<X8>)
{
}

PCString *TXTimecodeGenerator_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Timecode Generator");
}

void TXTimecodeGenerator_Factory::createNodeCopy(TXTimecodeGenerator_Factory *this, OZSceneNode *a2)
{
}

void sub_1B76205E4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40D8132C04);
  _Unwind_Resume(a1);
}

void TXTimecodeGenerator_Factory::longDescription(PCString *a1@<X8>)
{
}

void TXTimeDateGenerator_Factory::TXTimeDateGenerator_Factory(TXTimeDateGenerator_Factory *this)
{
  long long v1 = xmmword_1B7E78260;
  long long v2 = xmmword_1B7E78C70;
  *(void *)OZFactory::OZFactory((uint64_t)this, &v2, &v1, 0) = &unk_1F10AEE40;
}

void TXTimeDateGenerator_Factory::create(TXTimeDateGenerator_Factory *this, const PCString *a2)
{
}

void sub_1B76206E0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C400CF99334);
  _Unwind_Resume(a1);
}

void TXTimeDateGenerator_Factory::createCopy(TXTimeDateGenerator_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B762081C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C400CF99334);
  _Unwind_Resume(a1);
}

void TXTimeDateGenerator_Factory::description(PCString *a1@<X8>)
{
}

PCString *TXTimeDateGenerator_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Time Date Generator");
}

void TXTimeDateGenerator_Factory::createNodeCopy(TXTimeDateGenerator_Factory *this, OZSceneNode *a2)
{
}

void sub_1B762090C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C400CF99334);
  _Unwind_Resume(a1);
}

void TXTimeDateGenerator_Factory::longDescription(PCString *a1@<X8>)
{
}

void TXTextFromFileGenerator_Factory::TXTextFromFileGenerator_Factory(TXTextFromFileGenerator_Factory *this)
{
  long long v1 = xmmword_1B7E78260;
  long long v2 = xmmword_1B7E78C80;
  *(void *)OZFactory::OZFactory((uint64_t)this, &v2, &v1, 0) = &unk_1F10AEF30;
}

void TXTextFromFileGenerator_Factory::create(TXTextFromFileGenerator_Factory *this, const PCString *a2)
{
}

void sub_1B7620A04(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C409D16F43ALL);
  _Unwind_Resume(a1);
}

void TXTextFromFileGenerator_Factory::createCopy(TXTextFromFileGenerator_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7620B3C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C409D16F43ALL);
  _Unwind_Resume(a1);
}

void TXTextFromFileGenerator_Factory::description(PCString *a1@<X8>)
{
}

PCString *TXTextFromFileGenerator_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text From File Generator");
}

void TXTextFromFileGenerator_Factory::createNodeCopy(TXTextFromFileGenerator_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7620C28(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C409D16F43ALL);
  _Unwind_Resume(a1);
}

void TXTextFromFileGenerator_Factory::longDescription(PCString *a1@<X8>)
{
}

void TXTranscriptionGenerator_Factory::TXTranscriptionGenerator_Factory(TXTranscriptionGenerator_Factory *this)
{
  long long v1 = xmmword_1B7E78260;
  long long v2 = xmmword_1B7E78250;
  *(void *)OZFactory::OZFactory((uint64_t)this, &v2, &v1, 0) = &unk_1F10AF020;
}

void TXTranscriptionGenerator_Factory::create(TXTranscriptionGenerator_Factory *this, const PCString *a2)
{
}

void sub_1B7620D24(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404F336E0DLL);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator_Factory::createCopy(TXTranscriptionGenerator_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7620E60(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404F336E0DLL);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator_Factory::description(PCString *a1@<X8>)
{
}

PCString *TXTranscriptionGenerator_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Text Transcription Generator");
}

void TXTranscriptionGenerator_Factory::createNodeCopy(TXTranscriptionGenerator_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7620F50(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404F336E0DLL);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator_Factory::longDescription(PCString *a1@<X8>)
{
}

void TXTextGenerator_Factory::TXTextGenerator_Factory(TXTextGenerator_Factory *this)
{
  long long v1 = xmmword_1B7E78220;
  long long v2 = xmmword_1B7E78260;
  *(void *)OZFactory::OZFactory((uint64_t)this, &v2, &v1, 1) = &unk_1F10AF110;
}

void TXTextGenerator_Factory::create(TXTextGenerator_Factory *this, const PCString *a2)
{
}

void sub_1B7621048(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C409229C0C3);
  _Unwind_Resume(a1);
}

void TXTextGenerator_Factory::createCopy(TXTextGenerator_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7621180(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C409229C0C3);
  _Unwind_Resume(a1);
}

PCString *TXTextGenerator_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_TextGenerator_Icon");
}

void TXTextGenerator_Factory::createNodeCopy(TXTextGenerator_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7621254(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C409229C0C3);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<TXChannelString_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B76212C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void TXChannelString_Factory::TXChannelString_Factory(TXChannelString_Factory *this)
{
  long long v3 = xmmword_1B7E78CA0;
  long long v4 = xmmword_1B7E78C90;
  long long v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  void *v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F10AF200;
  *((void *)this + 16) = &unk_1F10AF2D0;
}

void sub_1B7621394(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXChannelString_Factory::create(TXChannelString_Factory *this, const PCString *a2)
{
}

void sub_1B7621408(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40BB3F29BDLL);
  _Unwind_Resume(a1);
}

void TXChannelString_Factory::createCopy(TXChannelString_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B76214C0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40BB3F29BDLL);
  _Unwind_Resume(a1);
}

void TXChannelString_Factory::createChannelCopy(TXChannelString_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7621578(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40BB3F29BDLL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<TXChannelFont_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B76215E8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void TXChannelFont_Factory::TXChannelFont_Factory(TXChannelFont_Factory *this)
{
  long long v3 = xmmword_1B7E78CC0;
  long long v4 = xmmword_1B7E78CB0;
  long long v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  void *v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F10AF328;
  *((void *)this + 16) = &unk_1F10AF3F8;
}

void sub_1B76216B8(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXChannelFont_Factory::create(TXChannelFont_Factory *this, const PCString *a2)
{
}

void sub_1B762172C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

void TXChannelFont_Factory::createCopy(TXChannelFont_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B76217E4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

void TXChannelFont_Factory::createChannelCopy(TXChannelFont_Factory *this, OZChannelBase *a2)
{
}

void sub_1B762189C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<TXChannelAlignment_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B762190C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void TXChannelAlignment_Factory::TXChannelAlignment_Factory(TXChannelAlignment_Factory *this)
{
  long long v3 = xmmword_1B7E78CE0;
  long long v4 = xmmword_1B7E78CD0;
  long long v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  void *v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F10AF450;
  *((void *)this + 16) = &unk_1F10AF520;
}

void sub_1B76219DC(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXChannelAlignment_Factory::create(TXChannelAlignment_Factory *this, const PCString *a2)
{
}

void sub_1B7621A50(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4091C539B7);
  _Unwind_Resume(a1);
}

void TXChannelAlignment_Factory::createCopy(TXChannelAlignment_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7621B08(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4091C539B7);
  _Unwind_Resume(a1);
}

void TXChannelAlignment_Factory::createChannelCopy(TXChannelAlignment_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7621BC0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4091C539B7);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::isExtraLineSpacingForDiacriticsEnabled(TXTextLayout *this)
{
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  int v2 = OZHostApplicationDelegateHandler::wantsExtraLineSpacingForDiacritics(HostApplicationDelegate);
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", @"enableExtraLineSpacingForDiacritics") | v2;
}

uint64_t TXTextLayout::dynamicLineSpacingForDiacriticsEnabled(TXTextLayout *this)
{
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  unsigned int v3 = OZHostApplicationDelegateHandler::wantsDynamicLineSpacingForDiacritics(HostApplicationDelegate);
  if (*((unsigned char *)this + 64392)) {
    return 1;
  }
  unsigned int v5 = v3;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 63416), MEMORY[0x1E4F1FA48], 0.0) == 1) {
    return 1;
  }
  else {
    return v5;
  }
}

uint64_t TXTextLayout::scaleEmojiToCapHeight(TXTextLayout *this)
{
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);

  return OZHostApplicationDelegateHandler::wantsToScaleEmojiToCapHeight(HostApplicationDelegate);
}

uint64_t TXTextLayout::createTextStyleFromAttributedString(uint64_t a1, OZChannel **a2, void *a3, unsigned int a4, unsigned int a5, unsigned int *a6, _DWORD *a7)
{
  v114.var4.int64_t var0 = (__CFString *)*MEMORY[0x1E4F143B8];
  uint64_t v8 = a5;
  uint64_t v9 = a4;
  long long v80 = objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E4F42508], a4, v113, 0, a5);
  uint64_t v84 = objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E4F42510], v9, v112, 0, v8);
  long long v95 = objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E4F42560], v9, v111, 0, v8);
  uint64_t v81 = objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E4F424D8], v9, v110, 0, v8);
  long long v94 = objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E4F42578], v9, v109, 0, v8);
  long long v85 = objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E4F42570], v9, v108, 0, v8);
  font = (const __CTFont *)objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E4F243F0], v9, v107, 0, v8);
  color = (CGColor *)objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E4F24740], v9, v106, 0, v8);
  long long v96 = objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E4F247C0], v9, v105, 0, v8);
  uint64_t v82 = objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", *MEMORY[0x1E4F247B8], v9, v104, 0, v8);
  long long v10 = objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", @"InvertBlack", v9, 0, 0, v8);
  if (v10) {
    int v92 = [v10 BOOLValue];
  }
  else {
    int v92 = 1;
  }
  long long v83 = objc_msgSend(a3, "attribute:atIndex:longestEffectiveRange:inRange:", MotionTextStyleAllCapsAttributeName, v9, v103, 0, v8);
  long long v87 = (void *)MEMORY[0x1E4F1C978];
  uint64_t v86 = [NSNumber numberWithUnsignedLong:v112[1] + v112[0]];
  uint64_t v11 = [NSNumber numberWithUnsignedLong:v113[1] + v113[0]];
  uint64_t v12 = [NSNumber numberWithUnsignedLong:v111[1] + v111[0]];
  uint64_t v13 = [NSNumber numberWithUnsignedLong:v110[1] + v110[0]];
  uint64_t v14 = [NSNumber numberWithUnsignedLong:v109[1] + v109[0]];
  uint64_t v15 = [NSNumber numberWithUnsignedLong:v108[1] + v108[0]];
  uint64_t v16 = [NSNumber numberWithUnsignedLong:v107[1] + v107[0]];
  uint64_t v17 = [NSNumber numberWithUnsignedLong:v106[1] + v106[0]];
  uint64_t v18 = [NSNumber numberWithUnsignedLong:v105[1] + v105[0]];
  uint64_t v19 = [NSNumber numberWithUnsignedLong:v104[1] + v104[0]];
  *a7 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v87, "arrayWithObjects:", v86, v11, v12, v13, v14, v15, v16, v17, v18, v19, objc_msgSend(NSNumber, "numberWithUnsignedLong:", v103[1] + v103[0]), 0), "sortedArrayUsingComparator:", &__block_literal_global_50),
                "objectAtIndex:",
                0),
          "unsignedIntValue")
      - a4;
  *a6 = a4;
  if (font)
  {
    uint64_t v20 = (__CFString *)CTFontCopyPostScriptName(font);
    uint64_t v21 = *a2;
    *(void *)&v99.var0.int64_t var0 = 0;
    PCString::set((PCString *)&v99, v20);
    (*((void (**)(OZChannel *, PCColor *, uint64_t))v21->var0 + 21))(v21, &v99, 1);
    PCString::~PCString((PCString *)&v99);

    long long v22 = *a2;
    double Size = CTFontGetSize(font);
    CMTime v102 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    OZChannel::setValue(v22 + 13, &v102, Size, 0);
  }
  else
  {
    long long v24 = *a2;
    PCURL::PCURL((PCURL *)&v99, (CFTypeRef)[v80 fontName]);
    (*((void (**)(OZChannel *, PCColor *, uint64_t))v24->var0 + 21))(v24, &v99, 1);
    PCString::~PCString((PCString *)&v99);
    uint64_t v25 = *a2;
    [v80 pointSize];
    CMTime v101 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    OZChannel::setValue(v25 + 13, &v101, v26, 0);
  }
  if (v83 && [v83 BOOLValue])
  {
    uint64_t v27 = *a2;
    CMTime v100 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    OZChannel::setValue((OZChannel *)((char *)v27 + 5504), &v100, 1.0, 0);
  }
  OZChannel::setValue((OZChannel *)((char *)*a2 + 6088), MEMORY[0x1E4F1FA48], 0.0, 0);
  ((void (*)(PCString *, uint64_t, void))(*a2)[39].var4.var0[3].info)(&(*a2)[39].var4, 1, 0);
  if (v96 && ([v96 floatValue], v28 > 0.0) || v94 && (objc_msgSend(v94, "floatValue"), v29 > 0.0)) {
    ((void (*)(PCString *, void, void))(*a2)[39].var4.var0[3].info)(&(*a2)[39].var4, 0, 0);
  }
  if (v96) {
    _ZF = v82 == 0;
  }
  else {
    _ZF = 1;
  }
  int v31 = !_ZF;
  if (v94) {
    BOOL v32 = v85 == 0;
  }
  else {
    BOOL v32 = 1;
  }
  if (!v32 || v31)
  {
    if (v31)
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F428B8], "colorWithCGColor:"), "getRed:green:blue:alpha:", &v114, &v114.var1, &v114.var2, &v114.var3);
      ColorSpace = CGColorGetColorSpace(color);
    }
    else
    {
      [v85 getRed:&v114 green:&v114.var1 blue:&v114.var2 alpha:&v114.var3];
      ColorSpace = CGColorSpaceCreateDeviceRGB();
      long long v96 = v94;
    }
    *(void *)&_Q0 = v114.var0;
    if (*(double *)&v114.var0 == 0.0) {
      int v35 = v92;
    }
    else {
      int v35 = 0;
    }
    if (v35 == 1)
    {
      *(void *)&_Q0 = v114.var1;
      if (*(double *)&v114.var1 == 0.0)
      {
        *(void *)&_Q0 = v114.var2;
        if (*(double *)&v114.var2 == 0.0)
        {
          __asm { FMOV            V0.2D, #1.0 }
          *(_OWORD *)&v114.int64_t var0 = _Q0;
          v114.var2 = (void **)0x3FF0000000000000;
        }
      }
    }
    objc_msgSend(v96, "floatValue", *(double *)&_Q0);
    float v40 = v39;
    (*((void (**)(OZChannelInfo **, uint64_t, void))(*a2)[148].var17 + 13))(&(*a2)[148].var17, 1, 0);
    (*((void (**)(OZChannelImpl **, void, void, double))(*a2)[149].var14 + 89))(&(*a2)[149].var14, MEMORY[0x1E4F1FA48], 0, 0.0);
    (*(void (**)(unint64_t *, void, void, double))((*a2)[181].var7 + 712))(&(*a2)[181].var7, MEMORY[0x1E4F1FA48], 0, fmaxf(ceilf(fabsf(v40)), 1.0));
    double v41 = *a2;
    float v42 = *(double *)&v114.var0;
    float v43 = *(double *)&v114.var1;
    float v44 = *(double *)&v114.var2;
    PCColor::PCColor(&v99, v42, v43, v44, 1.0, ColorSpace);
    (*(void (**)(unint64_t *, void, PCColor *, void))(v41[151].var8 + 840))(&v41[151].var8, MEMORY[0x1E4F1FA48], &v99, 0);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v99.var1._obj);
  }
  else
  {
    (*((void (**)(OZChannelInfo **, void, void))(*a2)[148].var17 + 13))(&(*a2)[148].var17, 0, 0);
  }
  double v45 = (void *)v84;
  if (v84 | (unint64_t)color)
  {
    if (color) {
      double v45 = objc_msgSend(MEMORY[0x1E4F428B8], "colorWithCGColor:");
    }
    [v45 getRed:&v114 green:&v114.var1 blue:&v114.var2 alpha:&v114.var3];
    double v46 = *(double *)&v114.var0;
    int v47 = v92;
    if (*(double *)&v114.var0 != 0.0) {
      int v47 = 0;
    }
    double v48 = *(double *)&v114.var1;
    double v49 = *(double *)&v114.var2;
    if (v47 == 1 && *(double *)&v114.var1 == 0.0 && *(double *)&v114.var2 == 0.0)
    {
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)&v114.int64_t var0 = _Q0;
      v114.var2 = (void **)0x3FF0000000000000;
      double v49 = 1.0;
      double v48 = 1.0;
      double v46 = 1.0;
    }
    p_var14 = (OZChannelColorNoAlpha *)&(*a2)[41].var14;
    OZChannelColorNoAlpha::getPCColorSpace(p_var14, &v98);
    float v52 = v46;
    float v53 = v48;
    float v54 = v49;
    PCColor::PCColor(&v99, v52, v53, v54, 1.0, (OZChannelBase *)&v98);
    (*(void (**)(OZChannelColorNoAlpha *, void, PCColor *, void))(*(void *)p_var14 + 840))(p_var14, MEMORY[0x1E4F1FA48], &v99, 0);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v99.var1._obj);
    double v55 = &v98;
  }
  else
  {
    double v56 = (OZChannelColorNoAlpha *)&(*a2)[41].var14;
    OZChannelColorNoAlpha::getPCColorSpace(v56, (CGColorSpace **)&v114);
    PCColor::PCColor(&v99, 1.0, 1.0, 1.0, 1.0, &v114);
    (*(void (**)(OZChannelColorNoAlpha *, void, PCColor *, void))(*(void *)v56 + 840))(v56, MEMORY[0x1E4F1FA48], &v99, 0);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v99.var1._obj);
    double v55 = (CGColorSpace **)&v114;
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(v55);
  if (v95)
  {
    objc_msgSend((id)objc_msgSend(v95, "shadowColor"), "getRed:green:blue:alpha:", &v114, &v114.var1, &v114.var2, &v114.var3);
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    *(void *)&_Q0 = v114.var0;
    if (*(double *)&v114.var0 == 0.0) {
      int v59 = v92;
    }
    else {
      int v59 = 0;
    }
    if (v59 == 1)
    {
      *(void *)&_Q0 = v114.var1;
      if (*(double *)&v114.var1 == 0.0)
      {
        *(void *)&_Q0 = v114.var2;
        if (*(double *)&v114.var2 == 0.0)
        {
          __asm { FMOV            V0.2D, #1.0 }
          *(_OWORD *)&v114.int64_t var0 = _Q0;
          v114.var2 = (void **)0x3FF0000000000000;
        }
      }
    }
    objc_msgSend(v95, "shadowOffset", *(double *)&_Q0);
    float v61 = v60;
    float v63 = v62;
    if (v61 == 0.0)
    {
      double v64 = 4.71238898;
      if (v63 >= 0.0) {
        double v64 = 0.0;
      }
      if (v63 <= 0.0) {
        double v65 = v64;
      }
      else {
        double v65 = 1.57079633;
      }
      float v66 = fabsf(v63);
      float64x2_t v67 = v95;
    }
    else
    {
      double v64 = atanf(v63 / v61);
      if ((v61 >= 0.0 || v63 <= 0.0) && (v61 >= 0.0 || v63 >= 0.0))
      {
        if (v63 >= 0.0 || v61 <= 0.0) {
          double v65 = v64;
        }
        else {
          double v65 = v64 + 6.28318531;
        }
      }
      else
      {
        double v65 = v64 + 3.14159265;
      }
      float64x2_t v67 = v95;
      if (v63 == 0.0)
      {
        float v66 = fabsf(v61);
      }
      else
      {
        *(float *)&double v64 = (float)(v61 * v61) + (float)(v63 * v63);
        float v66 = sqrtf(*(float *)&v64);
      }
    }
    float64x2_t v69 = *a2;
    objc_msgSend(v67, "shadowBlurRadius", v64);
    double v71 = v70;
    [v95 shadowBlurRadius];
    OZChannel2D::setValue((OZChannel2D *)&v69[119].var13, MEMORY[0x1E4F1FA48], v71 * 0.5, v72 * 0.5);
    long long v73 = *a2;
    float v74 = *(double *)&v114.var0;
    float v75 = *(double *)&v114.var1;
    float v76 = *(double *)&v114.var2;
    PCColor::PCColor(&v99, v74, v75, v76, 1.0, DeviceRGB);
    ((void (*)(__CFString **, void, PCColor *, void))v73[93].var12[26].info)(&v73[93].var12, MEMORY[0x1E4F1FA48], &v99, 0);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v99.var1._obj);
    (*((void (**)(OZChannelTimeConverter **, void, void, double))(*a2)[118].var13 + 89))(&(*a2)[118].var13, MEMORY[0x1E4F1FA48], 0, *(double *)&v114.var3);
    (*((void (**)(void **, void, void, double))(*a2)[127].var9 + 89))(&(*a2)[127].var9, MEMORY[0x1E4F1FA48], 0, v65);
    (*((void (**)(void **, void, void, double))(*a2)[126].var9 + 89))(&(*a2)[126].var9, MEMORY[0x1E4F1FA48], 0, v66);
    (*((void (**)(void ***, uint64_t, void))(*a2)[91].var2 + 13))(&(*a2)[91].var2, 1, 0);
  }
  else
  {
    (*((void (**)(void ***, void, void))(*a2)[91].var2 + 13))(&(*a2)[91].var2, 0, 0);
  }
  long long v77 = *a2;
  [v81 floatValue];
  return (*((uint64_t (**)(OZChannelInfo **, void, void, double))v77[16].var16 + 89))(&v77[16].var16, MEMORY[0x1E4F1FA48], 0, v78);
}

void sub_1B7622A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,PCString a40)
{
}

uint64_t ___ZN12TXTextLayout35createTextStyleFromAttributedStringERKNSt3__110shared_ptrI11TXTextStyleEEP18NSAttributedStringjjPjS8__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compare:");
}

uint64_t TXTextLayout::createAttributedString(TXTextLayout *this, CMTime *a2, int a3)
{
  long long v6 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v15, v6);
  PCSharedCount::PCSharedCount(&v14);
  TXTextLayout::getString((PCString *)this, (PCString *)&v14);
  long long v7 = (NSMutableAttributedString *)[objc_alloc(MEMORY[0x1E4F28E48]) initWithString:PCString::ns_str((PCString *)&v14)];
  unsigned int v8 = PCString::size((PCString *)&v14);
  TXTextLayout::applyTextStylesToAttributedString(this, v7, a2, 0, v8, a3);
  unsigned int v9 = PCString::size((PCString *)&v14);
  v16.CFIndex location = 0;
  v16.CFIndex length = v9;
  TXTextLayout::applyKerningAndTrackingToAttributedString(this, (__CFAttributedString *)v7, a2, &v16);
  int v10 = PCString::size((PCString *)&v14);
  TXTextLayout::applyParagraphStylesToAttributedString(this, v7, a2, 0, v10);
  TXTextLayout::applyCustomLayoutInformationToAttributedString(this, v7, a2);
  uint64_t v11 = [(NSMutableAttributedString *)v7 length];
  v16.CFIndex location = MEMORY[0x1E4F143A8];
  v16.CFIndex length = *(void *)"";
  uint64_t v17 = ___ZN12TXTextLayout45applySimpleValuesDictionaryToAttributedStringEP25NSMutableAttributedString_block_invoke;
  uint64_t v18 = &unk_1E616BCD8;
  uint64_t v19 = v7;
  -[NSMutableAttributedString enumerateAttributesInRange:options:usingBlock:](v7, "enumerateAttributesInRange:options:usingBlock:", 0, v11, 0, &v16);
  uint64_t v12 = [objc_alloc(MEMORY[0x1E4F28B18]) initWithAttributedString:v7];

  PCString::~PCString((PCString *)&v14);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v15);
  return v12;
}

void sub_1B7622C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11)
{
}

void TXTextLayout::applyTextStylesToAttributedString(TXTextLayout *this, NSMutableAttributedString *a2, CMTime *a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned int v136 = a4;
  unsigned int v137 = a5;
  uint64_t v133 = (uint64_t)&v133;
  long long v134 = &v133;
  uint64_t v135 = 0;
  TXTextLayout::getStylesInRange(this, &v133, &v136);
  uint64_t v110 = *MEMORY[0x1E4F42528];
  if (v134 == &v133)
  {
    char v118 = 1;
  }
  else
  {
    unsigned int v9 = v136;
    uint64_t v10 = *MEMORY[0x1E4F42510];
    uint64_t v108 = *MEMORY[0x1E4F42508];
    uint64_t v123 = *MEMORY[0x1E4F42560];
    uint64_t v121 = *MEMORY[0x1E4F42578];
    uint64_t v11 = v134;
    uint64_t v120 = *MEMORY[0x1E4F42570];
    uint64_t v109 = *MEMORY[0x1E4F424D8];
    char v118 = 1;
    uint64_t v111 = *MEMORY[0x1E4F42510];
    int v112 = a6;
    do
    {
      double v113 = v11;
      uint64_t v13 = v11[2];
      uint64_t v12 = (std::__shared_weak_count *)v11[3];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v122 = v12;
      uint64_t StyleRunAtCharOffset = TXTextLayout::getStyleRunAtCharOffset(this, v9);
      unsigned int v15 = *(_DWORD *)(StyleRunAtCharOffset + 24);
      if ((double)v9 >= (double)v15) {
        double v17 = (double)v9;
      }
      else {
        double v17 = (double)v15;
      }
      int v16 = *(_DWORD *)(StyleRunAtCharOffset + 28);
      unsigned int v18 = v136;
      if ((double)(v16 + v15) <= (double)(v137 + v136)) {
        double v19 = (double)(v16 + v15);
      }
      else {
        double v19 = (double)(v137 + v136);
      }
      PCColor::PCColor((PCColor *)&v131.var12);
      v131.var11 = 0;
      v131.var10 = 0;
      (*(void (**)(uint64_t, CMTime *, __CFString **))(*(void *)(v13 + 6344) + 832))(v13 + 6344, a3, &v131.var12);
      uint64_t v117 = v13;
      uint64_t v115 = StyleRunAtCharOffset;
      int isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 28720), 0, 1);
      char v21 = isEnabled;
      double v116 = (TXTextLayout *)(v17 - (double)v18);
      uint64_t v22 = (v19 - (double)v18) - v116;
      uint64_t v125 = v22;
      if (!isEnabled) {
        uint64_t v22 = 1;
      }
      if (v22)
      {
        unint64_t v23 = (v17 - (double)v18);
        unint64_t v24 = (unint64_t)v116 + v22;
        uint64_t v25 = (OZChannel *)(v13 + 10152);
        do
        {
          if (v21)
          {
            TXTextLayout::getTextObjectWithCharOffset((uint64_t *)&v151.var7, this, v23, 1, 0);
            if (v151.var7)
            {
              uint64_t v26 = *(unsigned int *)(v151.var7 + 740);
              PCColor::getColorSpace((PCColor *)&v131.var12, (CGColorSpace **)&v151);
              PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v152, &v151);
              PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v151);
              LODWORD(v27) = *(_DWORD *)(v151.var7 + 736);
              TXTextObject::getFaceColor((TXTextObject *)v151.var7, a3, (double)v27, (PCColorSpaceCache **)&v152);
              PCWorkingColor::getRGBA((PCWorkingColor *)&v152, (float *)&v131.var11 + 1, (float *)&v131.var11, (float *)&v131.var10 + 1, (float *)&v131.var10);
              PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v152.var0.var3);
            }
            else
            {
              uint64_t v26 = 1;
            }
            if (v151.var8) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v151.var8);
            }
            uint64_t v29 = v26;
          }
          else
          {
            PCColor::getColorSpace((PCColor *)&v131.var12, (CGColorSpace **)&v152);
            PCColor::getRGB((PCColor *)&v131.var12, (float *)&v131.var11 + 1, (float *)&v131.var11, (float *)&v131.var10 + 1, (const PCColorSpaceHandle *)&v152);
            PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v152);
            *(_OWORD *)&v131.var7 = *(_OWORD *)&a3->value;
            v131.var9 = (void *)a3->epoch;
            OZChannel::getValueAsDouble(v25, (const CMTime *)&v131.var7, 0.0);
            *(float *)&double v28 = v28;
            LODWORD(v131.var10) = LODWORD(v28);
            uint64_t v26 = v125;
            uint64_t v29 = 1;
          }
          float v30 = *((float *)&v131.var11 + 1);
          float v31 = *(float *)&v131.var11;
          float v32 = *((float *)&v131.var10 + 1);
          if (a6)
          {
            BOOL v33 = *((float *)&v131.var11 + 1) == 1.0 && *(float *)&v131.var11 == 1.0;
            if (v33 && *((float *)&v131.var10 + 1) == 1.0)
            {
              v131.var11 = 0;
              float v32 = 0.0;
              float v31 = 0.0;
              float v30 = 0.0;
              HIDWORD(v131.var10) = 0;
            }
          }
          -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v10, [MEMORY[0x1E4F428B8] colorWithRed:v30 green:v31 blue:v32 alpha:*(float *)&v131.var10], v23, v26);
          v23 += v29;
        }
        while (v23 < v24);
      }
      uint64_t v35 = *(void *)(v117 + 520);
      double v36 = *(std::__shared_weak_count **)(v117 + 528);
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      OZChannelBase v114 = v36;
      double v37 = (const PCString *)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 16))(v35);
      PCString::PCString((PCString *)&v131.var6, v37);
      *(_OWORD *)&v131.int64_t var3 = *(_OWORD *)&a3->value;
      v131.var5 = (PCString *)a3->epoch;
      float Size = TXTextStyle::getSize((OZChannel *)v117, (CMTime *)&v131.var3, 0.0);
      float v39 = PCString::cf_str((PCString *)&v131.var6);
      double v40 = Size;
      CTFontRef v41 = OZCreateFontWithName(v39, v40, 0);
      if (v41) {
        -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v108, v41, v116, v125);
      }

      if (OZChannel::getValueAsInt((OZChannel *)(v117 + 5504), MEMORY[0x1E4F1FA48], 0.0)) {
        -[NSMutableAttributedString replaceCharactersInRange:withString:](a2, "replaceCharactersInRange:withString:", v116, v125, objc_msgSend((id)objc_msgSend((id)-[NSMutableAttributedString string](a2, "string"), "substringWithRange:", v116, v125), "localizedUppercaseString"));
      }
      if (OZChannel::getValueAsInt((OZChannel *)(v117 + 5504), MEMORY[0x1E4F1FA48], 0.0)) {
        -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", MotionTextStyleAllCapsAttributeName, &unk_1F11EC3B8, v116, v125);
      }
      else {
        -[NSMutableAttributedString removeAttribute:range:](a2, "removeAttribute:range:", MotionTextStyleAllCapsAttributeName, v116, v125);
      }
      -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v110, &unk_1F11EC3D0, v116, v125);
      int v42 = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 45048), 0, 1);
      if ((OZChannelBase::isEnabled((OZChannelBase *)(v117 + 13848), 0, 1) | v42) == 1)
      {
        uint64_t v43 = v125;
        if (!v42) {
          uint64_t v43 = 1;
        }
        if (v43)
        {
          unint64_t v44 = (unint64_t)v116 + v43;
          long long v119 = (OZChannel *)(v117 + 19528);
          double v45 = v116;
          do
          {
            if (v42)
            {
              TXTextLayout::getTextObject(this, v45, &v131.var1);
              PCColor::getColorSpace((PCColor *)&v131.var12, (CGColorSpace **)&v131);
              if (v131.var1
                && (CMTime v150 = *a3, TXTextObject::isDropShadowEnabled((TXTextObject *)v131.var1, &v150)))
              {
                PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v146, &v131);
                CMTime v149 = *a3;
                if (TXTextObject::isDropShadowVisible((TXTextObject *)v131.var1, &v149, (PCWorkingColor *)&v146))
                {
                  uint64_t v145 = 0;
                  uint64_t v144 = 0;
                  PCWorkingColor::getRGBA((PCWorkingColor *)&v146, (float *)&v145 + 1, (float *)&v145, (float *)&v144 + 1, (float *)&v144);
                  PCColor::PCColor((PCColor *)&v151.var7);
                  PCColor::setRGBA((PCColor *)&v151.var7, *((float *)&v145 + 1), *(float *)&v145, *((float *)&v144 + 1), *(float *)&v144, &v131);
                  CMTime v147 = *a3;
                  double DropShadowDistance = TXTextObject::getDropShadowDistance((TXTextObject *)v131.var1, &v147);
                  *(_OWORD *)&v146.var10 = *(_OWORD *)&a3->value;
                  v146.int var12 = (__CFString *)a3->epoch;
                  double DropShadowAngle = TXTextObject::getDropShadowAngle((TXTextObject *)v131.var1, (CMTime *)&v146.var10);
                  double v148 = 0.0;
                  double v143 = 0.0;
                  *(_OWORD *)&v146.var6 = *(_OWORD *)&a3->value;
                  v146.var8 = a3->epoch;
                  TXTextObject::getDropShadowBlur((TXTextObject *)v131.var1, (CMTime *)&v146.var6, &v148, &v143);
                  OZRenderState::OZRenderState(&v152);
                  *(_OWORD *)&v152.var0.int64_t var0 = *(_OWORD *)&a3->value;
                  v152.var0.int64_t var3 = a3->epoch;
                  double v142 = 0.0;
                  double v141 = 0.0;
                  uint64_t v48 = *(void *)(*((void *)v131.var1 + 68) + 200);
                  v140[1] = 0.0;
                  (*(void (**)(void))(v48 + 1312))();
                  if (v142 > 0.0)
                  {
                    BOOL isDropShadowFixedSource = TXTextObject::isDropShadowFixedSource((TXTextObject *)v131.var1, a3);
                    double v50 = 1.0;
                    if (isDropShadowFixedSource) {
                      double v50 = v142;
                    }
                    double v148 = v148 / v142;
                    double v143 = v143 / v141;
                    double DropShadowDistance = DropShadowDistance / v50;
                  }
                  v140[0] = 0.0;
                  double v139 = 0.0;
                  CMTime v138 = *a3;
                  TXTextObject::getDropShadowScale((TXTextObject *)v131.var1, &v138, v140, &v139, 1);
                  double v51 = v148;
                  double v52 = v143;
                  double v53 = v140[0];
                  double v54 = v139;
                  *(_OWORD *)&v151.int64_t var0 = *(_OWORD *)&v151.var7;
                  *(_OWORD *)&v151.var2 = *(_OWORD *)&v151.var9;
                  *(_OWORD *)&v151.var4.int64_t var0 = *(_OWORD *)&v151.var11;
                  v151.var6 = (OZChannelFolder *)v151.var13;
                  if (v151.var13) {
                    PCCFRefTraits<CGColorSpace *>::retain((CGColorSpaceRef)v151.var13);
                  }
                  id v55 = newNSShadow(DropShadowDistance, DropShadowAngle, v51, v52, v53, v54, (PCColor *)&v151);
                  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v151.var6);
                  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v151.var13);
                }
                else
                {
                  id v55 = 0;
                }
                PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v146.var2);
              }
              else
              {
                id v55 = 0;
              }
              PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v131);
              BOOL v73 = TXTextObject::isDropShadowFixedSource((TXTextObject *)v131.var1, a3);
              if (v131.var2) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v131.var2);
              }
              uint64_t v74 = 1;
            }
            else
            {
              if (v122) {
                atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (OZChannelBase::isEnabled((OZChannelBase *)(v117 + 13848), 0, 1))
              {
                *(_OWORD *)&v146.int64_t var0 = *(_OWORD *)&a3->value;
                v146.var2 = (void **)a3->epoch;
                OZChannel::getValueAsDouble((OZChannel *)(v117 + 19224), (const CMTime *)&v146, 0.0);
                double v57 = v56;
                CMTime v150 = *a3;
                OZChannel::getValueAsDouble((OZChannel *)(v117 + 19376), &v150, 0.0);
                double v59 = v58;
                CMTime v149 = *a3;
                OZChannel::getValueAsDouble((OZChannel *)(v117 + 18328), &v149, 0.0);
                double v61 = v60;
                OZChannel::getValueAsDouble((OZChannel *)(v117 + 18480), &v149, 0.0);
                double v63 = v62;
                OZRenderState::OZRenderState(&v152);
                *(_OWORD *)&v152.var0.int64_t var0 = *(_OWORD *)&a3->value;
                v152.var0.int64_t var3 = a3->epoch;
                v138.CMTimeValue value = 0;
                v131.var1 = 0;
                uint64_t v64 = *(void *)(*(void *)(v117 + 48944) + 200);
                double v148 = 0.0;
                (*(void (**)(void))(v64 + 1312))();
                if (*(double *)&v138.value > 0.0)
                {
                  int ValueAsInt = OZChannel::getValueAsInt(v119, MEMORY[0x1E4F1FA48], 0.0);
                  double v66 = 1.0;
                  if (ValueAsInt) {
                    double v66 = *(double *)&v138.value;
                  }
                  double v57 = v57 / v66;
                  double v61 = v61 / *(double *)&v138.value;
                  double v63 = v63 / *(double *)&v131.var1;
                }
                CMTime v147 = *a3;
                OZChannel::getValueAsDouble((OZChannel *)(v117 + 18920), &v147, 0.0);
                double v68 = v67;
                OZChannel::getValueAsDouble((OZChannel *)(v117 + 19072), &v147, 0.0);
                double v70 = v69;
                PCColor::PCColor((PCColor *)&v151.var7);
                *(_OWORD *)&v146.var10 = *(_OWORD *)&a3->value;
                v146.int var12 = (__CFString *)a3->epoch;
                OZChannelColorNoAlpha::getColor((OZChannelColorNoAlpha *)(v117 + 14232), (const CMTime *)&v146.var10, (PCColor *)&v151.var7, 0.0);
                *(_OWORD *)&v146.var6 = *(_OWORD *)&a3->value;
                v146.var8 = a3->epoch;
                OZChannel::getValueAsDouble((OZChannel *)(v117 + 18040), (const CMTime *)&v146.var6, 0.0);
                float v72 = v71 * PCColor::getAlpha((PCColor *)&v151.var7);
                PCColor::setAlpha((PCColor *)&v151.var7, v72);
                *(_OWORD *)&v151.int64_t var0 = *(_OWORD *)&v151.var7;
                *(_OWORD *)&v151.var2 = *(_OWORD *)&v151.var9;
                *(_OWORD *)&v151.var4.int64_t var0 = *(_OWORD *)&v151.var11;
                v151.var6 = (OZChannelFolder *)v151.var13;
                if (v151.var13) {
                  PCCFRefTraits<CGColorSpace *>::retain((CGColorSpaceRef)v151.var13);
                }
                id v55 = newNSShadow(v57, v59, v61, v63, v68, v70, (PCColor *)&v151);
                PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v151.var6);
                PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v151.var13);
              }
              else
              {
                id v55 = 0;
              }
              if (v122) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v122);
              }
              BOOL v73 = OZChannel::getValueAsInt(v119, MEMORY[0x1E4F1FA48], 0.0) != 0;
              uint64_t v74 = v125;
            }
            -[NSMutableAttributedString removeAttribute:range:](a2, "removeAttribute:range:", v123, v45, v74);
            [(NSMutableAttributedString *)a2 removeAttribute:@"TXTextDropShadowIsFixedSource", v45, v74 range];
            if (v55)
            {
              -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v123, v55, v45, v74);
              -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", @"TXTextDropShadowIsFixedSource", [NSNumber numberWithBool:v73], v45, v74);

              char v118 = 0;
            }
            double v45 = (TXTextLayout *)((char *)v45 + 1);
          }
          while ((unint64_t)v45 < v44);
        }
      }
      a6 = v112;
      uint64_t v10 = v111;
      uint64_t v75 = v115;
      int v76 = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 33424), 0, 1);
      if ((OZChannelBase::isEnabled((OZChannelBase *)(v117 + 22632), 0, 1) | v76) == 1)
      {
        uint64_t v77 = v125;
        if (!v76) {
          uint64_t v77 = 1;
        }
        v151.int64_t var0 = 0;
        if (v77)
        {
          float v78 = v116;
          unint64_t v79 = (unint64_t)v116 + v77;
          if (v76) {
            uint64_t v80 = 1;
          }
          else {
            uint64_t v80 = v125;
          }
          do
          {
            if (v76)
            {
              TXTextLayout::getTextObject(this, v78, &v151.var7);
              PCColor::getColorSpace((PCColor *)&v131.var12, (CGColorSpace **)&v146);
              PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v152, &v146);
              PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v146);
              CMTime v127 = *a3;
              TXTextObject::isOutlineVisible((TXTextObject *)v151.var7, &v127, (PCWorkingColor *)&v152, (double *)&v151);
              PCWorkingColor::getRGBA((PCWorkingColor *)&v152, (float *)&v131.var11 + 1, (float *)&v131.var11, (float *)&v131.var10 + 1, (float *)&v131.var10);
              PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v152.var0.var3);
              if (v151.var8) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v151.var8);
              }
            }
            else
            {
              CMTime v130 = *a3;
              OZChannel::getValueAsDouble((OZChannel *)(v117 + 27568), &v130, 0.0);
              v151.int64_t var0 = v81;
              CMTime v129 = *a3;
              OZChannelColorNoAlpha::getColor((OZChannelColorNoAlpha *)(v117 + 23016), &v129, (PCColor *)&v131.var12, 0.0);
              PCColor::getColorSpace((PCColor *)&v131.var12, (CGColorSpace **)&v152);
              PCColor::getRGB((PCColor *)&v131.var12, (float *)&v131.var11 + 1, (float *)&v131.var11, (float *)&v131.var10 + 1, (const PCColorSpaceHandle *)&v152);
              PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v152);
              CMTime v128 = *a3;
              OZChannel::getValueAsDouble((OZChannel *)(v117 + 26824), &v128, 0.0);
              *(float *)&double v82 = v82;
              LODWORD(v131.var10) = LODWORD(v82);
            }
            double v83 = fmax(*(double *)&v151.var0 * v40 * 0.01, 1.0);
            *(double *)&v151.int64_t var0 = v83;
            int v84 = OZChannelBase::isEnabled((OZChannelBase *)(v117 + 5960), 0, 1);
            double v85 = 0.0 - v83;
            if (!v84) {
              double v85 = *(double *)&v151.var0;
            }
            -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v121, [NSNumber numberWithDouble:v85], v78, v80);
            -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v120, [MEMORY[0x1E4F428B8] colorWithRed:*((float *)&v131.var11 + 1) green:*(float *)&v131.var11 blue:*((float *)&v131.var10 + 1) alpha:*(float *)&v131.var10], v78, v80);
            float v78 = (TXTextLayout *)((char *)v78 + 1);
          }
          while ((unint64_t)v78 < v79);
        }
        a6 = v112;
        uint64_t v10 = v111;
        uint64_t v75 = v115;
      }
      uint64_t v86 = NSNumber;
      CMTime v126 = *a3;
      OZChannel::getValueAsDouble((OZChannel *)(v117 + 2560), &v126, 0.0);
      *(float *)&double v87 = v87;
      -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v109, [v86 numberWithFloat:v87], v116, v125);
      int v88 = *(_DWORD *)(v75 + 24);
      int v89 = *(_DWORD *)(v75 + 28);
      PCString::~PCString((PCString *)&v131.var6);
      if (v114) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v114);
      }
      PCCFRef<CGColorSpace *>::~PCCFRef(&v132);
      if (v122) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v122);
      }
      unsigned int v9 = v89 + v88;
      uint64_t v11 = (uint64_t *)v113[1];
    }
    while (v11 != &v133);
  }
  -[NSMutableAttributedString removeAttribute:range:](a2, "removeAttribute:range:", v110, a4, a5);
  -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v110, MEMORY[0x1E4F1CC28], a4, a5);
  if (v118)
  {
    uint64_t v90 = (const void *)*((void *)this + 145);
    if (v90)
    {
      if (v91)
      {
        int v92 = v91;
        uint64_t v93 = *MEMORY[0x1E4F42560];
        -[NSMutableAttributedString removeAttribute:range:](a2, "removeAttribute:range:", *MEMORY[0x1E4F42560], a4, a5);
        [(NSMutableAttributedString *)a2 removeAttribute:@"TXTextDropShadowIsFixedSource", a4, a5 range];
        if ((*(uint64_t (**)(OZElement *))(*(void *)v92 + 1624))(v92))
        {
          OZElement::getDropShadowDistance(v92, a3);
          double v95 = v94;
          OZElement::getDropShadowAngle(v92, a3);
          double v97 = v96;
          OZElement::getDropShadowBlur(v92, a3);
          double v99 = v98;
          OZRenderState::OZRenderState(&v152);
          *(_OWORD *)&v152.var0.int64_t var0 = *(_OWORD *)&a3->value;
          v152.var0.int64_t var3 = a3->epoch;
          v131.int var12 = 0;
          v146.int64_t var0 = 0;
          v150.CMTimeValue value = 0;
          (*(void (**)(OZElement *, __CFString **, OZChannelBase *, CMTime *, OZRenderState *, uint64_t))(*(void *)v92 + 1312))(v92, &v131.var12, &v146, &v150, &v152, 1);
          if (*(double *)&v131.var12 > 0.0)
          {
            BOOL v100 = OZElement::isDropShadowFixedSource(v92, a3);
            double v101 = 1.0;
            if (v100) {
              double v101 = *(double *)&v131.var12;
            }
            double v95 = v95 / v101;
            double v99 = v99 / *(double *)&v131.var12;
          }
          OZElement::getDropShadowColor(v92, a3, (PCColor *)&v151.var7);
          OZElement::getDropShadowOpacity(v92, a3);
          float v103 = v102 * PCColor::getAlpha((PCColor *)&v151.var7);
          PCColor::setAlpha((PCColor *)&v151.var7, v103);
          *(_OWORD *)&v151.int64_t var0 = *(_OWORD *)&v151.var7;
          *(_OWORD *)&v151.var2 = *(_OWORD *)&v151.var9;
          *(_OWORD *)&v151.var4.int64_t var0 = *(_OWORD *)&v151.var11;
          v151.var6 = (OZChannelFolder *)v151.var13;
          if (v151.var13) {
            PCCFRefTraits<CGColorSpace *>::retain((CGColorSpaceRef)v151.var13);
          }
          id v104 = newNSShadow(v95, v97, v99, v99, 1.0, 1.0, (PCColor *)&v151);
          PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v151.var6);
          PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v151.var13);
          if (v104)
          {
            BOOL v105 = OZElement::isDropShadowFixedSource(v92, a3);
            -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v93, v104, a4, a5);
            -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", @"TXTextDropShadowIsFixedSource", [NSNumber numberWithBool:v105], a4, a5);
          }
        }
      }
    }
  }
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear(&v133);
}

void sub_1B7623EF8(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&STACK[0x418]);
  std::__list_imp<std::shared_ptr<TXTextStyle>>::clear((uint64_t *)&STACK[0x260]);
  _Unwind_Resume(a1);
}

void TXTextLayout::applyParagraphStylesToAttributedString(TXTextLayout *this, NSMutableAttributedString *a2, const CMTime *a3, unsigned int a4, int a5)
{
  unsigned int v5 = a5 + a4;
  if (a5 + a4 > a4)
  {
    unsigned int v6 = a4;
    double v9 = (double)a4;
    uint64_t v10 = (double *)((char *)this + 64400);
    uint64_t v11 = *MEMORY[0x1E4F42540];
    uint64_t v12 = (CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      uint64_t ParagraphStyleContainingOffset = TXTextLayout::getParagraphStyleContainingOffset(this, v6);
      id v14 = objc_alloc_init(MEMORY[0x1E4F42670]);
      unint64_t v15 = *(void *)(ParagraphStyleContainingOffset + 856);
      if ((double)v6 >= (double)v15) {
        double v16 = (double)v6;
      }
      else {
        double v16 = (double)v15;
      }
      unint64_t v17 = *(void *)(ParagraphStyleContainingOffset + 864) + v15;
      if ((double)v17 <= (double)v5) {
        double v18 = (double)v17;
      }
      else {
        double v18 = (double)v5;
      }
      if ((int)TXParagraphStyle::getAlignment((TXParagraphStyle *)ParagraphStyleContainingOffset) <= 2)
      {
        int Alignment = TXParagraphStyle::getAlignment((TXParagraphStyle *)ParagraphStyleContainingOffset);
        if (Alignment == 2) {
          uint64_t v19 = 2;
        }
        else {
          uint64_t v19 = Alignment == 1;
        }
      }
      else
      {
        uint64_t v19 = 3;
      }
      [v14 setAlignment:v19];
      CMTime v23 = *v12;
      OZChannel::getValueAsDouble((OZChannel *)(ParagraphStyleContainingOffset + 680), &v23, 0.0);
      objc_msgSend(v14, "setLineSpacing:", v21 * (*(double (**)(TXTextLayout *, const CMTime *))(*(void *)this + 712))(this, a3) + *v10);
      -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", v11, v14, (v16 - v9), (v18 - v9) - (v16 - v9));

      unsigned int v6 = *(_DWORD *)(ParagraphStyleContainingOffset + 864) + *(_DWORD *)(ParagraphStyleContainingOffset + 856);
    }
    while (v5 > v6);
  }
}

void TXTextLayout::applyCustomLayoutInformationToAttributedString(TXTextLayout *this, NSMutableAttributedString *a2, const CMTime *a3)
{
  v46[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = [(NSMutableAttributedString *)a2 length];
  uint64_t ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 21368), MEMORY[0x1E4F1FA48], 0.0);
  if (ValueAsInt)
  {
    OZRenderState::OZRenderState(&v40);
    *(_OWORD *)&v40.var0.int64_t var0 = *(_OWORD *)&a3->value;
    v40.var0.int64_t var3 = a3->epoch;
    TXTextLayout::doLayout(this, &v40, 0);
    v38[0] = 0;
    v38[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v39 = _Q0;
    TXTextLayout::getTypographicBounds((uint64_t)this, (uint64_t)v38, (CMTime *)&v40, 1, 1);
    double v13 = *((double *)&v39 + 1);
    if (TXTextLayout::_computeTypographicHeightWithoutLastLineLeading(this)) {
      double v13 = v13 - TXTextLayout::_lastLineLeading(this);
    }
    if (v13 > 0.0)
    {
      double v45 = @"TXTextHeight";
      v46[0] = [NSNumber numberWithDouble:v13];
      -[NSMutableAttributedString addAttributes:range:](a2, "addAttributes:range:", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v46 forKeys:&v45 count:1], 0, v6);
    }
    uint64_t v43 = @"TXTextHeightWithLastLineLeading";
    uint64_t v44 = [NSNumber numberWithDouble:v13 + TXTextLayout::_lastLineLeading(this)];
    -[NSMutableAttributedString addAttributes:range:](a2, "addAttributes:range:", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v44 forKeys:&v43 count:1], 0, v6);
  }
  uint64_t v14 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 61208), MEMORY[0x1E4F1FA48], 0.0);
  double XMarginScale = TXTextLayout::getXMarginScale(this);
  double YMarginScale = TXTextLayout::getYMarginScale(this);
  double v17 = (*(double (**)(TXTextLayout *, void))(*(void *)this + 712))(this, MEMORY[0x1E4F1FA48]);
  double v18 = *((double *)this + 8050);
  v41[0] = @"TXTextVerticalAlignment";
  uint64_t v19 = [NSNumber numberWithInt:ValueAsInt];
  v41[1] = @"TXTextMarginScaleOption";
  v42[0] = v19;
  v42[1] = [NSNumber numberWithInt:v14];
  -[NSMutableAttributedString addAttributes:range:](a2, "addAttributes:range:", [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v42 forKeys:v41 count:2], 0, v6);
  if (XMarginScale != 1.0) {
    -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", @"TXTextHorizontalScaleFactor", [NSNumber numberWithDouble:XMarginScale], 0, v6);
  }
  if (YMarginScale != 1.0) {
    -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", @"TXTextVerticalScaleFactor", [NSNumber numberWithDouble:YMarginScale], 0, v6);
  }
  if (v17 != 1.0) {
    -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", @"TXTextBothMarginScaleFactor", [NSNumber numberWithDouble:v17], 0, v6);
  }
  if (v18 != 0.0) {
    -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", @"TXTextDynamicLineSpacing", [NSNumber numberWithDouble:v18], 0, v6);
  }
  -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", @"TXNumSoftLines", [NSNumber numberWithUnsignedInt:NumLinesInParagraphs(this)], 0, v6);
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  int v21 = OZHostApplicationDelegateHandler::wantsToIncludeSubstituteFontNameInAttributedString(HostApplicationDelegate);
  int v22 = OZHostApplicationDelegateHandler::wantsToIncludeTrackingValueInAttributedString(HostApplicationDelegate);
  if ((v21 | v22) == 1 && ((*((void *)this + 7354) - *((void *)this + 7353)) & 0xFFFFFFFF0) != 0)
  {
    CMTime v23 = 0;
    while (1)
    {
      TXTextLayout::getTextObject(this, v23, &v40);
      if ((TXTextObject::isEmoji((TXTextObject *)v40.var0.var0) & 1) == 0) {
        break;
      }
      if (*(void *)&v40.var0.var1) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v40.var0.var1);
      }
      CMTime v23 = (TXTextLayout *)((char *)v23 + 1);
      if ((unint64_t)v23 >= ((*((void *)this + 7354) - *((void *)this + 7353)) >> 4)) {
        return;
      }
    }
    int64_t var0 = (void *)v40.var0.var0;
    unint64_t v24 = *(std::__shared_weak_count **)&v40.var0.var1;
    if (*(void *)&v40.var0.var1)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v40.var0.var1 + 8), 1uLL, memory_order_relaxed);
      if (*(void *)&v40.var0.var1) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v40.var0.var1);
      }
    }
    if (v21)
    {
      if (!var0)
      {
LABEL_48:
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        return;
      }
      uint64_t v26 = (const void *)var0[66];
      unint64_t v27 = (std::__shared_weak_count *)var0[67];
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v26)
      {
        uint64_t v29 = 0;
        if (v27 && v28)
        {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v29 = v27;
        }
        [(NSMutableAttributedString *)a2 addAttribute:@"TXSubstituteFont", *(void *)(v28[5] + 120), 0, v6 value range];
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
    }
    if (var0) {
      int v30 = v22;
    }
    else {
      int v30 = 0;
    }
    if (v30 == 1)
    {
      uint64_t v31 = var0[33];
      if (v31)
      {
        uint64_t v33 = *(void *)(v31 + 8);
        float v32 = *(std::__shared_weak_count **)(v31 + 16);
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v33 = 0;
        float v32 = 0;
      }
      CMTime v37 = *a3;
      float Size = TXTextStyle::getSize((OZChannel *)v33, &v37, 0.0);
      CMTime v36 = *a3;
      OZChannel::getValueAsDouble((OZChannel *)(v33 + 49416), &v36, 0.0);
      -[NSMutableAttributedString addAttribute:value:range:](a2, "addAttribute:value:range:", @"TXTrackingValue", [NSNumber numberWithDouble:v35 * Size * TXTextLayout::getXMarginScale(this)], 0, v6);
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
    }
    goto LABEL_48;
  }
}

void sub_1B76248A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (v24)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    if (!v23)
    {
LABEL_3:
      if (!v22) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      goto LABEL_8;
    }
  }
  else if (!v23)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  if (!v22) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void ___ZN12TXTextLayout45applySimpleValuesDictionaryToAttributedStringEP25NSMutableAttributedString_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v8 = [a2 objectForKey:@"SimpeValueDict::tracking"];
  if (v8)
  {
    [v10 setObject:v8 forKey:@"tracking"];
    objc_msgSend(*(id *)(a1 + 32), "removeAttribute:range:", @"MotionTextSimpleValuesAttribute", a3, a4);
  }
  uint64_t v9 = [a2 objectForKey:@"SimpeValueDict::kerning"];
  if (v9)
  {
    [v10 setObject:v9 forKey:@"kerning"];
    objc_msgSend(*(id *)(a1 + 32), "removeAttribute:range:", @"SimpeValueDict::kerning", a3, a4);
  }
  if ([v10 count]) {
    objc_msgSend(*(id *)(a1 + 32), "addAttribute:value:range:", @"MotionTextSimpleValuesAttribute", v10, a3, a4);
  }
}

void TXTextLayout::createParagraphStyle(TXTextLayout *this, int a2, int a3, NSAttributedString *a4)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 0;
  uint64_t v5 = (a3 - a2);
  operator new();
}

void sub_1B7624EE8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4017F5857CLL);
  _Unwind_Resume(a1);
}

void TXTextLayout::applyAllCaps(TXTextLayout *this, __CFString *a2)
{
  int v2 = (char *)this + 19368;
  unsigned int v3 = (char *)*((void *)this + 2422);
  if (v3 != (char *)this + 19368)
  {
    uint64_t v5 = (void *)((char *)this + 64408);
    uint64_t v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      uint64_t v7 = *((void *)v3 + 2);
      uint64_t v8 = *(void *)(v7 + 8);
      uint64_t v9 = *(std::__shared_weak_count **)(v7 + 16);
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (OZChannel::getValueAsInt((OZChannel *)(v8 + 5504), v6, 0.0))
      {
        unsigned int v11 = *(_DWORD *)(v7 + 24);
        int v10 = *(_DWORD *)(v7 + 28);
        unsigned int v12 = [(__CFString *)a2 length];
        double v13 = (double)(v10 + v11);
        double v14 = fmax((double)v11, 0.0);
        if (v13 >= (double)v12) {
          double v13 = (double)v12;
        }
        if (v14 <= v13) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        if (v14 <= v13) {
          uint64_t v16 = v13 - v14;
        }
        else {
          uint64_t v16 = 0;
        }
        -[__CFString replaceCharactersInRange:withString:](a2, "replaceCharactersInRange:withString:", v15, v16, objc_msgSend((id)-[__CFString substringWithRange:](a2, "substringWithRange:", v15, v16), "uppercaseStringWithLocale:", *v5));
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      unsigned int v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
}

void sub_1B762503C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXTextLayout::applySequenceCharacterOffsets(TXTextLayout *this, __CFString *a2, const CMTime *a3)
{
  if (TXTextLayout::hasSequenceCharacterOffset(this))
  {
    std::vector<int>::size_type v6 = [(__CFString *)a2 composedCharacterCount];
    std::vector<int>::vector(&v19, v6);
    for (uint64_t i = *((void *)this + 151); (TXTextLayout *)i != (TXTextLayout *)((char *)this + 1200); uint64_t i = *(void *)(i + 8))
    {
      int v8 = (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(i + 16) + 616))(*(void *)(i + 16), 1031, 0, 0) ^ 1;
      if (!v6) {
        LOBYTE(v8) = 1;
      }
      if ((v8 & 1) == 0)
      {
        unint64_t v9 = 0;
        do
        {
          CMTime v18 = *a3;
          int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 50624), &v18, (double)v9);
          v19.__begin_[v9++] += ValueAsInt;
        }
        while (v6 != v9);
      }
    }
    v16[0] = 0;
    v16[1] = v16;
    v16[2] = 0x2020000000;
    int v17 = 0;
    uint64_t v11 = [(__CFString *)a2 length];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3321888768;
    _OWORD v12[2] = ___ZN12TXTextLayout29applySequenceCharacterOffsetsEP10__CFStringRK6CMTime_block_invoke;
    void v12[3] = &unk_1F10AF590;
    v12[6] = this;
    __p = 0;
    double v14 = 0;
    uint64_t v15 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v19.__begin_, (uint64_t)v19.__end_, v19.__end_ - v19.__begin_);
    v12[4] = a2;
    v12[5] = v16;
    -[__CFString enumerateSubstringsInRange:options:usingBlock:](a2, "enumerateSubstringsInRange:options:usingBlock:", 0, v11, 2, v12);
    if (__p)
    {
      double v14 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(v16, 8);
    if (v19.__begin_)
    {
      v19.__end_ = v19.__begin_;
      operator delete(v19.__begin_);
    }
  }
}

void sub_1B7625244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a19, 8);
  int v21 = *(void **)(v19 - 88);
  if (v21)
  {
    *(void *)(v19 - 80) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

void ___ZN12TXTextLayout29applySequenceCharacterOffsetsEP10__CFStringRK6CMTime_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 48);
  if ([a2 UTF32CharacterCount] == 1)
  {
    unsigned int v11 = 0;
    if (objc_msgSend(a2, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", &v11, 4, 0, 2348810496, 0, 0, objc_msgSend(a2, "length"), 0))
    {
      if (OZChannel::getValueAsInt((OZChannel *)(v8 + 50776), MEMORY[0x1E4F1FA48], 0.0)) {
        unsigned int v9 = v11 + *(_DWORD *)(*(void *)(a1 + 56) + 4 * *(int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
      }
      else {
        unsigned int v9 = TXOffsetUnicodeChar(v11, *(_DWORD *)(*(void *)(a1 + 56) + 4 * *(int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)));
      }
      unsigned int v11 = v9;
      int v10 = (void *)[[NSString alloc] initWithBytes:&v11 length:4 encoding:2617245952];
      objc_msgSend(*(id *)(a1 + 32), "replaceCharactersInRange:withString:", a3, a4, v10);
    }
  }
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void *__copy_helper_block_e8_56c39_ZTSNSt3__16vectorIiNS_9allocatorIiEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  int v2 = (void *)(a1 + 56);
  v2[2] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v2, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
}

void __destroy_helper_block_e8_56c39_ZTSNSt3__16vectorIiNS_9allocatorIiEEEE(uint64_t a1)
{
  int v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void TXTextLayout::applyFontToAllTextStyles(TXTextLayout *this, NSString *a2)
{
  uint64_t v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v10, v4);
  uint64_t v5 = (char *)this + 19344;
  std::vector<int>::size_type v6 = (char *)*((void *)this + 2419);
  if (v6 != (char *)this + 19344)
  {
    do
    {
      uint64_t v8 = *((void *)v6 + 2);
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 3);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      PCURL::PCURL((PCURL *)&v9, a2);
      (*(void (**)(uint64_t, PCString *, uint64_t))(*(void *)v8 + 168))(v8, &v9, 1);
      PCString::~PCString(&v9);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      std::vector<int>::size_type v6 = (char *)*((void *)v6 + 1);
    }
    while (v6 != v5);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v10);
}

void sub_1B76254D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  PCString::~PCString((PCString *)&a9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a10);
  _Unwind_Resume(a1);
}

void TXTextLayout::applyFontScaleToAllTextStyles(TXTextLayout *this, float a2)
{
  uint64_t v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v11, v4);
  uint64_t v5 = (char *)this + 19344;
  std::vector<int>::size_type v6 = (char *)*((void *)this + 2419);
  if (v6 != (char *)this + 19344)
  {
    double v7 = a2;
    uint64_t v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      uint64_t v9 = *((void *)v6 + 2);
      int v10 = (std::__shared_weak_count *)*((void *)v6 + 3);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      OZChannel3D::setValue((OZChannel3D *)(v9 + 2864), v8, v7, v7, v7);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      std::vector<int>::size_type v6 = (char *)*((void *)v6 + 1);
    }
    while (v6 != v5);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v11);
}

void sub_1B76255C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::applyFontSizeToAllTextStyles(TXTextLayout *this, float a2)
{
  uint64_t v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v11, v4);
  uint64_t v5 = (char *)this + 19344;
  std::vector<int>::size_type v6 = (char *)*((void *)this + 2419);
  if (v6 != (char *)this + 19344)
  {
    double v7 = a2;
    uint64_t v8 = MEMORY[0x1E4F1FA48];
    do
    {
      uint64_t v9 = *((void *)v6 + 2);
      int v10 = (std::__shared_weak_count *)*((void *)v6 + 3);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t, void, double))(*(void *)(v9 + 1976) + 712))(v9 + 1976, v8, 0, v7);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      std::vector<int>::size_type v6 = (char *)*((void *)v6 + 1);
    }
    while (v6 != v5);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v11);
}

void sub_1B76256CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::applyAllCapsSizeToAttributedString(TXTextLayout *a1, __CFAttributedString *a2, __CFString *a3, void *a4, void *a5, CMTime *a6)
{
  uint64_t v12 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B88], "lowercaseLetterCharacterSet"), "invertedSet");
  double v13 = (std::__shared_weak_count *)a4[1];
  v17[0] = *a4;
  v17[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  TXTextLayout::applyAllCapsSizeToCharacterSet(a1, a2, a3, v12, (uint64_t)v17, a5, a6);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = [MEMORY[0x1E4F28B88] lowercaseLetterCharacterSet];
  uint64_t v15 = (std::__shared_weak_count *)a4[1];
  v16[0] = *a4;
  v16[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  TXTextLayout::applyAllCapsSizeToCharacterSet(a1, a2, a3, v14, (uint64_t)v16, a5, a6);
  if (v15)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1B7625808(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextLayout::applyAllCapsSizeToCharacterSet(TXTextLayout *a1, __CFAttributedString *a2, __CFString *a3, uint64_t a4, uint64_t a5, void *a6, CMTime *a7)
{
  uint64_t result = -[__CFString rangeOfCharacterFromSet:options:range:](a3, "rangeOfCharacterFromSet:options:range:", a4, 0, *a6, a6[1]);
  if (result != 0x7FFFFFFFFFFFFFFFLL)
  {
    CFIndex v15 = result;
    uint64_t v16 = v14;
    do
    {
      CFRange RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(a3, v15);
      if (RangeOfComposedCharactersAtIndex.length == v16) {
        CFIndex location = v15;
      }
      else {
        CFIndex location = RangeOfComposedCharactersAtIndex.location;
      }
      uint64_t v19 = [MEMORY[0x1E4F28B88] lowercaseLetterCharacterSet];
      uint64_t v20 = *(atomic_ullong **)(a5 + 8);
      v23[0] = *(TXTextStyle **)a5;
      v23[1] = (TXTextStyle *)v20;
      if (v20) {
        atomic_fetch_add_explicit(v20 + 1, 1uLL, memory_order_relaxed);
      }
      v22.CFIndex location = location;
      v22.CFIndex length = RangeOfComposedCharactersAtIndex.length;
      TXTextLayout::applyFontToAttributedString(a1, a2, v23, &v22, a7, v19 == a4);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v20);
      }
      uint64_t result = -[__CFString rangeOfCharacterFromSet:options:range:](a3, "rangeOfCharacterFromSet:options:range:", a4, 0, location + RangeOfComposedCharactersAtIndex.length, [(__CFString *)a3 length] - (location + RangeOfComposedCharactersAtIndex.length));
      CFIndex v15 = result;
      uint64_t v16 = v21;
    }
    while (result != 0x7FFFFFFFFFFFFFFFLL);
  }
  return result;
}

void sub_1B7625948(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXTextLayout::applyFontToAttributedString(TXTextLayout *a1, __CFAttributedString *a2, TXTextStyle **a3, CFRange *a4, CMTime *a5, int a6)
{
  long long v12 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)&v29.CGFloat a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&v29.c = v12;
  *(_OWORD *)&v29.tx = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  if (TXTextLayout::scaleAffectsLayout(a1))
  {
    sx.CGFloat a = 0.0;
    double v27 = 0.0;
    double v28 = 0.0;
    double v13 = *a3;
    CMTime v26 = *a5;
    OZChannelScale3D::getValue((TXTextStyle *)((char *)v13 + 2864), &v26, &sx.a, &v28, &v27, 0.0);
    double XMarginScale = TXTextLayout::getXMarginScale(a1);
    sx.CGFloat a = XMarginScale * sx.a;
    double YMarginScale = TXTextLayout::getYMarginScale(a1);
    double v28 = YMarginScale * v28;
    CGAffineTransform v25 = v29;
    CGAffineTransformScale(&v29, &v25, sx.a, v28);
  }
  if (a6)
  {
    uint64_t v16 = *a3;
    CMTime v24 = *a5;
    OZChannel::getValueAsDouble((OZChannel *)((char *)v16 + 5656), &v24, 0.0);
    CGAffineTransform v22 = v29;
    CGAffineTransformScale(&sx, &v22, v17, v17);
    CGAffineTransform v29 = sx;
  }
  TXTextStyle::getFontName(*a3, (PCString *)&sx);
  CMTime v18 = *a3;
  CMTime v21 = *a5;
  float Size = TXTextStyle::getSize((OZChannel *)v18, &v21, 0.0);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)*a3 + 5352), MEMORY[0x1E4F1FA48], 0.0);
  {
    PCCachedFunctionImpl<PCCFRef<__CTFont const*>,PCString const&,double,BOOL,CGAffineTransform const&>::PCCachedFunctionImpl<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&)>((uint64_t)&getFontCache(void)::sFontCache, (uint64_t)createFont);
  }
  PCCachedFunctionImpl<PCCFRef<__CTFont const*>,PCString const&,double,BOOL,CGAffineTransform const&>::operator()((uint64_t)&getFontCache(void)::sFontCache, (const PCString *)&sx, ValueAsInt != 0, (long long *)&v29, (const void **)&v28, Size);
  CFAttributedStringSetAttribute(a2, *a4, (CFStringRef)*MEMORY[0x1E4F243F0], *(CFTypeRef *)&v28);
  PCCFRef<__CTLine const*>::~PCCFRef((const void **)&v28);
  PCString::~PCString((PCString *)&sx);
}

void sub_1B7625BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, PCString a19)
{
}

uint64_t operator<(double *a1, double *a2)
{
  if (*a1 < *a2) {
    return 1;
  }
  if (*a1 > *a2) {
    return 0;
  }
  double v2 = a1[1];
  double v3 = a2[1];
  if (v2 < v3) {
    return 1;
  }
  if (v2 > v3) {
    return 0;
  }
  double v4 = a1[2];
  double v5 = a2[2];
  if (v4 >= v5
    && (v4 > v5
     || (v6 = a1[3], double v7 = a2[3], v6 >= v7)
     && (v6 > v7 || (double v8 = a1[4], v9 = a2[4], v8 >= v9) && (v8 > v9 || a1[5] >= a2[5]))))
  {
    return 0;
  }
  else
  {
    return 1;
  }
}

void PCCachedFunctionImpl<PCCFRef<__CTFont const*>,PCString const&,double,BOOL,CGAffineTransform const&>::operator()(uint64_t a1@<X0>, const PCString *a2@<X1>, char a3@<W2>, long long *a4@<X3>, const void **a5@<X8>, double a6@<D0>)
{
  long long v12 = (os_unfair_lock_s *)(a1 + 32);
  uint64_t v24 = a1 + 32;
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 32));
  PCString::PCString(&v18, a2);
  double v19 = a6;
  char v20 = a3;
  long long v13 = a4[1];
  long long v21 = *a4;
  long long v22 = v13;
  long long v23 = a4[2];
  char v17 = 0;
  PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::findValue(*(void *)(a1 + 40), &v18, &v17, a5);
  if (!v17)
  {
    std::function<PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::operator()(a1, (uint64_t)a2, a3, (uint64_t)a4, a6);
    uint64_t v14 = *a5;
    CFIndex v15 = v16;
    if (*a5 && v14 != v16)
    {
      CFRelease(v14);
      CFIndex v15 = v16;
    }
    *a5 = v15;
    uint64_t v16 = 0;
    PCCFRef<__CTLine const*>::~PCCFRef(&v16);
    PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::addValue(*(PCString **)(a1 + 40), &v18, a5, 0);
  }
  PCString::~PCString(&v18);
  PCSpinLock::unlock(v12);
}

void sub_1B7625DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  PCCFRef<__CTLine const*>::~PCCFRef((const void **)&a9);
  PCCFRef<__CTLine const*>::~PCCFRef(v11);
  PCString::~PCString(&a11);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)(v12 - 72));
  _Unwind_Resume(a1);
}

void TXTextLayout::setStringFromAttributedString(TXParagraphStyle ***this, NSAttributedString *a2, NSDictionary *a3)
{
  double v5 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v31, v5);
  __p = 0;
  CGAffineTransform v29 = 0;
  int v30 = 0;
  double v6 = this[2378];
  for (uint64_t i = this[2379]; v6 != i; ++v6)
  {
    int v8 = *(_DWORD *)(TXParagraphStyle::getHeadingChannel(*v6) + 24);
    double v9 = v29;
    if (v29 >= v30)
    {
      unsigned int v11 = (char *)__p;
      uint64_t v12 = (v29 - (unsigned char *)__p) >> 2;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v30 - (unsigned char *)__p;
      if ((v30 - (unsigned char *)__p) >> 1 > v13) {
        unint64_t v13 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v30, v15);
        unsigned int v11 = (char *)__p;
        double v9 = v29;
      }
      else
      {
        uint64_t v16 = 0;
      }
      char v17 = &v16[4 * v12];
      *(_DWORD *)char v17 = v8;
      int v10 = v17 + 4;
      while (v9 != v11)
      {
        int v18 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v17 - 1) = v18;
        v17 -= 4;
      }
      __p = v17;
      CGAffineTransform v29 = v10;
      int v30 = &v16[4 * v15];
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *(_DWORD *)CGAffineTransform v29 = v8;
      int v10 = v9 + 4;
    }
    CGAffineTransform v29 = v10;
  }
  double v19 = (TXTextStyleManager *)((TXTextStyleManager *(*)(uint64_t *__return_ptr, TXParagraphStyle ***, void))(*this)[36])(&v26, this, 0);
  if (!v26)
  {
    uint64_t Instance = TXTextStyleManager::getInstance(v19);
    uint64_t v22 = *(void *)(Instance + 8);
    long long v21 = *(std::__shared_weak_count **)(Instance + 16);
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v23 = v27;
    uint64_t v26 = v22;
    double v27 = v21;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
  }
  for (uint64_t j = this[151]; j != (TXParagraphStyle **)(this + 150); uint64_t j = (TXParagraphStyle **)j[1])
  {
    if (v26) {
      uint64_t v25 = v26 + 16;
    }
    else {
      uint64_t v25 = 0;
    }
    (*(void (**)(TXParagraphStyle *, uint64_t))(*(void *)j[2] + 152))(j[2], v25);
  }
  TXTextLayout::resetState((TXTextLayout *)this);
  [(NSAttributedString *)a2 string];
  operator new();
}

void sub_1B762649C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (__p) {
    operator delete(__p);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a20);
  _Unwind_Resume(a1);
}

void TXTextLayout::stripUnsupportedXMLChars(PCString *this@<X0>, PCString *a2@<X8>)
{
  double v4 = PCString::ns_str(this);
  CFStringRef v5 = (const __CFString *)PCReplaceUnsupportedXMLChars(&v4->isa, &stru_1F119C770.isa);
  a2->int64_t var0 = 0;

  PCString::set(a2, v5);
}

double tailIntentFromAttributedStringAtRange(NSAttributedString *a1, _NSRange a2)
{
  _NSRange v6 = a2;
  double valueBuffer = 0.0;
  uint64_t v3 = *MEMORY[0x1E4F24790];
  if (![(NSAttributedString *)a1 attribute:*MEMORY[0x1E4F24790] atIndex:0 effectiveRange:&v6])return 0.0; {
  CTParagraphStyleGetValueForSpecifier((CTParagraphStyleRef)[(NSAttributedString *)a1 attribute:v3 atIndex:0 effectiveRange:&v6], kCTParagraphStyleSpecifierTailIndent, 8uLL, &valueBuffer);
  }
  return valueBuffer;
}

void TXTextLayout::applyKerningAndTrackingFromAttributedString(TXTextLayout *this, NSAttributedString *a2)
{
  TXTextLayout::resetKernings(this);
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 0;
  NSUInteger v4 = [(NSAttributedString *)a2 length];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = *(void *)"";
  v8[2] = ___ZN12TXTextLayout43applyKerningAndTrackingFromAttributedStringEP18NSAttributedString_block_invoke;
  uint64_t v8[3] = &unk_1E616BD00;
  v8[5] = &v9;
  v8[6] = this;
  v8[4] = a2;
  [(NSAttributedString *)a2 enumerateAttribute:@"MotionTextSimpleValuesAttribute", 0, v4, 0, v8 inRange options usingBlock];
  if (!*((unsigned char *)v10 + 24))
  {
    NSUInteger v5 = [(NSAttributedString *)a2 length];
    uint64_t v6 = *MEMORY[0x1E4F24778];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = *(void *)"";
    v7[2] = ___ZN12TXTextLayout43applyKerningAndTrackingFromAttributedStringEP18NSAttributedString_block_invoke_2;
    v7[3] = &unk_1E616BD28;
    v7[4] = a2;
    v7[5] = this;
    -[NSAttributedString enumerateAttribute:inRange:options:usingBlock:](a2, "enumerateAttribute:inRange:options:usingBlock:", v6, 0, v5, 0, v7);
  }
  _Block_object_dispose(&v9, 8);
}

void sub_1B76267C0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void ___ZN12TXTextLayout43applyKerningAndTrackingFromAttributedStringEP18NSAttributedString_block_invoke(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = [a2 objectForKey:@"kerning"];
    if (v9)
    {
      if (a3 < a3 + a4)
      {
        int v10 = (void *)v9;
        CFIndex v11 = a3;
        do
        {
          CFRange RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex((CFStringRef)[*(id *)(a1 + 32) string], v11);
          [v10 floatValue];
          CFIndex location = RangeOfComposedCharactersAtIndex.location;
          p_CFIndex location = (TXTextStyle *)&location;
          *((double *)std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t **)(v8 + 19224), &location, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_location)+ 5) = v13;
          CFIndex v11 = RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length;
        }
        while (RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length < a3 + a4);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
    uint64_t v14 = [a2 objectForKey:@"tracking"];
    if (v14)
    {
      unint64_t v15 = (void *)v14;
      TXTextLayout::getStyleAtCharOffset(v8, a3, &p_location);
      uint64_t v16 = (CMTime *)MEMORY[0x1E4F1FA48];
      CMTime v20 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      float Size = TXTextStyle::getSize((OZChannel *)p_location, &v20, 0.0);
      [v15 floatValue];
      CMTime v19 = *v16;
      OZChannel::setValue((OZChannel *)((char *)p_location + 49416), &v19, v18 / Size, 0);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
    }
  }
}

void sub_1B7626994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *___ZN12TXTextLayout43applyKerningAndTrackingFromAttributedStringEP18NSAttributedString_block_invoke_2(uint64_t *result, void *a2, unint64_t a3, uint64_t a4)
{
  if (a2)
  {
    CFIndex v4 = a3;
    unint64_t v5 = a3 + a4;
    if (a3 < a3 + a4)
    {
      double v7 = result;
      uint64_t v8 = (uint64_t **)(result[5] + 19224);
      do
      {
        CFRange RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex((CFStringRef)[(id)v7[4] string], v4);
        [a2 floatValue];
        double v11 = v10;
        CFIndex location = RangeOfComposedCharactersAtIndex.location;
        p_CFIndex location = &location;
        uint64_t result = std::__tree<std::__value_type<long,double>,std::__map_value_compare<long,std::__value_type<long,double>,std::less<long>,true>,std::allocator<std::__value_type<long,double>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(v8, &location, (uint64_t)&std::piecewise_construct, &p_location);
        *((double *)result + 5) = v11;
        CFIndex v4 = RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length;
      }
      while (RangeOfComposedCharactersAtIndex.location + RangeOfComposedCharactersAtIndex.length < v5);
    }
  }
  return result;
}

void TXTextLayout::readContentsOfFile(uint64_t a1)
{
  double v2 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v3, v2);
  *(unsigned char *)(a1 + 18992) = 1;
  *(void *)(a1 + 19032) = *(void *)(a1 + 19024);
  std::__list_imp<unsigned int>::clear((void *)(a1 + 19368));
  operator new();
}

void sub_1B7627078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, PCString a18)
{
  CMTime v20 = *(std::__shared_weak_count **)(v18 - 176);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  PCString::~PCString((PCString *)(v18 - 144));
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v18 - 136));
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::isPunctuationSeparatedByLineBreaks(uint64_t **this)
{
  double v2 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v33, v2);
  uint64_t v3 = this[2378];
  CGAffineTransform v29 = this[2379];
  while (v3 != v29)
  {
    uint64_t v4 = *v3;
    CFAttributedStringRef v5 = *(const __CFAttributedString **)(*v3 + 952);
    if (v5)
    {
      CFStringRef String = CFAttributedStringGetString(v5);
      uint64_t v7 = *(unsigned int *)(v4 + 876);
      if (!v7) {
        break;
      }
      CFStringRef v8 = String;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      __p = 0;
      uint64_t v31 = 0;
      float v32 = 0;
      do
      {
        uint64_t v11 = *(void *)(v4 + 912);
        if (v11) {
          LODWORD(v11) = *(_DWORD *)(v11 + 4 * v10);
        }
        int v12 = v11 - *(_DWORD *)(v4 + 856);
        if (v9 >= v32)
        {
          float v13 = __p;
          uint64_t v14 = (v9 - __p) >> 2;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v32 - __p;
          if ((v32 - __p) >> 1 > v15) {
            unint64_t v15 = v16 >> 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v32, v17);
            float v13 = __p;
            uint64_t v9 = v31;
          }
          else
          {
            uint64_t v18 = 0;
          }
          CMTime v19 = &v18[4 * v14];
          *(_DWORD *)CMTime v19 = v12;
          CMTime v20 = v19 + 4;
          while (v9 != v13)
          {
            int v21 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v19 - 1) = v21;
            v19 -= 4;
          }
          __p = v19;
          float v32 = &v18[4 * v17];
          if (v13) {
            operator delete(v13);
          }
          uint64_t v9 = v20;
        }
        else
        {
          *(_DWORD *)uint64_t v9 = v12;
          v9 += 4;
        }
        uint64_t v31 = v9;
        ++v10;
      }
      while (v10 != v7);
      uint64_t v22 = __p;
      if (__p == v9)
      {
        operator delete(v9);
      }
      else
      {
        while (1)
        {
          CFIndex v23 = *(unsigned int *)v22;
          CFIndex Length = CFStringGetLength(v8);
          UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(v8, v23);
          if (Length > v23 && TXCharacterSetIsPunctuation(CharacterAtIndex)) {
            break;
          }
          v22 += 4;
          if (v22 == v9)
          {
            int v26 = 1;
            goto LABEL_32;
          }
        }
        int v26 = 0;
LABEL_32:
        if (__p)
        {
          operator delete(__p);
          if ((v26 & 1) == 0) {
            goto LABEL_39;
          }
        }
        else if (!v26)
        {
LABEL_39:
          uint64_t v27 = 1;
          goto LABEL_38;
        }
      }
    }
    ++v3;
  }
  uint64_t v27 = 0;
LABEL_38:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v33);
  return v27;
}

void sub_1B7627398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t TXTextLayout::wordsFitInParagraphWidth(uint64_t **this, double a2)
{
  uint64_t v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v16, v4);
  CFAttributedStringRef v5 = this[2378];
  uint64_t v6 = this[2379];
  if (v5 != v6)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      uint64_t v8 = *v5;
      CFAttributedStringRef v9 = *(const __CFAttributedString **)(*v5 + 952);
      if (v9)
      {
        CTTypesetterRef v10 = CTTypesetterCreateWithAttributedString(v9);
        CFStringRef String = CFAttributedStringGetString(*(CFAttributedStringRef *)(v8 + 952));
        v17.CFIndex length = CFStringGetLength(String);
        v17.CFIndex location = 0;
        int v12 = CFStringTokenizerCreate(v7, String, v17, 4uLL, 0);
        while (CFStringTokenizerAdvanceToNextToken(v12))
        {
          CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v12);
          if (CTTypesetterSuggestLineBreak(v10, CurrentTokenRange.location, a2) < CurrentTokenRange.length)
          {
            CFRelease(v12);
            CFRelease(v10);
            uint64_t v14 = 0;
            goto LABEL_11;
          }
        }
        CFRelease(v12);
        CFRelease(v10);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  uint64_t v14 = 1;
LABEL_11:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v16);
  return v14;
}

void sub_1B7627500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::linesFitInParagraphWidth(TXTextLayout *this, double a2)
{
  for (uint64_t i = *((void *)this + 2378); ; i += 8)
  {
    if (i == *((void *)this + 2379)) {
      return 1;
    }
    uint64_t v3 = *(unsigned int *)(*(void *)i + 876);
    if (v3) {
      break;
    }
LABEL_7:
    ;
  }
  uint64_t v4 = (double *)(*(void *)(*(void *)i + 888) + 48);
  while (*v4 <= a2)
  {
    v4 += 8;
    if (!--v3) {
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t TXTextLayout::isEmoji(uint64_t **this, int a2)
{
  uint64_t v4 = (char *)(this + 7353);
  CFAttributedStringRef v5 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v12, v5);
  for (uint64_t i = (uint64_t *)*((void *)v4 + 674); i; uint64_t i = (uint64_t *)*i)
  {
    int v7 = *((_DWORD *)i + 7);
    if (v7 <= a2)
    {
      if (v7 >= a2)
      {
        int v11 = a2;
        float v13 = &v11;
        isEmojuint64_t i = *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(this + 8026, &v11, (uint64_t)&std::piecewise_construct, &v13)+ 32) != 0;
        goto LABEL_13;
      }
      ++i;
    }
  }
  for (uint64_t j = *(TXTextObject ***)v4; ; j += 2)
  {
    if (j == *((TXTextObject ***)v4 + 1))
    {
      isEmojuint64_t i = 0;
      goto LABEL_13;
    }
    if (*((_DWORD *)*j + 184) == a2) {
      break;
    }
  }
  isEmojuint64_t i = TXTextObject::isEmoji(*j);
LABEL_13:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v12);
  return isEmoji;
}

void sub_1B762766C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextLayout::isAllWhitespace(PCString *this)
{
  double v2 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v6, v2);
  TXChannelString::getString(this + 2381, &v5);
  uint64_t v3 = [(__CFString *)PCString::ns_str(&v5) isAllWhitespace];
  PCString::~PCString(&v5);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v6);
  return v3;
}

void sub_1B76276F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTextLayout::computeWordIndices(PCString *this)
{
  double v2 = this + 7622;
  uint64_t v3 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v31, v3);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v2, &v2[1].var0->isa);
  v2->int var0 = (__CFString *)&v2[1];
  v2[2].int var0 = 0;
  v2[1].int var0 = 0;
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x2020000000;
  char v30 = 0;
  uint64_t v22 = 0;
  CFIndex v23 = &v22;
  uint64_t v24 = 0x6012000000;
  uint64_t v25 = __Block_byref_object_copy__13;
  int v26 = __Block_byref_object_dispose__13;
  uint64_t v27 = &unk_1B876C866;
  memset(v28, 0, sizeof(v28));
  uint64_t v18 = 0;
  CMTime v19 = &v18;
  uint64_t v20 = 0x2020000000;
  int v21 = 0;
  v16[0] = 0;
  v16[1] = v16;
  int var0 = (int)v2[423].var0;
  void v16[2] = 0x2020000000;
  TXChannelString::getString(this + 2381, &v32);
  uint64_t v4 = PCString::ns_str(&v32);
  PCString::~PCString(&v32);
  uint64_t v5 = [(__CFString *)v4 length];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = *(void *)"";
  v15[2] = ___ZN12TXTextLayout18computeWordIndicesEv_block_invoke;
  v15[3] = &unk_1E616BD50;
  float v15[4] = v16;
  v15[5] = v29;
  v15[6] = &v22;
  v15[7] = &v18;
  unsigned char v15[8] = this;
  -[__CFString enumerateSubstringsInRange:options:usingBlock:](v4, "enumerateSubstringsInRange:options:usingBlock:", 0, v5, 3, v15);
  uint64_t v6 = v23;
  uint64_t v7 = v23[11];
  if (v7)
  {
    do
    {
      uint64_t v8 = v7 - 1;
      CFAttributedStringRef v9 = (unint64_t *)(*(void *)(v6[7] + (((unint64_t)(v6[10] + v8) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * (*((unsigned char *)v6 + 80) + v8));
      unint64_t v10 = *v9;
      unint64_t v11 = v9[1];
      v6[11] = v8;
      std::deque<PVLoadedEffectItem>::__maybe_remove_back_spare[abi:ne180100](v6 + 6, 1);
      if (v10 < v11 + v10)
      {
        do
        {
          int v12 = *((_DWORD *)v19 + 6);
          int v14 = v10;
          v32.int var0 = (__CFString *)&v14;
          *((_DWORD *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v2, &v14, (uint64_t)&std::piecewise_construct, (unsigned int **)&v32)+ 8) = v12;
          LODWORD(v10) = v10 + 1;
          --v11;
        }
        while (v11);
      }
      int v13 = *((_DWORD *)v19 + 6) + 1;
      *((_DWORD *)v19 + 6) = v13;
      uint64_t v6 = v23;
      uint64_t v7 = v23[11];
    }
    while (v7);
  }
  else
  {
    int v13 = *((_DWORD *)v19 + 6);
  }
  HIDWORD(v2[354].var0) = v13;
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  std::deque<PCHash128>::~deque[abi:ne180100](v28);
  _Block_object_dispose(v29, 8);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v31);
}

void sub_1B76279C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  PCString::~PCString((PCString *)(v29 - 88));
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  std::deque<PCHash128>::~deque[abi:ne180100](v28);
  _Block_object_dispose((const void *)(v29 - 136), 8);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v29 - 104));
  _Unwind_Resume(a1);
}

double __Block_byref_object_copy__13(void *a1, void *a2)
{
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  double result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__13(uint64_t a1)
{
  return std::deque<PCHash128>::~deque[abi:ne180100]((void *)(a1 + 48));
}

void ___ZN12TXTextLayout18computeWordIndicesEv_block_invoke(void *a1, int a2, int a3, int a4, unint64_t a5, unint64_t a6)
{
  unint64_t v6 = a6;
  unint64_t v7 = a5;
  v22.n128_u64[0] = a5;
  v22.n128_u64[1] = a6;
  uint64_t v9 = a1[8];
  DirectionalRuuint64_t n = TXTextLayout::getDirectionalRun((TXTextLayout *)v9, a5);
  if (DirectionalRun) {
    int v11 = DirectionalRun[16] ^ 1;
  }
  else {
    int v11 = 1;
  }
  if (v11 != *(_DWORD *)(*(void *)(a1[4] + 8) + 24)) {
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v11 != *(_DWORD *)(v9 + 64360);
  }
  if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24))
  {
    std::deque<_NSRange>::push_back((void *)(*(void *)(a1[6] + 8) + 48), &v22);
  }
  else
  {
    if (v11 != *(_DWORD *)(*(void *)(a1[4] + 8) + 24))
    {
      int v12 = *(void **)(a1[6] + 8);
      uint64_t v13 = v12[11];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13 - 1;
          unint64_t v15 = (unint64_t *)(*(void *)(v12[7]
                                               + (((unint64_t)(v12[10] + v14) >> 5) & 0x7FFFFFFFFFFFFF8))
                                   + 16 * (*((unsigned char *)v12 + 80) + v14));
          unint64_t v16 = *v15;
          unint64_t v17 = v15[1];
          v12[11] = v14;
          std::deque<PVLoadedEffectItem>::__maybe_remove_back_spare[abi:ne180100](v12 + 6, 1);
          if (v16 < v17 + v16)
          {
            do
            {
              int v18 = *(_DWORD *)(*(void *)(a1[7] + 8) + 24);
              int v21 = v16;
              CFIndex v23 = (unsigned int *)&v21;
              *((_DWORD *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v9 + 60976), &v21, (uint64_t)&std::piecewise_construct, &v23)+ 8) = v18;
              LODWORD(v16) = v16 + 1;
              --v17;
            }
            while (v17);
          }
          ++*(_DWORD *)(*(void *)(a1[7] + 8) + 24);
          int v12 = *(void **)(a1[6] + 8);
          uint64_t v13 = v12[11];
        }
        while (v13);
        unint64_t v6 = v22.n128_u64[1];
        unint64_t v7 = v22.n128_u64[0];
      }
    }
    if (v7 < v6 + v7)
    {
      CMTime v19 = (uint64_t **)(v9 + 60976);
      do
      {
        int v20 = *(_DWORD *)(*(void *)(a1[7] + 8) + 24);
        int v21 = v7;
        CFIndex v23 = (unsigned int *)&v21;
        *((_DWORD *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v19, &v21, (uint64_t)&std::piecewise_construct, &v23)+ 8) = v20;
        LODWORD(v7) = v7 + 1;
        --v6;
      }
      while (v6);
    }
    ++*(_DWORD *)(*(void *)(a1[7] + 8) + 24);
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v11;
}

CFTypeRef TXTextLayout::setLocale(TXTextLayout *this, CFTypeRef cf)
{
  uint64_t v3 = (void *)((char *)this + 64408);
  uint64_t v4 = (const void *)*((void *)this + 8051);
  if (v4) {
    CFRelease(v4);
  }
  void *v3 = cf;

  return CFRetain(cf);
}

void TXTextLayout::setLocaleIdentifier(TXTextLayout *this, const __CFString *a2)
{
  CFLocaleRef v3 = CFLocaleCreate(0, a2);
  TXTextLayout::setLocale(this, v3);

  CFRelease(v3);
}

CFTypeRef TXTextLayout::useCurrentLocale(TXTextLayout *this)
{
  double v2 = (void *)[MEMORY[0x1E4F1CA20] preferredLanguages];
  if ([v2 count])
  {
    uint64_t v3 = [v2 firstObject];
    uint64_t v4 = *(uint64_t (**)(TXTextLayout *, uint64_t))(*(void *)this + 136);
    return (CFTypeRef)v4(this, v3);
  }
  else
  {
    unint64_t v6 = (const void *)[MEMORY[0x1E4F1CA20] currentLocale];
    return TXTextLayout::setLocale(this, v6);
  }
}

void TXTextLayout::updateStyleNames(TXTextLayout *this)
{
  PCURL::PCURL((PCURL *)&v15, @"Object Name Number");
  PCString::PCString(&v14, "%@");
  int v2 = PCString::find(&v15, &v14);
  PCString::~PCString(&v14);
  PCString::PCString(&v14, "%d");
  int v3 = PCString::find(&v15, &v14);
  PCString::~PCString(&v14);
  uint64_t v4 = (char *)this + 19368;
  uint64_t v5 = (char *)*((void *)this + 2422);
  if (v5 != (char *)this + 19368)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *((void *)v5 + 2);
      uint64_t v9 = *(void *)(v7 + 8);
      uint64_t v8 = *(std::__shared_weak_count **)(v7 + 16);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v6)
      {
        unint64_t v10 = NSString;
        int v11 = PCString::ns_str(&v15);
        PCURL::PCURL((PCURL *)&v14, @"Text Style Name");
        if (v2 <= v3) {
          uint64_t v12 = [v10 stringWithValidatedFormat:v11, @"%@ %d", 0, PCString::cf_str(&v14), v6 validFormatSpecifiers error];
        }
        else {
          uint64_t v12 = [v10 stringWithValidatedFormat:v11, @"%d %@", 0, v6, PCString::cf_str(&v14) validFormatSpecifiers error];
        }
        CFStringRef v13 = (const __CFString *)v12;
        PCString::~PCString(&v14);
        v14.int var0 = 0;
        PCString::set(&v14, v13);
        (*(void (**)(uint64_t, PCString *, void))(*(void *)(v9 + 16) + 120))(v9 + 16, &v14, 0);
      }
      else
      {
        PCURL::PCURL((PCURL *)&v14, @"Text Style Name");
        (*(void (**)(uint64_t, PCString *, void))(*(void *)(v9 + 16) + 120))(v9 + 16, &v14, 0);
      }
      PCString::~PCString(&v14);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      uint64_t v6 = (v6 + 1);
      uint64_t v5 = (char *)*((void *)v5 + 1);
    }
    while (v5 != v4);
  }
  PCString::~PCString(&v15);
}

void sub_1B762805C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
}

uint64_t libraryPath(void)
{
  uint64_t v0 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", NSHomeDirectory(), @"Library", @"Application Support", @"Motion", @"Environment Maps", 0);
  uint64_t v1 = NSString;

  return [v1 pathWithComponents:v0];
}

uint64_t bundleResourcePath(void)
{
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.ozone.framework");
  CFURLRef v1 = CFBundleCopyBundleURL(BundleWithIdentifier);
  int v2 = (__CFString *)CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);
  uint64_t v3 = objc_msgSend((id)-[__CFString stringByAppendingPathComponent:](v2, "stringByAppendingPathComponent:", @"Resources"), "stringByAppendingPathComponent:", @"EnvironmentMap");
  CFRelease(v2);
  CFRelease(v1);
  return v3;
}

uint64_t TXTextLayout::collectInternal3DTextAssets(TXTextLayout *this)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  CFURLRef v1 = (uint64_t *)((char *)this + 58824);
  id v3 = (id)objc_opt_new();
  uint64_t v4 = *v1;
  uint64_t v39 = v1[1];
  if (*v1 != v39)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    char v7 = 1;
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)v4 + 264);
      if (!v8) {
        break;
      }
      uint64_t v10 = *(void *)(v8 + 8);
      uint64_t v9 = *(std::__shared_weak_count **)(v8 + 16);
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!v5)
        {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          int v42 = v9;
          goto LABEL_18;
        }
        uint64_t v44 = v9;
        if (v10 != v5)
        {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          if (v6) {
            goto LABEL_11;
          }
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v44 = 0;
        if (!v5)
        {
          int v42 = 0;
          if (!v6)
          {
LABEL_20:
            uint64_t v44 = v42;
            if (v7) {
              goto LABEL_23;
            }
            goto LABEL_53;
          }
LABEL_19:
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
          goto LABEL_20;
        }
        if (v10 != v5)
        {
          uint64_t v44 = 0;
          if (!v6) {
            goto LABEL_12;
          }
LABEL_11:
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
LABEL_12:
          int v42 = v44;
LABEL_23:
          uint64_t v40 = v10;
          int v11 = *(const void ***)(v10 + 480);
          uint64_t v12 = *(const void ***)(v10 + 488);
          while (v11 != v12)
          {
            if (*v11)
            {
              if (v13)
              {
                PCString v14 = (uint64_t *)v13[178];
                if (v14)
                {
                  uint64_t v16 = *v14;
                  uint64_t v15 = v14[1];
                  while (v15 != v16)
                  {
                    uint64_t v17 = *(void *)(v15 - 8);
                    v15 -= 8;
                    (*(void (**)(uint64_t *__return_ptr))(*(void *)v17 + 792))(&v47);
                    int v18 = (void *)v47;
                    CMTime v19 = (void *)v48;
                    while (v18 != v19)
                    {
                      if (*v18) {
                        objc_msgSend(v3, "addObject:");
                      }
                      ++v18;
                    }
                    double v46 = (void **)&v47;
                    std::vector<PCNSRef<NSURL *>>::__destroy_vector::operator()[abi:ne180100](&v46);
                  }
                }
              }
            }
            ++v11;
          }
          uint64_t v10 = v40;
          uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 272))(v40);
          if (OZChannelBase::isEnabled((OZChannelBase *)(v20 + 3560), 0, 1))
          {
            if (OZ3DExtrusionProperties::environmentType((OZ3DExtrusionProperties *)v20) == 2)
            {
              int v2 = OZLayeredMaterial::envMapFilenameAndNormalization((OZLayeredMaterial *)v20, v21);
              if (*v2)
              {
                __n128 v22 = (void *)[NSString stringWithUTF8String:v2];
                uint64_t v37 = v4;
                uint64_t v47 = objc_msgSend((id)bundleResourcePath(), "stringByAppendingPathComponent:", objc_msgSend(v22, "lowercaseString"));
                uint64_t v23 = libraryPath();
                uint64_t v24 = 0;
                uint64_t v48 = v23;
                do
                {
                  uint64_t v25 = 0;
                  uint64_t v38 = v24;
                  uint64_t v26 = *(&v47 + v24);
                  do
                  {
                    uint64_t v27 = 0;
                    uint64_t v41 = v25;
                    double v28 = off_1E616BDD0[v25];
                    do
                    {
                      uint64_t v29 = 0;
                      uint64_t v45 = v27;
                      char v30 = off_1E616BDB0[v27];
                      do
                      {
                        uint64_t v31 = 0;
                        PCString v32 = off_1E616BDA0[v29];
                        do
                        {
                          uint64_t v33 = [NSString stringWithFormat:@"%@/%@_%@_q%@_%@.%@", v26, v22, v30, v28, off_1E616BD70[v31], v32];
                          if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:", v33))objc_msgSend(v3, "addObject:", objc_msgSend(MEMORY[0x1E4F1CB10], "fileURLWithPath:", v33)); {
                          ++v31;
                          }
                        }
                        while (v31 != 6);
                        ++v29;
                      }
                      while (v29 != 2);
                      uint64_t v27 = v45 + 1;
                    }
                    while (v45 != 3);
                    uint64_t v25 = v41 + 1;
                  }
                  while (v41 != 3);
                  uint64_t v24 = v38 + 1;
                }
                while (v38 != 1);
                uint64_t v4 = v37;
                uint64_t v10 = v40;
              }
            }
          }
          goto LABEL_53;
        }
      }
      uint64_t v10 = v5;
      int v42 = v6;
      if (v7) {
        goto LABEL_23;
      }
LABEL_53:
      if (v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      }
      char v7 = 0;
      v4 += 16;
      uint64_t v5 = v10;
      double v34 = v42;
      uint64_t v6 = v42;
      if (v4 == v39) {
        goto LABEL_60;
      }
    }
    int v42 = 0;
    uint64_t v44 = 0;
    uint64_t v10 = 0;
    if (v5)
    {
      if (v6) {
        goto LABEL_11;
      }
      goto LABEL_12;
    }
LABEL_18:
    if (!v6) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  double v34 = 0;
LABEL_60:
  uint64_t v43 = v34;
  uint64_t v35 = objc_msgSend(v3, "allObjects", v2);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  return v35;
}

void sub_1B7628608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(exception_object);
}

id newNSShadow(double a1, double a2, double a3, double a4, double a5, double a6, PCColor *a7)
{
  id v14 = objc_alloc_init(MEMORY[0x1E4F42680]);
  __double2 v15 = __sincos_stret(a2);
  objc_msgSend(v14, "setShadowOffset:", v15.__cosval * (a1 * a5), v15.__sinval * (a1 * a6));
  [v14 setShadowBlurRadius:(a3 * a5 + a4 * a6) * 0.5];
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  PCColor::getRGBA(a7, (float *)&v19 + 1, (float *)&v19, (float *)&v18 + 1, (float *)&v18, DeviceRGB);
  CGColorSpaceRelease(DeviceRGB);
  objc_msgSend(v14, "setShadowColor:", objc_msgSend(MEMORY[0x1E4F428B8], "colorWithRed:green:blue:alpha:", *((float *)&v19 + 1), *(float *)&v19, *((float *)&v18 + 1), *(float *)&v18));
  return v14;
}

void createFont(PCString *a1@<X0>, CGFloat a2@<D0>, const CGAffineTransform *a3@<X2>, int a4@<W1>, CTFontRef *a5@<X8>)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  if ([(__CFString *)PCString::ns_str(a1) hasPrefix:@"."])
  {
    uint64_t v10 = PCString::cf_str(a1);
    *a5 = OZCreateFontWithName(v10, a2, a3);
  }
  else
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v12 = (const void *)*MEMORY[0x1E4F245A8];
    CFStringRef v13 = PCString::cf_str(a1);
    CFDictionaryAddValue(Mutable, v12, v13);
    TXFontManager::getInstance(v14);
    OZFontManagerBase::getDefaultSystemFont((PCString *)values);
    __double2 v15 = PCString::cf_str((PCString *)values);
    CTFontDescriptorRef v16 = CTFontDescriptorCreateWithNameAndSize(v15, a2);
    PCString::~PCString((PCString *)values);
    values[0] = v16;
    CFArrayRef v17 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 1, MEMORY[0x1E4F1D510]);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24410], v17);
    CFRelease(v17);
    CFRelease(v16);
    if (a4)
    {
      float v18 = a2;
      float valuePtr = v18;
      CFNumberRef v19 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24570], v19);
      CFRelease(v19);
    }
    uint64_t v20 = CTFontDescriptorCreateWithAttributes(Mutable);
    CFRelease(Mutable);
    *a5 = CTFontCreateWithFontDescriptor(v20, a2, a3);
    CFRelease(v20);
  }
}

void sub_1B7628958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  PCCFRef<__CTLine const*>::~PCCFRef(v11);
  _Unwind_Resume(a1);
}

void *PCCachedFunction<PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::~PCCachedFunction(uint64_t a1)
{
  PCCache<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::~PCCache((uint64_t *)(a1 + 40));
  PCSpinLock::~PCSpinLock((PCSpinLock *)(a1 + 32));

  return std::__function::__value_func<PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::~__value_func[abi:ne180100]((void *)a1);
}

void PCCachedFunctionImpl<PCCFRef<__CTFont const*>,PCString const&,double,BOOL,CGAffineTransform const&>::PCCachedFunctionImpl<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&)>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  if (a2)
  {
    *(void *)a1 = &unk_1F10AF5D0;
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 24) = a1;
  }
  *(_DWORD *)(a1 + 32) = 0;
  operator new();
}

void sub_1B7628A70(_Unwind_Exception *a1)
{
  PCSpinLock::~PCSpinLock(v2);
  std::__function::__value_func<PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&),std::allocator<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&)>,PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::~__func()
{
}

void *std::__function::__func<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&),std::allocator<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&)>,PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F10AF5D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&),std::allocator<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&)>,PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F10AF5D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&),std::allocator<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&)>,PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::operator()(uint64_t a1, uint64_t a2, double *a3, unsigned __int8 *a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, double))(a1 + 8))(a2, *a4, a5, *a3);
}

uint64_t std::__function::__func<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&),std::allocator<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&)>,PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&),std::allocator<PCCFRef<__CTFont const*> (*)(PCString const&,double,BOOL,CGAffineTransform const&)>,PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::target_type()
{
}

void *std::__function::__value_func<PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *PCCache<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::~PCCache(uint64_t *a1)
{
  uint64_t v2 = *a1 + 32;
  std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::destroy(*a1 + 24, *(PCString **)v2);
  *(void *)(v2 - 8) = v2;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(void *)(v2 + 24) = *(void *)(v2 + 16);
  *(void *)(v2 + 48) = 0;
  std::unique_ptr<PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

void std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::destroy(uint64_t a1, PCString *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::destroy(a1, a2[1].var0);
    PCCFRef<__CTLine const*>::~PCCFRef((const void **)&a2[13].var0);
    PCString::~PCString(a2 + 4);
    operator delete(a2);
  }
}

uint64_t std::unique_ptr<PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::~PCCacheImpl(result);
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

uint64_t PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::~PCCacheImpl(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::destroy(a1 + 24, *(PCString **)(a1 + 32));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B7628DB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<PCCFRef<__CTFont const*> ()(PCString const&,double,BOOL,CGAffineTransform const&)>::operator()(uint64_t a1, uint64_t a2, char a3, uint64_t a4, double a5)
{
  double v8 = a5;
  char v7 = a3;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, double *, char *, uint64_t))(*(void *)v5 + 48))(v5, a2, &v8, &v7, a4);
}

void *PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::findValue@<X0>(uint64_t a1@<X0>, PCString *a2@<X1>, unsigned char *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::find<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>((PCString *)(a1 + 24), a2);
  int v11 = result;
  if ((void *)(a1 + 32) == result)
  {
    *a3 = 0;
    *a4 = 0;
  }
  else
  {
    double v8 = result;
    uint64_t v9 = (const void *)result[13];
    *a4 = v9;
    if (v9) {
      CFRetain(v9);
    }
    uint64_t v10 = *(void *)(a1 + 72) + 1;
    *(void *)(a1 + 72) = v10;
    v8[15] = v10;
    uint64_t result = PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), (uint64_t)&v11);
    *a3 = 1;
  }
  return result;
}

void sub_1B7628EC8(_Unwind_Exception *a1)
{
  PCCFRef<__CTLine const*>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

PCString *std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::find<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>(PCString *a1, PCString *a2)
{
  uint64_t v2 = a1 + 1;
  int var0 = (PCString *)a1[1].var0;
  if (!var0) {
    return v2;
  }
  uint64_t v5 = a1 + 1;
  do
  {
    int v6 = std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::tuple<PCString const,double,BOOL,CGAffineTransform const>>((int)&v9, var0 + 4, a2);
    char v7 = var0 + 1;
    if (!v6)
    {
      char v7 = var0;
      uint64_t v5 = var0;
    }
    int var0 = (PCString *)v7->var0;
  }
  while (v7->var0);
  if (v5 == v2
    || std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::tuple<PCString const,double,BOOL,CGAffineTransform const>>((int)&v10, a2, v5 + 4))
  {
    return v2;
  }
  return v5;
}

uint64_t std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::tuple<PCString const,double,BOOL,CGAffineTransform const>>(int a1, PCString *this, PCString *a3)
{
  if ((PCString::compare(this, a3) & 0x80000000) != 0) {
    return 1;
  }
  if ((PCString::compare(a3, this) & 0x80000000) != 0) {
    return 0;
  }
  return std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::tuple<PCString const,double,BOOL,CGAffineTransform const>>((uint64_t)&v6, (uint64_t)this, (uint64_t)a3);
}

uint64_t std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::tuple<PCString const,double,BOOL,CGAffineTransform const>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3 = *(double *)(a2 + 8);
  double v4 = *(double *)(a3 + 8);
  if (v3 < v4) {
    return 1;
  }
  if (v4 < v3) {
    return 0;
  }
  unsigned int v5 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v6 = *(unsigned __int8 *)(a3 + 16);
  if (v5 < v6) {
    return 1;
  }
  if (v6 >= v5) {
    return operator<((double *)(a2 + 24), (double *)(a3 + 24));
  }
  else {
    return 0;
  }
}

uint64_t *PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::bubble(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1] - *result;
  unint64_t v4 = *(void *)(*(void *)a2 + 128);
  unint64_t v5 = (2 * v4) | 1;
  if (v5 >= v3 >> 3)
  {
LABEL_24:
    if (v4)
    {
      uint64_t v17 = *(void *)(v2 + 8 * v4);
      do
      {
        unint64_t v18 = v4 - 1;
        unint64_t v19 = (v4 - 1) >> 1;
        uint64_t v20 = *(void *)(v2 + 8 * v19);
        if (*(void *)(v20 + 120) <= *(void *)(v17 + 120)) {
          break;
        }
        *(void *)(v2 + 8 * v4) = v20;
        *(void *)(v2 + 8 * v19) = v17;
        uint64_t v2 = *result;
        *(void *)(*(void *)(*result + 8 * v4) + 128) = v4;
        uint64_t v17 = *(void *)(v2 + 8 * v19);
        *(void *)(v17 + 128) = v19;
        unint64_t v4 = (v4 - 1) >> 1;
      }
      while (v18 > 1);
    }
    return result;
  }
  char v6 = 0;
  unint64_t v7 = v3 >> 3;
  uint64_t v8 = 2 * v4;
  uint64_t v9 = *(void *)(v2 + 8 * v4);
  while (1)
  {
    unint64_t v10 = v8 + 2;
    unint64_t v11 = *(void *)(v9 + 120);
    BOOL v12 = v10 < v7 && v11 > *(void *)(*(void *)(v2 + 8 * v10) + 120);
    unint64_t v13 = *(void *)(*(void *)(v2 + 8 * v5) + 120);
    if (v11 <= v13 && !v12) {
      break;
    }
    BOOL v15 = v11 > v13 && v12;
    if (v12) {
      unint64_t v16 = v10;
    }
    else {
      unint64_t v16 = v5;
    }
    if (v15)
    {
      if (v13 <= *(void *)(*(void *)(v2 + 8 * v10) + 120)) {
        unint64_t v16 = v5;
      }
      else {
        unint64_t v16 = v10;
      }
    }
    *(void *)(v2 + 8 * v4) = *(void *)(v2 + 8 * v16);
    *(void *)(v2 + 8 * v16) = v9;
    uint64_t v2 = *result;
    *(void *)(*(void *)(*result + 8 * v4) + 128) = v4;
    uint64_t v9 = *(void *)(v2 + 8 * v16);
    *(void *)(v9 + 128) = v16;
    uint64_t v8 = 2 * v16;
    char v6 = 1;
    unint64_t v5 = (2 * v16) | 1;
    unint64_t v4 = v16;
    if (v5 >= v7) {
      return result;
    }
  }
  if ((v6 & 1) == 0)
  {
    unint64_t v4 = *(void *)(*(void *)a2 + 128);
    goto LABEL_24;
  }
  return result;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x1BA9BFBA0);
}

PCString *PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::addValue(PCString *result, PCString *a2, const void **a3, __CFString *a4)
{
  unint64_t v7 = result;
  if (result[11].var0 >= a4 || result[13].var0)
  {
    uint64_t v8 = std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::find<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>(result + 3, a2);
    uint64_t v24 = v8;
    if (&v7[4] == v8)
    {
      unint64_t v16 = (__CFString *)((char *)&v7[9].var0->isa + 1);
      v7[9].int var0 = v16;
      v23[0] = *a3;
      if (v23[0]) {
        CFRetain(v23[0]);
      }
      v23[1] = a4;
      v23[2] = v16;
      v23[3] = 0;
      std::pair<std::tuple<PCString const,double,BOOL,CGAffineTransform const> const,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>::pair[abi:ne180100]<true,0>((uint64_t)v20, (uint64_t)a2, (uint64_t)v23);
      v22[0] = (uint64_t)std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::__emplace_unique_key_args<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::pair<std::tuple<PCString const,double,BOOL,CGAffineTransform const> const,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>(v7 + 3, v20, (uint64_t)v20);
      v22[1] = v17;
      PCCFRef<__CTLine const*>::~PCCFRef(&v21);
      PCString::~PCString(v20);
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::add((void **)&v7[6].var0, v22);
      v7[10].int var0 = (__CFString *)((char *)v7[10].var0 + (unint64_t)a4);
      if (!v7[13].var0)
      {
        while (v7[10].var0 > v7[11].var0 || v7[5].var0 > v7[12].var0)
        {
          int var0 = (PCString *)v7[6].var0;
          if (var0 == (PCString *)v7[7].var0) {
            break;
          }
          v20[0] = (PCString)var0->var0;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::remove((uint64_t *)&v7[6], (uint64_t)v20);
          unint64_t v18 = v20[0].var0;
          v7[10].int var0 = (__CFString *)((char *)v7[10].var0 - v20[0].var0[3].data);
          std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::erase((uint64_t **)&v7[3], (uint64_t)v18);
        }
      }
      return (PCString *)PCCFRef<__CTLine const*>::~PCCFRef(v23);
    }
    else
    {
      uint64_t v9 = v8;
      PCCFRef<__CTLine const*>::operator=((const void **)&v8[13].var0, a3);
      uint64_t v10 = (uint64_t)&v7[9].var0->isa + 1;
      v7[9].int var0 = (__CFString *)v10;
      v9[15].int var0 = (__CFString *)v10;
      uint64_t result = (PCString *)PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::bubble((uint64_t *)&v7[6], (uint64_t)&v24);
      unint64_t v11 = v24;
      BOOL v12 = (char *)((char *)a4 - (char *)v24[14].var0);
      if (v12)
      {
        unint64_t v13 = (__CFString *)((char *)v7[10].var0 + (unint64_t)v12);
        v7[10].int var0 = v13;
        v11[14].int var0 = a4;
        if (!v7[13].var0)
        {
          while (v13 > v7[11].var0 || v7[5].var0 > v7[12].var0)
          {
            BOOL v15 = (PCString *)v7[6].var0;
            if (v15 == (PCString *)v7[7].var0) {
              break;
            }
            v20[0] = (PCString)v15->var0;
            PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::remove((uint64_t *)&v7[6], (uint64_t)v20);
            id v14 = v20[0].var0;
            v7[10].int var0 = (__CFString *)((char *)v7[10].var0 - v20[0].var0[3].data);
            uint64_t result = (PCString *)std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::erase((uint64_t **)&v7[3], (uint64_t)v14);
            unint64_t v13 = v7[10].var0;
          }
        }
      }
    }
  }
  return result;
}

void sub_1B76293F4(_Unwind_Exception *a1)
{
  PCCFRef<__CTLine const*>::~PCCFRef((const void **)(v1 - 88));
  _Unwind_Resume(a1);
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::add(void **a1, uint64_t *a2)
{
  unint64_t v4 = (char *)*a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = ((char *)v5 - (unsigned char *)*a1) >> 3;
  uint64_t v7 = *a2;
  *(void *)(*a2 + 128) = v6;
  unint64_t v10 = (unint64_t)a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  if ((unint64_t)v5 >= v10)
  {
    if ((unint64_t)(v6 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v9 - (void)v4;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v6 + 1)) {
      uint64_t v13 = v6 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      BOOL v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v14);
      uint64_t v7 = *a2;
    }
    else
    {
      BOOL v15 = 0;
    }
    unint64_t v16 = &v15[8 * v6];
    unsigned __int8 v17 = &v15[8 * v14];
    *(void *)unint64_t v16 = v7;
    unint64_t v11 = v16 + 8;
    unint64_t v19 = (char *)*a1;
    unint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v11;
    a1[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v5 = v7;
    unint64_t v11 = v5 + 1;
  }
  a1[1] = v11;
  unint64_t v21 = *(void *)(*a2 + 128);
  if (v21)
  {
    __n128 v22 = (char *)*a1;
    uint64_t v23 = *((void *)*a1 + v21);
    do
    {
      unint64_t v24 = v21 - 1;
      unint64_t v25 = (v21 - 1) >> 1;
      uint64_t v26 = *(void *)&v22[8 * v25];
      if (*(void *)(v26 + 120) <= *(void *)(v23 + 120)) {
        break;
      }
      *(void *)&v22[8 * v21] = v26;
      *(void *)&v22[8 * v25] = v23;
      __n128 v22 = (char *)*a1;
      *(void *)(*((void *)*a1 + v21) + 128) = v21;
      uint64_t v23 = *(void *)&v22[8 * v25];
      *(void *)(v23 + 128) = v25;
      unint64_t v21 = (v21 - 1) >> 1;
    }
    while (v24 > 1);
  }
}

uint64_t *std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::__emplace_unique_key_args<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::pair<std::tuple<PCString const,double,BOOL,CGAffineTransform const> const,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>(PCString *a1, PCString *this, uint64_t a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::__find_equal<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>(a1, &v8, this);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::__construct_node<std::pair<std::tuple<PCString const,double,BOOL,CGAffineTransform const> const,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v5, v7);
    return v7;
  }
  return result;
}

PCString *std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::__find_equal<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>(PCString *a1, PCString **a2, PCString *this)
{
  unint64_t v5 = a1 + 1;
  int var0 = (PCString *)a1[1].var0;
  if (var0)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = var0;
        uint64_t v8 = var0 + 4;
        if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::tuple<PCString const,double,BOOL,CGAffineTransform const>>((int)&v10, this, var0 + 4))break; {
        int var0 = (PCString *)v7->var0;
        }
        unint64_t v5 = v7;
        if (!v7->var0) {
          goto LABEL_9;
        }
      }
      if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::tuple<PCString const,double,BOOL,CGAffineTransform const>>((int)&v11, v8, this))break; {
      unint64_t v5 = v7 + 1;
      }
      int var0 = (PCString *)v7[1].var0;
    }
    while (var0);
  }
  else
  {
    uint64_t v7 = a1 + 1;
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::__construct_node<std::pair<std::tuple<PCString const,double,BOOL,CGAffineTransform const> const,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x88uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::tuple<PCString const,double,BOOL,CGAffineTransform const> const,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B76296EC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::tuple<PCString const,double,BOOL,CGAffineTransform const> const,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  PCString::PCString((PCString *)a1, (const PCString *)a2);
  *(void *)(v4 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 24) = v5;
  uint64_t v7 = *(const void **)(a2 + 72);
  *(void *)(a1 + 72) = v7;
  if (v7) {
    CFRetain(v7);
  }
  long long v8 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v8;
  return a1;
}

void sub_1B762977C(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *>>>::operator()[abi:ne180100](uint64_t a1, PCString *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    PCCFRef<__CTLine const*>::~PCCFRef((const void **)&__p[13].var0);
    PCString::~PCString(__p + 4);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t std::pair<std::tuple<PCString const,double,BOOL,CGAffineTransform const> const,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>::pair[abi:ne180100]<true,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  PCString::PCString((PCString *)a1, (const PCString *)a2);
  *(void *)(v6 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(v6 + 16) = *(unsigned char *)(a2 + 16);
  long long v7 = *(_OWORD *)(a2 + 24);
  long long v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v6 + 40) = v8;
  *(_OWORD *)(v6 + 24) = v7;
  unint64_t v9 = *(const void **)a3;
  *(void *)(a1 + 72) = *(void *)a3;
  if (v9) {
    CFRetain(v9);
  }
  long long v10 = *(_OWORD *)(a3 + 8);
  *(void *)(a1 + 96) = *(void *)(a3 + 24);
  *(_OWORD *)(a1 + 80) = v10;
  return a1;
}

void sub_1B7629870(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(*(void *)a2 + 128);
  unint64_t v4 = ((a1[1] - *a1) >> 3) - 1;
  if (v3 == v4)
  {
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v3);
  }
  else
  {
    *(void *)(*a1 + 8 * v3) = *(void *)(*a1 + 8 * v4);
    *(void *)(*(void *)(*a1 + 8 * v3) + 128) = v3;
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v4);
    uint64_t v5 = *a1 + 8 * v3;
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,void *> *,long>>>::bubble(a1, v5);
  }
}

uint64_t *std::__tree<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::__map_value_compare<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>,true>,std::allocator<std::__value_type<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCacheImpl<std::tuple<PCString const,double,BOOL,CGAffineTransform const>,PCCFRef<__CTFont const*>,PCNoLock,std::less<std::tuple<PCString const,double,BOOL,CGAffineTransform const>>>::Data>>>::erase(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  PCCFRef<__CTLine const*>::~PCCFRef((const void **)(a2 + 104));
  PCString::~PCString((PCString *)(a2 + 32));
  operator delete((void *)a2);
  return v3;
}

__n128 std::deque<_NSRange>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<_NSRange>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void std::deque<_NSRange>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B7629CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<PCNSRef<NSURL *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = (id **)*a1;
  if (*v2)
  {
    std::vector<PCNSRef<NSURL *>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    BOOL v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<PCNSRef<NSURL *>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, id *a2)
{
  for (uint64_t i = *(id **)(a1 + 8); i != a2; ProCore_Impl::PCNSRefImpl::release(i))
    --i;
  *(void *)(a1 + 8) = a2;
}

void TXOutlineFilter::clone(TXOutlineFilter *this)
{
}

void sub_1B7629EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

uint64_t TXOutlineFilter::TXOutlineFilter(uint64_t a1, void *a2, const OZRenderParams *a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 1560) = &unk_1F1199AC8;
  *(void *)(a1 + 1568) = 0;
  *(unsigned char *)(a1 + 1576) = 1;
  LiCachedImageFilter::LiCachedImageFilter((LiCachedImageFilter *)a1, (uint64_t *)off_1F10AF7D8);
  *(void *)a1 = &unk_1F10AF6C8;
  *(void *)(a1 + 1560) = &unk_1F10AF7B8;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 56) = *a2;
  *(void *)(a1 + 64) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)(a1 + 72), a3);
  *(_OWORD *)(a1 + 1504) = *(_OWORD *)a5;
  uint64_t v11 = *(CGColorSpace **)(a5 + 16);
  *(void *)(a1 + 1520) = v11;
  if (v11) {
    PCCFRefTraits<CGColorSpace *>::retain(v11);
  }
  uint64_t v12 = *(void *)(a5 + 24);
  *(_DWORD *)(a1 + 1536) = *(_DWORD *)(a5 + 32);
  *(void *)(a1 + 1528) = v12;
  *(unsigned char *)(a1 + 1544) = 0;
  *(void *)(a1 + 1552) = a4;
  return a1;
}

void sub_1B762A004(_Unwind_Exception *a1)
{
  OZRenderParams::~OZRenderParams(v3);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 64);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  LiGaussianBlur::~LiGaussianBlur((PCSharedCount *)v1, (const PCString *)off_1F10AF7D8);
  *(void *)(v1 + 1560) = v2;
  *(unsigned char *)(v1 + 1576) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1568));
  _Unwind_Resume(a1);
}

void LiCachedImageFilter::LiCachedImageFilter(LiCachedImageFilter *this, uint64_t *a2)
{
  LiImageFilter::LiImageFilter(this, a2 + 1);
  uint64_t v4 = *a2;
  uint64_t *v5 = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[7];
  PCWorkingColorVector::PCWorkingColorVector((LiCachedImageFilter *)((char *)this + 36));
}

void sub_1B762A11C(_Unwind_Exception *a1)
{
  LiImageFilter::~LiImageFilter(v1, v2);
  _Unwind_Resume(a1);
}

CGColorSpace **TXOutlineFilter::getHelium@<X0>(LiImageSource **this@<X0>, LiAgent *a2@<X1>, uint64_t *a3@<X8>)
{
  RequestedColorDescriptiouint64_t n = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
  LiAgent::getHelium(a2, this[2], a3);
  return LiAgent::setActualColorDescription((CGColorSpace **)a2, RequestedColorDescription);
}

void sub_1B762A18C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    (*(void (**)(void))(*(void *)*v1 + 24))(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXOutlineFilter::pixelTransformSupport()
{
  return 0;
}

double TXOutlineFilter::fixPixelTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (CMTime *)(a1 + 72);
  int TextRenderQuality = OZRenderParams::getTextRenderQuality((OZRenderParams *)(a1 + 72));
  if (TextRenderQuality)
  {
    if (TextRenderQuality == 6)
    {
      uint64_t v17 = 0x3FF0000000000000;
      uint64_t v18 = 0x3FF0000000000000;
      long long v10 = *(_OWORD *)(a3 + 80);
      v16[4] = *(_OWORD *)(a3 + 64);
      v16[5] = v10;
      long long v11 = *(_OWORD *)(a3 + 112);
      v16[6] = *(_OWORD *)(a3 + 96);
      v16[7] = v11;
      long long v12 = *(_OWORD *)(a3 + 16);
      v16[0] = *(_OWORD *)a3;
      v16[1] = v12;
      long long v13 = *(_OWORD *)(a3 + 48);
      void v16[2] = *(_OWORD *)(a3 + 32);
      void v16[3] = v13;
      long long v15 = xmmword_1B7E74760;
      TXTextObject::getScaleAndHashForPixelTransform(*(void *)(a1 + 56));
      *(void *)(a3 + 120) = 0x3FF0000000000000;
      *(void *)(a3 + 80) = 0x3FF0000000000000;
      *(void *)(a3 + 40) = 0x3FF0000000000000;
      *(void *)a3 = 0x3FF0000000000000;
      *(_OWORD *)(a3 + 8) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 88) = 0u;
      *(_OWORD *)(a3 + 104) = 0u;
      double v9 = *(double *)&v17;
      double v8 = *(double *)&v18;
      return PCMatrix44Tmpl<double>::rightScale((double *)a3, v8, v9, 1.0);
    }
    if (TextRenderQuality != 2) {
      return result;
    }
  }
  *(void *)&v16[0] = 0;
  *(void *)&long long v15 = 0;
  v14[0] = 0.0;
  TXTextObject::getScale(*(TXTextObject **)(a1 + 56), v5, (double *)v16, (double *)&v15, v14, 1, 1, 1, 0, 0, 1);
  *(void *)(a3 + 120) = 0x3FF0000000000000;
  *(void *)(a3 + 80) = 0x3FF0000000000000;
  *(void *)(a3 + 40) = 0x3FF0000000000000;
  *(void *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  double v8 = *(double *)v16;
  double v9 = *(double *)&v15;
  return PCMatrix44Tmpl<double>::rightScale((double *)a3, v8, v9, 1.0);
}

uint64_t TXOutlineFilter::estimateRenderMemory()
{
  return 0;
}

void LiCachedImageFilter::getCacheHash(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)MEMORY[0x1F4188790](a1);
  uint64_t v4 = v3;
  v16[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  int v5 = v1[9];
  int v6 = v1[10];
  unint64_t v7 = v1 + 9;
  int v8 = v1[11];
  int v9 = v1[12];
  if (v6 | v5 | v8 | v9)
  {
    double v13 = 0.0;
    double v14 = 0.0;
    uint64_t v15 = 0;
    float64x2_t v11 = 0uLL;
    uint64_t v12 = 0;
    getScaleTranslate(v2, (uint64_t)&v13, &v11);
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v16);
    PCHashWriteStream::writeValue(v16, v13);
    PCHashWriteStream::writeValue(v16, v14);
    PCHashWriteStream::close(v16);
    Hash = PCHashWriteStream::getHash(v16);
    PCHash128::operator+=(v7, (int *)Hash);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v7;
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v16);
  }
  else
  {
    *(_DWORD *)uint64_t v4 = v5;
    *(_DWORD *)(v4 + 4) = v6;
    *(_DWORD *)(v4 + 8) = v8;
    *(_DWORD *)(v4 + 12) = v9;
  }
}

void sub_1B762A440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t LiImageFilter::getBoundary(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    throw_PCNullPointerException(1);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 24);

  return v2();
}

uint64_t LiImageFilter::filteredEdges(LiImageFilter *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1) {
    throw_PCNullPointerException(1);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 32);

  return v2();
}

uint64_t LiImageSource::imageSpace(LiImageSource *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t LiImageSource::setImageSpace(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

PCSharedCount *LiImageSource::getSourceAtTime@<X0>(LiImageSource *this@<X0>, PCSharedCount *a2@<X8>)
{
  a2->int var0 = (PC_Sp_counted_base *)this;
  if (this) {
    uint64_t v4 = (PCShared_base *)((char *)this + *(void *)(*(void *)this - 24));
  }
  else {
    uint64_t v4 = 0;
  }
  return PCSharedCount::PCSharedCount(a2 + 1, v4);
}

PCShared_base **LiImageFilter::setInput(PCShared_base **this, LiImageSource *a2)
{
  return PCPtr<LiImageSource>::operator=<LiImageSource>(this + 2, (PCShared_base *)a2);
}

uint64_t LiImageFilter::setPriority(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

void TXOutlineFilter::~TXOutlineFilter(TXOutlineFilter *this)
{
  *(void *)this = &unk_1F10AF6C8;
  *((void *)this + 195) = &unk_1F10AF7B8;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 190);
  OZRenderParams::~OZRenderParams((TXOutlineFilter *)((char *)this + 72));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  LiGaussianBlur::~LiGaussianBlur((PCSharedCount *)this, (const PCString *)off_1F10AF7D8);
  *((void *)this + 195) = &unk_1F1199AC8;
  *((unsigned char *)this + 1576) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 196);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F10AF6C8;
  *((void *)this + 195) = &unk_1F10AF7B8;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 190);
  OZRenderParams::~OZRenderParams((TXOutlineFilter *)((char *)this + 72));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  LiGaussianBlur::~LiGaussianBlur((PCSharedCount *)this, (const PCString *)off_1F10AF7D8);
  *((void *)this + 195) = &unk_1F1199AC8;
  *((unsigned char *)this + 1576) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 196);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'TXOutlineFilter::~TXOutlineFilter(TXOutlineFilter *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F10AF6C8;
  *((void *)v1 + 195) = &unk_1F10AF7B8;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v1 + 190);
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 72));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  LiGaussianBlur::~LiGaussianBlur((PCSharedCount *)v1, (const PCString *)off_1F10AF7D8);
  *((void *)v1 + 195) = &unk_1F1199AC8;
  v1[1576] = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 196);
}

{
  char *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F10AF6C8;
  *((void *)v1 + 195) = &unk_1F10AF7B8;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v1 + 190);
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 72));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  LiGaussianBlur::~LiGaussianBlur((PCSharedCount *)v1, (const PCString *)off_1F10AF7D8);
  *((void *)v1 + 195) = &unk_1F1199AC8;
  v1[1576] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 196);

  JUMPOUT(0x1BA9BFBA0);
}

PCShared_base **PCPtr<LiImageSource>::operator=<LiImageSource>(PCShared_base **a1, PCShared_base *a2)
{
  int v8 = a2;
  if (a2) {
    a2 = (PCShared_base *)((char *)a2 + *(void *)(*(void *)a2 - 24));
  }
  PCSharedCount::PCSharedCount(&v9, a2);
  uint64_t v3 = v8;
  *a1 = v8;
  if (v3)
  {
    PCSharedCount::PCSharedCount(&v6, &v9);
    uint64_t v4 = &v6;
    PCSharedCount::operator=((uint64_t *)a1 + 1, (uint64_t *)&v6);
  }
  else
  {
    PCSharedCount::PCSharedCount(&v7);
    uint64_t v4 = &v7;
    PCSharedCount::operator=((uint64_t *)a1 + 1, (uint64_t *)&v7);
  }
  PCSharedCount::~PCSharedCount(v4);
  PCSharedCount::~PCSharedCount(&v9);
  return a1;
}

void sub_1B762A988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

void TXTextObject::TXTextObject(TXTextObject *this, TXTextLayout *a2, int a3)
{
  *((void *)this + 96) = 0;
  *((unsigned char *)this + 776) = 1;
  *(void *)this = &unk_1F10AFBF8;
  *((void *)this + 1) = &unk_1F10AFC68;
  *((void *)this + 95) = &unk_1F10AFC98;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 49) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 9);
  *((_WORD *)this + 60) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 16);
  *((unsigned char *)this + 138) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 33) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((void *)this + 31) = 0;
  PCSharedMutex::PCSharedMutex((TXTextObject *)((char *)this + 272));
  *((void *)this + 47) = 0;
  *((unsigned char *)this + 384) = 1;
  *((_DWORD *)this + 97) = a3;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((void *)this + 51) = 0xBFF0000000000000;
  *((void *)this + 52) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((void *)this + 55) = 0xBFF0000000000000;
  *((void *)this + 56) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((void *)this + 59) = 0xBFF0000000000000;
  *((void *)this + 60) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((void *)this + 63) = 0xBFF0000000000000;
  *((void *)this + 64) = 0xBFF0000000000000;
  *((void *)this + 67) = 0;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((void *)this + 68) = a2;
  *((void *)this + 70) = 0x4000000000000000;
  *((_WORD *)this + 284) = 0;
  *((void *)this + 87) = 0x3FF0000000000000;
  *((void *)this + 82) = 0x3FF0000000000000;
  *((void *)this + 77) = 0x3FF0000000000000;
  *((void *)this + 72) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  uint64_t v6 = MEMORY[0x1E4F1F9F8];
  *((_OWORD *)this + 44) = *MEMORY[0x1E4F1F9F8];
  *((void *)this + 90) = *(void *)(v6 + 16);
  *((unsigned char *)this + 744) = 1;
  *((void *)this + 94) = 0;
  *((void *)this + 91) = 0;
  *((_DWORD *)this + 4) = a3;
}

void sub_1B762AB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  PCString::~PCString(v12);
  PCString::~PCString(v11);
  double v14 = *(std::__shared_weak_count **)(v10 + 56);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  *(void *)(v10 + 760) = &unk_1F1199AC8;
  *(unsigned char *)(v10 + 776) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v10 + 768));
  _Unwind_Resume(a1);
}

void TXTextObject::~TXTextObject(TXTextObject *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *((void *)this + 1) = a2[3];
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[4];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 67);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 272));
  PCString::~PCString((PCString *)this + 16);
  PCString::~PCString((PCString *)this + 9);
  int v5 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (void **)((char *)this + 24);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void TXTextObject::~TXTextObject(TXTextObject *this)
{
  *(void *)(v1 + 760) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 776) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 768));
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)(v1 + 760) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 776) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 768));

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'TXTextObject::~TXTextObject(TXTextObject *this)
{
  *((void *)this + 94) = &unk_1F1199AC8;
  *((unsigned char *)this + 768) = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 95);
}

{
  TXTextObject::~TXTextObject((TXTextObject *)((char *)this - 8));
}

void virtual thunk to'TXTextObject::~TXTextObject(TXTextObject *this)
{
  *(void *)(v1 + 760) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 776) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 768);

  PCWeakCount::~PCWeakCount(v2);
}

{
  TXTextObject::~TXTextObject((TXTextObject *)((char *)this + *(void *)(*(void *)this - 24)));
}

double TXTextObject::getBoundingTypographicVolume(double *a1, uint64_t a2)
{
  double result = a1[53];
  double v3 = a1[54];
  double v4 = result + a1[55];
  double v5 = v3 + a1[56];
  *(double *)a2 = result;
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = v3;
  *(double *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

double TXTextObject::getBoundingImageVolume(TXTextObject *a1, uint64_t a2, uint64_t a3)
{
  OZRenderState::OZRenderState(&v14);
  *(_OWORD *)&v14.var0.int var0 = *(_OWORD *)a3;
  v14.var0.int64_t var3 = *(void *)(a3 + 16);
  TXTextObject::getImageBounds(a1, &v14, (uint64_t)&v10);
  double result = v10;
  double v7 = v11;
  double v8 = v10 + v12;
  double v9 = v11 + v13;
  *(double *)a2 = v10;
  *(double *)(a2 + 8) = v8;
  *(double *)(a2 + 16) = v7;
  *(double *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void TXTextObject::getImageBounds(TXTextObject *this@<X0>, const OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((void *)this + 33);
  if (v6)
  {
    uint64_t v8 = *(void *)(v6 + 8);
    double v7 = *(std::__shared_weak_count **)(v6 + 16);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    double v7 = 0;
  }
  long long v9 = *(_OWORD *)((char *)this + 408);
  *(_OWORD *)a3 = *(_OWORD *)((char *)this + 392);
  *(_OWORD *)(a3 + 16) = v9;
  if (!TXTextLayout::scaleAffectsLayout(*((TXTextLayout **)this + 68)))
  {
LABEL_11:
    if (!v7) {
      return;
    }
    goto LABEL_12;
  }
  double v25 = 0.0;
  double v26 = 0.0;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a2->var0;
  double v24 = 0.0;
  OZChannelScale3D::getValue((OZChannelScale3D *)(v8 + 2864), (const CMTime *)&var0, &v26, &v25, &v24, 0.0);
  if (v26 > -0.0000001 && v26 < 0.0000001 || v25 > -0.0000001 && v25 < 0.0000001)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a3 + 16) = _Q0;
    goto LABEL_11;
  }
  double v15 = 1.0 / v25;
  double v16 = 1.0 / v26 * *(double *)a3;
  double v17 = *(double *)(a3 + 24);
  double v18 = 1.0 / v26 * *(double *)(a3 + 16);
  double v19 = 1.0 / v25 * *(double *)(a3 + 8);
  *(double *)a3 = v16;
  *(double *)(a3 + 8) = v19;
  double v20 = v15 * v17;
  *(double *)(a3 + 16) = v18;
  *(double *)(a3 + 24) = v15 * v17;
  double XMarginScale = TXTextLayout::getXMarginScale(*((TXTextLayout **)this + 68));
  double v22 = 1.0 / TXTextLayout::getYMarginScale(*((TXTextLayout **)this + 68));
  *(double *)a3 = v16 * (1.0 / XMarginScale);
  *(double *)(a3 + 8) = v19 * v22;
  *(double *)(a3 + 16) = v18 * (1.0 / XMarginScale);
  *(double *)(a3 + 24) = v20 * v22;
  if (!v7) {
    return;
  }
LABEL_12:
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1B762B110(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

double TXTextObject::getBoundingImageAndTypographicVolume(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OZRenderState::OZRenderState(&v19);
  *(_OWORD *)&v19.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *(_OWORD *)a4;
  v19.var0.int64_t var3 = *(void *)(a4 + 16);
  TXTextObject::getImageBounds((TXTextObject *)a1, &v19, (uint64_t)&v15);
  double v8 = v16;
  double v9 = v15 + v17;
  double v10 = v16 + v18;
  *(double *)a2 = v15;
  *(double *)(a2 + 8) = v9;
  *(double *)(a2 + 16) = v8;
  *(double *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  double result = a1[53];
  double v12 = a1[54];
  double v13 = result + a1[55];
  double v14 = v12 + a1[56];
  *(double *)a3 = result;
  *(double *)(a3 + 8) = v13;
  *(double *)(a3 + 16) = v12;
  *(double *)(a3 + 24) = v14;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  return result;
}

__n128 TXTextObject::setGlyphID(TXTextObject *this, int a2)
{
  *((unsigned char *)this + 138) = 1;
  if (*((unsigned __int16 *)this + 68) != a2)
  {
    *((_WORD *)this + 68) = a2;
    *((unsigned char *)this + 384) = 1;
    uint64_t v2 = MEMORY[0x1E4F1F9F8];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1F9F8];
    *((_OWORD *)this + 44) = *MEMORY[0x1E4F1F9F8];
    *((void *)this + 90) = *(void *)(v2 + 16);
  }
  return result;
}

__n128 TXTextObject::dirty(TXTextObject *this)
{
  *((unsigned char *)this + 384) = 1;
  uint64_t v1 = MEMORY[0x1E4F1F9F8];
  __n128 result = *(__n128 *)MEMORY[0x1E4F1F9F8];
  *((_OWORD *)this + 44) = *MEMORY[0x1E4F1F9F8];
  *((void *)this + 90) = *(void *)(v1 + 16);
  return result;
}

__n128 TXTextObject::setSubstituteFontID(TXTextObject *this, int a2)
{
  if (*((_DWORD *)this + 131) != a2)
  {
    *((_DWORD *)this + 131) = a2;
    *((unsigned char *)this + 384) = 1;
    uint64_t v2 = MEMORY[0x1E4F1F9F8];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1F9F8];
    *((_OWORD *)this + 44) = *MEMORY[0x1E4F1F9F8];
    *((void *)this + 90) = *(void *)(v2 + 16);
  }
  return result;
}

double TXTextObject::getPosition@<D0>(TXTextObject *this@<X0>, CMTime *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  double v4 = (TXTextLayout *)*((void *)this + 68);
  if (v4)
  {
    unsigned int v7 = *((_DWORD *)this + 97);
    TXTextLayout::getPosition(v4, a2, &v7, &v8);
    double result = *(double *)&v8;
    *(_OWORD *)a3 = v8;
    a3[2] = v9;
  }
  return result;
}

double TXTextObject::setPosition(TXTextObject *this, CMTime *a2, double result, double a4, double a5)
{
  uint64_t v6 = (TXTextLayout *)*((void *)this + 68);
  if (v6)
  {
    int v9 = *((_DWORD *)this + 97);
    v7.n128_f64[0] = result;
    v7.n128_f64[1] = a4;
    double v8 = a5;
    return TXTextLayout::setPosition(v6, a2, &v9, &v7);
  }
  return result;
}

_OWORD *TXTextObject::getPathRotation(TXTextObject *this, CMTime *a2, double *a3, double *a4, double *a5)
{
  uint64_t v10 = *((void *)this + 68);
  double result = (_OWORD *)OZChannel::getValueAsInt((OZChannel *)(v10 + 20464), MEMORY[0x1E4F1FA48], 0.0);
  if (result == 2)
  {
    unsigned int v14 = *((_DWORD *)this + 97);
    double result = TXTextLayout::getPathRotation((TXTextLayout *)v10, a2, &v14, v15);
    double v12 = *(double *)v15;
    double v13 = *(double *)&v15[1];
    if (*((unsigned char *)this + 160))
    {
      double v12 = 0.0;
      double v13 = 0.0;
    }
    *a3 = v12;
    *a4 = v13;
    *a5 = *(double *)&v15[2];
  }
  else
  {
    *a3 = 0.0;
    *a4 = 0.0;
    *a5 = 0.0;
  }
  return result;
}

double TXTextObject::setPathRotation(TXTextObject *this, CMTime *a2, double result, double a4, double a5)
{
  uint64_t v6 = (TXTextLayout *)*((void *)this + 68);
  if (v6)
  {
    int v9 = *((_DWORD *)this + 97);
    v7.n128_f64[0] = result;
    v7.n128_f64[1] = a4;
    double v8 = a5;
    return TXTextLayout::setPathRotation(v6, a2, &v9, &v7);
  }
  return result;
}

uint64_t TXTextObject::setLayoutRealPos(uint64_t this, double a2)
{
  *(double *)(this + 728) = a2;
  return this;
}

double TXTextObject::getLayoutRealPos(TXTextObject *this)
{
  return *((double *)this + 91);
}

void TXTextObject::getTransformMatrix(uint64_t a1, uint64_t a2, long long *a3, int a4, int a5, uint64_t a6, int a7, double a8, double a9)
{
  int v18 = *((_DWORD *)a3 + 12);
  if (!v18 || (CMTime time1 = *(CMTime *)a3, time2 = *(CMTime *)(a1 + 704), CMTimeCompare(&time1, &time2)))
  {
    uint64_t v19 = *(void *)(a1 + 264);
    if (v19)
    {
      uint64_t v20 = *(void *)(v19 + 8);
      uint64_t v21 = *(std::__shared_weak_count **)(v19 + 16);
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v22 = *(void *)(a1 + 544);
    CMTime v112 = *(CMTime *)a3;
    CMTime v111 = v112;
    OZChannel::getValueAsDouble((OZChannel *)(v20 + 2712), &v111, 0.0);
    double v24 = v23;
    if (*((unsigned char *)a3 + 235))
    {
      if (!a5)
      {
LABEL_12:
        double v107 = 0.0;
        double v106 = 0.0;
        double v105 = 0.0;
        TXTextObject::getScale((TXTextObject *)a1, (CMTime *)a3, &v107, &v106, &v105, 0, a4, 0, 0, 0, a7);
        double v104 = 0.0;
        double v103 = 0.0;
        double v102 = 0.0;
        if (OZChannel::getValueAsInt((OZChannel *)(v22 + 20464), MEMORY[0x1E4F1FA48], 0.0) != 3
          && OZChannel::getValueAsInt((OZChannel *)(v22 + 20464), MEMORY[0x1E4F1FA48], 0.0) != 4)
        {
          CMTime v101 = v112;
          TXTextObject::getRotation((TXTextObject *)a1, &v101, &v104, &v103, &v102, 1, a7);
        }
        double v100 = 0.0;
        double v99 = 0.0;
        double v98 = 0.0;
        TXTextObject::getPathRotation((TXTextObject *)a1, &v112, &v100, &v99, &v98);
        double v55 = v24;
        double v97 = 0.0;
        double v96 = 0.0;
        double v95 = 0.0;
        CMTime time1 = *(CMTime *)a3;
        TXTextObject::getPivot((TXTextLayout **)a1, &v97, &v96, &v95, &time1, a7);
        double v29 = v97;
        double v30 = v96;
        double v31 = v95;
        double v92 = v97;
        double v93 = v96;
        double v94 = v95;
        uint64_t v91 = 0x3FF0000000000000;
        uint64_t v88 = 0x3FF0000000000000;
        uint64_t v85 = 0x3FF0000000000000;
        time2.CMTimeValue value = 0x3FF0000000000000;
        *(_OWORD *)&time2.timescale = 0u;
        long long v84 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        double v32 = v100;
        double v33 = v99;
        double v34 = v98;
        PCMatrix44Tmpl<double>::rightRotate((double *)&time2.value, 4, v100, v99, v98);
        PCMatrix44Tmpl<double>::transform<double>((double *)&time2.value, &v92, &v92);
        CMTime time1 = *(CMTime *)a3;
        TXTextObject::getPosition((TXTextObject *)a1, &time1, v82);
        *(_OWORD *)(a2 + 8) = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)(a2 + 64) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 104) = 0u;
        double v35 = v82[1];
        double v36 = a8 + v82[0];
        *(void *)(a2 + 120) = 0x3FF0000000000000;
        *(void *)(a2 + 80) = 0x3FF0000000000000;
        *(void *)(a2 + 40) = 0x3FF0000000000000;
        *(void *)a2 = 0x3FF0000000000000;
        PCMatrix44Tmpl<double>::rightTranslate((double *)a2, v36, a9 + v35 + *(double *)(a1 + 152), v82[2]);
        if (OZChannel::getValueAsInt((OZChannel *)(v22 + 20464), MEMORY[0x1E4F1FA48], 0.0) != 2) {
          PCMatrix44Tmpl<double>::rightTranslate((double *)a2, v29, v30, v31);
        }
        int v37 = *(unsigned __int8 *)(a1 + 160);
        if (OZChannel::getValueAsInt((OZChannel *)(v22 + 20464), MEMORY[0x1E4F1FA48], 0.0) != 3
          && OZChannel::getValueAsInt((OZChannel *)(v22 + 20464), MEMORY[0x1E4F1FA48], 0.0) != 4
          && !*((unsigned char *)a3 + 235))
        {
          memset(&time1, 0, sizeof(time1));
          CMTime v81 = v112;
          HIDWORD(v38) = HIDWORD(v112.value);
          LODWORD(v38) = *(_DWORD *)(a1 + 736);
          TXSequenceChannels::getPosition(v22 + 25032, &v81, &time1, (double)v38);
          double v39 = *(double *)&time1.epoch;
          if (v37) {
            double v39 = 0.0;
          }
          PCMatrix44Tmpl<double>::rightTranslate((double *)a2, *(double *)&time1.value, *(double *)&time1.timescale, v39);
        }
        if (TXTextLayout::alignToPath((TXTextLayout *)v22)
          && OZChannel::getValueAsInt((OZChannel *)(v22 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 2)
        {
          PCMatrix44Tmpl<double>::rightTranslate((double *)a2, v92, v93, v94);
        }
        PCMatrix44Tmpl<double>::rightRotate((double *)a2, 4, v32, v33, v34);
        PCMatrix44Tmpl<double>::rightRotate((double *)a2, 4, v104, v103, v102);
        PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a2, v55 * 3.14159265 / 180.0, 0.0);
        if (!*((unsigned char *)a3 + 235))
        {
          time1.CMTimeValue value = 0;
          double v71 = 0.0;
          *(void *)&v56[0] = 0;
          CMTime v80 = v112;
          HIDWORD(v40) = HIDWORD(v112.value);
          LODWORD(v40) = *(_DWORD *)(a1 + 736);
          OZChannelScale3D::getValue((OZChannelScale3D *)(v22 + 26232), &v80, (double *)&time1.value, &v71, (double *)v56, (double)v40);
          PCMatrix44Tmpl<double>::rightScale((double *)a2, *(double *)&time1.value, v71, *(double *)v56);
        }
        PCMatrix44Tmpl<double>::rightTranslate((double *)a2, -v29, -v30, -v31);
        PCMatrix44Tmpl<double>::rightScale((double *)a2, v107, v106, v105);
        if (!*((_DWORD *)a3 + 12))
        {
          if (a6)
          {
            PCMatrix44Tmpl<double>::operator*(a6, (long long *)a2, (uint64_t)&time1);
            if (&time1 != (CMTime *)a2)
            {
              for (uint64_t i = 0; i != 128; i += 32)
              {
                uint64_t v47 = (_OWORD *)(a2 + i);
                long long v48 = *(_OWORD *)((char *)&time1.epoch + i);
                *uint64_t v47 = *(_OWORD *)((char *)&time1.value + i);
                v47[1] = v48;
              }
            }
          }
          else
          {
            uint64_t v70 = 0x3FF0000000000000;
            uint64_t v67 = 0x3FF0000000000000;
            uint64_t v64 = 0x3FF0000000000000;
            time1.CMTimeValue value = 0x3FF0000000000000;
            *(_OWORD *)&time1.timescale = 0u;
            long long v63 = 0u;
            long long v65 = 0u;
            long long v66 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            (*(void (**)(uint64_t, CMTime *, long long *))(*(void *)(v22 + 200) + 1256))(v22 + 200, &time1, a3);
            PCMatrix44Tmpl<double>::operator*((uint64_t)&time1, (long long *)a2, (uint64_t)&v71);
            if (&v71 != (double *)a2)
            {
              for (uint64_t j = 0; j != 128; j += 32)
              {
                double v53 = (_OWORD *)(a2 + j);
                long long v54 = *(_OWORD *)&v73[j - 8];
                _OWORD *v53 = *(_OWORD *)((char *)&v71 + j);
                v53[1] = v54;
              }
            }
          }
        }
        if (!v37 && OZChannel::getValueAsInt((OZChannel *)(v22 + 20312), MEMORY[0x1E4F1FA48], 0.0))
        {
          OZRenderParams::OZRenderParams((OZRenderParams *)&time1, (const OZRenderParams *)a3);
          if (*((unsigned char *)a3 + 202))
          {
            uint64_t v41 = *((void *)a3 + 160);
            if (v41)
            {
              (*(void (**)(double *__return_ptr, void))(*(void *)v41 + 424))(&v71, *((void *)a3 + 160));
              long long v57 = 0u;
              memset(v56, 0, sizeof(v56));
              int v58 = 4;
              long long v59 = 0u;
              long long v60 = 0u;
              uint64_t v61 = 0;
              PCMatrix44Tmpl<double>::getTransformation((long long *)&v71, (uint64_t)v56);
              if (*(double *)&v57 < 0.0)
              {
                *(float64x2_t *)&v73[8] = vnegq_f64(*(float64x2_t *)&v73[8]);
                float64x2_t v74 = vnegq_f64(v74);
                operator new();
              }
            }
          }
          uint64_t v79 = 0x3FF0000000000000;
          uint64_t v76 = 0x3FF0000000000000;
          *(void *)&v73[16] = 0x3FF0000000000000;
          double v71 = 1.0;
          long long v72 = 0u;
          *(_OWORD *)BOOL v73 = 0u;
          float64x2_t v74 = 0u;
          long long v75 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          (*(void (**)(uint64_t, double *, CMTime *))(*(void *)(v22 + 200) + 1304))(v22 + 200, &v71, &time1);
          PCMatrix44Tmpl<double>::rightMult(a2, &v71);
          OZRenderParams::~OZRenderParams((OZRenderParams *)&time1);
        }
        if (v18)
        {
          long long v42 = *a3;
          *(void *)(a1 + 720) = *((void *)a3 + 2);
          *(_OWORD *)(a1 + 704) = v42;
          uint64_t v43 = a1 + 576;
          if (a1 + 576 != a2)
          {
            for (uint64_t k = 0; k != 4; ++k)
            {
              for (uint64_t m = 0; m != 32; m += 8)
                *(void *)(v43 + m) = *(void *)(a2 + m);
              v43 += 32;
              a2 += 32;
            }
          }
        }
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        return;
      }
    }
    else
    {
      HIDWORD(vTXTextLayout::setAllParagraphsDirty(this - 25) = HIDWORD(v112.value);
      CMTime v110 = v112;
      LODWORD(vTXTextLayout::setAllParagraphsDirty(this - 25) = *(_DWORD *)(a1 + 736);
      OZChannel::getValueAsDouble((OZChannel *)(v22 + 28288), &v110, (double)v25);
      double v24 = v24 + v26;
      if (!a5) {
        goto LABEL_12;
      }
    }
    CMTime v109 = v112;
    OZChannel::getValueAsDouble((OZChannel *)(v22 + 60360), &v109, 0.0);
    a8 = v27;
    CMTime v108 = v112;
    OZChannel::getValueAsDouble((OZChannel *)(v22 + 59888), &v108, 0.0);
    a9 = v28;
    goto LABEL_12;
  }
  uint64_t v49 = a1 + 576;
  if (a1 + 576 != a2)
  {
    for (uint64_t n = 0; n != 4; ++n)
    {
      for (iuint64_t i = 0; ii != 32; ii += 8)
        *(void *)(a2 + ii) = *(void *)(v49 + ii);
      a2 += 32;
      v49 += 32;
    }
  }
}

void sub_1B762BD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  MEMORY[0x1BA9BFBA0](v18, 0x10A1C40DA4F106CLL);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(a1);
}

void TXTextObject::getScale(TXTextObject *this, CMTime *a2, double *a3, double *a4, double *a5, int a6, int a7, int a8, BOOL a9, BOOL a10, BOOL a11)
{
  uint64_t v18 = *((void *)this + 33);
  if (!v18)
  {
    uint64_t v20 = 0;
    goto LABEL_5;
  }
  uint64_t v20 = *(void *)(v18 + 8);
  uint64_t v19 = *(std::__shared_weak_count **)(v18 + 16);
  if (!v19)
  {
LABEL_5:
    double v28 = 0;
    goto LABEL_6;
  }
  double v28 = v19;
  atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_6:
  uint64_t v21 = *((void *)this + 68);
  CMTime v43 = *a2;
  if (a11 && Li3DEngineScene::sceneManager((Li3DEngineScene *)v21))
  {
    uint64_t v22 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)v21);
    OZLockingGroup::acquireReadLocks(v22);
  }
  *a3 = 1.0;
  *a4 = 1.0;
  *a5 = 1.0;
  if (a7)
  {
    v34[0].f64[0] = 0.0;
    v35[0] = 0.0;
    double v31 = 0.0;
    CMTime v42 = v43;
    OZChannelScale3D::getValue((OZChannelScale3D *)(v20 + 2864), &v42, v34[0].f64, v35, &v31, 0.0);
    *a3 = v34[0].f64[0] * *a3;
    *a4 = v35[0] * *a4;
    *a5 = v31 * *a5;
    if ((TXTextLayout::shouldScaleToLRMargins((TXTextLayout *)v21) & 1) != 0
      || TXTextLayout::shouldScaleProportionallyToLeftRightMargins((TXTextLayout *)v21))
    {
      *a3 = TXTextLayout::getXMarginScale((TXTextLayout *)v21) * *a3;
    }
    if ((TXTextLayout::shouldScaleToTBMargins((TXTextLayout *)v21) & 1) != 0
      || TXTextLayout::shouldScaleProportionallyToLeftRightMargins((TXTextLayout *)v21))
    {
      *a4 = TXTextLayout::getYMarginScale((TXTextLayout *)v21) * *a4;
    }
  }
  if (a6)
  {
    v34[0].f64[0] = 0.0;
    v35[0] = 0.0;
    double v31 = 0.0;
    HIDWORD(v23) = HIDWORD(v43.value);
    CMTime v41 = v43;
    LODWORD(v23) = *((_DWORD *)this + 184);
    OZChannelScale3D::getValue((OZChannelScale3D *)(v21 + 26232), &v41, v34[0].f64, v35, &v31, (double)v23);
    *a3 = v34[0].f64[0] * *a3;
    *a4 = v35[0] * *a4;
    *a5 = v31 * *a5;
  }
  if (a8)
  {
    v35[0] = 1.0;
    memset(&v35[1], 0, 24);
    *(double *)&uint64_t v36 = 1.0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0x3FF0000000000000;
    TXTextObject::getScaleMatrix(this, (uint64_t)v35, a2, a11);
    double v24 = *(double *)&v36;
    *a3 = *a3 * fabs(v35[0]);
    *a4 = *a4 * fabs(v24);
    if (*(unsigned char *)(theApp + 81))
    {
      OZRenderParams::getPixelTransform((OZRenderParams *)a2, (uint64_t)v34);
      double v31 = 0.0;
      double v32 = 0.0;
      uint64_t v33 = 0;
      getScale(v34, (uint64_t)&v31);
      double v25 = v32;
      *a3 = *a3 * fabs(v31);
      *a4 = *a4 * fabs(v25);
    }
  }
  if (a9)
  {
    v34[0].f64[0] = 0.0;
    v35[0] = 0.0;
    CMTime v30 = *a2;
    TXTextObject::getDropShadowScale(this, &v30, v34[0].f64, v35, 1);
    *a3 = v34[0].f64[0] * *a3;
    *a4 = v35[0] * *a4;
  }
  if (a10)
  {
    v34[0].f64[0] = 0.0;
    v35[0] = 0.0;
    CMTime v29 = *a2;
    TXTextObject::getGlowScale(this, &v29, v34[0].f64, v35, 1);
    *a3 = v34[0].f64[0] * *a3;
    *a4 = v35[0] * *a4;
  }
  if (a11 && Li3DEngineScene::sceneManager((Li3DEngineScene *)v21))
  {
    double v26 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)v21);
    OZLockingGroup::releaseReadLocks(v26);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
}

void sub_1B762C1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void TXTextObject::getRotation(TXTextObject *this, CMTime *a2, double *a3, double *a4, double *a5, int a6, int a7)
{
  uint64_t v14 = *((void *)this + 33);
  if (v14)
  {
    uint64_t v16 = *(void *)(v14 + 8);
    double v15 = *(std::__shared_weak_count **)(v14 + 16);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v16 = 0;
    double v15 = 0;
  }
  uint64_t v17 = *((void *)this + 68);
  if (a7 && Li3DEngineScene::sceneManager(*((Li3DEngineScene **)this + 68)))
  {
    uint64_t v18 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)v17);
    OZLockingGroup::acquireReadLocks(v18);
  }
  if (*((unsigned char *)this + 160))
  {
    if (a3) {
      *a3 = 0.0;
    }
    double v19 = 0.0;
    if (!a4) {
      goto LABEL_20;
    }
LABEL_19:
    *a4 = v19;
    goto LABEL_20;
  }
  if (a3)
  {
    CMTime v35 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v16 + 4480), &v35, 0.0);
    *a3 = v20 + *((double *)this + 27);
    if (a6)
    {
      CMTime v34 = *a2;
      HIDWORD(v21) = HIDWORD(v34.value);
      LODWORD(v21) = *((_DWORD *)this + 184);
      OZChannel::getValueAsDouble((OZChannel *)(v17 + 26960), &v34, (double)v21);
      *a3 = v22 + *a3;
    }
  }
  if (a4)
  {
    CMTime v33 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v16 + 4632), &v33, 0.0);
    *a4 = v23 + *((double *)this + 28);
    if (a6)
    {
      CMTime v32 = *a2;
      HIDWORD(v24) = HIDWORD(v32.value);
      LODWORD(v24) = *((_DWORD *)this + 184);
      OZChannel::getValueAsDouble((OZChannel *)(v17 + 27112), &v32, (double)v24);
      double v19 = v25 + *a4;
      goto LABEL_19;
    }
  }
LABEL_20:
  if (a5)
  {
    CMTime v31 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v16 + 4784), &v31, 0.0);
    *a5 = v26 + *((double *)this + 29);
    if (a6)
    {
      CMTime v30 = *a2;
      HIDWORD(v27) = HIDWORD(v30.value);
      LODWORD(v27) = *((_DWORD *)this + 184);
      OZChannel::getValueAsDouble((OZChannel *)(v17 + 27264), &v30, (double)v27);
      *a5 = v28 + *a5;
    }
  }
  if (a7 && Li3DEngineScene::sceneManager((Li3DEngineScene *)v17))
  {
    CMTime v29 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)v17);
    OZLockingGroup::releaseReadLocks(v29);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1B762C408(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXTextObject::getPivot(TXTextLayout **this, double *a2, double *a3, double *a4, CMTime *a5, int a6)
{
  *a3 = 0.0;
  *a4 = 0.0;
  uint64_t v83 = 0;
  char v84 = 0;
  uint64_t v85 = 0x3FF0000000000000;
  uint64_t v86 = 0;
  int v87 = 0;
  char v88 = 1;
  v89[0] = 0;
  *(_DWORD *)((char *)v89 + 7) = 0;
  uint64_t v12 = TXTextObject::syncGlyph((TXTextObject *)this, a5, (uint64_t)&v83);
  if (!v12)
  {
    *a2 = 0.0;
    goto LABEL_29;
  }
  double v81 = 0.0;
  uint64_t v82 = 0;
  (*(void (**)(uint64_t, uint64_t *, double *, uint64_t *))(*(void *)v12 + 48))(v12, &v82, &v81, &v83);
  *(void *)a2 = v82;
  *a3 = v81;
  double v79 = 1.0;
  double v80 = 1.0;
  double v78 = 1.0;
  double v13 = this[33];
  if (v13)
  {
    uint64_t v14 = *((void *)v13 + 1);
    double v15 = (std::__shared_weak_count *)*((void *)v13 + 2);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    double v15 = 0;
    uint64_t v14 = 0;
  }
  CMTime v77 = *a5;
  OZChannelScale3D::getValue((OZChannelScale3D *)(v14 + 2864), &v77, &v80, &v79, &v78, 0.0);
  *a2 = v80 * *a2;
  int v16 = (*(uint64_t (**)(TXTextLayout *))(*(void *)this[68] + 296))(this[68]);
  double v74 = 0.0;
  double v75 = 0.0;
  double v76 = 0.0;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this[68] + 22288), MEMORY[0x1E4F1FA48], 0.0);
  int v18 = OZChannel::getValueAsInt((OZChannel *)((char *)this[68] + 22544), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v19 = (uint64_t)this[68];
  CMTime v73 = *a5;
  TXTextLayout::getAnchorPointOffset(v19, &v73, &v74);
  int v20 = OZChannel::getValueAsInt((OZChannel *)((char *)this[68] + 22544), MEMORY[0x1E4F1FA48], 0.0);
  long long v71 = xmmword_1B7E736F0;
  long long v72 = xmmword_1B7E736F0;
  long long v70 = xmmword_1B7E736F0;
  if ((v16 & 1) == 0)
  {
    switch(ValueAsInt)
    {
      case 3:
        OZRenderState::OZRenderState(&v68);
        *(_OWORD *)&v68.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *(_OWORD *)&a5->value;
        v68.var0.int64_t var3 = a5->epoch;
        TXTextLayout::getTypographicBoundsWithAlignment(this[68], (const CMTime *)&v68, (uint64_t)&v64);
        double v26 = v64;
        double v21 = v65;
        double v22 = v66;
        double var1 = v67;
        goto LABEL_24;
      case 2:
        char v28 = v20 == 2;
        CMTime v29 = this[68];
        unint64_t v30 = *((unsigned int *)this + 184);
        CMTime v69 = *a5;
        TXTextLayout::getLineBounds(v29, &v69, v30, v28, a6, (uint64_t)&v68);
        break;
      case 1:
        TXTextLayout::getWordBounds(this[68], *((unsigned int *)this + 184), v20 == 2, (uint64_t)&v68);
        break;
      default:
        double v21 = 0.0;
        double v22 = -1.0;
LABEL_23:
        double var1 = -1.0;
        double v26 = 0.0;
        goto LABEL_24;
    }
    double v26 = *(double *)&v68.var0.var0;
    double v21 = *(double *)&v68.var0.var1;
    double v22 = *(double *)&v68.var0.var3;
    double var1 = v68.var1;
    goto LABEL_24;
  }
  double v21 = 0.0;
  double v22 = -1.0;
  switch(ValueAsInt)
  {
    case 0:
      if (v20 == 2)
      {
        double v23 = *((double *)this + 54);
        double v24 = *((double *)this + 53) + *((double *)this + 55);
        double v25 = v23 + *((double *)this + 56);
        *(void *)&long long v70 = this[53];
        *((double *)&v70 + 1) = v24;
        *(double *)&long long v71 = v23;
        *((double *)&v71 + 1) = v25;
        long long v72 = 0uLL;
        goto LABEL_23;
      }
      TXTextObject::getBoundingImageVolume((TXTextObject *)this, (uint64_t)&v70, (uint64_t)a5);
      double var1 = -1.0;
      double v26 = 0.0;
      break;
    case 1:
      TXTextLayout::getWordVolume(this[68], *((unsigned int *)this + 184), v20 == 2, (double *)&v68.var0.var0);
      goto LABEL_21;
    case 2:
      BOOL v31 = v20 == 2;
      CMTime v32 = this[68];
      unint64_t v33 = *((unsigned int *)this + 184);
      CMTime v63 = *a5;
      TXTextLayout::getLineVolume(v32, &v63, v33, v31, (double *)&v68.var0.var0);
LABEL_21:
      long long v70 = *(_OWORD *)&v68.var0.var0;
      long long v71 = *(_OWORD *)&v68.var0.var3;
      long long v72 = *(_OWORD *)&v68.var2;
      goto LABEL_23;
    case 3:
      OZRenderState::OZRenderState(&v68);
      *(_OWORD *)&v68.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *(_OWORD *)&a5->value;
      v68.var0.int64_t var3 = a5->epoch;
      TXTextLayout::getTypographicBox((uint64_t)this[68], (float64x2_t *)&v70, (CMTime *)&v68, 1);
      goto LABEL_23;
    default:
      goto LABEL_23;
  }
LABEL_24:
  CMTime v34 = this[68];
  if (*((unsigned char *)v34 + 63801))
  {
    double v35 = v75;
    *a2 = v74 + *a2;
    *a3 = v35 + *a3;
    *a4 = v76 + *a4;
    if (ValueAsInt)
    {
      *a2 = v22 * 0.5 + v26 - *a2 - *((double *)this + 21);
      *a3 = v21 + var1 * 0.5 - *a3 - *((double *)this + 22);
    }
    if (v15) {
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  if (!v16)
  {
    *a4 = 0.0;
    if (!ValueAsInt)
    {
      if (v18 != 2)
      {
        OZRenderState::OZRenderState(&v68);
        *(_OWORD *)&v68.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *(_OWORD *)&a5->value;
        v68.var0.int64_t var3 = a5->epoch;
        TXTextObject::getImageBounds((TXTextObject *)this, &v68, (uint64_t)&v64);
        double v48 = v64;
        double v53 = v65;
        double v54 = v66;
        double v55 = v67;
        double v56 = v67 * 0.5;
        *a2 = v64 + v66 * 0.5;
        double v57 = v53 + v56;
        *a3 = v57;
        switch(v18)
        {
          case 0:
            double v58 = v57 - v57;
            goto LABEL_72;
          case 3:
            double v58 = v53 + v55;
LABEL_72:
            *a3 = v58;
            break;
          case 4:
            goto LABEL_74;
          case 5:
            double v48 = v48 + v54;
LABEL_74:
            *a2 = v48;
            break;
          default:
            break;
        }
LABEL_75:
        *a2 = v80 * *a2;
        double v41 = v79 * *a3;
        goto LABEL_76;
      }
      double v46 = *((double *)this + 54);
      double v47 = *((double *)this + 56);
      *a2 = *((double *)this + 53) + *((double *)this + 55) * 0.5;
      double v41 = v46 + v47 * 0.5;
LABEL_76:
      *a3 = v41;
      goto LABEL_77;
    }
    if (v18 != 4)
    {
      if (v18 != 5)
      {
        *a2 = v22 * 0.5 + v26 - *((double *)this + 21);
        if (v18 == 3)
        {
          double v40 = var1 + v21 - v81;
          goto LABEL_44;
        }
        if (!v18 && ValueAsInt != 3)
        {
          *a3 = 0.0;
          goto LABEL_77;
        }
LABEL_43:
        double v40 = v21 + var1 * 0.5;
LABEL_44:
        double v41 = v40 - *((double *)this + 22);
        goto LABEL_76;
      }
      double v26 = v22 + v26;
    }
    *a2 = v26 - *((double *)this + 21);
    goto LABEL_43;
  }
  if (!ValueAsInt)
  {
    if (v18 == 2)
    {
      double v42 = *((double *)this + 53);
      double v43 = *((double *)this + 54);
      double v44 = v42 + *((double *)this + 55);
      double v45 = v43 + *((double *)this + 56);
      *(double *)&long long v70 = v42;
      *((double *)&v70 + 1) = v44;
      *(double *)&long long v71 = v43;
      *((double *)&v71 + 1) = v45;
      long long v72 = 0uLL;
      *a2 = (v42 + v44) * 0.5;
      *a3 = (v43 + v45) * 0.5;
      *a4 = 0.0;
      goto LABEL_77;
    }
    TXTextObject::getBoundingImageVolume((TXTextObject *)this, (uint64_t)&v70, (uint64_t)a5);
    float64_t v49 = *((double *)&v70 + 1);
    double v48 = *(double *)&v70;
    uint64_t v50 = *((void *)&v71 + 1);
    double v51 = (*(double *)&v72 + *((double *)&v72 + 1)) * 0.5;
    double v52 = *(double *)&v71 + *((double *)&v71 + 1);
    *a2 = (*(double *)&v70 + *((double *)&v70 + 1)) * 0.5;
    *a3 = v52 * 0.5;
    *a4 = v51;
    switch(v18)
    {
      case 0:
        *a3 = 0.0;
        break;
      case 3:
        *(void *)a3 = v50;
        break;
      case 4:
        goto LABEL_74;
      case 5:
        *a2 = v49;
        break;
      default:
        goto LABEL_75;
    }
    goto LABEL_75;
  }
  double v36 = *(double *)&v70;
  double v37 = *((double *)&v70 + 1) - *(double *)&v70;
  long long v38 = v71;
  *a2 = *(double *)&v70 - *((double *)this + 21) + (*((double *)&v70 + 1) - *(double *)&v70) * 0.5;
  double v39 = *(double *)&v72 + *((double *)&v72 + 1);
  *a3 = (*(double *)&v38 + *((double *)&v38 + 1)) * 0.5 - *a3 - *((double *)this + 22);
  *a4 = v39 * 0.5;
  switch(v18)
  {
    case 0:
      if (ValueAsInt == 3)
      {
        *a3 = *(double *)&v38
            - *((double *)this + 25)
            - *(double *)(*(void *)(*(void *)(*((void *)v34 + 2379) - 8) + 888)
                        + ((unint64_t)(*(_DWORD *)(*(void *)(*((void *)v34 + 2379) - 8)
                                                                      + 876)
                                                          - 1) << 6)
                        + 8);
        goto LABEL_61;
      }
      *a3 = 0.0;
      break;
    case 3:
      *a3 = *((double *)&v38 + 1) - v81 - *((double *)this + 22);
      break;
    case 4:
      double v59 = v36 - *((double *)this + 21);
      goto LABEL_59;
    case 5:
      double v59 = v37 + v36 - *((double *)this + 21);
LABEL_59:
      *a2 = v59;
      break;
    default:
      break;
  }
  if (ValueAsInt == 3)
  {
LABEL_61:
    uint64_t ParagraphStyleContainingOffset = (TXParagraphStyle *)TXTextLayout::getParagraphStyleContainingOffset(v34, *((unsigned int *)this + 184));
    switch(TXParagraphStyle::getAlignment(ParagraphStyleContainingOffset))
    {
      case 1u:
      case 4u:
        double v61 = *a2 + (*((double *)&v70 + 1) - *(double *)&v70) * -0.5;
        goto LABEL_64;
      case 2u:
      case 5u:
        double v61 = *a2 - (*((double *)&v70 + 1) - *(double *)&v70);
LABEL_64:
        *a2 = v61;
        break;
      default:
        break;
    }
  }
LABEL_77:
  double v62 = v75;
  *a2 = v74 + *a2;
  *a3 = v62 + *a3;
  *a4 = v76 + *a4;
  if (v15) {
LABEL_28:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_29:
  if (BYTE2(v89[0]))
  {
    if (v86) {
      MEMORY[0x1BA9BFBA0](v86, 0x1000C40FF89C88ELL);
    }
  }
}

void sub_1B762CC94(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  if (*(unsigned char *)(v2 - 113))
  {
    uint64_t v4 = *(void *)(v2 - 128);
    if (v4) {
      MEMORY[0x1BA9BFBA0](v4, 0x1000C40FF89C88ELL);
    }
  }
  _Unwind_Resume(exception_object);
}

void PCMatrix44Tmpl<double>::rightRotate(double *a1, int a2, double a3, double a4, double a5)
{
  switch(a2)
  {
    case 0:
      PCMatrix44Tmpl<double>::rightRotate(a1, 2, a5);
      int v9 = a1;
      double v10 = a4;
      int v11 = 1;
      goto LABEL_4;
    case 1:
      PCMatrix44Tmpl<double>::rightRotate(a1, 1, a4);
      int v9 = a1;
      double v10 = a5;
      int v11 = 2;
LABEL_4:
      PCMatrix44Tmpl<double>::rightRotate(v9, v11, v10);
      uint64_t v12 = a1;
      double v13 = a3;
      int v14 = 0;
      goto LABEL_11;
    case 2:
      PCMatrix44Tmpl<double>::rightRotate(a1, 2, a5);
      double v15 = a1;
      double v16 = a3;
      int v17 = 0;
      goto LABEL_7;
    case 3:
      PCMatrix44Tmpl<double>::rightRotate(a1, 0, a3);
      double v15 = a1;
      double v16 = a5;
      int v17 = 2;
LABEL_7:
      PCMatrix44Tmpl<double>::rightRotate(v15, v17, v16);
      uint64_t v12 = a1;
      double v13 = a4;
      int v14 = 1;
      goto LABEL_11;
    case 4:
      PCMatrix44Tmpl<double>::rightRotate(a1, 1, a4);
      int v18 = a1;
      double v19 = a3;
      int v20 = 0;
      goto LABEL_10;
    case 5:
      PCMatrix44Tmpl<double>::rightRotate(a1, 0, a3);
      int v18 = a1;
      double v19 = a4;
      int v20 = 1;
LABEL_10:
      PCMatrix44Tmpl<double>::rightRotate(v18, v20, v19);
      uint64_t v12 = a1;
      double v13 = a5;
      int v14 = 2;
LABEL_11:
      PCMatrix44Tmpl<double>::rightRotate(v12, v14, v13);
      break;
    default:
      return;
  }
}

void TXSequenceChannels::getPosition(uint64_t a1, const CMTime *a2, void *a3, double a4)
{
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 296), a2, a4);
  uint64_t v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 448), a2, a4);
  uint64_t v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 896), a2, a4);
  *a3 = v9;
  a3[1] = v11;
  a3[2] = v12;
}

float64x2_t PCMatrix44Tmpl<double>::rightShear(float64x2_t *a1, float64_t a2, double a3)
{
  v3.f64[0] = a2;
  if (a2 != 0.0)
  {
    if (a2 < 0.0)
    {
      do
        v3.f64[0] = v3.f64[0] + 3.14159265;
      while (v3.f64[0] < 0.0);
    }
    for (; v3.f64[0] > 3.14159265; v3.f64[0] = v3.f64[0] + -3.14159265)
      ;
    double v5 = 1.56556034;
    if (v3.f64[0] >= 1.57603231 || v3.f64[0] <= 1.56556034) {
      double v5 = v3.f64[0];
    }
    double v19 = a3;
    long double v7 = tan(v5);
    a3 = v19;
    v3.f64[0] = v7;
  }
  if (a3 != 0.0)
  {
    for (; a3 < 0.0; a3 = a3 + 3.14159265)
      ;
    for (; a3 > 3.14159265; a3 = a3 + -3.14159265)
      ;
    double v8 = 1.56556034;
    if (a3 >= 1.57603231 || a3 <= 1.56556034) {
      double v8 = a3;
    }
    float64_t v20 = v3.f64[0];
    long double v10 = tan(v8);
    v3.f64[0] = v20;
    a3 = v10;
  }
  v3.f64[1] = a3;
  int8x16_t v11 = (int8x16_t)vmulq_f64(v3, *a1);
  *a1 = vaddq_f64(*a1, (float64x2_t)vextq_s8(v11, v11, 8uLL));
  float64x2_t v12 = a1[2];
  int8x16_t v13 = (int8x16_t)vmulq_f64(v3, v12);
  a1[2] = vaddq_f64(v12, (float64x2_t)vextq_s8(v13, v13, 8uLL));
  float64x2_t v14 = a1[4];
  int8x16_t v15 = (int8x16_t)vmulq_f64(v3, v14);
  a1[4] = vaddq_f64(v14, (float64x2_t)vextq_s8(v15, v15, 8uLL));
  float64x2_t v16 = a1[6];
  int8x16_t v17 = (int8x16_t)vmulq_f64(v3, v16);
  float64x2_t result = vaddq_f64(v16, (float64x2_t)vextq_s8(v17, v17, 8uLL));
  a1[6] = result;
  return result;
}

double OZRenderParams::setCamera(uint64_t a1, const PCSharedCount *a2)
{
  *(PCSharedCount *)(a1 + 1280) = (PCSharedCount)a2->var0;
  float64x2_t v3 = (uint64_t *)(a1 + 1288);
  PCSharedCount::PCSharedCount(&v5, a2 + 1);
  PCSharedCount::operator=(v3, (uint64_t *)&v5);
  PCSharedCount::~PCSharedCount(&v5);
  double result = 0.0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  return result;
}

void sub_1B762D148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

void TXTextObject::getFourCornerPointsInObjectSpaceForAttribute(uint64_t a1, const OZRenderState *a2, float64x2_t *a3, float64x2_t *a4, float64x2_t *a5, float64x2_t *a6, int a7, int a8, double a9, double a10, double a11, double a12, unsigned __int8 a13, float64x2_t *a14)
{
  long long v20 = *(_OWORD *)&a2->var0.var0;
  v79.CMTimeEpoch epoch = a2->var0.var3;
  double v76 = 0.0;
  double v77 = 0.0;
  __asm { FMOV            V4.2D, #-1.0 }
  long long v78 = _Q4;
  *(_OWORD *)&v79.CMTimeValue value = v20;
  TXTextObject::getImageBoundsOfAttribute(a1, &v76, a2, a7, a8, 0, a13, a14, a9, a10, a11, a12);
  uint64_t v26 = *(void *)(a1 + 264);
  if (v26)
  {
    uint64_t v27 = *(void *)(v26 + 8);
    char v28 = *(std::__shared_weak_count **)(v26 + 16);
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    char v28 = 0;
    uint64_t v27 = 0;
  }
  long long v70 = v28;
  switch(a7)
  {
    case 1:
      uint64_t v29 = v27 + 27976;
      uint64_t v30 = *(void *)(a1 + 544);
      uint64_t v31 = 35712;
      break;
    case 2:
      uint64_t v29 = v27 + 37568;
      uint64_t v30 = *(void *)(a1 + 544);
      uint64_t v31 = 42096;
      break;
    case 3:
      uint64_t v29 = v27 + 19680;
      uint64_t v30 = *(void *)(a1 + 544);
      uint64_t v31 = 47672;
      break;
    default:
      uint64_t v29 = v27 + 10896;
      uint64_t v30 = *(void *)(a1 + 544);
      uint64_t v31 = 30472;
      break;
  }
  uint64_t v32 = v30 + v31;
  char isEnabled = OZChannelBase::isEnabled((OZChannelBase *)(v30 + v31), 0, 1);
  float64_t v74 = 1.0;
  float64_t v75 = 1.0;
  if ((a7 & 0xFFFFFFFE) == 2 && a8)
  {
    if (a7 == 2)
    {
      CMTime v73 = v79;
      TXTextObject::getGlowScale((TXTextObject *)a1, &v73, &v75, &v74, a13);
    }
    else
    {
      CMTime v72 = v79;
      TXTextObject::getDropShadowScale((TXTextObject *)a1, &v72, &v75, &v74, a13);
    }
    v34.f64[0] = v75;
    v34.f64[1] = v74;
    *a6 = vmulq_f64(v34, *a6);
    *a5 = vmulq_f64(v34, *a5);
    *a3 = vmulq_f64(v34, *a3);
    *a4 = vmulq_f64(v34, *a4);
  }
  OZChannel::getValueAsDouble((OZChannel *)(v29 + 272), &v79, 0.0);
  double v36 = v35;
  double v37 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)(v29 + 424), &v79, 0.0);
  double v39 = *(double *)&v38;
  int v40 = (isEnabled & a13);
  double v41 = 0.0;
  if (v40 == 1)
  {
    LODWORD(v38) = *(_DWORD *)(a1 + 736);
    double v42 = (double)v38;
    OZChannel::getValueAsDouble((OZChannel *)(v32 + 272), &v79, (double)v38);
    double v41 = v43;
    OZChannel::getValueAsDouble((OZChannel *)(v32 + 424), &v79, v42);
    double v37 = v44;
  }
  double v45 = v37 + v77 + v39 * v74;
  a3->f64[0] = v41 + v76 + v36 * v75;
  a3->f64[1] = v45;
  OZChannel::getValueAsDouble((OZChannel *)(v29 + 976), &v79, 0.0);
  double v47 = v46;
  OZChannel::getValueAsDouble((OZChannel *)(v29 + 1128), &v79, 0.0);
  double v49 = *(double *)&v48;
  if (v40)
  {
    LODWORD(v48) = *(_DWORD *)(a1 + 736);
    double v50 = (double)v48;
    OZChannel::getValueAsDouble((OZChannel *)(v32 + 976), &v79, (double)v48);
    double v41 = v51;
    OZChannel::getValueAsDouble((OZChannel *)(v32 + 1128), &v79, v50);
    double v37 = v52;
  }
  double v53 = v37 + v77 + v49 * v74;
  a4->f64[0] = v41 + v76 + *(double *)&v78 + v47 * v75;
  a4->f64[1] = v53;
  OZChannel::getValueAsDouble((OZChannel *)(v29 + 1680), &v79, 0.0);
  double v55 = v54;
  OZChannel::getValueAsDouble((OZChannel *)(v29 + 1832), &v79, 0.0);
  double v57 = *(double *)&v56;
  if (v40)
  {
    LODWORD(v56) = *(_DWORD *)(a1 + 736);
    double v58 = (double)v56;
    OZChannel::getValueAsDouble((OZChannel *)(v32 + 1680), &v79, (double)v56);
    double v41 = v59;
    OZChannel::getValueAsDouble((OZChannel *)(v32 + 1832), &v79, v58);
    double v37 = v60;
  }
  double v61 = v37 + v77 + *((double *)&v78 + 1) + v57 * v74;
  a5->f64[0] = v41 + v76 + *(double *)&v78 + v55 * v75;
  a5->f64[1] = v61;
  OZChannel::getValueAsDouble((OZChannel *)(v29 + 2384), &v79, 0.0);
  double v63 = v62;
  OZChannel::getValueAsDouble((OZChannel *)(v29 + 2536), &v79, 0.0);
  double v65 = *(double *)&v64;
  if (v40)
  {
    LODWORD(v64) = *(_DWORD *)(a1 + 736);
    double v66 = (double)v64;
    OZChannel::getValueAsDouble((OZChannel *)(v32 + 2384), &v79, (double)v64);
    double v41 = v67;
    OZChannel::getValueAsDouble((OZChannel *)(v32 + 2536), &v79, v66);
    double v37 = v68;
  }
  double v69 = v37 + v77 + *((double *)&v78 + 1) + v65 * v74;
  a6->f64[0] = v41 + v76 + v63 * v75;
  a6->f64[1] = v69;
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
}

void sub_1B762D5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9)
{
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  _Unwind_Resume(exception_object);
}

BOOL PCRect<double>::clipLine(double *a1, float64x2_t *a2, double *a3)
{
  double v6 = *a1;
  double v5 = a1[1];
  double v8 = a1[2];
  double v7 = a1[3];
  double v15 = 1.0;
  double v16 = 0.0;
  double v14 = *a3 - a2->f64[0];
  BOOL result = PCRectClipTest(-v14, a2->f64[0] - v6, &v16, &v15);
  if (result)
  {
    BOOL result = PCRectClipTest(v14, v6 + v8 - a2->f64[0], &v16, &v15);
    if (result)
    {
      double v10 = a2->f64[1];
      double v13 = a3[1] - v10;
      BOOL result = PCRectClipTest(-v13, v10 - v5, &v16, &v15);
      if (result)
      {
        BOOL result = PCRectClipTest(v13, v5 + v7 - a2->f64[1], &v16, &v15);
        if (result)
        {
          v11.f64[0] = v14;
          if (v15 < 1.0)
          {
            v12.f64[0] = v14;
            v12.f64[1] = v13;
            *(float64x2_t *)a3 = vaddq_f64(vmulq_n_f64(v12, v15), *a2);
          }
          if (v16 > 0.0)
          {
            v11.f64[1] = v13;
            *a2 = vaddq_f64(vmulq_n_f64(v11, v16), *a2);
          }
          return 1;
        }
      }
    }
  }
  return result;
}

void TXTextObject::computeRay(uint64_t a1@<X0>, uint64_t a2@<X2>, const OZRenderState *a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 80))(a2);
  OZRenderState::OZRenderState(&v54, a3);
  v54.var4 = 1;
  __p = 0;
  double v51 = 0;
  double v53 = 0;
  uint64_t v9 = *(void *)(a1 + 544);
  if (v9) {
    double v10 = (OZTransformNode *)(v9 + 200);
  }
  else {
    double v10 = 0;
  }
  var5 = a3->var5;
  if (v9) {
    BOOL v12 = v10 == var5;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    double v13 = 0;
    if (var5)
    {
LABEL_36:
      double v24 = (*(double (**)(OZTransformNode *))(*(void *)var5 + 1328))(var5);
      uint64_t v50 = 0x3FF0000000000000;
      uint64_t v47 = 0x3FF0000000000000;
      uint64_t v44 = 0x3FF0000000000000;
      uint64_t v41 = 0x3FF0000000000000;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      double v25 = a3->var3 / v24;
      if (v25 != 1.0)
      {
        uint64_t v41 = *(void *)&v25;
        *(double *)&long long v42 = v25 * 0.0;
        *((double *)&v42 + 1) = v25 * 0.0;
        *(double *)&long long v43 = v25 * 0.0;
      }
      PCRay3<double>::transform(a5, (double *)&v41);
      double v13 = (char *)__p;
    }
  }
  else
  {
    double v13 = 0;
    while (1)
    {
      if (v13 >= v53)
      {
        uint64_t v14 = (v13 - (unsigned char *)v51) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v15 = (v53 - (unsigned char *)v51) >> 2;
        if (v15 <= v14 + 1) {
          unint64_t v15 = v14 + 1;
        }
        if ((unint64_t)(v53 - (unsigned char *)v51) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          int8x16_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v53, v16);
        }
        else {
          int8x16_t v17 = 0;
        }
        int v18 = &v17[8 * v14];
        *(void *)int v18 = v10;
        double v13 = v18 + 8;
        double v19 = (char *)__p;
        long long v20 = (char *)v51;
        if (__p != v51)
        {
          do
          {
            uint64_t v21 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          double v19 = (char *)v51;
        }
        double v51 = v18;
        __p = v13;
        double v53 = &v17[8 * v16];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(void *)double v13 = v10;
        v13 += 8;
      }
      __p = v13;
      double v22 = (const void *)*((void *)v10 + 120);
      if (!v22) {
        break;
      }
      var5 = a3->var5;
      if (v10) {
        BOOL v23 = v10 == var5;
      }
      else {
        BOOL v23 = 1;
      }
      if (v23) {
        goto LABEL_35;
      }
    }
    var5 = a3->var5;
LABEL_35:
    if (var5) {
      goto LABEL_36;
    }
  }
  uint64_t v26 = (char *)v51;
  OZRenderParams::OZRenderParams((OZRenderParams *)&v41);
  OZRenderState::OZRenderState(&v40, a3);
  v40.var4 = 1;
  OZRenderParams::setState((OZRenderParams *)&v41, &v40);
  uint64_t v39 = 0x3FF0000000000000;
  uint64_t v36 = 0x3FF0000000000000;
  uint64_t v33 = 0x3FF0000000000000;
  uint64_t v30 = 0x3FF0000000000000;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  TXTextObject::getTransformMatrix(a1, (uint64_t)&v30, (long long *)&v41, 1, 1, 0, 1, 0.0, 0.0);
  while (v13 != v26)
  {
    uint64_t v27 = *((void *)v13 - 1);
    v13 -= 8;
    (*(void (**)(uint64_t, uint64_t, OZRenderState *))(*(void *)v27 + 1392))(v27, a5, &v54);
    double v28 = *(double *)(a5 + 24) * *(double *)(a5 + 24)
        + *(double *)(a5 + 32) * *(double *)(a5 + 32)
        + *(double *)(a5 + 40) * *(double *)(a5 + 40);
    if (v28 > -0.0000001 && v28 < 0.0000001) {
      goto LABEL_48;
    }
  }
  if (a4) {
    uint64_t v29 = a4;
  }
  else {
    uint64_t v29 = &v30;
  }
  PCRay3<double>::invTransform((void *)a5, v29);
LABEL_48:
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v41);
  if (v51)
  {
    __p = v51;
    operator delete(v51);
  }
}

void sub_1B762DAEC(_Unwind_Exception *a1)
{
  uint64_t v2 = (void *)STACK[0x728];
  if (STACK[0x728])
  {
    STACK[0x730] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

BOOL PCRay3<double>::invTransform(void *a1, _OWORD *a2)
{
  long long v3 = a2[5];
  v8[4] = a2[4];
  long long v9 = v3;
  long long v4 = a2[7];
  long long v10 = a2[6];
  long long v11 = v4;
  long long v5 = a2[1];
  v8[0] = *a2;
  v8[1] = v5;
  long long v6 = a2[3];
  v8[2] = a2[2];
  uint64_t v8[3] = v6;
  if (PCMatrix44Tmpl<double>::invert((double *)v8, (double *)v8, 0.0)) {
    return PCRay3<double>::transform((uint64_t)a1, (double *)v8);
  }
  *(void *)&long long v9 = 0x3FB999999999999ALL;
  BOOL result = PCMatrix44Tmpl<double>::invert((double *)v8, (double *)v8, 0.0);
  if (result) {
    return PCRay3<double>::transform((uint64_t)a1, (double *)v8);
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  return result;
}

void TXTextObject::getEyeMatrix(TXTextObject *this@<X0>, OZRenderParams *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 120) = 0x3FF0000000000000;
  *(void *)(a3 + 80) = 0x3FF0000000000000;
  *(void *)(a3 + 40) = 0x3FF0000000000000;
  *(void *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  OZRenderParams::OZRenderParams((OZRenderParams *)v22, a2);
  int v23 = 1;
  TXTextObject::getTransformMatrix((uint64_t)this, a3, v22, 0, 1, 0, 1, 0.0, 0.0);
  uint64_t v11 = *((void *)this + 68);
  if (v11)
  {
    uint64_t v21 = 0x3FF0000000000000;
    uint64_t v18 = 0x3FF0000000000000;
    uint64_t v15 = 0x3FF0000000000000;
    uint64_t v12 = 0x3FF0000000000000;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    (*(void (**)(uint64_t, uint64_t *, OZRenderParams *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 200) + 1288))(v11 + 200, &v12, a2, v6, v7, v8, v9, v10);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)a2 + 160) + 24))(&v12);
  }
  PCMatrix44Tmpl<double>::leftMult(a3, (double *)&v12);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v22);
}

void sub_1B762DD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

double TXTextObject::calcTranslationRelativeToCamera(uint64_t a1, uint64_t a2, uint64_t a3, PC_Sp_counted_base *a4, OZRenderState *a5, float64x2_t *a6)
{
  OZRenderState::OZRenderState(&v56, a5);
  OZRenderParams::OZRenderParams((OZRenderParams *)v54);
  int v55 = 1;
  uint64_t v53 = 0x3FF0000000000000;
  uint64_t v50 = 0x3FF0000000000000;
  uint64_t v47 = 0x3FF0000000000000;
  uint64_t v44 = 0x3FF0000000000000;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  TXTextObject::getTransformMatrix(a1, (uint64_t)&v44, v54, 1, 1, 0, 1, 0.0, 0.0);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, PC_Sp_counted_base *, OZRenderState *, void))(*(void *)a1 + 48))(v43, a1, a2, a4, &v56, 0);
  float64x2_t v41 = 0uLL;
  double v42 = 0.0;
  memset(v39, 0, sizeof(v39));
  unint64_t v40 = 0xBFF0000000000000;
  PCIntersectRayWithPlane((double *)v43, (double *)v39, v41.f64);
  OZRenderParams::setState((OZRenderParams *)v54, &v56);
  v29.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a4;
  if (a4) {
    uint64_t v11 = (PCShared_base *)((char *)a4 + *(void *)(*(void *)a4 - 24));
  }
  else {
    uint64_t v11 = 0;
  }
  PCSharedCount::PCSharedCount((PCSharedCount *)&v30, v11);
  OZRenderParams::setCamera((uint64_t)v54, &v29);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v30);
  uint64_t v38 = 0x3FF0000000000000;
  uint64_t v35 = 0x3FF0000000000000;
  uint64_t v32 = 0x3FF0000000000000;
  v29.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, long long *))(*(void *)a1 + 40))(v28, a1, v54);
  for (uint64_t i = 0; i != 8; i += 2)
  {
    long long v13 = (_OWORD *)((char *)&v29 + i * 16);
    long long v14 = v28[i + 1];
    *long long v13 = v28[i];
    v13[1] = v14;
  }
  float64x2_t v26 = v41;
  double v27 = v42;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v29, v26.f64, v26.f64);
  double v25 = v27;
  long long v15 = v30;
  uint64_t v16 = v31;
  uint64_t v17 = *((void *)&v34 + 1);
  *(void *)&long long v30 = *((void *)&v31 + 1);
  *((void *)&v30 + 1) = v34;
  *(void *)&long long v31 = *((void *)&v36 + 1);
  uint64_t v18 = v36;
  *((void *)&v31 + 1) = v15;
  uint64_t v19 = *((void *)&v33 + 1);
  *(void *)&long long v34 = *((void *)&v15 + 1);
  *((void *)&v34 + 1) = v33;
  *(void *)&long long v33 = v17;
  *(void *)&long long v36 = *((void *)&v37 + 1);
  *((void *)&v33 + 1) = v37;
  *((void *)&v36 + 1) = v16;
  float64x2_t v23 = 0uLL;
  double v24 = -1.0;
  *(void *)&long long v37 = v19;
  *((void *)&v37 + 1) = v18;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v29, v23.f64, v23.f64);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, PC_Sp_counted_base *, OZRenderState *, void))(*(void *)a1 + 48))(v28, a1, a3, a4, &v56, 0);
  v43[0] = v28[0];
  v43[1] = v28[1];
  _OWORD v43[2] = v28[2];
  double v20 = vaddvq_f64(vmulq_f64(v23, v23)) + v24 * v24;
  if (v20 <= -1.0e-24 || v20 >= 1.0e-24)
  {
    *(float64x2_t *)&v39[24] = v23;
    *(float64x2_t *)uint64_t v39 = vdivq_f64(vmulq_n_f64(v23, -v25), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v20, 0));
    unint64_t v40 = *(void *)&v24;
    *(double *)&v39[16] = -(v25 * v24) / v20;
  }
  PCIntersectRayWithPlane((double *)v43, (double *)v39, v26.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v44, v41.f64, v41.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v44, v26.f64, v26.f64);
  double v21 = v27 - v42;
  *a6 = vsubq_f64(v26, v41);
  a6[1].f64[0] = v21;
  OZRenderParams::~OZRenderParams((OZRenderParams *)v54);
  return result;
}

void sub_1B762E0B4(_Unwind_Exception *a1)
{
}

void TXTextObject::calcTranslationRelativeToObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, OZRenderState *a5, float64x2_t *a6)
{
  OZRenderState::OZRenderState(&v36, a5);
  OZRenderParams::OZRenderParams((OZRenderParams *)v34);
  int v35 = 1;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, OZRenderState *, void))(*(void *)a1 + 48))(v33, a1, a2, a4, &v36, 0);
  float64x2_t v31 = 0uLL;
  double v32 = 0.0;
  memset(v28, 0, sizeof(v28));
  uint64_t v29 = 0;
  unint64_t v30 = 0xBFF0000000000000;
  PCIntersectRayWithPlane((double *)v33, (double *)v28, v31.f64);
  float64x2_t v26 = v31;
  double v27 = v32;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, OZRenderState *, void))(*(void *)a1 + 48))(v25, a1, a3, a4, &v36, 0);
  v33[0] = v25[0];
  v33[1] = v25[1];
  _OWORD v33[2] = v25[2];
  PCIntersectRayWithPlane((double *)v33, (double *)v28, v26.f64);
  uint64_t v12 = *(void *)(a1 + 264);
  if (v12)
  {
    uint64_t v13 = *(void *)(v12 + 8);
    long long v14 = *(std::__shared_weak_count **)(v12 + 16);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v14 = 0;
    uint64_t v13 = 0;
  }
  float64_t v24 = 1.0;
  *(void *)&v25[0] = 0x3FF0000000000000;
  double v23 = 1.0;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a5->var0;
  HIDWORD(v15) = HIDWORD(var0.var0);
  LODWORD(v15) = *(_DWORD *)(a1 + 736);
  OZChannelScale3D::getValue((OZChannelScale3D *)(v13 + 2864), (const CMTime *)&var0, (double *)v25, &v24, &v23, (double)v15);
  a6[1].f64[0] = v27 - v32;
  v16.f64[0] = *(float64_t *)v25;
  v16.f64[1] = v24;
  __asm { FMOV            V2.2D, #1.0 }
  *a6 = vmulq_f64(vsubq_f64(v26, v31), vdivq_f64(_Q2, v16));
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)v34);
}

void sub_1B762E2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a42);
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      double v21 = 0;
      long long v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve(&v21, v12);
      uint64_t v13 = *(unint64_t **)a1;
      unint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v22 = v14 + v6;
      double v23 = v21;
      int v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      uint64_t v17 = v19;
      LODWORD(v18) = v20;
      unint64_t v15 = *(char **)a1;
      *(void *)a1 = v21;
      double v21 = v15;
      long long v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      long long v22 = v16;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      uint64_t v17 = (char *)(*(void *)a1 + 8 * (v5 >> 6));
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        double v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        double v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_1B762E480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::setStyleRun(uint64_t result, uint64_t a2)
{
  *(void *)(result + 264) = a2;
  return result;
}

BOOL TXTextObject::setUniChar(TXTextObject *this, UniChar a2)
{
  *((_WORD *)this + 60) = a2;
  BOOL result = TXCharacterSetIsWhitespace(a2);
  *((unsigned char *)this + 64) = result;
  return result;
}

BOOL TXTextObject::isAllCapsEnabled(TXTextObject *this)
{
  uint64_t v1 = *((void *)this + 33);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    long long v3 = *(std::__shared_weak_count **)(v1 + 16);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v2 = 0;
    long long v3 = 0;
  }
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v2 + 5504), MEMORY[0x1E4F1FA48], 0.0);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return ValueAsInt != 0;
}

void sub_1B762E548(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::syncGlyph(TXTextObject *this, CMTime *a2, uint64_t a3)
{
  uint64_t v6 = *((void *)this + 33);
  if (!v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    if (!a3) {
      goto LABEL_8;
    }
LABEL_7:
    CMTime v25 = *a2;
    HIDWORD(v9) = HIDWORD(v25.value);
    LODWORD(v9) = *((_DWORD *)this + 184);
    *(double *)a3 = TXTextObject::getRenderedFontSize(this, &v25, (double)v9);
    *(void *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 32) = *((_DWORD *)this + 131);
    goto LABEL_8;
  }
  uint64_t v8 = *(void **)(v6 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 16);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a3) {
    goto LABEL_7;
  }
LABEL_8:
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 272));
  BOOL v10 = 1;
  if (!*((unsigned char *)this + 384))
  {
    uint64_t v3 = *((void *)this + 47);
    if (v3) {
      BOOL v10 = 0;
    }
  }
  PCSharedMutex::unlock_shared((std::mutex *)((char *)this + 272));
  if (!v10) {
    goto LABEL_33;
  }
  if (*((_DWORD *)this + 131))
  {
    unint64_t v12 = (std::__shared_weak_count *)*((void *)this + 67);
    if (!v12)
    {
      uint64_t v13 = (TXFont *)*((void *)v11 + 5);
      if (!v13)
      {
LABEL_37:
        (*(void (**)(void *))(v8[2] + 80))(v8 + 2);
        uint64_t v3 = 0;
        if (!v7) {
          return v3;
        }
        goto LABEL_34;
      }
      goto LABEL_27;
    }
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v13 = (TXFont *)*((void *)v11 + 5);
    unint64_t v14 = v12;
    goto LABEL_16;
  }
  unint64_t v15 = (const void *)v8[65];
  long long v16 = (std::__shared_weak_count *)v8[66];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v15
  {
    uint64_t v18 = v17;
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      uint64_t v13 = v18[5];
      unint64_t v14 = v16;
LABEL_16:
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      if (!v13) {
        goto LABEL_37;
      }
      goto LABEL_27;
    }
    uint64_t v13 = v17[5];
    if (!v13) {
      goto LABEL_37;
    }
  }
  else
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    uint64_t v13 = (TXFont *)MEMORY[0x28];
    if (!MEMORY[0x28]) {
      goto LABEL_37;
    }
  }
LABEL_27:
  uint64_t v19 = *((unsigned __int16 *)this + 68);
  BOOL isAllCapsEnabled = TXTextObject::isAllCapsEnabled(this);
  __darwin_ct_rune_t v21 = *((unsigned __int16 *)this + 60);
  if (isAllCapsEnabled) {
    LOWORD(v21) = __toupper(v21);
  }
  Glyph = TXFont::getGlyph(v13, v19, (unsigned __int16)v21);
  if (Glyph) {
  else
  }
    double v23 = 0;
  PCSharedMutex::lock((std::mutex *)((char *)this + 272));
  *((void *)this + 47) = v23;
  *((unsigned char *)this + 384) = 0;
  PCSharedMutex::unlock((std::mutex *)((char *)this + 272));
  uint64_t v3 = *((void *)this + 47);
LABEL_33:
  if (v7) {
LABEL_34:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  return v3;
}

void sub_1B762E834(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

double TXTextObject::getRenderedFontSize(TXTextObject *this, CMTime *a2, double a3)
{
  uint64_t v5 = *((void *)this + 33);
  if (v5)
  {
    uint64_t v7 = *(void *)(v5 + 8);
    uint64_t v6 = *(std::__shared_weak_count **)(v5 + 16);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  CMTime v12 = *a2;
  double Size = TXTextStyle::getSize((OZChannel *)v7, &v12, a3);
  if (TXTextObject::isAllCapsEnabled(this) && *((unsigned char *)this + 569))
  {
    CMTime v11 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v7 + 5656), &v11, 0.0);
    double Size = v9 * Size;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return Size;
}

void sub_1B762E938(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::buildGlyphRequest@<X0>(TXTextObject *a1@<X0>, OZRenderState *a2@<X1>, char a3@<W2>, float64x2_t *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>, double a7@<D0>)
{
  *(void *)a6 = 0;
  *(unsigned char *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0x3FF0000000000000;
  *(void *)(a6 + 24) = 0;
  *(_DWORD *)(a6 + 32) = 0;
  *(unsigned char *)(a6 + 36) = 1;
  *(void *)(a6 + 37) = 0;
  unint64_t v14 = (unsigned char *)(a6 + 37);
  *(_DWORD *)(a6 + 44) = 0;
  *(_OWORD *)&v29.CMTimeValue value = *(_OWORD *)&a2->var0.var0;
  HIDWORD(v15) = HIDWORD(v29.value);
  LODWORD(v15) = *((_DWORD *)a1 + 97);
  v29.CMTimeEpoch epoch = a2->var0.var3;
  *(double *)a6 = TXTextObject::getRenderedFontSize(a1, &v29, (double)v15);
  *(unsigned char *)(a6 + 8) = a3;
  *(double *)(a6 + 16) = a7;
  if (!PCMatrix44Tmpl<double>::isIdentity(a4->f64))
  {
    TXTextObject::getImageBounds(a1, a2, (uint64_t)v28);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    v24[0] = 0.0;
    v24[1] = 0.0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v25 = _Q0;
    TXTextObject::computeScaleFactors((OZRenderParams *)a2, v28, a4, v24, (double *)&v27, (double *)&v26);
    operator new();
  }
  *(_DWORD *)(a6 + 32) = *((_DWORD *)a1 + 131);
  RenderNodeList = (PCColorSpaceCache *)HGRenderJob::GetRenderNodeList((HGRenderJob *)a2);
  int v22 = a5 ^ 1;
  if (!*(_DWORD *)(*(void *)RenderNodeList + 8)) {
    int v22 = 1;
  }
  unsigned char *v14 = v22;
  if (v22 == 1) {
    uint64_t result = OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
  }
  else {
    uint64_t result = PCColorSpaceCache::cgLinearGray(RenderNodeList);
  }
  *(void *)(a6 + 40) = result;
  return result;
}

void sub_1B762EAE8(_Unwind_Exception *exception_object)
{
}

void TXTextObject::computeScaleFactors(OZRenderParams *a1, double *a2, float64x2_t *a3, double *a4, double *a5, double *a6)
{
  LiImagePolygon::LiImagePolygon((LiImagePolygon *)v13);
  LiImagePolygon::set((uint64_t)v13, a2, 0);
  if (a4[2] >= 0.0 && a4[3] >= 0.0) {
    liTransformAndClip(a4, a3->f64, v13);
  }
  TXTextObject::computeScaleFactors(a1, (uint64_t)v13, a3, v12, a5, a6);
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v13);
}

void sub_1B762EBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *TXTextObject::getSystemGlyph(TXTextObject *a1, CMTime *a2, uint64_t a3)
{
  uint64_t result = (void *)TXTextObject::syncGlyph(a1, a2, a3);
  if (result)
  {
  }
  return result;
}

float64_t TXTextObject::getTransformedImageCornersWithFourCornerPinning(uint64_t a1, long long *a2, uint64_t a3, int a4, double a5, double a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v23 = 0x3FF0000000000000;
  uint64_t v20 = 0x3FF0000000000000;
  uint64_t v17 = 0x3FF0000000000000;
  uint64_t v14 = 0x3FF0000000000000;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  TXTextObject::getTransformMatrix(a1, (uint64_t)&v14, a2, 1, a8, a9, 1, a5, a6);
  return TXTextObject::getTransformedImageCornersWithFourCornerPinning(a1, (const OZRenderState *)a2, a4, (double *)&v14, a3, 0);
}

float64_t TXTextObject::getTransformedImageCornersWithFourCornerPinning(uint64_t a1, const OZRenderState *a2, int a3, double *a4, uint64_t a5, float64x2_t *a6)
{
  float64x2_t v20 = 0uLL;
  float64x2_t v19 = 0uLL;
  float64x2_t v18 = 0uLL;
  float64x2_t v17 = 0uLL;
  TXTextObject::getFourCornerPointsInObjectSpaceForAttribute(a1, a2, &v18, &v17, &v19, &v20, a3, 1, 0.0, 0.0, 0.0, 0.0, 1u, a6);
  float64x2_t v15 = v20;
  uint64_t v16 = 0;
  float64x2_t v13 = v19;
  uint64_t v14 = 0;
  float64x2_t v11 = v18;
  uint64_t v12 = 0;
  float64x2_t v9 = v17;
  uint64_t v10 = 0;
  PCMatrix44Tmpl<double>::transform<double>(a4, v15.f64, v15.f64);
  PCMatrix44Tmpl<double>::transform<double>(a4, v13.f64, v13.f64);
  PCMatrix44Tmpl<double>::transform<double>(a4, v11.f64, v11.f64);
  PCMatrix44Tmpl<double>::transform<double>(a4, v9.f64, v9.f64);
  *(float64x2_t *)(a5 + 72) = v15;
  *(void *)(a5 + 88) = v16;
  *(float64x2_t *)(a5 + 48) = v13;
  *(void *)(a5 + 64) = v14;
  *(float64x2_t *)(a5 + 24) = v9;
  *(void *)(a5 + 40) = v10;
  *(void *)(a5 + 16) = v12;
  float64_t result = v11.f64[0];
  *(float64x2_t *)a5 = v11;
  return result;
}

float64x2_t TXTextObject::getImageBoundsWithFourCornerPinning(TXTextObject *this, CMTime *a2, float64x2_t *a3, int a4)
{
  float64x2_t v29 = 0uLL;
  float64x2_t v28 = 0uLL;
  float64x2_t v27 = 0uLL;
  float64x2_t v26 = 0uLL;
  if (a4 == 5)
  {
    int v7 = 0;
    float64x2_t v24 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    float64x2_t v25 = _Q0;
    do
    {
      CMTime v23 = *a2;
      if (TXTextObject::isAttributeEnabled(this, v7, &v23))
      {
        TXTextObject::getFourCornerPointsInObjectSpaceForAttribute((uint64_t)this, (const OZRenderState *)a2, &v29, &v28, &v27, &v26, v7, 1, 0.0, 0.0, 0.0, 0.0, 1u, 0);
        int8x16_t v14 = vbslq_s8((int8x16_t)vcgtq_f64(v26, v27), (int8x16_t)v26, (int8x16_t)v27);
        int8x16_t v15 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v14, v28), v14, (int8x16_t)v28);
        int8x16_t v16 = vbslq_s8((int8x16_t)vcgtq_f64(v27, v26), (int8x16_t)v26, (int8x16_t)v27);
        int8x16_t v17 = vbslq_s8((int8x16_t)vcgtq_f64(v28, (float64x2_t)v16), v16, (int8x16_t)v28);
        float64x2_t v24 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v29, (float64x2_t)v17), v17, (int8x16_t)v29);
        float64x2_t v25 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v15, v29), v15, (int8x16_t)v29), v24);
        *(void *)&result.f64[0] = *(_OWORD *)&PCRect<double>::operator|=(a3, &v24);
      }
      ++v7;
    }
    while (v7 != 4);
  }
  else
  {
    TXTextObject::getFourCornerPointsInObjectSpaceForAttribute((uint64_t)this, (const OZRenderState *)a2, &v29, &v28, &v27, &v26, a4, 1, 0.0, 0.0, 0.0, 0.0, 1u, 0);
    int8x16_t v18 = vbslq_s8((int8x16_t)vcgtq_f64(v26, v27), (int8x16_t)v26, (int8x16_t)v27);
    int8x16_t v19 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v18, v28), v18, (int8x16_t)v28);
    int8x16_t v20 = vbslq_s8((int8x16_t)vcgtq_f64(v27, v26), (int8x16_t)v26, (int8x16_t)v27);
    int8x16_t v21 = vbslq_s8((int8x16_t)vcgtq_f64(v28, (float64x2_t)v20), v20, (int8x16_t)v28);
    float64x2_t result = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v29, (float64x2_t)v21), v21, (int8x16_t)v29);
    float64x2_t v22 = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v19, v29), v19, (int8x16_t)v29), result);
    *a3 = result;
    a3[1] = v22;
  }
  return result;
}

BOOL TXTextObject::isAttributeEnabled(TXTextObject *this, int a2, CMTime *a3)
{
  if (a2 == 5) {
    return 1;
  }
  uint64_t v5 = *((void *)this + 33);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  int v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    switch(a2)
    {
      case 0:
        uint64_t isFaceEnabled = TXTextObject::isFaceEnabled(this, a3);
        goto LABEL_12;
      case 1:
        CMTime v12 = *a3;
        if (!TXTextObject::isOutlineEnabled(this, &v12)) {
          goto LABEL_16;
        }
        BOOL v3 = *((__int16 *)this + 68) != -1;
        break;
      case 2:
        CMTime v11 = *a3;
        uint64_t isFaceEnabled = TXTextObject::isGlowVisible(this, &v11, 0, 0, 0);
        goto LABEL_12;
      case 3:
        CMTime v10 = *a3;
        uint64_t isFaceEnabled = TXTextObject::isDropShadowVisible(this, &v10, 0);
LABEL_12:
        BOOL v3 = isFaceEnabled;
        break;
      default:
        BOOL v3 = 1;
        break;
    }
  }
  else
  {
LABEL_16:
    BOOL v3 = 0;
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v3;
}

void sub_1B762F0FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXTextObject::getImageBoundsOfAttribute(uint64_t a1, double *a2, const OZRenderState *a3, int a4, int a5, int a6, int a7, float64x2_t *a8, double a9, double a10, double a11, double a12)
{
  long long v23 = *(_OWORD *)&a3->var0.var0;
  v103.CMTimeEpoch epoch = a3->var0.var3;
  float64x2_t v101 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  float64x2_t v68 = _Q0;
  float64x2_t v102 = _Q0;
  *(_OWORD *)&v103.CMTimeValue value = v23;
  OZRenderParams::OZRenderParams((OZRenderParams *)&v100);
  OZRenderParams::setState((OZRenderParams *)&v100, a3);
  if (a8)
  {
    float64x2_t v29 = *a8;
    float64x2_t v30 = a8[1];
LABEL_6:
    float64x2_t v101 = v29;
    float64x2_t v102 = v30;
    goto LABEL_7;
  }
  uint64_t v99 = 0x3FF0000000000000;
  uint64_t v96 = 0x3FF0000000000000;
  v93[5] = 0x3FF0000000000000;
  v93[0] = 0x3FF0000000000000;
  memset(&v93[1], 0, 32);
  long long v94 = 0u;
  long long v95 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  TXTextObject::getTextureBounds((TXTextObject *)a1, &v100, 0, (float64x2_t *)v93, 0, 0, (uint64_t)&v91, 0.0);
  float64x2_t v101 = v91;
  float64x2_t v102 = v92;
  if (TXTextLayout::isVerticalLayout(*(TXTextLayout **)(a1 + 544))
    || (*(unsigned int (**)(void))(**(void **)(a1 + 544) + 296))(*(void *)(a1 + 544)))
  {
    TXTextObject::getImageBounds((TXTextObject *)a1, &v100, (uint64_t)&v91);
    float64x2_t v29 = v91;
    float64x2_t v30 = v92;
    goto LABEL_6;
  }
LABEL_7:
  double v32 = v101.f64[1];
  double v31 = v101.f64[0];
  double v33 = v102.f64[1];
  double v34 = v102.f64[0];
  v93[0] = 0;
  v93[1] = 0;
  *(float64x2_t *)&v93[2] = v68;
  float64x2_t v91 = 0uLL;
  float64x2_t v92 = v68;
  float64x2_t v89 = 0uLL;
  float64x2_t v90 = v68;
  if (a6)
  {
    uint64_t v35 = *(void *)(a1 + 264);
    if (v35)
    {
      uint64_t v37 = *(void *)(v35 + 8);
      OZRenderState v36 = *(std::__shared_weak_count **)(v35 + 16);
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v37 = 0;
      OZRenderState v36 = 0;
    }
    OZChannel::getValueAsDouble((OZChannel *)(v37 + 3000), &v103, 0.0);
    float64_t v69 = v38;
    OZChannel::getValueAsDouble((OZChannel *)(v37 + 3152), &v103, 0.0);
    v39.f64[0] = v69;
    v39.f64[1] = v40;
    float64x2_t v101 = vmulq_f64(v39, v101);
    float64x2_t v102 = vmulq_f64(v39, v102);
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
  }
  double OutlineWidth = 0.0;
  switch(a4)
  {
    case 0:
      var0.CMTimeValue value = 0;
      CMTime v87 = v103;
      float64_t v88 = 0.0;
      TXTextObject::getFaceBlur((TXTextObject *)a1, &v87, (double *)&var0.value, &v88);
      *(void *)&v42.f64[0] = var0.value;
      if (*(double *)&var0.value < v88) {
        v42.f64[0] = v88;
      }
      PGImaging::gaussianBlurRect(0, &v101, (float64x2_t *)v93, v42);
      double v31 = *(double *)v93;
      double v32 = *(double *)&v93[1];
      double v43 = 0.0;
      double v33 = *(double *)&v93[3];
      double v34 = *(double *)&v93[2];
      break;
    case 1:
      var0.CMTimeValue value = 0x3FF0000000000000;
      float64_t v88 = 1.0;
      float64_t v85 = 1.0;
      TXTextObject::getScale((TXTextObject *)a1, (CMTime *)&v100, (double *)&var0.value, &v88, &v85, 1, 1, 0, 0, 0, 1);
      double v83 = 0.0;
      double v84 = 0.0;
      CMTime v77 = v103;
      double OutlineWidth = TXTextObject::getOutlineWidth((TXTextObject *)a1, &v77);
      CMTime v76 = v103;
      TXTextObject::getOutlineBlur((TXTextObject *)a1, &v76, &v84, &v83);
      double v43 = 0.0;
      double v33 = 0.0 / *(double *)&var0.value + OutlineWidth + OutlineWidth + v33 + v83 + v83;
      double v34 = 0.0 / v88 + OutlineWidth + OutlineWidth + v34 + v84 + v84;
      double v31 = v31 + 0.0 - v84 - OutlineWidth - 0.0 / (*(double *)&var0.value + *(double *)&var0.value);
      double v32 = v32 + 0.0 - v83 - OutlineWidth - 0.0 / (v88 + v88);
      break;
    case 2:
      float64_t v88 = 0.0;
      float64_t v85 = 0.0;
      CMTime v75 = v103;
      TXTextObject::getGlowBlur((TXTextObject *)a1, &v75, &v88, &v85);
      v44.f64[0] = v88;
      if (v88 < v85) {
        v44.f64[0] = v85;
      }
      PGImaging::gaussianBlurRect(0, &v101, &v89, v44);
      if (a5)
      {
        double v83 = 0.0;
        double v84 = 0.0;
        double v80 = 0.0;
        CMTime var0 = (CMTime)v100.var0;
        TXTextObject::getPivot((TXTextLayout **)a1, &v84, &v83, &v80, &var0, 1);
        var0.CMTimeValue value = 0;
        double v79 = 0.0;
        CMTime v73 = v103;
        TXTextObject::getGlowOffset((TXTextObject *)a1, &v73, (double *)&var0.value, &v79, a7);
        if ((a7 & 1) == 0)
        {
          *(double *)&var0.CMTimeValue value = a9;
          double v79 = a10;
        }
        double v71 = 1.0;
        double v72 = 1.0;
        CMTime v70 = v103;
        TXTextObject::getGlowScale((TXTextObject *)a1, &v70, &v72, &v71, a7);
        double v46 = v71;
        double v45 = v72;
        if (!a7)
        {
          double v46 = a12;
          double v45 = a11;
        }
        double v34 = v45 * v90.f64[0];
        double v33 = v46 * v90.f64[1];
        v90.f64[0] = v45 * v90.f64[0];
        v90.f64[1] = v46 * v90.f64[1];
        double v43 = *(double *)&var0.value;
        double v31 = v84 + (v89.f64[0] - v84) * v45 + *(double *)&var0.value;
        double v32 = v83 + (v89.f64[1] - v83) * v46 + v79;
        v89.f64[0] = v31;
        v89.f64[1] = v32;
      }
      else
      {
        double v32 = v89.f64[1];
        double v31 = v89.f64[0];
        double v43 = 0.0;
        double v33 = v90.f64[1];
        double v34 = v90.f64[0];
      }
      break;
    case 3:
      double v47 = a10;
      var0.CMTimeValue value = 0;
      float64_t v88 = 0.0;
      CMTime v86 = v103;
      TXTextObject::getDropShadowBlur((TXTextObject *)a1, &v86, (double *)&var0.value, &v88);
      *(void *)&v48.f64[0] = var0.value;
      if (*(double *)&var0.value < v88) {
        v48.f64[0] = v88;
      }
      PGImaging::gaussianBlurRect(0, &v101, &v91, v48);
      double v43 = 0.0;
      if (a5)
      {
        double v84 = 0.0;
        float64_t v85 = 0.0;
        double v83 = 0.0;
        TXTextObject::getPivot((TXTextLayout **)a1, &v85, &v84, &v83, &v103, 1);
        CMTime v82 = v103;
        double DropShadowDistance = TXTextObject::getDropShadowDistance((TXTextObject *)a1, &v82);
        CMTime v81 = v103;
        double DropShadowAngle = TXTextObject::getDropShadowAngle((TXTextObject *)a1, &v81);
        __double2 v51 = __sincos_stret(DropShadowAngle);
        double v43 = DropShadowDistance * v51.__cosval;
        double v52 = DropShadowDistance * v51.__sinval;
        if (a7) {
          double v53 = DropShadowDistance * v51.__cosval;
        }
        else {
          double v53 = a9;
        }
        if (a7) {
          double v47 = v52;
        }
        double v79 = 1.0;
        double v80 = 1.0;
        CMTime v78 = v103;
        TXTextObject::getDropShadowScale((TXTextObject *)a1, &v78, &v80, &v79, a7);
        double v54 = a11;
        if (a7)
        {
          a12 = v79;
          double v54 = v80;
        }
        else
        {
          double v79 = a12;
          double v80 = a11;
        }
        v91.f64[0] = v54 * v91.f64[0];
        v91.f64[1] = a12 * v91.f64[1];
        v92.f64[0] = v54 * v92.f64[0];
        v92.f64[1] = a12 * v92.f64[1];
        uint64_t v55 = *(void *)(a1 + 264);
        if (v55)
        {
          uint64_t v56 = *(void *)(v55 + 8);
          double v57 = *(std::__shared_weak_count **)(v55 + 16);
          if (v57) {
            atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v56 = 0;
          double v57 = 0;
        }
        if (!OZChannel::getValueAsInt((OZChannel *)(v56 + 19528), MEMORY[0x1E4F1FA48], 0.0))
        {
          double ScenePixelAspectRatio = OZSceneNode::getScenePixelAspectRatio((OZSceneNode *)(*(void *)(a1 + 544) + 200));
          v91.f64[0] = v53 * ScenePixelAspectRatio + v91.f64[0];
          v91.f64[1] = v47 + v91.f64[1];
        }
        if (v57) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v57);
        }
      }
      double v32 = v91.f64[1];
      double v31 = v91.f64[0];
      double v33 = v92.f64[1];
      double v34 = v92.f64[0];
      break;
    case 4:
      double v31 = *(double *)(a1 + 424);
      double v32 = *(double *)(a1 + 432);
      double v43 = 0.0;
      double v34 = *(double *)(a1 + 440);
      double v33 = *(double *)(a1 + 448);
      break;
    default:
      double v43 = 0.0;
      break;
  }
  uint64_t v59 = *(void *)(a1 + 264);
  if (v59)
  {
    uint64_t v60 = *(void *)(v59 + 8);
    double v61 = *(std::__shared_weak_count **)(v59 + 16);
    if (v61)
    {
      atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!v60)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        goto LABEL_65;
      }
    }
    else if (!v60)
    {
      goto LABEL_65;
    }
    uint64_t v62 = *(void *)(a1 + 264);
    uint64_t v64 = *(void *)(v62 + 8);
    double v63 = *(std::__shared_weak_count **)(v62 + 16);
    if (v63)
    {
      atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      int v65 = *(unsigned __int8 *)(v64 + 49856);
      std::__shared_weak_count::__release_shared[abi:ne180100](v63);
      if (!v61) {
        goto LABEL_58;
      }
    }
    else
    {
      int v65 = *(unsigned __int8 *)(v64 + 49856);
      if (!v61)
      {
LABEL_58:
        if (v65)
        {
          double v66 = v31 + 10.0 + v34;
          if (v31 <= -10.0) {
            double v66 = v34;
          }
          if (v31 < -10.0) {
            double v34 = v34 - (v31 + 10.0);
          }
          else {
            double v34 = v66;
          }
          double v31 = v31 - (v31 + 10.0) + v43 - OutlineWidth;
        }
        goto LABEL_65;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
    goto LABEL_58;
  }
LABEL_65:
  *a2 = v31;
  a2[1] = v32;
  a2[2] = v34;
  a2[3] = v33;
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v100);
}

void sub_1B762F8A4(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void TXTextObject::getGlowScale(TXTextObject *this, CMTime *a2, double *a3, double *a4, int a5)
{
  uint64_t v11 = *((void *)this + 33);
  if (v11)
  {
    uint64_t v13 = *(void *)(v11 + 8);
    CMTime v12 = *(std::__shared_weak_count **)(v11 + 16);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v13 = 0;
    CMTime v12 = 0;
  }
  uint64_t v14 = *((void *)this + 68);
  *a3 = 1.0;
  *a4 = 1.0;
  if (OZChannelBase::isEnabled((OZChannelBase *)(v13 + 31080), 0, 1))
  {
    CMTime v24 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v13 + 36304), &v24, 0.0);
    double v16 = v15;
    OZChannel::getValueAsDouble((OZChannel *)(v13 + 36456), &v24, 0.0);
    *a3 = v16 * *a3;
    *a4 = v17 * *a4;
  }
  if (a5)
  {
    CMTime v23 = *a2;
    LODWORD(v5) = *((_DWORD *)this + 184);
    int isEnabled = OZChannelBase::isEnabled((OZChannelBase *)(v14 + 40696), 0, 1);
    double v19 = 1.0;
    double v20 = 1.0;
    if (isEnabled)
    {
      double v21 = (double)v5;
      OZChannel::getValueAsDouble((OZChannel *)(v14 + 40832), &v23, v21);
      double v19 = v22;
      OZChannel::getValueAsDouble((OZChannel *)(v14 + 40984), &v23, v21);
    }
    *a3 = v19 * *a3;
    *a4 = v20 * *a4;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1B762FAB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXTextObject::getDropShadowScale(TXTextObject *this, CMTime *a2, double *a3, double *a4, int a5)
{
  uint64_t v11 = *((void *)this + 33);
  if (v11)
  {
    uint64_t v13 = *(void *)(v11 + 8);
    CMTime v12 = *(std::__shared_weak_count **)(v11 + 16);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v13 = 0;
    CMTime v12 = 0;
  }
  uint64_t v14 = *((void *)this + 68);
  *a4 = 1.0;
  *a3 = 1.0;
  if (OZChannelBase::isEnabled((OZChannelBase *)(v13 + 13848), 0, 1))
  {
    CMTime v24 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v13 + 18920), &v24, 0.0);
    double v16 = v15;
    OZChannel::getValueAsDouble((OZChannel *)(v13 + 19072), &v24, 0.0);
    *a3 = v16 * *a3;
    *a4 = v17 * *a4;
  }
  if (a5)
  {
    CMTime v23 = *a2;
    LODWORD(v5) = *((_DWORD *)this + 184);
    int isEnabled = OZChannelBase::isEnabled((OZChannelBase *)(v14 + 46928), 0, 1);
    double v19 = 1.0;
    double v20 = 1.0;
    if (isEnabled)
    {
      double v21 = (double)v5;
      OZChannel::getValueAsDouble((OZChannel *)(v14 + 47064), &v23, v21);
      double v19 = v22;
      OZChannel::getValueAsDouble((OZChannel *)(v14 + 47216), &v23, v21);
    }
    *a3 = v19 * *a3;
    *a4 = v20 * *a4;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1B762FC60(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

double TXTextObject::getDropShadowDistance(TXTextObject *this, CMTime *a2)
{
  uint64_t v4 = *((void *)this + 33);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 16);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v7 = *((void *)this + 68);
  CMTime v13 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 19224), &v13, 0.0);
  OZChannel::setValue((OZChannel *)(v7 + 47368), a2, v8, 1);
  CMTime v12 = *a2;
  HIDWORD(v9) = HIDWORD(v12.value);
  LODWORD(v9) = *((_DWORD *)this + 184);
  double DropShadowDistance = TXSequenceChannels::getDropShadowDistance((TXSequenceChannels *)(v7 + 25032), &v12, (double)v9);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return DropShadowDistance;
}

void sub_1B762FD5C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

double TXTextObject::getDropShadowAngle(TXTextObject *this, CMTime *a2)
{
  uint64_t v4 = *((void *)this + 33);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 16);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v7 = *((void *)this + 68);
  CMTime v13 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 19376), &v13, 0.0);
  OZChannel::setValue((OZChannel *)(v7 + 47520), a2, v8, 1);
  CMTime v12 = *a2;
  HIDWORD(v9) = HIDWORD(v12.value);
  LODWORD(v9) = *((_DWORD *)this + 184);
  double DropShadowAngle = TXSequenceChannels::getDropShadowAngle((TXSequenceChannels *)(v7 + 25032), &v12, (double)v9);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return DropShadowAngle;
}

void sub_1B762FE50(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::getTextureBounds@<X0>(TXTextObject *a1@<X0>, OZRenderState *a2@<X1>, char a3@<W2>, float64x2_t *a4@<X3>, int a5@<W4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>)
{
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v27 = _Q1;
  *(_OWORD *)(a7 + 16) = _Q1;
  uint64_t v40 = 0;
  p_$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
  int v44 = 0;
  char v45 = 1;
  memset(v46, 0, sizeof(v46));
  char v41 = a3;
  double v42 = a8;
  v46[1] = a6;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a2->var0;
  uint64_t result = TXTextObject::syncGlyph(a1, (CMTime *)&var0, (uint64_t)&v40);
  uint64_t v19 = result;
  if (result)
  {
    *(_OWORD *)&var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0x3FF0000000000000uLL;
    var0.int64_t var3 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0x3FF0000000000000;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0x3FF0000000000000;
    if (!PCMatrix44Tmpl<double>::isIdentity(a4->f64))
    {
      TXTextObject::getImageBounds(a1, a2, (uint64_t)v32);
      double v30 = 0.0;
      double v31 = 0.0;
      v28[0] = 0.0;
      v28[1] = 0.0;
      long long v29 = v27;
      TXTextObject::computeScaleFactors((OZRenderParams *)a2, v32, a4, v28, &v31, &v30);
      if (OZRenderParams::getTextRenderQuality((OZRenderParams *)a2) == 6)
      {
        int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*((void *)a1 + 68) + 20464), MEMORY[0x1E4F1FA48], 0.0);
        double v22 = v30;
        double v21 = v31;
        double v23 = ceil(v31);
        double v24 = ceil(v30);
        if (ValueAsInt == 2)
        {
          double v22 = v24;
          double v21 = v23;
        }
      }
      else
      {
        double v22 = v30;
        double v21 = v31;
      }
      if (v21 >= v22) {
        double v25 = v21;
      }
      else {
        double v25 = v22;
      }
      if (a5)
      {
        double v22 = v25;
        double v21 = v25;
      }
      *(double *)&var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v21;
      uint64_t v35 = *(void *)&v22;
      p_$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (CMTime *)&var0;
      a4->f64[0] = v21;
      a4[2].f64[1] = v22;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v19 + 16))(v19, a7, &v40);
    float64x2_t v26 = p_var0;
    if (p_var0)
    {
      *(void *)&a4->f64[0] = p_var0->value;
      a4[2].f64[1] = *(float64_t *)&v26[1].timescale;
    }
  }
  if (v46[2])
  {
    uint64_t result = (uint64_t)p_var0;
    if (p_var0) {
      return MEMORY[0x1BA9BFBA0](p_var0, 0x1000C40FF89C88ELL);
    }
  }
  return result;
}

void sub_1B7630058(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 - 73))
  {
    uint64_t v3 = *(void *)(v1 - 88);
    if (v3) {
      MEMORY[0x1BA9BFBA0](v3, 0x1000C40FF89C88ELL);
    }
  }
  _Unwind_Resume(exception_object);
}

void TXTextObject::getFaceBlur(TXTextObject *this, CMTime *a2, double *a3, double *a4)
{
  uint64_t v8 = *((void *)this + 33);
  if (v8)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    unint64_t v9 = *(std::__shared_weak_count **)(v8 + 16);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v9 = 0;
  }
  uint64_t v11 = *((void *)this + 68);
  *a3 = 0.0;
  *a4 = 0.0;
  double v17 = 0.0;
  double v18 = 0.0;
  if (OZChannelBase::isEnabled((OZChannelBase *)(v10 + 5960), 0, 1))
  {
    CMTime v16 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v10 + 10440), &v16, 0.0);
    double v18 = v12;
    OZChannel::getValueAsDouble((OZChannel *)(v10 + 10592), &v16, 0.0);
    double v17 = v13;
    *a3 = v18 + *a3;
    *a4 = v13 + *a4;
  }
  CMTime v15 = *a2;
  HIDWORD(v14) = HIDWORD(v15.value);
  LODWORD(v14) = *((_DWORD *)this + 184);
  TXSequenceChannels::getFaceBlur((TXSequenceChannels *)(v11 + 25032), &v15, &v18, &v17, (double)v14);
  *a3 = v18 + *a3;
  *a4 = v17 + *a4;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1B76301E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXTextObject::getDropShadowBlur(TXTextObject *this, CMTime *a2, double *a3, double *a4)
{
  uint64_t v8 = *((void *)this + 33);
  if (v8)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    unint64_t v9 = *(std::__shared_weak_count **)(v8 + 16);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v9 = 0;
  }
  uint64_t v11 = *((void *)this + 68);
  *a3 = 0.0;
  *a4 = 0.0;
  double v19 = 0.0;
  double v20 = 0.0;
  if (OZChannelBase::isEnabled((OZChannelBase *)(v10 + 13848), 0, 1))
  {
    CMTime v18 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v10 + 18328), &v18, 0.0);
    double v20 = v12;
    OZChannel::getValueAsDouble((OZChannel *)(v10 + 18480), &v18, 0.0);
    double v19 = v13;
    *a3 = v20 + *a3;
    *a4 = v13 + *a4;
  }
  CMTime v17 = *a2;
  if ((TXTextLayout::isStyleEnabledBySequenceBehavior((TXTextLayout *)v11, 1043, &v17) & 1) != 0
    || (CMTime v16 = *a2, TXTextLayout::isStyleEnabledByOldSequenceBehavior((TXTextLayout *)v11, 1043, &v16)))
  {
    CMTime v15 = *a2;
    HIDWORD(v14) = HIDWORD(v15.value);
    LODWORD(v14) = *((_DWORD *)this + 184);
    TXSequenceChannels::getDropShadowBlur((TXSequenceChannels *)(v11 + 25032), &v15, &v20, &v19, (double)v14);
    *a3 = v20 + *a3;
    *a4 = v19 + *a4;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1B763039C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

double TXTextObject::getOutlineWidth(TXTextObject *this, CMTime *a2)
{
  uint64_t v4 = *((void *)this + 33);
  if (v4)
  {
    uint64_t v6 = *(void *)(v4 + 8);
    uint64_t v5 = *(std::__shared_weak_count **)(v4 + 16);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *((void *)this + 68);
  if ((OZChannelBase::isEnabled((OZChannelBase *)(v6 + 22632), 0, 1) & 1) != 0
    || (double v9 = 0.0, (OZChannelBase::isEnabled((OZChannelBase *)(v6 + 22632), 0, 1) & 1) == 0)
    && (CMTime v15 = *a2, TXTextLayout::isStyleEnabledBySequenceBehavior((TXTextLayout *)v7, 1037, &v15)))
  {
    CMTime v14 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v6 + 27568), &v14, 0.0);
    double v9 = v8 + 0.0;
  }
  CMTime v13 = *a2;
  HIDWORD(v10) = HIDWORD(v13.value);
  LODWORD(v10) = *((_DWORD *)this + 184);
  int OutlineWidth = TXSequenceChannels::getOutlineWidth((TXSequenceChannels *)(v7 + 25032), &v13, (double)v10);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v9 + (double)OutlineWidth;
}

void sub_1B76304EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXTextObject::getOutlineBlur(TXTextObject *this, CMTime *a2, double *a3, double *a4)
{
  uint64_t v8 = *((void *)this + 33);
  if (v8)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    double v9 = *(std::__shared_weak_count **)(v8 + 16);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v10 = 0;
    double v9 = 0;
  }
  uint64_t v11 = *((void *)this + 68);
  *a3 = 0.0;
  *a4 = 0.0;
  double v17 = 0.0;
  double v18 = 0.0;
  if (OZChannelBase::isEnabled((OZChannelBase *)(v10 + 22632), 0, 1))
  {
    CMTime v16 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v10 + 27112), &v16, 0.0);
    double v18 = v12;
    OZChannel::getValueAsDouble((OZChannel *)(v10 + 27264), &v16, 0.0);
    double v17 = v13;
    *a3 = v18 + *a3;
    *a4 = v13 + *a4;
  }
  CMTime v15 = *a2;
  HIDWORD(v14) = HIDWORD(v15.value);
  LODWORD(v14) = *((_DWORD *)this + 184);
  TXSequenceChannels::getOutlineBlur((TXSequenceChannels *)(v11 + 25032), &v15, &v18, &v17, (double)v14);
  *a3 = v18 + *a3;
  *a4 = v17 + *a4;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1B7630658(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXTextObject::getGlowBlur(TXTextObject *this, CMTime *a2, double *a3, double *a4)
{
  uint64_t v8 = *((void *)this + 33);
  if (v8)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    double v9 = *(std::__shared_weak_count **)(v8 + 16);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v10 = 0;
    double v9 = 0;
  }
  uint64_t v11 = *((void *)this + 68);
  *a3 = 0.0;
  *a4 = 0.0;
  double v22 = 0.0;
  double v23 = 0.0;
  if (OZChannelBase::isEnabled((OZChannelBase *)(v10 + 31080), 0, 1))
  {
    CMTime v21 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v10 + 35560), &v21, 0.0);
    double v23 = v12;
    OZChannel::getValueAsDouble((OZChannel *)(v10 + 35712), &v21, 0.0);
    double v22 = v13;
    *a3 = v23 + *a3;
    *a4 = v13 + *a4;
  }
  CMTime v20 = *a2;
  if ((TXTextLayout::isStyleEnabledBySequenceBehavior((TXTextLayout *)v11, 1019, &v20) & 1) != 0
    || (CMTime v19 = *a2, (TXTextLayout::isStyleEnabledBySequenceBehavior((TXTextLayout *)v11, 1026, &v19) & 1) != 0)
    || (CMTime v18 = *a2, (TXTextLayout::isStyleEnabledBySequenceBehavior((TXTextLayout *)v11, 1038, &v18) & 1) != 0)
    || (CMTime v17 = *a2, (TXTextLayout::isStyleEnabledBySequenceBehavior((TXTextLayout *)v11, 1042, &v17) & 1) != 0)
    || (CMTime v16 = *a2, TXTextLayout::isStyleEnabledByOldSequenceBehavior((TXTextLayout *)v11, 1042, &v16)))
  {
    CMTime v15 = *a2;
    HIDWORD(v14) = HIDWORD(v15.value);
    LODWORD(v14) = *((_DWORD *)this + 184);
    TXSequenceChannels::getGlowBlur((TXSequenceChannels *)(v11 + 25032), &v15, &v23, &v22, (double)v14);
    *a3 = v23 + *a3;
    *a4 = v22 + *a4;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1B7630878(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXTextObject::getGlowOffset(TXTextObject *this, CMTime *a2, double *a3, double *a4, int a5)
{
  uint64_t v11 = *((void *)this + 33);
  if (v11)
  {
    uint64_t v13 = *(void *)(v11 + 8);
    double v12 = *(std::__shared_weak_count **)(v11 + 16);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v13 = 0;
    double v12 = 0;
  }
  uint64_t v14 = *((void *)this + 68);
  *a3 = 0.0;
  *a4 = 0.0;
  if (OZChannelBase::isEnabled((OZChannelBase *)(v13 + 31080), 0, 1))
  {
    CMTime v24 = *a2;
    OZChannel::getValueAsDouble((OZChannel *)(v13 + 36744), &v24, 0.0);
    double v16 = v15;
    OZChannel::getValueAsDouble((OZChannel *)(v13 + 36896), &v24, 0.0);
    *a3 = v16 + *a3;
    *a4 = v17 + *a4;
  }
  if (a5)
  {
    CMTime v23 = *a2;
    LODWORD(v5) = *((_DWORD *)this + 184);
    int isEnabled = OZChannelBase::isEnabled((OZChannelBase *)(v14 + 41136), 0, 1);
    double v19 = 0.0;
    double v20 = 0.0;
    if (isEnabled)
    {
      double v21 = (double)v5;
      OZChannel::getValueAsDouble((OZChannel *)(v14 + 41272), &v23, v21);
      double v19 = v22;
      OZChannel::getValueAsDouble((OZChannel *)(v14 + 41424), &v23, v21);
    }
    *a3 = v19 + *a3;
    *a4 = v20 + *a4;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1B7630A14(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::getTypographicBounds(TXTextObject *this)
{
  return (uint64_t)this + 424;
}

void TXTextObject::getTransformedImageBoundsWithStyles(TXTextObject *a1, float64x2_t *a2, OZRenderState *a3)
{
  CMTime var0 = (CMTime)a3->var0;
  uint64_t v70 = 0x3FF0000000000000;
  uint64_t v67 = 0x3FF0000000000000;
  uint64_t v64 = 0x3FF0000000000000;
  uint64_t v61 = 0x3FF0000000000000;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  TXTextObject::getTextureBounds(a1, a3, 0, (float64x2_t *)&v61, 0, 0, (uint64_t)v60, 0.0);
  uint64_t v59 = 0x3FF0000000000000;
  uint64_t v56 = 0x3FF0000000000000;
  uint64_t v53 = 0x3FF0000000000000;
  uint64_t v50 = 0x3FF0000000000000;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  TXTextObject::getTransformMatrix((uint64_t)a1, (uint64_t)&v50, (long long *)&a3->var0.var0, 1, 1, 0, 1, 0.0, 0.0);
  __asm { FMOV            V0.2D, #-1.0 }
  a2[1] = _Q0;
  v49[0] = 0uLL;
  float64x2_t v23 = _Q0;
  v49[1] = _Q0;
  float64_t v48 = 0.0;
  double v47 = 0.0;
  CMTime v46 = var0;
  TXTextObject::getFaceBlur(a1, &v46, &v48, &v47);
  v11.f64[0] = v48;
  PGImaging::gaussianBlurRect(0, v60, v49, v11);
  if (PCMatrix44Tmpl<double>::transformRect<double>((double *)&v50, v49[0].f64, (uint64_t)v49)) {
    PCRect<double>::operator|=(a2, v49);
  }
  v45[0] = 0uLL;
  v45[1] = v23;
  v44[0] = 0uLL;
  v44[1] = v23;
  CMTime v43 = var0;
  TXTextObject::getOutlineBlur(a1, &v43, &v48, &v47);
  CMTime v42 = var0;
  double OutlineWidth = TXTextObject::getOutlineWidth(a1, &v42);
  float64x2_t v13 = PGImaging::outlineRect(v60, v45, OutlineWidth);
  v13.f64[0] = v48;
  PGImaging::gaussianBlurRect(0, v45, v44, v13);
  if (PCMatrix44Tmpl<double>::transformRect<double>((double *)&v50, v44[0].f64, (uint64_t)v44)) {
    PCRect<double>::operator|=(a2, v44);
  }
  float64x2_t v40 = 0uLL;
  float64x2_t v41 = v23;
  CMTime v39 = var0;
  TXTextObject::getGlowBlur(a1, &v39, &v48, &v47);
  v14.f64[0] = v48;
  PGImaging::gaussianBlurRect(0, v60, &v40, v14);
  double v37 = 0.0;
  double v38 = 0.0;
  CMTime v36 = var0;
  TXTextObject::getGlowOffset(a1, &v36, &v38, &v37, 1);
  float64_t v34 = 1.0;
  float64_t v35 = 1.0;
  CMTime v33 = var0;
  TXTextObject::getGlowScale(a1, &v33, &v35, &v34, 1);
  v15.f64[0] = v35;
  v15.f64[1] = v34;
  float64x2_t v40 = vmulq_f64(v15, v40);
  float64x2_t v41 = vmulq_f64(v15, v41);
  if (PCMatrix44Tmpl<double>::transformRect<double>((double *)&v50, v40.f64, (uint64_t)&v40))
  {
    v40.f64[0] = v38 + v40.f64[0];
    v40.f64[1] = v37 + v40.f64[1];
    PCRect<double>::operator|=(a2, &v40);
  }
  float64x2_t v31 = 0uLL;
  float64x2_t v32 = v23;
  CMTime v30 = var0;
  TXTextObject::getDropShadowBlur(a1, &v30, &v48, &v47);
  v16.f64[0] = v48;
  PGImaging::gaussianBlurRect(0, v60, &v31, v16);
  CMTime v29 = var0;
  double DropShadowDistance = TXTextObject::getDropShadowDistance(a1, &v29);
  CMTime v28 = var0;
  double DropShadowAngle = TXTextObject::getDropShadowAngle(a1, &v28);
  float64_t v26 = 1.0;
  float64_t v27 = 1.0;
  CMTime v25 = var0;
  TXTextObject::getDropShadowScale(a1, &v25, &v27, &v26, 1);
  v18.f64[0] = v27;
  v18.f64[1] = v26;
  float64x2_t v31 = vmulq_f64(v18, v31);
  float64x2_t v32 = vmulq_f64(v18, v32);
  if (PCMatrix44Tmpl<double>::transformRect<double>((double *)&v50, v31.f64, (uint64_t)&v31))
  {
    __double2 v20 = __sincos_stret(DropShadowAngle);
    v19.f64[0] = v20.__cosval;
    v19.f64[1] = v20.__sinval;
    float64x2_t v21 = vaddq_f64(vmulq_n_f64(v19, DropShadowDistance), v31);
    float64x2_t v22 = vsubq_f64(v32, vsubq_f64(v21, v31));
    float64x2_t v31 = v21;
    float64x2_t v32 = v22;
    PCRect<double>::operator|=(a2, &v31);
  }
}

double TXTextObject::getExtrusionDepth(TXTextObject *this, const CMTime *a2)
{
  uint64_t v2 = *((void *)this + 33);
  if (!v2) {
    return 0.0;
  }
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = *(std::__shared_weak_count **)(v2 + 16);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *((void *)this + 68);
  double v8 = 0.0;
  if (v5) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    OZChannel::getValueAsDouble((OZChannel *)(v5 + 40648), a2, 0.0);
    double v8 = v10;
    float64x2_t v11 = (OZChannel *)(v7 + 51160);
    if (OZChannelBase::isEnabled((OZChannelBase *)v11, 0, 1))
    {
      CMTime v16 = *a2;
      OZChannel::setValue(v11, &v16, v8, 1);
      CMTime v15 = *a2;
      HIDWORD(v12) = HIDWORD(v15.value);
      LODWORD(v12) = *((_DWORD *)this + 184);
      OZChannel::getValueAsDouble(v11, &v15, (double)v12);
      double v8 = v13;
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v8;
}

void sub_1B7630F50(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

float TXTextObject::getCapHeight(TXTextObject *this, double a2)
{
  uint64_t v2 = *((void *)this + 33);
  if (!v2) {
    return 0.0;
  }
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v4)
  {
    float v11 = 0.0;
    if (!v5) {
      return v11;
    }
    goto LABEL_18;
  }
  uint64_t v6 = *(const void **)(v4 + 520);
  uint64_t v7 = *(std::__shared_weak_count **)(v4 + 528);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6) {
    goto LABEL_15;
  }
  if (!v8) {
    goto LABEL_15;
  }
  BOOL v9 = v8;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v10 = v9[5];
  if (!v10)
  {
LABEL_15:
    float v11 = 0.0;
    if (!v7) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  float v11 = (*(float (**)(uint64_t, double))(*(void *)v10 + 24))(v10, a2);
  if (v7) {
LABEL_16:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_17:
  if (v5) {
LABEL_18:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return v11;
}

void sub_1B76310A4(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

float TXTextObject::getXHeight(TXTextObject *this, double a2)
{
  uint64_t v2 = *((void *)this + 33);
  if (!v2) {
    return 0.0;
  }
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v4)
  {
    float v11 = 0.0;
    if (!v5) {
      return v11;
    }
    goto LABEL_18;
  }
  uint64_t v6 = *(const void **)(v4 + 520);
  uint64_t v7 = *(std::__shared_weak_count **)(v4 + 528);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6) {
    goto LABEL_15;
  }
  if (!v8) {
    goto LABEL_15;
  }
  BOOL v9 = v8;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v10 = v9[5];
  if (!v10)
  {
LABEL_15:
    float v11 = 0.0;
    if (!v7) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  float v11 = (*(float (**)(uint64_t, double))(*(void *)v10 + 32))(v10, a2);
  if (v7) {
LABEL_16:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_17:
  if (v5) {
LABEL_18:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return v11;
}

void sub_1B7631204(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXTextObject::getBoundingRectForGlyph(TXTextObject *this, double a2)
{
  uint64_t v2 = *((void *)this + 33);
  if (!v2)
  {
    uint64_t v5 = 0;
    goto LABEL_17;
  }
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v4)
  {
    uint64_t v6 = *(const void **)(v4 + 520);
    uint64_t v7 = *(std::__shared_weak_count **)(v4 + 528);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v6)
    {
      if (v8)
      {
        BOOL v9 = v8;
        if (v7)
        {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        uint64_t v10 = v9[5];
        if (v10)
        {
          (*(void (**)(long long *__return_ptr, double))(*(void *)v10 + 64))(&v11, a2);
          if (!v7) {
            goto LABEL_17;
          }
        }
        else if (!v7)
        {
          goto LABEL_17;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        goto LABEL_17;
      }
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
LABEL_17:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1B76313A4(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::isOutlineVisible(TXTextObject *this, CMTime *a2, PCWorkingColor *a3, double *a4)
{
  CMTime v13 = *a2;
  uint64_t result = TXTextObject::isOutlineEnabled(this, &v13);
  if (result)
  {
    if (*((__int16 *)this + 68) == -1) {
      return 0;
    }
    if (a3)
    {
      CMTime v12 = *a2;
      TXTextObject::getOutlineColor(this, &v12, *(double *)&v12.value, a3);
      CMTime v11 = *a2;
      double OutlineWidth = TXTextObject::getOutlineWidth(this, &v11);
      if (a4) {
        *a4 = OutlineWidth;
      }
      if (OutlineWidth > -0.0000001 && OutlineWidth < 0.0000001) {
        return 0;
      }
      float v10 = *((float *)a3 + 3);
      return v10 >= 0.00001 || v10 <= -0.00001;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t TXTextObject::isGlowVisible(TXTextObject *this, CMTime *a2, PCWorkingColor *a3, double *a4, double *a5)
{
  CMTime v19 = *a2;
  uint64_t result = TXTextObject::isGlowEnabled(this, &v19);
  if (result)
  {
    double v18 = 0.0;
    double v17 = 0.0;
    CMTime v16 = *a2;
    TXTextObject::getGlowScale(this, &v16, &v18, &v17, 1);
    if (v18 > -0.0000001 && v18 < 0.0000001 || v17 > -0.0000001 && v17 < 0.0000001) {
      return 0;
    }
    if (!a3) {
      return 1;
    }
    CMTime v15 = *a2;
    TXTextObject::getGlowColor(this, &v15, *(double *)&v15.value, a3);
    double v13 = 0.0;
    double v14 = 0.0;
    CMTime v12 = *a2;
    TXTextObject::getGlowBlur(this, &v12, &v14, &v13);
    if (a4) {
      *a4 = v14;
    }
    if (a5) {
      *a5 = v13;
    }
    if (((float v11 = *((float *)a3 + 3), v11 <= -0.00001) || v11 >= 0.00001) && (v14 <= -0.0000001 || v14 >= 0.0000001)) {
      return v13 >= 0.0000001 || v13 <= -0.0000001;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t TXTextObject::isDropShadowVisible(TXTextObject *this, CMTime *a2, PCWorkingColor *a3)
{
  CMTime v13 = *a2;
  uint64_t result = TXTextObject::isDropShadowEnabled(this, &v13);
  if (result)
  {
    double v11 = 0.0;
    double v12 = 0.0;
    CMTime v10 = *a2;
    TXTextObject::getDropShadowScale(this, &v10, &v12, &v11, 1);
    if ((v12 <= -0.0000001 || v12 >= 0.0000001) && (v11 <= -0.0000001 || v11 >= 0.0000001))
    {
      if (a3)
      {
        CMTime v9 = *a2;
        HIDWORD(v7) = HIDWORD(v9.value);
        LODWORD(v7) = *((_DWORD *)this + 184);
        TXTextObject::getDropShadowColor(this, &v9, (double)v7, a3);
        float v8 = *((float *)a3 + 3);
        return v8 >= 0.00001 || v8 <= -0.00001;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void TXTextLayout::getAnchorPointOffset(uint64_t a1, const CMTime *a2, void *a3)
{
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 22936), a2, 0.0);
  uint64_t v7 = v6;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 23088), a2, 0.0);
  uint64_t v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 23536), a2, 0.0);
  *a3 = v7;
  a3[1] = v9;
  a3[2] = v10;
}

double TXTextObject::getAdvanceWidth(TXTextLayout **this, CMTime *a2)
{
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0x3FF0000000000000;
  uint64_t v20 = 0;
  int v21 = 0;
  char v22 = 1;
  memset(v23, 0, sizeof(v23));
  uint64_t v4 = TXTextObject::syncGlyph((TXTextObject *)this, a2, (uint64_t)&v17);
  double v5 = (*(double (**)(uint64_t, uint64_t *))(*(void *)v4 + 56))(v4, &v17);
  double v15 = 1.0;
  double v16 = 1.0;
  double v14 = 1.0;
  uint64_t v6 = this[33];
  if (v6)
  {
    uint64_t v8 = *((void *)v6 + 1);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 2);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  double v9 = 1.0;
  if (TXTextLayout::scaleAffectsLayout(this[68]))
  {
    CMTime v13 = *a2;
    OZChannelScale3D::getValue((OZChannelScale3D *)(v8 + 2864), &v13, &v16, &v15, &v14, 0.0);
    double XMarginScale = TXTextLayout::getXMarginScale(this[68]);
    double v16 = XMarginScale * v16;
    double YMarginScale = TXTextLayout::getYMarginScale(this[68]);
    double v9 = v16;
    double v15 = YMarginScale * v15;
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v23[2] && v20) {
    MEMORY[0x1BA9BFBA0](v20, 0x1000C40FF89C88ELL);
  }
  return v5 * v9;
}

void sub_1B7631970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22)
  {
    if (a18) {
      MEMORY[0x1BA9BFBA0](a18, 0x1000C40FF89C88ELL);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::computeScaleFactors(OZRenderParams *this, uint64_t a2, float64x2_t *a3, uint64_t a4, double *a5, double *a6)
{
  *a5 = 2.22507386e-308;
  *a6 = 2.22507386e-308;
  unint64_t v9 = *(void *)(*(void *)(a2 + 88) + 8) - **(void **)(a2 + 88);
  if ((int)(v9 >> 5) >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = v9 & 0x1FFFFFFFE0;
    do
    {
      double v14 = (double *)(**(void **)(a2 + 88) + v12);
      double v20 = 0.0;
      double v21 = 0.0;
      uint64_t v22 = 0;
      getScale(a3, v14, (uint64_t)&v20);
      double v15 = *a5;
      double v16 = v21;
      if (*a5 < v20) {
        double v15 = v20;
      }
      *a5 = v15;
      double v17 = *a6;
      if (*a6 < v16) {
        double v17 = v16;
      }
      *a6 = v17;
      v12 += 32;
    }
    while (v13 != v12);
  }
  uint64_t result = OZRenderParams::getTextRenderQuality(this);
  if (result == 6)
  {
    uint64_t result = LiRenderingTechnology::getSharpText((OZRenderParams *)((char *)this + 1316));
    if (result)
    {
      double v19 = *a5;
      if (*a5 < *a6) {
        double v19 = *a6;
      }
      *a5 = v19;
      *a6 = v19;
    }
  }
  return result;
}

void TXTextObject::getTexture(uint64_t a1@<X0>, OZRenderState *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>, double a8@<D0>)
{
  uint64_t v35 = 0;
  p_$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
  int v39 = 0;
  char v40 = 1;
  memset(v41, 0, sizeof(v41));
  char v36 = a3;
  double v37 = a8;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a2->var0;
  double v14 = (TXTextLayout *)TXTextObject::syncGlyph((TXTextObject *)a1, (CMTime *)&var0, (uint64_t)&v35);
  if (TXTextLayout::scaleEmojiToCapHeight(v14) && *(unsigned char *)(a1 + 568)) {
    PCMatrix44Tmpl<double>::rightScale((double *)a4, *(double *)(*(void *)(a1 + 544) + 64192), *(double *)(*(void *)(a1 + 544) + 64192), 1.0);
  }
  *a7 = 0;
  a7[1] = 0;
  *(_OWORD *)&var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0x3FF0000000000000uLL;
  var0.int64_t var3 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0x3FF0000000000000;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0x3FF0000000000000;
  if (!PCMatrix44Tmpl<double>::isIdentity((double *)a4))
  {
    TXTextObject::getImageBounds((TXTextObject *)a1, a2, (uint64_t)&v26);
    double v24 = 0.0;
    double v25 = 0.0;
    v23[0] = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v23[1] = _Q0;
    TXTextObject::computeScaleFactors((OZRenderParams *)a2, (double *)&v26, (float64x2_t *)a4, (double *)v23, &v25, &v24);
    double v21 = v25;
    if (v25 > -0.0000001 && v25 < 0.0000001) {
      goto LABEL_13;
    }
    double v22 = v24;
    if (v24 > -0.0000001 && v24 < 0.0000001) {
      goto LABEL_13;
    }
    *(double *)&var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v25;
    uint64_t v30 = *(void *)&v24;
    p_$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (CMTime *)&var0;
    *(void *)(a4 + 120) = 0x3FF0000000000000;
    *(void *)(a4 + 80) = 0x3FF0000000000000;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 104) = 0u;
    *(double *)a4 = v21;
    *(double *)(a4 + 40) = v22;
  }
  OZRenderParams::getRenderGPU((OZRenderParams *)a2, &v26);
  v41[0] = 1;
  *(void *)&v41[3] = OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
  (*(void (**)(_OWORD *__return_ptr, TXTextLayout *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, void))(*(void *)v14 + 24))(v23, v14, a5, &v35, a6, a4, &v26, 1, 0);
  *(_OWORD *)a7 = v23[0];
  double v15 = p_var0;
  if (p_var0)
  {
    *(void *)a4 = p_var0->value;
    *(void *)(a4 + 40) = *(void *)&v15[1].timescale;
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
LABEL_13:
  if (v41[2])
  {
    if (p_var0) {
      MEMORY[0x1BA9BFBA0](p_var0, 0x1000C40FF89C88ELL);
    }
  }
}

void sub_1B7631D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (*(unsigned char *)(v16 - 73))
  {
    uint64_t v18 = *(void *)(v16 - 88);
    if (v18) {
      MEMORY[0x1BA9BFBA0](v18, 0x1000C40FF89C88ELL);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::isEmoji(TXTextObject *this)
{
  return *((unsigned __int8 *)this + 568);
}

HGMetalContext *TXTextObject::getMetalTexture@<X0>(TXTextObject *a1@<X0>, OZRenderState *a2@<X1>, char a3@<W2>, float64x2_t *a4@<X3>, HGGPURenderer *a5@<X4>, long long *a6@<X5>, HGMetalContext **a7@<X8>, double a8@<D0>)
{
  TXTextObject::getCacheHashForGlyphBitmap(a1, a2, a3, a4, 0, a8);
  MetalContext = (PGHelium *)HGGPURenderer::GetMetalContext(a5);
  unint64_t v37 = *(void *)(*((void *)MetalContext + 2) + 16);
  long long v38 = v39;
  char v36 = 0;
  uint64_t v17 = PGHelium::Instance(MetalContext);
  PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::findValue(*(void *)(v17 + 8), &v37, &v36, (uint64_t)&v32);
  if (!v36)
  {
    TXTextObject::getHGBitmap(a1, a2, a3, (uint64_t)a4, (uint64_t)a6, 0, &v31, a8);
    uint64_t v18 = (HGMetalTexture *)HGGPURenderer::GetMetalContext(a5);
    *(void *)&v40.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *(void *)((char *)v31 + 28);
    *(void *)&v40.var2 = 1;
    HGMetalTexture::createFromBitmap(v18, v31, *(HGBitmap **)((char *)v31 + 20), v40, 1, &v30);
    double v19 = v30;
    if (v32 != v30)
    {
      if (v32)
      {
        (*(void (**)(HGMetalContext *))(*(void *)v32 + 24))(v32);
        double v19 = v30;
      }
      uint64_t v32 = v19;
      if (v19) {
        double v19 = (PGHelium *)(*(uint64_t (**)(PGHelium *))(*(void *)v19 + 16))(v19);
      }
    }
    long long v20 = a6[1];
    long long v33 = *a6;
    long long v34 = v20;
    if (v35 != (unsigned char *)a4)
    {
      for (uint64_t i = 0; i != 8; i += 2)
      {
        double v22 = &v35[i * 16];
        float64x2_t v23 = a4[i + 1];
        *double v22 = a4[i];
        v22[1] = v23;
      }
    }
    uint64_t v24 = PGHelium::Instance(v19);
    PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::addValue(*(void *)(v24 + 8), (uint64_t)&v37, (uint64_t *)&v32, *((void *)v30 + 9));
    if (v30) {
      (*(void (**)(HGMetalContext *))(*(void *)v30 + 24))(v30);
    }
    if (v31) {
      (*(void (**)(HGMetalContext *))(*(void *)v31 + 24))(v31);
    }
  }
  if (v35 != (unsigned char *)a4)
  {
    for (uint64_t j = 0; j != 8; j += 2)
    {
      f64 = (_OWORD *)a4[j].f64;
      long long v27 = *(_OWORD *)&v35[j * 16 + 16];
      _OWORD *f64 = *(_OWORD *)&v35[j * 16];
      f64[1] = v27;
    }
  }
  long long v28 = v34;
  *a6 = v33;
  a6[1] = v28;
  uint64_t result = v32;
  *a7 = v32;
  if (result)
  {
    (*(void (**)(HGMetalContext *))(*(void *)result + 16))(result);
    uint64_t result = v32;
    if (v32) {
      return (HGMetalContext *)(*(uint64_t (**)(HGMetalContext *))(*(void *)v32 + 24))(v32);
    }
  }
  return result;
}

void sub_1B7632038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)va);
  _Unwind_Resume(a1);
}

void TXTextObject::getCacheHashForGlyphBitmap(TXTextObject *a1, OZRenderState *a2, char a3, float64x2_t *a4, int a5, double a6)
{
  TXTextObject::buildGlyphRequest(a1, a2, a3, a4, a5, (uint64_t)v10, a6);
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a2->var0;
  SystemGlyph = TXTextObject::getSystemGlyph(a1, (CMTime *)&var0, 0);
  TXCoreTextGlyph::getCacheHashKey((uint64_t)SystemGlyph);
  if (v12)
  {
    if (v11) {
      MEMORY[0x1BA9BFBA0](v11, 0x1000C40FF89C88ELL);
    }
  }
}

void sub_1B7632154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20)
  {
    if (a16) {
      MEMORY[0x1BA9BFBA0](a16, 0x1000C40FF89C88ELL);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::getHGBitmap@<X0>(TXTextObject *a1@<X0>, OZRenderState *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, void *a7@<X8>, double a8@<D0>)
{
  TXTextObject::buildGlyphRequest(a1, a2, a3, (float64x2_t *)a4, a6, (uint64_t)v16, a8);
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a2->var0;
  SystemGlyph = TXTextObject::getSystemGlyph(a1, (CMTime *)&var0, 0);
  TXCoreTextGlyph::getHGBitmap((uint64_t)SystemGlyph, (uint64_t)v16, a5, a7);
  uint64_t result = v17;
  if (v17)
  {
    if (*(double *)v17 != *(double *)a4 || *(double *)(v17 + 32) != *(double *)(a4 + 40))
    {
      *(void *)a4 = *(void *)v17;
      *(void *)(a4 + 40) = *(void *)(result + 32);
    }
    if (v18) {
      return MEMORY[0x1BA9BFBA0]();
    }
  }
  return result;
}

void sub_1B763225C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20)
  {
    if (a16) {
      MEMORY[0x1BA9BFBA0](a16, 0x1000C40FF89C88ELL);
    }
  }
  _Unwind_Resume(exception_object);
}

void PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry(PGHelium::MetalTextureCacheEntry *this)
{
  uint64_t v1 = *(void *)this;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
}

uint64_t TXTextObject::setIsEmoji(uint64_t this, char a2)
{
  *(unsigned char *)(this + 568) = a2;
  return this;
}

void TXTextObject::getBitmap(FxColorDescription *this@<X1>, TXTextObject *a2@<X0>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, float64x2_t *a6@<X8>, double a7@<D0>)
{
  uint64_t v45 = 0;
  float64_t v48 = 0;
  int v49 = 0;
  __int16 v50 = 257;
  __int16 v51 = 0;
  char v46 = a3;
  double v47 = a7;
  uint64_t WorkingColorSpace = OZRenderParams::getWorkingColorSpace(this);
  float64x2_t v29 = *(float64x2_t *)&this->_pcColorDesc._colorSpaceRef._obj;
  *(void *)&long long v30 = *(void *)&this->_pcColorDesc._toneMapMethod._gain;
  uint64_t v12 = TXTextObject::syncGlyph(a2, (CMTime *)&v29, (uint64_t)&v45);
  a6->f64[0] = 0.0;
  a6->f64[1] = 0.0;
  v39[0] = 0x3FF0000000000000;
  memset(&v39[1], 0, 24);
  uint64_t v40 = 0x3FF0000000000000;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0x3FF0000000000000;
  if (!PCMatrix44Tmpl<double>::isIdentity((double *)a4))
  {
    TXTextObject::getImageBounds(a2, (const OZRenderState *)this, (uint64_t)v38);
    v37[0] = v38[0];
    v37[1] = v38[1];
    PCMatrix44Tmpl<double>::transformRect<double>((double *)a4, (double *)v37, (uint64_t)v37);
    long long v14 = *(_OWORD *)(a4 + 80);
    long long v33 = *(_OWORD *)(a4 + 64);
    long long v34 = v14;
    long long v15 = *(_OWORD *)(a4 + 112);
    long long v35 = *(_OWORD *)(a4 + 96);
    long long v36 = v15;
    long long v16 = *(_OWORD *)(a4 + 16);
    float64x2_t v29 = *(float64x2_t *)a4;
    long long v30 = v16;
    long long v17 = *(_OWORD *)(a4 + 48);
    long long v31 = *(_OWORD *)(a4 + 32);
    long long v32 = v17;
    double v27 = 0.0;
    double v28 = 0.0;
    v25[0] = 0.0;
    v25[1] = 0.0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v26 = _Q0;
    TXTextObject::computeScaleFactors((OZRenderParams *)this, (double *)v38, &v29, v25, &v28, &v27);
    double v23 = v28;
    if (v28 > -0.0000001 && v28 < 0.0000001) {
      goto LABEL_8;
    }
    double v24 = v27;
    if (v27 > -0.0000001 && v27 < 0.0000001) {
      goto LABEL_8;
    }
    *(double *)long long v39 = v28;
    uint64_t v40 = *(void *)&v27;
    float64_t v48 = v39;
    *(void *)(a4 + 120) = 0x3FF0000000000000;
    *(void *)(a4 + 80) = 0x3FF0000000000000;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 104) = 0u;
    *(double *)a4 = v23;
    *(double *)(a4 + 40) = v24;
  }
  (*(void (**)(float64x2_t *__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v12 + 32))(&v29, v12, a5, &v45, 1, 1);
  *a6 = v29;
  uint64_t v13 = v48;
  if (v48)
  {
    *(void *)a4 = *v48;
    *(void *)(a4 + 40) = v13[4];
  }
LABEL_8:
  if (HIBYTE(v51))
  {
    if (v48) {
      MEMORY[0x1BA9BFBA0](v48, 0x1000C40FF89C88ELL);
    }
  }
}

void sub_1B7632530(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 - 73))
  {
    uint64_t v3 = *(void *)(v1 - 88);
    if (v3) {
      MEMORY[0x1BA9BFBA0](v3, 0x1000C40FF89C88ELL);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::getRenderedGlyphTransform@<X0>(TXTextObject *a1@<X0>, OZRenderState *a2@<X1>, float64x2_t *a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>, float64_t a6@<D0>, float64_t a7@<D1>)
{
  uint64_t v35 = 0;
  char v36 = 0;
  uint64_t v37 = 0x3FF0000000000000;
  long long v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  v23[0] = (CMTime)a2->var0;
  uint64_t v12 = TXTextObject::syncGlyph(a1, v23, (uint64_t)&v35);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  v27[0] = 0x3FF0000000000000;
  memset(&v27[1], 0, 24);
  uint64_t v28 = 0x3FF0000000000000;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0x3FF0000000000000;
  if (!PCMatrix44Tmpl<double>::isIdentity(a3->f64))
  {
    TXTextObject::getImageBounds(a1, a2, (uint64_t)v25);
    LiImagePolygon::LiImagePolygon((LiImagePolygon *)v23);
    LiImagePolygon::set((uint64_t)v23, v25, 0);
    if (a4[2] >= 0.0 && a4[3] >= 0.0)
    {
      liTransformAndClip(a4, a3->f64, (uint64_t **)v23);
      if (((v24[1] - *v24) & 0x1FFFFFFFE0) == 0)
      {
        v14.f64[0] = a6;
        v14.f64[1] = a7;
        float64x2_t v15 = vaddq_f64(v14, v14);
        v21[0] = v25[0] - v15.f64[0];
        v21[1] = v25[1] - v15.f64[1];
        float64x2_t v22 = vsubq_f64(v26, vsubq_f64(vnegq_f64(v15), v15));
        LiImagePolygon::set((uint64_t)v23, v21, 0);
        liTransformAndClip(a4, a3->f64, (uint64_t **)v23);
        if ((int)((v24[1] - *v24) >> 5) >= 1) {
          LiImagePolygon::set((uint64_t)v23, v25, 0);
        }
      }
    }
    TXTextObject::computeScaleFactors((OZRenderParams *)a2, (uint64_t)v23, a3, v13, (double *)&v34, (double *)&v33);
    v27[0] = v34;
    uint64_t v28 = v33;
    long long v38 = v27;
    LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v23);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v12 + 64))(v12, &v35);
  long long v17 = *(_OWORD *)(result + 16);
  *(_OWORD *)a5 = *(_OWORD *)result;
  *(_OWORD *)(a5 + 16) = v17;
  long long v18 = *(_OWORD *)(result + 48);
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(result + 32);
  *(_OWORD *)(a5 + 48) = v18;
  *(void *)(a5 + 64) = *(void *)(result + 64);
  if (HIBYTE(v39))
  {
    uint64_t result = (uint64_t)v38;
    if (v38) {
      return MEMORY[0x1BA9BFBA0](v38, 0x1000C40FF89C88ELL);
    }
  }
  return result;
}

void sub_1B76327A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)va);
  if (*(unsigned char *)(v9 - 73))
  {
    uint64_t v11 = *(void *)(v9 - 88);
    if (v11) {
      MEMORY[0x1BA9BFBA0](v11, 0x1000C40FF89C88ELL);
    }
  }
  _Unwind_Resume(a1);
}

void TXTextObject::getScaleMatrix(TXTextObject *a1, uint64_t a2, CMTime *a3, int a4)
{
  double v25 = 0.0;
  double v26 = 0.0;
  CMTime v23 = *a3;
  double v24 = 0.0;
  TXTextObject::getRotation(a1, &v23, &v26, &v25, &v24, 1, a4);
  double v21 = 0.0;
  double v22 = 0.0;
  uint64_t v6 = *(void *)(*((void *)a1 + 68) + 200);
  PCString v20[9] = 0.0;
  (*(void (**)(void))(v6 + 1312))();
  v20[6] = 0.0;
  v20[7] = 0.0;
  v20[8] = 1.0;
  v20[0] = v22;
  v20[1] = v22 * 0.0;
  void v20[2] = v22 * 0.0;
  v20[3] = v21 * 0.0;
  v20[4] = v21;
  v20[5] = v21 * 0.0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0x3FF0000000000000;
  __double2 v7 = __sincos_stret(v24);
  double v11 = v7.__cosval - v7.__sinval * 0.0;
  double v12 = v7.__cosval * 0.0 - v7.__sinval;
  double v13 = v7.__cosval * 0.0 - v7.__sinval * 0.0;
  double v14 = v7.__sinval + v7.__cosval * 0.0;
  double v15 = v7.__cosval + v7.__sinval * 0.0;
  double v16 = v7.__sinval * 0.0 + v7.__cosval * 0.0;
  v10[6] = 0.0;
  v10[7] = 0.0;
  unsigned char v10[8] = 1.0;
  v10[0] = v15;
  v10[1] = v14;
  v10[2] = v16;
  void v10[3] = v12;
  v10[4] = v11;
  v10[5] = v13;
  PCMatrix33Tmpl<double>::operator*((uint64_t)v10, v20, (uint64_t)v8);
  PCMatrix33Tmpl<double>::operator*((uint64_t)v8, &v11, (uint64_t)v9);
  PCMatrix33Tmpl<double>::operator=(a2, (uint64_t)v9);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 24) = 0;
}

void TXTextObject::getCommonTextureCacheHash(TXTextObject *this, int8x8_t *a2, OZRenderParams *a3, const FxColorDescription *a4, double *a5, double *a6, BOOL a7)
{
  uint64_t TextRenderQuality = OZRenderParams::getTextRenderQuality(a3);
  CMTime v27 = *(CMTime *)a3;
  uint64_t v15 = TXTextObject::syncGlyph(this, &v27, 0);
  double v16 = *(const void **)(v15 + 16);
  uint64_t v17 = *((void *)this + 33);
  if (v17)
  {
    uint64_t v18 = *(std::__shared_weak_count **)(v17 + 16);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  PCHashWriteStream::writeValue(a2, *(_WORD *)(v15 + 8));
  PCHashWriteStream::writeValue(a2, *((_WORD *)this + 60));
  uint64_t RenderQuality = OZRenderParams::getRenderQuality(a3);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)a2 + 48))(a2, RenderQuality);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)a2 + 48))(a2, TextRenderQuality);
  if (v16) {
  else
  }
    long long v20 = 0;
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)a2 + 104))(a2, (uint64_t)v20 + 112);
  CMTime v26 = *(CMTime *)a3;
  RenderedFontdouble Size = TXTextObject::getRenderedFontSize(this, &v26, 0.0);
  (*(void (**)(int8x8_t *, double))(*(void *)a2 + 88))(a2, RenderedFontSize);
  uint64_t ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*((void *)this + 68) + 20720), MEMORY[0x1E4F1FA48], 0.0);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)a2 + 48))(a2, ValueAsInt);
  ReducedResolutionMediCGFloat a = OZRenderParams::getReducedResolutionMedia(a3);
  PCHashWriteStream::writeValue(a2, ReducedResolutionMedia);
  FxHashColorDescription(a2, a4);
  double v24 = (OZChannel *)(*((void *)this + 68) + 28440);
  CMTime v27 = *(CMTime *)a3;
  HIDWORD(vTXTextLayout::setAllParagraphsDirty(this - 25) = HIDWORD(v27.value);
  LODWORD(vTXTextLayout::setAllParagraphsDirty(this - 25) = *((_DWORD *)this + 97);
  OZChannel::getValueAsDouble(v24, &v27, (double)v25);
  (*(void (**)(int8x8_t *))(*(void *)a2 + 88))(a2);
  if (TextRenderQuality == 2)
  {
    v27.CMTimeValue value = 0;
    TXTextObject::getScale(this, (CMTime *)a3, a5, a6, (double *)&v27.value, 1, 1, 1, 0, 0, a7);
    (*(void (**)(int8x8_t *, double))(*(void *)a2 + 88))(a2, *a5);
    (*(void (**)(int8x8_t *, double))(*(void *)a2 + 88))(a2, *a6);
  }
  (*(void (**)(int8x8_t *, double))(*(void *)a2 + 88))(a2, *((double *)a3 + 3));
  (*(void (**)(int8x8_t *, double))(*(void *)a2 + 88))(a2, *((double *)a3 + 4));
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
}

void sub_1B7632D0C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXTextObject::getScaleAndHashForPixelTransform(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  double v11 = v10;
  double v13 = v12;
  double v14 = (TXTextObject *)v1;
  double v16 = v15;
  v65[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v65);
  if ((v5 - 2) >= 2)
  {
    if (v5 == 1)
    {
LABEL_17:
      double v64 = 0.0;
      double v60 = 0.0;
      CMTime v49 = *v13;
      CMTime v48 = v49;
      double OutlineWidth = TXTextObject::getOutlineWidth(v14, &v48);
      double v47 = 0.0;
      TXTextObject::getScale(v14, v13, v11, v9, &v47, 1, 1, 1, 0, 0, 1);
      CMTime v46 = v49;
      TXTextObject::getOutlineBlur(v14, &v46, &v64, &v60);
      long long v27 = *(_OWORD *)(v7 + 80);
      long long v56 = *(_OWORD *)(v7 + 64);
      long long v57 = v27;
      long long v28 = *(_OWORD *)(v7 + 112);
      long long v58 = *(_OWORD *)(v7 + 96);
      long long v59 = v28;
      long long v29 = *(_OWORD *)(v7 + 16);
      float64x2_t v52 = *(float64x2_t *)v7;
      long long v53 = v29;
      long long v30 = *(_OWORD *)(v7 + 48);
      long long v54 = *(_OWORD *)(v7 + 32);
      long long v55 = v30;
      double v31 = 0.0;
      TXTextObject::getTextureBounds(v14, (OZRenderState *)v13, 0, &v52, 1, 1, (uint64_t)&v50, 0.0);
      double v32 = *v11;
      double v33 = *v9;
      if (*v11 <= -0.0000001 || v32 >= 0.0000001)
      {
        if (v33 <= -0.0000001 || (double v34 = 0.0, v33 >= 0.0000001))
        {
          if (v52.f64[0] / v32 <= *((double *)&v54 + 1) / v33) {
            double v31 = v52.f64[0] / v32;
          }
          else {
            double v31 = *((double *)&v54 + 1) / v33;
          }
          double v34 = v31 * (ceil(OutlineWidth * v31) / (OutlineWidth * v31));
        }
      }
      else
      {
        double v34 = 0.0;
      }
      v35.f64[0] = *v11;
      v35.f64[1] = *v9;
      float64x2_t v36 = vmulq_n_f64(vmulq_n_f64(v35, v34), OutlineWidth);
      float64x2_t v37 = vaddq_f64(v51, vaddq_f64(v36, v36));
      float64x2_t v51 = v37;
      if (v37.f64[0] > 4096.0 || v37.f64[1] > 4096.0)
      {
        if (v37.f64[0] >= v37.f64[1]) {
          double v39 = v37.f64[0];
        }
        else {
          double v39 = v37.f64[1];
        }
        double v40 = 4096.0 / v39;
        float64x2_t v51 = vmulq_n_f64(v37, v40);
        double v41 = v31 * v40;
        double v42 = OutlineWidth * (v31 * v40);
        double v34 = v31 * v40 * (floor(v42 + 0.0000001) / v42);
        if (v34 <= 0.0) {
          double v34 = v41 * (ceil(v42) / v42);
        }
      }
      double *v11 = v32 * v34;
      double *v9 = v34 * *v9;
      PCHashWriteStream::writeValue(v65, *v11);
      PCHashWriteStream::writeValue(v65, *v9);
      TXTextObject::getImageBoundsOfAttribute((uint64_t)v14, v50.f64, (const OZRenderState *)v13, 1, 1, 0, 1, 0, 0.0, 0.0, 0.0, 0.0);
      float64_t v43 = v51.f64[1] * *v11;
      float64_t v44 = v51.f64[0] * *v9;
      int32x2_t *v3 = vmovn_s64(vcvtq_s64_f64(v50));
      v3[1].i32[0] = (int)v44;
      v3[1].i32[1] = (int)v43;
      goto LABEL_36;
    }
    if (v5) {
      goto LABEL_36;
    }
  }
  v49.CMTimeValue value = 0;
  double v64 = 0.0;
  switch(v5)
  {
    case 3:
      CMTime v61 = *v13;
      TXTextObject::getDropShadowBlur(v14, &v61, (double *)&v49.value, &v64);
      break;
    case 2:
      CMTime v62 = *v13;
      TXTextObject::getGlowBlur(v14, &v62, (double *)&v49.value, &v64);
      break;
    case 0:
      CMTime v63 = *v13;
      TXTextObject::getFaceBlur(v14, &v63, (double *)&v49.value, &v64);
      break;
  }
  if (*(double *)&v49.value > 0.0 || v64 > 0.0)
  {
    double v60 = 0.0;
    TXTextObject::getScale(v14, v13, v11, v9, &v60, 1, 1, 1, 0, 0, 1);
    long long v22 = *(_OWORD *)(v7 + 80);
    long long v56 = *(_OWORD *)(v7 + 64);
    long long v57 = v22;
    long long v23 = *(_OWORD *)(v7 + 112);
    long long v58 = *(_OWORD *)(v7 + 96);
    long long v59 = v23;
    long long v24 = *(_OWORD *)(v7 + 16);
    float64x2_t v52 = *(float64x2_t *)v7;
    long long v53 = v24;
    long long v25 = *(_OWORD *)(v7 + 48);
    long long v54 = *(_OWORD *)(v7 + 32);
    long long v55 = v25;
    TXTextObject::getTextureBounds(v14, (OZRenderState *)v13, 0, &v52, 1, 0, (uint64_t)&v50, 0.0);
    double v26 = v52.f64[0] / *v11;
    if (v26 > *((double *)&v54 + 1) / *v9) {
      double v26 = *((double *)&v54 + 1) / *v9;
    }
    double *v11 = *v11 * v26;
    double *v9 = *v9 * v26;
    PCHashWriteStream::writeValue(v65, *v11);
    PCHashWriteStream::writeValue(v65, *v9);
  }
  else
  {
    long long v17 = *(_OWORD *)(v7 + 80);
    long long v56 = *(_OWORD *)(v7 + 64);
    long long v57 = v17;
    long long v18 = *(_OWORD *)(v7 + 112);
    long long v58 = *(_OWORD *)(v7 + 96);
    long long v59 = v18;
    long long v19 = *(_OWORD *)(v7 + 16);
    float64x2_t v52 = *(float64x2_t *)v7;
    long long v53 = v19;
    long long v20 = *(_OWORD *)(v7 + 48);
    long long v54 = *(_OWORD *)(v7 + 32);
    long long v55 = v20;
    TXTextObject::getTextureBounds(v14, (OZRenderState *)v13, 0, &v52, 1, 0, (uint64_t)&v50, 0.0);
    uint64_t v21 = *((void *)&v54 + 1);
    double *v11 = v52.f64[0];
    *(void *)uint64_t v9 = v21;
    PCHashWriteStream::writeValue(v65, *v11);
    PCHashWriteStream::writeValue(v65, *v9);
    *(int32x4_t *)v3->i8 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v50), (int32x4_t)vcvtq_s64_f64(v51));
  }
  if (v5 == 1) {
    goto LABEL_17;
  }
LABEL_36:
  PCHashWriteStream::close(v65);
  *double v16 = *(_OWORD *)PCHashWriteStream::getHash(v65)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v65);
}

void sub_1B7633270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
}

void TXTextObject::getTextureCacheHashForAttribute(TXTextObject *this, OZRenderParams *a2, const FxColorDescription *a3, unsigned int a4, double *a5, double *a6)
{
  uint64_t v6 = MEMORY[0x1F4188790](this);
  int v8 = v7;
  int v10 = v9;
  double v12 = v11;
  double v14 = v13;
  int v16 = v15;
  long long v18 = v17;
  long long v20 = v19;
  uint64_t v21 = v6;
  long long v23 = v22;
  v85[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v85);
  TXTextObject::getCommonTextureCacheHash((TXTextObject *)v21, v85, v20, v18, v14, v12, v8);
  uint64_t v24 = *(void *)(v21 + 264);
  if (v24)
  {
    uint64_t v26 = *(void *)(v24 + 8);
    long long v25 = *(std::__shared_weak_count **)(v24 + 16);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v26 = 0;
    long long v25 = 0;
  }
  CMTime __src = *(CMTime *)v20;
  if (v10)
  {
    TypeOuint64_t n = TXTextLayout::getTypeOn(*(TXTextLayout **)(v21 + 544), *(_DWORD *)(v21 + 96), &__src);
    PCHashWriteStream::writeValue(v85, TypeOn);
  }
  switch(v16)
  {
    case 0:
      double v82 = 0.0;
      double v83 = 0.0;
      CMTime v81 = __src;
      TXTextObject::getFaceBlur((TXTextObject *)v21, &v81, &v83, &v82);
      int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v26 + 6088), MEMORY[0x1E4F1FA48], 0.0);
      PCHashWriteStream::writeValue(v85, ValueAsInt);
      PCHashWriteStream::writeValue(v85, 0);
      PCHashWriteStream::writeValue(v85, v83);
      PCHashWriteStream::writeValue(v85, v82);
      if (ValueAsInt == 2)
      {
        (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(void *)(v26 + 8560) + 448))(v26 + 8560, v85, &__src);
        float64_t v44 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 128))(v26);
        unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(v26 + 8696), MEMORY[0x1E4F1FA48], 0.0);
        Node = OZScene::getNode(v44, ValueAsUint);
        double v47 = Node;
        if (Node)
        {
          if (v48)
          {
            double v78 = COERCE_DOUBLE(&v78);
            double v79 = &v78;
            uint64_t v80 = 0;
            (*(void (**)(void *, int8x8_t *, OZRenderParams *, double *, uint64_t))(*(void *)v48 + 536))(v48, v85, v20, &v78, 1);
            std::__list_imp<unsigned int>::clear(&v78);
          }
          if (v50 && ((*(uint64_t (**)(void *))(*(void *)v50 + 1784))(v50) & 1) != 0
            || v49 && (*(unsigned int (**)(void *))(*(void *)v49 + 1376))(v49) >= 2)
          {
            PCHashWriteStream::writeValue(v85, &__src);
          }
        }
      }
      else
      {
        if (ValueAsInt == 1)
        {
          uint64_t v29 = 7352;
        }
        else
        {
          if (!v10) {
            goto LABEL_56;
          }
          uint64_t v29 = 6344;
        }
        (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(void *)(v26 + v29) + 448))(v26 + v29, v85, &__src);
      }
      goto LABEL_56;
    case 1:
      double v82 = 0.0;
      double v83 = 0.0;
      CMTime v77 = *(CMTime *)v20;
      TXTextObject::getOutlineBlur((TXTextObject *)v21, &v77, &v83, &v82);
      CMTime v76 = __src;
      double OutlineWidth = TXTextObject::getOutlineWidth((TXTextObject *)v21, &v76);
      int v31 = OZChannel::getValueAsInt((OZChannel *)(v26 + 22760), MEMORY[0x1E4F1FA48], 0.0);
      PCHashWriteStream::writeValue(v85, 1);
      PCHashWriteStream::writeValue(v85, OutlineWidth);
      PCHashWriteStream::writeValue(v85, v31);
      PCHashWriteStream::writeValue(v85, v83);
      PCHashWriteStream::writeValue(v85, v82);
      char v32 = OZChannel::getValueAsInt((OZChannel *)(v26 + 30928), MEMORY[0x1E4F1FA48], 0.0) != 0;
      PCHashWriteStream::writeValue(v85, v32);
      PCHashWriteStream::writeValue(v85, *(unsigned char *)(*(void *)(v21 + 544) + 64176));
      if (!OZRenderParams::getTextRenderQuality(v20))
      {
        double v78 = 0.0;
        double v74 = 0.0;
        double v75 = 0.0;
        TXTextObject::getScale((TXTextObject *)v21, (CMTime *)v20, &v78, &v75, &v74, 1, 1, 1, 0, 0, v8);
        PCHashWriteStream::writeValue(v85, v78);
        PCHashWriteStream::writeValue(v85, v75);
      }
      if (v31 == 2)
      {
        (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(void *)(v26 + 25232) + 448))(v26 + 25232, v85, &__src);
        float64x2_t v51 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 128))(v26);
        unsigned int v52 = OZChannel::getValueAsUint((OZChannel *)(v26 + 25368), MEMORY[0x1E4F1FA48], 0.0);
        long long v53 = OZScene::getNode(v51, v52);
        if (v53)
        {
          if (v54)
          {
            double v78 = COERCE_DOUBLE(&v78);
            double v79 = &v78;
            uint64_t v80 = 0;
            (*(void (**)(void *, int8x8_t *, OZRenderParams *, double *, uint64_t))(*(void *)v54 + 536))(v54, v85, v20, &v78, 1);
            std::__list_imp<unsigned int>::clear(&v78);
          }
        }
        goto LABEL_42;
      }
      if (v31 == 1)
      {
        uint64_t v33 = 24024;
      }
      else
      {
        if (!v10)
        {
LABEL_42:
          (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(void *)(v26 + 26824) + 448))(v26 + 26824, v85, &__src);
          goto LABEL_56;
        }
        uint64_t v33 = 23016;
      }
      (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(void *)(v26 + v33) + 448))(v26 + v33, v85, &__src);
      goto LABEL_42;
    case 2:
      uint64_t v34 = *(void *)(v21 + 544);
      double v82 = 0.0;
      double v83 = 0.0;
      double v75 = 0.0;
      TXTextObject::getPivot((TXTextLayout **)v21, &v83, &v82, &v75, &__src, v8);
      double v73 = 0.0;
      double v74 = 0.0;
      CMTime v72 = __src;
      TXTextObject::getGlowBlur((TXTextObject *)v21, &v72, &v74, &v73);
      double v70 = 0.0;
      double v71 = 0.0;
      CMTime v69 = __src;
      TXTextObject::getGlowScale((TXTextObject *)v21, &v69, &v71, &v70, 1);
      int v35 = OZChannel::getValueAsInt((OZChannel *)(v26 + 31208), MEMORY[0x1E4F1FA48], 0.0);
      PCHashWriteStream::writeValue(v85, 2);
      PCHashWriteStream::writeValue(v85, v83);
      PCHashWriteStream::writeValue(v85, v82);
      PCHashWriteStream::writeValue(v85, v71);
      PCHashWriteStream::writeValue(v85, v70);
      PCHashWriteStream::writeValue(v85, v35);
      PCHashWriteStream::writeValue(v85, v74);
      PCHashWriteStream::writeValue(v85, v73);
      CMTime v68 = __src;
      OZChannel::getValueAsDouble((OZChannel *)(v26 + 36016), &v68, 0.0);
      double v37 = *(double *)&v36;
      HIDWORD(v36) = HIDWORD(__src.value);
      CMTime v67 = __src;
      LODWORD(v36) = *(_DWORD *)(v21 + 736);
      double GlowRadius = TXSequenceChannels::getGlowRadius((TXSequenceChannels *)(v34 + 25032), &v67, (double)v36);
      PCHashWriteStream::writeValue(v85, v37 + GlowRadius);
      if (v35 == 2)
      {
        (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(void *)(v26 + 33680) + 448))(v26 + 33680, v85, &__src);
        long long v59 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 128))(v26);
        unsigned int v60 = OZChannel::getValueAsUint((OZChannel *)(v26 + 33816), MEMORY[0x1E4F1FA48], 0.0);
        CMTime v61 = OZScene::getNode(v59, v60);
        if (v61)
        {
          if (v62)
          {
            double v78 = COERCE_DOUBLE(&v78);
            double v79 = &v78;
            uint64_t v80 = 0;
            (*(void (**)(void *, int8x8_t *, OZRenderParams *, double *, uint64_t))(*(void *)v62 + 536))(v62, v85, v20, &v78, 1);
            std::__list_imp<unsigned int>::clear(&v78);
          }
        }
      }
      else
      {
        if (v35 == 1) {
          uint64_t v39 = 32472;
        }
        else {
          uint64_t v39 = 31464;
        }
        (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(void *)(v26 + v39) + 448))(v26 + v39, v85, &__src);
      }
      (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(void *)(v26 + 35272) + 448))(v26 + 35272, v85, &__src);
      goto LABEL_56;
    case 3:
      double v82 = 0.0;
      double v83 = 0.0;
      double v75 = 0.0;
      TXTextObject::getPivot((TXTextLayout **)v21, &v83, &v82, &v75, &__src, v8);
      double v73 = 0.0;
      double v74 = 0.0;
      CMTime v66 = __src;
      TXTextObject::getDropShadowBlur((TXTextObject *)v21, &v66, &v74, &v73);
      double v70 = 0.0;
      double v71 = 0.0;
      CMTime v65 = __src;
      TXTextObject::getDropShadowScale((TXTextObject *)v21, &v65, &v71, &v70, 1);
      int v40 = OZChannel::getValueAsInt((OZChannel *)(v26 + 13976), MEMORY[0x1E4F1FA48], 0.0);
      PCHashWriteStream::writeValue(v85, 3);
      PCHashWriteStream::writeValue(v85, v83);
      PCHashWriteStream::writeValue(v85, v82);
      PCHashWriteStream::writeValue(v85, v71);
      PCHashWriteStream::writeValue(v85, v70);
      PCHashWriteStream::writeValue(v85, v40);
      double v41 = v74;
      PCHashWriteStream::writeValue(v85, v74);
      double v42 = v73;
      PCHashWriteStream::writeValue(v85, v73);
      if (v41 > 0.0 || v42 > 0.0)
      {
        double v78 = 0.0;
        double v63 = 0.0;
        double v64 = 0.0;
        TXTextObject::getScale((TXTextObject *)v21, (CMTime *)v20, &v78, &v64, &v63, 1, 1, 1, 0, 0, 1);
        PCHashWriteStream::writeValue(v85, v78);
        PCHashWriteStream::writeValue(v85, v64);
      }
      if (v40 == 2)
      {
        (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(void *)(v26 + 16448) + 448))(v26 + 16448, v85, &__src);
        long long v55 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 128))(v26);
        unsigned int v56 = OZChannel::getValueAsUint((OZChannel *)(v26 + 16584), MEMORY[0x1E4F1FA48], 0.0);
        long long v57 = OZScene::getNode(v55, v56);
        if (v57)
        {
          if (v58)
          {
            double v78 = COERCE_DOUBLE(&v78);
            double v79 = &v78;
            uint64_t v80 = 0;
            (*(void (**)(void *, int8x8_t *, OZRenderParams *, double *, uint64_t))(*(void *)v58 + 536))(v58, v85, v20, &v78, 1);
            std::__list_imp<unsigned int>::clear(&v78);
          }
        }
      }
      else
      {
        if (v40 == 1)
        {
          uint64_t v43 = 15240;
        }
        else
        {
          if (!v10) {
            goto LABEL_49;
          }
          uint64_t v43 = 14232;
        }
        (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(void *)(v26 + v43) + 448))(v26 + v43, v85, &__src);
      }
LABEL_49:
      (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(void *)(v26 + 18040) + 448))(v26 + 18040, v85, &__src);
LABEL_56:
      *long long v23 = *(_OWORD *)PCHashWriteStream::getHash(v85)->i8;
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v85);
      return;
    default:
      goto LABEL_56;
  }
}

void sub_1B7634044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  std::__list_imp<unsigned int>::clear(&a48);
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&a60);
  _Unwind_Resume(a1);
}

double TXSequenceChannels::getGlowRadius(TXSequenceChannels *this, CMTime *a2, double a3)
{
  int v5 = (OZChannel *)((char *)this + 15512);
  if (!OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 15512), 0, 1)) {
    return 0.0;
  }

  OZChannel::getValueAsDouble(v5, a2, a3);
  return result;
}

void TXTextObject::getCacheHash(TXTextObject *this, OZRenderParams *a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](this);
  int v4 = (CMTime *)v3;
  uint64_t v5 = v2;
  int v7 = v6;
  v27[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  int TextRenderQuality = OZRenderParams::getTextRenderQuality(v3);
  CMTime v24 = *v4;
  uint64_t v9 = TXTextObject::syncGlyph((TXTextObject *)v5, &v24, 0);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void *)(v5 + 264);
  if (v11)
  {
    uint64_t v13 = *(void *)(v11 + 8);
    double v12 = *(std::__shared_weak_count **)(v11 + 16);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v13 = 0;
    double v12 = 0;
  }
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v27);
  PCHashWriteStream::writeValue(v27, TextRenderQuality);
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
  PCHashWriteStream::writeValue(v27, v14);
  PCHashWriteStream::writeValue(v27, *(_WORD *)(v9 + 8));
  PCHashWriteStream::writeValue(v27, *(_WORD *)(v5 + 120));
  CMTime v23 = *v4;
  float Size = TXTextStyle::getSize((OZChannel *)v13, &v23, 0.0);
  PCHashWriteStream::writeValue(v27, Size);
  if (TextRenderQuality == 2)
  {
    v26[0] = 0;
    v25[0] = 0;
    double v22 = 0.0;
    TXTextObject::getScale((TXTextObject *)v5, v4, (double *)v26, (double *)v25, &v22, 1, 1, 1, 0, 0, 1);
    PCHashWriteStream::writeValue(v27, *(double *)v26);
    PCHashWriteStream::writeValue(v27, *(double *)v25);
  }
  double v21 = 0.0;
  double v22 = 0.0;
  CMTime v20 = v24;
  TXTextObject::getFaceBlur((TXTextObject *)v5, &v20, &v22, &v21);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v13 + 6088), MEMORY[0x1E4F1FA48], 0.0);
  PCHashWriteStream::writeValue(v27, ValueAsInt);
  PCHashWriteStream::writeValue(v27, v22);
  PCHashWriteStream::writeValue(v27, v21);
  PCHashWriteStream::close(v27);
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v26);
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v25);
  (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(void *)(v13 + 7352) + 448))(v13 + 7352, v26, &v24);
  (*(void (**)(uint64_t, int8x8_t *, CMTime *))(*(void *)(v13 + 8560) + 448))(v13 + 8560, v25, &v24);
  Hash = PCHashWriteStream::getHash(v25);
  int8x8_t *v7 = *Hash;
  v7[1] = Hash[1];
  long long v18 = PCHashWriteStream::getHash(v26);
  PCHash128::operator+=((int *)v7, (int *)v18);
  long long v19 = PCHashWriteStream::getHash(v27);
  PCHash128::operator+=((int *)v7, (int *)v19);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v25);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v26);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v27);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1B7634508(_Unwind_Exception *a1)
{
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&STACK[0x10B8]);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&STACK[0x20F8]);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::isOutlineEnabled(TXTextObject *this, CMTime *a2)
{
  uint64_t v3 = *((void *)this + 33);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 16);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v6 = (TXTextLayout *)*((void *)this + 68);
  if ((OZChannelBase::isEnabled((OZChannelBase *)(v4 + 22632), 0, 1) & 1) == 0)
  {
    CMTime v10 = *a2;
    if ((TXTextLayout::isStyleEnabledBySequenceBehavior(v6, 1011, &v10) & 1) == 0)
    {
      CMTime v9 = *a2;
      uint64_t isStyleEnabledByOldSequenceBehavior = TXTextLayout::isStyleEnabledByOldSequenceBehavior(v6, 1011, &v9);
      if (!v5) {
        return isStyleEnabledByOldSequenceBehavior;
      }
      goto LABEL_8;
    }
  }
  uint64_t isStyleEnabledByOldSequenceBehavior = 1;
  if (v5) {
LABEL_8:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return isStyleEnabledByOldSequenceBehavior;
}

void sub_1B7634644(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXTextObject::getOutlineColor(TXTextObject *this, CMTime *a2, double a3, PCWorkingColor *a4)
{
  uint64_t v7 = *((void *)this + 33);
  if (v7)
  {
    uint64_t v9 = *(void *)(v7 + 8);
    int v8 = *(std::__shared_weak_count **)(v7 + 16);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v9 = 0;
    int v8 = 0;
  }
  uint64_t v10 = *((void *)this + 68);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v9 + 22760), MEMORY[0x1E4F1FA48], 0.0);
  PCColor::PCColor(&v31);
  if (ValueAsInt)
  {
    uint64_t v13 = PCColor::WHITE(v12);
    long long v14 = *(_OWORD *)v13;
    long long v15 = *((_OWORD *)v13 + 2);
    *(_OWORD *)&v31.var0.var1[1] = *((_OWORD *)v13 + 1);
    *(_OWORD *)&v31.var0.var1[3] = v15;
    *(_OWORD *)&v31.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v14;
    PCCFRef<CGColorSpace *>::operator=(&v31.var1._obj, (CGColorSpace **)v13 + 6);
  }
  else
  {
    (*(void (**)(uint64_t, CMTime *, PCColor *))(*(void *)(v9 + 23016) + 832))(v9 + 23016, a2, &v31);
    if (OZChannelBase::isEnabled((OZChannelBase *)(v10 + 33552), 0, 1))
    {
      CMTime v30 = *a2;
      OZChannelColorNoAlpha::setColor((OZChannelColorNoAlpha *)(v10 + 33552), &v30, &v31, 1);
      CMTime v29 = *a2;
      HIDWORD(v16) = HIDWORD(v29.value);
      LODWORD(v16) = *((_DWORD *)this + 184);
      OZChannelColorNoAlpha::getColor((OZChannelColorNoAlpha *)(v10 + 33552), &v29, &v31, (double)v16);
    }
  }
  CMTime v28 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v9 + 26824), &v28, 0.0);
  double v18 = *(double *)&v17;
  CMTime v27 = *a2;
  HIDWORD(v17) = HIDWORD(v27.value);
  LODWORD(v17) = *((_DWORD *)this + 184);
  double v19 = (double)v17;
  OZChannel::getValueAsDouble((OZChannel *)(v10 + 26080), &v27, (double)v17);
  double v21 = v20;
  OZChannel::getValueAsDouble((OZChannel *)(v10 + 34560), &v27, v19);
  double v23 = v22;
  TypeOuint64_t n = TXTextLayout::getTypeOn(*((TXTextLayout **)this + 68), *((_DWORD *)this + 24), a2);
  CMTime v26 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v10 + 19448), &v26, 0.0);
  *(float *)&double v25 = v18 * (v21 * v23) * TypeOn * v25;
  PCColor::setAlpha(&v31, *(float *)&v25);
  PCWorkingColor::operator=((uint64_t)a4, &v31.var0.var0);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v31.var1._obj);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1B76348C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::isGlowEnabled(TXTextObject *this, CMTime *a2)
{
  uint64_t v3 = *((void *)this + 33);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 16);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v6 = (TXTextLayout *)*((void *)this + 68);
  if ((OZChannelBase::isEnabled((OZChannelBase *)(v4 + 31080), 0, 1) & 1) == 0)
  {
    CMTime v10 = *a2;
    if ((TXTextLayout::isStyleEnabledBySequenceBehavior(v6, 1016, &v10) & 1) == 0)
    {
      CMTime v9 = *a2;
      uint64_t isStyleEnabledByOldSequenceBehavior = TXTextLayout::isStyleEnabledByOldSequenceBehavior(v6, 1016, &v9);
      if (!v5) {
        return isStyleEnabledByOldSequenceBehavior;
      }
      goto LABEL_8;
    }
  }
  uint64_t isStyleEnabledByOldSequenceBehavior = 1;
  if (v5) {
LABEL_8:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return isStyleEnabledByOldSequenceBehavior;
}

void sub_1B76349C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXTextObject::getGlowColor(TXTextObject *this, CMTime *a2, double a3, PCWorkingColor *a4)
{
  uint64_t v7 = *((void *)this + 33);
  if (v7)
  {
    uint64_t v9 = *(void *)(v7 + 8);
    int v8 = *(std::__shared_weak_count **)(v7 + 16);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v9 = 0;
    int v8 = 0;
  }
  uint64_t v10 = *((void *)this + 68);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v9 + 31208), MEMORY[0x1E4F1FA48], 0.0);
  PCColor::PCColor(&v31);
  if (ValueAsInt)
  {
    uint64_t v13 = PCColor::WHITE(v12);
    long long v14 = *(_OWORD *)v13;
    long long v15 = *((_OWORD *)v13 + 2);
    *(_OWORD *)&v31.var0.var1[1] = *((_OWORD *)v13 + 1);
    *(_OWORD *)&v31.var0.var1[3] = v15;
    *(_OWORD *)&v31.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v14;
    PCCFRef<CGColorSpace *>::operator=(&v31.var1._obj, (CGColorSpace **)v13 + 6);
  }
  else
  {
    (*(void (**)(uint64_t, CMTime *, PCColor *))(*(void *)(v9 + 31464) + 832))(v9 + 31464, a2, &v31);
    if (OZChannelBase::isEnabled((OZChannelBase *)(v10 + 38792), 0, 1))
    {
      CMTime v30 = *a2;
      OZChannelColorNoAlpha::setColor((OZChannelColorNoAlpha *)(v10 + 38792), &v30, &v31, 1);
      CMTime v29 = *a2;
      HIDWORD(v16) = HIDWORD(v29.value);
      LODWORD(v16) = *((_DWORD *)this + 184);
      OZChannelColorNoAlpha::getColor((OZChannelColorNoAlpha *)(v10 + 38792), &v29, &v31, (double)v16);
    }
  }
  CMTime v28 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v9 + 35272), &v28, 0.0);
  double v18 = *(double *)&v17;
  CMTime v27 = *a2;
  HIDWORD(v17) = HIDWORD(v27.value);
  LODWORD(v17) = *((_DWORD *)this + 184);
  double v19 = (double)v17;
  OZChannel::getValueAsDouble((OZChannel *)(v10 + 26080), &v27, (double)v17);
  double v21 = v20;
  OZChannel::getValueAsDouble((OZChannel *)(v10 + 39800), &v27, v19);
  double v23 = v22;
  TypeOuint64_t n = TXTextLayout::getTypeOn(*((TXTextLayout **)this + 68), *((_DWORD *)this + 24), a2);
  CMTime v26 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v10 + 19448), &v26, 0.0);
  *(float *)&double v25 = v18 * (v21 * v23) * TypeOn * v25;
  PCColor::setAlpha(&v31, *(float *)&v25);
  PCWorkingColor::operator=((uint64_t)a4, &v31.var0.var0);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v31.var1._obj);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1B7634C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::isFaceEnabled(TXTextObject *this, const CMTime *a2)
{
  uint64_t v3 = *((void *)this + 33);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 16);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v6 = (TXTextLayout *)*((void *)this + 68);
  if ((OZChannelBase::isEnabled((OZChannelBase *)(v4 + 5960), 0, 1) & 1) == 0)
  {
    CMTime v10 = *a2;
    if ((TXTextLayout::isStyleEnabledBySequenceBehavior(v6, 1007, &v10) & 1) == 0)
    {
      CMTime v9 = *a2;
      uint64_t isStyleEnabledByOldSequenceBehavior = TXTextLayout::isStyleEnabledByOldSequenceBehavior(v6, 1007, &v9);
      if (!v5) {
        return isStyleEnabledByOldSequenceBehavior;
      }
      goto LABEL_8;
    }
  }
  uint64_t isStyleEnabledByOldSequenceBehavior = 1;
  if (v5) {
LABEL_8:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return isStyleEnabledByOldSequenceBehavior;
}

void sub_1B7634D4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextObject::isFaceVisible(TXTextObject *a1, CMTime *a2, __n128 *a3, uint64_t a4, int a5, int a6)
{
  uint64_t result = TXTextObject::isFaceEnabled(a1, a2);
  if (result)
  {
    if (a3)
    {
      TXTextObject::getFaceColor((uint64_t)a1, a2, a3, a4, a5, a6);
      float v13 = a3->n128_f32[3];
      return v13 >= 0.00001 || v13 <= -0.00001;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void TXTextObject::getFaceColor(uint64_t a1, CMTime *a2, __n128 *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12 = *(void *)(a1 + 264);
  if (v12)
  {
    uint64_t v13 = *(void *)(v12 + 8);
    long long v14 = *(std::__shared_weak_count **)(v12 + 16);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v13 = 0;
    long long v14 = 0;
  }
  uint64_t v15 = *(void *)(a1 + 544);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v13 + 6088), MEMORY[0x1E4F1FA48], 0.0);
  long long v17 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)&v27.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = *(_OWORD *)a4;
  *(_OWORD *)&v27.var0.var1[1] = v17;
  long long v18 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)&v27.var0.var1[3] = v18;
  double v19 = *(CGColorSpace **)(a4 + 48);
  v27.var1._obuint64_t j = v19;
  if (v19) {
    double v19 = PCCFRefTraits<CGColorSpace *>::retain(v19);
  }
  if (ValueAsInt)
  {
    double v20 = PCColor::WHITE((PCColor *)v19);
    long long v21 = *(_OWORD *)v20;
    long long v22 = *((_OWORD *)v20 + 2);
    *(_OWORD *)&v27.var0.var1[1] = *((_OWORD *)v20 + 1);
    *(_OWORD *)&v27.var0.var1[3] = v22;
    *(_OWORD *)&v27.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v21;
    PCCFRef<CGColorSpace *>::operator=(&v27.var1._obj, (CGColorSpace **)v20 + 6);
  }
  else
  {
    LODWORD(v18) = *(_DWORD *)(a1 + 736);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, CMTime *, uint64_t, double))(*(void *)v15 + 728))(v25, v15, a2, a4, (double)(unint64_t)v18);
    *(_OWORD *)&v27.var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v25[0];
    *(_OWORD *)&v27.var0.var1[1] = v25[1];
    *(_OWORD *)&v27.var0.var1[3] = v25[2];
    double v23 = v26;
    if (v27.var1._obj && v27.var1._obj != v26)
    {
      PCCFRefTraits<CGColorSpace *>::release(v27.var1._obj);
      double v23 = v26;
    }
    v27.var1._obuint64_t j = v23;
    CMTime v26 = 0;
    PCCFRef<CGColorSpace *>::~PCCFRef(&v26);
  }
  float FaceOpacity = TXTextObject::getFaceOpacity((TXTextObject *)a1, a2);
  PCColor::setAlpha(&v27, FaceOpacity);
  if (OZChannel::getValueAsInt((OZChannel *)(v15 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 3
    || OZChannel::getValueAsInt((OZChannel *)(v15 + 20464), MEMORY[0x1E4F1FA48], 0.0) == 4)
  {
    TXTextObject::setWorkingColor(a1, a3, &v27, a5, a6);
  }
  else
  {
    PCWorkingColor::operator=((uint64_t)a3, &v27.var0.var0);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v27.var1._obj);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_1B7635010(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v3);
  PCCFRef<CGColorSpace *>::~PCCFRef(v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::isDropShadowEnabled(TXTextObject *this, CMTime *a2)
{
  uint64_t v3 = *((void *)this + 33);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 16);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v6 = (TXTextLayout *)*((void *)this + 68);
  if ((OZChannelBase::isEnabled((OZChannelBase *)(v4 + 13848), 0, 1) & 1) == 0)
  {
    CMTime v9 = *a2;
    uint64_t isStyleEnabledBySequenceBehavior = TXTextLayout::isStyleEnabledBySequenceBehavior(v6, 1020, &v9);
    if (!v5) {
      return isStyleEnabledBySequenceBehavior;
    }
    goto LABEL_7;
  }
  uint64_t isStyleEnabledBySequenceBehavior = 1;
  if (v5) {
LABEL_7:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return isStyleEnabledBySequenceBehavior;
}

void sub_1B7635108(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

CGColorSpace **TXTextObject::getDropShadowColor(TXTextObject *this, CMTime *a2, double a3, PCWorkingColor *a4)
{
  PCColor::PCColor(&v9);
  CMTime v8 = *a2;
  TXTextObject::getDropShadowColor(this, &v8, *(double *)&v8.value, &v9);
  PCWorkingColor::operator=((uint64_t)a4, &v9.var0.var0);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v9.var1._obj);
}

void sub_1B763519C(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 48));
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::isColorAnimated(TXTextObject *this, TXSequenceChannels *a2)
{
  uint64_t v3 = *((void *)this + 33);
  if (v3)
  {
    uint64_t v5 = *(TXTextStyle **)(v3 + 8);
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v6 = *((void *)this + 68);
  int FillType = TXTextStyle::getFillType(v5, (int)a2);
  uint64_t ColorChannelID = TXSequenceChannels::getColorChannelID(a2);
  uint64_t ColorChannel = TXTextStyle::getColorChannel(v5, (int)a2);
  if (FillType) {
    goto LABEL_6;
  }
  uint64_t v11 = ColorChannel;
  if (((*(uint64_t (**)(uint64_t, void))(*(void *)ColorChannel + 552))(ColorChannel, 0) & 1) == 0
    && (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v11 + 136), 0) & 1) == 0
    && (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v11 + 288), 0) & 1) == 0
    && (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v11 + 440), 0) & 1) == 0)
  {
    uint64_t v13 = v6 + 1200;
    uint64_t v14 = *(void *)(v6 + 1208);
    if (v14 == v6 + 1200)
    {
LABEL_6:
      uint64_t v10 = 0;
      goto LABEL_12;
    }
    while (1)
    {
      uint64_t v15 = *(const void **)(v14 + 16);
      if (v15)
      {
        if (v16)
        {
          if ((*(uint64_t (**)(void *, uint64_t, void, void))(*(void *)v16 + 616))(v16, ColorChannelID, 0, 0))break; {
        }
          }
        if (v17 && TXTextSequenceBehavior::isChannelEnabled(v17, ColorChannelID)) {
          break;
        }
      }
      uint64_t v10 = 0;
      uint64_t v14 = *(void *)(v14 + 8);
      if (v14 == v13) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v10 = 1;
LABEL_12:
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v10;
}

void sub_1B76353C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXTextObject::setWorkingColor(uint64_t a1, __n128 *a2, PCColor *this, int a4, int a5)
{
  uint64_t v10 = (__n128 *)TXTextLayout::workingColorFromColor(*(TXTextLayout **)(a1 + 544), this, (uint64_t)a2, a5, a4);
  if (v10)
  {
    PCWorkingColor::operator=(a2, v10);
  }
  else
  {
    PCWorkingColor::operator=((uint64_t)a2, &this->var0.var0);
    TXTextLayout::cacheColorConversion(*(TXTextLayout **)(a1 + 544), this, (uint64_t)a2, a5, a4);
  }
  a2->n128_f32[3] = PCColor::getAlpha(this);
}

void TXTextObject::getFaceColor(TXTextObject *this, CMTime *a2, double a3, PCColorSpaceCache **a4)
{
  uint64_t v7 = *((void *)this + 33);
  if (v7)
  {
    uint64_t v9 = *(void *)(v7 + 8);
    CMTime v8 = *(std::__shared_weak_count **)(v7 + 16);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v9 = 0;
    CMTime v8 = 0;
  }
  PCColor::PCColor(&v15);
  (*(void (**)(uint64_t, CMTime *, PCColor *))(*(void *)(v9 + 6344) + 832))(v9 + 6344, a2, &v15);
  int v11 = PCColorSpaceCache::identifyColorSpace(a4[2], v10);
  CGColorSpace = PCColor::getCGColorSpace(&v15);
  int v14 = PCColorSpaceCache::identifyColorSpace(CGColorSpace, v13);
  TXTextObject::getFaceColor((uint64_t)this, a2, (__n128 *)a4, (uint64_t)&v15, v11, v14);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v15.var1._obj);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1B7635590(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

double TXTextObject::getFaceOpacity(TXTextObject *this, CMTime *a2)
{
  uint64_t v4 = *((void *)this + 33);
  if (v4)
  {
    uint64_t v6 = *(void *)(v4 + 8);
    uint64_t v5 = *(std::__shared_weak_count **)(v4 + 16);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *((void *)this + 68);
  CMTime v19 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v6 + 10152), &v19, 0.0);
  double v9 = v8;
  TypeOuint64_t n = TXTextLayout::getTypeOn(*((TXTextLayout **)this + 68), *((_DWORD *)this + 24), a2);
  int isEnabled = OZChannelBase::isEnabled((OZChannelBase *)(v6 + 5960), 0, 1);
  LODWORD(v12) = *((_DWORD *)this + 184);
  double v13 = (*(double (**)(uint64_t, uint64_t, uint64_t, CMTime *, double, double))(*(void *)v7 + 736))(v7, v7 + 26080, v7 + 29728, a2, v9, (double)v12);
  CMTime v18 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v7 + 19448), &v18, 0.0);
  double v15 = v14;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  double v16 = 1.0;
  if (isEnabled) {
    double v16 = v9;
  }
  return TypeOn * v16 * v13 * v15;
}

void sub_1B7635724(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXSequenceChannels::getFaceBlur(TXSequenceChannels *this, CMTime *a2, double *a3, double *a4, double a5)
{
  if (!OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 4848), 0, 1))
  {
    *a3 = 0.0;
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 4984), a2, a5);
    *(void *)a3 = v10;
  }
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 5136), a2, a5);
LABEL_7:
    *(void *)a4 = v11;
  }
}

unint64_t TXSequenceChannels::getOutlineWidth(TXSequenceChannels *this, CMTime *a2, double a3)
{
  uint64_t v5 = (OZChannel *)((char *)this + 10272);
  unint64_t result = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 10272), 0, 1);
  if (result)
  {
    return OZChannel::getValueAsInt(v5, a2, a3);
  }
  return result;
}

void TXSequenceChannels::getOutlineBlur(TXSequenceChannels *this, CMTime *a2, double *a3, double *a4, double a5)
{
  if (!OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 9680), 0, 1))
  {
    *a3 = 0.0;
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 9816), a2, a5);
    *(void *)a3 = v10;
  }
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 9968), a2, a5);
LABEL_7:
    *(void *)a4 = v11;
  }
}

void TXSequenceChannels::getGlowBlur(TXSequenceChannels *this, CMTime *a2, double *a3, double *a4, double a5)
{
  if (!OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 14920), 0, 1))
  {
    *a3 = 0.0;
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 15056), a2, a5);
    *(void *)a3 = v10;
  }
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 15208), a2, a5);
LABEL_7:
    *(void *)a4 = v11;
  }
}

void TXTextObject::getGlowRadius(TXTextObject *this, CMTime *a2, double *a3)
{
  uint64_t v6 = *((void *)this + 33);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    double v8 = *(std::__shared_weak_count **)(v6 + 16);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v7 = 0;
    double v8 = 0;
  }
  uint64_t v9 = *((void *)this + 68);
  CMTime v13 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v7 + 36016), &v13, 0.0);
  double v11 = *(double *)&v10;
  CMTime v12 = *a2;
  HIDWORD(v10) = HIDWORD(v12.value);
  LODWORD(v10) = *((_DWORD *)this + 184);
  *a3 = v11 + TXSequenceChannels::getGlowRadius((TXSequenceChannels *)(v9 + 25032), &v12, (double)v10);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1B7635A60(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXSequenceChannels::getDropShadowBlur(TXSequenceChannels *this, CMTime *a2, double *a3, double *a4, double a5)
{
  if (!OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 21304), 0, 1))
  {
    *a3 = 0.0;
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 21440), a2, a5);
    *(void *)a3 = v10;
  }
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 21592), a2, a5);
LABEL_7:
    *(void *)a4 = v11;
  }
}

double TXSequenceChannels::getDropShadowDistance(TXSequenceChannels *this, CMTime *a2, double a3)
{
  uint64_t v5 = (OZChannel *)((char *)this + 22336);
  if (!OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 22336), 0, 1)) {
    return 0.0;
  }

  OZChannel::getValueAsDouble(v5, a2, a3);
  return result;
}

double TXSequenceChannels::getDropShadowAngle(TXSequenceChannels *this, CMTime *a2, double a3)
{
  uint64_t v5 = (OZChannel *)((char *)this + 22488);
  if (!OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 22488), 0, 1)) {
    return 0.0;
  }

  OZChannel::getValueAsDouble(v5, a2, a3);
  return result;
}

void TXTextObject::getDropShadowColor(TXTextObject *this, CMTime *a2, double a3, PCColor *a4)
{
  uint64_t v7 = *((void *)this + 33);
  if (v7)
  {
    uint64_t v9 = *(void *)(v7 + 8);
    double v8 = *(std::__shared_weak_count **)(v7 + 16);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v9 = 0;
    double v8 = 0;
  }
  uint64_t v10 = *((void *)this + 68);
  int ValueAsInt = (PCColor *)OZChannel::getValueAsInt((OZChannel *)(v9 + 13976), MEMORY[0x1E4F1FA48], 0.0);
  if (ValueAsInt)
  {
    CMTime v12 = PCColor::WHITE(ValueAsInt);
    long long v13 = *(_OWORD *)v12;
    long long v14 = *((_OWORD *)v12 + 2);
    *(_OWORD *)&a4->var0.var1[1] = *((_OWORD *)v12 + 1);
    *(_OWORD *)&a4->var0.var1[3] = v14;
    *(_OWORD *)&a4->var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v13;
    PCCFRef<CGColorSpace *>::operator=(&a4->var1._obj, (CGColorSpace **)v12 + 6);
  }
  else
  {
    (*(void (**)(uint64_t, CMTime *, PCColor *))(*(void *)(v9 + 14232) + 832))(v9 + 14232, a2, a4);
    if (OZChannelBase::isEnabled((OZChannelBase *)(v10 + 45176), 0, 1))
    {
      CMTime v18 = *a2;
      OZChannelColorNoAlpha::setColor((OZChannelColorNoAlpha *)(v10 + 45176), &v18, a4, 1);
      CMTime v17 = *a2;
      HIDWORD(v15) = HIDWORD(v17.value);
      LODWORD(v15) = *((_DWORD *)this + 184);
      OZChannelColorNoAlpha::getColor((OZChannelColorNoAlpha *)(v10 + 45176), &v17, a4, (double)v15);
    }
  }
  float DropShadowOpacity = TXTextObject::getDropShadowOpacity(this, a2);
  PCColor::setAlpha(a4, DropShadowOpacity);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1B7635D7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

double TXTextObject::getDropShadowOpacity(TXTextObject *this, CMTime *a2)
{
  uint64_t v4 = *((void *)this + 33);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 16);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  CMTime v14 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 18040), &v14, 0.0);
  uint64_t v7 = *((void *)this + 68);
  double v8 = (*(double (**)(uint64_t, uint64_t, uint64_t, CMTime *))(*(void *)v7 + 736))(v7, v7 + 26080, v7 + 46184, a2);
  TypeOuint64_t n = TXTextLayout::getTypeOn(*((TXTextLayout **)this + 68), *((_DWORD *)this + 24), a2);
  CMTime v13 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(v7 + 19448), &v13, 0.0);
  double v11 = v10;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v8 * TypeOn * v11;
}

void sub_1B7635ECC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL TXTextObject::isDropShadowFixedSource(TXTextObject *this, const CMTime *a2)
{
  uint64_t v2 = *((void *)this + 33);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v3)
  {
    BOOL v5 = OZChannel::getValueAsInt((OZChannel *)(v3 + 19528), MEMORY[0x1E4F1FA48], 0.0) != 0;
    if (!v4) {
      return v5;
    }
    goto LABEL_9;
  }
  BOOL v5 = 0;
  if (v4) {
LABEL_9:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v5;
}

void sub_1B7635F68(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXCachedGlyphRender::TXCachedGlyphRender(uint64_t a1, uint64_t a2, uint64_t *a3, const OZRenderParams *a4, int a5)
{
  *(void *)(a1 + 1496) = &unk_1F1199AC8;
  *(void *)(a1 + 1504) = 0;
  *(unsigned char *)(a1 + 1512) = 1;
  LiImageSource::LiImageSource((LiImageSource *)a1, (uint64_t *)&off_1F10AFDD8);
  *(void *)a1 = &unk_1F10AFCF0;
  *(void *)(a1 + 1496) = &unk_1F10AFDB8;
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)(a1 + 40), a4);
  *(_DWORD *)(a1 + 1464) = a5;
  *(void *)(a1 + 1472) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 1480));
  return a1;
}

void sub_1B763607C(_Unwind_Exception *a1)
{
  OZRenderParams::~OZRenderParams(v3);
  BOOL v5 = *(std::__shared_weak_count **)(v1 + 32);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F10AFDD8);
  *(void *)(v1 + 1496) = v2;
  *(unsigned char *)(v1 + 1512) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1504));
  _Unwind_Resume(a1);
}

uint64_t TXCachedGlyphRender::filteredEdges(TXCachedGlyphRender *this)
{
  return 1;
}

uint64_t TXCachedGlyphRender::getBoundary(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  long long v3 = *(_OWORD *)(*(void *)(a1 + 24) + 440);
  *a3 = *(_OWORD *)(*(void *)(a1 + 24) + 424);
  a3[1] = v3;
  return 1;
}

CGColorSpace **TXCachedGlyphRender::getHelium@<X0>(TXCachedGlyphRender *this@<X0>, LiAgent *a2@<X1>, HGNode **a3@<X8>)
{
  return TXCachedGlyphRender::getHelium(this, a2, 0, 1, a3);
}

CGColorSpace **TXCachedGlyphRender::getHelium@<X0>(TXCachedGlyphRender *this@<X0>, LiAgent *a2@<X1>, float *a3@<X2>, char a4@<W3>, HGNode **a5@<X8>)
{
  uint64_t v88 = 0x3FF0000000000000;
  uint64_t v85 = 0x3FF0000000000000;
  uint64_t v82 = 0x3FF0000000000000;
  uint64_t v79 = 0x3FF0000000000000;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  uint64_t v68 = 0x3FF0000000000000;
  uint64_t v65 = 0x3FF0000000000000;
  uint64_t v62 = 0x3FF0000000000000;
  uint64_t v58 = 0x3FF0000000000000;
  uint64_t v59 = 0x3FF0000000000000;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v55 = 0x3FF0000000000000;
  uint64_t v52 = 0x3FF0000000000000;
  uint64_t v49 = 0x3FF0000000000000;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  uint64_t v78 = 0x3FF0000000000000;
  uint64_t v75 = 0x3FF0000000000000;
  uint64_t v72 = 0x3FF0000000000000;
  uint64_t v69 = 0x3FF0000000000000;
  long long v71 = 0u;
  long long v70 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v77 = 0u;
  long long v76 = 0u;
  uint64_t v10 = (uint64_t *)*((void *)a2 + 20);
  if (v10 != &v59)
  {
    uint64_t v11 = 0;
    CMTime v12 = &v59;
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
        v12[i] = v10[i];
      ++v11;
      v12 += 4;
      v10 += 4;
    }
    while (v11 != 4);
  }
  uint64_t HeliumRenderer = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)HeliumRenderer + 128))(HeliumRenderer, 43);
  *a5 = 0;
  PCColor::PCColor(&v47);
  double v16 = (char *)this + 40;
  CMTime v17 = (char *)this + 24;
  switch(*((_DWORD *)this + 366))
  {
    case 0:
      CMTime v18 = *(TXTextObject **)v17;
      uint64_t v19 = *(void *)(*(void *)v17 + 264);
      if (v19)
      {
        uint64_t v21 = *(void *)(v19 + 8);
        double v20 = *(std::__shared_weak_count **)(v19 + 16);
        if (v20)
        {
          PCColor v31 = v20;
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          CMTime v18 = *(TXTextObject **)v17;
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      PCColor v31 = 0;
LABEL_27:
      unsigned __int8 isColorAnimated = TXTextObject::isColorAnimated(v18, 0);
      (*(void (**)(uint64_t, char *, PCColor *))(*(void *)(v21 + 6344) + 832))(v21 + 6344, (char *)this + 40, &v47);
      uint64_t v28 = *((void *)this + 2);
      uint64_t v43 = 0;
      float64_t v44 = 0;
      v38[0] = isColorAnimated;
      long long v39 = *(_OWORD *)&v47.var0.var0;
      long long v40 = *(_OWORD *)&v47.var0.var1[1];
      long long v41 = *(_OWORD *)&v47.var0.var1[3];
      v42[0] = v47.var1._obj;
      if (v47.var1._obj) {
        PCCFRefTraits<CGColorSpace *>::retain(v47.var1._obj);
      }
      v42[1] = v48;
      TXTextLayout::buildHGNodeForFace(v28, (uint64_t)v17, (uint64_t)v16, (uint64_t)a2, (uint64_t)&v43, 0, 0, (uint64_t)&v69, (long long *)&v79, (uint64_t)&v59, (uint64_t)&v49, v38, (uint64_t)a3, v15 == 1, a4);
      CMTime v29 = *a5;
      CMTime v30 = v45;
      if (*a5 == v45)
      {
        if (v29) {
          (*(void (**)(HGNode *))(*(void *)v29 + 24))(v29);
        }
      }
      else
      {
        if (v29)
        {
          (*(void (**)(HGNode *))(*(void *)v29 + 24))(v29);
          CMTime v30 = v45;
        }
        *a5 = v30;
        uint64_t v45 = 0;
      }
      PCCFRef<CGColorSpace *>::~PCCFRef(v42);
      if (v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      }
      CMTime v24 = v31;
      if (v31) {
        goto LABEL_15;
      }
      return PCCFRef<CGColorSpace *>::~PCCFRef(&v47.var1._obj);
    case 1:
      uint64_t v23 = *((void *)this + 2);
      uint64_t v36 = 0;
      double v37 = 0;
      TXTextLayout::buildHGNodeForOutline(v23, (uint64_t)this + 24, (uint64_t)this + 40, (uint64_t)a2, (uint64_t)&v36, 0, 0, (uint64_t)&v69, (long long *)&v79, &v59, (uint64_t)&v49, *((void *)this + 186), (uint64_t)a3, v15 == 1);
      if (v45)
      {
        *a5 = v45;
        uint64_t v45 = 0;
      }
      CMTime v24 = v37;
      if (v37) {
        goto LABEL_15;
      }
      return PCCFRef<CGColorSpace *>::~PCCFRef(&v47.var1._obj);
    case 2:
      uint64_t v26 = *((void *)this + 2);
      uint64_t v34 = 0;
      int v35 = 0;
      TXTextLayout::buildHGNodeForGlow(v26, (uint64_t)this + 24, (uint64_t)this + 40, (uint64_t)a2, (uint64_t)&v34, 0, 0, (uint64_t)&v69, (long long *)&v79, &v59, (uint64_t)&v49, a3, v15 == 1);
      if (v45)
      {
        *a5 = v45;
        uint64_t v45 = 0;
      }
      CMTime v24 = v35;
      if (v35) {
        goto LABEL_15;
      }
      return PCCFRef<CGColorSpace *>::~PCCFRef(&v47.var1._obj);
    case 3:
      uint64_t v27 = *((void *)this + 2);
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      TXTextLayout::buildHGNodeForDropShadow(v27, (uint64_t)this + 24, (uint64_t)this + 40, (uint64_t)a2, (uint64_t)&v32, 0, 0, (uint64_t)&v69, (long long *)&v79, (long long *)&v59, (double *)&v49, a3, v15 == 1, a4);
      if (v45)
      {
        *a5 = v45;
        uint64_t v45 = 0;
      }
      CMTime v24 = v33;
      if (v33) {
LABEL_15:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      return PCCFRef<CGColorSpace *>::~PCCFRef(&v47.var1._obj);
    default:
      long long v22 = (HGNode *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode(v22);
      if (v22) {
        *a5 = v22;
      }
      return PCCFRef<CGColorSpace *>::~PCCFRef(&v47.var1._obj);
  }
}

void sub_1B76365BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,CGColorSpace *a42)
{
  if (a34) {
    (*(void (**)(uint64_t))(*(void *)a34 + 24))(a34);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(v43);
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&a42);
  if (*v42) {
    (*(void (**)(void))(*(void *)*v42 + 24))(*v42);
  }
  _Unwind_Resume(a1);
}

uint64_t TXCachedGlyphRender::pixelTransformSupport(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 144)) {
    return 0;
  }
  else {
    return 6;
  }
}

uint64_t TXCachedGlyphRender::estimateRenderMemory()
{
  return 0;
}

uint64_t TXTextObjectRender::TXTextObjectRender(uint64_t a1, void *a2, const OZRenderParams *a3, uint64_t a4)
{
  *(void *)(a1 + 1544) = &unk_1F1199AC8;
  *(void *)(a1 + 1552) = 0;
  *(unsigned char *)(a1 + 1560) = 1;
  LiImageSource::LiImageSource((LiImageSource *)a1, (uint64_t *)&off_1F10AFF00);
  *(void *)a1 = &unk_1F10AFE18;
  *(void *)(a1 + 1544) = &unk_1F10AFEE0;
  *(_WORD *)(a1 + 13) = 0;
  *(void *)(a1 + 16) = 0x3FF0000000000000;
  *(_WORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 26) = 0;
  OZRenderParams::OZRenderParams((OZRenderParams *)(a1 + 32), a3);
  *(_OWORD *)(a1 + 1456) = *(_OWORD *)a4;
  double v8 = *(CGColorSpace **)(a4 + 16);
  *(void *)(a1 + 1472) = v8;
  if (v8) {
    PCCFRefTraits<CGColorSpace *>::retain(v8);
  }
  uint64_t v9 = *(void *)(a4 + 24);
  *(_DWORD *)(a1 + 1488) = *(_DWORD *)(a4 + 32);
  *(void *)(a1 + 1480) = v9;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 1496) = *a2;
  *(void *)(a1 + 1504) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1520) = 0x3FF0000000000000;
  return a1;
}

void sub_1B7636804(_Unwind_Exception *a1)
{
  OZRenderParams::~OZRenderParams(v3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F10AFF00);
  *(void *)(v1 + 1544) = v2;
  *(unsigned char *)(v1 + 1560) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1552));
  _Unwind_Resume(a1);
}

void TXTextObjectRender::~TXTextObjectRender(TXTextObjectRender *this, const PCString *a2)
{
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a2->var0;
  *(PCString *)this = (PCString)a2->var0;
  *(PCString *)((char *)this + var0[-1].info) = a2[5];
  BOOL v5 = (std::__shared_weak_count *)*((void *)this + 188);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 184);
  OZRenderParams::~OZRenderParams((TXTextObjectRender *)((char *)this + 32));

  OZChannelBase::setRangeName((OZChannelBase *)this, a2 + 1);
}

void TXTextObjectRender::~TXTextObjectRender(TXTextObjectRender *this)
{
  *(void *)(v1 + 1544) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 1560) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1552));
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)(v1 + 1544) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 1560) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1552));

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'TXTextObjectRender::~TXTextObjectRender(TXTextObjectRender *this)
{
  *(void *)(v1 + 1544) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 1560) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 1552);

  PCWeakCount::~PCWeakCount(v2);
}

{
  TXTextObjectRender::~TXTextObjectRender((TXTextObjectRender *)((char *)this + *(void *)(*(void *)this - 24)));
}

uint64_t TXTextObjectRender::filteredEdges(TXTextObjectRender *this)
{
  return 1;
}

void TXTextObjectRender::getHeliumBestMode(TXTextObjectRender *this, LiAgent *a2)
{
  exceptiouint64_t n = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v4, "not implemented yet");
  PCString::PCString(&v3, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Text/TXTextObject.cpp");
  PCException::PCException(exception, &v4, &v3, 5001);
  *(void *)exceptiouint64_t n = &unk_1F10B1208;
}

void sub_1B7636B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

CGColorSpace *TXTextObjectRender::getHelium@<X0>(TXTextObjectRender *this@<X0>, LiAgent *a2@<X1>, HGCrop **a3@<X8>)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (TXTextObjectRender *)((char *)this + 32);
  if (LiRenderingTechnology::getSharpText((TXTextObjectRender *)((char *)this + 1348)))
  {
    int TextRenderQuality = (TXTextObjectRender *)OZRenderParams::getTextRenderQuality(v6);
    if (TextRenderQuality == 6 && !*(unsigned char *)(*((void *)this + 187) + 568) && !*((unsigned char *)this + 26)) {
      TXTextObjectRender::getHeliumBestMode(TextRenderQuality, v8);
    }
  }
  uint64_t v9 = *((void *)a2 + 20);
  double v10 = *(double *)v9;
  long long v11 = *(_OWORD *)(v9 + 24);
  long long v100 = *(_OWORD *)(v9 + 8);
  long long v101 = v11;
  double v12 = *(double *)(v9 + 40);
  long long v13 = *(_OWORD *)(v9 + 96);
  long long v97 = *(_OWORD *)(v9 + 80);
  long long v98 = v13;
  long long v99 = *(_OWORD *)(v9 + 112);
  long long v14 = *(_OWORD *)(v9 + 64);
  long long v95 = *(_OWORD *)(v9 + 48);
  long long v96 = v14;
  long long v77 = v100;
  long long v78 = v101;
  double v76 = v10;
  double v79 = v12;
  long long v82 = v97;
  long long v83 = v13;
  long long v84 = v99;
  long long v80 = v95;
  long long v81 = v14;
  long long v74 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v58 = _Q0;
  long long v75 = _Q0;
  char v73 = 0;
  uint64_t v72 = 0;
  uint64_t HeliumRenderer = (const void *)LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
  if (HeliumRenderer)
  {
    if (v21)
    {
      long long v22 = v21;
      if ((*(unsigned int (**)(HGGPURenderer *, uint64_t))(*(void *)v21 + 128))(v21, 43) == 1)
      {
        TXTextObject::getMetalTexture(*((TXTextObject **)this + 187), (OZRenderState *)v6, *((unsigned char *)this + 14), (float64x2_t *)&v76, v22, &v74, (HGMetalContext **)&v85, *((double *)this + 2));
        uint64_t v23 = (HGBitmap *)v85;
        CMTime v24 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
        HGBitmapLoader::HGBitmapLoader(v24, v23);
        if (v72 == v24)
        {
          if (v24) {
            (*(void (**)(HGBitmapLoader *))(*(void *)v24 + 24))(v24);
          }
        }
        else
        {
          uint64_t v72 = v24;
        }
        if (v23) {
          (*(void (**)(HGBitmap *))(*(void *)v23 + 24))(v23);
        }
        goto LABEL_58;
      }
    }
  }
  if (*(_DWORD *)(*(void *)HGRenderJob::GetRenderNodeList((HGRenderJob *)v6) + 8))
  {
    if (*((unsigned char *)this + 14)) {
      double v25 = *((double *)this + 2);
    }
    else {
      double v25 = 0.0;
    }
    TXTextObject::getTexture(*((void *)this + 187), (OZRenderState *)v6, *((unsigned char *)this + 14) != 0, (uint64_t)&v76, (uint64_t)&v74, (uint64_t)&v73, &v85, v25);
    uint64_t v27 = (CGColorSpace *)v85;
    if (*(double *)&v85 == 0.0)
    {
      *a3 = 0;
      CMTime v30 = (std::__shared_weak_count *)v86;
    }
    else
    {
      uint64_t v28 = (const void *)LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
      if (v28) {
      else
      }
        CMTime v29 = 0;
      CMTime v30 = (std::__shared_weak_count *)v86;
      double v61 = *(double *)&v27;
      *(void *)&long long v62 = v86;
      if ((void)v86) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v86 + 8), 1uLL, memory_order_relaxed);
      }
      long long v71 = 0;
      PGHelium::createTextureNode((uint64_t)&v61, (uint64_t)v29, (unsigned int *)&v71, 1, 0, &v60._pcColorDesc._colorSpaceRef._obj);
      obuint64_t j = v60._pcColorDesc._colorSpaceRef._obj;
      if (v72 == v60._pcColorDesc._colorSpaceRef._obj)
      {
        if (v72) {
          (*(void (**)(void))(*(void *)v72 + 24))();
        }
      }
      else
      {
        if (v72)
        {
          (*(void (**)(void))(*(void *)v72 + 24))();
          obuint64_t j = v60._pcColorDesc._colorSpaceRef._obj;
        }
        uint64_t v72 = obj;
        v60._pcColorDesc._colorSpaceRef._obuint64_t j = 0;
      }
      if ((void)v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v62);
      }
    }
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (*(double *)&v27 == 0.0) {
      goto LABEL_99;
    }
LABEL_58:
    double v70 = 1.0;
    uint64_t v67 = 0x3FF0000000000000;
    double v64 = 1.0;
    double v61 = 1.0;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
    if (OZHostApplicationDelegateHandler::wantsToImproveQualityOfDraftQualityText(HostApplicationDelegate)
      && (v10 != v76 || v12 != v79))
    {
      double v36 = v10 / v76;
      double v37 = v12 / v79;
      if (v10 / v76 != 1.0)
      {
        double v61 = v36 * v61;
        *((double *)&v63 + 1) = v36 * *((double *)&v63 + 1);
        *(double *)&long long v66 = v36 * *(double *)&v66;
        *((double *)&v68 + 1) = v36 * *((double *)&v68 + 1);
      }
      if (v37 != 1.0)
      {
        *(double *)&long long v62 = v37 * *(double *)&v62;
        double v64 = v37 * v64;
        *((double *)&v66 + 1) = v37 * *((double *)&v66 + 1);
        *(double *)&long long v69 = v37 * *(double *)&v69;
      }
    }
    BOOL isVerticalLayout = TXTextLayout::isVerticalLayout(*(TXTextLayout **)(*((void *)this + 187) + 544));
    *(double *)&long long v62 = -*(double *)&v62;
    double v64 = -v64;
    *((double *)&v66 + 1) = -*((double *)&v66 + 1);
    *(double *)&long long v69 = -*(double *)&v69;
    if (isVerticalLayout)
    {
      TXTextObject::getImageBounds(*((TXTextObject **)this + 187), (const OZRenderState *)v6, (uint64_t)&v85);
      v60._pcColorDesc._colorSpaceRef._obuint64_t j = 0;
      *(void *)&v60._pcColorDesc._dynamicRange = 0;
      *(_OWORD *)&v60._pcColorDesc._toneMapMethod._gaiuint64_t n = v58;
      PCMatrix44Tmpl<double>::transformRect<double>(&v76, (double *)&v85, (uint64_t)&v60);
      double v39 = -2.0 - (*(double *)&v60._pcColorDesc._dynamicRange + *(double *)&v60._isPremultiplied);
      if (v39 != 0.0)
      {
        *(double *)&long long v63 = *(double *)&v63 + v39 * *(double *)&v62;
        *((double *)&v65 + 1) = *((double *)&v65 + 1) + v39 * v64;
        *(double *)&long long v68 = *(double *)&v68 + v39 * *((double *)&v66 + 1);
        double v70 = v70 + v39 * *(double *)&v69;
      }
      double v40 = *(double *)&v60._pcColorDesc._colorSpaceRef._obj
          + *(double *)&v60._pcColorDesc._toneMapMethod._gain
          - (*(double *)&v74
           + *(double *)&v75)
          + 0.0;
      if (v40 != 0.0)
      {
        *(double *)&long long v63 = *(double *)&v63 + v40 * v61;
        *((double *)&v65 + 1) = *((double *)&v65 + 1) + v40 * *((double *)&v63 + 1);
        *(double *)&long long v68 = *(double *)&v68 + v40 * *(double *)&v66;
        double v70 = v70 + v40 * *((double *)&v68 + 1);
      }
    }
    else
    {
      PCMatrix44Tmpl<double>::rightTranslate(&v61, *(double *)&v74, -(*((double *)&v74 + 1) + *((double *)&v75 + 1)), 0.0);
    }
    long long v41 = (HGXForm *)HGObject::operator new(0x210uLL);
    HGXForm::HGXForm(v41);
    (*(void (**)(HGXForm *, void, CGColorSpace *))(*(void *)v41 + 120))(v41, 0, v72);
    PGHelium::convertPCMatrix44((long long *)&v61, &v71);
    (*(void (**)(HGXForm *, HGTransform *))(*(void *)v41 + 576))(v41, v71);
    if (v72 != (CGColorSpace *)v41)
    {
      if (v72) {
        (*(void (**)(void))(*(void *)v72 + 24))();
      }
      uint64_t v72 = (CGColorSpace *)v41;
      (*(void (**)(HGXForm *))(*(void *)v41 + 16))(v41);
    }
    if (*(unsigned char *)(*((void *)this + 187) + 568))
    {
      RequestedColorDescriptiouint64_t n = LiAgent::getRequestedColorDescription(a2);
      uint64_t v43 = *(CGColorSpace **)RequestedColorDescription;
      uint64_t v85 = (uint64_t)v43;
      if (v43) {
        PCCFRefTraits<CGColorSpace *>::retain(v43);
      }
      uint64_t v44 = *(void *)(RequestedColorDescription + 8);
      DWORD2(v86) = *(_DWORD *)(RequestedColorDescription + 16);
      *(void *)&long long v86 = v44;
      LOBYTE(v87) = *(unsigned char *)(RequestedColorDescription + 24);
      FxColorDescription::FxColorDescription((uint64_t)&v60, (uint64_t)&v85, 0);
      FxApplyColorConform((uint64_t *)&v72, &v60, (FxColorDescription *)&v85, (uint64_t *)&v59);
      uint64_t v45 = v59;
      if (v72 == v59)
      {
        if (v72) {
          (*(void (**)(void))(*(void *)v72 + 24))();
        }
      }
      else
      {
        if (v72)
        {
          (*(void (**)(void))(*(void *)v72 + 24))();
          uint64_t v45 = v59;
        }
        uint64_t v72 = v45;
      }
      PCCFRef<CGColorSpace *>::~PCCFRef(&v60._pcColorDesc._colorSpaceRef._obj);
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v85);
    }
    double v46 = *((double *)this + 190);
    if (v46 >= 1.0)
    {
      long long v56 = v72;
      if (!v72)
      {
LABEL_96:
        *a3 = v56;
        uint64_t v72 = 0;
        if (v71) {
          (*(void (**)(HGTransform *))(*(void *)v71 + 24))(v71);
        }
        (*(void (**)(HGXForm *))(*(void *)v41 + 24))(v41);
        goto LABEL_99;
      }
      (*(void (**)(CGColorSpace *))(*(void *)v72 + 16))(v72);
    }
    else
    {
      double v94 = 1.0;
      uint64_t v91 = 0x3FF0000000000000;
      uint64_t v88 = 0x3FF0000000000000;
      *(double *)&uint64_t v85 = 1.0;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      double v47 = -((*((double *)&v74 + 1) + *((double *)&v75 + 1) - *((double *)&v74 + 1)) * (1.0 - v46));
      if (v47 != 0.0)
      {
        *(double *)&long long v87 = v47 * 0.0 + 0.0;
        *((double *)&v89 + 1) = v47 + 0.0;
        *(double *)&long long v92 = *(double *)&v87;
        double v94 = v47 * 0.0 + 1.0;
      }
      LiAgent::makeHeliumXForm((uint64_t)a2, (uint64_t)&v85, (uint64_t *)&v72, &v60);
      float v48 = *(double *)&v74;
      float v49 = *((double *)&v74 + 1);
      float v50 = *(double *)&v74 + *(double *)&v75;
      float v51 = *((double *)&v74 + 1) + *((double *)&v75 + 1);
      uint64_t v53 = HGRectMake4f(v52, v48, v49, v50, v51);
      uint64_t v55 = v54;
      long long v56 = (HGCrop *)HGObject::operator new(0x1A0uLL);
      HGCrop::HGCrop(v56);
      (*(void (**)(HGCrop *, void, float, float, float, float))(*(void *)v56 + 96))(v56, 0, (float)(int)v53, (float)SHIDWORD(v53), (float)(int)v55, (float)SHIDWORD(v55));
      (*(void (**)(HGCrop *, void, CGColorSpace *))(*(void *)v56 + 120))(v56, 0, v60._pcColorDesc._colorSpaceRef._obj);
      if (v60._pcColorDesc._colorSpaceRef._obj) {
        (*(void (**)(CGColorSpace *))(*(void *)v60._pcColorDesc._colorSpaceRef._obj + 24))(v60._pcColorDesc._colorSpaceRef._obj);
      }
    }
    if (v72 == v56)
    {
      (*(void (**)(HGCrop *))(*(void *)v56 + 24))(v56);
      long long v56 = v72;
    }
    else if (v72)
    {
      (*(void (**)(void))(*(void *)v72 + 24))();
    }
    goto LABEL_96;
  }
  if (*((unsigned char *)this + 14)) {
    double v26 = *((double *)this + 2);
  }
  else {
    double v26 = 0.0;
  }
  TXTextObject::getBitmap((FxColorDescription *)v6, *((TXTextObject **)this + 187), *((unsigned char *)this + 14) != 0, (uint64_t)&v76, (uint64_t)&v74, (float64x2_t *)&v85, v26);
  BOOL v32 = *((double *)&v75 + 1) < 0.0 || *(double *)&v75 < 0.0;
  if (v32)
  {
    *a3 = 0;
    uint64_t v33 = (std::__shared_weak_count *)v86;
  }
  else
  {
    uint64_t v33 = (std::__shared_weak_count *)v86;
    double v61 = *(double *)&v85;
    *(void *)&long long v62 = v86;
    if ((void)v86) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v86 + 8), 1uLL, memory_order_relaxed);
    }
    long long v71 = 0;
    PGHelium::createBitmapNode((uint64_t)&v61, (unsigned int *)&v71, 1, 0, &v60._pcColorDesc._colorSpaceRef._obj);
    uint64_t v34 = v60._pcColorDesc._colorSpaceRef._obj;
    if (v72 == v60._pcColorDesc._colorSpaceRef._obj)
    {
      if (v72) {
        (*(void (**)(void))(*(void *)v72 + 24))();
      }
    }
    else
    {
      if (v72)
      {
        (*(void (**)(void))(*(void *)v72 + 24))();
        uint64_t v34 = v60._pcColorDesc._colorSpaceRef._obj;
      }
      uint64_t v72 = v34;
      v60._pcColorDesc._colorSpaceRef._obuint64_t j = 0;
    }
    if ((void)v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v62);
    }
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (!v32) {
    goto LABEL_58;
  }
LABEL_99:
  double result = v72;
  if (v72) {
    return (CGColorSpace *)(*(uint64_t (**)(CGColorSpace *))(*(void *)v72 + 24))(v72);
  }
  return result;
}

void sub_1B763772C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t TXTextObjectRender::pixelTransformSupport(TXTextObjectRender *this, const LiRenderParameters *a2)
{
  if (*((unsigned char *)a2 + 144)) {
    return 0;
  }
  PCString v4 = (TXTextObjectRender *)((char *)this + 32);
  if (OZRenderParams::getTextRenderQuality((TXTextObjectRender *)((char *)this + 32)) == 6)
  {
    if (LiRenderingTechnology::getSharpText((TXTextObjectRender *)((char *)this + 1348))
      && !*((unsigned char *)this + 26))
    {
      return 6;
    }
    return 1;
  }
  if (OZRenderParams::getTextRenderQuality(v4) == 2) {
    return 1;
  }
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  return OZHostApplicationDelegateHandler::wantsToImproveQualityOfDraftQualityText(HostApplicationDelegate);
}

double TXTextObjectRender::fixPixelTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v8 = (OZRenderState *)(a1 + 32);
  int TextRenderQuality = OZRenderParams::getTextRenderQuality((OZRenderParams *)(a1 + 32));
  if (TextRenderQuality == 6)
  {
    if (LiRenderingTechnology::getSharpText((LiRenderingTechnology *)(a1 + 1348)) && !*(unsigned char *)(a1 + 26)) {
      return result;
    }
    long long v23 = *(_OWORD *)(a3 + 80);
    long long v41 = *(_OWORD *)(a3 + 64);
    long long v42 = v23;
    long long v24 = *(_OWORD *)(a3 + 112);
    long long v43 = *(_OWORD *)(a3 + 96);
    long long v44 = v24;
    float64x2_t v25 = *(float64x2_t *)(a3 + 16);
    v38[0] = *(float64x2_t *)a3;
    v38[1] = v25;
    long long v26 = *(_OWORD *)(a3 + 48);
    long long v39 = *(_OWORD *)(a3 + 32);
    long long v40 = v26;
    TXTextObject::getTextureBounds(*(TXTextObject **)(a1 + 1496), v8, *(unsigned char *)(a1 + 14), v38, 0, 0, (uint64_t)&v31, *(double *)(a1 + 16));
    *(void *)(a3 + 120) = 0x3FF0000000000000;
    *(void *)(a3 + 80) = 0x3FF0000000000000;
    *(void *)(a3 + 40) = 0x3FF0000000000000;
    *(void *)a3 = 0x3FF0000000000000;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
    double v20 = v38[0].f64[0];
    double v21 = *((double *)&v39 + 1);
    double v22 = 1.0;
    return PCMatrix44Tmpl<double>::rightScale((double *)a3, v20, v21, v22);
  }
  if (TextRenderQuality == 2)
  {
    v38[0].f64[0] = 0.0;
    double v30 = 0.0;
    *(void *)&long long v31 = 0;
    TXTextObject::getScale(*(TXTextObject **)(a1 + 1496), (CMTime *)v8, v38[0].f64, (double *)&v31, &v30, 1, 1, 1, *(_WORD *)(a1 + 24), SHIBYTE(*(_WORD *)(a1 + 24)), 1);
    if (*(unsigned char *)(a4 + 144)) {
      double v27 = *(double *)(a4 + 152);
    }
    else {
      double v27 = 1.0;
    }
    *(void *)(a3 + 120) = 0x3FF0000000000000;
    *(void *)(a3 + 80) = 0x3FF0000000000000;
    *(void *)(a3 + 40) = 0x3FF0000000000000;
    *(void *)a3 = 0x3FF0000000000000;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
    double v20 = v27 * fabs(v38[0].f64[0]);
    double v21 = v27 * fabs(*(double *)&v31);
    double v22 = v27 * fabs(v30);
    return PCMatrix44Tmpl<double>::rightScale((double *)a3, v20, v21, v22);
  }
  if (TextRenderQuality) {
    return result;
  }
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  int v12 = OZHostApplicationDelegateHandler::wantsToImproveQualityOfDraftQualityText(HostApplicationDelegate);
  int v13 = OZHostApplicationDelegateHandler::wantsToDownscaleGlyphsToOutputSize(HostApplicationDelegate);
  if (v12)
  {
    if (v13)
    {
      OZRenderParams::getPixelTransform((OZRenderParams *)v8, (uint64_t)v38);
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      int v34 = 4;
      long long v35 = 0u;
      long long v36 = 0u;
      uint64_t v37 = 0;
      Transformatiouint64_t n = PCMatrix44Tmpl<double>::getTransformation((long long *)v38, (uint64_t)&v31);
      if (!Transformation)
      {
        _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Text/TXTextObject.cpp", 5627, v15, v16, v17, v18, v19);
        return LiImageSource::fixPixelTransform(a1, a2, a3, a4);
      }
      *(void *)(a3 + 120) = 0x3FF0000000000000;
      *(void *)(a3 + 80) = 0x3FF0000000000000;
      *(void *)(a3 + 40) = 0x3FF0000000000000;
      *(_OWORD *)(a3 + 8) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 88) = 0u;
      *(_OWORD *)(a3 + 104) = 0u;
      double v20 = fabs(*((double *)&v32 + 1));
      double v21 = fabs(*(double *)&v33);
      double v22 = fabs(*((double *)&v33 + 1));
      *(void *)a3 = 0x3FF0000000000000;
      return PCMatrix44Tmpl<double>::rightScale((double *)a3, v20, v21, v22);
    }
    double v28 = *(double *)a3;
    double v29 = *(double *)(a3 + 40);
    *(void *)(a3 + 120) = 0x3FF0000000000000;
    *(void *)(a3 + 80) = 0x3FF0000000000000;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
    *(void *)(a3 + 40) = 0x3FF0000000000000;
    *(void *)a3 = 0x3FF0000000000000;
    return PCMatrix44Tmpl<double>::rightScale((double *)a3, v28, v29, 1.0);
  }
  else
  {
    return LiImageSource::fixPixelTransform(a1, a2, a3, a4);
  }
}

uint64_t TXTextObjectRender::estimateRenderMemory()
{
  return 0;
}

uint64_t TXTextureDecal::TXTextureDecal(uint64_t a1, const PCSharedCount *a2)
{
  *(void *)(a1 + 368) = &unk_1F1199AC8;
  *(void *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 384) = 1;
  LiImageFilter::LiImageFilter((LiImageFilter *)a1, (uint64_t *)&off_1F10B0060);
  *(void *)a1 = &unk_1F10AFF58;
  *(void *)(a1 + 368) = &unk_1F10B0040;
  *(PCSharedCount *)(a1 + 40) = (PCSharedCount)a2->var0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 48), a2 + 1);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 152) = 0x3FF0000000000000;
  *(void *)(a1 + 112) = 0x3FF0000000000000;
  *(void *)(a1 + 72) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 280) = 0x3FF0000000000000;
  *(void *)(a1 + 240) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 192) = _Q1;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = _Q1;
  *(void *)(a1 + 357) = 0;
  *(void *)(a1 + 336) = 0x3FF0000000000000;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  return a1;
}

void sub_1B7637F3C(_Unwind_Exception *a1)
{
  LiImageFilter::~LiImageFilter((PCSharedCount *)v1, (const PCString *)&off_1F10B0060);
  *(void *)(v1 + 368) = v2;
  *(unsigned char *)(v1 + 384) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 376));
  _Unwind_Resume(a1);
}

CGColorSpace **TXTextureDecal::getHelium@<X0>(LiImageSource **this@<X0>, LiAgent *a2@<X1>, HGNode **a3@<X8>)
{
  RequestedColorDescriptiouint64_t n = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
  LiAgent::getHelium(a2, this[2], (uint64_t *)&v17);
  double result = LiAgent::setActualColorDescription((CGColorSpace **)a2, RequestedColorDescription);
  if (v17)
  {
    double result = (CGColorSpace **)this[5];
    if (result)
    {
      v15[0] = 0;
      v15[1] = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v16 = _Q0;
      if ((*((uint64_t (**)(CGColorSpace **, LiAgent *, void *))*result + 3))(result, a2, v15)) {
        operator new();
      }
      exceptiouint64_t n = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v14, "TXTextureDecal::getHelium: _texture->getBoundary failed");
      PCException::PCException(exception, &v14);
    }
  }
  *a3 = v17;
  return result;
}

void sub_1B7638480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 24))(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t TXTextureDecal::estimateRenderMemory(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = LiImageFilter::estimateRenderMemory(a1);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    v4 += (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
  }
  return v4;
}

uint64_t LiCachedGaussianBlur::LiCachedGaussianBlur(uint64_t a1, uint64_t *a2, void *a3, const OZRenderParams *a4)
{
  LiImageFilter::LiImageFilter((LiImageFilter *)a1, a2 + 2);
  uint64_t v8 = a2[1];
  void *v9 = v8;
  *(void *)(a1 + *(void *)(v8 - 24)) = a2[8];
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t v10 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v10 - 24)) = a2[9];
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a1 + 60));
  uint64_t v11 = a3[1];
  *(void *)(a1 + 80) = *a3;
  *(void *)(a1 + 88) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)(a1 + 96), a4);
  return a1;
}

void sub_1B76387F8(_Unwind_Exception *a1)
{
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (std::__shared_weak_count *)v1[11].var0;
  if (var0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](var0);
  }
  LiGaussianBlur::~LiGaussianBlur(v1, v2);
  _Unwind_Resume(a1);
}

uint64_t LiCachedGaussianBlur::LiCachedGaussianBlur(uint64_t a1, void *a2, const OZRenderParams *a3)
{
  *(void *)(a1 + 1520) = &unk_1F1199AC8;
  *(void *)(a1 + 1528) = 0;
  *(unsigned char *)(a1 + 1536) = 1;
  LiImageFilter::LiImageFilter((LiImageFilter *)a1, (uint64_t *)&off_1F10B01C8);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F10B00B0;
  *(void *)(a1 + 1520) = &unk_1F10B01A0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a1 + 60));
  uint64_t v6 = a2[1];
  *(void *)(a1 + 80) = *a2;
  *(void *)(a1 + 88) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  OZRenderParams::OZRenderParams((OZRenderParams *)(a1 + 96), a3);
  return a1;
}

void sub_1B7638908(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 88);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  LiGaussianBlur::~LiGaussianBlur((PCSharedCount *)v1, (const PCString *)&off_1F10B01C0);
  *(void *)(v1 + 1520) = v2;
  *(unsigned char *)(v1 + 1536) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1528));
  _Unwind_Resume(a1);
}

void LiCachedGaussianBlur::clone(LiCachedGaussianBlur *this)
{
}

void sub_1B7638A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

uint64_t LiCachedGaussianBlur::pixelTransformSupport()
{
  return 1;
}

double LiCachedGaussianBlur::fixPixelTransform(uint64_t a1, __n128 *a2, uint64_t a3)
{
  uint64_t v6 = (CMTime *)(a1 + 96);
  int TextRenderQuality = OZRenderParams::getTextRenderQuality((OZRenderParams *)(a1 + 96));
  if (TextRenderQuality)
  {
    if (TextRenderQuality == 6)
    {
      double v22 = 1.0;
      double v23 = 1.0;
      double v21 = 1.0;
      TXTextObject::getScale(*(TXTextObject **)(a1 + 80), v6, &v23, &v22, &v21, 1, 1, 1, 0, 0, 1);
      uint64_t v11 = *(TXTextObject **)(a1 + 80);
      LiAgent::getROI(a2, &v19);
      v12.i64[0] = v19.n128_i32[0];
      v12.i64[1] = v19.n128_i32[1];
      float64x2_t v13 = vcvtq_f64_s64(v12);
      v12.i64[0] = v19.n128_i32[2];
      v12.i64[1] = v19.n128_i32[3];
      v20[0] = v13;
      v20[1] = vcvtq_f64_s64(v12);
      TXTextObject::getRenderedGlyphTransform(v11, (OZRenderState *)v6, (float64x2_t *)a3, (double *)v20, (uint64_t)v24, *(float64_t *)(a1 + 40), *(float64_t *)(a1 + 48));
      double v14 = v24[0];
      if (v24[0] < v25) {
        double v14 = v25;
      }
      double v16 = v22;
      double v15 = v23;
      double v17 = v14 / v23;
      double v18 = v14 / v22;
      if (v17 < v18) {
        double v17 = v18;
      }
      *(void *)(a3 + 120) = 0x3FF0000000000000;
      *(void *)(a3 + 80) = 0x3FF0000000000000;
      *(void *)(a3 + 40) = 0x3FF0000000000000;
      *(void *)a3 = 0x3FF0000000000000;
      *(_OWORD *)(a3 + 8) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 88) = 0u;
      *(_OWORD *)(a3 + 104) = 0u;
      double v9 = v15 * v17;
      double v10 = v16 * v17;
      return PCMatrix44Tmpl<double>::rightScale((double *)a3, v9, v10, 1.0);
    }
    if (TextRenderQuality != 2) {
      return result;
    }
  }
  v24[0] = 0.0;
  *(void *)&v20[0] = 0;
  v19.n128_u64[0] = 0;
  TXTextObject::getScale(*(TXTextObject **)(a1 + 80), v6, v24, (double *)v20, v19.n128_f64, 1, 1, 1, 0, 0, 1);
  *(void *)(a3 + 120) = 0x3FF0000000000000;
  *(void *)(a3 + 80) = 0x3FF0000000000000;
  *(void *)(a3 + 40) = 0x3FF0000000000000;
  *(void *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  double v9 = v24[0];
  double v10 = *(double *)v20;
  return PCMatrix44Tmpl<double>::rightScale((double *)a3, v9, v10, 1.0);
}

CGColorSpace **LiCachedGaussianBlur::getHelium@<X0>(LiCachedGaussianBlur *this@<X0>, double **a2@<X1>, HGBlur **a3@<X8>)
{
  RequestedColorDescriptiouint64_t n = (const FxColorDescription *)LiAgent::getRequestedColorDescription((LiAgent *)a2);
  LiAgent::getHelium((LiAgent *)a2, *((LiImageSource **)this + 2), (uint64_t *)&v24);
  double result = LiAgent::setActualColorDescription((CGColorSpace **)a2, RequestedColorDescription);
  if (v24)
  {
    double v22 = 1.0;
    double v23 = 1.0;
    double v21 = 1.0;
    double v8 = 1.0;
    double v9 = 1.0;
    if (OZRenderParams::getTextRenderQuality((LiCachedGaussianBlur *)((char *)this + 96)) == 6)
    {
      TXTextObject::getScale(*((TXTextObject **)this + 10), (CMTime *)this + 4, &v23, &v22, &v21, 1, 1, 1, 0, 0, 1);
      double v10 = a2[20];
      long double v11 = fabs(v10[5] / v22);
      double v9 = pow(fabs(*v10 / v23), 1.53846154);
      double v23 = v9;
      double v8 = pow(v11, 1.53846154);
      double v22 = v8;
    }
    double v12 = *((double *)this + 5);
    double v13 = *((double *)this + 6);
    double v14 = (HGBlur *)HGObject::operator new(0x220uLL);
    HGBlur::HGBlur(v14);
    *a3 = v14;
    float v15 = v12 * v9 / 1675.0;
    float v16 = powf(v15, 0.65) * 575.0;
    float v17 = v13 * v8 / 1675.0;
    double v18 = *((double *)this + 16) * (float)(powf(v17, 0.65) * 575.0);
    float v19 = *((double *)this + 15) * v16;
    float v20 = v18;
    (*(void (**)(HGBlur *, void, float, float, double, double))(*(void *)v14 + 96))(v14, 0, v19, v20, 0.0, 0.0);
    (*(void (**)(HGBlur *, void, CGColorSpace **))(*(void *)v14 + 120))(v14, 0, v24);
    double result = v24;
    if (v24) {
      return (CGColorSpace **)(*((uint64_t (**)(CGColorSpace **))*v24 + 3))(v24);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_1B7638E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  HGObject::operator delete(v14);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 24))(a14);
  }
  _Unwind_Resume(a1);
}

void sub_1B7638EF0()
{
  (*(void (**)(uint64_t))(*(void *)v0 + 24))(v0);
  JUMPOUT(0x1B7638EB8);
}

void LiCachedGaussianBlur::getCacheHash(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)MEMORY[0x1F4188790](a1);
  uint64_t v4 = v3;
  v16[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  int v5 = v1[15];
  int v6 = v1[16];
  uint64_t v7 = v1 + 15;
  int v8 = v1[17];
  int v9 = v1[18];
  if (v6 | v5 | v8 | v9)
  {
    double v13 = 0.0;
    double v14 = 0.0;
    uint64_t v15 = 0;
    float64x2_t v11 = 0uLL;
    uint64_t v12 = 0;
    getScaleTranslate(v2, (uint64_t)&v13, &v11);
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v16);
    PCHashWriteStream::writeValue(v16, v13);
    PCHashWriteStream::writeValue(v16, v14);
    PCHashWriteStream::close(v16);
    Hash = PCHashWriteStream::getHash(v16);
    PCHash128::operator+=(v7, (int *)Hash);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v7;
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v16);
  }
  else
  {
    *(_DWORD *)uint64_t v4 = v5;
    *(_DWORD *)(v4 + 4) = v6;
    *(_DWORD *)(v4 + 8) = v8;
    *(_DWORD *)(v4 + 12) = v9;
  }
}

void sub_1B7639034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void TXGlowFilter::clone(TXGlowFilter *this)
{
}

void sub_1B7639160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

CGColorSpace **TXGlowFilter::getHelium@<X0>(TXGlowFilter *this@<X0>, double **a2@<X1>, HgcTXGlowMix **a3@<X8>)
{
  double result = LiCachedGaussianBlur::getHelium(this, a2, &v9);
  int v6 = v9;
  if (v9)
  {
    uint64_t v7 = (HgcTXGlowMix *)HGObject::operator new(0x1A0uLL);
    HgcTXGlowMix::HgcTXGlowMix(v7);
    *a3 = v7;
    float v8 = *((double *)this + 190) * 0.1 + 1.0;
    (*(void (**)(HgcTXGlowMix *, void, float, double, double, double))(*(void *)v7 + 96))(v7, 0, v8, 0.0, 0.0, 0.0);
    (*(void (**)(HgcTXGlowMix *, uint64_t, float, float, float, float))(*(void *)v7 + 96))(v7, 1, *((float *)this + 382), *((float *)this + 383), *((float *)this + 384), 1.0);
    (*(void (**)(HgcTXGlowMix *, void, HGBlur *))(*(void *)v7 + 120))(v7, 0, v6);
    return (CGColorSpace **)(*(uint64_t (**)(HGBlur *))(*(void *)v6 + 24))(v6);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_1B76392F0(_Unwind_Exception *a1)
{
  HGObject::operator delete(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextObject::buildLighting(TXTextObject *this, LiGeode *a2, const LiLightSet *a3, OZRenderState *a4, int a5)
{
  uint64_t result = *((void *)this + 68);
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 976))(result);
    uint64_t result = LiGeode::needsLights(a2);
    if ((result & 1) != 0
      || *((_DWORD *)a3 + 3)
      && (uint64_t result = (*(uint64_t (**)(void))(*(void *)(*((void *)this + 68) + 200) + 1840))(), result))
    {
      uint64_t LightFilter = LiGeode::getLightFilter(a2);
      PCMatrix44Tmpl<double>::operator*(LightFilter + 472, (long long *)((char *)a2 + 8), (uint64_t)v35);
      uint64_t v12 = LiGeode::getLightFilter(a2);
      double v13 = (void *)v12;
      double v14 = (double *)(v12 + 472);
      if ((unsigned char *)(v12 + 472) != v35)
      {
        for (uint64_t i = 0; i != 16; i += 4)
        {
          float v16 = &v14[i];
          long long v17 = *(_OWORD *)&v35[i * 8 + 16];
          *(_OWORD *)float v16 = *(_OWORD *)&v35[i * 8];
          *((_OWORD *)v16 + 1) = v17;
        }
      }
      if (fabs(PCMatrix44Tmpl<double>::determinant((double *)(v12 + 472))) < 0.0000001)
      {
        long long v36 = 0uLL;
        long long v37 = xmmword_1B7E733D0;
        liFindMatrixPlane(v14, (double *)&v36);
        uint64_t v18 = *((void *)&v36 + 1);
        v13[61] = v36;
        v13[65] = v18;
        uint64_t v19 = *((void *)&v37 + 1);
        v13[69] = v37;
        v13[73] = v19;
      }
      LiGeode::setLit((uint64_t)a2, 1);
      uint64_t v20 = LiGeode::getLightFilter(a2);
      *(double *)(v20 + 184) = (*(double (**)(void))(**((void **)this + 68) + 984))();
      if (*(unsigned char *)(LiGeode::getLightFilter(a2) + 174))
      {
        long long v36 = 0uLL;
        __asm { FMOV            V0.2D, #-1.0 }
        long long v37 = _Q0;
        TXTextObject::getImageBoundsOfAttribute((uint64_t)this, (double *)&v36, a4, a5, 0, 0, 1, 0, 0.0, 0.0, 0.0, 0.0);
        uint64_t v26 = LiGeode::getLightFilter(a2);
        long long v27 = v37;
        *(_OWORD *)(v26 + 200) = v36;
        *(_OWORD *)(v26 + 216) = v27;
        uint64_t result = LiGeode::getLightFilter(a2);
        if ((unsigned char *)(result + 344) != v35)
        {
          for (uint64_t j = 0; j != 128; j += 32)
          {
            double v29 = (_OWORD *)(result + 344 + j);
            long long v30 = *(_OWORD *)&v35[j + 16];
            _OWORD *v29 = *(_OWORD *)&v35[j];
            v29[1] = v30;
          }
        }
      }
      else
      {
        uint64_t result = LiGeode::getLightFilter(a2);
        if (*(unsigned char *)(result + 173))
        {
          long long v36 = 0uLL;
          __asm { FMOV            V0.2D, #-1.0 }
          long long v37 = _Q0;
          TXTextObject::getImageBoundsOfAttribute((uint64_t)this, (double *)&v36, a4, a5, 0, 0, 1, 0, 0.0, 0.0, 0.0, 0.0);
          uint64_t v32 = LiGeode::getLightFilter(a2);
          long long v33 = v37;
          *(_OWORD *)(v32 + 200) = v36;
          *(_OWORD *)(v32 + 216) = v33;
          uint64_t v34 = LiGeode::getLightFilter(a2);
          uint64_t result = OZRenderParams::getTextRenderQuality((OZRenderParams *)a4);
          *(unsigned char *)(v34 + 176) = result == 6;
        }
      }
    }
  }
  return result;
}

void LiGaussianBlur::~LiGaussianBlur(PCSharedCount *this)
{
  *(void *)(v1 + 64) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 80) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 72));
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)(v1 + 64) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 80) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 72));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t LiGaussianBlur::pixelTransformSupport()
{
  return 4;
}

void virtual thunk to'LiGaussianBlur::~LiGaussianBlur(LiGaussianBlur *this)
{
  *(void *)(v1 + 64) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 80) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 72);

  PCWeakCount::~PCWeakCount(v2);
}

{
  LiGaussianBlur::~LiGaussianBlur((PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24)));
}

void LiCachedGaussianBlur::~LiCachedGaussianBlur(PCSharedCount *this)
{
  *(void *)(v1 + 1520) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 1536) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1528));
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)(v1 + 1520) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 1536) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1528));

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'LiCachedGaussianBlur::~LiCachedGaussianBlur(LiCachedGaussianBlur *this)
{
  *(void *)(v1 + 1520) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 1536) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 1528);

  PCWeakCount::~PCWeakCount(v2);
}

{
  LiCachedGaussianBlur::~LiCachedGaussianBlur((PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24)));
}

void TXGlowFilter::~TXGlowFilter(PCSharedCount *this)
{
  LiCachedGaussianBlur::~LiCachedGaussianBlur(this, (const PCString *)off_1F10B06D0);
  *(void *)(v1 + 1544) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 1560) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1552));
}

{
  uint64_t v1;
  uint64_t vars8;

  LiCachedGaussianBlur::~LiCachedGaussianBlur(this, (const PCString *)off_1F10B06D0);
  *(void *)(v1 + 1544) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 1560) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1552));

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'TXGlowFilter::~TXGlowFilter(TXGlowFilter *this)
{
  LiCachedGaussianBlur::~LiCachedGaussianBlur((PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24)), (const PCString *)off_1F10B06D0);
  *(void *)(v1 + 1544) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 1560) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 1552);

  PCWeakCount::~PCWeakCount(v2);
}

{
  TXGlowFilter::~TXGlowFilter((PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24)));
}

uint64_t TXTextObject::getID(TXTextObject *this)
{
  return *((unsigned int *)this + 97);
}

void TXCachedGlyphRender::~TXCachedGlyphRender(PCSharedCount *this)
{
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F10AFCF0;
  this[187].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F10AFDB8;
  PCSharedCount::~PCSharedCount(this + 185);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[5]);
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (std::__shared_weak_count *)this[4].var0;
  if (var0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](var0);
  }
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F10AFDD8);
  this[187].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[189].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[188].var0);
}

{
  std::__shared_weak_count *var0;
  uint64_t vars8;

  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F10AFCF0;
  this[187].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F10AFDB8;
  PCSharedCount::~PCSharedCount(this + 185);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[5]);
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (std::__shared_weak_count *)this[4].var0;
  if (var0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](var0);
  }
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F10AFDD8);
  this[187].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[189].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[188].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'TXCachedGlyphRender::~TXCachedGlyphRender(TXCachedGlyphRender *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F10AFCF0;
  *((void *)v1 + 187) = &unk_1F10AFDB8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)v1 + 185);
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 40));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F10AFDD8);
  *((void *)v1 + 187) = &unk_1F1199AC8;
  v1[1512] = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 188);
}

{
  char *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F10AFCF0;
  *((void *)v1 + 187) = &unk_1F10AFDB8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)v1 + 185);
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 40));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F10AFDD8);
  *((void *)v1 + 187) = &unk_1F1199AC8;
  v1[1512] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 188);

  JUMPOUT(0x1BA9BFBA0);
}

void TXTextureDecal::~TXTextureDecal(PCSharedCount *this)
{
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F10AFF58;
  this[46].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F10B0040;
  PCSharedCount::~PCSharedCount(this + 6);
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)off_1F10B0F88;
  this[46].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)off_1F10B1070;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F10B0068);
  this[46].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[48].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[47].var0);
}

{
  uint64_t vars8;

  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F10AFF58;
  this[46].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F10B0040;
  PCSharedCount::~PCSharedCount(this + 6);
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)off_1F10B0F88;
  this[46].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)off_1F10B1070;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F10B0068);
  this[46].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[48].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[47].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'TXTextureDecal::~TXTextureDecal(TXTextureDecal *this)
{
  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F10AFF58;
  v1[46].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F10B0040;
  PCSharedCount::~PCSharedCount(v1 + 6);
  v1->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)off_1F10B0F88;
  v1[46].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)off_1F10B1070;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F10B0068);
  v1[46].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[48].var0) = 0;

  PCWeakCount::~PCWeakCount(&v1[47].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F10AFF58;
  v1[46].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F10B0040;
  PCSharedCount::~PCSharedCount(v1 + 6);
  v1->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)off_1F10B0F88;
  v1[46].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)off_1F10B1070;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F10B0068);
  v1[46].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[48].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[47].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void PCMatrix44Tmpl<double>::rightRotate(double *a1, int a2, double a3)
{
  if (a3 != 0.0)
  {
    double v5 = 1.0;
    double cosval = 0.0;
    if (vabdd_f64(-1.57079633, a3) >= 0.0000001 && vabdd_f64(4.71238898, a3) >= 0.0000001)
    {
      double v5 = -1.0;
      if (vabdd_f64(1.57079633, a3) >= 0.0000001 && vabdd_f64(-4.71238898, a3) >= 0.0000001)
      {
        double v5 = 0.0;
        double cosval = -1.0;
        if (vabdd_f64(-3.14159265, a3) >= 0.0000001 && vabdd_f64(3.14159265, a3) >= 0.0000001)
        {
          __double2 v7 = __sincos_stret(a3);
          double cosval = v7.__cosval;
          double v5 = -v7.__sinval;
        }
      }
    }
    if (a2)
    {
      if (a2 != 1)
      {
        if (a2 == 2)
        {
          double v8 = a1[1];
          double v9 = a1[4];
          double v10 = a1[5];
          double v11 = a1[8];
          double v12 = a1[9];
          double v13 = a1[12];
          double v14 = a1[13];
          double v15 = v5 * *a1 + cosval * v8;
          *a1 = cosval * *a1 - v5 * v8;
          a1[1] = v15;
          a1[4] = cosval * v9 - v5 * v10;
          a1[5] = v5 * v9 + cosval * v10;
          a1[8] = cosval * v11 - v5 * v12;
          a1[9] = v5 * v11 + cosval * v12;
          a1[12] = cosval * v13 - v5 * v14;
          a1[13] = v5 * v13 + cosval * v14;
        }
        return;
      }
      double v25 = a1[2];
      double v26 = a1[4];
      double v27 = a1[6];
      double v28 = a1[8];
      double v29 = a1[10];
      double v30 = a1[12];
      double v31 = a1[14];
      double v32 = cosval * v25 - v5 * *a1;
      *a1 = cosval * *a1 + v5 * v25;
      a1[4] = cosval * v26 + v5 * v27;
      a1[8] = cosval * v28 + v5 * v29;
      a1[12] = cosval * v30 + v5 * v31;
      a1[2] = v32;
      a1[6] = cosval * v27 - v5 * v26;
      double v24 = cosval * v31 - v5 * v30;
      a1[10] = cosval * v29 - v5 * v28;
    }
    else
    {
      double v16 = a1[1];
      double v17 = a1[2];
      double v18 = a1[5];
      double v19 = a1[6];
      double v20 = a1[9];
      double v21 = a1[10];
      double v22 = a1[13];
      double v23 = a1[14];
      a1[1] = cosval * v16 - v5 * v17;
      a1[2] = v5 * v16 + cosval * v17;
      a1[5] = cosval * v18 - v5 * v19;
      a1[6] = v5 * v18 + cosval * v19;
      a1[9] = cosval * v20 - v5 * v21;
      a1[10] = v5 * v20 + cosval * v21;
      double v24 = v5 * v22 + cosval * v23;
      a1[13] = cosval * v22 - v5 * v23;
    }
    a1[14] = v24;
  }
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    double v10 = 0;
    long long v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    double v8 = *a1;
    int v9 = 0;
    int v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    uint64_t v4 = *a1;
    *a1 = v10;
    double v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_1B763A500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)__src);
  if (v8 <= 0)
  {
    uint64_t v16 = *(unint64_t **)a5;
  }
  else
  {
    int v9 = __src;
    CMTime __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2)) {
        int64_t v10 = 64 - a2;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      uint64_t v11 = *v9++;
      *CMTime __src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      unint64_t v12 = v10 + *(unsigned int *)(a5 + 8);
      CMTime __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(void *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v8 + 63;
    }
    uint64_t v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      CMTime __src = *(unint64_t **)a5;
    }
    uint64_t v15 = v8 - (v14 << 6);
    uint64_t v16 = &__src[v14];
    *(void *)a5 = v16;
    if (v15 >= 1)
    {
      *uint64_t v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(void *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  int v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *uint64_t result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::findValue@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  int64_t v8 = (PCMutex *)(a1 + 16);
  v26[1] = a1 + 16;
  PCMutex::lock((PCMutex *)(a1 + 16));
  char v27 = 1;
  int v9 = std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::find<std::pair<HGMTLDeviceType,PCHash128>>(a1 + 88, a2);
  int64_t v10 = v9;
  v26[0] = v9;
  if ((void *)(a1 + 96) == v9)
  {
    *a3 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a4 + 24) = _Q0;
    *(void *)(a4 + 160) = 0x3FF0000000000000;
    *(void *)(a4 + 120) = 0x3FF0000000000000;
    *(void *)(a4 + 80) = 0x3FF0000000000000;
    *(void *)(a4 + 40) = 0x3FF0000000000000;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 104) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
  }
  else
  {
    uint64_t v11 = v9[7];
    *(void *)a4 = v11;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
    }
    long long v12 = *((_OWORD *)v10 + 4);
    *(_OWORD *)(a4 + 24) = *((_OWORD *)v10 + 5);
    *(_OWORD *)(a4 + 8) = v12;
    long long v13 = *((_OWORD *)v10 + 6);
    long long v14 = *((_OWORD *)v10 + 7);
    long long v15 = *((_OWORD *)v10 + 8);
    *(_OWORD *)(a4 + 88) = *((_OWORD *)v10 + 9);
    *(_OWORD *)(a4 + 72) = v15;
    *(_OWORD *)(a4 + 56) = v14;
    *(_OWORD *)(a4 + 40) = v13;
    long long v16 = *((_OWORD *)v10 + 10);
    long long v17 = *((_OWORD *)v10 + 11);
    long long v18 = *((_OWORD *)v10 + 12);
    *(_OWORD *)(a4 + 152) = *((_OWORD *)v10 + 13);
    *(_OWORD *)(a4 + 136) = v18;
    *(_OWORD *)(a4 + 120) = v17;
    *(_OWORD *)(a4 + 104) = v16;
    uint64_t v19 = *(void *)(a1 + 136) + 1;
    *(void *)(a1 + 136) = v19;
    v10[29] = v19;
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 112), (uint64_t)v26);
    *a3 = 1;
  }
  return PCMutex::unlock(v8);
}

void sub_1B763AA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry(v11);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::find<std::pair<HGMTLDeviceType,PCHash128>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = (void *)(a1 + 8);
  int v4 = std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::__lower_bound<std::pair<HGMTLDeviceType,PCHash128>>(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v3 == v4) {
    return v3;
  }
  int v5 = v4;
  unint64_t v6 = v4[4];
  if (*a2 < v6 || v6 >= *a2 && operator<((const PCHash128 *)(a2 + 1), (const PCHash128 *)(v4 + 5))) {
    return v3;
  }
  return v5;
}

void *std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::__lower_bound<std::pair<HGMTLDeviceType,PCHash128>>(uint64_t a1, unint64_t *a2, void *a3, void *a4)
{
  if (a3)
  {
    int v5 = a3;
    unint64_t v7 = (const PCHash128 *)(a2 + 1);
    do
    {
      unint64_t v8 = v5[4];
      if (v8 >= *a2)
      {
        if (*a2 >= v8)
        {
          if (operator<((const PCHash128 *)(v5 + 5), v7)) {
            ++v5;
          }
          else {
            a4 = v5;
          }
        }
        else
        {
          a4 = v5;
        }
      }
      else
      {
        ++v5;
      }
      int v5 = (void *)*v5;
    }
    while (v5);
  }
  return a4;
}

uint64_t *PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::bubble(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1] - *result;
  unint64_t v4 = *(void *)(*(void *)a2 + 240);
  unint64_t v5 = (2 * v4) | 1;
  if (v5 >= v3 >> 3)
  {
LABEL_24:
    if (v4)
    {
      uint64_t v17 = *(void *)(v2 + 8 * v4);
      do
      {
        unint64_t v18 = v4 - 1;
        unint64_t v19 = (v4 - 1) >> 1;
        uint64_t v20 = *(void *)(v2 + 8 * v19);
        if (*(void *)(v20 + 232) <= *(void *)(v17 + 232)) {
          break;
        }
        *(void *)(v2 + 8 * v4) = v20;
        *(void *)(v2 + 8 * v19) = v17;
        uint64_t v2 = *result;
        *(void *)(*(void *)(*result + 8 * v4) + 240) = v4;
        uint64_t v17 = *(void *)(v2 + 8 * v19);
        *(void *)(v17 + 240) = v19;
        unint64_t v4 = (v4 - 1) >> 1;
      }
      while (v18 > 1);
    }
    return result;
  }
  char v6 = 0;
  unint64_t v7 = v3 >> 3;
  uint64_t v8 = 2 * v4;
  uint64_t v9 = *(void *)(v2 + 8 * v4);
  while (1)
  {
    unint64_t v10 = v8 + 2;
    unint64_t v11 = *(void *)(v9 + 232);
    BOOL v12 = v10 < v7 && v11 > *(void *)(*(void *)(v2 + 8 * v10) + 232);
    unint64_t v13 = *(void *)(*(void *)(v2 + 8 * v5) + 232);
    if (v11 <= v13 && !v12) {
      break;
    }
    BOOL v15 = v11 > v13 && v12;
    if (v12) {
      unint64_t v16 = v10;
    }
    else {
      unint64_t v16 = v5;
    }
    if (v15)
    {
      if (v13 <= *(void *)(*(void *)(v2 + 8 * v10) + 232)) {
        unint64_t v16 = v5;
      }
      else {
        unint64_t v16 = v10;
      }
    }
    *(void *)(v2 + 8 * v4) = *(void *)(v2 + 8 * v16);
    *(void *)(v2 + 8 * v16) = v9;
    uint64_t v2 = *result;
    *(void *)(*(void *)(*result + 8 * v4) + 240) = v4;
    uint64_t v9 = *(void *)(v2 + 8 * v16);
    *(void *)(v9 + 240) = v16;
    uint64_t v8 = 2 * v16;
    char v6 = 1;
    unint64_t v5 = (2 * v16) | 1;
    unint64_t v4 = v16;
    if (v5 >= v7) {
      return result;
    }
  }
  if ((v6 & 1) == 0)
  {
    unint64_t v4 = *(void *)(*(void *)a2 + 240);
    goto LABEL_24;
  }
  return result;
}

uint64_t PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::addValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = (PCMutex *)(a1 + 16);
  v56[1] = a1 + 16;
  PCMutex::lock((PCMutex *)(a1 + 16));
  char v57 = 1;
  if (*(void *)(a1 + 152) >= a4 || *(void *)(a1 + 168))
  {
    uint64_t v9 = std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::find<std::pair<HGMTLDeviceType,PCHash128>>(a1 + 88, (unint64_t *)a2);
    unint64_t v10 = v9;
    v56[0] = v9;
    if ((void *)(a1 + 96) == v9)
    {
      uint64_t v19 = *(void *)(a1 + 136) + 1;
      *(void *)(a1 + 136) = v19;
      uint64_t v20 = *a3;
      uint64_t v43 = v20;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
      }
      long long v50 = *(_OWORD *)(a3 + 13);
      long long v51 = *(_OWORD *)(a3 + 15);
      long long v52 = *(_OWORD *)(a3 + 17);
      long long v53 = *(_OWORD *)(a3 + 19);
      long long v46 = *(_OWORD *)(a3 + 5);
      long long v47 = *(_OWORD *)(a3 + 7);
      long long v48 = *(_OWORD *)(a3 + 9);
      long long v49 = *(_OWORD *)(a3 + 11);
      long long v44 = *(_OWORD *)(a3 + 1);
      long long v45 = *(_OWORD *)(a3 + 3);
      *(void *)&long long v54 = a4;
      *((void *)&v54 + 1) = v19;
      uint64_t v55 = 0;
      char v27 = *(uint64_t **)a2;
      long long v28 = *(_OWORD *)(a2 + 8);
      uint64_t v29 = v20;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
      }
      long long v36 = v50;
      long long v37 = v51;
      long long v38 = v52;
      long long v39 = v53;
      long long v32 = v46;
      long long v33 = v47;
      long long v34 = v48;
      long long v35 = v49;
      long long v30 = v44;
      long long v31 = v45;
      long long v40 = v54;
      uint64_t v41 = v55;
      v42[0] = (uint64_t)std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::__emplace_unique_key_args<std::pair<HGMTLDeviceType,PCHash128>,std::pair<std::pair<HGMTLDeviceType,PCHash128> const,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>((uint64_t **)(a1 + 88), (unint64_t *)&v27, (uint64_t)&v27);
      v42[1] = v21;
      PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)&v29);
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::add((void **)(a1 + 112), v42);
      unint64_t v22 = *(void *)(a1 + 144) + a4;
      *(void *)(a1 + 144) = v22;
      if (!*(void *)(a1 + 168))
      {
        while (v22 > *(void *)(a1 + 152) || *(void *)(a1 + 104) > *(void *)(a1 + 160))
        {
          double v25 = *(unint64_t **)(a1 + 112);
          if (v25 == *(unint64_t **)(a1 + 120)) {
            break;
          }
          char v27 = (uint64_t *)*v25;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 112), (uint64_t)&v27);
          double v23 = v27;
          double v24 = (PGHelium::MetalTextureCacheEntry *)(v27 + 7);
          *(void *)(a1 + 144) -= v27[28];
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 88), v23);
          PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry(v24);
          operator delete(v23);
          unint64_t v22 = *(void *)(a1 + 144);
        }
      }
      PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)&v43);
    }
    else
    {
      BOOL v12 = v9 + 7;
      uint64_t v11 = v9[7];
      uint64_t v13 = *a3;
      if (v11 != *a3)
      {
        if (v11)
        {
          (*(void (**)(void))(*(void *)v11 + 24))(v10[7]);
          uint64_t v13 = *a3;
        }
        *BOOL v12 = v13;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        }
      }
      long long v14 = *(_OWORD *)(a3 + 3);
      *((_OWORD *)v10 + 4) = *(_OWORD *)(a3 + 1);
      *((_OWORD *)v10 + 5) = v14;
      if (v12 != a3)
      {
        uint64_t v15 = 0;
        unint64_t v16 = v10 + 12;
        uint64_t v17 = a3 + 5;
        do
        {
          for (uint64_t i = 0; i != 4; ++i)
            v16[i] = v17[i];
          ++v15;
          v16 += 4;
          v17 += 4;
        }
        while (v15 != 4);
      }
      PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::update(a1, (uint64_t)v56, a4);
    }
  }
  return PCMutex::unlock(v8);
}

void sub_1B763B038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)&a38);
  PCLockSentry<PCMutex>::~PCLockSentry(v38 - 96);
  _Unwind_Resume(a1);
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::add(void **a1, uint64_t *a2)
{
  unint64_t v4 = (char *)*a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = ((char *)v5 - (unsigned char *)*a1) >> 3;
  uint64_t v7 = *a2;
  *(void *)(*a2 + 240) = v6;
  unint64_t v10 = (unint64_t)a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  if ((unint64_t)v5 >= v10)
  {
    if ((unint64_t)(v6 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v9 - (void)v4;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v6 + 1)) {
      uint64_t v13 = v6 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v14);
      uint64_t v7 = *a2;
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v16 = &v15[8 * v6];
    uint64_t v17 = &v15[8 * v14];
    *(void *)unint64_t v16 = v7;
    uint64_t v11 = v16 + 8;
    uint64_t v19 = (char *)*a1;
    unint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v11;
    a1[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v5 = v7;
    uint64_t v11 = v5 + 1;
  }
  a1[1] = v11;
  unint64_t v21 = *(void *)(*a2 + 240);
  if (v21)
  {
    unint64_t v22 = (char *)*a1;
    uint64_t v23 = *((void *)*a1 + v21);
    do
    {
      unint64_t v24 = v21 - 1;
      unint64_t v25 = (v21 - 1) >> 1;
      uint64_t v26 = *(void *)&v22[8 * v25];
      if (*(void *)(v26 + 232) <= *(void *)(v23 + 232)) {
        break;
      }
      *(void *)&v22[8 * v21] = v26;
      *(void *)&v22[8 * v25] = v23;
      unint64_t v22 = (char *)*a1;
      *(void *)(*((void *)*a1 + v21) + 240) = v21;
      uint64_t v23 = *(void *)&v22[8 * v25];
      *(void *)(v23 + 240) = v25;
      unint64_t v21 = (v21 - 1) >> 1;
    }
    while (v24 > 1);
  }
}

void PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 136) + 1;
  *(void *)(a1 + 136) = v6;
  *(void *)(*(void *)a2 + 232) = v6;
  uint64_t v7 = (uint64_t *)(a1 + 112);
  PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 112), a2);
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = a3 - *(void *)(*(void *)a2 + 224);
  if (v9)
  {
    unint64_t v10 = v9 + *(void *)(a1 + 144);
    *(void *)(a1 + 144) = v10;
    *(void *)(v8 + 224) = a3;
    if (!*(void *)(a1 + 168))
    {
      while (v10 > *(void *)(a1 + 152) || *(void *)(a1 + 104) > *(void *)(a1 + 160))
      {
        uint64_t v11 = *(uint64_t ***)(a1 + 112);
        if (v11 == *(uint64_t ***)(a1 + 120)) {
          break;
        }
        unint64_t v14 = *v11;
        PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::remove(v7, (uint64_t)&v14);
        uint64_t v12 = v14;
        uint64_t v13 = (PGHelium::MetalTextureCacheEntry *)(v14 + 7);
        *(void *)(a1 + 144) -= v14[28];
        std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 88), v12);
        PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry(v13);
        operator delete(v12);
        unint64_t v10 = *(void *)(a1 + 144);
      }
    }
  }
}

uint64_t *std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::__emplace_unique_key_args<std::pair<HGMTLDeviceType,PCHash128>,std::pair<std::pair<HGMTLDeviceType,PCHash128> const,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::__find_equal<std::pair<HGMTLDeviceType,PCHash128>>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::__construct_node<std::pair<std::pair<HGMTLDeviceType,PCHash128> const,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *>>>>::reset[abi:ne180100]((uint64_t *)v9, 0);
  }
  return v6;
}

void *std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::__find_equal<std::pair<HGMTLDeviceType,PCHash128>>(uint64_t a1, void *a2, unint64_t *a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = (const PCHash128 *)(a3 + 1);
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v4;
        unint64_t v9 = *a3;
        unint64_t v10 = v4[4];
        if (*a3 >= v10) {
          break;
        }
LABEL_6:
        unint64_t v4 = (void *)*v8;
        unint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_15;
        }
      }
      if (v10 >= v9)
      {
        if (operator<(v7, (const PCHash128 *)(v8 + 5))) {
          goto LABEL_6;
        }
        unint64_t v10 = v8[4];
        unint64_t v9 = *a3;
      }
      if (v10 < v9 || v9 >= v10 && operator<((const PCHash128 *)(v8 + 5), v7))
      {
        unint64_t v5 = v8 + 1;
        unint64_t v4 = (void *)v8[1];
        if (v4) {
          continue;
        }
      }
      goto LABEL_15;
    }
  }
  uint64_t v8 = (void *)(a1 + 8);
LABEL_15:
  *a2 = v8;
  return v5;
}

uint64_t std::__tree<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__map_value_compare<std::pair<HGMTLDeviceType,PCHash128>,std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::less<std::pair<HGMTLDeviceType,PCHash128>>,true>,std::allocator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>>::__construct_node<std::pair<std::pair<HGMTLDeviceType,PCHash128> const,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0xF8uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::pair<HGMTLDeviceType,PCHash128> const,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B763B464(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::pair<HGMTLDeviceType,PCHash128> const,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  long long v9 = *(_OWORD *)(a2 + 128);
  long long v10 = *(_OWORD *)(a2 + 144);
  long long v11 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 144) = v10;
  long long v12 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = v12;
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      PGHelium::MetalTextureCacheEntry::~MetalTextureCacheEntry((PGHelium::MetalTextureCacheEntry *)(v2 + 56));
    }
    operator delete((void *)v2);
  }
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(*(void *)a2 + 240);
  unint64_t v4 = ((a1[1] - *a1) >> 3) - 1;
  if (v3 == v4)
  {
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v3);
  }
  else
  {
    *(void *)(*a1 + 8 * v3) = *(void *)(*a1 + 8 * v4);
    *(void *)(*(void *)(*a1 + 8 * v3) + 240) = v3;
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v4);
    uint64_t v5 = *a1 + 8 * v3;
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,std::__tree_node<std::__value_type<std::pair<HGMTLDeviceType,PCHash128>,PCCacheImpl<std::pair<HGMTLDeviceType,PCHash128>,PGHelium::MetalTextureCacheEntry,PCMutex,std::less<std::pair<HGMTLDeviceType,PCHash128>>>::Data>,void *> *,long>>>::bubble(a1, v5);
  }
}

void TX3DExtrusionPropertiesChannelResetCallback(OZChannelBase *a1, void *a2)
{
  ObjectManipulator = (OZObjectManipulator *)OZChannelBase::getObjectManipulator(a1);
  TXTextStylePtrFromObjectManipulator(ObjectManipulator, &v4);
  unint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 120))(v4);
  if (v3) {
  TXTextLayout::doReset3DExtrusionProperties(v3);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1B763B6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void TXTextStylePtrFromObjectManipulator(OZObjectManipulator *a1@<X0>, void *a2@<X8>)
{
  if (a1
  {
    std::shared_ptr<OZStyle>::shared_ptr[abi:ne180100]<OZStyle,void>(&lpsrc, v3 + 7);
    if (lpsrc
    {
      uint64_t v5 = v7;
      *a2 = v4;
      a2[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1B763B7F4(void *a1)
{
}

void sub_1B763B838(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40C76692BFLL);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void TXKerningResetCallback(OZChannelBase *a1, void *a2)
{
  (*((void (**)(OZChannelBase *, void))a1->var0 + 35))(a1, 0);
  ObjectManipulator = (OZObjectManipulator *)OZChannelBase::getObjectManipulator(a1);
  TXTextStylePtrFromObjectManipulator(ObjectManipulator, &v5);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 120))(v5);
  if (v4) {
  TXTextLayout::resetKernings((TXTextLayout *)v4);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1B763B950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void TXTextStyle::create(void *a1@<X8>)
{
  long long v5 = xmmword_1B7E78280;
  uint64_t Style = OZApplication::createStyle(theApp, (unsigned int *)&v5);
  std::shared_ptr<TXTextStyle>::shared_ptr[abi:ne180100]<TXTextStyle,void>(a1, Style);
}

void TXTextStyle::TXTextStyle(TXTextStyle *this, OZSceneNode **a2, char a3)
{
}

void TXTextStyle::TXTextStyle(TXTextStyle *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZTextStyle::OZTextStyle(this, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_1F10B1248;
  *(void *)(v5 + 16) = &unk_1F10B1408;
  *(void *)(v5 + 48) = &unk_1F10B1660;
  *(_OWORD *)(v5 + 520) = 0u;
  PCSharedCount::PCSharedCount(&v146);
  PCURL::PCURL((PCURL *)&v145, @"Text Format Collection");
  TXCollectionEnum::TXCollectionEnum((TXTextStyle *)((char *)this + 536), 0, (const PCString *)&v146, &v145, (OZChannelFolder *)((char *)this + 72), 0x30u, 8, 0, 0);
  PCString::~PCString(&v145);
  PCString::~PCString((PCString *)&v146);
  PCSharedCount::PCSharedCount(v6);
  PCURL::PCURL((PCURL *)&v145, @"Text Format Family");
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 792), (const PCString *)&v146, &v145, (OZChannelFolder *)((char *)this + 72), 1u, 8u, 0, 0);
  PCString::~PCString(&v145);
  PCString::~PCString((PCString *)&v146);
  PCSharedCount::PCSharedCount(v7);
  PCURL::PCURL((PCURL *)&v145, @"Text Format Typeface");
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 1048), (const PCString *)&v146, &v145, (OZChannelFolder *)((char *)this + 72), 2u, 8u, 0, 0);
  PCString::~PCString(&v145);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v8, @"Text Font Folder");
  double v141 = (OZChannelBase *)((char *)this + 1304);
  TXChannelFont::TXChannelFont((TXTextStyle *)((char *)this + 1304), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 0x53u, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v9, @"Text Format Size");
  uint64_t Instance = (OZChannelInfo *)TXTextStyle::TXTextStyle_sizeInfo::getInstance(v10);
  double v142 = (OZChannel *)((char *)this + 1976);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 1976), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 3u, 0, 0, Instance);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v12, @"Text Spacing Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 2128), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 0x51u, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v13, @"Text Format Tracking");
  uint64_t v15 = (OZChannelInfo *)TXTextStyle::TXTextStyle_oldTrackingInfo::getInstance(v14);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 2256), 0.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 4u, 0, 0, v15);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v16, @"Text Format Kerning");
  unint64_t v18 = (TXTextStyle::TXTextStyle_kerningInfo *)TXTextStyle::TXTextStyle_kerningImpl::getInstance(v17);
  uint64_t v19 = (OZChannelInfo *)TXTextStyle::TXTextStyle_kerningInfo::getInstance(v18);
  CMTime v140 = (OZChannelBase *)((char *)this + 2408);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 2408), 0.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 2128), 5u, 136, (OZChannelImpl *)v18, v19);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v20, @"Text Format Baseline");
  unint64_t v22 = (OZChannelInfo *)TXTextStyle::TXTextStyle_baselineInfo::getInstance(v21);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 2560), 0.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 6u, 0, 0, v22);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v23, @"Text Format Slant");
  unint64_t v25 = (TXTextStyle::TXTextStyle_slantInfo *)TXTextStyle::TXTextStyle_slantImpl::getInstance(v24);
  uint64_t v26 = (OZChannelInfo *)TXTextStyle::TXTextStyle_slantInfo::getInstance(v25);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 2712), 0.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 7u, 0, (OZChannelImpl *)v25, v26);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v27, @"Text Format Scale");
  OZChannelScale3D::OZChannelScale3D((TXTextStyle *)((char *)this + 2864), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 8u, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v28, @"Text Format Offset");
  OZChannelPosition3D::OZChannelPosition3D((TXTextStyle *)((char *)this + 3456), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 9u, 0, 3u);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v29, @"Text Format Rotation");
  OZChannelRotation3D::OZChannelRotation3D((TXTextStyle *)((char *)this + 4344), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 0x41u, 0, 4u, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v30, @"Text Format Rotation");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 5200), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 0xAu, 0, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v31, @"Text Format Monospace");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 5352), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 0xBu, 0, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v32, @"Text Format All Caps");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 5504), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 0xCu, 0, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v33, @"Text Format All Caps Size");
  long long v35 = (OZChannelImpl *)TXTextStyle::TXTextStyle_allCapsSizeImpl::getInstance(v34);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 5656), 0.8, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 0xDu, 0, v35, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v36, @"Text Style Preview");
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 5808), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 0x3Fu, 2, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v37, @"Text Face");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 5960), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 0xEu, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v38, @"Text Face Color Source Enum");
  PCURL::PCURL((PCURL *)&v145, @"Text Face Color Source");
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 6088), (const PCString *)&v146, &v145, (OZChannelFolder *)((char *)this + 5960), 0xFu, 0, 0, 0);
  PCString::~PCString(&v145);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v39, @"Text Face Color");
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 6344), 1.0, 1.0, 1.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 5960), 0x10u, 0, 5u);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v40, @"Text Face Gradient");
  OZChannelGradientWithAngle::OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 7352), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 5960), 0x11u, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v41, @"Text Face Texture");
  double v139 = (OZChannelFolder *)((char *)this + 8560);
  OZChannelImageWithOptions::OZChannelImageWithOptions((TXTextStyle *)((char *)this + 8560), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 5960), 0x12u, 0);
  PCString::~PCString((PCString *)&v146);
  *((void *)this + 1268) = 0;
  PCURL::PCURL(v42, @"Text Face Opacity");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 10152), 1.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 5960), 0x13u, 0, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v43, @"Text Face Blur");
  long long v45 = (TXTextStyle::TXTextStyle_faceBlurInfo *)TXTextStyle::TXTextStyle_faceBlurImpl::getInstance(v44);
  long long v46 = (OZChannelInfo *)TXTextStyle::TXTextStyle_faceBlurInfo::getInstance(v45);
  OZChannel2D::OZChannel2D((TXTextStyle *)((char *)this + 10304), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 5960), 0x4Au, 0, 2u, (OZChannelImpl *)v45, v46);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v47, @"Text Face Blur");
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 10744), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 5960), 0x14u, 2, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v48, @"Text Face Four Corner");
  OZChannelQuad::OZChannelQuad((TXTextStyle *)((char *)this + 10896), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 5960), 0x43u, 0, 4u);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v49, @"Text Drop Shadow");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 13848), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 0x15u, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v50, @"Text Drop Shadow Color Source Enum");
  PCURL::PCURL((PCURL *)&v145, @"Text Drop Shadow Color Source");
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 13976), (const PCString *)&v146, &v145, (OZChannelFolder *)((char *)this + 13848), 0x16u, 0, 0, 0);
  PCString::~PCString(&v145);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v51, @"Text Drop Shadow Color");
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 14232), 0.0, 0.0, 0.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 13848), 0x17u, 0, 5u);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v52, @"Text Drop Shadow Gradient");
  OZChannelGradientWithAngle::OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 15240), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 13848), 0x18u, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v53, @"Text Drop Shadow Texture");
  CMTime v138 = (OZChannelFolder *)((char *)this + 16448);
  OZChannelImageWithOptions::OZChannelImageWithOptions((TXTextStyle *)((char *)this + 16448), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 13848), 0x19u, 0);
  PCString::~PCString((PCString *)&v146);
  *((void *)this + 2254) = 0;
  PCURL::PCURL(v54, @"Text Drop Shadow Opacity");
  long long v56 = (OZChannelImpl *)TXTextStyle::TXTextStyle_dropShadowOpacityImpl::getInstance(v55);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 18040), 0.75, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 13848), 0x1Au, 0, v56, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v57, @"Text Drop Shadow Blur");
  uint64_t v59 = (TXTextStyle::TXTextStyle_dropShadowBlurInfo *)TXTextStyle::TXTextStyle_dropShadowBlurImpl::getInstance(v58);
  FxColorDescription v60 = (OZChannelInfo *)TXTextStyle::TXTextStyle_dropShadowBlurInfo::getInstance(v59);
  OZChannel2D::OZChannel2D((TXTextStyle *)((char *)this + 18192), 0.0, 0.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 13848), 0x4Bu, 0, 2u, (OZChannelImpl *)v59, v60);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v61, @"Text Drop Shadow Blur");
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 18632), 0.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 13848), 0x1Cu, 2, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v62, @"Text Drop Shadow Scale");
  OZChannelScale::OZChannelScale((TXTextStyle *)((char *)this + 18784), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 13848), 0x31u, 0, 2u, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v63, @"Text Drop Shadow Distance");
  long long v65 = (TXTextStyle::TXTextStyle_dropShadowDistanceInfo *)TXTextStyle::TXTextStyle_dropShadowDistanceImpl::getInstance(v64);
  long long v66 = (OZChannelInfo *)TXTextStyle::TXTextStyle_dropShadowDistanceInfo::getInstance(v65);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 19224), 5.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 13848), 0x1Bu, 0, (OZChannelImpl *)v65, v66);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v67, @"Text Drop Shadow Angle");
  long long v69 = (OZChannelImpl *)TXTextStyle::TXTextStyle_dropShadowAngleImpl::getInstance(v68);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 19376), 5.49778714, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 13848), 0x1Du, 0, v69, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v70, @"Text Drop Shadow Fixed Source");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19528), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 13848), 0x42u, 0, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v71, @"Text Drop Shadow Four Corner");
  OZChannelQuad::OZChannelQuad((TXTextStyle *)((char *)this + 19680), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 13848), 0x44u, 0, 4u);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v72, @"Text Outline");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 22632), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 0x1Eu, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v73, @"Text Outline Color Source Enum");
  PCURL::PCURL((PCURL *)&v145, @"Text Outline Color Source");
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 22760), (const PCString *)&v146, &v145, (OZChannelFolder *)((char *)this + 22632), 0x1Fu, 0, 0, 0);
  PCString::~PCString(&v145);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v74, @"Text Outline Color");
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 23016), 1.0, 0.0, 0.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 22632), 0x20u, 0, 5u);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v75, @"Text Outline Gradient");
  OZChannelGradientWithAngle::OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 24024), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 22632), 0x21u, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v76, @"Text Outline Texture");
  unsigned int v137 = (OZChannelFolder *)((char *)this + 25232);
  OZChannelImageWithOptions::OZChannelImageWithOptions((TXTextStyle *)((char *)this + 25232), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 22632), 0x22u, 0);
  PCString::~PCString((PCString *)&v146);
  *((void *)this + 3352) = 0;
  PCURL::PCURL(v77, @"Text Outline Opacity");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 26824), 1.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 22632), 0x23u, 0, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v78, @"Text Outline Blur");
  long long v80 = (TXTextStyle::TXTextStyle_outlineBlurInfo *)TXTextStyle::TXTextStyle_outlineBlurImpl::getInstance(v79);
  long long v81 = (OZChannelInfo *)TXTextStyle::TXTextStyle_outlineBlurInfo::getInstance(v80);
  OZChannel2D::OZChannel2D((TXTextStyle *)((char *)this + 26976), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 22632), 0x4Cu, 0, 2u, (OZChannelImpl *)v80, v81);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v82, @"Text Outline Blur");
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 27416), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 22632), 0x25u, 2, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v83, @"Text Outline Width");
  uint64_t v85 = (TXTextStyle::TXTextStyle_outlineWidthInfo *)TXTextStyle::TXTextStyle_outlineWidthImpl::getInstance(v84);
  long long v86 = (OZChannelInfo *)TXTextStyle::TXTextStyle_outlineWidthInfo::getInstance(v85);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 27568), 1.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 22632), 0x24u, 0, (OZChannelImpl *)v85, v86);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v87, @"Text Outline Layer Order Enum");
  PCURL::PCURL((PCURL *)&v145, @"Text Outline Layer Order");
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 27720), (const PCString *)&v146, &v145, (OZChannelFolder *)((char *)this + 22632), 0x32u, 0, 0, 0);
  PCString::~PCString(&v145);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v88, @"Text Outline Four Corner");
  OZChannelQuad::OZChannelQuad((TXTextStyle *)((char *)this + 27976), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 22632), 0x45u, 0, 4u);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v89, @"Text Outline Method");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 30928), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 22632), 0x54u, 2u, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v90, @"Text Glow");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 31080), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 0x26u, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v91, @"Text Glow Color Source Enum");
  PCURL::PCURL((PCURL *)&v145, @"Text Glow Color Source");
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 31208), (const PCString *)&v146, &v145, (OZChannelFolder *)((char *)this + 31080), 0x27u, 0, 0, 0);
  PCString::~PCString(&v145);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v92, @"Text Glow Color");
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 31464), 1.0, 0.878431373, 0.262745098, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 31080), 0x28u, 0, 5u);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v93, @"Text Glow Gradient");
  OZChannelGradientWithAngle::OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 32472), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 31080), 0x29u, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v94, @"Text Glow Texture");
  unsigned int v136 = (OZChannelFolder *)((char *)this + 33680);
  OZChannelImageWithOptions::OZChannelImageWithOptions((TXTextStyle *)((char *)this + 33680), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 31080), 0x2Au, 0);
  PCString::~PCString((PCString *)&v146);
  *((void *)this + 4408) = 0;
  PCURL::PCURL(v95, @"Text Glow Opacity");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 35272), 1.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 31080), 0x2Bu, 0, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v96, @"Text Glow Blur");
  long long v98 = (TXTextStyle::TXTextStyle_glowBlurInfo *)TXTextStyle::TXTextStyle_glowBlurImpl::getInstance(v97);
  long long v99 = (OZChannelInfo *)TXTextStyle::TXTextStyle_glowBlurInfo::getInstance(v98);
  OZChannel2D::OZChannel2D((TXTextStyle *)((char *)this + 35424), 1.0, 1.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 31080), 0x4Du, 0, 2u, (OZChannelImpl *)v98, v99);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v100, @"Text Glow Blur");
  uint64_t v102 = (OZChannelImpl *)TXTextStyle::TXTextStyle_glowBlurImpl::getInstance(v101);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 35864), 1.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 31080), 0x2Cu, 2, v102, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v103, @"Text Glow Radius");
  double v105 = (TXTextStyle::TXTextStyle_glowRadiusInfo *)TXTextStyle::TXTextStyle_glowRadiusImpl::getInstance(v104);
  double v106 = (OZChannelInfo *)TXTextStyle::TXTextStyle_glowRadiusInfo::getInstance(v105);
  OZChannelDouble::OZChannelDouble((TXTextStyle *)((char *)this + 36016), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 31080), 0x2Du, 0, (OZChannelImpl *)v105, v106);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v107, @"Text Glow Scale");
  OZChannelScale::OZChannelScale((TXTextStyle *)((char *)this + 36168), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 31080), 0x2Eu, 0, 2u, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v108, @"Text Glow Offset");
  OZChannelPosition::OZChannelPosition((TXTextStyle *)((char *)this + 36608), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 31080), 0x2Fu, 0, 2u, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v109, @"Text Glow Layer Order Enum");
  PCURL::PCURL((PCURL *)&v145, @"Text Glow Layer Order");
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 37312), (const PCString *)&v146, &v145, (OZChannelFolder *)((char *)this + 31080), 0x33u, 0, 0, 0);
  PCString::~PCString(&v145);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v110, @"Text Glow Four Corner");
  OZChannelQuad::OZChannelQuad((TXTextStyle *)((char *)this + 37568), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 31080), 0x46u, 0, 4u);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v111, @"Text Style 3D Extrusion Properties");
  OZ3DExtrusionProperties::OZ3DExtrusionProperties((TXTextStyle *)((char *)this + 40520), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 0x59u, 0, 0);
  PCString::~PCString((PCString *)&v146);
  *((void *)this + 6118) = 0;
  *(_OWORD *)((char *)this + 48904) = 0u;
  *(_OWORD *)((char *)this + 48920) = 0u;
  *((_DWORD *)this + 12234) = 0;
  *((_DWORD *)this + 12238) = 0xFFFF;
  PCURL::PCURL(v112, @"Text Link Drop Shadow Four Corner To Face");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 48960), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 13848), 0x47u, 0xAu, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v113, @"Text Link Outline Four Corner To Face");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 49112), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 22632), 0x48u, 0xAu, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v114, @"Text Link Glow Four Corner To Face");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 49264), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 31080), 0x49u, 0xAu, 0, 0);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v115, @"Text Format Tracking");
  uint64_t v117 = (TXTextStyle::TXTextStyle_trackingInfo *)TXTextStyle::TXTextStyle_trackingImpl::getInstance(v116);
  char v118 = (OZChannelInfo *)TXTextStyle::TXTextStyle_trackingInfo::getInstance(v117);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 49416), 0.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 2128), 0x4Fu, 0, (OZChannelImpl *)v117, v118);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v119, @"Text Format Tracking");
  uint64_t v121 = (TXTextStyle::TXTextStyle_V4TrackingInfo *)TXTextStyle::TXTextStyle_V4TrackingImpl::getInstance(v120);
  long long v122 = (OZChannelInfo *)TXTextStyle::TXTextStyle_V4TrackingInfo::getInstance(v121);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 49568), 0.0, (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 0x4Fu, 2u, (OZChannelImpl *)v121, v122);
  PCString::~PCString((PCString *)&v146);
  PCURL::PCURL(v123, @"Text Advanced Formatting");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 49720), (const PCString *)&v146, (OZChannelFolder *)((char *)this + 72), 0x5Au, 2u, 0);
  PCString::~PCString((PCString *)&v146);
  *(_DWORD *)((char *)this + 49855) = 0;
  *((void *)this + 6231) = 0;
  PCURL::PCURL((TXTextStyle *)((char *)this + 49864), @"Text Style Preview Default Text");
  *((_OWORD *)this + 3117) = 0u;
  PCMutex::PCMutex((PCMutex *)((char *)this + 49888));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 72), 0x4000000, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 72));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 72), 0x80000);
  long long v124 = OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 72));
  uint64_t v125 = (OZFontManagerBase *)TXFontManager::getInstance((TXFontManager *)v124);
  OZFontManagerBase::getDefaultSystemFontFace(v125, &v143);
  TXTextStyle::setFont(this, &v143);
  if (v144) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v144);
  }
  CMTime v126 = OZChannelBase::setFlag(v141, 0x100000000, 0);
  CMTime v127 = (OZFontManagerBase *)TXFontManager::getInstance((TXFontManager *)v126);
  DefaultFontfloat Size = OZFontManagerBase::getDefaultFontSize(v127);
  OZChannel::setDefaultValue(v142, (double)DefaultFontSize);
  OZChannelBase::reset((OZChannelBase *)v142, 0);
  OZChannel::setMin(v142, 6.0);
  OZChannel::setMax(v142, 4096.0);
  OZChannelBase::setResetCallback(v140, TXKerningResetCallback, 0, 0);
  OZChannelFolder::resetFoldFlag(v139, 15);
  OZChannel::setValue((OZChannel *)((char *)this + 9888), MEMORY[0x1E4F1FA48], 1.0, 0);
  CMTime v129 = OZChannelFolder::saveStateAsDefault(v139);
  CMTime v130 = (PCColor *)PCColor::WHITE((PCColor *)v129);
  OZChannelColorNoAlpha::setDefaultColor((TXTextStyle *)((char *)this + 6344), v130);
  OZChannelFolder::resetFoldFlag(v138, 15);
  OZChannel::setValue((OZChannel *)((char *)this + 17776), MEMORY[0x1E4F1FA48], 1.0, 0);
  OZChannelFolder::saveStateAsDefault(v138);
  OZChannelFolder::resetFoldFlag(v137, 15);
  OZChannel::setValue((OZChannel *)((char *)this + 26560), MEMORY[0x1E4F1FA48], 1.0, 0);
  OZChannelFolder::saveStateAsDefault(v137);
  OZChannelBase v131 = OZChannelBase::enable((OZChannelBase *)((char *)this + 22632), 0, 0);
  long long v132 = (PCColor *)PCColor::RED((PCColor *)v131);
  OZChannelColorNoAlpha::setDefaultColor((TXTextStyle *)((char *)this + 23016), v132);
  OZChannel::setValue((OZChannel *)((char *)this + 30928), MEMORY[0x1E4F1FA48], 1.0, 0);
  OZChannelFolder::resetFoldFlag(v136, 15);
  OZChannel::setValue((OZChannel *)((char *)this + 35008), MEMORY[0x1E4F1FA48], 1.0, 0);
  OZChannelFolder::saveStateAsDefault(v136);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 31080), 0, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 31080), 2048, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 31080));
  uint64_t v133 = OZChannelBase::enable((OZChannelBase *)((char *)this + 13848), 0, 0);
  long long v134 = (PCColor *)PCColor::BLACK((PCColor *)v133);
  OZChannelColorNoAlpha::setDefaultColor((TXTextStyle *)((char *)this + 14232), v134);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 5960), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 5960));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 13848), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 13848));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 22632), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 22632));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 31080), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 31080));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 40520), 0x20000);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 40520), 4);
  OZChannelBase::setLabelCtlrClassName((OZChannelBase *)((char *)this + 40520), @"TX3DExtrusionPropsLabelController");
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 536), @"TXCollectionPopUpController");
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 5808), @"TXStylePreviewController");
  OZChannelBase::setParameterCtlrClassName(v141, @"TXFontController");
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)this + 19, @"TXSpacingController");
  OZChannelBase::setParameterCtlrClassName(v140, @"TXKerningController");
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 5960), @"OZTXStyleAttributeFolderGroupController");
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 22632), @"OZTXStyleAttributeFolderGroupController");
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 31080), @"OZTXStyleAttributeFolderGroupController");
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 13848), @"OZTXStyleAttributeFolderGroupController");
  OZChannelBase::setResetCallback((OZChannelBase *)((char *)this + 40520), TX3DExtrusionPropertiesChannelResetCallback, 0, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 49720), 8388612);
  if (*(unsigned char *)(theApp + 80)) {
    uint64_t v135 = @"OZChanLabelController";
  }
  else {
    uint64_t v135 = @"OZMoChanLabelCltr";
  }
  OZChannelBase::setLabelCtlrClassName(v141, v135);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 72), 0x40000);
}

void sub_1B763D4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString *a10, OZChannelPercent *a11, OZChannelPercent *a12, OZChannelBool *a13, OZChannelBool *a14, OZChannelBool *a15, OZChannelQuad *a16, OZChannelEnum *a17, OZChannelPosition *a18, OZChannel2D *a19, OZChannel *a20,OZChannel *a21,OZChannel2D *a22,OZChannelPercent *a23,OZChannelGradientWithAngle *a24,OZChannelColorNoAlpha *a25,OZChannelEnum *a26,OZChannelQuad *a27,OZChannelEnum *a28,OZChannelEnum *a29,OZChannel *a30,OZChannel *a31,OZChannel2D *a32,OZChannelPercent *a33,OZChannelGradientWithAngle *a34,OZChannelEnum *a35,OZChannelQuad *a36,OZChannelBool *a37,OZChannel *a38,OZChannel *a39,OZChannel2D *a40,OZChannel *a41,OZChannel2D *a42,OZChannelPercent *a43,OZChannelGradientWithAngle *a44,OZChannelEnum *a45,OZChannelQuad *a46,OZChannel *a47,OZChannel2D *a48,OZChannelPercent *a49,OZChannelGradientWithAngle *a50,OZChannelEnum *a51,OZChannelPercent *a52,OZChannelBool *a53,OZChannelBool *a54,OZChannel *a55,OZChannelRotation3D *a56,OZChannelPosition3D *a57,OZChannelScale3D *a58,OZChannel *a59,OZChannel *a60)
{
  double v70 = *(std::__shared_weak_count **)(v68 - 112);
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  PCMutex::~PCMutex(v66);
  long long v71 = *(std::__shared_weak_count **)(*(void *)(v68 - 240) + 14616);
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  PCString::~PCString(a10);
  OZChannelFolder::~OZChannelFolder(v64);
  OZChannelPercent::~OZChannelPercent(a11);
  OZChannelPercent::~OZChannelPercent(a12);
  OZChannelBool::~OZChannelBool(a13);
  OZChannelBool::~OZChannelBool(a14);
  OZChannelBool::~OZChannelBool(a15);
  OZ3DExtrusionProperties::~OZ3DExtrusionProperties(v65);
  OZChannelQuad::~OZChannelQuad(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChannelPosition::~OZChannelPosition(a18);
  OZChannel2D::~OZChannel2D(a19);
  OZChannel::~OZChannel(a20);
  OZChannel::~OZChannel(a21);
  OZChannel2D::~OZChannel2D(a22);
  OZChannelPercent::~OZChannelPercent(a23);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(*(OZChannelImageWithOptions **)(v68 - 184));
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle(a24);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a25);
  OZChannelEnum::~OZChannelEnum(a26);
  OZChannelFolder::~OZChannelFolder(v63);
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v68 - 232));
  OZChannelQuad::~OZChannelQuad(a27);
  OZChannelEnum::~OZChannelEnum(a28);
  OZChannel::~OZChannel(a30);
  OZChannel::~OZChannel(a31);
  OZChannel2D::~OZChannel2D(a32);
  OZChannelPercent::~OZChannelPercent(a33);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(*(OZChannelImageWithOptions **)(v68 - 176));
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle(a34);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(*(OZChannelColorNoAlpha **)(v68 - 224));
  OZChannelEnum::~OZChannelEnum(a35);
  OZChannelFolder::~OZChannelFolder(v67);
  OZChannelQuad::~OZChannelQuad(a36);
  OZChannelBool::~OZChannelBool(a37);
  OZChannel::~OZChannel(a38);
  OZChannel::~OZChannel(a39);
  OZChannel2D::~OZChannel2D(a40);
  OZChannel::~OZChannel(a41);
  OZChannel2D::~OZChannel2D(a42);
  OZChannelPercent::~OZChannelPercent(a43);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(*(OZChannelImageWithOptions **)(v68 - 168));
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle(a44);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(*(OZChannelColorNoAlpha **)(v68 - 216));
  OZChannelEnum::~OZChannelEnum(a45);
  OZChannelFolder::~OZChannelFolder(v61);
  OZChannelQuad::~OZChannelQuad(a46);
  OZChannel::~OZChannel(a47);
  OZChannel2D::~OZChannel2D(a48);
  OZChannelPercent::~OZChannelPercent(a49);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(*(OZChannelImageWithOptions **)(v68 - 160));
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle(a50);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(*(OZChannelColorNoAlpha **)(v68 - 200));
  OZChannelEnum::~OZChannelEnum(a51);
  OZChannelFolder::~OZChannelFolder(v62);
  OZChannel::~OZChannel(*(OZChannel **)(v68 - 208));
  OZChannelPercent::~OZChannelPercent(a52);
  OZChannelBool::~OZChannelBool(a53);
  OZChannelBool::~OZChannelBool(a54);
  OZChannel::~OZChannel(a55);
  OZChannelRotation3D::~OZChannelRotation3D(a56);
  OZChannelPosition3D::~OZChannelPosition3D(a57);
  OZChannelScale3D::~OZChannelScale3D(a58);
  OZChannel::~OZChannel(a59);
  OZChannel::~OZChannel(a60);
  OZChannel::~OZChannel(*(OZChannel **)(v68 - 152));
  OZChannel::~OZChannel(*(OZChannel **)(v68 - 256));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v68 - 136));
  OZChannel::~OZChannel(*(OZChannel **)(v68 - 128));
  OZChannelFontBase::~OZChannelFontBase(*(PCString **)(v68 - 144));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v68 - 248));
  OZChannelEnum::~OZChannelEnum(a29);
  TXCollectionEnum::~TXCollectionEnum(*(TXCollectionEnum **)(v68 - 192));
  uint64_t v72 = (std::__shared_weak_count *)*((void *)v60 + 66);
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  OZTextStyle::~OZTextStyle(v60);
  _Unwind_Resume(a1);
}

void TXTextStyle::setFont(TXTextStyle *this, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 65) = v5;
  long long v6 = (std::__shared_weak_count *)*((void *)this + 66);
  *((void *)this + 66) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  TXTextStyle::clearCachedFontFace(this);
  uint64_t v8 = *a2;
  long long v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    *((_DWORD *)this + 128) = *(_DWORD *)(v8 + 32);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  else
  {
    *((_DWORD *)this + 128) = *(_DWORD *)(v8 + 32);
  }
}

void TXTextStyle::TXTextStyle(TXTextStyle *this, const TXTextStyle *a2, OZSceneNode *a3, char a4)
{
  OZTextStyle::OZTextStyle(this, a2, a3, a4);
  *(void *)uint64_t v6 = &unk_1F10B1248;
  *(void *)(v6 + 16) = &unk_1F10B1408;
  *(void *)(v6 + 48) = &unk_1F10B1660;
  *(_DWORD *)(v6 + 512) = *((_DWORD *)a2 + 128);
  *(void *)(v6 + 520) = *((void *)a2 + 65);
  uint64_t v7 = *((void *)a2 + 66);
  *(void *)(v6 + 528) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  TXCollectionEnum::TXCollectionEnum((TXTextStyle *)((char *)this + 536), (const TXTextStyle *)((char *)a2 + 536), (OZChannelFolder *)((char *)this + 72));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 792), (const TXTextStyle *)((char *)a2 + 792), (OZChannelFolder *)((char *)this + 72));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 1048), (const TXTextStyle *)((char *)a2 + 1048), (OZChannelFolder *)((char *)this + 72));
  TXChannelFont::TXChannelFont((TXTextStyle *)((char *)this + 1304), (const TXTextStyle *)((char *)a2 + 1304), (OZChannelFolder *)((char *)this + 72));
  OZChannel::OZChannel((OZChannel *)this + 13, (const OZChannelBase *)((char *)a2 + 1976), (OZChannelFolder *)((char *)this + 72));
  *((void *)this + 247) = &unk_1F1100CF0;
  *((void *)this + 249) = &unk_1F1101050;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 2128), (const OZChannelFolder *)((char *)a2 + 2128), (OZChannelFolder *)((char *)this + 72));
  OZChannel::OZChannel((OZChannel *)((char *)this + 2256), (const OZChannelBase *)((char *)a2 + 2256), (OZChannelFolder *)((char *)this + 72));
  *((void *)this + 282) = &unk_1F1100CF0;
  *((void *)this + 284) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2408), (const OZChannelBase *)((char *)a2 + 2408), (OZChannelFolder *)((char *)this + 2128));
  long long v9 = v8;
  *((void *)this + 301) = &unk_1F1100CF0;
  *((void *)this + 303) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2560), (const OZChannelBase *)((char *)a2 + 2560), (OZChannelFolder *)((char *)this + 72));
  *((void *)this + 320) = &unk_1F1100CF0;
  *((void *)this + 322) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2712), (const OZChannelBase *)((char *)a2 + 2712), (OZChannelFolder *)((char *)this + 72));
  *((void *)this + 339) = &unk_1F1100CF0;
  *((void *)this + 341) = &unk_1F1101050;
  OZChannelScale3D::OZChannelScale3D((TXTextStyle *)((char *)this + 2864), (const TXTextStyle *)((char *)a2 + 2864), (OZChannelFolder *)((char *)this + 72));
  OZChannelPosition3D::OZChannelPosition3D((TXTextStyle *)((char *)this + 3456), (const TXTextStyle *)((char *)a2 + 3456), (OZChannelFolder *)((char *)this + 72));
  OZChannelRotation3D::OZChannelRotation3D((TXTextStyle *)((char *)this + 4344), (const TXTextStyle *)((char *)a2 + 4344), (OZChannelFolder *)((char *)this + 72));
  OZChannel::OZChannel((OZChannel *)((char *)this + 5200), (const OZChannelBase *)((char *)a2 + 5200), (OZChannelFolder *)((char *)this + 72));
  *((void *)this + 650) = &unk_1F11010C0;
  *((void *)this + 652) = &unk_1F1101420;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 5352), (const OZChannelBase *)((char *)a2 + 5352), (OZChannelFolder *)((char *)this + 72));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 5504), (const OZChannelBase *)((char *)a2 + 5504), (OZChannelFolder *)((char *)this + 72));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 5656), (const OZChannelBase *)((char *)a2 + 5656), (OZChannelFolder *)((char *)this + 72));
  OZChannel::OZChannel((OZChannel *)((char *)this + 5808), (const OZChannelBase *)((char *)a2 + 5808), (OZChannelFolder *)((char *)this + 72));
  *((void *)this + 726) = &unk_1F1100CF0;
  *((void *)this + 728) = &unk_1F1101050;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 5960), (const OZChannelFolder *)((char *)a2 + 5960), (OZChannelFolder *)((char *)this + 72));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 6088), (const TXTextStyle *)((char *)a2 + 6088), (OZChannelFolder *)((char *)this + 5960));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 6344), (const TXTextStyle *)((char *)a2 + 6344), (OZChannelFolder *)((char *)this + 5960));
  OZChannelGradientWithAngle::OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 7352), (const TXTextStyle *)((char *)a2 + 7352), (OZChannelFolder *)((char *)this + 5960));
  OZChannelImageWithOptions::OZChannelImageWithOptions((TXTextStyle *)((char *)this + 8560), (const TXTextStyle *)((char *)a2 + 8560), (OZChannelFolder *)((char *)this + 5960));
  *((void *)this + 1268) = 0;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 10152), (const OZChannelBase *)((char *)a2 + 10152), (OZChannelFolder *)((char *)this + 5960));
  OZChannel2D::OZChannel2D((TXTextStyle *)((char *)this + 10304), (const TXTextStyle *)((char *)a2 + 10304), (OZChannelFolder *)((char *)this + 5960));
  OZChannel::OZChannel((OZChannel *)((char *)this + 10744), (const OZChannelBase *)((char *)a2 + 10744), (OZChannelFolder *)((char *)this + 5960));
  *((void *)this + 1343) = &unk_1F1100CF0;
  *((void *)this + 1345) = &unk_1F1101050;
  OZChannelQuad::OZChannelQuad((TXTextStyle *)((char *)this + 10896), (const TXTextStyle *)((char *)a2 + 10896), (OZChannelFolder *)((char *)this + 5960));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 13848), (const OZChannelFolder *)((char *)a2 + 13848), (OZChannelFolder *)((char *)this + 72));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 13976), (const TXTextStyle *)((char *)a2 + 13976), (OZChannelFolder *)((char *)this + 13848));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 14232), (const TXTextStyle *)((char *)a2 + 14232), (OZChannelFolder *)((char *)this + 13848));
  OZChannelGradientWithAngle::OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 15240), (const TXTextStyle *)((char *)a2 + 15240), (OZChannelFolder *)((char *)this + 13848));
  OZChannelImageWithOptions::OZChannelImageWithOptions((TXTextStyle *)((char *)this + 16448), (const TXTextStyle *)((char *)a2 + 16448), (OZChannelFolder *)((char *)this + 13848));
  *((void *)this + 2254) = 0;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 18040), (const OZChannelBase *)((char *)a2 + 18040), (OZChannelFolder *)((char *)this + 13848));
  OZChannel2D::OZChannel2D((TXTextStyle *)((char *)this + 18192), (const TXTextStyle *)((char *)a2 + 18192), (OZChannelFolder *)((char *)this + 13848));
  OZChannel::OZChannel((OZChannel *)((char *)this + 18632), (const OZChannelBase *)((char *)a2 + 18632), (OZChannelFolder *)((char *)this + 13848));
  *((void *)this + 2329) = &unk_1F1100CF0;
  *((void *)this + 2331) = &unk_1F1101050;
  OZChannelScale::OZChannelScale((TXTextStyle *)((char *)this + 18784), (const TXTextStyle *)((char *)a2 + 18784), (OZChannelFolder *)((char *)this + 13848));
  OZChannel::OZChannel((OZChannel *)((char *)this + 19224), (const OZChannelBase *)((char *)a2 + 19224), (OZChannelFolder *)((char *)this + 13848));
  *((void *)this + 2403) = &unk_1F1100CF0;
  *((void *)this + 2405) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 19376), (const OZChannelBase *)a2 + 173, (OZChannelFolder *)((char *)this + 13848));
  *((void *)this + 2422) = &unk_1F11010C0;
  *((void *)this + 2424) = &unk_1F1101420;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 19528), (const OZChannelBase *)((char *)a2 + 19528), (OZChannelFolder *)((char *)this + 13848));
  OZChannelQuad::OZChannelQuad((TXTextStyle *)((char *)this + 19680), (const TXTextStyle *)((char *)a2 + 19680), (OZChannelFolder *)((char *)this + 13848));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 22632), (const OZChannelFolder *)((char *)a2 + 22632), (OZChannelFolder *)((char *)this + 72));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 22760), (const TXTextStyle *)((char *)a2 + 22760), (OZChannelFolder *)((char *)this + 22632));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 23016), (const TXTextStyle *)((char *)a2 + 23016), (OZChannelFolder *)((char *)this + 22632));
  OZChannelGradientWithAngle::OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 24024), (const TXTextStyle *)((char *)a2 + 24024), (OZChannelFolder *)((char *)this + 22632));
  OZChannelImageWithOptions::OZChannelImageWithOptions((TXTextStyle *)((char *)this + 25232), (const TXTextStyle *)((char *)a2 + 25232), (OZChannelFolder *)((char *)this + 22632));
  *((void *)this + 3352) = 0;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 26824), (const OZChannelBase *)((char *)a2 + 26824), (OZChannelFolder *)((char *)this + 22632));
  OZChannel2D::OZChannel2D((TXTextStyle *)((char *)this + 26976), (const TXTextStyle *)((char *)a2 + 26976), (OZChannelFolder *)((char *)this + 22632));
  OZChannel::OZChannel((OZChannel *)((char *)this + 27416), (const OZChannelBase *)((char *)a2 + 27416), (OZChannelFolder *)((char *)this + 22632));
  *((void *)this + 3427) = &unk_1F1100CF0;
  *((void *)this + 3429) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 27568), (const OZChannelBase *)((char *)a2 + 27568), (OZChannelFolder *)((char *)this + 22632));
  *((void *)this + 3446) = &unk_1F1100CF0;
  *((void *)this + 3448) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 27720), (const TXTextStyle *)((char *)a2 + 27720), (OZChannelFolder *)((char *)this + 22632));
  OZChannelQuad::OZChannelQuad((TXTextStyle *)((char *)this + 27976), (const TXTextStyle *)((char *)a2 + 27976), (OZChannelFolder *)((char *)this + 22632));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 30928), (const OZChannelBase *)((char *)a2 + 30928), (OZChannelFolder *)((char *)this + 22632));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 31080), (const OZChannelFolder *)((char *)a2 + 31080), (OZChannelFolder *)((char *)this + 72));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 31208), (const TXTextStyle *)((char *)a2 + 31208), (OZChannelFolder *)((char *)this + 31080));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 31464), (const TXTextStyle *)((char *)a2 + 31464), (OZChannelFolder *)((char *)this + 31080));
  OZChannelGradientWithAngle::OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 32472), (const TXTextStyle *)((char *)a2 + 32472), (OZChannelFolder *)((char *)this + 31080));
  OZChannelImageWithOptions::OZChannelImageWithOptions((TXTextStyle *)((char *)this + 33680), (const TXTextStyle *)((char *)a2 + 33680), (OZChannelFolder *)((char *)this + 31080));
  *((void *)this + 4408) = 0;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 35272), (const OZChannelBase *)((char *)a2 + 35272), (OZChannelFolder *)((char *)this + 31080));
  OZChannel2D::OZChannel2D((TXTextStyle *)((char *)this + 35424), (const TXTextStyle *)((char *)a2 + 35424), (OZChannelFolder *)((char *)this + 31080));
  OZChannel::OZChannel((OZChannel *)((char *)this + 35864), (const OZChannelBase *)((char *)a2 + 35864), (OZChannelFolder *)((char *)this + 31080));
  *((void *)this + 4483) = &unk_1F1100CF0;
  *((void *)this + 4485) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 36016), (const OZChannelBase *)((char *)a2 + 36016), (OZChannelFolder *)((char *)this + 31080));
  *((void *)this + 4502) = &unk_1F1100CF0;
  *((void *)this + 4504) = &unk_1F1101050;
  OZChannelScale::OZChannelScale((TXTextStyle *)((char *)this + 36168), (const TXTextStyle *)((char *)a2 + 36168), (OZChannelFolder *)((char *)this + 31080));
  OZChannelPosition::OZChannelPosition((TXTextStyle *)((char *)this + 36608), (const TXTextStyle *)((char *)a2 + 36608), (OZChannelFolder *)((char *)this + 31080));
  OZChannelEnum::OZChannelEnum((TXTextStyle *)((char *)this + 37312), (const TXTextStyle *)((char *)a2 + 37312), (OZChannelFolder *)((char *)this + 31080));
  OZChannelQuad::OZChannelQuad((TXTextStyle *)((char *)this + 37568), (const TXTextStyle *)((char *)a2 + 37568), (OZChannelFolder *)((char *)this + 31080));
  OZ3DExtrusionProperties::OZ3DExtrusionProperties((TXTextStyle *)((char *)this + 40520), (const TXTextStyle *)((char *)a2 + 40520), (OZChannelFolder *)((char *)this + 72));
  *((_DWORD *)this + 12234) = 0;
  *(_OWORD *)((char *)this + 48904) = 0u;
  *(_OWORD *)((char *)this + 48920) = 0u;
  *((void *)this + 6118) = *((void *)a2 + 6118);
  *((_DWORD *)this + 12238) = *((_DWORD *)a2 + 12238);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 48960), (const OZChannelBase *)((char *)a2 + 48960), (OZChannelFolder *)((char *)this + 13848));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 49112), (const OZChannelBase *)((char *)a2 + 49112), (OZChannelFolder *)((char *)this + 22632));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 49264), (const OZChannelBase *)((char *)a2 + 49264), (OZChannelFolder *)((char *)this + 31080));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 49416), (const OZChannelBase *)((char *)a2 + 49416), (OZChannelFolder *)((char *)this + 2128));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 49568), (const OZChannelBase *)((char *)a2 + 49568), (OZChannelFolder *)((char *)this + 72));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 49720), (const OZChannelFolder *)((char *)a2 + 49720), (OZChannelFolder *)((char *)this + 72));
  *((void *)this + 6231) = *((void *)a2 + 6231);
  *((_WORD *)this + 24928) = *((_WORD *)a2 + 24928);
  *((unsigned char *)this + 49858) = 0;
  PCString::PCString((PCString *)this + 6233, (const PCString *)a2 + 6233);
  *((_OWORD *)this + 3117) = 0u;
  PCMutex::PCMutex((PCMutex *)((char *)this + 49888));
  OZChannelBase::setResetCallback(v9, TXKerningResetCallback, 0, 0);
  OZChannelBase::setResetCallback((OZChannelBase *)((char *)this + 40520), TX3DExtrusionPropertiesChannelResetCallback, 0, 0);
}

void sub_1B763EB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelPercent *a9, OZChannelBool *a10, OZChannelBool *a11, OZChannelBool *a12, OZChannelQuad *a13, OZChannelEnum *a14, OZChannelPosition *a15, OZChannel2D *a16, OZChannel *a17, OZChannel2D *a18, OZChannelPercent *a19, OZChannelImageWithOptions *a20,OZChannelGradientWithAngle *a21,OZChannelColorNoAlpha *a22,OZChannelEnum *a23,OZChannelBool *a24,OZChannelQuad *a25,OZChannelEnum *a26,OZChannel *a27,OZChannel *a28,OZChannel2D *a29,OZChannelPercent *a30,OZChannelImageWithOptions *a31,OZChannelGradientWithAngle *a32,OZChannelColorNoAlpha *a33,OZChannelEnum *a34,OZChannelQuad *a35,OZChannelBool *a36,OZChannel *a37,OZChannel *a38,OZChannel2D *a39,OZChannel *a40,OZChannel2D *a41,OZChannelPercent *a42,OZChannelImageWithOptions *a43,OZChannelGradientWithAngle *a44,OZChannelColorNoAlpha *a45,OZChannelEnum *a46,OZChannelFolder *a47,OZChannelQuad *a48,OZChannel *a49,OZChannel2D *a50,OZChannelPercent *a51,OZChannelImageWithOptions *a52,OZChannelGradientWithAngle *a53,OZChannelColorNoAlpha *a54)
{
  double v64 = *(std::__shared_weak_count **)(v60 + 24);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  PCString::~PCString(v57);
  OZChannelFolder::~OZChannelFolder(v58);
  OZChannelPercent::~OZChannelPercent(v56);
  OZChannelPercent::~OZChannelPercent(a9);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannelBool::~OZChannelBool(a12);
  OZ3DExtrusionProperties::~OZ3DExtrusionProperties(*(OZ3DExtrusionProperties **)(v62 - 112));
  OZChannelQuad::~OZChannelQuad(a13);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChannelPosition::~OZChannelPosition(a15);
  OZChannel2D::~OZChannel2D(a16);
  OZChannel::~OZChannel(a17);
  OZChannel::~OZChannel(v59);
  OZChannel2D::~OZChannel2D(a18);
  OZChannelPercent::~OZChannelPercent(a19);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(a20);
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle(a21);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a22);
  OZChannelEnum::~OZChannelEnum(a23);
  OZChannelFolder::~OZChannelFolder(v55);
  OZChannelBool::~OZChannelBool(a24);
  OZChannelQuad::~OZChannelQuad(a25);
  OZChannelEnum::~OZChannelEnum(a26);
  OZChannel::~OZChannel(a27);
  OZChannel::~OZChannel(a28);
  OZChannel2D::~OZChannel2D(a29);
  OZChannelPercent::~OZChannelPercent(a30);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(a31);
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle(a32);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a33);
  OZChannelEnum::~OZChannelEnum(a34);
  OZChannelFolder::~OZChannelFolder(v61);
  OZChannelQuad::~OZChannelQuad(a35);
  OZChannelBool::~OZChannelBool(a36);
  OZChannel::~OZChannel(a37);
  OZChannel::~OZChannel(a38);
  OZChannel2D::~OZChannel2D(a39);
  OZChannel::~OZChannel(a40);
  OZChannel2D::~OZChannel2D(a41);
  OZChannelPercent::~OZChannelPercent(a42);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(a43);
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle(a44);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a45);
  OZChannelEnum::~OZChannelEnum(a46);
  OZChannelFolder::~OZChannelFolder(a47);
  OZChannelQuad::~OZChannelQuad(a48);
  OZChannel::~OZChannel(a49);
  OZChannel2D::~OZChannel2D(a50);
  OZChannelPercent::~OZChannelPercent(a51);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(a52);
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle(a53);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a54);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v62 - 256));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v62 - 248));
  OZChannel::~OZChannel(*(OZChannel **)(v62 - 240));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v62 - 232));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v62 - 224));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v62 - 216));
  OZChannel::~OZChannel(*(OZChannel **)(v62 - 208));
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v62 - 200));
  OZChannelPosition3D::~OZChannelPosition3D(*(OZChannelPosition3D **)(v62 - 192));
  OZChannelScale3D::~OZChannelScale3D(*(OZChannelScale3D **)(v62 - 184));
  OZChannel::~OZChannel(*(OZChannel **)(v62 - 176));
  OZChannel::~OZChannel(*(OZChannel **)(v62 - 168));
  OZChannel::~OZChannel(*(OZChannel **)(v62 - 104));
  OZChannel::~OZChannel(*(OZChannel **)(v62 - 160));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v62 - 96));
  OZChannel::~OZChannel(*(OZChannel **)(v62 - 152));
  OZChannelFontBase::~OZChannelFontBase(*(PCString **)(v62 - 144));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v62 - 136));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v62 - 128));
  TXCollectionEnum::~TXCollectionEnum(*(TXCollectionEnum **)(v62 - 120));
  long long v65 = (std::__shared_weak_count *)*((void *)v54 + 66);
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  OZTextStyle::~OZTextStyle(v54);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::getIndexOfMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 480);
  unint64_t v3 = *(void **)(a1 + 488);
  if (v2 == v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  while (*v2 != a2)
  {
    uint64_t result = (result + 1);
    if (++v2 == v3) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'TXTextStyle::getIndexOfMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 464);
  unint64_t v3 = *(void **)(a1 + 472);
  if (v2 == v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  while (*v2 != a2)
  {
    uint64_t result = (result + 1);
    if (++v2 == v3) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t TXTextStyle::willResetMaterial(TXTextStyle *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6118) + 1064))();
}

uint64_t non-virtual thunk to'TXTextStyle::willResetMaterial(TXTextStyle *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6116) + 1064))();
}

uint64_t TXTextStyle::doResetMaterial(TXTextStyle *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6118) + 1072))();
}

uint64_t non-virtual thunk to'TXTextStyle::doResetMaterial(TXTextStyle *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6116) + 1072))();
}

uint64_t TXTextStyle::didResetMaterial(TXTextStyle *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6118) + 1080))();
}

uint64_t non-virtual thunk to'TXTextStyle::didResetMaterial(TXTextStyle *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6116) + 1080))();
}

uint64_t TXTextStyle::addDefaultMaterial(TXTextStyle *this)
{
  uint64_t Instance = OZLayeredMaterial_Factory::getInstance(this);
  PCURL::PCURL((PCURL *)&v8, @"Material Default Name");
  uint64_t NextUniqueID = OZChannelBase::getNextUniqueID(v3);
  uint64_t v5 = (const void *)(*(uint64_t (**)(uint64_t, PCString *, uint64_t))(*(void *)Instance + 16))(Instance, &v8, NextUniqueID);
  if (v5) {
  else
  }
    uint64_t v6 = 0;
  PCString::~PCString(&v8);
  OZStyle::addMaterial(this, v6);
  return (*(uint64_t (**)(OZMaterialBase *))(*(void *)v6 + 160))(v6);
}

void sub_1B763F2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZLayeredMaterial_Factory::getInstance(OZLayeredMaterial_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLayeredMaterial_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&OZLayeredMaterial_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLayeredMaterial_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLayeredMaterial_Factory::_instance;
}

uint64_t TXTextStyle::materialChannelValueWillBeSet(uint64_t this, OZChannel *a2, const CMTime *a3, int a4)
{
  uint64_t v7 = (OZChannel *)this;
  PCString v8 = a2;
  while (1)
  {
    PCString v8 = (OZChannel *)v8->var6;
    if (!v8) {
      break;
    }
    unint64_t var1 = (unint64_t)v8->var1;
    long long v13 = xmmword_1B7E791E0;
    this = OZFactory::isKindOfClass(var1, (int32x4_t *)&v13);
    if (this)
    {
      if ((OZChannel *)(this + 2296) == a2)
      {
        long long v10 = (OZChannelMaterialMapTransform *)this;
        CMTime v12 = *a3;
        float Size = TXTextStyle::getSize(v7, &v12, 0.0);
        return OZChannelMaterialMapTransform::willSetScaleWithFontSize(v10, a3, a4, Size);
      }
      return this;
    }
  }
  return this;
}

float TXTextStyle::getSize(OZChannel *this, CMTime *a2, double a3)
{
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = this[322].var0;
  if (var0)
  {
    float v7 = (*((double (**)(void **, CMTime *))*var0 + 89))(var0, a2);
    double v8 = v7;
  }
  else
  {
    double v8 = 1.0;
  }
  OZChannel::getValueAsDouble(this + 13, a2, a3);
  return v8 * v9;
}

uint64_t non-virtual thunk to'TXTextStyle::materialChannelValueWillBeSet(TXTextStyle *this, OZChannel *a2, const CMTime *a3, int a4)
{
  return TXTextStyle::materialChannelValueWillBeSet((uint64_t)this - 16, a2, a3, a4);
}

TXTextLayout *TXTextStyle::getSequenceChannelsForMaterialLayer(TXTextStyle *this, unsigned int a2, int a3)
{
  uint64_t result = (TXTextLayout *)*((void *)this + 6118);
  if (result) {
    return (TXTextLayout *)TXTextLayout::getSequenceChannelsForMaterialLayer(result, a2, a3);
  }
  return result;
}

uint64_t TXTextStyle::deleteThis(TXTextStyle *this, OZChannelBase *a2)
{
  if (a2
  {
    var6 = (OZMaterialLayersFolder *)v4->var6;
    unsigned int v6 = OZMaterialLayersFolder::indexOfDescendant(var6, v4);
    uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)var6);
    uint64_t v8 = ObjectManipulator - 16;
    if (!ObjectManipulator) {
      uint64_t v8 = 0;
    }
    double v9 = (void *)*((void *)this + 60);
    long long v10 = (void *)*((void *)this + 61);
    if (v9 == v10)
    {
LABEL_9:
      unsigned int v11 = -1;
    }
    else
    {
      unsigned int v11 = 0;
      while (*v9 != v8)
      {
        ++v9;
        ++v11;
        if (v9 == v10) {
          goto LABEL_9;
        }
      }
    }
    TXTextLayout::deleteMaterialLayer(*((TXTextLayout **)this + 6118), v11, v6);
    return 1;
  }
  else
  {
    return OZStyle::deleteThis(this, a2);
  }
}

uint64_t non-virtual thunk to'TXTextStyle::deleteThis(TXTextStyle *this, OZChannelBase *a2)
{
  return TXTextStyle::deleteThis((TXTextStyle *)((char *)this - 16), a2);
}

void TXTextStyle::~TXTextStyle(TXTextStyle *this)
{
  char v2 = (char *)this + 48904;
  *(void *)this = &unk_1F10B1248;
  unint64_t v3 = (char *)this + 16;
  *((void *)this + 2) = &unk_1F10B1408;
  *((void *)this + 6) = &unk_1F10B1660;
  uint64_t v4 = *((void *)this + 6118);
  if (v4)
  {
    uint64_t v5 = (OZCurrentThread *)(*(uint64_t (**)(void))(*(void *)(v4 + 200) + 272))();
    unsigned int v6 = v5;
    uint64_t v7 = *((void *)v2 + 5);
    uint64_t v8 = v7 + 1200;
    for (uint64_t i = *(void *)(v7 + 1208); i != v8; uint64_t i = *(void *)(i + 8))
      uint64_t v5 = (OZCurrentThread *)(*(uint64_t (**)(void, char *))(**(void **)(i + 16) + 152))(*(void *)(i + 16), v3);
    if (theApp && !*(unsigned char *)(theApp + 80))
    {
      uint64_t Instance = OZCurrentThread::getInstance(v5);
      BOOL isSelf = PCThread::isSelf(*(_opaque_pthread_t ***)(Instance + 8));
      BOOL v12 = v6 && isSelf;
      if (v12 && !OZChannelBase::isObjectRef((OZChannelBase *)v6) && !v2[952]) {
        OZDocument::postNotification(*((OZDocument **)v6 + 198), 0x200000);
      }
    }
  }
  if (*(void *)v2)
  {
    OZGradientGroupShader::~OZGradientGroupShader(*(OZGradientGroupShader **)v2);
    MEMORY[0x1BA9BFBA0]();
    *(void *)char v2 = 0;
  }
  long long v13 = (OZGradientGroupShader *)*((void *)v2 + 1);
  if (v13)
  {
    OZGradientGroupShader::~OZGradientGroupShader(v13);
    MEMORY[0x1BA9BFBA0]();
    *((void *)v2 + 1) = 0;
  }
  unint64_t v14 = (OZGradientGroupShader *)*((void *)v2 + 2);
  if (v14)
  {
    OZGradientGroupShader::~OZGradientGroupShader(v14);
    MEMORY[0x1BA9BFBA0]();
    *((void *)v2 + 2) = 0;
  }
  uint64_t v15 = (OZGradientGroupShader *)*((void *)v2 + 3);
  if (v15)
  {
    OZGradientGroupShader::~OZGradientGroupShader(v15);
    MEMORY[0x1BA9BFBA0]();
    *((void *)v2 + 3) = 0;
  }
  PCMutex::~PCMutex((PCMutex *)((char *)this + 49888));
  unint64_t v16 = (std::__shared_weak_count *)*((void *)v2 + 122);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  PCString::~PCString((PCString *)this + 6233);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 49720));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 49568));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 49416));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 49264));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 49112));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 48960));
  OZ3DExtrusionProperties::~OZ3DExtrusionProperties((TXTextStyle *)((char *)this + 40520));
  OZChannelQuad::~OZChannelQuad((TXTextStyle *)((char *)this + 37568));
  OZChannelEnum::~OZChannelEnum((TXTextStyle *)((char *)this + 37312));
  OZChannelPosition::~OZChannelPosition((TXTextStyle *)((char *)this + 36608));
  OZChannel2D::~OZChannel2D((TXTextStyle *)((char *)this + 36168));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 36016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 35864));
  OZChannel2D::~OZChannel2D((TXTextStyle *)((char *)this + 35424));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 35272));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((TXTextStyle *)((char *)this + 33680));
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 32472));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 31464));
  OZChannelEnum::~OZChannelEnum((TXTextStyle *)((char *)this + 31208));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 31080));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 30928));
  OZChannelQuad::~OZChannelQuad((TXTextStyle *)((char *)this + 27976));
  OZChannelEnum::~OZChannelEnum((TXTextStyle *)((char *)this + 27720));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 27568));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 27416));
  OZChannel2D::~OZChannel2D((TXTextStyle *)((char *)this + 26976));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 26824));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((TXTextStyle *)((char *)this + 25232));
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 24024));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 23016));
  OZChannelEnum::~OZChannelEnum((TXTextStyle *)((char *)this + 22760));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 22632));
  OZChannelQuad::~OZChannelQuad((TXTextStyle *)((char *)this + 19680));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 19528));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19376));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19224));
  OZChannel2D::~OZChannel2D((TXTextStyle *)((char *)this + 18784));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 18632));
  OZChannel2D::~OZChannel2D((TXTextStyle *)((char *)this + 18192));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 18040));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((TXTextStyle *)((char *)this + 16448));
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 15240));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 14232));
  OZChannelEnum::~OZChannelEnum((TXTextStyle *)((char *)this + 13976));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 13848));
  OZChannelQuad::~OZChannelQuad((TXTextStyle *)((char *)this + 10896));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10744));
  OZChannel2D::~OZChannel2D((TXTextStyle *)((char *)this + 10304));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 10152));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((TXTextStyle *)((char *)this + 8560));
  OZChannelGradientWithAngle::~OZChannelGradientWithAngle((TXTextStyle *)((char *)this + 7352));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((TXTextStyle *)((char *)this + 6344));
  OZChannelEnum::~OZChannelEnum((TXTextStyle *)((char *)this + 6088));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 5960));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5808));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 5656));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 5504));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 5352));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5200));
  OZChannelRotation3D::~OZChannelRotation3D((TXTextStyle *)((char *)this + 4344));
  OZChannelPosition3D::~OZChannelPosition3D((TXTextStyle *)((char *)this + 3456));
  *((void *)this + 358) = &unk_1F1110838;
  *((void *)this + 360) = &unk_1F1110B90;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3304));
  OZChannel2D::~OZChannel2D((TXTextStyle *)((char *)this + 2864));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2712));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2560));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2408));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2256));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 2128));
  OZChannel::~OZChannel((OZChannel *)this + 13);
  OZChannelFontBase::~OZChannelFontBase((PCString *)this + 163);
  OZChannelEnum::~OZChannelEnum((TXTextStyle *)((char *)this + 1048));
  OZChannelEnum::~OZChannelEnum((TXTextStyle *)((char *)this + 792));
  TXCollectionEnum::~TXCollectionEnum((TXTextStyle *)((char *)this + 536));
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 66);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }

  OZTextStyle::~OZTextStyle(this);
}

{
  uint64_t vars8;

  TXTextStyle::~TXTextStyle(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'TXTextStyle::~TXTextStyle(TXTextStyle *this)
{
}

{
  TXTextStyle::~TXTextStyle((TXTextStyle *)((char *)this - 48));
}

{
  uint64_t vars8;

  TXTextStyle::~TXTextStyle((TXTextStyle *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTextStyle::~TXTextStyle((TXTextStyle *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

BOOL TXTextStyle::isMissingFont(TXTextStyle *this)
{
  return OZChannelFontBase::isMissing((TXTextStyle *)((char *)this + 1304));
}

uint64_t TXTextStyle::getMissingFontName(TXTextStyle *this)
{
  return (uint64_t)this + 1952;
}

uint64_t StyleWillReplaceMaterial(const TXTextStyle *a1, const TXTextStyle *a2)
{
  if ((*((unsigned char *)a1 + 48953) & 0xF) == 0) {
    return 0;
  }
  uint64_t v4 = 1;
  int isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)a1 + 40520), 1, 1);
  if (isEnabled == OZChannelBase::isEnabled((OZChannelBase *)((char *)a2 + 40520), 1, 1)) {
    return (*(unsigned int (**)(const TXTextStyle *, const TXTextStyle *))(*(void *)a2 + 248))(a2, a1) ^ 1;
  }
  return v4;
}

void TXTextStyle::copyStyle(Li3DEngineScene **this, const TXTextStyle *a2)
{
  uint64_t v4 = (char *)a2 + 48952;
  uint64_t v5 = (char *)(this + 6118);
  unsigned int v6 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this[6118]);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v23, v6);
  v5[912] = v4[904];
  if (*v4)
  {
    uint64_t v7 = *((void *)a2 + 65);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)a2 + 66);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
    (*((void (**)(Li3DEngineScene **, uint64_t, uint64_t))*this + 21))(this, v9, 1);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  int v10 = *(_DWORD *)v4;
  if ((*(_DWORD *)v4 & 2) != 0)
  {
    OZChannelBase::operator=((uint64_t)(this + 247), (uint64_t)a2 + 1976);
    int v10 = *(_DWORD *)v4;
  }
  if ((v10 & 0xF) != 0)
  {
    if (((*((uint64_t (**)(char *, char *))this[688] + 30))((char *)this + 5504, (char *)a2 + 5504) & 1) == 0) {
      *(unsigned char *)(*(void *)v5 + 19321) = 1;
    }
    OZChannelBase::operator=((uint64_t)(this + 282), (uint64_t)a2 + 2256);
    OZChannelBase::operator=((uint64_t)(this + 6177), (uint64_t)a2 + 49416);
    OZChannelBase::operator=((uint64_t)(this + 6196), (uint64_t)a2 + 49568);
    OZChannelBase::operator=((uint64_t)(this + 320), (uint64_t)a2 + 2560);
    OZChannelBase::operator=((uint64_t)(this + 339), (uint64_t)a2 + 2712);
    OZChannelFolder::operator=((uint64_t)(this + 358));
    OZChannelBase::operator=((uint64_t)(this + 375), (uint64_t)a2 + 3000);
    OZChannelBase::operator=((uint64_t)(this + 394), (uint64_t)a2 + 3152);
    OZChannelBase::operator=((uint64_t)(this + 413), (uint64_t)a2 + 3304);
    OZChannelPosition::operator=((uint64_t)(this + 432), (uint64_t)a2 + 3456);
    OZChannelPosition::operator=((uint64_t)(this + 543), (uint64_t)a2 + 4344);
    OZChannelBase::operator=((uint64_t)(this + 650), (uint64_t)a2 + 5200);
    OZChannelBase::operator=((uint64_t)(this + 669), (uint64_t)a2 + 5352);
    OZChannelBase::operator=((uint64_t)(this + 688), (uint64_t)a2 + 5504);
    OZChannelBase::operator=((uint64_t)(this + 707), (uint64_t)a2 + 5656);
    int v10 = *(_DWORD *)v4;
  }
  if ((v10 & 0x100) != 0)
  {
    OZChannelFolder::operator=((uint64_t)(this + 745));
    int v10 = *(_DWORD *)v4;
  }
  if ((v10 & 0x200) != 0)
  {
    OZChannelFolder::operator=((uint64_t)(this + 2829));
    int v10 = *(_DWORD *)v4;
  }
  if ((v10 & 0x400) != 0)
  {
    OZChannelFolder::operator=((uint64_t)(this + 3885));
    int v10 = *(_DWORD *)v4;
  }
  if ((v10 & 0x800) != 0) {
    OZChannelFolder::operator=((uint64_t)(this + 1731));
  }
  if (StyleWillReplaceMaterial(a2, (const TXTextStyle *)this))
  {
    while (1)
    {
      unsigned int v11 = (OZMaterialBase **)this[60];
      if (this[61] == (Li3DEngineScene *)v11) {
        break;
      }
      OZStyle::unregisterMaterial((OZStyle *)this, *v11);
      OZStyle::removeMaterialAtIndex((OZStyle *)this, 0);
    }
    uint64_t v19 = (void *)*((void *)a2 + 60);
    for (uint64_t i = (void *)*((void *)a2 + 61); v19 != i; ++v19)
    {
      unint64_t v21 = (const void *)(*(uint64_t (**)(void, void, void))(**(void **)(*v19 + 8) + 24))(*(void *)(*v19 + 8), *v19, 0);
      if (v21) {
      else
      }
        unint64_t v22 = 0;
      OZStyle::addMaterial((OZStyle *)this, v22);
      OZStyle::registerMaterial((OZStyle *)this, v22);
    }
  }
  else if ((v4[1] & 0xF) != 0)
  {
    uint64_t v12 = this[61] - this[60];
    if (v12)
    {
      unint64_t v13 = 0;
      unint64_t v14 = v12 >> 3;
      unsigned int v15 = 1;
      do
      {
        unint64_t v16 = this[60];
        if (v13 >= (this[61] - v16) >> 3) {
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v17 = *((void *)a2 + 60);
        if (v13 >= (*((void *)a2 + 61) - v17) >> 3) {
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        }
        (*(void (**)(void, void))(**((void **)v16 + v13) + 184))(*((void *)v16 + v13), *(void *)(v17 + 8 * v13));
        unint64_t v13 = v15;
      }
      while (v14 > v15++);
    }
  }
  if ((v4[1] & 0xF) != 0) {
    OZ3DExtrusionProperties::operator=((uint64_t)(this + 5065), (uint64_t)a2 + 40520);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v23);
}

void sub_1B7640180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::behaviorChangedState(PCString *this, OZBehavior *lpsrc)
{
  if (lpsrc)
  {
    if (v3)
    {
      uint64_t v4 = v3;
      ChanBase = (TXTextStyle *)OZSingleChannelBehavior::getChanBase(v3);
      if (ChanBase == (TXTextStyle *)&this[163])
      {
        unsigned int v6 = (OZChannelBase *)ChanBase;
        double v17 = 0.0;
        *(void *)unint64_t v18 = 0;
        Widget = (OZChannel **)OZRigBehavior::getWidget(v4);
        uint64_t v8 = (OZScene *)((uint64_t (*)(PCString *))this->var0[4].isa)(this);
        OZScene::getCurrentTime(v8, (__n128 *)&v16);
        OZRigWidget::getCurrentSnapshotIDs(Widget, &v16, &v18[1], v18, &v17);
        ChannelForSnapshot = (const void *)OZRigBehavior::getChannelForSnapshot(v4, v18[1]);
        if (ChannelForSnapshot)
        {
          if (v10)
          {
            unsigned int v11 = v10;
            LabelCtlrClassName = OZChannelBase::getLabelCtlrClassName(v6);
            ParameterCtlrClassName = OZChannelBase::getParameterCtlrClassName(v6);
            InspectorCtlrClassName = OZChannelBase::getInspectorCtlrClassName(v6);
            OZChannelFolder::operator=((uint64_t)v6);
            OZChannelBase::operator=((uint64_t)&this[180], (uint64_t)&v11[17]);
            OZChannelBase::operator=((uint64_t)&this[212], (uint64_t)&v11[49]);
            PCString::set(this + 244, v11 + 81);
            PCString::set(this + 245, v11 + 82);
            LODWORD(this[246].var0) = v11[83].var0;
            OZChannelBase::setLabelCtlrClassName(v6, LabelCtlrClassName);
            OZChannelBase::setParameterCtlrClassName(v6, ParameterCtlrClassName);
            OZChannelBase::setInspectorCtlrClassName(v6, InspectorCtlrClassName);
            TXTextStyle::clearCachedFontFace((TXTextStyle *)this);
            TXTextStyle::updateFont((TXTextStyle *)this);
          }
        }
      }
    }
  }
  return 1;
}

uint64_t TXTextStyle::clearCachedFontFace(TXTextStyle *this)
{
  char v2 = (PCMutex *)((char *)this + 49888);
  PCMutex::lock((PCMutex *)((char *)this + 49888));
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6235);
  *((_OWORD *)this + 3117) = 0u;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  return PCMutex::unlock(v2);
}

void TXTextStyle::updateFont(TXTextStyle *this)
{
  TXTextStyle::getFontFace(this, &v4);
  if (!v4)
  {
    char v2 = (std::__shared_weak_count *)v5;
    if (!v5) {
      return;
    }
    goto LABEL_7;
  }
  char v2 = (std::__shared_weak_count *)v5;
  v3[0] = v4;
  v3[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  TXTextStyle::setFont(this, v3);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
LABEL_7:
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1B76404A8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextStyle::getFontFace@<X0>(TXTextStyle *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (void *)((char *)this + 49872);
  uint64_t v5 = (PCMutex *)((char *)this + 49888);
  PCMutex::lock((PCMutex *)((char *)this + 49888));
  if (!*v4)
  {
    OZChannelFontBase::getValidatedFontName((OZChannelBase *)((char *)this + 1304), v17);
    int v6 = PCString::compare(v17, (const PCString *)(*((void *)this + 65) + 8));
    PCString::~PCString(v17);
    if (v6)
    {
      uint64_t Instance = TXFontManager::getInstance(v7);
      OZChannelFontBase::getValidatedFontName((OZChannelBase *)((char *)this + 1304), &v16);
      (*(void (**)(PCString *__return_ptr, uint64_t, PCString *))(*(void *)Instance + 56))(v17, Instance, &v16);
      long long v9 = *(_OWORD *)&v17[0].var0;
      v17[0].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
      v17[1].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
      int v10 = (std::__shared_weak_count *)v4[1];
      *((_OWORD *)this + 3117) = v9;
      if (v10)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        if (v17[1].var0) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v17[1].var0);
        }
      }
      PCString::~PCString(&v16);
    }
    else
    {
      uint64_t v11 = *((void *)this + 65);
      uint64_t v12 = *((void *)this + 66);
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v13 = (std::__shared_weak_count *)v4[1];
      void *v4 = v11;
      v4[1] = v12;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
  }
  uint64_t v14 = v4[1];
  *a2 = *v4;
  a2[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  return PCMutex::unlock(v5);
}

void sub_1B7640610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
}

void TXTextStyle::getFontName(TXTextStyle *this@<X0>, PCString *a2@<X8>)
{
}

void TXTextStyle::setFont(PCString *this, PCString *a2)
{
  unint64_t v3 = (OZChannelBase *)&this[163];
  OZChannelFontBase::validateAndSetFontName(this + 163, a2);
  uint64_t Instance = TXFontManager::getInstance(v4);
  OZChannelFontBase::getValidatedFontName(v3, &v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, PCString *))(*(void *)Instance + 56))(&v9, Instance, &v8);
  PCString::~PCString(&v8);
  if (v9)
  {
    int v6 = v10;
    v7[0] = v9;
    v7[1] = (uint64_t)v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    TXTextStyle::setFont((TXTextStyle *)this, v7);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1B7640718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextStyle::updateGradient(uint64_t this, CMTime *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = (OZGradientGroupShader **)(this + 48904);
  if (*(void *)(this + 48904))
  {
    this = OZChannel::getValueAsInt((OZChannel *)(this + 6088), MEMORY[0x1E4F1FA48], 0.0);
    if (this == 1)
    {
      uint64_t v5 = *v4;
      CMTime v12 = *a2;
      this = OZGradientGroupShader::update(v5, &v12);
    }
  }
  if (v4[1])
  {
    this = OZChannel::getValueAsInt((OZChannel *)(v3 + 22760), MEMORY[0x1E4F1FA48], 0.0);
    if (this == 1)
    {
      int v6 = v4[1];
      CMTime v11 = *a2;
      this = OZGradientGroupShader::update(v6, &v11);
    }
  }
  if (v4[2])
  {
    this = OZChannel::getValueAsInt((OZChannel *)(v3 + 31208), MEMORY[0x1E4F1FA48], 0.0);
    if (this == 1)
    {
      uint64_t v7 = v4[2];
      CMTime v10 = *a2;
      this = OZGradientGroupShader::update(v7, &v10);
    }
  }
  if (v4[3])
  {
    this = OZChannel::getValueAsInt((OZChannel *)(v3 + 13976), MEMORY[0x1E4F1FA48], 0.0);
    if (this == 1)
    {
      PCString v8 = v4[3];
      CMTime v9 = *a2;
      return OZGradientGroupShader::update(v8, &v9);
    }
  }
  return this;
}

uint64_t TXTextStyle::getFaceGradient(TXTextStyle *this, CMTime *a2, const FxColorDescription *a3)
{
  uint64_t v3 = *((void *)this + 6113);
  if (!v3) {
    operator new();
  }
  return *(void *)(v3 + 24);
}

void sub_1B764094C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x20C40769AC3DALL);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::getOutlineGradient(TXTextStyle *this, CMTime *a2, const FxColorDescription *a3)
{
  uint64_t v3 = *((void *)this + 6114);
  if (!v3) {
    operator new();
  }
  return *(void *)(v3 + 24);
}

void sub_1B7640A24(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x20C40769AC3DALL);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::getGlowGradient(TXTextStyle *this, CMTime *a2, const FxColorDescription *a3)
{
  uint64_t v3 = *((void *)this + 6115);
  if (!v3) {
    operator new();
  }
  return *(void *)(v3 + 24);
}

void sub_1B7640AFC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x20C40769AC3DALL);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::getDropShadowGradient(TXTextStyle *this, CMTime *a2, const FxColorDescription *a3)
{
  uint64_t v3 = *((void *)this + 6116);
  if (!v3) {
    operator new();
  }
  return *(void *)(v3 + 24);
}

void sub_1B7640BD4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x20C40769AC3DALL);
  _Unwind_Resume(a1);
}

void TXTextStyle::getTextureLiImageSource(TXTextStyle *this, CMTime *a2, OZChannelImageWithOptions *a3)
{
  uint64_t v5 = (OZScene *)(*(uint64_t (**)(TXTextStyle *))(*(void *)this + 128))(this);
  unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)a3 + 136), MEMORY[0x1E4F1FA48], 0.0);
  Node = OZScene::getNode(v5, ValueAsUint);
  if (Node) {
  __n128 v12 = 0uLL;
  }
  CMTimeEpoch v13 = 0;
  CMTime v9 = *a2;
  OZChannelImageWithOptions::getFrame(a3, &v9, &v12);
  OZRenderParams::OZRenderParams((OZRenderParams *)&v9, (const OZRenderParams *)a2);
  OZRenderParams::setImageType((uint64_t)&v9, 2);
  *(__n128 *)&v9.CMTimeValue value = v12;
  uint64_t v11 = 0;
  v9.CMTimeEpoch epoch = v13;
  uint64_t v10 = 0;
  OZChannelBase::setRangeName((OZChannelBase *)a2, &v8);
  operator new();
}

void sub_1B7640E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void *TXTextStyle::hasTexture(TXTextStyle *this, OZChannelImageWithOptions *a2)
{
  uint64_t v3 = (OZScene *)(*(uint64_t (**)(TXTextStyle *))(*(void *)this + 128))(this);
  unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)a2 + 136), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t result = OZScene::getNode(v3, ValueAsUint);
  if (result) {
  return result;
  }
}

void TXTextStyle::writeBody(PCString *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  uint64_t v10 = (unsigned int *)&this[6118];
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (Li3DEngineScene *)this[6118].var0;
  if (var0) {
    __n128 v12 = (OZLockingGroup *)Li3DEngineScene::sceneManager(var0);
  }
  else {
    __n128 v12 = 0;
  }
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v17, v12);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&TXStyleScope);
  uint64_t v13 = v10[2];
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1002);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v13);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v14 = v10[226];
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1003);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v14);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v15 = v10[227];
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1004);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v15);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCString::PCString(&v16, this + 6233);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1005);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v16);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCString::~PCString(&v16);
  PCSerializerWriteStream::popScope((uint64_t)a2);
  OZStyle::writeBody((uint64_t **)this, a2, a3, a4, a5);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v17);
}

void sub_1B7641230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void non-virtual thunk to'TXTextStyle::writeBody(PCString *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
}

OZFactories *TXTextStyle::markFactoriesForSerialization(TXTextStyle *this, PCSerializerWriteStream *a2)
{
  OZStyle::markFactoriesForSerialization((OZFactory **)this, a2);
  OZChannelGradient::markFactoriesForSerialization((OZChannelFolder *)((char *)this + 7352), a2, 0);
  OZChannelGradient::markFactoriesForSerialization((OZChannelFolder *)((char *)this + 24024), a2, 0);
  OZChannelGradient::markFactoriesForSerialization((OZChannelFolder *)((char *)this + 32472), a2, 0);

  return OZChannelGradient::markFactoriesForSerialization((OZChannelFolder *)((char *)this + 15240), a2, 0);
}

OZFactories *non-virtual thunk to'TXTextStyle::markFactoriesForSerialization(TXTextStyle *this, PCSerializerWriteStream *a2)
{
  return TXTextStyle::markFactoriesForSerialization((TXTextStyle *)((char *)this - 48), a2);
}

uint64_t TXTextStyle::parseBegin(TXTextStyle *this, PCSerializerReadStream *a2)
{
  while (*((void *)this + 61) != *((void *)this + 60))
    OZStyle::removeMaterialAtIndex(this, 0);
  OZStyle::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXStyleScope);
  return 1;
}

uint64_t non-virtual thunk to'TXTextStyle::parseBegin(TXTextStyle *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t TXTextStyle::parseEnd(TXTextStyle *this, PCSerializerReadStream *a2)
{
  OZStyle::parseEnd(this, a2);
  unsigned int v4 = *((_DWORD *)a2 + 26);
  if (v4 <= 2)
  {
    OZChannel::scaleChannel((OZChannel *)((char *)this + 10744), 2.0);
    OZChannel::scaleChannel((OZChannel *)((char *)this + 27416), 2.0);
    OZChannel::scaleChannel((OZChannel *)((char *)this + 35864), 2.0);
    OZChannel::scaleChannel((OZChannel *)((char *)this + 18632), 2.0);
    unsigned int v4 = *((_DWORD *)a2 + 26);
  }
  if (v4 <= 3)
  {
    OZChannelBase::operator=((uint64_t)this + 10440, (uint64_t)this + 10744);
    OZChannelBase::operator=((uint64_t)this + 10592, (uint64_t)this + 10744);
    OZChannelBase::operator=((uint64_t)this + 18328, (uint64_t)this + 18632);
    OZChannelBase::operator=((uint64_t)this + 18480, (uint64_t)this + 18632);
    OZChannelBase::operator=((uint64_t)this + 27112, (uint64_t)this + 27416);
    OZChannelBase::operator=((uint64_t)this + 27264, (uint64_t)this + 27416);
    OZChannelBase::operator=((uint64_t)this + 35560, (uint64_t)this + 35864);
    OZChannelBase::operator=((uint64_t)this + 35712, (uint64_t)this + 35864);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 10744), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 18632), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 27416), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 35864), 2, 0);
  }
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 30928), 2, 0);
  if (!OZChannelBase::testFlag((OZChannelBase *)((char *)this + 49568), 2)) {
    OZChannel::copy((OZChannel *)((char *)this + 49416), (const OZChannelBase *)((char *)this + 49568), 1);
  }
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 49568), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2408), 128, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 6344), 2, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 23016), 2, 0);
  if (OZChannelBase::testFlag((OZChannelBase *)((char *)this + 31208), 2))
  {
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 31208), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 31208), 0x400000, 0);
  }
  if (OZChannelBase::testFlag((OZChannelBase *)((char *)this + 13976), 2))
  {
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 13976), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 13976), 0x400000, 0);
  }
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 72), 0x40000);
  TXTextStyle::updateFont(this);
  return 1;
}

uint64_t non-virtual thunk to'TXTextStyle::parseEnd(TXTextStyle *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t TXTextStyle::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZStyle::parseElement(this, a2, a3);
  int v6 = *((_DWORD *)a3 + 2);
  switch(v6)
  {
    case 1000:
      LODWORD(v13.var0) = 0;
      if (PCSerializerReadStream::getAttributeAsInt32((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)&v13))
      {
        PCSharedCount::PCSharedCount(&v15);
        if (PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v15)) {
          (*((void (**)(PCSerializer **, PCSharedCount *, uint64_t))*this + 21))(this, &v15, 1);
        }
        goto LABEL_12;
      }
      break;
    case 1001:
      return 1;
    case 1002:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 32))(a3, (char *)this + 48952);
      break;
    case 1003:
      uint64_t v10 = 49848;
      goto LABEL_17;
    case 1004:
      uint64_t v10 = 49852;
LABEL_17:
      PCSerializerReadStream::getAsUInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)this + v10);
      break;
    case 1005:
      PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)(this + 6233));
      break;
    default:
      if (v6 == 81)
      {
        *(void *)uint64_t v14 = 0;
        PCSharedCount::PCSharedCount(&v15);
        PCSharedCount::PCSharedCount(&v13);
        uint64_t v12 = 0;
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v14);
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v15);
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v14[1]);
        PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 116, (uint64_t)&v12);
        if ((PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 118, (uint64_t)&v13) & 1) == 0) {
          PCString::set((PCString *)&v13, (const PCString *)&v15);
        }
        uint64_t v7 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v14[0]);
        if (v7)
        {
          if (v8)
          {
            CMTime v9 = (void *)(*(uint64_t (**)(void *, PCSharedCount *, void))(*(void *)v8 + 168))(v8, &v13, v14[1]);
            (*(void (**)(void *))(v9[2] + 120))(v9 + 2);
            PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v9 + 6));
            OZStyle::addMaterial((OZStyle *)this, (OZMaterialBase *)v9);
            OZStyle::registerMaterial((OZStyle *)this, (OZMaterialBase *)v9);
          }
        }
        PCString::~PCString((PCString *)&v13);
LABEL_12:
        PCString::~PCString((PCString *)&v15);
      }
      break;
  }
  return 1;
}

void sub_1B76418D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, PCString a12)
{
}

uint64_t non-virtual thunk to'TXTextStyle::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

void TXTextStyle::calcStaticHash(uint64_t a1, const void *a2, uint64_t **a3)
{
  int v6 = (OZLockingGroup *)Li3DEngineScene::sceneManager(*(Li3DEngineScene **)(a1 + 48944));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v23, v6);
  if (!v7) {
    __cxa_bad_cast();
  }
  PCString v8 = v7;
  (*(void (**)(int8x8_t *))(*(void *)v7 + 40))(v7);
  (*(void (**)(uint64_t, const void *, void, void, uint64_t))(*(void *)a1 + 184))(a1, a2, 0, 0, 1);
  __n128 v22 = *(__n128 *)PCHashWriteStream::getHash(v8)->i8;
  uint64_t v9 = *(void *)(a1 + 504);
  if (v9 && (*(uint64_t (**)(uint64_t))(*(void *)v9 + 272))(v9))
  {
    uint64_t v10 = (uint64_t **)(*(uint64_t (**)(void))(**(void **)(a1 + 504) + 272))(*(void *)(a1 + 504));
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v20 = (uint64_t *)v21;
    OZScene::getImmediatelyReferencedNodes(v10, *(_DWORD *)(a1 + 96), &v20);
    uint64_t v11 = v20;
    if (v20 != (uint64_t *)v21)
    {
      do
      {
        Node = (char *)OZScene::getNode((OZScene *)v10, *((_DWORD *)v11 + 7));
        if (Node)
        {
          PCSharedCount v13 = Node + 16;
          if (!OZObjectManipulator::isInObjectList((uint64_t)(Node + 16), (uint64_t)a3))
          {
            StaticHash = (int *)OZObjectManipulator::getStaticHash(v13, a2, a3);
            PCHash128::operator+=((int *)&v22, StaticHash);
          }
        }
        PCSharedCount v15 = (uint64_t *)v11[1];
        if (v15)
        {
          do
          {
            PCString v16 = v15;
            PCSharedCount v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            PCString v16 = (uint64_t *)v11[2];
            BOOL v17 = *v16 == (void)v11;
            uint64_t v11 = v16;
          }
          while (!v17);
        }
        uint64_t v11 = v16;
      }
      while (v16 != (uint64_t *)v21);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v20, v21[0]);
  }
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 48752), MEMORY[0x1E4F1FA48], 0.0))
  {
    uint64_t v19 = *(void *)(a1 + 480);
    uint64_t v18 = *(void *)(a1 + 488);
    while (v19 != v18)
    {
      (*(void (**)(uint64_t, const void *, uint64_t **))(*(void *)(*(void *)v19 + 16) + 440))(*(void *)v19 + 16, a2, a3);
      v19 += 8;
    }
  }
  PCHashWriteStream::setHash((__n128 *)v8, &v22);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v23);
}

void sub_1B7641C30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)va, v5);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'TXTextStyle::calcStaticHash(uint64_t a1, const void *a2, uint64_t **a3)
{
}

void TXTextStyle::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4)
{
  uint64_t v8 = (OZLockingGroup *)Li3DEngineScene::sceneManager(*(Li3DEngineScene **)(a1 + 48944));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v22, v8);
  if (!v9) {
    __cxa_bad_cast();
  }
  uint64_t v10 = v9;
  CMTime v21 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 72), (PCSerializerWriteStream *)a2, &v21);
  __n128 v20 = *(__n128 *)PCHashWriteStream::getHash(v10)->i8;
  uint64_t v11 = *(void *)(a1 + 504);
  if (v11 && (*(uint64_t (**)(uint64_t))(*(void *)v11 + 272))(v11))
  {
    uint64_t v12 = (uint64_t **)(*(uint64_t (**)(void))(**(void **)(a1 + 504) + 272))(*(void *)(a1 + 504));
    *(void *)&v21.timescale = 0;
    v21.CMTimeEpoch epoch = 0;
    v21.CMTimeValue value = (CMTimeValue)&v21.timescale;
    OZScene::getImmediatelyReferencedNodes(v12, *(_DWORD *)(a1 + 96), (uint64_t **)&v21);
    CMTimeValue value = v21.value;
    if ((CMTimeScale *)v21.value != &v21.timescale)
    {
      do
      {
        Node = (char *)OZScene::getNode((OZScene *)v12, *(_DWORD *)(value + 28));
        if (Node)
        {
          PCSharedCount v15 = Node + 16;
          if (!OZObjectManipulator::isInObjectList((uint64_t)(Node + 16), (uint64_t)a4))
          {
            OZObjectManipulator::getHashForState(v15, (uint64_t *)a2, (OZRenderParams *)a3, a4, &v19);
            PCHash128::operator+=((int *)&v20, (int *)&v19);
          }
        }
        PCString v16 = *(CMTime **)(value + 8);
        if (v16)
        {
          do
          {
            BOOL v17 = v16;
            PCString v16 = (CMTime *)v16->value;
          }
          while (v16);
        }
        else
        {
          do
          {
            BOOL v17 = *(CMTime **)(value + 16);
            BOOL v18 = v17->value == value;
            CMTimeValue value = (CMTimeValue)v17;
          }
          while (!v18);
        }
        CMTimeValue value = (CMTimeValue)v17;
      }
      while (v17 != (CMTime *)&v21.timescale);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v21, *(void **)&v21.timescale);
  }
  PCHashWriteStream::setHash((__n128 *)v10, &v20);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v22);
}

void sub_1B7641E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void *);
  uint64_t v9 = va_arg(va1, void);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)va, v8);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'TXTextStyle::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4)
{
}

uint64_t TXTextStyle::calcHashForStateAffectingLayout(TXTextStyle *this, PCSerializerWriteStream *a2, const CMTime *a3)
{
  OZChannelFontBase::getValidatedFontName((OZChannelBase *)((char *)this + 1304), &v7);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v7);
  PCString::~PCString(&v7);
  (*(void (**)(char *, PCSerializerWriteStream *, const CMTime *))(*((void *)this + 67) + 448))((char *)this + 536, a2, a3);
  (*(void (**)(void))(*((void *)this + 180) + 448))();
  (*(void (**)(void))(*((void *)this + 212) + 448))();
  (*(void (**)(void))(*((void *)this + 247) + 448))();
  (*(void (**)(void))(*((void *)this + 282) + 448))();
  (*(void (**)(char *, PCSerializerWriteStream *, const CMTime *))(*((void *)this + 6177) + 448))((char *)this + 49416, a2, a3);
  (*(void (**)(void))(*((void *)this + 320) + 448))();
  (*(void (**)(void))(*((void *)this + 301) + 448))();
  (*(void (**)(void))(*((void *)this + 358) + 448))();
  (*(void (**)(void))(*((void *)this + 669) + 448))();
  (*(void (**)(void))(*((void *)this + 688) + 448))();
  (*(void (**)(void))(*((void *)this + 707) + 448))();
  return (*(uint64_t (**)(char *, PCSerializerWriteStream *, const CMTime *))(*((void *)this + 5164) + 448))((char *)this + 41312, a2, a3);
}

void sub_1B76422D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

BOOL TXTextStyle::canAddToSceneNode(TXTextStyle *this, OZSceneNode *lpsrc)
{
  return lpsrc
}

uint64_t TXTextStyle::getPreviewSceneNode(TXTextStyle *this)
{
  PCSharedCount::PCSharedCount(&v7);
  uint64_t NextUniqueID = (const PCString *)OZChannelBase::getNextUniqueID(v1);
  uint64_t v3 = (TXTextLayout *)TXTextInput::create((TXTextInput *)&v7, NextUniqueID);
  PCString::~PCString((PCString *)&v7);
  long long v5 = *MEMORY[0x1E4F1FA48];
  uint64_t v6 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  PCURL::PCURL((PCURL *)&v7, @"Text Style Preview Text");
  (*(void (**)(TXTextLayout *, long long *, PCSharedCount *))(*(void *)v3 + 144))(v3, &v5, &v7);
  PCString::~PCString((PCString *)&v7);
  TXTextLayout::didFinishInitializing(v3, 1);
  return (uint64_t)v3 + 200;
}

void sub_1B7642428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
}

uint64_t TXTextStyle::getFillType(TXTextStyle *this, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v2 = 6088;
      goto LABEL_7;
    case 1:
      uint64_t v2 = 22760;
      goto LABEL_7;
    case 2:
      uint64_t v2 = 31208;
      goto LABEL_7;
    case 3:
      uint64_t v2 = 13976;
LABEL_7:
      uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + v2), MEMORY[0x1E4F1FA48], 0.0);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void *TXTextStyle::hasTexture(TXTextStyle *this, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v2 = 8560;
      goto LABEL_7;
    case 1:
      uint64_t v2 = 25232;
      goto LABEL_7;
    case 2:
      uint64_t v2 = 33680;
      goto LABEL_7;
    case 3:
      uint64_t v2 = 16448;
LABEL_7:
      uint64_t result = TXTextStyle::hasTexture(this, (TXTextStyle *)((char *)this + v2));
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t TXTextStyle::getTextureChannel(TXTextStyle *this, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v2 = 8560;
      goto LABEL_7;
    case 1:
      uint64_t v2 = 25232;
      goto LABEL_7;
    case 2:
      uint64_t v2 = 33680;
      goto LABEL_7;
    case 3:
      uint64_t v2 = 16448;
LABEL_7:
      uint64_t result = (uint64_t)this + v2;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t TXTextStyle::getGradientChannel(TXTextStyle *this, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v2 = 7352;
      goto LABEL_7;
    case 1:
      uint64_t v2 = 24024;
      goto LABEL_7;
    case 2:
      uint64_t v2 = 32472;
      goto LABEL_7;
    case 3:
      uint64_t v2 = 15240;
LABEL_7:
      uint64_t result = (uint64_t)this + v2;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t TXTextStyle::getGradient(TXTextStyle *this, int a2, CMTime *a3, const FxColorDescription *a4)
{
  uint64_t v11 = v4;
  uint64_t v12 = v5;
  switch(a2)
  {
    case 0:
      CMTime v10 = *a3;
      uint64_t result = TXTextStyle::getFaceGradient(this, &v10, a4);
      break;
    case 1:
      CMTime v9 = *a3;
      uint64_t result = TXTextStyle::getOutlineGradient(this, &v9, a4);
      break;
    case 2:
      CMTime v8 = *a3;
      uint64_t result = TXTextStyle::getGlowGradient(this, &v8, a4);
      break;
    case 3:
      CMTime v7 = *a3;
      uint64_t result = TXTextStyle::getDropShadowGradient(this, &v7, a4);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t TXTextStyle::getColorChannel(TXTextStyle *this, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v2 = 6344;
      goto LABEL_7;
    case 1:
      uint64_t v2 = 23016;
      goto LABEL_7;
    case 2:
      uint64_t v2 = 31464;
      goto LABEL_7;
    case 3:
      uint64_t v2 = 14232;
LABEL_7:
      uint64_t result = (uint64_t)this + v2;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t TXTextStyle::prerollBeginForNode(uint64_t a1, uint64_t a2, const OZRenderParams *a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v11 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(a2 + 136), MEMORY[0x1E4F1FA48], 0.0);
  Node = OZScene::getNode(v11, ValueAsUint);
  if (!Node) {
    return 0;
  }
  uint64_t v14 = Node;
  __n128 v20 = 0uLL;
  CMTimeEpoch v21 = 0;
  v17[0] = *(CMTime *)a3;
  OZChannelImageWithOptions::getFrame((OZChannelImageWithOptions *)a2, v17, &v20);
  OZRenderParams::OZRenderParams((OZRenderParams *)v17, a3);
  *(__n128 *)&v17[0].CMTimeValue value = v20;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  v17[0].CMTimeEpoch epoch = v21;
  uint64_t v15 = (*(uint64_t (**)(void *, CMTime *, uint64_t, uint64_t, double))(*(void *)v14 + 112))(v14, v17, a4, a5, a6);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v17);
  return v15;
}

void sub_1B7642870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t TXTextStyle::prerollBegin(uint64_t a1, const OZRenderParams *a2, uint64_t a3, uint64_t a4, double a5)
{
  return 0;
}

uint64_t TXTextStyle::prerollEndForNode(TXTextStyle *this, OZChannelImageWithOptions *a2, const OZRenderParams *a3, PMFrameRequest *a4)
{
  CMTime v7 = (OZScene *)(*(uint64_t (**)(TXTextStyle *))(*(void *)this + 128))(this);
  unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)a2 + 136), MEMORY[0x1E4F1FA48], 0.0);
  Node = OZScene::getNode(v7, ValueAsUint);
  if (!Node) {
    return 0;
  }
  CMTime v10 = Node;
  __n128 v16 = 0uLL;
  CMTimeEpoch v17 = 0;
  v13[0] = *(CMTime *)a3;
  OZChannelImageWithOptions::getFrame(a2, v13, &v16);
  OZRenderParams::OZRenderParams((OZRenderParams *)v13, a3);
  *(__n128 *)&v13[0].CMTimeValue value = v16;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  v13[0].CMTimeEpoch epoch = v17;
  uint64_t v11 = (*(uint64_t (**)(void *, CMTime *, PMFrameRequest *))(*(void *)v10 + 120))(v10, v13, a4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v13);
  return v11;
}

void sub_1B7642A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t TXTextStyle::prerollEnd(TXTextStyle *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  return 0;
}

uint64_t TXTextStyle::setRateForNode(TXTextStyle *this, OZChannelImageWithOptions *a2, const OZRenderParams *a3, PMFrameRequest *a4, double a5)
{
  CMTime v9 = (OZScene *)(*(uint64_t (**)(TXTextStyle *))(*(void *)this + 128))(this);
  unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)a2 + 136), MEMORY[0x1E4F1FA48], 0.0);
  Node = OZScene::getNode(v9, ValueAsUint);
  if (!Node) {
    return 0;
  }
  uint64_t v12 = Node;
  __n128 v18 = 0uLL;
  CMTimeEpoch v19 = 0;
  v15[0] = *(CMTime *)a3;
  OZChannelImageWithOptions::getFrame(a2, v15, &v18);
  OZRenderParams::OZRenderParams((OZRenderParams *)v15, a3);
  *(__n128 *)&v15[0].CMTimeValue value = v18;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v15[0].CMTimeEpoch epoch = v19;
  uint64_t v13 = (*(uint64_t (**)(void *, CMTime *, PMFrameRequest *, double))(*(void *)v12 + 128))(v12, v15, a4, a5);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v15);
  return v13;
}

void sub_1B7642C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t TXTextStyle::setRate(TXTextStyle *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  return 0;
}

uint64_t TXTextStyle::scheduleTokensForNode(uint64_t a1, uint64_t a2, CMTime *a3, long long **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(a2 + 136), MEMORY[0x1E4F1FA48], 0.0);
  Node = OZScene::getNode(v11, ValueAsUint);
  if (!Node) {
    return 0;
  }
  long long v31 = Node;
  uint64_t v32 = a5;
  __n128 v42 = 0uLL;
  CMTimeEpoch v43 = 0;
  CMTime v39 = *a3;
  OZChannelImageWithOptions::getFrame((OZChannelImageWithOptions *)a2, &v39, &v42);
  OZRenderParams::OZRenderParams((OZRenderParams *)&v39, (const OZRenderParams *)a3);
  *(__n128 *)&v39.CMTimeValue value = v42;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  v39.CMTimeEpoch epoch = v43;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(&v36, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (a4[1] - *a4));
  uint64_t v15 = v36;
  uint64_t v14 = v37;
  if (v37 != v36)
  {
    uint64_t v16 = 0;
    unsigned int v17 = 0;
    do
    {
      uint64_t v18 = v15 + 48 * v16;
      uint64_t v21 = *(void *)(v18 + 24);
      __n128 v20 = (uint64_t *)(v18 + 24);
      uint64_t v19 = v21;
      if (v20[1] != v21)
      {
        uint64_t v22 = 0;
        unsigned int v23 = 1;
        do
        {
          unint64_t v24 = (long long *)(v19 + 24 * v22);
          long long v25 = *v24;
          v35.CMTimeEpoch epoch = *((void *)v24 + 2);
          *(_OWORD *)&v35.CMTimeValue value = v25;
          __n128 v33 = 0uLL;
          uint64_t v34 = 0;
          OZChannelImageWithOptions::getFrame((OZChannelImageWithOptions *)a2, &v35, &v33);
          uint64_t v26 = *(void *)(v36 + 48 * v16 + 24) + 24 * v22;
          __n128 v27 = v33;
          *(void *)(v26 + 16) = v34;
          *(__n128 *)uint64_t v26 = v27;
          uint64_t v22 = v23;
          uint64_t v19 = *v20;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v20[1] - *v20) >> 3) > v23++);
        uint64_t v15 = v36;
        uint64_t v14 = v37;
      }
      uint64_t v16 = ++v17;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 4) > v17);
  }
  uint64_t v29 = (*(uint64_t (**)(void *, CMTime *, uint64_t *, uint64_t, uint64_t))(*(void *)v31 + 136))(v31, &v39, &v36, v32, a6);
  v35.CMTimeValue value = (CMTimeValue)&v36;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v39);
  return v29;
}

void sub_1B7642F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  va_copy((va_list)v8, va1);
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va2);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::scheduleTokens(uint64_t a1, CMTime *a2, long long **a3, uint64_t a4, uint64_t a5)
{
  return 0;
}

uint64_t TXTextStyle::hintTokensWillImageForNode(uint64_t a1, uint64_t a2, CMTime *a3, long long **a4, uint64_t a5)
{
  CMTime v9 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(a2 + 136), MEMORY[0x1E4F1FA48], 0.0);
  Node = OZScene::getNode(v9, ValueAsUint);
  if (!Node) {
    return 0;
  }
  uint64_t v29 = Node;
  uint64_t v30 = a5;
  __n128 v40 = 0uLL;
  CMTimeEpoch v41 = 0;
  CMTime v37 = *a3;
  OZChannelImageWithOptions::getFrame((OZChannelImageWithOptions *)a2, &v37, &v40);
  OZRenderParams::OZRenderParams((OZRenderParams *)&v37, (const OZRenderParams *)a3);
  *(__n128 *)&v37.CMTimeValue value = v40;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  v37.CMTimeEpoch epoch = v41;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(&v34, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (a4[1] - *a4));
  uint64_t v13 = v34;
  uint64_t v12 = v35;
  if (v35 != v34)
  {
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    do
    {
      uint64_t v16 = v13 + 48 * v14;
      uint64_t v19 = *(void *)(v16 + 24);
      uint64_t v18 = (uint64_t *)(v16 + 24);
      uint64_t v17 = v19;
      if (v18[1] != v19)
      {
        uint64_t v20 = 0;
        unsigned int v21 = 1;
        do
        {
          uint64_t v22 = (long long *)(v17 + 24 * v20);
          long long v23 = *v22;
          v33.CMTimeEpoch epoch = *((void *)v22 + 2);
          *(_OWORD *)&v33.CMTimeValue value = v23;
          __n128 v31 = 0uLL;
          uint64_t v32 = 0;
          OZChannelImageWithOptions::getFrame((OZChannelImageWithOptions *)a2, &v33, &v31);
          uint64_t v24 = *(void *)(v34 + 48 * v14 + 24) + 24 * v20;
          __n128 v25 = v31;
          *(void *)(v24 + 16) = v32;
          *(__n128 *)uint64_t v24 = v25;
          uint64_t v20 = v21;
          uint64_t v17 = *v18;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v18[1] - *v18) >> 3) > v21++);
        uint64_t v13 = v34;
        uint64_t v12 = v35;
      }
      uint64_t v14 = ++v15;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 4) > v15);
  }
  uint64_t v27 = (*(uint64_t (**)(void *, CMTime *, uint64_t *, uint64_t))(*(void *)v29 + 144))(v29, &v37, &v34, v30);
  v33.CMTimeValue value = (CMTimeValue)&v34;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v37);
  return v27;
}

void sub_1B764326C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  va_copy((va_list)v8, va1);
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va2);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::hintTokensWillImage(uint64_t a1, CMTime *a2, long long **a3, uint64_t a4)
{
  return 0;
}

uint64_t TXTextStyle::getTokensImageForNode(uint64_t a1, uint64_t a2, CMTime *a3, long long **a4, uint64_t a5)
{
  CMTime v9 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)(a2 + 136), MEMORY[0x1E4F1FA48], 0.0);
  Node = OZScene::getNode(v9, ValueAsUint);
  if (!Node) {
    return 0;
  }
  uint64_t v29 = Node;
  uint64_t v30 = a5;
  __n128 v40 = 0uLL;
  CMTimeEpoch v41 = 0;
  CMTime v37 = *a3;
  OZChannelImageWithOptions::getFrame((OZChannelImageWithOptions *)a2, &v37, &v40);
  OZRenderParams::OZRenderParams((OZRenderParams *)&v37, (const OZRenderParams *)a3);
  *(__n128 *)&v37.CMTimeValue value = v40;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  v37.CMTimeEpoch epoch = v41;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(&v34, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (a4[1] - *a4));
  uint64_t v13 = v34;
  uint64_t v12 = v35;
  if (v35 != v34)
  {
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    do
    {
      uint64_t v16 = v13 + 48 * v14;
      uint64_t v19 = *(void *)(v16 + 24);
      uint64_t v18 = (uint64_t *)(v16 + 24);
      uint64_t v17 = v19;
      if (v18[1] != v19)
      {
        uint64_t v20 = 0;
        unsigned int v21 = 1;
        do
        {
          uint64_t v22 = (long long *)(v17 + 24 * v20);
          long long v23 = *v22;
          v33.CMTimeEpoch epoch = *((void *)v22 + 2);
          *(_OWORD *)&v33.CMTimeValue value = v23;
          __n128 v31 = 0uLL;
          uint64_t v32 = 0;
          OZChannelImageWithOptions::getFrame((OZChannelImageWithOptions *)a2, &v33, &v31);
          uint64_t v24 = *(void *)(v34 + 48 * v14 + 24) + 24 * v20;
          __n128 v25 = v31;
          *(void *)(v24 + 16) = v32;
          *(__n128 *)uint64_t v24 = v25;
          uint64_t v20 = v21;
          uint64_t v17 = *v18;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v18[1] - *v18) >> 3) > v21++);
        uint64_t v13 = v34;
        uint64_t v12 = v35;
      }
      uint64_t v14 = ++v15;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 4) > v15);
  }
  uint64_t v27 = (*(uint64_t (**)(void *, CMTime *, uint64_t *, uint64_t))(*(void *)v29 + 152))(v29, &v37, &v34, v30);
  v33.CMTimeValue value = (CMTimeValue)&v34;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v37);
  return v27;
}

void sub_1B7643580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  va_copy((va_list)v8, va1);
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va2);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::getTokensImage(uint64_t a1, CMTime *a2, long long **a3, uint64_t a4)
{
  return 0;
}

void *TXTextStyle::pruneTokensAtTimeForNode(TXTextStyle *this, OZChannelImageWithOptions *a2, CMTime *a3, const char *a4)
{
  CMTime v7 = (OZScene *)(*(uint64_t (**)(TXTextStyle *))(*(void *)this + 128))(this);
  unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)a2 + 136), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t result = OZScene::getNode(v7, ValueAsUint);
  if (result)
  {
    long long v10 = *(_OWORD *)&a3->value;
    CMTimeEpoch epoch = a3->epoch;
    return (void *)(*(uint64_t (**)(void *, long long *, const char *))(*(void *)result + 160))(result, &v10, a4);
  }
  return result;
}

void *TXTextStyle::pruneTokensAtTime(TXTextStyle *this, CMTime *a2, const char *a3)
{
  CMTime v10 = *a2;
  TXTextStyle::pruneTokensAtTimeForNode(this, (TXTextStyle *)((char *)this + 8560), &v10, a3);
  CMTime v9 = *a2;
  TXTextStyle::pruneTokensAtTimeForNode(this, (TXTextStyle *)((char *)this + 25232), &v9, a3);
  CMTime v8 = *a2;
  TXTextStyle::pruneTokensAtTimeForNode(this, (TXTextStyle *)((char *)this + 33680), &v8, a3);
  CMTime v7 = *a2;
  return TXTextStyle::pruneTokensAtTimeForNode(this, (TXTextStyle *)((char *)this + 16448), &v7, a3);
}

void *TXTextStyle::pruneTokensExceptAtTimeForNode(TXTextStyle *this, OZChannelImageWithOptions *a2, CMTime *a3, const char *a4)
{
  CMTime v7 = (OZScene *)(*(uint64_t (**)(TXTextStyle *))(*(void *)this + 128))(this);
  unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)a2 + 136), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t result = OZScene::getNode(v7, ValueAsUint);
  if (result)
  {
    long long v10 = *(_OWORD *)&a3->value;
    CMTimeEpoch epoch = a3->epoch;
    return (void *)(*(uint64_t (**)(void *, long long *, const char *))(*(void *)result + 168))(result, &v10, a4);
  }
  return result;
}

void *TXTextStyle::pruneTokensExceptAtTime(TXTextStyle *this, CMTime *a2, const char *a3)
{
  CMTime v10 = *a2;
  TXTextStyle::pruneTokensExceptAtTimeForNode(this, (TXTextStyle *)((char *)this + 8560), &v10, a3);
  CMTime v9 = *a2;
  TXTextStyle::pruneTokensExceptAtTimeForNode(this, (TXTextStyle *)((char *)this + 25232), &v9, a3);
  CMTime v8 = *a2;
  TXTextStyle::pruneTokensExceptAtTimeForNode(this, (TXTextStyle *)((char *)this + 33680), &v8, a3);
  CMTime v7 = *a2;
  return TXTextStyle::pruneTokensExceptAtTimeForNode(this, (TXTextStyle *)((char *)this + 16448), &v7, a3);
}

void *TXTextStyle::pruneAllTokensForNode(TXTextStyle *this, OZChannelImageWithOptions *a2, const char *a3)
{
  uint64_t v4 = (OZScene *)(*(uint64_t (**)(TXTextStyle *))(*(void *)this + 128))(this);
  unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)a2 + 136), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t result = OZScene::getNode(v4, ValueAsUint);
  if (result)
  {
    CMTime v7 = *(uint64_t (**)(void))(*(void *)result + 176);
    return (void *)v7();
  }
  return result;
}

void *TXTextStyle::pruneAllTokens(TXTextStyle *this, const char *a2)
{
  TXTextStyle::pruneAllTokensForNode(this, (TXTextStyle *)((char *)this + 8560), a2);
  TXTextStyle::pruneAllTokensForNode(this, (TXTextStyle *)((char *)this + 25232), a2);
  TXTextStyle::pruneAllTokensForNode(this, (TXTextStyle *)((char *)this + 33680), a2);

  return TXTextStyle::pruneAllTokensForNode(this, (TXTextStyle *)((char *)this + 16448), a2);
}

uint64_t OZStyle::getInstanceID(OZStyle *this)
{
  return *((unsigned int *)this + 24);
}

OZChannelBase *OZStyle::finishInitializing(OZStyle *this)
{
  return OZChannelFolder::finishInitializing((OZChannelFolder *)((char *)this + 72));
}

uint64_t OZStyle::getRootChannel(OZStyle *this)
{
  return (uint64_t)this + 72;
}

uint64_t OZStyle::getSceneNode(OZStyle *this)
{
  return *((void *)this + 63);
}

uint64_t TXTextStyle::setCopyFlags(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48952) = a2;
  return this;
}

uint64_t TXTextStyle::getOZ3DExtrusionProperties(TXTextStyle *this)
{
  return (uint64_t)this + 40520;
}

uint64_t TXTextStyle::getOZLayout(TXTextStyle *this)
{
  return *((void *)this + 6118);
}

uint64_t non-virtual thunk to'OZStyle::getSceneNode(OZStyle *this)
{
  return *((void *)this + 61);
}

BOOL OZObjectManipulator::areStaticHashesInvalid(OZObjectManipulator *this)
{
  return vorr_s8(*(int8x8_t *)((char *)this + 16), (int8x8_t)*(_OWORD *)&vextq_s8(*((int8x16_t *)this + 1), *((int8x16_t *)this + 1), 8uLL)) == 0;
}

uint64_t TXTextStyle::TXTextStyle_sizeInfo::getInstance(TXTextStyle::TXTextStyle_sizeInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_sizeInfo::getInstance(void)::TXTextStyle_sizeInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_sizeInfo::getInstance(void)::TXTextStyle_sizeInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_sizeInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_sizeInfo::_TXTextStyle_sizeInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_sizeInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_sizeInfo::_TXTextStyle_sizeInfo) {
    operator new();
  }
}

void sub_1B7643BDC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_sizeInfo *TXTextStyle::TXTextStyle_sizeInfo::TXTextStyle_sizeInfo(TXTextStyle::TXTextStyle_sizeInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 6.0, 288.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_sizeInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10B16E8;
  *((void *)this + 10) = &unk_1F10B1708;
  return this;
}

void sub_1B7643CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_oldTrackingInfo::getInstance(TXTextStyle::TXTextStyle_oldTrackingInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_oldTrackingInfo::getInstance(void)::TXTextStyle_oldTrackingInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_oldTrackingInfo::getInstance(void)::TXTextStyle_oldTrackingInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_oldTrackingInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_oldTrackingInfo::_TXTextStyle_oldTrackingInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_oldTrackingInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_oldTrackingInfo::_TXTextStyle_oldTrackingInfo) {
    operator new();
  }
}

void sub_1B7643D8C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_oldTrackingInfo *TXTextStyle::TXTextStyle_oldTrackingInfo::TXTextStyle_oldTrackingInfo(TXTextStyle::TXTextStyle_oldTrackingInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -10.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_oldTrackingInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10B1760;
  *((void *)this + 10) = &unk_1F10B1780;
  return this;
}

void sub_1B7643E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_kerningImpl::getInstance(TXTextStyle::TXTextStyle_kerningImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_kerningImpl::getInstance(void)::TXTextStyle_kerningImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_kerningImpl::getInstance(void)::TXTextStyle_kerningImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_kerningImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_kerningImpl::_TXTextStyle_kerning;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_kerningImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_kerningImpl::_TXTextStyle_kerning) {
    operator new();
  }
}

void sub_1B7643F38(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextStyle::TXTextStyle_kerningImpl::TXTextStyle_kerningImpl(TXTextStyle::TXTextStyle_kerningImpl *this)
{
}

void sub_1B7644010(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_kerningInfo::getInstance(TXTextStyle::TXTextStyle_kerningInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_kerningInfo::getInstance(void)::TXTextStyle_kerningInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_kerningInfo::getInstance(void)::TXTextStyle_kerningInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_kerningInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_kerningInfo::_TXTextStyle_kerningInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_kerningInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_kerningInfo::_TXTextStyle_kerningInfo) {
    operator new();
  }
}

void sub_1B76440EC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_kerningInfo *TXTextStyle::TXTextStyle_kerningInfo::TXTextStyle_kerningInfo(TXTextStyle::TXTextStyle_kerningInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -100.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_kerningInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10B1850;
  *((void *)this + 10) = &unk_1F10B1870;
  return this;
}

void sub_1B76441C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_baselineInfo::getInstance(TXTextStyle::TXTextStyle_baselineInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_baselineInfo::getInstance(void)::TXTextStyle_baselineInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_baselineInfo::getInstance(void)::TXTextStyle_baselineInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_baselineInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_baselineInfo::_TXTextStyle_baselineInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_baselineInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_baselineInfo::_TXTextStyle_baselineInfo) {
    operator new();
  }
}

void sub_1B76442A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_baselineInfo *TXTextStyle::TXTextStyle_baselineInfo::TXTextStyle_baselineInfo(TXTextStyle::TXTextStyle_baselineInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -100.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_baselineInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10B18C8;
  *((void *)this + 10) = &unk_1F10B18E8;
  return this;
}

void sub_1B7644378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_slantImpl::getInstance(TXTextStyle::TXTextStyle_slantImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_slantImpl::getInstance(void)::TXTextStyle_slantImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_slantImpl::getInstance(void)::TXTextStyle_slantImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_slantImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_slantImpl::_TXTextStyle_slant;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_slantImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_slantImpl::_TXTextStyle_slant) {
    operator new();
  }
}

void sub_1B7644454(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextStyle::TXTextStyle_slantImpl::TXTextStyle_slantImpl(TXTextStyle::TXTextStyle_slantImpl *this)
{
}

void sub_1B764452C(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_slantInfo::getInstance(TXTextStyle::TXTextStyle_slantInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_slantInfo::getInstance(void)::TXTextStyle_slantInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_slantInfo::getInstance(void)::TXTextStyle_slantInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_slantInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_slantInfo::_TXTextStyle_slantInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_slantInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_slantInfo::_TXTextStyle_slantInfo) {
    operator new();
  }
}

void sub_1B7644608(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_slantInfo *TXTextStyle::TXTextStyle_slantInfo::TXTextStyle_slantInfo(TXTextStyle::TXTextStyle_slantInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -60.0, 60.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_slantInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10B19B8;
  *((void *)this + 10) = &unk_1F10B19D8;
  return this;
}

void sub_1B76446E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_allCapsSizeImpl::getInstance(TXTextStyle::TXTextStyle_allCapsSizeImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_allCapsSizeImpl::getInstance(void)::TXTextStyle_allCapsSizeImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_allCapsSizeImpl::getInstance(void)::TXTextStyle_allCapsSizeImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_allCapsSizeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_allCapsSizeImpl::_TXTextStyle_allCapsSize;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_allCapsSizeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_allCapsSizeImpl::_TXTextStyle_allCapsSize) {
    operator new();
  }
}

void sub_1B76447BC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextStyle::TXTextStyle_allCapsSizeImpl::TXTextStyle_allCapsSizeImpl(OZChannelPercent *this)
{
}

void sub_1B764489C(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_faceBlurImpl::getInstance(TXTextStyle::TXTextStyle_faceBlurImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_faceBlurImpl::getInstance(void)::TXTextStyle_faceBlurImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_faceBlurImpl::getInstance(void)::TXTextStyle_faceBlurImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_faceBlurImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_faceBlurImpl::_TXTextStyle_faceBlur;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_faceBlurImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_faceBlurImpl::_TXTextStyle_faceBlur) {
    operator new();
  }
}

void sub_1B7644978(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextStyle::TXTextStyle_faceBlurImpl::TXTextStyle_faceBlurImpl(TXTextStyle::TXTextStyle_faceBlurImpl *this)
{
}

void sub_1B7644A4C(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_faceBlurInfo::getInstance(TXTextStyle::TXTextStyle_faceBlurInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_faceBlurInfo::getInstance(void)::TXTextStyle_faceBlurInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_faceBlurInfo::getInstance(void)::TXTextStyle_faceBlurInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_faceBlurInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_faceBlurInfo::_TXTextStyle_faceBlurInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_faceBlurInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_faceBlurInfo::_TXTextStyle_faceBlurInfo) {
    operator new();
  }
}

void sub_1B7644B28(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_faceBlurInfo *TXTextStyle::TXTextStyle_faceBlurInfo::TXTextStyle_faceBlurInfo(TXTextStyle::TXTextStyle_faceBlurInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_faceBlurInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10B1B20;
  *((void *)this + 10) = &unk_1F10B1B40;
  return this;
}

void sub_1B7644BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_dropShadowOpacityImpl::getInstance(TXTextStyle::TXTextStyle_dropShadowOpacityImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_dropShadowOpacityImpl::getInstance(void)::TXTextStyle_dropShadowOpacityImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_dropShadowOpacityImpl::getInstance(void)::TXTextStyle_dropShadowOpacityImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_dropShadowOpacityImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_dropShadowOpacityImpl::_TXTextStyle_dropShadowOpacity;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_dropShadowOpacityImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_dropShadowOpacityImpl::_TXTextStyle_dropShadowOpacity) {
    operator new();
  }
}

void sub_1B7644CD4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextStyle::TXTextStyle_dropShadowOpacityImpl::TXTextStyle_dropShadowOpacityImpl(OZChannelPercent *this)
{
}

void sub_1B7644DA4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_dropShadowBlurImpl::getInstance(TXTextStyle::TXTextStyle_dropShadowBlurImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_dropShadowBlurImpl::getInstance(void)::TXTextStyle_dropShadowBlurImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_dropShadowBlurImpl::getInstance(void)::TXTextStyle_dropShadowBlurImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_dropShadowBlurImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_dropShadowBlurImpl::_TXTextStyle_dropShadowBlur;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_dropShadowBlurImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_dropShadowBlurImpl::_TXTextStyle_dropShadowBlur) {
    operator new();
  }
}

void sub_1B7644E80(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextStyle::TXTextStyle_dropShadowBlurImpl::TXTextStyle_dropShadowBlurImpl(TXTextStyle::TXTextStyle_dropShadowBlurImpl *this)
{
}

void sub_1B7644F54(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_dropShadowBlurInfo::getInstance(TXTextStyle::TXTextStyle_dropShadowBlurInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_dropShadowBlurInfo::getInstance(void)::TXTextStyle_dropShadowBlurInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_dropShadowBlurInfo::getInstance(void)::TXTextStyle_dropShadowBlurInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_dropShadowBlurInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_dropShadowBlurInfo::_TXTextStyle_dropShadowBlurInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_dropShadowBlurInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_dropShadowBlurInfo::_TXTextStyle_dropShadowBlurInfo) {
    operator new();
  }
}

void sub_1B7645030(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_dropShadowBlurInfo *TXTextStyle::TXTextStyle_dropShadowBlurInfo::TXTextStyle_dropShadowBlurInfo(TXTextStyle::TXTextStyle_dropShadowBlurInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_dropShadowBlurInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10B1C88;
  *((void *)this + 10) = &unk_1F10B1CA8;
  return this;
}

void sub_1B7645100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_dropShadowDistanceImpl::getInstance(TXTextStyle::TXTextStyle_dropShadowDistanceImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_dropShadowDistanceImpl::getInstance(void)::TXTextStyle_dropShadowDistanceImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_dropShadowDistanceImpl::getInstance(void)::TXTextStyle_dropShadowDistanceImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_dropShadowDistanceImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_dropShadowDistanceImpl::_TXTextStyle_dropShadowDistance;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_dropShadowDistanceImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_dropShadowDistanceImpl::_TXTextStyle_dropShadowDistance) {
    operator new();
  }
}

void sub_1B76451DC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextStyle::TXTextStyle_dropShadowDistanceImpl::TXTextStyle_dropShadowDistanceImpl(TXTextStyle::TXTextStyle_dropShadowDistanceImpl *this)
{
}

void sub_1B76452B0(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_dropShadowDistanceInfo::getInstance(TXTextStyle::TXTextStyle_dropShadowDistanceInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_dropShadowDistanceInfo::getInstance(void)::TXTextStyle_dropShadowDistanceInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_dropShadowDistanceInfo::getInstance(void)::TXTextStyle_dropShadowDistanceInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_dropShadowDistanceInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_dropShadowDistanceInfo::_TXTextStyle_dropShadowDistanceInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_dropShadowDistanceInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_dropShadowDistanceInfo::_TXTextStyle_dropShadowDistanceInfo) {
    operator new();
  }
}

void sub_1B764538C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_dropShadowDistanceInfo *TXTextStyle::TXTextStyle_dropShadowDistanceInfo::TXTextStyle_dropShadowDistanceInfo(TXTextStyle::TXTextStyle_dropShadowDistanceInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_dropShadowDistanceInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10B1D78;
  *((void *)this + 10) = &unk_1F10B1D98;
  return this;
}

void sub_1B7645460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_dropShadowAngleImpl::getInstance(TXTextStyle::TXTextStyle_dropShadowAngleImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_dropShadowAngleImpl::getInstance(void)::TXTextStyle_dropShadowAngleImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_dropShadowAngleImpl::getInstance(void)::TXTextStyle_dropShadowAngleImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_dropShadowAngleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_dropShadowAngleImpl::_TXTextStyle_dropShadowAngle;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_dropShadowAngleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_dropShadowAngleImpl::_TXTextStyle_dropShadowAngle) {
    operator new();
  }
}

void sub_1B764553C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextStyle::TXTextStyle_dropShadowAngleImpl::TXTextStyle_dropShadowAngleImpl(OZChannelAngle *this)
{
}

void sub_1B7645624(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZChannelAngle::createOZChannelAngleCurve(OZChannelAngle *this, double a2)
{
}

void sub_1B7645698(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_outlineBlurImpl::getInstance(TXTextStyle::TXTextStyle_outlineBlurImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_outlineBlurImpl::getInstance(void)::TXTextStyle_outlineBlurImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_outlineBlurImpl::getInstance(void)::TXTextStyle_outlineBlurImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_outlineBlurImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_outlineBlurImpl::_TXTextStyle_outlineBlur;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_outlineBlurImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_outlineBlurImpl::_TXTextStyle_outlineBlur) {
    operator new();
  }
}

void sub_1B7645774(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextStyle::TXTextStyle_outlineBlurImpl::TXTextStyle_outlineBlurImpl(TXTextStyle::TXTextStyle_outlineBlurImpl *this)
{
}

void sub_1B7645848(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_outlineBlurInfo::getInstance(TXTextStyle::TXTextStyle_outlineBlurInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_outlineBlurInfo::getInstance(void)::TXTextStyle_outlineBlurInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_outlineBlurInfo::getInstance(void)::TXTextStyle_outlineBlurInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_outlineBlurInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_outlineBlurInfo::_TXTextStyle_outlineBlurInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_outlineBlurInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_outlineBlurInfo::_TXTextStyle_outlineBlurInfo) {
    operator new();
  }
}

void sub_1B7645924(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_outlineBlurInfo *TXTextStyle::TXTextStyle_outlineBlurInfo::TXTextStyle_outlineBlurInfo(TXTextStyle::TXTextStyle_outlineBlurInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_outlineBlurInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10B1EE0;
  *((void *)this + 10) = &unk_1F10B1F00;
  return this;
}

void sub_1B76459F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_outlineWidthImpl::getInstance(TXTextStyle::TXTextStyle_outlineWidthImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_outlineWidthImpl::getInstance(void)::TXTextStyle_outlineWidthImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_outlineWidthImpl::getInstance(void)::TXTextStyle_outlineWidthImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_outlineWidthImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_outlineWidthImpl::_TXTextStyle_outlineWidth;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_outlineWidthImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_outlineWidthImpl::_TXTextStyle_outlineWidth) {
    operator new();
  }
}

void sub_1B7645AD0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextStyle::TXTextStyle_outlineWidthImpl::TXTextStyle_outlineWidthImpl(TXTextStyle::TXTextStyle_outlineWidthImpl *this)
{
}

void sub_1B7645BA4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_outlineWidthInfo::getInstance(TXTextStyle::TXTextStyle_outlineWidthInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_outlineWidthInfo::getInstance(void)::TXTextStyle_outlineWidthInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_outlineWidthInfo::getInstance(void)::TXTextStyle_outlineWidthInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_outlineWidthInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_outlineWidthInfo::_TXTextStyle_outlineWidthInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_outlineWidthInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_outlineWidthInfo::_TXTextStyle_outlineWidthInfo) {
    operator new();
  }
}

void sub_1B7645C80(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_outlineWidthInfo *TXTextStyle::TXTextStyle_outlineWidthInfo::TXTextStyle_outlineWidthInfo(TXTextStyle::TXTextStyle_outlineWidthInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 15.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_outlineWidthInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10B1FD0;
  *((void *)this + 10) = &unk_1F10B1FF0;
  return this;
}

void sub_1B7645D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_glowBlurImpl::getInstance(TXTextStyle::TXTextStyle_glowBlurImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_glowBlurImpl::getInstance(void)::TXTextStyle_glowBlurImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_glowBlurImpl::getInstance(void)::TXTextStyle_glowBlurImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_glowBlurImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_glowBlurImpl::_TXTextStyle_glowBlur;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_glowBlurImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_glowBlurImpl::_TXTextStyle_glowBlur) {
    operator new();
  }
}

void sub_1B7645E2C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextStyle::TXTextStyle_glowBlurImpl::TXTextStyle_glowBlurImpl(TXTextStyle::TXTextStyle_glowBlurImpl *this)
{
}

void sub_1B7645F00(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_glowBlurInfo::getInstance(TXTextStyle::TXTextStyle_glowBlurInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_glowBlurInfo::getInstance(void)::TXTextStyle_glowBlurInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_glowBlurInfo::getInstance(void)::TXTextStyle_glowBlurInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_glowBlurInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_glowBlurInfo::_TXTextStyle_glowBlurInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_glowBlurInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_glowBlurInfo::_TXTextStyle_glowBlurInfo) {
    operator new();
  }
}

void sub_1B7645FDC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_glowBlurInfo *TXTextStyle::TXTextStyle_glowBlurInfo::TXTextStyle_glowBlurInfo(TXTextStyle::TXTextStyle_glowBlurInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_glowBlurInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10B20C0;
  *((void *)this + 10) = &unk_1F10B20E0;
  return this;
}

void sub_1B76460AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_glowRadiusImpl::getInstance(TXTextStyle::TXTextStyle_glowRadiusImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_glowRadiusImpl::getInstance(void)::TXTextStyle_glowRadiusImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_glowRadiusImpl::getInstance(void)::TXTextStyle_glowRadiusImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_glowRadiusImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_glowRadiusImpl::_TXTextStyle_glowRadius;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_glowRadiusImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_glowRadiusImpl::_TXTextStyle_glowRadius) {
    operator new();
  }
}

void sub_1B7646188(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextStyle::TXTextStyle_glowRadiusImpl::TXTextStyle_glowRadiusImpl(TXTextStyle::TXTextStyle_glowRadiusImpl *this)
{
}

void sub_1B764625C(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_glowRadiusInfo::getInstance(TXTextStyle::TXTextStyle_glowRadiusInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_glowRadiusInfo::getInstance(void)::TXTextStyle_glowRadiusInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_glowRadiusInfo::getInstance(void)::TXTextStyle_glowRadiusInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_glowRadiusInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_glowRadiusInfo::_TXTextStyle_glowRadiusInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_glowRadiusInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_glowRadiusInfo::_TXTextStyle_glowRadiusInfo) {
    operator new();
  }
}

void sub_1B7646338(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_glowRadiusInfo *TXTextStyle::TXTextStyle_glowRadiusInfo::TXTextStyle_glowRadiusInfo(TXTextStyle::TXTextStyle_glowRadiusInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_glowRadiusInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10B21B0;
  *((void *)this + 10) = &unk_1F10B21D0;
  return this;
}

void sub_1B764640C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_trackingImpl::getInstance(TXTextStyle::TXTextStyle_trackingImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_trackingImpl::getInstance(void)::TXTextStyle_trackingImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_trackingImpl::getInstance(void)::TXTextStyle_trackingImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_trackingImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_trackingImpl::_TXTextStyle_tracking;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_trackingImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_trackingImpl::_TXTextStyle_tracking) {
    operator new();
  }
}

void sub_1B76464E8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextStyle::TXTextStyle_trackingImpl::TXTextStyle_trackingImpl(OZChannelPercent *this)
{
}

void sub_1B76465C0(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_trackingInfo::getInstance(TXTextStyle::TXTextStyle_trackingInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_trackingInfo::getInstance(void)::TXTextStyle_trackingInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_trackingInfo::getInstance(void)::TXTextStyle_trackingInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_trackingInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_trackingInfo::_TXTextStyle_trackingInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_trackingInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_trackingInfo::_TXTextStyle_trackingInfo) {
    operator new();
  }
}

void sub_1B764669C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_trackingInfo *TXTextStyle::TXTextStyle_trackingInfo::TXTextStyle_trackingInfo(TXTextStyle::TXTextStyle_trackingInfo *this)
{
  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1.0, 1.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_trackingInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10B22A0;
  *((void *)this + 10) = &unk_1F10B22C0;
  return this;
}

void sub_1B7646774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_V4TrackingImpl::getInstance(TXTextStyle::TXTextStyle_V4TrackingImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_V4TrackingImpl::getInstance(void)::TXTextStyle_V4TrackingImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_V4TrackingImpl::getInstance(void)::TXTextStyle_V4TrackingImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_V4TrackingImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_V4TrackingImpl::_TXTextStyle_V4Tracking;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_V4TrackingImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_V4TrackingImpl::_TXTextStyle_V4Tracking) {
    operator new();
  }
}

void sub_1B7646850(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTextStyle::TXTextStyle_V4TrackingImpl::TXTextStyle_V4TrackingImpl(OZChannelPercent *this)
{
}

void sub_1B7646928(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextStyle::TXTextStyle_V4TrackingInfo::getInstance(TXTextStyle::TXTextStyle_V4TrackingInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTextStyle::TXTextStyle_V4TrackingInfo::getInstance(void)::TXTextStyle_V4TrackingInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTextStyle::TXTextStyle_V4TrackingInfo::getInstance(void)::TXTextStyle_V4TrackingInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTextStyle::TXTextStyle_V4TrackingInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTextStyle::TXTextStyle_V4TrackingInfo::_TXTextStyle_V4TrackingInfo;
}

void std::__call_once_param<std::tuple<TXTextStyle::TXTextStyle_V4TrackingInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTextStyle::TXTextStyle_V4TrackingInfo::_TXTextStyle_V4TrackingInfo) {
    operator new();
  }
}

void sub_1B7646A04(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTextStyle::TXTextStyle_V4TrackingInfo *TXTextStyle::TXTextStyle_V4TrackingInfo::TXTextStyle_V4TrackingInfo(TXTextStyle::TXTextStyle_V4TrackingInfo *this)
{
  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -1.0, 1.0, 0.01, 0.0001, 100.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTextStyle::TXTextStyle_V4TrackingInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10B2390;
  *((void *)this + 10) = &unk_1F10B23B0;
  return this;
}

void sub_1B7646ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions::~OZChannelImageWithOptions(OZChannelImageWithOptions *this)
{
  *(void *)this = &unk_1F116A270;
  *((void *)this + 2) = &unk_1F116A5C8;
  OZChannelEnum::~OZChannelEnum((OZChannelImageWithOptions *)((char *)this + 1328));
  OZChannelPosition::~OZChannelPosition((OZChannelImageWithOptions *)((char *)this + 624));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 472));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 320));
  OZChannelImageForImageWithOptions::~OZChannelImageForImageWithOptions((OZChannelImageWithOptions *)((char *)this + 136));

  OZCompoundChannel::~OZCompoundChannel(this);
}

{
  uint64_t vars8;

  OZChannelImageWithOptions::~OZChannelImageWithOptions(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelFontBase::~OZChannelFontBase(PCString *this)
{
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)&unk_1F116F8F8;
  this[2].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)&unk_1F116FC68;
  PCString::~PCString(this + 82);
  PCString::~PCString(this + 81);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)&this[49]);
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)&this[17]);

  OZCompoundChannel::~OZCompoundChannel((OZCompoundChannel *)this);
}

void std::__call_once_param<std::tuple<OZLayeredMaterial_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7646C74(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZLayeredMaterial_Factory::OZLayeredMaterial_Factory(OZLayeredMaterial_Factory *this)
{
  long long v3 = xmmword_1B7E79200;
  long long v4 = xmmword_1B7E791F0;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  void *v2 = &unk_1F10B2538;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F10B2408;
  *((void *)this + 16) = &unk_1F10B24E0;
}

void sub_1B7646D44(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZLayeredMaterial_Factory::create(OZLayeredMaterial_Factory *this, const PCString *a2)
{
}

void sub_1B7646DE0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40CDC59796);
  _Unwind_Resume(a1);
}

void OZLayeredMaterial_Factory::createCopy(OZLayeredMaterial_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7646EA4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40CDC59796);
  _Unwind_Resume(a1);
}

void OZLayeredMaterial_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZLayeredMaterial_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Material Short Desc");
}

PCString *OZLayeredMaterial_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "LibraryMaterialIcon");
}

void OZLayeredMaterial_Factory::createMaterialCopy(OZLayeredMaterial_Factory *this, OZMaterialBase *a2)
{
}

{
  operator new();
}

void sub_1B7646FA0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40CDC59796);
  _Unwind_Resume(a1);
}

void sub_1B7647058(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40CDC59796);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<OZStyle>::shared_ptr[abi:ne180100]<OZStyle,void>(void *a1, void *a2)
{
  long long v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  *exceptiouint64_t n = MEMORY[0x1E4FBA438] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA2E0], MEMORY[0x1E4FBA208]);
}

uint64_t TXTextStyleManager::getInstance(TXTextStyleManager *this)
{
  if (TXTextStyleManager::getInstance(void)::once != -1) {
    dispatch_once(&TXTextStyleManager::getInstance(void)::once, &__block_literal_global_51);
  }
  return TXTextStyleManager::_instance;
}

void ___ZN18TXTextStyleManager11getInstanceEv_block_invoke()
{
}

void sub_1B7647194(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void TXTextStyleManager::TXTextStyleManager(TXTextStyleManager *this)
{
  PCSingleton::PCSingleton(this, 0);
  void *v1 = &unk_1F10B2628;
  char v2 = v1 + 1;
  PCURL::PCURL((PCURL *)&v4, @"Text Style Name");
  OZChannelBase::getNextUniqueID(v3);
  TXTextStyle::create(v2);
}

void sub_1B76472A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)v10 + 2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  PCSingleton::~PCSingleton(v10);
  _Unwind_Resume(a1);
}

void TXTextStyleManager::~TXTextStyleManager(TXTextStyleManager *this)
{
  *(void *)this = &unk_1F10B2628;
  char v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  PCSingleton::~PCSingleton(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F10B2628;
  char v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PCSingleton::~PCSingleton(this);

  JUMPOUT(0x1BA9BFBA0);
}

void *TXTextStyleRun::TXTextStyleRun(void *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *uint64_t result = &unk_1F10B2660;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  result[3] = 0;
  return result;
}

double TXTextStyleRun::TXTextStyleRun(void *a1, uint64_t *a2, double *a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  *a1 = &unk_1F10B2660;
  a1[1] = v4;
  a1[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  double result = *a3;
  a1[3] = *(void *)a3;
  return result;
}

uint64_t TXTextStyleRun::TXTextStyleRun(uint64_t result, uint64_t *a2, int a3, int a4)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  *(void *)double result = &unk_1F10B2660;
  *(void *)(result + 8) = v5;
  *(void *)(result + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(result + 24) = a3;
  *(_DWORD *)(result + 28) = a4;
  return result;
}

double TXTextStyleRun::TXTextStyleRun(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F10B2660;
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t TXTextStyleRun::writeHeader(TXTextStyleRun *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&TXStyleRunScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 520);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 7, *(unsigned int *)(*((void *)this + 1) + 96));
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 9, *((unsigned int *)this + 6));
  uint64_t v4 = *((unsigned int *)this + 7);
  uint64_t v5 = *(uint64_t (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 144);

  return v5(a2, 10, v4);
}

uint64_t TXTextStyleRun::writeBody(TXTextStyleRun *this, PCSerializerWriteStream *a2)
{
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t TXTextStyleRun::parseBegin(TXTextStyleRun *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t TXTextStyleRun::parseElement()
{
  return 1;
}

void TXTextStyleRun::~TXTextStyleRun(TXTextStyleRun *this)
{
  *(void *)this = &unk_1F10B2660;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F10B2660;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1BA9BFBA0);
}

void TXTextureGlyph::TXTextureGlyph(TXTextureGlyph *this, __int16 a2, __int16 a3, TXFont *a4)
{
  TXGlyph::TXGlyph(this, a2, a3, a4);
  v5[4] = 0;
  void *v5 = &unk_1F10B26D0;
  v5[3] = v5 + 4;
  v5[5] = 0;
  PCSharedMutex::PCSharedMutex((PCSharedMutex *)(v5 + 6));
  *((_DWORD *)this + 38) = 0;
}

void sub_1B76476F8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v2, &v1->var4.var0->isa);
  OZChannelBase::setRangeName(v1, v4);
  _Unwind_Resume(a1);
}

void TXTextureGlyph::~TXTextureGlyph(TXTextureGlyph *this)
{
  *(void *)this = &unk_1F10B26D0;
  uint64_t v2 = (std::mutex *)((char *)this + 48);
  PCSharedMutex::lock((std::mutex *)((char *)this + 48));
  uint64_t v3 = (char *)*((void *)this + 3);
  uint64_t v4 = (char *)this + 32;
  if (v3 != (char *)this + 32)
  {
    do
    {
      uint64_t v5 = *((void *)v3 + 6);
      if (v5) {
        MEMORY[0x1BA9BFBA0](v5, 0x1000C40A735B7EELL);
      }
      *((void *)v3 + 6) = 0;
      uint64_t v6 = (char *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          CMTime v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          CMTime v7 = (char *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = v4;
  PCSharedMutex::unlock(v2);
  PCSharedMutex::~PCSharedMutex(v2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 24, *((void **)this + 4));

  OZChannelBase::setRangeName((OZChannelBase *)this, v9);
}

void TXTextureGlyph::cacheMetrics(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 48);
  PCSharedMutex::lock((std::mutex *)(a1 + 48));
  unsigned int v7 = *(_DWORD *)(a1 + 152);
  if (v7 >= 0x40)
  {
    BOOL v8 = *(uint64_t **)(a1 + 24);
    if (v8 != (uint64_t *)(a1 + 32))
    {
      do
      {
        unsigned int v9 = *((_DWORD *)v8 + 14);
        if (v9 > 0x1F)
        {
          *((_DWORD *)v8 + 14) = v9 - 32;
          uint64_t v12 = (uint64_t *)v8[1];
          if (v12)
          {
            do
            {
              uint64_t v11 = v12;
              uint64_t v12 = (uint64_t *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              uint64_t v11 = (uint64_t *)v8[2];
              BOOL v13 = *v11 == (void)v8;
              BOOL v8 = v11;
            }
            while (!v13);
          }
        }
        else
        {
          uint64_t v10 = v8[6];
          if (v10) {
            MEMORY[0x1BA9BFBA0](v10, 0x1000C40A735B7EELL);
          }
          v8[6] = 0;
          uint64_t v11 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v8);
          operator delete(v8);
        }
        BOOL v8 = v11;
      }
      while (v11 != (uint64_t *)(a1 + 32));
      unsigned int v7 = *(_DWORD *)(a1 + 152);
    }
    v7 -= 32;
    *(_DWORD *)(a1 + 152) = v7;
  }
  *(_DWORD *)(a1 + 152) = v7 + 1;
  uint64_t v15 = a2;
  uint64_t v14 = std::__tree<std::__value_type<PCHash128,TXTextureGlyph::CachedMetrics>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,TXTextureGlyph::CachedMetrics>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,TXTextureGlyph::CachedMetrics>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>((uint64_t **)(a1 + 24), (const PCHash128 *)a2, (uint64_t)&std::piecewise_construct, &v15);
  *((void *)v14 + 6) = a3;
  v14[14] = v7;
  v14[15] = 0;
  PCSharedMutex::unlock(v6);
}

void sub_1B7647974(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextureGlyph::getCachedMetrics(TXTextureGlyph *this, const PCHash128 *a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 48);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 48));
  uint64_t v5 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>((uint64_t)this + 24, a2);
  if ((void *)((char *)this + 32) == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5[6];
  }
  PCSharedMutex::unlock_shared(v4);
  return v6;
}

void sub_1B76479F8(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock_shared(v1);
  _Unwind_Resume(a1);
}

_DWORD *std::__tree<std::__value_type<PCHash128,TXTextureGlyph::CachedMetrics>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,TXTextureGlyph::CachedMetrics>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,TXTextureGlyph::CachedMetrics>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__find_equal<PCHash128>((uint64_t)a1, &v11, a2);
  unsigned int v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    unsigned int v7 = operator new(0x40uLL);
    unsigned int v9 = *a4;
    unsigned char v7[8] = **a4;
    v7[9] = v9[1];
    v7[10] = v9[2];
    v7[11] = v9[3];
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 7) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

BOOL TXTranscriptionSegment::operator==(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(void *)(a1 + 24) == *(void *)(a2 + 24)
      && *(void *)(a1 + 32) == *(void *)(a2 + 32)
      && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40)
      && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
      && PCString::compare((PCString *)a1, (const PCString *)a2) == kCFCompareEqualTo;
}

void TXTranscriptionGenerator::TXTranscriptionGenerator(TXTranscriptionGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
}

void sub_1B7647FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, OZChannelEnum *a14, PCString a15, PCString a16)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v16 + 65880));
  PCString::~PCString(v23);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v18, *(void **)(v22 + 32));
  uint64_t v24 = *(void **)v22;
  if (*(void *)v22)
  {
    *(void *)(v22 + 8) = v24;
    operator delete(v24);
  }
  a16.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)(v16 + 0x10000);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)(v16 + 65512);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)(v16 + 65488);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)(v16 + 65464);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)(v16 + 65440);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  OZChannel::~OZChannel(v21);
  OZChannelEnum::~OZChannelEnum(v20);
  OZChannel::~OZChannel(v19);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChannelFolder::~OZChannelFolder(v17);
  TXFileLoadingGenerator::~TXFileLoadingGenerator((PCString *)v16);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::TXTranscriptionGenerator(TXTranscriptionGenerator *this, const TXTranscriptionGenerator *a2, uint64_t a3)
{
  uint64_t v5 = (void *)((char *)this + 64464);
  TXFileLoadingGenerator::TXFileLoadingGenerator(this, a2, a3);
  *(void *)uint64_t v6 = &unk_1F10B2740;
  *(void *)(v6 + 200) = &unk_1F10B2C90;
  *(void *)(v6 + 216) = &unk_1F10B3568;
  *(void *)(v6 + 248) = &unk_1F10B37C0;
  *(void *)(v6 + 6728) = &unk_1F10B3818;
  *(void *)(v6 + 18976) = &unk_1F10B38F0;
  void *v5 = &unk_1F10B3918;
  unsigned int v7 = (OZChannelFolder *)(v6 + 64472);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v6 + 64472), (const OZChannelFolder *)((char *)a2 + 64472), (OZChannelFolder *)(v6 + 648));
  OZChannelEnum::OZChannelEnum((TXTranscriptionGenerator *)((char *)this + 64600), (const TXTranscriptionGenerator *)((char *)a2 + 64600), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 64856), (const OZChannelBase *)((char *)a2 + 64856), v7);
  *((void *)this + 8107) = &unk_1F1101490;
  *((void *)this + 8109) = &unk_1F11017F0;
  OZChannelEnum::OZChannelEnum((TXTranscriptionGenerator *)((char *)this + 65008), (const TXTranscriptionGenerator *)((char *)a2 + 65008), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 65264), (const OZChannelBase *)((char *)a2 + 65264), v7);
  *((void *)this + 8158) = &unk_1F1100CF0;
  *((void *)this + 8160) = &unk_1F1101050;
  *((void *)this + 8178) = 0;
  *((void *)this + 8179) = 0;
  *((void *)this + 8177) = 0;
  std::vector<TXTranscriptionSegment>::__init_with_size[abi:ne180100]<TXTranscriptionSegment*,TXTranscriptionSegment*>((void *)this + 8177, *((void *)a2 + 8177), *((void *)a2 + 8178), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 8178) - *((void *)a2 + 8177)) >> 4));
  *((_OWORD *)this + 4090) = 0u;
  *((void *)this + 8182) = 0;
  std::vector<TXTranscriptionSegment>::__init_with_size[abi:ne180100]<TXTranscriptionSegment*,TXTranscriptionSegment*>((void *)this + 8180, *((void *)a2 + 8180), *((void *)a2 + 8181), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 8181) - *((void *)a2 + 8180)) >> 4));
  *(_OWORD *)((char *)this + 65480) = 0u;
  *(_OWORD *)((char *)this + 65496) = 0u;
  *(_OWORD *)((char *)this + 65464) = 0u;
  std::vector<TXTranscriptionSegment>::__init_with_size[abi:ne180100]<TXTranscriptionSegment*,TXTranscriptionSegment*>((void *)this + 8186, *((void *)a2 + 8186), *((void *)a2 + 8187), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 8187) - *((void *)a2 + 8186)) >> 4));
  *((void *)this + 8197) = 0;
  *(_OWORD *)((char *)this + 65544) = 0u;
  *(_OWORD *)((char *)this + 65560) = 0u;
  *(_OWORD *)((char *)this + 65512) = 0u;
  *(_OWORD *)((char *)this + 65528) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 8195, *((const void **)a2 + 8195), *((void *)a2 + 8196), (uint64_t)(*((void *)a2 + 8196) - *((void *)a2 + 8195)) >> 2);
  *((void *)this + 8199) = 0;
  *((void *)this + 8198) = (char *)this + 65592;
  *((void *)this + 8200) = 0;
  *((_DWORD *)this + 16402) = -1;
  uint64_t v8 = MEMORY[0x1E4F1F9F8];
  long long v9 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)((char *)this + 65612) = *MEMORY[0x1E4F1F9F8];
  uint64_t v10 = *(void *)(v8 + 16);
  *(void *)((char *)this + 65628) = v10;
  *(_OWORD *)((char *)this + 65636) = v9;
  *(void *)((char *)this + 65652) = v10;
  PCString::PCString((PCString *)this + 8208, (const PCString *)a2 + 8208);
  *((unsigned char *)this + 65672) = *((unsigned char *)a2 + 65672);
  *((unsigned char *)this + 65673) = 1;
  *((void *)this + 8210) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 65688) = *(_OWORD *)v8;
  *((void *)this + 8213) = *(void *)(v8 + 16);
  *((void *)this + 8214) = 0;
  long long v11 = *(_OWORD *)((char *)a2 + 65720);
  *((void *)this + 8217) = *((void *)a2 + 8217);
  *(_OWORD *)((char *)this + 65720) = v11;
  *((void *)this + 8223) = 0;
  *((_DWORD *)this + 16448) = 0;
  *((unsigned char *)this + 65796) = 0;
  *((_OWORD *)this + 4109) = 0u;
  *((_OWORD *)this + 4110) = 0u;
  *((unsigned char *)this + 65776) = 0;
  *(_OWORD *)((char *)this + 65800) = *(_OWORD *)v8;
  *((void *)this + 8227) = *(void *)(v8 + 16);
  *((_DWORD *)this + 16456) = 0;
  PCColor::PCColor((PCColor *)((char *)this + 65832));
  *((unsigned char *)this + 65888) = 0;
  *(_OWORD *)((char *)this + 65896) = *(_OWORD *)v8;
  *((void *)this + 8239) = *(void *)(v8 + 16);
  *((_DWORD *)this + 16480) = 0;
  *((unsigned char *)this + 65936) = 0;
  *(_OWORD *)((char *)this + 65944) = *(_OWORD *)v8;
  *((void *)this + 8245) = *(void *)(v8 + 16);
  *((_DWORD *)this + 16492) = 0;
  *((unsigned char *)this + 65984) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 8249);
  *((_OWORD *)this + 4126) = 0u;
  *((_OWORD *)this + 41TXTextLayout::setAllParagraphsDirty(this - 25) = 0u;
  *((unsigned char *)this + 66032) = 1;
  *((_DWORD *)this + 16509) = 0;
}

void sub_1B76485FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, OZChannelEnum *a12, OZChannel *a13, OZChannelEnum *a14, OZChannelFolder *a15, uint64_t a16)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v16 + 65880));
  PCString::~PCString(v20);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v18, *(void **)(v17 + 32));
  uint64_t v22 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v22;
    operator delete(v22);
  }
  a16 = v16 + 0x10000;
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = a9;
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = a10;
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = a11;
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  OZChannel::~OZChannel(v19);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChannel::~OZChannel(a13);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChannelFolder::~OZChannelFolder(a15);
  TXFileLoadingGenerator::~TXFileLoadingGenerator((PCString *)v16);
  _Unwind_Resume(a1);
}

void sub_1B76486E0()
{
}

void sub_1B76486E8()
{
}

void sub_1B76486F0()
{
}

void sub_1B76486F8()
{
}

void sub_1B7648700()
{
}

void sub_1B7648708()
{
}

void sub_1B7648710()
{
}

void TXTranscriptionGenerator::~TXTranscriptionGenerator(TXTranscriptionGenerator *this)
{
  uint64_t v2 = (char *)this + 65560;
  *(void *)this = &unk_1F10B2740;
  *((void *)this + TXTextLayout::setAllParagraphsDirty(this - 25) = &unk_1F10B2C90;
  *((void *)this + 27) = &unk_1F10B3568;
  *((void *)this + 31) = &unk_1F10B37C0;
  *((void *)this + 841) = &unk_1F10B3818;
  *((void *)this + 2372) = &unk_1F10B38F0;
  *((void *)this + 8058) = &unk_1F10B3918;
  PCString::~PCString((PCString *)this + 8249);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 8235);
  PCString::~PCString((PCString *)this + 8208);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 65584, *((void **)v2 + 4));
  uint64_t v3 = *(void **)v2;
  if (*(void *)v2)
  {
    *((void *)v2 + 1) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)((char *)this + 0x10000);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 65512);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 65488);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 65464);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 65440);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 65416);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&v4);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 65264));
  OZChannelEnum::~OZChannelEnum((TXTranscriptionGenerator *)((char *)this + 65008));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 64856));
  OZChannelEnum::~OZChannelEnum((TXTranscriptionGenerator *)((char *)this + 64600));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 64472));
  TXFileLoadingGenerator::~TXFileLoadingGenerator((PCString *)this);
}

{
  uint64_t vars8;

  TXTranscriptionGenerator::~TXTranscriptionGenerator(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'TXTranscriptionGenerator::~TXTranscriptionGenerator(TXTranscriptionGenerator *this)
{
}

{
  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 216));
}

{
  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 248));
}

{
  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 6728));
}

{
  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 18976));
}

{
  uint64_t vars8;

  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 200));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 216));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 248));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 6728));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTranscriptionGenerator::~TXTranscriptionGenerator((TXTranscriptionGenerator *)((char *)this - 18976));

  JUMPOUT(0x1BA9BFBA0);
}

OZNotificationManager *TXTranscriptionGenerator::notify(TXTranscriptionGenerator *this, char a2)
{
  double result = TXTextLayout::notify(this, a2);
  if ((a2 & 8) != 0)
  {
    uint64_t v5 = *(void *)((*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200) + 1584);
    double result = *(OZNotificationManager **)(v5 + 168);
    if (result)
    {
      if (OZNotificationManager::wasChannelModified(result, (const OZChannelBase *)((char *)this + 65008))
        || (double result = *(OZNotificationManager **)(v5 + 168)) != 0
        && (double result = (OZNotificationManager *)OZNotificationManager::wasChannelModified(result, (const OZChannelBase *)((char *)this + 65264)), result))
      {
        uint64_t v6 = *(uint64_t (**)(TXTranscriptionGenerator *))(*(void *)this + 1240);
        return (OZNotificationManager *)v6(this);
      }
    }
  }
  return result;
}

OZNotificationManager *non-virtual thunk to'TXTranscriptionGenerator::notify(TXTranscriptionGenerator *this, char a2)
{
  return TXTranscriptionGenerator::notify((TXTranscriptionGenerator *)((char *)this - 18976), a2);
}

BOOL TXTranscriptionGenerator::isEmpty(TXTranscriptionGenerator *this)
{
  uint64_t v1 = (PCString *)*((void *)this + 8177);
  uint64_t v2 = (PCString *)*((void *)this + 8178);
  if (v1 == v2) {
    return 1;
  }
  do
  {
    uint64_t v3 = objc_msgSend((id)-[__CFString stringByTrimmingCharactersInSet:](PCString::ns_str(v1), "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E4F28B88], "whitespaceAndNewlineCharacterSet")), "length");
    BOOL result = v3 == 0;
    v1 += 6;
    if (v3) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = v1 == v2;
    }
  }
  while (!v5);
  return result;
}

uint64_t TXTranscriptionGenerator::hitCheck(TXTranscriptionGenerator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (TXTranscriptionGenerator::isEmpty(a1)) {
    return (uint64_t)a1 + 200;
  }

  return TXTextLayout::hitCheck((uint64_t)a1, a2, a3, a4, a5, a6);
}

uint64_t non-virtual thunk to'TXTranscriptionGenerator::hitCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = a1 - 200;
  if (TXTranscriptionGenerator::isEmpty((TXTranscriptionGenerator *)(a1 - 200))) {
    return a1;
  }

  return TXTextLayout::hitCheck(v12, a2, a3, a4, a5, a6);
}

double TXTranscriptionGenerator::generateString(TXTranscriptionGenerator *this, PCString *a2, CMTime *a3)
{
  BOOL v5 = (char *)this + 65416;
  uint64_t v6 = (char *)this + 60976;
  CMTime v13 = *a3;
  unsigned int v7 = (CMTime *)((char *)this + 65688);
  CMTime time1 = *a3;
  CMTime time2 = *(CMTime *)((unsigned char *)this + 2737);
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    uint64_t v8 = *(void *)v5;
    uint64_t v9 = *((void *)v5 + 1);
    if (*(void *)v5 != v9)
    {
      do
      {
        *(unsigned char *)(v8 + 40) = 1;
        v8 += 48;
      }
      while (v8 != v9);
    }
    uint64_t v10 = *((void *)v5 + 12);
    for (uint64_t i = *((void *)v5 + 13); v10 != i; v10 += 48)
      *(unsigned char *)(v10 + 40) = 1;
    v5[257] = 1;
    *(void *)(v6 + 2828) = 0;
  }
  if (TXTranscriptionGenerator::hasBlockSequencing(this))
  {
    if (*((void *)v5 + 12) == *((void *)v5 + 13)) {
      TXTranscriptionGenerator::computeTranscriptionBlocks(this, &v13);
    }
    TXTranscriptionGenerator::computeActiveTranscriptionFromBlocks((PCString *)this, &v13);
    TXTranscriptionGenerator::generateStringByBlock(this, &v13, (PCSharedCount *)&time1);
    PCString::set(a2, (const PCString *)&time1);
  }
  else
  {
    TXTranscriptionGenerator::computeActiveTranscriptionFromWordSegments(this, &v13);
    TXTranscriptionGenerator::generateStringByWord(this, (PCSharedCount *)&time1);
    PCString::set(a2, (const PCString *)&time1);
  }
  PCString::~PCString((PCString *)&time1);
  if (v5[257])
  {
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 64232, *((void **)this + 8030));
    *((void *)this + 8029) = (char *)this + 64240;
    *((void *)this + 8031) = 0;
    *((void *)this + 8030) = 0;
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v6, *((void **)v6 + 1));
    *(void *)uint64_t v6 = v6 + 8;
    *((void *)v6 + 2) = 0;
    *((void *)v6 + 1) = 0;
    TXTranscriptionGenerator::invalidateTranscriptionByLineCache(this);
    *(void *)(v6 + 2828) = (*((_DWORD *)v6 + 707) + *((_DWORD *)v6 + 708));
    v5[257] = 0;
  }
  double result = *(double *)&v13.value;
  CMTime *v7 = v13;
  return result;
}

void sub_1B7648F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, PCString a17)
{
}

BOOL TXTranscriptionGenerator::hasBlockSequencing(TXTranscriptionGenerator *this)
{
  uint64_t v1 = (int *)((char *)this + 65792);
  int v2 = *((_DWORD *)this + 16448);
  if (!v2)
  {
    int v2 = 2;
    int *v1 = 2;
    uint64_t v3 = (char *)this + 1200;
    uint64_t v4 = (char *)*((void *)this + 151);
    if (v4 != (char *)this + 1200)
    {
      BOOL v5 = (const CMTime *)MEMORY[0x1E4F1FA48];
      while (1)
      {
        uint64_t v6 = *((void *)v4 + 2);
        unint64_t v7 = *(void *)(v6 + 8);
        long long v9 = xmmword_1B7E78230;
        if (OZFactory::isKindOfClass(v7, (int32x4_t *)&v9))
        {
          if (OZChannel::getValueAsInt((OZChannel *)(v6 + 29056), v5, 0.0) == 1
            && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 16) + 24))(v6 + 16, 1, 1)&& TXSequenceBehavior::getUnitSize((TXSequenceBehavior *)v6) == 6)
          {
            break;
          }
        }
        uint64_t v4 = (char *)*((void *)v4 + 1);
        if (v4 == v3)
        {
          int v2 = *v1;
          return v2 == 1;
        }
      }
      int v2 = 1;
      int *v1 = 1;
    }
  }
  return v2 == 1;
}

void TXTranscriptionGenerator::computeTranscriptionBlocks(TXTranscriptionGenerator *this, const CMTime *a2)
{
  uint64_t v3 = (char *)this + 65416;
  CMTime time = *(CMTime *)((char *)this + 65720);
  double Seconds = CMTimeGetSeconds(&time);
  *((_DWORD *)v3 + 48) = -1;
  for (uint64_t i = *(void *)v3; i != *((void *)v3 + 1); i += 48)
  {
    if (*(unsigned char *)(i + 40)) {
      BOOL v6 = *(double *)(i + 8) < Seconds;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      *((_DWORD *)v3 + 48) = *(void *)(i + 24);
      break;
    }
  }
  LineBreaksForEntireCFStringRef String = TXTranscriptionGenerator::getLineBreaksForEntireString(this, a2);
  uint64_t v75 = 0;
  double v76 = 0;
  long long v74 = &unk_1F10AD6E8;
  int v8 = *(_DWORD *)(LineBreaksForEntireString + 12);
  if (v8 <= 0) {
    int v9 = 0;
  }
  else {
    int v9 = (2 * v8) | 1;
  }
  PCArray<unsigned long,PCArray_Traits<unsigned long>>::resize((uint64_t)&v74, v8, v9);
  uint64_t v10 = *(unsigned int *)(LineBreaksForEntireString + 12);
  if ((int)v10 >= 1)
  {
    long long v11 = *(uint64_t **)(LineBreaksForEntireString + 16);
    uint64_t v12 = v76;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
      --v10;
    }
    while (v10);
  }
  int v14 = HIDWORD(v75);
  int NumLinesInParagraphBounds = (PCArray_base *)TXTextLayout::getNumLinesInParagraphBounds(this);
  __p = 0;
  uint64_t v72 = 0;
  char v73 = 0;
  if (v14)
  {
    int v16 = (int)NumLinesInParagraphBounds;
    int v17 = 0;
    int v18 = 0;
    do
    {
      if (v17 < 0 || SHIDWORD(v75) <= v17) {
        PCArray_base::badIndex(NumLinesInParagraphBounds);
      }
      uint64_t v19 = v76[v17];
      int NumLinesInParagraphBounds = (PCArray_base *)TXTranscriptionGenerator::isPhraseBreak(this, v19);
      if (++v18 == v16) {
        int v20 = 1;
      }
      else {
        int v20 = (int)NumLinesInParagraphBounds;
      }
      if (v20 == 1)
      {
        unsigned int v21 = (PCArray_base *)v72;
        if (v72 >= v73)
        {
          int NumLinesInParagraphBounds = (PCArray_base *)__p;
          uint64_t v23 = (v72 - (unsigned char *)__p) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v73 - (unsigned char *)__p;
          if ((v73 - (unsigned char *)__p) >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v73, v26);
            int NumLinesInParagraphBounds = (PCArray_base *)__p;
            unsigned int v21 = (PCArray_base *)v72;
          }
          else
          {
            uint64_t v27 = 0;
          }
          long long v28 = &v27[4 * v23];
          *(_DWORD *)long long v28 = v19;
          uint64_t v22 = v28 + 4;
          while (v21 != NumLinesInParagraphBounds)
          {
            int v29 = *((_DWORD *)v21 - 1);
            unsigned int v21 = (PCArray_base *)((char *)v21 - 4);
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          __p = v28;
          uint64_t v72 = v22;
          char v73 = &v27[4 * v26];
          if (NumLinesInParagraphBounds) {
            operator delete(NumLinesInParagraphBounds);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v72 = v19;
          uint64_t v22 = (char *)v21 + 4;
        }
        int v18 = 0;
        uint64_t v72 = v22;
      }
      ++v17;
    }
    while (v17 != v14);
  }
  PCSharedCount::PCSharedCount(&v67);
  long long v69 = 0u;
  long long v68 = 0u;
  LOBYTE(v70) = 1;
  HIDWORD(v70) = 0;
  uint64_t v30 = (*(uint64_t (**)(TXTranscriptionGenerator *))(*(void *)this + 216))(this);
  unsigned int v63 = v30;
  uint64_t v31 = v30;
  if (v72 != __p) {
    uint64_t v31 = *(unsigned int *)__p;
  }
  uint64_t v32 = *(void *)v3;
  uint64_t v61 = *((void *)v3 + 1);
  if (*(void *)v3 != v61)
  {
    LODWORD(v33) = 0;
    uint64_t v34 = 0;
    char v35 = 1;
    char v36 = 1;
    do
    {
      if (*(double *)(v32 + 8) >= Seconds)
      {
        if (v36) {
          *(void *)&long long v68 = *(void *)(v32 + 8);
        }
        CMTime v37 = PCString::ns_str((PCString *)v32);
        uint64_t v38 = v37;
        if (v35)
        {
          uint64_t v39 = (__CFString *)[(__CFString *)v37 stringByTrimmingLeadingWhitespace];
          int v40 = [(__CFString *)v38 length];
          uint64_t v34 = v34 + v40 - [(__CFString *)v39 length];
        }
        else
        {
          uint64_t v39 = v37;
        }
        v66.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
        PCString::set(&v66, v39);
        double v42 = *(double *)(v32 + 8);
        double v41 = *(double *)(v32 + 16);
        long long v43 = v68;
        int v44 = PCString::size(&v66);
        if (v44 >= 1)
        {
          int v45 = 0;
          double v46 = v42 + v41 - (*(double *)&v43 + *((double *)&v43 + 1));
          do
          {
            unsigned int v47 = PCString::size(&v66);
            if (v47 + v34 <= v31)
            {
              PCString::append((PCString *)&v67, &v66);
              *((double *)&v68 + 1) = v46 + *((double *)&v68 + 1);
              *((void *)&v69 + 1) += v47;
              v45 += v47;
              uint64_t v34 = v47 + v34;
            }
            else
            {
              unsigned int v48 = v31 - v34;
              if (v31 <= v34)
              {
                double v46 = *(double *)(v32 + 16);
                uint64_t v31 = v34;
              }
              else
              {
                PCString::substr(&v66, 0, v31 - v34, (CFStringRef *)&v65.var0);
                PCString::append((PCString *)&v67, &v65);
                *((void *)&v69 + 1) += v48;
                double v49 = *(double *)&v68 + *((double *)&v68 + 1);
                double v50 = (*(double *)(v32 + 8) + *(double *)(v32 + 16) - (*(double *)&v68 + *((double *)&v68 + 1)))
                    * ((double)v48
                     / (double)*(unint64_t *)(v32 + 32));
                *((double *)&v68 + 1) = *((double *)&v68 + 1) + v50;
                PCString::substr(&v66, (v31 - v34), v47 - v48, (CFStringRef *)&v64.var0);
                PCString::set(&v66, &v64);
                PCString::~PCString(&v64);
                double v42 = v49 + v50;
                double v46 = v46 - v50;
                v45 += v48;
                PCString::~PCString(&v65);
              }
              unint64_t v51 = *((void *)v3 + 13);
              if (v51 >= *((void *)v3 + 14))
              {
                uint64_t v54 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)this + 8189, (uint64_t)&v67);
              }
              else
              {
                PCString::PCString(*((PCString **)v3 + 13), (const PCString *)&v67);
                long long v52 = v68;
                long long v53 = v69;
                *(void *)(v51 + 40) = v70;
                *(_OWORD *)(v51 + 24) = v53;
                *(_OWORD *)(v51 + 8) = v52;
                uint64_t v54 = v51 + 48;
                *((void *)v3 + 13) = v51 + 48;
              }
              *((void *)v3 + 13) = v54;
              PCString::set((PCString *)&v67, "");
              long long v68 = *(unint64_t *)&v42;
              long long v69 = v31;
              unint64_t v33 = (v33 + 1);
              HIDWORD(v70) = v33;
              uint64_t v34 = v31;
              if (v33 >= (v72 - (unsigned char *)__p) >> 2) {
                uint64_t v31 = v63;
              }
              else {
                uint64_t v31 = *((unsigned int *)__p + v33);
              }
            }
          }
          while (v45 < v44);
        }
        PCString::~PCString(&v66);
        char v36 = 0;
        char v35 = 0;
      }
      v32 += 48;
    }
    while (v32 != v61);
  }
  unint64_t v55 = *((void *)v3 + 13);
  if (v55 >= *((void *)v3 + 14))
  {
    uint64_t v58 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)this + 8189, (uint64_t)&v67);
  }
  else
  {
    PCString::PCString(*((PCString **)v3 + 13), (const PCString *)&v67);
    long long v56 = v68;
    long long v57 = v69;
    *(void *)(v55 + 40) = v70;
    *(_OWORD *)(v55 + 24) = v57;
    *(_OWORD *)(v55 + 8) = v56;
    uint64_t v58 = v55 + 48;
    *((void *)v3 + 13) = v55 + 48;
  }
  *((void *)v3 + 13) = v58;
  PCString::~PCString((PCString *)&v67);
  if (__p)
  {
    uint64_t v72 = (char *)__p;
    operator delete(__p);
  }
  long long v74 = &unk_1F10AD6E8;
  if ((int)v75 < 0) {
    unsigned int v59 = 1;
  }
  else {
    unsigned int v59 = v75 & ~((int)v75 >> 31);
  }
  if (v59 == v75)
  {
    uint64_t v60 = v76;
    if (v75 < 0) {
      bzero(&v76[SHIDWORD(v75)], 8 * ~HIDWORD(v75) + 8);
    }
  }
  else
  {
    if (v59) {
      operator new[]();
    }
    uint64_t v60 = 0;
    if (v76) {
      MEMORY[0x1BA9BFB70](v76, 0x1000C8077774924);
    }
    double v76 = 0;
  }
  uint64_t v75 = v59;
  if (v60) {
    MEMORY[0x1BA9BFB70](v60, 0x1000C8077774924);
  }
}

void sub_1B76496D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14, PCString a15, PCString a16, PCString a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26)
{
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  PCArray<unsigned long,PCArray_Traits<unsigned long>>::~PCArray((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::computeActiveTranscriptionFromBlocks(PCString *this, CMTime *a2)
{
  uint64_t v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v35, v4);
  PCSharedCount::PCSharedCount(&v31);
  BOOL v5 = this + 8177;
  long long v33 = 0u;
  long long v32 = 0u;
  LOBYTE(v34) = 1;
  HIDWORD(v34) = 0;
  uint64_t var0 = (uint64_t)this[8189].var0;
  unint64_t v7 = this[8190].var0;
  while ((__CFString *)var0 != v7)
  {
    if (TXTranscriptionGenerator::isBlockActiveAtTime((uint64_t)this, var0, a2))
    {
      PCString::set((PCString *)&v31, (const PCString *)var0);
      long long v8 = *(_OWORD *)(var0 + 8);
      long long v9 = *(_OWORD *)(var0 + 24);
      uint64_t v34 = *(__CFString **)(var0 + 40);
      long long v32 = v8;
      long long v33 = v9;
      break;
    }
    var0 += 48;
  }
  PCString::PCString(&v27, (const PCString *)&v31);
  BOOL v10 = PCString::empty(&v27);
  PCString::~PCString(&v27);
  if (!v10 && !TXTranscriptionSegment::operator==((uint64_t)&v31, (uint64_t)&this[8249]))
  {
    uint64_t v12 = this[8180].var0;
    for (uint64_t i = this[8181].var0; i != v12; PCString::~PCString((PCString *)&i[-2].data))
      ;
    this[8181].uint64_t var0 = v12;
    v27.uint64_t var0 = 0;
    long long v28 = &v27;
    uint64_t v29 = 0x2020000000;
    uint64_t v30 = 0;
    v25[0] = 0;
    v25[1] = v25;
    double v25[2] = 0x2020000000;
    char v26 = 1;
    uint64_t v13 = v5->var0;
    int v14 = this[8178].var0;
    if (v5->var0 != v14)
    {
      int v15 = 0;
      do
      {
        int v16 = LODWORD(this[8201].var0) + v33;
        int length = v13->length;
        if (v16 <= length) {
          int v18 = v13->length;
        }
        else {
          int v18 = LODWORD(this[8201].var0) + v33;
        }
        if (v16 + DWORD2(v33) >= LODWORD(v13[1].isa) + length) {
          int v19 = LODWORD(v13[1].isa) + length;
        }
        else {
          int v19 = v16 + DWORD2(v33);
        }
        if (v19 >= v18)
        {
          int v20 = (void *)-[__CFString substringWithRange:](PCString::ns_str((PCString *)v13), "substringWithRange:", v18 - v13->length, v19 - v18);
          uint64_t v21 = [v20 length];
          v23[0] = MEMORY[0x1E4F143A8];
          v23[1] = *(void *)"";
          _OWORD v23[2] = ___ZN24TXTranscriptionGenerator36computeActiveTranscriptionFromBlocksERK6CMTime_block_invoke;
          CMTime v23[3] = &unk_1E616BE18;
          v23[7] = this;
          char v23[8] = v13;
          int v24 = v15;
          v23[4] = v20;
          v23[5] = &v27;
          v23[6] = v25;
          objc_msgSend(v20, "enumerateSubstringsInRange:options:usingBlock:", 0, v21, 3, v23);
        }
        ++v15;
        uint64_t v13 = (__CFString *)((char *)v13 + 48);
      }
      while (v13 != v14);
    }
    PCString::set(this + 8249, (const PCString *)&v31);
    long long v22 = v33;
    *(_OWORD *)&this[8250].uint64_t var0 = v32;
    *(_OWORD *)&this[8252].uint64_t var0 = v22;
    this[8254].uint64_t var0 = v34;
    _Block_object_dispose(v25, 8);
    _Block_object_dispose(&v27, 8);
  }
  PCString::~PCString((PCString *)&v31);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v35);
}

void sub_1B7649A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,PCString a25,uint64_t a26,uint64_t a27,uint64_t a28,PCString a29)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  PCString::~PCString(&a29);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v29 - 112));
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::generateStringByBlock(TXTranscriptionGenerator *this@<X0>, CMTime *a2@<X1>, PCSharedCount *a3@<X8>)
{
  PCSharedCount::PCSharedCount(a3);
  CMTime v10 = *(CMTime *)((char *)this + 65720);
  double Seconds = CMTimeGetSeconds(&v10);
  uint64_t v7 = *((void *)this + 8189);
  uint64_t v8 = *((void *)this + 8190);
  if (v7 != v8)
  {
    double v9 = Seconds;
    do
    {
      if (*(double *)(v7 + 8) >= v9 && TXTranscriptionGenerator::isBlockActiveAtTime((uint64_t)this, v7, a2)) {
        PCString::append((PCString *)a3, (const PCString *)v7);
      }
      v7 += 48;
    }
    while (v7 != v8);
  }
}

void sub_1B7649B54(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::computeActiveTranscriptionFromWordSegments(TXTranscriptionGenerator *this, CMTime *a2)
{
  uint64_t v3 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v28, v3);
  CMTime time = *(CMTime *)((char *)this + 65720);
  double Seconds = CMTimeGetSeconds(&time);
  BOOL v5 = (uint64_t *)((char *)this + 65416);
  uint64_t v7 = *((void *)this + 8180);
  for (uint64_t i = *((void *)this + 8181); i != v7; PCString::~PCString((PCString *)(i - 48)))
    ;
  *((void *)this + 8181) = v7;
  uint64_t v8 = *v5;
  uint64_t v9 = *((void *)this + 8178);
  if (*v5 != v9)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    char v12 = 1;
    do
    {
      if (*(unsigned char *)(v8 + 40)) {
        BOOL v13 = *(double *)(v8 + 8) < Seconds;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        if (!TXTranscriptionGenerator::isSegmentActiveAtTime(this, v8, a2)) {
          break;
        }
        PCString::PCString(&v23, (const PCString *)v8);
        long long v14 = *(_OWORD *)(v8 + 8);
        long long v15 = *(_OWORD *)(v8 + 24);
        LODWORD(v26) = *(void *)(v8 + 40);
        long long v24 = v14;
        *((void *)&v25 + 1) = *((void *)&v15 + 1);
        HIDWORD(v26) = v11;
        *(void *)&long long v25 = v10;
        if ((v12 & 1) != 0 && [(__CFString *)PCString::ns_str(&v23) hasPrefix:@" "])
        {
          CFStringRef v16 = (const __CFString *)[(__CFString *)PCString::ns_str(&v23) stringByTrimmingLeadingWhitespace];
          v22.uint64_t var0 = 0;
          PCString::set(&v22, v16);
          PCString::set(&v23, &v22);
          PCString::~PCString(&v22);
          *((void *)&v25 + 1) = PCString::size(&v23);
        }
        unint64_t v17 = *((void *)this + 8181);
        if (v17 >= *((void *)this + 8182))
        {
          uint64_t v20 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)this + 8180, (uint64_t)&v23);
        }
        else
        {
          PCString::PCString(*((PCString **)this + 8181), &v23);
          long long v18 = v24;
          long long v19 = v25;
          *(void *)(v17 + 40) = v26;
          *(_OWORD *)(v17 + 24) = v19;
          *(_OWORD *)(v17 + 8) = v18;
          uint64_t v20 = v17 + 48;
          *((void *)this + 8181) = v17 + 48;
        }
        *((void *)this + 8181) = v20;
        v10 += *((void *)&v25 + 1);
        PCString::~PCString(&v23);
        char v12 = 0;
      }
      ++v11;
      v8 += 48;
    }
    while (v8 != v9);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v28);
}

void sub_1B7649D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

void TXTranscriptionGenerator::generateStringByWord(TXTranscriptionGenerator *this@<X0>, PCSharedCount *a2@<X8>)
{
  uint64_t v4 = (char *)this + 65440;
  PCSharedCount::PCSharedCount(a2);
  BOOL v5 = *(PCString **)v4;
  BOOL v6 = (PCString *)*((void *)v4 + 1);
  if (*(PCString **)v4 != v6)
  {
    char v7 = 1;
    do
    {
      if (!v4[232] && (v7 & 1) == 0) {
        PCString::append((PCString *)a2, " ");
      }
      PCString::append((PCString *)a2, v5);
      char v7 = [(__CFString *)PCString::ns_str(v5) hasSuffix:@"\n"];
      v5 += 6;
    }
    while (v5 != v6);
  }
}

void sub_1B7649E48(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::invalidateTranscriptionByLineCache(TXTranscriptionGenerator *this)
{
  int v2 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v4, v2);
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)((char *)this + 65612) = *MEMORY[0x1E4F1F9F8];
  *(void *)((char *)this + 65628) = *(void *)(v3 + 16);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v4);
}

BOOL TXTranscriptionGenerator::isSegmentActiveAtTime(TXTranscriptionGenerator *a1, uint64_t a2, CMTime *a3)
{
  CMTime v12 = *a3;
  double Seconds = CMTimeGetSeconds(&v12);
  if (!TXTranscriptionGenerator::hasBlockSequencing(a1)) {
    return *(double *)(a2 + 8) <= Seconds;
  }
  ActiveTranscriptionByBlocuint64_t k = TXTranscriptionGenerator::getActiveTranscriptionByBlock(a1, a3);
  if (!*(unsigned char *)(a2 + 40)) {
    return 0;
  }
  uint64_t v8 = *((void *)ActiveTranscriptionByBlock + 1);
  if (*(void *)ActiveTranscriptionByBlock == v8) {
    return 0;
  }
  double v9 = *(double *)(a2 + 8);
  double v10 = *(double *)(v8 - 40) + *(double *)(v8 - 32);
  return vabdd_f64(v9, v10) >= 0.0000001 && v9 < v10;
}

BOOL TXTranscriptionGenerator::isBlockActiveAtTime(uint64_t a1, uint64_t a2, CMTime *a3)
{
  CMTime v8 = *a3;
  double Seconds = CMTimeGetSeconds(&v8);
  if (*(unsigned char *)(a2 + 40))
  {
    double v6 = *(double *)(a2 + 8);
    if (Seconds >= v6 && Seconds < v6 + *(double *)(a2 + 16)) {
      return 1;
    }
  }
  if (*(unsigned char *)(a1 + 65776)) {
    return TXTranscriptionSegment::operator==(a2, *(void *)(a1 + 65520) - 48);
  }
  return 0;
}

void ___ZN24TXTranscriptionGenerator36computeActiveTranscriptionFromBlocksERK6CMTime_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v10 = *(uint64_t **)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  PCString::PCString(&v20, (const PCString *)v9);
  long long v11 = *(_OWORD *)(v9 + 8);
  long long v12 = *(_OWORD *)(v9 + 24);
  uint64_t v23 = *(void *)(v9 + 40);
  long long v22 = v12;
  long long v21 = v11;
  BOOL v13 = (__CFString *)objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", a5, a6);
  v19.uint64_t var0 = 0;
  PCString::set(&v19, v13);
  PCString::set(&v20, &v19);
  PCString::~PCString(&v19);
  HIDWORD(v23) = *(_DWORD *)(a1 + 72);
  *(void *)&long long v22 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  *((void *)&v22 + 1) = [(__CFString *)v13 length];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)
    && [(__CFString *)v13 hasPrefix:@" "])
  {
    BOOL v13 = (__CFString *)[(__CFString *)v13 stringByTrimmingLeadingWhitespace];
    v19.uint64_t var0 = 0;
    PCString::set(&v19, v13);
    PCString::set(&v20, &v19);
    PCString::~PCString(&v19);
    *((void *)&v22 + 1) = [(__CFString *)v13 length];
  }
  long long v14 = v10 + 8181;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  unint64_t v15 = v10[8181];
  if (v15 >= v10[8182])
  {
    uint64_t v18 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>(v10 + 8180, (uint64_t)&v20);
  }
  else
  {
    PCString::PCString((PCString *)v10[8181], &v20);
    long long v16 = v21;
    long long v17 = v22;
    *(void *)(v15 + 40) = v23;
    *(_OWORD *)(v15 + 24) = v17;
    *(_OWORD *)(v15 + 8) = v16;
    uint64_t v18 = v15 + 48;
    uint64_t *v14 = v15 + 48;
  }
  uint64_t *v14 = v18;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += [(__CFString *)v13 length];
  PCString::~PCString(&v20);
}

void sub_1B764A1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
}

void TXTranscriptionGenerator::dirty(TXTranscriptionGenerator *this)
{
  uint64_t v1 = (char *)this + 65744;
  TXTextLayout::dirty(this);
  *(void *)uint64_t v1 = 0;
  *((_DWORD *)v1 + 12) = 0;
}

void non-virtual thunk to'TXTranscriptionGenerator::dirty(TXTranscriptionGenerator *this)
{
  uint64_t v1 = (char *)this + 65544;
  TXTextLayout::dirty((TXTranscriptionGenerator *)((char *)this - 200));
  *(void *)uint64_t v1 = 0;
  *((_DWORD *)v1 + 12) = 0;
}

{
  char *v1;

  uint64_t v1 = (char *)this + 65528;
  TXTextLayout::dirty((TXTranscriptionGenerator *)((char *)this - 216));
  *(void *)uint64_t v1 = 0;
  *((_DWORD *)v1 + 12) = 0;
}

void TXTranscriptionGenerator::loadFile(TXTranscriptionGenerator *this)
{
  int v2 = (uint64_t *)((char *)this + 65416);
  uint64_t v3 = (id *)((char *)this + 64448);
  uint64_t v4 = (void *)*((void *)this + 8221);
  BOOL v5 = (void *)[MEMORY[0x1E4F28B50] mainBundle];
  if (v4)
  {
    uint64_t v6 = [v5 pathForResource:v4 ofType:@"lproj"];
    if (v6
      || (uint64_t v7 = [v4 rangeOfString:@"-"], v7 != 0x7FFFFFFFFFFFFFFFLL)
      && ((uint64_t v14 = v7,
           unint64_t v15 = (void *)[v4 stringByReplacingOccurrencesOfString:@"-" withString:@"_"],
           (v6 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "pathForResource:ofType:", v15, @"lproj")) != 0)|| (uint64_t v16 = objc_msgSend(v15, "substringToIndex:", v14), (v6 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "pathForResource:ofType:", v16, @"lproj")) != 0)))
    {
      BOOL v5 = (void *)[MEMORY[0x1E4F28B50] bundleWithPath:v6];
    }
    else
    {
      BOOL v5 = (void *)[MEMORY[0x1E4F28B50] mainBundle];
    }
  }
  CMTime v8 = (__CFString *)(id)[v5 localizedStringForKey:@"SiriTitle_DefaultTextCapture" value:0 table:0];
  if ([(__CFString *)v8 isEqualToString:@"SiriTitle_DefaultTextCapture"])
  {

    uint64_t v18 = 0;
    v19.uint64_t var0 = 0;
    id v9 = [NSString alloc];
    PCURL::getAsFileSystemString((const __CFURL **)this + 8054, &v17);
    CMTime v8 = (__CFString *)[v9 initWithContentsOfFile:PCString::ns_str(&v17) usedEncoding:&v19 error:&v18];
    PCString::~PCString(&v17);
    if (!v8) {
      return;
    }
    *((unsigned char *)v3 + 8) = 1;
  }
  uint64_t v11 = *v2;
  for (uint64_t i = v2[1]; i != v11; PCString::~PCString((PCString *)(i - 48)))
    ;
  v2[1] = v11;
  v2[19] = v2[18];
  if ([(__CFString *)v8 hasPrefix:@"#siri\n"]) {
    TXTranscriptionGenerator::loadTranscription(this, (__CFString *)-[__CFString substringFromIndex:](v8, "substringFromIndex:", [@"#siri\n" length]));
  }
  else {
    TXTranscriptionGenerator::loadText(this, v8);
  }

  PCURL::getAsFileSystemString((const __CFURL **)this + 8054, &v19);
  long long v12 = PCString::ns_str(&v19);
  PCString::~PCString(&v19);
  BOOL v13 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "attributesOfItemAtPath:error:", v12, 0);
  if (*v3) {

  }
  id *v3 = (id)[v13 fileModificationDate];
}

void sub_1B764A50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, PCString a12)
{
}

uint64_t TXTranscriptionGenerator::loadTranscription(TXTranscriptionGenerator *this, __CFString *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)[(__CFString *)a2 componentsSeparatedByString:@"|"];
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t result = [v3 countByEnumeratingWithState:&v43 objects:v47 count:16];
  uint64_t v5 = result;
  if (result)
  {
    LODWORD(v6) = 0;
    uint64_t v7 = (char *)this + 65424;
    uint64_t v8 = *(void *)v44;
    CMTime v37 = (uint64_t *)((char *)this + 65416);
    char v35 = (char *)this + 65576;
    char v36 = (void **)((char *)this + 65560);
    do
    {
      uint64_t v9 = 0;
      uint64_t v6 = (int)v6;
      do
      {
        if (*(void *)v44 != v8) {
          objc_enumerationMutation(v3);
        }
        double v10 = objc_msgSend(*(id *)(*((void *)&v43 + 1) + 8 * v9), "componentsSeparatedByString:", @" ", v35);
        uint64_t v11 = (__CFString *)[v10 objectAtIndexedSubscript:0];
        objc_msgSend((id)objc_msgSend(v10, "objectAtIndexedSubscript:", 1), "doubleValue");
        uint64_t v13 = v12;
        objc_msgSend((id)objc_msgSend(v10, "objectAtIndexedSubscript:", 2), "doubleValue");
        uint64_t v15 = v14;
        unsigned int v16 = objc_msgSend((id)objc_msgSend(v10, "objectAtIndexedSubscript:", 3), "intValue");
        LODWORD(v10) = objc_msgSend((id)objc_msgSend(v10, "objectAtIndexedSubscript:", 4), "intValue");
        v38.uint64_t var0 = 0;
        PCString::set(&v38, v11);
        PCString::PCString(&v39, &v38);
        *(void *)&long long v40 = v13;
        *((void *)&v40 + 1) = v15;
        *(void *)&long long v41 = v16;
        *((void *)&v41 + 1) = v10;
        LOBYTE(v42) = 1;
        HIDWORD(v42) = 0;
        PCString v17 = *(PCString **)v7;
        if (*(void *)v7 >= *((void *)v7 + 1))
        {
          uint64_t v20 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>(v37, (uint64_t)&v39);
        }
        else
        {
          PCString::PCString(*(PCString **)v7, &v39);
          long long v18 = v40;
          long long v19 = v41;
          v17[5].uint64_t var0 = v42;
          *(_OWORD *)&v17[3].uint64_t var0 = v19;
          *(_OWORD *)&v17[1].uint64_t var0 = v18;
          uint64_t v20 = (uint64_t)&v17[6];
          *(void *)uint64_t v7 = v17 + 6;
        }
        *(void *)uint64_t v7 = v20;
        PCString::~PCString(&v39);
        PCString::~PCString(&v38);
        uint64_t v21 = [v3 count];
        int v22 = [(__CFString *)v11 hasSuffix:@"\n"];
        if (v21 == ++v6) {
          int v23 = 1;
        }
        else {
          int v23 = v22;
        }
        if (v23 == 1)
        {
          long long v25 = (char *)*((void *)v7 + 18);
          unint64_t v24 = *((void *)v7 + 19);
          if ((unint64_t)v25 >= v24)
          {
            PCString v27 = (char *)*v36;
            uint64_t v28 = (v25 - (unsigned char *)*v36) >> 2;
            unint64_t v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 62) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v30 = v24 - (void)v27;
            if (v30 >> 1 > v29) {
              unint64_t v29 = v30 >> 1;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v29;
            }
            if (v31)
            {
              long long v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v35, v31);
              PCString v27 = (char *)*((void *)v7 + 17);
              long long v25 = (char *)*((void *)v7 + 18);
            }
            else
            {
              long long v32 = 0;
            }
            long long v33 = &v32[4 * v28];
            *(_DWORD *)long long v33 = v6;
            uint64_t v26 = v33 + 4;
            while (v25 != v27)
            {
              int v34 = *((_DWORD *)v25 - 1);
              v25 -= 4;
              *((_DWORD *)v33 - 1) = v34;
              v33 -= 4;
            }
            *((void *)v7 + 17) = v33;
            *((void *)v7 + 18) = v26;
            *((void *)v7 + 19) = &v32[4 * v31];
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            *(_DWORD *)long long v25 = v6;
            uint64_t v26 = v25 + 4;
          }
          *((void *)v7 + 18) = v26;
        }
        ++v9;
      }
      while (v9 != v5);
      uint64_t result = [v3 countByEnumeratingWithState:&v43 objects:v47 count:16];
      uint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B764A844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, PCString a13)
{
  *uint64_t v13 = v14;
  PCString::~PCString(&a13);
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::loadText(TXTranscriptionGenerator *this, __CFString *a2)
{
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 65008), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v5 = [(__CFString *)a2 length];
  v11[0] = 0;
  v11[1] = v11;
  void v11[2] = 0x2020000000;
  void v11[3] = 0;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2020000000;
  int v10 = 0;
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2020000000;
  uint64_t v8[3] = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = *(void *)"";
  v6[2] = ___ZN24TXTranscriptionGenerator8loadTextEPK10__CFString_block_invoke;
  void v6[3] = &unk_1E616BE40;
  int v7 = ValueAsInt;
  v6[4] = v11;
  v6[5] = v8;
  v6[6] = v9;
  v6[7] = this;
  unsigned char v6[8] = a2;
  v6[9] = v5;
  -[__CFString enumerateSubstringsInRange:options:usingBlock:](a2, "enumerateSubstringsInRange:options:usingBlock:", 0, v5, 1027, v6);
  *((_WORD *)this + 32836) = 257;
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(v11, 8);
}

void sub_1B764A9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void ___ZN24TXTranscriptionGenerator8loadTextEPK10__CFString_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a1 + 56);
  int v10 = objc_msgSend(*(id *)(a1 + 64), "substringWithRange:", a5, a6);
  uint64_t v11 = v10;
  int v12 = *(_DWORD *)(a1 + 80);
  if (v12 == 1 || v12 == 2 && [v10 hasSuffix:@"."]) {
    uint64_t v11 = (void *)[v11 stringByAppendingString:@"\n"];
  }
  OZChannel::getValueAsDouble((OZChannel *)(v9 + 65264), MEMORY[0x1E4F1FA48], 0.0);
  double v14 = v13;
  PCURL::PCURL((PCURL *)&v39, v11);
  uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  uint64_t v17 = [v11 length];
  PCString::PCString(&v40, &v39);
  long long v18 = (PCString **)(v9 + 65424);
  *(void *)&long long v41 = v15;
  *((double *)&v41 + 1) = v14;
  *(void *)&long long v42 = v16;
  *((void *)&v42 + 1) = v17;
  LOBYTE(v43) = 1;
  HIDWORD(v43) = 0;
  PCString::~PCString(&v39);
  unint64_t v19 = *(void *)(v9 + 65424);
  if (v19 >= *(void *)(v9 + 65432))
  {
    uint64_t v22 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)(v9 + 65416), (uint64_t)&v40);
  }
  else
  {
    PCString::PCString(*v18, &v40);
    long long v20 = v41;
    long long v21 = v42;
    *(void *)(v19 + 40) = v43;
    *(_OWORD *)(v19 + 24) = v21;
    *(_OWORD *)(v19 + 8) = v20;
    uint64_t v22 = v19 + 48;
    uint64_t *v18 = (PCString *)(v19 + 48);
  }
  uint64_t *v18 = (PCString *)v22;
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v14
                                                              + *(double *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += [v11 length];
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  uint64_t v23 = *(void *)(a1 + 72);
  if (([v11 hasSuffix:@"."] & 1) != 0
    || ((v24 = [v11 hasSuffix:@".\n"], a5 + a6 == v23) ? (int v25 = 1) : (int v25 = v24), v25 == 1))
  {
    *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(double *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24)
                                                                + 0.5;
    unint64_t v26 = *(void *)(v9 + 65576);
    uint64_t v27 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v28 = *(char **)(v9 + 65568);
    if ((unint64_t)v28 >= v26)
    {
      uint64_t v30 = *(char **)(v9 + 65560);
      uint64_t v31 = (v28 - v30) >> 2;
      if ((unint64_t)(v31 + 1) >> 62) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v32 = v26 - (void)v30;
      unint64_t v33 = (uint64_t)(v26 - (void)v30) >> 1;
      if (v33 <= v31 + 1) {
        unint64_t v33 = v31 + 1;
      }
      if (v32 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v33;
      }
      if (v34)
      {
        char v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v9 + 65576, v34);
        uint64_t v30 = *(char **)(v9 + 65560);
        uint64_t v28 = *(char **)(v9 + 65568);
      }
      else
      {
        char v35 = 0;
      }
      char v36 = &v35[4 * v31];
      CMTime v37 = &v35[4 * v34];
      *(_DWORD *)char v36 = *(_DWORD *)(v27 + 24);
      unint64_t v29 = v36 + 4;
      while (v28 != v30)
      {
        int v38 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *((_DWORD *)v36 - 1) = v38;
        v36 -= 4;
      }
      *(void *)(v9 + 65560) = v36;
      *(void *)(v9 + 65568) = v29;
      *(void *)(v9 + 65576) = v37;
      if (v30) {
        operator delete(v30);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v28 = *(_DWORD *)(v27 + 24);
      unint64_t v29 = v28 + 4;
    }
    *(void *)(v9 + 65568) = v29;
  }
  PCString::~PCString(&v40);
}

void sub_1B764ACB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, PCString a11)
{
  *int v12 = v11;
  PCString::~PCString(&a11);
  _Unwind_Resume(a1);
}

__n128 TXTranscriptionGenerator::setMediaOffset(TXTranscriptionGenerator *this, const CMTime *a2)
{
  __n128 result = *(__n128 *)&a2->value;
  *((void *)this + 8217) = a2->epoch;
  *(__n128 *)((char *)this + 65720) = result;
  return result;
}

__n128 non-virtual thunk to'TXTranscriptionGenerator::setMediaOffset(TXTranscriptionGenerator *this, const CMTime *a2)
{
  __n128 result = *(__n128 *)&a2->value;
  *((void *)this + 159) = a2->epoch;
  *(__n128 *)((char *)this + 1256) = result;
  return result;
}

double TXTranscriptionGenerator::transcriptionDuration(TXTranscriptionGenerator *this, int a2)
{
  uint64_t v4 = *((void *)this + 8177);
  uint64_t v5 = *((void *)this + 8178);
  if (v4 == v5)
  {
    double v9 = -2.0;
  }
  else
  {
    double v6 = 0.0;
    do
    {
      PCString::PCString((PCString *)&v19, (const PCString *)v4);
      long long v7 = *(_OWORD *)(v4 + 8);
      long long v8 = *(_OWORD *)(v4 + 24);
      v19.int64_t var3 = *(double *)(v4 + 40);
      *(_OWORD *)&v19.var0.unint64_t var1 = v7;
      *(_OWORD *)&v19.unint64_t var1 = v8;
      double v6 = v6 + (double)*((unint64_t *)&v8 + 1);
      PCString::~PCString((PCString *)&v19);
      v4 += 48;
    }
    while (v4 != v5);
    double v9 = v6 + -2.0;
  }
  CMTime v20 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  uint64_t v10 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200);
  if (v10)
  {
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), (__n128 *)&v19);
    operator*(300, (CMTime *)&v19, &v20);
  }
  OZRenderState::OZRenderState(&v19);
  v19.uint64_t var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v20;
  (*(void (**)(TXTranscriptionGenerator *, OZRenderState *))(*(void *)this + 1288))(this, &v19);
  uint64_t v11 = (char *)this + 1200;
  int v12 = (char *)*((void *)this + 151);
  double v13 = 2.22507386e-308;
  if (v12 != (char *)this + 1200)
  {
    double v14 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      uint64_t v15 = *((void *)v12 + 2);
      unint64_t v16 = *(void *)(v15 + 8);
      long long v21 = xmmword_1B7E78230;
      if (OZFactory::isKindOfClass(v16, (int32x4_t *)&v21))
      {
        if (OZChannel::getValueAsInt((OZChannel *)(v15 + 29056), v14, 0.0) == 1)
        {
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 16) + 24))(v15 + 16, 1, 1))
          {
            double v17 = TXSequenceBehavior::computeEndTime((TXSequenceBehavior *)v15, v9, &v20, a2);
            if (v17 >= v13) {
              double v13 = v17;
            }
          }
        }
      }
      int v12 = (char *)*((void *)v12 + 1);
    }
    while (v12 != v11);
  }
  return v13 + 1.0;
}

double non-virtual thunk to'TXTranscriptionGenerator::transcriptionDuration(TXTranscriptionGenerator *this, int a2)
{
  return TXTranscriptionGenerator::transcriptionDuration((TXTranscriptionGenerator *)((char *)this - 64464), a2);
}

uint64_t TXTranscriptionGenerator::adjustTranscriptionLineShiftForCurrentFont(TXTranscriptionGenerator *this, OZChannelDouble *a2)
{
  uint64_t result = TXTextLayout::getParagraphStyleAtIndex(this, 0);
  if (result)
  {
    TXTextLayout::getLineOffset(this, 0);
    uint64_t v5 = *(uint64_t (**)(TXTranscriptionGenerator *, OZChannelDouble *))(*(void *)this + 1312);
    return v5(this, a2);
  }
  return result;
}

uint64_t non-virtual thunk to'TXTranscriptionGenerator::adjustTranscriptionLineShiftForCurrentFont(TXTranscriptionGenerator *this, OZChannelDouble *a2)
{
  return TXTranscriptionGenerator::adjustTranscriptionLineShiftForCurrentFont((TXTranscriptionGenerator *)((char *)this - 64464), a2);
}

uint64_t TXTranscriptionGenerator::adjustTranscriptionLineShift(TXTranscriptionGenerator *this, OZChannelDouble *a2, double a3)
{
  uint64_t v5 = (char *)this + 65744;
  uint64_t result = (*(uint64_t (**)(OZChannelDouble *, void, void))(*(void *)a2 + 712))(a2, MEMORY[0x1E4F1FA48], 0);
  *(double *)uint64_t v5 = a3;
  *((void *)v5 + 1) = a2;
  return result;
}

uint64_t non-virtual thunk to'TXTranscriptionGenerator::adjustTranscriptionLineShift(TXTranscriptionGenerator *this, OZChannelDouble *a2, double a3)
{
  uint64_t result = (*(uint64_t (**)(OZChannelDouble *, void, void))(*(void *)a2 + 712))(a2, MEMORY[0x1E4F1FA48], 0);
  *((double *)this + 160) = a3;
  *((void *)this + 161) = a2;
  return result;
}

double TXTranscriptionGenerator::getLineShift(TXTranscriptionGenerator *this)
{
  uint64_t v1 = (void *)((char *)this + 65744);
  double result = *((double *)this + 8218);
  if (result > -0.0000001 && result < 0.0000001)
  {
    TXTextLayout::getLineOffset(this, 0);
    *(double *)uint64_t v1 = result;
    uint64_t v3 = v1[1];
    if (v3)
    {
      (*(void (**)(uint64_t, void, void))(*(void *)v3 + 712))(v3, MEMORY[0x1E4F1FA48], 0);
      return *(double *)v1;
    }
  }
  return result;
}

unint64_t TXTranscriptionGenerator::updateTranscriptionText(TXTranscriptionGenerator *this, const OZRenderState *a2)
{
  uint64_t v3 = (uint64_t *)((char *)this + 65416);
  uint64_t v4 = (char *)this + 64232;
  uint64_t v5 = (char *)this + 60976;
  (*(void (**)(TXTranscriptionGenerator *, const OZRenderState *))(*(void *)this + 1216))(this, a2);
  uint64_t v6 = *v3;
  uint64_t v7 = v3[1];
  if (*v3 != v7)
  {
    do
    {
      *(unsigned char *)(v6 + 40) = 1;
      v6 += 48;
    }
    while (v6 != v7);
  }
  TXTranscriptionGenerator::invalidateTranscriptionByLineCache(this);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v4, *((void **)v4 + 1));
  *(void *)uint64_t v4 = v4 + 8;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 1) = 0;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v5, *((void **)v5 + 1));
  *(void *)uint64_t v5 = v5 + 8;
  *((void *)v5 + 2) = 0;
  *((void *)v5 + 1) = 0;

  return TXTranscriptionGenerator::invalidateSequenceBehaviorCache((unint64_t)this);
}

unint64_t TXTranscriptionGenerator::invalidateSequenceBehaviorCache(unint64_t this)
{
  unint64_t v1 = this + 1200;
  uint64_t v2 = *(void *)(this + 1208);
  if (v2 != this + 1200)
  {
    uint64_t v3 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      uint64_t v4 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v4 + 8);
      long long v6 = xmmword_1B7E78230;
      this = OZFactory::isKindOfClass(v5, (int32x4_t *)&v6);
      if (this)
      {
        this = OZChannel::getValueAsInt((OZChannel *)(v4 + 29056), v3, 0.0);
        if (this == 1)
        {
          this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 16) + 24))(v4 + 16, 1, 1);
          if (this) {
            this = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 352))(v4);
          }
        }
      }
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != v1);
  }
  return this;
}

unint64_t non-virtual thunk to'TXTranscriptionGenerator::updateTranscriptionText(TXTranscriptionGenerator *this, const OZRenderState *a2)
{
  return TXTranscriptionGenerator::updateTranscriptionText((TXTranscriptionGenerator *)((char *)this - 64464), a2);
}

__n128 TXTranscriptionGenerator::resetTranscription(TXTranscriptionGenerator *this)
{
  uint64_t v2 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v16, v2);
  (*(void (**)(TXTranscriptionGenerator *))(*(void *)this + 544))(this);
  uint64_t v4 = *((void *)this + 8177);
  for (uint64_t i = *((void *)this + 8178); i != v4; PCString::~PCString((PCString *)(i - 48)))
    ;
  *((void *)this + 8178) = v4;
  uint64_t v6 = *((void *)this + 8183);
  for (uint64_t j = *((void *)this + 8184); j != v6; PCString::~PCString((PCString *)(j - 48)))
    ;
  *((void *)this + 8184) = v6;
  uint64_t v8 = *((void *)this + 8186);
  for (uint64_t k = *((void *)this + 8187); k != v8; PCString::~PCString((PCString *)(k - 48)))
    ;
  *((void *)this + 8187) = v8;
  uint64_t v10 = *((void *)this + 8189);
  for (uint64_t m = *((void *)this + 8190); m != v10; PCString::~PCString((PCString *)(m - 48)))
    ;
  uint64_t v11 = (void *)*((void *)this + 8199);
  *((void *)this + 8190) = v10;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 65584, v11);
  *((void *)this + 8198) = (char *)this + 65592;
  *((void *)this + 8199) = 0;
  *((void *)this + 8200) = 0;
  *((void *)this + 8196) = *((void *)this + 8195);
  uint64_t v12 = MEMORY[0x1E4F1F9F8];
  long long v13 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)((char *)this + 65612) = *MEMORY[0x1E4F1F9F8];
  uint64_t v14 = *(void *)(v12 + 16);
  *(void *)((char *)this + 65628) = v14;
  *(_OWORD *)((char *)this + 65636) = v13;
  *(void *)((char *)this + 65652) = v14;
  *((void *)this + 8214) = 0;
  *((void *)this + 8223) = 0;
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v16);
  return result;
}

void sub_1B764B4AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

double non-virtual thunk to'TXTranscriptionGenerator::resetTranscription(TXTranscriptionGenerator *this)
{
  *(void *)&double result = TXTranscriptionGenerator::resetTranscription((TXTranscriptionGenerator *)((char *)this - 64464)).n128_u64[0];
  return result;
}

void TXTranscriptionGenerator::resetToDefault(TXTranscriptionGenerator *this)
{
  uint64_t v2 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v3, v2);
  (*(void (**)(TXTranscriptionGenerator *))(*(void *)this + 1248))(this);
  (*(void (**)(TXTranscriptionGenerator *))(*(void *)this + 1240))(this);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v3);
}

void sub_1B764B578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'TXTranscriptionGenerator::resetToDefault(TXTranscriptionGenerator *this)
{
}

void TXTranscriptionGenerator::setText(TXTranscriptionGenerator *this, __CFString *a2)
{
  (*(void (**)(TXTranscriptionGenerator *))(*(void *)this + 1248))(this);

  TXTranscriptionGenerator::loadText(this, a2);
}

void non-virtual thunk to'TXTranscriptionGenerator::setText(TXTranscriptionGenerator *this, __CFString *a2)
{
  uint64_t v3 = (TXTranscriptionGenerator *)((char *)this - 64464);
  (*(void (**)(char *))(*((void *)this - 8058) + 1248))((char *)this - 64464);

  TXTranscriptionGenerator::loadText(v3, a2);
}

void TXTranscriptionGenerator::setTranscription(PCString *this, void *a2, __CFString *theString, const CMTime *a4, int a5)
{
  PCString::set(this + 8208, theString);
  HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
  if (OZHostApplicationDelegateHandler::wantsToSetTranscriptionsUsingArray(HostApplicationDelegate))
  {
    TXTranscriptionGenerator::setTranscriptionArray((TXTranscriptionGenerator *)this, a2, theString, a5);
  }
  else
  {
    TXTranscriptionGenerator::setTranscriptionObject((TXTranscriptionGenerator *)this, a2, a4, a5);
  }
}

void TXTranscriptionGenerator::setTranscriptionArray(TXTranscriptionGenerator *this, void *a2, __CFString *a3, int a4)
{
  uint64_t v8 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v9, v8);
  *((unsigned char *)this + 65672) = 1;
  if (a4) {
    TXTranscriptionGenerator::setFinalTranscription(this, a2, a3);
  }
  else {
    TXTranscriptionGenerator::updateLiveTranscription(this, a2, a3);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v9);
}

void sub_1B764B7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t TXTranscriptionGenerator::setTranscriptionObject(TXTranscriptionGenerator *this, void *a2, const CMTime *a3, int a4)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (char *)this + 65416;
  if (a4)
  {
    uint64_t v7 = *(void *)v5;
    for (uint64_t i = *((void *)this + 8178); i != v7; PCString::~PCString((PCString *)(i - 48)))
      ;
    *((void *)v5 + 1) = v7;
    uint64_t v31 = *((void *)v5 + 9);
    for (uint64_t j = *((void *)v5 + 10); j != v31; PCString::~PCString((PCString *)(j - 48)))
      ;
    *((void *)v5 + 10) = v31;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    unint64_t v32 = objc_msgSend(a2, "segments", a3);
    uint64_t result = [v32 countByEnumeratingWithState:&v65 objects:v70 count:16];
    uint64_t v33 = result;
    if (result)
    {
      uint64_t v34 = *(void *)v66;
      do
      {
        uint64_t v35 = 0;
        do
        {
          if (*(void *)v66 != v34) {
            objc_enumerationMutation(v32);
          }
          char v36 = *(void **)(*((void *)&v65 + 1) + 8 * v35);
          uint64_t v37 = [v36 substring];
          [v36 timestamp];
          uint64_t v39 = v38;
          [v36 duration];
          uint64_t v41 = v40;
          [v36 confidence];
          NSLog(&cfstr_SegmentTimesta.isa, v37, v39, v41, v42);
          PCURL::PCURL((PCURL *)&v61, (CFTypeRef)[v36 substring]);
          [v36 timestamp];
          uint64_t v44 = v43;
          [v36 duration];
          CMTimeEpoch v46 = v45;
          uint64_t v47 = [v36 substringRange];
          [v36 substringRange];
          uint64_t v49 = v48;
          PCString::PCString((PCString *)&v62, &v61);
          *(void *)&v62.timescale = v44;
          v62.CMTimeEpoch epoch = v46;
          *(void *)&long long v63 = v47;
          *((void *)&v63 + 1) = v49;
          LOBYTE(v64) = 1;
          HIDWORD(v64) = 0;
          PCString::~PCString(&v61);
          unint64_t v50 = *((void *)v5 + 1);
          if (v50 >= *((void *)v5 + 2))
          {
            uint64_t v53 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)v5, (uint64_t)&v62);
          }
          else
          {
            PCString::PCString(*((PCString **)v5 + 1), (const PCString *)&v62);
            long long v51 = *(_OWORD *)&v62.timescale;
            long long v52 = v63;
            *(void *)(v50 + 40) = v64;
            *(_OWORD *)(v50 + 24) = v52;
            *(_OWORD *)(v50 + 8) = v51;
            uint64_t v53 = v50 + 48;
            *((void *)v5 + 1) = v50 + 48;
          }
          *((void *)v5 + 1) = v53;
          PCString::~PCString((PCString *)&v62);
          ++v35;
        }
        while (v33 != v35);
        uint64_t result = [v32 countByEnumeratingWithState:&v65 objects:v70 count:16];
        uint64_t v33 = result;
      }
      while (result);
    }
  }
  else
  {
    uint64_t v11 = *(void *)v5;
    uint64_t v10 = *((void *)this + 8178);
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    obuint64_t j = (id)[a2 segments];
    uint64_t result = [obj countByEnumeratingWithState:&v57 objects:v69 count:16];
    uint64_t v13 = result;
    if (result)
    {
      uint64_t v14 = *(void *)v58;
      do
      {
        uint64_t v15 = 0;
        do
        {
          if (*(void *)v58 != v14) {
            objc_enumerationMutation(obj);
          }
          if (v11 == v10)
          {
            unint64_t v16 = *(void **)(*((void *)&v57 + 1) + 8 * v15);
            CMTime time = *a3;
            double Seconds = CMTimeGetSeconds(&time);
            if (!OZChannel::getValueAsInt((OZChannel *)this + 425, MEMORY[0x1E4F1FA48], 0.0))
            {
              uint64_t v18 = *((void *)v5 + 1);
              double v19 = Seconds - *(double *)(v18 - 40);
              if (v19 < *(double *)(v18 - 32)) {
                *(double *)(v18 - 32) = v19;
              }
            }
            uint64_t v20 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200);
            OZSceneSettings::getFrameDuration((OZSceneSettings *)(v20 + 336), (__n128 *)&v62);
            int32_t ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 64856), MEMORY[0x1E4F1FA48], 0.0);
            operator*(&v62, ValueAsInt, &v55);
            CMTimeEpoch v22 = CMTimeGetSeconds(&v55);
            PCURL::PCURL((PCURL *)&v61, (CFTypeRef)[v16 substring]);
            uint64_t v23 = [v16 substringRange];
            [v16 substringRange];
            uint64_t v25 = v24;
            PCString::PCString((PCString *)&v62, &v61);
            *(double *)&v62.timescale = Seconds;
            v62.CMTimeEpoch epoch = v22;
            *(void *)&long long v63 = v23;
            *((void *)&v63 + 1) = v25;
            LOBYTE(v64) = 1;
            HIDWORD(v64) = 0;
            PCString::~PCString(&v61);
            unint64_t v26 = *((void *)v5 + 1);
            if (v26 >= *((void *)v5 + 2))
            {
              uint64_t v29 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)v5, (uint64_t)&v62);
            }
            else
            {
              PCString::PCString(*((PCString **)v5 + 1), (const PCString *)&v62);
              long long v27 = *(_OWORD *)&v62.timescale;
              long long v28 = v63;
              *(void *)(v26 + 40) = v64;
              *(_OWORD *)(v26 + 24) = v28;
              *(_OWORD *)(v26 + 8) = v27;
              uint64_t v29 = v26 + 48;
              *((void *)v5 + 1) = v26 + 48;
            }
            *((void *)v5 + 1) = v29;
            PCString::~PCString((PCString *)&v62);
            uint64_t v11 = v10;
          }
          else
          {
            v11 += 48;
          }
          ++v15;
        }
        while (v13 != v15);
        uint64_t result = [obj countByEnumeratingWithState:&v57 objects:v69 count:16];
        uint64_t v13 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_1B764BC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,PCString a32,PCString a33)
{
}

void non-virtual thunk to'TXTranscriptionGenerator::setTranscription(PCString *this, void *a2, __CFString *a3, const CMTime *a4, int a5)
{
}

uint64_t TXTranscriptionGenerator::setFinalTranscription(TXTranscriptionGenerator *this, void *a2, __CFString *a3)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (a3 && [(__CFString *)a3 length])
  {
    (*(void (**)(TXTranscriptionGenerator *))(*(void *)this + 1248))(this);
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 65008), MEMORY[0x1E4F1FA48], 0.0);
    uint64_t v64 = a3;
    uint64_t v66 = [(__CFString *)a3 length];
    long long v72 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    uint64_t result = [a2 countByEnumeratingWithState:&v72 objects:v76 count:16];
    uint64_t v61 = result;
    uint64_t v6 = (char *)this + 65416;
    if (result)
    {
      int v56 = 0;
      uint64_t v63 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      int v62 = 0;
      uint64_t v65 = 0;
      uint64_t v59 = *(void *)v73;
      uint64_t v54 = (void **)((char *)this + 65560);
      CMTime v55 = (uint64_t **)((char *)this + 65584);
      uint64_t v53 = (char *)this + 65576;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v73 != v59) {
            objc_enumerationMutation(a2);
          }
          uint64_t v10 = *(void **)(*((void *)&v72 + 1) + 8 * v9);
          uint64_t v11 = [v10 objectForKeyedSubscript:@"transcriptionSegmentSubstring"];
          objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", @"transcriptionSegmentTimestamp"), "doubleValue");
          double v13 = v12;
          objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", @"transcriptionSegmentDuration"), "doubleValue");
          uint64_t v15 = v14;
          uint64_t v16 = -[__CFString rangeOfString:options:range:](v64, "rangeOfString:options:range:", v11, 0, v8, v66);
          if (v16 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v7 += v63;
            uint64_t v8 = v16 + v17;
            uint64_t v63 = v16 + v17 - v7;
            uint64_t v18 = (__CFString *)[(__CFString *)v64 substringWithRange:v7];
            uint64_t v19 = *((void *)v6 + 1);
            if (*(void *)v6 == v19) {
              goto LABEL_54;
            }
            uint64_t v20 = objc_msgSend((id)-[__CFString stringByTrimmingCharactersInSet:](v18, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E4F28B88], "punctuationCharacterSet")), "length");
            uint64_t v21 = v20;
            long long v60 = (PCString *)(v19 - 48);
            if (v13 - *(double *)(v19 - 40) > 1.0 && v20 != 0)
            {
              LODWORD(v68.var0) = v65 + 1;
              std::__tree<int>::__emplace_unique_key_args<int,int>(v55, (int *)&v68, &v68);
              uint64_t v24 = (char *)*((void *)v6 + 19);
              unint64_t v23 = *((void *)v6 + 20);
              if ((unint64_t)v24 >= v23)
              {
                unint64_t v26 = (char *)*v54;
                uint64_t v27 = (v24 - (unsigned char *)*v54) >> 2;
                unint64_t v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 62) {
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v29 = v23 - (void)v26;
                if (v29 >> 1 > v28) {
                  unint64_t v28 = v29 >> 1;
                }
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v30 = v28;
                }
                if (v30)
                {
                  uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v53, v30);
                  unint64_t v26 = (char *)*((void *)v6 + 18);
                  uint64_t v24 = (char *)*((void *)v6 + 19);
                }
                else
                {
                  uint64_t v31 = 0;
                }
                unint64_t v32 = &v31[4 * v27];
                *(_DWORD *)unint64_t v32 = v56;
                uint64_t v25 = v32 + 4;
                while (v24 != v26)
                {
                  int v33 = *((_DWORD *)v24 - 1);
                  v24 -= 4;
                  *((_DWORD *)v32 - 1) = v33;
                  v32 -= 4;
                }
                *((void *)v6 + 18) = v32;
                *((void *)v6 + 19) = v25;
                *((void *)v6 + 20) = &v31[4 * v30];
                if (v26) {
                  operator delete(v26);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v24 = v56;
                uint64_t v25 = v24 + 4;
              }
              *((void *)v6 + 19) = v25;
              if (ValueAsInt == 2)
              {
                PCString::append(v60, "\n");
                ++*(void *)(v19 - 16);
                ++v65;
              }
            }
            if ([(__CFString *)PCString::ns_str(v60) hasSuffix:@"\n"]) {
              uint64_t v18 = (__CFString *)[v10 objectForKeyedSubscript:@"transcriptionSegmentSubstring"];
            }
            if ([a2 count] == v62 + 1)
            {
              LODWORD(v68.var0) = [(__CFString *)v18 length] + v65 + 1;
              std::__tree<int>::__emplace_unique_key_args<int,int>(v55, (int *)&v68, &v68);
              int v34 = v56 + 1;
              char v36 = (char *)*((void *)v6 + 19);
              unint64_t v35 = *((void *)v6 + 20);
              if ((unint64_t)v36 >= v35)
              {
                uint64_t v38 = (char *)*v54;
                uint64_t v39 = (v36 - (unsigned char *)*v54) >> 2;
                unint64_t v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 62) {
                  std::vector<double>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v41 = v35 - (void)v38;
                if (v41 >> 1 > v40) {
                  unint64_t v40 = v41 >> 1;
                }
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v42 = v40;
                }
                if (v42)
                {
                  uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v53, v42);
                  uint64_t v38 = (char *)*((void *)v6 + 18);
                  char v36 = (char *)*((void *)v6 + 19);
                }
                else
                {
                  uint64_t v43 = 0;
                }
                uint64_t v44 = &v43[4 * v39];
                *(_DWORD *)uint64_t v44 = v34;
                uint64_t v37 = v44 + 4;
                while (v36 != v38)
                {
                  int v45 = *((_DWORD *)v36 - 1);
                  v36 -= 4;
                  *((_DWORD *)v44 - 1) = v45;
                  v44 -= 4;
                }
                *((void *)v6 + 18) = v44;
                *((void *)v6 + 19) = v37;
                *((void *)v6 + 20) = &v43[4 * v42];
                if (v38) {
                  operator delete(v38);
                }
              }
              else
              {
                *(_DWORD *)char v36 = v34;
                uint64_t v37 = v36 + 4;
              }
              *((void *)v6 + 19) = v37;
              if (ValueAsInt == 2) {
                uint64_t v18 = (__CFString *)[(__CFString *)v18 stringByAppendingString:@"\n"];
              }
            }
            if (v21)
            {
LABEL_54:
              int v46 = 1;
            }
            else
            {
              if ([(__CFString *)PCString::ns_str(v60) hasSuffix:@"\n"])
              {
                unsigned int v47 = PCString::size(v60);
                PCString::erase(v60, v47 - 1, 1u);
                --*(void *)(v19 - 16);
              }
              v68.uint64_t var0 = 0;
              PCString::set(&v68, v18);
              PCString::append(v60, &v68);
              PCString::~PCString(&v68);
              int v46 = 0;
              *(void *)(v19 - 16) += [(__CFString *)v18 length];
            }
            if (ValueAsInt == 1) {
              uint64_t v18 = (__CFString *)[(__CFString *)v18 stringByAppendingString:@"\n"];
            }
            if (v46)
            {
              PCURL::PCURL((PCURL *)&v67, v18);
              uint64_t v48 = [(__CFString *)v18 length];
              PCString::PCString(&v68, &v67);
              *(double *)&long long v69 = v13;
              *((void *)&v69 + 1) = v15;
              *(void *)&long long v70 = v65;
              *((void *)&v70 + 1) = v48;
              LOBYTE(v71) = 1;
              HIDWORD(v71) = 0;
              PCString::~PCString(&v67);
              unint64_t v49 = *((void *)v6 + 1);
              if (v49 >= *((void *)v6 + 2))
              {
                uint64_t v52 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)v6, (uint64_t)&v68);
              }
              else
              {
                PCString::PCString(*((PCString **)v6 + 1), &v68);
                long long v50 = v69;
                long long v51 = v70;
                *(void *)(v49 + 40) = v71;
                *(_OWORD *)(v49 + 24) = v51;
                *(_OWORD *)(v49 + 8) = v50;
                uint64_t v52 = v49 + 48;
                *((void *)v6 + 1) = v49 + 48;
              }
              *((void *)v6 + 1) = v52;
              ++v56;
              PCString::~PCString(&v68);
            }
            v65 += [(__CFString *)v18 length];
            v66 -= v63;
            ++v62;
          }
          ++v9;
        }
        while (v9 != v61);
        uint64_t result = [a2 countByEnumeratingWithState:&v72 objects:v76 count:16];
        uint64_t v61 = result;
      }
      while (result);
    }
    v6[257] = 1;
  }
  else
  {
    return TXTranscriptionGenerator::setFinalTranscription(this, a2);
  }
  return result;
}

void sub_1B764C378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,PCString a24,PCString a25)
{
}

void TXTranscriptionGenerator::updateLiveTranscription(TXTranscriptionGenerator *this, void *a2, __CFString *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a3 && [(__CFString *)a3 length])
  {
    unint64_t v5 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v37, v5);
    uint64_t v6 = (char *)this + 65416;
    uint64_t v7 = (PCString *)*((void *)this + 8177);
    uint64_t v31 = (PCString *)*((void *)this + 8178);
    char v36 = v7;
    uint64_t v8 = [(__CFString *)a3 length];
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v9 = [a2 countByEnumeratingWithState:&v32 objects:v38 count:16];
    if (v9)
    {
      unint64_t v23 = (char *)this + 65416;
      uint64_t v25 = this;
      unint64_t v26 = a3;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t updated = 0;
      uint64_t v27 = *(void *)v33;
      uint64_t v29 = v31;
      unint64_t v30 = v7;
      do
      {
        uint64_t v28 = v9;
        for (uint64_t i = 0; i != v28; ++i)
        {
          if (*(void *)v33 != v27) {
            objc_enumerationMutation(a2);
          }
          uint64_t v15 = *(void **)(*((void *)&v32 + 1) + 8 * i);
          uint64_t v16 = (__CFString *)[v15 objectForKeyedSubscript:@"transcriptionSegmentSubstring"];
          uint64_t v17 = -[__CFString rangeOfString:options:range:](v26, "rangeOfString:options:range:", v16, 0, v12, v8);
          v11 += v10;
          uint64_t v12 = v17 + v18;
          uint64_t v10 = v17 + v18 - v11;
          uint64_t v19 = (__CFString *)-[__CFString substringWithRange:](v26, "substringWithRange:", v11, v10);
          objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", @"transcriptionSegmentTimestamp"), "doubleValue");
          double v21 = v20;
          objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", @"transcriptionSegmentDuration"), "doubleValue");
          if (v7 == v31)
          {
            uint64_t updated = TXTranscriptionGenerator::addWordDuringLiveTranscription(v25, v19, v16, v21, updated);
            uint64_t v7 = v31;
          }
          else
          {
            uint64_t updated = TXTranscriptionGenerator::updateWordDuringLiveTranscription((uint64_t)v25, v19, v16, (uint64_t *)&v36, updated, v21, v22);
            if (v29 != v31) {
              *(double *)&v29[2].uint64_t var0 = v21 - *(double *)&v29[1].var0;
            }
            uint64_t v29 = v30;
            uint64_t v7 = v30 + 6;
            char v36 = v30 + 6;
            v30 += 6;
          }
          v8 -= v10;
        }
        uint64_t v9 = [a2 countByEnumeratingWithState:&v32 objects:v38 count:16];
      }
      while (v9);
      uint64_t v6 = v23;
      uint64_t v7 = v30;
    }
    std::vector<TXTranscriptionSegment>::erase((uint64_t)v6, v7, v31);
    v6[257] = 1;
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v37);
  }
}

void sub_1B764C648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t TXTranscriptionGenerator::setFinalTranscription(TXTranscriptionGenerator *this, void *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  (*(void (**)(TXTranscriptionGenerator *))(*(void *)this + 1248))(this);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 65008), MEMORY[0x1E4F1FA48], 0.0);
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  unint64_t v5 = a2;
  uint64_t result = [a2 countByEnumeratingWithState:&v55 objects:v59 count:16];
  uint64_t v49 = result;
  uint64_t v7 = (char *)this + 65416;
  if (result)
  {
    LODWORD(v8) = 0;
    uint64_t v9 = 0;
    uint64_t v46 = (uint64_t)(v7 + 160);
    unsigned int v47 = (void **)(v7 + 144);
    uint64_t v48 = *(void *)v56;
    do
    {
      uint64_t v10 = 0;
      uint64_t v8 = (int)v8;
      do
      {
        if (*(void *)v56 != v48) {
          objc_enumerationMutation(v5);
        }
        uint64_t v11 = *(void **)(*((void *)&v55 + 1) + 8 * v10);
        uint64_t v12 = (void *)[v11 objectForKeyedSubscript:@"transcriptionSegmentSubstring"];
        objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", @"transcriptionSegmentTimestamp"), "doubleValue");
        double v14 = v13;
        objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", @"transcriptionSegmentDuration"), "doubleValue");
        uint64_t v16 = v15;
        uint64_t v17 = *((void *)v7 + 1);
        if (*(void *)v7 == v17) {
          goto LABEL_29;
        }
        if (v14 - *(double *)(v17 - 40) > 1.0)
        {
          uint64_t v19 = (char *)*((void *)v7 + 19);
          unint64_t v18 = *((void *)v7 + 20);
          if ((unint64_t)v19 >= v18)
          {
            double v21 = (char *)*v47;
            uint64_t v22 = (v19 - (unsigned char *)*v47) >> 2;
            unint64_t v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 62) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v24 = v18 - (void)v21;
            if (v24 >> 1 > v23) {
              unint64_t v23 = v24 >> 1;
            }
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v23;
            }
            if (v25)
            {
              unint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v46, v25);
              double v21 = (char *)*((void *)v7 + 18);
              uint64_t v19 = (char *)*((void *)v7 + 19);
            }
            else
            {
              unint64_t v26 = 0;
            }
            uint64_t v27 = &v26[4 * v22];
            *(_DWORD *)uint64_t v27 = v8;
            double v20 = v27 + 4;
            while (v19 != v21)
            {
              int v28 = *((_DWORD *)v19 - 1);
              v19 -= 4;
              *((_DWORD *)v27 - 1) = v28;
              v27 -= 4;
            }
            *((void *)v7 + 18) = v27;
            *((void *)v7 + 19) = v20;
            *((void *)v7 + 20) = &v26[4 * v25];
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v19 = v8;
            double v20 = v19 + 4;
          }
          *((void *)v7 + 19) = v20;
          if (ValueAsInt == 2) {
            PCString::append((PCString *)(*((void *)v7 + 1) - 48), "\n");
          }
        }
        int v29 = v8 + 1;
        if ([v5 count] != v8 + 1)
        {
LABEL_29:
          if (ValueAsInt != 1) {
            goto LABEL_48;
          }
        }
        else
        {
          uint64_t v31 = (char *)*((void *)v7 + 19);
          unint64_t v30 = *((void *)v7 + 20);
          if ((unint64_t)v31 >= v30)
          {
            long long v33 = (char *)*v47;
            uint64_t v34 = (v31 - (unsigned char *)*v47) >> 2;
            unint64_t v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 62) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v36 = v30 - (void)v33;
            if (v36 >> 1 > v35) {
              unint64_t v35 = v36 >> 1;
            }
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v37 = v35;
            }
            if (v37)
            {
              uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v46, v37);
              long long v33 = (char *)*((void *)v7 + 18);
              uint64_t v31 = (char *)*((void *)v7 + 19);
            }
            else
            {
              uint64_t v38 = 0;
            }
            uint64_t v39 = &v38[4 * v34];
            *(_DWORD *)uint64_t v39 = v29;
            long long v32 = v39 + 4;
            while (v31 != v33)
            {
              int v40 = *((_DWORD *)v31 - 1);
              v31 -= 4;
              *((_DWORD *)v39 - 1) = v40;
              v39 -= 4;
            }
            *((void *)v7 + 18) = v39;
            *((void *)v7 + 19) = v32;
            *((void *)v7 + 20) = &v38[4 * v37];
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v31 = v29;
            long long v32 = v31 + 4;
          }
          *((void *)v7 + 19) = v32;
          if (ValueAsInt != 1)
          {
            if (ValueAsInt == 2) {
              uint64_t v12 = (void *)[v12 stringByAppendingString:@"\n"];
            }
LABEL_48:
            uint64_t v41 = [v12 length];
            goto LABEL_50;
          }
        }
        uint64_t v12 = (void *)[v12 stringByAppendingString:@"\n"];
        uint64_t v41 = [v12 length] - 1;
LABEL_50:
        PCURL::PCURL((PCURL *)&v50, v12);
        PCString::PCString(&v51, &v50);
        *(double *)&long long v52 = v14;
        *((void *)&v52 + 1) = v16;
        *(void *)&long long v53 = v9;
        *((void *)&v53 + 1) = v41;
        LOBYTE(v54) = 1;
        HIDWORD(v54) = 0;
        PCString::~PCString(&v50);
        unint64_t v42 = *((void *)v7 + 1);
        if (v42 >= *((void *)v7 + 2))
        {
          uint64_t v45 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)v7, (uint64_t)&v51);
        }
        else
        {
          PCString::PCString(*((PCString **)v7 + 1), &v51);
          long long v43 = v52;
          long long v44 = v53;
          *(void *)(v42 + 40) = v54;
          *(_OWORD *)(v42 + 24) = v44;
          *(_OWORD *)(v42 + 8) = v43;
          uint64_t v45 = v42 + 48;
          *((void *)v7 + 1) = v42 + 48;
        }
        *((void *)v7 + 1) = v45;
        ++v8;
        v9 += v41 + 1;
        PCString::~PCString(&v51);
        ++v10;
      }
      while (v10 != v49);
      uint64_t result = [v5 countByEnumeratingWithState:&v55 objects:v59 count:16];
      uint64_t v49 = result;
    }
    while (result);
  }
  *((_WORD *)v7 + 128) = 256;
  return result;
}

void sub_1B764CB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14, PCString a15)
{
}

uint64_t TXTranscriptionGenerator::updateWordDuringLiveTranscription(uint64_t a1, __CFString *a2, __CFString *a3, uint64_t *a4, uint64_t a5, double a6, double a7)
{
  uint64_t v11 = *(void *)(a1 + 65416);
  if (*a4 != v11)
  {
    if ([(__CFString *)PCString::ns_str((PCString *)(*a4 - 48)) hasSuffix:@"\n"]) {
      a2 = a3;
    }
    uint64_t v11 = *a4;
  }
  if ([(__CFString *)PCString::ns_str((PCString *)v11) hasSuffix:@"\n"]) {
    a2 = (__CFString *)[(__CFString *)a2 stringByAppendingString:@"\n"];
  }
  v15.uint64_t var0 = 0;
  PCString::set(&v15, a2);
  PCString::set((PCString *)v11, &v15);
  PCString::~PCString(&v15);
  *(void *)(v11 + 24) = a5;
  *(void *)(v11 + 32) = [(__CFString *)a2 length];
  *(double *)(v11 + 8) = a6;
  *(double *)(v11 + 16) = a7;
  return [(__CFString *)a2 length] + a5;
}

void sub_1B764CC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t TXTranscriptionGenerator::addWordDuringLiveTranscription(TXTranscriptionGenerator *this, __CFString *a2, const __CFString *a3, double a4, uint64_t a5)
{
  uint64_t v10 = (const CMTime *)MEMORY[0x1E4F1FA48];
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 65008), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v12 = (char *)this + 65416;
  uint64_t v13 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v13 + 336), (__n128 *)&v40);
  int32_t v14 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 64856), v10, 0.0);
  operator*(&v40, v14, &time);
  CMTimeEpoch Seconds = CMTimeGetSeconds(&time);
  uint64_t v16 = *((void *)this + 8178);
  if (*((void *)this + 8177) != v16)
  {
    int v17 = OZChannel::getValueAsInt((OZChannel *)this + 425, MEMORY[0x1E4F1FA48], 0.0);
    double v18 = a4 - *(double *)(v16 - 40);
    if (!v17 && v18 < *(double *)(v16 - 32)) {
      *(double *)(v16 - 32) = v18;
    }
    if (v18 > 1.0)
    {
      int v19 = -1431655765 * ((*((void *)this + 8178) - *((void *)this + 8177)) >> 4);
      double v20 = (char *)*((void *)v12 + 19);
      unint64_t v21 = *((void *)v12 + 20);
      if ((unint64_t)v20 >= v21)
      {
        unint64_t v23 = (char *)*((void *)v12 + 18);
        uint64_t v24 = (v20 - v23) >> 2;
        if ((unint64_t)(v24 + 1) >> 62) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v25 = v21 - (void)v23;
        unint64_t v26 = (uint64_t)(v21 - (void)v23) >> 1;
        if (v26 <= v24 + 1) {
          unint64_t v26 = v24 + 1;
        }
        if (v25 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27)
        {
          int v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(v12 + 160), v27);
          unint64_t v23 = (char *)*((void *)v12 + 18);
          double v20 = (char *)*((void *)v12 + 19);
        }
        else
        {
          int v28 = 0;
        }
        int v29 = &v28[4 * v24];
        unint64_t v30 = &v28[4 * v27];
        *(_DWORD *)int v29 = v19;
        uint64_t v22 = v29 + 4;
        while (v20 != v23)
        {
          int v31 = *((_DWORD *)v20 - 1);
          v20 -= 4;
          *((_DWORD *)v29 - 1) = v31;
          v29 -= 4;
        }
        *((void *)v12 + 18) = v29;
        *((void *)v12 + 19) = v22;
        *((void *)v12 + 20) = v30;
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *(_DWORD *)double v20 = v19;
        uint64_t v22 = v20 + 4;
      }
      *((void *)v12 + 19) = v22;
      if (ValueAsInt == 2)
      {
        PCString::append((PCString *)(v16 - 48), "\n");
        ++*(void *)(v16 - 16);
        ++a5;
      }
    }
    if ([(__CFString *)PCString::ns_str((PCString *)(v16 - 48)) hasSuffix:@"\n"]) {
      a2 = (__CFString *)a3;
    }
  }
  if (ValueAsInt == 1) {
    a2 = (__CFString *)[(__CFString *)a2 stringByAppendingString:@"\n"];
  }
  PCURL::PCURL((PCURL *)&v39, a2);
  uint64_t v32 = [(__CFString *)a2 length];
  PCString::PCString((PCString *)&v40, &v39);
  *(double *)&v40.timescale = a4;
  v40.CMTimeEpoch epoch = Seconds;
  *(void *)&long long v41 = a5;
  *((void *)&v41 + 1) = v32;
  LOBYTE(v42) = 1;
  HIDWORD(v42) = 0;
  PCString::~PCString(&v39);
  unint64_t v33 = *((void *)v12 + 1);
  if (v33 >= *((void *)v12 + 2))
  {
    uint64_t v36 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)v12, (uint64_t)&v40);
  }
  else
  {
    PCString::PCString(*((PCString **)v12 + 1), (const PCString *)&v40);
    long long v34 = *(_OWORD *)&v40.timescale;
    long long v35 = v41;
    *(void *)(v33 + 40) = v42;
    *(_OWORD *)(v33 + 24) = v35;
    *(_OWORD *)(v33 + 8) = v34;
    uint64_t v36 = v33 + 48;
    *((void *)v12 + 1) = v33 + 48;
  }
  *((void *)v12 + 1) = v36;
  uint64_t v37 = [(__CFString *)a2 length] + a5;
  PCString::~PCString((PCString *)&v40);
  return v37;
}

void sub_1B764CF70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 8) = v3;
  PCString::~PCString((PCString *)va);
  _Unwind_Resume(a1);
}

PCString *std::vector<TXTranscriptionSegment>::erase(uint64_t a1, PCString *this, PCString *a3)
{
  if (this != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TXTranscriptionSegment *,TXTranscriptionSegment *,TXTranscriptionSegment *,0>(a3, *(PCString **)(a1 + 8), this);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
        PCString::~PCString((PCString *)(v7 - 48));
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return this;
}

void **TXTranscriptionGenerator::getTranscriptionByLine(TXTranscriptionGenerator *this)
{
  unint64_t v1 = (void **)((char *)this + 65464);
  if (*((void *)this + 8183) == *((void *)this + 8184))
  {
    TXTranscriptionGenerator::computeTranscriptionByLine(this, (uint64_t *)this + 8177, 0, (uint64_t *)&v3);
    std::vector<TXTranscriptionSegment>::__vdeallocate(v1);
    *(_OWORD *)unint64_t v1 = v3;
    v1[2] = v4;
    uint64_t v4 = 0;
    long long v3 = 0uLL;
    uint64_t v5 = (void **)&v3;
    std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  return v1;
}

void TXTranscriptionGenerator::computeTranscriptionByLine(Li3DEngineScene *a1@<X0>, uint64_t *a2@<X1>, CMTime *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = (OZLockingGroup *)Li3DEngineScene::sceneManager(a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v52, v7);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  PCString v51 = 0;
  uint64_t v36 = a1;
  unsigned int LineBreaks = TXTextLayout::getLineBreaks(a1, &v51);
  PCSharedCount::PCSharedCount(&v47);
  long long v48 = 0u;
  long long v49 = 0u;
  LOBYTE(v50) = 1;
  HIDWORD(v50) = 0;
  uint64_t v8 = *a2;
  uint64_t v37 = a2[1];
  if (*a2 != v37)
  {
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    long long v41 = (char *)a1 + 65672;
    char v11 = 1;
    do
    {
      if (a3 && !TXTranscriptionGenerator::isSegmentActiveAtTime(v36, v8, a3)) {
        break;
      }
      if ((v11 & (*(double *)&v48 == 0.0)) == 1) {
        *(void *)&long long v48 = *(void *)(v8 + 8);
      }
      PCString::PCString(&v46, (const PCString *)v8);
      unsigned int v12 = PCString::size(&v46);
      double v13 = *(double *)(v8 + 8);
      double v14 = *(double *)(v8 + 16);
      v9 += v12;
      if (*v41)
      {
        int v15 = 1;
      }
      else
      {
        int v15 = [(__CFString *)PCString::ns_str((PCString *)v8) hasSuffix:@"\n"];
        v9 += v15 ^ 1;
      }
      LODWORD(v16) = -1;
      if (v51 && v10 < LineBreaks) {
        unint64_t v16 = v51[v10];
      }
      PCString::PCString(&v45, &v46);
      uint64_t v40 = v8;
      BOOL v17 = !v51 || v10 >= LineBreaks;
      BOOL v18 = !v17 && v9 >= v16;
      BOOL v19 = !v18;
      BOOL v39 = v19;
      if (v18)
      {
        int v21 = v15 ^ 1;
        uint64_t v22 = 8 * (int)v10 + 8;
        do
        {
          if (v9 == v16) {
            int v23 = 0;
          }
          else {
            int v23 = v21;
          }
          unsigned int v24 = v9 - v23;
          unsigned int v25 = v12 - (v9 - v23 - v16);
          PCString::substr(&v45, v12 - (v24 - v16), v24 - v16, (CFStringRef *)&v44.var0);
          PCString::substr(&v45, 0, v25, (CFStringRef *)&v43.var0);
          PCString::set(&v45, &v43);
          PCString::~PCString(&v43);
          if (objc_msgSend((id)-[__CFString stringByTrimmingCharactersInSet:](PCString::ns_str(&v45), "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E4F28B88], "whitespaceCharacterSet")), "length"))
          {
            double v26 = (double)v25 / (double)v12;
          }
          else
          {
            double v26 = 0.0;
          }
          PCString::append((PCString *)&v47, &v45);
          if (!*v41) {
            PCString::append((PCString *)&v47, " ");
          }
          double v20 = v14 * (1.0 - v26);
          double v27 = v14 - v20;
          *((double *)&v48 + 1) = v27 + *((double *)&v48 + 1);
          unint64_t v28 = a4[1];
          if (v28 >= a4[2])
          {
            uint64_t v31 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>(a4, (uint64_t)&v47);
          }
          else
          {
            PCString::PCString((PCString *)a4[1], (const PCString *)&v47);
            uint64_t v29 = v50;
            long long v30 = v49;
            *(_OWORD *)(v28 + 8) = v48;
            *(void *)(v28 + 40) = v29;
            *(_OWORD *)(v28 + 24) = v30;
            uint64_t v31 = v28 + 48;
            a4[1] = v28 + 48;
          }
          a4[1] = v31;
          if (v24 == v16) {
            double v13 = 0.0;
          }
          else {
            double v13 = v13 + v27;
          }
          PCString::PCString(&v43, "");
          PCString::set((PCString *)&v47, &v43);
          PCString::~PCString(&v43);
          long long v48 = *(unint64_t *)&v13;
          PCString::set(&v45, &v44);
          unsigned int v12 = PCString::size(&v45);
          ++v10;
          LODWORD(v16) = -1;
          if (v51 && LineBreaks > v10) {
            LODWORD(v16) = *(_DWORD *)((char *)v51 + v22);
          }
          PCString::~PCString(&v44);
          if (!v51) {
            break;
          }
          if (LineBreaks <= v10) {
            break;
          }
          v22 += 8;
          double v14 = v20;
        }
        while (v9 >= v16);
      }
      else
      {
        double v20 = v14;
      }
      if (PCString::size(&v45))
      {
        PCString::append((PCString *)&v47, &v45);
        if (!*v41) {
          PCString::append((PCString *)&v47, " ");
        }
        *((double *)&v48 + 1) = v20 + *((double *)&v48 + 1);
      }
      char v11 = !v39;
      PCString::~PCString(&v45);
      PCString::~PCString(&v46);
      uint64_t v8 = v40 + 48;
    }
    while (v40 + 48 != v37);
  }
  if (!PCString::empty((PCString *)&v47))
  {
    unint64_t v32 = a4[1];
    if (v32 >= a4[2])
    {
      uint64_t v35 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>(a4, (uint64_t)&v47);
    }
    else
    {
      PCString::PCString((PCString *)a4[1], (const PCString *)&v47);
      uint64_t v33 = v50;
      long long v34 = v49;
      *(_OWORD *)(v32 + 8) = v48;
      *(void *)(v32 + 40) = v33;
      *(_OWORD *)(v32 + 24) = v34;
      uint64_t v35 = v32 + 48;
      a4[1] = v32 + 48;
    }
    a4[1] = v35;
  }
  PCString::~PCString((PCString *)&v47);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v52);
}

void sub_1B764D4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, PCString a18, PCString a19, PCString a20,PCString a21,PCString a22)
{
  v22->int info = v23;
  PCString::~PCString(&a22);
  a22.uint64_t var0 = v22;
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v24 - 144));
  _Unwind_Resume(a1);
}

uint64_t TXTranscriptionGenerator::getActiveTranscriptionByLine(TXTranscriptionGenerator *this, CMTime *a2)
{
  uint64_t v4 = (char *)this + 65612;
  CMTime time1 = *a2;
  CMTime v7 = *(CMTime *)((char *)this + 65612);
  if (CMTimeCompare(&time1, &v7))
  {
    TXTranscriptionGenerator::computeTranscriptionByLine(this, (uint64_t *)this + 8180, a2, &time1.value);
    std::vector<TXTranscriptionSegment>::__vdeallocate((void **)this + 8186);
    *(CMTime *)((char *)this + 65488) = time1;
    memset(&time1, 0, sizeof(time1));
    v7.CMTimeValue value = (CMTimeValue)&time1;
    std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
    long long v5 = *(_OWORD *)&a2->value;
    *((void *)v4 + 2) = a2->epoch;
    *(_OWORD *)uint64_t v4 = v5;
  }
  return (uint64_t)this + 65488;
}

void *TXTranscriptionGenerator::getTranscriptionByBlock(TXTranscriptionGenerator *this, const CMTime *a2)
{
  uint64_t v4 = (void *)((char *)this + 65512);
  long long v5 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v7, v5);
  if (*v4 == v4[1]) {
    TXTranscriptionGenerator::computeTranscriptionBlocks(this, a2);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v7);
  return v4;
}

void sub_1B764D6F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

uint64_t TXTranscriptionGenerator::getLineBreaksForEntireString(TXTranscriptionGenerator *this, const CMTime *a2)
{
  PCSharedCount::PCSharedCount(&v15);
  CMTime time = *(CMTime *)((char *)this + 65720);
  double Seconds = CMTimeGetSeconds(&time);
  uint64_t v5 = *((void *)this + 8177);
  uint64_t v6 = *((void *)this + 8178);
  if (v5 != v6)
  {
    double v7 = Seconds;
    do
    {
      if (*(unsigned char *)(v5 + 40)) {
        BOOL v8 = *(double *)(v5 + 8) < v7;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8)
      {
        PCString::PCString((PCString *)&v13, (const PCString *)v5);
        PCString::append((PCString *)&v15, (const PCString *)&v13);
        PCString::~PCString((PCString *)&v13);
      }
      v5 += 48;
    }
    while (v5 != v6);
  }
  TXTextLayout::resetState(this);
  TXTextLayout::setString(this, (const PCString *)&v15, 1);
  int v9 = PCString::size((PCString *)&v15);
  TXTextLayout::updateStyleRunsAfterTextInsert((uint64_t)this, 0, v9);
  TXTextLayout::updateDisplayString((PCString *)this, a2);
  uint64_t v10 = *(void *)(*((void *)this + 2422) + 16);
  TXTextLayout::getDisplayString((PCString *)this, (PCString *)&v13);
  unsigned int v11 = PCString::size((PCString *)&v13);
  *(_DWORD *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 28) = v11;
  PCString::~PCString((PCString *)&v13);
  TXTextLayout::rebuildParagraphStyles((PCString *)this);
  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
  OZRenderState::OZRenderState(&v13);
  *(_OWORD *)&v13.var0.uint64_t var0 = *(_OWORD *)&a2->value;
  v13.var0.int64_t var3 = a2->epoch;
  TXTextLayout::doLayout(this, &v13, 0);
  PCString::~PCString((PCString *)&v15);
  return (uint64_t)this + 52200;
}

void sub_1B764D87C(_Unwind_Exception *a1)
{
  PCString::~PCString((PCString *)(v1 - 72));
  _Unwind_Resume(a1);
}

uint64_t TXTranscriptionGenerator::isPhraseBreak(TXTranscriptionGenerator *this, int a2)
{
  uint64_t v2 = (char *)this + 65592;
  if ((*((_DWORD *)this + 16402) & 0x80000000) != 0) {
    return 0;
  }
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65008), MEMORY[0x1E4F1FA48], 0.0) != 2) {
    return 0;
  }
  uint64_t v4 = *(uint64_t **)v2;
  if (!*(void *)v2) {
    return 0;
  }
  int v5 = *((_DWORD *)v2 + 4) + a2;
  while (1)
  {
    int v6 = *((_DWORD *)v4 + 7);
    if (v5 >= v6) {
      break;
    }
LABEL_8:
    uint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      return 0;
    }
  }
  if (v6 < v5)
  {
    ++v4;
    goto LABEL_8;
  }
  return 1;
}

char *TXTranscriptionGenerator::getActiveTranscriptionByBlock(TXTranscriptionGenerator *this, CMTime *a2)
{
  uint64_t v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v23, v4);
  int v5 = (char *)this + 65636;
  CMTime v20 = *a2;
  CMTime time2 = *(CMTime *)((char *)this + 65636);
  int v6 = (char *)this + 0x10000;
  if (CMTimeCompare(&v20, &time2))
  {
    uint64_t v8 = *(void *)v6;
    for (uint64_t i = *((void *)this + 8193); i != v8; PCString::~PCString((PCString *)(i - 48)))
      ;
    *((void *)this + 8193) = v8;
    TranscriptionByBlocuint64_t k = TXTranscriptionGenerator::getTranscriptionByBlock(this, a2);
    uint64_t v10 = *TranscriptionByBlock;
    uint64_t v11 = TranscriptionByBlock[1];
    if (*TranscriptionByBlock != v11)
    {
      while (1)
      {
        PCString::PCString((PCString *)&v20, (const PCString *)v10);
        long long v12 = *(_OWORD *)(v10 + 8);
        long long v13 = *(_OWORD *)(v10 + 24);
        uint64_t v22 = *(void *)(v10 + 40);
        *(_OWORD *)&v20.timescale = v12;
        long long v21 = v13;
        if (TXTranscriptionGenerator::isBlockActiveAtTime((uint64_t)this, (uint64_t)&v20, a2)) {
          break;
        }
        PCString::~PCString((PCString *)&v20);
        v10 += 48;
        if (v10 == v11) {
          goto LABEL_13;
        }
      }
      *(void *)&long long v21 = 0;
      unint64_t v14 = *((void *)this + 8193);
      if (v14 >= *((void *)v6 + 2))
      {
        uint64_t v17 = std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>((uint64_t *)v6, (uint64_t)&v20);
      }
      else
      {
        PCString::PCString(*((PCString **)v6 + 1), (const PCString *)&v20);
        long long v15 = *(_OWORD *)&v20.timescale;
        long long v16 = v21;
        *(void *)(v14 + 40) = v22;
        *(_OWORD *)(v14 + 24) = v16;
        *(_OWORD *)(v14 + 8) = v15;
        uint64_t v17 = v14 + 48;
        *((void *)v6 + 1) = v14 + 48;
      }
      *((void *)v6 + 1) = v17;
      PCString::~PCString((PCString *)&v20);
    }
LABEL_13:
    long long v18 = *(_OWORD *)&a2->value;
    *((void *)v5 + 2) = a2->epoch;
    *(_OWORD *)int v5 = v18;
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v23);
  return v6;
}

void sub_1B764DAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void **TXTranscriptionGenerator::getTranscriptionByUnit(TXTranscriptionGenerator *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 3:
      uint64_t result = TXTranscriptionGenerator::getTranscriptionByLine(a1);
      break;
    case 6:
      uint64_t v2 = 65512;
      goto LABEL_5;
    default:
      uint64_t v2 = 65416;
LABEL_5:
      uint64_t result = (void **)((char *)a1 + v2);
      break;
  }
  return result;
}

char *TXTranscriptionGenerator::getActiveTranscriptionByUnit(TXTranscriptionGenerator *a1, _DWORD *a2, CMTime *a3)
{
  switch(*a2)
  {
    case 3:
      uint64_t result = (char *)TXTranscriptionGenerator::getActiveTranscriptionByLine(a1, a3);
      break;
    case 6:
      uint64_t result = TXTranscriptionGenerator::getActiveTranscriptionByBlock(a1, a3);
      break;
    default:
      uint64_t result = (char *)a1 + 65440;
      break;
  }
  return result;
}

uint64_t TXTranscriptionGenerator::getWordIndexInPhrase(TXTranscriptionGenerator *this, int a2, int a3, unsigned int *a4)
{
  uint64_t result = 0;
  if (!a4) {
    return result;
  }
  int v6 = (int **)((char *)this + 65560);
  if (*((void *)this + 8195) == *((void *)this + 8196)) {
    return result;
  }
  unsigned int v9 = (*(uint64_t (**)(TXTranscriptionGenerator *))(*(void *)this + 720))(this);
  uint64_t v11 = *v6;
  uint64_t v10 = (unsigned int *)v6[1];
  if (*v6 == (int *)v10) {
    return 0;
  }
  unsigned int v12 = *v11;
  if (v9 >= *v11)
  {
    unint64_t v14 = (unsigned int *)(v11 + 1);
    while (v14 != v10)
    {
      unsigned int v13 = v12;
      unsigned int v15 = *v14++;
      unsigned int v12 = v15;
      if (v9 < v15) {
        goto LABEL_9;
      }
    }
    return 0;
  }
  unsigned int v13 = 0;
LABEL_9:
  unsigned int v16 = v12 + ~v9;
  if (!a3) {
    unsigned int v16 = v9 - v13;
  }
  *a4 = v16;
  return 1;
}

uint64_t TXTranscriptionGenerator::charIndexToBlockIndex(TXTranscriptionGenerator *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 0x2000);
  uint64_t v3 = *((void *)this + 8193);
  if (v2 == v3) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    unint64_t v5 = *(void *)(v2 + 24);
    if (v5 <= a2 && *(void *)(v2 + 32) + v5 > a2) {
      break;
    }
    uint64_t result = (result + 1);
    v2 += 48;
  }
  while (v2 != v3);
  return result;
}

unint64_t TXTGGetRangeOfWord(const TXTranscriptionGenerator *a1, unsigned int a2)
{
  if (!a1) {
    return -1;
  }
  uint64_t v2 = *((void *)a1 + 8180);
  uint64_t v3 = *((void *)a1 + 8181);
  if (v2 == v3) {
    return -1;
  }
  unint64_t v4 = a2;
  while (1)
  {
    PCString::PCString(&v11, (const PCString *)v2);
    long long v5 = *(_OWORD *)(v2 + 8);
    long long v6 = *(_OWORD *)(v2 + 24);
    uint64_t v14 = *(void *)(v2 + 40);
    long long v12 = v5;
    long long v13 = v6;
    unint64_t v7 = v6;
    unint64_t v8 = *((void *)&v6 + 1) + v6;
    PCString::~PCString(&v11);
    if (v7 <= v4 && v8 > v4) {
      break;
    }
    v2 += 48;
    if (v2 == v3) {
      return -1;
    }
  }
  return v7;
}

void TXTranscriptionGenerator::didChangeString(PCString *this)
{
  TXTextLayout::computeComposedCharacterIndices(this);
  TXTextLayout::updateStringTokenizer((TXTextLayout *)this);
  if (TXTranscriptionGenerator::hasBlockSequencing((TXTranscriptionGenerator *)this))
  {
    ((void (*)(PCString *))this->var0[34].data)(this);
  }
  else
  {
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&this[7622], &this[7623].var0->isa);
    this[7622].uint64_t var0 = (__CFString *)&this[7623];
    this[7624].uint64_t var0 = 0;
    this[7623].uint64_t var0 = 0;
  }
  uint64_t var0 = this[151].var0;
  if (var0 != (__CFString *)&this[150])
  {
    uint64_t v3 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      int data = var0->data;
      if (data)
      {
        if (v5)
        {
          long long v6 = (OZChannelBase *)v5;
          if (OZChannel::getValueAsInt((OZChannel *)(v5 + 29056), v3, 0.0) == 1)
          {
            if ((*((unsigned int (**)(void ***, uint64_t, uint64_t))v6->var2 + 3))(&v6->var2, 1, 1)) {
              OZChannelBase::setRangeName(v6, v7);
            }
          }
        }
      }
      uint64_t var0 = (__CFString *)var0->info;
    }
    while (var0 != (__CFString *)&this[150]);
  }
}

uint64_t TXTranscriptionGenerator::getNumWords(TXTranscriptionGenerator *this)
{
  StringPtr = TXChannelString::getStringPtr((TXTranscriptionGenerator *)((char *)this + 19048));
  unsigned int v3 = PCString::size((PCString *)StringPtr);
  return (*(unsigned int (**)(TXTranscriptionGenerator *, void))(*(void *)this + 720))(this, v3 - 1)
       + 1;
}

uint64_t TXTranscriptionGenerator::getWordIndex(TXTranscriptionGenerator *this, signed int a2)
{
  unint64_t v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v32, v4);
  long long v5 = (uint64_t **)((char *)this + 60984);
  if (TXTranscriptionGenerator::hasBlockSequencing(this) && !*((void *)this + 7624)) {
    (*(void (**)(TXTranscriptionGenerator *))(*(void *)this + 1104))(this);
  }
  long long v6 = (uint64_t **)((char *)this + 60976);
  for (uint64_t i = *v5; i; uint64_t i = (uint64_t *)*i)
  {
    signed int v8 = *((_DWORD *)i + 7);
    if (v8 <= a2)
    {
      if (v8 >= a2)
      {
        int v31 = a2;
        v33.uint64_t var0 = (__CFString *)&v31;
        uint64_t v15 = *((unsigned int *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 7622, &v31, (uint64_t)&std::piecewise_construct, (unsigned int **)&v33)+ 8);
        goto LABEL_36;
      }
      ++i;
    }
  }
  unsigned int v9 = (TXTranscriptionGenerator *)((char *)this + 19048);
  TXChannelString::getString((PCString *)this + 2381, &v33);
  uint64_t v10 = PCString::createUniStr(&v33);
  PCString::~PCString(&v33);
  StringPtr = TXChannelString::getStringPtr((TXTranscriptionGenerator *)((char *)this + 19048));
  long long v12 = PCString::size((PCString *)StringPtr);
  uint64_t v15 = 0;
  if (v12 && v10)
  {
    uint64_t v29 = this;
    long long v30 = v10;
    long long v13 = (__CFString *)*((void *)this + 7624);
    if (v13)
    {
      int v31 = v13 - 1;
      v33.uint64_t var0 = (__CFString *)&v31;
      uint64_t v14 = (*((_DWORD *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 7622, &v31, (uint64_t)&std::piecewise_construct, (unsigned int **)&v33)+ 8)+ 1);
    }
    else
    {
      uint64_t v14 = 0;
    }
    do
    {
      uint64_t v15 = v14;
      if (v13 >= v12) {
        break;
      }
      int v16 = v14 - 1;
      uint64_t v17 = v13;
      while (1)
      {
        long long v18 = TXChannelString::getStringPtr(v9);
        UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(*(CFStringRef *)v18, (int)v17);
        if (!TXCharacterSetIsWhitespaceOrNewline(CharacterAtIndex)) {
          break;
        }
        int v31 = (int)v17;
        v33.uint64_t var0 = (__CFString *)&v31;
        *((_DWORD *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v6, &v31, (uint64_t)&std::piecewise_construct, (unsigned int **)&v33)+ 8) = v16;
        uint64_t v17 = (__CFString *)(v17 + 1);
        if (v12 == v17) {
          goto LABEL_35;
        }
      }
      uint64_t v20 = (*(uint64_t (**)(TXTranscriptionGenerator *, __CFString *, uint64_t))(*(void *)v29 + 1112))(v29, v17, 1);
      if (v20 == -1) {
        break;
      }
      long long v13 = (__CFString *)(v20 + v21);
      if (v20 + v21)
      {
        uint64_t v22 = TXChannelString::getStringPtr(v9);
        UniChar v23 = CFStringGetCharacterAtIndex(*(CFStringRef *)v22, (int)v13 - 1);
        IsNewCTLineRef line = TXCharacterSetIsNewline(v23);
        char v25 = v12 <= v13 || IsNewline;
        if ((v25 & 1) == 0)
        {
LABEL_28:
          while (1)
          {
            double v26 = TXChannelString::getStringPtr(v9);
            UniChar v27 = CFStringGetCharacterAtIndex(*(CFStringRef *)v26, (int)v13);
            if (!TXCharacterSetIsPunctuation(v27)) {
              break;
            }
            long long v13 = (__CFString *)(v13 + 1);
            if (v12 == v13)
            {
              long long v13 = v12;
              break;
            }
          }
        }
      }
      else if (v12 > v13)
      {
        goto LABEL_28;
      }
      while (v17 < v13)
      {
        int v31 = (int)v17;
        v33.uint64_t var0 = (__CFString *)&v31;
        *((_DWORD *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v6, &v31, (uint64_t)&std::piecewise_construct, (unsigned int **)&v33)+ 8) = v15;
        LODWORD(v17) = v17 + 1;
      }
      uint64_t v14 = (v15 + 1);
    }
    while (v13 <= a2);
LABEL_35:
    MEMORY[0x1BA9BFB70](v30, 0x1000C80BDFB0063);
  }
LABEL_36:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v32);
  return v15;
}

void sub_1B764E2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, PCString a14)
{
}

void TXTranscriptionGenerator::computeWordIndices(TXTranscriptionGenerator *this)
{
  uint64_t v1 = (char *)this + 65440;
  uint64_t v2 = (char *)this + 60976;
  unsigned int v3 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v27, v3);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v2, *((void **)v2 + 1));
  *(void *)uint64_t v2 = v2 + 8;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x4812000000;
  uint64_t v22 = __Block_byref_object_copy__14;
  UniChar v23 = __Block_byref_object_dispose__14;
  uint64_t v24 = &unk_1B876C866;
  v26[0] = 0;
  v26[1] = 0;
  __p = 0;
  unint64_t v4 = *(const PCString **)v1;
  long long v5 = (const PCString *)*((void *)v1 + 1);
  if (*(const PCString **)v1 == v5)
  {
    long long v12 = 0;
    PCString v11 = (uint64_t **)v26;
  }
  else
  {
    do
    {
      uint64_t var0 = v4[3].var0;
      unint64_t v7 = v4[4].var0;
      PCString::PCString(&v28, v4);
      unsigned int v9 = PCString::ns_str(v8);
      PCString::~PCString(&v28);
      uint64_t v10 = [(__CFString *)v9 length];
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = *(void *)"";
      unsigned int v18[2] = ___ZN24TXTranscriptionGenerator18computeWordIndicesEv_block_invoke;
      void v18[3] = &unk_1E616BE68;
      v18[5] = var0;
      v18[6] = v7;
      v18[4] = &v19;
      -[__CFString enumerateSubstringsInRange:options:usingBlock:](v9, "enumerateSubstringsInRange:options:usingBlock:", 0, v10, 3, v18);
      v4 += 6;
    }
    while (v4 != v5);
    PCString v11 = (uint64_t **)(v20 + 7);
    long long v12 = (uint64_t *)v20[6];
  }
  long long v13 = *v11;
  if (v12 == *v11)
  {
    int v14 = 0;
  }
  else
  {
    int v14 = 0;
    do
    {
      uint64_t v15 = *v12;
      uint64_t v16 = v12[1];
      if (*v12 < (unint64_t)(v16 + *v12))
      {
        do
        {
          int v17 = v15;
          v28.uint64_t var0 = (__CFString *)&v17;
          *((_DWORD *)std::__tree<std::__value_type<int,unsigned int>,std::__map_value_compare<int,std::__value_type<int,unsigned int>,std::less<int>,true>,std::allocator<std::__value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v2, &v17, (uint64_t)&std::piecewise_construct, (unsigned int **)&v28)+ 8) = v14;
          LODWORD(v15) = v15 + 1;
          --v16;
        }
        while (v16);
      }
      ++v14;
      v12 += 2;
    }
    while (v12 != v13);
  }
  *((_DWORD *)v2 + 709) = v14;
  _Block_object_dispose(&v19, 8);
  if (__p)
  {
    v26[0] = __p;
    operator delete(__p);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v27);
}

void sub_1B764E51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  PCString::~PCString((PCString *)(v25 - 112));
  _Block_object_dispose(&a18, 8);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v25 - 128));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__14(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN24TXTranscriptionGenerator18computeWordIndicesEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 40) + a5;
  signed int v8 = *(void **)(*(void *)(a1 + 32) + 8);
  unsigned int v9 = (char *)v8[7];
  unint64_t v10 = v8[8];
  if ((unint64_t)v9 >= v10)
  {
    long long v12 = (char *)v8[6];
    uint64_t v13 = (v9 - v12) >> 4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v10 - (void)v12;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(v8 + 8), v16);
      long long v12 = (char *)v8[6];
      unsigned int v9 = (char *)v8[7];
    }
    else
    {
      int v17 = 0;
    }
    long long v18 = &v17[16 * v13];
    uint64_t v19 = &v17[16 * v16];
    *(void *)long long v18 = v7;
    *((void *)v18 + 1) = a6;
    PCString v11 = v18 + 16;
    if (v9 != v12)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v9 - 1);
        v18 -= 16;
        v9 -= 16;
      }
      while (v9 != v12);
      long long v12 = (char *)v8[6];
    }
    v8[6] = v18;
    void v8[7] = v11;
    unsigned char v8[8] = v19;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *(void *)unsigned int v9 = v7;
    *((void *)v9 + 1) = a6;
    PCString v11 = v9 + 16;
  }
  void v8[7] = v11;
}

unint64_t TXTranscriptionGenerator::getWordRange(TXTranscriptionGenerator *this, unsigned int a2, int a3)
{
  long long v6 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v12, v6);
  unint64_t v7 = TXTGGetRangeOfWord(this, a2);
  unint64_t v9 = v7;
  if ((a3 & 1) != 0 || v7 != a2)
  {
    if (a3)
    {
      unsigned int v10 = v7 + v8;
      if (v7 + v8 == a2
        && (*(unsigned int (**)(TXTranscriptionGenerator *))(*(void *)this + 216))(this) > a2)
      {
        goto LABEL_8;
      }
    }
  }
  else if (a2)
  {
    unsigned int v10 = v7 + v8;
LABEL_8:
    unint64_t v9 = TXTGGetRangeOfWord(this, v10);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v12);
  return v9;
}

void sub_1B764E78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

CFIndex TXTranscriptionGenerator::suggestLineBreak(PCString *this, CTTypesetterRef typesetter, CFIndex startIndex, uint64_t a4, double a5)
{
  CFIndex v8 = CTTypesetterSuggestLineBreak(typesetter, startIndex, a5);
  if (!TXTranscriptionGenerator::hasBlockSequencing((TXTranscriptionGenerator *)this))
  {
    CFIndex v9 = a4 + startIndex;
    uint64_t v10 = (v8 + a4 + startIndex);
    uint64_t v11 = ((uint64_t (*)(PCString *, uint64_t, uint64_t))this->var0[34].length)(this, v10, 1);
    unsigned int v13 = v11;
    if (v11 != -1 && v10 > v11 && v10 < (int)v11 + v12)
    {
      uint64_t v16 = v11 - v9;
      if (v16 >= 1)
      {
        TXChannelString::getString(this + 2381, &v21);
        int v17 = ((uint64_t (*)(PCString *))this->var0[6].length)(this);
        PCString::substr(&v21, v13, v17 - v13, (CFStringRef *)&v22.var0);
        long long v18 = PCString::ns_str(&v22);
        PCString::~PCString(&v22);
        PCString::~PCString(&v21);
        uint64_t v19 = -[__CFString rangeOfString:](v18, "rangeOfString:", -[__CFString stringByTrimmingCharactersInSet:](v18, "stringByTrimmingCharactersInSet:", [MEMORY[0x1E4F28B88] whitespaceCharacterSet]));
        if (v19 != 0x7FFFFFFFFFFFFFFFLL) {
          return v19 + v16;
        }
      }
    }
  }
  return v8;
}

void sub_1B764E90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void TXTranscriptionGenerator::deactivateWordSegment(TXTranscriptionGenerator *this, int a2, const CMTime *a3)
{
  unint64_t v4 = (char *)this + 65416;
  long long v5 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v11, v5);
  uint64_t v6 = *((void *)v4 + 3);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)v4 + 4) - v6) >> 4) > a2)
  {
    unint64_t v7 = *(int *)(v6 + 48 * a2 + 44);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v4 + 1) - *(void *)v4) >> 4) > v7)
    {
      uint64_t v8 = *(void *)v4 + 48 * (int)v7;
      int v10 = *(unsigned __int8 *)(v8 + 40);
      CFIndex v9 = (unsigned char *)(v8 + 40);
      if (v10)
      {
        unsigned char *v9 = 0;
        v4[257] = 1;
      }
    }
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v11);
}

void TXTranscriptionGenerator::deactivateLineSegment(TXTranscriptionGenerator *this, int a2, CMTime *a3)
{
  uint64_t v6 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v11, v6);
  TXTranscriptionGenerator::getActiveTranscriptionByLine(this, a3);
  uint64_t v7 = *((void *)this + 8186);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 8187) - v7) >> 4) > a2)
  {
    uint64_t v8 = v7 + 48 * a2;
    int v10 = *(unsigned __int8 *)(v8 + 40);
    CFIndex v9 = (unsigned char *)(v8 + 40);
    if (v10)
    {
      unsigned char *v9 = 0;
      ++*((_DWORD *)this + 15952);
      *((unsigned char *)this + 65673) = 1;
    }
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v11);
}

void sub_1B764EA94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::deactivateBlock(TXTranscriptionGenerator *this, unsigned int a2)
{
  unint64_t v4 = (char *)this + 65512;
  long long v5 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v11, v5);
  uint64_t v6 = *((void *)v4 + 3);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)v4 + 4) - v6) >> 4) > a2)
  {
    unint64_t v7 = *(int *)(v6 + 48 * a2 + 44);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v4 + 1) - *(void *)v4) >> 4) > v7)
    {
      uint64_t v8 = *(void *)v4 + 48 * (int)v7;
      int v10 = *(unsigned __int8 *)(v8 + 40);
      CFIndex v9 = (unsigned char *)(v8 + 40);
      if (v10)
      {
        unsigned char *v9 = 0;
        *((_DWORD *)this + 15952) += TXTextLayout::getNumLinesInParagraphBounds(this);
        v4[161] = 1;
      }
    }
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v11);
}

void sub_1B764EB7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXTranscriptionGenerator::scaleToBothMargins(TXTranscriptionGenerator *this, CMTime *a2)
{
  TXTextLayout::getVisibleCharacterRange(this, a2, (uint64_t)&v18);
  int v4 = v19;
  if (v19)
  {
    long long v5 = (double *)((char *)this + 65680);
    if (v18 != *((_DWORD *)this + 16428) || v19 != *((_DWORD *)this + 16429))
    {
      if ((int *)((char *)this + 65712) != &v18)
      {
        *((_DWORD *)this + 16428) = v18;
        *((_DWORD *)this + 16429) = v4;
      }
      if (TXTextLayout::isVerticalLayout(this))
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), MEMORY[0x1E4F1FA48], 0.0);
        double v7 = v6;
        uint64_t v8 = 24728;
      }
      else
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24424), MEMORY[0x1E4F1FA48], 0.0);
        double v7 = v9;
        uint64_t v8 = 24272;
      }
      double v10 = 0.0;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + v8), MEMORY[0x1E4F1FA48], 0.0);
      double v12 = v7 - v11;
      double v13 = *v5;
      double *v5 = 1.0;
      int v14 = 100;
      double v15 = 1.0;
      do
      {
        BOOL v16 = TXTranscriptionGenerator::stringInRangeFitsInParagraphWidth((PCString *)this, &v18, a2, v12);
        double v17 = *v5;
        if (v16)
        {
          if (v17 == 1.0)
          {
            if (v13 != 1.0)
            {
              TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
              TXTextLayout::doLayoutForParagraphs(this, v12, a2);
            }
            return;
          }
          if (v15 - v10 < 0.001) {
            return;
          }
        }
        else
        {
          double v15 = *v5;
          double v17 = v10;
        }
        double *v5 = (v15 + v17) * 0.5;
        TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
        TXTextLayout::doLayoutForParagraphs(this, v12, a2);
        double v10 = v17;
        --v14;
      }
      while (v14);
    }
  }
}

BOOL TXTranscriptionGenerator::stringInRangeFitsInParagraphWidth(PCString *a1, int *a2, CMTime *a3, double a4)
{
  uint64_t v8 = a1 + 7353;
  double v9 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v36, v9);
  if (v8->var0 == v8[1].var0)
  {
    BOOL v17 = 1;
    goto LABEL_24;
  }
  int v10 = *a2;
  CFIndex v11 = a2[1];
  TXChannelString::getString(a1 + 2381, &valuePtr);
  PCString::substr(&valuePtr, v10, v11, (CFStringRef *)&v35.var0);
  PCString::~PCString(&valuePtr);
  isCGFloat a = v8->var0->isa;
  int info = (std::__shared_weak_count *)v8->var0->info;
  if (info) {
    atomic_fetch_add_explicit(&info->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = isa[33];
  if (v14)
  {
    BOOL v16 = *(OZChannel **)(v14 + 8);
    double v15 = *(std::__shared_weak_count **)(v14 + 16);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    double v15 = 0;
    BOOL v16 = 0;
  }
  var8 = (const void *)v16[3].var8;
  var9 = (std::__shared_weak_count *)v16[3].var9;
  if (var9) {
    atomic_fetch_add_explicit(&var9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (var8)
  {
    if (v20)
    {
      PCString v21 = v20;
      if (!var9)
      {
        UniChar v23 = 0;
        goto LABEL_17;
      }
      atomic_fetch_add_explicit(&var9->__shared_owners_, 1uLL, memory_order_relaxed);
      PCString v22 = var9;
      goto LABEL_16;
    }
  }
  PCString v22 = 0;
  PCString v21 = 0;
  UniChar v23 = 0;
  if (var9)
  {
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](var9);
    UniChar v23 = v22;
  }
LABEL_17:
  CMTime v33 = *a3;
  float Size = TXTextStyle::getSize(v16, &v33, 0.0);
  CFMutableArrayRef Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFAttributedStringBeginEditing(Mutable);
  double v26 = PCString::cf_str(&v35);
  v37.CFIndex location = 0;
  v37.int length = 0;
  CFAttributedStringReplaceString(Mutable, v37, v26);
  UniChar v27 = PCString::cf_str(v21 + 2);
  CTFontRef v28 = CTFontCreateWithName(v27, Size, 0);
  v38.CFIndex location = 0;
  v38.int length = v11;
  CFAttributedStringSetAttribute(Mutable, v38, (CFStringRef)*MEMORY[0x1E4F243F0], v28);
  LODWORD(valuePtr.var0) = 0;
  CFNumberRef v29 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  v39.int length = CFAttributedStringGetLength(Mutable);
  v39.CFIndex location = 0;
  CFAttributedStringSetAttribute(Mutable, v39, (CFStringRef)*MEMORY[0x1E4F24788], v29);
  CFRelease(v29);
  CFAttributedStringEndEditing(Mutable);
  long long v30 = CTTypesetterCreateWithAttributedString(Mutable);
  CFIndex v31 = CTTypesetterSuggestLineBreak(v30, 0, a4);
  CFRelease(v28);
  CFRelease(v30);
  CFRelease(Mutable);
  BOOL v17 = v31 == v11;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (info) {
    std::__shared_weak_count::__release_shared[abi:ne180100](info);
  }
  PCString::~PCString(&v35);
LABEL_24:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v36);
  return v17;
}

void sub_1B764F040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, PCString a13, char a14)
{
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    if (!v15)
    {
LABEL_3:
      if (!v14) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v15)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  if (!v14)
  {
LABEL_5:
    PCString::~PCString(&a13);
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a14);
    _Unwind_Resume(a1);
  }
LABEL_4:
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  goto LABEL_5;
}

double TXTranscriptionGenerator::getBothMarginScale(TXTranscriptionGenerator *this, const CMTime *a2)
{
  return *((double *)this + 8210);
}

uint64_t TXTranscriptionGenerator::getAlignmentOffset(TXTranscriptionGenerator *this, double *a2, double *a3, const OZRenderState *a4)
{
  double v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24728), MEMORY[0x1E4F1FA48], 0.0);
  double v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24576), v7, 0.0);
  double v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 24272), v7, 0.0);
  *(void *)a2 = v12;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 21368), v7, 0.0) != 2)
  {
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 21368), MEMORY[0x1E4F1FA48], 0.0)) {
      return 0;
    }
    double v9 = *((double *)this + 8220);
    if (v9 > -0.0000001 && v9 < 0.0000001)
    {
      double v9 = v11 - **(double **)(**((void **)this + 2378) + 888);
      *((double *)this + 8220) = v9;
    }
  }
  *a3 = v9;
  return 0;
}

BOOL TXTranscriptionGenerator::isUsingSubstituteFont(PCString *this)
{
  CFMutableArrayRef Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFAttributedStringBeginEditing(Mutable);
  unsigned int v3 = PCString::cf_str(this + 8208);
  v27.CFIndex location = 0;
  v27.int length = 0;
  CFAttributedStringReplaceString(Mutable, v27, v3);
  TXTextLayout::getStyleAtCharOffset((uint64_t)this, 0, &v25);
  v24.CFIndex location = 0;
  v24.int length = PCString::size(this + 8208);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v25 + 5504), MEMORY[0x1E4F1FA48], 0.0);
  PCString v22 = (TXTextStyle *)v25;
  UniChar v23 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  TXTextLayout::applyFontToAttributedString((TXTextLayout *)this, Mutable, &v22, &v24, MEMORY[0x1E4F1FA48], ValueAsInt != 0);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  CFAttributedStringEndEditing(Mutable);
  long long v5 = CTLineCreateWithAttributedString(Mutable);
  CFArrayRef GlyphRuns = CTLineGetGlyphRuns(v5);
  CFIndex Count = CFArrayGetCount(GlyphRuns);
  CFAttributedStringRef cf = v5;
  if (Count < 1)
  {
    BOOL v10 = 0;
  }
  else
  {
    CFIndex v8 = 0;
    CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4F243F0];
    BOOL v10 = 1;
    do
    {
      ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, v8);
      CFDictionaryRef Attributes = CTRunGetAttributes(ValueAtIndex);
      CFIndex location = CTRunGetStringRange(ValueAtIndex).location;
      CFNumberRef Attribute = (const __CTFont *)CFAttributedStringGetAttribute(Mutable, location, v9, 0);
      CFNumberRef Value = (const __CTFont *)CFDictionaryGetValue(Attributes, v9);
      CFStringRef v16 = CTFontCopyPostScriptName(Attribute);
      CFStringRef v17 = CTFontCopyPostScriptName(Value);
      CFStringRef v18 = v17;
      BOOL v19 = 0;
      if (v16 && v17)
      {
        if (CFStringCompare(v16, v17, 0)) {
          BOOL v19 = !OZIsFontAppleColorEmoji(Value);
        }
        else {
          BOOL v19 = 0;
        }
      }
      CFRelease(v16);
      CFRelease(v18);
      if (v19) {
        break;
      }
      BOOL v10 = ++v8 < Count;
    }
    while (Count != v8);
  }
  CFRelease(cf);
  CFRelease(Mutable);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  return v10;
}

void sub_1B764F408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL non-virtual thunk to'TXTranscriptionGenerator::isUsingSubstituteFont(PCString *this)
{
  return TXTranscriptionGenerator::isUsingSubstituteFont(this - 8058);
}

void TXTranscriptionGenerator::setLocaleIdentifier(TXTranscriptionGenerator *this, const __CFString *a2)
{
  *((void *)this + 8221) = a2;
  CFLocaleRef v3 = CFLocaleCreate(0, a2);
  TXTextLayout::setLocale(this, v3);

  CFRelease(v3);
}

void non-virtual thunk to'TXTranscriptionGenerator::setLocaleIdentifier(TXTranscriptionGenerator *this, const __CFString *a2)
{
}

uint64_t TXTranscriptionGenerator::getLineCount(TXTranscriptionGenerator *this)
{
  TranscriptionByLine = TXTranscriptionGenerator::getTranscriptionByLine(this);
  return -1431655765
       * ((unint64_t)((unsigned char *)TranscriptionByLine[1] - (unsigned char *)*TranscriptionByLine) >> 4);
}

uint64_t non-virtual thunk to'TXTranscriptionGenerator::getLineCount(TXTranscriptionGenerator *this)
{
  TranscriptionByLine = TXTranscriptionGenerator::getTranscriptionByLine((TXTranscriptionGenerator *)((char *)this - 64464));
  return -1431655765
       * ((unint64_t)((unsigned char *)TranscriptionByLine[1] - (unsigned char *)*TranscriptionByLine) >> 4);
}

uint64_t TXTranscriptionGenerator::setDynamicLineSpacingForDiacritics(uint64_t this, double a2)
{
  if (*(double *)(this + 65784) < a2)
  {
    *(double *)(this + 65784) = a2;
    *(double *)(this + 64400) = a2;
  }
  return this;
}

CGColorSpace **TXTranscriptionGenerator::getSequencedColor@<X0>(TXTranscriptionGenerator *this@<X0>, const CMTime *a2@<X1>, PCColor *a3@<X2>, double a4@<D0>, uint64_t a5@<X8>)
{
  long long v10 = *(_OWORD *)&a3->var0.var1[1];
  *(_OWORD *)a5 = *(_OWORD *)&a3->var0.var0;
  *(_OWORD *)(a5 + 16) = v10;
  *(_OWORD *)(a5 + 32) = *(_OWORD *)&a3->var0.var1[3];
  obuint64_t j = a3->var1._obj;
  *(void *)(a5 + 48) = obj;
  uint64_t v12 = (CGColorSpace **)(a5 + 48);
  if (obj) {
    PCCFRefTraits<CGColorSpace *>::retain(obj);
  }
  __n128 result = (CGColorSpace **)OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 28720), 0, 1);
  if (result)
  {
    int v14 = (*(uint64_t (**)(TXTranscriptionGenerator *, void))(*(void *)this + 720))(this, a4);
    long long v22 = *(_OWORD *)&a2->value;
    CMTimeEpoch epoch = a2->epoch;
    CMTime time1 = *a2;
    CMTime time2 = *(CMTime *)((char *)this + 65800);
    double v15 = (_DWORD *)((char *)this + 65824);
    if (CMTimeCompare(&time1, &time2) || v14 != *v15)
    {
      if (!*((unsigned char *)this + 65888))
      {
        CMTime v21 = *a2;
        OZChannelColorNoAlpha::setColor((TXTranscriptionGenerator *)((char *)this + 28720), &v21, a3, 1);
        *((unsigned char *)this + 65888) = 1;
      }
      CMTime v20 = *a2;
      OZChannelColorNoAlpha::getColor((TXTranscriptionGenerator *)((char *)this + 28720), &v20, (PCColor *)a5, a4);
      *(_OWORD *)((char *)this + 65800) = v22;
      *((void *)this + 8227) = epoch;
      _DWORD *v15 = v14;
      long long v19 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)((char *)this + 65832) = *(_OWORD *)a5;
      *(_OWORD *)((char *)this + 65848) = v19;
      CFStringRef v18 = (CGColorSpace **)((char *)this + 65880);
      CFStringRef v17 = v12;
      *(_OWORD *)((char *)this + 65864) = *(_OWORD *)(a5 + 32);
    }
    else
    {
      long long v16 = *(_OWORD *)((char *)this + 65848);
      *(_OWORD *)a5 = *(_OWORD *)((char *)this + 65832);
      *(_OWORD *)(a5 + 16) = v16;
      *(_OWORD *)(a5 + 32) = *(_OWORD *)((char *)this + 65864);
      CFStringRef v17 = (CGColorSpace **)((char *)this + 65880);
      CFStringRef v18 = v12;
    }
    return PCCFRef<CGColorSpace *>::operator=(v18, v17);
  }
  return result;
}

void sub_1B764F748(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

double TXTranscriptionGenerator::getSequencedOpacity(TXTranscriptionGenerator *this, OZChannel *a2, OZChannel *a3, const CMTime *a4, double a5, double a6)
{
  int v12 = (*(uint64_t (**)(TXTranscriptionGenerator *, void))(*(void *)this + 720))(this, a6);
  CMTime v19 = *a4;
  unsigned int var3 = a3->var3;
  if (var3 == 1009)
  {
    int v14 = (double *)((char *)this + 65896);
  }
  else
  {
    if (var3 != 1022) {
      return a5;
    }
    int v14 = (double *)((char *)this + 65944);
  }
  CMTime time1 = *a4;
  CMTime time2 = *(CMTime *)v14;
  if (!CMTimeCompare(&time1, &time2) && v12 == *((_DWORD *)v14 + 6)) {
    return v14[4];
  }
  if (!*((unsigned char *)v14 + 40))
  {
    (*((void (**)(OZChannel *, const CMTime *, uint64_t, double))a3->var0 + 89))(a3, a4, 1, a5);
    *((unsigned char *)v14 + 40) = 1;
  }
  OZChannel::getValueAsDouble(a3, a4, a6);
  double v16 = v15;
  OZChannel::getValueAsDouble(a2, a4, a6);
  a5 = v16 * v17;
  *(CMTime *)int v14 = v19;
  *((_DWORD *)v14 + 6) = v12;
  v14[4] = a5;
  return a5;
}

uint64_t TXFileLoadingGenerator::getURL(TXFileLoadingGenerator *this)
{
  return (uint64_t)this + 64432;
}

uint64_t TXTranscriptionGenerator::setShouldDisableFadeOut(uint64_t this, char a2)
{
  *(unsigned char *)(this + 65776) = a2;
  return this;
}

uint64_t non-virtual thunk to'TXTranscriptionGenerator::setShouldDisableFadeOut(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1312) = a2;
  return this;
}

void OZChannelUint32::OZChannelUint32(OZChannelUint32 *this, int a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannelUint32_FactoryBase = (OZFactory *)getOZChannelUint32_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelUint32_FactoryBase, a3, a4, a5, a6, a7, a8);
  this->uint64_t var0 = (void **)&unk_1F1101490;
  this->var2 = (void **)&unk_1F11017F0;
  OZChannelUint32Info = (OZChannelUint32 *)OZChannelUint32::createOZChannelUint32Info(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelUint32::_OZChannelUint32Info;
    this->var17 = (OZChannelInfo *)OZChannelUint32::_OZChannelUint32Info;
  }
  this->var16 = var17;
  OZChannelUint32::createOZChannelUint32Impl(OZChannelUint32Info);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelUint32::_OZChannelUint32Impl;
    this->var15 = (OZChannelImpl *)OZChannelUint32::_OZChannelUint32Impl;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, (double)a2);
  OZChannel::setInitialValue((OZChannel *)this, (double)a2, 0);
}

void sub_1B764FA48(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (PCString *)**a1;
  if (v2)
  {
    int v4 = (PCString *)v1[1];
    long long v5 = v2;
    if (v4 != v2)
    {
      do
        PCString::~PCString(v4 - 6);
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<TXTranscriptionSegment>::__init_with_size[abi:ne180100]<TXTranscriptionSegment*,TXTranscriptionSegment*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    double v6 = result;
    std::vector<std::pair<CMTime,std::vector<CMTime>>>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TXTranscriptionSegment>,TXTranscriptionSegment*,TXTranscriptionSegment*,TXTranscriptionSegment*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B764FB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TXTranscriptionSegment>,TXTranscriptionSegment*,TXTranscriptionSegment*,TXTranscriptionSegment*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      PCString::PCString((PCString *)(a4 + v7), (const PCString *)(a2 + v7));
      long long v8 = *(_OWORD *)(a2 + v7 + 8);
      long long v9 = *(_OWORD *)(a2 + v7 + 24);
      *(void *)(v10 + 40) = *(void *)(a2 + v7 + 40);
      *(_OWORD *)(v10 + 24) = v9;
      *(_OWORD *)(v10 + 8) = v8;
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B764FBEC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 48;
    do
    {
      PCString::~PCString((PCString *)(v4 + v2));
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<TXTranscriptionSegment>::__push_back_slow_path<TXTranscriptionSegment const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  CMTime v20 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  double v16 = v10;
  double v17 = (PCString *)&v10[48 * v4];
  CFStringRef v18 = v17;
  CMTime v19 = &v10[48 * v9];
  PCString::PCString(v17, (const PCString *)a2);
  double v11 = v17;
  long long v12 = *(_OWORD *)(a2 + 8);
  long long v13 = *(_OWORD *)(a2 + 24);
  v17[5].uint64_t var0 = *(__CFString **)(a2 + 40);
  *(_OWORD *)&v11[3].uint64_t var0 = v13;
  *(_OWORD *)&v11[1].uint64_t var0 = v12;
  v18 += 6;
  std::vector<TXTranscriptionSegment>::__swap_out_circular_buffer(a1, &v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<TXTranscriptionSegment>::~__split_buffer((uint64_t)&v16);
  return v14;
}

void sub_1B764FD24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<TXTranscriptionSegment>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<TXTranscriptionSegment>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TXTranscriptionSegment>,std::reverse_iterator<TXTranscriptionSegment*>,std::reverse_iterator<TXTranscriptionSegment*>,std::reverse_iterator<TXTranscriptionSegment*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TXTranscriptionSegment>,std::reverse_iterator<TXTranscriptionSegment*>,std::reverse_iterator<TXTranscriptionSegment*>,std::reverse_iterator<TXTranscriptionSegment*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      PCString::PCString((PCString *)(a7 + v11 - 48), (const PCString *)(a3 + v11 - 48));
      long long v13 = *(_OWORD *)(a3 + v11 - 40);
      long long v14 = *(_OWORD *)(a3 + v11 - 24);
      *(void *)(v12 - 8) = *(void *)(a3 + v11 - 8);
      *(_OWORD *)(v12 - 24) = v14;
      *(_OWORD *)(v12 - 40) = v13;
      v11 -= 48;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B764FE48(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 48)
    PCString::~PCString((PCString *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<TXTranscriptionSegment>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    PCString::~PCString((PCString *)(i - 48));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t **std::__tree<int>::__emplace_unique_key_args<int,int>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

PCString *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TXTranscriptionSegment *,TXTranscriptionSegment *,TXTranscriptionSegment *,0>(PCString *a1, PCString *a2, PCString *this)
{
  unint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    PCString::set(this, v4);
    long long v6 = *(_OWORD *)&v4[1].var0;
    long long v7 = *(_OWORD *)&v4[3].var0;
    this[5].uint64_t var0 = v4[5].var0;
    *(_OWORD *)&this[3].uint64_t var0 = v7;
    *(_OWORD *)&this[1].uint64_t var0 = v6;
    this += 6;
    v4 += 6;
  }
  while (v4 != v5);
  return v5;
}

void std::vector<TXTranscriptionSegment>::__vdeallocate(void **a1)
{
  uint64_t v1 = (PCString *)*a1;
  if (*a1)
  {
    uint64_t v3 = (PCString *)a1[1];
    unint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        PCString::~PCString(v3 - 6);
      while (v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void TXCoreTextGlyph::TXCoreTextGlyph(TXCoreTextGlyph *this, __int16 a2, __int16 a3, TXFont *a4)
{
  TXTextureGlyph::TXTextureGlyph(this, a2, a3, a4);
  *(void *)uint64_t v4 = &unk_1F10B39D8;
  *(unsigned char *)(v4 + 156) = 1;
}

void TXCoreTextGlyph::~TXCoreTextGlyph(TXCoreTextGlyph *this)
{
  TXTextureGlyph::~TXTextureGlyph(this);

  JUMPOUT(0x1BA9BFBA0);
}

__n128 TXCoreTextGlyph::getBounds(TXTextureGlyph *a1, uint64_t a2, uint64_t a3)
{
  uint64_t GlyphRep = TXCoreTextGlyph::getGlyphRep(a1, a3);
  __n128 result = *(__n128 *)(GlyphRep + 16);
  *(_OWORD *)a2 = *(_OWORD *)GlyphRep;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t TXCoreTextGlyph::getGlyphRep(TXTextureGlyph *a1, uint64_t a2)
{
  TXCoreTextGlyph::getCacheHashKey((uint64_t)a1);
  uint64_t CachedMetrics = TXTextureGlyph::getCachedMetrics(a1, (const PCHash128 *)&v9);
  if (!CachedMetrics) {
    TXCoreTextGlyph::makeTextureGlyphRep((uint64_t)a1, a2);
  }
  uint64_t v5 = CachedMetrics;
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a2 + 38) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    PCMatrix33Tmpl<double>::operator=(v6, v5 + 88);
  }
  return v5;
}

double TXCoreTextGlyph::getPivot(TXTextureGlyph *a1, void *a2, double *a3, uint64_t a4)
{
  uint64_t GlyphRep = TXCoreTextGlyph::getGlyphRep(a1, a4);
  *a2 = *(void *)(GlyphRep + 32);
  double result = *(double *)(GlyphRep + 40);
  *a3 = result;
  return result;
}

double TXCoreTextGlyph::getAdvanceWidth(TXTextureGlyph *a1, uint64_t a2)
{
  return *(double *)(TXCoreTextGlyph::getGlyphRep(a1, a2) + 16);
}

uint64_t TXCoreTextGlyph::getTransform(TXTextureGlyph *a1, uint64_t a2)
{
  return TXCoreTextGlyph::getGlyphRep(a1, a2) + 88;
}

void TXCoreTextGlyph::getCacheHashKey(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = v5;
  v10[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v10);
  PCHashWriteStream::reset((uint64_t)v10);
  PCHashWriteStream::writeValue(v10, *(_WORD *)(v4 + 8));
  int v7 = (*(uint64_t (**)(void))(**(void **)(v4 + 16) + 16))(*(void *)(v4 + 16));
  PCHashWriteStream::writeValue(v10, v7);
  PCHashWriteStream::writeValue(v10, *(_DWORD *)(v3 + 32));
  PCHashWriteStream::writeValue(v10, *(double *)v3);
  PCHashWriteStream::writeValue(v10, *(unsigned char *)(v3 + 8));
  PCHashWriteStream::writeValue(v10, *(double *)(v3 + 16));
  PCHashWriteStream::writeValue(v10, *(unsigned char *)(v3 + 36));
  uint64_t v8 = *(double **)(v3 + 24);
  if (v8)
  {
    double v9 = v8[4];
    PCHashWriteStream::writeValue(v10, floor(*v8 * 64.0 + 0.0000001) * 0.015625);
    PCHashWriteStream::writeValue(v10, floor(v9 * 64.0 + 0.0000001) * 0.015625);
  }
  PCHashWriteStream::close(v10);
  _OWORD *v6 = *(_OWORD *)PCHashWriteStream::getHash(v10)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v10);
}

void sub_1B765039C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void TXCoreTextGlyph::getBitmapRenderParams(uint64_t a1@<X0>, uint64_t a2@<X1>, float64x2_t *a3@<X2>, uint8x8_t *a4@<X8>)
{
  uint64_t v6 = a1;
  int v7 = *(const PCString **)(a1 + 16);
  __int32 v8 = ((uint64_t (*)(const PCString *))v7->var0->data)(v7);
  uint64_t v28 = 0;
  v29[0] = 0.0;
  v26[0] = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v26[1] = _Q0;
  uint64_t v27 = 0;
  double v25 = 0.0;
  __int16 v24 = 0;
  TXGetGlyphBitmapInfo(v6, (uint64_t)v7, *(unsigned __int8 *)(a2 + 8), a3, v29, *(double **)(a2 + 24), v26, (uint64_t *)&v25, *(double *)a2, *(double *)(a2 + 16), (CGGlyph *)&v24, *(unsigned char *)(a2 + 36));
  double v14 = *(double *)a2;
  LOBYTE(v6) = *(unsigned char *)(a2 + 8);
  double v15 = *(double *)(a2 + 16);
  double v16 = v29[0];
  double v17 = v25;
  __int16 v18 = v24;
  uint64_t v19 = *(void *)(a2 + 24);
  char v20 = *(unsigned char *)(a2 + 37);
  char v21 = CGColorSpaceUsesExtendedRange(*(CGColorSpaceRef *)(a2 + 40));
  PCString::PCString(&v23, v7 + 14);
  TXCGRenderParams::TXCGRenderParams(a4, (uint8x8_t *)a2, v8, v6, a3, v18, v19, v26, v14, v15, v16, v17, v20, v21, 0, &v23, v7[15].var0);
  PCString::~PCString(&v23);
}

void sub_1B7650534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14)
{
}

void TXCoreTextGlyph::getBitmap(OZCacheManager *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, void *a6@<X8>)
{
  OZCacheManager::Instance(a1);
  TXCoreTextGlyph::getCacheHashKey((uint64_t)a1);
  OZCacheManager::getImageForKey((const PCHash128 *)v19, a6);
  uint64_t v12 = *(double **)(a3 + 24);
  if (v12)
  {
    double v13 = floor(v12[4] * 64.0 + 0.0000001) * 0.015625;
    *uint64_t v12 = floor(*v12 * 64.0 + 0.0000001) * 0.015625;
    v12[4] = v13;
  }
  if (*a6 && (a5 & 1) != 0)
  {
    if (a2)
    {
      if (a4)
      {
        (*(void (**)(OZCacheManager *, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2, a3);
      }
      else
      {
        (*(void (**)(PCString *__return_ptr, OZCacheManager *, uint64_t, uint64_t))(*(void *)a1 + 40))(v14, a1, a3, a2);
        TXCGRenderParams::~TXCGRenderParams(v14);
      }
    }
  }
  else
  {
    double v17 = 0;
    __int16 v18 = 0;
    (*(void (**)(PCString *__return_ptr, OZCacheManager *, uint64_t, uint64_t))(*(void *)a1 + 40))(v14, a1, a3, a2);
    TXDrawGlyphToBitmap((uint64_t)v14, *(CGColorSpaceRef *)(a3 + 40), &v18);
    if (v18)
    {
      if (v15)
      {
        if (v16) {
          operator new();
        }
        operator new();
      }
      if (v16) {
        operator new();
      }
      operator new();
    }
    TXCGRenderParams::~TXCGRenderParams(v14);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v17);
  }
}

void sub_1B76509FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  MEMORY[0x1BA9BFBA0](v10, 0x10A1C405CA75B9BLL);
  TXCGRenderParams::~TXCGRenderParams((PCString *)va);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v11 - 112));
  double v13 = *(std::__shared_weak_count **)(v9 + 8);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(a1);
}

void sub_1B7650A94()
{
}

void TXCoreTextGlyph::getHGBitmap(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  (*(void (**)(PCString *__return_ptr))(*(void *)a1 + 40))(v23);
  double v8 = *(double *)(a3 + 16);
  if (v8 >= 0.0)
  {
    double v9 = *(double *)(a3 + 24);
    if (v9 >= 0.0)
    {
      float v10 = v8;
      float v11 = v9;
      uint64_t v12 = HGRectMake4f(v7, 0.0, 0.0, v10, v11);
      uint64_t v14 = v13;
      int v15 = v24;
      int v16 = v25;
      double v17 = HGObject::operator new(0x80uLL);
      __int16 v18 = v17;
      if (v16) {
        unsigned int v19 = 6;
      }
      else {
        unsigned int v19 = 2;
      }
      if (v16) {
        unsigned int v20 = 27;
      }
      else {
        unsigned int v20 = 24;
      }
      if (v15) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = v19;
      }
      HGBitmap::HGBitmap(v17, v12, v14, v21);
      if (v18) {
        *a4 = v18;
      }
      uint64_t v26 = *((void *)v18 + 8);
      long long v22 = 0;
      TXDrawGlyphToBitmap((uint64_t)v23, *(CGColorSpaceRef *)(a2 + 40), (void **)v18 + 10);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v22);
    }
  }
  TXCGRenderParams::~TXCGRenderParams(v23);
}

void sub_1B7650BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, CGColorSpace *);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  uint64_t v4 = *v2;
  TXCGRenderParams::~TXCGRenderParams((PCString *)va1);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  _Unwind_Resume(a1);
}

double TXCoreTextGlyph::getTexture@<D0>(OZCacheManager *a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, HGGPUComputeDevice **a5@<X5>, char a6@<W6>, EAGLContext *EAGLContext@<X7>, uint64_t *a8@<X8>)
{
  *a4 = 0;
  int v15 = (PGTextureCache *)OZCacheManager::Instance(a1);
  TXCoreTextGlyph::getCacheHashKey((uint64_t)a1);
  OZCacheManager::getTextureForKey(v15, a5, (const PCHash128 *)v31, 0, a8);
  uint64_t v16 = *a8;
  if (*a8)
  {
    if (a2) {
      (*(void (**)(OZCacheManager *, float64x2_t *, uint64_t))(*(void *)a1 + 16))(a1, a2, a3);
    }
    HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
    int v25 = OZHostApplicationDelegateHandler::wantsToUseCachedTextureForText(HostApplicationDelegate) ^ 1;
    if (!v16) {
      LOBYTE(vTXTextLayout::setAllParagraphsDirty(this - 25) = 1;
    }
    if ((v25 & 1) == 0)
    {
      uint64_t CachedMetrics = TXTextureGlyph::getCachedMetrics(a1, (const PCHash128 *)v31);
      if (CachedMetrics)
      {
        if (*(void *)(a3 + 24)) {
          return PCMatrix33Tmpl<double>::operator=(*(void *)(a3 + 24), CachedMetrics + 88);
        }
      }
    }
  }
  else
  {
    double v17 = (const PCString *)*((void *)a1 + 2);
    __int32 v18 = ((uint64_t (*)(const PCString *))v17->var0->data)(v17);
    uint64_t v29 = 0;
    long long v30 = 0;
    BOOL v19 = CGColorSpaceUsesExtendedRange(*(CGColorSpaceRef *)(a3 + 40));
    TXDrawGlyphToBitmap((uint64_t)a1, v17, v18, *(unsigned __int8 *)(a3 + 8), *(CGColorSpace **)(a3 + 40), v19, &v30, a2, *(double *)a3, *(double *)(a3 + 16), (double *)&v29, *(double **)(a3 + 24), a6, 1);
    if (v30)
    {
      PCColorSpaceHandle::PCColorSpaceHandle((PCColorSpaceHandle *)v28, *(CGColorSpaceRef *)(a3 + 40));
      if (!EAGLContext)
      {
        uint64_t v21 = PGGetPerThreadContext();
        ProGL::Private::ProgramHelper::getProgramContext(v21, v27);
        EAGLContext = (EAGLContext *)ProGL::ContextHandle::getEAGLContext((ProGL::ContextHandle *)v27);
        ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v27);
      }
      ProGL::CurrentContextSentry::CurrentContextSentry((ProGL::CurrentContextSentry *)v27, EAGLContext);
      if (a6)
      {
        if (v19) {
          unsigned int v22 = 36193;
        }
        else {
          unsigned int v22 = 5121;
        }
        PGMake2DTexture((ProGL::GL *)(uint64_t)a2[1].f64[0], (uint64_t)a2[1].f64[1], (const PCColorSpaceHandle *)v28, 0, 6408, v22, (const PCColorSpaceHandle *)v30);
      }
      glPixelStorei(0xCF5u, 1);
      if (v19) {
        unsigned int v23 = 36193;
      }
      else {
        unsigned int v23 = 5121;
      }
      PGMake2DTexture((ProGL::GL *)(uint64_t)a2[1].f64[0], (uint64_t)a2[1].f64[1], (const PCColorSpaceHandle *)v28, 0, 6406, v23, (const PCColorSpaceHandle *)v30);
    }
  }
  return result;
}

void sub_1B7650FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)va);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va1);
  double v9 = *(std::__shared_weak_count **)(a6 + 8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  _Unwind_Resume(a1);
}

void TXCoreTextGlyph::makeTextureGlyphRep(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0;
  uint64_t v4 = *(const PCString **)(a1 + 16);
  __int32 v5 = ((uint64_t (*)(const PCString *))v4->var0->data)(v4);
  v11[0] = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v11[1] = _Q0;
  TXDrawGlyphToBitmap(a1, v4, v5, *(unsigned __int8 *)(a2 + 8), 0, 0, 0, v11, *(double *)a2, *(double *)(a2 + 16), (double *)&v12, *(double **)(a2 + 24), 0, 1);
  operator new();
}

void std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7651224(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7651330(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B765143C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7651548(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void TXChannelAlignment::TXChannelAlignment(TXChannelAlignment *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)TXChannelAlignment_Factory::getInstance(this);
  OZCompoundChannel::OZCompoundChannel(this, Instance, a2, a3, a4, a5, 0, 0);
  *(void *)this = &unk_1F10B3E08;
  *((void *)this + 2) = &unk_1F10B4150;
  PCURL::PCURL((PCURL *)&v12, @"Text Layout Alignment Enum");
  PCURL::PCURL((PCURL *)&v11, @"Text Layout Alignment");
  OZChannelEnum::OZChannelEnum((TXChannelAlignment *)((char *)this + 136), 0, &v12, &v11, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, @"Text Layout Vertical Alignment Enum");
  PCURL::PCURL((PCURL *)&v11, @"Text Layout Vertical Alignment");
  OZChannelEnum::OZChannelEnum((TXChannelAlignment *)((char *)this + 392), 0, &v12, &v11, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
}

void sub_1B7651794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  OZChannelEnum::~OZChannelEnum(v13);
  OZCompoundChannel::~OZCompoundChannel(v12);
  _Unwind_Resume(a1);
}

void TXChannelAlignment::TXChannelAlignment(TXChannelAlignment *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3, a4, 0);
  void *v5 = &unk_1F10B3E08;
  v5[2] = &unk_1F10B4150;
  PCURL::PCURL((PCURL *)&v7, @"Text Layout Alignment Enum");
  PCURL::PCURL((PCURL *)&v6, @"Text Layout Alignment");
  OZChannelEnum::OZChannelEnum((TXChannelAlignment *)((char *)this + 136), 0, &v7, &v6, (OZChannelFolder *)this, 1u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Text Layout Vertical Alignment Enum");
  PCURL::PCURL((PCURL *)&v6, @"Text Layout Vertical Alignment");
  OZChannelEnum::OZChannelEnum((TXChannelAlignment *)((char *)this + 392), 0, &v7, &v6, (OZChannelFolder *)this, 2u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
}

void sub_1B7651960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  OZChannelEnum::~OZChannelEnum(v13);
  OZCompoundChannel::~OZCompoundChannel(v12);
  _Unwind_Resume(a1);
}

void TXChannelAlignment::TXChannelAlignment(TXChannelAlignment *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZCompoundChannel::OZCompoundChannel(this, a2, a3);
  void *v5 = &unk_1F10B3E08;
  v5[2] = &unk_1F10B4150;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 17), (const OZChannelEnum *)&a2[1].var3, (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((TXChannelAlignment *)((char *)this + 392), (const OZChannelEnum *)&a2[3].var7, (OZChannelFolder *)this);
}

void sub_1B7651A5C(_Unwind_Exception *a1)
{
  OZChannelEnum::~OZChannelEnum(v2);
  OZCompoundChannel::~OZCompoundChannel(v1);
  _Unwind_Resume(a1);
}

__CFString *TXChannelAlignment::getObjCWrapperName(TXChannelAlignment *this)
{
  return @"CHChannelTextAlignment";
}

void TXChannelAlignment::clone(TXChannelAlignment *this)
{
}

void sub_1B7651ADC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4091C539B7);
  _Unwind_Resume(a1);
}

void TXChannelAlignment::copy(TXChannelAlignment *this, const OZChannelBase *a2, char a3)
{
  uint64_t v4 = a2;
  OZCompoundChannel::copy((OZChannelFolder *)this, a2);
  if (v4) {
  OZChannelEnum::copy((PCString *)this + 17, (const OZChannelBase *)((char *)v4 + 136), a3);
  }

  OZChannelEnum::copy((PCString *)this + 49, (const OZChannelBase *)((char *)v4 + 392), a3);
}

void non-virtual thunk to'TXChannelAlignment::~TXChannelAlignment(TXChannelAlignment *this)
{
}

{
  uint64_t vars8;

  TXChannelAlignment::~TXChannelAlignment((TXChannelAlignment *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void TXChannelString::TXChannelString(TXChannelString *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)TXChannelString_Factory::getInstance(this);
  OZChannelText::OZChannelText((OZChannelText *)this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F10B41C0;
  *((void *)this + 2) = &unk_1F10B4548;
}

void TXChannelString::TXChannelString(TXChannelString *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelText::OZChannelText((OZChannelText *)this, a2, a3, a4);
  void *v4 = &unk_1F10B41C0;
  v4[2] = &unk_1F10B4548;
}

void TXChannelString::TXChannelString(TXChannelString *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannelText::OZChannelText((OZChannelText *)this, a2, a3);
  void *v3 = &unk_1F10B41C0;
  uint64_t v3[2] = &unk_1F10B4548;
}

void TXChannelString::setString(OZChannelBase *this, PCString a2, char a3, int a4)
{
  if (a4)
  {
    uint64_t ObjectManipulator = (void *)OZChannelBase::getObjectManipulator(this);
    if (ObjectManipulator) {
    long long v10 = *MEMORY[0x1E4F1FA48];
    }
    uint64_t v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    (*(void (**)(void *, long long *, __CFString *))(*(void *)ObjectManipulator + 144))(ObjectManipulator, &v10, a2.var0);
  }
  else
  {
    PCString::PCString(&v9, (const PCString *)a2.var0);
    v8.uint64_t var0 = (__CFString *)&v9;
    OZChannelText::setString((OZChannelText *)this, v8, a3);
    PCString::~PCString(&v9);
  }
}

void sub_1B7651E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void *TXChannelString::getString@<X0>(PCString *this@<X0>, PCString *a2@<X8>)
{
  uint64_t v23 = (uint64_t)&v23;
  unsigned __int8 v24 = &v23;
  uint64_t v25 = 0;
  OZBehavior::GetBehaviorsAffectingChannel(this, &v23, 1);
  for (uint64_t i = v24; i != &v23; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v4 = (const void *)i[2];
    if (v4)
    {
      if (v5)
      {
        PCString v6 = v5;
        if (OZBehavior::isEnabledAndUseBehaviors(v5))
        {
          ChanBase = (const void *)OZSingleChannelBehavior::getChanBase(v6);
          PCString v8 = ChanBase
          SourceChannel = OZLinkBehavior::getSourceChannel(v6);
          if (SourceChannel)
          {
            if (v8)
            {
              uint64_t v11 = v10;
              if (v10)
              {
                uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v8);
                uint64_t v13 = ObjectManipulator
                uint64_t v14 = (const void *)OZChannelBase::getObjectManipulator(v11);
                if (v14)
                {
                  if (v13)
                  {
                    uint64_t v16 = v15;
                    if (v15)
                    {
                      double v17 = (const OZChannelBase *)(*(uint64_t (**)(void *))(v13[25] + 640))(v13 + 25);
                      OZChannelRef::OZChannelRef((OZChannelRef *)v22, v8, v17);
                      __int32 v18 = (const OZChannelBase *)(*(uint64_t (**)(void *))(v16[25] + 640))(v16 + 25);
                      OZChannelRef::OZChannelRef((OZChannelRef *)v21, v11, v18);
                      if (OZChannelRef::operator==((unsigned __int8 *)v22, (unsigned __int8 *)v21))
                      {
                        (*((void (**)(OZChannelBase *))v11->var0 + 106))(v11);
                        OZChannelRef::~OZChannelRef(v21);
                        OZChannelRef::~OZChannelRef(v22);
                        return std::__list_imp<unsigned int>::clear(&v23);
                      }
                      OZChannelRef::~OZChannelRef(v21);
                      OZChannelRef::~OZChannelRef(v22);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  PCString::PCString(a2, this + 19);
  return std::__list_imp<unsigned int>::clear(&v23);
}

void sub_1B76521B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  PCString v7 = va_arg(va2, void *);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  OZChannelRef::~OZChannelRef((void **)va);
  OZChannelRef::~OZChannelRef((void **)va1);
  std::__list_imp<unsigned int>::clear((uint64_t *)va2);
  _Unwind_Resume(a1);
}

char *TXChannelString::getStringPtr(TXChannelString *this)
{
  uint64_t v24 = (uint64_t)&v24;
  uint64_t v25 = &v24;
  uint64_t v26 = 0;
  OZBehavior::GetBehaviorsAffectingChannel(this, &v24, 1);
  uint64_t v2 = v25;
  if (v25 == &v24)
  {
LABEL_21:
    uint64_t v21 = (char *)this + 152;
  }
  else
  {
    while (1)
    {
      uint64_t v3 = (const void *)v2[2];
      if (v3)
      {
        if (v4)
        {
          uint64_t v5 = v4;
          if (OZBehavior::isEnabledAndUseBehaviors(v4))
          {
            ChanBase = (const void *)OZSingleChannelBehavior::getChanBase(v5);
            PCString v7 = ChanBase
            SourceChannel = OZLinkBehavior::getSourceChannel(v5);
            if (SourceChannel)
            {
              if (v7)
              {
                uint64_t v10 = v9;
                if (v9)
                {
                  uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(v7);
                  PCString v12 = ObjectManipulator
                  uint64_t v13 = (const void *)OZChannelBase::getObjectManipulator(v10);
                  if (v13)
                  {
                    if (v12)
                    {
                      int v15 = v14;
                      if (v14)
                      {
                        uint64_t v16 = (const OZChannelBase *)(*(uint64_t (**)(void *))(v12[25] + 640))(v12 + 25);
                        OZChannelRef::OZChannelRef((OZChannelRef *)v23, v7, v16);
                        double v17 = (const OZChannelBase *)(*(uint64_t (**)(void *))(v15[25] + 640))(v15 + 25);
                        OZChannelRef::OZChannelRef((OZChannelRef *)v22, v10, v17);
                        BOOL v18 = OZChannelRef::operator==((unsigned __int8 *)v23, (unsigned __int8 *)v22);
                        BOOL v19 = v18;
                        if (v18) {
                          uint64_t v21 = (char *)(*((uint64_t (**)(OZChannelBase *))v10->var0 + 107))(v10);
                        }
                        OZChannelRef::~OZChannelRef(v22);
                        OZChannelRef::~OZChannelRef(v23);
                        if (v19) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v2 = (uint64_t *)v2[1];
      if (v2 == &v24) {
        goto LABEL_21;
      }
    }
  }
  std::__list_imp<unsigned int>::clear(&v24);
  return v21;
}

void sub_1B7652538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  PCString v7 = va_arg(va2, void *);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  OZChannelRef::~OZChannelRef((void **)va);
  OZChannelRef::~OZChannelRef((void **)va1);
  std::__list_imp<unsigned int>::clear((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void TXChannelString::~TXChannelString(OZChannelText *this)
{
  OZChannelText::~OZChannelText(this);

  JUMPOUT(0x1BA9BFBA0);
}

BOOL OZChannelBase::saveWhenAtDefaultState(OZChannelBase *this)
{
  return OZChannelBase::testFlag(this, 0x100000000);
}

BOOL OZChannelBase::isStateModified(OZChannelBase *this)
{
  return (this->var7 & 0xFFFFFFFDECA4CF86) != this->var8;
}

double OZChannel::getSliderMax(OZChannel *this)
{
  return *((double *)this->var16 + 1);
}

void non-virtual thunk to'TXChannelString::~TXChannelString(TXChannelString *this)
{
}

{
  uint64_t vars8;

  OZChannelText::~OZChannelText((OZChannelText *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void TXBackgroundRectImageSource::TXBackgroundRectImageSource(TXBackgroundRectImageSource *this)
{
  *((void *)this + 13) = &unk_1F1199AC8;
  *((void *)this + 14) = 0;
  *((unsigned char *)this + 120) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1F10B46A8);
  *(void *)this = &unk_1F10B45C0;
  *((void *)this + 13) = &unk_1F10B4688;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 2) = _Q0;
  PCColor::PCColor((PCColor *)((char *)this + 48));
}

void sub_1B76526F0(_Unwind_Exception *a1)
{
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F10B46A8);
  *(void *)(v1 + 104) = v3;
  *(unsigned char *)(v1 + 120) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void TXBackgroundRectImageSource::getHelium(TXBackgroundRectImageSource *this, LiAgent *a2)
{
  HGRectMake4i((int)*((double *)this + 2), (int)*((double *)this + 3), (int)*((double *)this + 4) + (int)*((double *)this + 2), (int)*((double *)this + 5) + (int)*((double *)this + 3));
  uint64_t v2 = (HgcTXPremulColor *)HGObject::operator new(0x1B0uLL);
  HgcTXPremulColor::HgcTXPremulColor(v2);
}

void sub_1B7652898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  HGObject::operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t TXBackgroundRectImageSource::pixelTransformSupport()
{
  return 0;
}

uint64_t TXBackgroundRectImageSource::estimateRenderMemory()
{
  return 0;
}

void TXBackgroundRectImageSource::~TXBackgroundRectImageSource(TXBackgroundRectImageSource *this)
{
  *(void *)this = &unk_1F10B45C0;
  *((void *)this + 13) = &unk_1F10B4688;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 12);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F10B46A8);
  *((void *)this + 13) = &unk_1F1199AC8;
  *((unsigned char *)this + 120) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 14);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F10B45C0;
  *((void *)this + 13) = &unk_1F10B4688;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 12);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F10B46A8);
  *((void *)this + 13) = &unk_1F1199AC8;
  *((unsigned char *)this + 120) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 14);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'TXBackgroundRectImageSource::~TXBackgroundRectImageSource(TXBackgroundRectImageSource *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F10B45C0;
  *((void *)v1 + 13) = &unk_1F10B4688;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v1 + 12);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F10B46A8);
  *((void *)v1 + 13) = &unk_1F1199AC8;
  v1[120] = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 14);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F10B45C0;
  *((void *)v1 + 13) = &unk_1F10B4688;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v1 + 12);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F10B46A8);
  *((void *)v1 + 13) = &unk_1F1199AC8;
  v1[120] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 14);

  JUMPOUT(0x1BA9BFBA0);
}

void HBackgroundColor::~HBackgroundColor(HGNode *this)
{
  HgcTXPremulColor::~HgcTXPremulColor(this);

  HGObject::operator delete(v1);
}

uint64_t HBackgroundColor::GetDOD(uint64_t a1)
{
  return *(void *)(a1 + 416);
}

uint64_t TXGlyphGroup::TXGlyphGroup(uint64_t a1, _OWORD *a2, int a3, long long *a4)
{
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  long long v6 = a4[4];
  long long v7 = a4[5];
  long long v8 = a4[6];
  long long v9 = a4[7];
  long long v10 = *a4;
  long long v11 = a4[1];
  long long v12 = a4[2];
  long long v13 = a4[3];
  *(void *)(a1 + 176) = 0;
  uint64_t v14 = (void **)(a1 + 176);
  *(_OWORD *)(a1 + 80) = v12;
  *(_OWORD *)(a1 + 96) = v13;
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = v7;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 176), 0);
  unint64_t v15 = *(void *)(a1 + 192);
  uint64_t v16 = *(char **)(a1 + 184);
  if ((unint64_t)v16 >= v15)
  {
    BOOL v18 = (char *)*v14;
    uint64_t v19 = (v16 - (unsigned char *)*v14) >> 2;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = v15 - (void)v18;
    if (v21 >> 1 > v20) {
      unint64_t v20 = v21 >> 1;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 192, v22);
      BOOL v18 = *(char **)(a1 + 176);
      uint64_t v16 = *(char **)(a1 + 184);
    }
    else
    {
      uint64_t v23 = 0;
    }
    uint64_t v24 = &v23[4 * v19];
    uint64_t v25 = &v23[4 * v22];
    *(_DWORD *)uint64_t v24 = a3;
    double v17 = v24 + 4;
    while (v16 != v18)
    {
      int v26 = *((_DWORD *)v16 - 1);
      v16 -= 4;
      *((_DWORD *)v24 - 1) = v26;
      v24 -= 4;
    }
    *(void *)(a1 + 176) = v24;
    *(void *)(a1 + 184) = v17;
    *(void *)(a1 + 192) = v25;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v16 = a3;
    double v17 = v16 + 4;
  }
  *(void *)(a1 + 184) = v17;
  return a1;
}

void sub_1B7652D74(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 184) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void TXGlyphGroup::~TXGlyphGroup(TXGlyphGroup *this)
{
  uint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }
}

void **std::vector<TXGlyphRender>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0x86BCA1AF286BCA1BLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x1AF286BCA1AF287) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<TXGlyphRender>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    uint64_t v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 152 * v6;
    std::vector<TXGlyphRender>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<TXGlyphRender>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B7652E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<TXGlyphRender>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void TXGlyphGroupRender::TXGlyphGroupRender(TXGlyphGroupRender *this, TXTextLayout *a2, const OZRenderParams *a3, unint64_t a4)
{
  *((void *)this + 200) = &unk_1F1199AC8;
  *((void *)this + 201) = 0;
  *((unsigned char *)this + 1616) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1F10B4BA8);
  *(void *)this = &unk_1F10B4AC0;
  *((void *)this + 200) = &unk_1F10B4B88;
  *((void *)this + 2) = a2;
  OZRenderParams::OZRenderParams((TXGlyphGroupRender *)((char *)this + 24), a3);
  *((void *)this + 183) = 0;
  *(_OWORD *)((char *)this + 1448) = 0u;
  *((void *)this + 199) = 0x3FF0000000000000;
  *((void *)this + 194) = 0x3FF0000000000000;
  *((void *)this + 189) = 0x3FF0000000000000;
  *((void *)this + 184) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 96) = 0u;
  *(_OWORD *)((char *)this + 1560) = 0u;
  *(_OWORD *)((char *)this + 1576) = 0u;
  std::vector<TXGlyphRender>::reserve((uint64_t *)this + 181, a4);
}

void sub_1B7652FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<TXGlyphRender>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  OZRenderParams::~OZRenderParams(v4);
  OZChannelBase::setRangeName((OZChannelBase *)v2, (const PCString *)&off_1F10B4BA8);
  *(void *)(v2 + 1600) = v3;
  *(unsigned char *)(v2 + 1616) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 1608));
  _Unwind_Resume(a1);
}

uint64_t TXGlyphGroupRender::getHelium@<X0>(TXGlyphGroupRender *this@<X0>, LiAgent *a2@<X1>, void ***a3@<X8>)
{
  uint64_t v5 = (HGHWMultiBlend *)HGObject::operator new(0x280uLL);
  HGHWMultiBlend::HGHWMultiBlend(v5);
  (*(void (**)(HGHWMultiBlend *, uint64_t, float, double, double, double))(*(void *)v5 + 96))(v5, 5, 1.0, 0.0, 0.0, 0.0);
  uint64_t v6 = (long long *)*((void *)a2 + 20);
  long long v7 = v6[3];
  long long v9 = *v6;
  long long v8 = v6[1];
  v85[2] = v6[2];
  v85[3] = v7;
  v85[0] = v9;
  v85[1] = v8;
  long long v10 = v6[7];
  long long v12 = v6[4];
  long long v11 = v6[5];
  double v85[6] = v6[6];
  v85[7] = v10;
  v85[4] = v12;
  v85[5] = v11;
  long long v13 = *((_OWORD *)this + 97);
  v84[4] = *((_OWORD *)this + 96);
  v84[5] = v13;
  long long v14 = *((_OWORD *)this + 99);
  v84[6] = *((_OWORD *)this + 98);
  v84[7] = v14;
  long long v15 = *((_OWORD *)this + 93);
  v84[0] = *((_OWORD *)this + 92);
  v84[1] = v15;
  long long v16 = *((_OWORD *)this + 95);
  v84[2] = *((_OWORD *)this + 94);
  v84[3] = v16;
  PCMatrix44Tmpl<double>::invert((double *)v84, (double *)v84, 0.0);
  PCMatrix44Tmpl<double>::rightMult((uint64_t)v85, (double *)v84);
  LiAgent::LiAgent((LiAgent *)v83, a2);
  RequestedColorDescriptiouint64_t n = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((void *)a2 + 6) + 160));
  FxColorDescription::FxColorDescription(&v82, RequestedColorDescription, CGColorSpace);
  LiAgent::setRequestedColorDescription(v83, &v82);
  if (*((_DWORD *)this + 129)) {
    LiAgent::setFilterSize((uint64_t)v83, 1.0, 1.4142);
  }
  OZEaseInInterpolator::~OZEaseInInterpolator((OZEaseInInterpolator *)&v82);
  unint64_t v20 = v19;
  int DynamicRange = FxColorDescription::getDynamicRange(&v82);
  ToneMapMethod = (PCToneMapMethod *)FxColorDescription::getToneMapMethod(&v82);
  PCWorkingColor::PCWorkingColor((uint64_t)&v80, v20, DynamicRange, ToneMapMethod);
  long long v58 = a2;
  uint64_t v59 = a3;
  int v62 = v5;
  uint64_t v23 = (OZLockingGroup *)Li3DEngineScene::sceneManager(*((Li3DEngineScene **)this + 2));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v79, v23);
  uint64_t v24 = (TXGlyphGroupRender *)((char *)this + 24);
  uint64_t v25 = *((void *)this + 181);
  uint64_t v26 = *((void *)this + 182);
  char v78 = 0;
  if (v25 != v26)
  {
    uint64_t v63 = (void **)off_1F10AFDF8;
    __asm { FMOV            V0.4S, #1.0 }
    long long v60 = _Q0;
    uint64_t v33 = 1;
    while (1)
    {
      long long v34 = (TXTextObject **)(v25 + 8);
      TXCachedGlyphRender::TXCachedGlyphRender((uint64_t)&v74, *((void *)this + 2), (uint64_t *)(v25 + 8), v24, *(_DWORD *)v25);
      v75[1].uint64_t var0 = (PC_Sp_counted_base *)&v78;
      PCMatrix44Tmpl<double>::operator*((uint64_t)v85, (long long *)(v25 + 24), (uint64_t)v70);
      LiAgent::setPixelTransform((uint64_t)v83, (uint64_t)v70);
      float v69 = 1.0;
      TXCachedGlyphRender::getHelium((TXCachedGlyphRender *)&v74, (LiAgent *)v83, &v69, 0, &v68);
      if (v68) {
        break;
      }
LABEL_35:
      v74.uint64_t var0 = v27;
      *(void ***)((char *)&v74.var0 + (void)*(v27 - 3)) = v63;
      PCSharedCount::~PCSharedCount(v75);
      OZRenderParams::~OZRenderParams((OZRenderParams *)&v74.var5);
      if (v74.var4.var0) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v74.var4.var0);
      }
      OZChannelBase::setRangeName(&v74, (const PCString *)&off_1F10AFDD8);
      v75[2].uint64_t var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
      char v77 = 0;
      PCWeakCount::~PCWeakCount(&v76);
      v25 += 152;
      if (v25 == v26) {
        goto LABEL_38;
      }
    }
    int v35 = *(_DWORD *)v25;
    if (*(_DWORD *)v25 == 1)
    {
      uint64_t v40 = *v34;
      *(_OWORD *)&v66.CMTimeValue value = *(_OWORD *)v24;
      v66.CMTimeEpoch epoch = *((void *)this + 5);
      if (TXTextObject::isOutlineVisible(v40, &v66, (PCWorkingColor *)&v80, 0)) {
        goto LABEL_20;
      }
    }
    else
    {
      if (!v35)
      {
        uint64_t v36 = v26;
        uint64_t v37 = *((void *)*v34 + 33);
        if (v37)
        {
          uint64_t v39 = *(void *)(v37 + 8);
          CFRange v38 = *(std::__shared_weak_count **)(v37 + 16);
          if (v38) {
            atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v39 = 0;
          CFRange v38 = 0;
        }
        PCColor::PCColor((PCColor *)((char *)v70 + 8));
        uint64_t v42 = (TXTextLayout *)*((void *)this + 2);
        int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v39 + 6088), MEMORY[0x1E4F1FA48], 0.0);
        LOBYTE(v70[0]) = TXTextLayout::isColorAnimated(v42, (OZChannelColorNoAlpha *)(v39 + 6344), (OZChannelPercent *)(v39 + 10152), ValueAsInt, 1008, 1009);
        *(_OWORD *)&v67.CMTimeValue value = *(_OWORD *)v24;
        v67.CMTimeEpoch epoch = *((void *)this + 5);
        (*(void (**)(uint64_t, CMTime *, char *))(*(void *)(v39 + 6344) + 832))(v39 + 6344, &v67, (char *)v70 + 8);
        int ColorSpaceID = OZChannelColorNoAlpha::getColorSpaceID((OZChannelColorNoAlpha *)(v39 + 6344));
        uint64_t WorkingColorSpace = (PCColorSpaceCache *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)v24);
        int v73 = PCColorSpaceCache::identifyColorSpace(WorkingColorSpace, v45);
        PCString v46 = *v34;
        *(_OWORD *)&v67.CMTimeValue value = *(_OWORD *)v24;
        v67.CMTimeEpoch epoch = *((void *)this + 5);
        uint64_t v5 = v62;
        char isFaceVisible = TXTextObject::isFaceVisible(v46, &v67, &v80, (uint64_t)v70 + 8, v73, ColorSpaceID);
        PCCFRef<CGColorSpace *>::~PCCFRef(&v71);
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
        uint64_t v26 = v36;
        uint64_t v27 = v61;
        if ((isFaceVisible & 1) == 0) {
          goto LABEL_33;
        }
LABEL_20:
        v70[0] = 0uLL;
        isEmojuint64_t i = TXTextObject::isEmoji(*v34);
        if (isEmoji)
        {
          long long v49 = v60;
        }
        else
        {
          *(void *)&long long v49 = v80.n128_u64[0];
          DWORD2(v49) = v80.n128_u32[2];
        }
        HIDWORD(v49) = v80.n128_u32[3];
        v70[0] = v49;
        if (*(_DWORD *)v25 == 2)
        {
          uint64_t v50 = v68;
          uint64_t v51 = *(void *)v5;
          uint64_t v52 = 37;
        }
        else
        {
          if (v35 == 3) {
            int v53 = isEmoji;
          }
          else {
            int v53 = 0;
          }
          uint64_t v50 = v68;
          uint64_t v51 = *(void *)v5;
          if (v53 == 1)
          {
            (*(void (**)(HGHWMultiBlend *, uint64_t, HGNode *, uint64_t, float))(v51 + 624))(v5, v33, v68, 9, 1.0);
LABEL_32:
            uint64_t v33 = (v33 + 1);
            goto LABEL_33;
          }
          uint64_t v52 = 36;
        }
        (*(void (**)(HGHWMultiBlend *, uint64_t, HGNode *, uint64_t, _OWORD *))(v51 + 648))(v5, v33, v50, v52, v70);
        goto LABEL_32;
      }
      if (v35 != 3) {
        goto LABEL_20;
      }
      long long v41 = *v34;
      *(_OWORD *)&v65.CMTimeValue value = *(_OWORD *)v24;
      v65.CMTimeEpoch epoch = *((void *)this + 5);
      if (TXTextObject::isDropShadowVisible(v41, &v65, (PCWorkingColor *)&v80)) {
        goto LABEL_20;
      }
    }
LABEL_33:
    if (v68) {
      (*(void (**)(HGNode *))(*(void *)v68 + 24))(v68);
    }
    goto LABEL_35;
  }
LABEL_38:
  OZChannel *v59 = (void **)v5;
  (*(void (**)(HGHWMultiBlend *))(*(void *)v5 + 16))(v5);
  if ((LiAgent::isDynamicRangeTrackingRender((FxColorDescription **)v58) & 1) == 0
    && OZRenderParams::isRenderForHDR_Deprecated(v24))
  {
    uint64_t v54 = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)v24);
    FxApplySDRToHDR((uint64_t)v59, v54, 1, (uint64_t *)&v74);
    long long v55 = *v59;
    uint64_t var0 = v74.var0;
    if (*v59 == v74.var0)
    {
      if (v55) {
        (*((void (**)(void **))*v55 + 3))(v55);
      }
    }
    else
    {
      if (v55)
      {
        (*((void (**)(void **))*v55 + 3))(v55);
        uint64_t var0 = v74.var0;
      }
      OZChannel *v59 = var0;
    }
  }
  LiAgent::setActualColorDescription((CGColorSpace **)v58, &v82);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v79);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v81);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v82._pcColorDesc._colorSpaceRef._obj);
  LiAgent::~LiAgent((LiAgent *)v83);
  return (*(uint64_t (**)(HGHWMultiBlend *))(*(void *)v5 + 24))(v5);
}

void sub_1B7653790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 24))(a55);
  }
  if (*a10) {
    (*(void (**)(void))(*(void *)*a10 + 24))(*a10);
  }
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&STACK[0x768]);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&STACK[0x780]);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&STACK[0x7A0]);
  LiAgent::~LiAgent((LiAgent *)&STACK[0x7C0]);
  (*(void (**)(uint64_t))(*(void *)a16 + 24))(a16);
  _Unwind_Resume(a1);
}

uint64_t TXGlyphGroupRender::buildLighting(TXGlyphGroupRender *this, LiGeode *a2, const LiLightSet *a3, OZRenderState *a4)
{
  uint64_t result = *((void *)this + 2);
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 976))(result);
    uint64_t result = LiGeode::needsLights(a2);
    if ((result & 1) != 0
      || *((_DWORD *)a3 + 3)
      && (uint64_t result = (*(uint64_t (**)(void))(*(void *)(*((void *)this + 2) + 200) + 1840))(), result))
    {
      uint64_t v9 = *((void *)this + 181);
      uint64_t v10 = *((void *)this + 182);
      if (v9 == v10)
      {
        double v18 = 0.0;
        double v19 = -1.0;
        double v11 = -1.0;
        double v12 = 0.0;
      }
      else
      {
        double v11 = -1.0;
        double v12 = 0.0;
        __asm { FMOV            V0.2D, #-1.0 }
        long long v40 = _Q0;
        double v18 = 0.0;
        double v19 = -1.0;
        do
        {
          double v41 = 0.0;
          double v42 = 0.0;
          v43[0] = v40;
          uint64_t v20 = *(void *)(v9 + 8);
          uint64_t v21 = *(std::__shared_weak_count **)(v9 + 16);
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          TXTextObject::getImageBoundsOfAttribute(v20, &v41, a4, *(_DWORD *)v9, 0, 0, 1, 0, 0.0, 0.0, 0.0, 0.0);
          double v22 = v41;
          double v23 = v42;
          long long v24 = v43[0];
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
          double v12 = v12 + v22;
          double v18 = v18 + v23;
          double v19 = v19 + *(double *)&v24;
          double v11 = v11 + *((double *)&v24 + 1);
          v9 += 152;
        }
        while (v9 != v10);
      }
      uint64_t LightFilter = LiGeode::getLightFilter(a2);
      PCMatrix44Tmpl<double>::operator*(LightFilter + 472, (long long *)((char *)a2 + 8), (uint64_t)&v41);
      uint64_t v26 = LiGeode::getLightFilter(a2);
      uint64_t v27 = (void *)v26;
      uint64_t v28 = (double *)(v26 + 472);
      if ((double *)(v26 + 472) != &v41)
      {
        for (unint64_t i = 0; i != 128; i += 32)
        {
          long long v30 = &v28[i / 8];
          long long v31 = v43[i / 0x10];
          *(_OWORD *)long long v30 = *(_OWORD *)((char *)&v41 + i);
          *((_OWORD *)v30 + 1) = v31;
        }
      }
      if (fabs(PCMatrix44Tmpl<double>::determinant((double *)(v26 + 472))) < 0.0000001)
      {
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        long long v46 = xmmword_1B7E733D0;
        liFindMatrixPlane(v28, (double *)&v44);
        uint64_t v32 = v45;
        v27[61] = v44;
        v27[65] = v32;
        uint64_t v33 = *((void *)&v46 + 1);
        v27[69] = v46;
        v27[73] = v33;
      }
      LiGeode::setLit((uint64_t)a2, 1);
      int v34 = *(unsigned __int8 *)(LiGeode::getLightFilter(a2) + 174);
      uint64_t result = LiGeode::getLightFilter(a2);
      if (v34)
      {
        *(double *)(result + 200) = v12;
        *(double *)(result + 208) = v18;
        *(double *)(result + 216) = v19;
        *(double *)(result + 224) = v11;
        uint64_t result = LiGeode::getLightFilter(a2);
        if ((double *)(result + 344) != &v41)
        {
          for (uint64_t j = 0; j != 8; j += 2)
          {
            uint64_t v36 = (_OWORD *)(result + 344 + j * 16);
            long long v37 = v43[j];
            _OWORD *v36 = *(_OWORD *)((char *)&v41 + j * 16);
            v36[1] = v37;
          }
        }
      }
      else if (*(unsigned char *)(result + 173))
      {
        CFRange v38 = (double *)LiGeode::getLightFilter(a2);
        v38[25] = v12;
        v38[26] = v18;
        v38[27] = v19;
        v38[28] = v11;
        uint64_t v39 = LiGeode::getLightFilter(a2);
        uint64_t result = OZRenderParams::getTextRenderQuality((OZRenderParams *)a4);
        *(unsigned char *)(v39 + 176) = result == 6;
      }
    }
  }
  return result;
}

void sub_1B7653C24(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void TXGlyphGroupRender::~TXGlyphGroupRender(TXGlyphGroupRender *this)
{
  *(void *)this = &unk_1F10B4AC0;
  *((void *)this + 200) = &unk_1F10B4B88;
  uint64_t v2 = (void **)((char *)this + 1448);
  std::vector<TXGlyphRender>::__destroy_vector::operator()[abi:ne180100](&v2);
  OZRenderParams::~OZRenderParams((TXGlyphGroupRender *)((char *)this + 24));
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F10B4BA8);
  *((void *)this + 200) = &unk_1F1199AC8;
  *((unsigned char *)this + 1616) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 201);
}

{
  void **v2;

  *(void *)this = &unk_1F10B4AC0;
  *((void *)this + 200) = &unk_1F10B4B88;
  uint64_t v2 = (void **)((char *)this + 1448);
  std::vector<TXGlyphRender>::__destroy_vector::operator()[abi:ne180100](&v2);
  OZRenderParams::~OZRenderParams((TXGlyphGroupRender *)((char *)this + 24));
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F10B4BA8);
  *((void *)this + 200) = &unk_1F1199AC8;
  *((unsigned char *)this + 1616) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 201);
  MEMORY[0x1BA9BFBA0](this, 0x10E1C40C05CAB54);
}

uint64_t TXGlyphGroupRender::pixelTransformSupport(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 144)) {
    return 0;
  }
  else {
    return 6;
  }
}

void virtual thunk to'TXGlyphGroupRender::~TXGlyphGroupRender(TXGlyphGroupRender *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F10B4AC0;
  *((void *)v1 + 200) = &unk_1F10B4B88;
  uint64_t v2 = (void **)(v1 + 1448);
  std::vector<TXGlyphRender>::__destroy_vector::operator()[abi:ne180100](&v2);
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 24));
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F10B4BA8);
  *((void *)v1 + 200) = &unk_1F1199AC8;
  v1[1616] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 201);
}

{
  char *v1;
  void **v2;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F10B4AC0;
  *((void *)v1 + 200) = &unk_1F10B4B88;
  uint64_t v2 = (void **)(v1 + 1448);
  std::vector<TXGlyphRender>::__destroy_vector::operator()[abi:ne180100](&v2);
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 24));
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F10B4BA8);
  *((void *)v1 + 200) = &unk_1F1199AC8;
  v1[1616] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 201);
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C05CAB54);
}

void std::vector<TXGlyphRender>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<TXGlyphRender>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<TXGlyphRender>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 152)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 136);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void TXFileLoadingGenerator::TXFileLoadingGenerator(TXFileLoadingGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
}

void sub_1B7654164(_Unwind_Exception *a1)
{
  PCURL::~PCURL(v2);
  TXTextGenerator::~TXTextGenerator(v1);
  _Unwind_Resume(a1);
}

void TXFileLoadingGenerator::TXFileLoadingGenerator(TXFileLoadingGenerator *this, const TXFileLoadingGenerator *a2, uint64_t a3)
{
  TXTextGenerator::TXTextGenerator(this, a2, a3);
  void *v5 = &unk_1F10B4D50;
  v5[25] = &unk_1F10B5240;
  v5[27] = &unk_1F10B5B18;
  v5[31] = &unk_1F10B5D70;
  v5[841] = &unk_1F10B5DC8;
  v5[2372] = &unk_1F10B5EA0;
  uint64_t v6 = (const void **)(v5 + 8054);
  PCURL::PCURL((PCURL *)(v5 + 8054), "", 0);
  PCURL::PCURL((TXFileLoadingGenerator *)((char *)this + 64440), "", 0);
  *((void *)this + 8056) = *((void *)a2 + 8056);
  *((unsigned char *)this + 64456) = 0;
  long long v7 = (const __CFURL **)((char *)a2 + 64432);
  PCURL::getFilename(v7, &v10);
  BOOL v8 = PCString::empty(&v10);
  PCString::~PCString(&v10);
  if (!v8) {
    PCURL::operator=(v6, v7);
  }
  id v9 = *((id *)this + 8056);
}

void sub_1B765432C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  PCURL::~PCURL(v12);
  PCURL::~PCURL(v11);
  TXTextGenerator::~TXTextGenerator(v10);
  _Unwind_Resume(a1);
}

void TXFileLoadingGenerator::~TXFileLoadingGenerator(PCString *this)
{
  this->uint64_t var0 = (__CFString *)&unk_1F10B4D50;
  this[25].uint64_t var0 = (__CFString *)&unk_1F10B5240;
  this[27].uint64_t var0 = (__CFString *)&unk_1F10B5B18;
  this[31].uint64_t var0 = (__CFString *)&unk_1F10B5D70;
  this[841].uint64_t var0 = (__CFString *)&unk_1F10B5DC8;
  this[2372].uint64_t var0 = (__CFString *)&unk_1F10B5EA0;
  uint64_t v2 = this + 8056;
  uint64_t var0 = this[8056].var0;
  if (var0)
  {

    v2->uint64_t var0 = 0;
  }
  PCURL::~PCURL((PCURL *)&this[8055]);
  PCURL::~PCURL((PCURL *)&this[8054]);

  TXTextGenerator::~TXTextGenerator(this);
}

BOOL TXFileLoadingGenerator::setURL(const void **this, const __CFURL **a2)
{
  PCURL::getFilename(a2, &v6);
  BOOL v4 = PCString::empty(&v6);
  PCString::~PCString(&v6);
  if (!v4)
  {
    PCURL::operator=(this + 8054, a2);
    (*((void (**)(const void **))*this + 155))(this);
  }
  return !v4;
}

void sub_1B7654578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t TXFileLoadingGenerator::writeBody(const __CFURL **this, PCSerializerWriteStream *a2, unsigned int a3, int a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&TXFileLoadingGeneratorScope);
  if (!v8) {
    goto LABEL_25;
  }
  URL = (const __CFURL **)PCXMLWriteStream::getURL(v8);
  PCURL::getAsFileSystemString(URL, &v35);
  PCURL::getAsFileSystemString(this + 8054, &v34);
  PCString v10 = PCString::cf_str(&v35);
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v10, @"/");
  double v12 = PCString::cf_str(&v34);
  CFArrayRef v13 = CFStringCreateArrayBySeparatingStrings(0, v12, @"/");
  int Count = CFArrayGetCount(ArrayBySeparatingStrings);
  int v15 = CFArrayGetCount(v13);
  int v16 = v15;
  uint64_t v17 = Count >= v15 ? v15 : Count;
  if ((int)v17 < 1) {
    goto LABEL_23;
  }
  uint64_t v18 = a5;
  CFIndex v19 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v19);
    CFStringRef v21 = (const __CFString *)CFArrayGetValueAtIndex(v13, v19);
    if (CFStringCompare(ValueAtIndex, v21, 1uLL)) {
      break;
    }
    if (v17 == ++v19) {
      goto LABEL_11;
    }
  }
  LODWORD(v17) = v19;
LABEL_11:
  a5 = v18;
  if (v17
    && (v17 != 1
     || (CFStringRef v22 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0), CFStringGetLength(v22))))
  {
    PCSharedCount::PCSharedCount(&v33);
    if (~v17 + Count >= 1)
    {
      int v23 = Count - v17;
      do
      {
        PCString::append((PCString *)&v33, "../");
        --v23;
      }
      while (v23 > 1);
    }
    if ((int)v17 < v16)
    {
      uint64_t v24 = 0;
      do
      {
        uint64_t v25 = CFArrayGetValueAtIndex(v13, v17 + v24);
        PCURL::PCURL((PCURL *)&v32, v25);
        PCString::append((PCString *)&v33, &v32);
        PCString::~PCString(&v32);
        if (v16 - 1 > (int)v17 + (int)v24) {
          PCString::append((PCString *)&v33, "/");
        }
        ++v24;
      }
      while ((int)v17 + (int)v24 < v16);
    }
    PCURL::PCURL((PCURL *)&v32, (const PCString *)&v33, 0);
    PCURL::getAsURLString((const __CFURL **)&v32, (PCURL *)&v31);
    a5 = v18;
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 2);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v31);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCString::~PCString(&v31);
    PCURL::~PCURL((PCURL *)&v32);
    PCString::~PCString((PCString *)&v33);
    char v26 = 1;
  }
  else
  {
LABEL_23:
    char v26 = 0;
  }
  CFRelease(ArrayBySeparatingStrings);
  CFRelease(v13);
  PCString::~PCString(&v34);
  PCString::~PCString(&v35);
  if ((v26 & 1) == 0)
  {
LABEL_25:
    PCURL::getAsURLString(this + 8054, (PCURL *)&v30);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v30);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCString::~PCString(&v30);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return TXTextLayout::writeBody((TXTextLayout *)this, a2, a3, a4, a5);
}

void sub_1B7654974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, PCString a12, PCString a13, PCString a14, PCString a15, PCString a16)
{
}

uint64_t non-virtual thunk to'TXFileLoadingGenerator::writeBody(const __CFURL **this, PCSerializerWriteStream *a2, unsigned int a3, int a4, uint64_t a5)
{
  return TXFileLoadingGenerator::writeBody(this - 25, a2, a3, a4, a5);
}

{
  return TXFileLoadingGenerator::writeBody(this - 31, a2, a3, a4, a5);
}

uint64_t TXFileLoadingGenerator::parseBegin(TXFileLoadingGenerator *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'TXFileLoadingGenerator::parseBegin(TXFileLoadingGenerator *this, PCSerializerReadStream *a2)
{
  return 1;
}

{
  TXTextLayout::parseBegin((TXFileLoadingGenerator *)((char *)this - 248), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXFileLoadingGeneratorScope);
  return 1;
}

uint64_t TXFileLoadingGenerator::parseEnd(TXFileLoadingGenerator *this, PCSerializerReadStream *a2)
{
  (*(void (**)(TXFileLoadingGenerator *))(*(void *)this + 1240))(this);

  return TXTextLayout::parseEnd(this, a2);
}

uint64_t non-virtual thunk to'TXFileLoadingGenerator::parseEnd(TXFileLoadingGenerator *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = (TXFileLoadingGenerator *)((char *)this - 200);
  (*(void (**)(char *))(*((void *)this - 25) + 1240))((char *)this - 200);

  return TXTextLayout::parseEnd(v3, a2);
}

{
  TXTextLayout *v3;
  uint64_t vars8;

  uint64_t v3 = (TXFileLoadingGenerator *)((char *)this - 248);
  (*(void (**)(char *))(*((void *)this - 31) + 1240))((char *)this - 248);

  return TXTextLayout::parseEnd(v3, a2);
}

uint64_t TXFileLoadingGenerator::parseElement(const void **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCSharedCount::PCSharedCount(&v20);
  TXTextLayout::parseElement((TXTextLayout *)this, a2, a3);
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 == 1)
  {
    if (PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v20))
    {
      PCURL::PCURL((PCURL *)&v19, (const PCString *)&v20, 0);
      if ((*((unsigned int (**)(const void **, const __CFURL **))*this + 153))(this, &v19)
        && !*((unsigned char *)this + 64456))
      {
        PCURL::PCURL((PCURL *)&v18, "", 0);
        PCURL::operator=(this + 8054, (const __CFURL **)&v18);
        PCURL::~PCURL((PCURL *)&v18);
      }
      int v15 = (const __CFURL **)(this + 8055);
      PCURL::getFilename(v15, &v18);
      BOOL v16 = PCString::empty(&v18);
      PCString::~PCString(&v18);
      if (v16) {
        PCURL::operator=((const void **)v15, &v19);
      }
      goto LABEL_14;
    }
  }
  else if (v6 == 2 && !*((unsigned char *)this + 64456))
  {
    if (v7)
    {
      BOOL v8 = v7;
      if (PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v20))
      {
        id v9 = PCString::cf_str((PCString *)&v20);
        CFStringRef v10 = CFURLCreateStringByReplacingPercentEscapes(0, v9, &stru_1F119C770);
        URL = (CFURLRef *)PCXMLReadStream::getURL(v8);
        CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, *URL);
        CFURLRef v13 = (const __CFURL *)MEMORY[0x1BA9BE3F0](0, v10, 0, 0, PathComponent);
        CFURLRef v14 = CFURLCopyAbsoluteURL(v13);
        PCURL::PCURL((PCURL *)&v19, v14);
        (*((void (**)(const void **, const __CFURL **))*this + 153))(this, &v19);
        CFRelease(v14);
        CFRelease(PathComponent);
        CFRelease(v13);
        CFRelease(v10);
        if (*((unsigned char *)this + 64456)) {
          PCURL::operator=(this + 8054, &v19);
        }
LABEL_14:
        PCURL::~PCURL((PCURL *)&v19);
      }
    }
  }
  PCString::~PCString((PCString *)&v20);
  return 1;
}

void sub_1B7654E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, PCString a12)
{
}

uint64_t non-virtual thunk to'TXFileLoadingGenerator::parseElement(const void **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

{
  TXFileLoadingGenerator::parseElement(this - 31, a2, a3);
  return 1;
}

void TXTextGenerator::TXTextGenerator(TXTextGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
}

void sub_1B7655084(_Unwind_Exception *a1)
{
  PCString::~PCString(v2);
  TXTextLayout::~TXTextLayout(v1);
  _Unwind_Resume(a1);
}

void TXTextGenerator::TXTextGenerator(TXTextGenerator *this, const TXTextGenerator *a2, uint64_t a3)
{
  TXTextLayout::TXTextLayout(this, a2, a3);
  v4->uint64_t var0 = (PC_Sp_counted_base *)&unk_1F10B5EE0;
  v4[25].uint64_t var0 = (PC_Sp_counted_base *)&unk_1F10B63B8;
  v4[27].uint64_t var0 = (PC_Sp_counted_base *)&unk_1F10B6C90;
  v4[31].uint64_t var0 = (PC_Sp_counted_base *)&unk_1F10B6EE8;
  v4[841].uint64_t var0 = (PC_Sp_counted_base *)&unk_1F10B6F40;
  v4[2372].uint64_t var0 = (PC_Sp_counted_base *)&unk_1F10B7018;
  PCSharedCount::PCSharedCount(v4 + 8052);
  *((unsigned char *)this + 64424) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19048), 8, 0);
}

void sub_1B76551D8(_Unwind_Exception *a1)
{
  PCString::~PCString(v2);
  TXTextLayout::~TXTextLayout(v1);
  _Unwind_Resume(a1);
}

void TXTextGenerator::~TXTextGenerator(PCString *this)
{
  this->uint64_t var0 = (__CFString *)&unk_1F10B5EE0;
  this[25].uint64_t var0 = (__CFString *)&unk_1F10B63B8;
  this[27].uint64_t var0 = (__CFString *)&unk_1F10B6C90;
  this[31].uint64_t var0 = (__CFString *)&unk_1F10B6EE8;
  this[841].uint64_t var0 = (__CFString *)&unk_1F10B6F40;
  this[2372].uint64_t var0 = (__CFString *)&unk_1F10B7018;
  PCString::~PCString(this + 8052);

  TXTextLayout::~TXTextLayout((TXTextLayout *)this);
}

{
  uint64_t vars8;

  TXTextGenerator::~TXTextGenerator(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'TXTextGenerator::~TXTextGenerator(PCString *this)
{
}

{
  TXTextGenerator::~TXTextGenerator(this - 27);
}

{
  TXTextGenerator::~TXTextGenerator(this - 31);
}

{
  TXTextGenerator::~TXTextGenerator(this - 841);
}

{
  TXTextGenerator::~TXTextGenerator(this - 2372);
}

{
  uint64_t vars8;

  TXTextGenerator::~TXTextGenerator(this - 25);

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTextGenerator::~TXTextGenerator(this - 27);

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTextGenerator::~TXTextGenerator(this - 31);

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTextGenerator::~TXTextGenerator(this - 841);

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTextGenerator::~TXTextGenerator(this - 2372);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'TXTextGenerator::operator=(uint64_t a1, const void *a2)
{
  TXTextLayout::operator=(a1 - 200, a2);
}

__n128 TXTextGenerator::getNaturalDuration@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = this[27];
  *a2 = result;
  a2[1].n128_u64[0] = this[28].n128_u64[0];
  return result;
}

__n128 non-virtual thunk to'TXTextGenerator::getNaturalDuration@<Q0>(TXTextGenerator *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 216);
  *a2 = result;
  a2[1].n128_u64[0] = *((void *)this + 29);
  return result;
}

void TXTextGenerator::getOriginalBounds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 1216))(a1, a3);

  TXTextLayout::getOriginalBounds(a1);
}

{
  uint64_t vars8;

  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 576))(a1, a3);

  TXTextLayout::getOriginalBounds(a1);
}

void non-virtual thunk to'TXTextGenerator::getOriginalBounds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1 - 200;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 200) + 1216))(a1 - 200, a3);

  TXTextLayout::getOriginalBounds(v3);
}

void TXTextGenerator::prepareForRender(TXTextGenerator *this, const OZRenderState *a2)
{
  (*(void (**)(TXTextGenerator *))(*(void *)this + 1216))(this);

  TXTextLayout::prepareForRender(this, a2);
}

void non-virtual thunk to'TXTextGenerator::prepareForRender(TXTextGenerator *this, const OZRenderState *a2)
{
  uint64_t v3 = (TXTextGenerator *)((char *)this - 200);
  (*(void (**)(char *))(*((void *)this - 25) + 1216))((char *)this - 200);

  TXTextLayout::prepareForRender(v3, a2);
}

void TXTextGenerator::prepareForRender(PCString *this, const OZRenderState *a2)
{
  BOOL v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v12, v4);
  CMTime var0 = (CMTime)a2->var0;
  OZRenderParams::OZRenderParams((OZRenderParams *)v10);
  OZRenderParams::setState((OZRenderParams *)v10, a2);
  PCSharedCount::PCSharedCount(&v9);
  ((void (*)(PCString *, PCSharedCount *, unsigned char *))this->var0[37].length)(this, &v9, v10);
  if (!LOBYTE(this[8053].var0) || PCString::compare((PCString *)&v9, this + 8052))
  {
    PCString::set(this + 8052, (const PCString *)&v9);
    LOBYTE(this[8053].var0) = 1;
    TXTextLayout::resetState((TXTextLayout *)this);
    TXTextLayout::setString((TXTextLayout *)this, (const PCString *)&v9, 1);
    int v5 = PCString::size((PCString *)&v9);
    TXTextLayout::updateStyleRunsAfterTextInsert((uint64_t)this, 0, v5);
    TXTextLayout::updateDisplayString(this, &var0);
    int data = this[2422].var0->data;
    TXTextLayout::getDisplayString(this, &v8);
    unsigned int v7 = PCString::size(&v8);
    *((_DWORD *)data + 6) = 0;
    *((_DWORD *)data + 7) = v7;
    PCString::~PCString(&v8);
    TXTextLayout::rebuildParagraphStyles(this);
    TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
    TXTextLayout::doLayout((TXTextLayout *)this, a2, 0);
  }
  PCString::~PCString((PCString *)&v9);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v10);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v12);
}

void sub_1B76558B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a11);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)(v11 - 40));
  _Unwind_Resume(a1);
}

void TXTextGenerator::didAddToScene(TXTextGenerator *this, OZScene *a2)
{
  TXTextLayout::didAddToScene(this, a2);
  long long v10 = *MEMORY[0x1E4F1FA48];
  uint64_t v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  if (a2)
  {
    OZSceneSettings::OZSceneSettings((OZSceneSettings *)&v4, (OZScene *)((char *)a2 + 336));
    long long v10 = *((_OWORD *)a2 + 86);
    uint64_t v11 = *((void *)a2 + 174);
    *(void *)&long long v4 = &unk_1F113E428;
    PCString::~PCString(&v9);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v8);
  }
  uint64_t v5 = *((void *)this + 53);
  long long v4 = *(_OWORD *)((char *)this + 408);
  long long v6 = v10;
  uint64_t v7 = v11;
  OZChannelObjectRootBase::setTimeExtent((TXTextGenerator *)((char *)this + 256), (const PCTimeRange *)&v4, 0);
  TXTextLayout::didFinishInitializing(this, 0);
}

void non-virtual thunk to'TXTextGenerator::didAddToScene(TXTextGenerator *this, OZScene *a2)
{
}

double TXTextGenerator::calcHashForState(Li3DEngineScene *a1, void *a2, OZRenderParams *a3, uint64_t **a4)
{
  (*(void (**)(void))(*((void *)a1 + 25) + 536))();
  PCString v8 = (OZLockingGroup *)Li3DEngineScene::sceneManager(a1);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)&v18, v8);
  PCSharedCount::PCSharedCount((PCSharedCount *)&v17);
  (*(void (**)(Li3DEngineScene *, long long *, OZRenderParams *))(*(void *)a1 + 1208))(a1, &v17, a3);
  (*(void (**)(void *, long long *))(*(void *)a2 + 104))(a2, &v17);
  PCString::~PCString((PCString *)&v17);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&v18);
  if (!v9) {
    __cxa_bad_cast();
  }
  long long v10 = v9;
  __n128 v18 = *(__n128 *)PCHashWriteStream::getHash(v9)->i8;
  (*(void (**)(void *))(*(void *)a2 + 40))(a2);
  uint64_t v11 = (void *)((char *)a1 + 19344);
  double v12 = (void *)*((void *)a1 + 2419);
  if (v12 != (void *)((char *)a1 + 19344))
  {
    do
    {
      uint64_t v13 = v12[2];
      CFURLRef v14 = (std::__shared_weak_count *)v12[3];
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      OZObjectManipulator::getHashForState((_OWORD *)(v13 + 16), (uint64_t *)a2, a3, a4, &v17);
      PCHash128::operator+=((int *)&v18, (int *)&v17);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      double v12 = (void *)v12[1];
    }
    while (v12 != v11);
  }
  Hash = PCHashWriteStream::getHash(v10);
  PCHash128::operator+=((int *)&v18, (int *)Hash);
  *(void *)&double result = PCHashWriteStream::setHash((__n128 *)v10, &v18).n128_u64[0];
  return result;
}

void sub_1B7655C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

double non-virtual thunk to'TXTextGenerator::calcHashForState(uint64_t a1, void *a2, OZRenderParams *a3, uint64_t **a4)
{
  return TXTextGenerator::calcHashForState((Li3DEngineScene *)(a1 - 200), a2, a3, a4);
}

{
  return TXTextGenerator::calcHashForState((Li3DEngineScene *)(a1 - 216), a2, a3, a4);
}

void TXTextGenerator::updateDisplayStringAndAffectedState(PCString *this, const CMTime *a2)
{
  TXTextLayout::updateDisplayStringAndAffectedState(this, a2);
  int data = this[2422].var0->data;
  TXTextLayout::getDisplayString(this, &v5);
  unsigned int v4 = PCString::size(&v5);
  *((_DWORD *)data + 6) = 0;
  *((_DWORD *)data + 7) = v4;
  PCString::~PCString(&v5);
}

void sub_1B7655C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void TXNumberGenerator::TXNumberGenerator(TXNumberGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
}

void sub_1B765636C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelBool *a9, OZChannelBool *a10, OZChannelEnum *a11, OZChannel *a12, OZChannelBool *a13, OZChannel *a14, PCString a15, PCString a16)
{
  OZChannel::~OZChannel(v19);
  OZChannel::~OZChannel(v20);
  OZChannelBool::~OZChannelBool(a9);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelBool::~OZChannelBool(v23);
  OZChannel::~OZChannel(v22);
  OZChannel::~OZChannel(v21);
  OZChannelEnum::~OZChannelEnum(a11);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(v18);
  OZChannel::~OZChannel(a12);
  OZChannelBool::~OZChannelBool(a13);
  OZChannelFolder::~OZChannelFolder(v17);
  TXTextGenerator::~TXTextGenerator(v16);
  _Unwind_Resume(a1);
}

void TXNumberGenerator::TXNumberGenerator(TXNumberGenerator *this, const TXNumberGenerator *a2, uint64_t a3)
{
  TXTextGenerator::TXTextGenerator(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F10B7058;
  *(void *)(v5 + 200) = &unk_1F10B7538;
  *(void *)(v5 + 216) = &unk_1F10B7E10;
  *(void *)(v5 + 248) = &unk_1F10B8068;
  *(void *)(v5 + 6728) = &unk_1F10B80C0;
  *(void *)(v5 + 18976) = &unk_1F10B8198;
  long long v6 = (OZChannelFolder *)(v5 + 64432);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 64432), (const OZChannelFolder *)((char *)a2 + 64432), (OZChannelFolder *)(v5 + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 64560), (const OZChannelBase *)((char *)a2 + 64560), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 64712), (const OZChannelBase *)((char *)a2 + 64712), v6);
  *((void *)this + 8089) = &unk_1F1100CF0;
  *((void *)this + 8091) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 64864), (const OZChannelBase *)((char *)a2 + 64864), v6);
  *((void *)this + 8108) = &unk_1F1100CF0;
  *((void *)this + 8110) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 65016), (const OZChannelBase *)((char *)a2 + 65016), v6);
  *((void *)this + 8127) = &unk_1F1100CF0;
  *((void *)this + 8129) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((TXNumberGenerator *)((char *)this + 65168), (const TXNumberGenerator *)((char *)a2 + 65168), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 65424), (const OZChannelBase *)((char *)a2 + 65424), v6);
  *((void *)this + 8178) = &unk_1F1101490;
  *((void *)this + 8180) = &unk_1F11017F0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 65576), (const OZChannelBase *)((char *)a2 + 65576), v6);
  *((void *)this + 8197) = &unk_1F1101490;
  *((void *)this + 8199) = &unk_1F11017F0;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65728), (const OZChannelBase *)((char *)a2 + 65728), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65880), (const OZChannelBase *)((char *)a2 + 65880), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 66032), (const OZChannelBase *)((char *)a2 + 66032), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 66184), (const OZChannelBase *)((char *)a2 + 66184), v6);
  *((void *)this + 8273) = &unk_1F1102B70;
  *((void *)this + 8275) = &unk_1F1102ED0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 66336), (const OZChannelBase *)((char *)a2 + 66336), v6);
  *((void *)this + 8292) = &unk_1F1101490;
  *((void *)this + 8294) = &unk_1F11017F0;
  *((void *)this + 8311) = 0;
  *((unsigned char *)this + 66496) = *((unsigned char *)a2 + 66496);
  TXTextLayout::setLocale(this, *((CFTypeRef *)a2 + 8051));
  id v7 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
  *((void *)this + 8311) = v7;
  [v7 setFormatterBehavior:1040];
}

void sub_1B76569B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelBool *a10, OZChannelBool *a11, OZChannelEnum *a12, OZChannel *a13, OZChannelBool *a14)
{
  OZChannel::~OZChannel(v16);
  OZChannelBool::~OZChannelBool(v18);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannel::~OZChannel(v21);
  OZChannel::~OZChannel(v20);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChannel::~OZChannel(v19);
  OZChannel::~OZChannel(a13);
  OZChannel::~OZChannel(v17);
  OZChannelBool::~OZChannelBool(a14);
  OZChannelFolder::~OZChannelFolder(v15);
  TXTextGenerator::~TXTextGenerator(v14);
  _Unwind_Resume(a1);
}

void TXNumberGenerator::~TXNumberGenerator(TXNumberGenerator *this)
{
  *(void *)this = &unk_1F10B7058;
  *((void *)this + TXTextGenerator::~TXTextGenerator(this - 25) = &unk_1F10B7538;
  *((void *)this + 27) = &unk_1F10B7E10;
  *((void *)this + 31) = &unk_1F10B8068;
  *((void *)this + 841) = &unk_1F10B80C0;
  *((void *)this + 2372) = &unk_1F10B8198;

  OZChannel::~OZChannel((OZChannel *)((char *)this + 66336));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 66184));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 66032));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 65880));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 65728));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 65576));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 65424));
  OZChannelEnum::~OZChannelEnum((TXNumberGenerator *)((char *)this + 65168));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 65016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 64864));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 64712));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 64560));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 64432));

  TXTextGenerator::~TXTextGenerator((PCString *)this);
}

{
  uint64_t vars8;

  TXNumberGenerator::~TXNumberGenerator(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'TXNumberGenerator::~TXNumberGenerator(TXNumberGenerator *this)
{
}

{
  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 216));
}

{
  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 248));
}

{
  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 6728));
}

{
  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 18976));
}

{
  uint64_t vars8;

  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 200));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 216));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 248));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 6728));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXNumberGenerator::~TXNumberGenerator((TXNumberGenerator *)((char *)this - 18976));

  JUMPOUT(0x1BA9BFBA0);
}

void *TXNumberGenerator::operator=(TXTextLayout *a1, const void *a2)
{
  TXTextGenerator::operator=(a1);
  if (result)
  {
    uint64_t v5 = (const void *)result[8051];
    return TXTextLayout::setLocale(a1, v5);
  }
  return result;
}

void *non-virtual thunk to'TXNumberGenerator::operator=(uint64_t a1, const void *a2)
{
  return TXNumberGenerator::operator=((TXTextLayout *)(a1 - 200), a2);
}

uint64_t TXNumberGenerator::generateString(TXNumberGenerator *this, PCString *a2, CMTime *a3)
{
  long long v6 = (char *)this + 200;
  uint64_t v5 = *((void *)this + 25);
  CMTime v78 = *a3;
  uint64_t v7 = *(void *)(*(uint64_t (**)(char *))(v5 + 640))((char *)this + 200);
  (*(void (**)(__n128 *__return_ptr))(v7 + 712))(&v75);
  uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)v6 + 272))(v6);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v72);
  CMTime time1 = v78;
  *(__n128 *)&time2.CMTimeValue value = v72;
  time2.CMTimeEpoch epoch = v73;
  __n128 v9 = PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v74);
  uint64_t v10 = (*(uint64_t (**)(char *, __n128))(*(void *)v6 + 272))(v6, v9);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), &v70);
  *(__n128 *)&time1.CMTimeValue value = v75;
  time1.CMTimeEpoch epoch = v76;
  CMTime time2 = v74;
  uint64_t result = CMTimeCompare(&time1, &time2);
  if ((int)result <= 0)
  {
    *(__n128 *)&time1.CMTimeValue value = v75;
    time1.CMTimeEpoch epoch = v76;
    CMTime time2 = v77;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v80);
    CMTime time1 = v80;
    *(__n128 *)&time2.CMTimeValue value = v70;
    time2.CMTimeEpoch epoch = v71;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v79);
    CMTime time1 = v74;
    CMTime time2 = v79;
    uint64_t result = CMTimeCompare(&time1, &time2);
    if ((int)result <= 0 || (v77.flags & 1) != 0 && (v77.flags & 0x10) != 0)
    {
      double v12 = v6 + 64208;
      TXNumberGenerator::updateFormatter(this);
      uint64_t v13 = (const CMTime *)MEMORY[0x1E4F1FA48];
      uint64_t ValueAsInt = (int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 65424), MEMORY[0x1E4F1FA48], 0.0);
      uint64_t v15 = (int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 65576), v13, 0.0);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 64560), v13, 0.0))
      {
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 66032), MEMORY[0x1E4F1FA48], 0.0))
        {
          BOOL v16 = (const CMTime *)MEMORY[0x1E4F1FA48];
          unsigned int v17 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 66184), MEMORY[0x1E4F1FA48], 0.0);
          unsigned int v18 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 66336), v16, 0.0);
          CFURLRef v19 = (OZSceneSettings *)((*(uint64_t (**)(char *))(*((void *)this + 25) + 272))(v6) + 336);
          OZSceneSettings::getFrameDuration(v19, &v75);
          if (v18)
          {
            operator/((long long *)&v78.value, (uint64_t)&v75, (uint64_t)&time);
            unsigned int Seconds = CMTimeGetSeconds(&time) / v18;
          }
          else
          {
            operator/((long long *)&v78.value, (uint64_t)&v75, (uint64_t)&v69);
            unsigned int Seconds = CMTimeGetSeconds(&v69);
          }
          int v31 = -32;
          int v32 = -1640531527;
          unsigned int v33 = v17;
          do
          {
            v17 += (Seconds + 16 * v33) ^ (v33 + v32) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                       + (v33 >> 5));
            v33 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v17) ^ (v32 + v17) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v17 >> 5));
            v32 -= 1640531527;
            BOOL v34 = __CFADD__(v31++, 1);
          }
          while (!v34);
          double v35 = (double)(int)(v33 ^ v17) / 2147483650.0;
          uint64_t v36 = (const CMTime *)MEMORY[0x1E4F1FA48];
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 64864), MEMORY[0x1E4F1FA48], 0.0);
          double v29 = v37;
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 65016), v36, 0.0);
          double v39 = (v35 + 1.0) * 0.5 * (v38 - v29);
        }
        else
        {
          (*(void (**)(__n128 *__return_ptr, char *))(*((void *)this + 25) + 1128))(&v75, v6);
          *(__n128 *)&time2.CMTimeValue value = v75;
          time2.CMTimeEpoch epoch = v76;
          CMTime time1 = v78;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v80);
          CMTime v74 = v77;
          uint64_t v23 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))(v6);
          OZSceneSettings::getFrameDuration((OZSceneSettings *)(v23 + 336), &v72);
          CMTime time1 = v74;
          *(__n128 *)&time2.CMTimeValue value = v72;
          time2.CMTimeEpoch epoch = v73;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v79);
          operator/((long long *)&v80.value, (uint64_t)&v79, (uint64_t)&v67);
          double v24 = CMTimeGetSeconds(&v67);
          double v25 = 1.0;
          if (v24 <= 1.0) {
            double v25 = v24;
          }
          if (v24 >= 0.0) {
            double v26 = v25;
          }
          else {
            double v26 = 0.0;
          }
          uint64_t v27 = (const CMTime *)MEMORY[0x1E4F1FA48];
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 64864), MEMORY[0x1E4F1FA48], 0.0);
          double v29 = v28;
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 65016), v27, 0.0);
          if (!ValueAsInt)
          {
            if (v30 <= v29) {
              double v29 = v29 + 0.9999;
            }
            else {
              double v30 = v30 + 0.9999;
            }
          }
          double v39 = v26 * (v30 - v29);
        }
        double v22 = v29 + v39;
      }
      else
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 64712), &v78, 0.0);
        double v22 = v21;
      }
      long long v40 = (const CMTime *)MEMORY[0x1E4F1FA48];
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65168), MEMORY[0x1E4F1FA48], 0.0) == 2) {
        double v22 = v22 / 100.0;
      }
      if (ValueAsInt) {
        uint64_t v41 = 6;
      }
      else {
        uint64_t v41 = 1;
      }
      if (ValueAsInt) {
        uint64_t v42 = ValueAsInt + 1;
      }
      else {
        uint64_t v42 = 0;
      }
      [*((id *)v12 + 260) setGeneratesDecimalNumbers:ValueAsInt != 0];
      [*((id *)v12 + 260) setMaximumFractionDigits:ValueAsInt];
      [*((id *)v12 + 260) setMinimumFractionDigits:ValueAsInt];
      [*((id *)v12 + 260) setRoundingMode:v41];
      objc_msgSend(*((id *)v12 + 260), "setUsesGroupingSeparator:", OZChannel::getValueAsInt((OZChannel *)((char *)this + 65728), v40, 0.0) != 0);
      [*((id *)v12 + 260) setGroupingSize:3];
      [*((id *)v12 + 260) setPaddingCharacter:@"0"];
      [*((id *)v12 + 260) setFormatWidth:v42 + v15];
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65168), v40, 0.0) == 6)
      {
        uint64_t v43 = (uint64_t)v22;
        PCString::PCString((PCString *)&v75, "0x");
        BYTE1(time1.value) = 0;
        int v44 = -8;
        do
        {
          unsigned int v45 = (v43 >> 28) | 0x30;
          if (v43 >> 29 > 4) {
            LOBYTE(v45) = (v43 >> 28) + 55;
          }
          LOBYTE(time1.value) = v45;
          PCString::append((PCString *)&v75, (const char *)&time1);
          LODWORD(v43) = 16 * v43;
          BOOL v34 = __CFADD__(v44++, 1);
        }
        while (!v34);
        goto LABEL_49;
      }
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65168), MEMORY[0x1E4F1FA48], 0.0) == 5)
      {
        uint64_t v46 = (uint64_t)v22;
        PCSharedCount::PCSharedCount((PCSharedCount *)&v75);
        BYTE1(time1.value) = 0;
        int v47 = -32;
        do
        {
          if ((int)v46 >= 0) {
            char v48 = 48;
          }
          else {
            char v48 = 49;
          }
          LOBYTE(time1.value) = v48;
          PCString::append((PCString *)&v75, (const char *)&time1);
          LODWORD(v46) = 2 * v46;
          BOOL v34 = __CFADD__(v47++, 1);
        }
        while (!v34);
LABEL_49:
        UniStr = PCString::createUniStr((PCString *)&v75);
        PCString::~PCString((PCString *)&v75);
        uint64_t result = (uint64_t)PCString::set(a2, UniStr);
        if (UniStr) {
          return MEMORY[0x1BA9BFB70](UniStr, 0x1000C80BDFB0063);
        }
        return result;
      }
      uint64_t v50 = objc_msgSend(*((id *)v12 + 260), "stringFromNumber:", objc_msgSend(NSNumber, "numberWithDouble:", v22));
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65880), MEMORY[0x1E4F1FA48], 0.0)) {
        uint64_t v50 = (void *)[v50 capitalizedString];
      }
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65168), MEMORY[0x1E4F1FA48], 0.0) == 4)
      {
        uint64_t v51 = (void *)MEMORY[0x1BA9BE030](*(void *)v12);
        if ([v51 hasPrefix:@"en_"])
        {
LABEL_55:
          uint64_t v52 = @"point";
          goto LABEL_62;
        }
        if ([v51 hasPrefix:@"es_"])
        {
          uint64_t v52 = @"punto";
          goto LABEL_62;
        }
        if ([v51 hasPrefix:@"de_"])
        {
          uint64_t v52 = @"komma";
          goto LABEL_62;
        }
        if ([v51 hasPrefix:@"fr_"])
        {
          uint64_t v52 = @"virgule";
LABEL_62:
          uint64_t v53 = [v50 rangeOfString:v52];
          if (v53 == 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_76;
          }
          uint64_t v55 = v53;
          uint64_t v56 = v54;
          long long v57 = (void *)[v50 substringToIndex:v53 - 1];
          if (ValueAsInt)
          {
            uint64_t v58 = v55 + v56;
            uint64_t v59 = v58 + 1;
            uint64_t v60 = [v50 length] + ~v58;
            goto LABEL_65;
          }
          goto LABEL_75;
        }
        if (![v51 hasPrefix:@"ja_"]) {
          goto LABEL_55;
        }
        uint64_t v52 = (__CFString *)TXNumberGenerator::generateString(PCString &,OZRenderParams const&)::middleDot;
        if (!TXNumberGenerator::generateString(PCString &,OZRenderParams const&)::middleDot)
        {
          uint64_t v52 = (__CFString *)[[NSString alloc] initWithCharacters:&TXNumberGenerator::generateString(PCString &,OZRenderParams const&)::uMiddleDot length:1];
          TXNumberGenerator::generateString(PCString &,OZRenderParams const&)::middleDot = (uint64_t)v52;
        }
        uint64_t v63 = [v50 rangeOfString:v52];
        if (v63 != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v65 = v63;
          uint64_t v66 = v64;
          long long v57 = (void *)[v50 substringToIndex:v63];
          if (ValueAsInt)
          {
            uint64_t v59 = v65 + v66;
            uint64_t v60 = [v50 length] - v59;
LABEL_65:
            uint64_t v61 = objc_msgSend((id)objc_msgSend(v50, "substringWithRange:", v59, v60), "componentsSeparatedByString:", @" ");
            uint64_t v50 = objc_msgSend((id)objc_msgSend(v57, "stringByAppendingString:", @" "), "stringByAppendingString:", v52);
            for (unint64_t i = 0; i != ValueAsInt; ++i)
            {
              if (i >= [v61 count]) {
                break;
              }
              uint64_t v50 = (void *)[v50 stringByAppendingFormat:@" %@", objc_msgSend(v61, "objectAtIndex:", i)];
            }
            goto LABEL_76;
          }
LABEL_75:
          uint64_t v50 = v57;
        }
      }
LABEL_76:
      [v50 length];
      operator new[]();
    }
  }
  return result;
}

void sub_1B7657914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,PCString a29)
{
}

uint64_t TXNumberGenerator::updateFormatter(TXNumberGenerator *this)
{
  uint64_t v1 = (id *)((char *)this + 64408);
  uint64_t v2 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 65168), MEMORY[0x1E4F1FA48], 0.0) - 1;
  if (v2 >= 4) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2 + 2;
  }
  [v1[260] setNumberStyle:v3];
  id v4 = v1[260];
  id v5 = *v1;

  return [v4 setLocale:v5];
}

uint64_t TXNumberGenerator::getPreviewSceneNode(TXNumberGenerator *this)
{
  uint64_t v1 = theApp;
  long long v7 = xmmword_1B7E78C50;
  PCSharedCount::PCSharedCount(&v6);
  SceneNode = (const void *)OZApplication::createSceneNode(v1, (unsigned int *)&v7);
  if (SceneNode) {
  else
  }
    uint64_t v3 = 0;
  PCString::~PCString((PCString *)&v6);
  TXTextLayout::didFinishInitializing(v3, 1);
  TXTextLayout::getCurrentStyleForInsertion((uint64_t)v3, &v7);
  if ((void)v7)
  {
    CMTime v5 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    OZChannel::setValue((OZChannel *)(v7 + 1976), &v5, 24.0, 0);
  }
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
  if (v3) {
    return (uint64_t)v3 + 200;
  }
  else {
    return 0;
  }
}

void sub_1B7657AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void TXNumberGenerator::didAddToScene(TXNumberGenerator *this, OZScene *a2)
{
  TXTextGenerator::didAddToScene(this, a2);
  id v4 = (char *)this + 66496;
  if (!*((unsigned char *)this + 66496))
  {
    CMTime v5 = (OZPreferenceManager *)OZPreferenceManager::Instance(v3);
    double FirstFrameNumber = OZPreferenceManager::getFirstFrameNumber(v5);
    uint64_t v8 = *((void *)this + 25);
    long long v7 = (char *)this + 200;
    (*(void (**)(void *__return_ptr, char *))(v8 + 1128))(v13, v7);
    long long v16 = v14;
    uint64_t v17 = v15;
    uint64_t v9 = (*(uint64_t (**)(char *))(*(void *)v7 + 272))(v7);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), &v12);
    operator/(&v16, (uint64_t)&v12, (uint64_t)&time);
    double Seconds = CMTimeGetSeconds(&time);
    uint64_t v11 = (OZChannel *)(v7 + 64816);
    if (FirstFrameNumber == 0.0) {
      double Seconds = Seconds + -1.0;
    }
    OZChannel::setDefaultValue(v11, Seconds);
    OZChannelBase::reset((OZChannelBase *)v11, 0);
    unsigned char *v4 = 1;
  }
}

void non-virtual thunk to'TXNumberGenerator::didAddToScene(TXNumberGenerator *this, OZScene *a2)
{
}

uint64_t TXNumberGenerator::writeBody(TXNumberGenerator *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  TXTextLayout::writeBody(this, a2, a3, a4, a5);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&TXNumberGeneratorScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
  long long v7 = (const void *)MEMORY[0x1BA9BE030](*((void *)this + 8051));
  PCURL::PCURL((PCURL *)&v9, v7);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(void *)a2 + 200))(a2, 2, &v9);
  PCString::~PCString(&v9);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B7657D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'TXNumberGenerator::writeBody(TXNumberGenerator *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return TXNumberGenerator::writeBody((TXNumberGenerator *)((char *)this - 200), a2, a3, a4, a5);
}

{
  return TXNumberGenerator::writeBody((TXNumberGenerator *)((char *)this - 248), a2, a3, a4, a5);
}

uint64_t TXNumberGenerator::parseBegin(TXNumberGenerator *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'TXNumberGenerator::parseBegin(TXNumberGenerator *this, PCSerializerReadStream *a2)
{
  return 1;
}

{
  TXTextLayout::parseBegin((TXNumberGenerator *)((char *)this - 248), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXNumberGeneratorScope);
  return 1;
}

uint64_t TXNumberGenerator::parseElement(TXNumberGenerator *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  if (*((_DWORD *)a3 + 2) == 1)
  {
    PCSharedCount::PCSharedCount(&v8);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)&v8);
    PCSharedCount v6 = (void *)[objc_alloc(MEMORY[0x1E4F1CA20]) initWithLocaleIdentifier:PCString::ns_str((PCString *)&v8)];
    TXTextLayout::setLocale(this, v6);

    PCString::~PCString((PCString *)&v8);
  }
  TXTextLayout::parseElement(this, a2, a3);
  return 1;
}

void sub_1B7657E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'TXNumberGenerator::parseElement(TXNumberGenerator *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

{
  TXNumberGenerator::parseElement((TXNumberGenerator *)((char *)this - 248), a2, a3);
  return 1;
}

void OZChannelSeed::OZChannelSeed(OZChannelSeed *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZChannelSeed_FactoryBase = (OZFactory *)getOZChannelSeed_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelSeed_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->CMTime var0 = (void **)&unk_1F1102B70;
  this->var2 = (void **)&unk_1F1102ED0;
  OZChannelSeedInfo = (OZChannelSeed *)OZChannelSeed::createOZChannelSeedInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelSeed::_OZChannelSeedInfo;
    this->var17 = (OZChannelInfo *)OZChannelSeed::_OZChannelSeedInfo;
  }
  this->var16 = var17;
  OZChannelSeed::createOZChannelSeedImpl(OZChannelSeedInfo);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelSeed::_OZChannelSeedImpl;
    this->var15 = (OZChannelImpl *)OZChannelSeed::_OZChannelSeedImpl;
  }
  this->var14 = var15;
}

void sub_1B7657FE8(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelSeed::createOZChannelSeedInfo(OZChannelSeed *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelSeed::createOZChannelSeedInfo(void)::_OZChannelSeedInfo_once, memory_order_acquire) != -1)
  {
    id v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelSeed::createOZChannelSeedInfo(void)::_OZChannelSeedInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelSeed::createOZChannelSeedInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelSeed::_OZChannelSeedInfo;
}

uint64_t OZChannelSeed::createOZChannelSeedImpl(OZChannelSeed *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelSeed::createOZChannelSeedImpl(void)::_OZChannelSeedImpl_once, memory_order_acquire) != -1)
  {
    id v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelSeed::createOZChannelSeedImpl(void)::_OZChannelSeedImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelSeed::createOZChannelSeedImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelSeed::_OZChannelSeedImpl;
}

void std::__call_once_param<std::tuple<OZChannelSeed::createOZChannelSeedInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelSeed::_OZChannelSeedInfo) {
    operator new();
  }
}

void sub_1B7658128(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelSeedInfo::OZChannelSeedInfo(OZChannelSeedInfo *this)
{
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 4294967300.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(void *)this = &unk_1F10B81D8;
  *((void *)this + 10) = &unk_1F10B81F8;
}

void sub_1B76581D8(_Unwind_Exception *a1)
{
  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelSeed::createOZChannelSeedImpl(void)::{lambda(void)#1} &&>>()
{
}

void OZChannelSeed::createOZChannelSeedImpl(void)::{lambda(void)#1}::operator()()
{
  if (!OZChannelSeed::_OZChannelSeedImpl) {
    operator new();
  }
}

void sub_1B76582CC(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZCurveEnum::OZCurveEnum(OZCurveEnum *this, double a2)
{
}

void sub_1B76583CC(_Unwind_Exception *a1)
{
  OZCurve::~OZCurve(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCurveEnumSplineState::getInstance(OZCurveEnumSplineState *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCurveEnumSplineState::_instanceOnce, memory_order_acquire) != -1)
  {
    id v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZCurveEnumSplineState::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCurveEnumSplineState::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCurveEnumSplineState::_instance;
}

void OZCurveEnum::getCurveWorkingCopy(OZCurveEnum *this)
{
}

void sub_1B76584B4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

void OZCurveEnum::cloneCurve(OZCurveEnum *this)
{
}

void sub_1B7658540(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

void getCharacterSets(void)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  {
    {
      memcpy(v0, "a", sizeof(v0));
      std::vector<TXUnicodeBlock>::vector[abi:ne180100](&getCharacterSets(void)::sCharacterSets, v0, 0x10FuLL);
      __cxa_atexit((void (*)(void *))std::vector<TXUnicodeBlock>::~vector[abi:ne180100], &getCharacterSets(void)::sCharacterSets, &dword_1B73F3000);
    }
  }
}

void sub_1B7658634(_Unwind_Exception *a1)
{
}

uint64_t TXOffsetUnicodeChar(uint64_t a1, int a2)
{
  getCharacterSets();
  id v4 = (_DWORD *)getCharacterSets(void)::sCharacterSets;
  getCharacterSets();
  if (v4 != (_DWORD *)qword_1E9EE4AC8)
  {
    while (*v4 > a1 || v4[1] < a1)
    {
      v4 += 2;
      if (v4 == (_DWORD *)qword_1E9EE4AC8)
      {
        id v4 = (_DWORD *)qword_1E9EE4AC8;
        break;
      }
    }
  }
  getCharacterSets();
  if (v4 != (_DWORD *)qword_1E9EE4AC8)
  {
    unsigned int v6 = v4[1];
    a1 = (a2 + a1);
    if (a1 > v6) {
      return (a1 + ~v6) % (v6 - *v4 + 1) + *v4;
    }
  }
  return a1;
}

BOOL TXCharacterSetIsLowercase(UniChar a1)
{
  if (TXCharacterSetIsLowercase::onceToken != -1) {
    dispatch_once(&TXCharacterSetIsLowercase::onceToken, &__block_literal_global_52);
  }
  return CFCharacterSetIsCharacterMember((CFCharacterSetRef)TXCharacterSetIsLowercase::kLowercaseLetterCharacterSet, a1) != 0;
}

CFCharacterSetRef ___Z25TXCharacterSetIsLowercasej_block_invoke()
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetLowercaseLetter);
  TXCharacterSetIsLowercase::kLowercaseLetterCharacterSet = (uint64_t)result;
  return result;
}

BOOL TXCharacterSetIsPunctuation(UniChar a1)
{
  if (TXCharacterSetIsPunctuation::onceToken != -1) {
    dispatch_once(&TXCharacterSetIsPunctuation::onceToken, &__block_literal_global_3_0);
  }
  return CFCharacterSetIsCharacterMember((CFCharacterSetRef)TXCharacterSetIsPunctuation::kPunctuationCharacterSet, a1) != 0;
}

CFCharacterSetRef ___Z27TXCharacterSetIsPunctuationj_block_invoke()
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  TXCharacterSetIsPunctuation::kPunctuationCharacterSet = (uint64_t)result;
  return result;
}

BOOL TXCharacterSetIsWhitespace(UniChar a1)
{
  if (TXCharacterSetIsWhitespace::onceToken != -1) {
    dispatch_once(&TXCharacterSetIsWhitespace::onceToken, &__block_literal_global_6);
  }
  return CFCharacterSetIsCharacterMember((CFCharacterSetRef)TXCharacterSetIsWhitespace::kWhitespaceCharacterSet, a1) != 0;
}

CFCharacterSetRef ___Z26TXCharacterSetIsWhitespacej_block_invoke()
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  TXCharacterSetIsWhitespace::kWhitespaceCharacterSet = (uint64_t)result;
  return result;
}

BOOL TXCharacterSetIsWhitespaceOrNewline(UniChar a1)
{
  if (TXCharacterSetIsWhitespaceOrNewline::onceToken != -1) {
    dispatch_once(&TXCharacterSetIsWhitespaceOrNewline::onceToken, &__block_literal_global_9);
  }
  return CFCharacterSetIsCharacterMember((CFCharacterSetRef)TXCharacterSetIsWhitespaceOrNewline::kWhitespaceAndNewlineCharacterSet, a1) != 0;
}

CFCharacterSetRef ___Z35TXCharacterSetIsWhitespaceOrNewlinej_block_invoke()
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  TXCharacterSetIsWhitespaceOrNewline::kWhitespaceAndNewlineCharacterSet = (uint64_t)result;
  return result;
}

BOOL TXCharacterSetIsNewline(UniChar a1)
{
  if (TXCharacterSetIsNewline::onceToken != -1) {
    dispatch_once(&TXCharacterSetIsNewline::onceToken, &__block_literal_global_12);
  }
  return CFCharacterSetIsCharacterMember((CFCharacterSetRef)TXCharacterSetIsNewline::kNewlineCharacterSet, a1) != 0;
}

CFCharacterSetRef ___Z23TXCharacterSetIsNewlinej_block_invoke()
{
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
  TXCharacterSetIsNewline::kNewlineCharacterSet = (uint64_t)result;
  return result;
}

void *std::vector<TXUnicodeBlock>::vector[abi:ne180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a3);
    unsigned int v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_1B76589FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<TXUnicodeBlock>::~vector[abi:ne180100](uint64_t a1)
{
  char v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void TXTextFromFileGenerator::TXTextFromFileGenerator(TXTextFromFileGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
}

void sub_1B7658DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelBool::~OZChannelBool(v16);
  OZChannel::~OZChannel(v15);
  OZChannelBool::~OZChannelBool(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChannelEnum::~OZChannelEnum(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  PCSharedCount v20 = *v18;
  if (*v18)
  {
    *(void *)(v17 + 16) = v20;
    operator delete(v20);
  }
  TXFileLoadingGenerator::~TXFileLoadingGenerator(v10);
  _Unwind_Resume(a1);
}

void sub_1B7658E68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7658E78()
{
}

void sub_1B7658E80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7658E90()
{
}

void sub_1B7658E98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7658EB8()
{
}

void sub_1B7658EC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7658ED0()
{
}

void TXTextFromFileGenerator::TXTextFromFileGenerator(TXTextFromFileGenerator *this, const TXTextFromFileGenerator *a2, uint64_t a3)
{
  CMTime v5 = (char *)this + 64464;
  unsigned int v6 = (char *)a2 + 64464;
  TXFileLoadingGenerator::TXFileLoadingGenerator(this, a2, a3);
  *(void *)uint64_t v7 = &unk_1F10B88D8;
  *(void *)(v7 + 200) = &unk_1F10B8DD8;
  *(void *)(v7 + 216) = &unk_1F10B96B0;
  *(void *)(v7 + 248) = &unk_1F10B9908;
  *(void *)(v7 + 6728) = &unk_1F10B9960;
  *(void *)(v7 + 18976) = &unk_1F10B9A38;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)CMTime v5 = 0;
  v5[24] = v6[24];
  PCSharedCount v8 = (OZChannelFolder *)(v7 + 64496);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v7 + 64496), (const OZChannelFolder *)((char *)a2 + 64496), (OZChannelFolder *)(v7 + 648));
  OZChannelEnum::OZChannelEnum((TXTextFromFileGenerator *)((char *)this + 64624), (const TXTextFromFileGenerator *)((char *)a2 + 64624), v8);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 64880), (const OZChannelBase *)((char *)a2 + 64880), v8);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65032), (const OZChannelBase *)((char *)a2 + 65032), v8);
  OZChannel::OZChannel((OZChannel *)((char *)this + 65184), (const OZChannelBase *)a2 + 582, v8);
  *((void *)this + 8148) = &unk_1F1102B70;
  *((void *)this + 8150) = &unk_1F1102ED0;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65336), (const OZChannelBase *)((char *)a2 + 65336), v8);
  PCString v9 = (const __CFURL **)((char *)a2 + 64432);
  PCURL::getFilename(v9, &v11);
  BOOL v10 = PCString::empty(&v11);
  PCString::~PCString(&v11);
  if (!v10) {
    PCURL::operator=((const void **)this + 8054, v9);
  }
  if (*(void *)v6 != *((void *)v6 + 1)) {
    operator new();
  }
}

void sub_1B7659230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelBool *a9, OZChannelBool *a10, OZChannelPercent *a11, OZChannelEnum *a12, OZChannelFolder *a13, PCString a14)
{
  OZChannelBool::~OZChannelBool(a9);
  OZChannel::~OZChannel(v16);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelPercent::~OZChannelPercent(a11);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChannelFolder::~OZChannelFolder(a13);
  unsigned int v18 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v18;
    operator delete(v18);
  }
  TXFileLoadingGenerator::~TXFileLoadingGenerator(v14);
  _Unwind_Resume(a1);
}

void TXTextFromFileGenerator::~TXTextFromFileGenerator(TXTextFromFileGenerator *this)
{
  char v2 = (char *)this + 64464;
  *(void *)this = &unk_1F10B88D8;
  *((void *)this + TXTextGenerator::~TXTextGenerator(this - 25) = &unk_1F10B8DD8;
  *((void *)this + 27) = &unk_1F10B96B0;
  *((void *)this + 31) = &unk_1F10B9908;
  *((void *)this + 841) = &unk_1F10B9960;
  *((void *)this + 2372) = &unk_1F10B9A38;
  TXTextFromFileGenerator::clearText((PCString *)this);
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 65336));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 65184));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 65032));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 64880));
  OZChannelEnum::~OZChannelEnum((TXTextFromFileGenerator *)((char *)this + 64624));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 64496));
  uint64_t v3 = *(void **)v2;
  if (*(void *)v2)
  {
    *((void *)v2 + 1) = v3;
    operator delete(v3);
  }

  TXFileLoadingGenerator::~TXFileLoadingGenerator((PCString *)this);
}

{
  uint64_t vars8;

  TXTextFromFileGenerator::~TXTextFromFileGenerator(this);

  JUMPOUT(0x1BA9BFBA0);
}

PCString *TXTextFromFileGenerator::clearText(PCString *this)
{
  uint64_t v1 = this + 8058;
  CMTime var0 = (PCString **)this[8058].var0;
  uint64_t v3 = (PCString **)this[8059].var0;
  if (var0 != v3)
  {
    do
    {
      this = *var0;
      if (*var0)
      {
        PCString::~PCString(this);
        this = (PCString *)MEMORY[0x1BA9BFBA0]();
      }
      *var0++ = 0;
    }
    while (var0 != v3);
    CMTime var0 = (PCString **)v1->var0;
  }
  v1[1].CMTime var0 = (__CFString *)var0;
  return this;
}

void non-virtual thunk to'TXTextFromFileGenerator::~TXTextFromFileGenerator(TXTextFromFileGenerator *this)
{
}

{
  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 216));
}

{
  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 248));
}

{
  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 6728));
}

{
  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 18976));
}

{
  uint64_t vars8;

  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 200));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 216));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 248));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 6728));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 18976));

  JUMPOUT(0x1BA9BFBA0);
}

void TXTextFromFileGenerator::generateString(TXTextFromFileGenerator *this, PCString *a2, CMTime *a3)
{
  unsigned int v6 = (char *)this + 200;
  uint64_t v5 = *((void *)this + 25);
  CMTime v54 = *a3;
  uint64_t v7 = *(void *)(*(uint64_t (**)(char *))(v5 + 640))((char *)this + 200);
  (*(void (**)(PCString *__return_ptr))(v7 + 712))(v51);
  uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)v6 + 272))(v6);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v48);
  CMTime time1 = v54;
  *(__n128 *)&time2.CMTimeValue value = v48;
  time2.CMTimeEpoch epoch = v49;
  __n128 v9 = PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v50);
  uint64_t v10 = (*(uint64_t (**)(char *, __n128))(*(void *)v6 + 272))(v6, v9);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), &v46);
  *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)&v51[0].var0;
  time1.CMTimeEpoch epoch = v52;
  CMTime time2 = v50;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)&v51[0].var0;
    time1.CMTimeEpoch epoch = v52;
    CMTime time2 = v53;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v57);
    CMTime time1 = v57;
    *(__n128 *)&time2.CMTimeValue value = v46;
    time2.CMTimeEpoch epoch = v47;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v55);
    CMTime time1 = v50;
    *(__n128 *)&time2.CMTimeValue value = v55;
    time2.CMTimeEpoch epoch = v56;
    if ((CMTimeCompare(&time1, &time2) <= 0 || (v53.flags & 1) != 0 && (v53.flags & 0x10) != 0)
      && *((void *)v6 + 8033) != *((void *)v6 + 8034))
    {
      if (!v6[64288])
      {
        PCURL::getAsFileSystemString((const __CFURL **)this + 8054, v51);
        uint64_t v17 = PCString::ns_str(v51);
        PCString::~PCString(v51);
        if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:", v17) & 1) == 0)
        {
          PCURL::PCURL((PCURL *)v51, @"Text From File Generator Missing File");
          PCString::set(a2, v51);
          PCString::~PCString(v51);
          return;
        }
        if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "attributesOfItemAtPath:error:", v17, 0), "fileModificationDate"), "isEqualToDate:", *((void *)v6 + 8031)) & 1) == 0)(*(void (**)(TXTextFromFileGenerator *))(*(void *)this + 1240))(this); {
      }
        }
      (*(void (**)(PCString *__return_ptr, char *))(*((void *)this + 25) + 1128))(v51, v6);
      *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)&v51[0].var0;
      time2.CMTimeEpoch epoch = v52;
      CMTime time1 = v54;
      v11.n128_f64[0] = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v57);
      uint64_t v12 = (*(uint64_t (**)(char *, __n128))(*((void *)this + 25) + 272))(v6, v11);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v12 + 336), (__n128 *)&time1);
      operator/((long long *)&v57.value, (uint64_t)&time1, (uint64_t)&time);
      double Seconds = CMTimeGetSeconds(&time);
      CMTime time2 = v53;
      uint64_t v14 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))(v6);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v14 + 336), &v55);
      operator/((long long *)&time2.value, (uint64_t)&v55, (uint64_t)&v44);
      double v15 = Seconds / CMTimeGetSeconds(&v44);
      switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 64624), MEMORY[0x1E4F1FA48], 0.0))
      {
        case 0u:
          double v16 = v15 * (double)(unint64_t)((uint64_t)(*((void *)v6 + 8034) - *((void *)v6 + 8033)) >> 3);
          goto LABEL_26;
        case 1u:
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65336), MEMORY[0x1E4F1FA48], 0.0))
          {
            time1.CMTimeValue value = 0;
            uint64_t v20 = (uint64_t)(*((void *)v6 + 8034) - *((void *)v6 + 8033)) >> 3;
            double v21 = v15 * (double)(unint64_t)v20;
            double v22 = (double)(unint64_t)(v20 - 1);
            double v23 = 1.0;
            double v24 = 0.0;
            goto LABEL_19;
          }
          uint64_t v33 = (uint64_t)(*((void *)v6 + 8034) - *((void *)v6 + 8033)) >> 3;
          double v34 = v15 * (double)(unint64_t)v33;
          double v35 = (double)(unint64_t)(v33 - 1);
          double v36 = 0.5;
          double v37 = 1.0 - cos(v34 * 3.14159265 / v35 * 0.5);
          goto LABEL_39;
        case 2u:
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65336), MEMORY[0x1E4F1FA48], 0.0))
          {
            time1.CMTimeValue value = 0;
            uint64_t v25 = (uint64_t)(*((void *)v6 + 8034) - *((void *)v6 + 8033)) >> 3;
            double v21 = v15 * (double)(unint64_t)v25;
            double v22 = (double)(unint64_t)(v25 - 1);
            double v23 = 0.0;
            double v24 = 1.0;
LABEL_19:
            PCMath::easeInOut((double *)&time1.value, v21, v23, v24, 0.0, v22, 0, v19);
            double v16 = *(double *)&time1.value;
LABEL_26:
            double v30 = 0.5;
            goto LABEL_27;
          }
          uint64_t v38 = (uint64_t)(*((void *)v6 + 8034) - *((void *)v6 + 8033)) >> 3;
          double v39 = v15 * (double)(unint64_t)v38;
          double v35 = (double)(unint64_t)(v38 - 1);
          double v36 = 0.5;
          double v37 = sin(v39 * 3.14159265 / v35 * 0.5);
LABEL_39:
          double v28 = v37 * v35 + 0.0 + v36;
          break;
        case 3u:
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65336), MEMORY[0x1E4F1FA48], 0.0))
          {
            time1.CMTimeValue value = 0;
            uint64_t v27 = (uint64_t)(*((void *)v6 + 8034) - *((void *)v6 + 8033)) >> 3;
            PCMath::easeInOut((double *)&time1.value, v15 * (double)(unint64_t)v27, 0.5, 0.5, 0.0, (double)(unint64_t)(v27 - 1), 0, v26);
            double v28 = *(double *)&time1.value + 0.5;
          }
          else
          {
            uint64_t v40 = (uint64_t)(*((void *)v6 + 8034) - *((void *)v6 + 8033)) >> 3;
            double v41 = v15 * (double)(unint64_t)v40;
            double v42 = (double)(unint64_t)(v40 - 1);
            long double v43 = sin(v41 * 3.14159265 / v42 + -1.57079633);
            double v30 = 0.5;
            double v16 = (v43 * 0.5 + 0.5) * v42 + 0.0;
LABEL_27:
            double v28 = v16 + v30;
          }
          break;
        case 4u:
          double v29 = v15 * v15;
          goto LABEL_25;
        case 5u:
          double v29 = 1.0 - (v15 + -1.0) * (v15 + -1.0);
          goto LABEL_25;
        case 6u:
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 64880), &v54, 0.0);
LABEL_25:
          double v16 = v29 * (double)(unint64_t)((uint64_t)(*((void *)v6 + 8034) - *((void *)v6 + 8033)) >> 3);
          goto LABEL_26;
        default:
          int v18 = 0;
          goto LABEL_29;
      }
      int v18 = vcvtmd_s64_f64(v28 + 0.0000001);
LABEL_29:
      int v31 = ((*((void *)v6 + 8034) - *((void *)v6 + 8033)) >> 3) - 1;
      if (v18 < v31) {
        int v31 = v18;
      }
      if (v18 >= 0) {
        int v32 = v31;
      }
      else {
        int v32 = 0;
      }
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65032), MEMORY[0x1E4F1FA48], 0.0))
      {
        OZChannel::getValueAsInt((OZChannel *)((char *)this + 65184), MEMORY[0x1E4F1FA48], 0.0);
        operator new[]();
      }
      PCString::set(a2, *(const PCString **)(*((void *)v6 + 8033) + 8 * v32));
    }
  }
}

void sub_1B7659EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,PCString a25)
{
}

uint64_t PCRandomShuffleUsingLRand48<int *>(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (result != a2 && result + 4 != a2)
  {
    unint64_t v3 = ((unint64_t)a3 << 16) | 0x330E;
    unint64_t v4 = 4;
    do
    {
      unint64_t v3 = 0x5DEECE66DLL * v3 + 11;
      unsigned int v5 = ((v3 >> 17) & 0x7FFFFFFF) % ((v4 >> 2) + 1);
      int v6 = *(_DWORD *)(result + v4);
      *(_DWORD *)(result + v4) = *(_DWORD *)(result + 4 * v5);
      *(_DWORD *)(result + 4 * v5) = v6;
      v4 += 4;
    }
    while (result + v4 != a2);
  }
  return result;
}

void TXTextFromFileGenerator::loadFile(PCString *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  TXTextFromFileGenerator::clearText(this);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  id v2 = [NSString alloc];
  __n128 v9 = (const __CFURL **)&this[8054];
  PCURL::getAsFileSystemString((const __CFURL **)&this[8054], &v11);
  unint64_t v3 = (void *)[v2 initWithContentsOfFile:PCString::ns_str(&v11) usedEncoding:&v13 error:&v12];
  p_CMTime var0 = (id *)&this[8056].var0;
  PCString::~PCString(&v11);
  if (v3)
  {
    unsigned int v5 = objc_msgSend(v3, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x1E4F28B88], "newlineCharacterSet"));
    memset(v10, 0, sizeof(v10));
    if ([v5 countByEnumeratingWithState:v10 objects:v14 count:16]) {
      operator new();
    }

    PCURL::getAsFileSystemString(v9, &v11);
    int v6 = PCString::ns_str(&v11);
    PCString::~PCString(&v11);
    uint64_t v7 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "attributesOfItemAtPath:error:", v6, 0);
    if (*p_var0) {

    }
    *p_CMTime var0 = (id)objc_msgSend(v7, "fileModificationDate", v9);
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
  }
  *((unsigned char *)p_var0 + 8) = v8;
}

void sub_1B765A1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, PCString a20)
{
}

void TXTextFromFileGenerator::getPreviewSceneNode(TXTextFromFileGenerator *this)
{
  uint64_t v1 = theApp;
  long long v6 = xmmword_1B7E78C80;
  PCSharedCount::PCSharedCount(&v5);
  SceneNode = (const void *)OZApplication::createSceneNode(v1, (unsigned int *)&v6);
  if (SceneNode) {
  else
  }
    unint64_t v3 = 0;
  PCString::~PCString((PCString *)&v5);
  TXTextLayout::didFinishInitializing(v3, 1);
  TXTextLayout::getCurrentStyleForInsertion((uint64_t)v3, &v6);
  if ((void)v6)
  {
    CMTime v4 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    OZChannel::setValue((OZChannel *)(v6 + 1976), &v4, 24.0, 0);
  }
  *((unsigned char *)v3 + 64488) = 1;
  operator new();
}

void sub_1B765A61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTextFromFileGenerator::isMissingFile(const __CFURL **this, PCString *a2)
{
  unint64_t v3 = this + 8054;
  PCURL::getFilename(this + 8054, &v8);
  BOOL v4 = PCString::empty(&v8);
  PCString::~PCString(&v8);
  if (!v4)
  {
    PCURL::getAsFileSystemString(v3, &v8);
    PCString::set(a2, &v8);
    PCString::~PCString(&v8);
    PCURL::getAsFileSystemString(v3, &v8);
    PCSharedCount v5 = PCString::createCStr(&v8);
    PCString::~PCString(&v8);
    long long v6 = fopen(v5, "r");
    if (!v6) {
      return 1;
    }
    fclose(v6);
  }
  return 0;
}

void sub_1B765A73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'TXTextFromFileGenerator::isMissingFile(const __CFURL **this, PCString *a2)
{
  return TXTextFromFileGenerator::isMissingFile(this - 25, a2);
}

uint64_t non-virtual thunk to'TXTextFromFileGenerator::writeBody(const __CFURL **this, PCSerializerWriteStream *a2, unsigned int a3, int a4, uint64_t a5)
{
  return TXFileLoadingGenerator::writeBody(this - 25, a2, a3, a4, a5);
}

{
  return TXFileLoadingGenerator::writeBody(this - 31, a2, a3, a4, a5);
}

uint64_t TXTextFromFileGenerator::parseBegin(TXTextFromFileGenerator *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 4u) {
    OZChannel::setValue((OZChannel *)((char *)this + 65336), MEMORY[0x1E4F1FA48], 0.0, 0);
  }

  return TXFileLoadingGenerator::parseBegin(this, a2);
}

uint64_t non-virtual thunk to'TXTextFromFileGenerator::parseBegin(TXTextFromFileGenerator *this, PCSerializerReadStream *a2)
{
  return TXTextFromFileGenerator::parseBegin((TXTextFromFileGenerator *)((char *)this - 200), a2);
}

{
  return TXTextFromFileGenerator::parseBegin((TXTextFromFileGenerator *)((char *)this - 248), a2);
}

uint64_t non-virtual thunk to'TXTextFromFileGenerator::parseEnd(TXTextFromFileGenerator *this, PCSerializerReadStream *a2)
{
  return TXFileLoadingGenerator::parseEnd((TXTextFromFileGenerator *)((char *)this - 200), a2);
}

{
  return TXFileLoadingGenerator::parseEnd((TXTextFromFileGenerator *)((char *)this - 248), a2);
}

uint64_t non-virtual thunk to'TXTextFromFileGenerator::parseElement(const void **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return TXFileLoadingGenerator::parseElement(this - 25, a2, a3);
}

{
  return TXFileLoadingGenerator::parseElement(this - 31, a2, a3);
}

uint64_t TXTextFromFileGenerator::didAddToScene(TXTextFromFileGenerator *this, OZScene *a2)
{
  __n128 v10 = 0uLL;
  CMTimeEpoch v11 = 0;
  OZSceneSettings::getFrameDuration((OZScene *)((char *)a2 + 336), &v10);
  TXTextGenerator::didAddToScene(this, a2);
  uint64_t v4 = *((void *)this + 25);
  this = (TXTextFromFileGenerator *)((char *)this + 200);
  (*(void (**)(CMTime *__return_ptr, TXTextFromFileGenerator *))(v4 + 1128))(&v8, this);
  CMTime v13 = v8;
  OZChannel::addKeypointAt((OZChannel *)((char *)this + 64680), &v13);
  CMTime v13 = v8;
  CMTime v12 = v9;
  PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v6);
  CMTime v13 = v6;
  *(__n128 *)&v12.CMTimeValue value = v10;
  v12.CMTimeEpoch epoch = v11;
  PC_CMTimeSaferSubtract(&v13, &v12, (uint64_t)&v7);
  OZChannel::addKeypointAt((OZChannel *)((char *)this + 64680), &v7);
  CMTime v13 = v8;
  OZChannel::setValue((OZChannel *)((char *)this + 64680), &v13, 0.0, 1);
  CMTime v13 = v8;
  CMTime v12 = v9;
  PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v6);
  CMTime v13 = v6;
  *(__n128 *)&v12.CMTimeValue value = v10;
  v12.CMTimeEpoch epoch = v11;
  PC_CMTimeSaferSubtract(&v13, &v12, (uint64_t)&v7);
  return OZChannel::setValue((OZChannel *)((char *)this + 64680), &v7, 100.0, 1);
}

uint64_t non-virtual thunk to'TXTextFromFileGenerator::didAddToScene(TXTextFromFileGenerator *this, OZScene *a2)
{
  return TXTextFromFileGenerator::didAddToScene((TXTextFromFileGenerator *)((char *)this - 200), a2);
}

void TXTimecodeGenerator::TXTimecodeGenerator(TXTimecodeGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
}

void sub_1B765AE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelEnum *a9, OZChannelBool *a10, PCString a11, PCString a12)
{
  PCString::~PCString(&a12);
  OZChannelBool::~OZChannelBool(v18);
  OZChannelText::~OZChannelText(v19);
  PCTimecodeMode::~PCTimecodeMode(v17);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelEnum::~OZChannelEnum(a9);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelFolder::~OZChannelFolder(v13);
  TXTextGenerator::~TXTextGenerator(v12);
  _Unwind_Resume(a1);
}

void TXTimecodeGenerator::setTimecodeBaseForMotionOrFCP(TXTimecodeGenerator *this, int a2, int a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (const PCString *)((char *)this + 65272);
  if (a2)
  {
    *(_OWORD *)CMTime v6 = xmmword_1B7E7A9F8;
    long long v7 = unk_1B7E7AA08;
    long long v8 = xmmword_1B7E7AA18;
    long long v9 = unk_1B7E7AA28;
    OZChannelEnum::setTags((TXTimecodeGenerator *)((char *)this + 65272), (char *)v6, 16);
    PCURL::PCURL((PCURL *)&v5, @"Text Timecode Generator Timecode Base Enum Motion");
  }
  else
  {
    int v10 = 17;
    *(_OWORD *)CMTime v6 = xmmword_1B7E7AA38;
    long long v7 = unk_1B7E7AA48;
    long long v8 = xmmword_1B7E7AA58;
    long long v9 = unk_1B7E7AA68;
    OZChannelEnum::setTags((TXTimecodeGenerator *)((char *)this + 65272), (char *)v6, 17);
    PCURL::PCURL((PCURL *)&v5, @"Text Timecode Generator Timecode Base Enum FCP");
  }
  OZChannelEnum::setStrings(v4, &v5, a3);
  PCString::~PCString(&v5);
}

void sub_1B765B11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void TXTimecodeGenerator::TXTimecodeGenerator(TXTimecodeGenerator *this, const TXTimecodeGenerator *a2, uint64_t a3)
{
  TXTextGenerator::TXTextGenerator(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F10B9A78;
  *(void *)(v5 + 200) = &unk_1F10B9F58;
  *(void *)(v5 + 216) = &unk_1F10BA830;
  *(void *)(v5 + 248) = &unk_1F10BAA88;
  *(void *)(v5 + 6728) = &unk_1F10BAAE0;
  *(void *)(v5 + 18976) = &unk_1F10BABB8;
  CMTime v6 = (OZChannelFolder *)(v5 + 64432);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 64432), (const OZChannelFolder *)((char *)a2 + 64432), (OZChannelFolder *)(v5 + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 64560), (const OZChannelBase *)((char *)a2 + 64560), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 64712), (const OZChannelBase *)((char *)a2 + 64712), v6);
  *((void *)this + 8089) = &unk_1F11036E0;
  *((void *)this + 8091) = &unk_1F1103A40;
  OZChannel::OZChannel((OZChannel *)((char *)this + 64864), (const OZChannelBase *)((char *)a2 + 64864), v6);
  *((void *)this + 8108) = &unk_1F11036E0;
  *((void *)this + 8110) = &unk_1F1103A40;
  OZChannelEnum::OZChannelEnum((TXTimecodeGenerator *)((char *)this + 65016), (const TXTimecodeGenerator *)((char *)a2 + 65016), v6);
  OZChannelEnum::OZChannelEnum((TXTimecodeGenerator *)((char *)this + 65272), (const TXTimecodeGenerator *)((char *)a2 + 65272), v6);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 0x1FFF);
  *((_OWORD *)this + 4096) = xmmword_1B7E7A9D0;
  OZChannelText::OZChannelText((OZChannelText *)((char *)this + 65552), (const OZChannelText *)((char *)a2 + 65552), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65720), (const OZChannelBase *)((char *)a2 + 65720), v6);
  *((unsigned char *)this + 65712) = 1;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65272), MEMORY[0x1E4F1FA48], 0.0) == 13)
  {
    if (*(unsigned char *)(theApp + 80)) {
      TXTimecodeGenerator::setTimecodeBaseForMotionOrFCP(this, 0, 1);
    }
  }
}

void sub_1B765B414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelBool *a10)
{
  OZChannelText::~OZChannelText(v17);
  PCTimecodeMode::~PCTimecodeMode(v16);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelFolder::~OZChannelFolder(v11);
  TXTextGenerator::~TXTextGenerator(v10);
  _Unwind_Resume(a1);
}

void TXTimecodeGenerator::~TXTimecodeGenerator(TXTimecodeGenerator *this)
{
  *(void *)this = &unk_1F10B9A78;
  *((void *)this + TXTextGenerator::~TXTextGenerator(this - 25) = &unk_1F10B9F58;
  *((void *)this + 27) = &unk_1F10BA830;
  *((void *)this + 31) = &unk_1F10BAA88;
  *((void *)this + 841) = &unk_1F10BAAE0;
  *((void *)this + 2372) = &unk_1F10BABB8;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 65720));
  OZChannelText::~OZChannelText((OZChannelText *)((char *)this + 65552));
  PCTimecodeMode::~PCTimecodeMode((TXTimecodeGenerator *)((char *)this + 65528));
  OZChannelEnum::~OZChannelEnum((TXTimecodeGenerator *)((char *)this + 65272));
  OZChannelEnum::~OZChannelEnum((TXTimecodeGenerator *)((char *)this + 65016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 64864));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 64712));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 64560));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 64432));

  TXTextGenerator::~TXTextGenerator((PCString *)this);
}

{
  uint64_t vars8;

  TXTimecodeGenerator::~TXTimecodeGenerator(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'TXTimecodeGenerator::~TXTimecodeGenerator(TXTimecodeGenerator *this)
{
}

{
  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 216));
}

{
  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 248));
}

{
  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 6728));
}

{
  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 18976));
}

{
  uint64_t vars8;

  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 200));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 216));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 248));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 6728));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 18976));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t non-virtual thunk to'TXTimecodeGenerator::operator=(uint64_t a1)
{
  return TXTextGenerator::operator=(a1 - 200);
}

uint64_t TXTimecodeGenerator::parseEnd(TXTimecodeGenerator *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = TXTextLayout::parseEnd(this, a2);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65272), MEMORY[0x1E4F1FA48], 0.0) == 13) {
    TXTimecodeGenerator::setTimecodeBaseForMotionOrFCP(this, 0, 1);
  }
  return v3;
}

uint64_t non-virtual thunk to'TXTimecodeGenerator::parseEnd(TXTimecodeGenerator *this, PCSerializerReadStream *a2)
{
  return TXTimecodeGenerator::parseEnd((TXTimecodeGenerator *)((char *)this - 200), a2);
}

{
  return TXTimecodeGenerator::parseEnd((TXTimecodeGenerator *)((char *)this - 248), a2);
}

void TXTimecodeGenerator::prepareForRender(TXTimecodeGenerator *this, CMTime *a2)
{
  CMTime v21 = *a2;
  uint64_t v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v20, v4);
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 640))((char *)this + 200);
  (*(void (**)(PCSharedCount *__return_ptr))(*(void *)v5 + 712))(v17);
  CMTime v15 = *a2;
  uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), &v13);
  CMTime time1 = v15;
  *(__n128 *)&time2.CMTimeValue value = v13;
  time2.CMTimeEpoch epoch = v14;
  __n128 v7 = PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v16);
  uint64_t v8 = (*(uint64_t (**)(char *, __n128))(*((void *)this + 25) + 272))((char *)this + 200, v7);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v11);
  *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)&v17[0].var0;
  time1.CMTimeEpoch epoch = v18;
  CMTime time2 = v16;
  if (CMTimeCompare(&time1, &time2) > 0) {
    goto LABEL_2;
  }
  *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)&v17[0].var0;
  time1.CMTimeEpoch epoch = v18;
  CMTime time2 = v19;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v23);
  CMTime time1 = v23;
  *(__n128 *)&time2.CMTimeValue value = v11;
  time2.CMTimeEpoch epoch = v12;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v22);
  CMTime time1 = v16;
  CMTime time2 = v22;
  if (CMTimeCompare(&time1, &time2) <= 0 || (v19.flags & 1) != 0 && (v19.flags & 0x10) != 0)
  {
    PCSharedCount::PCSharedCount(v17);
    TXTextLayout::setString(this, (const PCString *)v17, 1);
    TXTextLayout::updateDisplayString((PCString *)this, &v21);
    uint64_t v9 = *(void *)(*((void *)this + 2422) + 16);
    TXTextLayout::getDisplayString((PCString *)this, (PCString *)&time1);
    unsigned int v10 = PCString::size((PCString *)&time1);
    *(_DWORD *)(v9 + 24) = 0;
    *(_DWORD *)(v9 + 28) = v10;
    PCString::~PCString((PCString *)&time1);
    TXTextLayout::rebuildParagraphStyles((PCString *)this);
    TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
    TXTextLayout::doLayout(this, (const OZRenderState *)a2, 0);
    PCString::~PCString((PCString *)v17);
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v20);
    TXTextLayout::prepareForRender(this, (const OZRenderState *)a2);
  }
  else
  {
LABEL_2:
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v20);
  }
}

void sub_1B765BB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,PCString a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  PCString::~PCString((PCString *)(v28 - 64));
  PCString::~PCString(&a22);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a28);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'TXTimecodeGenerator::prepareForRender(TXTimecodeGenerator *this, CMTime *a2)
{
}

void TXTimecodeGenerator::prepareForRender(TXTimecodeGenerator *this, const OZRenderState *a2)
{
  OZRenderParams::OZRenderParams((OZRenderParams *)v5);
  double v4 = OZRenderParams::setState((OZRenderParams *)v5, a2);
  (*(void (**)(TXTimecodeGenerator *, unsigned char *, double))(*(void *)this + 576))(this, v5, v4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v5);
}

void sub_1B765BC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t TXTimecodeGenerator::getPreviewSceneNode(TXTimecodeGenerator *this)
{
  uint64_t v1 = theApp;
  long long v7 = xmmword_1B7E78C60;
  PCSharedCount::PCSharedCount(&v6);
  SceneNode = (const void *)OZApplication::createSceneNode(v1, (unsigned int *)&v7);
  if (SceneNode) {
  else
  }
    uint64_t v3 = 0;
  PCString::~PCString((PCString *)&v6);
  TXTextLayout::didFinishInitializing(v3, 1);
  TXTextLayout::getCurrentStyleForInsertion((uint64_t)v3, &v7);
  if ((void)v7)
  {
    CMTime v5 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    OZChannel::setValue((OZChannel *)(v7 + 1976), &v5, 16.0, 0);
  }
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
  if (v3) {
    return (uint64_t)v3 + 200;
  }
  else {
    return 0;
  }
}

void sub_1B765BD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXTimecodeGenerator::showBackgroundRect(TXTimecodeGenerator *this)
{
  return 1;
}

void OZChannelTimecode::OZChannelTimecode(OZChannelTimecode *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZChannelTimecode_FactoryBase = (OZFactory *)getOZChannelTimecode_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelTimecode_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->CMTime var0 = (void **)&unk_1F11036E0;
  this->var2 = (void **)&unk_1F1103A40;
  OZChannelTimecodeInfo = (OZChannelTimecode *)OZChannelTimecode::createOZChannelTimecodeInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelTimecode::_OZChannelTimecodeInfo;
    this->var17 = (OZChannelInfo *)OZChannelTimecode::_OZChannelTimecodeInfo;
  }
  this->var16 = var17;
  OZChannelTimecode::createOZChannelTimecodeImpl(OZChannelTimecodeInfo);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelTimecode::_OZChannelTimecodeImpl;
    this->var15 = (OZChannelImpl *)OZChannelTimecode::_OZChannelTimecodeImpl;
  }
  this->var14 = var15;
}

void sub_1B765BE60(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelTimecode::createOZChannelTimecodeInfo(OZChannelTimecode *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelTimecode::createOZChannelTimecodeInfo(void)::_OZChannelTimecodeInfo_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelTimecode::createOZChannelTimecodeInfo(void)::_OZChannelTimecodeInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelTimecode::createOZChannelTimecodeInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelTimecode::_OZChannelTimecodeInfo;
}

uint64_t OZChannelTimecode::createOZChannelTimecodeImpl(OZChannelTimecode *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelTimecode::createOZChannelTimecodeImpl(void)::_OZChannelTimecodeImpl_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelTimecode::createOZChannelTimecodeImpl(void)::_OZChannelTimecodeImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelTimecode::createOZChannelTimecodeImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelTimecode::_OZChannelTimecodeImpl;
}

void std::__call_once_param<std::tuple<OZChannelTimecode::createOZChannelTimecodeInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZChannelTimecode::_OZChannelTimecodeInfo) {
    operator new();
  }
}

void sub_1B765BFA0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelTimecodeInfo::OZChannelTimecodeInfo(OZChannelTimecodeInfo *this)
{
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(void *)this = &unk_1F10BABF8;
  *((void *)this + 10) = &unk_1F10BAC18;
}

void sub_1B765C054(_Unwind_Exception *a1)
{
  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelTimecode::createOZChannelTimecodeImpl(void)::{lambda(void)#1} &&>>()
{
}

void OZChannelTimecode::createOZChannelTimecodeImpl(void)::{lambda(void)#1}::operator()()
{
  if (!OZChannelTimecode::_OZChannelTimecodeImpl) {
    operator new();
  }
}

void sub_1B765C148(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTimeDateGenerator::TXTimeDateGenerator(TXTimeDateGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
}

void sub_1B765C7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelEnum *a10, OZChannelBool *a11, OZChannelBool *a12, PCString a13, PCString a14)
{
  PCString::~PCString(&a14);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelEnum::~OZChannelEnum(v21);
  OZChannelEnum::~OZChannelEnum(v20);
  OZChannelEnum::~OZChannelEnum(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannel::~OZChannel(v19);
  OZChannel::~OZChannel(v18);
  OZChannel::~OZChannel(v17);
  OZChannelBool::~OZChannelBool(a12);
  OZChannelFolder::~OZChannelFolder(v15);
  TXTextGenerator::~TXTextGenerator(v14);
  _Unwind_Resume(a1);
}

void TXTimeDateGenerator::TXTimeDateGenerator(TXTimeDateGenerator *this, const TXTimeDateGenerator *a2, uint64_t a3)
{
  TXTextGenerator::TXTextGenerator(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F10BACE8;
  *(void *)(v5 + 200) = &unk_1F10BB1C8;
  *(void *)(v5 + 216) = &unk_1F10BBAA0;
  *(void *)(v5 + 248) = &unk_1F10BBCF8;
  *(void *)(v5 + 6728) = &unk_1F10BBD50;
  *(void *)(v5 + 18976) = &unk_1F10BBE28;
  PCSharedCount v6 = (OZChannelFolder *)(v5 + 64432);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 64432), (const OZChannelFolder *)((char *)a2 + 64432), (OZChannelFolder *)(v5 + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 64560), (const OZChannelBase *)((char *)a2 + 64560), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 64712), (const OZChannelBase *)((char *)a2 + 64712), v6);
  *((void *)this + 8089) = &unk_1F1100CF0;
  *((void *)this + 8091) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 64864), (const OZChannelBase *)((char *)a2 + 64864), v6);
  *((void *)this + 8108) = &unk_1F1100CF0;
  *((void *)this + 8110) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 65016), (const OZChannelBase *)((char *)a2 + 65016), v6);
  *((void *)this + 8127) = &unk_1F1100CF0;
  *((void *)this + 8129) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65168), (const OZChannelBase *)((char *)a2 + 65168), v6);
  OZChannelEnum::OZChannelEnum((TXTimeDateGenerator *)((char *)this + 65320), (const TXTimeDateGenerator *)((char *)a2 + 65320), v6);
  OZChannelEnum::OZChannelEnum((TXTimeDateGenerator *)((char *)this + 65576), (const TXTimeDateGenerator *)((char *)a2 + 65576), v6);
  OZChannelEnum::OZChannelEnum((TXTimeDateGenerator *)((char *)this + 65832), (const TXTimeDateGenerator *)((char *)a2 + 65832), v6);
  OZChannelEnum::OZChannelEnum((TXTimeDateGenerator *)((char *)this + 66088), (const TXTimeDateGenerator *)((char *)a2 + 66088), v6);
  *((void *)this + 8293) = 0;
  *((unsigned char *)this + 66352) = *((unsigned char *)a2 + 66352);
  TXTextLayout::setLocale(this, *((CFTypeRef *)a2 + 8051));
  id v7 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  *((void *)this + 8293) = v7;
  objc_msgSend(v7, "setFormatterBehavior:", 1040, (char *)this + 65168, (char *)this + 64560);
}

void sub_1B765CC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelBool *a9, OZChannelBool *a10)
{
  OZChannelEnum::~OZChannelEnum(v12);
  OZChannelEnum::~OZChannelEnum(v17);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelBool::~OZChannelBool(a9);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(v13);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelFolder::~OZChannelFolder(v11);
  TXTextGenerator::~TXTextGenerator(v10);
  _Unwind_Resume(a1);
}

void TXTimeDateGenerator::~TXTimeDateGenerator(TXTimeDateGenerator *this)
{
  *(void *)this = &unk_1F10BACE8;
  *((void *)this + TXTextGenerator::~TXTextGenerator(this - 25) = &unk_1F10BB1C8;
  *((void *)this + 27) = &unk_1F10BBAA0;
  *((void *)this + 31) = &unk_1F10BBCF8;
  *((void *)this + 841) = &unk_1F10BBD50;
  *((void *)this + 2372) = &unk_1F10BBE28;

  OZChannelEnum::~OZChannelEnum((TXTimeDateGenerator *)((char *)this + 66088));
  OZChannelEnum::~OZChannelEnum((TXTimeDateGenerator *)((char *)this + 65832));
  OZChannelEnum::~OZChannelEnum((TXTimeDateGenerator *)((char *)this + 65576));
  OZChannelEnum::~OZChannelEnum((TXTimeDateGenerator *)((char *)this + 65320));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 65168));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 65016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 64864));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 64712));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 64560));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 64432));

  TXTextGenerator::~TXTextGenerator((PCString *)this);
}

{
  uint64_t vars8;

  TXTimeDateGenerator::~TXTimeDateGenerator(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'TXTimeDateGenerator::~TXTimeDateGenerator(TXTimeDateGenerator *this)
{
}

{
  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 216));
}

{
  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 248));
}

{
  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 6728));
}

{
  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 18976));
}

{
  uint64_t vars8;

  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 200));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 216));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 248));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 6728));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 18976));

  JUMPOUT(0x1BA9BFBA0);
}

void *TXTimeDateGenerator::operator=(TXTextLayout *a1, const void *a2)
{
  TXTextGenerator::operator=(a1);
  if (result)
  {
    uint64_t v5 = (const void *)result[8051];
    return TXTextLayout::setLocale(a1, v5);
  }
  return result;
}

void *non-virtual thunk to'TXTimeDateGenerator::operator=(uint64_t a1, const void *a2)
{
  return TXTimeDateGenerator::operator=((TXTextLayout *)(a1 - 200), a2);
}

uint64_t TXTimeDateGenerator::generateString(TXTimeDateGenerator *this, PCString *a2, CMTime *a3)
{
  CMTime v56 = *a3;
  double v4 = (char *)this + 200;
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 640))((char *)this + 200);
  uint64_t v6 = (*(uint64_t (**)(char *))(*(void *)v4 + 272))(v4);
  if (!v6) {
    goto LABEL_6;
  }
  uint64_t v7 = v6;
  (*(void (**)(CMTime *__return_ptr, uint64_t))(*(void *)v5 + 712))(&v54, v5);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v7 + 336), &v51);
  CMTime time1 = v56;
  *(__n128 *)&time2.CMTimeValue value = v51;
  time2.CMTimeEpoch epoch = v52;
  PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v53);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v7 + 336), &v49);
  CMTime time1 = v54;
  CMTime time2 = v53;
  uint64_t result = CMTimeCompare(&time1, &time2);
  if ((int)result <= 0)
  {
    CMTime time1 = v54;
    CMTime time2 = v55;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v59);
    CMTime time1 = v59;
    *(__n128 *)&time2.CMTimeValue value = v49;
    time2.CMTimeEpoch epoch = v50;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v57);
    CMTime time1 = v53;
    *(__n128 *)&time2.CMTimeValue value = v57;
    time2.CMTimeEpoch epoch = v58;
    uint64_t result = CMTimeCompare(&time1, &time2);
    if ((int)result <= 0 || (v55.flags & 1) != 0 && (v55.flags & 0x10) != 0)
    {
LABEL_6:
      TXTimeDateGenerator::updateFormatter(this);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 64560), MEMORY[0x1E4F1FA48], 0.0))
      {
        (*(void (**)(CMTime *__return_ptr, char *))(*((void *)this + 25) + 1128))(&v54, v4);
        CMTime time2 = v54;
        CMTime time1 = v56;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
        double Seconds = CMTimeGetSeconds(&time);
        uint64_t v10 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 272))(v4);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), &v57);
        CMTime time1 = v54;
        CMTime time2 = v55;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v59);
        CMTime time1 = v59;
        *(__n128 *)&time2.CMTimeValue value = v57;
        time2.CMTimeEpoch epoch = v58;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v47);
        double v11 = Seconds / CMTimeGetSeconds(&v47);
        CMTimeEpoch v12 = (const CMTime *)MEMORY[0x1E4F1FA48];
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 64864), MEMORY[0x1E4F1FA48], 0.0);
        double v14 = v13;
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 65016), v12, 0.0);
        double v16 = v14 + v11 * (v15 - v14);
      }
      else
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 64712), &v56, 0.0);
        double v16 = v17;
      }
      switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 65320), MEMORY[0x1E4F1FA48], 0.0))
      {
        case 0u:
          uint64_t v25 = (void *)MEMORY[0x1E4F1C9C8];
          double v26 = v16;
          goto LABEL_15;
        case 1u:
          int v27 = (int)v16;
          int v28 = (int)v16 / 60;
          int v29 = 60;
          goto LABEL_14;
        case 2u:
          int v27 = (int)v16;
          int v28 = (int)v16 / 3600;
          int v29 = 3600;
LABEL_14:
          double v26 = v16 - (double)(v27 - v28 * v29);
          uint64_t v25 = (void *)MEMORY[0x1E4F1C9C8];
LABEL_15:
          uint64_t v30 = [v25 dateWithTimeIntervalSinceReferenceDate:v26];
          goto LABEL_21;
        case 3u:
          int v31 = (void *)[MEMORY[0x1E4F1C9A8] currentCalendar];
          uint64_t v32 = [MEMORY[0x1E4F1CAF0] localTimeZone];
          uint64_t v33 = objc_msgSend(v31, "componentsInTimeZone:fromDate:", v32, objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:", v16));
          double v34 = v33;
          goto LABEL_20;
        case 4u:
          int v31 = (void *)[MEMORY[0x1E4F1C9A8] currentCalendar];
          uint64_t v35 = [MEMORY[0x1E4F1CAF0] localTimeZone];
          double v36 = objc_msgSend(v31, "componentsInTimeZone:fromDate:", v35, objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:", v16));
          double v34 = v36;
          goto LABEL_19;
        case 5u:
          int v31 = (void *)[MEMORY[0x1E4F1C9A8] currentCalendar];
          uint64_t v37 = [MEMORY[0x1E4F1CAF0] localTimeZone];
          double v34 = objc_msgSend(v31, "componentsInTimeZone:fromDate:", v37, objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:", v16));
          [v34 setMonth:1];
          double v36 = v34;
LABEL_19:
          [v36 setDay:1];
          uint64_t v33 = v34;
LABEL_20:
          [v33 setHour:0];
          [v34 setMinute:0];
          [v34 setSecond:0];
          uint64_t v30 = [v31 dateFromComponents:v34];
LABEL_21:
          uint64_t v38 = v30;
          TXTimeDateGenerator::check24HourFormat((id *)this);
          double v39 = (void *)[*((id *)this + 8293) stringFromDate:v38];
          uint64_t v40 = [v39 length];
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65168), MEMORY[0x1E4F1FA48], 0.0))
          {
            double v41 = (void *)[MEMORY[0x1E4F28E78] stringWithString:v39];
            if ([v41 length])
            {
              unint64_t v42 = 0;
              uint64_t v43 = MEMORY[0x1E4F14390];
              do
              {
                if (v42) {
                  unsigned int v44 = [v41 characterAtIndex:v42 - 1];
                }
                else {
                  unsigned int v44 = 0;
                }
                unsigned int v45 = [v41 characterAtIndex:v42];
                if (v42 >= v40 - 1) {
                  unsigned int v46 = 0;
                }
                else {
                  unsigned int v46 = [v41 characterAtIndex:v42 + 1];
                }
                if ((v44 > 0xFF || (*(_DWORD *)(v43 + 4 * v44 + 60) & 0x400) == 0)
                  && v45 <= 0xFF
                  && (*(_DWORD *)(v43 + 4 * v45 + 60) & 0x400) != 0
                  && (v46 > 0xFF || (*(_DWORD *)(v43 + 4 * v46 + 60) & 0x400) == 0))
                {
                  [v41 insertString:@"0" atIndex:v42++];
                }
                ++v42;
              }
              while (v42 < [v41 length]);
            }
            [v41 length];
          }
          operator new[]();
        default:
          PCPrint("File %s, line %d should not have been reached:\n\t", v18, v19, v20, v21, v22, v23, v24, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Text/TXTimeDateGenerator.mm");
          pcAbortImpl();
      }
    }
  }
  return result;
}

uint64_t TXTimeDateGenerator::updateFormatter(TXTimeDateGenerator *this)
{
  uint64_t v2 = (id *)((char *)this + 64408);
  uint64_t v3 = (const CMTime *)MEMORY[0x1E4F1FA48];
  uint64_t ValueAsInt = (int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 65832), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v5 = (int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 65576), v3, 0.0);
  [v2[242] setDateStyle:ValueAsInt];
  [v2[242] setTimeStyle:v5];
  id v6 = v2[242];
  id v7 = *v2;

  return [v6 setLocale:v7];
}

uint64_t TXTimeDateGenerator::check24HourFormat(id *this)
{
  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F28C10], "dateFormatFromTemplate:options:locale:", @"j", 0, objc_msgSend(MEMORY[0x1E4F1CA20], "currentLocale"));
  uint64_t v3 = this + 8293;
  double v4 = (void *)[this[8293] dateFormat];
  uint64_t v5 = [v4 rangeOfString:@"h"];
  uint64_t v7 = v6;
  uint64_t result = [v2 rangeOfString:@"H"];
  if (v9) {
    BOOL v10 = v7 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    uint64_t v11 = objc_msgSend((id)objc_msgSend(v4, "stringByReplacingCharactersInRange:withString:", v5, v7, @"H"), "stringByReplacingOccurrencesOfString:withString:", @"a", &stru_1F119C770);
    CMTimeEpoch v12 = *v3;
    return [v12 setDateFormat:v11];
  }
  return result;
}

uint64_t TXTimeDateGenerator::getPreviewSceneNode(TXTimeDateGenerator *this)
{
  uint64_t v1 = theApp;
  long long v7 = xmmword_1B7E78C70;
  PCSharedCount::PCSharedCount(&v6);
  SceneNode = (const void *)OZApplication::createSceneNode(v1, (unsigned int *)&v7);
  if (SceneNode) {
  else
  }
    uint64_t v3 = 0;
  PCString::~PCString((PCString *)&v6);
  TXTextLayout::didFinishInitializing(v3, 1);
  TXTextLayout::getCurrentStyleForInsertion((uint64_t)v3, &v7);
  if ((void)v7)
  {
    CMTime v5 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    OZChannel::setValue((OZChannel *)(v7 + 1976), &v5, 12.0, 0);
  }
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
  if (v3) {
    return (uint64_t)v3 + 200;
  }
  else {
    return 0;
  }
}

void sub_1B765DB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'TXTimeDateGenerator::didAddToScene(TXTimeDateGenerator *this, OZScene *a2)
{
}

uint64_t TXTimeDateGenerator::writeBody(TXTimeDateGenerator *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  TXTextLayout::writeBody(this, a2, a3, a4, a5);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&TXTimeDateGeneratorScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
  long long v7 = (const void *)MEMORY[0x1BA9BE030](*((void *)this + 8051));
  PCURL::PCURL((PCURL *)&v9, v7);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(void *)a2 + 200))(a2, 2, &v9);
  PCString::~PCString(&v9);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B765DC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'TXTimeDateGenerator::writeBody(TXTimeDateGenerator *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return TXTimeDateGenerator::writeBody((TXTimeDateGenerator *)((char *)this - 200), a2, a3, a4, a5);
}

{
  return TXTimeDateGenerator::writeBody((TXTimeDateGenerator *)((char *)this - 248), a2, a3, a4, a5);
}

uint64_t TXTimeDateGenerator::parseBegin(TXTimeDateGenerator *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'TXTimeDateGenerator::parseBegin(TXTimeDateGenerator *this, PCSerializerReadStream *a2)
{
  return 1;
}

{
  TXTextLayout::parseBegin((TXTimeDateGenerator *)((char *)this - 248), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXTimeDateGeneratorScope);
  return 1;
}

uint64_t TXTimeDateGenerator::parseElement(TXTimeDateGenerator *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCSharedCount v6 = (TXParagraphStyleFolder_Factory *)(*(uint64_t (**)(void))(*((void *)this + 25) + 272))();
  if ((TXParagraphStyleFolder_Factory::version(v6) & 1) == 0 && *((_DWORD *)a3 + 2) == 1)
  {
    PCSharedCount::PCSharedCount(&v9);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)&v9);
    long long v7 = (void *)[objc_alloc(MEMORY[0x1E4F1CA20]) initWithLocaleIdentifier:PCString::ns_str((PCString *)&v9)];
    TXTextLayout::setLocale(this, v7);

    PCString::~PCString((PCString *)&v9);
  }
  TXTextLayout::parseElement(this, a2, a3);
  return 1;
}

void sub_1B765DE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'TXTimeDateGenerator::parseElement(TXTimeDateGenerator *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

{
  TXTimeDateGenerator::parseElement((TXTimeDateGenerator *)((char *)this - 248), a2, a3);
  return 1;
}

uint64_t TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::getInstance(TXTimeDateGenerator::TXTimeDateGenerator_valueInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::getInstance(void)::TXTimeDateGenerator_valueInfo_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::getInstance(void)::TXTimeDateGenerator_valueInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::_TXTimeDateGenerator_valueInfo;
}

void std::__call_once_param<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::_TXTimeDateGenerator_valueInfo) {
    operator new();
  }
}

void sub_1B765DF38(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTimeDateGenerator::TXTimeDateGenerator_valueInfo *TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::TXTimeDateGenerator_valueInfo(TXTimeDateGenerator::TXTimeDateGenerator_valueInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 60.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTimeDateGenerator::TXTimeDateGenerator_valueInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F10BBE68;
  *((void *)this + 10) = &unk_1F10BBE88;
  return this;
}

void sub_1B765E010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTimeDateGenerator::TXTimeDateGenerator_startImpl::getInstance(TXTimeDateGenerator::TXTimeDateGenerator_startImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTimeDateGenerator::TXTimeDateGenerator_startImpl::getInstance(void)::TXTimeDateGenerator_startImpl_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTimeDateGenerator::TXTimeDateGenerator_startImpl::getInstance(void)::TXTimeDateGenerator_startImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_startImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTimeDateGenerator::TXTimeDateGenerator_startImpl::_TXTimeDateGenerator_start;
}

void std::__call_once_param<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_startImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTimeDateGenerator::TXTimeDateGenerator_startImpl::_TXTimeDateGenerator_start) {
    operator new();
  }
}

void sub_1B765E0EC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTimeDateGenerator::TXTimeDateGenerator_startImpl::TXTimeDateGenerator_startImpl(TXTimeDateGenerator::TXTimeDateGenerator_startImpl *this)
{
}

void sub_1B765E1C4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTimeDateGenerator::TXTimeDateGenerator_endImpl::getInstance(TXTimeDateGenerator::TXTimeDateGenerator_endImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTimeDateGenerator::TXTimeDateGenerator_endImpl::getInstance(void)::TXTimeDateGenerator_endImpl_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTimeDateGenerator::TXTimeDateGenerator_endImpl::getInstance(void)::TXTimeDateGenerator_endImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_endImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTimeDateGenerator::TXTimeDateGenerator_endImpl::_TXTimeDateGenerator_end;
}

void std::__call_once_param<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_endImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTimeDateGenerator::TXTimeDateGenerator_endImpl::_TXTimeDateGenerator_end) {
    operator new();
  }
}

void sub_1B765E2A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTimeDateGenerator::TXTimeDateGenerator_endImpl::TXTimeDateGenerator_endImpl(TXTimeDateGenerator::TXTimeDateGenerator_endImpl *this)
{
}

void sub_1B765E378(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::getInstance(TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::getInstance(void)::TXTimeDateGenerator_timeStyleImpl_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::getInstance(void)::TXTimeDateGenerator_timeStyleImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::_TXTimeDateGenerator_timeStyle;
}

void std::__call_once_param<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::_TXTimeDateGenerator_timeStyle) {
    operator new();
  }
}

void sub_1B765E454(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::TXTimeDateGenerator_timeStyleImpl(TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl *this)
{
}

void sub_1B765E528(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZChannelEnum::createOZChannelEnumCurve(OZChannelEnum *this, double a2)
{
}

void sub_1B765E59C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

uint64_t TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::getInstance(TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::getInstance(void)::TXTimeDateGenerator_dateStyleImpl_once, memory_order_acquire) != -1)
  {
    double v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::getInstance(void)::TXTimeDateGenerator_dateStyleImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::_TXTimeDateGenerator_dateStyle;
}

void std::__call_once_param<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::_TXTimeDateGenerator_dateStyle) {
    operator new();
  }
}

void sub_1B765E678(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::TXTimeDateGenerator_dateStyleImpl(TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl *this)
{
}

void sub_1B765E74C(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void TXSequenceBehavior::TXSequenceBehavior(TXSequenceBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXTextBehavior::TXTextBehavior(this, a2, a3, a4);
  *(void *)(v5 + 536) = &unk_1F10BC8E0;
  OZLocking::OZLocking((OZLocking *)(v5 + 544));
  *(void *)this = &unk_1F10BC0C0;
  *((void *)this + 2) = &unk_1F10BC400;
  *((void *)this + 6) = &unk_1F10BC658;
  *((void *)this + 42) = &unk_1F10BC6B0;
  *((void *)this + 67) = &unk_1F10BC6D8;
  *((void *)this + 68) = &unk_1F10BC738;
  *((void *)this + 93) = 0;
  *((void *)this + 95) = 0;
  *((void *)this + 94) = 0;
  *((unsigned char *)this + 796) = 0;
  *((void *)this + 101) = 0;
  TXSequenceChannels::TXSequenceChannels((TXSequenceBehavior *)((char *)this + 816), (OZChannelFolder *)((char *)this + 56), 0xC8u);
  PCURL::PCURL((PCURL *)&v51, @"Text Sequence Behavior Controls");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 27984), &v51, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v6, @"Text Sequence Behavior Sequencing Enum");
  PCURL::PCURL((PCURL *)&v50, @"Text Sequence Behavior Sequencing");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 28112), 1u, &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v7, @"Text Sequence Behavior Units Enum");
  PCURL::PCURL((PCURL *)&v50, @"Text Sequence Behavior Units");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 28368), &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v8, @"Text Sequence Behavior Start");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28624), 0.0, &v51, (OZChannelFolder *)((char *)this + 27984), 0xDAu, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v9, @"Text Sequence Behavior End");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28776), 0.0, &v51, (OZChannelFolder *)((char *)this + 27984), 0xDBu, 0, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v10, "Transcription");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 28928), &v51, (OZChannelFolder *)((char *)this + 27984), 0xF4u, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v11, "Transcription");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29056), &v51, (OZChannelFolder *)((char *)this + 28928), 0xF0u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v12, "Duration");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 29208), 10, &v51, (OZChannelFolder *)((char *)this + 28928), 0xEEu, 0, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v13, "Word;Line;Block");
  PCString::PCString(&v50, "Trigger When");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 29360), &v51, &v50, (OZChannelFolder *)((char *)this + 28928), 0xEDu, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCString::PCString(v14, "Trigger Offset");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 29616), &v51, (OZChannelFolder *)((char *)this + 28928), 0xF2u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v15, "Speech Begins;Speech Ends");
  PCString::PCString(&v50, "Trigger Time");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 29768), &v51, &v50, (OZChannelFolder *)((char *)this + 28928), 0xF1u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCString::PCString(v16, "None;Word;Line");
  PCString::PCString(&v50, "Complete");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 30024), &v51, &v50, (OZChannelFolder *)((char *)this + 28928), 0xF5u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCString::PCString(v17, "Completion Duration");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 30280), &v51, (OZChannelFolder *)((char *)this + 28928), 0xF8u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v18, "Add to input;Multiply by input;Replace input");
  PCString::PCString(&v50, "Apply Mode");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 30432), 2u, &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xF3u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v19, @"Text Sequence Behavior Subselection");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 30688), &v51, (OZChannelFolder *)((char *)this + 27984), 0xE5u, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v20, "All;Character;Character in Word;Character in Line;Word;Word in Line;Line;Word in Phrase;Emoji");
  PCURL::PCURL((PCURL *)&v50, @"Text Sequence Behavior Subselection Units");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 30816), &v51, &v50, (OZChannelFolder *)((char *)this + 30688), 0xE6u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v21, @"Text Sequence Behavior Subselection Start");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 31072), 0.0, &v51, (OZChannelFolder *)((char *)this + 30688), 0xE7u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v22, @"Text Sequence Behavior Subselection End");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 31224), 1.0, &v51, (OZChannelFolder *)((char *)this + 30688), 0xE8u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v23, @"Text Sequence Behavior Subselection Invert");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31376), &v51, (OZChannelFolder *)((char *)this + 30688), 0xE9u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v24, @"Text Sequence Behavior Subselection Reverse");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31528), &v51, (OZChannelFolder *)((char *)this + 30688), 0xEAu, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v25, @"Text Sequence Behavior Spread");
  OZChannelDouble::OZChannelDouble((TXSequenceBehavior *)((char *)this + 31680), 1.0, &v51, (OZChannelFolder *)((char *)this + 27984), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v26, @"Text Sequence Behavior Direction Enum");
  PCURL::PCURL((PCURL *)&v50, @"Text Sequence Behavior Direction");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 31832), &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xCDu, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v27, @"Text Sequence Behavior Random Seed");
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 32088), &v51, (OZChannelFolder *)((char *)this + 27984), 0xCFu, 4194306, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v28, @"Text Sequence Behavior Speed Enum");
  PCURL::PCURL((PCURL *)&v50, @"Text Sequence Behavior Speed");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 32240), &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xD0u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v29, @"Text Sequence Behavior Custom Speed");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 32496), 0.0, &v51, (OZChannelFolder *)((char *)this + 27984), 0xD1u, 0x400002u, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v30, @"Text Sequence Behavior Loops");
  OZChannelDouble::OZChannelDouble((TXSequenceBehavior *)((char *)this + 32648), 1, &v51, (OZChannelFolder *)((char *)this + 27984), 0xD2u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v31, @"Text Sequence Behavior Apply Speed Enum");
  PCURL::PCURL((PCURL *)&v50, @"Text Sequence Behavior Apply Speed");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 32800), &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xD3u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v32, @"Text Sequence Behavior Start Offset");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 33056), &v51, (OZChannelFolder *)((char *)this + 27984), 0xEBu, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v33, @"Text Sequence Behavior End Condition Enum");
  PCURL::PCURL((PCURL *)&v50, @"Text Sequence Behavior End Condition");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 33208), &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xD4u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v34, @"Text Sequence Behavior End Offset");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 33464), &v51, (OZChannelFolder *)((char *)this + 27984), 0xD5u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v35, @"Text Sequence Behavior Variance");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 33616), &v51, (OZChannelFolder *)((char *)this + 27984), 0xDCu, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v36, @"Text Sequence Behavior Variance");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 222, 0.0, &v51, (OZChannelFolder *)((char *)this + 33616), 0xD6u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v37, @"Text Sequence Behavior Variance Min");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 223, -1.0, &v51, (OZChannelFolder *)((char *)this + 33616), 0xD7u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v38, @"Text Sequence Behavior Variance Max");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 224, 1.0, &v51, (OZChannelFolder *)((char *)this + 33616), 0xD8u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v39, @"Text Sequence Behavior Variance Amount");
  OZChannelDouble::OZChannelDouble((TXSequenceBehavior *)((char *)this + 34200), 100.0, &v51, (OZChannelFolder *)((char *)this + 33616), 0xDDu, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v40, @"Text Sequence Behavior Variance Noisiness");
  OZChannelDouble::OZChannelDouble((TXSequenceBehavior *)((char *)this + 34352), 0.5, &v51, (OZChannelFolder *)((char *)this + 33616), 0xDEu, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v41, @"Text Sequence Behavior Fix End Points Enum");
  PCURL::PCURL((PCURL *)&v50, @"Text Sequence Behavior Fix End Points");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 34504), &v51, &v50, (OZChannelFolder *)((char *)this + 33616), 0xDFu, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v42, @"Text Sequence Behavior Variance Seed");
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 34760), &v51, (OZChannelFolder *)((char *)this + 33616), 0xD9u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v43, "Draw Selection");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 34912), &v51, (OZChannelFolder *)((char *)this + 27984), 0xE0u, 0x400002u, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v44, "Selection Color");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 35064), 0.35, &v51, (OZChannelFolder *)((char *)this + 27984), 0xE1u, 0x400002u, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v45, @"Text Sequence Behavior OSC Mode Enum");
  PCURL::PCURL((PCURL *)&v50, @"Text Sequence Behavior OSC Mode");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 35216), &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xE2u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v46, @"Text Sequence Position Options Enum");
  PCURL::PCURL((PCURL *)&v50, @"Text Sequence Position Options");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 35472), &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xE3u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCString::PCString(v47, "");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 35728), 1, &v51, (OZChannelFolder *)((char *)this + 27984), 0xE4u, 2u, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v48, "");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 35880), 1, &v51, (OZChannelFolder *)((char *)this + 27984), 0xECu, 2u, 0, 0);
  PCString::~PCString(&v51);
  *((_OWORD *)this + 2254) = 0u;
  *((void *)this + 4507) = (char *)this + 36064;
  *((unsigned char *)this + 36049) = 0;
  *((_OWORD *)this + 2252) = 0u;
  uint64_t v49 = MEMORY[0x1E4F1F9F8];
  *((_OWORD *)this + 2255) = *MEMORY[0x1E4F1F9F8];
  *((void *)this + 4512) = *(void *)(v49 + 16);
  *((_DWORD *)this + 9026) = 0;
  *((void *)this + 4514) = 0;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 28624), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 28624));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 28776), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 28776));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 30688), 4);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 32496), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 32496));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 33616), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 33616));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 33616), 4);
  OZChannel::setMin((OZChannel *)((char *)this + 31680), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 32648), 1.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 32648), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 33464), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 33464), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 33464), 100.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 33056), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 33056), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 33056), 100.0);
  OZChannel::setMin((OZChannel *)this + 223, -1.0);
  OZChannel::setMin((OZChannel *)this + 224, -1.0);
  OZChannel::setMin((OZChannel *)this + 226, 0.0);
  OZChannel::setMax((OZChannel *)this + 226, 1.0);
  OZChannel::setSliderMin((OZChannel *)this + 226, 0.0);
  OZChannel::setSliderMax((OZChannel *)this + 226, 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 31072), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 31072), 20.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 31224), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 31224), 20.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 29208), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 29208), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 29208), 100.0);
  OZChannel::setMin((OZChannel *)((char *)this + 29616), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 29616), 10.0);
  *((unsigned char *)this + 36048) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 35472), MEMORY[0x1E4F1FA48], 0.0) == 1;
  *((unsigned char *)this + 768) = 0;
}

void sub_1B765F910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, OZChannelEnum *a12, OZChannelPercent *a13, OZChannelBool *a14, OZChannel *a15, OZChannelEnum *a16, OZChannel *a17, OZChannelPercent *a18, OZChannelEnum *a19, OZChannelEnum *a20,OZChannelEnum *a21,OZChannel *a22,OZChannelEnum *a23,OZChannelBool *a24,OZChannelBool *a25,OZChannelEnum *a26,OZChannelEnum *a27,OZChannel *a28,OZChannelEnum *a29,OZChannelEnum *a30,OZChannelEnum *a31,OZChannelBool *a32,OZChannelFolder *a33,OZChannelEnum *a34,OZChannelEnum *a35,TXSequenceChannels *a36,OZLocking *a37)
{
  PCString::~PCString((PCString *)(v43 - 96));
  OZChannelBool::~OZChannelBool(v42);
  OZChannelEnum::~OZChannelEnum(v40);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChannelPercent::~OZChannelPercent(a13);
  OZChannelBool::~OZChannelBool(a14);
  OZChannel::~OZChannel(a15);
  OZChannelEnum::~OZChannelEnum(a16);
  OZChannel::~OZChannel(v41);
  OZChannel::~OZChannel(a17);
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v43 - 216));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v43 - 208));
  OZChannelPercent::~OZChannelPercent(a18);
  OZChannelFolder::~OZChannelFolder(v38);
  OZChannel::~OZChannel(*(OZChannel **)(v43 - 136));
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannel::~OZChannel(*(OZChannel **)(v43 - 128));
  OZChannelEnum::~OZChannelEnum(a20);
  OZChannel::~OZChannel(*(OZChannel **)(v43 - 192));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v43 - 168));
  OZChannelEnum::~OZChannelEnum(a21);
  OZChannel::~OZChannel(a22);
  OZChannelEnum::~OZChannelEnum(a23);
  OZChannel::~OZChannel(*(OZChannel **)(v43 - 200));
  OZChannelBool::~OZChannelBool(a24);
  OZChannelBool::~OZChannelBool(a25);
  OZChannel::~OZChannel(*(OZChannel **)(v43 - 184));
  OZChannel::~OZChannel(*(OZChannel **)(v43 - 176));
  OZChannelEnum::~OZChannelEnum(a26);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v43 - 112));
  OZChannelEnum::~OZChannelEnum(a27);
  OZChannel::~OZChannel(a28);
  OZChannelEnum::~OZChannelEnum(a29);
  OZChannelEnum::~OZChannelEnum(a30);
  OZChannel::~OZChannel(*(OZChannel **)(v43 - 160));
  OZChannelEnum::~OZChannelEnum(a31);
  OZChannel::~OZChannel(*(OZChannel **)(v43 - 120));
  OZChannelBool::~OZChannelBool(a32);
  OZChannelFolder::~OZChannelFolder(a33);
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v43 - 152));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v43 - 144));
  OZChannelEnum::~OZChannelEnum(a34);
  OZChannelEnum::~OZChannelEnum(a35);
  OZChannelFolder::~OZChannelFolder(v39);
  TXSequenceChannels::~TXSequenceChannels(a36);
  unsigned int v44 = (void *)*((void *)v37 + 93);
  if (v44)
  {
    *((void *)v37 + 94) = v44;
    operator delete(v44);
  }
  OZLocking::~OZLocking(a37);
  TXTextBehavior::~TXTextBehavior(v37);
  _Unwind_Resume(a1);
}

void OZLocking::~OZLocking(OZLocking *this)
{
  *(void *)this = &unk_1F10BC940;
  uint64_t v1 = (std::mutex *)((char *)this + 8);
  PCMutex::~PCMutex((PCMutex *)((char *)this + 128));
  PCSharedMutex::~PCSharedMutex(v1);
}

void TXSequenceBehavior::TXSequenceBehavior(TXSequenceBehavior *this, const TXSequenceBehavior *a2, char a3)
{
  TXTextBehavior::TXTextBehavior(this, a2, a3);
  *(void *)(v5 + 536) = &unk_1F10BC8E0;
  OZLocking::OZLocking((OZLocking *)(v5 + 544));
  *(void *)this = &unk_1F10BC0C0;
  *((void *)this + 2) = &unk_1F10BC400;
  *((void *)this + 6) = &unk_1F10BC658;
  *((void *)this + 42) = &unk_1F10BC6B0;
  *((void *)this + 67) = &unk_1F10BC6D8;
  *((void *)this + 68) = &unk_1F10BC738;
  *((void *)this + 93) = 0;
  *((void *)this + 95) = 0;
  *((void *)this + 94) = 0;
  *((unsigned char *)this + 796) = 0;
  *((void *)this + 101) = *((void *)a2 + 101);
  TXSequenceChannels::TXSequenceChannels((TXSequenceBehavior *)((char *)this + 816), (const TXSequenceBehavior *)((char *)a2 + 816), (OZChannelFolder *)((char *)this + 56));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 27984), (const OZChannelFolder *)((char *)a2 + 27984), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 28112), (const TXSequenceBehavior *)((char *)a2 + 28112), (OZChannelFolder *)((char *)this + 27984));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 28368), (const TXSequenceBehavior *)((char *)a2 + 28368), (OZChannelFolder *)((char *)this + 27984));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28624), (const OZChannelBase *)((char *)a2 + 28624), (OZChannelFolder *)((char *)this + 27984));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28776), (const OZChannelBase *)((char *)a2 + 28776), (OZChannelFolder *)((char *)this + 27984));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 28928), (const OZChannelFolder *)((char *)a2 + 28928), (OZChannelFolder *)((char *)this + 27984));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29056), (const OZChannelBase *)((char *)a2 + 29056), (OZChannelFolder *)((char *)this + 28928));
  OZChannel::OZChannel((OZChannel *)((char *)this + 29208), (const OZChannelBase *)((char *)a2 + 29208), (OZChannelFolder *)((char *)this + 28928));
  *((void *)this + 3651) = &unk_1F1101490;
  *((void *)this + 3653) = &unk_1F11017F0;
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 29360), (const TXSequenceBehavior *)((char *)a2 + 29360), (OZChannelFolder *)((char *)this + 28928));
  OZChannel::OZChannel((OZChannel *)((char *)this + 29616), (const OZChannelBase *)((char *)a2 + 29616), (OZChannelFolder *)((char *)this + 28928));
  *((void *)this + 3702) = &unk_1F1101490;
  *((void *)this + 3704) = &unk_1F11017F0;
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 29768), (const TXSequenceBehavior *)((char *)a2 + 29768), (OZChannelFolder *)((char *)this + 28928));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 30024), (const TXSequenceBehavior *)((char *)a2 + 30024), (OZChannelFolder *)((char *)this + 28928));
  OZChannel::OZChannel((OZChannel *)((char *)this + 30280), (const OZChannelBase *)((char *)a2 + 30280), (OZChannelFolder *)((char *)this + 28928));
  *((void *)this + 3785) = &unk_1F1101490;
  *((void *)this + 3787) = &unk_1F11017F0;
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 30432), (const TXSequenceBehavior *)((char *)a2 + 30432), (OZChannelFolder *)((char *)this + 27984));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 30688), (const OZChannelFolder *)((char *)a2 + 30688), (OZChannelFolder *)((char *)this + 27984));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 30816), (const TXSequenceBehavior *)((char *)a2 + 30816), (OZChannelFolder *)((char *)this + 30688));
  OZChannel::OZChannel((OZChannel *)((char *)this + 31072), (const OZChannelBase *)((char *)a2 + 31072), (OZChannelFolder *)((char *)this + 30688));
  *((void *)this + 3884) = &unk_1F1101490;
  *((void *)this + 3886) = &unk_1F11017F0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 31224), (const OZChannelBase *)((char *)a2 + 31224), (OZChannelFolder *)((char *)this + 30688));
  *((void *)this + 3903) = &unk_1F1101490;
  *((void *)this + 3905) = &unk_1F11017F0;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31376), (const OZChannelBase *)((char *)a2 + 31376), (OZChannelFolder *)((char *)this + 30688));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31528), (const OZChannelBase *)((char *)a2 + 31528), (OZChannelFolder *)((char *)this + 30688));
  OZChannel::OZChannel((OZChannel *)((char *)this + 31680), (const OZChannelBase *)((char *)a2 + 31680), (OZChannelFolder *)((char *)this + 27984));
  *((void *)this + 3960) = &unk_1F1100CF0;
  *((void *)this + 3962) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 31832), (const TXSequenceBehavior *)((char *)a2 + 31832), (OZChannelFolder *)((char *)this + 27984));
  OZChannel::OZChannel((OZChannel *)((char *)this + 32088), (const OZChannelBase *)((char *)a2 + 32088), (OZChannelFolder *)((char *)this + 27984));
  *((void *)this + 4011) = &unk_1F1102B70;
  *((void *)this + 4013) = &unk_1F1102ED0;
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 32240), (const TXSequenceBehavior *)((char *)a2 + 32240), (OZChannelFolder *)((char *)this + 27984));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 32496), (const OZChannelBase *)((char *)a2 + 32496), (OZChannelFolder *)((char *)this + 27984));
  OZChannel::OZChannel((OZChannel *)((char *)this + 32648), (const OZChannelBase *)((char *)a2 + 32648), (OZChannelFolder *)((char *)this + 27984));
  *((void *)this + 4081) = &unk_1F1100CF0;
  *((void *)this + 4083) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 32800), (const TXSequenceBehavior *)((char *)a2 + 32800), (OZChannelFolder *)((char *)this + 27984));
  OZChannel::OZChannel((OZChannel *)((char *)this + 33056), (const OZChannelBase *)((char *)a2 + 33056), (OZChannelFolder *)((char *)this + 27984));
  void *v6 = &unk_1F1101490;
  v6[2] = &unk_1F11017F0;
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 33208), (const TXSequenceBehavior *)((char *)a2 + 33208), (OZChannelFolder *)((char *)this + 27984));
  OZChannel::OZChannel((OZChannel *)((char *)this + 33464), (const OZChannelBase *)((char *)a2 + 33464), (OZChannelFolder *)((char *)this + 27984));
  *((void *)this + 4183) = &unk_1F1101490;
  *((void *)this + 4185) = &unk_1F11017F0;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 33616), (const OZChannelFolder *)((char *)a2 + 33616), (OZChannelFolder *)((char *)this + 27984));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 222, (const OZChannelBase *)((char *)a2 + 33744), (OZChannelFolder *)((char *)this + 33616));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 223, (const OZChannelBase *)((char *)a2 + 33896), (OZChannelFolder *)((char *)this + 33616));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 224, (const OZChannelBase *)a2 + 304, (OZChannelFolder *)((char *)this + 33616));
  OZChannel::OZChannel((OZChannel *)this + 225, (const OZChannelBase *)((char *)a2 + 34200), (OZChannelFolder *)((char *)this + 33616));
  *((void *)this + 4275) = &unk_1F1100CF0;
  *((void *)this + 4277) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)this + 226, (const OZChannelBase *)((char *)a2 + 34352), (OZChannelFolder *)((char *)this + 33616));
  *((void *)this + 4294) = &unk_1F1100CF0;
  *((void *)this + 4296) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 34504), (const TXSequenceBehavior *)((char *)a2 + 34504), (OZChannelFolder *)((char *)this + 33616));
  OZChannel::OZChannel((OZChannel *)((char *)this + 34760), (const OZChannelBase *)((char *)a2 + 34760), (OZChannelFolder *)((char *)this + 33616));
  *((void *)this + 4345) = &unk_1F1102B70;
  *((void *)this + 4347) = &unk_1F1102ED0;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 34912), (const OZChannelBase *)((char *)a2 + 34912), (OZChannelFolder *)((char *)this + 27984));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 35064), (const OZChannelBase *)((char *)a2 + 35064), (OZChannelFolder *)((char *)this + 27984));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 35216), (const TXSequenceBehavior *)((char *)a2 + 35216), (OZChannelFolder *)((char *)this + 27984));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 35472), (const TXSequenceBehavior *)((char *)a2 + 35472), (OZChannelFolder *)((char *)this + 27984));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 35728), (const OZChannelBase *)a2 + 319, (OZChannelFolder *)((char *)this + 27984));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 35880), (const OZChannelBase *)((char *)a2 + 35880), (OZChannelFolder *)((char *)this + 27984));
  *((void *)this + 4504) = 0;
  *((_DWORD *)this + 9010) = 0;
  *((_DWORD *)this + 9011) = *((_DWORD *)a2 + 9011);
  *((unsigned char *)this + 36049) = *((unsigned char *)a2 + 36049);
  *((void *)this + 4508) = 0;
  *((void *)this + 4509) = 0;
  *((void *)this + 4507) = (char *)this + 36064;
  uint64_t v7 = MEMORY[0x1E4F1F9F8];
  *((_OWORD *)this + 2255) = *MEMORY[0x1E4F1F9F8];
  *((void *)this + 4512) = *(void *)(v7 + 16);
  *((_DWORD *)this + 9026) = 0;
  *((void *)this + 4514) = 0;
  *((unsigned char *)this + 36048) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 35472), MEMORY[0x1E4F1FA48], 0.0) == 1;
  TXSequenceBehavior::fixControlsFolderLocation(this);
  *((unsigned char *)this + 768) = 0;
}

void sub_1B766098C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, OZChannelEnum *a10, OZChannelPercent *a11, OZChannelBool *a12, OZChannelEnum *a13, OZChannel *a14, OZChannelPercent *a15, OZChannelPercent *a16, OZChannelPercent *a17, OZChannelEnum *a18, OZChannel *a19, OZChannelEnum *a20,OZChannel *a21,OZChannelPercent *a22,OZChannelEnum *a23,OZChannel *a24,OZChannelEnum *a25,OZChannel *a26,OZChannelBool *a27,OZChannelBool *a28,OZChannel *a29,OZChannel *a30,OZChannelEnum *a31,OZChannelFolder *a32,OZChannelEnum *a33,OZChannel *a34)
{
  OZChannelBool::~OZChannelBool(v38);
  OZChannelEnum::~OZChannelEnum(v41);
  OZChannelEnum::~OZChannelEnum(a10);
  OZChannelPercent::~OZChannelPercent(a11);
  OZChannelBool::~OZChannelBool(a12);
  OZChannel::~OZChannel(v40);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(v39);
  OZChannelPercent::~OZChannelPercent(a15);
  OZChannelPercent::~OZChannelPercent(a16);
  OZChannelPercent::~OZChannelPercent(a17);
  OZChannelFolder::~OZChannelFolder(v36);
  OZChannel::~OZChannel(v35);
  OZChannelEnum::~OZChannelEnum(a18);
  OZChannel::~OZChannel(a19);
  OZChannelEnum::~OZChannelEnum(a20);
  OZChannel::~OZChannel(a21);
  OZChannelPercent::~OZChannelPercent(a22);
  OZChannelEnum::~OZChannelEnum(a23);
  OZChannel::~OZChannel(a24);
  OZChannelEnum::~OZChannelEnum(a25);
  OZChannel::~OZChannel(a26);
  OZChannelBool::~OZChannelBool(a27);
  OZChannelBool::~OZChannelBool(a28);
  OZChannel::~OZChannel(a29);
  OZChannel::~OZChannel(a30);
  OZChannelEnum::~OZChannelEnum(a31);
  OZChannelFolder::~OZChannelFolder(a32);
  OZChannelEnum::~OZChannelEnum(a33);
  OZChannel::~OZChannel(a34);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v42 - 192));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v42 - 184));
  OZChannel::~OZChannel(*(OZChannel **)(v42 - 176));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v42 - 168));
  OZChannel::~OZChannel(*(OZChannel **)(v42 - 160));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v42 - 152));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v42 - 144));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v42 - 136));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v42 - 128));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v42 - 120));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v42 - 112));
  OZChannelFolder::~OZChannelFolder(v37);
  TXSequenceChannels::~TXSequenceChannels(*(TXSequenceChannels **)(v42 - 104));
  uint64_t v43 = (void *)*((void *)v34 + 93);
  if (v43)
  {
    *((void *)v34 + 94) = v43;
    operator delete(v43);
  }
  OZLocking::~OZLocking(*(OZLocking **)(v42 - 96));
  TXTextBehavior::~TXTextBehavior(v34);
  _Unwind_Resume(a1);
}

char *TXSequenceBehavior::fixControlsFolderLocation(TXSequenceBehavior *this)
{
  uint64_t result = (char *)(*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 312))(this);
  if (result)
  {
    char v2 = (OZChannelFolder *)result;
    Descendant = (OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)result, 201);
    uint64_t result = (char *)OZChannelFolder::getDescendant(v2, 1046);
    if (Descendant) {
      BOOL v4 = result == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      uint64_t v5 = (const OZChannelBase *)result;
      OZChannelFolder::removeDescendant(v2, Descendant);
      return OZChannelFolder::insertDescendantAfter(v2, v5, Descendant);
    }
  }
  return result;
}

void TXSequenceBehavior::~TXSequenceBehavior(TXSequenceBehavior *this)
{
  *(void *)this = &unk_1F10BC0C0;
  *((void *)this + 2) = &unk_1F10BC400;
  *((void *)this + 6) = &unk_1F10BC658;
  *((void *)this + 42) = &unk_1F10BC6B0;
  *((void *)this + 67) = &unk_1F10BC6D8;
  *((void *)this + 68) = &unk_1F10BC738;
  if (*((unsigned char *)this + 368))
  {
    uint64_t Scene = OZBehavior::getScene(this);
    if (Scene)
    {
      OZDocument::removeCPPObserver(*(void *)(Scene + 1584));
      *((unsigned char *)this + 368) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 4504);
  if (v3)
  {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8052888210);
    *((void *)this + 4504) = 0;
  }
  BOOL v4 = (uint64_t *)*((void *)this + 93);
  uint64_t v5 = (uint64_t *)*((void *)this + 94);
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = *v4;
      if (*v4)
      {
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v6 + 32, *(void **)(v6 + 40));
        MEMORY[0x1BA9BFBA0](v6, 0x1020C40A41566E0);
      }
      ++v4;
    }
    while (v4 != v5);
    BOOL v4 = (uint64_t *)*((void *)this + 93);
  }
  *((void *)this + 94) = v4;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 36056, *((void **)this + 4508));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 35880));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 35728));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 35472));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 35216));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 35064));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 34912));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 34760));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 34504));
  OZChannel::~OZChannel((OZChannel *)this + 226);
  OZChannel::~OZChannel((OZChannel *)this + 225);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)this + 224);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)this + 223);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)this + 222);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 33616));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 33464));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 33208));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 33056));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 32800));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 32648));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 32496));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 32240));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 32088));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 31832));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 31680));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 31528));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 31376));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 31224));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 31072));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 30816));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 30688));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 30432));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 30280));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 30024));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 29768));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 29616));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 29360));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 29208));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 29056));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 28928));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 28776));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 28624));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 28368));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 28112));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 27984));
  TXSequenceChannels::~TXSequenceChannels((TXSequenceBehavior *)((char *)this + 816));
  uint64_t v7 = (void *)*((void *)this + 93);
  if (v7)
  {
    *((void *)this + 94) = v7;
    operator delete(v7);
  }
  *((void *)this + 68) = &unk_1F10BC940;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 672));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 552));

  TXTextBehavior::~TXTextBehavior(this);
}

{
  uint64_t vars8;

  TXSequenceBehavior::~TXSequenceBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'TXSequenceBehavior::~TXSequenceBehavior(TXSequenceBehavior *this)
{
}

{
  TXSequenceBehavior::~TXSequenceBehavior((TXSequenceBehavior *)((char *)this - 48));
}

{
  TXSequenceBehavior::~TXSequenceBehavior((TXSequenceBehavior *)((char *)this - 336));
}

{
  TXSequenceBehavior::~TXSequenceBehavior((TXSequenceBehavior *)((char *)this - 536));
}

{
  uint64_t vars8;

  TXSequenceBehavior::~TXSequenceBehavior((TXSequenceBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXSequenceBehavior::~TXSequenceBehavior((TXSequenceBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXSequenceBehavior::~TXSequenceBehavior((TXSequenceBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXSequenceBehavior::~TXSequenceBehavior((TXSequenceBehavior *)((char *)this - 536));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t TXSequenceBehavior::operator=(uint64_t *a1, const void *a2)
{
  TXTextBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  a1[101] = v4[101];
  TXSequenceChannels::operator=((uint64_t)(a1 + 102), (uint64_t)(v4 + 102));
  OZChannelBase::operator=((uint64_t)(a1 + 3514), (uint64_t)(v5 + 3514));
  OZChannelBase::operator=((uint64_t)(a1 + 3546), (uint64_t)(v5 + 3546));
  OZChannelBase::operator=((uint64_t)(a1 + 3578), (uint64_t)(v5 + 3578));
  OZChannelBase::operator=((uint64_t)(a1 + 3597), (uint64_t)(v5 + 3597));
  OZChannelBase::operator=((uint64_t)(a1 + 3632), (uint64_t)(v5 + 3632));
  OZChannelBase::operator=((uint64_t)(a1 + 3651), (uint64_t)(v5 + 3651));
  OZChannelBase::operator=((uint64_t)(a1 + 3670), (uint64_t)(v5 + 3670));
  OZChannelBase::operator=((uint64_t)(a1 + 3721), (uint64_t)(v5 + 3721));
  OZChannelBase::operator=((uint64_t)(a1 + 3702), (uint64_t)(v5 + 3702));
  OZChannelBase::operator=((uint64_t)(a1 + 3753), (uint64_t)(v5 + 3753));
  OZChannelBase::operator=((uint64_t)(a1 + 3785), (uint64_t)(v5 + 3785));
  OZChannelBase::operator=((uint64_t)(a1 + 3804), (uint64_t)(v5 + 3804));
  OZChannelBase::operator=((uint64_t)(a1 + 3960), (uint64_t)(v5 + 3960));
  OZChannelBase::operator=((uint64_t)(a1 + 3979), (uint64_t)(v5 + 3979));
  OZChannelBase::operator=((uint64_t)(a1 + 4011), (uint64_t)(v5 + 4011));
  OZChannelBase::operator=((uint64_t)(a1 + 4030), (uint64_t)(v5 + 4030));
  OZChannelBase::operator=((uint64_t)(a1 + 4062), (uint64_t)(v5 + 4062));
  OZChannelBase::operator=((uint64_t)(a1 + 4081), (uint64_t)(v5 + 4081));
  OZChannelBase::operator=((uint64_t)(a1 + 4100), (uint64_t)(v5 + 4100));
  OZChannelBase::operator=((uint64_t)(a1 + 4132), (uint64_t)(v5 + 4132));
  OZChannelBase::operator=((uint64_t)(a1 + 4151), (uint64_t)(v5 + 4151));
  OZChannelBase::operator=((uint64_t)(a1 + 4183), (uint64_t)(v5 + 4183));
  OZChannelFolder::operator=((uint64_t)(a1 + 4202));
  OZChannelBase::operator=((uint64_t)(a1 + 4218), (uint64_t)(v5 + 4218));
  OZChannelBase::operator=((uint64_t)(a1 + 4237), (uint64_t)(v5 + 4237));
  OZChannelBase::operator=((uint64_t)(a1 + 4256), (uint64_t)(v5 + 4256));
  OZChannelBase::operator=((uint64_t)(a1 + 4275), (uint64_t)(v5 + 4275));
  OZChannelBase::operator=((uint64_t)(a1 + 4294), (uint64_t)(v5 + 4294));
  OZChannelBase::operator=((uint64_t)(a1 + 4313), (uint64_t)(v5 + 4313));
  uint64_t result = OZChannelBase::operator=((uint64_t)(a1 + 4345), (uint64_t)(v5 + 4345));
  uint64_t v7 = (OZChannelBase **)a1[103];
  for (unint64_t i = (OZChannelBase **)a1[104]; v7 != i; ++v7)
  {
    PCSharedCount v9 = *v7;
    if (((*v7)->var7 & 0x1000) != 0)
    {
      CMTimeEpoch v12 = *(OZChannelBase ****)(result + 112);
      double v13 = *v12;
      double v14 = v12[1];
      while (v13 != v14)
      {
        double v15 = *v13;
        BOOL v16 = OZChannelBase::testFlag(*v13, 2);
        uint64_t v17 = *a1;
        if (v16) {
          uint64_t result = (*(uint64_t (**)(uint64_t *, OZChannelBase *))(v17 + 688))(a1, v15);
        }
        else {
          uint64_t result = (*(uint64_t (**)(uint64_t *, OZChannelBase *))(v17 + 680))(a1, v15);
        }
        ++v13;
      }
    }
    else
    {
      BOOL v10 = OZChannelBase::testFlag(*v7, 2);
      uint64_t v11 = *a1;
      if (v10) {
        uint64_t result = (*(uint64_t (**)(uint64_t *, OZChannelBase *))(v11 + 688))(a1, v9);
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t *, OZChannelBase *))(v11 + 680))(a1, v9);
      }
    }
  }
  return result;
}

BOOL TXSequenceBehavior::sequenceChannelsMatchTextSequenceChannels(TXSequenceBehavior *this)
{
  uint64_t v1 = *((void *)this + 101);
  uint64_t v2 = *(void *)(v1 + 25040);
  unint64_t v3 = (*(void *)(v1 + 25048) - v2) >> 3;
  uint64_t v4 = *((void *)this + 103);
  if (v3 != (*((void *)this + 104) - v4) >> 3) {
    return 0;
  }
  unsigned int v5 = 6;
  do
  {
    BOOL v6 = v3 == v5;
    if (v3 == v5) {
      break;
    }
    uint64_t v7 = v5;
    if (v3 <= v5) {
      goto LABEL_34;
    }
    uint64_t v8 = *(const void **)(v2 + 8 * v5);
    PCSharedCount v9 = v8
    BOOL v10 = *(const void **)(v4 + 8 * v7);
    if (!v10) {
      break;
    }
    if (!v11) {
      break;
    }
    CMTimeEpoch v12 = v11;
    if (v9[6] != v11[6]) {
      break;
    }
    double v13 = (void *)*((void *)v9 + 14);
    unint64_t v14 = v13 ? ((v13[1] - *v13) >> 3) : 0;
    double v15 = (void *)*((void *)v12 + 14);
    uint64_t v16 = v15 ? ((v15[1] - *v15) >> 3) : 0;
    if (v14 != v16) {
      break;
    }
    if (v14)
    {
      unint64_t v17 = 0;
      while ((uint64_t)(v13[1] - *v13) >> 3 != v17)
      {
        if (v17 >= (uint64_t)(v15[1] - *v15) >> 3) {
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        }
        BOOL v18 = *(_DWORD *)(*(void *)(*v13 + 8 * v17) + 24) == *(_DWORD *)(*(void *)(*v15 + 8 * v17) + 24);
        char v19 = v18;
        ++v17;
        if (!v18 || v17 >= v14) {
          goto LABEL_29;
        }
      }
LABEL_34:
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    }
    char v19 = 1;
LABEL_29:
    unsigned int v5 = v7 + 1;
  }
  while ((v19 & 1) != 0);
  return v6;
}

void TXSequenceBehavior::didAddToNode(TXSequenceBehavior *this, OZSceneNode *lpsrc)
{
  if (lpsrc)
  {
    *((void *)this + 101) = v4;
    if (v4)
    {
      TXSequenceChannels::removeTrackingChannel((TXSequenceBehavior *)((char *)this + 816), 1004);
      if (*((unsigned char *)this + 36049))
      {
        TXSequenceBehavior::sequenceChannelsMatchTextSequenceChannels(this);
      }
      else
      {
        uint64_t v5 = *(void *)(*((void *)this + 101) + 19352);
        uint64_t v6 = *(void *)(v5 + 16);
        uint64_t v7 = *(std::__shared_weak_count **)(v5 + 24);
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = *(OZMaterialBase ***)(v6 + 480);
        PCSharedCount v9 = *(OZMaterialBase ***)(v6 + 488);
        while (v8 != v9)
          TXSequenceChannels::addMaterialChannels((TXSequenceBehavior *)((char *)this + 816), *v8++, ((*((void *)this + 104) - *((void *)this + 103)) >> 3) - 6);
        *((unsigned char *)this + 36049) = 1;
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
      }
      OZChannelBehavior::didAddToNode(this, lpsrc);
      TXSequenceBehavior::sequenceBehaviorDidLoad((uint64_t)this);
      if (!*((unsigned char *)this + 368))
      {
        uint64_t v10 = (*(uint64_t (**)(OZSceneNode *))(*(void *)lpsrc + 272))(lpsrc);
        if (v10)
        {
          OZDocument::addCPPObserver(*(void *)(v10 + 1584), (uint64_t)this + 336, 1001);
          *((unsigned char *)this + 368) = 1;
        }
      }
      TXSequenceBehavior::updateUnitsChannel(this);
      uint64_t v11 = (OZScene *)(*(uint64_t (**)(OZSceneNode *))(*(void *)lpsrc + 272))(lpsrc);
      TXSequenceBehavior::setUpDefaultCustomSpeed(this, v11);
    }
  }
  else
  {
    *((void *)this + 101) = 0;
  }
}

void sub_1B7661A88(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TXSequenceBehavior::sequenceBehaviorDidLoad(uint64_t this)
{
  uint64_t v1 = *(OZChannelBase ***)(this + 824);
  uint64_t v2 = *(OZChannelBase ***)(this + 832);
  if (v1 != v2)
  {
    uint64_t v3 = this;
    do
    {
      uint64_t v4 = *v1;
      if (((*v1)->var7 & 0x1000) != 0)
      {
        this = TXSequenceBehavior::attachDescendantSequencedChannels(v3, v5);
      }
      else
      {
        this = OZChannelBase::testFlag(*v1, 2);
        if ((this & 1) == 0) {
          this = (*(uint64_t (**)(uint64_t, OZChannelBase *))(*(void *)v3 + 680))(v3, v4);
        }
      }
      ++v1;
    }
    while (v1 != v2);
  }
  return this;
}

char *TXSequenceBehavior::updateUnitsChannel(TXSequenceBehavior *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 29056), MEMORY[0x1E4F1FA48], 0.0) == 1)
  {
    PCString::PCString((PCString *)&v4, "Word;Line;Block;All");
    uint64_t v2 = (PCString *)((char *)this + 28368);
    OZChannelEnum::setStrings(v2, (PCString *)&v4, 1);
    PCString::~PCString((PCString *)&v4);
    long long v4 = xmmword_1B7E7AC30;
    return OZChannelEnum::setTags((OZChannelEnum *)v2, (char *)&v4, 4);
  }
  else
  {
    if (theApp && *(void *)(theApp + 72))
    {
      PCURL::PCURL((PCURL *)&v4, @"Text Sequence Behavior Units Enum");
      OZChannelEnum::setStrings((const PCString *)this + 3546, (PCString *)&v4, 1);
    }
    else
    {
      PCString::PCString((PCString *)&v4, "Character;Character (without spaces);Word;Line;All;Custom");
      OZChannelEnum::setStrings((const PCString *)this + 3546, (PCString *)&v4, 1);
    }
    PCString::~PCString((PCString *)&v4);
    uint64_t v5 = 0x500000004;
    long long v4 = xmmword_1B7E7AC6C;
    return OZChannelEnum::setTags((TXSequenceBehavior *)((char *)this + 28368), (char *)&v4, 6);
  }
}

void sub_1B7661D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
}

void TXSequenceBehavior::setUpDefaultCustomSpeed(TXSequenceBehavior *this, OZScene *a2)
{
  (*(void (**)(CMTime *__return_ptr))(*(void *)this + 608))(&v10);
  if (a2)
  {
    CMTime time1 = v11;
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time1, &time2))
    {
      long long v4 = (OZChannel *)((char *)this + 32496);
      if (!OZChannel::getNumberOfKeyframes(v4))
      {
        OZChannel::getValueAsDouble(v4, MEMORY[0x1E4F1FA48], 0.0);
        if (v5 > -0.0000001 && v5 < 0.0000001)
        {
          CMTime time1 = v10;
          OZChannel::setKeyframe(v4, &time1, 0.0, 1);
          CMTime time1 = v10;
          CMTime time2 = v11;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v8);
          OZSceneSettings::getFrameDuration((OZScene *)((char *)a2 + 336), &v6);
          CMTime time1 = v8;
          *(__n128 *)&time2.CMTimeValue value = v6;
          time2.CMTimeEpoch epoch = v7;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v9);
          OZChannel::setKeyframe(v4, &v9, 100.0, 1);
        }
      }
    }
  }
}

void TXSequenceBehavior::willRemove(TXSequenceBehavior *this)
{
  if (*((unsigned char *)this + 368))
  {
    uint64_t v2 = (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
    if (v2)
    {
      OZDocument::removeCPPObserver(*(void *)(v2 + 1584));
      *((unsigned char *)this + 368) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 101);
  long long v4 = *(const void ***)(v3 + 25040);
  for (unint64_t i = *(const void ***)(v3 + 25048); v4 != i; ++v4)
  {
    if ((*((unsigned char *)*v4 + 57) & 0x10) != 0)
    {
      if (v6)
      {
        CMTimeEpoch v7 = *v6;
        CMTime v8 = v6[1];
        while (v7 != v8)
        {
          uint64_t v9 = *v7++;
          (*(void (**)(TXSequenceBehavior *, uint64_t))(*(void *)this + 688))(this, v9);
        }
      }
    }
    else
    {
      (*(void (**)(TXSequenceBehavior *))(*(void *)this + 688))(this);
    }
  }
  OZChannelBehavior::clearChannels(this);
  OZChannelBehavior::willRemove(this);
  CMTime v10 = (TXParagraphStyle ***)*((void *)this + 101);

  TXTextLayout::setAllParagraphsDirty(v10);
}

uint64_t TXSequenceBehavior::willRemoveSceneNodeFromScene(TXSequenceBehavior *this, OZScene *a2)
{
  uint64_t result = OZChannelBehavior::willRemoveSceneNodeFromScene((uint64_t)this, a2);
  if (*((unsigned char *)this + 368))
  {
    uint64_t result = (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
    if (result)
    {
      uint64_t result = OZDocument::removeCPPObserver(*(void *)(result + 1584));
      *((unsigned char *)this + 368) = 0;
    }
  }
  return result;
}

void TXSequenceBehavior::dirty(TXSequenceBehavior *this)
{
  uint64_t v2 = (char *)this + 36056;
  OZBehavior::dirty(this);
  uint64_t v3 = (OZLockingGroup *)Li3DEngineScene::sceneManager((TXSequenceBehavior *)((char *)this + 544));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v5, v3);
  *((unsigned char *)this + 796) = 0;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v2, *((void **)v2 + 1));
  *(void *)uint64_t v2 = v2 + 8;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  *((_OWORD *)this + 2255) = *MEMORY[0x1E4F1F9F8];
  *((void *)this + 4512) = *(void *)(v4 + 16);
  *((_DWORD *)v2 + 12) = 0;
  *((void *)v2 + 7) = 0;
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v5);
}

void non-virtual thunk to'TXSequenceBehavior::dirty(TXSequenceBehavior *this)
{
}

uint64_t TXSequenceBehavior::attachDescendantSequencedChannels(uint64_t this, OZChannelFolder *a2)
{
  uint64_t v2 = (OZChannelBase ***)*((void *)a2 + 14);
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      double v5 = (TXSequenceBehavior *)this;
      do
      {
        __n128 v6 = *v3;
        this = OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0)
        {
          if (v6)
          {
            if (v7)
            {
              CMTime v8 = v7;
              uint64_t v9 = (const void ***)*((void *)v7 + 14);
              if (v9)
              {
                CMTime v10 = *v9;
                CMTime v11 = v9[1];
                while (v10 != v11)
                {
                  if (*v10
                  {
                    this = TXSequenceBehavior::attachDescendantSequencedChannels(v5, v8);
                    goto LABEL_14;
                  }
                  ++v10;
                }
              }
            }
          }
          this = (*(uint64_t (**)(TXSequenceBehavior *, OZChannelBase *))(*(void *)v5 + 680))(v5, v6);
        }
LABEL_14:
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

uint64_t TXSequenceBehavior::isRebuildUIChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  BOOL v2 = (OZChannelBase *)((char *)this + 30816) == a2 || (OZChannelBase *)((char *)this + 29056) == a2;
  int v3 = (OZChannelBase *)((char *)this + 32240) == a2 || v2;
  if ((OZChannelBase *)((char *)this + 28112) == a2) {
    int v4 = 1;
  }
  else {
    int v4 = v3;
  }
  if ((OZChannelBase *)((char *)this + 28368) == a2) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = v4;
  }
  if ((OZChannelBase *)((char *)this + 31832) == a2) {
    return 1;
  }
  else {
    return v5;
  }
}

uint64_t TXSequenceBehavior::updateMaterialSequenceChannelFlags(TXSequenceBehavior *this)
{
  uint64_t result = *((void *)this + 101);
  if (result)
  {
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)result + 296))(result);
    int v4 = *(void (**)(char *, uint64_t, uint64_t))(*((void *)this + 547) + 104);
    if (v3)
    {
      v4((char *)this + 4376, 0, 1);
      (*(void (**)(char *, uint64_t, uint64_t))(*((void *)this + 547) + 96))((char *)this + 4376, 1, 1);
      (*(void (**)(char *, void, uint64_t))(*((void *)this + 1151) + 104))((char *)this + 9208, 0, 1);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*((void *)this + 1151) + 96))((char *)this + 9208, 1, 1);
      if (((*((void *)this + 104) - *((void *)this + 103)) & 0x7FFFFFFF8) != 0x30)
      {
        unsigned int v5 = 0;
        do
        {
          __n128 v6 = TXSequenceChannels::materialSequenceFolder((TXSequenceBehavior *)((char *)this + 816), v5);
          (*(void (**)(void *, uint64_t, uint64_t))(*(void *)v6 + 104))(v6, 1, 1);
          CMTimeEpoch v7 = TXSequenceChannels::materialSequenceFolder((TXSequenceBehavior *)((char *)this + 816), v5);
          uint64_t result = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)v7 + 96))(v7, 0, 1);
          ++v5;
        }
        while (v5 < ((*((void *)this + 104) - *((void *)this + 103)) >> 3) - 6);
      }
    }
    else
    {
      v4((char *)this + 4376, 1, 1);
      (*(void (**)(char *, void, uint64_t))(*((void *)this + 547) + 96))((char *)this + 4376, 0, 1);
      (*(void (**)(char *, uint64_t, uint64_t))(*((void *)this + 1151) + 104))((char *)this + 9208, 1, 1);
      uint64_t result = (*(uint64_t (**)(char *, void, uint64_t))(*((void *)this + 1151) + 96))((char *)this + 9208, 0, 1);
      if (((*((void *)this + 104) - *((void *)this + 103)) & 0x7FFFFFFF8) != 0x30)
      {
        unsigned int v8 = 0;
        do
        {
          uint64_t v9 = TXSequenceChannels::materialSequenceFolder((TXSequenceBehavior *)((char *)this + 816), v8);
          (*(void (**)(void *, void, uint64_t))(*(void *)v9 + 104))(v9, 0, 1);
          CMTime v10 = TXSequenceChannels::materialSequenceFolder((TXSequenceBehavior *)((char *)this + 816), v8);
          uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 96))(v10, 1, 1);
          ++v8;
        }
        while (v8 < ((*((void *)this + 104) - *((void *)this + 103)) >> 3) - 6);
      }
    }
  }
  return result;
}

OZChannelBase *TXSequenceBehavior::updateHiddenFlags(uint64_t a1)
{
  TXSequenceBehavior::updateMaterialSequenceChannelFlags((TXSequenceBehavior *)a1);
  BOOL v2 = (OZChannel *)(a1 + 28368);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 28368), MEMORY[0x1E4F1FA48], 0.0);
  int v4 = (OZChannelBase *)(a1 + 28624);
  if (ValueAsInt == 5)
  {
    OZChannelBase::resetFlag(v4, 4194306, 1);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 28776), 4194306, 1);
  }
  else
  {
    OZChannelBase::setFlag(v4, 4194306, 1);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 28776), 4194306, 1);
  }
  int v5 = OZChannel::getValueAsInt((OZChannel *)(a1 + 28368), MEMORY[0x1E4F1FA48], 0.0);
  __n128 v6 = (OZChannelBase *)(a1 + 30688);
  if (v5 == 5) {
    OZChannelBase::setFlag(v6, 4194306, 1);
  }
  else {
    OZChannelBase::resetFlag(v6, 4194306, 1);
  }
  CMTimeEpoch v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
  BOOL v8 = OZChannel::getValueAsInt((OZChannel *)(a1 + 30816), MEMORY[0x1E4F1FA48], 0.0) != 0;
  OZChannelBase::enable((OZChannelBase *)(a1 + 31072), v8, 0);
  OZChannelBase::enable((OZChannelBase *)(a1 + 31224), v8, 0);
  OZChannelBase::enable((OZChannelBase *)(a1 + 31376), v8, 0);
  OZChannelBase::enable((OZChannelBase *)(a1 + 31528), v8, 0);
  uint64_t v9 = (OZChannelBase *)(a1 + 31832);
  int v10 = OZChannel::getValueAsInt((OZChannel *)(a1 + 31832), v7, 0.0);
  CMTime v11 = (OZChannelBase *)(a1 + 32088);
  if (v10 == 4) {
    OZChannelBase::resetFlag(v11, 4194306, 1);
  }
  else {
    OZChannelBase::setFlag(v11, 4194306, 1);
  }
  int v12 = OZChannel::getValueAsInt((OZChannel *)(a1 + 32240), MEMORY[0x1E4F1FA48], 0.0);
  double v13 = (OZChannelBase *)(a1 + 32496);
  if (v12 == 6) {
    OZChannelBase::resetFlag(v13, 4194306, 1);
  }
  else {
    OZChannelBase::setFlag(v13, 4194306, 1);
  }
  int v14 = OZChannel::getValueAsInt((OZChannel *)(a1 + 28112), MEMORY[0x1E4F1FA48], 0.0);
  double v15 = (OZChannelBase *)(a1 + 33896);
  if (v14 == 4)
  {
    OZChannelBase::setFlag(v15, 4194306, 1);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 34048), 4194306, 1);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 34200), 4194306, 1);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 34504), 4194306, 1);
  }
  else
  {
    OZChannelBase::resetFlag(v15, 4194306, 1);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 34048), 4194306, 1);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 34200), 4194306, 1);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 34504), 4194306, 1);
  }
  int v16 = OZChannel::getValueAsInt((OZChannel *)(a1 + 29056), MEMORY[0x1E4F1FA48], 0.0);
  unint64_t v17 = (OZChannelBase *)(a1 + 31680);
  BOOL v18 = (OZChannelBase *)(a1 + 32648);
  char v19 = (OZChannelBase *)(a1 + 32800);
  uint64_t v20 = (OZChannelBase *)(a1 + 33208);
  uint64_t v21 = (OZChannelBase *)(a1 + 33464);
  uint64_t v22 = (OZChannelBase *)(a1 + 29208);
  uint64_t v23 = (OZChannelBase *)(a1 + 29360);
  uint64_t v24 = (OZChannelBase *)(a1 + 29616);
  uint64_t v25 = (OZChannelBase *)(a1 + 30024);
  if (v16 == 1)
  {
    OZChannelBase::setFlag(v17, 4194306, 1);
    OZChannelBase::setFlag(v9, 4194306, 1);
    OZChannelBase::setFlag(v18, 4194306, 1);
    OZChannelBase::setFlag(v19, 4194306, 1);
    OZChannelBase::setFlag(v20, 4194306, 1);
    OZChannelBase::setFlag(v21, 4194306, 1);
    OZChannelBase::resetFlag(v22, 4194306, 1);
    OZChannelBase::resetFlag(v23, 4194306, 1);
    OZChannelBase::resetFlag(v24, 4194306, 1);
    OZChannelBase::resetFlag(v25, 4194306, 1);
    if (OZChannel::getValueAsInt(v2, MEMORY[0x1E4F1FA48], 0.0) == 6)
    {
      OZChannelBase::enable(v23, 0, 0);
      double v26 = v24;
      int v27 = 0;
    }
    else
    {
      OZChannelBase::enable(v23, 1, 0);
      double v26 = v24;
      int v27 = 1;
    }
    return OZChannelBase::enable(v26, v27, 0);
  }
  else
  {
    OZChannelBase::resetFlag(v17, 4194306, 1);
    OZChannelBase::resetFlag(v9, 4194306, 1);
    OZChannelBase::resetFlag(v18, 4194306, 1);
    OZChannelBase::resetFlag(v19, 4194306, 1);
    OZChannelBase::resetFlag(v20, 4194306, 1);
    OZChannelBase::resetFlag(v21, 4194306, 1);
    OZChannelBase::setFlag(v22, 4194306, 1);
    OZChannelBase::setFlag(v23, 4194306, 1);
    OZChannelBase::setFlag(v24, 4194306, 1);
    return OZChannelBase::resetFlag(v25, 4194306, 1);
  }
}

uint64_t TXSequenceBehavior::getUnitSize(TXSequenceBehavior *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E4F1FA48], 0.0);
}

uint64_t TXSequenceBehavior::shouldRenumberChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t non-virtual thunk to'TXSequenceBehavior::shouldRenumberChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t TXSequenceBehavior::addCurveNodes(TXSequenceBehavior *this, OZChannelBase *a2, OZChannelBase *a3)
{
  if ((a2->var7 & 0x1000) == 0)
  {
    if (a3) {
    operator new();
    }
  }
  BOOL v8 = (OZChannelBase ***)v6[14];
  uint64_t v9 = (OZChannelBase ***)v7[14];
  if (v8) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    CMTime v11 = *v8;
    if (*v8 != v8[1])
    {
      int v12 = *v9;
      do
      {
        if (v12 == v9[1]) {
          break;
        }
        int v14 = *v11++;
        double v13 = v14;
        double v15 = *v12++;
        TXSequenceBehavior::addCurveNodes(this, v13, v15);
      }
      while (v11 != v8[1]);
    }
  }
  (*((void (**)(OZChannelBase *, uint64_t, void))a2->var0 + 13))(a2, 1, 0);
  var6 = a2->var6;
  if (var6)
  {
    (*(void (**)(OZChannelFolder *, uint64_t, void))(*(void *)var6 + 104))(var6, 1, 0);
    uint64_t v17 = *((void *)var6 + 6);
    if (v17
      && (unsigned int v18 = *(_DWORD *)(v17 + 24), (v18 - 2000) >> 6 <= 0x7C)
      && (long double v19 = (double)v18, v20 = MaterialSequenceIDIncrement(), fmod(v19, (double)v20) == 0.0))
    {
      uint64_t v21 = *((void *)var6 + 6);
      LODWORD(var6) = 1;
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v21 + 104))(v21, 1, 0);
    }
    else
    {
      LODWORD(var6) = 0;
    }
  }
  uint64_t result = (*((uint64_t (**)(OZChannelBase *, uint64_t, void))a3->var0 + 13))(a3, 1, 0);
  uint64_t v23 = a3->var6;
  if (v23)
  {
    uint64_t result = (*(uint64_t (**)(OZChannelFolder *, uint64_t, void))(*(void *)v23 + 104))(v23, 1, 0);
    if (var6)
    {
      uint64_t result = *((void *)v23 + 6);
      if (result)
      {
        uint64_t v24 = *(uint64_t (**)(void))(*(void *)result + 104);
        return v24();
      }
    }
  }
  return result;
}

void sub_1B7662FA8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40F7988963);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceBehavior::channelChildrenHaveProcessingNodes(TXSequenceBehavior *this, OZChannelFolder *a2)
{
  BOOL v2 = (const void ***)*((void *)a2 + 14);
  int v3 = *v2;
  int v4 = v2[1];
  if (*v2 == v4) {
    return 0;
  }
  while (1)
  {
    __n128 v6 = *v3;
    if (*v3)
    {
      if (!v7) {
        goto LABEL_7;
      }
      if (OZChannel::getNumberOfCurveProcessingNodes(v7)) {
        return 1;
      }
      __n128 v6 = *v3;
      if (*v3)
      {
LABEL_7:
        if (v8)
        {
          if (TXSequenceBehavior::channelChildrenHaveProcessingNodes(this, v8)) {
            return 1;
          }
        }
      }
    }
    if (++v3 == v4) {
      return 0;
    }
  }
}

uint64_t compareChannelsForRemoveCurveNodes(OZChannelBase *a1, OZChannelBase *a2, int a3)
{
  unsigned int var3 = a1->var3;
  unsigned int v5 = a2->var3;
  uint64_t result = var3 == v5;
  var6 = a1->var6;
  BOOL v8 = a2->var6;
  if (var6) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    BOOL v10 = *((_DWORD *)var6 + 6) == *((_DWORD *)v8 + 6) && var3 == v5;
    uint64_t result = v10;
    if (a3)
    {
      uint64_t v11 = *((void *)var6 + 6);
      uint64_t v12 = *((void *)v8 + 6);
      if (v11) {
        BOOL v13 = v12 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        if (*(_DWORD *)(v11 + 24) == *(_DWORD *)(v12 + 24)) {
          return result;
        }
        else {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t TXSequenceBehavior::removeCurveNodes(uint64_t this, OZChannelBase *a2)
{
  int v3 = (TXSequenceBehavior *)this;
  var6 = a2->var6;
  v6 = var6 && (uint64_t v5 = *((void *)var6 + 6)) != 0 && (*(_DWORD *)(v5 + 24) - 1035) < 4;
  uint64_t v7 = this + 344;
  uint64_t v8 = *(void *)(this + 352);
  if (v8 != this + 344)
  {
    do
    {
      uint64_t v9 = v8 + 8;
      uint64_t v8 = *(void *)(v8 + 8);
      this = *(void *)(v9 + 8);
      if (this)
      {
        if (this)
        {
          BOOL v10 = (void *)this;
          uint64_t v11 = *(OZChannelBase **)(this + 16);
          this = compareChannelsForRemoveCurveNodes(a2, v11, v6);
          if (this)
          {
            OZChannel::deleteCurveProcessingNode((OZChannel *)v11, v10);
            *(void *)&long long v16 = v10;
            std::list<OZBehaviorCurveNode *>::remove((uint64_t)v3 + 344, &v16);
            int NumberOfCurveProcessingNodes = OZChannel::getNumberOfCurveProcessingNodes((OZChannel *)v11);
            if (!NumberOfCurveProcessingNodes) {
              (*((void (**)(OZChannelBase *, void, void))v11->var0 + 13))(v11, 0, 0);
            }
            BOOL v13 = v11->var6;
            this = (*(uint64_t (**)(OZChannelFolder *))(*(void *)v13 + 120))(v13);
            if (!this) {
              goto LABEL_15;
            }
            if (!NumberOfCurveProcessingNodes) {
              this = (*(uint64_t (**)(OZChannelFolder *, void, void))(*(void *)v13 + 104))(v13, 0, 0);
            }
            BOOL v13 = (OZChannelFolder *)*((void *)v13 + 6);
            if (v13)
            {
LABEL_15:
              if ((TXSequenceBehavior::channelChildrenHaveProcessingNodes(v3, v13) & 1) == 0) {
                (*(void (**)(OZChannelFolder *, void, void))(*(void *)v13 + 104))(v13, 0, 0);
              }
              unint64_t v14 = *((void *)v13 + 1);
              long long v16 = xmmword_1B7E78290;
              this = OZFactory::isKindOfClass(v14, (int32x4_t *)&v16);
              if (this)
              {
                double v15 = (OZChannelFolder *)*((void *)v13 + 6);
                if (v15)
                {
                  this = TXSequenceBehavior::channelChildrenHaveProcessingNodes(v3, v15);
                  if ((this & 1) == 0) {
                    this = (*(uint64_t (**)(OZChannelFolder *, void, void))(*(void *)v15 + 104))(v15, 0, 0);
                  }
                }
              }
            }
          }
        }
      }
    }
    while (v8 != v7);
  }
  if (a2->var3 == 1031)
  {
    this = *((void *)v3 + 101);
    if (this)
    {
      *(unsigned char *)(this + 19321) = 1;
      return (*(uint64_t (**)(uint64_t))(*(void *)this + 544))(this);
    }
  }
  return this;
}

void *std::list<OZBehaviorCurveNode *>::remove(uint64_t a1, void *a2)
{
  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  BOOL v2 = *(void **)(a1 + 8);
  if (v2 != (void *)a1)
  {
    do
    {
      int v6 = (void *)v2[1];
      uint64_t v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (void *)a1)
        {
          BOOL v8 = 1;
LABEL_8:
          int v6 = (void *)a1;
        }
        else
        {
          while (1)
          {
            uint64_t v7 = v6[2];
            BOOL v8 = v7 == v5;
            if (v7 != v5) {
              break;
            }
            int v6 = (void *)v6[1];
            if (v6 == (void *)a1) {
              goto LABEL_8;
            }
          }
        }
        std::list<std::shared_ptr<TXTextStyle>>::splice((uint64_t)v10, v10, a1, v2, v6);
        if (!v8) {
          int v6 = (void *)v6[1];
        }
      }
      BOOL v2 = v6;
    }
    while (v6 != (void *)a1);
  }
  return std::__list_imp<unsigned int>::clear(v10);
}

void sub_1B76634CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

OZChannelBase *TXSequenceBehavior::isTextSequenceChannelEnabled(TXSequenceBehavior *this, int a2, int a3, int a4)
{
  uint64_t result = (OZChannelBase *)TXSequenceChannels::findChannel((TXSequenceBehavior *)((char *)this + 816), a2, a3, a4);
  if (result) {
    return (OZChannelBase *)!OZChannelBase::testFlag(result, 2);
  }
  return result;
}

uint64_t TXSequenceBehavior::isActiveAtTime(TXSequenceBehavior *this, CMTime *a2, BOOL a3, BOOL a4, int a5)
{
  CMTime v11 = *a2;
  unsigned int isActiveAtTime = OZBehavior::isActiveAtTime(this, &v11, a3, a4, a5);
  TXSequenceBehavior::getAnimationDuration(this, (uint64_t)&v10);
  OZBehavior::getFrameDuration(this, &v8);
  CMTime time1 = v10;
  *(__n128 *)&time2.CMTimeValue value = v8;
  time2.CMTimeEpoch epoch = v9;
  if (CMTimeCompare(&time1, &time2) > 0) {
    return isActiveAtTime;
  }
  else {
    return 0;
  }
}

void TXSequenceBehavior::getAnimationDuration(TXSequenceBehavior *this@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)this + 768))
  {
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 772);
    *(void *)(a2 + 16) = *(void *)((char *)this + 788);
  }
  else
  {
    (*(void (**)(void *__return_ptr, TXSequenceBehavior *))(*(void *)this + 608))(v11, this);
    CMTime v13 = v12;
    uint64_t v4 = (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), (__n128 *)&v9);
    uint64_t v5 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), MEMORY[0x1E4F1FA48], 0.0);
    double v7 = v6;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33464), v5, 0.0);
    operator*(&v9, &v10, v7 + v8);
    CMTime v15 = v13;
    CMTime v14 = v10;
    PC_CMTimeSaferSubtract(&v15, &v14, a2);
  }
}

uint64_t non-virtual thunk to'TXSequenceBehavior::isActiveAtTime(TXSequenceBehavior *this, CMTime *a2, BOOL a3, BOOL a4, int a5)
{
  return TXSequenceBehavior::isActiveAtTime((TXSequenceBehavior *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t TXSequenceBehavior::isActiveInTimeRange(TXSequenceBehavior *this, const PCTimeRange *a2, BOOL a3, BOOL a4, int a5)
{
  unsigned int isActiveInTimeRange = OZBehavior::isActiveInTimeRange(this, a2, a3, a4, a5);
  TXSequenceBehavior::getAnimationDuration(this, (uint64_t)&v10);
  OZBehavior::getFrameDuration(this, &v8);
  CMTime time1 = v10;
  *(__n128 *)&time2.CMTimeValue value = v8;
  time2.CMTimeEpoch epoch = v9;
  if (CMTimeCompare(&time1, &time2) > 0) {
    return isActiveInTimeRange;
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'TXSequenceBehavior::isActiveInTimeRange(TXSequenceBehavior *this, const PCTimeRange *a2, BOOL a3, BOOL a4, int a5)
{
  return TXSequenceBehavior::isActiveInTimeRange((TXSequenceBehavior *)((char *)this - 16), a2, a3, a4, a5);
}

const void *TXSequenceBehavior::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2, uint64_t a3)
{
  uint64_t result = (const void *)OZBehavior::markFactoriesForSerialization(this, a2);
  double v7 = (const void **)this[103];
  for (unint64_t i = (const void **)this[104]; v7 != i; ++v7)
  {
    uint64_t result = *v7;
    if (*v7)
    {
      if (result) {
        uint64_t result = (const void *)(*(uint64_t (**)(const void *, PCSerializerWriteStream *, uint64_t))(*(void *)result + 416))(result, a2, a3);
      }
    }
  }
  return result;
}

const void *non-virtual thunk to'TXSequenceBehavior::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2, uint64_t a3)
{
  return TXSequenceBehavior::markFactoriesForSerialization(this - 6, a2, a3);
}

uint64_t TXSequenceBehavior::parseBegin(TXSequenceBehavior *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 4u) {
    OZChannel::setValue((OZChannel *)((char *)this + 35728), MEMORY[0x1E4F1FA48], 0.0, 0);
  }
  if (PCSerializerReadStream::isLessThanVersion(a2, 5u, 7u)) {
    OZChannel::setValue((OZChannel *)((char *)this + 35880), MEMORY[0x1E4F1FA48], 0.0, 0);
  }

  return OZBehavior::parseBegin(this, a2);
}

uint64_t non-virtual thunk to'TXSequenceBehavior::parseBegin(TXSequenceBehavior *this, PCSerializerReadStream *a2)
{
  return TXSequenceBehavior::parseBegin((TXSequenceBehavior *)((char *)this - 48), a2);
}

uint64_t TXSequenceBehavior::parseEnd(TXSequenceBehavior *this, PCSerializerReadStream *a2)
{
  OZBehavior::parseEnd(this, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 34912), 4194306, 1);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 35064), 4194306, 1);
  if (!*((unsigned char *)this + 36049))
  {
    uint64_t v4 = (OZChannelBase ***)*((void *)this + 21);
    uint64_t v5 = *v4;
    double v6 = v4[1];
    if (*v4 != v6)
    {
      do
      {
        double v7 = *v5;
        unint64_t var1 = (unint64_t)(*v5)->var1;
        long long v11 = xmmword_1B7E7AC20;
        if (OZFactory::isKindOfClass(var1, (int32x4_t *)&v11)) {
          TXSequenceChannels::pushChannelIntoChannelList((TXSequenceBehavior *)((char *)this + 816), v7);
        }
        ++v5;
      }
      while (v5 != v6);
    }
    *((unsigned char *)this + 36049) = 1;
  }
  CMTimeEpoch v9 = (OZScene *)(*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
  TXSequenceBehavior::setUpDefaultCustomSpeed(this, v9);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 29056), MEMORY[0x1E4F1FA48], 0.0) == 1
    && PCSerializerReadStream::isLessThanVersion(a2, 5u, 9u))
  {
    TXSequenceBehavior::updateTranscriptionUnitsFromVersion5_8(this);
  }
  return 1;
}

void TXSequenceChannels::pushChannelIntoChannelList(TXSequenceChannels *this, OZChannelBase *a2)
{
  unint64_t v6 = *((void *)this + 3);
  uint64_t v4 = (char *)this + 24;
  unint64_t v5 = v6;
  double v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    CMTimeEpoch v9 = (void **)(v4 - 16);
    uint64_t v10 = *((void *)v4 - 2);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      CMTime v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v4, v14);
    }
    else {
      CMTime v15 = 0;
    }
    long long v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)long long v16 = a2;
    __n128 v8 = v16 + 8;
    long double v19 = (char *)*((void *)this + 1);
    unsigned int v18 = (char *)*((void *)this + 2);
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      unsigned int v18 = (char *)*v9;
    }
    *((void *)this + 1) = v16;
    *((void *)this + 2) = v8;
    *((void *)this + 3) = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v7 = a2;
    __n128 v8 = v7 + 1;
  }
  *((void *)this + 2) = v8;
}

uint64_t TXSequenceBehavior::updateTranscriptionUnitsFromVersion5_8(TXSequenceBehavior *this)
{
  uint64_t v1 = (OZChannel *)((char *)this + 28368);
  BOOL v2 = (const CMTime *)MEMORY[0x1E4F1FA48];
  unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E4F1FA48], 0.0);
  unsigned int v4 = ValueAsInt + 2;
  if (ValueAsInt >= 3) {
    unsigned int v4 = ValueAsInt;
  }

  return OZChannel::setValue(v1, v2, (double)v4, 0);
}

uint64_t non-virtual thunk to'TXSequenceBehavior::parseEnd(TXSequenceBehavior *this, PCSerializerReadStream *a2)
{
  return 1;
}

void TXSequenceBehavior::addChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  OZChannelBase::resetFlag(a2, 2, 0);
  for (unint64_t i = a2->var6; i; unint64_t i = (OZChannelFolder *)*((void *)i + 6))
    OZChannelBase::resetFlag((OZChannelBase *)i, 2, 0);
  unint64_t v5 = (const OZChannelBase *)(*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 312))(this);
  OZChannelRef::OZChannelRef((OZChannelRef *)v7, a2, v5);
  Channel = OZChannelRef::getChannel((OZChannelRef *)v7, (OZChannelBase *)(*((void *)this + 101) + 648));
  TXSequenceBehavior::addCurveNodes(this, a2, Channel);
  OZChannelRef::~OZChannelRef(v7);
}

void sub_1B7663C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceBehavior::hideParentAndRemoveChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  OZChannelBase::setFlag(a2, 2, 0);
  var6 = a2->var6;
  if (var6)
  {
    unint64_t v5 = (OZChannelBase ***)*((void *)var6 + 14);
    unint64_t v6 = *v5;
    double v7 = v5[1];
    while (v6 != v7)
    {
      if (!OZChannelBase::testFlag(*v6, 2)) {
        goto LABEL_10;
      }
      ++v6;
    }
    OZChannelBase::setFlag((OZChannelBase *)var6, 2, 0);
    uint64_t v8 = *((void *)var6 + 6);
    if (v8)
    {
      unsigned int v9 = *(_DWORD *)(v8 + 24);
      if ((v9 - 2000) >> 6 <= 0x7C)
      {
        long double v10 = (double)v9;
        unsigned int v11 = MaterialSequenceIDIncrement();
        if (fmod(v10, (double)v11) == 0.0) {
          (*(void (**)(TXSequenceBehavior *, OZChannelFolder *))(*(void *)this + 696))(this, var6);
        }
      }
    }
  }
LABEL_10:
  uint64_t v12 = *(uint64_t (**)(TXSequenceBehavior *, OZChannelBase *))(*(void *)this + 688);

  return v12(this, a2);
}

char *TXSequenceBehavior::addMaterial(TXSequenceBehavior *this, OZMaterialBase *a2, unsigned int a3)
{
  return AddMaterialToSequenceChannels((TXSequenceBehavior *)((char *)this + 816), a2, a3);
}

uint64_t TXSequenceBehavior::removeMaterial(TXSequenceBehavior *this, unsigned int a2)
{
  unint64_t v2 = a2 + 6;
  uint64_t v3 = *((void *)this + 103);
  if (v2 >= (*((void *)this + 104) - v3) >> 3) {
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v5 = (TXSequenceBehavior *)((char *)this + 816);
  (*(void (**)(TXSequenceBehavior *, void))(*(void *)this + 688))(this, *(void *)(v3 + 8 * v2));

  return RemoveMaterialFromSequenceChannels(v5, a2);
}

uint64_t TXSequenceBehavior::removeMaterialLayer(TXSequenceBehavior *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3 = a3 + 6;
  uint64_t v4 = *((void *)this + 103);
  if (v3 >= (*((void *)this + 104) - v4) >> 3) {
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v6 = *(void **)(*(void *)(v4 + 8 * v3) + 112);
  if (a2 >= (unint64_t)((uint64_t)(v6[1] - *v6) >> 3)) {
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v8 = (TXSequenceBehavior *)((char *)this + 816);
  (*(void (**)(TXSequenceBehavior *, void))(*(void *)this + 688))(this, *(void *)(*v6 + 8 * a2));

  return RemoveMaterialLayerFromSequenceChannels(v8, a2, a3);
}

void *TXSequenceBehavior::removeChannel(TXSequenceBehavior *this, OZChannelBase *lpsrc)
{
  if ((lpsrc->var7 & 0x1000) != 0)
  {
    uint64_t v4 = (uint64_t **)result[14];
    if (v4)
    {
      unint64_t v5 = *v4;
      unint64_t v6 = v4[1];
      while (v5 != v6)
      {
        uint64_t v7 = *v5++;
        uint64_t result = (void *)(*(uint64_t (**)(TXSequenceBehavior *, uint64_t))(*(void *)this + 688))(this, v7);
      }
    }
  }
  else
  {
    return (void *)TXSequenceBehavior::removeCurveNodes((uint64_t)this, lpsrc);
  }
  return result;
}

double TXSequenceBehavior::trapezoid(TXSequenceBehavior *this, double a2, double a3, double a4, double a5, double a6, int a7, double a8, double a9, double *a10)
{
  int v10 = a7;
  double v15 = a2;
  double v17 = 0.0;
  if (a2 <= a8 || (a7 & 1) == 0)
  {
    double v18 = a3 - a5;
    if (a3 - a5 <= a2)
    {
LABEL_8:
      if (v15 >= a3)
      {
        if (v15 <= a4)
        {
          if (a6 == 0.0) {
            char v29 = v10;
          }
          else {
            char v29 = 0;
          }
          double v17 = 1.0;
          if (v29)
          {
            TXSequenceBehavior::trapezoid(this, v15 + -1.0, a3, a4, a5, a6, 0, 1.0, 1.0, 0);
            if (v30 <= 0.0) {
              return 1.0;
            }
            else {
              return v30;
            }
          }
        }
        else
        {
          double v20 = a4 + a6;
          if (a4 + a6 >= v15)
          {
            if (a10 == 6)
            {
              if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 32800), MEMORY[0x1E4F1FA48], 0.0) == 1)
              {
                (*(void (**)(CMTime *__return_ptr, TXSequenceBehavior *))(*(void *)this + 608))(&v55, this);
                CMTime v51 = v56;
                double Seconds = CMTimeGetSeconds(&v51);
                double v22 = Seconds
                    / *(double *)((*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this) + 368);
                uint64_t v23 = (const CMTime *)MEMORY[0x1E4F1FA48];
                OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33464), MEMORY[0x1E4F1FA48], 0.0);
                double v25 = v22 - v24;
                OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), v23, 0.0);
                CustomSpeedDuratiouint64_t n = v25 - v26;
              }
              else
              {
                CustomSpeedDuratiouint64_t n = TXSequenceBehavior::getCustomSpeedDuration(this);
              }
              Float64 v48 = (v20 - v15) / (v20 - a4) * CustomSpeedDuration;
              memset(&v54, 0, sizeof(v54));
              uint64_t v49 = (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
              OZSceneSettings::getFrameDuration((OZSceneSettings *)(v49 + 336), (__n128 *)&v52);
              operator*(&v52, &v53, v48);
              (*(void (**)(CMTime *__return_ptr, TXSequenceBehavior *))(*(void *)this + 608))(&v55, this);
              CMTime v58 = v55;
              CMTime v59 = v53;
              PC_CMTimeSaferAdd(&v59, &v58, (uint64_t)&v54);
              OZChannel::getValueAsDouble((OZChannel *)((char *)this + 32496), &v54, 0.0);
            }
            else
            {
              double v47 = TXSequenceBehavior::computePosition(this, (int)a10, (v20 - v15) / (v20 - a4), a10);
            }
            double v17 = v47 + 0.0;
            if (v10)
            {
              TXSequenceBehavior::trapezoid(this, v15 + -1.0, a3, a4, a5, a6, 0, 1.0, 1.0, 0);
              if (v17 < v50) {
                return v50;
              }
            }
          }
        }
      }
      else
      {
        if (a10 == 6)
        {
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 32800), MEMORY[0x1E4F1FA48], 0.0) == 2)
          {
            double v19 = TXSequenceBehavior::getCustomSpeedDuration(this);
          }
          else
          {
            (*(void (**)(CMTime *__return_ptr, TXSequenceBehavior *))(*(void *)this + 608))(&v55, this);
            CMTime time = v56;
            double v31 = CMTimeGetSeconds(&time);
            double v32 = v31
                / *(double *)((*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this) + 368);
            uint64_t v33 = (const CMTime *)MEMORY[0x1E4F1FA48];
            OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33464), MEMORY[0x1E4F1FA48], 0.0);
            double v35 = v32 - v34;
            OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), v33, 0.0);
            double v19 = v35 - v36;
          }
          double v37 = (v15 - v18) / (a3 - v18);
          uint64_t v38 = (const CMTime *)MEMORY[0x1E4F1FA48];
          int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), MEMORY[0x1E4F1FA48], 0.0);
          double v40 = 1.0 - v37;
          if (ValueAsInt != 1) {
            double v40 = v37;
          }
          Float64 v41 = v19 * v40;
          memset(&v54, 0, sizeof(v54));
          uint64_t v42 = (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
          OZSceneSettings::getFrameDuration((OZSceneSettings *)(v42 + 336), (__n128 *)&v52);
          operator*(&v52, &v53, v41);
          (*(void (**)(CMTime *__return_ptr, TXSequenceBehavior *))(*(void *)this + 608))(&v55, this);
          CMTime v58 = v55;
          CMTime v59 = v53;
          PC_CMTimeSaferAdd(&v59, &v58, (uint64_t)&v54);
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 32496), &v54, 0.0);
          double v44 = v43;
          int v45 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), v38, 0.0);
          double v28 = 1.0 - v44;
          if (v45 != 1) {
            double v28 = v44;
          }
        }
        else
        {
          double v28 = TXSequenceBehavior::computePosition(this, (int)a10, (v15 - v18) / (a3 - v18), a10);
        }
        return v28 + 0.0;
      }
    }
    else
    {
      while (1)
      {
        double v15 = v15 + a9;
        if (v15 > a8 || (v10 & 1) == 0) {
          break;
        }
        int v10 = 1;
        if (v18 <= v15)
        {
          a10 = 0;
          goto LABEL_8;
        }
      }
    }
  }
  return v17;
}

Float64 TXSequenceBehavior::getCustomSpeedDuration(TXSequenceBehavior *this)
{
  unint64_t v2 = (OZChannel *)((char *)this + 32496);
  if (!OZChannel::getNumberOfCurveProcessingNodes((OZChannel *)((char *)this + 32496))) {
    goto LABEL_17;
  }
  OZChannel::enumerateCurveProcessingNodes(v2, v23);
  unint64_t v3 = *(const void ***)&v23[0].timescale;
  __p = (void *)v23[0].value;
  char v4 = 0;
  if (*(void *)&v23[0].timescale != v23[0].value)
  {
    CMTimeValue value = (const void **)v23[0].value;
    do
    {
      if (*value)
      {
        if (v6)
        {
          uint64_t v7 = (OZBehavior *)*((void *)v6 + 1);
          (*(void (**)(CMTime *__return_ptr, OZBehavior *))(*(void *)v7 + 608))(v23, v7);
          CMTime v22 = v23[0];
          memset(&v21, 0, sizeof(v21));
          OZBehavior::getFrameDuration(v7, &v19);
          CMTime time1 = v23[0];
          CMTime time2 = v23[1];
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v26);
          CMTime time1 = v26;
          *(__n128 *)&time2.CMTimeValue value = v19;
          time2.CMTimeEpoch epoch = v20;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v21);
          if (v4)
          {
            CMTime time1 = v22;
            CMTime time2 = v25;
            int32_t v8 = CMTimeCompare(&time1, &time2);
            unsigned int v9 = &v22;
            if (v8 > 0) {
              unsigned int v9 = &v25;
            }
            long long v10 = *(_OWORD *)&v9->value;
            v25.CMTimeEpoch epoch = v9->epoch;
            *(_OWORD *)&v25.CMTimeValue value = v10;
            CMTime time1 = v21;
            CMTime time2 = v24;
            int32_t v11 = CMTimeCompare(&time1, &time2);
            uint64_t v12 = &v21;
            if (v11 > 0) {
              uint64_t v12 = &v24;
            }
            long long v13 = *(_OWORD *)&v12->value;
            v24.CMTimeEpoch epoch = v12->epoch;
            *(_OWORD *)&v24.CMTimeValue value = v13;
          }
          else
          {
            CMTime v25 = v22;
            CMTime v24 = v21;
            char v4 = 1;
          }
        }
      }
      ++value;
    }
    while (value != v3);
  }
  if (__p) {
    operator delete(__p);
  }
  if ((v4 & 1) == 0)
  {
LABEL_17:
    OZChannel::getKeyframeMinTime(v2, (uint64_t)&v25);
    OZChannel::getKeyframeMaxTime(v2, (uint64_t)&v24);
  }
  v23[0] = v24;
  CMTime time1 = v25;
  v14.n128_f64[0] = PC_CMTimeSaferSubtract(v23, &time1, (uint64_t)&time2);
  uint64_t v15 = (*(uint64_t (**)(TXSequenceBehavior *, __n128))(*(void *)this + 336))(this, v14);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v15 + 336), (__n128 *)v23);
  operator/((long long *)&time2.value, (uint64_t)v23, (uint64_t)&time);
  return CMTimeGetSeconds(&time);
}

void sub_1B7664918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

long double TXSequenceBehavior::computePosition(TXSequenceBehavior *this, int a2, double a3, double *a4)
{
  double v10 = 0.0;
  switch(a2)
  {
    case 0:
      return a3;
    case 1:
      if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 35728), MEMORY[0x1E4F1FA48], 0.0)) {
        return 1.0 - cos(a3 * 3.14159265 * 0.5);
      }
      if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 35880), MEMORY[0x1E4F1FA48], 0.0)) {
        goto LABEL_6;
      }
      double v6 = 0.5;
      goto LABEL_7;
    case 2:
      if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 35728), MEMORY[0x1E4F1FA48], 0.0)) {
        return sin(a3 * 3.14159265 * 0.5) + 0.0;
      }
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 35880), MEMORY[0x1E4F1FA48], 0.0))
      {
        double v6 = 0.0;
        goto LABEL_14;
      }
LABEL_11:
      double v6 = 0.0;
      double v7 = 1.0;
      goto LABEL_15;
    case 3:
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 35728), MEMORY[0x1E4F1FA48], 0.0))
      {
        double v6 = 0.5;
LABEL_14:
        double v7 = 0.5;
LABEL_15:
        PCMath::easeInOut(&v10, a3, v6, v7, 0.0, 1.0, 0, a4);
      }
      else
      {
        return sin(a3 * 3.14159265 + -1.57079633) * 0.5 + 0.5;
      }
      return v10;
    case 4:
LABEL_6:
      double v6 = 1.0;
LABEL_7:
      double v7 = 0.0;
      goto LABEL_15;
    case 5:
      goto LABEL_11;
    case 6:
      TXSequenceBehavior::getCustomSpeed(this, a3);
      return v8;
    default:
      return v10;
  }
}

double TXSequenceBehavior::getValue(TXSequenceBehavior *this, const CMTime *a2, double a3, OZChannel *a4, double a5)
{
  CMTime v12 = *a2;
  if ((*(unsigned int (**)(TXSequenceBehavior *, CMTime *, void, uint64_t, uint64_t))(*(void *)this + 296))(this, &v12, 0, 1, 1))
  {
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), MEMORY[0x1E4F1FA48], 0.0) == 4) {
      return TXSequenceBehavior::getCustomAnimationValue(this, a2, a3, a4, a5);
    }
    else {
      return TXSequenceBehavior::getSelectionValue(this, a2, a3, a4, a5);
    }
  }
  return a5;
}

double TXSequenceBehavior::getCustomAnimationValue(TXSequenceBehavior *this, const CMTime *a2, double a3, OZChannel *a4, double a5)
{
  memset(&v47, 0, sizeof(v47));
  TXSequenceBehavior::getCustomAnimationTime(this, a2, a3, (uint64_t)&v47);
  ChanCFNumberRef Value = TXSequenceBehavior::getChanValue(this, &v47, a3, a4);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 30816), MEMORY[0x1E4F1FA48], 0.0))
  {
    LODWORD(v49.value) = 0;
    if (TXSequenceBehavior::charIndexToSelectionIndex(this, a3, (unsigned int *)&v49))
    {
      unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)this + 31072), a2, 0.0);
      unsigned int v12 = OZChannel::getValueAsUint((OZChannel *)((char *)this + 31224), a2, 0.0);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E4F1FA48], 0.0) == 2
        || OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E4F1FA48], 0.0) == 3)
      {
        int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 31376), MEMORY[0x1E4F1FA48], 0.0);
        BOOL v15 = LODWORD(v49.value) >= ValueAsUint && LODWORD(v49.value) < v12;
        if (v15) {
          double v16 = ChanValue;
        }
        else {
          double v16 = a5;
        }
        if (v15) {
          double v17 = a5;
        }
        else {
          double v17 = ChanValue;
        }
        if (ValueAsInt) {
          ChanCFNumberRef Value = v17;
        }
        else {
          ChanCFNumberRef Value = v16;
        }
      }
    }
  }
  CMTime v46 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)this + 222, &v46, 0.0);
  if (v18 > 0.0)
  {
    double v19 = v18;
    if (a4->var3 - 1009 > 0x23 || ((1 << (LOBYTE(a4->var3) + 15)) & 0x800002211) == 0)
    {
      int v21 = TXSequenceBehavior::charIndexToChannelUnitIndex(this, a3, 1);
      if ((v21 & 0x80000000) == 0)
      {
        CMTime v22 = (const CMTime *)MEMORY[0x1E4F1FA48];
        double v23 = 0.0;
        unsigned int v24 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 34760), MEMORY[0x1E4F1FA48], 0.0)
            + 39 * v21
            + a4->var3;
        int v25 = OZChannel::getValueAsInt((OZChannel *)this + 227, v22, 0.0);
        OZChannel::getValueAsDouble((OZChannel *)this + 226, &v47, 0.0);
        double v27 = v26;
        double SceneFrameRate = OZBehavior::getSceneFrameRate(this);
        TXSequenceBehavior::getKeyframeExtent(this, &v45, &v44);
        PCMath::clamp(&v47, &v45, &v44, (uint64_t)&v49);
        CMTime v47 = v49;
        uint64_t v29 = (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v29 + 336), (__n128 *)&v49);
        operator/((long long *)&v47.value, (uint64_t)&v49, (uint64_t)&time);
        Float64 Seconds = CMTimeGetSeconds(&time);
        CMTime v49 = v44;
        CMTime v48 = v45;
        double v31 = Seconds / SceneFrameRate;
        v32.n128_f64[0] = PC_CMTimeSaferSubtract(&v49, &v48, (uint64_t)&v41);
        uint64_t v33 = (*(uint64_t (**)(TXSequenceBehavior *, __n128))(*(void *)this + 336))(this, v32);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v33 + 336), (__n128 *)&v49);
        operator/(&v41, (uint64_t)&v49, (uint64_t)&v42);
        double v34 = CMTimeGetSeconds(&v42);
        double v35 = 0;
        BOOL v36 = v34 >= 0.0000001 || v34 <= -0.0000001;
        double v37 = v34 / SceneFrameRate;
        double v38 = 1.0;
        if (v36) {
          double v39 = v37;
        }
        else {
          double v39 = 1.0;
        }
        do
        {
          double v23 = v23 + v38 * PCRandom::noise(v35, v19, v31, v24, v25, 0.0, v39);
          double v19 = v19 + v19;
          double v38 = v27 * v38;
          double v35 = (PCRandom *)(v35 + 1);
        }
        while (v35 != 10);
        OZChannel::getValueAsDouble((OZChannel *)this + 225, &v47, 0.0);
        return ChanValue + v23 * v40;
      }
    }
  }
  return ChanValue;
}

double TXSequenceBehavior::getSelectionValue(TXSequenceBehavior *this, const CMTime *a2, double a3, OZChannel *a4, double a5)
{
  memset(&v54, 0, sizeof(v54));
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), MEMORY[0x1E4F1FA48], 0.0);
  Float64 v11 = v10;
  uint64_t v12 = (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v12 + 336), (__n128 *)&v52);
  operator*(&v52, &v53, v11);
  CMTime v56 = *a2;
  CMTime v55 = v53;
  PC_CMTimeSaferSubtract(&v56, &v55, (uint64_t)&v54);
  ChanCFNumberRef Value = TXSequenceBehavior::getChanValue(this, &v54, a3, a4);
  OZChannel::getValueAsDouble((OZChannel *)this + 222, &v54, 0.0);
  if (v14 > 0.0)
  {
    double v15 = v14;
    OZChannel::getValueAsDouble((OZChannel *)this + 223, &v54, 0.0);
    double v17 = ChanValue * v16;
    OZChannel::getValueAsDouble((OZChannel *)this + 224, &v54, 0.0);
    double v19 = ChanValue * v18 - v17;
    if (v19 <= -0.0000001 || v19 >= 0.0000001)
    {
      int v20 = TXSequenceBehavior::charIndexToChannelUnitIndex(this, a3, 1);
      if (v20 < 0) {
        return ChanValue;
      }
      int v21 = v20;
      double v49 = v19;
      double v22 = 0.0;
      unsigned int v23 = a4->var3 + OZChannel::getValueAsInt((OZChannel *)((char *)this + 34760), MEMORY[0x1E4F1FA48], 0.0);
      OZChannel::getValueAsDouble((OZChannel *)this + 226, &v54, 0.0);
      double v51 = v24;
      unsigned int v25 = 0;
      double v50 = (double)v21 + (double)v21;
      int v26 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1;
      int v27 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2;
      int v28 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3;
      double v29 = 1.0;
      do
      {
        int v30 = (int)(v50 * v15);
        int v31 = -32;
        int v32 = -1640531527;
        unsigned int v33 = v25;
        unsigned int v34 = v23;
        do
        {
          v33 += (v30 + 16 * v34) ^ (v32 + v34) ^ (v26 + (v34 >> 5));
          v34 += (v27 + 16 * v33) ^ (v32 + v33) ^ (v28 + (v33 >> 5));
          v32 -= 1640531527;
          BOOL v35 = __CFADD__(v31++, 1);
        }
        while (!v35);
        int v36 = -32;
        int v37 = -1640531527;
        unsigned int v38 = v25;
        unsigned int v39 = v23;
        do
        {
          v38 += (v30 + 1 + 16 * v39) ^ (v37 + v39) ^ (v26 + (v39 >> 5));
          v39 += (v27 + 16 * v38) ^ (v37 + v38) ^ (v28 + (v38 >> 5));
          v37 -= 1640531527;
          BOOL v35 = __CFADD__(v36++, 1);
        }
        while (!v35);
        double v40 = (double)(int)(v34 ^ v33) / 2147483650.0;
        double v41 = (double)(int)(v39 ^ v38) / 2147483650.0;
        long double v42 = cos((v50 * v15 - (double)v30) * 3.14159265);
        double v22 = v22 + v29 * ((1.0 - (1.0 - v42) * 0.5) * v40 + (1.0 - v42) * 0.5 * v41);
        double v15 = v15 + v15;
        double v29 = v51 * v29;
        ++v25;
      }
      while (v25 != 10);
      ChanCFNumberRef Value = v17 + v49 * ((v22 + 1.0) * 0.5);
    }
    else
    {
      ChanCFNumberRef Value = v17;
    }
  }
  if (a4->var3 - 1033 >= 2)
  {
    double v43 = (OZLockingGroup *)Li3DEngineScene::sceneManager((TXSequenceBehavior *)((char *)this + 544));
    OZLockingGroup::ReadSentry::ReadSentry((OZLockingGroup::ReadSentry *)&v56, v43);
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 30432), MEMORY[0x1E4F1FA48], 0.0);
    if (ValueAsInt == 2) {
      double v45 = a5;
    }
    else {
      double v45 = 0.0;
    }
    if (vabdd_f64(v45, ChanValue) < 0.0000001) {
      goto LABEL_27;
    }
    (*(void (**)(TXSequenceBehavior *, const CMTime *, OZChannel *, void, double))(*(void *)this + 704))(this, a2, a4, 0, a3);
    if (ValueAsInt)
    {
      if (ValueAsInt == 1)
      {
        ChanCFNumberRef Value = (ChanValue * v46 + 0.0) * a5;
      }
      else if (ValueAsInt == 2)
      {
        double v47 = (ChanValue - a5) * v46;
LABEL_26:
        ChanCFNumberRef Value = v47 + a5;
      }
LABEL_27:
      OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)&v56);
      return ChanValue;
    }
    double v47 = ChanValue * v46 + 0.0;
    goto LABEL_26;
  }
  return ChanValue;
}

void sub_1B76654A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

double TXSequenceBehavior::getChanValue(TXSequenceBehavior *this, const CMTime *a2, double a3, OZChannel *a4)
{
  OZChannel::getValueAsDouble(a4, a2, 0.0);
  double v9 = v8;
  var6 = a4->var6;
  if (var6)
  {
    int v11 = *((_DWORD *)var6 + 6);
    if ((v11 == 1027 || v11 == 1001)
      && OZChannel::getValueAsInt((OZChannel *)((char *)this + 35472), MEMORY[0x1E4F1FA48], 0.0) == 1)
    {
      uint64_t v12 = (TXTextLayout *)*((void *)this + 101);
      CMTime v14 = *a2;
      return v9 * TXTextLayout::getSeqPosScaleForChar(v12, a3, &v14);
    }
  }
  return v9;
}

void TXSequenceBehavior::getCustomAnimationTime(TXSequenceBehavior *this@<X0>, const CMTime *a2@<X1>, double a3@<D0>, uint64_t a4@<X8>)
{
  int v7 = TXSequenceBehavior::charIndexToChannelUnitIndex(this, a3, 1);
  if (v7 < 0)
  {
    uint64_t v17 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)a4 = *MEMORY[0x1E4F1FA48];
    *(void *)(a4 + 16) = *(void *)(v17 + 16);
  }
  else
  {
    int v60 = v7;
    (*(void (**)(CMTime *__return_ptr, TXSequenceBehavior *))(*(void *)this + 608))(v71, this);
    memset(&v70, 0, sizeof(v70));
    CMTime v69 = v71[1];
    uint64_t v8 = (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), (__n128 *)&v67);
    double v9 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), MEMORY[0x1E4F1FA48], 0.0);
    double v11 = v10;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33464), v9, 0.0);
    operator*(&v67, &v68, v11 + v12 + 1.0);
    CMTime time1 = v69;
    CMTime time2 = v68;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v70);
    unsigned int NumObjects = TXSequenceBehavior::getNumObjects(this);
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 31832), v9, 0.0);
    int v15 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32800), v9, 0.0);
    int v16 = ValueAsInt;
    if (v15 == 2) {
      int v59 = 0;
    }
    else {
      int v59 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32240), MEMORY[0x1E4F1FA48], 0.0);
    }
    double v18 = (CMTime *)MEMORY[0x1E4F1FA48];
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31832), MEMORY[0x1E4F1FA48], 0.0) == 4) {
      int v60 = TXSequenceBehavior::shuffle(this, v60, v19);
    }
    double v20 = (double)NumObjects;
    TXSequenceBehavior::getKeyframeExtent(this, &time2, &time1);
    memset(&v69, 0, sizeof(v69));
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v69);
    CMTime time1 = v69;
    CMTime time2 = *v18;
    if (!CMTimeCompare(&time1, &time2)) {
      CMTime v69 = v70;
    }
    int v21 = (const CMTime *)MEMORY[0x1E4F1FA48];
    double v22 = 0.0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 31680), MEMORY[0x1E4F1FA48], 0.0);
    double v24 = -1.0 / (v23 + 1.0) + 1.0;
    double v25 = v20 * 0.5;
    double v26 = ceil(v20 * 0.5);
    if ((v16 & 0xFFFFFFFE) == 2) {
      double v27 = v26;
    }
    else {
      double v27 = v20;
    }
    uint64_t v28 = (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v28 + 336), (__n128 *)&time1);
    operator/((long long *)&v70.value, (uint64_t)&time1, (uint64_t)&time);
    double Seconds = CMTimeGetSeconds(&time);
    memset(&v68, 0, sizeof(v68));
    CMTime time2 = v71[0];
    CMTime time1 = *a2;
    v30.n128_f64[0] = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v67);
    uint64_t v31 = (*(uint64_t (**)(TXSequenceBehavior *, __n128))(*(void *)this + 336))(this, v30);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v31 + 336), (__n128 *)&v64);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), v21, 0.0);
    operator*(&v64, &v65, v32);
    CMTime time1 = v67;
    CMTime time2 = v65;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
    operator/((long long *)&v68.value, (uint64_t)&v70, (uint64_t)&v63);
    double v33 = CMTimeGetSeconds(&v63);
    double v34 = 0.999999;
    if (v33 <= 0.999999) {
      double v34 = v33;
    }
    if (v33 >= 0.0) {
      double v22 = v34;
    }
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 32800), v21, 0.0) == 1)
    {
      if (v59 == 6) {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 32496), a2, 0.0);
      }
      else {
        double v36 = TXSequenceBehavior::computePosition(this, v59, v22, v35);
      }
      double v42 = v36;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 32648), MEMORY[0x1E4F1FA48], 0.0);
      double v44 = v42 * v43;
      int v40 = vcvtmd_s64_f64(v44 + 0.0000001);
      double v45 = v44 - (double)v40;
    }
    else
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 32648), MEMORY[0x1E4F1FA48], 0.0);
      double v39 = v22 * v38;
      int v40 = vcvtmd_s64_f64(v39 + 0.0000001);
      if (v59 == 6) {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 32496), a2, 0.0);
      }
      else {
        double v41 = TXSequenceBehavior::computePosition(this, v59, v39 - (double)v40, v37);
      }
      double v45 = v41;
    }
    double v46 = Seconds / (v27 - (v27 + -1.0) * v24);
    double v47 = (const CMTime *)MEMORY[0x1E4F1FA48];
    double v48 = 0.0;
    int v49 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 33208), MEMORY[0x1E4F1FA48], 0.0);
    BOOL v50 = (v40 & 0x80000001) == 1 && v49 == 2;
    double v51 = 1.0 - v45;
    if (!v50) {
      double v51 = v45;
    }
    operator*(&v70, &v65, v51);
    uint64_t v52 = (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v52 + 336), (__n128 *)&v62);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), v47, 0.0);
    operator*(&v62, &v64, v53);
    CMTime time1 = v65;
    CMTime time2 = v64;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v67);
    CMTime v68 = v67;
    switch(v16)
    {
      case 0:
      case 4:
        double v48 = (double)v60;
        break;
      case 1:
        double v48 = v20 - (double)v60 + -1.0;
        break;
      case 2:
        if (v25 > (double)v60) {
          double v48 = v25 - (double)v60 + -1.0;
        }
        else {
          double v48 = (double)v60 - v25;
        }
        break;
      case 3:
        if (v25 <= (double)v60) {
          double v48 = v20 - (double)v60 + -1.0;
        }
        else {
          double v48 = (double)v60;
        }
        break;
      default:
        break;
    }
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), MEMORY[0x1E4F1FA48], 0.0);
    double v55 = (1.0 - v24) * v46 * v48 + v54;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    uint64_t v56 = (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
    OZFigTimeForChannelSeconds(&v62, v55 / *(double *)(v56 + 368), 0x40000);
    CMTime time1 = v68;
    CMTime time2 = v62;
    v57.n128_f64[0] = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v64);
    uint64_t v58 = (*(uint64_t (**)(TXSequenceBehavior *, __n128))(*(void *)this + 336))(this, v57);
    OZFigTimeForChannelSeconds(&v61, v46 / *(double *)(v58 + 368), 0x40000);
    operator/((long long *)&v64.value, (uint64_t)&v61, (uint64_t)&v65);
    operator*((long long *)&v65.value, (uint64_t)&v69, (uint64_t)&v67);
    CMTime time2 = v71[0];
    CMTime time1 = v67;
    PC_CMTimeSaferAdd(&time1, &time2, a4);
  }
}

uint64_t TXSequenceBehavior::charIndexToSelectionIndex(TXSequenceBehavior *this, int a2, unsigned int *a3)
{
  if (!a3) {
    return 0;
  }
  LODWORD(v4) = a2;
  unsigned int v61 = 0;
  TXChannelString::getString((PCString *)(*((void *)this + 101) + 19048), (PCString *)&theString);
  unsigned int v6 = PCString::size((PCString *)&theString);
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 30816), MEMORY[0x1E4F1FA48], 0.0))
  {
    case 1u:
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31528), MEMORY[0x1E4F1FA48], 0.0)) {
        LODWORD(v4) = v6 + ~v4;
      }
      goto LABEL_114;
    case 2u:
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31528), MEMORY[0x1E4F1FA48], 0.0))
      {
        int v8 = v4;
        if (v6 > v4)
        {
          int v8 = v4;
          do
          {
            UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v8);
            if (TXCharacterSetIsWhitespaceOrNewline(CharacterAtIndex)) {
              goto LABEL_12;
            }
            ++v8;
          }
          while (v6 != v8);
          int v8 = v6;
        }
LABEL_12:
        LODWORD(v4) = v8 + ~v4;
        goto LABEL_114;
      }
      if (!v4) {
        goto LABEL_66;
      }
      int v39 = v4 + 1;
      while (1)
      {
        int v40 = v39 - 1;
        UniChar v41 = CFStringGetCharacterAtIndex(theString, v39 - 1);
        if (TXCharacterSetIsWhitespaceOrNewline(v41)) {
          break;
        }
        --v39;
        if (v40 == 1)
        {
LABEL_66:
          int v42 = 0;
          goto LABEL_113;
        }
      }
      int v42 = -v39;
LABEL_113:
      LODWORD(v4) = v42 + v4;
      goto LABEL_114;
    case 3u:
      int v59 = 0;
      unsigned int LineBreaks = TXTextLayout::getLineBreaks(*((TXTextLayout **)this + 101), &v59);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31528), MEMORY[0x1E4F1FA48], 0.0))
      {
        if (v6 <= v4)
        {
          int v11 = 0;
          LODWORD(v12) = v4;
        }
        else
        {
          int v11 = 0;
          uint64_t v12 = v4;
          do
          {
            UniChar v13 = CFStringGetCharacterAtIndex(theString, (int)v12);
            if (TXCharacterSetIsNewline(v13)
              || TXTextLayout::isLineBreak(*((TXTextLayout **)this + 101), v12, v59, LineBreaks))
            {
              goto LABEL_107;
            }
            UniChar v14 = CFStringGetCharacterAtIndex(theString, (int)v12);
            if (TXCharacterSetIsWhitespaceOrNewline(v14)) {
              ++v11;
            }
            else {
              int v11 = 0;
            }
            ++v12;
          }
          while (v6 != v12);
          LODWORD(v12) = v6;
        }
LABEL_107:
        LODWORD(v4) = v12 + ~v4 - v11;
        goto LABEL_114;
      }
      uint64_t v48 = 0;
      int v49 = 0;
      while (1)
      {
        UniChar v50 = CFStringGetCharacterAtIndex(theString, (int)v4 + (int)v48);
        if (TXCharacterSetIsWhitespaceOrNewline(v50)) {
          ++v49;
        }
        else {
          int v49 = 0;
        }
        if (!(v4 + v48)
          || TXTextLayout::isLineBreak(*((TXTextLayout **)this + 101), v4 + v48, v59, LineBreaks))
        {
          break;
        }
        --v48;
      }
      LODWORD(v4) = -(int)v48 - v49;
LABEL_114:
      unsigned int v61 = v4;
      goto LABEL_115;
    case 4u:
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31528), MEMORY[0x1E4F1FA48], 0.0))
      {
        if (v6 > v4)
        {
          int v15 = 0;
          do
          {
            UniChar v16 = CFStringGetCharacterAtIndex(theString, (int)v4);
            IsWhitespaceOrNewCTLineRef line = TXCharacterSetIsWhitespaceOrNewline(v16);
            BOOL v18 = IsWhitespaceOrNewline;
            if (IsWhitespaceOrNewline)
            {
              unsigned int v61 = ++v15;
              unsigned int v19 = v4 + 1;
              do
              {
                LODWORD(v4) = v19;
                if (v19 >= v6) {
                  break;
                }
                UniChar v20 = CFStringGetCharacterAtIndex(theString, (int)v19);
                BOOL v21 = TXCharacterSetIsWhitespaceOrNewline(v20);
                unsigned int v19 = v4 + 1;
              }
              while (v21);
            }
            else
            {
              LODWORD(v4) = v4 + 1;
            }
          }
          while (v4 < v6);
          if (v18) {
            goto LABEL_34;
          }
LABEL_111:
          uint64_t WordIndexInPhrase = 1;
          LODWORD(v4) = v15;
          goto LABEL_116;
        }
LABEL_61:
        LODWORD(v4) = 0;
      }
      else if (v4)
      {
        int v15 = 0;
        int v43 = v4;
        while (1)
        {
          UniChar v44 = CFStringGetCharacterAtIndex(theString, v43);
          BOOL v45 = TXCharacterSetIsWhitespaceOrNewline(v44);
          if (v45) {
            break;
          }
          --v43;
LABEL_75:
          if (!v43)
          {
            if (!v45) {
              goto LABEL_111;
            }
LABEL_34:
            LODWORD(v4) = v15 - 1;
            goto LABEL_114;
          }
        }
        unsigned int v61 = ++v15;
        int v46 = v43 - 1;
        while (v46)
        {
          UniChar v47 = CFStringGetCharacterAtIndex(theString, v46--);
          if (!TXCharacterSetIsWhitespaceOrNewline(v47))
          {
            int v43 = v46 + 1;
            goto LABEL_75;
          }
        }
        if (v45) {
          goto LABEL_34;
        }
        goto LABEL_111;
      }
LABEL_115:
      uint64_t WordIndexInPhrase = 1;
      goto LABEL_116;
    case 5u:
      int v59 = 0;
      unsigned int v22 = TXTextLayout::getLineBreaks(*((TXTextLayout **)this + 101), &v59);
      if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 31528), MEMORY[0x1E4F1FA48], 0.0))
      {
        if (v4)
        {
          int v23 = 0;
          BOOL v51 = 0;
          do
          {
            UniChar v52 = CFStringGetCharacterAtIndex(theString, (int)v4);
            if (TXCharacterSetIsNewline(v52)
              || TXTextLayout::isLineBreak(*((TXTextLayout **)this + 101), v4, v59, v22))
            {
              break;
            }
            UniChar v53 = CFStringGetCharacterAtIndex(theString, (int)v4);
            BOOL IsWhitespace = TXCharacterSetIsWhitespace(v53);
            BOOL v51 = IsWhitespace;
            if (IsWhitespace)
            {
              unsigned int v61 = ++v23;
              int v55 = v4 - 1;
              do
              {
                if (!v55) {
                  goto LABEL_96;
                }
                UniChar v56 = CFStringGetCharacterAtIndex(theString, v55--);
              }
              while (TXCharacterSetIsWhitespace(v56));
              LODWORD(v4) = v55 + 1;
            }
            else
            {
              LODWORD(v4) = v4 - 1;
            }
          }
          while (v4);
LABEL_96:
          if (!v51) {
            goto LABEL_99;
          }
LABEL_97:
          unsigned int v61 = --v23;
          goto LABEL_99;
        }
LABEL_98:
        int v23 = 0;
        goto LABEL_99;
      }
      if (v6 <= v4) {
        goto LABEL_98;
      }
      int v23 = 0;
      int v24 = 0;
      unsigned int v25 = v4;
      do
      {
        UniChar v26 = CFStringGetCharacterAtIndex(theString, (int)v25);
        if (TXCharacterSetIsNewline(v26)
          || v25 > v4 && TXTextLayout::isLineBreak(*((TXTextLayout **)this + 101), v25, v59, v22))
        {
          break;
        }
        UniChar v27 = CFStringGetCharacterAtIndex(theString, (int)v25);
        if (TXCharacterSetIsWhitespace(v27))
        {
          unsigned int v61 = ++v23;
          unsigned int v28 = v25 + 1;
          do
          {
            unsigned int v25 = v28;
            if (v28 >= v6) {
              break;
            }
            UniChar v29 = CFStringGetCharacterAtIndex(theString, (int)v28);
            BOOL v30 = TXCharacterSetIsWhitespace(v29);
            unsigned int v28 = v25 + 1;
          }
          while (v30);
          int v24 = 1;
        }
        else
        {
          int v24 = 0;
          ++v25;
        }
      }
      while (v25 < v6);
      if (v24) {
        goto LABEL_97;
      }
LABEL_99:
      uint64_t WordIndexInPhrase = 1;
      LODWORD(v4) = v23;
LABEL_116:
      *a3 = v4;
      PCString::~PCString((PCString *)&theString);
      return WordIndexInPhrase;
    case 6u:
      int v59 = 0;
      unsigned int v31 = TXTextLayout::getLineBreaks(*((TXTextLayout **)this + 101), &v59);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31528), MEMORY[0x1E4F1FA48], 0.0))
      {
        int v32 = v6 - v4;
        if (v6 <= v4)
        {
          int v33 = 0;
        }
        else
        {
          int v33 = 0;
          unint64_t v34 = v4;
          unint64_t v4 = v4;
          do
          {
            if (v4 > v34 && TXTextLayout::isLineBreak(*((TXTextLayout **)this + 101), v4, v59, v31)) {
              unsigned int v61 = ++v33;
            }
            ++v4;
            --v32;
          }
          while (v32);
        }
      }
      else
      {
        int v33 = 0;
        unsigned int v57 = 0;
        do
        {
          if (TXTextLayout::isLineBreak(*((TXTextLayout **)this + 101), v57, v59, v31)) {
            unsigned int v61 = ++v33;
          }
          ++v57;
        }
        while (v57 <= v4);
      }
      uint64_t WordIndexInPhrase = 1;
      LODWORD(v4) = v33;
      goto LABEL_116;
    case 7u:
      BOOL v35 = (const void *)*((void *)this + 101);
      if (!v35) {
        goto LABEL_61;
      }
      if (!v36) {
        goto LABEL_61;
      }
      int v37 = v36;
      BOOL v38 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 31528), MEMORY[0x1E4F1FA48], 0.0) != 0;
      uint64_t WordIndexInPhrase = TXTranscriptionGenerator::getWordIndexInPhrase(v37, v4, v38, &v61);
      LODWORD(v4) = v61;
      goto LABEL_116;
    default:
      goto LABEL_61;
  }
}

void sub_1B7666440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
}

uint64_t TXSequenceBehavior::charIndexToChannelUnitIndex(TXSequenceBehavior *this, unsigned int a2, int a3)
{
  unsigned int v20 = a2;
  if (a3 && Li3DEngineScene::sceneManager((TXSequenceBehavior *)((char *)this + 544)))
  {
    unsigned int v6 = (OZLockingGroup *)Li3DEngineScene::sceneManager((TXSequenceBehavior *)((char *)this + 544));
    OZLockingGroup::acquireReadLocks(v6);
  }
  uint64_t v7 = *((void *)this + 4508);
  if (v7)
  {
    int v8 = (_DWORD *)((char *)this + 36064);
    do
    {
      unsigned int v9 = *(_DWORD *)(v7 + 28);
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        int v11 = (uint64_t *)v7;
      }
      else {
        int v11 = (uint64_t *)(v7 + 8);
      }
      if (v10) {
        int v8 = (_DWORD *)v7;
      }
      uint64_t v7 = *v11;
    }
    while (*v11);
    if (v8 != (_DWORD *)((char *)this + 36064) && v8[7] <= a2)
    {
      uint64_t v14 = v8[8];
      if (!a3) {
        return v14;
      }
      goto LABEL_34;
    }
  }
  uint64_t v12 = (const CMTime *)MEMORY[0x1E4F1FA48];
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v14 = TXSequenceBehavior::charIndexToUnitIndex(this, a2, ValueAsInt);
  int v15 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 31832), v12, 0.0);
  if ((v15 - 2) >= 2)
  {
    if (v15 == 1) {
      uint64_t v14 = TXSequenceBehavior::getNumObjects(this) + ~v14;
    }
  }
  else
  {
    signed int v16 = TXSequenceBehavior::getNumObjects(this) >> 1;
    if (TXSequenceBehavior::getNumObjects(this))
    {
      if ((int)v14 - v16 >= 0) {
        LODWORD(v14) = v14 - v16;
      }
      else {
        LODWORD(v14) = v16 - v14;
      }
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31832), MEMORY[0x1E4F1FA48], 0.0) == 3) {
        uint64_t v14 = (v16 - v14);
      }
      else {
        uint64_t v14 = v14;
      }
    }
    else
    {
      if ((int)v14 >= v16) {
        LODWORD(v14) = v14 - v16;
      }
      else {
        LODWORD(v14) = v16 + ~v14;
      }
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31832), MEMORY[0x1E4F1FA48], 0.0) == 3) {
        uint64_t v14 = (v16 + ~v14);
      }
      else {
        uint64_t v14 = v14;
      }
    }
  }
  BOOL v21 = &v20;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)this + 4507, &v20, (uint64_t)&std::piecewise_construct, &v21)+ 8) = v14;
  if (a3)
  {
LABEL_34:
    uint64_t v17 = (TXSequenceBehavior *)((char *)this + 544);
    if (Li3DEngineScene::sceneManager(v17))
    {
      BOOL v18 = (OZLockingGroup *)Li3DEngineScene::sceneManager(v17);
      OZLockingGroup::releaseReadLocks(v18);
    }
  }
  return v14;
}

__n128 TXSequenceBehavior::getKeyframeExtent(TXSequenceBehavior *this, CMTime *a2, CMTime *a3)
{
  uint64_t v3 = *((void *)this + 104);
  uint64_t v4 = *((void *)this + 103);
  if (v3 == v4)
  {
    int v23 = (__n128 *)MEMORY[0x1E4F1FA48];
    long long v24 = *MEMORY[0x1E4F1FA48];
    a2->CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    *(_OWORD *)&a2->CMTimeValue value = v24;
    __n128 result = *v23;
    a3->CMTimeEpoch epoch = v23[1].n128_i64[0];
    *(__n128 *)&a3->CMTimeValue value = result;
  }
  else
  {
    char v5 = 0;
    CMTime v33 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    CMTime v32 = v33;
    do
    {
      unsigned int v6 = *(const void **)v4;
      if ((*(void *)(*(void *)v4 + 56) & 0x1000) != 0)
      {
        UniChar v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        OZChannelFolder::getAllDescendantsFlattened((uint64_t)v14, (void **)&v27, 0, 0);
        signed int v16 = v27;
        int v15 = v28;
        if (v27 != v28)
        {
          do
          {
            if (*v16) {
            else
            }
              uint64_t v17 = 0;
            if ((*((uint64_t (**)(OZChannel *, void))v17->var0 + 69))(v17, 0))
            {
              OZChannel::getKeyframeMinTime(v17, (uint64_t)&time1);
              CMTime v31 = time1;
              OZChannel::getKeyframeMaxTime(v17, (uint64_t)&time1);
              CMTime v30 = time1;
              if (v5)
              {
                CMTime time1 = v33;
                CMTime time2 = v31;
                int32_t v18 = CMTimeCompare(&time1, &time2);
                unsigned int v19 = &v31;
                if (v18 <= 0) {
                  unsigned int v19 = &v33;
                }
                long long v20 = *(_OWORD *)&v19->value;
                v33.CMTimeEpoch epoch = v19->epoch;
                *(_OWORD *)&v33.CMTimeValue value = v20;
                CMTime time1 = v32;
                CMTime time2 = v30;
                int32_t v21 = CMTimeCompare(&time1, &time2);
                unsigned int v22 = &v30;
                if (v21 >= 0) {
                  unsigned int v22 = &v32;
                }
                __n128 result = *(__n128 *)&v22->value;
                v32.CMTimeEpoch epoch = v22->epoch;
                *(__n128 *)&v32.CMTimeValue value = result;
              }
              else
              {
                CMTime v33 = v31;
                result.n128_u64[1] = *(void *)&v30.timescale;
                CMTime v32 = v30;
              }
              char v5 = 1;
            }
            ++v16;
          }
          while (v16 != v15);
          signed int v16 = v27;
        }
        if (v16)
        {
          unsigned int v28 = v16;
          operator delete(v16);
        }
      }
      else
      {
        if ((*((unsigned int (**)(void))v7->var0 + 69))())
        {
          OZChannel::getKeyframeMinTime(v7, (uint64_t)&v31);
          OZChannel::getKeyframeMaxTime(v7, (uint64_t)&v30);
          if (v5)
          {
            CMTime time1 = v33;
            CMTime time2 = v31;
            int32_t v9 = CMTimeCompare(&time1, &time2);
            BOOL v10 = &v31;
            if (v9 <= 0) {
              BOOL v10 = &v33;
            }
            long long v11 = *(_OWORD *)&v10->value;
            v33.CMTimeEpoch epoch = v10->epoch;
            *(_OWORD *)&v33.CMTimeValue value = v11;
            CMTime time1 = v32;
            CMTime time2 = v30;
            int32_t v12 = CMTimeCompare(&time1, &time2);
            UniChar v13 = &v30;
            if (v12 >= 0) {
              UniChar v13 = &v32;
            }
            __n128 result = *(__n128 *)&v13->value;
            v32.CMTimeEpoch epoch = v13->epoch;
            *(__n128 *)&v32.CMTimeValue value = result;
          }
          else
          {
            CMTime v33 = v31;
            CMTime v32 = v30;
          }
          char v5 = 1;
        }
      }
      v4 += 8;
    }
    while (v4 != v3);
    *a2 = v33;
    result.n128_u64[0] = v32.value;
    *a3 = v32;
  }
  return result;
}

void sub_1B7666AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 PCMath::clamp@<Q0>(CMTime *this@<X0>, CMTime *a2@<X1>, CMTime *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v6 = a2;
  CMTime time1 = *this;
  CMTime v10 = *a2;
  if ((CMTimeCompare(&time1, &v10) & 0x80000000) == 0)
  {
    CMTime time1 = *this;
    CMTime v10 = *a3;
    if (CMTimeCompare(&time1, &v10) <= 0) {
      unsigned int v6 = this;
    }
    else {
      unsigned int v6 = a3;
    }
  }
  __n128 result = *(__n128 *)&v6->value;
  *(_OWORD *)a4 = *(_OWORD *)&v6->value;
  *(void *)(a4 + 16) = v6->epoch;
  return result;
}

uint64_t TXSequenceBehavior::getNumObjects(TXSequenceBehavior *this)
{
  if (*((unsigned char *)this + 796)) {
    return *((unsigned int *)this + 200);
  }
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t result = 1;
  switch(ValueAsInt)
  {
    case 0:
    case 5:
      uint64_t result = TXTextLayout::getComposedCharacterCount(*((TXTextLayout **)this + 101));
      break;
    case 1:
      uint64_t result = TXTextLayout::getComposedCharacterCountIgnoringSpaces(*((TXTextLayout **)this + 101));
      break;
    case 2:
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 101) + 224))(*((void *)this + 101));
      break;
    case 3:
      uint64_t result = *(unsigned int *)(*((void *)this + 101) + 19324);
      break;
    default:
      break;
  }
  *((_DWORD *)this + 200) = result;
  *((unsigned char *)this + 796) = 1;
  return result;
}

uint64_t TXSequenceBehavior::shuffle(TXSequenceBehavior *this, unsigned int a2, const CMTime *a3)
{
  uint64_t result = TXSequenceBehavior::getNumObjects(this);
  if (result)
  {
    int v6 = result;
    uint64_t v7 = (void *)((char *)this + 36032);
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32088), MEMORY[0x1E4F1FA48], 0.0);
    if (*((_DWORD *)this + 9010) != v6 || ValueAsInt != *((_DWORD *)this + 9011))
    {
      if (*v7)
      {
        MEMORY[0x1BA9BFB70](*v7, 0x1000C8052888210);
        void *v7 = 0;
      }
      operator new[]();
    }
    return *(unsigned int *)(*v7 + 4 * a2);
  }
  return result;
}

void TXSequenceBehavior::createInfluenceCache(TXSequenceBehavior *this, const CMTime *a2)
{
  uint64_t v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager((TXSequenceBehavior *)((char *)this + 544));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v9, v4);
  TXSequenceBehavior::getAnimationDuration(this, (uint64_t)&time1);
  *(CMTime *)((char *)this + 772) = time1;
  *((unsigned char *)this + 768) = 1;
  char v5 = (_OWORD **)*((void *)this + 93);
  int v6 = (_OWORD **)*((void *)this + 94);
  while (v5 != v6)
  {
    uint64_t v7 = (uint64_t)*v5;
    CMTimeEpoch v8 = *((void *)*v5 + 2);
    *(_OWORD *)&time1.CMTimeValue value = **v5;
    time1.CMTimeEpoch epoch = v8;
    CMTime time2 = *a2;
    if (!CMTimeCompare(&time1, &time2))
    {
      ++*(_DWORD *)(v7 + 24);
      goto LABEL_8;
    }
    ++v5;
  }
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 29056), MEMORY[0x1E4F1FA48], 0.0) != 1) {
    operator new();
  }
LABEL_8:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v9);
}

void sub_1B766704C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXSequenceBehavior::clearInfluenceCache(TXSequenceBehavior *this, const CMTime *a2)
{
  uint64_t v4 = (OZLockingGroup *)Li3DEngineScene::sceneManager((TXSequenceBehavior *)((char *)this + 544));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v12, v4);
  uint64_t v5 = *((void *)this + 93);
  if (v5 != *((void *)this + 94))
  {
    uint64_t v6 = -v5;
    while (1)
    {
      uint64_t v7 = *(void *)v5;
      CMTimeEpoch v11 = *(void *)(*(void *)v5 + 16);
      *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)*(void *)v5;
      time1.CMTimeEpoch epoch = v11;
      CMTime time2 = *a2;
      if (!CMTimeCompare(&time1, &time2))
      {
        int v8 = *(_DWORD *)(v7 + 24) - 1;
        *(_DWORD *)(v7 + 24) = v8;
        if (!v8) {
          break;
        }
      }
      v5 += 8;
      v6 -= 8;
      if (v5 == *((void *)this + 94)) {
        goto LABEL_10;
      }
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v7 + 32, *(void **)(v7 + 40));
    MEMORY[0x1BA9BFBA0](v7, 0x1020C40A41566E0);
    uint64_t v9 = *((void *)this + 94);
    uint64_t v10 = v9 - (8 - v6);
    if (v9 != 8 - v6) {
      memmove((void *)-v6, (const void *)(8 - v6), v9 - (8 - v6));
    }
    *((void *)this + 94) = v10 - v6;
  }
LABEL_10:
  *((unsigned char *)this + 768) = 0;
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v12);
}

void sub_1B7667194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

double TXSequenceBehavior::getInfluence(TXSequenceBehavior *this, CMTime *a2, double a3, OZChannel *a4, int a5)
{
  uint64_t v10 = (OZChannel *)((char *)this + 29056);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 29056), MEMORY[0x1E4F1FA48], 0.0) != 1)
  {
    int32_t v18 = (CMTime **)*((void *)this + 93);
    unsigned int v19 = (CMTime **)*((void *)this + 94);
    while (v18 != v19)
    {
      long long v20 = *v18;
      CMTime v39 = **v18;
      v36[0] = v39;
      CMTime time2 = *a2;
      if (!CMTimeCompare(v36, &time2))
      {
        LODWORD(time2.value) = a3;
        v36[0].CMTimeValue value = (CMTimeValue)&time2;
        int32_t v12 = std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)&v20[1].timescale, (unsigned int *)&time2, (uint64_t)&std::piecewise_construct, v36)[5];
        return *(double *)&v12;
      }
      ++v18;
    }
  }
  memset(&v39, 0, sizeof(v39));
  CMTimeEpoch v11 = (const CMTime *)MEMORY[0x1E4F1FA48];
  *(double *)&int32_t v12 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), MEMORY[0x1E4F1FA48], 0.0);
  Float64 v14 = v13;
  uint64_t v15 = (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v15 + 336), (__n128 *)&v37);
  operator*(&v37, &v38, v14);
  v36[0] = *a2;
  CMTime time2 = v38;
  v16.n128_f64[0] = PC_CMTimeSaferSubtract(v36, &time2, (uint64_t)&v39);
  (*(void (**)(CMTime *__return_ptr, TXSequenceBehavior *, __n128))(*(void *)this + 608))(v36, this, v16);
  if (OZChannel::getValueAsInt(v10, v11, 0.0) == 1)
  {
    InfluenceForTranscriptiouint64_t n = TXSequenceBehavior::getInfluenceForTranscription(this, a2, a3, a4);
  }
  else
  {
    uint64_t v21 = TXSequenceBehavior::charIndexToChannelUnitIndex(this, a3, a5);
    if ((v21 & 0x80000000) != 0) {
      return *(double *)&v12;
    }
    uint64_t v22 = v21;
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31832), MEMORY[0x1E4F1FA48], 0.0) == 4) {
      uint64_t v22 = TXSequenceBehavior::shuffle(this, v22, v23);
    }
    double v24 = (*(double (**)(TXSequenceBehavior *, uint64_t))(*(void *)this + 712))(this, v22);
    LOBYTE(v37.value) = 0;
    memset(&time2, 0, sizeof(time2));
    TXSequenceBehavior::getSelection((uint64_t)this, &v39, (char **)&time2, (BOOL *)&v37);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 32800), MEMORY[0x1E4F1FA48], 0.0) == 2)
    {
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 35880), MEMORY[0x1E4F1FA48], 0.0)) {
        uint64_t PerObjectSpeed = TXSequenceBehavior::getPerObjectSpeed(this);
      }
      else {
        uint64_t PerObjectSpeed = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32240), MEMORY[0x1E4F1FA48], 0.0);
      }
      UniChar v26 = (double *)PerObjectSpeed;
    }
    else
    {
      UniChar v26 = 0;
    }
    CMTimeValue value = (double *)time2.value;
    unsigned int v28 = *(double **)&time2.timescale;
    InfluenceForTranscriptiouint64_t n = 0.0;
    if (time2.value != *(void *)&time2.timescale)
    {
      int value_low = LOBYTE(v37.value);
      do
      {
        double v30 = TXSequenceBehavior::trapezoid(this, v24, *value, *value + value[1], value[4], value[4], value_low != 0, value[6], value[7], v26);
        InfluenceForTranscriptiouint64_t n = v30
                                  * TXSequenceBehavior::trapezoid(this, v24, value[2], value[2] + value[3], 0.0, 0.0, 0, value[6], 1.0, 0)+ InfluenceForTranscription;
        value += 8;
      }
      while (value != v28);
      CMTimeValue value = (double *)time2.value;
    }
    *(double *)&v38.CMTimeValue value = InfluenceForTranscription;
    if (value)
    {
      *(void *)&time2.timescale = value;
      operator delete(value);
    }
  }
  if (InfluenceForTranscription <= 1.0) {
    double v31 = InfluenceForTranscription;
  }
  else {
    double v31 = 1.0;
  }
  if (InfluenceForTranscription >= 0.0) {
    double v32 = v31;
  }
  else {
    double v32 = 0.0;
  }
  *(double *)&v38.CMTimeValue value = v32;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), MEMORY[0x1E4F1FA48], 0.0) == 3)
  {
    double v32 = 1.0 - v32;
    *(double *)&v38.CMTimeValue value = v32;
  }
  if (OZChannel::getValueAsInt(v10, MEMORY[0x1E4F1FA48], 0.0) == 1
    && OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E4F1FA48], 0.0) == 4)
  {
    int v33 = *(_DWORD *)(*((void *)this + 101) + 63804) + *(_DWORD *)(*((void *)this + 101) + 19324);
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 33056), MEMORY[0x1E4F1FA48], 0.0);
    if (v33 > ValueAsInt) {
      *(double *)&v38.CMTimeValue value = v32 + (double)(v33 + ~ValueAsInt);
    }
  }
  TXSequenceBehavior::applySubselection(this, &v39, a3, (double *)&v38.value);
  int32_t v12 = (uint64_t *)v38.value;
  return *(double *)&v12;
}

void sub_1B7667674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double TXSequenceBehavior::getInfluenceForTranscription(TXSequenceBehavior *this, CMTime *a2, double a3, OZChannel *a4)
{
  int v8 = (double *)((char *)this + 36104);
  uint64_t v9 = (const void *)*((void *)this + 101);
  if (v9) {
  else
  }
    uint64_t v10 = 0;
  CMTime v40 = *a2;
  CMTime time = v40;
  double Seconds = CMTimeGetSeconds(&time);
  unsigned int v12 = a3;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v13 = TXSequenceBehavior::charIndexToUnitIndex(this, a3, ValueAsInt);
  CMTime time1 = v40;
  CMTime time2 = *(CMTime *)((char *)this + 36080);
  if (CMTimeCompare(&time1, &time2) || v13 != *(_DWORD *)v8)
  {
    ActiveTranscriptionByUnit = (uint64_t *)TXTranscriptionGenerator::getActiveTranscriptionByUnit(v10, &ValueAsInt, a2);
    memset(&time1, 0, sizeof(time1));
    std::vector<TXTranscriptionSegment>::__init_with_size[abi:ne180100]<TXTranscriptionSegment*,TXTranscriptionSegment*>(&time1, *ActiveTranscriptionByUnit, ActiveTranscriptionByUnit[1], 0xAAAAAAAAAAAAAAABLL * ((ActiveTranscriptionByUnit[1] - *ActiveTranscriptionByUnit) >> 4));
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)&time1.timescale - time1.value) >> 4) <= (int)v13)
    {
      double v14 = 0.0;
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), MEMORY[0x1E4F1FA48], 0.0) == 1) {
        double v14 = 1.0;
      }
      goto LABEL_34;
    }
    Lifespauint64_t n = TXSequenceBehavior::getLifespan(this, &time1, v13);
    double v37 = -1.0;
    double started = TXSequenceBehavior::computeStartTime((uint64_t)this, a3, a2, &time1.value, v13, &v37, Lifespan);
    memset(&time2, 0, sizeof(time2));
    uint64_t v18 = (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v18 + 336), (__n128 *)&v36);
    int32_t v19 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 29208), MEMORY[0x1E4F1FA48], 0.0);
    operator*(&v36, v19, &time2);
    CMTime v35 = time2;
    double v20 = CMTimeGetSeconds(&v35);
    double v21 = v37;
    if (v37 < 0.0)
    {
      if (Seconds >= started)
      {
        if (v20 <= -0.0000001 || v20 >= 0.0000001)
        {
          int v26 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32240), MEMORY[0x1E4F1FA48], 0.0);
          double v28 = (Seconds - started) / v20;
          double v29 = 1.0;
          if (v28 <= 1.0) {
            double v29 = (Seconds - started) / v20;
          }
          if (v28 >= 0.0) {
            double v30 = v29;
          }
          else {
            double v30 = 0.0;
          }
          double v25 = TXSequenceBehavior::computePosition(this, v26, v30, v27);
        }
        else
        {
          int v23 = (OZChannel *)((char *)this + 28112);
          if (Seconds >= started)
          {
            int v31 = OZChannel::getValueAsInt(v23, MEMORY[0x1E4F1FA48], 0.0);
            double v25 = 1.0;
            if (v31 == 1) {
              double v25 = 0.0;
            }
          }
          else
          {
            int v24 = OZChannel::getValueAsInt(v23, MEMORY[0x1E4F1FA48], 0.0);
            double v25 = 1.0;
            if (v24 != 1) {
              double v25 = 0.0;
            }
          }
        }
        double v37 = v25;
        int v32 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), MEMORY[0x1E4F1FA48], 0.0);
        double v21 = v37;
        if (v32 != 1) {
          goto LABEL_33;
        }
        double v21 = 1.0 - v37;
      }
      else
      {
        int v22 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), MEMORY[0x1E4F1FA48], 0.0);
        double v21 = 1.0;
        if (v22 != 1) {
          double v21 = 0.0;
        }
      }
      double v37 = v21;
    }
LABEL_33:
    long long v33 = *(_OWORD *)&a2->value;
    *((void *)this + 4512) = a2->epoch;
    *((_OWORD *)this + 2255) = v33;
    *(_DWORD *)int v8 = v13;
    v8[1] = v21;
    TXSequenceBehavior::deactivateSegmentsIfNecessary(this, a4, v21, ValueAsInt, v13, (double)v12, a2);
    double v14 = v37;
LABEL_34:
    time2.CMTimeValue value = (CMTimeValue)&time1;
    std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&time2);
    return v14;
  }
  TXSequenceBehavior::deactivateSegmentsIfNecessary(this, a4, v8[1], ValueAsInt, v13, (double)v12, a2);
  return v8[1];
}

void sub_1B7667ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)(v25 - 144);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&a25);
  _Unwind_Resume(a1);
}

void TXSequenceBehavior::getSelection(uint64_t a1, const CMTime *a2, char **a3, BOOL *a4)
{
  (*(void (**)(CMTime *__return_ptr))(*(void *)a1 + 608))(&v38);
  memset(&v37, 0, sizeof(v37));
  TXSequenceBehavior::getAnimationDuration((TXSequenceBehavior *)a1, (uint64_t)&v37);
  v30[0] = v37;
  int v8 = (CMTime *)MEMORY[0x1E4F1FA48];
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(v30, &time2) >= 1)
  {
    memset(&v36, 0, sizeof(v36));
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), (__n128 *)&v39);
    v30[0] = v37;
    CMTime time2 = v39;
    PC_CMTimeSaferSubtract(v30, &time2, (uint64_t)&v36);
    v30[0] = v36;
    CMTime time2 = *v8;
    if (CMTimeCompare(v30, &time2))
    {
      CMTime time2 = v38;
      v30[0] = *a2;
      PC_CMTimeSaferSubtract(v30, &time2, (uint64_t)&v39);
      operator/((long long *)&v39.value, (uint64_t)&v36, (uint64_t)&time);
      double Seconds = CMTimeGetSeconds(&time);
    }
    else
    {
      double Seconds = 1.0;
    }
    if (Seconds <= 0.999999) {
      double v11 = Seconds;
    }
    else {
      double v11 = 0.999999;
    }
    if (Seconds >= 0.0) {
      double v12 = v11;
    }
    else {
      double v12 = 0.0;
    }
    memset(&v34, 0, sizeof(v34));
    operator*(&v37, &v39, v12);
    CMTime time2 = v38;
    v30[0] = v39;
    PC_CMTimeSaferAdd(v30, &time2, (uint64_t)&v34);
    uint64_t v13 = (const CMTime *)MEMORY[0x1E4F1FA48];
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 28112), MEMORY[0x1E4F1FA48], 0.0);
    BOOL v16 = OZChannel::getValueAsInt((OZChannel *)(a1 + 33208), v13, 0.0) == 1
       && (ValueAsInt & 0xFFFFFFFE) == 2;
    *a4 = v16;
    if (OZChannel::getValueAsInt((OZChannel *)(a1 + 32800), v13, 0.0) == 2) {
      int v17 = 0;
    }
    else {
      int v17 = OZChannel::getValueAsInt((OZChannel *)(a1 + 32240), MEMORY[0x1E4F1FA48], 0.0);
    }
    uint64_t v18 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 32648), MEMORY[0x1E4F1FA48], 0.0);
    double v20 = v19;
    if (OZChannel::getValueAsInt((OZChannel *)(a1 + 32800), v18, 0.0) == 1)
    {
      if (v17 == 6)
      {
        double v22 = 0.0;
        OZChannel::getValueAsDouble((OZChannel *)(a1 + 32496), &v34, 0.0);
        if (v23 <= 0.999999) {
          double v24 = v23;
        }
        else {
          double v24 = 0.999999;
        }
        if (v23 >= 0.0) {
          double v22 = v24;
        }
      }
      else
      {
        double v22 = TXSequenceBehavior::computePosition((TXSequenceBehavior *)a1, v17, v12, v21);
      }
      if (*a4)
      {
        int v25 = 0;
      }
      else
      {
        int v25 = vcvtmd_s64_f64(v20 * v22 + 0.0000001);
        double v22 = v20 * v22 - (double)v25;
      }
    }
    else
    {
      int v25 = vcvtmd_s64_f64(v12 * v20 + 0.0000001);
      double v26 = v12 * v20 - (double)v25;
      if (v17 == 6)
      {
        memset(&v33, 0, sizeof(v33));
        TXSequenceBehavior::getAnimationDuration((TXSequenceBehavior *)a1, (uint64_t)&v33);
        memset(&v32, 0, sizeof(v32));
        operator*(&v33, &v32, v26);
        memset(&v31, 0, sizeof(v31));
        (*(void (**)(CMTime *__return_ptr, uint64_t))(*(void *)a1 + 608))(v30, a1);
        CMTime v39 = v30[0];
        CMTime time2 = v32;
        PC_CMTimeSaferAdd(&time2, &v39, (uint64_t)&v31);
        OZChannel::getValueAsDouble((OZChannel *)(a1 + 32496), &v31, 0.0);
      }
      else
      {
        double v27 = TXSequenceBehavior::computePosition((TXSequenceBehavior *)a1, v17, v26, v21);
      }
      double v22 = v27;
      if (*a4) {
        double v22 = (v27 + (double)v25) / v20;
      }
    }
    BOOL v29 = OZChannel::getValueAsInt((OZChannel *)(a1 + 33208), MEMORY[0x1E4F1FA48], 0.0) == 2
       && (v25 & 0x80000001) == 1;
    if ((ValueAsInt - 2) < 2)
    {
      TXSequenceBehavior::getSequenceThroughSelection(a1, a2, v29, a3, v22);
    }
    else if (ValueAsInt == 1)
    {
      TXSequenceBehavior::getSequenceFromSelection(a1, a2, v29, a3, v22);
    }
    else if (!ValueAsInt)
    {
      TXSequenceBehavior::getSequenceToSelection(a1, a2, v29, a3, v22);
    }
  }
}

uint64_t TXSequenceBehavior::getPerObjectSpeed(TXSequenceBehavior *this)
{
  unint64_t v2 = (const CMTime *)MEMORY[0x1E4F1FA48];
  uint64_t ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32240), MEMORY[0x1E4F1FA48], 0.0);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), v2, 0.0) == 1)
  {
    int v4 = ValueAsInt - 1;
    if (ValueAsInt - 1) <= 4 && ((0x1Bu >> v4)) {
      return dword_1B7E7ACD0[v4];
    }
  }
  return ValueAsInt;
}

uint64_t TXSequenceBehavior::applySubselection(TXSequenceBehavior *this, const CMTime *a2, double a3, double *a4)
{
  uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E4F1FA48], 0.0);
  if (result != 5)
  {
    uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 30816), MEMORY[0x1E4F1FA48], 0.0);
    if (result)
    {
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 30816), MEMORY[0x1E4F1FA48], 0.0) == 8)
      {
        int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 31376), MEMORY[0x1E4F1FA48], 0.0);
        uint64_t result = TXTextLayout::isEmoji(*((uint64_t ***)this + 101), a3);
        if (ValueAsInt)
        {
          if (!result) {
            return result;
          }
        }
        else if (result)
        {
          return result;
        }
      }
      else
      {
        unsigned int v15 = 0;
        uint64_t result = TXSequenceBehavior::charIndexToSelectionIndex(this, a3, &v15);
        if (!result) {
          return result;
        }
        unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)this + 31072), a2, 0.0);
        unsigned int v11 = OZChannel::getValueAsUint((OZChannel *)((char *)this + 31224), a2, 0.0);
        if (v11 >= ValueAsUint) {
          unsigned int v12 = ValueAsUint;
        }
        else {
          unsigned int v12 = v11;
        }
        if (v11 > ValueAsUint) {
          unsigned int ValueAsUint = v11;
        }
        uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 31376), MEMORY[0x1E4F1FA48], 0.0);
        BOOL v14 = v15 >= v12 && v15 < ValueAsUint;
        if (result)
        {
          if (!v14) {
            return result;
          }
        }
        else if (v14)
        {
          return result;
        }
      }
      *a4 = 0.0;
    }
  }
  return result;
}

void TXSequenceBehavior::computeStartTimeForWord(uint64_t a1, uint64_t a2, uint64_t a3, CMTime *a4, uint64_t a5, uint64_t a6, double *a7)
{
  unsigned int v11 = (const CMTime *)MEMORY[0x1E4F1FA48];
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 29360), MEMORY[0x1E4F1FA48], 0.0);
  OZChannel::getValueAsInt((OZChannel *)(a1 + 29768), v11, 0.0);
  int v13 = TXSequenceBehavior::charIndexToTriggerIndex((TXSequenceBehavior *)a1, a3);
  unsigned int v14 = OZChannel::getValueAsInt((OZChannel *)(a1 + 29616), v11, 0.0) + v13;
  if (ValueAsInt == 1)
  {
    unsigned int v15 = *(_DWORD **)(a1 + 808);
    if (v14 < v15[4831])
    {
      TXTranscriptionGenerator::getActiveTranscriptionByLine(v16, a4);
      if (OZChannel::getValueAsInt((OZChannel *)(a1 + 30024), MEMORY[0x1E4F1FA48], 0.0) == 2)
      {
        int v17 = (const CMTime *)MEMORY[0x1E4F1FA48];
        Float64 v18 = (double)(int)OZChannel::getValueAsInt((OZChannel *)(a1 + 30280), MEMORY[0x1E4F1FA48], 0.0);
        uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v19 + 336), (__n128 *)&v27);
        operator*(&v27, &time, v18);
        CMTimeGetSeconds(&time);
        int LineIndex = TXTextLayout::getLineIndex(*(TXTextLayout **)(a1 + 808), a3);
        TXTextLayout::lineIndexToCharIndex(*(TXTextLayout **)(a1 + 808), LineIndex);
        (*(void (**)(void))(**(void **)(a1 + 808) + 720))();
        TXTextLayout::lineIndexToCharIndex(*(TXTextLayout **)(a1 + 808), LineIndex + 1);
        (*(void (**)(void))(**(void **)(a1 + 808) + 720))();
        (*(uint64_t (**)(void))(**(void **)(a1 + 808) + 720))();
        memset(&v27, 0, sizeof(v27));
        uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v21 + 336), (__n128 *)&v26);
        int32_t v22 = OZChannel::getValueAsInt((OZChannel *)(a1 + 29208), v17, 0.0);
        operator*(&v26, v22, &v27);
        CMTime v25 = v27;
        CMTimeGetSeconds(&v25);
      }
      else
      {
        (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 808) + 720))(*(void *)(a1 + 808), a3);
        TXTextLayout::getLineIndex(*(TXTextLayout **)(a1 + 808), a3);
      }
      return;
    }
  }
  else if (ValueAsInt {
         || v14 < (*(unsigned int (**)(void))(**(void **)(a1 + 808) + 224))(*(void *)(a1 + 808)))
  }
  {
    return;
  }
  if (a7)
  {
    int v23 = OZChannel::getValueAsInt((OZChannel *)(a1 + 28112), MEMORY[0x1E4F1FA48], 0.0);
    double v24 = 1.0;
    if (v23 != 1) {
      double v24 = 0.0;
    }
    *a7 = v24;
  }
}

uint64_t TXSequenceBehavior::charIndexToTriggerIndex(TXSequenceBehavior *this, unsigned int a2)
{
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 29360), MEMORY[0x1E4F1FA48], 0.0);
  switch(ValueAsInt)
  {
    case 2:
      uint64_t v7 = (const void *)*((void *)this + 101);
      if (!v7) {
        return 0;
      }
      if (!v8) {
        return 0;
      }
      return TXTranscriptionGenerator::charIndexToBlockIndex(v8, a2);
    case 1:
      uint64_t v9 = (TXTextLayout *)*((void *)this + 101);
      return TXTextLayout::getLineIndex(v9, a2);
    case 0:
      uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 101) + 720);
      return v5();
    default:
      return 0;
  }
}

uint64_t TXSequenceBehavior::charIndexToUnitIndex(TXSequenceBehavior *this, unsigned int a2, int a3)
{
  switch(a3)
  {
    case 0:
    case 5:
      int v4 = (TXTextLayout *)*((void *)this + 101);
      uint64_t result = TXTextLayout::getComposedCharacterIndex(v4, a2);
      break;
    case 1:
      uint64_t v6 = (TXTextLayout *)*((void *)this + 101);
      uint64_t result = TXTextLayout::getComposedCharacterIndexWithoutSpaces(v6, a2);
      break;
    case 2:
      uint64_t v7 = *(uint64_t (**)(void))(**((void **)this + 101) + 720);
      uint64_t result = v7();
      break;
    case 3:
      int v8 = (TXTextLayout *)*((void *)this + 101);
      uint64_t result = TXTextLayout::getLineIndex(v8, a2);
      break;
    case 6:
      uint64_t v9 = (const void *)*((void *)this + 101);
      if (!v9) {
        goto LABEL_19;
      }
      if (!v10) {
        goto LABEL_19;
      }
      uint64_t result = TXTranscriptionGenerator::charIndexToBlockIndex(v10, a2);
      break;
    default:
LABEL_19:
      uint64_t result = 0;
      break;
  }
  return result;
}

double TXSequenceBehavior::computeStartTimeForLine(uint64_t a1, int a2, unsigned int a3, int a4, void *a5, double *a6, double a7)
{
  double v13 = *(double *)(*a5 + 48 * a2 + 8);
  unsigned int v14 = (const CMTime *)MEMORY[0x1E4F1FA48];
  double v15 = 0.0;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 29360), MEMORY[0x1E4F1FA48], 0.0);
  int v17 = OZChannel::getValueAsInt((OZChannel *)(a1 + 29768), v14, 0.0);
  int v18 = TXSequenceBehavior::charIndexToTriggerIndex((TXSequenceBehavior *)a1, a3);
  int v19 = OZChannel::getValueAsInt((OZChannel *)(a1 + 29616), v14, 0.0);
  if (ValueAsInt == 1)
  {
    int v20 = v19 + v18;
    if (v19 + v18 >= *(_DWORD *)(*(void *)(a1 + 808) + 19324))
    {
      if (a4)
      {
        return v13 + a7;
      }
      else if (a6)
      {
        int v21 = OZChannel::getValueAsInt((OZChannel *)(a1 + 28112), MEMORY[0x1E4F1FA48], 0.0);
        double v22 = 1.0;
        if (v21 != 1) {
          double v22 = 0.0;
        }
        *a6 = v22;
      }
    }
    else if (*(double *)(*a5 + 48 * v20 + 8) {
            + (*(double *)(*a5 + 48 * v20 + 8) + *(double *)(*a5 + 48 * v20 + 16) - *(double *)(*a5 + 48 * v20 + 8))
    }
            * (double)v17 <= v13 + a7)
    {
      return *(double *)(*a5 + 48 * v20 + 8)
           + (*(double *)(*a5 + 48 * v20 + 8) + *(double *)(*a5 + 48 * v20 + 16) - *(double *)(*a5 + 48 * v20 + 8))
           * (double)v17;
    }
    else
    {
      return v13 + a7;
    }
  }
  return v15;
}

double TXSequenceBehavior::computeStartTimeForAll(uint64_t a1, uint64_t a2, CMTime *a3, uint64_t a4, double *a5)
{
  int v8 = *(const void **)(a1 + 808);
  if (v8) {
  else
  }
    uint64_t v9 = 0;
  uint64_t v10 = (const CMTime *)MEMORY[0x1E4F1FA48];
  double v11 = 0.0;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 33056), MEMORY[0x1E4F1FA48], 0.0);
  int v13 = OZChannel::getValueAsInt((OZChannel *)(a1 + 29768), v10, 0.0);
  uint64_t v14 = *(void *)(a1 + 808);
  uint64_t v15 = *(int *)(v14 + 19324);
  if (*(_DWORD *)(v14 + 63804) + (int)v15 > ValueAsInt)
  {
    int v16 = v13;
    uint64_t v17 = v15 + (int)OZChannel::getValueAsInt((OZChannel *)(a1 + 29616), MEMORY[0x1E4F1FA48], 0.0);
    unint64_t v18 = v17 - 1;
    if ((int)v17 - 1 < (int)v15)
    {
      ActiveTranscriptionByLine = (void *)TXTranscriptionGenerator::getActiveTranscriptionByLine(v9, a3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(ActiveTranscriptionByLine[1] - *ActiveTranscriptionByLine) >> 4) > v18) {
        return *(double *)(*ActiveTranscriptionByLine + 48 * v18 + 8)
      }
             + (*(double *)(*ActiveTranscriptionByLine + 48 * v18 + 8)
              + *(double *)(*ActiveTranscriptionByLine + 48 * v18 + 16)
              - *(double *)(*ActiveTranscriptionByLine + 48 * v18 + 8))
             * (double)v16;
    }
  }
  if (a5)
  {
    int v20 = OZChannel::getValueAsInt((OZChannel *)(a1 + 28112), MEMORY[0x1E4F1FA48], 0.0);
    double v21 = 1.0;
    if (v20 != 1) {
      double v21 = 0.0;
    }
    *a5 = v21;
  }
  return v11;
}

double TXSequenceBehavior::computeEndTime(TXSequenceBehavior *this, double a2, CMTime *a3, int a4)
{
  (*(void (**)(TXSequenceBehavior *))(*(void *)this + 352))(this);
  double v8 = 0.0;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v9 = TXSequenceBehavior::charIndexToUnitIndex(this, a2, ValueAsInt);
  uint64_t v10 = (void *)*((void *)this + 101);
  if (v10) {
  TranscriptionByUnit = TXTranscriptionGenerator::getTranscriptionByUnit((TXTranscriptionGenerator *)v10, &ValueAsInt);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)TranscriptionByUnit[1] - (unsigned char *)*TranscriptionByUnit) >> 4) > (int)v9)
  {
    unsigned int v12 = (uint64_t *)TranscriptionByUnit;
    Lifespauint64_t n = TXSequenceBehavior::getLifespan(this, TranscriptionByUnit, v9);
    double started = TXSequenceBehavior::computeStartTime((uint64_t)this, a2, a3, v12, v9, 0, Lifespan);
    memset(&v22, 0, sizeof(v22));
    uint64_t v15 = (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v15 + 336), (__n128 *)&v21);
    int32_t v16 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 29208), MEMORY[0x1E4F1FA48], 0.0);
    operator*(&v21, v16, &v22);
    CMTime v20 = v22;
    double v17 = started + CMTimeGetSeconds(&v20);
    if (a4) {
      double v18 = 0.0;
    }
    else {
      double v18 = Lifespan;
    }
    return v17 - v18;
  }
  return v8;
}

double TXSequenceBehavior::getLifespan(void *a1, void *a2, int a3)
{
  uint64_t v6 = (const void *)a1[101];
  if (v6) {
  else
  }
    uint64_t v7 = 0;
  double v8 = 0.0;
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)v7 + 425, MEMORY[0x1E4F1FA48], 0.0);
  if (ValueAsInt == 1)
  {
    uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), (__n128 *)&v13);
    int32_t v11 = OZChannel::getValueAsInt((OZChannel *)(v7 + 64856), MEMORY[0x1E4F1FA48], 0.0);
    operator*(&v13, v11, &time);
    return CMTimeGetSeconds(&time);
  }
  else if (!ValueAsInt && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 4) > a3)
  {
    return *(double *)(*a2 + 48 * a3 + 16);
  }
  return v8;
}

double TXSequenceBehavior::computeStartTime(uint64_t a1, uint64_t a2, CMTime *a3, uint64_t *a4, uint64_t a5, double *a6, double a7)
{
  CMTime time = *a3;
  double Seconds = CMTimeGetSeconds(&time);
  int v16 = OZChannel::getValueAsInt((OZChannel *)(a1 + 28368), MEMORY[0x1E4F1FA48], 0.0) - 2;
  double v17 = 0.0;
  uint64_t v18 = *a4;
  double v19 = *(double *)(*a4 + 48 * (int)a5 + 8);
  switch(v16)
  {
    case 0:
      TXSequenceBehavior::computeStartTimeForWord(a1, a5, a2, a3, 0, (uint64_t)a4, a6);
      goto LABEL_5;
    case 1:
      double started = TXSequenceBehavior::computeStartTimeForLine(a1, a5, a2, Seconds - v19 > a7, a4, a6, a7);
      goto LABEL_5;
    case 2:
      double started = TXSequenceBehavior::computeStartTimeForAll(a1, 0, a3, v15, a6);
LABEL_5:
      double v17 = started;
      break;
    case 4:
      double v21 = *(double *)(v18 + 8);
      double v22 = v21 + *(double *)(v18 + 16);
      int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 29768), MEMORY[0x1E4F1FA48], 0.0);
      if (v21 + (v22 - v21) * (double)ValueAsInt <= v19 + a7) {
        double v17 = v21 + (v22 - v21) * (double)ValueAsInt;
      }
      else {
        double v17 = v19 + a7;
      }
      break;
    default:
      break;
  }
  memset(&v32, 0, sizeof(v32));
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v24 + 336), (__n128 *)&v31);
  CMTime v25 = (const CMTime *)MEMORY[0x1E4F1FA48];
  int32_t v26 = OZChannel::getValueAsInt((OZChannel *)(a1 + 29208), MEMORY[0x1E4F1FA48], 0.0);
  operator*(&v31, v26, &v32);
  CMTime v30 = v32;
  double v27 = CMTimeGetSeconds(&v30);
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 29768), v25, 0.0) == 1) {
    double v28 = v27;
  }
  else {
    double v28 = 0.0;
  }
  return v17 - v28;
}

void TXSequenceBehavior::deactivateSegmentsIfNecessary(TXSequenceBehavior *this, OZChannel *a2, double a3, int a4, int a5, double a6, CMTime *a7)
{
  double v8 = (const void *)*((void *)this + 101);
  if (v8)
  {
    if (v15)
    {
      int v16 = v15;
      int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), MEMORY[0x1E4F1FA48], 0.0);
      if (a2)
      {
        unsigned int var3 = a2->var3;
        if (var3 == 1044)
        {
          if (a3 != 1.0 || ValueAsInt) {
            return;
          }
        }
        else if (a3 != 1.0 || ValueAsInt || var3 != 1050)
        {
          return;
        }
        OZChannel::getValueAsDouble(a2, a7, 0.0);
        if (v19 == 0.0)
        {
          switch(a4)
          {
            case 6:
              unsigned int v23 = TXSequenceBehavior::charIndexToUnitIndex(this, a6, 6);
              TXTranscriptionGenerator::deactivateBlock((TXTranscriptionGenerator *)v16, v23);
              break;
            case 3:
              TXSequenceBehavior::deactivateLineSegment((TXTextLayout **)this, a6, a7, (TXTranscriptionGenerator *)v16);
              break;
            case 2:
              CMTime v20 = (const CMTime *)MEMORY[0x1E4F1FA48];
              int v21 = OZChannel::getValueAsInt((OZChannel *)(v16 + 65008), MEMORY[0x1E4F1FA48], 0.0);
              int v22 = OZChannel::getValueAsInt((OZChannel *)(v16 + 61800), v20, 0.0);
              if (v21 == 1 && v22)
              {
                TXTranscriptionGenerator::deactivateWordSegment((TXTranscriptionGenerator *)v16, a5, a7);
              }
              else
              {
                TXSequenceBehavior::deactivateLineSegmentIfLastWordFadedOut((TXTextLayout **)this, a5, a6, a7, (TXTranscriptionGenerator *)v16);
              }
              break;
          }
        }
      }
    }
  }
}

void TXSequenceBehavior::deactivateLineSegmentIfLastWordFadedOut(TXTextLayout **this, int a2, double a3, CMTime *a4, TXTranscriptionGenerator *a5)
{
  int LineIndex = TXTextLayout::getLineIndex(this[101], a3);
  if (getIndexOfLastWordInLine(LineIndex, a5, v9) == a2)
  {
    if ((a2 & 0x80000000) == 0)
    {
      int v10 = 0;
      int v11 = a2 + 1;
      do
        TXTranscriptionGenerator::deactivateWordSegment(a5, v10++, a4);
      while (v11 != v10);
    }
    TXTranscriptionGenerator::deactivateLineSegment(a5, LineIndex, a4);
  }
}

void TXSequenceBehavior::deactivateLineSegment(TXTextLayout **this, double a2, CMTime *a3, TXTranscriptionGenerator *a4)
{
  int LineIndex = TXTextLayout::getLineIndex(this[101], a2);
  int IndexOfLastWordInLine = getIndexOfLastWordInLine(LineIndex, a4, v7);
  if ((IndexOfLastWordInLine & 0x80000000) == 0)
  {
    int v9 = 0;
    int v10 = IndexOfLastWordInLine + 1;
    do
      TXTranscriptionGenerator::deactivateWordSegment(a4, v9++, a3);
    while (v10 != v9);
  }

  TXTranscriptionGenerator::deactivateLineSegment(a4, LineIndex, a3);
}

uint64_t getIndexOfLastWordInLine(int a1, TXTranscriptionGenerator *this, const CMTime *a3)
{
  if (a1 + 1 >= *((_DWORD *)this + 4831))
  {
    int v5 = (*(uint64_t (**)(TXTranscriptionGenerator *))(*(void *)this + 224))(this);
  }
  else
  {
    uint64_t v4 = TXTextLayout::lineIndexToCharIndex(this, a1 + 1);
    int v5 = (*(uint64_t (**)(TXTranscriptionGenerator *, uint64_t))(*(void *)this + 720))(this, v4);
  }
  return (v5 - 1);
}

double TXSequenceBehavior::objectIndexToPercent(TXSequenceBehavior *this, unsigned int a2)
{
  unsigned int NumObjects = TXSequenceBehavior::getNumObjects(this);
  int v5 = (OZChannel *)((char *)this + 31832);
  if (OZChannel::getValueAsInt(v5, MEMORY[0x1E4F1FA48], 0.0) == 2
    || OZChannel::getValueAsInt(v5, MEMORY[0x1E4F1FA48], 0.0) == 3)
  {
    unsigned int NumObjects = (NumObjects + 1) >> 1;
  }
  return (float)((float)a2 / (float)NumObjects);
}

double TXSequenceBehavior::getSpreadInPercent(TXSequenceBehavior *this)
{
  unsigned int NumObjects = TXSequenceBehavior::getNumObjects(this);
  isCenterAnimatiouint64_t n = TXSequenceBehavior::isCenterAnimation(this);
  char v4 = NumObjects > 1 && isCenterAnimation;
  unsigned int v5 = NumObjects >> v4;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 31680), MEMORY[0x1E4F1FA48], 0.0);
  return v6 / (double)v5;
}

BOOL TXSequenceBehavior::isCenterAnimation(TXSequenceBehavior *this)
{
  uint64_t v1 = (OZChannel *)((char *)this + 31832);
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 31832), MEMORY[0x1E4F1FA48], 0.0) == 2
      || OZChannel::getValueAsInt(v1, MEMORY[0x1E4F1FA48], 0.0) == 3;
}

void TXSequenceBehavior::getCustomSpeed(TXSequenceBehavior *this, double a2)
{
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 32800), MEMORY[0x1E4F1FA48], 0.0) == 2
    || OZChannel::getValueAsInt((OZChannel *)((char *)this + 29056), MEMORY[0x1E4F1FA48], 0.0) == 1)
  {
    CustomSpeedDuratiouint64_t n = TXSequenceBehavior::getCustomSpeedDuration(this);
  }
  else
  {
    (*(void (**)(CMTime *__return_ptr, TXSequenceBehavior *))(*(void *)this + 608))(v16, this);
    CMTime time = v16[1];
    double Seconds = CMTimeGetSeconds(&time);
    double v6 = Seconds / *(double *)((*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this) + 368);
    uint64_t v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33464), MEMORY[0x1E4F1FA48], 0.0);
    double v9 = v6 - v8;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), v7, 0.0);
    CustomSpeedDuratiouint64_t n = v9 - v10;
  }
  Float64 v11 = CustomSpeedDuration * a2;
  memset(&v15, 0, sizeof(v15));
  uint64_t v12 = (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v12 + 336), (__n128 *)&v13);
  operator*(&v13, &v14, v11);
  (*(void (**)(CMTime *__return_ptr, TXSequenceBehavior *))(*(void *)this + 608))(v16, this);
  CMTime v18 = v16[0];
  CMTime v19 = v14;
  PC_CMTimeSaferAdd(&v19, &v18, (uint64_t)&v15);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 32496), &v15, 0.0);
}

void TXSequenceBehavior::getSequenceToSelection(uint64_t a1, const CMTime *a2, int a3, char **a4, double a5)
{
  double SpreadInPercent = TXSequenceBehavior::getSpreadInPercent((TXSequenceBehavior *)a1);
  double v11 = 1.0;
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 28368), MEMORY[0x1E4F1FA48], 0.0) == 5)
  {
    TXSequenceBehavior::getSpan((TXSequenceBehavior *)a1, a2);
    double v11 = v12;
  }
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 28368), MEMORY[0x1E4F1FA48], 0.0) == 5) {
    TXSequenceBehavior::getSpan((TXSequenceBehavior *)a1, a2);
  }
  else {
    double v13 = 1.0 / (double)TXSequenceBehavior::getNumObjects((TXSequenceBehavior *)a1);
  }
  if (SpreadInPercent <= 0.0)
  {
    TXSequenceBehavior::makeSelection((TXSequenceBehavior *)a1, a2, a5, -1.0 - v13, 0.0001 - v13, v11, SpreadInPercent, a3, (uint64_t)&v45);
    CMTime v14 = a4[1];
    unint64_t v21 = (unint64_t)a4[2];
    if ((unint64_t)v14 >= v21)
    {
      uint64_t v25 = (v14 - *a4) >> 6;
      unint64_t v26 = v25 + 1;
      if (!((unint64_t)(v25 + 1) >> 58))
      {
        uint64_t v27 = v21 - (void)*a4;
        if (v27 >> 5 > v26) {
          unint64_t v26 = v27 >> 5;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v28 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          BOOL v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>((uint64_t)(a4 + 2), v28);
        }
        else {
          BOOL v29 = 0;
        }
        CMTime v30 = &v29[64 * v25];
        CMTime v31 = &v29[64 * v28];
        long long v39 = v46;
        *(_OWORD *)CMTime v30 = v45;
        *((_OWORD *)v30 + 1) = v39;
        long long v40 = v48;
        *((_OWORD *)v30 + 2) = v47;
        *((_OWORD *)v30 + 3) = v40;
        uint64_t v24 = v30 + 64;
        UniChar v41 = *a4;
        CMTime v34 = a4[1];
        if (v34 == *a4) {
          goto LABEL_34;
        }
        do
        {
          long long v42 = *((_OWORD *)v34 - 4);
          v34 -= 64;
          *((_OWORD *)v30 - 4) = v42;
          v30 -= 64;
          long long v43 = *((_OWORD *)v34 + 1);
          long long v44 = *((_OWORD *)v34 + 3);
          *((_OWORD *)v30 + 2) = *((_OWORD *)v34 + 2);
          *((_OWORD *)v30 + 3) = v44;
          *((_OWORD *)v30 + 1) = v43;
        }
        while (v34 != v41);
        goto LABEL_33;
      }
LABEL_37:
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
LABEL_17:
    long long v22 = v46;
    *(_OWORD *)CMTime v14 = v45;
    *((_OWORD *)v14 + 1) = v22;
    long long v23 = v48;
    *((_OWORD *)v14 + 2) = v47;
    *((_OWORD *)v14 + 3) = v23;
    uint64_t v24 = v14 + 64;
    goto LABEL_36;
  }
  TXSequenceBehavior::makeSelection((TXSequenceBehavior *)a1, a2, a5, -1.0 - SpreadInPercent, -v13, v11, SpreadInPercent, a3, (uint64_t)&v45);
  CMTime v14 = a4[1];
  unint64_t v15 = (unint64_t)a4[2];
  if ((unint64_t)v14 < v15) {
    goto LABEL_17;
  }
  uint64_t v16 = (v14 - *a4) >> 6;
  unint64_t v17 = v16 + 1;
  if ((unint64_t)(v16 + 1) >> 58) {
    goto LABEL_37;
  }
  uint64_t v18 = v15 - (void)*a4;
  if (v18 >> 5 > v17) {
    unint64_t v17 = v18 >> 5;
  }
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v19 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v17;
  }
  if (v19) {
    CMTime v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>((uint64_t)(a4 + 2), v19);
  }
  else {
    CMTime v20 = 0;
  }
  CMTime v30 = &v20[64 * v16];
  CMTime v31 = &v20[64 * v19];
  long long v32 = v46;
  *(_OWORD *)CMTime v30 = v45;
  *((_OWORD *)v30 + 1) = v32;
  long long v33 = v48;
  *((_OWORD *)v30 + 2) = v47;
  *((_OWORD *)v30 + 3) = v33;
  uint64_t v24 = v30 + 64;
  CMTime v35 = *a4;
  CMTime v34 = a4[1];
  if (v34 == *a4) {
    goto LABEL_34;
  }
  do
  {
    long long v36 = *((_OWORD *)v34 - 4);
    v34 -= 64;
    *((_OWORD *)v30 - 4) = v36;
    v30 -= 64;
    long long v37 = *((_OWORD *)v34 + 1);
    long long v38 = *((_OWORD *)v34 + 3);
    *((_OWORD *)v30 + 2) = *((_OWORD *)v34 + 2);
    *((_OWORD *)v30 + 3) = v38;
    *((_OWORD *)v30 + 1) = v37;
  }
  while (v34 != v35);
LABEL_33:
  CMTime v34 = *a4;
LABEL_34:
  *a4 = v30;
  a4[1] = v24;
  a4[2] = v31;
  if (v34) {
    operator delete(v34);
  }
LABEL_36:
  a4[1] = v24;
}

void TXSequenceBehavior::getSequenceFromSelection(uint64_t a1, const CMTime *a2, int a3, char **a4, double a5)
{
  double SpreadInPercent = TXSequenceBehavior::getSpreadInPercent((TXSequenceBehavior *)a1);
  double v11 = 1.0;
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 28368), MEMORY[0x1E4F1FA48], 0.0) == 5)
  {
    TXSequenceBehavior::getSpan((TXSequenceBehavior *)a1, a2);
    double v11 = v12;
  }
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 28368), MEMORY[0x1E4F1FA48], 0.0) == 5) {
    TXSequenceBehavior::getSpan((TXSequenceBehavior *)a1, a2);
  }
  else {
    double v13 = 1.0 / (double)TXSequenceBehavior::getNumObjects((TXSequenceBehavior *)a1);
  }
  double v14 = 0.0001 - v13;
  if (SpreadInPercent > 0.0) {
    double v14 = 0.0;
  }
  TXSequenceBehavior::makeSelection((TXSequenceBehavior *)a1, a2, a5, v14, SpreadInPercent + 1.0 - v13 + 0.0001, v11, SpreadInPercent, a3, (uint64_t)&v34);
  unint64_t v15 = (unint64_t)a4[2];
  uint64_t v16 = a4[1];
  if ((unint64_t)v16 >= v15)
  {
    uint64_t v20 = (v16 - *a4) >> 6;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 58) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = v15 - (void)*a4;
    if (v22 >> 5 > v21) {
      unint64_t v21 = v22 >> 5;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v23 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23) {
      uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>((uint64_t)(a4 + 2), v23);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = &v24[64 * v20];
    unint64_t v26 = &v24[64 * v23];
    long long v27 = v35;
    *(_OWORD *)uint64_t v25 = v34;
    *((_OWORD *)v25 + 1) = v27;
    long long v28 = v37;
    *((_OWORD *)v25 + 2) = v36;
    *((_OWORD *)v25 + 3) = v28;
    unint64_t v19 = v25 + 64;
    CMTime v30 = *a4;
    BOOL v29 = a4[1];
    if (v29 != *a4)
    {
      do
      {
        long long v31 = *((_OWORD *)v29 - 4);
        v29 -= 64;
        *((_OWORD *)v25 - 4) = v31;
        v25 -= 64;
        long long v32 = *((_OWORD *)v29 + 1);
        long long v33 = *((_OWORD *)v29 + 3);
        *((_OWORD *)v25 + 2) = *((_OWORD *)v29 + 2);
        *((_OWORD *)v25 + 3) = v33;
        *((_OWORD *)v25 + 1) = v32;
      }
      while (v29 != v30);
      BOOL v29 = *a4;
    }
    *a4 = v25;
    a4[1] = v19;
    a4[2] = v26;
    if (v29) {
      operator delete(v29);
    }
  }
  else
  {
    long long v17 = v35;
    *(_OWORD *)uint64_t v16 = v34;
    *((_OWORD *)v16 + 1) = v17;
    long long v18 = v37;
    *((_OWORD *)v16 + 2) = v36;
    *((_OWORD *)v16 + 3) = v18;
    unint64_t v19 = v16 + 64;
  }
  a4[1] = v19;
}

void TXSequenceBehavior::getSequenceThroughSelection(uint64_t a1, const CMTime *a2, int a3, char **a4, double a5)
{
  double v10 = (const CMTime *)MEMORY[0x1E4F1FA48];
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 33208), MEMORY[0x1E4F1FA48], 0.0);
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 28368), v10, 0.0) == 5)
  {
    TXSequenceBehavior::getSpan((TXSequenceBehavior *)a1, a2);
    double v13 = v12;
  }
  else
  {
    double v13 = 1.0 / (double)TXSequenceBehavior::getNumObjects((TXSequenceBehavior *)a1);
  }
  double SpreadInPercent = TXSequenceBehavior::getSpreadInPercent((TXSequenceBehavior *)a1);
  double v15 = 1.0;
  if (ValueAsInt == 1) {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 32648), MEMORY[0x1E4F1FA48], 0.0);
  }
  if (SpreadInPercent <= 0.0)
  {
    double v16 = -0.0001 - v13;
    double v17 = v15 - v13 + 0.0001;
  }
  else
  {
    double v16 = -v13 - SpreadInPercent;
    double v17 = v15 - v13;
  }
  TXSequenceBehavior::makeSelection((TXSequenceBehavior *)a1, a2, a5, v16, SpreadInPercent + v17, v13, SpreadInPercent, a3, (uint64_t)v41);
  uint64_t v18 = v41[0];
  uint64_t v19 = v41[1];
  long long v46 = v42;
  long long v47 = v43;
  uint64_t v20 = v44;
  uint64_t v21 = v45;
  if (ValueAsInt == 1)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 32648), MEMORY[0x1E4F1FA48], 0.0);
    uint64_t v20 = v22;
  }
  unint64_t v23 = (unint64_t)a4[2];
  unint64_t v24 = (unint64_t)a4[1];
  if (v24 >= v23)
  {
    uint64_t v27 = (uint64_t)(v24 - (void)*a4) >> 6;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 58) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v29 = v23 - (void)*a4;
    if (v29 >> 5 > v28) {
      unint64_t v28 = v29 >> 5;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v30 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    long long v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>((uint64_t)(a4 + 2), v30);
    long long v32 = &v31[64 * v27];
    long long v34 = &v31[64 * v33];
    *(void *)long long v32 = v18;
    *((void *)v32 + 1) = v19;
    long long v35 = v47;
    *((_OWORD *)v32 + 1) = v46;
    *((_OWORD *)v32 + 2) = v35;
    *((void *)v32 + 6) = v20;
    *((void *)v32 + 7) = v21;
    unint64_t v26 = v32 + 64;
    long long v37 = *a4;
    long long v36 = a4[1];
    if (v36 != *a4)
    {
      do
      {
        long long v38 = *((_OWORD *)v36 - 4);
        v36 -= 64;
        *((_OWORD *)v32 - 4) = v38;
        v32 -= 64;
        long long v39 = *((_OWORD *)v36 + 1);
        long long v40 = *((_OWORD *)v36 + 3);
        *((_OWORD *)v32 + 2) = *((_OWORD *)v36 + 2);
        *((_OWORD *)v32 + 3) = v40;
        *((_OWORD *)v32 + 1) = v39;
      }
      while (v36 != v37);
      long long v36 = *a4;
    }
    *a4 = v32;
    a4[1] = v26;
    a4[2] = v34;
    if (v36) {
      operator delete(v36);
    }
  }
  else
  {
    *(void *)unint64_t v24 = v18;
    *(void *)(v24 + 8) = v19;
    long long v25 = v47;
    *(_OWORD *)(v24 + 16) = v46;
    *(_OWORD *)(v24 + 32) = v25;
    *(void *)(v24 + 48) = v20;
    *(void *)(v24 + 56) = v21;
    unint64_t v26 = (char *)(v24 + 64);
  }
  a4[1] = v26;
}

__n128 TXSequenceBehavior::makeSelection@<Q0>(TXSequenceBehavior *this@<X0>, const CMTime *a2@<X1>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, int a8@<W2>, uint64_t a9@<X8>)
{
  if (a8) {
    double v14 = a5;
  }
  else {
    double v14 = a4;
  }
  if (!a8) {
    a4 = a5;
  }
  double v15 = v14 + (a4 - v14) * a3;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E4F1FA48], 0.0) == 5)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 28624), a2, 0.0);
    double v15 = v15 + v16;
  }
  *(double *)a9 = v15;
  *(double *)(a9 + 8) = a6;
  *(_OWORD *)(a9 + 16) = xmmword_1B7E733E0;
  *(double *)(a9 + 32) = a7;
  *(unsigned char *)(a9 + 40) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(__n128 *)(a9 + 48) = result;
  return result;
}

void TXSequenceBehavior::getSpan(TXSequenceBehavior *this, const CMTime *a2)
{
}

void TXSequenceBehavior::notify(TXSequenceBehavior *this, char a2)
{
  if ((a2 & 8) != 0)
  {
    uint64_t v3 = *((void *)this + 101);
    if (v3)
    {
      char v4 = (OZScene *)(*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
      uint64_t v5 = *((void *)v4 + 198);
      double v6 = *(OZNotificationManager **)(v5 + 168);
      if (v6)
      {
        if (OZNotificationManager::wasChannelModified(v6, (const OZChannelBase *)((char *)this + 3768))) {
          goto LABEL_7;
        }
        uint64_t v7 = *(OZNotificationManager **)(v5 + 168);
        if (!v7) {
          return;
        }
        if (OZNotificationManager::wasChannelModified(v7, (const OZChannelBase *)((char *)this + 3616))) {
LABEL_7:
        }
          TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)v3);
        double v8 = *(OZNotificationManager **)(v5 + 168);
        if (v8)
        {
          double v9 = (OZChannel *)((char *)this + 35472);
          if (OZNotificationManager::wasChannelModified(v8, (const OZChannelBase *)((char *)this + 35472)))
          {
            double v10 = (BOOL *)this + 36048;
            if (*((unsigned char *)this + 36048) != (OZChannel::getValueAsInt((OZChannel *)((char *)this + 35472), MEMORY[0x1E4F1FA48], 0.0) == 1))
            {
              TXTextLayout::getTextObject((TXTextLayout *)v3, *(TXTextLayout **)(v3 + 19264), &v34);
              __n128 v32 = 0uLL;
              CMTimeEpoch v33 = 0;
              OZScene::getCurrentTime(v4, &v32);
              uint64_t v11 = *(void *)(v34 + 264);
              if (v11)
              {
                double v12 = *(OZChannel **)(v11 + 8);
                double v13 = *(std::__shared_weak_count **)(v11 + 16);
                if (v13) {
                  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                double v12 = 0;
                double v13 = 0;
              }
              *(__n128 *)&v31.CMTimeValue value = v32;
              v31.CMTimeEpoch epoch = v33;
              float Size = TXTextStyle::getSize(v12, &v31, 0.0);
              if (v13) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v13);
              }
              double v15 = (char *)this + 17056;
              OZChannel::getValueAsDouble((OZChannel *)((char *)this + 17056), MEMORY[0x1E4F1FA48], 0.0);
              double v17 = v16;
              uint64_t v18 = (char *)this + 17208;
              OZChannel::getValueAsDouble((OZChannel *)((char *)this + 17208), MEMORY[0x1E4F1FA48], 0.0);
              double v20 = v19;
              uint64_t v21 = (char *)this + 1112;
              OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1112), MEMORY[0x1E4F1FA48], 0.0);
              double v23 = v22;
              unint64_t v24 = (OZChannel *)((char *)this + 1264);
              OZChannel::getValueAsDouble(v24, MEMORY[0x1E4F1FA48], 0.0);
              double v26 = v25;
              int ValueAsInt = OZChannel::getValueAsInt(v9, MEMORY[0x1E4F1FA48], 0.0);
              double v28 = Size;
              uint64_t v29 = *(void (**)(char *, void, uint64_t, double))(*(void *)v15 + 712);
              if (ValueAsInt == 1)
              {
                v29(v15, MEMORY[0x1E4F1FA48], 1, v17 * 100.0 / v28);
                (*(void (**)(char *, void, uint64_t, double))(*(void *)v18 + 712))(v18, MEMORY[0x1E4F1FA48], 1, v20 * 100.0 / v28);
                double v30 = 100.0;
                (*(void (**)(char *, void, uint64_t, double))(*(void *)v21 + 712))(v21, MEMORY[0x1E4F1FA48], 1, v23 * 100.0 / v28);
              }
              else
              {
                v29(v15, MEMORY[0x1E4F1FA48], 1, v17 * v28 / 100.0);
                (*(void (**)(char *, void, uint64_t, double))(*(void *)v18 + 712))(v18, MEMORY[0x1E4F1FA48], 1, v20 * v28 / 100.0);
                (*(void (**)(char *, void, uint64_t, double))(*(void *)v21 + 712))(v21, MEMORY[0x1E4F1FA48], 1, v23 * v28 / 100.0);
                double v30 = v28;
                double v28 = 100.0;
              }
              (*((void (**)(OZChannel *, void, uint64_t, double))v24->var0 + 89))(v24, MEMORY[0x1E4F1FA48], 1, v26 * v30 / v28);
              BOOL *v10 = OZChannel::getValueAsInt(v9, MEMORY[0x1E4F1FA48], 0.0) == 1;
              if (v35) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v35);
              }
            }
          }
        }
      }
    }
  }
}

void sub_1B766A64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'TXSequenceBehavior::notify(TXSequenceBehavior *this, char a2)
{
}

char *TXSequenceBehavior::finishInitializing(TXSequenceBehavior *this)
{
  OZChannelFolder::finishInitializing((OZChannelFolder *)((char *)this + 56));

  return TXSequenceBehavior::updateUnitsChannel(this);
}

uint64_t TXSequenceBehavior::arAddToUndo(TXSequenceBehavior *this, const PCString *a2)
{
  return (*(uint64_t (**)(void))(*((void *)this + 2) + 176))();
}

uint64_t non-virtual thunk to'TXSequenceBehavior::arAddToUndo(TXSequenceBehavior *this, const PCString *a2)
{
  return (*(uint64_t (**)(char *, const PCString *))(*((void *)this - 65) + 176))((char *)this - 520, a2);
}

uint64_t TXSequenceBehavior::arAddChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  (*((void (**)(OZChannelBase *, void))a2->var0 + 36))(a2, 0);
  uint64_t result = (*(uint64_t (**)(TXSequenceBehavior *, OZChannelBase *))(*(void *)this + 680))(this, a2);
  if (a2->var3 == 1031)
  {
    Channel = TXSequenceChannels::findChannel((TXSequenceBehavior *)((char *)this + 816), 1032, 0, 0);
    double v6 = *(uint64_t (**)(TXSequenceBehavior *, unsigned char *))(*(void *)this + 680);
    return v6(this, Channel);
  }
  return result;
}

uint64_t non-virtual thunk to'TXSequenceBehavior::arAddChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return TXSequenceBehavior::arAddChannel((TXSequenceBehavior *)((char *)this - 536), a2);
}

uint64_t TXSequenceBehavior::arRemoveChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  (*((void (**)(OZChannelBase *, void))a2->var0 + 36))(a2, 0);
  uint64_t result = (*(uint64_t (**)(TXSequenceBehavior *, OZChannelBase *))(*(void *)this + 696))(this, a2);
  if (a2->var3 == 1031)
  {
    Channel = TXSequenceChannels::findChannel((TXSequenceBehavior *)((char *)this + 816), 1032, 0, 0);
    double v6 = *(uint64_t (**)(TXSequenceBehavior *, unsigned char *))(*(void *)this + 696);
    return v6(this, Channel);
  }
  return result;
}

uint64_t non-virtual thunk to'TXSequenceBehavior::arRemoveChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return TXSequenceBehavior::arRemoveChannel((TXSequenceBehavior *)((char *)this - 536), a2);
}

void *TXSequenceBehavior::arGetChannelList(uint64_t a1, char **a2)
{
  TXSequenceChannels::getChannelList(a1 + 816, a2);
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
  if (result && *(_DWORD *)(result[198] + 324) == 1)
  {
    double v6 = *a2;
    uint64_t v5 = a2[1];
    if (*a2 != v5)
    {
      while (*(void *)v6 != a1 + 26816)
      {
        v6 += 8;
        if (v6 == v5)
        {
          double v6 = a2[1];
          break;
        }
      }
    }
    if (v6 != v5)
    {
      int64_t v7 = v5 - (v6 + 8);
      if (v5 != v6 + 8) {
        uint64_t result = memmove(v6, v6 + 8, v5 - (v6 + 8));
      }
      a2[1] = &v6[v7];
    }
  }
  return result;
}

void *non-virtual thunk to'TXSequenceBehavior::arGetChannelList(uint64_t a1, char **a2)
{
  return TXSequenceBehavior::arGetChannelList(a1 - 536, a2);
}

uint64_t TXSequenceBehavior::arGetObjectManipulator(TXSequenceBehavior *this)
{
  uint64_t v1 = (OZChannelBase *)(*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 312))(this);

  return OZChannelBase::getObjectManipulator(v1);
}

uint64_t non-virtual thunk to'TXSequenceBehavior::arGetObjectManipulator(TXSequenceBehavior *this)
{
  uint64_t v1 = (OZChannelBase *)(*(uint64_t (**)(char *))(*((void *)this - 67) + 312))((char *)this - 536);

  return OZChannelBase::getObjectManipulator(v1);
}

BOOL TXSequenceBehavior::arHideChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  if (a2->var3 == 1032) {
    return 1;
  }
  uint64_t v3 = *((void *)this + 101);
  if (v3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 296))(v3)) {
      return ((a2->var3 - 1007) & 0xFFFFFFFB) == 0;
    }
    unint64_t var1 = a2->var1;
    long long v6 = xmmword_1B7E7AC20;
    if (OZFactory::isKindOfClass((unint64_t)var1, (int32x4_t *)&v6)) {
      return 1;
    }
  }
  return 0;
}

BOOL non-virtual thunk to'TXSequenceBehavior::arHideChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return TXSequenceBehavior::arHideChannel((TXSequenceBehavior *)((char *)this - 536), a2);
}

BOOL TXSequenceBehavior::arDisableChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return a2->var3 == 9998;
}

BOOL non-virtual thunk to'TXSequenceBehavior::arDisableChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return a2->var3 == 9998;
}

uint64_t TXSequenceBehavior::arAddSeparatorAfterChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return (a2->var3 - 1000 < 0x2F) & (0x400000100001uLL >> (LOBYTE(a2->var3) + 24));
}

uint64_t non-virtual thunk to'TXSequenceBehavior::arAddSeparatorAfterChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return (a2->var3 - 1000 < 0x2F) & (0x400000100001uLL >> (LOBYTE(a2->var3) + 24));
}

uint64_t TXSequenceBehavior::getLockDependencies(uint64_t result, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7 = result;
  double v8 = (uint64_t *)(result + 544);
  for (unint64_t i = *(void **)(a4 + 8); i; unint64_t i = (void *)*i)
  {
    unint64_t v10 = i[4];
    if ((unint64_t)v8 >= v10)
    {
      if (v10 >= (unint64_t)v8) {
        return result;
      }
      ++i;
    }
  }
  double v13 = (unint64_t *)(result + 544);
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, (unint64_t *)&v13, (uint64_t *)&v13);
  if (a2)
  {
    PCDirectedGraph<OZLocking *>::addEdge(a3, a2, (uint64_t)v8);
  }
  else
  {
    double v12 = v8;
    double v13 = (unint64_t *)&v12;
    std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::__emplace_unique_key_args<OZLocking *,std::piecewise_construct_t const&,std::tuple<OZLocking * const&>,std::tuple<>>(a3, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v13);
  }
  uint64_t v11 = *(void *)(v7 + 808);
  if (v11) {
    OZLocking::getLockDependenciesForElement((char *)(v11 + 200), (unint64_t)v8, a3, a4);
  }
  double v13 = (unint64_t *)v8;
  return std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)&v13);
}

uint64_t *PCDirectedGraph<OZLocking *>::addEdge(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  uint64_t v7 = &v6;
  uint64_t v3 = std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::__emplace_unique_key_args<OZLocking *,std::piecewise_construct_t const&,std::tuple<OZLocking * const&>,std::tuple<>>(a1, &v6, (uint64_t)&std::piecewise_construct, (uint64_t **)&v7);
  return std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)v3 + 5, (unint64_t *)&v5, &v5);
}

uint64_t non-virtual thunk to'TXSequenceBehavior::getLockDependencies(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  return TXSequenceBehavior::getLockDependencies(a1 - 544, a2, a3, a4);
}

uint64_t TXSequenceBehavior::getLockingGroups(TXSequenceBehavior *this)
{
  uint64_t result = (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this);
  if (result) {
    return (*(uint64_t (**)(TXSequenceBehavior *))(*(void *)this + 336))(this) + 1784;
  }
  return result;
}

uint64_t non-virtual thunk to'TXSequenceBehavior::getLockingGroups(TXSequenceBehavior *this)
{
  uint64_t v1 = (char *)this - 544;
  uint64_t result = (*(uint64_t (**)(char *))(*((void *)this - 68) + 336))((char *)this - 544);
  if (result) {
    return (*(uint64_t (**)(char *))(*(void *)v1 + 336))(v1) + 1784;
  }
  return result;
}

void TXSequenceCurveNode::~TXSequenceCurveNode(TXSequenceCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

void TXSequenceCurveNode::solveNode(TXSequenceCurveNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v7 = (TXSequenceBehavior *)*((void *)this + 4);
  (*(void (**)(CMTime *__return_ptr))(**((void **)this + 2) + 336))(&v8);
  TXSequenceBehavior::getValue(v7, &v8, a3, *((OZChannel **)this + 5), a4);
}

uint64_t OZBehavior::willBake(uint64_t result)
{
  *(unsigned char *)(result + 320) = 1;
  return result;
}

uint64_t OZBehavior::didBake(uint64_t this)
{
  *(unsigned char *)(this + 320) = 0;
  return this;
}

void OZBehavior::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
}

void *OZBehavior::updateReferenceIDs(uint64_t a1, void *a2)
{
  return OZChannelObjectRoot::updateReferenceIDs((void *)(a1 + 56), a2);
}

void non-virtual thunk to'OZBehavior::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
}

void *non-virtual thunk to'OZBehavior::updateReferenceIDs(uint64_t a1, void *a2)
{
  return OZChannelObjectRoot::updateReferenceIDs((void *)(a1 + 40), a2);
}

uint64_t non-virtual thunk to'TXSequenceBehavior::getLockingID(TXSequenceBehavior *this)
{
  return *((unsigned int *)this - 116);
}

void OZChannelUint32::OZChannelUint32(OZChannelUint32 *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZChannelUint32_FactoryBase = (OZFactory *)getOZChannelUint32_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelUint32_FactoryBase, a3, a4, a5, a6, a7, a8);
  this->CMTime var0 = (void **)&unk_1F1101490;
  this->var2 = (void **)&unk_1F11017F0;
  OZChannelUint32Info = (OZChannelUint32 *)OZChannelUint32::createOZChannelUint32Info(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelUint32::_OZChannelUint32Info;
    this->var17 = (OZChannelInfo *)OZChannelUint32::_OZChannelUint32Info;
  }
  this->var16 = var17;
  OZChannelUint32::createOZChannelUint32Impl(OZChannelUint32Info);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelUint32::_OZChannelUint32Impl;
    this->var15 = (OZChannelImpl *)OZChannelUint32::_OZChannelUint32Impl;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, a2);
  OZChannel::setInitialValue((OZChannel *)this, a2, 0);
}

void sub_1B766B054(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

long double PCRandom::noise(PCRandom *this, double a2, double a3, unsigned int a4, int a5, double a6, double a7)
{
  double v7 = a6;
  int v8 = -1640531527;
  double v9 = (a3 + a3) * a2;
  double v10 = (a7 + a7) * a2;
  int v11 = (int)v9;
  if ((a5 & 0xFFFFFFFD) != 0 || (v11 ? (v12 = v9 < v10) : (v12 = 0), double v13 = a6, v12))
  {
    int v14 = -32;
    int v15 = -1640531527;
    unsigned int v16 = this;
    unsigned int v17 = a4;
    do
    {
      v16 += (v11 + 16 * v17) ^ (v15 + v17) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                             + (v17 >> 5));
      v17 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v16) ^ (v15 + v16) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v16 >> 5));
      v15 -= 1640531527;
      BOOL v18 = __CFADD__(v14++, 1);
    }
    while (!v18);
    double v13 = (double)(int)(v17 ^ v16) / 2147483650.0;
  }
  if ((a5 - 3) < 0xFFFFFFFE || ceil(v9) < v10)
  {
    int v21 = -32;
    do
    {
      LODWORD(this) = ((v11 + 1 + 16 * a4) ^ (v8 + a4) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                        + (a4 >> 5)))
                    + this;
      a4 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * this) ^ (v8 + this) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (this >> 5));
      v8 -= 1640531527;
      BOOL v18 = __CFADD__(v21++, 1);
    }
    while (!v18);
    double v7 = (double)(int)(a4 ^ this) / 2147483650.0;
    double v19 = (double)v11;
    double v20 = 1.0;
  }
  else
  {
    double v19 = (double)v11;
    double v20 = v10 - (double)v11;
  }
  long double v22 = cos((v9 - v19) / v20 * 3.14159265);
  return v7 * ((1.0 - v22) * 0.5) + v13 * (1.0 - (1.0 - v22) * 0.5);
}

uint64_t *std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    double v10 = (uint64_t *)operator new(0x28uLL);
    _OWORD v10[4] = *a3;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t *std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::__emplace_unique_key_args<OZLocking *,std::piecewise_construct_t const&,std::tuple<OZLocking * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    int v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    v11[7] = 0;
    v11[6] = 0;
    void v11[4] = v12;
    v11[5] = (uint64_t)(v11 + 6);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t std::__tree<OZLocking *>::__erase_unique<OZLocking *>(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  char v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v2 + 1;
    }
    if (v6) {
      char v4 = v2;
    }
    unint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

void TXHelperFunctions::GetTextObjectContainingCharIndex(TXHelperFunctions *this@<X0>, TXTextLayout *a2@<X1>, int a3@<W2>, unint64_t *a4@<X3>, void *a5@<X8>)
{
  int v11 = (void *)((char *)this + 58824);
  if (a3 && Li3DEngineScene::sceneManager(this))
  {
    uint64_t v12 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
    OZLockingGroup::acquireReadLocks(v12);
  }
  *a5 = 0;
  a5[1] = 0;
  if (a4)
  {
    double v13 = (void *)*v11;
    uint64_t v14 = v11[1] - *v11;
    if (v14)
    {
      unint64_t v15 = v14 >> 4;
      unint64_t v16 = *a4;
      if ((unint64_t)(v14 >> 4) <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v14 >> 4;
      }
      unint64_t v18 = v16 + v15;
      while (1)
      {
        unint64_t v19 = v16 % v15;
        uint64_t v20 = v13[2 * (v16 % v15)];
        unint64_t v21 = *(unsigned int *)(v20 + 736);
        if (v21 <= (unint64_t)a2 && (*(_DWORD *)(v20 + 740) + v21) > (unint64_t)a2) {
          break;
        }
        unint64_t v19 = v18 % v15;
        uint64_t v20 = v13[2 * (v18 % v15)];
        unint64_t v23 = *(unsigned int *)(v20 + 736);
        if (v23 <= (unint64_t)a2 && (*(_DWORD *)(v20 + 740) + v23) > (unint64_t)a2) {
          break;
        }
        ++v16;
        --v18;
        if (!--v17) {
          goto LABEL_19;
        }
      }
      uint64_t v30 = v13[2 * v19 + 1];
      if (v30) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
      }
      *a5 = v20;
      a5[1] = v30;
      goto LABEL_33;
    }
  }
LABEL_19:
  double v25 = (void *)*v11;
  double v26 = (void *)v11[1];
  if ((void *)*v11 != v26)
  {
    unint64_t v19 = 0;
    while (1)
    {
      uint64_t v27 = *v25;
      unint64_t v28 = *(unsigned int *)(*v25 + 736);
      if (v28 <= (unint64_t)a2 && (*(_DWORD *)(*v25 + 740) + v28) > (unint64_t)a2) {
        break;
      }
      ++v19;
      v25 += 2;
      if (v25 == v26) {
        goto LABEL_34;
      }
    }
    uint64_t v31 = v25[1];
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
    *a5 = v27;
    a5[1] = v31;
    if (a4) {
LABEL_33:
    }
      *a4 = v19;
  }
LABEL_34:
  if (a3)
  {
    if (Li3DEngineScene::sceneManager(this))
    {
      __n128 v32 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
      OZLockingGroup::releaseReadLocks(v32);
    }
  }
}

void sub_1B766B598(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void TXHelperFunctions::SetCaretMovementMap(uint64_t a1, uint64_t *a2)
{
  uint64_t v29 = 0;
  __dst = 0;
  uint64_t v31 = 0;
  uint64_t v2 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    int v7 = *(_DWORD *)(a1 + 960);
    while (1)
    {
      double v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(&v26, *(const void **)(v2 + 24 * v5), *(void *)(v2 + 24 * v5 + 8), (uint64_t)(*(void *)(v2 + 24 * v5 + 8) - *(void *)(v2 + 24 * v5)) >> 3);
      unint64_t v8 = (char *)v26;
      unint64_t v9 = v27;
      if (v27 != v26) {
        break;
      }
      unint64_t v21 = (v27 - (unsigned char *)v26) >> 3;
LABEL_27:
      std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>((uint64_t)&v29, (uint64_t)__dst, v8, v9, v21);
      if (v26)
      {
        uint64_t v27 = (char *)v26;
        operator delete(v26);
      }
      uint64_t v2 = *a2;
      uint64_t v5 = ++v6;
      if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v6)
      {
        if (v29)
        {
          __dst = v29;
          operator delete(v29);
        }
        return;
      }
    }
    uint64_t v10 = 0;
    unint64_t v11 = v6 + 1;
    unsigned int v12 = v6 - 1;
    unsigned int v13 = 1;
    while (1)
    {
      unint64_t v14 = *(void *)&v8[8 * v10];
      if (v13 != 1)
      {
        uint64_t v16 = *(void *)&v8[8 * v13 - 16];
        goto LABEL_15;
      }
      if (v7)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) < v6 + 2) {
          goto LABEL_14;
        }
        uint64_t v15 = *a2 + 24 * v11;
        __p = 0;
        unint64_t v24 = 0;
        uint64_t v25 = 0;
        std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(&__p, *(const void **)v15, *(void *)(v15 + 8), (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3);
      }
      else
      {
        if (!v6)
        {
LABEL_14:
          uint64_t v16 = 0xFFFFFFFFLL;
          goto LABEL_15;
        }
        uint64_t v17 = *a2 + 24 * v12;
        unint64_t v24 = 0;
        uint64_t v25 = 0;
        __p = 0;
        std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(&__p, *(const void **)v17, *(void *)(v17 + 8), (uint64_t)(*(void *)(v17 + 8) - *(void *)v17) >> 3);
      }
      uint64_t v16 = *(v24 - 1);
      if (__p)
      {
        unint64_t v24 = __p;
        operator delete(__p);
      }
LABEL_15:
      if (((v27 - (unsigned char *)v26) >> 3) - 1 == v10)
      {
        if (v7)
        {
          if (!v6) {
            goto LABEL_23;
          }
          uint64_t v18 = *a2 + 24 * v12;
          unint64_t v24 = 0;
          uint64_t v25 = 0;
          __p = 0;
          std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(&__p, *(const void **)v18, *(void *)(v18 + 8), (uint64_t)(*(void *)(v18 + 8) - *(void *)v18) >> 3);
        }
        else
        {
          uint64_t v20 = *a2;
          if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v11)
          {
LABEL_23:
            uint64_t v19 = 0xFFFFFFFFLL;
            goto LABEL_24;
          }
          __p = 0;
          unint64_t v24 = 0;
          uint64_t v25 = 0;
          std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(&__p, *(const void **)(v20 + 24 * v11), *(void *)(v20 + 24 * v11 + 8), (uint64_t)(*(void *)(v20 + 24 * v11 + 8) - *(void *)(v20 + 24 * v11)) >> 3);
        }
        uint64_t v19 = *(void *)__p;
        unint64_t v24 = __p;
        operator delete(__p);
      }
      else
      {
        uint64_t v19 = *((void *)v26 + v13);
      }
LABEL_24:
      TXParagraphStyle::setCaretPositionPair(a1, v14, v16, v19);
      uint64_t v10 = v13;
      unint64_t v8 = (char *)v26;
      unint64_t v9 = v27;
      unint64_t v21 = (v27 - (unsigned char *)v26) >> 3;
      if (v21 <= v13++) {
        goto LABEL_27;
      }
    }
  }
}

void sub_1B766B850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void TXTextLayoutBehaviorNode::~TXTextLayoutBehaviorNode(TXTextLayoutBehaviorNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

double TXTextLayoutBehaviorNode::solveNode(TXTextLayoutBehaviorNode *this, const CMTime *a2, __n128 a3, __n128 a4)
{
  uint64_t v5 = (unsigned char *)*((void *)this + 4);
  if (v5[320])
  {
    double v6 = a4.n128_f64[0];
    if (!(*(unsigned int (**)(unsigned char *, const CMTime *, double))(*(void *)v5 + 272))(v5, a2, a3.n128_f64[0]))return v6; {
    uint64_t v5 = (unsigned char *)*((void *)this + 4);
    }
  }
  uint64_t v7 = (*(uint64_t (**)(unsigned char *, const CMTime *, __n128, __n128))(*(void *)v5 + 712))(v5, a2, a3, a4);
  uint64_t v8 = *((void *)this + 4);
  if (v8)
  {
    unint64_t v9 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 312))(v8);
    if (OZChannelBase::isEnabled(v9, 0, 1))
    {
      if ((*(unsigned char *)((*(uint64_t (**)(void))(**((void **)this + 4) + 320))(*((void *)this + 4))
                     + 1024) & 2) == 0
        && ((*(uint64_t (**)(void))(**((void **)this + 4) + 768))(*((void *)this + 4)) & 1) == 0)
      {
        int v11 = (*(uint64_t (**)(void))(**((void **)this + 4) + 680))(*((void *)this + 4));
        BOOL v12 = !TXTextLayout::isVerticalLayout((TXTextLayout *)v7);
        if (v11 == 1)
        {
          double v13 = 3.0;
          double v14 = 4.0;
        }
        else
        {
          double v13 = 4.0;
          double v14 = 3.0;
        }
        if (v12) {
          return v13;
        }
        else {
          return v14;
        }
      }
    }
  }

  return OZChannel::getInitialValue((OZChannel *)(v7 + 20464));
}

void TXTextScrollCurveNode::TXTextScrollCurveNode(TXTextScrollCurveNode *this, TXTextScrollBehavior *a2, OZChannel *a3, int a4)
{
  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a3);
  *(void *)uint64_t v7 = &unk_1F10BCA68;
  *(void *)(v7 + 32) = a2;
  PCMutex::PCMutex((PCMutex *)(v7 + 48), 1);
  *((void *)this + 6) = &unk_1F10933F0;
  *((_DWORD *)this + 10) = a4;
  *((unsigned char *)this + 120) = 0;
}

void sub_1B766BB3C(_Unwind_Exception *a1)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(v1);
  _Unwind_Resume(a1);
}

void TXTextScrollCurveNode::TXTextScrollCurveNode(TXTextScrollCurveNode *this, const TXTextScrollCurveNode *a2)
{
  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2);
  *(void *)uint64_t v3 = &unk_1F10BCA68;
  PCMutex::PCMutex((PCMutex *)(v3 + 48), 1);
  *((void *)this + 6) = &unk_1F10933F0;
  *((unsigned char *)this + 120) = 0;
}

void sub_1B766BBBC(_Unwind_Exception *a1)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(v1);
  _Unwind_Resume(a1);
}

void TXTextScrollCurveNode::~TXTextScrollCurveNode(TXTextScrollCurveNode *this)
{
  *(void *)this = &unk_1F10BCA68;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 48));

  OZEaseInInterpolator::~OZEaseInInterpolator(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F10BCA68;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 48));
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

double TXTextScrollCurveNode::solveNode(TXTextScrollCurveNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v7 = (OZChannelBase *)(*(uint64_t (**)(void, double))(**((void **)this + 4) + 312))(*((void *)this + 4), a3);
  if (OZChannelBase::isEnabled(v7, 0, 1)
    && (*(unsigned char *)((*(uint64_t (**)(void))(**((void **)this + 4) + 320))(*((void *)this + 4)) + 1024) & 2) == 0)
  {
    CMTime v9 = *a2;
    return TXTextScrollCurveNode::getOffset((TXTextScrollBehavior **)this, &v9) + a4;
  }
  return a4;
}

double TXTextScrollCurveNode::getOffset(TXTextScrollBehavior **this, CMTime *a2)
{
  char v4 = (PCMutex *)(this + 6);
  v161 = (char *)(this + 6);
  PCMutex::lock((PCMutex *)(this + 6));
  char v162 = 1;
  if (TXTextScrollBehavior::getComputeOffsetForPreInceptionProjects(this[4]))
  {
    CMTime v160 = *a2;
    OffsetPreInceptiouint64_t n = TXTextScrollCurveNode::getOffsetPreInception((TXTextScrollCurveNode *)this, &v160);
    goto LABEL_78;
  }
  double v6 = this[4];
  if (*((unsigned char *)v6 + 320))
  {
    OffsetPreInceptiouint64_t n = 0.0;
    if (!(*(unsigned int (**)(TXTextScrollBehavior *))(*(void *)v6 + 272))(v6)) {
      goto LABEL_78;
    }
    double v6 = this[4];
  }
  unint64_t v7 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)v6 + 712))(v6);
  uint64_t v8 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this[4] + 720))(this[4]);
  OffsetPreInceptiouint64_t n = 0.0;
  if (v7 | v8 && !*((unsigned char *)this + 120))
  {
    *((unsigned char *)this + 120) = 1;
    memset(&v159, 0, sizeof(v159));
    CMTime v9 = (OZMEChannelTimeConverter *)(*(void *(**)(CMTime *__return_ptr))(**(void **)(*((void *)this[4] + 47) + 32)
                                                                                     + 336))(&v159);
    CurrentConversiouint64_t n = OZMEChannelTimeConverter::GetCurrentConversion(v9);
    __n128 v157 = 0uLL;
    uint64_t v158 = 0;
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 272))(v8);
    FrameDuratiouint64_t n = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), &v157);
    if (CurrentConversion)
    {
      *(_OWORD *)&time1.var0.CMTime var0 = *(_OWORD *)((char *)CurrentConversion + 76);
      time1.var0.unsigned int var3 = *(void *)((char *)CurrentConversion + 92);
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      if (CMTimeCompare((CMTime *)&time1, &time2))
      {
        FrameDuratiouint64_t n = *(__n128 *)((char *)CurrentConversion + 76);
        __n128 v157 = FrameDuration;
        uint64_t v158 = *(void *)((char *)CurrentConversion + 92);
      }
    }
    double v13 = *(double *)((*(uint64_t (**)(uint64_t, __n128))(*(void *)v8 + 272))(v8, FrameDuration) + 368);
    memset(&v156, 0, sizeof(v156));
    if (CurrentConversion) {
      CMTime v156 = *(CMTime *)((char *)CurrentConversion + 52);
    }
    else {
      CMTimeMake(&v156, 1, 1);
    }
    operator*((long long *)&v159.value, (uint64_t)&v156, (uint64_t)&time);
    double Seconds = CMTimeGetSeconds(&time);
    operator*((long long *)&v159.value, (uint64_t)&v156, (uint64_t)&v154);
    double v15 = CMTimeGetSeconds(&v154);
    uint64_t v16 = *(const void **)(v8 + 960);
    if (v16
    {
      uint64_t v18 = (double (**)(void))(*v17 + 1328);
    }
    else
    {
      uint64_t v18 = (double (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 272))(v8) + 96);
    }
    double v19 = (*v18)();
    (*(void (**)(long long *__return_ptr))(*(void *)this[4] + 608))(&v150);
    memset(&v149, 0, sizeof(v149));
    *(_OWORD *)&time1.var0.CMTime var0 = v150;
    time1.var0.unsigned int var3 = v151;
    double v20 = operator*((long long *)&time1.var0.var0, (uint64_t)&v156, (uint64_t)&v149);
    if (!(*(unsigned int (**)(double))(*((void *)this[4] + 2) + 24))(v20)) {
      goto LABEL_77;
    }
    CMTime v148 = v149;
    double v21 = floor(v13 * Seconds + 0.0000001);
    if (v21 < v13 * CMTimeGetSeconds(&v148)) {
      goto LABEL_77;
    }
    int v22 = *((_DWORD *)this + 10);
    if (v22 != (*(unsigned int (**)(TXTextScrollBehavior *))(*(void *)this[4] + 680))(this[4])) {
      goto LABEL_77;
    }
    if (v7)
    {
      if (TXTextLayout::getEnableScroll((TXTextLayout *)v7))
      {
LABEL_77:
        *((unsigned char *)this + 120) ^= 1u;
        goto LABEL_78;
      }
      BOOL v23 = *(_DWORD *)(TXTextLayout::getParagraphStyleAtIndex((TXTextLayout *)v7, 0) + 960) == 1
         || TXTextLayout::isVerticalLayout((TXTextLayout *)v7);
    }
    else
    {
      BOOL v23 = 0;
    }
    memset(&v147, 0, sizeof(v147));
    *(_OWORD *)&time1.var0.CMTime var0 = v152;
    time1.var0.unsigned int var3 = v153;
    operator*((long long *)&time1.var0.var0, (uint64_t)&v156, (uint64_t)&v147);
    memset(&v146, 0, sizeof(v146));
    OZChannel::getValueAsDouble((OZChannel *)((char *)this[4] + 3088), MEMORY[0x1E4F1FA48], 0.0);
    operator*(&v156, &v146, v24);
    operator*((long long *)&v157, (uint64_t)&v146, (uint64_t)&v142);
    time1.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v147;
    CMTime time2 = v142;
    PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v143);
    operator/(&v143, (uint64_t)&v157, (uint64_t)&v145);
    double v25 = CMTimeGetSeconds(&v145) + -1.0;
    if (v25 > 0.0)
    {
      double v112 = 1.0;
      if (*(unsigned char *)(theApp + 81))
      {
        uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 272))(v8);
        if (v26) {
          double v112 = (double)(int)OZSceneSettings::getHostAppProjectHeight((OZSceneSettings *)(v26 + 336))
        }
               / (float)*(int *)(v26 + 348);
      }
      OZRenderState::OZRenderState(&time1);
      time1.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v159;
      TXTextScrollBehavior::getContentBounds(this[4], (CMTime *)&time1, (uint64_t)&time2);
      double v108 = *(double *)&time2.timescale;
      double v109 = *(double *)&time2.value;
      double v27 = *(double *)&time2.epoch;
      double v28 = *(double *)&v131;
      uint64_t v29 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 272);
      if (*((_DWORD *)this + 10) == 1)
      {
        double v30 = (double)*(int *)(v29(v8) + 348);
      }
      else
      {
        double v31 = (double)*(int *)(v29(v8) + 344);
        double v32 = 1.0;
        if (v7) {
          double v32 = v19;
        }
        double v30 = v32 * v31;
      }
      double v110 = v25;
      int v33 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this[4] + 704))(this[4]);
      CMTime v140 = v149;
      double v34 = CMTimeGetSeconds(&v140);
      CMTime v139 = v147;
      double v35 = CMTimeGetSeconds(&v139);
      double v36 = v13 * v15;
      double v37 = vabdd_f64(v21, v13 * v15 + -0.5);
      if (v33) {
        BOOL v38 = v37 < 0.1;
      }
      else {
        BOOL v38 = 0;
      }
      if (v38) {
        double v36 = v21;
      }
      double v39 = v36 - v13 * v34;
      double v40 = v13 * v35;
      if (v39 <= v40) {
        double v40 = v39;
      }
      double v111 = v40;
      double v41 = 0.0;
      if ((*(unsigned int (**)(TXTextScrollBehavior *))(*(void *)this[4] + 688))(this[4]) == 2)
      {
        int v42 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this[4] + 680))(this[4]);
        long long v43 = *(void (**)(void))(*(void *)this[4] + 728);
        if (v42 == 1) {
          v43();
        }
        else {
          double v44 = -((double (*)(void))v43)();
        }
        double v41 = v44 + 0.0;
      }
      double v45 = v112 * v27;
      double v46 = v112 * v28;
      double v47 = v112 * v30;
      if ((*(unsigned int (**)(TXTextScrollBehavior *))(*(void *)this[4] + 688))(this[4]) == 2
        || !(*(unsigned int (**)(TXTextScrollBehavior *))(*(void *)this[4] + 776))(this[4]))
      {
        if (*((_DWORD *)this + 10)) {
          double v51 = v112 * v28;
        }
        else {
          double v51 = v112 * v27;
        }
      }
      else
      {
        time1.var4 = 0;
        double v138 = 1.0;
        uint64_t v135 = 0x3FF0000000000000;
        double v132 = 1.0;
        time2.CMTimeValue value = 0x3FF0000000000000;
        *(_OWORD *)&time2.timescale = 0u;
        long long v131 = 0u;
        long long v133 = 0u;
        long long v134 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v48 = (OZChannel *)(v8 + 1352);
        if (*((_DWORD *)this + 10))
        {
          OZChannel::getValueAsDouble(v48, &v159, 0.0);
          double v50 = v49;
          InitialCFNumberRef Value = OZChannel::getInitialValue((OZChannel *)(v8 + 1504));
        }
        else
        {
          double v50 = OZChannel::getInitialValue(v48);
          OZChannel::getValueAsDouble((OZChannel *)(v8 + 1504), &v159, 0.0);
          InitialCFNumberRef Value = v73;
        }
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 1952), &v159, 0.0);
        double v75 = v74;
        long long v143 = 0uLL;
        uint64_t v144 = 0;
        memset(&v142, 0, sizeof(v142));
        float64x2_t v128 = 0uLL;
        double v129 = 0.0;
        long long v127 = 0uLL;
        (*(void (**)(uint64_t, long long *, OZRenderState *, void))(*(void *)v8 + 1320))(v8, &v143, &time1, 0);
        if (!v7) {
          *(double *)&long long v143 = *(double *)&v143 / v19;
        }
        OZTransformNode::getRotation(v8, &v142, (CMTime *)&time1);
        OZTransformNode::getPivot(v8, &v128, (CMTime *)&time1);
        OZTransformNode::getShear((OZTransformNode *)v8, (double *)&v127, (double *)&v127 + 1, (const CMTime *)&time1);
        float64x2_t v128 = vmulq_n_f64(v128, v112);
        double v129 = v112 * v129;
        CMTimeEpoch v76 = OZRenderState::OZRenderState(&v126, &time1);
        v125[0] = v112 * v50;
        v125[1] = v112 * InitialValue;
        v125[2] = v112 * v75;
        long long v123 = v143;
        uint64_t v124 = v144;
        CMTime v122 = v142;
        long long v121 = v127;
        float64x2_t v119 = v128;
        double v120 = v129;
        TXTextScrollCurveNode::getTransformMatrixForElement((uint64_t)v76, (long long *)&time2.value, (void *)v8, (uint64_t)&v126, v125, (double *)&v123, (double *)&v122.value, (float64_t *)&v121, v119.f64, 0);
        double v77 = v112 * v108 + v46;
        double v78 = v112 * v109 + v45;
        double v79 = v112 * v109 * *((double *)&v136 + 1);
        double v80 = v138 + v79 + v77 * *(double *)&v137;
        double v81 = v112 * v109 * *(double *)&time2.value;
        double v82 = (*(double *)&v131 + v81 + v77 * *(double *)&time2.timescale) / v80;
        double v83 = v138 + v78 * *((double *)&v136 + 1) + v77 * *(double *)&v137;
        double v84 = (*(double *)&v131 + v78 * *(double *)&time2.value + v77 * *(double *)&time2.timescale) / v83;
        double v85 = v112 * v108 * *(double *)&v137;
        double v86 = v138 + v79 + v85;
        double v87 = v112 * v108 * *(double *)&time2.timescale;
        double v88 = (*(double *)&v131 + v81 + v87) / v86;
        double v89 = v138 + v78 * *((double *)&v136 + 1) + v85;
        double v90 = v78 * *(double *)&time2.value + v87;
        double v91 = (*(double *)&v131 + v90) / v89;
        if (v91 <= v84) {
          double v92 = (*(double *)&v131 + v90) / v89;
        }
        else {
          double v92 = (*(double *)&v131 + v78 * *(double *)&time2.value + v77 * *(double *)&time2.timescale) / v83;
        }
        if (v91 >= v84) {
          double v93 = v91;
        }
        else {
          double v93 = (*(double *)&v131 + v78 * *(double *)&time2.value + v77 * *(double *)&time2.timescale) / v83;
        }
        if (v88 <= v92) {
          double v94 = v88;
        }
        else {
          double v94 = v92;
        }
        if (v82 <= v94) {
          double v94 = v82;
        }
        if (v88 >= v93) {
          double v95 = v88;
        }
        else {
          double v95 = v93;
        }
        if (v82 >= v95) {
          double v95 = v82;
        }
        if (*((_DWORD *)this + 10) == 1)
        {
          double v96 = v112 * v109 * *((double *)&v131 + 1);
          double v97 = v77 * v132;
          double v98 = (*((double *)&v133 + 1) + v96 + v97) / v80;
          double v99 = v112 * v108 * v132;
          double v100 = (*((double *)&v133 + 1) + v96 + v99) / v86;
          double v101 = v78 * *((double *)&v131 + 1);
          double v102 = (*((double *)&v133 + 1) + v101 + v99) / v89;
          double v103 = (*((double *)&v133 + 1) + v101 + v97) / v83;
          if (v102 >= v103) {
            double v104 = v102;
          }
          else {
            double v104 = v103;
          }
          if (v102 <= v103) {
            double v103 = v102;
          }
          if (v100 >= v104) {
            double v105 = v100;
          }
          else {
            double v105 = v104;
          }
          if (v98 >= v105) {
            double v105 = v98;
          }
          if (v100 <= v103) {
            double v103 = v100;
          }
          if (v98 <= v103) {
            double v103 = v98;
          }
          double v41 = v41 - (v47 * 0.5 + v105);
          double v51 = vabdd_f64(v105, v103);
        }
        else
        {
          if (v23)
          {
            double v51 = vabdd_f64(v95, v94);
            double v106 = v47 * -0.5 - v94 - v51;
          }
          else
          {
            double v106 = v47 * 0.5 - v94;
            double v51 = vabdd_f64(v95, v94);
          }
          double v41 = v41 + v106;
        }
      }
      int v52 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this[4] + 688))(this[4]);
      UniChar v53 = this[4];
      if (v52 == 1)
      {
        long long v117 = *(_OWORD *)&a2->value;
        CMTimeEpoch epoch = a2->epoch;
        double v54 = (*(double (**)(TXTextScrollBehavior *, long long *))(*(void *)v53 + 696))(v53, &v117);
        uint64_t v55 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this[4] + 848))(this[4]);
        double v56 = v112 * v54 / v13;
        (*(void (**)(uint64_t, void, uint64_t, double))(*(void *)v55 + 712))(v55, MEMORY[0x1E4F1FA48], 1, v56);
        double v57 = -(v111 * v56);
        if (v23) {
          double v57 = v111 * v56;
        }
        if (*((_DWORD *)this + 10)) {
          double v58 = v111 * v56;
        }
        else {
          double v58 = v57;
        }
      }
      else
      {
        if ((*(unsigned int (**)(TXTextScrollBehavior *))(*(void *)v53 + 688))(v53) == 2)
        {
          int v59 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this[4] + 680))(this[4]);
          int v60 = *(double (**)(void))(*(void *)this[4] + 736);
          if (v59 == 1)
          {
            double v61 = v60();
            (*(void (**)(TXTextScrollBehavior *))(*(void *)this[4] + 728))(this[4]);
          }
          else
          {
            double v61 = v60();
            double v62 = (*(double (**)(TXTextScrollBehavior *))(*(void *)this[4] + 728))(this[4]);
          }
          double v63 = v61 - v62;
        }
        else
        {
          double v63 = v47 + v51;
        }
        double v64 = v63 / v110;
        if (v33)
        {
          unsigned int v65 = vcvtpd_s64_f64(v64);
          double v64 = (double)(int)(((v33 == 2) & v65) + v65);
        }
        uint64_t v66 = (double *)this[4];
        v66[483] = v64;
        double v58 = v111 * v64;
        if (!(*(unsigned int (**)(double *))(*(void *)v66 + 688))(v66))
        {
          CMTime v67 = this[4];
          long long v115 = *(_OWORD *)&a2->value;
          CMTimeEpoch v116 = a2->epoch;
          double v58 = v58
              * (*(double (**)(TXTextScrollBehavior *, long long *))(*(void *)v67 + 744))(v67, &v115);
        }
        double v68 = -v58;
        if (v23) {
          double v68 = v58;
        }
        if (!*((_DWORD *)this + 10)) {
          double v58 = v68;
        }
        uint64_t v69 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this[4] + 848))(this[4]);
        CMTime v70 = this[4];
        long long v113 = *(_OWORD *)&a2->value;
        CMTimeEpoch v114 = a2->epoch;
        double v71 = (*(double (**)(TXTextScrollBehavior *, long long *))(*(void *)v70 + 744))(v70, &v113);
        (*(void (**)(uint64_t, void, uint64_t, double))(*(void *)v69 + 712))(v69, MEMORY[0x1E4F1FA48], 1, v64 * v71);
      }
      OffsetPreInceptiouint64_t n = 1.0 / v112 * (v41 + v58);
    }
    goto LABEL_77;
  }
LABEL_78:
  PCMutex::unlock(v4);
  return OffsetPreInception;
}

void sub_1B766CDFC(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + 120) ^= 1u;
  PCLockSentry<PCMutex>::~PCLockSentry(v2 - 160);
  _Unwind_Resume(a1);
}

void TXTextScrollCurveNode::solveNode(TXTextScrollBehavior **this, OZCurveNodeParam *a2)
{
  uint64_t v2 = *((void *)a2 + 19);
  uint64_t v3 = *((void *)a2 + 10);
  CMTime v10 = *(CMTime *)((unsigned char *)a2 + 5);
  CMTime v9 = *(CMTime *)((unsigned char *)a2 + 4);
  if (*((_DWORD *)a2 + 36))
  {
    unint64_t v6 = 0;
    do
    {
      double v7 = *(double *)(v3 + 8 * v6);
      CMTime v8 = v9;
      *(double *)(v2 + 8 * v6) = v7 + TXTextScrollCurveNode::getOffset(this, &v8);
      CMTime v12 = v9;
      CMTime v11 = v10;
      PC_CMTimeSaferAdd(&v12, &v11, (uint64_t)&v9);
      ++v6;
    }
    while (v6 < *((unsigned int *)a2 + 36));
  }
}

void TXTextScrollCurveNode::getTransformMatrixForElement(uint64_t a1, long long *a2, void *a3, uint64_t a4, double *a5, double *a6, double *a7, float64_t *a8, double *a9, char a10)
{
  uint64_t v17 = (const void *)a3[120];
  if (v17
  {
    double v19 = v18;
    (*(void (**)(void *))(*(void *)v18 + 1328))(v18);
    char v21 = 0;
  }
  else
  {
    double v19 = 0;
    double v20 = *(double *)(a4 + 40);
    char v21 = 1;
  }
  if (v20 == 0.0) {
    double v22 = 1.0;
  }
  else {
    double v22 = v20;
  }
  double v23 = *a6;
  double v24 = (*(double (**)(void *))(*a3 + 1328))(a3);
  PCMatrix44Tmpl<double>::setTransformation((uint64_t)a2, 0, 4, *a5, a5[1], a5[2], *a7, a7[1], a7[2], v23 * v24 / v22, a6[1], a6[2], *a8, a8[1], *a9, a9[1], a9[2], v22);
  if (v21)
  {
    if (a10 && *(unsigned char *)(a4 + 64))
    {
      PCMatrix44Tmpl<double>::leftMult((uint64_t)a2, (double *)(a4 + 72));
    }
  }
  else if (!*(_DWORD *)(a4 + 48) && (a10 & 1) == 0)
  {
    uint64_t v38 = 0x3FF0000000000000;
    uint64_t v35 = 0x3FF0000000000000;
    uint64_t v32 = 0x3FF0000000000000;
    uint64_t v29 = 0x3FF0000000000000;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v19 + 1256))(v19, &v29, a4);
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v29, a2, (uint64_t)v28);
    if (v28 != (unsigned char *)a2)
    {
      for (uint64_t i = 0; i != 8; i += 2)
      {
        uint64_t v26 = &a2[i];
        long long v27 = *(_OWORD *)&v28[i * 16 + 16];
        *uint64_t v26 = *(_OWORD *)&v28[i * 16];
        v26[1] = v27;
      }
    }
  }
}

double PCMatrix44Tmpl<double>::setTransformation(uint64_t a1, int a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, float64_t a13, double a14, double a15, double a16, double a17, double a18)
{
  double v33 = a17;
  *(double *)&uint64_t v32 = a18;
  double v35 = a15;
  double v34 = a16;
  *(void *)(a1 + 120) = 0x3FF0000000000000;
  if (a14 == 0.0 && a13 == 0.0 && a9 == 0.0 && a8 == 0.0 && a7 == 0.0 && !a2)
  {
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 96) = 0;
    *(double *)a1 = a10;
    *(double *)(a1 + 40) = a11;
    *(double *)(a1 + 24) = a4 - a10 * a15;
    *(double *)(a1 + 56) = a5 - a11 * a16;
    *(double *)(a1 + 80) = a12;
    *(double *)(a1 + 88) = a6 - a12 * a17;
    double result = 1.0;
    if (a18 != 1.0)
    {
      *(double *)(a1 + 32) = a18 * 0.0;
      *(double *)(a1 + 64) = a18 * 0.0;
      double result = 0.0 / a18;
      *(double *)(a1 + 8) = 0.0 / a18;
      *(double *)(a1 + 16) = 0.0 / a18;
    }
  }
  else
  {
    *(void *)(a1 + 80) = 0x3FF0000000000000;
    *(void *)(a1 + 40) = 0x3FF0000000000000;
    *(void *)a1 = 0x3FF0000000000000;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    switch(a2)
    {
      case 0:
        PCMatrix44Tmpl<double>::rightTranslate((double *)a1, a4, a5, a6);
        PCMatrix44Tmpl<double>::rightRotate((double *)a1, a3, a7, a8, a9);
        goto LABEL_14;
      case 1:
        PCMatrix44Tmpl<double>::rightTranslate((double *)a1, a4, a5, a6);
        PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a13, a14);
        PCMatrix44Tmpl<double>::rightScale((double *)a1, a10, a11, a12);
        goto LABEL_17;
      case 2:
        double v37 = a7;
        double v38 = a9;
        double v39 = a6;
        double v40 = a4;
        PCMatrix44Tmpl<double>::rightRotate((double *)a1, a3, v37, a8, v38);
        PCMatrix44Tmpl<double>::rightTranslate((double *)a1, v40, a5, v39);
LABEL_14:
        PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a13, a14);
        PCMatrix44Tmpl<double>::rightScale((double *)a1, a10, a11, a12);
        goto LABEL_20;
      case 3:
        double v41 = a7;
        double v42 = a9;
        double v43 = a6;
        double v44 = a4;
        PCMatrix44Tmpl<double>::rightRotate((double *)a1, a3, v41, a8, v42);
        PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a13, a14);
        PCMatrix44Tmpl<double>::rightScale((double *)a1, a10, a11, a12);
        double v45 = (double *)a1;
        double v46 = v44;
        double v47 = a5;
        double v48 = v43;
        goto LABEL_19;
      case 4:
        double v55 = a6;
        PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a13, a14);
        PCMatrix44Tmpl<double>::rightScale((double *)a1, a10, a11, a12);
        PCMatrix44Tmpl<double>::rightTranslate((double *)a1, a4, a5, v55);
LABEL_17:
        PCMatrix44Tmpl<double>::rightRotate((double *)a1, a3, a7, a8, a9);
        goto LABEL_20;
      case 5:
        double v56 = a6;
        PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a13, a14);
        PCMatrix44Tmpl<double>::rightScale((double *)a1, a10, a11, a12);
        PCMatrix44Tmpl<double>::rightRotate((double *)a1, a3, a7, a8, a9);
        double v45 = (double *)a1;
        double v46 = a4;
        double v47 = a5;
        double v48 = v56;
LABEL_19:
        PCMatrix44Tmpl<double>::rightTranslate(v45, v46, v47, v48);
LABEL_20:
        *(double *)&uint64_t v32 = a18;
        double v34 = a16;
        double v33 = a17;
        double v35 = a15;
        break;
      default:
        break;
    }
    *(double *)(a1 + 32) = *(double *)(a1 + 32) * *(double *)&v32;
    *(double *)(a1 + 64) = *(double *)(a1 + 64) * *(double *)&v32;
    *(float64x2_t *)(a1 + 8) = vdivq_f64(*(float64x2_t *)(a1 + 8), (float64x2_t)vdupq_lane_s64(v32, 0));
    return PCMatrix44Tmpl<double>::rightTranslate((double *)a1, -v35, -v34, -v33);
  }
  return result;
}

double TXTextScrollCurveNode::getOffsetPreInception(TXTextScrollCurveNode *this, CMTime *a2)
{
  char v4 = (unsigned char *)*((void *)this + 4);
  if (v4[320])
  {
    double v5 = 0.0;
    if (!(*(unsigned int (**)(unsigned char *))(*(void *)v4 + 272))(v4)) {
      return v5;
    }
    char v4 = (unsigned char *)*((void *)this + 4);
  }
  unint64_t v6 = (*(uint64_t (**)(unsigned char *))(*(void *)v4 + 712))(v4);
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 4) + 720))();
  double v5 = 0.0;
  if (v6 | v7 && !*((unsigned char *)this + 120))
  {
    CMTime v8 = (OZTransformNode *)v7;
    *((unsigned char *)this + 120) = 1;
    CMTime v148 = (char *)this + 48;
    PCMutex::lock((PCMutex *)((char *)this + 48));
    char v149 = 1;
    memset(&v147, 0, sizeof(v147));
    CMTime v9 = (OZMEChannelTimeConverter *)(*(void *(**)(CMTime *__return_ptr))(**(void **)(*(void *)(*((void *)this + 4) + 376) + 32)
                                                                                     + 336))(&v147);
    CurrentConversiouint64_t n = OZMEChannelTimeConverter::GetCurrentConversion(v9);
    memset(&v146, 0, sizeof(v146));
    uint64_t v11 = (*(uint64_t (**)(OZTransformNode *))(*(void *)v8 + 272))(v8);
    FrameDuratiouint64_t n = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), (__n128 *)&v146);
    if (CurrentConversion)
    {
      *(_OWORD *)&time1.var0.CMTime var0 = *(_OWORD *)((char *)CurrentConversion + 76);
      time1.var0.unsigned int var3 = *(void *)((char *)CurrentConversion + 92);
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      if (CMTimeCompare((CMTime *)&time1, &time2))
      {
        FrameDuratiouint64_t n = *(__n128 *)((char *)CurrentConversion + 76);
        *(__n128 *)&v146.CMTimeValue value = FrameDuration;
        v146.CMTimeEpoch epoch = *(void *)((char *)CurrentConversion + 92);
      }
    }
    double v13 = *(double *)((*(uint64_t (**)(OZTransformNode *, __n128))(*(void *)v8 + 272))(v8, FrameDuration)
                    + 368);
    CMTime time = v147;
    double Seconds = CMTimeGetSeconds(&time);
    CMTime v144 = v147;
    double v15 = CMTimeGetSeconds(&v144);
    if (CurrentConversion)
    {
      uint64_t v16 = (uint64_t)CurrentConversion + 52;
      operator*((long long *)&v147.value, v16, (uint64_t)&v143);
      double v17 = CMTimeGetSeconds(&v143);
      operator*((long long *)&v147.value, v16, (uint64_t)&v142);
      if (vabdd_f64(floor(v13 * v17 + 0.0000001), v13 * CMTimeGetSeconds(&v142) + -0.5) >= 0.1)
      {
        CMTime v138 = v147;
        double v21 = CMTimeGetSeconds(&v138);
        CMTime v137 = v147;
        BOOL v19 = 0;
        double v20 = v13 * v21;
        double v18 = floor(v13 * CMTimeGetSeconds(&v137) + 0.0000001);
      }
      else
      {
        memset(&v134, 0, sizeof(v134));
        CMTime v141 = v146;
        PC_CMTimeHalve(&v141, (uint64_t)&v134);
        operator*((long long *)&v147.value, v16, (uint64_t)&v139);
        time1.CMTime var0 = v139;
        CMTime time2 = v134;
        PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v128);
        operator/(&v128, v16, (uint64_t)&v140);
        double v18 = v13 * CMTimeGetSeconds(&v140);
        BOOL v19 = 1;
        double v20 = v18;
      }
    }
    else
    {
      double v18 = floor(v13 * Seconds + 0.0000001);
      double v20 = v13 * v15;
      BOOL v19 = vabdd_f64(v18, v13 * v15 + -0.5) < 0.1;
    }
    double v22 = (const void *)*((void *)v8 + 120);
    if (v22
    {
      double v24 = (double (**)(void))(*v23 + 1328);
    }
    else
    {
      double v24 = (double (**)(void))(*(void *)(*(uint64_t (**)(OZTransformNode *))(*(void *)v8 + 272))(v8)
                              + 96);
    }
    double v25 = (*v24)();
    if ((*(unsigned int (**)(void))(*(void *)(*((void *)this + 4) + 16) + 24))()
      && ((*(void (**)(OZRenderState *__return_ptr))(**((void **)this + 4) + 608))(&time1),
          CMTime var0 = (CMTime)time1.var0,
          v18 >= v13 * CMTimeGetSeconds(&var0)))
    {
      int v27 = *((_DWORD *)this + 10);
      double v5 = 0.0;
      if (v27 == (*(unsigned int (**)(void))(**((void **)this + 4) + 680))(*((void *)this + 4)))
      {
        if (v6)
        {
          if (TXTextLayout::getEnableScroll((TXTextLayout *)v6)) {
            goto LABEL_21;
          }
          BOOL v28 = *(_DWORD *)(TXTextLayout::getParagraphStyleAtIndex((TXTextLayout *)v6, 0) + 960) == 1
             || TXTextLayout::isVerticalLayout((TXTextLayout *)v6);
        }
        else
        {
          BOOL v28 = 0;
        }
        (*(void (**)(CMTime *__return_ptr))(**((void **)this + 4) + 608))(&v134);
        $3CC8671D27C23BF42ADDB32F2B5E48AE v139 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v135;
        OZChannel::getValueAsDouble((OZChannel *)(*((void *)this + 4) + 3088), MEMORY[0x1E4F1FA48], 0.0);
        operator*(&v146, &v132, v29);
        time1.CMTime var0 = v139;
        CMTime time2 = v132;
        PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v128);
        operator/(&v128, (uint64_t)&v146, (uint64_t)&v133);
        double v30 = CMTimeGetSeconds(&v133) + -1.0;
        if (v30 > 0.0)
        {
          double v99 = v30;
          double v100 = 1.0;
          if (*(unsigned char *)(theApp + 81))
          {
            uint64_t v31 = (*(uint64_t (**)(OZTransformNode *))(*(void *)v8 + 272))(v8);
            if (v31) {
              double v100 = (double)(int)OZSceneSettings::getHostAppProjectHeight((OZSceneSettings *)(v31 + 336))
            }
                   / (float)*(int *)(v31 + 348);
          }
          OZRenderState::OZRenderState(&time1);
          TXTextScrollBehavior::getContentBounds(*((TXTextScrollBehavior **)this + 4), (CMTime *)&time1, (uint64_t)&v128);
          double v32 = v100 * *((double *)&v128 + 1);
          double v98 = v100 * *(double *)&v128;
          *(double *)&long long v128 = v100 * *(double *)&v128;
          *((double *)&v128 + 1) = v100 * *((double *)&v128 + 1);
          double v33 = v100 * v129;
          double v34 = v100 * v130;
          double v129 = v100 * v129;
          double v130 = v100 * v130;
          time1.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v147;
          double v35 = *(uint64_t (**)(OZTransformNode *))(*(void *)v8 + 272);
          if (*((_DWORD *)this + 10) == 1)
          {
            double v36 = (double)*(int *)(v35(v8) + 348);
          }
          else
          {
            double v37 = (double)*(int *)(v35(v8) + 344);
            double v38 = 1.0;
            if (v6) {
              double v38 = v25;
            }
            double v36 = v38 * v37;
          }
          int v39 = (*(uint64_t (**)(void))(**((void **)this + 4) + 704))(*((void *)this + 4));
          double v97 = v32;
          if (v39) {
            BOOL v40 = v19;
          }
          else {
            BOOL v40 = 0;
          }
          if (v40)
          {
            CMTime v127 = v134;
            double v41 = CMTimeGetSeconds(&v127);
          }
          else
          {
            CMTime v126 = v134;
            double v41 = CMTimeGetSeconds(&v126);
            double v18 = v20;
          }
          CMTime v125 = v135;
          double v42 = v18 - v13 * v41;
          if (v42 > v13 * CMTimeGetSeconds(&v125))
          {
            CMTime v124 = v135;
            double v42 = v13 * CMTimeGetSeconds(&v124);
          }
          double v43 = 0.0;
          if ((*(unsigned int (**)(void))(**((void **)this + 4) + 688))(*((void *)this + 4)) == 2)
          {
            int v44 = (*(uint64_t (**)(void))(**((void **)this + 4) + 680))(*((void *)this + 4));
            double v45 = *(void (**)(void))(**((void **)this + 4) + 728);
            if (v44 == 1) {
              v45();
            }
            else {
              double v46 = -((double (*)(void))v45)();
            }
            double v43 = v46 + 0.0;
          }
          double v47 = v100 * v36;
          if ((*(unsigned int (**)(void))(**((void **)this + 4) + 688))(*((void *)this + 4)) == 2
            || !(*(unsigned int (**)(void))(**((void **)this + 4) + 776))(*((void *)this + 4)))
          {
            if (*((_DWORD *)this + 10)) {
              double v50 = v34;
            }
            else {
              double v50 = v33;
            }
          }
          else
          {
            time1.var4 = 0;
            double v123 = 1.0;
            uint64_t v120 = 0x3FF0000000000000;
            double v117 = 1.0;
            time2.CMTimeValue value = 0x3FF0000000000000;
            *(_OWORD *)&time2.timescale = 0u;
            long long v116 = 0u;
            long long v118 = 0u;
            long long v119 = 0u;
            long long v121 = 0u;
            long long v122 = 0u;
            double v48 = (OZChannel *)((char *)v8 + 1352);
            if (*((_DWORD *)this + 10))
            {
              OZChannel::getValueAsDouble(v48, &v147, 0.0);
              double v96 = v49;
              InitialCFNumberRef Value = OZChannel::getInitialValue((OZChannel *)((char *)v8 + 1504));
            }
            else
            {
              double v96 = OZChannel::getInitialValue(v48);
              OZChannel::getValueAsDouble((OZChannel *)((char *)v8 + 1504), &v147, 0.0);
              InitialCFNumberRef Value = v67;
            }
            OZChannel::getValueAsDouble((OZChannel *)((char *)v8 + 1952), &v147, 0.0);
            double v69 = v68;
            memset(&v139, 0, sizeof(v139));
            memset(&v132, 0, sizeof(v132));
            float64x2_t v113 = 0uLL;
            double v114 = 0.0;
            long long v112 = 0uLL;
            (*(void (**)(OZTransformNode *, $3CC8671D27C23BF42ADDB32F2B5E48AE *, OZRenderState *, void))(*(void *)v8 + 1320))(v8, &v139, &time1, 0);
            if (!v6) {
              *(double *)&v139.CMTime var0 = *(double *)&v139.var0 / v25;
            }
            OZTransformNode::getRotation((uint64_t)v8, &v132, (CMTime *)&time1);
            OZTransformNode::getPivot((uint64_t)v8, &v113, (CMTime *)&time1);
            OZTransformNode::getShear(v8, (double *)&v112, (double *)&v112 + 1, (const CMTime *)&time1);
            float64x2_t v113 = vmulq_n_f64(v113, v100);
            double v114 = v100 * v114;
            CMTime v70 = OZRenderState::OZRenderState(&v111, &time1);
            v110[0] = v100 * v96;
            v110[1] = v100 * InitialValue;
            void v110[2] = v100 * v69;
            $3CC8671D27C23BF42ADDB32F2B5E48AE v109 = v139;
            CMTime v108 = v132;
            long long v107 = v112;
            float64x2_t v105 = v113;
            double v106 = v114;
            TXTextScrollCurveNode::getTransformMatrixForElement((uint64_t)v70, (long long *)&time2.value, v8, (uint64_t)&v111, v110, (double *)&v109.var0, (double *)&v108.value, (float64_t *)&v107, v105.f64, 0);
            double v71 = (v97 + v34) * *(double *)&v122;
            double v72 = v123 + v98 * *((double *)&v121 + 1) + v71;
            double v73 = (v97 + v34) * *(double *)&time2.timescale;
            double v74 = (*(double *)&v116 + v98 * *(double *)&time2.value + v73) / v72;
            double v75 = (v98 + v33) * *((double *)&v121 + 1);
            double v76 = v123 + v75 + v71;
            double v77 = (v98 + v33) * *(double *)&time2.value;
            double v78 = (*(double *)&v116 + v77 + v73) / v76;
            double v79 = v123 + v98 * *((double *)&v121 + 1) + v97 * *(double *)&v122;
            double v80 = (*(double *)&v116 + v98 * *(double *)&time2.value + v97 * *(double *)&time2.timescale) / v79;
            double v81 = v123 + v75 + v97 * *(double *)&v122;
            double v82 = (*(double *)&v116 + v77 + v97 * *(double *)&time2.timescale) / v81;
            if (v82 <= v78) {
              double v83 = (*(double *)&v116 + v77 + v97 * *(double *)&time2.timescale) / v81;
            }
            else {
              double v83 = (*(double *)&v116 + v77 + v73) / v76;
            }
            if (v82 >= v78) {
              double v84 = (*(double *)&v116 + v77 + v97 * *(double *)&time2.timescale) / v81;
            }
            else {
              double v84 = (*(double *)&v116 + v77 + v73) / v76;
            }
            if (v80 <= v83) {
              double v85 = (*(double *)&v116 + v98 * *(double *)&time2.value + v97 * *(double *)&time2.timescale) / v79;
            }
            else {
              double v85 = v83;
            }
            if (v74 <= v85) {
              double v85 = (*(double *)&v116 + v98 * *(double *)&time2.value + v73) / v72;
            }
            if (v80 >= v84) {
              double v86 = (*(double *)&v116 + v98 * *(double *)&time2.value + v97 * *(double *)&time2.timescale) / v79;
            }
            else {
              double v86 = v84;
            }
            if (v74 >= v86) {
              double v86 = (*(double *)&v116 + v98 * *(double *)&time2.value + v73) / v72;
            }
            if (*((_DWORD *)this + 10) == 1)
            {
              double v87 = (v97 + v34) * v117;
              double v88 = (*((double *)&v118 + 1) + v98 * *((double *)&v116 + 1) + v87) / v72;
              double v89 = (*((double *)&v118 + 1) + v98 * *((double *)&v116 + 1) + v97 * v117) / v79;
              double v90 = (v98 + v33) * *((double *)&v116 + 1);
              double v91 = (*((double *)&v118 + 1) + v90 + v97 * v117) / v81;
              double v92 = (*((double *)&v118 + 1) + v90 + v87) / v76;
              if (v91 >= v92) {
                double v93 = v91;
              }
              else {
                double v93 = v92;
              }
              if (v91 <= v92) {
                double v92 = v91;
              }
              if (v89 >= v93) {
                double v93 = v89;
              }
              if (v88 >= v93) {
                double v93 = v88;
              }
              if (v89 <= v92) {
                double v92 = v89;
              }
              if (v88 <= v92) {
                double v92 = v88;
              }
              double v43 = v43 - (v47 * 0.5 + v93);
              double v50 = vabdd_f64(v93, v92);
            }
            else
            {
              if (v28)
              {
                double v50 = vabdd_f64(v86, v85);
                double v94 = v47 * -0.5 - v85 - v50;
              }
              else
              {
                double v94 = v47 * 0.5 - v85;
                double v50 = vabdd_f64(v86, v85);
              }
              double v43 = v43 + v94;
            }
          }
          int v51 = (*(uint64_t (**)(void))(**((void **)this + 4) + 688))(*((void *)this + 4));
          uint64_t v52 = *((void *)this + 4);
          if (v51 == 1)
          {
            long long v103 = *(_OWORD *)&a2->value;
            CMTimeEpoch epoch = a2->epoch;
            double v53 = (*(double (**)(uint64_t, long long *))(*(void *)v52 + 696))(v52, &v103);
            uint64_t v54 = (*(uint64_t (**)(void))(**((void **)this + 4) + 848))(*((void *)this + 4));
            double v55 = v100 * v53 / v13;
            (*(void (**)(uint64_t, void, uint64_t, double))(*(void *)v54 + 712))(v54, MEMORY[0x1E4F1FA48], 1, v55);
            double v56 = v42 * v55;
          }
          else
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v52 + 688))(v52) == 2)
            {
              int v57 = (*(uint64_t (**)(void))(**((void **)this + 4) + 680))(*((void *)this + 4));
              double v58 = *(double (**)(void))(**((void **)this + 4) + 736);
              if (v57 == 1)
              {
                double v59 = v58();
                (*(void (**)(void))(**((void **)this + 4) + 728))(*((void *)this + 4));
              }
              else
              {
                double v59 = v58();
                double v60 = (*(double (**)(void))(**((void **)this + 4) + 728))(*((void *)this + 4));
              }
              double v61 = v59 - v60;
            }
            else
            {
              double v61 = v47 + v50;
            }
            double v62 = v61 / v99;
            if (v39)
            {
              unsigned int v63 = vcvtpd_s64_f64(v62);
              double v62 = (double)(int)(((v39 == 2) & v63) + v63);
            }
            double v64 = (double *)*((void *)this + 4);
            v64[483] = v62;
            double v56 = v42 * v62;
            if (!(*(unsigned int (**)(double *))(*(void *)v64 + 688))(v64))
            {
              uint64_t v65 = *((void *)this + 4);
              long long v101 = *(_OWORD *)&a2->value;
              CMTimeEpoch v102 = a2->epoch;
              double v56 = v56 * (*(double (**)(uint64_t, long long *))(*(void *)v65 + 744))(v65, &v101);
            }
          }
          double v66 = -v56;
          if (v28) {
            double v66 = v56;
          }
          if (*((_DWORD *)this + 10)) {
            double v66 = v56;
          }
          double v5 = 1.0 / v100 * (v43 + v66);
        }
      }
    }
    else
    {
      double v5 = 0.0;
    }
LABEL_21:
    PCMutex::unlock((PCMutex *)((char *)this + 48));
    *((unsigned char *)this + 120) ^= 1u;
  }
  return v5;
}

void sub_1B766E6E4(_Unwind_Exception *a1)
{
  PCLockSentry<PCMutex>::~PCLockSentry(v2 - 176);
  *(unsigned char *)(v1 + 120) ^= 1u;
  _Unwind_Resume(a1);
}

__n128 TXTextScrollBehavior::getContentBounds@<Q0>(TXTextScrollBehavior *this@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)this + 584))
  {
    uint64_t v6 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this + 712))(this);
    uint64_t v7 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this + 720))(this);
    CMTime v8 = (char *)this + 552;
    if (v6) {
      TXTextLayout::getTypographicBounds(v6, (uint64_t)v8, a2, 1, 0);
    }
    else {
      (*(void (**)(uint64_t, char *, CMTime *))(*(void *)v7 + 1520))(v7, v8, a2);
    }
    *((unsigned char *)this + 584) = 0;
  }
  __n128 result = *(__n128 *)((char *)this + 552);
  long long v10 = *(_OWORD *)((char *)this + 568);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v10;
  return result;
}

void TXTextScrollCurveNode::cloneNode(TXTextScrollCurveNode *this)
{
}

void sub_1B766E8BC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40091CE6AELL);
  _Unwind_Resume(a1);
}

uint64_t TXTextScrollCurveNode::compare(TXTextScrollCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

__n128 TXTextScrollCurveNode::getNeededRange(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a2 + 96);
  *(void *)(a2 + 40) = *(void *)(a2 + 112);
  __n128 result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 64) = *(void *)(a2 + 136);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a2 + 88) = 0;
  *(void *)(a2 + 80) = *(void *)(a2 + 152);
  return result;
}

void TXTextScrollBehavior::TXTextScrollBehavior(TXTextScrollBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_1F10BCB60;
  *(void *)(v5 + 16) = &unk_1F10BCED0;
  *(void *)(v5 + 48) = &unk_1F10BD128;
  *(void *)(v5 + 336) = &unk_1F10BD180;
  *(void *)(v5 + 536) = 0;
  *(_OWORD *)(v5 + 552) = 0u;
  *(void *)(v5 + 568) = 0xBFF0000000000000;
  *(void *)(v5 + 576) = 0xBFF0000000000000;
  PCURL::PCURL((PCURL *)&v24, @"Text Scroll Text Behavior Scroll Direction Enum");
  PCURL::PCURL((PCURL *)&v23, @"Text Scroll Text Scroll Direction");
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 592), 1u, &v24, &v23, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v23);
  PCString::~PCString(&v24);
  PCURL::PCURL(v6, @"Text Scroll Speed Control Enum");
  PCURL::PCURL((PCURL *)&v23, @"Text Scroll Speed Control");
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 848), 0, &v24, &v23, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, 0, 0);
  PCString::~PCString(&v23);
  PCString::~PCString(&v24);
  PCURL::PCURL(v7, @"Text Scroll Fixed Scroll Rate");
  OZChannelDouble::OZChannelDouble((TXTextScrollBehavior *)((char *)this + 1104), 1, &v24, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0x400000, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v8, @"Text Scroll Auto Scroll Rate");
  OZChannelDouble::OZChannelDouble((TXTextScrollBehavior *)((char *)this + 1256), 1, &v24, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v9, @"Text Scroll Text Start Position");
  OZChannelDouble::OZChannelDouble((TXTextScrollBehavior *)((char *)this + 1408), 0.0, &v24, (OZChannelFolder *)((char *)this + 56), 0xD0u, 138412032, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v10, @"Text Scroll Text End Position");
  OZChannelDouble::OZChannelDouble((TXTextScrollBehavior *)((char *)this + 1560), 0.0, &v24, (OZChannelFolder *)((char *)this + 56), 0xD1u, 138412032, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v11, @"Text Scroll Vertical Flicker Adjustment Enum");
  PCURL::PCURL((PCURL *)&v23, @"Text Scroll Vertical Flicker Adjustment");
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 1712), 0, &v24, &v23, (OZChannelFolder *)((char *)this + 56), 0xCFu, 0, 0, 0);
  PCString::~PCString(&v23);
  PCString::~PCString(&v24);
  PCURL::PCURL(v12, @"Text Scroll Horizontal Flicker Adjustment Enum");
  PCURL::PCURL((PCURL *)&v23, @"Text Scroll Horizontal Flicker Adjustment");
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 1968), 0, &v24, &v23, (OZChannelFolder *)((char *)this + 56), 0xD2u, 0x400000, 0, 0);
  PCString::~PCString(&v23);
  PCString::~PCString(&v24);
  PCURL::PCURL(v13, @"Text Scroll Line Spacing Enum");
  PCURL::PCURL((PCURL *)&v23, @"Text Scroll Line Spacing");
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 2224), 0, &v24, &v23, (OZChannelFolder *)((char *)this + 56), 0xD4u, 0, 0, 0);
  PCString::~PCString(&v23);
  PCString::~PCString(&v24);
  PCURL::PCURL(v14, @"Text Scroll Scroll Rate Label");
  OZChannelDouble::OZChannelDouble((TXTextScrollBehavior *)((char *)this + 2480), 0.0, &v24, (OZChannelFolder *)((char *)this + 56), 0xD3u, 32778, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v15, @"Text Scroll Allow Glyph Animation");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2632), 0, &v24, (OZChannelFolder *)((char *)this + 56), 0xD5u, 0, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v16, @"Text Scroll Start Off Screen");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2784), 1, &v24, (OZChannelFolder *)((char *)this + 56), 0xD6u, 0, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v17, @"Text Scroll Reverse Direction");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2936), &v24, (OZChannelFolder *)((char *)this + 56), 0xD7u, 0xAu, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v18, @"Text Scroll End Offset");
  OZChannelDouble::OZChannelDouble((TXTextScrollBehavior *)((char *)this + 3088), 0.0, &v24, (OZChannelFolder *)((char *)this + 56), 0xD8u, 10, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v19, @"Text Scroll Initialized");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3240), &v24, (OZChannelFolder *)((char *)this + 56), 0xD9u, 2u, 0, 0);
  PCString::~PCString(&v24);
  PCString::PCString(v20, "Hidden Channel");
  OZChannelDouble::OZChannelDouble((TXTextScrollBehavior *)((char *)this + 3392), 5, &v24, (OZChannelFolder *)((char *)this + 56), 0xDAu, 2, 0, 0);
  PCString::~PCString(&v24);
  PCString::PCString(v21, "Hidden Channel");
  OZChannelDouble::OZChannelDouble((TXTextScrollBehavior *)((char *)this + 3544), 13, &v24, (OZChannelFolder *)((char *)this + 56), 0xDBu, 2, 0, 0);
  PCString::~PCString(&v24);
  PCString::PCString(v22, "Hidden Channel");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3696), 0, &v24, (OZChannelFolder *)((char *)this + 56), 0xDCu, 2u, 0, 0);
  PCString::~PCString(&v24);
  OZChannelBase::setFlag((OZChannelBase *)this + 33, 0x100000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3392), 0x100000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3544), 0x100000000, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1408), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1560), 0);
  *((void *)this + 482) = 0;
  *((unsigned char *)this + 3848) = 0;
  TXTextScrollBehavior::setResetChannelFlags(this);
  OZChannel::setValue((OZChannel *)((char *)this + 3240), MEMORY[0x1E4F1FA48], 0.0, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 2936), MEMORY[0x1E4F1FA48], 0.0, 0);
  *((unsigned char *)this + 584) = 1;
}

void sub_1B766F0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, OZChannel *a11, OZChannelEnum *a12, OZChannelEnum *a13, OZChannelEnum *a14, OZChannel *a15, OZChannel *a16, OZChannelEnum *a17, OZChannelEnum *a18, OZChannel *a19, OZChannel *a20,PCString a21)
{
  PCString::~PCString((PCString *)(v29 - 88));
  OZChannel::~OZChannel(v26);
  OZChannel::~OZChannel(v22);
  OZChannelBool::~OZChannelBool(v25);
  OZChannel::~OZChannel(v28);
  OZChannelBool::~OZChannelBool(v27);
  OZChannelBool::~OZChannelBool(v24);
  OZChannelBool::~OZChannelBool(v23);
  OZChannel::~OZChannel(a11);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChannel::~OZChannel(a19);
  OZChannel::~OZChannel(a20);
  OZChannel::~OZChannel(a15);
  OZChannel::~OZChannel(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChannelEnum::~OZChannelEnum(a18);
  OZChannelBehavior::~OZChannelBehavior(v21);
  _Unwind_Resume(a1);
}

OZChannelBase *TXTextScrollBehavior::setResetChannelFlags(TXTextScrollBehavior *this)
{
  if ((*(unsigned int (**)(TXTextScrollBehavior *))(*(void *)this + 688))(this) == 1)
  {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1256), 0x400000, 1);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1104), 0x400000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1712), 0x8000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1968), 0x8000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1408), 0x400000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1560), 0x400000, 1);
    uint64_t v2 = (OZChannelBase *)((char *)this + 2784);
  }
  else
  {
    int v3 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this + 688))(this);
    char v4 = (OZChannelBase *)((char *)this + 1256);
    if (v3 == 2)
    {
      OZChannelBase::setFlag(v4, 0x400000, 1);
      OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1104), 0x400000, 1);
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1712), 0x8000, 1);
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1968), 0x8000, 1);
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1408), 0x400000, 1);
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1560), 0x400000, 1);
      OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2784), 0x400000, 1);
      goto LABEL_7;
    }
    OZChannelBase::resetFlag(v4, 0x400000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1104), 0x400000, 1);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1712), 0x8000, 1);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1968), 0x8000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1408), 0x400000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1560), 0x400000, 1);
    uint64_t v2 = (OZChannelBase *)((char *)this + 2784);
  }
  OZChannelBase::resetFlag(v2, 0x400000, 1);
LABEL_7:
  int v5 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this + 680))(this);
  uint64_t v6 = (OZChannelBase *)((char *)this + 1712);
  if (v5)
  {
    OZChannelBase::resetFlag(v6, 0x400000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1968), 0x400000, 1);
  }
  else
  {
    OZChannelBase::setFlag(v6, 0x400000, 1);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1968), 0x400000, 1);
  }
  int v7 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this + 752))(this);
  CMTime v8 = (OZChannelBase *)((char *)this + 2224);
  if (v7) {
    OZChannelBase::resetFlag(v8, 0x400000, 1);
  }
  else {
    OZChannelBase::setFlag(v8, 0x400000, 1);
  }
  uint64_t v9 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this + 712))(this);
  long long v10 = (OZChannelBase *)((char *)this + 2632);
  if (v9)
  {
    return OZChannelBase::resetFlag(v10, 0x400000, 1);
  }
  else
  {
    return OZChannelBase::setFlag(v10, 0x400000, 1);
  }
}

void TXTextScrollBehavior::TXTextScrollBehavior(TXTextScrollBehavior *this, const TXTextScrollBehavior *a2, char a3)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F10BCB60;
  *(void *)(v5 + 16) = &unk_1F10BCED0;
  *(void *)(v5 + 48) = &unk_1F10BD128;
  *(void *)(v5 + 336) = &unk_1F10BD180;
  *(_OWORD *)(v5 + 552) = 0u;
  *(void *)(v5 + 568) = 0xBFF0000000000000;
  *(void *)(v5 + 576) = 0xBFF0000000000000;
  uint64_t v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 592), (const TXTextScrollBehavior *)((char *)a2 + 592), (OZChannelFolder *)(v5 + 56));
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 848), (const TXTextScrollBehavior *)((char *)a2 + 848), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1104), (const OZChannelBase *)((char *)a2 + 1104), v6);
  CMTime v8 = v7;
  *((void *)this + 138) = &unk_1F1100CF0;
  *((void *)this + 140) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1256), (const OZChannelBase *)((char *)a2 + 1256), v6);
  *((void *)this + 157) = &unk_1F1100CF0;
  *((void *)this + 159) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1408), (const OZChannelBase *)((char *)a2 + 1408), v6);
  *((void *)this + 176) = &unk_1F1100CF0;
  *((void *)this + 178) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1560), (const OZChannelBase *)((char *)a2 + 1560), v6);
  *((void *)this + 195) = &unk_1F1100CF0;
  *((void *)this + 197) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 1712), (const TXTextScrollBehavior *)((char *)a2 + 1712), v6);
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 1968), (const TXTextScrollBehavior *)((char *)a2 + 1968), v6);
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 2224), (const TXTextScrollBehavior *)((char *)a2 + 2224), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 2480), (const OZChannelBase *)((char *)a2 + 2480), v6);
  *((void *)this + 310) = &unk_1F1100CF0;
  *((void *)this + 312) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2632), (const OZChannelBase *)((char *)a2 + 2632), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2784), (const OZChannelBase *)((char *)a2 + 2784), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2936), (const OZChannelBase *)((char *)a2 + 2936), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 3088), (const OZChannelBase *)((char *)a2 + 3088), v6);
  *((void *)this + 386) = &unk_1F1100CF0;
  *((void *)this + 388) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3240), (const OZChannelBase *)((char *)a2 + 3240), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 3392), (const OZChannelBase *)((char *)a2 + 3392), v6);
  *((void *)this + 424) = &unk_1F1100CF0;
  *((void *)this + 426) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 3544), (const OZChannelBase *)((char *)a2 + 3544), v6);
  *((void *)this + 443) = &unk_1F1100CF0;
  *((void *)this + 445) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3696), (const OZChannelBase *)a2 + 33, v6);
  OZChannel::setSliderMin(v8, 0.0);
  OZChannel::setSliderMax(v8, 200.0);
  OZChannel::setSuffix(v8, "px");
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1256), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1256), 10.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 1256), 1.0);
  OZChannel::setSuffix((OZChannel *)((char *)this + 1256), " x");
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1408), -2000.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1408), 2000.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 1408), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1560), -2000.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1560), 2000.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 1560), 1.0);
  *((unsigned char *)this + 584) = 1;
}

void sub_1B766FBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelBool *a10, OZChannelBool *a11, OZChannelBool *a12, OZChannelBool *a13, OZChannel *a14, OZChannelEnum *a15, OZChannelEnum *a16, OZChannelEnum *a17, OZChannelEnum *a18, OZChannelEnum *a19, OZChannel *a20)
{
  OZChannel::~OZChannel(v26);
  OZChannel::~OZChannel(v21);
  OZChannelBool::~OZChannelBool(a10);
  OZChannel::~OZChannel(v25);
  OZChannelBool::~OZChannelBool(a11);
  OZChannelBool::~OZChannelBool(a12);
  OZChannelBool::~OZChannelBool(a13);
  OZChannel::~OZChannel(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelEnum::~OZChannelEnum(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChannel::~OZChannel(v24);
  OZChannel::~OZChannel(v23);
  OZChannel::~OZChannel(v22);
  OZChannel::~OZChannel(a20);
  OZChannelEnum::~OZChannelEnum(a18);
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelBehavior::~OZChannelBehavior(v20);
  _Unwind_Resume(a1);
}

uint64_t TXTextScrollBehavior::initializeParameters(TXTextScrollBehavior *this)
{
  uint64_t v2 = *((void *)this + 67);
  if (v2)
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v2 + 20464), MEMORY[0x1E4F1FA48], 0.0);
    uint64_t v4 = *((void *)this + 67);
    if (ValueAsInt == 3)
    {
      BOOL isVerticalLayout = TXTextLayout::isVerticalLayout((TXTextLayout *)v4);
      uint64_t v6 = (OZChannel *)((char *)this + 592);
      if (isVerticalLayout)
      {
LABEL_4:
        int v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
        double v8 = 0.0;
LABEL_10:
        OZChannel::setValue(v6, v7, v8, 0);
        goto LABEL_11;
      }
    }
    else
    {
      int v9 = OZChannel::getValueAsInt((OZChannel *)(v4 + 20464), MEMORY[0x1E4F1FA48], 0.0);
      BOOL v10 = TXTextLayout::isVerticalLayout(*((TXTextLayout **)this + 67));
      uint64_t v6 = (OZChannel *)((char *)this + 592);
      if (v9 == 4)
      {
        if (!v10) {
          goto LABEL_4;
        }
      }
      else if (v10)
      {
        goto LABEL_4;
      }
    }
    int v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
    double v8 = 1.0;
    goto LABEL_10;
  }
LABEL_11:
  uint64_t v11 = (const CMTime *)MEMORY[0x1E4F1FA48];

  return OZChannel::setValue((OZChannel *)((char *)this + 3240), v11, 1.0, 1);
}

void *TXTextScrollBehavior::didAddToNode(TXTextScrollBehavior *this, OZSceneNode *a2)
{
  __n128 result = (void *)OZChannelBehavior::didAddToNode(this, a2);
  if (a2)
  {
    unint64_t v6 = (unint64_t)result;
  }
  else
  {
    unint64_t v5 = 0;
    unint64_t v6 = 0;
  }
  if (v5 | v6)
  {
    *((void *)this + 67) = v5;
    *((void *)this + 68) = v6;
    if (!v5)
    {
      OZChannelBehavior::didAddToNode(this, a2);
      operator new();
    }
    int v7 = (unsigned char *)(v5 + 52257);
    if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 3240), MEMORY[0x1E4F1FA48], 0.0)) {
      TXTextScrollBehavior::initializeParameters(this);
    }
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 592), MEMORY[0x1E4F1FA48], 0.0) == 1)
    {
      if (!TXTextLayout::isVerticalLayout((TXTextLayout *)v5) || *(unsigned char *)(v5 + 52258))
      {
        if (!TXTextLayout::isVerticalLayout((TXTextLayout *)v5) && !*v7)
        {
LABEL_22:
          TXTextLayout::initializeScrollMargins((TXTextLayout *)v5);
          int v8 = 3;
          goto LABEL_23;
        }
        goto LABEL_24;
      }
    }
    else
    {
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 592), MEMORY[0x1E4F1FA48], 0.0)) {
        goto LABEL_24;
      }
      if (TXTextLayout::isVerticalLayout((TXTextLayout *)v5) && !*v7) {
        goto LABEL_22;
      }
      if (TXTextLayout::isVerticalLayout((TXTextLayout *)v5) || *(unsigned char *)(v5 + 52258))
      {
LABEL_24:
        *((_DWORD *)this + 968) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 592), MEMORY[0x1E4F1FA48], 0.0);
        OZChannelBehavior::didAddToNode(this, a2);
        operator new();
      }
    }
    TXTextLayout::initializeTickerMargins((TXTextLayout *)v5);
    int v8 = 4;
LABEL_23:
    TXTextLayout::cacheMargins((TXTextLayout *)v5, v8);
    TXTextLayout::interlockMargins((TXTextLayout *)v5, 0);
    TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)v5);
    goto LABEL_24;
  }
  return result;
}

void sub_1B76701E0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40091CE6AELL);
  _Unwind_Resume(a1);
}

uint64_t TXTextScrollBehavior::operator=(uint64_t a1, void *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v4 = v3;
  *(void *)(a1 + 536) = v3[67];
  *(void *)(a1 + 544) = v3[68];
  OZChannelBase::operator=(a1 + 592, (uint64_t)(v3 + 74));
  OZChannelBase::operator=(a1 + 848, (uint64_t)(v4 + 106));
  OZChannelBase::operator=(a1 + 1104, (uint64_t)(v4 + 138));
  OZChannelBase::operator=(a1 + 1256, (uint64_t)(v4 + 157));
  OZChannelBase::operator=(a1 + 1712, (uint64_t)(v4 + 214));
  OZChannelBase::operator=(a1 + 1408, (uint64_t)(v4 + 176));
  OZChannelBase::operator=(a1 + 1968, (uint64_t)(v4 + 246));
  OZChannelBase::operator=(a1 + 2224, (uint64_t)(v4 + 278));
  OZChannelBase::operator=(a1 + 2480, (uint64_t)(v4 + 310));

  return OZChannelBase::operator=(a1 + 2632, (uint64_t)(v4 + 329));
}

uint64_t TXTextScrollBehavior::isRebuildUIChannel(TXTextScrollBehavior *this, OZChannelBase *a2)
{
  return 1;
}

uint64_t TXTextScrollBehavior::hideShowChannelsInHUD(TXTextScrollBehavior *this)
{
  return 1;
}

uint64_t TXTextScrollBehavior::canUseAdaptiveLineSpacing(TXTextScrollBehavior *this)
{
  uint64_t result = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this + 712))(this);
  if (result)
  {
    if ((*(unsigned int (**)(TXTextScrollBehavior *))(*(void *)this + 680))(this) == 1)
    {
      uint64_t result = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this + 704))(this);
      if (result) {
        return (*(unsigned int (**)(TXTextScrollBehavior *))(*(void *)this + 688))(this) != 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TXTextScrollBehavior::getAdaptiveLineSpacing(TXTextScrollBehavior *this)
{
  uint64_t result = (*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this + 752))(this);
  if (result)
  {
    int v3 = (const CMTime *)MEMORY[0x1E4F1FA48];
    return OZChannel::getValueAsInt((OZChannel *)((char *)this + 2224), v3, 0.0);
  }
  return result;
}

void TXTextScrollBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = *(const void **)(i + 16);
    if (v4)
    {
      if (v5) {
        TXTextScrollBehavior::setResetChannelFlags(v5);
      }
    }
  }
}

BOOL TXTextScrollBehavior::canBake(TXTextScrollBehavior *this)
{
  return *((void *)this + 67) == 0;
}

void TXTextScrollBehavior::notify(TXTextScrollBehavior *this, __int16 a2)
{
  if ((a2 & 0x1867) != 0) {
    *((unsigned char *)this + 584) = 1;
  }
  OZChannelBehavior::notify(this, a2);
  uint64_t v4 = (TXParagraphStyle ***)(*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this + 712))(this);
  if (v4)
  {
    unint64_t v5 = v4;
    if (a2 < 0) {
      TXTextLayout::setAllParagraphsDirty(v4);
    }
    if ((a2 & 8) != 0)
    {
      uint64_t v6 = *(void *)((*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this + 336))(this) + 1584);
      int v7 = (const OZChannelBase *)(*(uint64_t (**)(TXTextScrollBehavior *))(*(void *)this + 784))(this);
      int v8 = *(OZNotificationManager **)(v6 + 168);
      if (!v8 || !OZNotificationManager::wasChannelModified(v8, v7))
      {
        CMTime v12 = (const OZChannelBase *)(*(uint64_t (**)(TXTextScrollBehavior *, const OZChannelBase *))(*(void *)this + 832))(this, v7);
        double v13 = *(OZNotificationManager **)(v6 + 168);
        if (!v13 || !OZNotificationManager::wasChannelModified(v13, v12))
        {
          double v14 = (const OZChannelBase *)(*(uint64_t (**)(TXTextScrollBehavior *, const OZChannelBase *))(*(void *)this + 856))(this, v12);
          double v15 = *(OZNotificationManager **)(v6 + 168);
          if (!v15 || !OZNotificationManager::wasChannelModified(v15, v14)) {
            return;
          }
        }
LABEL_32:
        TXTextLayout::setAllParagraphsDirty(v5);
        return;
      }
      int v9 = (char *)v5 + 52257;
      if ((*(unsigned int (**)(TXTextScrollBehavior *))(*(void *)this + 680))(this) == 1)
      {
        if (!*v9 || TXTextLayout::isVerticalLayout((TXTextLayout *)v5))
        {
          if (!*((unsigned char *)v5 + 52258) || !TXTextLayout::isVerticalLayout((TXTextLayout *)v5))
          {
            if (TXTextLayout::isVerticalLayout((TXTextLayout *)v5))
            {
LABEL_16:
              TXTextLayout::initializeTickerMargins((TXTextLayout *)v5);
              BOOL v10 = (TXTextLayout *)v5;
              int v11 = 4;
LABEL_31:
              TXTextLayout::cacheMargins(v10, v11);
              goto LABEL_32;
            }
LABEL_30:
            TXTextLayout::initializeScrollMargins((TXTextLayout *)v5);
            BOOL v10 = (TXTextLayout *)v5;
            int v11 = 3;
            goto LABEL_31;
          }
          goto LABEL_24;
        }
      }
      else
      {
        if (!TXTextLayout::isVerticalLayout((TXTextLayout *)v5) && *((unsigned char *)v5 + 52258))
        {
LABEL_24:
          uint64_t v16 = (uint64_t)v5;
          int v17 = 4;
LABEL_28:
          TXTextLayout::setCachedMargins(v16, v17);
          goto LABEL_32;
        }
        if (!TXTextLayout::isVerticalLayout((TXTextLayout *)v5) || !*v9)
        {
          if (!TXTextLayout::isVerticalLayout((TXTextLayout *)v5)) {
            goto LABEL_16;
          }
          goto LABEL_30;
        }
      }
      uint64_t v16 = (uint64_t)v5;
      int v17 = 3;
      goto LABEL_28;
    }
  }
}

void non-virtual thunk to'TXTextScrollBehavior::notify(TXTextScrollBehavior *this, __int16 a2)
{
}

uint64_t TXTextScrollBehavior::parseBegin(TXTextScrollBehavior *this, PCSerializerReadStream *a2)
{
  uint64_t v4 = OZBehavior::parseBegin(this, a2);
  LODWORD(v5) = *((_DWORD *)a2 + 26);
  uint64_t v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::setValue((OZChannel *)((char *)this + 3392), MEMORY[0x1E4F1FA48], (double)v5, 0);
  LODWORD(v7) = *((_DWORD *)a2 + 27);
  OZChannel::setValue((OZChannel *)((char *)this + 3544), v6, (double)v7, 0);
  return v4;
}

uint64_t non-virtual thunk to'TXTextScrollBehavior::parseBegin(TXTextScrollBehavior *this, PCSerializerReadStream *a2)
{
  return TXTextScrollBehavior::parseBegin((TXTextScrollBehavior *)((char *)this - 48), a2);
}

uint64_t TXTextScrollBehavior::parseEnd(TXTextScrollBehavior *this, PCSerializerReadStream *a2)
{
  TXTextScrollBehavior::setResetChannelFlags(this);
  OZChannelBase::setFlag((OZChannelBase *)this + 33, 0x100000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3392), 0x100000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3544), 0x100000000, 0);

  return OZBehavior::parseEnd(this, a2);
}

uint64_t non-virtual thunk to'TXTextScrollBehavior::parseEnd(TXTextScrollBehavior *this, PCSerializerReadStream *a2)
{
  return TXTextScrollBehavior::parseEnd((TXTextScrollBehavior *)((char *)this - 48), a2);
}

void TXTextScrollBehavior::~TXTextScrollBehavior(TXTextScrollBehavior *this)
{
  TXTextScrollBehavior::~TXTextScrollBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F10BCB60;
  *((void *)this + 2) = &unk_1F10BCED0;
  *((void *)this + 6) = &unk_1F10BD128;
  *((void *)this + 42) = &unk_1F10BD180;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 3696));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3544));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3392));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 3240));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3088));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2936));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2784));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2632));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2480));
  OZChannelEnum::~OZChannelEnum((TXTextScrollBehavior *)((char *)this + 2224));
  OZChannelEnum::~OZChannelEnum((TXTextScrollBehavior *)((char *)this + 1968));
  OZChannelEnum::~OZChannelEnum((TXTextScrollBehavior *)((char *)this + 1712));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1560));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1408));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1256));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1104));
  OZChannelEnum::~OZChannelEnum((TXTextScrollBehavior *)((char *)this + 848));
  OZChannelEnum::~OZChannelEnum((TXTextScrollBehavior *)((char *)this + 592));

  OZChannelBehavior::~OZChannelBehavior(this);
}

OZChannelBase *OZBehavior::finishInitializing(OZBehavior *this)
{
  return OZChannelFolder::finishInitializing((OZChannelFolder *)((char *)this + 56));
}

OZChannelBase *TXTextScrollBehavior::setEnableScrollRate(TXTextScrollBehavior *this, int a2)
{
  return OZChannelBase::enable((OZChannelBase *)((char *)this + 1104), a2, 1);
}

uint64_t TXTextScrollBehavior::getScrollDirection(TXTextScrollBehavior *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 592), MEMORY[0x1E4F1FA48], 0.0);
}

uint64_t TXTextScrollBehavior::getSpeedControl(TXTextScrollBehavior *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 848), MEMORY[0x1E4F1FA48], 0.0);
}

void TXTextScrollBehavior::getFixedScrollRate(TXTextScrollBehavior *this, CMTime *a2)
{
}

uint64_t TXTextScrollBehavior::getInterlaceAdjust(TXTextScrollBehavior *this)
{
  if ((*(unsigned int (**)(TXTextScrollBehavior *))(*(void *)this + 680))(this) == 1) {
    uint64_t v2 = (OZChannel *)((char *)this + 1712);
  }
  else {
    uint64_t v2 = (OZChannel *)((char *)this + 1968);
  }
  int v3 = (const CMTime *)MEMORY[0x1E4F1FA48];

  return OZChannel::getValueAsInt(v2, v3, 0.0);
}

uint64_t TXTextScrollBehavior::getTextLayout(TXTextScrollBehavior *this)
{
  return *((void *)this + 67);
}

uint64_t TXTextScrollBehavior::getElement(TXTextScrollBehavior *this)
{
  return *((void *)this + 68);
}

void TXTextScrollBehavior::getStartPosition(TXTextScrollBehavior *this)
{
}

void TXTextScrollBehavior::getEndPosition(TXTextScrollBehavior *this)
{
}

void TXTextScrollBehavior::getAutoScrollRate(TXTextScrollBehavior *this, CMTime *a2)
{
}

BOOL TXTextScrollBehavior::getAllowGlyphAnimation(TXTextScrollBehavior *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 2632), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

BOOL TXTextScrollBehavior::getStartOffScreen(TXTextScrollBehavior *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 2784), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

uint64_t TXTextScrollBehavior::getScrollDirectionChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 592;
}

uint64_t TXTextScrollBehavior::getSpeedControlChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 848;
}

uint64_t TXTextScrollBehavior::getScrollFixedRateChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 1104;
}

uint64_t TXTextScrollBehavior::getScrollAutoRateChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 1256;
}

uint64_t TXTextScrollBehavior::getStartPositionChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 1408;
}

uint64_t TXTextScrollBehavior::getEndPositionChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 1560;
}

uint64_t TXTextScrollBehavior::getAdaptiveLineSpacingChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 2224;
}

uint64_t TXTextScrollBehavior::getInterlaceAdjustChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 1712;
}

uint64_t TXTextScrollBehavior::getScrollRateLabelChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 2480;
}

uint64_t TXTextScrollBehavior::getAllowGlyphAnimationChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 2632;
}

void non-virtual thunk to'TXTextScrollBehavior::~TXTextScrollBehavior(TXTextScrollBehavior *this)
{
}

{
  uint64_t vars8;

  TXTextScrollBehavior::~TXTextScrollBehavior((TXTextScrollBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  TXTextScrollBehavior::~TXTextScrollBehavior((TXTextScrollBehavior *)((char *)this - 48));
}

{
  uint64_t vars8;

  TXTextScrollBehavior::~TXTextScrollBehavior((TXTextScrollBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  TXTextScrollBehavior::~TXTextScrollBehavior((TXTextScrollBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  TXTextScrollBehavior::~TXTextScrollBehavior((TXTextScrollBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

void TXTextBehavior::TXTextBehavior(TXTextBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  void *v4 = &unk_1F10BD1D8;
  v4[2] = &unk_1F10BD490;
  v4[6] = &unk_1F10BD6E8;
  v4[42] = &unk_1F10BD740;
}

void TXTextBehavior::TXTextBehavior(TXTextBehavior *this, const TXTextBehavior *a2, char a3)
{
  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  void *v3 = &unk_1F10BD1D8;
  uint64_t v3[2] = &unk_1F10BD490;
  v3[6] = &unk_1F10BD6E8;
  v3[42] = &unk_1F10BD740;
}

void non-virtual thunk to'TXTextBehavior::~TXTextBehavior(TXTextBehavior *this)
{
}

{
  OZChannelBehavior::~OZChannelBehavior((TXTextBehavior *)((char *)this - 48));
}

{
  OZChannelBehavior::~OZChannelBehavior((TXTextBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZChannelBehavior::~OZChannelBehavior((TXTextBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZChannelBehavior::~OZChannelBehavior((TXTextBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZChannelBehavior::~OZChannelBehavior((TXTextBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

void TXTextBehavior::~TXTextBehavior(TXTextBehavior *this)
{
  OZChannelBehavior::~OZChannelBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

BOOL TXTextBehavior::canAddToSceneNode(TXTextBehavior *this, OZSceneNode *lpsrc)
{
  return lpsrc
}

uint64_t TXTextBehavior::getPreviewSceneNode(TXTextBehavior *this)
{
  PCSharedCount::PCSharedCount(&v7);
  uint64_t NextUniqueID = (const PCString *)OZChannelBase::getNextUniqueID(v1);
  int v3 = (TXTextLayout *)TXTextInput::create((TXTextInput *)&v7, NextUniqueID);
  PCString::~PCString((PCString *)&v7);
  uint64_t v4 = (CMTime *)MEMORY[0x1E4F1FA48];
  long long v9 = *MEMORY[0x1E4F1FA48];
  uint64_t v10 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  PCURL::PCURL((PCURL *)&v7, @"Text Behavior Preview Text");
  (*(void (**)(TXTextLayout *, long long *, PCSharedCount *))(*(void *)v3 + 144))(v3, &v9, &v7);
  PCString::~PCString((PCString *)&v7);
  TXTextLayout::didFinishInitializing(v3, 1);
  TXTextLayout::getCurrentStyleForInsertion((uint64_t)v3, &v7);
  if (v7.var0)
  {
    CMTime v6 = *v4;
    OZChannel::setValue((OZChannel *)v7.var0 + 13, &v6, 16.0, 0);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return (uint64_t)v3 + 200;
}

void sub_1B76710BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void TXTypeOnCurveNode::~TXTypeOnCurveNode(TXTypeOnCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

double TXTypeOnCurveNode::solveNode(TXTypeOnCurveNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v4 = (TXTypeOnBehavior *)*((void *)this + 4);
  CMTime v6 = *a2;
  return TXTypeOnBehavior::getTypeOn(v4, &v6, a4);
}

double TXTypeOnBehavior::getTypeOn(TXTypeOnBehavior *this, CMTime *a2, double a3)
{
  memset(&v20, 0, sizeof(v20));
  (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v20);
  CMTime v19 = v20;
  if ((*(unsigned int (**)(TXTypeOnBehavior *, CMTime *, uint64_t, uint64_t, uint64_t))(*(void *)this + 296))(this, &v19, 1, 1, 1))
  {
    (*(void (**)(CMTime *__return_ptr, TXTypeOnBehavior *))(*(void *)this + 608))(&v17, this);
    CMTime time2 = v17;
    CMTime time1 = v20;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      PCSharedCount v7 = (OZChannel *)((char *)this + 536);
    }
    else
    {
      uint64_t v6 = (*(uint64_t (**)(TXTypeOnBehavior *))(*(void *)this + 336))(this);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), &v15);
      CMTime time1 = v17;
      CMTime time2 = v20;
      if (CMTimeCompare(&time1, &time2) <= 0)
      {
        CMTime time1 = v17;
        CMTime time2 = v18;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        CMTime time1 = v22;
        *(__n128 *)&time2.CMTimeValue value = v15;
        time2.CMTimeEpoch epoch = v16;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v21);
        CMTime time1 = v20;
        CMTime time2 = v21;
        if (CMTimeCompare(&time1, &time2) <= 0 || (v18.flags & 1) != 0 && (v18.flags & 0x10) != 0)
        {
          CMTime time2 = v17;
          CMTime time1 = v20;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v22);
          CMTime time1 = v18;
          operator/((long long *)&v22.value, (uint64_t)&time1, (uint64_t)&v14);
          double Seconds = CMTimeGetSeconds(&v14);
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 536), a2, 0.0);
          double v12 = v11;
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 688), a2, 0.0);
          return v12 + Seconds * (v13 - v12);
        }
      }
      PCSharedCount v7 = (OZChannel *)((char *)this + 688);
    }
    OZChannel::getValueAsDouble(v7, a2, 0.0);
    return v8;
  }
  return a3;
}

void TXTypeOnCurveNode::solveNode(TXTypeOnCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2 = *((void *)a2 + 19);
  uint64_t v3 = *((void *)a2 + 10);
  CMTime v10 = *(CMTime *)((unsigned char *)a2 + 5);
  CMTime v9 = *(CMTime *)((unsigned char *)a2 + 4);
  if (*((_DWORD *)a2 + 36))
  {
    unint64_t v6 = 0;
    do
    {
      PCSharedCount v7 = (TXTypeOnBehavior *)*((void *)this + 4);
      CMTime v8 = v9;
      *(double *)(v2 + 8 * v6) = TXTypeOnBehavior::getTypeOn(v7, &v8, *(double *)(v3 + 8 * v6));
      CMTime v12 = v9;
      CMTime v11 = v10;
      PC_CMTimeSaferAdd(&v12, &v11, (uint64_t)&v9);
      ++v6;
    }
    while (v6 < *((unsigned int *)a2 + 36));
  }
}

void TXTypeOnCurveNode::cloneNode(TXTypeOnCurveNode *this)
{
}

void sub_1B76715B4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t TXTypeOnCurveNode::compare(TXTypeOnCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

__n128 TXTypeOnCurveNode::getNeededRange(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a2 + 96);
  *(void *)(a2 + 40) = *(void *)(a2 + 112);
  __n128 result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 64) = *(void *)(a2 + 136);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a2 + 88) = 0;
  *(void *)(a2 + 80) = *(void *)(a2 + 152);
  return result;
}

void TXFadeOnCurveNode::~TXFadeOnCurveNode(TXFadeOnCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t TXFadeOnCurveNode::solveNode(TXFadeOnCurveNode *this, const CMTime *a2, double a3, double a4)
{
  return OZChannel::getValueAsInt((OZChannel *)(*((void *)this + 4) + 840), MEMORY[0x1E4F1FA48], 0.0);
}

void TXFadeOnCurveNode::solveNode(TXFadeOnCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2 = *((void *)a2 + 19);
  CMTime v9 = *(CMTime *)((unsigned char *)a2 + 5);
  CMTime v8 = *(CMTime *)((unsigned char *)a2 + 4);
  if (*((_DWORD *)a2 + 36))
  {
    unint64_t v5 = 0;
    unint64_t v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      if (OZChannel::getValueAsInt((OZChannel *)(*((void *)this + 4) + 840), v6, 0.0)) {
        double v7 = 1.0;
      }
      else {
        double v7 = 0.0;
      }
      *(double *)(v2 + 8 * v5) = v7;
      CMTime v11 = v8;
      CMTime v10 = v9;
      PC_CMTimeSaferAdd(&v11, &v10, (uint64_t)&v8);
      ++v5;
    }
    while (v5 < *((unsigned int *)a2 + 36));
  }
}

void TXFadeOnCurveNode::cloneNode(TXFadeOnCurveNode *this)
{
}

void sub_1B7671844(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t TXFadeOnCurveNode::compare(TXFadeOnCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

__n128 TXFadeOnCurveNode::getNeededRange(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a2 + 96);
  *(void *)(a2 + 40) = *(void *)(a2 + 112);
  __n128 result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 64) = *(void *)(a2 + 136);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a2 + 88) = 0;
  *(void *)(a2 + 80) = *(void *)(a2 + 152);
  return result;
}

void TXTypeOnBehavior::TXTypeOnBehavior(TXTypeOnBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXTextBehavior::TXTextBehavior(this, a2, a3, a4);
  void *v5 = &unk_1F10BD970;
  v5[2] = &unk_1F10BDC28;
  v5[6] = &unk_1F10BDE80;
  v5[42] = &unk_1F10BDED8;
  PCURL::PCURL((PCURL *)&v6, @"Text Type On Behavior Start");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 536), 0.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 2u, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Text Type On Behavior End");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 688), 1.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 2u, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Text Type On Behavior Fade On");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 840), 0, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = 0u;
  OZChannel::setKeyframable((OZChannel *)((char *)this + 840), 0);
}

void sub_1B7671AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelBool::~OZChannelBool(v13);
  OZChannelPercent::~OZChannelPercent(v12);
  OZChannelPercent::~OZChannelPercent(v11);
  TXTextBehavior::~TXTextBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B7671B2C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7671B3C()
{
}

void TXTypeOnBehavior::TXTypeOnBehavior(TXTypeOnBehavior *this, const TXTypeOnBehavior *a2, char a3)
{
  TXTextBehavior::TXTextBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F10BD970;
  *(void *)(v5 + 16) = &unk_1F10BDC28;
  *(void *)(v5 + 48) = &unk_1F10BDE80;
  *(void *)(v5 + 336) = &unk_1F10BDED8;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)(v5 + 536), (const OZChannelBase *)((char *)a2 + 536), (OZChannelFolder *)(v5 + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 688), (const OZChannelBase *)((char *)a2 + 688), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 840), (const OZChannelBase *)((char *)a2 + 840), v6);
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = 0u;
}

void sub_1B7671C44(_Unwind_Exception *a1)
{
  OZChannelPercent::~OZChannelPercent(v3);
  OZChannelPercent::~OZChannelPercent(v2);
  TXTextBehavior::~TXTextBehavior(v1);
  _Unwind_Resume(a1);
}

void TXTypeOnBehavior::~TXTypeOnBehavior(TXTypeOnBehavior *this)
{
  *(void *)this = &unk_1F10BD970;
  *((void *)this + 2) = &unk_1F10BDC28;
  *((void *)this + 6) = &unk_1F10BDE80;
  *((void *)this + 42) = &unk_1F10BDED8;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 840));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 688));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 536));

  TXTextBehavior::~TXTextBehavior(this);
}

{
  uint64_t vars8;

  TXTypeOnBehavior::~TXTypeOnBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'TXTypeOnBehavior::~TXTypeOnBehavior(TXTypeOnBehavior *this)
{
}

{
  TXTypeOnBehavior::~TXTypeOnBehavior((TXTypeOnBehavior *)((char *)this - 48));
}

{
  TXTypeOnBehavior::~TXTypeOnBehavior((TXTypeOnBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  TXTypeOnBehavior::~TXTypeOnBehavior((TXTypeOnBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTypeOnBehavior::~TXTypeOnBehavior((TXTypeOnBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTypeOnBehavior::~TXTypeOnBehavior((TXTypeOnBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

__n128 TXTypeOnBehavior::operator=(__n128 *a1, const void *a2)
{
  TXTextBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=((uint64_t)&a1[33].n128_i64[1], (uint64_t)&v4[33].n128_i64[1]);
  OZChannelBase::operator=((uint64_t)&a1[43], (uint64_t)&v5[43]);
  OZChannelBase::operator=((uint64_t)&a1[52].n128_i64[1], (uint64_t)&v5[52].n128_i64[1]);
  __n128 result = v5[62];
  a1[62] = result;
  return result;
}

OZChannelBehavior *TXTypeOnBehavior::didAddToNode(OZChannelBehavior *this, OZSceneNode *lpsrc)
{
  if (lpsrc)
  {
    uint64_t v3 = this;
    if (this)
    {
      uint64_t v4 = this;
      OZChannelBehavior::didAddToNode(v3, lpsrc);
      *((void *)v3 + 124) = (char *)v4 + 23968;
      *((void *)v3 + 1TXTextGenerator::~TXTextGenerator(this - 25) = (char *)v4 + 24120;
      return (OZChannelBehavior *)TXTypeOnBehavior::typeOnBehaviorDidLoad((uint64_t)v3);
    }
  }
  return this;
}

uint64_t TXTypeOnBehavior::typeOnBehaviorDidLoad(uint64_t this)
{
  if (!*(void *)(this + 1016)) {
    operator new();
  }
  if (!*(void *)(this + 1008)) {
    operator new();
  }
  return this;
}

void sub_1B76720DC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void TXTypeOnBehavior::willRemove(TXTypeOnBehavior *this)
{
  OZChannel::deleteCurveProcessingNode(*((OZChannel **)this + 124), *((void **)this + 127));
  *((void *)this + 127) = 0;
  OZChannel::deleteCurveProcessingNode(*((OZChannel **)this + 125), *((void **)this + 126));
  *((void *)this + 126) = 0;
  OZChannelBehavior::clearChannels(this);

  OZChannelBehavior::willRemove(this);
}

void TXTypeOnBehavior::createCurveNode(TXTypeOnBehavior *this, OZChannel *a2)
{
}

void sub_1B76721DC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void TXCrawlCurveNode::~TXCrawlCurveNode(TXCrawlCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

double TXCrawlCurveNode::solveNode(TXCrawlCurveNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v4 = *((void *)this + 4);
  CMTime v6 = *a2;
  return (*(double (**)(uint64_t, CMTime *))(*(void *)v4 + 680))(v4, &v6) + a4;
}

void TXCrawlCurveNode::solveNode(TXCrawlCurveNode *this, OZCurveNodeParam *a2, uint64_t a3)
{
  uint64_t v3 = *((void *)a2 + 19);
  uint64_t v4 = *((void *)a2 + 10);
  CMTime v12 = *(CMTime *)((unsigned char *)a2 + 5);
  CMTime v11 = *(CMTime *)((unsigned char *)a2 + 4);
  if (*((_DWORD *)a2 + 36))
  {
    unint64_t v7 = 0;
    do
    {
      double v8 = *(double *)(v4 + 8 * v7);
      uint64_t v9 = *((void *)this + 4);
      CMTime v10 = v11;
      *(double *)(v3 + 8 * v7) = v8
                               + (*(double (**)(uint64_t, CMTime *, uint64_t))(*(void *)v9 + 680))(v9, &v10, a3);
      CMTime v14 = v11;
      CMTime v13 = v12;
      PC_CMTimeSaferAdd(&v14, &v13, (uint64_t)&v11);
      ++v7;
    }
    while (v7 < *((unsigned int *)a2 + 36));
  }
}

void TXCrawlCurveNode::cloneNode(TXCrawlCurveNode *this)
{
}

void sub_1B7672424(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t TXCrawlCurveNode::compare(TXCrawlCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

__n128 TXCrawlCurveNode::getNeededRange(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a2 + 96);
  *(void *)(a2 + 40) = *(void *)(a2 + 112);
  __n128 result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 64) = *(void *)(a2 + 136);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a2 + 88) = 0;
  *(void *)(a2 + 80) = *(void *)(a2 + 152);
  return result;
}

void TXCrawlBehavior::TXCrawlBehavior(TXCrawlBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXTextBehavior::TXTextBehavior(this, a2, a3, a4);
  void *v5 = &unk_1F10BE010;
  v5[2] = &unk_1F10BE2D0;
  v5[6] = &unk_1F10BE528;
  v5[42] = &unk_1F10BE580;
  v5[67] = 0;
  PCURL::PCURL((PCURL *)&v6, @"Text Crawl Behavior Rate");
  OZChannelDouble::OZChannelDouble((TXCrawlBehavior *)((char *)this + 544), 10.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Text Crawl Behavior X Offset");
  OZChannelDouble::OZChannelDouble((TXCrawlBehavior *)((char *)this + 696), &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Text Crawl Behavior End Offset");
  OZChannelDouble::OZChannelDouble((TXCrawlBehavior *)((char *)this + 848), &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 848), 0);
}

void sub_1B76726A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  TXTextBehavior::~TXTextBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B7672700(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7672710()
{
}

void TXCrawlBehavior::TXCrawlBehavior(TXCrawlBehavior *this, const TXCrawlBehavior *a2, char a3)
{
  TXTextBehavior::TXTextBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F10BE010;
  *(void *)(v5 + 16) = &unk_1F10BE2D0;
  *(void *)(v5 + 48) = &unk_1F10BE528;
  *(void *)(v5 + 336) = &unk_1F10BE580;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 544), (const OZChannelBase *)((char *)a2 + 544), (OZChannelFolder *)(v5 + 56));
  *((void *)this + 68) = &unk_1F1100CF0;
  *((void *)this + 70) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 696), (const OZChannelBase *)((char *)a2 + 696), v6);
  *((void *)this + 87) = &unk_1F1100CF0;
  *((void *)this + 89) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 848), (const OZChannelBase *)((char *)a2 + 848), v6);
  *((void *)this + 106) = &unk_1F1100CF0;
  *((void *)this + 108) = &unk_1F1101050;
}

void sub_1B76728C0(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  TXTextBehavior::~TXTextBehavior(v1);
  _Unwind_Resume(a1);
}

void TXCrawlBehavior::~TXCrawlBehavior(TXCrawlBehavior *this)
{
  *(void *)this = &unk_1F10BE010;
  *((void *)this + 2) = &unk_1F10BE2D0;
  *((void *)this + 6) = &unk_1F10BE528;
  *((void *)this + 42) = &unk_1F10BE580;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 848));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 696));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 544));

  TXTextBehavior::~TXTextBehavior(this);
}

{
  uint64_t vars8;

  TXCrawlBehavior::~TXCrawlBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'TXCrawlBehavior::~TXCrawlBehavior(TXCrawlBehavior *this)
{
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlBehavior *)((char *)this - 48));
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t TXCrawlBehavior::operator=(uint64_t a1, const void *a2)
{
  TXTextBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  *(void *)(a1 + 536) = v4[67];
  OZChannelBase::operator=(a1 + 544, (uint64_t)(v4 + 68));
  OZChannelBase::operator=(a1 + 696, (uint64_t)(v5 + 87));

  return OZChannelBase::operator=(a1 + 848, (uint64_t)(v5 + 106));
}

OZChannelBehavior *TXCrawlBehavior::didAddToNode(OZChannelBehavior *this, OZSceneNode *lpsrc)
{
  if (lpsrc)
  {
    uint64_t v3 = this;
    if (this)
    {
      *((void *)v3 + 67) = this;
      OZChannelBehavior::didAddToNode(v3, lpsrc);
      operator new();
    }
  }
  return this;
}

void sub_1B7672C8C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void TXCrawlBehavior::getXOffset(TXCrawlBehavior *this, CMTime *a2)
{
  memset(&v15, 0, sizeof(v15));
  (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v15);
  CMTime v14 = v15;
  if ((*(unsigned int (**)(TXCrawlBehavior *, CMTime *, uint64_t, uint64_t, uint64_t))(*(void *)this + 296))(this, &v14, 1, 1, 1))
  {
    uint64_t v3 = (*(uint64_t (**)(TXCrawlBehavior *, double))(*(void *)this + 336))(this, 0.0);
    memset(&v13, 0, sizeof(v13));
    if (v3) {
      FrameDuratiouint64_t n = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v3 + 336), (__n128 *)&v13);
    }
    else {
      OZFigTimeForChannelSeconds(&v13, 0.0333333333, 0x40000);
    }
    (*(void (**)(CMTime *__return_ptr, TXCrawlBehavior *, __n128))(*(void *)this + 608))(v12, this, FrameDuration);
    memset(&v11, 0, sizeof(v11));
    CMTime time2 = v12[0];
    CMTime time1 = v15;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v11);
    memset(&v10, 0, sizeof(v10));
    CMTime v9 = v12[1];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 848), MEMORY[0x1E4F1FA48], 0.0);
    operator*(&v13, &v8, v5);
    CMTime time1 = v9;
    CMTime time2 = v8;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v10);
    CMTime time1 = v11;
    CMTime time2 = v10;
    if (CMTimeCompare(&time1, &time2) >= 0) {
      PCString v6 = &v10;
    }
    else {
      PCString v6 = &v11;
    }
    CMTime v7 = *v6;
    CMTimeGetSeconds(&v7);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 544), &v11, 0.0);
  }
}

void TXCrawlRightBehavior::TXCrawlRightBehavior(TXCrawlRightBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXCrawlBehavior::TXCrawlBehavior(this, a2, a3, a4);
  void *v4 = &unk_1F10BE5C0;
  v4[2] = &unk_1F10BE880;
  v4[6] = &unk_1F10BEAD8;
  v4[42] = &unk_1F10BEB30;
}

void TXCrawlRightBehavior::TXCrawlRightBehavior(TXCrawlRightBehavior *this, const TXCrawlRightBehavior *a2, char a3)
{
  TXCrawlBehavior::TXCrawlBehavior(this, a2, a3);
  void *v3 = &unk_1F10BE5C0;
  uint64_t v3[2] = &unk_1F10BE880;
  v3[6] = &unk_1F10BEAD8;
  v3[42] = &unk_1F10BEB30;
}

void non-virtual thunk to'TXCrawlRightBehavior::~TXCrawlRightBehavior(TXCrawlRightBehavior *this)
{
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlRightBehavior *)((char *)this - 48));
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlRightBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlRightBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlRightBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlRightBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

void TXCrawlRightBehavior::~TXCrawlRightBehavior(TXCrawlRightBehavior *this)
{
  TXCrawlBehavior::~TXCrawlBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

double TXCrawlRightBehavior::getXOffset(TXCrawlRightBehavior *this, CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 696), a2, 0.0);
  double v5 = v4;
  CMTime v8 = *a2;
  TXCrawlBehavior::getXOffset(this, &v8);
  return v5 + v6;
}

void TXCrawlLeftBehavior::TXCrawlLeftBehavior(TXCrawlLeftBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXCrawlBehavior::TXCrawlBehavior(this, a2, a3, a4);
  void *v4 = &unk_1F10BEB58;
  v4[2] = &unk_1F10BEE18;
  v4[6] = &unk_1F10BF070;
  v4[42] = &unk_1F10BF0C8;
}

void TXCrawlLeftBehavior::TXCrawlLeftBehavior(TXCrawlLeftBehavior *this, const TXCrawlLeftBehavior *a2, char a3)
{
  TXCrawlBehavior::TXCrawlBehavior(this, a2, a3);
  void *v3 = &unk_1F10BEB58;
  uint64_t v3[2] = &unk_1F10BEE18;
  v3[6] = &unk_1F10BF070;
  v3[42] = &unk_1F10BF0C8;
}

void non-virtual thunk to'TXCrawlLeftBehavior::~TXCrawlLeftBehavior(TXCrawlLeftBehavior *this)
{
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlLeftBehavior *)((char *)this - 48));
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlLeftBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlLeftBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlLeftBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlLeftBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

void TXCrawlLeftBehavior::~TXCrawlLeftBehavior(TXCrawlLeftBehavior *this)
{
  TXCrawlBehavior::~TXCrawlBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

double TXCrawlLeftBehavior::getXOffset(TXCrawlLeftBehavior *this, CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 696), a2, 0.0);
  double v5 = v4;
  CMTime v8 = *a2;
  TXCrawlBehavior::getXOffset(this, &v8);
  return v5 - v6;
}

void TXScrollCurveNode::~TXScrollCurveNode(TXScrollCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

double TXScrollCurveNode::solveNode(TXScrollCurveNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v4 = *((void *)this + 4);
  CMTime v6 = *a2;
  return (*(double (**)(uint64_t, CMTime *))(*(void *)v4 + 680))(v4, &v6) + a4;
}

void TXScrollCurveNode::solveNode(TXScrollCurveNode *this, OZCurveNodeParam *a2, uint64_t a3)
{
  uint64_t v3 = *((void *)a2 + 19);
  uint64_t v4 = *((void *)a2 + 10);
  CMTime v12 = *(CMTime *)((unsigned char *)a2 + 5);
  CMTime v11 = *(CMTime *)((unsigned char *)a2 + 4);
  if (*((_DWORD *)a2 + 36))
  {
    unint64_t v7 = 0;
    do
    {
      double v8 = *(double *)(v4 + 8 * v7);
      uint64_t v9 = *((void *)this + 4);
      CMTime v10 = v11;
      *(double *)(v3 + 8 * v7) = v8
                               + (*(double (**)(uint64_t, CMTime *, uint64_t))(*(void *)v9 + 680))(v9, &v10, a3);
      CMTime v14 = v11;
      CMTime v13 = v12;
      PC_CMTimeSaferAdd(&v14, &v13, (uint64_t)&v11);
      ++v7;
    }
    while (v7 < *((unsigned int *)a2 + 36));
  }
}

void TXScrollCurveNode::cloneNode(TXScrollCurveNode *this)
{
}

void sub_1B7673690(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t TXScrollCurveNode::compare(TXScrollCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

__n128 TXScrollCurveNode::getNeededRange(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a2 + 96);
  *(void *)(a2 + 40) = *(void *)(a2 + 112);
  __n128 result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 64) = *(void *)(a2 + 136);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a2 + 88) = 0;
  *(void *)(a2 + 80) = *(void *)(a2 + 152);
  return result;
}

void TXScrollBehavior::TXScrollBehavior(TXScrollBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXTextBehavior::TXTextBehavior(this, a2, a3, a4);
  void *v5 = &unk_1F10BF218;
  v5[2] = &unk_1F10BF4F0;
  v5[6] = &unk_1F10BF748;
  v5[42] = &unk_1F10BF7A0;
  v5[67] = 0;
  PCURL::PCURL((PCURL *)&v6, @"Text Scroll Behavior Rate");
  OZChannelDouble::OZChannelDouble((TXScrollBehavior *)((char *)this + 544), 10.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Text Scroll Behavior Y Offset");
  OZChannelDouble::OZChannelDouble((TXScrollBehavior *)((char *)this + 696), &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Text Scroll Behavior End Offset");
  OZChannelDouble::OZChannelDouble((TXScrollBehavior *)((char *)this + 848), &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 848), 0);
}

void sub_1B7673910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  TXTextBehavior::~TXTextBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B767396C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B767397C()
{
}

void TXScrollBehavior::TXScrollBehavior(TXScrollBehavior *this, const TXScrollBehavior *a2, char a3)
{
  TXTextBehavior::TXTextBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F10BF218;
  *(void *)(v5 + 16) = &unk_1F10BF4F0;
  *(void *)(v5 + 48) = &unk_1F10BF748;
  *(void *)(v5 + 336) = &unk_1F10BF7A0;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 544), (const OZChannelBase *)((char *)a2 + 544), (OZChannelFolder *)(v5 + 56));
  *((void *)this + 68) = &unk_1F1100CF0;
  *((void *)this + 70) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 696), (const OZChannelBase *)((char *)a2 + 696), v6);
  *((void *)this + 87) = &unk_1F1100CF0;
  *((void *)this + 89) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 848), (const OZChannelBase *)((char *)a2 + 848), v6);
  *((void *)this + 106) = &unk_1F1100CF0;
  *((void *)this + 108) = &unk_1F1101050;
}

void sub_1B7673B2C(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  TXTextBehavior::~TXTextBehavior(v1);
  _Unwind_Resume(a1);
}

void TXScrollBehavior::~TXScrollBehavior(TXScrollBehavior *this)
{
  *(void *)this = &unk_1F10BF218;
  *((void *)this + 2) = &unk_1F10BF4F0;
  *((void *)this + 6) = &unk_1F10BF748;
  *((void *)this + 42) = &unk_1F10BF7A0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 848));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 696));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 544));

  TXTextBehavior::~TXTextBehavior(this);
}

{
  uint64_t vars8;

  TXScrollBehavior::~TXScrollBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'TXScrollBehavior::~TXScrollBehavior(TXScrollBehavior *this)
{
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollBehavior *)((char *)this - 48));
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  TXScrollBehavior::~TXScrollBehavior((TXScrollBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXScrollBehavior::~TXScrollBehavior((TXScrollBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXScrollBehavior::~TXScrollBehavior((TXScrollBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t TXScrollBehavior::operator=(uint64_t a1, const void *a2)
{
  TXTextBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  *(void *)(a1 + 536) = v4[67];
  OZChannelBase::operator=(a1 + 544, (uint64_t)(v4 + 68));
  OZChannelBase::operator=(a1 + 696, (uint64_t)(v5 + 87));

  return OZChannelBase::operator=(a1 + 848, (uint64_t)(v5 + 106));
}

OZChannelBehavior *TXScrollBehavior::didAddToNode(OZChannelBehavior *this, OZSceneNode *lpsrc)
{
  if (lpsrc)
  {
    uint64_t v3 = this;
    if (this)
    {
      *((void *)v3 + 67) = this;
      OZChannelBehavior::didAddToNode(v3, lpsrc);
      operator new();
    }
  }
  return this;
}

void sub_1B7673EF8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void TXScrollBehavior::getYOffset(TXScrollBehavior *this, CMTime *a2)
{
  memset(&v15, 0, sizeof(v15));
  (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v15);
  CMTime v14 = v15;
  if ((*(unsigned int (**)(TXScrollBehavior *, CMTime *, uint64_t, uint64_t, uint64_t))(*(void *)this + 296))(this, &v14, 1, 1, 1))
  {
    uint64_t v3 = (*(uint64_t (**)(TXScrollBehavior *, double))(*(void *)this + 336))(this, 0.0);
    memset(&v13, 0, sizeof(v13));
    if (v3) {
      FrameDuratiouint64_t n = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v3 + 336), (__n128 *)&v13);
    }
    else {
      OZFigTimeForChannelSeconds(&v13, 0.0333333333, 0x40000);
    }
    (*(void (**)(CMTime *__return_ptr, TXScrollBehavior *, __n128))(*(void *)this + 608))(v12, this, FrameDuration);
    memset(&v11, 0, sizeof(v11));
    CMTime time2 = v12[0];
    CMTime time1 = v15;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v11);
    memset(&v10, 0, sizeof(v10));
    CMTime v9 = v12[1];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 848), MEMORY[0x1E4F1FA48], 0.0);
    operator*(&v13, &v8, v5);
    CMTime time1 = v9;
    CMTime time2 = v8;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v10);
    CMTime time1 = v11;
    CMTime time2 = v10;
    if (CMTimeCompare(&time1, &time2) >= 0) {
      PCString v6 = &v10;
    }
    else {
      PCString v6 = &v11;
    }
    CMTime v7 = *v6;
    CMTimeGetSeconds(&v7);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 544), &v11, 0.0);
  }
}

void TXScrollUpBehavior::TXScrollUpBehavior(TXScrollUpBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXScrollBehavior::TXScrollBehavior(this, a2, a3, a4);
  void *v4 = &unk_1F10BF7E0;
  v4[2] = &unk_1F10BFAB8;
  v4[6] = &unk_1F10BFD10;
  v4[42] = &unk_1F10BFD68;
}

void TXScrollUpBehavior::TXScrollUpBehavior(TXScrollUpBehavior *this, const TXScrollUpBehavior *a2, char a3)
{
  TXScrollBehavior::TXScrollBehavior(this, a2, a3);
  void *v3 = &unk_1F10BF7E0;
  uint64_t v3[2] = &unk_1F10BFAB8;
  v3[6] = &unk_1F10BFD10;
  v3[42] = &unk_1F10BFD68;
}

void non-virtual thunk to'TXScrollUpBehavior::~TXScrollUpBehavior(TXScrollUpBehavior *this)
{
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollUpBehavior *)((char *)this - 48));
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollUpBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  TXScrollBehavior::~TXScrollBehavior((TXScrollUpBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXScrollBehavior::~TXScrollBehavior((TXScrollUpBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXScrollBehavior::~TXScrollBehavior((TXScrollUpBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

void TXScrollUpBehavior::~TXScrollUpBehavior(TXScrollUpBehavior *this)
{
  TXScrollBehavior::~TXScrollBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

double TXScrollUpBehavior::getYOffset(TXScrollUpBehavior *this, CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 696), a2, 0.0);
  double v5 = v4;
  CMTime v8 = *a2;
  TXScrollBehavior::getYOffset(this, &v8);
  return v5 + v6;
}

void TXScrollDownBehavior::TXScrollDownBehavior(TXScrollDownBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXScrollBehavior::TXScrollBehavior(this, a2, a3, a4);
  void *v4 = &unk_1F10BFD90;
  v4[2] = &unk_1F10C0068;
  v4[6] = &unk_1F10C02C0;
  v4[42] = &unk_1F10C0318;
}

void TXScrollDownBehavior::TXScrollDownBehavior(TXScrollDownBehavior *this, const TXScrollDownBehavior *a2, char a3)
{
  TXScrollBehavior::TXScrollBehavior(this, a2, a3);
  void *v3 = &unk_1F10BFD90;
  uint64_t v3[2] = &unk_1F10C0068;
  v3[6] = &unk_1F10C02C0;
  v3[42] = &unk_1F10C0318;
}

void non-virtual thunk to'TXScrollDownBehavior::~TXScrollDownBehavior(TXScrollDownBehavior *this)
{
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollDownBehavior *)((char *)this - 48));
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollDownBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  TXScrollBehavior::~TXScrollBehavior((TXScrollDownBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXScrollBehavior::~TXScrollBehavior((TXScrollDownBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXScrollBehavior::~TXScrollBehavior((TXScrollDownBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

void TXScrollDownBehavior::~TXScrollDownBehavior(TXScrollDownBehavior *this)
{
  TXScrollBehavior::~TXScrollBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

double TXScrollDownBehavior::getYOffset(TXScrollDownBehavior *this, CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 696), a2, 0.0);
  double v5 = v4;
  CMTime v8 = *a2;
  TXScrollBehavior::getYOffset(this, &v8);
  return v5 - v6;
}

uint64_t TXScrollBehavior::getRateChan(TXScrollBehavior *this)
{
  return (uint64_t)this + 544;
}

uint64_t TXScrollBehavior::getOffsetChan(TXScrollBehavior *this)
{
  return (uint64_t)this + 696;
}

void TXTextTrackingBehavior::TXTextTrackingBehavior(TXTextTrackingBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXTextBehavior::TXTextBehavior(this, a2, a3, a4);
  void *v5 = &unk_1F10C0370;
  v5[2] = &unk_1F10C0630;
  v5[6] = &unk_1F10C0888;
  v5[42] = &unk_1F10C08E0;
  PCURL::PCURL((PCURL *)&v6, @"Text Tracking Behavior Rate");
  OZChannelDouble::OZChannelDouble((TXTextTrackingBehavior *)((char *)this + 536), 2.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Text Tracking Behavior Rate");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 688), 0.1, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Text Tracking Behavior End Offset");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 840), &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  *((unsigned char *)this + 1000) = 0;
  OZChannel::setSliderMin((OZChannel *)((char *)this + 536), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 536), 10.0);
  OZChannel::setMin((OZChannel *)((char *)this + 688), -1000.0);
  OZChannel::setMax((OZChannel *)((char *)this + 688), 1000.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 688), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 688), 1.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 840), 0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 840), 100.0);
  *((unsigned char *)this + 1000) = 0;
}

void sub_1B767490C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  OZChannelPercent::~OZChannelPercent(v12);
  OZChannel::~OZChannel(v11);
  TXTextBehavior::~TXTextBehavior(v10);
  _Unwind_Resume(a1);
}

void TXTextTrackingBehavior::TXTextTrackingBehavior(TXTextTrackingBehavior *this, const TXTextTrackingBehavior *a2, char a3)
{
  TXTextBehavior::TXTextBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F10C0370;
  *(void *)(v5 + 16) = &unk_1F10C0630;
  *(void *)(v5 + 48) = &unk_1F10C0888;
  *(void *)(v5 + 336) = &unk_1F10C08E0;
  PCString v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 536), (const OZChannelBase *)((char *)a2 + 536), (OZChannelFolder *)(v5 + 56));
  *((void *)this + 67) = &unk_1F1100CF0;
  *((void *)this + 69) = &unk_1F1101050;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 688), (const OZChannelBase *)((char *)a2 + 688), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 840), (const OZChannelBase *)((char *)a2 + 840), v6);
  *((void *)this + 105) = &unk_1F1101490;
  *((void *)this + 107) = &unk_1F11017F0;
  *((unsigned char *)this + 1000) = 0;
}

void sub_1B7674AF4(_Unwind_Exception *a1)
{
  OZChannelPercent::~OZChannelPercent(v3);
  OZChannel::~OZChannel(v2);
  TXTextBehavior::~TXTextBehavior(v1);
  _Unwind_Resume(a1);
}

void TXTextTrackingBehavior::~TXTextTrackingBehavior(TXTextTrackingBehavior *this)
{
  *(void *)this = &unk_1F10C0370;
  *((void *)this + 2) = &unk_1F10C0630;
  *((void *)this + 6) = &unk_1F10C0888;
  *((void *)this + 42) = &unk_1F10C08E0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 840));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 688));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 536));

  TXTextBehavior::~TXTextBehavior(this);
}

{
  uint64_t vars8;

  TXTextTrackingBehavior::~TXTextTrackingBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'TXTextTrackingBehavior::~TXTextTrackingBehavior(TXTextTrackingBehavior *this)
{
}

{
  TXTextTrackingBehavior::~TXTextTrackingBehavior((TXTextTrackingBehavior *)((char *)this - 48));
}

{
  TXTextTrackingBehavior::~TXTextTrackingBehavior((TXTextTrackingBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  TXTextTrackingBehavior::~TXTextTrackingBehavior((TXTextTrackingBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTextTrackingBehavior::~TXTextTrackingBehavior((TXTextTrackingBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  TXTextTrackingBehavior::~TXTextTrackingBehavior((TXTextTrackingBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t TXTextTrackingBehavior::operator=(uint64_t a1, const void *a2)
{
  TXTextBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelBase::operator=(a1 + 536, (uint64_t)(v4 + 536));
  OZChannelBase::operator=(a1 + 688, (uint64_t)(v5 + 688));
  uint64_t result = OZChannelBase::operator=(a1 + 840, (uint64_t)(v5 + 840));
  *(unsigned char *)(a1 + 1000) = v5[1000];
  return result;
}

char *TXTextTrackingBehavior::didAddToNode(char *this, OZSceneNode *lpsrc)
{
  if (lpsrc)
  {
    uint64_t v3 = (uint64_t)this;
    if (this)
    {
      *(void *)(v3 + 992) = this;
      *(unsigned char *)(v3 + 1000) = 1;
      double v4 = (OZChannel *)(this + 60520);
      OZChannel::getValueAsDouble((OZChannel *)(this + 60520), MEMORY[0x1E4F1FA48], 0.0);
      uint64_t v5 = (OZChannelBase *)(v3 + 688);
      if (v6 >= 4.0)
      {
        OZChannelBase::resetFlag(v5, 2, 0);
        OZChannelBase::setFlag((OZChannelBase *)(v3 + 536), 2, 0);
      }
      else
      {
        OZChannelBase::setFlag(v5, 2, 0);
        OZChannelBase::resetFlag((OZChannelBase *)(v3 + 536), 2, 0);
      }
      OZChannelBehavior::didAddToNode((OZChannelBehavior *)v3, lpsrc);
      OZChannel::getValueAsDouble(v4, MEMORY[0x1E4F1FA48], 0.0);
      operator new();
    }
  }
  return this;
}

void sub_1B7674F64(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void TXTextTrackingBehavior::willRemove(TXTextLayout **this)
{
  TXTextLayout::invalidateLayout(this[124]);
  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this[124]);

  OZChannelBehavior::willRemove((OZChannelBehavior *)this);
}

void TXTextTrackingBehavior::createCurveNode(TXTextTrackingBehavior *this, OZChannel *a2)
{
}

void sub_1B7675028(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void TXTextTrackingBehavior::getMultiplier(TXTextTrackingBehavior *this, CMTime *a2)
{
  memset(&v17, 0, sizeof(v17));
  (*(void (**)(CMTime *__return_ptr))(**(void **)(*((void *)this + 47) + 32) + 336))(&v17);
  CMTime v16 = v17;
  if ((*(unsigned int (**)(TXTextTrackingBehavior *, CMTime *, uint64_t, uint64_t, uint64_t))(*(void *)this + 296))(this, &v16, 1, 1, 1))
  {
    (*(void (**)(CMTime *__return_ptr, TXTextTrackingBehavior *, double))(*(void *)this + 608))(v15, this, 0.0);
    CMTime v18 = v15[0];
    CMTime v19 = v17;
    v3.n128_f64[0] = PC_CMTimeSaferSubtract(&v19, &v18, (uint64_t)&v13);
    uint64_t v4 = (*(uint64_t (**)(TXTextTrackingBehavior *, __n128))(*(void *)this + 336))(this, v3);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), (__n128 *)&v19);
    operator/((long long *)&v13.value, (uint64_t)&v19, (uint64_t)&time);
    Float64 Seconds = CMTimeGetSeconds(&time);
    CMTime v12 = v15[1];
    CMTimeGetSeconds(&v12);
    (*(uint64_t (**)(TXTextTrackingBehavior *))(*(void *)this + 336))(this);
    double v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 840), MEMORY[0x1E4F1FA48], 0.0);
    memset(&v19, 0, sizeof(v19));
    CMTime v7 = (OZScene *)(*(uint64_t (**)(TXTextTrackingBehavior *))(*(void *)this + 336))(this);
    OZScene::getCurrentTime(v7, (__n128 *)&v19);
    OZChannel::getValueAsDouble((OZChannel *)(*((void *)this + 124) + 60520), v6, 0.0);
    double v9 = v8;
    CMTime v10 = (OZSceneSettings *)((*(uint64_t (**)(TXTextTrackingBehavior *))(*(void *)this + 336))(this) + 336);
    if (v9 >= 4.0) {
      CMTime v11 = (OZChannel *)((char *)this + 688);
    }
    else {
      CMTime v11 = (OZChannel *)((char *)this + 536);
    }
    OZSceneSettings::getFrameDuration(v10, (__n128 *)&v13);
    operator*(&v13, &v18, Seconds);
    OZChannel::getValueAsDouble(v11, &v18, 0.0);
    OZBehavior::getSceneFrameRate(this);
  }
}

uint64_t non-virtual thunk to'TXTextTrackingBehavior::parseEnd(TXTextTrackingBehavior *this, PCSerializerReadStream *a2)
{
  return OZBehavior::parseEnd((TXTextTrackingBehavior *)((char *)this - 48), a2);
}

void TXCollectionEnum::TXCollectionEnum(TXCollectionEnum *this, unsigned int a2, const PCString *a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, OZChannelImpl *a8, OZChannelInfo *a9)
{
  OZChannelEnum::OZChannelEnum(this, a2, a3, a4, a5, a6, a7, a8, a9);
  void *v9 = &unk_1F10C0938;
  v9[2] = &unk_1F10C0CA8;
}

void TXCollectionEnum::TXCollectionEnum(TXCollectionEnum *this, const TXCollectionEnum *a2, OZChannelFolder *a3)
{
  OZChannelEnum::OZChannelEnum(this, a2, a3);
  void *v3 = &unk_1F10C0938;
  uint64_t v3[2] = &unk_1F10C0CA8;
}

void non-virtual thunk to'TXCollectionEnum::~TXCollectionEnum(PCString *this)
{
}

{
  uint64_t vars8;

  OZChannelEnum::~OZChannelEnum(this - 2);

  JUMPOUT(0x1BA9BFBA0);
}

void TXCollectionEnum::~TXCollectionEnum(PCString *this)
{
  OZChannelEnum::~OZChannelEnum(this);

  JUMPOUT(0x1BA9BFBA0);
}

void TXOldSequenceCurveNode::~TXOldSequenceCurveNode(TXOldSequenceCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

void TXOldSequenceCurveNode::solveNode(TXOldSequenceCurveNode *this, const CMTime *a2, double a3, double a4)
{
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*((void *)this + 4) + 29688), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v9 = *((void *)this + 4);
  CMTime v10 = (TXSequenceParams *)(v9 + 27720);
  if (ValueAsInt)
  {
    TXSequenceParams::getInfluence((TXSequenceParams *)(v9 + 27720), a2, a3);
    memset(&v19, 0, sizeof(v19));
    CMTime v14 = *a2;
    TXSequenceParams::objectLocalToGlobalTime(v10, &v14, (uint64_t)&v19);
    OZChannel::getValueAsDouble(*((OZChannel **)this + 5), &v19, 0.0);
  }
  else
  {
    (*(void (**)(CMTime *__return_ptr))(**((void **)this + 2) + 320))(&v15);
    CMTime v19 = *a2;
    CMTime v18 = v15;
    v11.n128_f64[0] = PC_CMTimeSaferAdd(&v19, &v18, (uint64_t)&v16);
    uint64_t v12 = (*(uint64_t (**)(__n128))(**((void **)this + 4) + 336))(v11);
    operator*(&v16, &time, *(Float64 *)(v12 + 368));
    Float64 Seconds = CMTimeGetSeconds(&time);
    TXSequenceParams::getValue(v10, Seconds, a3, *((OZChannel **)this + 5), a4);
  }
}

double TXSequenceParams::getValue(TXSequenceParams *this, Float64 a2, double a3, OZChannel *a4, double a5)
{
  memset(&v48, 0, sizeof(v48));
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)this + 336))(*(void *)this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), (__n128 *)v47);
  operator*(v47, &v48, a2);
  uint64_t v11 = *(void *)this;
  v47[2] = v48;
  if ((*(unsigned int (**)(void))(*(void *)v11 + 296))())
  {
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 696), MEMORY[0x1E4F1FA48], 0.0)) {
      double v39 = (double)TXSequenceParams::shuffle(this, (const CMTime *)a3, a2);
    }
    else {
      double v39 = a3;
    }
    (*(void (**)(CMTime *__return_ptr))(**(void **)this + 608))(v47);
    CMTime time = v47[1];
    double Seconds = CMTimeGetSeconds(&time);
    double v13 = Seconds * *(double *)((*(uint64_t (**)(void))(**(void **)this + 336))() + 368);
    CMTime v45 = v47[0];
    double v14 = CMTimeGetSeconds(&v45);
    double v38 = a2 - v14 * *(double *)((*(uint64_t (**)(void))(**(void **)this + 336))() + 368);
    double v43 = 0.0;
    double v44 = 0.0;
    TXTextSequenceBehavior::getKeyframeExtent(*(TXTextSequenceBehavior **)this, &v44, &v43);
    if (vabdd_f64(v43, v44) >= 0.0000001) {
      double v16 = v43 - v44;
    }
    else {
      double v16 = v13;
    }
    double v37 = v16;
    double NumObjects = (double)TXSequenceParams::getNumObjects(this, v15);
    uint64_t v18 = (*(uint64_t (**)(void))(**(void **)this + 336))();
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v18 + 336), (__n128 *)&v49);
    operator*(&v49, &v50, a2);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1816), &v50, 0.0);
    double v20 = -1.0 / (v19 + 1.0) + 1.0;
    CMTime v21 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 544), MEMORY[0x1E4F1FA48], 0.0);
    double v23 = v22;
    double v24 = v13 / (v22 * (NumObjects - (NumObjects + -1.0) * v20));
    double v25 = (1.0 - v20)
        * (v24
         * (double)TXSequenceParams::charIndexToSelectionIndex(this, v39, a2));
    double v26 = v13 / v23;
    double v27 = v38 / (v13 / v23);
    double v28 = fmax(floor(v27 + 0.0000001), 0.0);
    double v29 = v27 - v28;
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 136), v21, 0.0);
    int v31 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1000), v21, 0.0);
    double v32 = 1.0 - v29;
    if (v31 != 1) {
      double v32 = v29;
    }
    if (ValueAsInt == 1 && ((int)v28 & 0x80000001) == 1) {
      double v32 = 1.0 - v32;
    }
    Float64 v33 = v37 * ((v26 * v32 - v25) / v24);
    uint64_t v34 = (*(uint64_t (**)(void))(**(void **)this + 336))(*(void *)this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v34 + 336), (__n128 *)&v40);
    operator*(&v40, &v41, v33);
    CMTime v49 = v47[0];
    CMTime v50 = v41;
    PC_CMTimeSaferAdd(&v50, &v49, (uint64_t)&v42);
    OZChannel::getValueAsDouble(a4, &v42, 0.0);
    return v35;
  }
  return a5;
}

double TXSequenceParams::getInfluence(TXSequenceParams *this, const CMTime *a2, double a3)
{
  double v6 = (OZChannelBase *)((char *)this + 8);
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)((char *)this + 8));
  memset(&v39, 0, sizeof(v39));
  CMTime v38 = *a2;
  TXSequenceParams::objectLocalToGlobalTime(this, &v38, (uint64_t)&v39);
  uint64_t v8 = *(void *)this;
  CMTime v37 = v39;
  double v9 = 0.0;
  if ((*(unsigned int (**)(void))(*(void *)v8 + 296))())
  {
    if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 1968), MEMORY[0x1E4F1FA48], 0.0)) {
      return 1.0;
    }
    if (OZChannelBase::isEnabled(v6, 0, 1))
    {
      uint64_t v10 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 216))(ObjectManipulator);
      (*(void (**)(CMTime *__return_ptr))(v10 + 712))(&v35);
      CMTime time2 = v35;
      CMTime time1 = v39;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        *(_OWORD *)&v39.CMTimeValue value = *(_OWORD *)&v35.value;
        CMTimeEpoch epoch = v35.epoch;
      }
      else
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), &v32);
        CMTime time1 = v35;
        CMTime time2 = v36;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v40);
        CMTime time1 = v40;
        *(__n128 *)&time2.CMTimeValue value = v32;
        time2.CMTimeEpoch epoch = v33;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v34);
        CMTime time1 = v39;
        CMTime time2 = v34;
        if (CMTimeCompare(&time1, &time2) < 1)
        {
LABEL_10:
          CMTime time = v39;
          double Seconds = CMTimeGetSeconds(&time);
          double v15 = Seconds
              * *(double *)((*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator)
                          + 368);
          double v16 = (const CMTime *)TXSequenceParams::charIndexToSelectionIndex(this, a3, v15);
          double v9 = 0.0;
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 696), MEMORY[0x1E4F1FA48], 0.0)) {
            LODWORD(v16) = TXSequenceParams::shuffle(this, v16, v15);
          }
          double v17 = TXSequenceParams::normalizeIndex(this, v16, v15);
          CMTime v30 = v39;
          double Offset = TXSequenceParams::getOffset(this, &v30);
          CMTime v29 = v39;
          double v19 = Offset + TXSequenceParams::getStart(this, &v29);
          CMTime v28 = v39;
          TXSequenceParams::getEnd(this, &v28);
          double v21 = Offset + v20;
          if (v19 <= Offset + v20)
          {
            CMTime v27 = v39;
            Spauint64_t n = TXSequenceParams::getSpan(this, &v27);
            OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1816), &v39, 0.0);
            double v24 = Span * v23;
            if (v19 - v24 <= v17)
            {
              if (v17 >= v19)
              {
                double v9 = 1.0;
                if (v17 >= v21)
                {
                  double v25 = v21 + v24;
                  double v9 = 0.0;
                  if (v25 > v17) {
                    return 1.0 - (v17 - v21) / (v25 - v21);
                  }
                }
              }
              else
              {
                return (v17 - (v19 - v24)) / (v19 - (v19 - v24)) + 0.0;
              }
            }
          }
          return v9;
        }
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v12 + 336), &v32);
        CMTime time1 = v35;
        CMTime time2 = v36;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v40);
        CMTime time1 = v40;
        *(__n128 *)&time2.CMTimeValue value = v32;
        time2.CMTimeEpoch epoch = v33;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v34);
        *(_OWORD *)&v39.CMTimeValue value = *(_OWORD *)&v34.value;
        CMTimeEpoch epoch = v34.epoch;
      }
      v39.CMTimeEpoch epoch = epoch;
      goto LABEL_10;
    }
  }
  return v9;
}

double TXSequenceParams::objectLocalToGlobalTime@<D0>(TXSequenceParams *this@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)((char *)this + 8));
  uint64_t v6 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 232))(ObjectManipulator);
  uint64_t v7 = *(void *)(*(uint64_t (**)(void))(v6 + 640))();
  (*(void (**)(CMTime *__return_ptr))(v7 + 320))(&v9);
  CMTime v11 = *a2;
  CMTime v10 = v9;
  return PC_CMTimeSaferAdd(&v11, &v10, a3);
}

void TXSequenceInfluenceCurveNode::~TXSequenceInfluenceCurveNode(TXSequenceInfluenceCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

void TXSequenceInfluenceCurveNode::solveNode(TXSequenceInfluenceCurveNode *this, const CMTime *a2, double a3, double a4)
{
}

void TXSequenceParams::TXSequenceParams(TXSequenceParams *this, OZChannelFolder *a2, unsigned int a3, TXTextSequenceBehavior *a4)
{
  *(void *)this = a4;
  uint64_t v7 = (OZChannelFolder *)((char *)this + 8);
  PCURL::PCURL((PCURL *)&v9, @"Text Sequence Behavior Params");
  OZChannelFolder::OZChannelFolder(v7, &v9, a2, a3, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Text Sequence Behavior Offset Behavior Enum");
  PCURL::PCURL((PCURL *)&v8, @"Text Sequence Behavior Offset Behavior");
  OZChannelEnum::OZChannelEnum((TXSequenceParams *)((char *)this + 136), &v9, &v8, v7, 0x6Bu, 0, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Text Sequence Behavior Offset");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 392), 0.0, &v9, v7, 0x6Cu, 2u, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Text Sequence Behavior Repeat");
  OZChannelDouble::OZChannelDouble((TXSequenceParams *)((char *)this + 544), 1.0, &v9, v7, 0x6Du, 16, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Text Sequence Behavior Random");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 696), &v9, v7, 0x69u, 0, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Text Sequence Behavior Random Seed");
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 848), &v9, v7, 0x6Eu, 0, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Text Sequence Behavior Offset Direction Enum");
  PCURL::PCURL((PCURL *)&v8, @"Text Sequence Behavior Offset Direction");
  OZChannelEnum::OZChannelEnum((TXSequenceParams *)((char *)this + 1000), &v9, &v8, v7, 0x68u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Text Sequence Behavior Select Enum");
  PCURL::PCURL((PCURL *)&v8, @"Text Sequence Behavior Select");
  OZChannelEnum::OZChannelEnum((TXSequenceParams *)((char *)this + 1256), &v9, &v8, v7, 0x64u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Text Sequence Behavior Start");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1512), 0.0, &v9, v7, 0x65u, 2u, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Text Sequence Behavior End");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1664), 0.1, &v9, v7, 0x66u, 2u, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Text Sequence Behavior Spread");
  OZChannelDouble::OZChannelDouble((TXSequenceParams *)((char *)this + 1816), 1.0, &v9, v7, 0x67u, 0, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, @"Text Sequence Behavior Map Animation Enum");
  PCURL::PCURL((PCURL *)&v8, @"Text Sequence Behavior Map Animation");
  OZChannelEnum::OZChannelEnum((TXSequenceParams *)((char *)this + 1968), 1u, &v9, &v8, v7, 0x6Au, 16, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString(&v9);
  *((_OWORD *)this + 139) = 0u;
  OZChannel::setMin((OZChannel *)((char *)this + 392), -1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 392), -1.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 544), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 544), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1816), 0.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1816), 0.0);
}

void sub_1B7676664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannel *a10, OZChannelBool *a11, OZChannelEnum *a12, PCString a13, PCString a14)
{
  PCString::~PCString(&a13);
  PCString::~PCString(&a14);
  OZChannel::~OZChannel(v18);
  OZChannelPercent::~OZChannelPercent(v15);
  OZChannelPercent::~OZChannelPercent(v21);
  OZChannelEnum::~OZChannelEnum(v20);
  OZChannelEnum::~OZChannelEnum(v19);
  OZChannel::~OZChannel(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannel::~OZChannel(v17);
  OZChannelPercent::~OZChannelPercent(v16);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChannelFolder::~OZChannelFolder(v14);
  _Unwind_Resume(a1);
}

void TXSequenceParams::TXSequenceParams(TXSequenceParams *this, const TXSequenceParams *a2, OZChannelFolder *a3, TXTextSequenceBehavior *a4)
{
  *(void *)this = a4;
  uint64_t v6 = (TXSequenceParams *)((char *)this + 136);
  uint64_t v7 = (OZChannelFolder *)((char *)this + 8);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 8), (const OZChannelFolder *)((char *)a2 + 8), a3);
  OZChannelEnum::OZChannelEnum(v6, (const TXSequenceParams *)((char *)a2 + 136), v7);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 392), (const OZChannelBase *)((char *)a2 + 392), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 544), (const OZChannelBase *)((char *)a2 + 544), v7);
  *((void *)this + 68) = &unk_1F1100CF0;
  *((void *)this + 70) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 696), (const OZChannelBase *)((char *)a2 + 696), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 848), (const OZChannelBase *)((char *)a2 + 848), v7);
  *((void *)this + 106) = &unk_1F1102B70;
  *((void *)this + 108) = &unk_1F1102ED0;
  OZChannelEnum::OZChannelEnum((TXSequenceParams *)((char *)this + 1000), (const TXSequenceParams *)((char *)a2 + 1000), v7);
  OZChannelEnum::OZChannelEnum((TXSequenceParams *)((char *)this + 1256), (const TXSequenceParams *)((char *)a2 + 1256), v7);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1512), (const OZChannelBase *)((char *)a2 + 1512), v7);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1664), (const OZChannelBase *)((char *)a2 + 1664), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1816), (const OZChannelBase *)((char *)a2 + 1816), v7);
  *((void *)this + 227) = &unk_1F1100CF0;
  *((void *)this + 229) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((TXSequenceParams *)((char *)this + 1968), (const TXSequenceParams *)((char *)a2 + 1968), v7);
  *((void *)this + 278) = 0;
  *((_DWORD *)this + 558) = 0;
  *((_DWORD *)this + 559) = *((_DWORD *)a2 + 559);
}

void sub_1B7676A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelBool *a10, OZChannel *a11, OZChannelPercent *a12)
{
  OZChannel::~OZChannel(v15);
  OZChannelPercent::~OZChannelPercent(v16);
  OZChannelPercent::~OZChannelPercent(v14);
  OZChannelEnum::~OZChannelEnum(v19);
  OZChannelEnum::~OZChannelEnum(v18);
  OZChannel::~OZChannel(v17);
  OZChannelBool::~OZChannelBool(a10);
  OZChannel::~OZChannel(a11);
  OZChannelPercent::~OZChannelPercent(a12);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void sub_1B7676AB8()
{
}

void sub_1B7676AC0()
{
}

void sub_1B7676AC8()
{
}

void sub_1B7676AD0()
{
}

void sub_1B7676AD8()
{
}

void sub_1B7676AE0()
{
}

void TXSequenceParams::~TXSequenceParams(TXSequenceParams *this)
{
  uint64_t v2 = *((void *)this + 278);
  if (v2)
  {
    MEMORY[0x1BA9BFB70](v2, 0x1000C8052888210);
    *((void *)this + 278) = 0;
  }
  OZChannelEnum::~OZChannelEnum((TXSequenceParams *)((char *)this + 1968));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1816));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1664));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1512));
  OZChannelEnum::~OZChannelEnum((TXSequenceParams *)((char *)this + 1256));
  OZChannelEnum::~OZChannelEnum((TXSequenceParams *)((char *)this + 1000));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 848));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 696));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 544));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 392));
  OZChannelEnum::~OZChannelEnum((TXSequenceParams *)((char *)this + 136));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 8));
}

double TXSequenceParams::getOffset(TXSequenceParams *this, CMTime *a2)
{
  double v4 = 0.0;
  unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 136), a2, 0.0);
  uint64_t v6 = (CMTime *)MEMORY[0x1E4F1FA48];
  int v7 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1256), MEMORY[0x1E4F1FA48], 0.0);
  if (ValueAsInt >= 5)
  {
    if (ValueAsInt == 5)
    {
      double v29 = 1.0 / (double)TXSequenceParams::getNumObjects(this, v8);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1816), a2, 0.0);
      double v31 = v30 * v29 + 1.0;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 392), a2, 0.0);
      double v33 = v32;
      int v34 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1000), a2, 0.0);
      double v35 = 1.0 - v33;
      if (v34 != 1) {
        double v35 = v33;
      }
      return v31 * v35 + 0.0;
    }
  }
  else
  {
    int v9 = v7;
    uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)((char *)this + 8));
    if (ObjectManipulator)
    {
      uint64_t v11 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 216))(ObjectManipulator);
      (*(void (**)(CMTime *__return_ptr))(v11 + 712))(&v44);
      CMTime v43 = v45;
      CMTime time1 = v45;
      CMTime time2 = *v6;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        double v13 = 1.0 / (double)TXSequenceParams::getNumObjects(this, v12);
        double v14 = 0.0;
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1816), a2, 0.0);
        double v16 = v15;
        double v17 = -(v15 * v13) - v13;
        if (v9 != 3) {
          double v14 = v17;
        }
        uint64_t v18 = (*(uint64_t (**)(void))(**(void **)this + 336))();
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v18 + 336), &v41);
        CMTime time1 = v43;
        *(__n128 *)&time2.CMTimeValue value = v41;
        time2.CMTimeEpoch epoch = v42;
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          uint64_t v19 = (*(uint64_t (**)(void))(**(void **)this + 336))(*(void *)this);
          OZSceneSettings::getFrameDuration((OZSceneSettings *)(v19 + 336), &v41);
          CMTime time1 = v43;
          *(__n128 *)&time2.CMTimeValue value = v41;
          time2.CMTimeEpoch epoch = v42;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v43);
        }
        double v20 = v16 * v13;
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 544), a2, 0.0);
        operator/((long long *)&v43.value, (uint64_t)&time1, v21);
        CMTime v43 = time1;
        if (ValueAsInt == 1)
        {
          operator/((long long *)&v43.value, (uint64_t)&time1, 2.0);
          CMTime v43 = time1;
        }
        double v22 = v20 + 1.0;
        CMTime time2 = v44;
        CMTime time1 = *a2;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v41);
        operator/((long long *)&v41, (uint64_t)&v43, (uint64_t)&v40);
        double Seconds = CMTimeGetSeconds(&v40);
        double v24 = (OZChannel *)((char *)this + 1000);
        if (OZChannel::getValueAsInt(v24, a2, 0.0) == 1)
        {
          int v25 = 0;
          double v26 = floor(Seconds + 0.0000001);
          BOOL v27 = v26 > 0.0 && v26 == Seconds;
          double v28 = v26 - Seconds + 1.0;
          if (v27) {
            double v28 = 0.0;
          }
        }
        else
        {
          double v36 = fmax(floor(Seconds + -0.000001 + 0.0000001), 0.0);
          double v28 = Seconds - v36;
          if ((int)v36 >= 0) {
            int v25 = (int)v36 & 1;
          }
          else {
            int v25 = -((int)v36 & 1);
          }
        }
        double v37 = v22 - v14;
        double v4 = v14 + v37 * v28;
        switch(ValueAsInt)
        {
          case 4u:
            double v38 = sin((v4 - v14) * 3.14159265 / v37 + -1.57079633) * 0.5 + 0.5;
            return v14 + v37 * v38;
          case 3u:
            double v38 = sin((v4 - v14) * 3.14159265 / v37 * 0.5);
            return v14 + v37 * v38;
          case 2u:
            double v38 = 1.0 - cos((v4 - v14) * 3.14159265 / v37 * 0.5);
            return v14 + v37 * v38;
        }
        if (ValueAsInt == 1
          && (!OZChannel::getValueAsInt(v24, a2, 0.0) && v25 == 1
           || OZChannel::getValueAsInt(v24, a2, 0.0) == 1 && !v25))
        {
          return 1.0 - v4;
        }
      }
    }
  }
  return v4;
}