void OZWriteOnCurveNode::cloneNode(OZWriteOnCurveNode *this)
{
  operator new();
}

void sub_1B7B94ACC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C408AB2CE21);
  _Unwind_Resume(a1);
}

uint64_t OZWriteOnCurveNode::compare(OZWriteOnCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

__n128 OZWriteOnCurveNode::getNeededRange(OZWriteOnCurveNode *this, OZCurveNodeParam *a2)
{
  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((void *)a2 + 5) = *((void *)a2 + 14);
  __n128 result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((void *)a2 + 8) = *((void *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((unsigned char *)a2 + 88) = 0;
  *((void *)a2 + 10) = *((void *)a2 + 19);
  return result;
}

uint64_t PGMetalTexture::toBitmap@<X0>(PGMetalTexture *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 8);
  if (result)
  {
    v4 = (id *)*((void *)this + 9);
    if (v4)
    {
      HGMetalTexture::CreateBitmapCopy((HGMetalTexture *)result, v4, *(HGRect *)(result + 20), &v5);
      operator new();
    }
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_1B7B94CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  _Unwind_Resume(a1);
}

double PCCreateBitmap<FxBitmapRepHGBitmap>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a2;
  switch((*(unsigned int (**)(uint64_t))(*(void *)*a1 + 48))(*a1))
  {
    case 1u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 2u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 3u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 4u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 5u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 6u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 7u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 8u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 9u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>,std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xAu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xBu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xCu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xDu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xEu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xFu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0x10u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0x11u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(a1, &v7, &v6);
LABEL_20:
      double result = *(double *)&v6;
      *(_OWORD *)a3 = v6;
      break;
    default:
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      break;
  }
  return result;
}

void PGMetalTexture::~PGMetalTexture(PGMetalTexture *this)
{
  *(void *)this = &unk_1F1133940;
  uint64_t v2 = *((void *)this + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }

  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F1133940;
  uint64_t v2 = *((void *)this + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  PCImage::~PCImage((CGColorSpace **)this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t PGMetalTexture::getWidth(PGMetalTexture *this)
{
  uint64_t v1 = *((void *)this + 8);
  if (v1) {
    return (*(_DWORD *)(v1 + 28) - *(_DWORD *)(v1 + 20));
  }
  else {
    return 0;
  }
}

uint64_t PGMetalTexture::getHeight(PGMetalTexture *this)
{
  uint64_t v1 = *((void *)this + 8);
  if (v1) {
    return (*(_DWORD *)(v1 + 32) - *(_DWORD *)(v1 + 24));
  }
  else {
    return 0;
  }
}

uint64_t PGMetalTexture::getSize(PGMetalTexture *this)
{
  uint64_t v1 = *((void *)this + 8);
  if (v1) {
    return *(void *)(v1 + 72);
  }
  else {
    return 0;
  }
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  long long v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B95190(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C2C38;
  std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B95204(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B95288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10B3D18;
  return a1;
}

void sub_1B7B95330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void PCBitmap::PCBitmap<FxBitmapRepHGBitmap>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 32))();
  int v7 = (*(uint64_t (**)(void))(*(void *)*a2 + 40))();
  unsigned int v8 = (*(uint64_t (**)(void))(*(void *)*a2 + 48))();
  int BitsPerChannel = PCPixelFormat::getBitsPerChannel(v8);
  unsigned int v10 = (*(uint64_t (**)(void))(*(void *)*a2 + 48))();
  int NumChannels = PCPixelFormat::getNumChannels(v10);
  unsigned int v12 = (*(uint64_t (**)(void))(*(void *)*a2 + 48))();
  v13 = (CGColorSpace *)PCBitmap::sanitizeColorSpace(a3, v12);
  PCImage::PCImage((PCImage *)a1, v6, v7, BitsPerChannel, NumChannels, v13);
  *(void *)a1 = &unk_1F10C2650;
  uint64_t v14 = *a2;
  *a2 = 0;
  *(void *)(a1 + 64) = v14;
  *(_DWORD *)(a1 + 24) = 1;
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  int v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B9552C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C2C88;
  std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B955A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B95624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10C2CD8;
  return a1;
}

void sub_1B7B956CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B95750(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C2D50;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B957C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B95848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10C2848;
  return a1;
}

void sub_1B7B958F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B95974(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C2DA0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B959E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B95A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10C28C0;
  return a1;
}

void sub_1B7B95B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B95B98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C2DF0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B95C0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B95C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10B3B38;
  return a1;
}

void sub_1B7B95D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B95DBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C2E40;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B95E30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B95EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10C2938;
  return a1;
}

void sub_1B7B95F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B95FE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C2E90;
  std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B96054(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B960D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10B3C28;
  return a1;
}

void sub_1B7B96180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B96204(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C2EE0;
  std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B96278(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B962FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10C2F30;
  return a1;
}

void sub_1B7B963A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B96428(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C2FA8;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B9649C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B96520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10B3A48;
  return a1;
}

void sub_1B7B965C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>,std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B9664C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C2FF8;
  std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B966C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B96744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10C3048;
  return a1;
}

void sub_1B7B967EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B96870(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C30C0;
  std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B968E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B96968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10C3110;
  return a1;
}

void sub_1B7B96A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B96A94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C3188;
  std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B96B08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B96B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10C31D8;
  return a1;
}

void sub_1B7B96C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B96CB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C3250;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B96D2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B96DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10C29B0;
  return a1;
}

void sub_1B7B96E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B96EDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C32A0;
  std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B96F50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B96FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10C32F0;
  return a1;
}

void sub_1B7B9707C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B97100(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C3368;
  std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B97174(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B971F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10C33B8;
  return a1;
}

void sub_1B7B972A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B97324(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C3430;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B97398(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B9741C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10C2A28;
  return a1;
}

void sub_1B7B974C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B7B97548(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F10C3480;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B7B975BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>,std::unique_ptr<FxBitmapRepHGBitmap>,CGColorSpace *&>(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>::PCBitmap_t<FxBitmapRepHGBitmap>(a2, &v6, *a4);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B7B97640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>::PCBitmap_t<FxBitmapRepHGBitmap>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v7 = v4;
  PCBitmap::PCBitmap<FxBitmapRepHGBitmap>((uint64_t)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *a1 = &unk_1F10C2AA0;
  return a1;
}

void sub_1B7B976E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    PCBitmap::PCBitmap();
  }
  _Unwind_Resume(exception_object);
}

void OZTextStyle::OZTextStyle(OZTextStyle *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZStyle::OZStyle(this, a2, a3, a4);
  void *v4 = &unk_1F11339B8;
  v4[2] = &unk_1F1133AE8;
  v4[6] = &unk_1F1133D40;
}

void OZTextStyle::OZTextStyle(OZTextStyle *this, const OZTextStyle *a2, OZSceneNode *a3, char a4)
{
  OZStyle::OZStyle(this, a2, a3, a4);
  void *v4 = &unk_1F11339B8;
  v4[2] = &unk_1F1133AE8;
  v4[6] = &unk_1F1133D40;
}

void OZMotionPathBehavior::OZMotionPathBehavior(OZMotionPathBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  void *v5 = &unk_1F1133DB0;
  v5[2] = &unk_1F1134068;
  v5[6] = &unk_1F11342C0;
  v5[42] = &unk_1F1134318;
  PCURL::PCURL((PCURL *)v53, @"Motion Path Parameter Path Shape");
  PCURL::PCURL((PCURL *)&v52, @"Motion Path Behavior Path Shape");
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 536), v53, &v52, (OZChannelFolder *)((char *)this + 56), 0xCFu, 0, 0, 0);
  PCString::~PCString(&v52);
  PCString::~PCString(v53);
  PCURL::PCURL(v6, @"Channel Position");
  OZChannelPosition3D::OZChannelPosition3D((OZMotionPathBehavior *)((char *)this + 792), v53, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0x28210002u, 3u);
  PCString::~PCString(v53);
  PCURL::PCURL(v7, @"Channel Position");
  OZChannelPosition3D::OZChannelPosition3D((OZMotionPathBehavior *)((char *)this + 1680), v53, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0x28210002u, 3u);
  PCString::~PCString(v53);
  PCURL::PCURL(v8, @"Motion Path Parameter Path Type");
  PCURL::PCURL((PCURL *)&v52, @"Motion Path Behavior Path Type");
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 2568), 0, v53, &v52, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0, 0, 0);
  PCString::~PCString(&v52);
  PCString::~PCString(v53);
  PCURL::PCURL(v9, @"Motion Path Behavior Circle Radius");
  Instance = (OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo *)OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::getInstance(v10);
  unsigned int v12 = (OZChannelInfo *)OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::getInstance(Instance);
  OZChannel2D::OZChannel2D((OZMotionPathBehavior *)((char *)this + 2824), 200.0, 200.0, v53, (OZChannelFolder *)((char *)this + 56), 0xD4u, 0, 2u, (OZChannelImpl *)Instance, v12);
  PCString::~PCString(v53);
  PCURL::PCURL(v13, @"Motion Path Behavior Rect Size");
  v15 = (OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo *)OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::getInstance(v14);
  v16 = (OZChannelInfo *)OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::getInstance(v15);
  OZChannel2D::OZChannel2D((OZMotionPathBehavior *)((char *)this + 3264), 400.0, 400.0, v53, (OZChannelFolder *)((char *)this + 56), 0xD5u, 0, 2u, (OZChannelImpl *)v15, v16);
  PCString::~PCString(v53);
  PCURL::PCURL(v17, @"Motion Path Behavior Wave Start Point");
  OZChannelPosition::OZChannelPosition((OZMotionPathBehavior *)((char *)this + 3704), 0.0, 0.0, v53, (OZChannelFolder *)((char *)this + 56), 0xD6u, 0x10002u, 2u, 0, 0);
  PCString::~PCString(v53);
  PCURL::PCURL(v18, @"Motion Path Behavior Wave End Point");
  OZChannelPosition::OZChannelPosition((OZMotionPathBehavior *)((char *)this + 4408), 0.0, 0.0, v53, (OZChannelFolder *)((char *)this + 56), 0xD7u, 0, 2u, 0, 0);
  PCString::~PCString(v53);
  PCURL::PCURL(v19, @"Motion Path Behavior Wave Amplitude");
  v21 = (OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo *)OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::getInstance(v20);
  v22 = (OZChannelInfo *)OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::getInstance(v21);
  OZChannelDouble::OZChannelDouble((OZMotionPathBehavior *)((char *)this + 5112), 100.0, v53, (OZChannelFolder *)((char *)this + 56), 0xD8u, 0, (OZChannelImpl *)v21, v22);
  PCString::~PCString(v53);
  PCURL::PCURL(v23, @"Motion Path Behavior Wave Frequency");
  v25 = (OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo *)OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::getInstance(v24);
  v26 = (OZChannelInfo *)OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::getInstance(v25);
  OZChannelDouble::OZChannelDouble((OZMotionPathBehavior *)((char *)this + 5264), 1.0, v53, (OZChannelFolder *)((char *)this + 56), 0xD9u, 0, (OZChannelImpl *)v25, v26);
  PCString::~PCString(v53);
  PCURL::PCURL(v27, @"Motion Path Behavior Wave Phase");
  v29 = (OZChannelInfo *)OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::getInstance(v28);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 5416), 0.0, v53, (OZChannelFolder *)((char *)this + 56), 0xDAu, 0, 0, v29);
  PCString::~PCString(v53);
  PCURL::PCURL(v30, @"Motion Path Behavior Wave Damping");
  v32 = (OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo *)OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::getInstance(v31);
  v33 = (OZChannelInfo *)OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::getInstance(v32);
  OZChannelDouble::OZChannelDouble((OZMotionPathBehavior *)((char *)this + 5568), 0.0, v53, (OZChannelFolder *)((char *)this + 56), 0xDDu, 0, (OZChannelImpl *)v32, v33);
  PCString::~PCString(v53);
  PCURL::PCURL(v34, @"Emitter Geometry Node Ref");
  OZChanRotoshapeRefWithPicker::OZChanRotoshapeRefWithPicker((OZMotionPathBehavior *)((char *)this + 5720), v53, (OZChannelFolder *)((char *)this + 56), 0xD2u, 0);
  PCString::~PCString(v53);
  PCURL::PCURL(v35, @"Motion Path Behavior Offset");
  v37 = (OZChannelImpl *)OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::getInstance(v36);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 39, 0.0, v53, (OZChannelFolder *)((char *)this + 56), 0xD3u, 0, v37, 0);
  PCString::~PCString(v53);
  PCURL::PCURL(v38, @"Motion Path Behavior Transform");
  OZChannelBool::OZChannelBool((OZChannelBool *)this + 40, 1, v53, (OZChannelFolder *)((char *)this + 56), 0xDCu, 0, 0, 0);
  PCString::~PCString(v53);
  PCURL::PCURL(v39, @"Motion Path Parameter Path Direction");
  PCURL::PCURL((PCURL *)&v52, @"Motion Path Behavior Path Direction");
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6232), 0, v53, &v52, (OZChannelFolder *)((char *)this + 56), 0xDBu, 0, 0, 0);
  PCString::~PCString(&v52);
  PCString::~PCString(v53);
  PCURL::PCURL(v40, @"Motion Path Parameter Speed");
  PCURL::PCURL((PCURL *)&v52, @"Motion Path Behavior Speed");
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6488), 0, v53, &v52, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v52);
  PCString::~PCString(v53);
  PCURL::PCURL(v41, @"Motion Path Behavior Velocity");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 6744), 0.0, v53, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(v53);
  PCURL::PCURL(v42, @"Motion Path Parameter Frequency Mode");
  PCURL::PCURL((PCURL *)&v52, @"Motion Path Behavior Frequency Mode");
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6896), 0, v53, &v52, (OZChannelFolder *)((char *)this + 56), 0xD1u, 0, 0, 0);
  PCString::~PCString(&v52);
  PCString::~PCString(v53);
  PCURL::PCURL(v43, @"Motion Path Behavior Frequency");
  v45 = (OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo *)OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::getInstance(v44);
  v46 = (OZChannelInfo *)OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::getInstance(v45);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 7152), 1, v53, (OZChannelFolder *)((char *)this + 56), 0xD0u, 0, (OZChannelImpl *)v45, v46);
  PCString::~PCString(v53);
  PCURL::PCURL(v47, @"Motion Path Parameter Path End Condition");
  PCURL::PCURL((PCURL *)&v52, @"Motion Path Behavior Path End Condition");
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 7304), 0, v53, &v52, (OZChannelFolder *)((char *)this + 56), 0xDEu, 0, 0, 0);
  PCString::~PCString(&v52);
  PCString::~PCString(v53);
  PCURL::PCURL(v48, @"Motion Path Behavior End Frame Offset");
  v50 = (OZChannelImpl *)OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::getInstance(v49);
  OZChannelDouble::OZChannelDouble((OZMotionPathBehavior *)((char *)this + 7560), v53, (OZChannelFolder *)((char *)this + 56), 0xCBu, 10, v50, 0);
  PCString::~PCString(v53);
  PCString::PCString(v51, "");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7712), 0, v53, (OZChannelFolder *)((char *)this + 56), 0xDFu, 2u, 0, 0);
  PCString::~PCString(v53);
  PCSharedMutex::PCSharedMutex((OZMotionPathBehavior *)((char *)this + 7864));
  *((_DWORD *)this + 1992) = -1;
  *(_OWORD *)&v53[0].var0 = xmmword_1B837F734;
  long long v54 = unk_1B837F744;
  OZChannelEnum::setTags((OZMotionPathBehavior *)((char *)this + 6488), (char *)v53, 8);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 928), 0x20000, 0);
  (*(void (**)(char *))(*((void *)this + 116) + 128))((char *)this + 928);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1080), 0x20000, 0);
  (*(void (**)(char *))(*((void *)this + 135) + 128))((char *)this + 1080);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1528), 0x20000, 0);
  (*(void (**)(char *))(*((void *)this + 191) + 128))((char *)this + 1528);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1816), 0x20000, 0);
  (*(void (**)(char *))(*((void *)this + 227) + 128))((char *)this + 1816);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1968), 0x20000, 0);
  (*(void (**)(char *))(*((void *)this + 246) + 128))((char *)this + 1968);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2416), 0x20000, 0);
  (*(void (**)(char *))(*((void *)this + 302) + 128))((char *)this + 2416);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7560), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7560));
  OZChannel::setIsSpline((OZChannel *)((char *)this + 6744), 1);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6744), 0x10000, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 6744));
  OZChannel::setExtrapolation((OZChannel *)((char *)this + 6744), 0, 0);
  OZChannel::setExtrapolation((OZChannel *)((char *)this + 6744), 0, 1);
  OZChannel::setInterpolation((OZChannel *)((char *)this + 6744), 4);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 6744), 0, 0);
  *((unsigned char *)this + 2120) = 0;
  *((unsigned char *)this + 1232) = 0;
}

void sub_1B7B98338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelEnum *a10, OZChannelBool *a11, OZChannelPercent *a12, OZChanObjectRefWithPicker *a13, OZChannel *a14, OZChannel *a15, OZChannel *a16, OZChannel *a17, OZChannelPosition *a18, OZChannelPosition *a19, OZChannel2D *a20,OZChannel2D *a21,OZChannelEnum *a22,OZChannelPosition3D *a23,OZChannelPosition3D *a24,OZChannelEnum *a25,PCString a26)
{
  OZChannelBool::~OZChannelBool(v32);
  OZChannel::~OZChannel(v31);
  OZChannelEnum::~OZChannelEnum(v30);
  OZChannel::~OZChannel(v29);
  OZChannelEnum::~OZChannelEnum(v28);
  OZChannelPercent::~OZChannelPercent(v27);
  OZChannelEnum::~OZChannelEnum(v33);
  OZChannelEnum::~OZChannelEnum(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannelPercent::~OZChannelPercent(a12);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(a13);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(a15);
  OZChannel::~OZChannel(a16);
  OZChannel::~OZChannel(a17);
  OZChannelPosition::~OZChannelPosition(a18);
  OZChannelPosition::~OZChannelPosition(a19);
  OZChannel2D::~OZChannel2D(a20);
  OZChannel2D::~OZChannel2D(a21);
  OZChannelEnum::~OZChannelEnum(a22);
  OZChannelPosition3D::~OZChannelPosition3D(a23);
  OZChannelPosition3D::~OZChannelPosition3D(a24);
  OZChannelEnum::~OZChannelEnum(a25);
  OZChannelBehavior::~OZChannelBehavior(v26);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior::OZMotionPathBehavior(OZMotionPathBehavior *this, const OZMotionPathBehavior *a2, char a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1133DB0;
  *(void *)(v5 + 16) = &unk_1F1134068;
  *(void *)(v5 + 48) = &unk_1F11342C0;
  *(void *)(v5 + 336) = &unk_1F1134318;
  uint64_t v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 536), (const OZMotionPathBehavior *)((char *)a2 + 536), (OZChannelFolder *)(v5 + 56));
  OZChannelPosition3D::OZChannelPosition3D((OZMotionPathBehavior *)((char *)this + 792), (const OZMotionPathBehavior *)((char *)a2 + 792), v6);
  OZChannelPosition3D::OZChannelPosition3D((OZMotionPathBehavior *)((char *)this + 1680), (const OZMotionPathBehavior *)((char *)a2 + 1680), v6);
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 2568), (const OZMotionPathBehavior *)((char *)a2 + 2568), v6);
  OZChannel2D::OZChannel2D((OZMotionPathBehavior *)((char *)this + 2824), (const OZMotionPathBehavior *)((char *)a2 + 2824), v6);
  OZChannel2D::OZChannel2D((OZMotionPathBehavior *)((char *)this + 3264), (const OZMotionPathBehavior *)((char *)a2 + 3264), v6);
  OZChannelPosition::OZChannelPosition((OZMotionPathBehavior *)((char *)this + 3704), (const OZMotionPathBehavior *)((char *)a2 + 3704), v6);
  OZChannelPosition::OZChannelPosition((OZMotionPathBehavior *)((char *)this + 4408), (const OZMotionPathBehavior *)((char *)a2 + 4408), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 5112), (const OZChannelBase *)((char *)a2 + 5112), v6);
  *((void *)this + 639) = &unk_1F1100CF0;
  *((void *)this + 641) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 5264), (const OZChannelBase *)a2 + 47, v6);
  *((void *)this + 658) = &unk_1F1100CF0;
  *((void *)this + 660) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 5416), (const OZChannelBase *)((char *)a2 + 5416), v6);
  *((void *)this + 677) = &unk_1F11010C0;
  *((void *)this + 679) = &unk_1F1101420;
  OZChannel::OZChannel((OZChannel *)((char *)this + 5568), (const OZChannelBase *)((char *)a2 + 5568), v6);
  *((void *)this + 696) = &unk_1F1100CF0;
  *((void *)this + 698) = &unk_1F1101050;
  OZChanRotoshapeRefWithPicker::OZChanRotoshapeRefWithPicker((OZMotionPathBehavior *)((char *)this + 5720), (const OZMotionPathBehavior *)((char *)a2 + 5720), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 39, (const OZChannelBase *)((char *)a2 + 5928), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)this + 40, (const OZChannelBase *)((char *)a2 + 6080), v6);
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6232), (const OZMotionPathBehavior *)((char *)a2 + 6232), v6);
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6488), (const OZMotionPathBehavior *)((char *)a2 + 6488), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 6744), (const OZChannelBase *)((char *)a2 + 6744), v6);
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6896), (const OZMotionPathBehavior *)((char *)a2 + 6896), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 7152), (const OZChannelBase *)((char *)a2 + 7152), v6);
  *((void *)this + 894) = &unk_1F1101490;
  *((void *)this + 896) = &unk_1F11017F0;
  OZChannelEnum::OZChannelEnum((OZMotionPathBehavior *)((char *)this + 7304), (const OZMotionPathBehavior *)((char *)a2 + 7304), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 7560), (const OZChannelBase *)((char *)a2 + 7560), v6);
  *((void *)this + 945) = &unk_1F1100CF0;
  *((void *)this + 947) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 7712), (const OZChannelBase *)((char *)a2 + 7712), v6);
  PCSharedMutex::PCSharedMutex((OZMotionPathBehavior *)((char *)this + 7864));
  *((_DWORD *)this + 1992) = *((_DWORD *)a2 + 1992);
  *(_OWORD *)uint64_t v7 = xmmword_1B837F734;
  long long v8 = unk_1B837F744;
  OZChannelEnum::setTags((OZMotionPathBehavior *)((char *)this + 6488), (char *)v7, 8);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 7560), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 7560));
  OZChannel::setIsSpline((OZChannel *)((char *)this + 6744), 1);
  OZChannel::setExtrapolation((OZChannel *)((char *)this + 6744), 0, 0);
  OZChannel::setExtrapolation((OZChannel *)((char *)this + 6744), 0, 1);
  OZChannel::setInterpolation((OZChannel *)((char *)this + 6744), 4);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2568), 2, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2568));
}

void sub_1B7B98BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelEnum *a9, OZChannelBool *a10, OZChannelPercent *a11, OZChanObjectRefWithPicker *a12, OZChannel *a13, OZChannel *a14, OZChannel *a15, OZChannel *a16, OZChannelPosition *a17, OZChannelPosition *a18, OZChannel2D *a19, OZChannel2D *a20,OZChannelPosition3D *a21,OZChannelPosition3D *a22,OZChannelEnum *a23,OZChannelEnum *a24)
{
  OZChannelBool::~OZChannelBool(v27);
  OZChannel::~OZChannel(v26);
  OZChannelEnum::~OZChannelEnum(v28);
  OZChannel::~OZChannel(v29);
  OZChannelEnum::~OZChannelEnum(v25);
  OZChannelPercent::~OZChannelPercent(v31);
  OZChannelEnum::~OZChannelEnum(v30);
  OZChannelEnum::~OZChannelEnum(a9);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelPercent::~OZChannelPercent(a11);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(a12);
  OZChannel::~OZChannel(a13);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(a15);
  OZChannel::~OZChannel(a16);
  OZChannelPosition::~OZChannelPosition(a17);
  OZChannelPosition::~OZChannelPosition(a18);
  OZChannel2D::~OZChannel2D(a19);
  OZChannel2D::~OZChannel2D(a20);
  OZChannelEnum::~OZChannelEnum(a24);
  OZChannelPosition3D::~OZChannelPosition3D(a21);
  OZChannelPosition3D::~OZChannelPosition3D(a22);
  OZChannelEnum::~OZChannelEnum(a23);
  OZChannelBehavior::~OZChannelBehavior(v24);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior::~OZMotionPathBehavior(OZMotionPathBehavior *this)
{
  *(void *)this = &unk_1F1133DB0;
  *((void *)this + 2) = &unk_1F1134068;
  *((void *)this + 6) = &unk_1F11342C0;
  *((void *)this + 42) = &unk_1F1134318;
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 7864));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 7712));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7560));
  OZChannelEnum::~OZChannelEnum((OZMotionPathBehavior *)((char *)this + 7304));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7152));
  OZChannelEnum::~OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6896));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 6744));
  OZChannelEnum::~OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6488));
  OZChannelEnum::~OZChannelEnum((OZMotionPathBehavior *)((char *)this + 6232));
  OZChannelBool::~OZChannelBool((OZChannelBool *)this + 40);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)this + 39);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZMotionPathBehavior *)((char *)this + 5720));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5568));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5416));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5264));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 5112));
  OZChannelPosition::~OZChannelPosition((OZMotionPathBehavior *)((char *)this + 4408));
  OZChannelPosition::~OZChannelPosition((OZMotionPathBehavior *)((char *)this + 3704));
  OZChannel2D::~OZChannel2D((OZMotionPathBehavior *)((char *)this + 3264));
  OZChannel2D::~OZChannel2D((OZMotionPathBehavior *)((char *)this + 2824));
  OZChannelEnum::~OZChannelEnum((OZMotionPathBehavior *)((char *)this + 2568));
  OZChannelPosition3D::~OZChannelPosition3D((OZMotionPathBehavior *)((char *)this + 1680));
  OZChannelPosition3D::~OZChannelPosition3D((OZMotionPathBehavior *)((char *)this + 792));
  OZChannelEnum::~OZChannelEnum((OZMotionPathBehavior *)((char *)this + 536));

  OZChannelBehavior::~OZChannelBehavior(this);
}

{
  uint64_t vars8;

  OZMotionPathBehavior::~OZMotionPathBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZMotionPathBehavior::~OZMotionPathBehavior(OZMotionPathBehavior *this)
{
}

{
  OZMotionPathBehavior::~OZMotionPathBehavior((OZMotionPathBehavior *)((char *)this - 48));
}

{
  OZMotionPathBehavior::~OZMotionPathBehavior((OZMotionPathBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZMotionPathBehavior::~OZMotionPathBehavior((OZMotionPathBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZMotionPathBehavior::~OZMotionPathBehavior((OZMotionPathBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZMotionPathBehavior::~OZMotionPathBehavior((OZMotionPathBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

OZChannelBase *OZMotionPathBehavior::operator=(uint64_t a1, const void *a2)
{
  OZChannelBehavior::operator=();
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelPosition::operator=(a1 + 792, (uint64_t)(v4 + 198));
  OZChannelPosition::operator=(a1 + 1680, (uint64_t)(v5 + 420));
  OZChannelBase::operator=(a1 + 536, (uint64_t)(v5 + 134));
  OZChanObjectRefWithPicker::operator=(a1 + 5720, (uint64_t)(v5 + 1430));
  OZChannelFolder::operator=(a1 + 2824);
  OZChannelBase::operator=(a1 + 2960, (uint64_t)(v5 + 740));
  OZChannelBase::operator=(a1 + 3112, (uint64_t)(v5 + 778));
  OZChannelFolder::operator=(a1 + 3264);
  OZChannelBase::operator=(a1 + 3400, (uint64_t)(v5 + 850));
  OZChannelBase::operator=(a1 + 3552, (uint64_t)(v5 + 888));
  OZChannelPosition::operator=(a1 + 3704, (uint64_t)(v5 + 926));
  OZChannelPosition::operator=(a1 + 4408, (uint64_t)(v5 + 1102));
  OZChannelBase::operator=(a1 + 5112, (uint64_t)(v5 + 1278));
  OZChannelBase::operator=(a1 + 5264, (uint64_t)(v5 + 1316));
  OZChannelBase::operator=(a1 + 5416, (uint64_t)(v5 + 1354));
  OZChannelBase::operator=(a1 + 5568, (uint64_t)(v5 + 1392));
  OZChannelBase::operator=(a1 + 5928, (uint64_t)(v5 + 1482));
  OZChannelBase::operator=(a1 + 6080, (uint64_t)(v5 + 1520));
  OZChannelBase::operator=(a1 + 6232, (uint64_t)(v5 + 1558));
  OZChannelBase::operator=(a1 + 7304, (uint64_t)(v5 + 1826));
  OZChannelBase::operator=(a1 + 2568, (uint64_t)(v5 + 642));
  OZChannelBase::operator=(a1 + 6744, (uint64_t)(v5 + 1686));
  OZChannelBase::operator=(a1 + 7152, (uint64_t)(v5 + 1788));
  OZChannelBase::operator=(a1 + 6896, (uint64_t)(v5 + 1724));
  OZChannelBase::operator=(a1 + 6488, (uint64_t)(v5 + 1622));
  OZChannelBase::operator=(a1 + 7560, (uint64_t)(v5 + 1890));
  OZChannelBase::operator=(a1 + 7712, (uint64_t)(v5 + 1928));
  *(_DWORD *)(a1 + 7968) = v5[1992];

  return OZChannelBase::resetFlag((OZChannelBase *)(a1 + 2568), 2, 0);
}

void OZMotionPathBehavior::createCurveNode(OZMotionPathBehavior *this, OZChannel *a2)
{
}

void sub_1B7B992C0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C402889D652);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::parseBegin(OZMotionPathBehavior *this, PCSerializerReadStream *a2)
{
  OZChannelBase::reset((OZChannelBase *)((char *)this + 792), 0);
  OZChannelBase::reset((OZChannelBase *)this + 15, 0);
  if (*((_DWORD *)a2 + 26) <= 4u) {
    OZChannel::setValue((OZChannel *)((char *)this + 7712), MEMORY[0x1E4F1FA48], 1.0, 0);
  }

  return OZBehavior::parseBegin(this, a2);
}

uint64_t non-virtual thunk to'OZMotionPathBehavior::parseBegin(OZMotionPathBehavior *this, PCSerializerReadStream *a2)
{
  return OZMotionPathBehavior::parseBegin((OZMotionPathBehavior *)((char *)this - 48), a2);
}

uint64_t OZMotionPathBehavior::parseEnd(OZMotionPathBehavior *this, PCSerializerReadStream *a2)
{
  uint64_t v4 = (OZChannel *)((char *)this + 6488);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 6488), MEMORY[0x1E4F1FA48], 0.0) == 4)
  {
    uint64_t v5 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::setValue(v4, MEMORY[0x1E4F1FA48], 0.0, 0);
    OZChannel::setValue((OZChannel *)((char *)this + 7304), v5, 1.0, 0);
    OZChannel::setValue((OZChannel *)((char *)this + 7152), v5, 2.0, 0);
  }

  return OZBehavior::parseEnd(this, a2);
}

uint64_t non-virtual thunk to'OZMotionPathBehavior::parseEnd(OZMotionPathBehavior *this, PCSerializerReadStream *a2)
{
  return OZMotionPathBehavior::parseEnd((OZMotionPathBehavior *)((char *)this - 48), a2);
}

void OZMotionPathBehavior::didAddToNode(OZMotionPathBehavior *this, OZSceneNode *a2)
{
  OZChannelBehavior::didAddToNode(this, a2);
  if (a2) {
  OZChannel::setDiscrete((OZChannel *)((char *)this + 6744), 0, 0);
  }
  OZChannel::setDiscrete((OZChannel *)((char *)this + 6744), 0, 0);
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 928));
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 1080));
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 1528));
  uint64_t v4 = (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 272))(a2);
  if (v4)
  {
    if (!*(unsigned char *)(v4 + 1576)) {
      OZMotionPathBehavior::initializePaths((os_unfair_lock_s *)this);
    }
  }
  operator new();
}

void sub_1B7B99620(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C402889D652);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::initializePaths(os_unfair_lock_s *this)
{
  uint64_t result = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&this->_os_unfair_lock_opaque + 336))(this);
  if (result)
  {
    int v3 = *(_DWORD *)((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&this->_os_unfair_lock_opaque + 336))(this)
                   + 344);
    if (((*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&this[232]._os_unfair_lock_opaque + 552))(this + 232, 0) & 1) == 0)
    {
      OZChannelPosition3D::willBeModified(this + 198, 1);
      (*(void (**)(os_unfair_lock_s *, uint64_t))(*(void *)&this[232]._os_unfair_lock_opaque + 480))(this + 232, 1);
      (*(void (**)(os_unfair_lock_s *, uint64_t))(*(void *)&this[270]._os_unfair_lock_opaque + 480))(this + 270, 1);
      (*(void (**)(os_unfair_lock_s *, uint64_t))(*(void *)&this[382]._os_unfair_lock_opaque + 480))(this + 382, 1);
      OZChannel::setDiscrete((OZChannel *)&this[232], 0, 0);
      OZChannel::setDiscrete((OZChannel *)&this[270], 0, 0);
      OZChannel::setDiscrete((OZChannel *)&this[382], 0, 0);
      OZChannel::setParametric((OZChannel *)&this[232], 1);
      OZChannel::setParametric((OZChannel *)&this[270], 1);
      OZChannel::setParametric((OZChannel *)&this[382], 1);
      uint64_t v4 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::setKeyframe((OZChannel *)&this[232], MEMORY[0x1E4F1FA48], 0.0, 0);
      OZChannel::setKeyframe((OZChannel *)&this[270], v4, 0.0, 0);
      OZChannel::setKeyframe((OZChannel *)&this[382], v4, 0.0, 0);
      CMTimeMake(&v21, 1, 1);
      OZChannel::setKeyframe((OZChannel *)&this[232], &v21, (float)v3 * 0.8, 0);
      CMTimeMake(&v21, 1, 1);
      OZChannel::setKeyframe((OZChannel *)&this[270], &v21, 0.0, 0);
      CMTimeMake(&v21, 1, 1);
      OZChannel::setKeyframe((OZChannel *)&this[382], &v21, 0.0, 0);
    }
    uint64_t v5 = (OZChannel *)&this[454];
    uint64_t result = (*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&this[454]._os_unfair_lock_opaque + 552))(this + 454, 0);
    if ((result & 1) == 0)
    {
      double v6 = (float)*(int *)((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&this->_os_unfair_lock_opaque
                                                                         + 336))(this)
                         + 344)
         * 0.75;
      uint64_t v7 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&this->_os_unfair_lock_opaque + 336))(this);
      if (v6 <= (float)*(int *)(v7 + 348) * 0.75) {
        double v8 = v6;
      }
      else {
        double v8 = (float)*(int *)(v7 + 348) * 0.75;
      }
      double v9 = 1.0
         / *(double *)((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&this->_os_unfair_lock_opaque + 336))(this)
                     + 384);
      OZChannelPosition3D::willBeModified(this + 420, 1);
      OZChannel::setDiscrete((OZChannel *)&this[454], 0, 0);
      unsigned int v10 = (OZChannel *)&this[492];
      OZChannel::setDiscrete((OZChannel *)&this[492], 0, 0);
      v11 = (OZChannel *)&this[604];
      OZChannel::setDiscrete(v11, 0, 0);
      OZChannel::setParametric(v5, 1);
      OZChannel::setParametric(v10, 1);
      OZChannel::setParametric(v11, 1);
      unsigned int v12 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::setKeyframe(v5, MEMORY[0x1E4F1FA48], 0.0, 1);
      OZChannel::setKeyframe(v10, v12, 0.0, 1);
      OZChannel::setKeyframe(v11, v12, 0.0, 1);
      OZFigTimeForChannelSeconds(&v21, 1.0, 0x40000);
      OZChannel::setKeyframe(v5, &v21, v8 * 0.5 * v9, 1);
      OZFigTimeForChannelSeconds(&v21, 1.0, 0x40000);
      OZChannel::setKeyframe(v10, &v21, v8 * 0.5, 1);
      OZFigTimeForChannelSeconds(&v21, 1.0, 0x40000);
      Keyframe = (void *)OZChannel::getKeyframe(v5, &v21);
      OZFigTimeForChannelSeconds(&v21, 1.0, 0x40000);
      uint64_t v14 = (void *)OZChannel::getKeyframe(v10, &v21);
      OZChannel::setKeyframeInputTangents(v5, Keyframe, 0.0, v8 * 0.5 * -0.546761902 * v9, 1);
      OZChannel::setKeyframeInputTangents(v10, v14, 0.0, 0.0, 1);
      OZChannel::setKeyframeOutputTangents(v5, Keyframe, 0.0, v8 * 0.5 * 0.546761902 * v9, 1);
      OZChannel::setKeyframeOutputTangents(v10, v14, 0.0, 0.0, 1);
      OZFigTimeForChannelSeconds(&v21, 1.0, 0x40000);
      OZChannel::setKeyframe(v11, &v21, 0.0, 1);
      OZFigTimeForChannelSeconds(&v21, 2.0, 0x40000);
      OZChannel::setKeyframe(v5, &v21, (v8 * 0.5 + v8 * 0.5) * v9, 1);
      OZFigTimeForChannelSeconds(&v21, 2.0, 0x40000);
      OZChannel::setKeyframe(v10, &v21, 0.0, 1);
      OZFigTimeForChannelSeconds(&v21, 2.0, 0x40000);
      v15 = (void *)OZChannel::getKeyframe(v5, &v21);
      OZFigTimeForChannelSeconds(&v21, 2.0, 0x40000);
      v16 = (void *)OZChannel::getKeyframe(v10, &v21);
      OZChannel::setKeyframeInputTangents(v5, v15, 0.0, 0.0, 1);
      OZChannel::setKeyframeInputTangents(v10, v16, 0.0, v8 * 0.5 * 0.546761902, 1);
      OZChannel::setKeyframeOutputTangents(v5, v15, 0.0, 0.0, 1);
      OZChannel::setKeyframeOutputTangents(v10, v16, 0.0, v8 * 0.5 * -0.546761902, 1);
      OZFigTimeForChannelSeconds(&v21, 2.0, 0x40000);
      OZChannel::setKeyframe(v11, &v21, 0.0, 1);
      OZFigTimeForChannelSeconds(&v21, 3.0, 0x40000);
      OZChannel::setKeyframe(v5, &v21, v8 * 0.5 * v9, 1);
      OZFigTimeForChannelSeconds(&v21, 3.0, 0x40000);
      OZChannel::setKeyframe(v10, &v21, -(v8 * 0.5), 1);
      OZFigTimeForChannelSeconds(&v21, 3.0, 0x40000);
      v17 = (void *)OZChannel::getKeyframe(v5, &v21);
      OZFigTimeForChannelSeconds(&v21, 3.0, 0x40000);
      v18 = (void *)OZChannel::getKeyframe(v10, &v21);
      OZChannel::setKeyframeInputTangents(v5, v17, 0.0, v8 * 0.5 * 0.546761902 * v9, 1);
      OZChannel::setKeyframeInputTangents(v10, v18, 0.0, 0.0, 1);
      OZChannel::setKeyframeOutputTangents(v5, v17, 0.0, v8 * 0.5 * -0.546761902 * v9, 1);
      OZChannel::setKeyframeOutputTangents(v10, v18, 0.0, 0.0, 1);
      OZFigTimeForChannelSeconds(&v21, 3.0, 0x40000);
      OZChannel::setKeyframe(v11, &v21, 0.0, 1);
      v19 = (void *)OZChannel::getKeyframe(v5, v12);
      v20 = (void *)OZChannel::getKeyframe(v10, v12);
      OZChannel::setKeyframeInputTangents(v5, v19, 0.0, 0.0, 1);
      OZChannel::setKeyframeInputTangents(v10, v20, 0.0, v8 * 0.5 * -0.546761902, 1);
      OZChannel::setKeyframeOutputTangents(v5, v19, 0.0, 0.0, 1);
      OZChannel::setKeyframeOutputTangents(v10, v20, 0.0, v8 * 0.5 * 0.546761902, 1);
      OZChannel::closeParametricCurve(v5);
      OZChannel::closeParametricCurve(v10);
      return OZChannel::closeParametricCurve(v11);
    }
  }
  return result;
}

void OZMotionPathBehavior::sceneNodeDidLoad(OZMotionPathBehavior *this)
{
  uint64_t v2 = (OZChannel *)((char *)this + 928);
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 928));
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 1080));
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 1528));
  if (!(*(unsigned int (**)(char *))(*((void *)this + 191) + 832))((char *)this + 1528))
  {
    OZChannel::getKeyframes(v2, 0, &v12);
    int v3 = v13;
    if (v13 != v12)
    {
      unint64_t v4 = 0;
      unsigned int v5 = 1;
      int v3 = v12;
      do
      {
        OZChannel::getKeyframe(v2, v3[v4], &v11, 0);
        OZChannel::setKeyframe((OZChannel *)((char *)this + 1528), &v11);
        unint64_t v4 = v5;
        int v3 = v12;
        ++v5;
      }
      while (v4 < v13 - v12);
    }
    if (v3)
    {
      v13 = v3;
      operator delete(v3);
    }
  }
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 1816));
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 1968));
  OZChannel::reparametrizeChannel((OZChannel *)((char *)this + 2416));
  if (!(*(unsigned int (**)(char *))(*((void *)this + 302) + 832))((char *)this + 2416))
  {
    OZChannel::getKeyframes((OZChannel *)((char *)this + 1816), 0, &v12);
    double v6 = v13;
    if (v13 != v12)
    {
      unint64_t v7 = 0;
      unsigned int v8 = 1;
      double v6 = v12;
      do
      {
        OZChannel::getKeyframe((OZChannel *)((char *)this + 1816), v6[v7], &v11, 0);
        OZChannel::setKeyframe((OZChannel *)((char *)this + 2416), &v11);
        unint64_t v7 = v8;
        double v6 = v12;
        ++v8;
      }
      while (v7 < v13 - v12);
    }
    if (v6)
    {
      v13 = v6;
      operator delete(v6);
    }
  }
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2568), 2, 0);
  double v9 = (OZChannel *)((char *)this + 7560);
  OZChannel::getValueAsDouble(v9, MEMORY[0x1E4F1FA48], 0.0);
  if (vabdd_f64(v10, OZChannel::getDefaultValue(v9)) >= 0.0000001) {
    OZChannelBase::resetFlag((OZChannelBase *)v9, 2, 0);
  }
}

void sub_1B7B9A0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *OZMotionPathBehavior::getEvalDepChansForRef(void *result, void *a2, uint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    if (result + 715 == a2)
    {
      uint64_t result = (void *)OZChannel::getValueAsInt((OZChannel *)(result + 67), MEMORY[0x1E4F1FA48], 0.0);
      if (result == 5)
      {
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 232))(a3);
        if (result)
        {
          if (result)
          {
            double v6 = result;
            do
            {
              if (result)
              {
                unint64_t v7 = result + 136;
                uint64_t result = operator new(0x18uLL);
                result[1] = a4;
                result[2] = v7;
                uint64_t v8 = *a4;
                *uint64_t result = *a4;
                *(void *)(v8 + 8) = result;
                *a4 = (uint64_t)result;
                ++a4[2];
              }
              double v6 = (void *)v6[120];
            }
            while (v6);
          }
        }
      }
    }
  }
  return result;
}

uint64_t OZMotionPathBehavior::isEvalCyclic(OZMotionPathBehavior *this)
{
  if (OZMotionPathBehavior::isGeometryRecursive(this)) {
    return 1;
  }
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 7864));
  int v4 = *((_DWORD *)this + 1992);
  PCSharedMutex::unlock_shared((std::mutex *)((char *)this + 7864));
  if (v4 != ValueAsInt)
  {
    PCSharedMutex::lock((std::mutex *)((char *)this + 7864));
    if (*((_DWORD *)this + 1992) != ValueAsInt)
    {
      OZChannelBehavior::dirtyIsEvalCyclicCache(this);
      *((_DWORD *)this + 1992) = ValueAsInt;
    }
    PCSharedMutex::unlock((std::mutex *)((char *)this + 7864));
  }

  return OZChannelBehavior::isEvalCyclic(this);
}

void sub_1B7B9A338(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL OZMotionPathBehavior::isGeometryRecursive(OZMotionPathBehavior *this)
{
  BOOL result = 0;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0) == 5)
  {
    uint64_t v2 = (const void *)(*(uint64_t (**)(OZMotionPathBehavior *))(*(void *)this + 320))(this);
    if (v2)
    {
      if (v3)
      {
        int v4 = v3;
        Node = OZChanSceneNodeRef::getNode((OZChannelBase *)((char *)this + 5720));
        if (Node)
        {
          if (v6)
          {
            if (OZGroup::hasDescendant(v4, (OZSceneNode *)(v6 + 200))) {
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t OZMotionPathBehavior::sceneDidChange(OZMotionPathBehavior *this)
{
  uint64_t result = OZMotionPathBehavior::isGeometryRecursive(this);
  if (result)
  {
    return OZChanObjectManipRef::setObject((OZMotionPathBehavior *)((char *)this + 5720), 0, 0);
  }
  return result;
}

uint64_t non-virtual thunk to'OZMotionPathBehavior::sceneDidChange(OZMotionPathBehavior *this)
{
  return OZMotionPathBehavior::sceneDidChange((OZMotionPathBehavior *)((char *)this - 16));
}

uint64_t OZMotionPathBehavior::enableCustomSpeed(uint64_t this, int a2)
{
  if (a2)
  {
    uint64_t v2 = this;
    (*(void (**)(CMTime *__return_ptr))(*(void *)this + 608))(&v9);
    CMTime v11 = v9;
    CMTime v12 = v10;
    this = OZChannel::getNumberOfKeyframes((OZChannel *)(v2 + 6744));
    if (this <= 1)
    {
      OZChannel::setInterpolation((OZChannel *)(v2 + 6744), 4);
      CMTime v9 = v11;
      OZChannel::setKeyframe((OZChannel *)(v2 + 6744), &v9, 0.0, 1);
      CMTime v9 = v11;
      CMTime v13 = v12;
      v3.n128_f64[0] = PC_CMTimeSaferAdd(&v9, &v13, (uint64_t)&v7);
      uint64_t v4 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)v2 + 336))(v2, v3);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), &v5);
      CMTime v9 = v7;
      *(__n128 *)&v13.value = v5;
      v13.epoch = v6;
      PC_CMTimeSaferSubtract(&v9, &v13, (uint64_t)&v8);
      return OZChannel::setKeyframe((OZChannel *)(v2 + 6744), &v8, 100.0, 1);
    }
  }
  return this;
}

BOOL OZMotionPathBehavior::isRebuildUIChannel(OZMotionPathBehavior *this, OZChannelBase *a2)
{
  return (OZChannelBase *)((char *)this + 6488) == a2;
}

uint64_t OZMotionPathBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  uint64_t result = OZChannel::getValueAsInt((OZChannel *)(a1 + 6488), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 != a2)
  {
    int v5 = result;
    CMTimeEpoch v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
    while (1)
    {
      CMTime v7 = *(char **)(v4 + 16);
      if (v7) {
      uint64_t result = OZChannel::getValueAsInt((OZChannel *)(v7 + 6488), v6, 0.0);
      }
      if (v5 != result) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == a2)
      {
        for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
        {
          CMTime v9 = *(const void **)(i + 16);
          if (v9) {
          else
          }
            CMTime v10 = 0;
          CMTime v11 = (OZChannelBase *)(v10 + 6744);
          if (v5 == 7)
          {
            OZChannelBase::enable(v11, 1, 0);
            OZChannelBase::resetFlag((OZChannelBase *)(v10 + 6744), 0x10000, 1);
            uint64_t result = OZMotionPathBehavior::enableCustomSpeed((uint64_t)v10, 1);
          }
          else
          {
            OZChannelBase::enable(v11, 0, 0);
            uint64_t result = (uint64_t)OZChannelBase::setFlag((OZChannelBase *)(v10 + 6744), 0x10000, 1);
          }
        }
        return result;
      }
    }
    for (uint64_t j = *(void *)(a2 + 8); j != a2; uint64_t j = *(void *)(j + 8))
    {
      CMTime v13 = *(const void **)(j + 16);
      if (v13) {
      else
      }
        uint64_t v14 = 0;
      OZChannelBase::enable((OZChannelBase *)(v14 + 6744), 1, 0);
      OZChannelBase::resetFlag((OZChannelBase *)(v14 + 6744), 0x10000, 1);
      uint64_t result = OZMotionPathBehavior::enableCustomSpeed((uint64_t)v14, 1);
    }
  }
  return result;
}

uint64_t OZMotionPathBehavior::getPositionChannel(OZMotionPathBehavior *this)
{
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 536), MEMORY[0x1E4F1FA48], 0.0)) {
    return (uint64_t)this + 1680;
  }
  else {
    return (uint64_t)this + 792;
  }
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::getInstance(void)::OZMotionPathBehavior_radiusImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    __n128 v3 = &v4;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::getInstance(void)::OZMotionPathBehavior_radiusImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::_OZMotionPathBehavior_radius;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::_OZMotionPathBehavior_radius) {
    operator new();
  }
}

void sub_1B7B9A9EC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl::OZMotionPathBehavior_radiusImpl(OZMotionPathBehavior::OZMotionPathBehavior_radiusImpl *this)
{
}

void sub_1B7B9AAD4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::getInstance(void)::OZMotionPathBehavior_radiusInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    __n128 v3 = &v4;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::getInstance(void)::OZMotionPathBehavior_radiusInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::_OZMotionPathBehavior_radiusInfo;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::_OZMotionPathBehavior_radiusInfo) {
    operator new();
  }
}

void sub_1B7B9ABB0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo *OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo::OZMotionPathBehavior_radiusInfo(OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 500.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_radiusInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F11343D0;
  *((void *)this + 10) = &unk_1F11343F0;
  return this;
}

void sub_1B7B9AC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::getInstance(void)::OZMotionPathBehavior_rectSizeImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::getInstance(void)::OZMotionPathBehavior_rectSizeImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::_OZMotionPathBehavior_rectSize;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::_OZMotionPathBehavior_rectSize) {
    operator new();
  }
}

void sub_1B7B9AD60(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl::OZMotionPathBehavior_rectSizeImpl(OZMotionPathBehavior::OZMotionPathBehavior_rectSizeImpl *this)
{
}

void sub_1B7B9AE48(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::getInstance(void)::OZMotionPathBehavior_rectSizeInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::getInstance(void)::OZMotionPathBehavior_rectSizeInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::_OZMotionPathBehavior_rectSizeInfo;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::_OZMotionPathBehavior_rectSizeInfo) {
    operator new();
  }
}

void sub_1B7B9AF24(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo *OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo::OZMotionPathBehavior_rectSizeInfo(OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 500.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_rectSizeInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F11344C0;
  *((void *)this + 10) = &unk_1F11344E0;
  return this;
}

void sub_1B7B9AFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::getInstance(void)::OZMotionPathBehavior_waveAmplitudeImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::getInstance(void)::OZMotionPathBehavior_waveAmplitudeImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::_OZMotionPathBehavior_waveAmplitude;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::_OZMotionPathBehavior_waveAmplitude) {
    operator new();
  }
}

void sub_1B7B9B0D4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl::OZMotionPathBehavior_waveAmplitudeImpl(OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeImpl *this)
{
}

void sub_1B7B9B1BC(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::getInstance(void)::OZMotionPathBehavior_waveAmplitudeInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::getInstance(void)::OZMotionPathBehavior_waveAmplitudeInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::_OZMotionPathBehavior_waveAmplitudeInfo;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::_OZMotionPathBehavior_waveAmplitudeInfo) {
    operator new();
  }
}

void sub_1B7B9B298(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo *OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo::OZMotionPathBehavior_waveAmplitudeInfo(OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 500.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_waveAmplitudeInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F11345B0;
  *((void *)this + 10) = &unk_1F11345D0;
  return this;
}

void sub_1B7B9B36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::getInstance(void)::OZMotionPathBehavior_waveFrequencyImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::getInstance(void)::OZMotionPathBehavior_waveFrequencyImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::_OZMotionPathBehavior_waveFrequency;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::_OZMotionPathBehavior_waveFrequency) {
    operator new();
  }
}

void sub_1B7B9B448(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl::OZMotionPathBehavior_waveFrequencyImpl(OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyImpl *this)
{
}

void sub_1B7B9B520(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::getInstance(void)::OZMotionPathBehavior_waveFrequencyInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::getInstance(void)::OZMotionPathBehavior_waveFrequencyInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::_OZMotionPathBehavior_waveFrequencyInfo;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::_OZMotionPathBehavior_waveFrequencyInfo) {
    operator new();
  }
}

void sub_1B7B9B5FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo *OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo::OZMotionPathBehavior_waveFrequencyInfo(OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 10.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_waveFrequencyInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F11346A0;
  *((void *)this + 10) = &unk_1F11346C0;
  return this;
}

void sub_1B7B9B6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::getInstance(void)::OZMotionPathBehavior_wavePhaseInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::getInstance(void)::OZMotionPathBehavior_wavePhaseInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::_OZMotionPathBehavior_wavePhaseInfo;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::_OZMotionPathBehavior_wavePhaseInfo) {
    operator new();
  }
}

void sub_1B7B9B7A8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo *OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo::OZMotionPathBehavior_wavePhaseInfo(OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo *this)
{
  PCString::PCString(&v3, "°");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -6.28318531, 6.28318531, 0.0174532925, 0.000174532925, 57.2957795, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_wavePhaseInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1134718;
  *((void *)this + 10) = &unk_1F1134738;
  return this;
}

void sub_1B7B9B888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::getInstance(void)::OZMotionPathBehavior_waveDampingImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::getInstance(void)::OZMotionPathBehavior_waveDampingImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::_OZMotionPathBehavior_waveDamping;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::_OZMotionPathBehavior_waveDamping) {
    operator new();
  }
}

void sub_1B7B9B964(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl::OZMotionPathBehavior_waveDampingImpl(OZMotionPathBehavior::OZMotionPathBehavior_waveDampingImpl *this)
{
}

void sub_1B7B9BA34(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::getInstance(void)::OZMotionPathBehavior_waveDampingInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::getInstance(void)::OZMotionPathBehavior_waveDampingInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::_OZMotionPathBehavior_waveDampingInfo;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::_OZMotionPathBehavior_waveDampingInfo) {
    operator new();
  }
}

void sub_1B7B9BB10(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo *OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo::OZMotionPathBehavior_waveDampingInfo(OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -20.0, 20.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_waveDampingInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1134808;
  *((void *)this + 10) = &unk_1F1134828;
  return this;
}

void sub_1B7B9BBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::getInstance(void)::OZMotionPathBehavior_offsetImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::getInstance(void)::OZMotionPathBehavior_offsetImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::_OZMotionPathBehavior_offset;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::_OZMotionPathBehavior_offset) {
    operator new();
  }
}

void sub_1B7B9BCBC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior::OZMotionPathBehavior_offsetImpl::OZMotionPathBehavior_offsetImpl(OZChannelPercent *this)
{
}

void sub_1B7B9BD90(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::getInstance(void)::OZMotionPathBehavior_frequencyImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::getInstance(void)::OZMotionPathBehavior_frequencyImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::_OZMotionPathBehavior_frequency;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::_OZMotionPathBehavior_frequency) {
    operator new();
  }
}

void sub_1B7B9BE6C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior::OZMotionPathBehavior_frequencyImpl::OZMotionPathBehavior_frequencyImpl(OZChannelUint32 *this)
{
}

void sub_1B7B9BF40(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::getInstance(void)::OZMotionPathBehavior_frequencyInfo_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::getInstance(void)::OZMotionPathBehavior_frequencyInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::_OZMotionPathBehavior_frequencyInfo;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::_OZMotionPathBehavior_frequencyInfo) {
    operator new();
  }
}

void sub_1B7B9C01C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo *OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo::OZMotionPathBehavior_frequencyInfo(OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 5.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZMotionPathBehavior::OZMotionPathBehavior_frequencyInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F1134970;
  *((void *)this + 10) = &unk_1F1134990;
  return this;
}

void sub_1B7B9C0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::getInstance(OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::getInstance(void)::OZMotionPathBehavior_endTimeOffsetChanImpl_once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::getInstance(void)::OZMotionPathBehavior_endTimeOffsetChanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::_OZMotionPathBehavior_endTimeOffsetChan;
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::_OZMotionPathBehavior_endTimeOffsetChan) {
    operator new();
  }
}

void sub_1B7B9C1C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl::OZMotionPathBehavior_endTimeOffsetChanImpl(OZMotionPathBehavior::OZMotionPathBehavior_endTimeOffsetChanImpl *this)
{
}

void sub_1B7B9C29C(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void OZMotionPathCurveNode::OZMotionPathCurveNode(OZMotionPathCurveNode *this, OZBehavior *a2, OZChannel *a3)
{
  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1134A60;
  *(_DWORD *)(v5 + 32) = 0;
  PCEvaluator::PCEvaluator((PCEvaluator *)(v5 + 40));
  *((_DWORD *)this + 7) = a3->var3;
}

void sub_1B7B9C328(_Unwind_Exception *a1)
{
  PCSpinLock::~PCSpinLock(v2);
  OZEaseInInterpolator::~OZEaseInInterpolator(v1);
  _Unwind_Resume(a1);
}

void OZMotionPathCurveNode::OZMotionPathCurveNode(OZMotionPathCurveNode *this, const OZMotionPathCurveNode *a2)
{
  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2);
  *(void *)uint64_t v4 = &unk_1F1134A60;
  *(_DWORD *)(v4 + 32) = 0;
  PCEvaluator::PCEvaluator((PCEvaluator *)(v4 + 40));
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
}

void sub_1B7B9C3B0(_Unwind_Exception *a1)
{
  PCSpinLock::~PCSpinLock(v2);
  OZEaseInInterpolator::~OZEaseInInterpolator(v1);
  _Unwind_Resume(a1);
}

void OZMotionPathCurveNode::~OZMotionPathCurveNode(OZMotionPathCurveNode *this)
{
  *(void *)this = &unk_1F1134A60;
  char v2 = (PCSpinLock *)((char *)this + 32);
  PCEvaluator::~PCEvaluator((OZMotionPathCurveNode *)((char *)this + 40));
  PCSpinLock::~PCSpinLock(v2);

  OZEaseInInterpolator::~OZEaseInInterpolator(this);
}

{
  uint64_t vars8;

  OZMotionPathCurveNode::~OZMotionPathCurveNode(this);

  JUMPOUT(0x1BA9BFBA0);
}

double OZMotionPathCurveNode::solveNode(OZMotionPathCurveNode *this, const CMTime *a2, double a3, double a4)
{
  CMTime v24 = *a2;
  CMTime v23 = *a2;
  CMTimeEpoch v6 = (const void *)*((void *)this + 1);
  if (v6)
  {
    if (v7)
    {
      CMTime v8 = v7;
      if (((*(uint64_t (**)(char *))(*(void *)v7 + 640))(v7) & 1) == 0)
      {
        (*(void (**)(CMTime *__return_ptr, char *))(*(void *)v8 + 608))(&v20, v8);
        CMTime v9 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(void *)v8 + 312))(v8);
        if (OZChannelBase::isEnabled(v9, 0, 1))
        {
          if ((*(unsigned char *)((*(uint64_t (**)(char *))(*(void *)v8 + 320))(v8) + 1024) & 2) == 0
            && (*(uint64_t (**)(char *))(*(void *)v8 + 336))(v8))
          {
            OZChannelObjectRootBase::getTimeOffset((__n128 *)(v8 + 56), &v27);
            CMTime time2 = v20;
            *(__n128 *)&time1.value = v27;
            time1.epoch = v28;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v29);
            CMTime time1 = v29;
            CMTime time2 = v23;
            v10.n128_f64[0] = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v23);
            (*(void (**)(__n128 *__return_ptr, __n128))(**(void **)(*((void *)v8 + 47) + 32) + 320))(&v27, v10);
            CMTime time1 = v23;
            *(__n128 *)&time2.value = v27;
            time2.epoch = v28;
            PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v29);
            OZChannelObjectRootBase::getTimeOffset((__n128 *)(v8 + 56), &v25);
            CMTime time1 = v29;
            *(__n128 *)&time2.value = v25;
            time2.epoch = v26;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v19);
            CMTime v23 = v19;
            memset(&v29, 0, sizeof(v29));
            OZBehavior::getFrameDuration(*((OZBehavior **)this + 1), (__n128 *)&v29);
            __n128 v25 = v21;
            CMTimeEpoch v26 = v22;
            CMTime v11 = (OZChannel *)(v8 + 7560);
            CMTime v12 = (CMTime *)MEMORY[0x1E4F1FA48];
            int32_t ValueAsInt = OZChannel::getValueAsInt(v11, MEMORY[0x1E4F1FA48], 0.0);
            operator*(&v29, ValueAsInt, &v19);
            *(__n128 *)&time1.value = v25;
            time1.epoch = v26;
            CMTime time2 = v19;
            PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v27);
            CMTime time1 = v23;
            *(__n128 *)&time2.value = v27;
            time2.epoch = v28;
            if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
            {
              __n128 v25 = v21;
              CMTimeEpoch v26 = v22;
              int32_t v14 = OZChannel::getValueAsInt(v11, MEMORY[0x1E4F1FA48], 0.0);
              operator*(&v29, v14, &v19);
              *(__n128 *)&time1.value = v25;
              time1.epoch = v26;
              CMTime time2 = v19;
              PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v27);
              *(__n128 *)&v23.value = v27;
              v23.epoch = v28;
            }
            CMTime time1 = v23;
            CMTime time2 = *v12;
            if (CMTimeCompare(&time1, &time2) < 0) {
              CMTime v23 = *v12;
            }
            OZMotionPathCurveNode::getLength(this, &v23);
            double v16 = v15;
            if (fabs(v15) >= 0.0000001)
            {
              double PositionOnPath = OZMotionPathCurveNode::getPositionOnPath(this, &v24, &v23, v15);
              return OZMotionPathCurveNode::getPosition(this, PositionOnPath, &v24, &v23, a4, v16);
            }
          }
        }
      }
    }
  }
  return a4;
}

void OZMotionPathCurveNode::getLength(OZMotionPathCurveNode *this, const CMTime *a2)
{
  uint64_t v4 = (const void *)*((void *)this + 1);
  if (v4) {
  else
  }
    uint64_t v5 = 0;
  unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v5 + 536), MEMORY[0x1E4F1FA48], 0.0);
  if (ValueAsInt > 1)
  {
    switch(ValueAsInt)
    {
      case 2u:
        OZChannel::getValueAsDouble((OZChannel *)(v5 + 2960), a2, 0.0);
        double v10 = fabs(v9);
        OZChannel::getValueAsDouble((OZChannel *)(v5 + 3112), a2, 0.0);
        double v12 = fabs(v11);
        PCEvaluator::findLengthOfEllipse((OZMotionPathCurveNode *)((char *)this + 40), v10, v12, 0.0, 0.0);
        break;
      case 3u:
        OZChannel::getValueAsDouble((OZChannel *)(v5 + 3400), a2, 0.0);
        OZChannel::getValueAsDouble((OZChannel *)(v5 + 3552), a2, 0.0);
        break;
      case 4u:
        OZChannel::getValueAsDouble((OZChannel *)(v5 + 4544), a2, 0.0);
        OZChannel::getValueAsDouble((OZChannel *)(v5 + 4696), a2, 0.0);
        break;
      case 5u:
        Node = OZChanSceneNodeRef::getNode((OZChannelBase *)(v5 + 5720));
        if (Node)
        {
          if (v14)
          {
            uint64_t v15 = (uint64_t)v14;
            OZRenderState::OZRenderState(&v16);
            *(_OWORD *)&v16.var0.var0 = *(_OWORD *)&a2->value;
            v16.var0.var3 = a2->epoch;
            OZRotoshape::getReparametrizedContourLength(v15, (long long *)&v16.var0.var0, 1, 0);
          }
        }
        break;
      default:
        return;
    }
  }
  else
  {
    PositionChannel = (os_unfair_lock_s *)OZMotionPathBehavior::getPositionChannel((OZMotionPathBehavior *)v5);
    CMTime v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannelPosition3D::getLength(PositionChannel, v8);
  }
}

double OZMotionPathCurveNode::getPositionOnPath(OZMotionPathCurveNode *this, const CMTime *a2, const CMTime *a3, double a4)
{
  CMTime v84 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  double v83 = 0.0;
  CMTime v8 = (const void *)*((void *)this + 1);
  if (v8) {
  else
  }
    double v9 = 0;
  double v10 = (const CMTime *)MEMORY[0x1E4F1FA48];
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v9 + 6896), MEMORY[0x1E4F1FA48], 0.0);
  int v12 = OZChannel::getValueAsInt((OZChannel *)(v9 + 6488), v10, 0.0);
  unsigned int v13 = OZChannel::getValueAsInt((OZChannel *)(v9 + 7152), v10, 0.0);
  (*(void (**)(uint64_t *__return_ptr, char *))(*(void *)v9 + 608))(v81, v9);
  if (v12 == 7)
  {
    OZChannel::getValueAsDouble((OZChannel *)(v9 + 6744), a2, 0.0);
    return v14 * a4;
  }
  CMTime v80 = *v10;
  CMTime v79 = v80;
  CMTime v78 = *a3;
  __n128 v76 = 0uLL;
  CMTimeEpoch v77 = 0;
  uint64_t v15 = (*(uint64_t (**)(void))(**((void **)this + 1) + 336))();
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v15 + 336), &v76);
  CMTime v75 = *a3;
  if (ValueAsInt == 1)
  {
    *(_OWORD *)&time1.value = *(_OWORD *)&v82.value;
    CMTimeEpoch epoch = v82.epoch;
    goto LABEL_18;
  }
  operator/((long long *)&v75.value, (uint64_t)&v76, (uint64_t)&time);
  double Seconds = CMTimeGetSeconds(&time);
  CMTime time1 = v82;
  operator/((long long *)&time1.value, (uint64_t)&v76, (uint64_t)&v73);
  double v18 = CMTimeGetSeconds(&v73);
  operator/((long long *)&v78.value, (uint64_t)&v76, (uint64_t)&v72);
  double v19 = CMTimeGetSeconds(&v72);
  double v20 = v18 + -1.0;
  if (vabdd_f64(Seconds, v20) >= 0.0000001 && Seconds < v20)
  {
    double v21 = fmod(Seconds * (double)v13, v20);
    if (OZChannel::getValueAsInt((OZChannel *)(v9 + 7304), MEMORY[0x1E4F1FA48], 0.0) == 1)
    {
      double v22 = floor(v19 * (double)v13 / v20) * 0.5;
      if (vabdd_f64(v22, floor(v22)) >= 0.0000001) {
        double v21 = v20 - v21;
      }
    }
    OZFigTimeForChannelSeconds(&time2, v21, v75.timescale);
    operator*((long long *)&time2.value, (uint64_t)&v76, (uint64_t)&time1);
    *(_OWORD *)&v75.value = *(_OWORD *)&time1.value;
    CMTimeEpoch v23 = time1.epoch;
    goto LABEL_16;
  }
  uint64_t v24 = MEMORY[0x1E4F1FA48];
  if (OZChannel::getValueAsInt((OZChannel *)(v9 + 7304), MEMORY[0x1E4F1FA48], 0.0) == 1)
  {
    *(_OWORD *)&v75.value = *(_OWORD *)v24;
    CMTimeEpoch v23 = *(void *)(v24 + 16);
LABEL_16:
    v75.CMTimeEpoch epoch = v23;
  }
  *(_OWORD *)&time1.value = *(_OWORD *)&v82.value;
  CMTimeEpoch epoch = v82.epoch;
LABEL_18:
  time1.CMTimeEpoch epoch = epoch;
  *(__n128 *)&time2.value = v76;
  time2.CMTimeEpoch epoch = v77;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v80);
  CMTime v79 = v75;
  if ((v12 & 0xFFFFFFF7) != 0)
  {
    switch(v12)
    {
      case 1:
        if (OZChannel::getValueAsInt((OZChannel *)(v9 + 7712), MEMORY[0x1E4F1FA48], 0.0))
        {
          operator/((long long *)&v79.value, (uint64_t)&v80, (uint64_t)&v70);
          Float64 v25 = CMTimeGetSeconds(&v70);
          double v26 = cos((v25 + 2.0) * 1.57079633);
          double v27 = 1.0;
          goto LABEL_29;
        }
        operator/((long long *)&v79.value, (uint64_t)&v80, (uint64_t)&v69);
        double v40 = CMTimeGetSeconds(&v69);
        double v83 = v40;
        double v41 = 1.0;
        double v42 = 0.0;
        goto LABEL_39;
      case 2:
        if (OZChannel::getValueAsInt((OZChannel *)(v9 + 7712), MEMORY[0x1E4F1FA48], 0.0))
        {
          operator/((long long *)&v79.value, (uint64_t)&v80, (uint64_t)&v68);
          Float64 v29 = CMTimeGetSeconds(&v68);
          double v28 = sin(v29 * 1.57079633);
          goto LABEL_41;
        }
        operator/((long long *)&v79.value, (uint64_t)&v80, (uint64_t)&v67);
        double v40 = CMTimeGetSeconds(&v67);
        double v83 = v40;
        double v41 = 0.0;
        double v42 = 1.0;
        goto LABEL_39;
      case 3:
        if (OZChannel::getValueAsInt((OZChannel *)(v9 + 7712), MEMORY[0x1E4F1FA48], 0.0))
        {
          operator/((long long *)&v79.value, (uint64_t)&v80, (uint64_t)&v66);
          Float64 v30 = CMTimeGetSeconds(&v66);
          double v28 = (cos((v30 + 1.0) * 3.14159265) + 1.0) * 0.5;
          goto LABEL_41;
        }
        operator/((long long *)&v79.value, (uint64_t)&v80, (uint64_t)&v65);
        double v40 = CMTimeGetSeconds(&v65);
        double v83 = v40;
        double v41 = 0.5;
        double v42 = 0.5;
LABEL_39:
        PCMath::easeInOut(&v83, v40, v41, v42, 0.0, 1.0, 0, v39);
        break;
      case 4:
        operator*(&v80, &v84, 0.5);
        CMTime time1 = v79;
        CMTime time2 = v84;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          operator*((long long *)&v84.value, (uint64_t)&v79, (uint64_t)&v64);
          double v28 = 1.0 / CMTimeGetSeconds(&v64);
        }
        else
        {
          operator*((long long *)&v84.value, (uint64_t)&v79, (uint64_t)&v63);
          double v26 = -1.0 / CMTimeGetSeconds(&v63);
          double v27 = 2.0;
LABEL_29:
          double v28 = v26 + v27;
        }
        goto LABEL_41;
      case 5:
        operator/((long long *)&v80.value, (uint64_t)&v76, (uint64_t)&v62);
        Float64 v31 = CMTimeGetSeconds(&v62);
        double v32 = 1.0 / (v31 * v31);
        operator/((long long *)&v79.value, (uint64_t)&v76, (uint64_t)&v61);
        Float64 v33 = CMTimeGetSeconds(&v61);
        double v28 = v32 * (v33 * v33);
        goto LABEL_41;
      case 6:
        operator/((long long *)&v80.value, (uint64_t)&v76, (uint64_t)&v60);
        Float64 v34 = CMTimeGetSeconds(&v60);
        CMTime time1 = v80;
        CMTime time2 = v79;
        double v35 = 1.0 / (v34 * v34);
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
        operator/(&v58, (uint64_t)&v76, (uint64_t)&v59);
        Float64 v36 = CMTimeGetSeconds(&v59);
        double v37 = v35 * (v36 * v36);
        double v38 = 1.0 - v37;
        if (v37 > 1.0) {
          double v38 = 0.0;
        }
        if (v37 >= 0.0) {
          double v28 = v38;
        }
        else {
          double v28 = 1.0;
        }
        goto LABEL_41;
      default:
        break;
    }
  }
  else
  {
    operator/((long long *)&v79.value, (uint64_t)&v80, (uint64_t)&v71);
    double v28 = CMTimeGetSeconds(&v71);
LABEL_41:
    double v83 = v28;
  }
  double v43 = 1.0;
  if (v83 <= 1.0) {
    double v43 = v83;
  }
  double v14 = 0.0;
  if (v83 >= 0.0) {
    double v14 = v43;
  }
  double v83 = v14;
  if (ValueAsInt == 1)
  {
    operator*(&v80, &time1, v14);
    CMTime v79 = time1;
    CMTime v78 = time1;
    operator/((long long *)&v79.value, (uint64_t)&v76, (uint64_t)&v57);
    double v44 = CMTimeGetSeconds(&v57);
    CMTime time1 = v82;
    operator/((long long *)&time1.value, (uint64_t)&v76, (uint64_t)&v56);
    double v45 = CMTimeGetSeconds(&v56);
    operator/((long long *)&v78.value, (uint64_t)&v76, (uint64_t)&v55);
    double v46 = CMTimeGetSeconds(&v55);
    double v47 = v45 + -1.0;
    if (vabdd_f64(v44, v47) < 0.0000001 || v44 >= v47)
    {
      v51 = (OZChannel *)(v9 + 7304);
      uint64_t v52 = MEMORY[0x1E4F1FA48];
      if (OZChannel::getValueAsInt(v51, MEMORY[0x1E4F1FA48], 0.0) != 1)
      {
LABEL_56:
        operator/((long long *)&v79.value, (uint64_t)&v80, (uint64_t)&v54);
        double v14 = CMTimeGetSeconds(&v54);
        return v14 * a4;
      }
      *(_OWORD *)&v79.value = *(_OWORD *)v52;
      CMTimeEpoch v50 = *(void *)(v52 + 16);
    }
    else
    {
      double v48 = fmod(v44 * (double)v13, v47);
      if (OZChannel::getValueAsInt((OZChannel *)(v9 + 7304), MEMORY[0x1E4F1FA48], 0.0) == 1)
      {
        double v49 = floor(v46 * (double)v13 / v47) * 0.5;
        if (vabdd_f64(v49, floor(v49)) >= 0.0000001) {
          double v48 = v47 - v48;
        }
      }
      OZFigTimeForChannelSeconds(&time2, v48, v79.timescale);
      operator*((long long *)&time2.value, (uint64_t)&v76, (uint64_t)&time1);
      *(_OWORD *)&v79.value = *(_OWORD *)&time1.value;
      CMTimeEpoch v50 = time1.epoch;
    }
    v79.CMTimeEpoch epoch = v50;
    goto LABEL_56;
  }
  return v14 * a4;
}

double OZMotionPathCurveNode::getPosition(OZMotionPathCurveNode *this, double a2, const CMTime *a3, const CMTime *a4, double a5, double a6)
{
  int v12 = (const void *)*((void *)this + 1);
  if (v12) {
  else
  }
    unsigned int v13 = 0;
  double v14 = 0.0;
  unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)v13 + 536), MEMORY[0x1E4F1FA48], 0.0);
  double v139 = 0.0;
  double v140 = 0.0;
  double v137 = 0.0;
  double v138 = 0.0;
  double v136 = 0.0;
  if (ValueAsInt > 1)
  {
    switch(ValueAsInt)
    {
      case 2u:
        double v20 = a5;
        double v21 = 1.0
            / *(double *)((*(uint64_t (**)(void))(**((void **)this + 1) + 336))(*((void *)this + 1))
                        + 384);
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 2960), a4, 0.0);
        double v23 = v22;
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 3112), a4, 0.0);
        double v25 = v24;
        OZMotionPathCurveNode::getLength(this, a4);
        double v27 = v26;
        OZChannel::getValueAsDouble(v13 + 39, a4, 0.0);
        double v29 = v28;
        if (fabs(v27) >= 0.0000001)
        {
          int v30 = OZChannel::getValueAsInt(v13 + 41, MEMORY[0x1E4F1FA48], 0.0);
          double v31 = fmod(a2 / v27 + v29, 1.0);
          double v14 = v31;
          if (v30 == 1) {
            double v14 = v27 * (1.0 - v31) / v27;
          }
        }
        double v32 = v23 * v21;
        if (OZChannel::getValueAsInt((OZChannel *)((char *)v13 + 6488), MEMORY[0x1E4F1FA48], 0.0) == 8)
        {
          __double2 v33 = __sincos_stret(v14 * 3.14159265 + v14 * 3.14159265);
          double v34 = v32 - v32 * v33.__cosval;
          double v139 = v25 * v33.__sinval;
        }
        else
        {
          PCEvaluator::findPointOnEllipse((OZMotionPathCurveNode *)((char *)this + 40), v14, fabs(v32), fabs(v25), 0.0, 0.0, &v140, &v139, 0);
          if (v32 < 0.0) {
            double v140 = -v140;
          }
          if (v25 < 0.0) {
            double v139 = -v139;
          }
          double v34 = v32 + v140;
        }
        int v79 = *((_DWORD *)this + 7);
        if (v79 == 2)
        {
          double v80 = v139;
        }
        else
        {
          double v80 = 0.0;
          if (v79 == 1) {
            double v80 = v34;
          }
        }
        return v80 + v20;
      case 3u:
        double v36 = 1.0
            / *(double *)((*(uint64_t (**)(void))(**((void **)this + 1) + 336))(*((void *)this + 1))
                        + 384);
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 3400), a4, 0.0);
        double v38 = v36 * fabs(v37);
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 3552), a4, 0.0);
        double v40 = fabs(v39);
        OZMotionPathCurveNode::getLength(this, a4);
        double v42 = v41;
        OZChannel::getValueAsDouble(v13 + 39, a4, 0.0);
        double v44 = v43;
        double v45 = 0.0;
        if (fabs(v42) >= 0.0000001)
        {
          if (OZChannel::getValueAsInt(v13 + 41, MEMORY[0x1E4F1FA48], 0.0) == 1) {
            double v45 = (v38 + v38 + v40 + v40) * (1.0 - fmod(a2 / v42 + v44, 1.0));
          }
          else {
            double v45 = (v38 + v38 + v40 + v40) * fmod(a2 / v42 + v44, 1.0);
          }
        }
        double v85 = v40 * 0.5;
        if (v45 > v40 * 0.5)
        {
          if (v45 <= v38 + v85)
          {
            double v38 = v45 - v85;
          }
          else
          {
            double v86 = v40 * 3.0 * 0.5;
            if (v45 <= v38 + v86)
            {
              double v85 = v85 - (v45 - v38 - v85);
            }
            else
            {
              double v87 = v38 + v38 + v86;
              if (v45 > v87)
              {
                double v85 = v45 - v87 - v85;
LABEL_73:
                double v38 = 0.0;
                goto LABEL_92;
              }
              double v38 = v38 - (v45 - v38 - v86);
              double v85 = v40 * -0.5;
            }
          }
LABEL_92:
          double v95 = 0.0;
          OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 3400), a4, 0.0);
          double v97 = v96;
          OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 3552), a4, 0.0);
          int v99 = *((_DWORD *)this + 7);
          if (v99 == 2)
          {
            if (v98 >= 0.0) {
              double v95 = v85;
            }
            else {
              double v95 = -v85;
            }
          }
          else if (v99 == 1)
          {
            if (v97 >= 0.0) {
              double v95 = v38;
            }
            else {
              double v95 = -v38;
            }
          }
          return v95 + a5;
        }
        double v85 = v45;
        goto LABEL_73;
      case 4u:
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 4544), a4, 0.0);
        double v47 = v46;
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 4696), a4, 0.0);
        double v49 = v48;
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 5112), a4, 0.0);
        double v111 = v50;
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 5264), a4, 0.0);
        double v110 = v51;
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 5416), a4, 0.0);
        double v109 = v52;
        OZChannel::getValueAsDouble((OZChannel *)((char *)v13 + 5568), a4, 0.0);
        double v54 = v53;
        OZMotionPathCurveNode::getLength(this, a4);
        double v56 = v55;
        if (fabs(v55) >= 0.0000001) {
          double v57 = a2 / v55;
        }
        else {
          double v57 = 0.0;
        }
        if (OZChannel::getValueAsInt(v13 + 41, MEMORY[0x1E4F1FA48], 0.0) == 1) {
          double v57 = 1.0 - v57;
        }
        if (v56 > 0.0) {
          double v58 = -v49 / v56;
        }
        else {
          double v58 = 0.0;
        }
        if (v56 > 0.0) {
          double v59 = v47 / v56;
        }
        else {
          double v59 = 0.0;
        }
        if (OZChannel::getValueAsInt((OZChannel *)((char *)v13 + 6488), MEMORY[0x1E4F1FA48], 0.0) == 8)
        {
          double v60 = fabs(v54);
          double v61 = 1.0 - v57;
          if (v54 >= 0.0) {
            double v61 = v57;
          }
          long double v62 = v111 * exp(-(v60 * v61));
          long double v63 = sin(v109 + v110 * (v57 * 6.28318531)) * v62;
          double v64 = v47 * v57 + 0.0 + v58 * v63;
          double v65 = v49 * v57 + 0.0 + v59 * v63;
        }
        else
        {
          v143.value = 0;
          v141.n128_u64[0] = 0;
          memset(&time1, 0, sizeof(time1));
          uint64_t v81 = (*(uint64_t (**)(void))(**((void **)this + 1) + 336))();
          __n128 FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v81 + 336), (__n128 *)&time1);
          (*((void (**)(OZRenderState *__return_ptr, OZChannel *, __n128))v13->var0 + 76))(&seconds, v13, FrameDuration);
          CMTime time2 = *(CMTime *)&seconds.var1;
          operator/((long long *)&time2.value, (uint64_t)&time1, (uint64_t)&time);
          Float64 v83 = CMTimeGetSeconds(&time);
          PCEvaluator::findPointOnSineWave((os_unfair_lock_s *)this + 10, v57, v111, v110, v109, v54, v47, v49, (int)v83, (double *)&v143.value, v141.n128_f64);
          double v64 = v47 * *(double *)&v143.value + 0.0 + v58 * v141.n128_f64[0];
          double v65 = v49 * *(double *)&v143.value + 0.0 + v59 * v141.n128_f64[0];
        }
        int v84 = *((_DWORD *)this + 7);
        if (v84 != 2)
        {
          double v65 = 0.0;
          if (v84 == 1) {
            double v65 = v64;
          }
        }
        return v65 + a5;
      case 5u:
        Node = OZChanSceneNodeRef::getNode((OZChannelBase *)&v13[37].var12);
        if (!Node) {
          return v14;
        }
        if (!v67) {
          return v14;
        }
        uint64_t v68 = (uint64_t)v67;
        OZRenderState::OZRenderState(&seconds);
        *(_OWORD *)&seconds.var0.CMTime var0 = *(_OWORD *)&a4->value;
        seconds.var0.var3 = a4->epoch;
        OZChannel::getValueAsDouble(v13 + 39, a4, 0.0);
        double v70 = v69;
        double v130 = 0.0;
        double v131 = 0.0;
        if (OZChannel::getValueAsInt((OZChannel *)((char *)v13 + 6488), MEMORY[0x1E4F1FA48], 0.0) != 8
          || OZChannel::getValueAsInt((OZChannel *)(v68 + 20048), MEMORY[0x1E4F1FA48], 0.0) == 3
          || OZChannel::getValueAsInt((OZChannel *)(v68 + 20048), MEMORY[0x1E4F1FA48], 0.0) == 2)
        {
          OZRotoshape::getReparametrizedPointOnContour(v68, (long long *)&seconds.var0.var0, &v131, &v130, 0, 0, 1, 0, 0.0, 1);
          if (OZChannel::getValueAsInt((OZChannel *)(v68 + 20304), MEMORY[0x1E4F1FA48], 0.0))
          {
            int v71 = OZChannel::getValueAsInt(v13 + 41, MEMORY[0x1E4F1FA48], 0.0);
            double v72 = fmod(a2 / a6 + v70, 1.0);
            double v73 = v72;
            if (v71 != 1)
            {
LABEL_81:
              OZRotoshape::getReparametrizedPointOnContour(v68, (long long *)&seconds.var0.var0, &v140, &v139, 0, 0, 1, 0, v73, 1);
              goto LABEL_82;
            }
            double v74 = 1.0 - v72;
          }
          else
          {
            double v88 = a2 / a6 + v70;
            if (fabs(v88) < 0.0000001 || (double v73 = 1.0, vabdd_f64(v88, floor(v88)) >= 0.0000001)) {
              double v73 = fmod(v88, 1.0);
            }
            if (OZChannel::getValueAsInt(v13 + 41, MEMORY[0x1E4F1FA48], 0.0) != 1) {
              goto LABEL_81;
            }
            double v74 = 1.0 - v73;
          }
          double v73 = v74 * a6 / a6;
          goto LABEL_81;
        }
        double v102 = a2 / a6;
        long double ParametricRange = OZChannelCurve::getParametricRange((OZChannelCurve *)(v68 + 19184), a4);
        if (OZChannel::getValueAsInt((OZChannel *)(v68 + 20304), MEMORY[0x1E4F1FA48], 0.0))
        {
          if (OZChannel::getValueAsInt(v13 + 41, MEMORY[0x1E4F1FA48], 0.0) == 1) {
            double v104 = (1.0 - fmod(v102 + v70, 1.0)) * ParametricRange;
          }
          else {
            double v104 = fmod(v102 * ParametricRange + v70 * ParametricRange, ParametricRange);
          }
        }
        else
        {
          double v105 = v102 + v70;
          if (fabs(v102 + v70) < 0.0000001 || (double v106 = 1.0, vabdd_f64(v105, floor(v105)) >= 0.0000001)) {
            double v106 = fmod(v105, 1.0);
          }
          int v107 = OZChannel::getValueAsInt(v13 + 41, MEMORY[0x1E4F1FA48], 0.0);
          double v108 = 1.0 - v102;
          if (v107 != 1) {
            double v108 = v106;
          }
          double v104 = ParametricRange * v108;
        }
        OZChannelCurve::getCurveValueWithParameter((OZChannelCurve *)(v68 + 19184), (const CMTime *)&seconds, 0.0, &v131, &v130);
        OZChannelCurve::getCurveValueWithParameter((OZChannelCurve *)(v68 + 19184), (const CMTime *)&seconds, v104, &v140, &v139);
LABEL_82:
        v89 = (CMTime *)MEMORY[0x1E4F1FA48];
        if (!OZChannel::getValueAsInt(v13 + 40, MEMORY[0x1E4F1FA48], 0.0))
        {
          int v92 = *((_DWORD *)this + 7);
          if (v92 == 2)
          {
            double v93 = v139;
            double v94 = v130;
          }
          else
          {
            if (v92 != 1) {
              return a5 + 0.0;
            }
            double v93 = v140;
            double v94 = v131;
          }
          double v77 = v93 - v94;
          return v77 + a5;
        }
        __n128 v141 = *(__n128 *)&a3->value;
        CMTimeEpoch epoch = a3->epoch;
        CMTime time1 = *a3;
        CMTime time2 = *v89;
        if (CMTimeCompare(&time1, &time2) < 0) {
          goto LABEL_103;
        }
        memset(&var0, 0, sizeof(var0));
        __n128 v90 = OZBehavior::getFrameDuration((OZBehavior *)*((void *)this + 1), (__n128 *)&var0);
        (*((void (**)(CMTime *__return_ptr, OZChannel *, __n128))v13->var0 + 76))(&time1, v13, v90);
        CMTime v143 = time1;
        *(__n128 *)&time2.value = v141;
        time2.CMTimeEpoch epoch = epoch;
        if (CMTimeCompare(&time2, &v143) < 0)
        {
          __n128 v141 = *(__n128 *)&time1.value;
          CMTimeEpoch v91 = time1.epoch;
        }
        else
        {
          PCTimeRange::getEnd((PCTimeRange *)&time1, &var0, (uint64_t)&v134);
          *(__n128 *)&time2.value = v141;
          time2.CMTimeEpoch epoch = epoch;
          CMTime v143 = v134;
          if (CMTimeCompare(&time2, &v143) < 1)
          {
LABEL_103:
            *(__n128 *)&seconds.var0.CMTime var0 = v141;
            seconds.var0.var3 = epoch;
            uint64_t v129 = 0x3FF0000000000000;
            uint64_t v126 = 0x3FF0000000000000;
            uint64_t v123 = 0x3FF0000000000000;
            uint64_t v120 = 0x3FF0000000000000;
            time1.value = 0x3FF0000000000000;
            *(_OWORD *)&time1.timescale = 0u;
            long long v122 = 0u;
            long long v124 = 0u;
            long long v125 = 0u;
            long long v127 = 0u;
            long long v128 = 0u;
            uint64_t v117 = 0x3FF0000000000000;
            uint64_t v114 = 0x3FF0000000000000;
            time2.value = 0x3FF0000000000000;
            *(_OWORD *)&time2.timescale = 0u;
            long long v113 = 0u;
            long long v115 = 0u;
            long long v116 = 0u;
            long long v118 = 0u;
            long long v119 = 0u;
            if (*(void *)((*((uint64_t (**)(OZChannel *))v13->var0 + 40))(v13) + 960))
            {
              v100 = *(void **)((*((uint64_t (**)(OZChannel *))v13->var0 + 40))(v13) + 960);
              if (v100) {
              (*(void (**)(void *, CMTime *, OZRenderState *))(*(void *)v100 + 1264))(v100, &time2, &seconds);
              }
            }
            (*(void (**)(uint64_t, CMTime *, OZRenderState *))(*(void *)(v68 + 200) + 1256))(v68 + 200, &time1, &seconds);
            *(double *)&v143.value = v140;
            *(double *)&v143.timescale = v139;
            v143.CMTimeEpoch epoch = 0;
            PCMatrix44Tmpl<double>::transform<double>((double *)&time1.value, (double *)&v143.value, (double *)&v143.value);
            PCMatrix44Tmpl<double>::transform<double>((double *)&time2.value, (double *)&v143.value, (double *)&v143.value);
            int v101 = *((_DWORD *)this + 7);
            if (v101 == 2) {
              return *(double *)&v143.timescale;
            }
            if (v101 == 1) {
              return *(double *)&v143.value;
            }
            return *(double *)&v143.epoch;
          }
          PCTimeRange::getEnd((PCTimeRange *)&time1, &var0, (uint64_t)&time2);
          __n128 v141 = *(__n128 *)&time2.value;
          CMTimeEpoch v91 = time2.epoch;
        }
        CMTimeEpoch epoch = v91;
        goto LABEL_103;
      default:
        return v14;
    }
  }
  CMTime var0 = *a4;
  OZRenderState v16 = (const CMTime *)MEMORY[0x1E4F1FA48];
  if (OZChannel::getValueAsInt(v13 + 41, MEMORY[0x1E4F1FA48], 0.0) == 1) {
    a2 = a6 - a2;
  }
  if (OZChannel::getValueAsInt((OZChannel *)((char *)v13 + 6488), v16, 0.0) == 8
    && OZChannel::getValueAsInt((OZChannel *)((char *)v13 + 2568), MEMORY[0x1E4F1FA48], 0.0) != 1)
  {
    memset(&seconds, 0, 24);
    uint64_t PositionChannel = OZMotionPathBehavior::getPositionChannel((OZMotionPathBehavior *)v13);
    OZChannel::getKeyframeParametricRange((OZChannel *)(PositionChannel + 136), (uint64_t)&seconds);
    operator*((CMTime *)&seconds, &var0, a2 / a6);
  }
  else
  {
    seconds.var0.CMTime var0 = 0;
    if (a2 >= a6)
    {
      v17 = (OZChannelPosition3D *)OZMotionPathBehavior::getPositionChannel((OZMotionPathBehavior *)v13);
      double v18 = (const CMTime *)MEMORY[0x1E4F1FA48];
      double v19 = a6;
    }
    else
    {
      v17 = (OZChannelPosition3D *)OZMotionPathBehavior::getPositionChannel((OZMotionPathBehavior *)v13);
      double v18 = (const CMTime *)MEMORY[0x1E4F1FA48];
      if (a2 <= 0.0) {
        double v19 = 0.0;
      }
      else {
        double v19 = a2;
      }
    }
    OZChannelPosition3D::getPositionReparametrizedWithRange(v17, v18, v19, &v138, &v137, &v136, (double *)&seconds.var0.var0);
    OZFigTimeForChannelSeconds(&var0, *(Float64 *)&seconds.var0.var0, 0x40000);
  }
  (*(void (**)(CMTime *__return_ptr))(**((void **)v13[2].var9 + 4) + 320))(&v143);
  seconds.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)var0;
  CMTime time1 = v143;
  PC_CMTimeSaferSubtract((CMTime *)&seconds, &time1, (uint64_t)&time2);
  OZChannelObjectRootBase::getTimeOffset((__n128 *)&v13->var7, &v141);
  seconds.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)time2;
  *(__n128 *)&time1.value = v141;
  time1.CMTimeEpoch epoch = epoch;
  PC_CMTimeSaferAdd((CMTime *)&seconds, &time1, (uint64_t)&v134);
  CMTime var0 = v134;
  (*(void (**)(OZRenderState *__return_ptr))(**((void **)v13[2].var9 + 4) + 336))(&seconds);
  CMTime var0 = (CMTime)seconds.var0;
  CMTime v75 = (OZChannelFolder *)OZMotionPathBehavior::getPositionChannel((OZMotionPathBehavior *)v13);
  Descendant = (OZChannel *)OZChannelFolder::getDescendant(v75, *((_DWORD *)this + 7));
  OZChannel::getValueAsDouble(Descendant, &var0, 0.0);
  return v77 + a5;
}

__n128 OZMotionPathCurveNode::solveNode(OZMotionPathCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2 = *((void *)a2 + 19);
  uint64_t v3 = *((void *)a2 + 10);
  CMTime v9 = *(CMTime *)((unsigned char *)a2 + 5);
  __n128 result = *((__n128 *)a2 + 6);
  *(__n128 *)&v8.value = result;
  v8.CMTimeEpoch epoch = *((void *)a2 + 14);
  if (*((_DWORD *)a2 + 36))
  {
    unint64_t v7 = 0;
    do
    {
      *(double *)(v2 + 8 * v7) = (*(double (**)(OZMotionPathCurveNode *, CMTime *, double, double))(*(void *)this + 16))(this, &v8, 0.0, *(double *)(v3 + 8 * v7));
      CMTime v11 = v8;
      CMTime v10 = v9;
      PC_CMTimeSaferAdd(&v11, &v10, (uint64_t)&v12);
      __n128 result = *(__n128 *)&v12.value;
      CMTime v8 = v12;
      ++v7;
    }
    while (v7 < *((unsigned int *)a2 + 36));
  }
  return result;
}

void OZMotionPathCurveNode::cloneNode(OZMotionPathCurveNode *this)
{
}

void sub_1B7B9E6A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C402889D652);
  _Unwind_Resume(a1);
}

uint64_t OZMotionPathCurveNode::compare(OZMotionPathCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

__n128 OZMotionPathCurveNode::getNeededRange(OZMotionPathCurveNode *this, OZCurveNodeParam *a2)
{
  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((void *)a2 + 5) = *((void *)a2 + 14);
  __n128 result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((void *)a2 + 8) = *((void *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((unsigned char *)a2 + 88) = 0;
  *((void *)a2 + 10) = *((void *)a2 + 19);
  return result;
}

double PCTimeRange::getEnd@<D0>(PCTimeRange *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  CMTime v8 = *(CMTime *)this;
  CMTime v7 = *(CMTime *)((unsigned char *)this + 1);
  PC_CMTimeSaferAdd(&v8, &v7, (uint64_t)&v6);
  CMTime v8 = v6;
  CMTime v7 = *a2;
  return PC_CMTimeSaferSubtract(&v8, &v7, a3);
}

uint64_t OZSystemSimulator::OZSystemSimulator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1134B58;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a1 + 16;
  *(void *)(a1 + 24) = a1 + 16;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a1 + 64;
  *(void *)(a1 + 72) = a1 + 64;
  *(void *)(a1 + 80) = 0;
  PCMutex::PCMutex((PCMutex *)(a1 + 88));
  PCMutex::PCMutex((PCMutex *)(a1 + 160), 1);
  *(void *)(a1 + 160) = &unk_1F10933F0;
  *(_DWORD *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 236) = 1;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = a1 + 248;
  *(_DWORD *)(a1 + 272) = 0;
  return a1;
}

void sub_1B7B9E8C8(_Unwind_Exception *a1)
{
  PCMutex::~PCMutex(v4);
  std::__list_imp<unsigned int>::clear(v3);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v2, *v5);
  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

void OZSystemSimulator::~OZSystemSimulator(OZSystemSimulator *this)
{
  *(void *)this = &unk_1F1134B58;
  OZSystemSimulator::flushCache(this, 1, 0);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 240, *((void **)this + 31));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 160));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 88));
  std::__list_imp<unsigned int>::clear((void *)this + 8);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 40, *((void **)this + 6));
  std::__list_imp<unsigned int>::clear((void *)this + 2);
}

{
  uint64_t vars8;

  OZSystemSimulator::~OZSystemSimulator(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZSystemSimulator::flushCache(OZSystemSimulator *this, int a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 152))(*((void *)this + 1));
  if ((result & 1) == 0)
  {
    if (a2)
    {
      PCMutex::lock((PCMutex *)((char *)this + 160));
      PCMutex::lock((PCMutex *)((char *)this + 88));
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 240, *((void **)this + 31));
    *((void *)this + 30) = (char *)this + 248;
    *((void *)this + 31) = 0;
    *((void *)this + 32) = 0;
    for (uint64_t i = *((void *)this + 4); i; uint64_t i = *((void *)this + 4))
    {
      CMTime v8 = (PCSharedCount **)*((void *)this + 3);
      if (v8[2])
      {
        OZSimStateArray::~OZSimStateArray(v8[2]);
        MEMORY[0x1BA9BFBA0]();
        CMTime v8 = (PCSharedCount **)*((void *)this + 3);
        uint64_t i = *((void *)this + 4);
      }
      CMTime v9 = *v8;
      v9[1].CMTime var0 = (PC_Sp_counted_base *)v8[1];
      v8[1]->CMTime var0 = (PC_Sp_counted_base *)v9;
      *((void *)this + 4) = i - 1;
      operator delete(v8);
    }
    if (*((void *)this + 7))
    {
      CMTime v10 = (char *)this + 40;
      do
      {
        CMTime v11 = *(uint64_t **)v10;
        CMTime v12 = *(PCSharedCount **)(*(void *)v10 + 56);
        if (v12)
        {
          OZSimStateArray::~OZSimStateArray(v12);
          MEMORY[0x1BA9BFBA0]();
        }
        std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)this + 5, v11);
        operator delete(v11);
      }
      while (*((void *)this + 7));
    }
    while (1)
    {
      uint64_t v14 = *((void *)this + 10);
      if (!v14) {
        break;
      }
      unsigned int v13 = (PCSharedCount **)*((void *)this + 9);
      if (v13[2])
      {
        OZSimStateArray::~OZSimStateArray(v13[2]);
        MEMORY[0x1BA9BFBA0]();
        unsigned int v13 = (PCSharedCount **)*((void *)this + 9);
        uint64_t v14 = *((void *)this + 10);
      }
      uint64_t v15 = *v13;
      v15[1].CMTime var0 = (PC_Sp_counted_base *)v13[1];
      v13[1]->CMTime var0 = (PC_Sp_counted_base *)v15;
      *((void *)this + 10) = v14 - 1;
      operator delete(v13);
    }
    uint64_t result = (*(uint64_t (**)(void, OZSystemSimulator *))(**((void **)this + 1) + 160))(*((void *)this + 1), this);
    if (a3)
    {
      uint64_t v17 = (uint64_t)&v17;
      double v18 = &v17;
      uint64_t v19 = 0;
      (*(void (**)(void, uint64_t *))(**((void **)this + 1) + 48))(*((void *)this + 1), &v17);
      for (uint64_t j = v18; j != &v17; uint64_t j = (uint64_t *)j[1])
        (*(void (**)(uint64_t))(*(void *)j[2] + 712))(j[2]);
      uint64_t result = (uint64_t)std::__list_imp<unsigned int>::clear(&v17);
    }
    if (a2)
    {
      PCMutex::unlock((PCMutex *)((char *)this + 88));
      return PCMutex::unlock((PCMutex *)((char *)this + 160));
    }
  }
  return result;
}

void sub_1B7B9EBEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZSystemSimulator::getState(OZSystemSimulator *this, const CMTime *a2, OZSimStateArray **a3, BOOL *a4)
{
  CMTime v8 = (PCMutex *)((char *)this + 160);
  PCMutex::lock((PCMutex *)((char *)this + 160));
  ++*((_DWORD *)this + 58);
  memset(&v24, 0, sizeof(v24));
  (*(void (**)(CMTime *__return_ptr))(**((void **)this + 1) + 120))(&v24);
  CMTime time = v24;
  CMTimeGetSeconds(&time);
  CMTime v22 = *a2;
  memset(&v21, 0, sizeof(v21));
  CMTime v20 = *a2;
  CMTime v19 = v24;
  PC_CMTimeFloorToSampleDuration(&v20, &v19, (uint64_t)&v21);
  memset(&v18, 0, sizeof(v18));
  CMTime time1 = v22;
  CMTime time2 = v21;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v18);
  CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime time2 = v18;
  if (CMTimeCompare(&time1, &time2)
    && (CMTime v17 = v22, (NonFrameAlignedCachedState = OZSystemSimulator::getNonFrameAlignedCachedState(this, &v17)) != 0))
  {
    OZSystemSimulator::updateLocalCoords((double *)this, (OZSimStateArray *)NonFrameAlignedCachedState);
    *a3 = (OZSimStateArray *)NonFrameAlignedCachedState;
    *a4 = 0;
    uint64_t result = PCMutex::unlock(v8);
  }
  else
  {
    CMTime v16 = v22;
    CMTime v15 = v24;
    CachedState = OZSystemSimulator::getCachedState(this, &v16, &v15);
    CMTime v12 = (OZSimStateArray *)CachedState;
    if (!CachedState || (time1 = CachedState[1], CMTime time2 = v22, CMTimeCompare(&time1, &time2)))
    {
      int v13 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
      if (v12) {
        int v14 = v13;
      }
      else {
        int v14 = 0;
      }
      if (v14 == 1) {
        operator new();
      }
      operator new();
    }
    OZSystemSimulator::updateLocalCoords((double *)this, v12);
    *a3 = v12;
    *a4 = 0;
    uint64_t result = PCMutex::unlock(v8);
  }
  --*((_DWORD *)this + 58);
  return result;
}

void sub_1B7B9F310(_Unwind_Exception *exception_object)
{
  --*(_DWORD *)(v1 + 232);
  _Unwind_Resume(exception_object);
}

CMTime *OZSystemSimulator::getNonFrameAlignedCachedState(OZSystemSimulator *this, CMTime *a2)
{
  uint64_t v4 = (PCMutex *)((char *)this + 88);
  PCMutex::lock((PCMutex *)((char *)this + 88));
  if (*((unsigned char *)this + 236) && *((_DWORD *)this + 58) == 1)
  {
    OZSystemSimulator::flushCache(this, 0, 1);
    uint64_t v5 = 0;
    *((unsigned char *)this + 236) = 0;
  }
  else
  {
    CMTime v6 = (char *)this + 64;
    CMTime v7 = (uint64_t *)*((void *)this + 9);
    if (v7 == (uint64_t *)((char *)this + 64))
    {
LABEL_7:
      uint64_t v5 = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v5 = (CMTime *)v7[2];
        CMTime time1 = v5[1];
        CMTime time2 = *a2;
        int32_t v8 = CMTimeCompare(&time1, &time2);
        CMTime v9 = (char *)v7[1];
        if (!v8) {
          break;
        }
        CMTime v7 = (uint64_t *)v7[1];
        if (v9 == v6) {
          goto LABEL_7;
        }
      }
      uint64_t v10 = *v7;
      *(void *)(v10 + 8) = v9;
      *(void *)v7[1] = v10;
      --*((void *)this + 10);
      operator delete(v7);
      CMTime v11 = operator new(0x18uLL);
      CMTime v12 = (void *)*((void *)this + 9);
      void *v11 = v6;
      v11[1] = v12;
      v11[2] = v5;
      *CMTime v12 = v11;
      uint64_t v13 = *((void *)this + 10) + 1;
      *((void *)this + 9) = v11;
      *((void *)this + 10) = v13;
    }
  }
  PCMutex::unlock(v4);
  return v5;
}

void sub_1B7B9F4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double *OZSystemSimulator::updateLocalCoords(double *this, OZSimStateArray *a2)
{
  if (!*((unsigned char *)a2 + 48))
  {
    long long v14 = *(_OWORD *)((char *)a2 + 24);
    uint64_t v15 = *((void *)a2 + 5);
    uint64_t v13 = 0x3FF0000000000000;
    uint64_t v10 = 0x3FF0000000000000;
    uint64_t v7 = 0x3FF0000000000000;
    uint64_t v4 = 0x3FF0000000000000;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v12 = 0u;
    long long v11 = 0u;
    this = (double *)(*(uint64_t (**)(void, double *, uint64_t *, long long *))(**((void **)this + 1) + 104))(*((void *)this + 1), this, &v4, &v14);
    for (uint64_t i = *(void *)a2; i != *((void *)a2 + 1); i += 248)
    {
      *(_OWORD *)(i + 176) = *(_OWORD *)i;
      *(void *)(i + 192) = *(void *)(i + 16);
      this = PCMatrix44Tmpl<double>::transform<double>((double *)&v4, (double *)(i + 176), (double *)(i + 176));
    }
    *((unsigned char *)a2 + 48) = 1;
  }
  return this;
}

CMTime *OZSystemSimulator::getCachedState(OZSystemSimulator *this, CMTime *a2, CMTime *a3)
{
  long long v6 = (PCMutex *)((char *)this + 88);
  double v25 = (char *)this + 88;
  PCMutex::lock((PCMutex *)((char *)this + 88));
  char v26 = 1;
  if (*((unsigned char *)this + 236) && *((_DWORD *)this + 58) == 1)
  {
    OZSystemSimulator::flushCache(this, 0, 1);
    uint64_t v7 = 0;
    *((unsigned char *)this + 236) = 0;
    goto LABEL_32;
  }
  long long v8 = (char *)this + 16;
  long long v9 = (char *)*((void *)this + 3);
  if (v9 == (char *)this + 16)
  {
LABEL_15:
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v10 = (CMTime *)*((void *)v9 + 2);
      CMTime time1 = v10[1];
      CMTime time2 = *a2;
      if (!CMTimeCompare(&time1, &time2))
      {
        uint64_t v17 = *(void *)v9;
        *(void *)(v17 + 8) = *((void *)v9 + 1);
        **((void **)v9 + 1) = v17;
        --*((void *)this + 4);
        operator delete(v9);
        CMTime v18 = operator new(0x18uLL);
        CMTime v19 = (void *)*((void *)this + 3);
        void *v18 = v8;
        v18[1] = v19;
        v18[2] = v10;
        void *v19 = v18;
        uint64_t v20 = *((void *)this + 4) + 1;
        *((void *)this + 3) = v18;
        *((void *)this + 4) = v20;
        uint64_t v7 = v10;
        goto LABEL_32;
      }
      CMTime time1 = v10[1];
      CMTime time2 = *a2;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        if (!v7 || (time1 = v7[1], CMTime time2 = v10[1], CMTimeCompare(&time1, &time2) < 0)) {
          uint64_t v7 = v10;
        }
      }
      long long v9 = (char *)*((void *)v9 + 1);
    }
    while (v9 != v8);
    if (!v7) {
      goto LABEL_15;
    }
    CMTime time2 = v7[1];
    CMTime time1 = *a2;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v24);
    operator*(a3, &v23, 10.0);
    CMTime time1 = v24;
    CMTime time2 = v23;
    if (CMTimeCompare(&time1, &time2) < 0) {
      goto LABEL_32;
    }
  }
  long long v11 = (void *)((char *)this + 48);
  uint64_t v12 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__lower_bound<CMTime>((uint64_t)this + 40, a2, *((void *)this + 6), (uint64_t)this + 48);
  uint64_t v13 = (void *)v12;
  if ((OZSystemSimulator *)((char *)this + 48) == (OZSystemSimulator *)v12)
  {
    if (!*((void *)this + 7)) {
      goto LABEL_32;
    }
    CMTime v21 = (void *)*v11;
    if (*v11)
    {
      do
      {
        uint64_t v15 = v21;
        CMTime v21 = (void *)v21[1];
      }
      while (v21);
    }
    else
    {
      do
      {
        uint64_t v15 = (void *)v11[2];
        BOOL v16 = *v15 == (void)v11;
        long long v11 = v15;
      }
      while (v16);
    }
LABEL_30:
    uint64_t v7 = (CMTime *)v15[7];
    goto LABEL_32;
  }
  CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime time2 = *(CMTime *)(v12 + 32);
  if (!CMTimeCompare(&time1, &time2))
  {
    uint64_t v7 = (CMTime *)v13[7];
    goto LABEL_32;
  }
  if (*((void **)this + 5) != v13)
  {
    long long v14 = (void *)*v13;
    if (*v13)
    {
      do
      {
        uint64_t v15 = v14;
        long long v14 = (void *)v14[1];
      }
      while (v14);
    }
    else
    {
      do
      {
        uint64_t v15 = (void *)v13[2];
        BOOL v16 = *v15 == (void)v13;
        uint64_t v13 = v15;
      }
      while (v16);
    }
    goto LABEL_30;
  }
LABEL_32:
  PCMutex::unlock(v6);
  return v7;
}

void sub_1B7B9F8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void *OZSystemSimulator::accumInitialValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = (uint64_t)&v20;
  CMTime v21 = &v20;
  uint64_t v22 = 0;
  uint64_t v17 = &v17;
  CMTime v18 = &v17;
  uint64_t v19 = 0;
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8));
  uint64_t v7 = *(void *)(a1 + 8);
  long long v15 = *(_OWORD *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 40);
  (*(void (**)(uint64_t, uint64_t *, long long *))(*(void *)v7 + 24))(v7, &v20, &v15);
  for (uint64_t i = v21; i != &v20; uint64_t i = (uint64_t *)i[1])
  {
    long long v9 = (uint64_t *)i[2];
    uint64_t v10 = *v9;
    {
      long long v11 = operator new(0x18uLL);
      v11[1] = &v17;
      v11[2] = v9;
      uint64_t v12 = v17;
      void *v11 = v17;
      v12[1] = v11;
      uint64_t v17 = v11;
      ++v19;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v10 + 648))(v9, a2, a3, v6);
    }
  }
  for (uint64_t j = v18; j != &v17; uint64_t j = (void *)j[1])
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)j[2] + 648))(j[2], a2, a3, v6);
  std::__list_imp<unsigned int>::clear(&v17);
  return std::__list_imp<unsigned int>::clear(&v20);
}

void sub_1B7B9FB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  std::__list_imp<unsigned int>::clear((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void std::vector<OZSimStateElement>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xEF7BDEF7BDEF7BDFLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<OZSimStateElement>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 248 * a2;
    while (v3 != v7)
      OZSimStateElement::~OZSimStateElement((OZSimStateElement *)(v3 - 248));
    a1[1] = v7;
  }
}

void OZSystemSimulator::reapDeadObjects(OZSystemSimulator *this, OZSimStateArray *a2, OZSimStateArray *a3)
{
  BOOL v5 = (char *)a2 + 24;
  long long v9 = *(_OWORD *)((char *)a2 + 24);
  uint64_t v10 = *((void *)a2 + 5);
  uint64_t v6 = *(void *)a2;
  if (*(void *)a2 == *((void *)a2 + 1))
  {
    int v7 = 0;
  }
  else
  {
    int v7 = 0;
    do
    {
      long long v11 = v9;
      uint64_t v12 = v10;
      if ((*(unsigned int (**)(void, long long *))(**(void **)(v6 + 232) + 24))(*(void *)(v6 + 232), &v11))
      {
        OZSimStateElement::operator=(*(void *)a3 + 248 * v7++, (long long *)v6);
      }
      v6 += 248;
    }
    while (v6 != *((void *)a2 + 1));
  }
  long long v8 = *(_OWORD *)v5;
  *((void *)a3 + 5) = *((void *)v5 + 2);
  *(_OWORD *)((char *)a3 + 24) = v8;
  *((unsigned char *)a3 + 48) = 0;
  OZSimStateArray::setOwnedObjectFrom((PCSharedCount *)a3, (const PCSharedCount *)a2);
  std::vector<OZSimStateElement>::resize((uint64_t *)a3, v7);
}

uint64_t OZSystemSimulator::cacheState(OZSystemSimulator *this, OZSimStateArray *a2, CMTime *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  if (!result) {
    return result;
  }
  int v7 = (PCMutex *)((char *)this + 88);
  int v30 = (char *)this + 88;
  PCMutex::lock((PCMutex *)((char *)this + 88));
  char v31 = 1;
  long long v8 = (char *)this + 16;
  long long v9 = (char *)*((void *)this + 3);
  if (v9 == (char *)this + 16)
  {
LABEL_5:
    unint64_t v10 = *((void *)this + 4);
    if (v10 >= 8)
    {
      long long v11 = *(uint64_t **)v8;
      if (*(void *)(*(void *)v8 + 16))
      {
        OZSimStateArray::~OZSimStateArray(*(PCSharedCount **)(*(void *)v8 + 16));
        MEMORY[0x1BA9BFBA0]();
        long long v11 = (uint64_t *)*((void *)this + 2);
        unint64_t v10 = *((void *)this + 4);
      }
      uint64_t v12 = *v11;
      *(void *)(v12 + 8) = v11[1];
      *(void *)v11[1] = v12;
      *((void *)this + 4) = v10 - 1;
      operator delete(v11);
    }
    operator new();
  }
  while (1)
  {
    CMTime v27 = *(CMTime *)(*((void *)v9 + 2) + 24);
    CMTime time2 = *(CMTime *)((unsigned char *)a2 + 1);
    if (!CMTimeCompare(&v27, &time2)) {
      break;
    }
    long long v9 = (char *)*((void *)v9 + 1);
    if (v9 == v8) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = *((void *)v9 + 2);
  uint64_t v14 = *(void *)v9;
  *(void *)(v14 + 8) = *((void *)v9 + 1);
  **((void **)v9 + 1) = v14;
  --*((void *)this + 4);
  operator delete(v9);
  long long v15 = operator new(0x18uLL);
  uint64_t v16 = (void *)*((void *)this + 3);
  void *v15 = v8;
  v15[1] = v16;
  v15[2] = v13;
  void *v16 = v15;
  uint64_t v17 = *((void *)this + 4) + 1;
  *((void *)this + 3) = v15;
  *((void *)this + 4) = v17;
  OZSimStateArray::operator=(v13, (uint64_t)a2);
  CMTime v18 = (void *)((char *)this + 48);
  uint64_t v19 = (_OWORD *)((char *)a2 + 24);
  uint64_t v20 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__lower_bound<CMTime>((uint64_t)this + 40, (CMTime *)a2 + 1, *((void *)this + 6), (uint64_t)this + 48);
  CMTime v21 = (void *)v20;
  if ((OZSystemSimulator *)((char *)this + 48) == (OZSystemSimulator *)v20)
  {
    if (!*((void *)this + 7)) {
      goto LABEL_27;
    }
    double v25 = (void *)*v18;
    if (*v18)
    {
      do
      {
        CMTime v23 = v25;
        double v25 = (void *)v25[1];
      }
      while (v25);
    }
    else
    {
      do
      {
        CMTime v23 = (void *)v18[2];
        BOOL v24 = *v23 == (void)v18;
        CMTime v18 = v23;
      }
      while (v24);
    }
    goto LABEL_23;
  }
  *(_OWORD *)&v27.value = *v19;
  v27.CMTimeEpoch epoch = *((void *)a2 + 5);
  CMTime time2 = *(CMTime *)(v20 + 32);
  if (CMTimeCompare(&v27, &time2))
  {
    if (*((void **)this + 5) == v21) {
      goto LABEL_27;
    }
    uint64_t v22 = (void *)*v21;
    if (*v21)
    {
      do
      {
        CMTime v23 = v22;
        uint64_t v22 = (void *)v22[1];
      }
      while (v22);
    }
    else
    {
      do
      {
        CMTime v23 = (void *)v21[2];
        BOOL v24 = *v23 == (void)v21;
        CMTime v21 = v23;
      }
      while (v24);
    }
LABEL_23:
    char v26 = (CMTime *)v23[7];
    goto LABEL_25;
  }
  char v26 = (CMTime *)v21[7];
  OZSimStateArray::operator=((uint64_t)v26, (uint64_t)a2);
LABEL_25:
  if (!v26
    || (*(_OWORD *)&v27.value = *v19,
        v27.CMTimeEpoch epoch = *((void *)a2 + 5),
        CMTime time2 = v26[1],
        PC_CMTimeSaferSubtract(&v27, &time2, (uint64_t)&v29),
        operator*(a3, &v28, 10.0),
        CMTime v27 = v29,
        CMTime time2 = v28,
        CMTimeCompare(&v27, &time2) > 0))
  {
LABEL_27:
    operator new();
  }
  return PCMutex::unlock(v7);
}

void sub_1B7BA004C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void *OZSystemSimulator::handleCollisions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v15 = (uint64_t)&v15;
  uint64_t v16 = &v15;
  uint64_t v17 = 0;
  uint64_t v9 = *(void *)(a1 + 8);
  long long v13 = *(_OWORD *)(a3 + 24);
  uint64_t v14 = *(void *)(a3 + 40);
  (*(void (**)(uint64_t, uint64_t *, long long *))(*(void *)v9 + 32))(v9, &v15, &v13);
  for (uint64_t i = v16; i != &v15; uint64_t i = (uint64_t *)i[1])
  {
    long long v11 = (void *)i[2];
    if (v11) {
    (*(void (**)(void *, void, uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v11 + 736))(v11, 0, a2, a3, a4, a5);
    }
    if (*a5) {
      break;
    }
  }
  return std::__list_imp<unsigned int>::clear(&v15);
}

void sub_1B7BA0208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OZSystemSimulator::partialSolve(OZSystemSimulator *this, OZSimStateArray *a2, uint64_t a3, CMTime *a4)
{
  if ((int)a3 >= 1)
  {
    uint64_t v20 = v4;
    uint64_t v21 = v5;
    int v7 = a3;
    OZSystemSimulator::accumInitialValues((uint64_t)this, (uint64_t)a2, a3);
    if ((*(unsigned int (**)(void))(**((void **)this + 1) + 144))(*((void *)this + 1)))
    {
      OZSystemSimulator::getDerivatives(this, a2);
      memset(&v17, 0, sizeof(v17));
      operator/((long long *)&a4->value, (uint64_t)&v17, (double)v7);
      CMTime v16 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      uint64_t v10 = *((void *)a2 + 1);
      if (v10 != *(void *)a2)
      {
        long long v11 = (_OWORD *)(v10 - 248);
        int v12 = 1;
        do
        {
          CMTime time = v16;
          double Seconds = CMTimeGetSeconds(&time);
          OZSimStateElement::stepFrom((uint64_t)v11, (uint64_t)v11, Seconds, 1.0);
          CMTime v19 = v16;
          CMTime v18 = v17;
          PC_CMTimeSaferAdd(&v19, &v18, (uint64_t)&v16);
          v11[9] = 0u;
          v11[10] = 0u;
          v11[8] = 0u;
          if (v11 == *(_OWORD **)a2) {
            break;
          }
          long long v11 = (_OWORD *)((char *)v11 - 248);
        }
        while (v12++ < v7);
      }
    }
  }
}

uint64_t OZSystemSimulator::cacheNonFrameAlignedState(OZSystemSimulator *this, OZSimStateArray *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  if (result)
  {
    PCMutex::lock((PCMutex *)((char *)this + 88));
    uint64_t v5 = (char *)this + 64;
    uint64_t v6 = (uint64_t *)*((void *)this + 9);
    if (v6 == (uint64_t *)((char *)this + 64))
    {
LABEL_5:
      unint64_t v7 = *((void *)this + 10);
      if (v7 >= 8)
      {
        long long v8 = *(uint64_t **)v5;
        if (*(void *)(*(void *)v5 + 16))
        {
          OZSimStateArray::~OZSimStateArray(*(PCSharedCount **)(*(void *)v5 + 16));
          MEMORY[0x1BA9BFBA0](v9, 0x1020C408C3EC410);
          long long v8 = (uint64_t *)*((void *)this + 8);
          unint64_t v7 = *((void *)this + 10);
        }
        uint64_t v10 = *v8;
        *(void *)(v10 + 8) = v8[1];
        *(void *)v8[1] = v10;
        *((void *)this + 10) = v7 - 1;
        operator delete(v8);
      }
      operator new();
    }
    while (1)
    {
      CMTime time1 = *(CMTime *)(v6[2] + 24);
      CMTime time2 = *(CMTime *)((unsigned char *)a2 + 1);
      if (!CMTimeCompare(&time1, &time2)) {
        break;
      }
      uint64_t v6 = (uint64_t *)v6[1];
      if (v6 == (uint64_t *)v5) {
        goto LABEL_5;
      }
    }
    uint64_t v11 = v6[2];
    uint64_t v12 = *v6;
    *(void *)(v12 + 8) = v6[1];
    *(void *)v6[1] = v12;
    --*((void *)this + 10);
    operator delete(v6);
    long long v13 = operator new(0x18uLL);
    uint64_t v14 = (void *)*((void *)this + 9);
    void *v13 = v5;
    v13[1] = v14;
    v13[2] = v11;
    *uint64_t v14 = v13;
    uint64_t v15 = *((void *)this + 10) + 1;
    *((void *)this + 9) = v13;
    *((void *)this + 10) = v15;
    OZSimStateArray::operator=(v11, (uint64_t)a2);
    return PCMutex::unlock((PCMutex *)((char *)this + 88));
  }
  return result;
}

void sub_1B7BA0590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t OZSystemSimulator::dirtyCache(OZSystemSimulator *this)
{
  uint64_t v2 = (PCMutex *)((char *)this + 88);
  PCMutex::lock((PCMutex *)((char *)this + 88));
  *((unsigned char *)this + 236) = 1;

  return PCMutex::unlock(v2);
}

void *OZSystemSimulator::didAddToScene(OZSystemSimulator *this, OZScene *a2)
{
  uint64_t v4 = *((void *)a2 + 198);
  *((void *)this + 33) = v4;
  OZDocument::addCPPObserver(v4, (uint64_t)this, 1000);

  return OZScene::addSimulator((uint64_t)a2, (uint64_t)this);
}

void *OZSystemSimulator::willRemoveFromScene(OZSystemSimulator *this, OZScene *a2)
{
  uint64_t v4 = *((void *)a2 + 198);
  *((void *)this + 33) = v4;
  OZDocument::removeCPPObserver(v4);

  return OZScene::removeSimulator((uint64_t)a2, (uint64_t)this);
}

void OZSystemSimulator::notify(OZSystemSimulator *this, __int16 a2)
{
  if (((*(uint64_t (**)(void))(**((void **)this + 1) + 152))(*((void *)this + 1)) & 1) == 0)
  {
    if ((a2 & 0x9810) != 0) {
      goto LABEL_4;
    }
    if ((a2 & 0xC) == 0) {
      return;
    }
    uint64_t v4 = *((void *)this + 33);
    if (!v4)
    {
LABEL_4:
      PCMutex::lock((PCMutex *)((char *)this + 88));
      *((unsigned char *)this + 236) = 1;
      PCMutex::unlock((PCMutex *)((char *)this + 88));
    }
    else
    {
      v20[0] = 0;
      v20[1] = 0;
      CMTime v19 = (uint64_t *)v20;
      uint64_t v5 = *(void *)(v4 + 24) + 920;
      do
      {
        uint64_t v6 = (OZChannelBase *)v5;
        uint64_t v5 = *(void *)(v5 + 48);
      }
      while (v5);
      uint64_t v7 = *(void *)(v4 + 168);
      long long v8 = (OZChannelRef **)(v4 + 296);
      if (v7) {
        uint64_t v9 = (OZChannelRef **)(v7 + 48);
      }
      else {
        uint64_t v9 = v8;
      }
      for (uint64_t i = *v9; i != v9[1]; uint64_t i = (OZChannelRef *)((char *)i + 24))
      {
        Channel = OZChannelRef::getChannel(i, v6);
        if (Channel)
        {
          uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(Channel);
          if (ObjectManipulator)
          {
            uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 232))(ObjectManipulator);
            uint64_t v14 = (const void *)v13;
            if (v13)
            {
              LODWORD(v17) = *(_DWORD *)(v13 + 80);
              std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(&v19, (unsigned int *)&v17, &v17);
              unint64_t v15 = *(void *)((*(uint64_t (**)(const void *))(*(void *)v14 + 664))(v14) + 8);
              long long v17 = xmmword_1B7E77B80;
              if (OZFactory::isKindOfClass(v15, (int32x4_t *)&v17))
              {
                *((void *)&v17 + 1) = 0;
                uint64_t v18 = 0;
                *(void *)&long long v17 = (char *)&v17 + 8;
                OZRigWidget::getRiggedNodeIDs(v16, (uint64_t **)&v17);
                std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t *)&v19, (unsigned int *)v17, (unsigned int *)&v17 + 2);
                std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v17, *((void **)&v17 + 1));
              }
            }
          }
        }
      }
      if ((*(unsigned int (**)(void, uint64_t **))(**((void **)this + 1) + 64))(*((void *)this + 1), &v19)&& *((int *)this + 68) <= 0)
      {
        PCMutex::lock((PCMutex *)((char *)this + 88));
        *((unsigned char *)this + 236) = 1;
        PCMutex::unlock((PCMutex *)((char *)this + 88));
        ++*((_DWORD *)this + 68);
      }
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v19, v20[0]);
    }
  }
}

void sub_1B7BA097C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

uint64_t *std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(v5, v6, v4 + 7, v4 + 7);
      uint64_t v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          long long v8 = v7;
          uint64_t v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void *OZSystemSimulator::calcStaticHash(uint64_t a1, void *lpsrc, uint64_t **a3, uint64_t a4)
{
  if (!v8) {
    __cxa_bad_cast();
  }
  BOOL v9 = v8;
  __n128 v20 = *(__n128 *)PCHashWriteStream::getHash(v8)->i8;
  (*(void (**)(int8x8_t *))(*(void *)v9 + 40))(v9);
  uint64_t result = *(void **)(a1 + 8);
  if (result)
  {
    uint64_t v17 = (uint64_t)&v17;
    uint64_t v18 = &v17;
    uint64_t v19 = 0;
    (*(void (**)(void *, uint64_t *))(*result + 48))(result, &v17);
    for (uint64_t i = v18; i != &v17; uint64_t i = (uint64_t *)i[1])
    {
      uint64_t v12 = (_OWORD *)i[2];
      uint64_t v13 = (*(uint64_t (**)(_OWORD *))(*(void *)v12 + 320))(v12);
      if (v13 != a4)
      {
        if ((*(unsigned int (**)(_OWORD *))(*(void *)v12 + 672))(v12))
        {
          uint64_t v14 = v12 + 1;
        }
        else
        {
          if (!v13) {
            continue;
          }
          uint64_t v14 = (_OWORD *)(v13 + 16);
          if (OZObjectManipulator::isInObjectList(v13 + 16, (uint64_t)a3)) {
            continue;
          }
        }
        StaticHash = (int *)OZObjectManipulator::getStaticHash(v14, lpsrc, a3);
        PCHash128::operator+=((int *)&v20, StaticHash);
      }
    }
    Hash = PCHashWriteStream::getHash(v9);
    PCHash128::operator+=((int *)&v20, (int *)Hash);
    PCHashWriteStream::setHash((__n128 *)v9, &v20);
    return std::__list_imp<unsigned int>::clear(&v17);
  }
  return result;
}

void sub_1B7BA0C48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *OZSystemSimulator::calcHashForState(uint64_t a1, void *lpsrc, OZRenderParams *a3, uint64_t **a4, uint64_t a5)
{
  if (!v10) {
    __cxa_bad_cast();
  }
  uint64_t v11 = v10;
  __n128 v23 = *(__n128 *)PCHashWriteStream::getHash(v10)->i8;
  (*(void (**)(void *))(*(void *)lpsrc + 40))(lpsrc);
  uint64_t result = *(void **)(a1 + 8);
  if (result)
  {
    uint64_t v20 = (uint64_t)&v20;
    uint64_t v21 = &v20;
    uint64_t v22 = 0;
    (*(void (**)(void *, uint64_t *))(*result + 48))(result, &v20);
    for (uint64_t i = v21; i != &v20; uint64_t i = (uint64_t *)i[1])
    {
      uint64_t v14 = (_OWORD *)i[2];
      uint64_t v15 = (*(uint64_t (**)(_OWORD *))(*(void *)v14 + 320))(v14);
      if (v15 != a5)
      {
        if ((*(unsigned int (**)(_OWORD *))(*(void *)v14 + 672))(v14))
        {
          OZObjectManipulator::getHashForState(v14 + 1, (uint64_t *)lpsrc, a3, a4, &v19);
          PCHash128::operator+=((int *)&v23, (int *)&v19);
        }
        else
        {
          if (v15)
          {
            CMTime v16 = (_OWORD *)(v15 + 16);
            if (!OZObjectManipulator::isInObjectList((uint64_t)v16, (uint64_t)a4))
            {
              OZObjectManipulator::getHashForState(v16, (uint64_t *)lpsrc, a3, a4, &v19);
              PCHash128::operator+=((int *)&v23, (int *)&v19);
            }
          }
          uint64_t v17 = v14 + 1;
          if (!OZObjectManipulator::isInObjectList((uint64_t)v17, (uint64_t)a4))
          {
            OZObjectManipulator::getHashForState(v17, (uint64_t *)lpsrc, a3, a4, &v19);
            PCHash128::operator+=((int *)&v23, (int *)&v19);
          }
        }
      }
    }
    Hash = PCHashWriteStream::getHash(v11);
    PCHash128::operator+=((int *)&v23, (int *)Hash);
    PCHashWriteStream::setHash((__n128 *)v11, &v23);
    return std::__list_imp<unsigned int>::clear(&v20);
  }
  return result;
}

void sub_1B7BA0ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OZSystemSimulator::midPointSolve(OZSystemSimulator *this, OZSimStateArray *a2, OZSimStateArray *a3, CMTime *a4, double a5)
{
  OZSystemSimulator::getDerivatives(this, a2);
  OZSimStateArray::OZSimStateArray((OZSimStateArray *)v13, -1108378657 * ((*((void *)a2 + 1) - *(void *)a2) >> 3));
  CMTime v11 = *a4;
  PC_CMTimeHalve(&v11, (uint64_t)&v12);
  OZSimStateArray::stepFrom((OZSimStateArray *)v13, a2, &v12, a5 * 0.5);
  OZSystemSimulator::getDerivatives(this, (OZSimStateArray *)v13);
  CMTime v10 = *a4;
  OZSimStateArray::stepFrom(a3, a2, (OZSimStateArray *)v13, &v10, a5);
  OZSimStateArray::~OZSimStateArray(v13);
}

void sub_1B7BA0FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  OZSimStateArray::~OZSimStateArray((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void *OZSystemSimulator::getDerivatives(OZSystemSimulator *this, OZSimStateArray *a2)
{
  OZSimStateArray::clearForces(a2);
  uint64_t v16 = (uint64_t)&v16;
  uint64_t v17 = &v16;
  uint64_t v18 = 0;
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 88))(*((void *)this + 1));
  CMTime v15 = *(CMTime *)((unsigned char *)a2 + 1);
  (*(void (**)(CMTime *__return_ptr))(**((void **)this + 1) + 128))(&v14);
  CMTime time1 = v15;
  CMTime time2 = v14;
  int32_t v5 = CMTimeCompare(&time1, &time2);
  (*(void (**)(void, uint64_t *, CMTime *))(**((void **)this + 1) + 24))(*((void *)this + 1), &v16, &v15);
  memset(&v14, 0, sizeof(v14));
  (*(void (**)(CMTime *__return_ptr))(**((void **)this + 1) + 120))(&v14);
  memset(&v13, 0, sizeof(v13));
  operator*(&v14, &v13, 0.001);
  for (uint64_t i = v17; i != &v16; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v7 = i[2];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 672))(v7))
    {
      CMTime time1 = v15;
      CMTime time2 = v13;
      double v8 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v12);
      char v9 = (*(uint64_t (**)(uint64_t, unsigned char *, void, uint64_t, uint64_t, double))(*(void *)v7 + 296))(v7, v12, 0, 1, 1, v8);
      if (v5) {
        char v10 = v9;
      }
      else {
        char v10 = 1;
      }
      if ((v10 & 1) == 0) {
        (*(void (**)(uint64_t, OZSimStateArray *, void, uint64_t))(*(void *)v7 + 648))(v7, a2, -1108378657 * ((*((void *)a2 + 1) - *(void *)a2) >> 3), v4);
      }
    }
    (*(void (**)(uint64_t, OZSimStateArray *, uint64_t))(*(void *)v7 + 632))(v7, a2, v4);
  }
  return std::__list_imp<unsigned int>::clear(&v16);
}

void sub_1B7BA12C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<OZSimStateElement>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(OZSimStateElement **)(v4 - 8);
  if (0xEF7BDEF7BDEF7BDFLL * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      CMTime v13 = (OZSimStateElement *)((char *)v7 + 248 * a2);
      uint64_t v14 = 248 * a2;
      do
      {
        OZSimStateElement::OZSimStateElement(v7);
        uint64_t v7 = (OZSimStateElement *)((char *)v7 + 248);
        v14 -= 248;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    unint64_t v8 = 0xEF7BDEF7BDEF7BDFLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x108421084210842) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xEF7BDEF7BDEF7BDFLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x84210842108421) {
      unint64_t v11 = 0x108421084210842;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v21 = v4;
    if (v11) {
      CMTime v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OZSimStateElement>>(v4, v11);
    }
    else {
      CMTime v12 = 0;
    }
    CMTime v15 = (OZSimStateElement *)&v12[248 * v8];
    v18[0] = v12;
    v18[1] = v15;
    long long v19 = v15;
    uint64_t v20 = &v12[248 * v11];
    uint64_t v16 = 248 * a2;
    uint64_t v17 = (OZSimStateElement *)((char *)v15 + 248 * a2);
    do
    {
      OZSimStateElement::OZSimStateElement(v15);
      CMTime v15 = (OZSimStateElement *)((char *)v15 + 248);
      v16 -= 248;
    }
    while (v16);
    long long v19 = v17;
    std::vector<OZSimStateElement>::__swap_out_circular_buffer(a1, v18);
    std::__split_buffer<OZSimStateElement>::~__split_buffer((uint64_t)v18);
  }
}

void sub_1B7BA1458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<OZSimStateElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<OZSimStateElement>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OZSimStateElement>,std::reverse_iterator<OZSimStateElement*>,std::reverse_iterator<OZSimStateElement*>,std::reverse_iterator<OZSimStateElement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<OZSimStateElement>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x108421084210843) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(248 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OZSimStateElement>,std::reverse_iterator<OZSimStateElement*>,std::reverse_iterator<OZSimStateElement*>,std::reverse_iterator<OZSimStateElement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 248;
  while (a3 + v10 != a5)
  {
    CMTime v12 = (OZSimStateElement *)(v11 + v10);
    v10 -= 248;
    OZSimStateElement::OZSimStateElement(v12, (const OZSimStateElement *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<OZSimStateElement>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 248;
    OZSimStateElement::~OZSimStateElement((OZSimStateElement *)(i - 248));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<CMTime,OZSimStateArray *>,std::__map_value_compare<CMTime,std::__value_type<CMTime,OZSimStateArray *>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,OZSimStateArray *>>>::__emplace_unique_key_args<CMTime,std::pair<CMTime const,OZSimStateArray *>>(uint64_t **a1, CMTime *a2, _OWORD *a3)
{
  uint64_t v5 = std::__tree<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::__map_value_compare<CMTime,std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>,std::less<CMTime>,true>,std::allocator<std::__value_type<CMTime,std::map<unsigned int,GlyphProperties>>>>::__find_equal<CMTime>((uint64_t)a1, &v10, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x40uLL);
    long long v8 = a3[1];
    *((_OWORD *)v6 + 2) = *a3;
    *((_OWORD *)v6 + 3) = v8;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v7, v6);
  }
  return v6;
}

void OZMetalGradientRadial::OZMetalGradientRadial(OZMetalGradientRadial *this, OZChannelGradient *a2, CGColorSpace *a3, CGColorSpace *a4)
{
  int v4 = (int)a3;
  *((void *)this + 37) = &unk_1F1199AC8;
  *((void *)this + 38) = 0;
  *((unsigned char *)this + 312) = 1;
  OZGradient::OZGradient(this, (OZChannelGradient *)off_1F1134C20, (uint64_t)a2, a3, (uint64_t)a4);
  *(void *)this = &unk_1F1134BB0;
  *((void *)this + 37) = &unk_1F1134C00;
  *((void *)this + 27) = 0;
  *((void *)this + 26) = (char *)this + 216;
  *((void *)this + 28) = 0;
  *((_DWORD *)this + 58) = v4;
  *((_WORD *)this + 118) = 0;
  PCColor::PCColor((PCColor *)((char *)this + 240));
}

void sub_1B7BA1808(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy(v3, *(void **)(v1 + 216));
  OZGradient::~OZGradient((OZGradient *)v1, (uint64_t *)off_1F1134C20);
  *(void *)(v1 + 296) = v2;
  *(unsigned char *)(v1 + 312) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 304));
  _Unwind_Resume(a1);
}

void OZMetalGradientRadial::~OZMetalGradientRadial(CGColorSpace **this, void *a2)
{
  int v4 = (CGColorSpace *)*a2;
  *this = (CGColorSpace *)*a2;
  *(CGColorSpace **)((char *)this + *((void *)v4 - 3)) = (CGColorSpace *)a2[5];
  PCCFRef<CGColorSpace *>::~PCCFRef(this + 36);
  std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy((uint64_t)(this + 26), this[27]);

  OZGradient::~OZGradient((OZGradient *)this, a2 + 1);
}

void OZMetalGradientRadial::~OZMetalGradientRadial(CGColorSpace **this)
{
  *(void *)(v1 + 296) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 312) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 304));
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)(v1 + 296) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 312) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 304));

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'OZMetalGradientRadial::~OZMetalGradientRadial(OZMetalGradientRadial *this)
{
  *(void *)(v1 + 296) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 312) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 304);

  PCWeakCount::~PCWeakCount(v2);
}

{
  OZMetalGradientRadial::~OZMetalGradientRadial((CGColorSpace **)((char *)this + *(void *)(*(void *)this - 24)));
}

void OZMetalGradientRadial::getHash(OZMetalGradientRadial *this, CMTime *a2)
{
  uint64_t v2 = (char *)MEMORY[0x1F4188790](this);
  int v4 = v3;
  v7[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  OZGradient::getHash((OZGradient *)v2, v5);
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v7);
  PCHashWriteStream::writeValue(v7, v2[236]);
  PCHashWriteStream::writeValue(v7, v2[237]);
  Hash = PCHashWriteStream::getHash(v7);
  PCHash128::operator+=(v4, (int *)Hash);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v7);
}

void sub_1B7BA1B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t OZMetalGradientRadial::update(OZMetalGradientRadial *this, CMTime *a2)
{
  CMTime v17 = *a2;
  uint64_t v3 = OZGradient::update(this, &v17);
  if (v3)
  {
    if (*((unsigned char *)this + 236))
    {
      uint64_t v4 = *((void *)this + 1);
      unsigned int v5 = ((double)*(int *)(v4 + 12) * 0.25);
      if (v5)
      {
        uint64_t v6 = *(void *)(v4 + 24);
        __asm { FMOV            V0.2S, #1.0 }
        do
        {
          *(void *)uint64_t v6 = _D0;
          *(_DWORD *)(v6 + 8) = 1065353216;
          v6 += 16;
          --v5;
        }
        while (v5);
      }
    }
    if (*((unsigned char *)this + 237))
    {
      CMTime v12 = (float *)(*(void *)(*((void *)this + 1) + 24)
                    + 4 * (4 * ((double)*(int *)(*((void *)this + 1) + 12) * 0.25) - 4));
      UserTag = (CGColorSpace *)HGRenderJob::GetUserTag((HGRenderJob *)this);
      PCColor::getRGBA((PCColor *)((char *)this + 240), v12, v12 + 1, v12 + 2, v12 + 3, UserTag);
    }
    CMTime v15 = (void *)*((void *)this + 27);
    uint64_t v14 = (void *)((char *)this + 216);
    std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy((uint64_t)(v14 - 1), v15);
    *(v14 - 1) = v14;
    *uint64_t v14 = 0;
    v14[1] = 0;
  }
  return v3;
}

void *OZMetalGradientRadial::getFragmentProgramText(OZMetalGradientRadial *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(OZMetalGradientRadial::getFragmentProgramText(void)const::program, "\n        fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]],\n                                          const constant float4* hg_Params [[ buffer(0) ]],\n                                          texture2d< float > hg_Texture0 [[ texture(0) ]])\n        {\n            // Enforce clamp_to_zero lookup with local sampler.\n            //  (see setTransparentBeyondEdge() in GL impl, assumed true in Metal impl)\n            sampler s(coord::normalized,\n                      address::clamp_to_zero,\n                      filter::linear);\n"
      "            \n"
      "            FragmentOut out;\n"
      "            float2 t = frag._texCoord0.xy;\n"
      "            t.x = sqrt(dot(t, t));\n"
      "            t.y = 0.5;\n"
      "            out.color0 = hg_Texture0.sample(s, t) * hg_Params[0];\n"
      "            return out;\n"
      "        }\n"
      "    ");
    __cxa_atexit(MEMORY[0x1E4FBA210], OZMetalGradientRadial::getFragmentProgramText(void)const::program, &dword_1B73F3000);
  }
  return OZMetalGradientRadial::getFragmentProgramText(void)const::program;
}

void sub_1B7BA1D08(_Unwind_Exception *a1)
{
}

HGMetalContext *OZMetalGradientRadial::getTexture@<X0>(OZMetalGradientRadial *this@<X0>, HGMetalContext *a2@<X1>, HGMetalContext **a3@<X8>)
{
  unint64_t v6 = *(void *)(PCICCTransferFunctionLUT::getLUTEnd(a2) + 24);
  unint64_t v22 = v6;
  long long v8 = (uint64_t **)((char *)this + 216);
  uint64_t v7 = (void *)*((void *)this + 27);
  if (!v7) {
    goto LABEL_12;
  }
  unint64_t v9 = (uint64_t **)((char *)this + 216);
  do
  {
    unint64_t v10 = v7[4];
    BOOL v11 = v10 >= v6;
    if (v10 >= v6) {
      CMTime v12 = v7;
    }
    else {
      CMTime v12 = v7 + 1;
    }
    if (v11) {
      unint64_t v9 = (uint64_t **)v7;
    }
    uint64_t v7 = (void *)*v12;
  }
  while (*v12);
  if (v9 != v8 && v6 >= (unint64_t)v9[4])
  {
    uint64_t result = (HGMetalContext *)v9[5];
    *a3 = result;
    if (result)
    {
      uint64_t v21 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (HGMetalContext *)v21();
    }
  }
  else
  {
LABEL_12:
    CMTime v13 = (HGBitmap *)HGRectMake4i(0, 0, *((_DWORD *)this + 58), 1u);
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)(*((void *)this + 1) + 24);
    CMTime v17 = (HGMetalContext *)HGObject::operator new(0x80uLL);
    HGBitmap::HGBitmap(v17, v13, v15, 28, v16);
    *(void *)&v25.CMTime var0 = v15;
    *(void *)&v25.var2 = 0;
    HGMetalTexture::createFromBitmap(a2, v17, v13, v25, 1, a3);
    __n128 v23 = &v22;
    uint64_t v18 = std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v8 - 1, &v22, (uint64_t)&std::piecewise_construct, (uint64_t **)&v23);
    long long v19 = (HGMetalContext *)v18[5];
    uint64_t result = *a3;
    if (v19 != *a3)
    {
      if (v19)
      {
        (*(void (**)(HGMetalContext *))(*(void *)v19 + 24))(v19);
        uint64_t result = *a3;
      }
      v18[5] = (uint64_t)result;
      if (result) {
        uint64_t result = (HGMetalContext *)(*(uint64_t (**)(HGMetalContext *))(*(void *)result + 16))(result);
      }
    }
    if (v17) {
      return (HGMetalContext *)(*(uint64_t (**)(HGMetalContext *))(*(void *)v17 + 24))(v17);
    }
  }
  return result;
}

void sub_1B7BA1F38(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,HGRef<HGMetalTexture>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,HGRef<HGMetalTexture>>,0>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  long long v8 = a1 + 1;
  unint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        unint64_t v6 = *v9;
        long long v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        long long v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    CMTime v12 = (uint64_t *)operator new(0x30uLL);
    v14[1] = v7;
    v12[4] = **a4;
    v12[5] = 0;
    char v15 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,HGRef<HGMetalTexture>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,HGRef<HGMetalTexture>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t OZShaderManager::getInstance(OZShaderManager *this)
{
  if (OZShaderManager::getInstance(void)::once != -1) {
    dispatch_once(&OZShaderManager::getInstance(void)::once, &__block_literal_global_72);
  }
  return OZShaderManager::_instance;
}

void ___ZN15OZShaderManager11getInstanceEv_block_invoke()
{
}

void sub_1B7BA2254(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40C3D8C859);
  _Unwind_Resume(a1);
}

void OZShaderManager::~OZShaderManager(PCSpinLock *this)
{
  *(void *)&this->_lock._os_unfair_lock_opaque = &unk_1F1134D70;
  OZShaderManager::purgeAll(&this->_lock);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&this[4], *(void **)&this[6]._lock._os_unfair_lock_opaque);
  PCSpinLock::~PCSpinLock(this + 2);

  PCSingleton::~PCSingleton((PCSingleton *)this);
}

{
  uint64_t vars8;

  OZShaderManager::~OZShaderManager(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZShaderManager::purgeAll(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 2;
  PCSpinLock::lock(this + 2);
  uint64_t v3 = *(os_unfair_lock_s **)&this[4]._os_unfair_lock_opaque;
  uint64_t v4 = this + 6;
  if (v3 != &this[6])
  {
    do
    {
      uint64_t v5 = *(void *)&v3[10]._os_unfair_lock_opaque;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      unint64_t v6 = *(os_unfair_lock_s **)&v3[2]._os_unfair_lock_opaque;
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          unint64_t v6 = *(os_unfair_lock_s **)&v6->_os_unfair_lock_opaque;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = *(os_unfair_lock_s **)&v3[4]._os_unfair_lock_opaque;
          BOOL v8 = *(void *)&v7->_os_unfair_lock_opaque == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&this[4], *(void **)&this[6]._os_unfair_lock_opaque);
  *(void *)&this[6]._os_unfair_lock_opaque = 0;
  *(void *)&this[8]._os_unfair_lock_opaque = 0;
  *(void *)&this[4]._os_unfair_lock_opaque = v4;
  PCSpinLock::unlock(v2);
}

void OZShaderManager::addShader(os_unfair_lock_s *a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = a1 + 2;
  BOOL v8 = a2;
  PCSpinLock::lock(a1 + 2);
  unint64_t v6 = (uint64_t **)&a1[4];
  if (std::__tree<std::__value_type<char const*,PGShader *>,std::__map_value_compare<char const*,std::__value_type<char const*,PGShader *>,ltstr,true>,std::allocator<std::__value_type<char const*,PGShader *>>>::__count_unique<char const*>((uint64_t)v6, &v8))
  {
    unint64_t v9 = &v8;
    uint64_t v7 = std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6, &v8, (uint64_t)&std::piecewise_construct, (uint64_t **)&v9)[5];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  unint64_t v9 = &v8;
  std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6, &v8, (uint64_t)&std::piecewise_construct, (uint64_t **)&v9)[5] = a3;
  PCSpinLock::unlock(v5);
}

void sub_1B7BA24CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_unfair_lock_s *a9)
{
}

uint64_t OZShaderManager::getShader(os_unfair_lock_s *this, const char *a2)
{
  uint64_t v3 = this + 2;
  uint64_t v7 = a2;
  PCSpinLock::lock(this + 2);
  uint64_t v4 = (uint64_t **)&this[4];
  if (std::__tree<std::__value_type<char const*,PGShader *>,std::__map_value_compare<char const*,std::__value_type<char const*,PGShader *>,ltstr,true>,std::allocator<std::__value_type<char const*,PGShader *>>>::__count_unique<char const*>((uint64_t)v4, &v7))
  {
    BOOL v8 = &v7;
    uint64_t v5 = std::__tree<std::__value_type<char const*,void *>,std::__map_value_compare<char const*,std::__value_type<char const*,void *>,OZRenderParams::LessThanStringFunctor,true>,std::allocator<std::__value_type<char const*,void *>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v4, &v7, (uint64_t)&std::piecewise_construct, (uint64_t **)&v8)[5];
  }
  else
  {
    uint64_t v5 = 0;
  }
  PCSpinLock::unlock(v3);
  return v5;
}

void sub_1B7BA2574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_unfair_lock_s *a9)
{
}

uint64_t std::__tree<std::__value_type<char const*,PGShader *>,std::__map_value_compare<char const*,std::__value_type<char const*,PGShader *>,ltstr,true>,std::allocator<std::__value_type<char const*,PGShader *>>>::__count_unique<char const*>(uint64_t a1, const char **a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *a2;
    uint64_t v4 = 1;
    do
    {
      uint64_t v5 = (const char *)v2[4];
      if ((strcmp(v3, v5) & 0x80000000) == 0)
      {
        if ((strcmp(v5, v3) & 0x80000000) == 0) {
          return v4;
        }
        ++v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

void OZARAnchorElement::OZARAnchorElement(OZARAnchorElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZ3DEngineSceneElement::OZ3DEngineSceneElement(this, a2, a3, a4);
  *(void *)uint64_t v4 = &unk_1F1134DB8;
  *(void *)(v4 + 16) = &unk_1F11356F0;
  *(void *)(v4 + 48) = &unk_1F1135948;
  *(void *)(v4 + 6528) = &unk_1F11359A0;
  *(_OWORD *)(v4 + 24408) = 0u;
}

void OZARAnchorElement::OZARAnchorElement(OZARAnchorElement *this, const OZARAnchorElement *a2, uint64_t a3)
{
  OZ3DEngineSceneElement::OZ3DEngineSceneElement(this, a2, a3);
  *(void *)uint64_t v4 = &unk_1F1134DB8;
  *(void *)(v4 + 16) = &unk_1F11356F0;
  *(void *)(v4 + 48) = &unk_1F1135948;
  *(_OWORD *)(v4 + 24408) = 0u;
  *(void *)(v4 + 6528) = &unk_1F11359A0;
  *(_OWORD *)(v4 + 24408) = *(_OWORD *)((char *)a2 + 24408);
}

uint64_t OZARAnchorElement::getIconName(OZARAnchorElement *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 24))();
}

void OZARAnchorElement::getIconNameBW(PCURL *a1@<X8>)
{
}

uint64_t OZARAnchorElement::getIconID(OZARAnchorElement *this)
{
  return 14;
}

void OZARAnchorElement::description(PCURL *a1@<X8>)
{
}

PCString *OZARAnchorElement::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "3D Scene Element Short Desc");
}

uint64_t non-virtual thunk to'OZARAnchorElement::calcStaticHash(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OZ3DEngineSceneElement::calcStaticHash(a1 - 16, a2, a3);
}

uint64_t OZTransformNode::calcHashForState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 536))(a1, a2, a3, a4, 1);
}

uint64_t OZSceneNode::isSimulationGroup(OZSceneNode *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 952))();
}

uint64_t non-virtual thunk to'OZTransformNode::calcHashForState(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 16) + 536))();
}

void sub_1B7BA2964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B7BA29F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

OZLocking **OZFxPlugLockSentinel::OZFxPlugLockSentinel(OZLocking **a1, uint64_t a2)
{
  uint64_t v3 = *(OZLocking **)a2;
  uint64_t v4 = *(atomic_ullong **)(a2 + 8);
  *a1 = *(OZLocking **)a2;
  a1[1] = (OZLocking *)v4;
  if (v4)
  {
    atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
    uint64_t v3 = *a1;
  }
  OZLocking::acquireObjectReadLock(v3);
  return a1;
}

void sub_1B7BA2A7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void OZFxPlugLockSentinel::~OZFxPlugLockSentinel(OZLocking **this)
{
  OZLocking::releaseObjectReadLock(*this);
  uint64_t v2 = (std::__shared_weak_count *)this[1];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void OZChanRotoshapeRefWithPicker::OZChanRotoshapeRefWithPicker(OZChanRotoshapeRefWithPicker *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  Instance = (OZFactory *)OZChanRotoshapeRefWithPicker_Factory::getInstance(this);
  OZChanSceneNodeRefWithPicker::OZChanSceneNodeRefWithPicker(this, Instance, a2, a3, a4, a5);
}

void sub_1B7BA2B8C(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChanRotoshapeRefWithPicker_Factory::getInstance(OZChanRotoshapeRefWithPicker_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChanRotoshapeRefWithPicker_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChanRotoshapeRefWithPicker_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChanRotoshapeRefWithPicker_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChanRotoshapeRefWithPicker_Factory::_instance;
}

void OZChanRotoshapeRefWithPicker::OZChanRotoshapeRefWithPicker(OZChanRotoshapeRefWithPicker *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
}

void sub_1B7BA2C8C(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

void OZChanRotoshapeRefWithPicker::OZChanRotoshapeRefWithPicker(OZChanRotoshapeRefWithPicker *this, const OZChanRotoshapeRefWithPicker *a2, OZChannelFolder *a3)
{
}

void sub_1B7BA2D20(_Unwind_Exception *a1)
{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(v1);
  _Unwind_Resume(a1);
}

void OZChanRotoshapeRefWithPicker::clone(OZChanRotoshapeRefWithPicker *this)
{
}

void sub_1B7BA2D84(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

void OZChanRotoshapeRefWithPicker::~OZChanRotoshapeRefWithPicker(OZChanRotoshapeRefWithPicker *this)
{
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChanRotoshapeRefWithPicker::~OZChanRotoshapeRefWithPicker(OZChanRotoshapeRefWithPicker *this)
{
}

{
  uint64_t vars8;

  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZChanRotoshapeRefWithPicker *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZChanRotoshapeRefWithPicker_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7BA2E70(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChanRotoshapeRefWithPicker_Factory::OZChanRotoshapeRefWithPicker_Factory(OZChanRotoshapeRefWithPicker_Factory *this)
{
  long long v3 = xmmword_1B8378A10;
  long long v4 = xmmword_1B837FBF0;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1135EA8;
  *((void *)this + 16) = &unk_1F1135F78;
}

void sub_1B7BA2F40(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChanRotoshapeRefWithPicker_Factory::create(OZChanRotoshapeRefWithPicker_Factory *this, const PCString *a2)
{
}

void sub_1B7BA2FB4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

void OZChanRotoshapeRefWithPicker_Factory::createCopy(OZChanRotoshapeRefWithPicker_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7BA306C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

void OZChanRotoshapeRefWithPicker_Factory::createChannelCopy(OZChanRotoshapeRefWithPicker_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7BA3124(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C402B1A394ELL);
  _Unwind_Resume(a1);
}

void OZShapeBehavior::OZShapeBehavior(OZShapeBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZBehavior::OZBehavior(this, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_1F1135FD0;
  *(void *)(v5 + 16) = &unk_1F1136338;
  *(void *)(v5 + 48) = &unk_1F1136590;
  *(void *)(v5 + 336) = &unk_1F11365E8;
  *(void *)(v5 + 344) = 0;
  *(void *)(v5 + 352) = 0;
  *(void *)(v5 + 360) = 0;
  PCMutex::PCMutex((PCMutex *)(v5 + 368));
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 57) = 0;
  *((void *)this + 60) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 59) = 0;
  PCSharedMutex::PCSharedMutex((OZShapeBehavior *)((char *)this + 496));
  *((void *)this + 75) = (char *)this + 600;
  *((void *)this + 76) = (char *)this + 600;
  *((void *)this + 77) = 0;
  PCSharedMutex::PCSharedMutex((OZShapeBehavior *)((char *)this + 624));
  PCWorkingColorVector::PCWorkingColorVector((OZShapeBehavior *)((char *)this + 728));
  *((unsigned char *)this + 464) = 0;
}

void sub_1B7BA3258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  char v15 = v12;
  PCSharedMutex::~PCSharedMutex(v15);
  std::__list_imp<unsigned int>::clear(v14);
  PCSharedMutex::~PCSharedMutex(v13);
  a10 = (void *)((char *)v10 + 472);
  std::vector<std::list<OZShapeBehaviorVertexCacheEntry *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  CMTime v17 = (void *)*((void *)v10 + 55);
  if (v17)
  {
    *((void *)v10 + 56) = v17;
    operator delete(v17);
  }
  PCMutex::~PCMutex(v11);
  uint64_t v18 = (void *)*((void *)v10 + 43);
  if (v18) {
    operator delete(v18);
  }
  OZBehavior::~OZBehavior(v10);
  _Unwind_Resume(a1);
}

void OZShapeBehavior::OZShapeBehavior(OZShapeBehavior *this, OZShapeBehavior *a2, char a3)
{
  OZBehavior::OZBehavior(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1135FD0;
  *(void *)(v5 + 16) = &unk_1F1136338;
  *(void *)(v5 + 48) = &unk_1F1136590;
  *(void *)(v5 + 336) = &unk_1F11365E8;
  *(void *)(v5 + 344) = 0;
  unint64_t v6 = (void **)(v5 + 344);
  *(void *)(v5 + 352) = 0;
  *(void *)(v5 + 360) = 0;
  PCMutex::PCMutex((PCMutex *)(v5 + 368));
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 57) = 0;
  *((void *)this + 60) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 59) = 0;
  PCSharedMutex::PCSharedMutex((OZShapeBehavior *)((char *)this + 496));
  *((void *)this + 75) = (char *)this + 600;
  *((void *)this + 76) = (char *)this + 600;
  *((void *)this + 77) = 0;
  PCSharedMutex::PCSharedMutex((OZShapeBehavior *)((char *)this + 624));
  PCWorkingColorVector::PCWorkingColorVector((OZShapeBehavior *)((char *)this + 728));
  std::vector<BOOL>::operator=(v6, (uint64_t)a2 + 344);
  *((unsigned char *)this + 464) = 0;
  (*(void (**)(OZShapeBehavior *))(*(void *)this + 784))(this);
}

void sub_1B7BA343C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::__list_imp<unsigned int>::clear(v14);
  PCSharedMutex::~PCSharedMutex(v13);
  a10 = (void **)(v10 + 472);
  std::vector<std::list<OZShapeBehaviorVertexCacheEntry *>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(void **)(v10 + 440);
  if (v16)
  {
    *(void *)(v10 + 448) = v16;
    operator delete(v16);
  }
  PCMutex::~PCMutex(v12);
  if (*v11) {
    operator delete(*v11);
  }
  OZBehavior::~OZBehavior((OZBehavior *)v10);
  _Unwind_Resume(a1);
}

void OZShapeBehavior::~OZShapeBehavior(OZShapeBehavior *this)
{
  *(void *)this = &unk_1F1135FD0;
  *((void *)this + 2) = &unk_1F1136338;
  *((void *)this + 6) = &unk_1F1136590;
  *((void *)this + 42) = &unk_1F11365E8;
  if (*((unsigned char *)this + 464))
  {
    uint64_t Scene = OZBehavior::getScene(this);
    if (Scene)
    {
      OZDocument::removeCPPObserver(*(void *)(Scene + 1584));
      *((unsigned char *)this + 464) = 0;
    }
  }
  (*(void (**)(OZShapeBehavior *))(*(void *)this + 784))(this);
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 624));
  std::__list_imp<unsigned int>::clear((void *)this + 75);
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 496));
  uint64_t v5 = (void **)((char *)this + 472);
  std::vector<std::list<OZShapeBehaviorVertexCacheEntry *>>::__destroy_vector::operator()[abi:ne180100](&v5);
  long long v3 = (void *)*((void *)this + 55);
  if (v3)
  {
    *((void *)this + 56) = v3;
    operator delete(v3);
  }
  PCMutex::~PCMutex((PCMutex *)((char *)this + 368));
  long long v4 = (void *)*((void *)this + 43);
  if (v4) {
    operator delete(v4);
  }
  OZBehavior::~OZBehavior(this);
}

{
  uint64_t vars8;

  OZShapeBehavior::~OZShapeBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZShapeBehavior::~OZShapeBehavior(OZShapeBehavior *this)
{
}

{
  OZShapeBehavior::~OZShapeBehavior((OZShapeBehavior *)((char *)this - 48));
}

{
  OZShapeBehavior::~OZShapeBehavior((OZShapeBehavior *)((char *)this - 336));
}

{
  uint64_t vars8;

  OZShapeBehavior::~OZShapeBehavior((OZShapeBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZShapeBehavior::~OZShapeBehavior((OZShapeBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZShapeBehavior::~OZShapeBehavior((OZShapeBehavior *)((char *)this - 336));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZShapeBehavior::operator=(void **a1, const void *a2)
{
  OZBehavior::operator=((uint64_t)a1, (uint64_t)a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  std::vector<BOOL>::operator=(a1 + 43, (uint64_t)v4 + 344);
  uint64_t v5 = (uint64_t (*)(void **))*((void *)*a1 + 98);

  return v5(a1);
}

uint64_t OZShapeBehavior::didAddToNode(OZShapeBehavior *this, OZSceneNode *a2)
{
  *((void *)this + 41) = a2;
  (*(void (**)(OZShapeBehavior *))(*(void *)this + 696))(this);
  uint64_t v3 = *(void *)this;
  if (*((void *)this + 44)) {
    (*(void (**)(OZShapeBehavior *))(v3 + 736))(this);
  }
  else {
    (*(void (**)(OZShapeBehavior *))(v3 + 728))(this);
  }
  Rotoshape = (OZRotoshape *)OZShapeBehavior::getRotoshape(this);
  OZRotoshape::setDirty(Rotoshape, 1, 1);
  if (!*((unsigned char *)this + 464) && (*(uint64_t (**)(OZShapeBehavior *))(*(void *)this + 336))(this))
  {
    uint64_t v5 = (*(uint64_t (**)(OZShapeBehavior *))(*(void *)this + 336))(this);
    OZDocument::addCPPObserver(*(void *)(v5 + 1584), (uint64_t)this + 336, 1000);
    *((unsigned char *)this + 464) = 1;
  }
  unint64_t v6 = *(uint64_t (**)(OZShapeBehavior *))(*(void *)this + 784);

  return v6(this);
}

void *OZShapeBehavior::getRotoshape(OZShapeBehavior *this)
{
  uint64_t result = (void *)(*(uint64_t (**)(OZShapeBehavior *))(*(void *)this + 320))(this);
  if (result)
  {
  }
  return result;
}

uint64_t *OZShapeBehavior::didAddSceneNodeToScene(OZShapeBehavior *this, OZScene *a2)
{
  uint64_t result = (uint64_t *)(*(uint64_t (**)(OZShapeBehavior *))(*(void *)this + 744))(this);
  if (!*((unsigned char *)this + 464))
  {
    uint64_t result = OZDocument::addCPPObserver(*((void *)a2 + 198), (uint64_t)this + 336, 1000);
    *((unsigned char *)this + 464) = 1;
  }
  return result;
}

void *OZShapeBehavior::enable(OZShapeBehavior *this)
{
  OZObjectManipulator::enable((OZShapeBehavior *)((char *)this + 16));
  uint64_t result = OZShapeBehavior::getRotoshape(this);
  if (result)
  {
    Rotoshape = (OZRotoshape *)OZShapeBehavior::getRotoshape(this);
    return (void *)OZRotoshape::setDirty(Rotoshape, 1, 1);
  }
  return result;
}

void *non-virtual thunk to'OZShapeBehavior::enable(OZShapeBehavior *this)
{
  return OZShapeBehavior::enable((OZShapeBehavior *)((char *)this - 16));
}

void *OZShapeBehavior::disable(OZShapeBehavior *this)
{
  OZObjectManipulator::disable((OZShapeBehavior *)((char *)this + 16));
  uint64_t result = OZShapeBehavior::getRotoshape(this);
  if (result)
  {
    Rotoshape = (OZRotoshape *)OZShapeBehavior::getRotoshape(this);
    return (void *)OZRotoshape::setDirty(Rotoshape, 1, 1);
  }
  return result;
}

void *non-virtual thunk to'OZShapeBehavior::disable(OZShapeBehavior *this)
{
  return OZShapeBehavior::disable((OZShapeBehavior *)((char *)this - 16));
}

uint64_t OZShapeBehavior::rebuildCurveNodes(OZShapeBehavior *this)
{
  Rotoshape = (char *)OZShapeBehavior::getRotoshape(this);
  OZShapeBehavior::removeNodesFromChan(this, (OZChannelBase *)(Rotoshape + 19336));
  uint64_t v3 = *(uint64_t (**)(OZShapeBehavior *))(*(void *)this + 696);

  return v3(this);
}

void OZShapeBehavior::removeNodesFromChan(OZShapeBehavior *this, OZChannelBase *a2)
{
  if ((a2->var7 & 0x1000) != 0)
  {
    if (v4)
    {
      for (uint64_t i = *v4; i != v4[1]; ++i)
      {
        unint64_t v6 = *i;
        OZShapeBehavior::removeNodesFromChan(this, v6);
      }
    }
  }
  else
  {
    OZShapeBehavior::removeNodesFromSingleChan(this, v3);
  }
}

void *OZShapeBehavior::setupCurveNodes(OZShapeBehavior *this)
{
  uint64_t result = OZShapeBehavior::getRotoshape(this);
  if (result)
  {
    uint64_t result = OZShapeBehavior::getRotoshape(this);
    uint64_t v3 = result[2431];
    if (v3)
    {
      if (((*(void *)(v3 + 8) - *(void *)v3) & 0x7FFFFFFF8) != 0
        && (int)((*(void *)(v3 + 8) - *(void *)v3) >> 3) > 0)
      {
        long long v4 = **(OZChannelFolder ***)v3;
        if (v4) {
        Descendant = (const void *)OZChannelFolder::getDescendant(v4, 2);
        }
        if (Descendant) {
        operator new();
        }
      }
    }
  }
  return result;
}

void sub_1B7BA3F88(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C408AB2CE21);
  _Unwind_Resume(a1);
}

void OZShapeBehavior::setupCurveNodesForVertex(OZShapeBehavior *this, OZChannelFolder *a2, OZChannelVertexFolder *a3)
{
  Descendant = (const void *)OZChannelFolder::getDescendant(a2, 2);
  if (Descendant) {
  operator new();
  }
}

void sub_1B7BA4358(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C408AB2CE21);
  _Unwind_Resume(a1);
}

void OZShapeBehavior::updateAffectedIDs(OZShapeBehavior *this)
{
  char v2 = (void *)*((void *)OZShapeBehavior::getRotoshape(this) + 2431);
  if (v2)
  {
    uint64_t v3 = (v2[1] - *v2) >> 3;
    if ((int)v3 >= 0) {
      int v4 = (v2[1] - *v2) >> 3;
    }
    else {
      int v4 = v3 + 1;
    }
    *((void *)this + 44) = 0;
    if ((int)v3 >= 2)
    {
      int v5 = v4 >> 1;
      unint64_t v6 = (char *)this + 344;
      do
      {
        char v7 = 1;
        std::vector<BOOL>::push_back((uint64_t)v6, &v7);
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    *((void *)this + 44) = 0;
  }
}

void std::vector<BOOL>::push_back(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  BOOL v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

void OZShapeBehavior::copyAffectedIDs(void **this)
{
  __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  char v2 = (void *)*((void *)OZShapeBehavior::getRotoshape((OZShapeBehavior *)this) + 2431);
  if (v2)
  {
    uint64_t v3 = (v2[1] - *v2) >> 3;
    uint64_t v8 = 0;
    if ((int)v3 >= 2)
    {
      unint64_t v4 = 0;
      uint64_t v5 = ((int)v3 >> 1);
      do
      {
        if ((uint64_t)v4 >= *((int *)this + 88)) {
          char v6 = 1;
        }
        else {
          char v6 = (*(void *)((char *)this[43] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1;
        }
        std::vector<BOOL>::push_back((uint64_t)&__p, &v6);
        ++v4;
      }
      while (v5 != v4);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  this[44] = 0;
  std::vector<BOOL>::operator=(this + 43, (uint64_t)&__p);
  if (__p) {
    operator delete(__p);
  }
}

void sub_1B7BA45A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZShapeBehavior::restoreAffectedIDs(void **this)
{
  __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  char v2 = (void *)*((void *)OZShapeBehavior::getRotoshape((OZShapeBehavior *)this) + 2431);
  if (v2)
  {
    uint64_t v3 = (v2[1] - *v2) >> 3;
    uint64_t v8 = 0;
    if ((int)v3 >= 2)
    {
      unint64_t v4 = 0;
      uint64_t v5 = ((int)v3 >> 1);
      do
      {
        if ((uint64_t)v4 >= *((int *)this + 88)) {
          char v6 = 0;
        }
        else {
          char v6 = (*(void *)((char *)this[43] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1;
        }
        std::vector<BOOL>::push_back((uint64_t)&__p, &v6);
        ++v4;
      }
      while (v5 != v4);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  this[44] = 0;
  std::vector<BOOL>::operator=(this + 43, (uint64_t)&__p);
  if (__p) {
    operator delete(__p);
  }
}

void sub_1B7BA46AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZShapeBehavior::didAddVertex(OZShapeBehavior *this, int a2)
{
  uint64_t v3 = (unint64_t *)((char *)this + 344);
  if (*((_DWORD *)this + 88) >= a2)
  {
    unint64_t v5 = *v3;
    if (a2)
    {
      if (a2 < 0) {
        uint64_t v6 = -(uint64_t)((63 - a2) >> 6);
      }
      else {
        uint64_t v6 = a2 >> 6;
      }
      v5 += 8 * v6;
      unsigned int v7 = a2 & 0x3F;
      char v10 = 1;
    }
    else
    {
      char v10 = 1;
      unsigned int v7 = 0;
    }
    std::vector<BOOL>::insert((uint64_t)v3, v5, v7, &v10, (uint64_t)v9);
  }
  else
  {
    v9[0] = 1;
    std::vector<BOOL>::push_back((uint64_t)v3, v9);
  }
  return (*(uint64_t (**)(OZShapeBehavior *))(*(void *)this + 784))(this);
}

void std::vector<BOOL>::insert(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  unint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v10 >= v11 << 6)
  {
    double v35 = 0;
    long long v36 = 0uLL;
    if ((uint64_t)(v10 + 1) < 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v16 = v11 << 6;
    unint64_t v17 = v11 << 7;
    unint64_t v18 = (v10 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v17 > v18) {
      unint64_t v18 = v17;
    }
    if (v16 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v19 = v18;
    }
    else {
      unint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve(&v35, v19);
    uint64_t v20 = *(unint64_t **)a1;
    *(void *)&long long v36 = *(void *)(a1 + 8) + 1;
    double v37 = v35;
    int v38 = 0;
    std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v20, 0, a2, a3, (uint64_t)&v37, (uint64_t)&v33);
    uint64_t v21 = v33;
    *(void *)a5 = v33;
    char v22 = v34;
    *(_DWORD *)(a5 + 8) = v34;
    unint64_t v23 = *(void *)(a1 + 8);
    BOOL v24 = (void *)(*(void *)a1 + 8 * (v23 >> 6));
    unsigned int v25 = v23 & 0x3F;
    double v37 = &v35[8 * ((unint64_t)v36 >> 6)];
    int v38 = v36 & 0x3F;
    if (v38 == v25) {
      std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v24, v25, (uint64_t)&v37, (uint64_t)&v33);
    }
    else {
      std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v24, v25, (uint64_t)&v37, (uint64_t)&v33);
    }
    CMTime v28 = *(char **)a1;
    *(void *)a1 = v35;
    double v35 = v28;
    long long v29 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v36;
    long long v36 = v29;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    CMTime v12 = *(unint64_t **)a1;
    CMTime v13 = (void *)(*(void *)a1 + 8 * (v10 >> 6));
    uint64_t v14 = *(void *)(a1 + 8) & 0x3FLL;
    unsigned int v15 = v10 & 0x3F;
    *(void *)(a1 + 8) = v10 + 1;
    double v35 = (char *)&v12[(v10 + 1) >> 6];
    if ((((_BYTE)v10 + 1) & 0x3F) == v14)
    {
      LODWORD(v36) = v14;
      std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v13, v15, (uint64_t)&v35, (uint64_t)&v37);
    }
    else
    {
      LODWORD(v36) = ((_BYTE)v10 + 1) & 0x3F;
      std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v13, v15, (uint64_t)&v35, (uint64_t)&v37);
    }
    uint64_t v26 = 8 * (a2 - *(void *)a1) + a3;
    if (v26 < 0)
    {
      uint64_t v30 = v26 - 63;
      if (v26 - 63 < 0) {
        uint64_t v30 = 8 * (a2 - *(void *)a1) + a3;
      }
      uint64_t v27 = v30 >> 6;
    }
    else
    {
      uint64_t v27 = (unint64_t)v26 >> 6;
    }
    uint64_t v21 = (uint64_t *)(*(void *)a1 + 8 * v27);
    char v22 = v26 & 0x3F;
    *(void *)a5 = v21;
    *(_DWORD *)(a5 + 8) = v26 & 0x3F;
  }
  uint64_t v31 = 1 << v22;
  if (*a4) {
    uint64_t v32 = *v21 | v31;
  }
  else {
    uint64_t v32 = *v21 & ~v31;
  }
  uint64_t *v21 = v32;
}

void sub_1B7BA49F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZShapeBehavior::willRemoveVertex(OZShapeBehavior *this, int a2)
{
  unint64_t v3 = *((void *)this + 44);
  if ((int)v3 >= a2)
  {
    unint64_t v4 = (unint64_t *)*((void *)this + 43);
    if (a2)
    {
      if (a2 < 0) {
        uint64_t v5 = -(uint64_t)((63 - a2) >> 6);
      }
      else {
        uint64_t v5 = a2 >> 6;
      }
      uint64_t v6 = &v4[v5];
      uint64_t v7 = a2 & 0x3F;
      uint64_t v8 = v7 | (v5 << 6);
      uint64_t v9 = v8 - 63;
      if (v8 < 63) {
        uint64_t v9 = v7 | (v5 << 6);
      }
      uint64_t v10 = v9 >> 6;
      uint64_t v11 = v5 & 0x3FFFFFFFFFFFFFFLL;
      if (v8 < 0) {
        uint64_t v11 = v10;
      }
      unsigned int v12 = (v7 + 1) & 0x3F;
      uint64_t v13 = (uint64_t)&v4[v3 >> 6];
      unsigned int v14 = v3 & 0x3F;
      if (v7 == v12)
      {
        unint64_t v17 = &v4[v11];
        int v18 = v7;
        std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>((unint64_t *)((char *)v6 + (((unint64_t)(v7 + 1) >> 3) & 8)), v12, v13, v14, (uint64_t)&v17, (uint64_t)v16);
LABEL_15:
        unint64_t v3 = *((void *)this + 44);
        goto LABEL_16;
      }
      unint64_t v17 = &v4[v11];
      int v18 = v7;
      unint64_t v4 = (unint64_t *)((char *)v6 + (((unint64_t)(v7 + 1) >> 3) & 8));
    }
    else
    {
      uint64_t v13 = (uint64_t)&v4[v3 >> 6];
      unsigned int v14 = v3 & 0x3F;
      unint64_t v17 = (unint64_t *)*((void *)this + 43);
      int v18 = 0;
      unsigned int v12 = 1;
    }
    std::__copy_unaligned[abi:ne180100]<std::vector<BOOL>,true>(v4, v12, v13, v14, (uint64_t)&v17, (uint64_t)v16);
    goto LABEL_15;
  }
LABEL_16:
  *((void *)this + 44) = v3 - 1;
  return (*(uint64_t (**)(OZShapeBehavior *))(*(void *)this + 784))(this);
}

uint64_t OZShapeBehavior::resetAffectedVertices(OZShapeBehavior *this)
{
  if (*((void *)this + 44))
  {
    unint64_t v1 = 0;
    uint64_t v2 = *((void *)this + 43);
    unsigned int v3 = 1;
    do
    {
      *(void *)(v2 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v1);
      unint64_t v1 = v3;
    }
    while (*((void *)this + 44) > (unint64_t)v3++);
  }
  Rotoshape = (OZRotoshape *)OZShapeBehavior::getRotoshape(this);

  return OZRotoshape::setDirty(Rotoshape, 1, 1);
}

uint64_t OZShapeBehavior::addAllAffectedVertices(OZShapeBehavior *this)
{
  if (*((void *)this + 44))
  {
    unint64_t v1 = 0;
    uint64_t v2 = *((void *)this + 43);
    unsigned int v3 = 1;
    do
    {
      *(void *)(v2 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1;
      unint64_t v1 = v3;
    }
    while (*((void *)this + 44) > (unint64_t)v3++);
  }
  Rotoshape = (OZRotoshape *)OZShapeBehavior::getRotoshape(this);

  return OZRotoshape::setDirty(Rotoshape, 1, 1);
}

BOOL OZShapeBehavior::canAddToSceneNode(OZShapeBehavior *this, OZSceneNode *lpsrc)
{
  return lpsrc
}

uint64_t OZShapeBehavior::didInsert(OZShapeBehavior *this, OZSceneNode *a2, OZBehavior *a3)
{
  (*(void (**)(OZShapeBehavior *, OZSceneNode *))(*(void *)this + 96))(this, a2);
  uint64_t v5 = *(uint64_t (**)(OZShapeBehavior *, OZBehavior *))(*(void *)this + 112);

  return v5(this, a3);
}

uint64_t OZShapeBehavior::willRemove(OZShapeBehavior *this)
{
  if (*((unsigned char *)this + 464) && (*(uint64_t (**)(OZShapeBehavior *))(*(void *)this + 336))(this))
  {
    uint64_t v2 = (*(uint64_t (**)(OZShapeBehavior *))(*(void *)this + 336))(this);
    OZDocument::removeCPPObserver(*(void *)(v2 + 1584));
    *((unsigned char *)this + 464) = 0;
  }
  Rotoshape = (char *)OZShapeBehavior::getRotoshape(this);
  OZShapeBehavior::removeNodesFromChan(this, (OZChannelBase *)(Rotoshape + 19336));
  unint64_t v4 = (OZRotoshape *)OZShapeBehavior::getRotoshape(this);
  uint64_t result = OZRotoshape::setDirty(v4, 1, 1);
  *((void *)this + 41) = 0;
  return result;
}

uint64_t OZShapeBehavior::willRemoveSceneNodeFromScene(uint64_t this, OZScene *a2)
{
  if (*(unsigned char *)(this + 464))
  {
    uint64_t v2 = this;
    this = (*(uint64_t (**)(uint64_t, OZScene *))(*(void *)this + 336))(this, a2);
    if (this)
    {
      this = OZDocument::removeCPPObserver(*(void *)(this + 1584));
      *(unsigned char *)(v2 + 464) = 0;
    }
  }
  return this;
}

void OZShapeBehavior::removeNodesFromSingleChan(OZShapeBehavior *this, OZChannel *a2)
{
  OZChannel::enumerateCurveProcessingNodes(a2, &__p);
  unsigned int v12 = &v12;
  uint64_t v13 = &v12;
  uint64_t v14 = 0;
  unint64_t v4 = (const void **)__p;
  uint64_t v5 = v16;
  if (__p != v16)
  {
    uint64_t v6 = 0;
    uint64_t v7 = &v12;
    do
    {
      if (*v4)
      {
        if (v8)
        {
          uint64_t v9 = v8;
          if (v8[1] == this)
          {
            uint64_t v10 = operator new(0x18uLL);
            v10[1] = &v12;
            v10[2] = v9;
            *uint64_t v10 = v7;
            v7[1] = v10;
            ++v6;
            uint64_t v7 = v10;
            unsigned int v12 = v10;
            uint64_t v14 = v6;
          }
        }
      }
      ++v4;
    }
    while (v4 != v5);
    if (&v12 != v13)
    {
      uint64_t v11 = &v12;
      do
      {
        OZChannel::deleteCurveProcessingNode(a2, *(void **)(*v11 + 16));
        uint64_t v11 = (void *)*v11;
      }
      while (v11 != v13);
    }
  }
  std::__list_imp<unsigned int>::clear(&v12);
  if (__p)
  {
    unint64_t v16 = (const void **)__p;
    operator delete(__p);
  }
}

void sub_1B7BA4FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void OZShapeBehavior::reorderCurveNode(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = (OZChannel *)a2[2];
  OZChannel::removeCurveProcessingNode(v7, a2);
  OZChannel::enumerateCurveProcessingNodes(v7, &__p);
  uint64_t v8 = (const void **)__p;
  uint64_t v9 = v17;
  if (__p == v17)
  {
LABEL_13:
    OZChannel::appendCurveProcessingNode(v7, a2);
  }
  else
  {
    uint64_t v10 = *a4;
    if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(*(void *)(*(void *)(*a4 + 16) + 8)+ 8), (int32x4_t)xmmword_1B837FC70)))))
    {
      uint64_t v11 = 0;
      while (1)
      {
        unsigned int v12 = v11;
        uint64_t v11 = (void *)*v8;
        if (*v8)
        {
          if (v13)
          {
            if (v10 == a3) {
              break;
            }
            uint64_t v14 = v10;
            while (*(void *)(v14 + 16) != v13[1])
            {
              uint64_t v14 = *(void *)(v14 + 8);
              if (v14 == a3) {
                goto LABEL_15;
              }
            }
            if (v14 == a3) {
              break;
            }
          }
        }
        if (++v8 == v9) {
          goto LABEL_13;
        }
      }
LABEL_15:
      OZChannel::insertCurveProcessingNode(v7, a2, v12);
    }
    else
    {
      unsigned int v15 = *(void **)__p;
      if (*(void *)__p
      {
        unsigned int v15 = 0;
      }
      OZChannel::insertCurveProcessingNode(v7, a2, v15);
    }
  }
  if (__p)
  {
    unint64_t v17 = (const void **)__p;
    operator delete(__p);
  }
}

void sub_1B7BA51C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZShapeBehavior::reorderSingleChan(uint64_t a1, OZChannel *this, uint64_t a3, uint64_t *a4)
{
  OZChannel::enumerateCurveProcessingNodes(this, &__p);
  uint64_t v14 = &v14;
  unsigned int v15 = &v14;
  uint64_t v16 = 0;
  uint64_t v7 = (void **)__p;
  uint64_t v8 = v18;
  if (__p != v18)
  {
    uint64_t v9 = 0;
    uint64_t v10 = &v14;
    do
    {
      uint64_t v11 = *v7;
      if (*v7)
      {
        if (v11)
        {
          unsigned int v12 = v11;
          if (v11[1] == a1)
          {
            uint64_t v11 = operator new(0x18uLL);
            v11[1] = &v14;
            v11[2] = v12;
            void *v11 = v10;
            v10[1] = v11;
            ++v9;
            uint64_t v10 = v11;
            uint64_t v14 = v11;
            uint64_t v16 = v9;
          }
        }
      }
      ++v7;
    }
    while (v7 != v8);
    if (&v14 != v15)
    {
      uint64_t v13 = &v14;
      do
      {
        OZShapeBehavior::reorderCurveNode((uint64_t)v11, *(void **)(*v13 + 16), a3, a4);
        uint64_t v13 = (void *)*v13;
      }
      while (v13 != v15);
    }
  }
  std::__list_imp<unsigned int>::clear(&v14);
  if (__p)
  {
    int v18 = (void **)__p;
    operator delete(__p);
  }
}

void sub_1B7BA5350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void OZShapeBehavior::reorderChan(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  if ((a2[7] & 0x1000) != 0)
  {
    if (v8)
    {
      for (uint64_t i = *v8; i != v8[1]; ++i)
      {
        uint64_t v10 = *i;
        OZShapeBehavior::reorderChan(a1, v10, a3, a4);
      }
    }
  }
  else
  {
    OZShapeBehavior::reorderSingleChan(a1, v7, a3, a4);
  }
}

void OZShapeBehavior::didReorder(OZShapeBehavior *this, OZBehavior *a2)
{
  if (OZShapeBehavior::getRotoshape(this))
  {
    Rotoshape = (char *)OZShapeBehavior::getRotoshape(this);
    unint64_t v4 = Rotoshape + 200;
    if (!Rotoshape) {
      unint64_t v4 = 0;
    }
    uint64_t v5 = (uint64_t)(v4 + 1000);
    uint64_t v6 = *((void *)v4 + 126);
    uint64_t v7 = v5;
    if (v6 != v5)
    {
      uint64_t v7 = v6;
      while (*(OZShapeBehavior **)(v7 + 16) != this)
      {
        uint64_t v7 = *(void *)(v7 + 8);
        if (v7 == v5)
        {
          uint64_t v7 = v5;
          break;
        }
      }
    }
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t v8 = OZShapeBehavior::getRotoshape(this);
    OZShapeBehavior::reorderChan((uint64_t)this, v8 + 2417, v5, &v9);
  }
}

void OZShapeBehavior::willDeleteObject(OZShapeBehavior *this, OZObjectManipulator *a2)
{
  Rotoshape = (char *)OZShapeBehavior::getRotoshape(this);
  uint64_t v5 = (OZObjectManipulator *)(Rotoshape + 216);
  if (!Rotoshape) {
    uint64_t v5 = 0;
  }
  if (v5 == a2)
  {
    uint64_t v6 = (OZChannelBase *)((char *)OZShapeBehavior::getRotoshape(this) + 19336);
    OZShapeBehavior::removeNodesFromChan(this, v6);
  }
}

uint64_t OZShapeBehavior::isVertexAffectedByBehavior(OZShapeBehavior *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 88) <= (signed int)a2) {
    return 0;
  }
  else {
    return (*(void *)(*((void *)this + 43) + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1;
  }
}

uint64_t OZShapeBehavior::addAffectedVertex(uint64_t this, unsigned int a2)
{
  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(this + 352) > (signed int)a2) {
      *(void *)(*(void *)(this + 344) + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) |= 1 << a2;
    }
    Rotoshape = (OZRotoshape *)OZShapeBehavior::getRotoshape((OZShapeBehavior *)this);
    return OZRotoshape::setDirty(Rotoshape, 1, 1);
  }
  return this;
}

uint64_t OZShapeBehavior::removeAffectedVertex(uint64_t this, unsigned int a2)
{
  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(this + 352) > (signed int)a2) {
      *(void *)(*(void *)(this + 344) + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) &= ~(1 << a2);
    }
    Rotoshape = (OZRotoshape *)OZShapeBehavior::getRotoshape((OZShapeBehavior *)this);
    return OZRotoshape::setDirty(Rotoshape, 1, 1);
  }
  return this;
}

void OZShapeBehavior::didSetStartPoint(OZShapeBehavior *this, int a2)
{
  unint64_t v4 = (char *)this + 344;
  std::vector<BOOL>::vector(&__p, (uint64_t)this + 344);
  *((void *)this + 44) = 0;
  if (a2 < 0) {
    uint64_t v5 = -(uint64_t)((63 - a2) >> 6);
  }
  else {
    uint64_t v5 = a2 >> 6;
  }
  uint64_t v6 = (char *)__p + 8 * v5;
  uint64_t v7 = a2 & 0x3F;
  unint64_t v8 = *((void *)this + 43);
  uint64_t v16 = v6;
  int v17 = v7;
  uint64_t v14 = (char *)__p + 8 * (v13 >> 6);
  int v15 = v13 & 0x3F;
  std::vector<BOOL>::__insert_with_size[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)v4, v8, 0, (uint64_t)&v16, (uint64_t)&v14, (v13 & 0x3F) - v7 + 8 * (v14 - v6), (uint64_t)v11);
  unint64_t v9 = *((void *)this + 44);
  unint64_t v10 = *((void *)this + 43) + 8 * (v9 >> 6);
  uint64_t v16 = __p;
  int v17 = 0;
  uint64_t v14 = v6;
  int v15 = v7;
  std::vector<BOOL>::__insert_with_size[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)v4, v10, v9 & 0x3F, (uint64_t)&v16, (uint64_t)&v14, v7 + 8 * (v6 - (unsigned char *)__p), (uint64_t)v11);
  if (__p) {
    operator delete(__p);
  }
}

void sub_1B7BA578C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZShapeBehavior::writeBody(OZShapeBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZShapeBehaviorScope);
  if (*((void *)this + 44))
  {
    int v10 = 0;
    uint64_t v11 = (void *)*((void *)this + 43);
    do
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 801);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, (*v11 >> v10) & 1);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      v11 += v10 == 63;
      if (v10 == 63) {
        int v10 = 0;
      }
      else {
        ++v10;
      }
    }
    while (v11 != (void *)(*((void *)this + 43) + 8 * (*((void *)this + 44) >> 6))
         || v10 != (*((_DWORD *)this + 88) & 0x3F));
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);

  return OZBehavior::writeBody(this, a2, a3, a4, a5);
}

uint64_t non-virtual thunk to'OZShapeBehavior::writeBody(OZShapeBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZShapeBehavior::writeBody((OZShapeBehavior *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZShapeBehavior::parseBegin(OZShapeBehavior *this, PCSerializerReadStream *a2)
{
  *((void *)this + 44) = 0;
  return 1;
}

uint64_t non-virtual thunk to'OZShapeBehavior::parseBegin(OZShapeBehavior *this, PCSerializerReadStream *a2)
{
  *((void *)this + 38) = 0;
  return 1;
}

uint64_t OZShapeBehavior::parseEnd(OZShapeBehavior *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZShapeBehavior::parseEnd(OZShapeBehavior *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZShapeBehavior::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZBehavior::parseElement(this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 801)
  {
    char v6 = 0;
    (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 72))(a3, &v6);
    std::vector<BOOL>::push_back((uint64_t)(this + 43), &v6);
  }
  return 1;
}

uint64_t non-virtual thunk to'OZShapeBehavior::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

uint64_t OZShapeBehavior::getCurveNodeForChannel(OZShapeBehavior *this, OZChannel *a2)
{
  OZChannel::enumerateCurveProcessingNodes(a2, &v10);
  unsigned int v3 = v10;
  unint64_t v4 = v11;
  if (v10 != v11)
  {
    uint64_t v5 = 0;
    while (1)
    {
      char v6 = *(const void **)&v3[v5];
      if (v6)
      {
        if (v7)
        {
          if (v7[1] == this) {
            break;
          }
        }
      }
      v5 += 8;
      if (&v3[v5] == v4) {
        goto LABEL_7;
      }
    }
    if (v5)
    {
      uint64_t v8 = *(void *)&v3[v5 - 8];
      if (!v3) {
        return v8;
      }
      goto LABEL_8;
    }
  }
LABEL_7:
  uint64_t v8 = 0;
  if (v3) {
LABEL_8:
  }
    operator delete(v3);
  return v8;
}

uint64_t OZShapeBehavior::createGlobalCacheEntry(OZShapeBehavior *this, int a2, CMTime *a3)
{
  return 0;
}

uint64_t OZShapeBehavior::getGlobalCacheEntry(OZShapeBehavior *this, uint64_t a2, CMTime *a3)
{
  char v6 = (std::mutex *)((char *)this + 624);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 624));
  uint64_t v7 = (char *)this + 600;
  for (uint64_t i = *((void *)this + 76); ; uint64_t i = *(void *)(i + 8))
  {
    if ((char *)i == v7)
    {
      int v11 = 1;
      goto LABEL_7;
    }
    uint64_t v9 = *(void *)(i + 16);
    long long v10 = *(_OWORD *)(v9 + 8);
    time1.CMTimeEpoch epoch = *(void *)(v9 + 24);
    *(_OWORD *)&time1.value = v10;
    CMTime time2 = *a3;
    if (!CMTimeCompare(&time1, &time2)) {
      break;
    }
  }
  uint64_t i = (*(uint64_t (**)(OZShapeBehavior *, void))(*(void *)this + 808))(this, *(void *)(i + 16));
  int v11 = 0;
LABEL_7:
  PCSharedMutex::unlock_shared(v6);
  if (v11)
  {
    long long v21 = *(_OWORD *)&a3->value;
    CMTimeEpoch epoch = a3->epoch;
    uint64_t v12 = (*(uint64_t (**)(OZShapeBehavior *, uint64_t, long long *))(*(void *)this + 800))(this, a2, &v21);
    if (v12)
    {
      PCSharedMutex::lock(v6);
      unint64_t v13 = operator new(0x18uLL);
      uint64_t v14 = (void *)*((void *)this + 76);
      void *v13 = v7;
      v13[1] = v14;
      v13[2] = v12;
      *uint64_t v14 = v13;
      *((void *)this + 76) = v13;
      uint64_t v15 = *((void *)this + 77);
      *((void *)this + 77) = v15 + 1;
      if ((unint64_t)(v15 + 1) >= 6)
      {
        uint64_t v16 = *(void *)v7;
        uint64_t v17 = *(void *)(*(void *)v7 + 16);
        if (v17)
        {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          uint64_t v16 = *((void *)this + 75);
          uint64_t v15 = *((void *)this + 77) - 1;
        }
        *(void *)(v16 + 16) = 0;
        int v18 = (uint64_t *)*((void *)this + 75);
        uint64_t v19 = *v18;
        *(void *)(v19 + 8) = v18[1];
        *(void *)v18[1] = v19;
        *((void *)this + 77) = v15;
        operator delete(v18);
      }
      PCSharedMutex::unlock(v6);
    }
    return (*(uint64_t (**)(OZShapeBehavior *, uint64_t))(*(void *)this + 808))(this, v12);
  }
  return i;
}

void sub_1B7BA5D64(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

void OZShapeBehavior::createVertexCacheEntry(OZShapeBehavior *this, int a2, CMTime *a3)
{
}

uint64_t OZShapeBehavior::getVertexCacheEntry(OZShapeBehavior *this, uint64_t a2, CMTime *a3)
{
  char v6 = (std::mutex *)((char *)this + 496);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 496));
  uint64_t v7 = *((void *)this + 59) + 24 * (int)a2;
  uint64_t v8 = v7;
  while (1)
  {
    uint64_t v8 = *(void *)(v8 + 8);
    if (v8 == v7) {
      break;
    }
    uint64_t v9 = *(void *)(v8 + 16);
    long long v10 = *(_OWORD *)(v9 + 8);
    time1.CMTimeEpoch epoch = *(void *)(v9 + 24);
    *(_OWORD *)&time1.value = v10;
    CMTime v12 = *a3;
    if (!CMTimeCompare(&time1, &v12))
    {
      a2 = (*(uint64_t (**)(OZShapeBehavior *, void))(*(void *)this + 832))(this, *(void *)(v8 + 16));
      break;
    }
  }
  PCSharedMutex::unlock_shared(v6);
  if (v8 == v7) {
    return 0;
  }
  else {
    return a2;
  }
}

void sub_1B7BA5EE0(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock_shared(v1);
  _Unwind_Resume(a1);
}

void OZShapeBehavior::addVertexCacheEntry(uint64_t a1, int a2, uint64_t a3)
{
  char v6 = (std::mutex *)(a1 + 496);
  PCSharedMutex::lock((std::mutex *)(a1 + 496));
  if (a3)
  {
    uint64_t v7 = *(void *)(a1 + 472);
    uint64_t v8 = operator new(0x18uLL);
    uint64_t v9 = (uint64_t *)(v7 + 24 * a2);
    v8[2] = a3;
    long long v10 = (void *)v9[1];
    uint64_t v11 = v9[2];
    *uint64_t v8 = v9;
    v8[1] = v10;
    *long long v10 = v8;
    v9[1] = (uint64_t)v8;
    v9[2] = v11 + 1;
    if ((unint64_t)(v11 + 1) >= 6)
    {
      uint64_t v12 = *v9;
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        uint64_t v12 = *(void *)(*(void *)(a1 + 472) + 24 * a2);
      }
      *(void *)(v12 + 16) = 0;
      uint64_t v14 = *(void *)(a1 + 472) + 24 * a2;
      uint64_t v15 = *(uint64_t **)v14;
      uint64_t v16 = **(void **)v14;
      *(void *)(v16 + 8) = *(void *)(*(void *)v14 + 8);
      *(void *)v15[1] = v16;
      --*(void *)(v14 + 16);
      operator delete(v15);
    }
  }
  PCSharedMutex::unlock(v6);
}

void sub_1B7BA5FFC(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

void OZShapeBehavior::flushCache(OZShapeBehavior *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 496);
  PCSharedMutex::lock((std::mutex *)((char *)this + 496));
  unsigned int v3 = (void *)((char *)this + 472);
  uint64_t v5 = (void *)*((void *)this + 59);
  unint64_t v4 = (void *)*((void *)this + 60);
  if (v4 != v5)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    do
    {
      uint64_t v8 = &v5[3 * v6];
      if (v8[2])
      {
        do
        {
          uint64_t v9 = *(void *)(*v8 + 16);
          if (v9)
          {
            (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
            uint64_t v5 = (void *)*v3;
          }
          *(void *)(v5[3 * v6] + 16) = 0;
          uint64_t v10 = *v3 + 24 * v6;
          uint64_t v11 = *(uint64_t **)v10;
          uint64_t v12 = **(void **)v10;
          *(void *)(v12 + 8) = *(void *)(*(void *)v10 + 8);
          *(void *)v11[1] = v12;
          --*(void *)(v10 + 16);
          operator delete(v11);
          uint64_t v5 = (void *)*v3;
          uint64_t v8 = (void *)(*v3 + 24 * v6);
        }
        while (v8[2]);
        unint64_t v4 = (void *)*((void *)this + 60);
      }
      uint64_t v6 = ++v7;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v4 - v5) > v7);
    while (v4 != v5)
    {
      v4 -= 3;
      std::__list_imp<unsigned int>::clear(v4);
    }
    unint64_t v4 = v5;
  }
  *((void *)this + 60) = v4;
  if (*((void *)this + 44))
  {
    unsigned int v13 = 1;
    do
    {
      v22[0] = v22;
      v22[1] = v22;
      v22[2] = 0;
      unint64_t v14 = *((void *)this + 60);
      if (v14 >= *((void *)this + 61))
      {
        uint64_t v15 = std::vector<std::list<OZShapeBehaviorVertexCacheEntry *>>::__push_back_slow_path<std::list<OZShapeBehaviorVertexCacheEntry *> const&>((uint64_t)this + 472, (uint64_t)v22);
      }
      else
      {
        std::list<OZShapeBehaviorVertexCacheEntry *>::list(*((void **)this + 60), (uint64_t)v22);
        uint64_t v15 = v14 + 24;
        *((void *)this + 60) = v14 + 24;
      }
      *((void *)this + 60) = v15;
      std::__list_imp<unsigned int>::clear(v22);
    }
    while (*((void *)this + 44) > (unint64_t)v13++);
  }
  PCSharedMutex::unlock(v2);
  PCSharedMutex::lock((std::mutex *)((char *)this + 624));
  while (1)
  {
    uint64_t v17 = *((void *)this + 77);
    if (!v17) {
      break;
    }
    uint64_t v18 = *((void *)this + 75);
    uint64_t v19 = *(void *)(v18 + 16);
    if (v19)
    {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      uint64_t v18 = *((void *)this + 75);
      uint64_t v17 = *((void *)this + 77);
    }
    *(void *)(v18 + 16) = 0;
    uint64_t v20 = (uint64_t *)*((void *)this + 75);
    uint64_t v21 = *v20;
    *(void *)(v21 + 8) = v20[1];
    *(void *)v20[1] = v21;
    *((void *)this + 77) = v17 - 1;
    operator delete(v20);
  }
  PCSharedMutex::unlock((std::mutex *)((char *)this + 624));
}

void sub_1B7BA6248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  PCSharedMutex::unlock(v2);
  _Unwind_Resume(a1);
}

OZShapeBehavior *OZShapeBehavior::notify(OZShapeBehavior *this)
{
  uint64_t result = (OZShapeBehavior *)MEMORY[0x1F4188790](this);
  char v3 = v2;
  unint64_t v4 = result;
  v12[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  if ((v2 & 0x981C) != 0) {
    uint64_t result = (OZShapeBehavior *)(*(uint64_t (**)(OZShapeBehavior *))(*(void *)result + 784))(result);
  }
  if ((v3 & 0xC) != 0)
  {
    uint64_t result = (OZShapeBehavior *)(*(uint64_t (**)(OZShapeBehavior *))(*(void *)v4 + 336))(v4);
    if (result)
    {
      uint64_t v5 = result;
      PCSharedMutex::lock_shared((std::mutex *)((char *)v4 + 496));
      PCSharedMutex::lock_shared((std::mutex *)((char *)v4 + 624));
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v12);
      OZRenderParams::OZRenderParams((OZRenderParams *)v11);
      OZRenderState::OZRenderState(&v10);
      OZScene::getCurrentTime(v5, (__n128 *)&v9);
      v10.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v9;
      OZRenderParams::setState((OZRenderParams *)v11, &v10);
      CMTime v9 = v11[0];
      OZChannelFolder::calcHashForState((OZChannelFolder *)((char *)v4 + 56), (PCSerializerWriteStream *)v12, &v9);
      int8x16_t v8 = (int8x16_t)vceqq_s32(*(int32x4_t *)PCHashWriteStream::getHash(v12)->i8, *(int32x4_t *)((char *)v4 + 728));
      if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(v8)))) {
        *(_OWORD *)((char *)v4 + 728) = *(_OWORD *)PCHashWriteStream::getHash(v12)->i8;
      }
      OZRenderParams::~OZRenderParams((OZRenderParams *)v11);
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v12);
      PCSharedMutex::unlock_shared((std::mutex *)((char *)v4 + 624));
      PCSharedMutex::unlock_shared((std::mutex *)((char *)v4 + 496));
      uint64_t result = (OZShapeBehavior *)OZShapeBehavior::getRotoshape(v4);
      BOOL v6 = (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1B7E78240, v8)) & 0xF) == 0;
      if (!result) {
        BOOL v6 = 1;
      }
      if (!v6)
      {
        Rotoshape = (OZRotoshape *)OZShapeBehavior::getRotoshape(v4);
        return (OZShapeBehavior *)OZRotoshape::setDirty(Rotoshape, 1, 1);
      }
    }
  }
  return result;
}

void sub_1B7BA649C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

OZShapeBehavior *non-virtual thunk to'OZShapeBehavior::notify(OZShapeBehavior *this)
{
  return OZShapeBehavior::notify((OZShapeBehavior *)((char *)this - 336));
}

uint64_t OZShapeBehavior::willBake(OZShapeBehavior *this, PCTimeRange *a2)
{
  unint64_t v4 = (PCMutex *)((char *)this + 368);
  PCMutex::lock((PCMutex *)((char *)this + 368));
  *((void *)this + 56) = *((void *)this + 55);
  if (OZShapeBehavior::getRotoshape(this) && *((void *)this + 44))
  {
    OZShapeBehavior::getRotoshape(this);
    operator new();
  }
  uint64_t result = PCMutex::unlock(v4);
  *((unsigned char *)this + 320) = 1;
  return result;
}

void sub_1B7BA7080(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1080C40BC9BFA48);
  _Unwind_Resume(a1);
}

uint64_t OZShapeBehavior::didBake(OZShapeBehavior *this)
{
  __int16 v2 = (PCMutex *)((char *)this + 368);
  PCMutex::lock((PCMutex *)((char *)this + 368));
  uint64_t v4 = *((void *)this + 55);
  for (uint64_t i = *((void *)this + 56); v4 != i; *((void *)this + 56) = i)
  {
    uint64_t v5 = *(OZShapeBehaviorBakeEntry **)(i - 8);
    if (v5)
    {
      OZShapeBehaviorBakeEntry::~OZShapeBehaviorBakeEntry(v5);
      MEMORY[0x1BA9BFBA0]();
      uint64_t i = *((void *)this + 56);
    }
    *(void *)(i - 8) = 0;
    uint64_t v4 = *((void *)this + 55);
    uint64_t i = *((void *)this + 56) - 8;
  }
  uint64_t result = PCMutex::unlock(v2);
  *((unsigned char *)this + 320) = 0;
  return result;
}

uint64_t OZShapeBehavior::didUndoLastChange(OZShapeBehavior *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 704))();
}

void OZShapeBehaviorVertexCacheEntry::~OZShapeBehaviorVertexCacheEntry(OZShapeBehaviorVertexCacheEntry *this)
{
}

void OZShapeBehaviorBakeEntry::OZShapeBehaviorBakeEntry(OZShapeBehaviorBakeEntry *this, int a2, PCTimeRange *a3, CMTime *a4)
{
  uint64_t v4 = MEMORY[0x1E4F1FA48];
  long long v5 = *MEMORY[0x1E4F1FA48];
  *((void *)this + 3) = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(_OWORD *)((char *)this + 8) = v5;
  *((_OWORD *)this + 2) = *(_OWORD *)v4;
  *((void *)this + 6) = *(void *)(v4 + 16);
  *(double *)this = (double)a2;
  if ((OZShapeBehaviorBakeEntry *)((char *)this + 8) != a3)
  {
    long long v6 = *(_OWORD *)a3;
    *((void *)this + 3) = *((void *)a3 + 2);
    *(_OWORD *)((char *)this + 8) = v6;
    long long v7 = *(_OWORD *)((char *)a3 + 24);
    *((void *)this + 6) = *((void *)a3 + 5);
    *((_OWORD *)this + 2) = v7;
  }
  long long v8 = *(_OWORD *)((char *)a3 + 24);
  uint64_t v9 = *((void *)a3 + 5);
  operator/(&v8, (uint64_t)a4, (uint64_t)&time);
  CMTimeGetSeconds(&time);
  operator new[]();
}

void OZShapeBehaviorBakeEntry::~OZShapeBehaviorBakeEntry(OZShapeBehaviorBakeEntry *this)
{
  uint64_t v2 = *((void *)this + 7);
  if (v2) {
    MEMORY[0x1BA9BFB70](v2, 0x1000C8000313F17);
  }
  *((void *)this + 7) = 0;
  uint64_t v3 = *((void *)this + 8);
  if (v3) {
    MEMORY[0x1BA9BFB70](v3, 0x1000C8000313F17);
  }
  *((void *)this + 8) = 0;
  uint64_t v4 = *((void *)this + 9);
  if (v4) {
    MEMORY[0x1BA9BFB70](v4, 0x1000C8000313F17);
  }
  *((void *)this + 9) = 0;
  uint64_t v5 = *((void *)this + 10);
  if (v5) {
    MEMORY[0x1BA9BFB70](v5, 0x1000C8000313F17);
  }
  *((void *)this + 10) = 0;
  uint64_t v6 = *((void *)this + 11);
  if (v6) {
    MEMORY[0x1BA9BFB70](v6, 0x1000C8000313F17);
  }
  *((void *)this + 11) = 0;
  uint64_t v7 = *((void *)this + 12);
  if (v7) {
    MEMORY[0x1BA9BFB70](v7, 0x1000C8000313F17);
  }
  *((void *)this + 12) = 0;
}

void std::vector<std::list<OZShapeBehaviorVertexCacheEntry *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        std::__list_imp<unsigned int>::clear(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * ((void)a3 - a1);
  uint64_t result = *(void **)a5;
  if (v8 >= 1)
  {
    if (a4)
    {
      if (v8 >= (unint64_t)a4) {
        int64_t v10 = a4;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      unint64_t v11 = (-1 << (a4 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a4);
      *uint64_t result = *result & ~v11 | *a3 & v11;
      *(_DWORD *)(a5 + 8) = (*(_DWORD *)(a5 + 8) - (_BYTE)v10) & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v8 + 63;
    }
    uint64_t v13 = v12 >> 6;
    result -= v12 >> 6;
    *(void *)a5 = result;
    unint64_t v14 = &a3[-(v12 >> 6)];
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(result, v14, 8 * v13);
      uint64_t result = *(void **)a5;
    }
    if (v8 - (v13 << 6) >= 1)
    {
      uint64_t v15 = -1 << (((_BYTE)v13 << 6) - v8);
      uint64_t v16 = *(v14 - 1) & v15;
      uint64_t v17 = *--result;
      *(void *)a5 = result;
      *uint64_t result = v17 & ~v15 | v16;
      *(_DWORD *)(a5 + 8) = -(int)v8 & 0x3F;
    }
  }
  *(void *)a6 = result;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return result;
}

unint64_t std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t result@<X0>, unsigned int a2@<W1>, void *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v6 = a4 - (unint64_t)a2 + 8 * ((void)a3 - result);
  if (v6 <= 0)
  {
    unint64_t v11 = *(unint64_t **)a5;
    LODWORD(v9) = *(_DWORD *)(a5 + 8);
  }
  else
  {
    if (a4)
    {
      if (v6 >= (unint64_t)a4) {
        int64_t v7 = a4;
      }
      else {
        int64_t v7 = a4 - (unint64_t)a2 + 8 * ((void)a3 - result);
      }
      v6 -= v7;
      unint64_t v8 = (-1 << (a4 - v7)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a4) & *a3;
      unint64_t v9 = *(unsigned int *)(a5 + 8);
      if (v7 >= v9) {
        int64_t v10 = *(unsigned int *)(a5 + 8);
      }
      else {
        int64_t v10 = v7;
      }
      unint64_t v11 = *(unint64_t **)a5;
      if (v10)
      {
        unint64_t v12 = v8 >> (a4 - v9);
        if (v9 > a4) {
          unint64_t v12 = v8 << (v9 - a4);
        }
        unint64_t *v11 = *v11 & ~((-1 << (v9 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v9)) | v12;
        LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v10) & 0x3F;
        *(_DWORD *)(a5 + 8) = v9;
        v7 -= v10;
      }
      if (v7 >= 1)
      {
        uint64_t v13 = *--v11;
        *(void *)a5 = v11;
        LODWORD(v9) = -(int)v7 & 0x3F;
        *(_DWORD *)(a5 + 8) = v9;
        unint64_t *v11 = v13 & ~(-1 << -(char)v7) | (v8 << (v7 + v10 - a4 + (-(char)v7 & 0x3F)));
      }
    }
    else
    {
      LODWORD(v9) = *(_DWORD *)(a5 + 8);
      unint64_t v11 = *(unint64_t **)a5;
    }
    char v14 = 64 - v9;
    unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
    if (v6 >= 64)
    {
      unint64_t v16 = *v11;
      do
      {
        unint64_t v17 = v6;
        unint64_t v19 = *--a3;
        unint64_t v18 = v19;
        uint64_t result = v19 >> v14;
        unint64_t *v11 = v16 & ~v15 | (v19 >> v14);
        uint64_t v20 = *--v11;
        unint64_t v16 = v20 & v15 | (v18 << v9);
        unint64_t *v11 = v16;
        int64_t v6 = v17 - 64;
      }
      while (v17 > 0x7F);
      *(void *)a5 = v11;
    }
    if (v6 >= 1)
    {
      unint64_t v21 = *(a3 - 1) & (-1 << -(char)v6);
      if (v6 >= (unint64_t)v9) {
        int64_t v22 = v9;
      }
      else {
        int64_t v22 = v6;
      }
      unint64_t *v11 = *v11 & ~((-1 << (v9 - v22)) & v15) | (v21 >> v14);
      LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v22) & 0x3F;
      *(_DWORD *)(a5 + 8) = v9;
      if (v6 - v22 >= 1)
      {
        uint64_t v23 = *--v11;
        *(void *)a5 = v11;
        *(_DWORD *)(a5 + 8) = (v22 - v6) & 0x3F;
        unint64_t *v11 = v23 & ~(-1 << (v22 - v6)) | (v21 << (v6 + ((v22 - v6) & 0x3F)));
        LODWORD(v9) = (v22 - v6) & 0x3F;
      }
    }
  }
  *(void *)a6 = v11;
  *(_DWORD *)(a6 + 8) = v9;
  return result;
}

unint64_t *std::__copy_unaligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)result);
  if (v6 <= 0)
  {
    unint64_t v18 = *(unint64_t **)a5;
    unsigned int v19 = *(_DWORD *)(a5 + 8);
  }
  else
  {
    if (a2)
    {
      char v7 = a2;
      if (v6 >= (unint64_t)(64 - a2)) {
        unint64_t v8 = 64 - a2;
      }
      else {
        unint64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)result);
      }
      v6 -= v8;
      unint64_t v9 = (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v8)) & (-1 << a2) & *result;
      uint64_t v10 = *(unsigned int *)(a5 + 8);
      if (v8 >= (64 - v10)) {
        unint64_t v11 = (64 - v10);
      }
      else {
        unint64_t v11 = v8;
      }
      unint64_t v12 = *(unint64_t **)a5;
      unint64_t v13 = v9 >> (a2 - v10);
      BOOL v14 = v10 >= a2;
      int v16 = v10 - a2;
      BOOL v15 = v16 != 0 && v14;
      unint64_t v17 = v9 << v16;
      if (!v15) {
        unint64_t v17 = v13;
      }
      *unint64_t v12 = **(void **)a5 & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v10 - v11)) & (-1 << v10)) | v17;
      unint64_t v18 = (unint64_t *)((char *)v12 + (((v11 + v10) >> 3) & 0x3FFFFFF8));
      *(void *)a5 = v18;
      unsigned int v19 = ((_BYTE)v10 + (_BYTE)v11) & 0x3F;
      *(_DWORD *)(a5 + 8) = v19;
      uint64_t v20 = v8 - v11;
      if (v20 >= 1)
      {
        unint64_t *v18 = *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v20) | (v9 >> (v11 + v7));
        *(_DWORD *)(a5 + 8) = v20;
        unsigned int v19 = v20;
      }
      ++result;
    }
    else
    {
      unsigned int v19 = *(_DWORD *)(a5 + 8);
      unint64_t v18 = *(unint64_t **)a5;
    }
    unsigned int v21 = 64 - v19;
    uint64_t v22 = -1 << v19;
    if (v6 >= 64)
    {
      uint64_t v23 = *v18;
      do
      {
        unint64_t v24 = v6;
        unint64_t v26 = *result++;
        unint64_t v25 = v26;
        unint64_t *v18 = v23 & ~v22 | (v26 << v19);
        unint64_t v27 = v18[1];
        ++v18;
        uint64_t v23 = v27 & v22 | (v25 >> v21);
        unint64_t *v18 = v23;
        int64_t v6 = v24 - 64;
      }
      while (v24 > 0x7F);
      *(void *)a5 = v18;
    }
    if (v6 >= 1)
    {
      unint64_t v28 = *result & (0xFFFFFFFFFFFFFFFFLL >> -(char)v6);
      if (v6 >= (unint64_t)v21) {
        int64_t v29 = 64 - v19;
      }
      else {
        int64_t v29 = v6;
      }
      unint64_t *v18 = *v18 & ~((0xFFFFFFFFFFFFFFFFLL >> (v21 - v29)) & v22) | (v28 << v19);
      unint64_t v18 = (unint64_t *)((char *)v18 + (((v29 + (unint64_t)v19) >> 3) & 0x3FFFFFF8));
      *(void *)a5 = v18;
      unsigned int v19 = ((_BYTE)v19 + (_BYTE)v29) & 0x3F;
      *(_DWORD *)(a5 + 8) = v19;
      uint64_t v30 = v6 - v29;
      if (v30 >= 1)
      {
        unint64_t *v18 = *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v30) | (v28 >> v29);
        *(_DWORD *)(a5 + 8) = v30;
        unsigned int v19 = v30;
      }
    }
  }
  *(void *)a6 = v18;
  *(_DWORD *)(a6 + 8) = v19;
  return result;
}

void *std::vector<BOOL>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, *(void **)a2, 0, (void *)(*(void *)a2 + 8 * (*(void *)(a2 + 8) >> 6)), *(void *)(a2 + 8) & 0x3F, *(void *)(a2 + 8));
  }
  return a1;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(void *a1, void *a2, unint64_t a3, void *a4, int a5, uint64_t a6)
{
  unint64_t v6 = a1[1];
  unint64_t v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41) {
      unint64_t v8 = (v7 - 1) >> 6;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
  }
  uint64_t v9 = *a1 + 8 * (v6 >> 6);
  int v10 = v6 & 0x3F;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1@<X1>, unint64_t a2@<X2>, void *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  LODWORD(v6) = a2;
  unint64_t v7 = *(uint64_t **)a5;
  int v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || a2 != a4)
  {
    do
    {
      uint64_t v9 = 1 << v8;
      if ((*a1 >> a2)) {
        uint64_t v10 = *v7 | v9;
      }
      else {
        uint64_t v10 = *v7 & ~v9;
      }
      *unint64_t v7 = v10;
      BOOL v11 = v6 == 63;
      BOOL v12 = v6 == 63;
      uint64_t v6 = (a2 + 1);
      if (v11) {
        uint64_t v6 = 0;
      }
      if (v8 == 63)
      {
        int v8 = 0;
        *(void *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || v6 != a4);
    a1 = a3;
  }
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

void std::vector<BOOL>::__insert_with_size[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  unint64_t v15 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14 << 6 < a6 || v15 > (v14 << 6) - a6)
  {
    double v39 = 0;
    long long v40 = 0uLL;
    uint64_t v17 = v15 + a6;
    if (v17 < 0) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)(v14 << 6) > 0x3FFFFFFFFFFFFFFELL)
    {
      unint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v18 = v14 << 7;
      unint64_t v19 = (v17 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v18 <= v19) {
        unint64_t v20 = v19;
      }
      else {
        unint64_t v20 = v18;
      }
    }
    std::vector<BOOL>::reserve(&v39, v20);
    unint64_t v27 = *(unint64_t **)a1;
    *(void *)&long long v40 = *(void *)(a1 + 8) + a6;
    double v45 = v39;
    int v46 = 0;
    std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v27, 0, a2, a3, (uint64_t)&v45, (uint64_t)&v43);
    uint64_t v28 = v43;
    *(void *)a7 = v43;
    int v29 = v44;
    *(_DWORD *)(a7 + 8) = v44;
    unint64_t v30 = *(void *)(a1 + 8);
    uint64_t v31 = (void *)(*(void *)a1 + 8 * (v30 >> 6));
    unsigned int v32 = v30 & 0x3F;
    double v45 = &v39[8 * ((unint64_t)v40 >> 6)];
    int v46 = v40 & 0x3F;
    if (v46 == v32) {
      std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v31, v32, (uint64_t)&v45, (uint64_t)&v43);
    }
    else {
      std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v31, v32, (uint64_t)&v45, (uint64_t)&v43);
    }
    __double2 v33 = *(char **)a1;
    *(void *)a1 = v39;
    double v39 = v33;
    long long v34 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v40;
    long long v40 = v34;
    if (v33) {
      operator delete(v33);
    }
  }
  else
  {
    unsigned int v21 = *(unint64_t **)a1;
    uint64_t v22 = (void *)(*(void *)a1 + 8 * (v15 >> 6));
    uint64_t v23 = *(void *)(a1 + 8) & 0x3FLL;
    unsigned int v24 = v15 & 0x3F;
    *(void *)(a1 + 8) = v15 + a6;
    double v39 = (char *)&v21[(v15 + a6) >> 6];
    if ((((_BYTE)v15 + (_BYTE)a6) & 0x3F) == v23)
    {
      LODWORD(v40) = v23;
      std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v22, v24, (uint64_t)&v39, (uint64_t)&v45);
    }
    else
    {
      LODWORD(v40) = ((_BYTE)v15 + (_BYTE)a6) & 0x3F;
      std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v22, v24, (uint64_t)&v39, (uint64_t)&v45);
    }
    uint64_t v25 = 8 * (a2 - *(void *)a1) + a3;
    if (v25 < 0)
    {
      uint64_t v35 = v25 - 63;
      if (v25 - 63 < 0) {
        uint64_t v35 = 8 * (a2 - *(void *)a1) + a3;
      }
      uint64_t v26 = v35 >> 6;
    }
    else
    {
      uint64_t v26 = (unint64_t)v25 >> 6;
    }
    uint64_t v28 = *(void *)a1 + 8 * v26;
    int v29 = v25 & 0x3F;
    *(void *)a7 = v28;
    *(_DWORD *)(a7 + 8) = v29;
  }
  int v36 = *(_DWORD *)(a4 + 8);
  uint64_t v37 = *(void *)a5;
  int v38 = *(_DWORD *)(a5 + 8);
  double v45 = *(char **)a4;
  int v46 = v36;
  uint64_t v43 = v37;
  int v44 = v38;
  uint64_t v41 = v28;
  int v42 = v29;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>((uint64_t *)&v45, &v43, &v41, (uint64_t)&v39);
}

void sub_1B7BA7D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::list<OZShapeBehaviorVertexCacheEntry *>>::__push_back_slow_path<std::list<OZShapeBehaviorVertexCacheEntry *> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1 + 16;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - (void)v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 16;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v13 = v10;
  uint64_t v14 = &v10[24 * v4];
  int v16 = &v10[24 * v9];
  std::list<OZShapeBehaviorVertexCacheEntry *>::list(v14, a2);
  unint64_t v15 = v14 + 24;
  std::vector<std::list<OZShapeBehaviorVertexCacheEntry *>>::__swap_out_circular_buffer((uint64_t **)a1, &v13);
  uint64_t v11 = *(void *)(a1 + 8);
  std::__split_buffer<std::list<OZShapeBehaviorVertexCacheEntry *>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B7BA7E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::list<OZShapeBehaviorVertexCacheEntry *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::list<OZShapeBehaviorVertexCacheEntry *>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *uint64_t v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B7BA7EF4(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::vector<std::list<OZShapeBehaviorVertexCacheEntry *>>::__swap_out_circular_buffer(uint64_t **result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  unint64_t v4 = result[1];
  uint64_t v6 = (uint64_t *)a2[1];
  if (v4 != *result)
  {
    do
    {
      v6 -= 3;
      v4 -= 3;
      uint64_t result = (uint64_t **)std::allocator<std::list<OZShapeBehaviorVertexCacheEntry *>>::construct[abi:ne180100]<std::list<OZShapeBehaviorVertexCacheEntry *>,std::list<OZShapeBehaviorVertexCacheEntry *>>((uint64_t)(v3 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v7;
  uint64_t v8 = v3[1];
  v3[1] = (uint64_t *)a2[2];
  a2[2] = v8;
  unint64_t v9 = v3[2];
  v3[2] = (uint64_t *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::allocator<std::list<OZShapeBehaviorVertexCacheEntry *>>::construct[abi:ne180100]<std::list<OZShapeBehaviorVertexCacheEntry *>,std::list<OZShapeBehaviorVertexCacheEntry *>>(uint64_t a1, uint64_t *a2, void *a3)
{
  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  return std::list<OZShapeBehaviorVertexCacheEntry *>::splice((uint64_t)a2, a2, a3);
}

uint64_t std::list<OZShapeBehaviorVertexCacheEntry *>::splice(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = *a3;
    unint64_t v4 = (uint64_t *)a3[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = v4;
    uint64_t *v4 = v7;
    *a2 = v5;
    *(void *)(v5 + 8) = a2;
    *(void *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

uint64_t std::__split_buffer<std::list<OZShapeBehaviorVertexCacheEntry *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    std::__list_imp<unsigned int>::clear((void *)(i - 24));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void OZShapeBehaviorCurveNode::OZShapeBehaviorCurveNode(OZShapeBehaviorCurveNode *this, OZBehavior *a2, OZChannel *a3)
{
  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a3);
  *uint64_t v3 = &unk_1F1136678;
}

void OZShapeBehaviorCurveNode::~OZShapeBehaviorCurveNode(OZShapeBehaviorCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZShapeBehaviorCurveNode::solveNode(OZShapeBehaviorCurveNode *this, const CMTime *a2, __n128 a3, __n128 a4)
{
  unint64_t v4 = a4.n128_u64[0];
  unint64_t v5 = a3.n128_u64[0];
  uint64_t v6 = (void *)*((void *)this + 1);
  if (v6) {
  uint64_t v7 = *(uint64_t (**)(__n128, __n128))(*(void *)v6 + 640);
  }
  a3.n128_u64[0] = v5;
  a4.n128_u64[0] = v4;

  return v7(a3, a4);
}

__n128 OZShapeBehaviorCurveNode::solveNode(OZShapeBehaviorCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2 = *((void *)a2 + 19);
  uint64_t v3 = *((void *)a2 + 10);
  CMTime v9 = *(CMTime *)((unsigned char *)a2 + 5);
  __n128 result = *((__n128 *)a2 + 6);
  *(__n128 *)&v8.value = result;
  v8.CMTimeEpoch epoch = *((void *)a2 + 14);
  if (*((_DWORD *)a2 + 36))
  {
    unint64_t v7 = 0;
    do
    {
      *(double *)(v2 + 8 * v7) = (*(double (**)(OZShapeBehaviorCurveNode *, CMTime *, double, double))(*(void *)this + 16))(this, &v8, 0.0, *(double *)(v3 + 8 * v7));
      CMTime v11 = v8;
      CMTime v10 = v9;
      PC_CMTimeSaferAdd(&v11, &v10, (uint64_t)&v12);
      __n128 result = *(__n128 *)&v12.value;
      CMTime v8 = v12;
      ++v7;
    }
    while (v7 < *((unsigned int *)a2 + 36));
  }
  return result;
}

void OZShapeBehaviorCurveNode::cloneNode(OZShapeBehaviorCurveNode *this)
{
}

void sub_1B7BA82FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C408AB2CE21);
  _Unwind_Resume(a1);
}

uint64_t OZShapeBehaviorCurveNode::compare(OZShapeBehaviorCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc) {
  return 0;
  }
}

__n128 OZShapeBehaviorCurveNode::getNeededRange(OZShapeBehaviorCurveNode *this, OZCurveNodeParam *a2)
{
  *(_OWORD *)((char *)a2 + 24) = *((_OWORD *)a2 + 6);
  *((void *)a2 + 5) = *((void *)a2 + 14);
  __n128 result = *(__n128 *)((char *)a2 + 120);
  *((__n128 *)a2 + 3) = result;
  *((void *)a2 + 8) = *((void *)a2 + 17);
  *((_DWORD *)a2 + 18) = *((_DWORD *)a2 + 36);
  *((unsigned char *)a2 + 88) = 0;
  *((void *)a2 + 10) = *((void *)a2 + 19);
  return result;
}

void OZChanRotoshapeRef::OZChanRotoshapeRef(OZChanRotoshapeRef *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3, a4, a5);
  void *v5 = &unk_1F1136770;
  v5[2] = &unk_1F1136AF0;
}

void OZChanRotoshapeRef::OZChanRotoshapeRef(OZChanRotoshapeRef *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3, a4);
  void *v4 = &unk_1F1136770;
  v4[2] = &unk_1F1136AF0;
}

void OZChanRotoshapeRef::OZChanRotoshapeRef(OZChanRotoshapeRef *this, const OZChanSceneNodeRef *a2, OZChannelFolder *a3)
{
  OZChanSceneNodeRef::OZChanSceneNodeRef(this, a2, a3);
  *uint64_t v3 = &unk_1F1136770;
  v3[2] = &unk_1F1136AF0;
}

void non-virtual thunk to'OZChanRotoshapeRef::~OZChanRotoshapeRef(OZChanRotoshapeRef *this)
{
}

{
  uint64_t vars8;

  OZChanSceneNodeRef::~OZChanSceneNodeRef((OZChanRotoshapeRef *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChanRotoshapeRef::~OZChanRotoshapeRef(OZChanRotoshapeRef *this)
{
  OZChanSceneNodeRef::~OZChanSceneNodeRef(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChanRotoshapeRef::clone(OZChanRotoshapeRef *this)
{
}

void sub_1B7BA85C8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

const void *OZChanRotoshapeRef::getRotoshape(OZChannelBase *this)
{
  __n128 result = OZChanSceneNodeRef::getNode(this);
  if (result)
  {
  }
  return result;
}

uint64_t OZChanRotoshapeRef::canReferenceObject(OZChannelBase *this, const OZObjectManipulator *lpsrc)
{
  if (!lpsrc
  {
    return 0;
  }

  return OZChanSceneNodeRef::canReferenceObject(this, lpsrc);
}

void OZSimStateElement::OZSimStateElement(OZSimStateElement *this)
{
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0x3FF0000000000000;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0x3FF0000000000000;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((unsigned char *)this + 240) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
}

void OZSimStateElement::OZSimStateElement(OZSimStateElement *this, const OZSimStateElement *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 6) = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 10) = *((_OWORD *)a2 + 10);
  *((_OWORD *)this + 11) = *((_OWORD *)a2 + 11);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)this + 25) = 0x3FF0000000000000;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = *((void *)a2 + 29);
  *((unsigned char *)this + 240) = *((unsigned char *)a2 + 240);
  uint64_t v3 = *((void *)a2 + 29);
  if (v3)
  {
    if (*((unsigned char *)a2 + 240)) {
      *((void *)this + 29) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
}

uint64_t OZSimStateElement::operator=(uint64_t a1, long long *a2)
{
  if (a2 != (long long *)a1)
  {
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    long long v5 = a2[2];
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v5;
    long long v6 = *(long long *)((char *)a2 + 56);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *(_OWORD *)(a1 + 56) = v6;
    long long v7 = a2[5];
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    *(_OWORD *)(a1 + 80) = v7;
    long long v8 = *(long long *)((char *)a2 + 104);
    *(void *)(a1 + 120) = *((void *)a2 + 15);
    *(_OWORD *)(a1 + 104) = v8;
    long long v9 = a2[8];
    *(void *)(a1 + 144) = *((void *)a2 + 18);
    *(_OWORD *)(a1 + 128) = v9;
    long long v10 = *(long long *)((char *)a2 + 152);
    *(void *)(a1 + 168) = *((void *)a2 + 21);
    *(_OWORD *)(a1 + 152) = v10;
    long long v11 = a2[11];
    *(void *)(a1 + 192) = *((void *)a2 + 24);
    *(_OWORD *)(a1 + 176) = v11;
    uint64_t v12 = *((void *)a2 + 29);
    char v13 = *((unsigned char *)a2 + 240);
    if (v12 && *((unsigned char *)a2 + 240))
    {
      uint64_t v14 = *(void *)(a1 + 232);
      if (v14 && *(unsigned char *)(a1 + 240))
      {
        (*(void (**)(void))(*(void *)v14 + 8))(*(void *)(a1 + 232));
        *(void *)(a1 + 232) = 0;
        uint64_t v12 = *((void *)a2 + 29);
      }
      *(void *)(a1 + 232) = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
      char v13 = *((unsigned char *)a2 + 240);
    }
    else
    {
      *(void *)(a1 + 232) = v12;
    }
    *(unsigned char *)(a1 + 240) = v13;
  }
  return a1;
}

void OZSimStateElement::~OZSimStateElement(OZSimStateElement *this)
{
  uint64_t v2 = *((void *)this + 29);
  if (v2)
  {
    if (*((unsigned char *)this + 240))
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
      *((void *)this + 29) = 0;
    }
  }
}

double OZSimStateElement::stepFrom(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(void *)&double result = OZSimStateElement::stepFrom(a1, a2, a2, a3, a4).n128_u64[0];
  return result;
}

__n128 OZSimStateElement::stepFrom(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  double v5 = *(double *)(a3 + 72) * a4 + *(double *)(a2 + 16);
  *(float64x2_t *)a1 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 56), a4), *(float64x2_t *)a2);
  *(double *)(a1 + 16) = v5;
  double v6 = a4 * a5;
  double v7 = v6 * *(double *)(a3 + 144) + *(double *)(a2 + 72);
  *(float64x2_t *)(a1 + 56) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 128), v6), *(float64x2_t *)(a2 + 56));
  *(double *)(a1 + 72) = v7;
  double v8 = a4 * 0.5 * 0.125;
  double v9 = v8 * *(double *)(a3 + 80);
  double v10 = v8 * *(double *)(a3 + 88);
  double v11 = v8 * *(double *)(a3 + 96);
  if (v9 * v9 + v10 * v10 + v11 * v11 == 0.0)
  {
    if (a2 != a1)
    {
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      long long v12 = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = v12;
    }
  }
  else
  {
    double v13 = v8 * 0.0;
    double v14 = *(double *)(a2 + 24);
    double v15 = *(double *)(a2 + 32);
    double v16 = *(double *)(a2 + 40);
    double v17 = *(double *)(a2 + 48);
    int v18 = 8;
    do
    {
      double v19 = v9 * v14 + v13 * v15 + v10 * v17 - v11 * v16;
      double v20 = v10 * v14 + v13 * v16 + v11 * v15 - v9 * v17;
      double v21 = v9 * v16 - v10 * v15 + v11 * v14 + v13 * v17;
      double v22 = v14 + v13 * v14 - (v9 * v15 + v10 * v16 + v11 * v17);
      double v23 = v15 + v19;
      double v24 = v16 + v20;
      double v25 = v17 + v21;
      double v26 = sqrt(v22 * v22 + v25 * v25 + v23 * v23 + v24 * v24);
      if (v26 == 0.0)
      {
        double v14 = 1.0;
        double v15 = 0.0;
        double v16 = 0.0;
        double v17 = 0.0;
      }
      else
      {
        double v14 = v22 / v26;
        double v15 = v23 / v26;
        double v16 = v24 / v26;
        double v17 = v25 / v26;
      }
      --v18;
    }
    while (v18);
    *(double *)(a1 + 24) = v14;
    *(double *)(a1 + 32) = v15;
    *(double *)(a1 + 40) = v16;
    *(double *)(a1 + 48) = v17;
  }
  double v27 = *(double *)(a3 + 168) * a4 + *(double *)(a2 + 120);
  *(float64x2_t *)(a1 + 104) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 152), a4), *(float64x2_t *)(a2 + 104));
  *(double *)(a1 + 120) = v27;
  __n128 result = *(__n128 *)(a1 + 104);
  *(__n128 *)(a1 + 80) = result;
  *(void *)(a1 + 96) = *(void *)(a1 + 120);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  return result;
}

uint64_t OZLi3DEngineTexturedObjectData::OZLi3DEngineTexturedObjectData(uint64_t a1, uint64_t a2, void *a3, long long *a4, long long *a5, const OZRenderParams *a6, char a7, double a8)
{
  long long v15 = a4[1];
  v28[0] = *a4;
  v28[1] = v15;
  long long v16 = a4[3];
  v28[2] = a4[2];
  v28[3] = v16;
  double v17 = (float *)Li3DEngineObjectDataBase::defaultPerInstanceColor((Li3DEngineObjectDataBase *)a1);
  float v18 = *v17;
  float v19 = v17[1];
  float v20 = v17[2];
  float v21 = v17[3];
  v26[1] = 0;
  v26[2] = 0;
  v26[0] = &unk_1F10AD5F8;
  char v27 = 0;
  Li3DEngineObjectData::Li3DEngineObjectData(a1, a2, v28, 0, 0, 0, (uint64_t)v26, a8, v18, v19, v20, v21, 1.0);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v26);
  *(void *)a1 = &unk_1F1136B60;
  OZRenderParams::OZRenderParams((OZRenderParams *)(a1 + 576), a6);
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  long long v22 = *a5;
  long long v23 = a5[1];
  *(_OWORD *)(a1 + 2064) = a5[2];
  *(_OWORD *)(a1 + 2048) = v23;
  *(_OWORD *)(a1 + 2032) = v22;
  double v24 = (CGColorSpace *)*((void *)a5 + 6);
  *(void *)(a1 + 2080) = v24;
  if (v24) {
    PCCFRefTraits<CGColorSpace *>::retain(v24);
  }
  *(unsigned char *)(a1 + 2088) = a7;
  *(void *)(a1 + 2096) = a3;
  return a1;
}

void sub_1B7BA8CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 + 2008);
  std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v12 = *(void *)(v9 + 2000);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  OZRenderParams::~OZRenderParams(v10);
  Li3DEngineObjectData::~Li3DEngineObjectData((id *)v9);
  _Unwind_Resume(a1);
}

uint64_t Li3DEngineObjectData::Li3DEngineObjectData(uint64_t a1, uint64_t a2, long long *a3, char a4, char a5, int a6, uint64_t a7, double a8, float a9, float a10, float a11, float a12, float a13)
{
  long long v14 = a3[1];
  v18[0] = *a3;
  v18[1] = v14;
  long long v15 = a3[3];
  void v18[2] = a3[2];
  v18[3] = v15;
  long long v16 = (void *)Li3DEngineObjectDataBase::Li3DEngineObjectDataBase(a1, a2, v18, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  void *v16 = &unk_1F1121420;
  Li3DEngineObjectForceParams::Li3DEngineObjectForceParams((Li3DEngineObjectForceParams *)(v16 + 27));
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 272) = -1;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 416) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 432) = 0;
  *(unsigned char *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  return a1;
}

void sub_1B7BA8E18(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1F11216B8;
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)(v1 + 21));
  _Unwind_Resume(a1);
}

void OZLi3DEngineTexturedObjectData::~OZLi3DEngineTexturedObjectData(OZLi3DEngineTexturedObjectData *this)
{
  *(void *)this = &unk_1F1136B60;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 260);
  uint64_t v3 = (void **)((char *)this + 2008);
  std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *((void *)this + 250);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  OZRenderParams::~OZRenderParams((OZLi3DEngineTexturedObjectData *)((char *)this + 576));
  Li3DEngineObjectData::~Li3DEngineObjectData((id *)this);
}

{
  uint64_t vars8;

  OZLi3DEngineTexturedObjectData::~OZLi3DEngineTexturedObjectData(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZLi3DEngineTexturedObjectData::generateFaceStickerTexture(OZLi3DEngineTexturedObjectData *this, LiAgent *a2)
{
}

void sub_1B7BA9048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 24))(a11);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 24))(a12);
  }
  _Unwind_Resume(exception_object);
}

void OZLi3DEngineTexturedObjectData::makeFaceStickerTextureNode(OZLi3DEngineTexturedObjectData *this, LiAgent *a2)
{
  uint64_t v3 = (HGHWMultiBlend *)HGObject::operator new(0x280uLL);
  HGHWMultiBlend::HGHWMultiBlend(v3);
  memset(v5, 0, 24);
  PCColor::getComponents((int *)this + 508, v5);
  long long v4 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
  HGSolidColor::HGSolidColor(v4);
}

void sub_1B7BA9450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  LiAgent::~LiAgent((LiAgent *)&a51);
  LiRenderParameters::~LiRenderParameters((LiRenderParameters *)&STACK[0x3A0]);
  (*(void (**)(uint64_t))(*(void *)v52 + 24))(v52);
  double v55 = *(void **)(v53 - 120);
  if (v55)
  {
    *(void *)(v53 - 112) = v55;
    operator delete(v55);
  }
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 24))(v51);
  }
  _Unwind_Resume(a1);
}

uint64_t OZLi3DEngineTexturedObjectData::applyChanges(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 2000);
  if (v1)
  {
    if (*(unsigned char *)(result + 2088)) {
      uint64_t v2 = (uint64_t *)MEMORY[0x1E4F3B348];
    }
    else {
      uint64_t v2 = (uint64_t *)MEMORY[0x1E4F3B328];
    }
    uint64_t v3 = *v2;
    long long v4 = *(void **)(result + 2096);
    uint64_t v5 = *(void *)(v1 + 144);
    return ApplyMetalTextureToNode(v4, &v5, v3);
  }
  return result;
}

void OZ3DEnginePlaneElement::OZ3DEnginePlaneElement(OZ3DEnginePlaneElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZ3DEngineSceneElement::OZ3DEngineSceneElement(this, a2, a3, a4);
  void *v5 = &unk_1F1136B98;
  v5[2] = &unk_1F11374D0;
  v5[6] = &unk_1F1137728;
  v5[816] = &unk_1F1137780;
  PCURL::PCURL((PCURL *)&v6, @"Channel Image Element Footage Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 24408), &v6, (OZChannelFolder *)((char *)this + 320), 0x190u, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Channel Image Element Footage");
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 24536), &v6, (OZChannelFolder *)((char *)this + 24408), 0x191u, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Channel Image Element Footage");
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 26120), &v6, (OZChannelFolder *)((char *)this + 24408), 0x192u, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Channel Image Element Footage");
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 27704), &v6, (OZChannelFolder *)((char *)this + 24408), 0x193u, 0);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Base Color");
  OZChannelColor::OZChannelColor((OZ3DEnginePlaneElement *)((char *)this + 29288), 0.0, 0.0, 0.0, 0.0, &v6, (OZChannelFolder *)((char *)this + 448), 0x194u, 0, 6u);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Enable Lights");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 30448), 0, &v6, (OZChannelFolder *)((char *)this + 448), 0x195u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::PCString(&v6, "Plane Size");
  OZChannel2D::OZChannel2D((OZ3DEnginePlaneElement *)((char *)this + 30600), 1024.0, 1024.0, &v6, (OZChannelFolder *)((char *)this + 448), 0x196u, 0, 2u, 0, 0);
  PCString::~PCString(&v6);
  Li3DEngineScene::Li3DEngineScene((OZ3DEnginePlaneElement *)((char *)this + 31040));
  *(_OWORD *)((char *)this + 31208) = 0u;
  *((void *)this + 3903) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 31232), 1);
  *((void *)this + 3904) = &unk_1F10933F0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19144), 2, 0);
}

void sub_1B7BA990C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, PCString a10)
{
  PCMutex::~PCMutex(v17);
  Li3DEngineScene::~Li3DEngineScene(v19);
  OZChannel2D::~OZChannel2D(v18);
  OZChannelBool::~OZChannelBool(v16);
  OZChannelColor::~OZChannelColor(v15);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v14);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v13);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement(v10);
  _Unwind_Resume(a1);
}

void sub_1B7BA9990(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7BA99A0()
{
}

void sub_1B7BA99A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7BA99B8()
{
}

void sub_1B7BA99C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7BA99D0()
{
}

void sub_1B7BA99D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7BA99E8()
{
}

void sub_1B7BA99F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7BA9A00()
{
}

void sub_1B7BA9A08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7BA9A18()
{
}

void Li3DEngineScene::~Li3DEngineScene(Li3DEngineScene *this)
{
  std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy((uint64_t)this + 144, *((PCSharedCount **)this + 19));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 120, *((void **)this + 16));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 14);
  std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy((uint64_t)this + 80, *((id **)this + 11));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 8);

  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)this);
}

void OZ3DEnginePlaneElement::OZ3DEnginePlaneElement(OZ3DEnginePlaneElement *this, const OZ3DEnginePlaneElement *a2, uint64_t a3)
{
  OZ3DEngineSceneElement::OZ3DEngineSceneElement(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F1136B98;
  *(void *)(v5 + 16) = &unk_1F11374D0;
  *(void *)(v5 + 48) = &unk_1F1137728;
  *(void *)(v5 + 6528) = &unk_1F1137780;
  PCString v6 = (OZChannelFolder *)(v5 + 24408);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 24408), (const OZChannelFolder *)((char *)a2 + 24408), (OZChannelFolder *)(v5 + 320));
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 24536), (const OZ3DEnginePlaneElement *)((char *)a2 + 24536), v6);
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 26120), (const OZ3DEnginePlaneElement *)((char *)a2 + 26120), v6);
  OZChannelImageWithOptions::OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 27704), (const OZ3DEnginePlaneElement *)((char *)a2 + 27704), v6);
  OZChannelColor::OZChannelColor((OZ3DEnginePlaneElement *)((char *)this + 29288), (const OZ3DEnginePlaneElement *)((char *)a2 + 29288), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 30448), (const OZChannelBase *)((char *)a2 + 30448), (OZChannelFolder *)((char *)this + 448));
  OZChannel2D::OZChannel2D((OZ3DEnginePlaneElement *)((char *)this + 30600), (const OZ3DEnginePlaneElement *)((char *)a2 + 30600), (OZChannelFolder *)((char *)this + 448));
  Li3DEngineScene::Li3DEngineScene((OZ3DEnginePlaneElement *)((char *)this + 31040));
  *(_OWORD *)((char *)this + 31208) = 0u;
  *((void *)this + 3903) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 31232), 1);
  *((void *)this + 3904) = &unk_1F10933F0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19144), 2, 0);
}

void sub_1B7BA9C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  PCMutex::~PCMutex(v17);
  Li3DEngineScene::~Li3DEngineScene(v19);
  OZChannel2D::~OZChannel2D(v18);
  OZChannelBool::~OZChannelBool(v16);
  OZChannelColor::~OZChannelColor(v15);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v14);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v13);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  OZ3DEngineSceneElement::~OZ3DEngineSceneElement(v10);
  _Unwind_Resume(a1);
}

void sub_1B7BA9CF4()
{
}

void sub_1B7BA9CFC()
{
}

void sub_1B7BA9D04()
{
}

void sub_1B7BA9D0C()
{
}

void sub_1B7BA9D14()
{
}

void OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement(OZ3DEnginePlaneElement *this)
{
  *(void *)this = &unk_1F1136B98;
  *((void *)this + 2) = &unk_1F11374D0;
  *((void *)this + 6) = &unk_1F1137728;
  *((void *)this + 816) = &unk_1F1137780;

  PCMutex::~PCMutex((PCMutex *)((char *)this + 31232));
  std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy((uint64_t)this + 31184, *((PCSharedCount **)this + 3899));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 31160, *((void **)this + 3896));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 3894);
  std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy((uint64_t)this + 31120, *((id **)this + 3891));
  ProCore_Impl::PCNSRefImpl::release((id *)this + 3888);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)this + 485);
  OZChannel2D::~OZChannel2D((OZ3DEnginePlaneElement *)((char *)this + 30600));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 30448));
  *((void *)this + 3661) = &unk_1F1107698;
  *((void *)this + 3663) = &unk_1F1107A08;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 30296));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZ3DEnginePlaneElement *)((char *)this + 29288));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 27704));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 26120));
  OZChannelImageWithOptions::~OZChannelImageWithOptions((OZ3DEnginePlaneElement *)((char *)this + 24536));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 24408));

  OZ3DEngineSceneElement::~OZ3DEngineSceneElement(this);
}

{
  uint64_t vars8;

  OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement(OZ3DEnginePlaneElement *this)
{
}

{
  OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement((OZ3DEnginePlaneElement *)((char *)this - 48));
}

{
  OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement((OZ3DEnginePlaneElement *)((char *)this - 6528));
}

{
  uint64_t vars8;

  OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement((OZ3DEnginePlaneElement *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement((OZ3DEnginePlaneElement *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZ3DEnginePlaneElement::~OZ3DEnginePlaneElement((OZ3DEnginePlaneElement *)((char *)this - 6528));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZ3DEnginePlaneElement::get3DScene(OZ3DEnginePlaneElement *this)
{
  uint64_t v2 = (PCMutex *)((char *)this + 31232);
  double v10 = (char *)this + 31232;
  PCMutex::lock((PCMutex *)((char *)this + 31232));
  LOBYTE(v11) = 1;
  if (!*((void *)this + 3901))
  {
    uint64_t v3 = objc_opt_new();
    *((void *)this + 3901) = v3;
    objc_msgSend((id)objc_msgSend(v3, "rootNode", v10, v11), "setName:", @"Plane Element scene root");
    Li3DEngineScene::set((OZ3DEnginePlaneElement *)((char *)this + 31040), *((SCNScene **)this + 3901));
    uint64_t v4 = [MEMORY[0x1E4F3B250] planeWithWidth:1024.0 height:1024.0];
    *((void *)this + 3902) = v4;
    *((void *)this + 3903) = (id)[MEMORY[0x1E4F3B228] nodeWithGeometry:v4];
    objc_msgSend((id)objc_msgSend(*((id *)this + 3901), "rootNode"), "addChildNode:", *((void *)this + 3903));
    Li3DEngineScene::setUseOriginalScene((uint64_t)this + 31040, 1);
  }
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 30736), MEMORY[0x1E4F1FA48], 0.0);
  double v6 = v5;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 30888), MEMORY[0x1E4F1FA48], 0.0);
  double v8 = v7;
  [*((id *)this + 3902) setWidth:v6];
  [*((id *)this + 3902) setHeight:v8];
  PCMutex::unlock(v2);
  return (uint64_t)this + 31040;
}

void sub_1B7BAA144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCMutex *a9)
{
}

double OZ3DEnginePlaneElement::calcAutomaticUnitSize(OZ3DEnginePlaneElement *this)
{
  return 1.0;
}

void OZ3DEnginePlaneElement::getLocalVolume(uint64_t a1, _OWORD *a2)
{
  if (a2)
  {
    uint64_t v3 = (std::recursive_mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 2336))(a1);
    std::recursive_mutex::lock(v3);
    Representation = (SCNScene *)PCBitmap::getRepresentation((PCBitmap *)v3);
    getSceneBoundingBox(Representation, (uint64_t)v6);
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v6[2];
    std::recursive_mutex::unlock(v3);
  }
}

void sub_1B7BAA1EC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void OZ3DEnginePlaneElement::makeDataFor3DEngineObject(uint64_t a1, uint64_t a2, CMTime *a3)
{
  CMTime v27 = *a3;
  CMTime v26 = v27;
  int v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 104))();
  Li3DEngineObjectForceParams::Li3DEngineObjectForceParams((Li3DEngineObjectForceParams *)&v16);
  int v6 = 0;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  int v17 = -1;
  uint64_t v15 = 0;
  if (v5) {
    int v6 = OZ3DEngineSceneElement::physicsType((OZ3DEngineSceneElement *)a1, &v27);
  }
  LODWORD(v15) = v6;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21384), &v27, 0.0);
  uint64_t v21 = v7;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21688), &v27, 0.0);
  uint64_t v23 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21536), &v27, 0.0);
  uint64_t v22 = v9;
  HIDWORD(v15) = (*(uint64_t (**)(uint64_t, CMTime *))(*(void *)a1 + 2304))(a1, &v27);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21840), &v27, 0.0);
  uint64_t v24 = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 21992), &v27, 0.0);
  uint64_t v25 = v11;
  uint64_t v12 = OZ3DEngineSceneElement::get3DWorldOwner((OZ3DEngineSceneElement *)a1);
  if (v12)
  {
    if (!OZ3DEngineSceneElement::is3DNodeInMasterScene((OZ3DEngineSceneElement *)a1, (OZGroup *)v12)) {
      OZ3DEngineSceneElement::add3DNodeToMasterScene((OZ3DEngineSceneElement *)a1);
    }
  }
  PCColor::PCColor(&v14);
  CMTime v13 = *a3;
  OZChannelColor::getColor((OZChannelColor *)(a1 + 29288), &v13, &v14, 0.0);
  operator new();
}

void sub_1B7BAA97C(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)STACK[0x698];
  if (STACK[0x698])
  {
    STACK[0x6A0] = (unint64_t)v3;
    operator delete(v3);
  }
  if (STACK[0x6F8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x6F8]);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&STACK[0x738]);
  Li3DEngineObjectForceParams::~Li3DEngineObjectForceParams(v1);
  _Unwind_Resume(a1);
}

uint64_t Li3DEngineObjectDataBase::Li3DEngineObjectDataBase(uint64_t a1, uint64_t a2, long long *a3, char a4, char a5, int a6, uint64_t a7, double a8, float a9, float a10, float a11, float a12, float a13)
{
  *(void *)a1 = &unk_1F11216B8;
  *(void *)(a1 + 8) = a2;
  *(double *)(a1 + 16) = a8;
  long long v15 = *a3;
  long long v16 = a3[1];
  long long v17 = a3[2];
  *(_OWORD *)(a1 + 72) = a3[3];
  *(_OWORD *)(a1 + 56) = v17;
  *(_OWORD *)(a1 + 40) = v16;
  *(_OWORD *)(a1 + 24) = v15;
  *(unsigned char *)(a1 + 88) = a4;
  *(float *)(a1 + 92) = a9;
  *(float *)(a1 + 96) = a10;
  *(float *)(a1 + 100) = a11;
  *(float *)(a1 + 104) = a12;
  *(float *)(a1 + 108) = a13;
  *(unsigned char *)(a1 + 112) = a5;
  *(_DWORD *)(a1 + 116) = a6;
  *(_OWORD *)(a1 + 152) = xmmword_1B7E736F0;
  *(_OWORD *)(a1 + 136) = xmmword_1B7E736F0;
  *(_OWORD *)(a1 + 120) = xmmword_1B7E736F0;
  uint64_t v18 = a1 + 168;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = &unk_1F10AD5F8;
  int v19 = *(_DWORD *)(a7 + 12);
  if (v19 <= 0) {
    int v20 = 0;
  }
  else {
    int v20 = (2 * v19) | 1;
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(v18, v19, v20);
  if (*(int *)(a7 + 12) >= 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    do
    {
      LiLight::operator=(*(void *)(a1 + 184) + v21, *(void *)(a7 + 16) + v21);
      ++v22;
      v21 += 944;
    }
    while (v22 < *(int *)(a7 + 12));
  }
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a7 + 24);
  return a1;
}

void std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy(uint64_t a1, PCSharedCount *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::destroy(a1, a2[1].var0);
    PCSharedCount::~PCSharedCount(a2 + 6);
    operator delete(a2);
  }
}

void std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__assign_with_size[abi:ne180100]<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>(uint64_t a1, const PCSharedCount *a2, const PCSharedCount *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(PCSharedCount **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__vdeallocate((void **)a1);
    if (a4 > 0x1C71C71C71C71C7) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v11 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>(v8, (uint64_t)a2, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    CMTime v13 = &a2[2 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4)];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,0>(a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,0>(a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      uint64_t v17 = v16 - 144;
      PCSharedCount::~PCSharedCount((PCSharedCount *)(v16 - 136));
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B7BAAD3C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B7BAAD44(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__vdeallocate(void **a1)
{
  uint64_t v1 = (PCSharedCount *)*a1;
  if (*a1)
  {
    uint64_t v3 = (PCSharedCount *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        int v5 = v3 - 18;
        PCSharedCount::~PCSharedCount(v3 - 17);
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[144 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = (_OWORD *)(a4 + v7);
      uint64_t v9 = a2 + v7;
      *(void *)(a4 + v7) = *(void *)(a2 + v7);
      PCSharedCount::PCSharedCount((PCSharedCount *)(a4 + v7 + 8), (const PCSharedCount *)(a2 + v7 + 8));
      long long v10 = *(_OWORD *)(a2 + v7 + 16);
      long long v11 = *(_OWORD *)(a2 + v7 + 32);
      long long v12 = *(_OWORD *)(a2 + v7 + 64);
      v8[3] = *(_OWORD *)(a2 + v7 + 48);
      v8[4] = v12;
      v8[1] = v10;
      v8[2] = v11;
      long long v13 = *(_OWORD *)(a2 + v7 + 80);
      long long v14 = *(_OWORD *)(a2 + v7 + 96);
      long long v15 = *(_OWORD *)(a2 + v7 + 128);
      v8[7] = *(_OWORD *)(a2 + v7 + 112);
      v8[8] = v15;
      v8[5] = v13;
      v8[6] = v14;
      v7 += 144;
    }
    while (v9 + 144 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B7BAAEA8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 136;
    do
    {
      PCSharedCount::~PCSharedCount((PCSharedCount *)(v4 + v2));
      v2 -= 144;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

const PCSharedCount *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>> *,0>(const PCSharedCount *a1, const PCSharedCount *a2, PCSharedCount *a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>::operator=[abi:ne180100](a3, v4);
      v4 += 18;
      a3 += 18;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

PCSharedCount *std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>::operator=[abi:ne180100](PCSharedCount *a1, const PCSharedCount *a2)
{
  a1->CMTime var0 = a2->var0;
  uint64_t v4 = (uint64_t *)&a1[1];
  PCSharedCount::PCSharedCount(&v10, a2 + 1);
  PCSharedCount::operator=(v4, (uint64_t *)&v10);
  PCSharedCount::~PCSharedCount(&v10);
  if (a2 != a1)
  {
    uint64_t v5 = 0;
    int v6 = a2 + 2;
    uint64_t v7 = a1 + 2;
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
        v7[i] = v6[i];
      ++v5;
      v7 += 4;
      v6 += 4;
    }
    while (v5 != 4);
  }
  return a1;
}

void sub_1B7BAAFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(144 * a2);
}

void std::vector<std::pair<PCPtr<LiImageSource>,PCMatrix44Tmpl<double>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (PCSharedCount *)**a1;
  if (v2)
  {
    uint64_t v4 = (PCSharedCount *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 18;
        PCSharedCount::~PCSharedCount(v4 - 17);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::shared_ptr<OZLi3DEngineTexturedObjectData>::shared_ptr[abi:ne180100]<OZLi3DEngineTexturedObjectData,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7BAB11C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<OZLi3DEngineTexturedObjectData>::shared_ptr[abi:ne180100]<OZLi3DEngineTexturedObjectData,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<OZLi3DEngineTexturedObjectData *,std::shared_ptr<OZLi3DEngineTexturedObjectData>::__shared_ptr_default_delete<OZLi3DEngineTexturedObjectData,OZLi3DEngineTexturedObjectData>,std::allocator<OZLi3DEngineTexturedObjectData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<OZLi3DEngineTexturedObjectData *,std::shared_ptr<OZLi3DEngineTexturedObjectData>::__shared_ptr_default_delete<OZLi3DEngineTexturedObjectData,OZLi3DEngineTexturedObjectData>,std::allocator<OZLi3DEngineTexturedObjectData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<OZLi3DEngineTexturedObjectData>::shared_ptr[abi:ne180100]<OZLi3DEngineTexturedObjectData,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void OZSimStateArray::OZSimStateArray(OZSimStateArray *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  uint64_t v1 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)((char *)this + 24) = *MEMORY[0x1E4F1FA48];
  *((void *)this + 5) = *(void *)(v1 + 16);
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 7) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 8);
}

void sub_1B7BAB228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<OZSimStateElement>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void OZSimStateArray::OZSimStateArray(OZSimStateArray *this, unsigned int a2)
{
  uint64_t v2 = std::vector<OZSimStateElement>::vector(this, a2);
  uint64_t v3 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)(v2 + 3) = *MEMORY[0x1E4F1FA48];
  v2[5] = *(void *)(v3 + 16);
  *((unsigned char *)v2 + 48) = 0;
  v2[7] = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)v2 + 8);
}

void sub_1B7BAB2A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<OZSimStateElement>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::vector<OZSimStateElement>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<OZSimStateElement>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (OZSimStateElement *)a1[1];
    uint64_t v5 = 248 * a2;
    int v6 = (char *)v4 + 248 * a2;
    do
    {
      OZSimStateElement::OZSimStateElement(v4);
      uint64_t v4 = (OZSimStateElement *)((char *)v4 + 248);
      v5 -= 248;
    }
    while (v5);
    a1[1] = v6;
  }
  return a1;
}

void sub_1B7BAB334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void OZSimStateArray::OZSimStateArray(OZSimStateArray *this, const OZSimStateArray *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<OZSimStateElement>::__init_with_size[abi:ne180100]<OZSimStateElement*,OZSimStateElement*>(this, *(void *)a2, *((void *)a2 + 1), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  *((void *)this + 5) = *((void *)a2 + 5);
  *(_OWORD *)((char *)this + 24) = v4;
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 48);
  *((void *)this + 7) = *((void *)a2 + 7);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 8, (const PCSharedCount *)a2 + 8);
}

void sub_1B7BAB3E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<OZSimStateElement>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void OZSimStateArray::~OZSimStateArray(PCSharedCount *this)
{
  PCSharedCount::~PCSharedCount(this + 8);
  uint64_t v2 = this;
  std::vector<OZSimStateElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
}

void OZSimStateArray::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    std::vector<OZSimStateElement>::__assign_with_size[abi:ne180100]<OZSimStateElement*,OZSimStateElement*>(a1, *(long long **)a2, *(long long **)(a2 + 8), 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  PCSharedCount::PCSharedCount(&v4, (const PCSharedCount *)(a2 + 64));
  PCSharedCount::operator=((uint64_t *)(a1 + 64), (uint64_t *)&v4);
  PCSharedCount::~PCSharedCount(&v4);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
}

void sub_1B7BAB4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

void OZSimStateArray::setOwnedObject(PCShared_base **this, PCShared *a2)
{
}

void OZSimStateArray::setOwnedObjectFrom(PCSharedCount *this, const PCSharedCount *a2)
{
  this[7].CMTime var0 = a2[7].var0;
  uint64_t v2 = (uint64_t *)&this[8];
  PCSharedCount::PCSharedCount(&v3, a2 + 8);
  PCSharedCount::operator=(v2, (uint64_t *)&v3);
  PCSharedCount::~PCSharedCount(&v3);
}

void sub_1B7BAB544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

void *OZSimStateArray::clearForces(void *this)
{
  for (uint64_t i = (_OWORD *)*this; i != (_OWORD *)this[1]; uint64_t i = (_OWORD *)((char *)i + 248))
  {
    i[9] = 0uLL;
    i[10] = 0uLL;
    i[8] = 0uLL;
  }
  return this;
}

void OZSimStateArray::stepFrom(OZSimStateArray *this, OZSimStateArray *a2, CMTime *a3, double a4)
{
  CMTime v4 = *a3;
  OZSimStateArray::stepFrom(this, a2, a2, &v4, a4);
}

void OZSimStateArray::stepFrom(OZSimStateArray *this, OZSimStateArray *a2, OZSimStateArray *a3, CMTime *a4, double a5)
{
  uint64_t v8 = *(void *)this;
  if (*(void *)this != *((void *)this + 1))
  {
    uint64_t v10 = *(void *)a3;
    uint64_t v11 = *(void *)a2;
    do
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = 0x3FF0000000000000;
      uint64_t v18 = 0x3FF0000000000000;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v19 = 0;
      uint64_t v22 = 0x3FF0000000000000;
      OZSimStateElement::stepFrom(v8, v11, v10, a5, 1.0);
      v8 += 248;
      v11 += 248;
      v10 += 248;
    }
    while (v8 != *((void *)this + 1));
  }
  CMTime v24 = *(CMTime *)((unsigned char *)a2 + 1);
  CMTime v23 = *a4;
  PC_CMTimeSaferAdd(&v24, &v23, (uint64_t)&v12);
  *(_OWORD *)((char *)this + 24) = v12;
  *((void *)this + 5) = v13;
  *((void *)this + 7) = *((void *)a2 + 7);
  PCSharedCount::PCSharedCount((PCSharedCount *)&v24, (const PCSharedCount *)a2 + 8);
  PCSharedCount::operator=((uint64_t *)this + 8, &v24.value);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v24);
  *((unsigned char *)this + 48) = 0;
}

void sub_1B7BAB6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,PCSharedCount a25)
{
}

void std::vector<OZSimStateElement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    CMTime v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        OZSimStateElement::~OZSimStateElement((OZSimStateElement *)(v4 - 248));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<OZSimStateElement>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x108421084210843) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OZSimStateElement>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[248 * v4];
  return result;
}

void *std::vector<OZSimStateElement>::__init_with_size[abi:ne180100]<OZSimStateElement*,OZSimStateElement*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<OZSimStateElement>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OZSimStateElement>,OZSimStateElement*,OZSimStateElement*,OZSimStateElement*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B7BAB854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<OZSimStateElement>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OZSimStateElement>,OZSimStateElement*,OZSimStateElement*,OZSimStateElement*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      OZSimStateElement::OZSimStateElement((OZSimStateElement *)(a4 + v7), (const OZSimStateElement *)(a2 + v7));
      v7 += 248;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B7BAB8D4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 248;
    do
    {
      OZSimStateElement::~OZSimStateElement((OZSimStateElement *)(v4 + v2));
      v2 -= 248;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<OZSimStateElement>::__assign_with_size[abi:ne180100]<OZSimStateElement*,OZSimStateElement*>(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<OZSimStateElement>::__vdeallocate((void **)a1);
    if (a4 > 0x108421084210842) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xDEF7BDEF7BDEF7BELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x84210842108421) {
      unint64_t v11 = 0x108421084210842;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<OZSimStateElement>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OZSimStateElement>,OZSimStateElement*,OZSimStateElement*,OZSimStateElement*>(v8, (uint64_t)a2, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = (long long *)((char *)a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,OZSimStateElement *,OZSimStateElement *,OZSimStateElement *,0>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OZSimStateElement>,OZSimStateElement*,OZSimStateElement*,OZSimStateElement*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,OZSimStateElement *,OZSimStateElement *,OZSimStateElement *,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
      OZSimStateElement::~OZSimStateElement((OZSimStateElement *)(v16 - 248));
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B7BABA74(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B7BABA7C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<OZSimStateElement>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    PCSharedCount v3 = (char *)a1[1];
    uint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        OZSimStateElement::~OZSimStateElement((OZSimStateElement *)(v3 - 248));
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,OZSimStateElement *,OZSimStateElement *,OZSimStateElement *,0>(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      OZSimStateElement::operator=(a3, v4);
      uint64_t v4 = (long long *)((char *)v4 + 248);
      a3 += 248;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void OZSimSystemMoToFoBehavior::OZSimSystemMoToFoBehavior(OZSimSystemMoToFoBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSimulationBehavior::OZSimulationBehavior(this, a2, a3, a4);
  uint64_t v5 = 0;
  *(void *)uint64_t v6 = &unk_1F1137900;
  *(void *)(v6 + 16) = &unk_1F1137BF8;
  *(void *)(v6 + 48) = &unk_1F1137E50;
  *(void *)(v6 + 352) = 0;
  *(void *)(v6 + 360) = 0;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(void *)(v6 + 368) = 0;
  *(void *)(v6 + 376) = 0x3FF0000000000000;
  *(void *)(v6 + 392) = 0;
  *(void *)(v6 + 400) = 0;
  *(void *)(v6 + 384) = 0;
  *(void *)(v6 + 544) = 0x3FF0000000000000;
  *(void *)(v6 + 504) = 0x3FF0000000000000;
  *(void *)(v6 + 464) = 0x3FF0000000000000;
  *(void *)(v6 + 424) = 0x3FF0000000000000;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 512) = 0u;
  *(_OWORD *)(v6 + 528) = 0u;
  do
  {
    uint64_t v7 = (char *)this + v5;
    *((void *)v7 + 74) = 0;
    *((_OWORD *)v7 + 36) = 0uLL;
    *((void *)v7 + 75) = 0x3FF0000000000000;
    *((void *)v7 + 76) = 0;
    *(_OWORD *)((char *)this + v5 + 616) = 0uLL;
    v5 += 88;
  }
  while (v5 != 528);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 10, 0);
  for (uint64_t i = 632; i != 1160; i += 88)
    *((unsigned char *)this + i) = 0;
  *((_DWORD *)this + 270) = 0;
  *((void *)this + 42) = 0;
}

void sub_1B7BABDE0(_Unwind_Exception *a1)
{
  OZSimulationBehavior::~OZSimulationBehavior(v1);
  _Unwind_Resume(a1);
}

void OZSimSystemMoToFoBehavior::OZSimSystemMoToFoBehavior(OZSimSystemMoToFoBehavior *this, OZSimSystemMoToFoBehavior *a2, char a3)
{
  OZSimulationBehavior::OZSimulationBehavior(this, a2, a3);
  uint64_t v4 = 0;
  *(void *)uint64_t v5 = &unk_1F1137900;
  *(void *)(v5 + 16) = &unk_1F1137BF8;
  *(void *)(v5 + 48) = &unk_1F1137E50;
  *(void *)(v5 + 352) = 0;
  *(void *)(v5 + 360) = 0;
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 488) = 0u;
  *(void *)(v5 + 368) = 0;
  *(void *)(v5 + 376) = 0x3FF0000000000000;
  *(void *)(v5 + 392) = 0;
  *(void *)(v5 + 400) = 0;
  *(void *)(v5 + 384) = 0;
  *(void *)(v5 + 544) = 0x3FF0000000000000;
  *(void *)(v5 + 504) = 0x3FF0000000000000;
  *(void *)(v5 + 464) = 0x3FF0000000000000;
  *(void *)(v5 + 424) = 0x3FF0000000000000;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_OWORD *)(v5 + 528) = 0u;
  do
  {
    uint64_t v6 = (char *)this + v4;
    *((void *)v6 + 74) = 0;
    *((_OWORD *)v6 + 36) = 0uLL;
    *((void *)v6 + 75) = 0x3FF0000000000000;
    *((void *)v6 + 76) = 0;
    *(_OWORD *)((char *)this + v4 + 616) = 0uLL;
    v4 += 88;
  }
  while (v4 != 528);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 10, 0);
  for (uint64_t i = 632; i != 1160; i += 88)
    *((unsigned char *)this + i) = 0;
  *((_DWORD *)this + 270) = 0;
  *((void *)this + 42) = 0;
}

void sub_1B7BABF0C(_Unwind_Exception *a1)
{
  OZSimulationBehavior::~OZSimulationBehavior(v1);
  _Unwind_Resume(a1);
}

void OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior(OZSimSystemMoToFoBehavior *this)
{
  *(void *)this = &unk_1F1137900;
  *((void *)this + 2) = &unk_1F1137BF8;
  *((void *)this + 6) = &unk_1F1137E50;
  if (OZBehavior::getSceneNode(this))
  {
    uint64_t v2 = (*(uint64_t (**)(OZSimSystemMoToFoBehavior *))(*(void *)this + 320))(this);
    PCSharedCount v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 640))(v2);
    OZChannelObjectRoot::removeBehavior(v3, (uint64_t)this);
  }

  OZSimulationBehavior::~OZSimulationBehavior(this);
}

{
  uint64_t vars8;

  OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior(OZSimSystemMoToFoBehavior *this)
{
}

{
  OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior((OZSimSystemMoToFoBehavior *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior((OZSimSystemMoToFoBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSimSystemMoToFoBehavior::~OZSimSystemMoToFoBehavior((OZSimSystemMoToFoBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZSimSystemMoToFoBehavior::operator=(uint64_t a1)
{
  uint64_t result = OZSimulationBehavior::operator=();
  *(void *)(a1 + 336) = 0;
  return result;
}

uint64_t OZSimSystemMoToFoBehavior::findCachedValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, CMTime *a6, CMTime *a7)
{
  char v13 = 0;
  uint64_t v14 = a5;
  uint64_t v15 = -528;
  do
  {
    uint64_t v16 = (CMTime *)(a1 + v15);
    if (*(unsigned char *)(a1 + v15 + 1160))
    {
      uint64_t v17 = v16 + 45;
      CMTime time1 = *a6;
      CMTime time2 = v16[45];
      if (CMTimeCompare(&time1, &time2) <= 0)
      {
        memset(&v27, 0, sizeof(v27));
        CMTime time1 = *v17;
        CMTime time2 = *a6;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v27);
        CMTime v26 = v27;
        CMTime v25 = *a7;
        uint64_t SampleNumber = PC_CMTimeGetSampleNumber(&v26, &v25);
        if (SampleNumber < v14)
        {
          uint64_t v19 = a1 + v15;
          uint64_t v20 = (void *)(a2 + 8 * SampleNumber);
          void *v20 = *(void *)(a1 + v15 + 1104);
          v20[3] = *(void *)(a1 + v15 + 1112);
          v20[6] = *(void *)(a1 + v15 + 1120);
          uint64_t v21 = (void *)(a1 + v15 + 1128);
          uint64_t v22 = a3 + 32 * SampleNumber;
          if (v21 != (void *)v22)
          {
            *(void *)uint64_t v22 = *v21;
            long long v23 = *(_OWORD *)(v19 + 1136);
            *(void *)(v22 + 24) = *(void *)(v19 + 1152);
            *(_OWORD *)(v22 + 8) = v23;
          }
          char v13 = 1;
          *(unsigned char *)(a4 + SampleNumber) = 1;
        }
      }
    }
    v15 += 88;
  }
  while (v15);
  return v13 & 1;
}

uint64_t OZSimSystemMoToFoBehavior::didAddToNode(OZSimSystemMoToFoBehavior *this, OZSceneNode *a2)
{
  OZSimulationBehavior::didAddToNode((uint64_t)this, a2);
  uint64_t v4 = (void *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
  OZChannelObjectRoot::addBehavior(v4, (uint64_t)this);
  uint64_t result = (*(uint64_t (**)(OZSimSystemMoToFoBehavior *))(*(void *)this + 720))(this);
  *((void *)this + 42) = result;
  return result;
}

void OZSimSystemMoToFoBehavior::willRemove(OZSimSystemMoToFoBehavior *this)
{
  uint64_t v2 = (*(uint64_t (**)(OZSimSystemMoToFoBehavior *))(*(void *)this + 320))(this);
  PCSharedCount v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 640))(v2);
  OZChannelObjectRoot::removeBehavior(v3, (uint64_t)this);
  *((void *)this + 42) = 0;
}

double OZSimSystemMoToFoBehavior::calcParentsDerivatives(OZSimSystemMoToFoBehavior *this, OZSimulationState *a2)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  memset(&v107, 0, sizeof(v107));
  OZChannelObjectRootBase::getTimeOffset((__n128 *)(*((void *)this + 42) + 56), &v127);
  *(_OWORD *)&v111.var0.CMTime var0 = *((_OWORD *)a2 + 11);
  v111.var0.var3 = *((void *)a2 + 24);
  *(__n128 *)&v114.value = v127;
  v114.CMTimeEpoch epoch = v128;
  v4.n128_f64[0] = PC_CMTimeSaferSubtract((CMTime *)&v111, &v114, (uint64_t)&v107);
  memset(&v106, 0, sizeof(v106));
  uint64_t v5 = (*(uint64_t (**)(__n128))(**((void **)this + 42) + 272))(v4);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v5 + 336), (__n128 *)&v106);
  long long v6 = 0uLL;
  *((_OWORD *)a2 + 9) = 0u;
  *((_OWORD *)a2 + 10) = 0u;
  *((_OWORD *)a2 + 8) = 0u;
  if (!*((void *)this + 42)) {
    return *(double *)&v6;
  }
  uint64_t v7 = 0;
  double v131 = 0.0;
  long long v129 = 0uLL;
  long long v130 = 0uLL;
  __n128 v127 = 0uLL;
  long long v128 = 0uLL;
  uint64_t v126 = 0;
  long long v125 = 0uLL;
  memset(v124, 0, sizeof(v124));
  do
  {
    uint64_t v8 = (CMTimeValue *)((char *)&v114.value + v7);
    *uint64_t v8 = 0x3FF0000000000000;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    v7 += 32;
  }
  while (v7 != 96);
  char v105 = 0;
  __int16 v104 = 0;
  long long v102 = 0uLL;
  int64_t v103 = 0;
  CMTime v101 = v107;
  CMTime v100 = v106;
  PC_CMTimeFloorToSampleDuration(&v101, &v100, (uint64_t)&v102);
  memset(&v99, 0, sizeof(v99));
  *(_OWORD *)&v111.var0.CMTime var0 = v102;
  v111.var0.var3 = v103;
  CMTime v110 = v106;
  PC_CMTimeSaferSubtract((CMTime *)&v111, &v110, (uint64_t)&v99);
  unsigned int v98 = 3;
  uint64_t v9 = *((void *)this + 42);
  if (*((unsigned char *)this + 344))
  {
    v113.CMTime var0 = v9 + 1352;
    *(void *)&v113.var1 = v9 + 1504;
    v113.var3 = v9 + 1952;
    v112[0] = v9 + 2240;
    v112[1] = v9 + 2392;
    uint64_t v93 = v9;
    v112[2] = v9 + 2544;
    CMTime v97 = v99;
    CMTime v96 = v106;
    double v95 = (CMTime *)&v111;
    if (OZSimSystemMoToFoBehavior::findCachedValues((uint64_t)this, (uint64_t)&v127, (uint64_t)&v114, (uint64_t)&v104, 3, &v97, &v96))
    {
      CMTime v94 = v99;
      if (v98)
      {
        unint64_t v10 = 0;
        unint64_t v11 = &v127;
        uint64_t v12 = v124;
        do
        {
          if (!*((unsigned char *)&v104 + v10))
          {
            uint64_t v13 = 0;
            CMTimeValue v14 = (CMTimeValue)v11;
            do
            {
              v110.value = v14;
              LODWORD(v109.value) = 1;
              OZChannel::getSamples(*(OZChannel **)((char *)&v113.var0 + v13), &v94, &v106, (unsigned int *)&v109, &v95, (double **)&v110);
              v13 += 8;
              v14 += 24;
            }
            while (v13 != 24);
            uint64_t v15 = 0;
            CMTimeValue v16 = (CMTimeValue)v12;
            do
            {
              v110.value = v16;
              LODWORD(v109.value) = 1;
              OZChannel::getSamples((OZChannel *)v112[v15++], &v94, &v106, (unsigned int *)&v109, &v95, (double **)&v110);
              v16 += 24;
            }
            while (v15 != 3);
            uint64_t v17 = (CMTimeValue *)v124 + v10;
            CMTimeValue v18 = *v17;
            CMTimeValue v19 = v17[3];
            CMTimeValue v20 = v17[6];
            uint64_t v21 = &v114.value + 4 * v10;
            CMTimeValue *v21 = v18;
            v21[1] = v19;
            v21[2] = v20;
            v21[3] = 0x4010000000000000;
          }
          CMTime v109 = v94;
          CMTime v108 = v106;
          PC_CMTimeSaferAdd(&v109, &v108, (uint64_t)&v110);
          ++v10;
          CMTime v94 = v110;
          unint64_t v11 = (__n128 *)((char *)v11 + 8);
          uint64_t v12 = (_OWORD *)((char *)v12 + 8);
        }
        while (v10 < v98);
      }
      uint64_t v9 = v93;
    }
    else
    {
      uint64_t v29 = 0;
      unint64_t v30 = &v127;
      do
      {
        v110.value = (CMTimeValue)v30;
        OZChannel::getSamples(*(OZChannel **)((char *)&v113.var0 + v29), &v99, &v106, &v98, &v95, (double **)&v110);
        unint64_t v30 = (__n128 *)((char *)v30 + 24);
        v29 += 8;
      }
      while (v29 != 24);
      uint64_t v31 = 0;
      unsigned int v32 = v124;
      do
      {
        v110.value = (CMTimeValue)v32;
        OZChannel::getSamples((OZChannel *)v112[v31], &v99, &v106, &v98, &v95, (double **)&v110);
        unsigned int v32 = (_OWORD *)((char *)v32 + 24);
        ++v31;
      }
      while (v31 != 3);
      uint64_t v33 = 0;
      p_CMTimeEpoch epoch = &v114.epoch;
      uint64_t v9 = v93;
      do
      {
        CMTimeEpoch v35 = *(void *)((char *)&v124[1] + v33 + 8);
        CMTimeEpoch v36 = *(void *)((char *)&v125 + v33);
        *(p_epoch - 2) = *(void *)((char *)v124 + v33);
        *(p_epoch - 1) = v35;
        *p_CMTimeEpoch epoch = v36;
        p_epoch[1] = 0x4010000000000000;
        v33 += 8;
        p_epoch += 4;
      }
      while (v33 != 24);
    }
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = *((void *)this + 44);
    uint64_t v24 = *((void *)this + 45);
    uint64_t v25 = *((void *)this + 46);
    CMTime v26 = (CMTime *)((char *)this + 376);
    CMTime v27 = (void *)&v128 + 1;
    do
    {
      *(v27 - 3) = v23;
      void *v27 = v24;
      v27[3] = v25;
      uint64_t v28 = (char *)&v114 + v22;
      if ((CMTime *)((char *)&v114 + v22) != v26)
      {
        *(void *)uint64_t v28 = v26->value;
        *(_OWORD *)(v28 + 8) = *((_OWORD *)this + 24);
        *((void *)v28 + 3) = *((void *)this + 50);
      }
      v22 += 32;
      ++v27;
    }
    while (v22 != 96);
  }
  uint64_t v37 = *(const void **)(v9 + 960);
  if (!v37) {
    goto LABEL_41;
  }
  if (!v38) {
    goto LABEL_41;
  }
  if (*((unsigned char *)this + 416))
  {
    double v39 = v38;
    memset(&v113, 0, sizeof(v113));
    OZChannelObjectRootBase::getTimeOffset((__n128 *)(*((void *)this + 42) + 56), (__n128 *)&v109);
    v111.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v99;
    CMTime v110 = v109;
    PC_CMTimeSaferAdd((CMTime *)&v111, &v110, (uint64_t)&v113);
    OZRenderState::OZRenderState(&v111);
    if (v98)
    {
      unint64_t v40 = 0;
      uint64_t v41 = &v127;
      do
      {
        if (!*((unsigned char *)&v104 + v40))
        {
          v111.CMTime var0 = v113;
          (*(void (**)(void *, __n128 *, uint64_t *, __n128 *, OZRenderState *))(*(void *)v39 + 1224))(v39, v41, &v41[1].n128_i64[1], v41 + 3, &v111);
        }
        CMTime v109 = (CMTime)v113;
        CMTime v108 = v106;
        PC_CMTimeSaferAdd(&v109, &v108, (uint64_t)&v110);
        ++v40;
        $3CC8671D27C23BF42ADDB32F2B5E48AE v113 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v110;
        uint64_t v41 = (__n128 *)((char *)v41 + 8);
      }
      while (v40 < v98);
    }
LABEL_41:
    CMTime v109 = v99;
    if (v98)
    {
      unint64_t v47 = 0;
      double v48 = (uint64_t *)&v128 + 1;
      double v49 = &v114;
      do
      {
        if (!*((unsigned char *)&v104 + v47))
        {
          int v50 = *((_DWORD *)this + 270);
          *((_DWORD *)this + 270) = (v50 + 1) % 6;
          uint64_t v51 = (CMTime *)((char *)this + 88 * v50);
          v51[23] = v109;
          uint64_t v52 = *v48;
          CMTimeEpoch v53 = v48[3];
          v51[24].value = *(v48 - 3);
          *(void *)&v51[24].timescale = v52;
          v51[24].CMTimeEpoch epoch = v53;
          double v54 = v51 + 25;
          if (v49 != v54)
          {
            v54->value = v49->value;
            double v55 = (char *)this + 88 * v50;
            *((_OWORD *)v55 + 38) = *(_OWORD *)&v49->timescale;
            *((void *)v55 + 78) = v49[1].value;
          }
          *((unsigned char *)this + 88 * v50 + 632) = 1;
        }
        v111.CMTime var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v109;
        CMTime v110 = v106;
        PC_CMTimeSaferAdd((CMTime *)&v111, &v110, (uint64_t)&v109);
        ++v47;
        double v49 = (CMTime *)((char *)v49 + 32);
        ++v48;
      }
      while (v47 < v98);
    }
    goto LABEL_48;
  }
  unint64_t v42 = v98;
  if (v98)
  {
    unint64_t v43 = 0;
    do
    {
      if (!*((unsigned char *)&v104 + v43))
      {
        int v44 = &v127.n128_i64[v43];
        int64_t v45 = v44[3];
        int64_t v46 = v44[6];
        v111.var0.CMTime var0 = *v44;
        *(void *)&v111.var0.var1 = v45;
        v111.var0.var3 = v46;
        PCMatrix44Tmpl<double>::transform<double>((double *)this + 53, (double *)&v111.var0.var0, (double *)&v111.var0.var0);
        int64_t *v44 = v111.var0.var0;
        v44[3] = *(void *)&v111.var0.var1;
        v44[6] = v111.var0.var3;
        unint64_t v42 = v98;
      }
      ++v43;
    }
    while (v43 < v42);
    goto LABEL_41;
  }
LABEL_48:
  double v56 = *((double *)this + 51);
  unint64_t v57 = v127.n128_u64[0];
  double v58 = v56 * (v127.n128_f64[1] - v127.n128_f64[0]);
  uint64_t v59 = *((void *)&v128 + 1);
  double v60 = v56 * (*(double *)&v129 - *((double *)&v128 + 1));
  uint64_t v61 = v130;
  double v62 = v56 * (*((double *)&v130 + 1) - *(double *)&v130);
  double v63 = v56 * (v56 * (v131 - *((double *)&v130 + 1)) - v62);
  double v64 = v56 * (v56 * (*((double *)&v129 + 1) - *(double *)&v129) - v60) + *((double *)a2 + 17);
  *((double *)a2 + 16) = *((double *)a2 + 16) + v56 * (v56 * (*(double *)&v128 - v127.n128_f64[1]) - v58);
  *((double *)a2 + 17) = v64;
  *((double *)a2 + 18) = v63 + *((double *)a2 + 18);
  *(void *)a2 = v57;
  *((void *)a2 + 1) = v59;
  *((void *)a2 + 2) = v61;
  *((double *)a2 + 7) = v58;
  *((double *)a2 + 8) = v60;
  *((double *)a2 + 9) = v62;
  double v65 = (v56 + v56) * (v116 - *(double *)&v114.value);
  double v66 = (v56 + v56) * (v117 - *(double *)&v114.timescale);
  double v67 = (v56 + v56) * (v118 - *(double *)&v114.epoch);
  double v68 = (v56 + v56) * (v119 - v115);
  double v69 = *(double *)&v114.value * v68 - v65 * v115;
  double v70 = *(double *)&v114.value * v66 - *(double *)&v114.timescale * v65 + *(double *)&v114.epoch * v68 - v115 * v67;
  double v71 = *(double *)&v114.value * v67 - v65 * *(double *)&v114.epoch + v66 * v115 - *(double *)&v114.timescale * v68;
  double v72 = *(double *)&v114.timescale * v67 - *(double *)&v114.epoch * v66 + v69;
  double v73 = (v56 + v56) * (v120 - v116);
  double v74 = (v56 + v56) * (v121 - v117);
  double v75 = (v56 + v56) * (v122 - v118);
  double v76 = (v56 + v56) * (v123 - v119);
  double v77 = v116 * v76 - v119 * v73;
  double v78 = v116 * v74 - v117 * v73 + v118 * v76 - v119 * v75;
  double v79 = v116 * v75 - v118 * v73 + v119 * v74 - v117 * v76;
  double v80 = v117 * v75 - v118 * v74 + v77;
  double v81 = v79 * 0.0;
  double v82 = v80 * 0.0 + v78 + v79 * 0.0;
  double v83 = v78 * 0.0;
  double v84 = v80 * 0.0 + v79 + v83;
  double v85 = v80 + v83 + v81;
  double v86 = v84 - (v72 * 0.0 + v71 + v70 * 0.0);
  double v87 = v85 - (v72 + v70 * 0.0 + v71 * 0.0);
  double v88 = v56 * (v82 - (v72 * 0.0 + v70 + v71 * 0.0));
  double v89 = v56 * v86;
  double v90 = v56 * v87;
  if (&v114 != (CMTime *)((char *)a2 + 24))
  {
    *((CMTime *)a2 + 1) = v114;
    *((double *)a2 + 6) = v115;
  }
  *((double *)a2 + 10) = v70;
  *((double *)a2 + 11) = v71;
  *((double *)a2 + 12) = v72;
  *((double *)a2 + 13) = v70;
  *((double *)a2 + 14) = v71;
  *((double *)a2 + 15) = v72;
  double v91 = v89 + *((double *)a2 + 20);
  *((double *)a2 + 19) = v88 + *((double *)a2 + 19);
  *((double *)a2 + 20) = v91;
  *(double *)&long long v6 = v90 + *((double *)a2 + 21);
  *((void *)a2 + 21) = v6;
  return *(double *)&v6;
}

void OZSimSystemMoToFoBehavior::accumForces(OZSimSystemMoToFoBehavior *this, OZSimStateArray *a2, OZTransformNode *a3)
{
  if (*((void *)this + 42)
    || ((*(void (**)(OZSimSystemMoToFoBehavior *, OZSimStateArray *, OZTransformNode *))(*(void *)this
                                                                                                  + 712))(this, a2, a3), *((void *)this + 42)))
  {
    if (*((unsigned char *)this + 344) || *((unsigned char *)this + 416))
    {
      long long v46 = *(_OWORD *)((char *)a2 + 24);
      uint64_t v47 = *((void *)a2 + 5);
      double v5 = (*(double (**)(OZSimSystemMoToFoBehavior *, long long *, OZTransformNode *))(*(void *)this + 728))(this, &v46, a3);
      if (fabs(v5) >= 0.0000001)
      {
        double v29 = v5;
        double v30 = 0.0;
        double v31 = 0.0;
        double v32 = 0.0;
        uint64_t v33 = 0x3FF0000000000000;
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        memset(v41, 0, 32);
        float64x2_t v6 = *(float64x2_t *)((char *)a2 + 24);
        uint64_t v42 = *((void *)a2 + 5);
        uint64_t v43 = 0;
        v41[2] = v6;
        OZSimSystemMoToFoBehavior::calcParentsDerivatives(this, (OZSimulationState *)&v30);
        if (*(void *)a2 != *((void *)a2 + 1))
        {
          uint64_t v7 = (double *)(*(void *)a2 + 168);
          do
          {
            uint64_t v8 = v7 - 21;
            double v9 = *(v7 - 21) - v30;
            double v10 = *(v7 - 20) - v31;
            double v11 = *(v7 - 19) - v32;
            double v12 = sqrt(v9 * v9 + v10 * v10 + v11 * v11);
            if (v12 <= 0.1)
            {
              double v25 = *((double *)&v40 + 1);
              double v24 = *(double *)&v40;
              double v26 = v41[0].f64[0];
            }
            else
            {
              double v13 = v11 * v41[1].f64[0] - v10 * v41[1].f64[1];
              double v14 = v9 * v41[1].f64[1] - v11 * v41[0].f64[1];
              double v15 = v10 * v41[0].f64[1] - v9 * v41[1].f64[0];
              double v16 = sqrt(v15 * v15 + v13 * v13 + v14 * v14);
              if (v16 <= -0.000000100000001 || v16 >= 0.000000100000001)
              {
                double v13 = v13 / v16;
                double v14 = v14 / v16;
                double v15 = v15 / v16;
              }
              double v17 = v10 + *((double *)&v37 + 1);
              double v18 = v11 + *(double *)&v38;
              double v19 = v9 + *(double *)&v37;
              float64_t v20 = v41[0].f64[1] / v12 * v13;
              float64_t v21 = v41[1].f64[0] / v12 * v14;
              double v22 = v19 * *(double *)&v38 - *(double *)&v37 * v18 + *((double *)&v40 + 1);
              double v23 = *(double *)&v37 * v17 - *((double *)&v37 + 1) * v19 + v41[0].f64[0];
              double v24 = v20 + *((double *)&v37 + 1) * v18 - *(double *)&v38 * v17 + *(double *)&v40;
              double v25 = v21 + v22;
              double v26 = v41[1].f64[1] / v12 * v15 + v23;
            }
            double v27 = *(v7 - 4);
            *(v7 - 5) = v29 * v24 + *(v7 - 5);
            *(v7 - 4) = v29 * v25 + v27;
            *(v7 - 3) = v29 * v26 + *(v7 - 3);
            if ((*(unsigned int (**)(OZSimSystemMoToFoBehavior *))(*(void *)this + 736))(this))
            {
              double v28 = v29 * v41[1].f64[1];
              *((float64x2_t *)v7 - 1) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)((char *)v41 + 8), v29), *(float64x2_t *)(v7 - 2));
              *uint64_t v7 = v28 + *v7;
            }
            v7 += 31;
          }
          while (v8 + 31 != *((double **)a2 + 1));
        }
      }
    }
  }
}

void OZSimSystemMoToFoBehavior::calcParentsInitialValues(OZSimSystemMoToFoBehavior *this, OZSimulationState *a2)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  memset(&v70, 0, sizeof(v70));
  OZChannelObjectRootBase::getTimeOffset((__n128 *)(*((void *)this + 42) + 56), &v81);
  *(_OWORD *)&v74.var0.CMTime var0 = *((_OWORD *)a2 + 11);
  v74.var0.var3 = *((void *)a2 + 24);
  *(__n128 *)&v56.value = v81;
  v56.CMTimeEpoch epoch = v82;
  v4.n128_f64[0] = PC_CMTimeSaferSubtract((CMTime *)&v74, &v56, (uint64_t)&v70);
  memset(&v69, 0, sizeof(v69));
  uint64_t v5 = (*(uint64_t (**)(__n128))(**((void **)this + 42) + 272))(v4);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v5 + 336), (__n128 *)&v69);
  *((_OWORD *)a2 + 9) = 0u;
  *((_OWORD *)a2 + 10) = 0u;
  *((_OWORD *)a2 + 8) = 0u;
  LOWORD(v56.value) = 1;
  int v61 = 0;
  uint64_t v62 = 0;
  char v63 = 0;
  long long v57 = *MEMORY[0x1E4F1FA48];
  uint64_t v6 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(void *)&v56.timescale = 0;
  uint64_t v58 = v6;
  long long v59 = v57;
  uint64_t v60 = v6;
  int v66 = 0;
  double v67 = 0;
  char v68 = 0;
  *(_OWORD *)&v64.value = *MEMORY[0x1E4F1FA48];
  long long v7 = *MEMORY[0x1E4F1FA48];
  v64.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v65.CMTimeEpoch epoch = v64.epoch;
  *(_OWORD *)&v65.value = v7;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  __n128 v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v54 = 0uLL;
  int64_t v55 = 0;
  CMTime v53 = v70;
  CMTime v52 = v69;
  PC_CMTimeFloorToSampleDuration(&v53, &v52, (uint64_t)&v54);
  memset(&v51, 0, sizeof(v51));
  *(_OWORD *)&v74.var0.CMTime var0 = v54;
  v74.var0.var3 = v55;
  v75[0] = v69;
  PC_CMTimeSaferSubtract((CMTime *)&v74, v75, (uint64_t)&v51);
  uint64_t v8 = 0;
  CMTime v64 = v51;
  unsigned int v50 = 2;
  int v66 = 2;
  CMTime v65 = v69;
  uint64_t v9 = *((void *)this + 42);
  v77[0] = v9 + 1352;
  v77[1] = v9 + 1504;
  v77[2] = v9 + 1952;
  v76[0] = v9 + 2240;
  v76[1] = v9 + 2392;
  v76[2] = v9 + 2544;
  double v10 = &v81;
  double v49 = v75;
  do
  {
    v74.var0.CMTime var0 = (int64_t)v10;
    double v67 = v10;
    OZChannel::getSamples((OZChannel *)v77[v8++], &v51, &v69, &v50, &v49, (double **)&v74);
    ++v10;
  }
  while (v8 != 3);
  uint64_t v11 = 0;
  double v12 = (__n128 *)&v78;
  do
  {
    v74.var0.CMTime var0 = (int64_t)v12;
    double v67 = v12;
    OZChannel::getSamples((OZChannel *)v76[v11++], &v51, &v69, &v50, &v49, (double **)&v74);
    ++v12;
  }
  while (v11 != 3);
  double v13 = *(double *)&v78;
  double v14 = *(double *)&v79;
  double v15 = *(double *)&v80;
  if (!*((unsigned char *)this + 344))
  {
    uint64_t v16 = v82;
    uint64_t v17 = v83;
    *((void *)this + 44) = v81.n128_u64[0];
    *((void *)this + 45) = v16;
    *((void *)this + 46) = v17;
    *((double *)this + 47) = v13;
    *((double *)this + 48) = v14;
    *((double *)this + 49) = v15;
    *((void *)this + 50) = 0x4010000000000000;
  }
  double v18 = *((double *)&v78 + 1);
  double v19 = *((double *)&v79 + 1);
  double v20 = *((double *)&v80 + 1);
  float64_t v21 = *(const void **)(v9 + 960);
  if (v21)
  {
    if (v22)
    {
      double v23 = v22;
      OZRenderState::OZRenderState(&v74);
      memset(&v48, 0, sizeof(v48));
      OZChannelObjectRootBase::getTimeOffset((__n128 *)(*((void *)this + 42) + 56), (__n128 *)&v71);
      CMTime v73 = v51;
      CMTime v72 = v71;
      PC_CMTimeSaferAdd(&v73, &v72, (uint64_t)&v48);
      if (v50)
      {
        unint64_t v24 = 0;
        double v25 = &v81;
        do
        {
          v74.CMTime var0 = v48;
          (*(void (**)(void *, __n128 *, __n128 *, __n128 *, OZRenderState *))(*(void *)v23 + 1224))(v23, v25, v25 + 1, v25 + 2, &v74);
          CMTime v72 = (CMTime)v48;
          CMTime v71 = v69;
          PC_CMTimeSaferAdd(&v72, &v71, (uint64_t)&v73);
          $3CC8671D27C23BF42ADDB32F2B5E48AE v48 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v73;
          ++v24;
          double v25 = (__n128 *)((char *)v25 + 8);
        }
        while (v24 < v50);
      }
    }
  }
  uint64_t v26 = (*(uint64_t (**)(OZSimSystemMoToFoBehavior *))(*(void *)this + 336))(this);
  uint64_t v27 = 0;
  double v28 = *(double *)(v26 + 368);
  double v29 = &v81.n128_f64[1];
  do
  {
    *(double *)((char *)&v74.var0.var0 + v27) = v28 * (*v29 - *(v29 - 1));
    v27 += 8;
    v29 += 2;
  }
  while (v27 != 24);
  uint64_t v30 = v82;
  uint64_t v31 = v83;
  *(void *)a2 = v81.n128_u64[0];
  *((void *)a2 + 1) = v30;
  double v32 = *((double *)a2 + 10);
  double v33 = *((double *)a2 + 9) + *(double *)&v74.var0.var3;
  *(float64x2_t *)((char *)a2 + 56) = vaddq_f64(*(float64x2_t *)((char *)a2 + 56), *(float64x2_t *)&v74.var0.var0);
  *((void *)a2 + 2) = v31;
  *((double *)a2 + 3) = v13;
  double v34 = v28 + v28;
  double v35 = v34 * (v18 - v13);
  double v36 = v34 * (v19 - v14);
  double v37 = v34 * (v20 - v15);
  double v38 = v34 * 0.0;
  double v39 = v13 * v36 - v14 * v35;
  double v40 = v13 * v37 - v15 * v35;
  double v41 = v13 * v38 - v35 * 4.0;
  double v42 = v15 * v38 - v37 * 4.0;
  *((double *)a2 + 4) = v14;
  *((double *)a2 + 5) = v15;
  *((void *)a2 + 6) = 0x4010000000000000;
  double v43 = v40 + v36 * 4.0 - v14 * v38;
  double v44 = v14 * v37 - v15 * v36 + v41;
  *((double *)a2 + 9) = v33;
  *((double *)a2 + 10) = v32 + v39 + v42;
  double v45 = v44 + *((double *)a2 + 12);
  *((double *)a2 + 11) = *((double *)a2 + 11) + v43;
  *((double *)a2 + 12) = v45;
  double v46 = (v39 + v42) * 0.0;
  double v47 = *((double *)a2 + 14);
  *((double *)a2 + 13) = *((double *)a2 + 13) + v44 * 0.0 + v39 + v42 + v43 * 0.0;
  *((double *)a2 + 14) = v44 * 0.0 + v43 + v46 + v47;
  *((double *)a2 + 15) = v44 + v46 + v43 * 0.0 + *((double *)a2 + 15);
  OZCurveNodeParam::~OZCurveNodeParam((OZCurveNodeParam *)&v56);
}

void sub_1B7BAD730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void OZSimSystemMoToFoBehavior::accumInitialValues(OZSimSystemMoToFoBehavior *this, OZSimStateArray *a2, uint64_t a3, OZTransformNode *a4)
{
  int v4 = a3;
  if (*((void *)this + 42)
    || ((*(void (**)(OZSimSystemMoToFoBehavior *, OZSimStateArray *, uint64_t, OZTransformNode *))(*(void *)this + 712))(this, a2, a3, a4), *((void *)this + 42)))
  {
    long long v54 = *(_OWORD *)((char *)a2 + 24);
    uint64_t v55 = *((void *)a2 + 5);
    double v39 = (*(double (**)(OZSimSystemMoToFoBehavior *, long long *, uint64_t, OZTransformNode *))(*(void *)this + 728))(this, &v54, a3, a4);
    if (fabs(v39) >= 0.0000001)
    {
      float64_t v44 = 0.0;
      double v45 = 0.0;
      float64_t v46 = 0.0;
      uint64_t v47 = 0x3FF0000000000000;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      long long v48 = 0u;
      memset(v49, 0, 128);
      float64x2_t v7 = *(float64x2_t *)((char *)a2 + 24);
      uint64_t v50 = *((void *)a2 + 5);
      uint64_t v51 = 0;
      v49[8] = v7;
      OZSimSystemMoToFoBehavior::calcParentsInitialValues(this, (OZSimulationState *)&v44);
      uint64_t v8 = *((void *)a2 + 1);
      if (v8 != *(void *)a2 && v4 >= 1)
      {
        v9.f64[0] = v46;
        v9.f64[1] = v44;
        float64x2_t v41 = v9;
        double v10 = v45;
        float64x2_t v38 = *(float64x2_t *)((char *)v49 + 8);
        float64x2_t v40 = vmulq_n_f64(*(float64x2_t *)((char *)v49 + 8), v39);
        double v11 = v49[1].f64[1];
        double v12 = v39 * v49[1].f64[1];
        v13.f64[1] = v49[3].f64[0];
        double v14 = v39 * v49[2].f64[0];
        float64x2_t v37 = *(float64x2_t *)((char *)&v49[2] + 8);
        v13.f64[0] = v49[2].f64[0];
        double v15 = v39 * v49[4].f64[1];
        float64x2_t v35 = v49[2];
        float64x2_t v36 = v13;
        uint64_t v16 = v8 - 248;
        int v17 = 1;
        float64x2_t v42 = vmulq_n_f64(*(float64x2_t *)((char *)&v49[3] + 8), v39);
        float64x2_t v43 = vmulq_n_f64(*(float64x2_t *)((char *)&v49[2] + 8), v39);
        do
        {
          v18.f64[0] = *(float64_t *)(v16 + 16);
          v18.f64[1] = *(float64_t *)v16;
          float64x2_t v19 = vsubq_f64(v18, v41);
          float64x2_t v20 = vmulq_f64(v19, v19);
          BOOL v21 = sqrt(v20.f64[1] + (*(double *)(v16 + 8) - v10) * (*(double *)(v16 + 8) - v10) + v20.f64[0]) <= 0.1;
          double v22 = v12;
          float64x2_t v23 = v40;
          if (!v21)
          {
            v24.f64[1] = v19.f64[1];
            v24.f64[0] = *(double *)(v16 + 8) - v10;
            float64x2_t v25 = vmulq_f64(v24, v35);
            float64x2_t v26 = vmulq_f64(v19, v37);
            v19.f64[1] = *(double *)(v16 + 8) - v10;
            int8x16_t v27 = (int8x16_t)vmulq_f64(v19, v36);
            float64x2_t v23 = vaddq_f64(v38, vmulq_n_f64(vsubq_f64(v26, (float64x2_t)vextq_s8(v27, v27, 8uLL)), v39));
            double v22 = v39 * vsubq_f64(v25, (float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1)).f64[0] + v11;
          }
          *(float64x2_t *)(v16 + 56) = vaddq_f64(v23, *(float64x2_t *)(v16 + 56));
          *(double *)(v16 + 72) = v22 + *(double *)(v16 + 72);
          char v28 = (*(uint64_t (**)(OZSimSystemMoToFoBehavior *))(*(void *)this + 736))(this);
          double v29 = *(double *)(v16 + 80);
          if (v28)
          {
            double v29 = v14 + v29;
            float64x2_t v31 = v42;
            float64x2_t v30 = v43;
            float64x2_t v32 = vaddq_f64(v43, *(float64x2_t *)(v16 + 88));
            float64x2_t v33 = vaddq_f64(v42, *(float64x2_t *)(v16 + 104));
            double v34 = v15 + *(double *)(v16 + 120);
          }
          else
          {
            float64x2_t v32 = *(float64x2_t *)(v16 + 88);
            float64x2_t v33 = *(float64x2_t *)(v16 + 104);
            double v34 = *(double *)(v16 + 120);
            float64x2_t v31 = v42;
            float64x2_t v30 = v43;
          }
          *(double *)(v16 + 80) = v14 + v29;
          *(float64x2_t *)(v16 + 88) = vaddq_f64(v30, v32);
          *(float64x2_t *)(v16 + 104) = vaddq_f64(v31, v33);
          *(double *)(v16 + 120) = v15 + v34;
          if (v16 == *(void *)a2) {
            break;
          }
          v16 -= 248;
          BOOL v21 = v17++ < v4;
        }
        while (v21);
      }
    }
  }
}

uint64_t OZSimSystemMoToFoBehavior::isSceneNodeAnimated(OZSimSystemMoToFoBehavior *this, OZSceneNode *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  if (!v2) {
    return 0;
  }
  PCSharedCount v3 = v2;
  if (((*(uint64_t (**)(void))(v2[152] + 560))() & 1) != 0
    || ((*(uint64_t (**)(void *))(v3[263] + 560))(v3 + 263) & 1) != 0)
  {
    return 1;
  }
  uint64_t v4 = 1;
  if ((OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 169), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 188), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 244), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 280), (const OZChannelBase *)1) & 1) != 0
    || (OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 299), (const OZChannelBase *)1) & 1) != 0)
  {
    return v4;
  }

  return OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)(v3 + 318), (const OZChannelBase *)1);
}

uint64_t OZSimSystemMoToFoBehavior::updateCache(OZSimSystemMoToFoBehavior *this)
{
  *((unsigned char *)this + 344) = 1;
  *((unsigned char *)this + 416) = 1;
  uint64_t result = (*(uint64_t (**)(OZSimSystemMoToFoBehavior *))(*(void *)this + 336))(this);
  if (result)
  {
    *((void *)this + 51) = *(void *)(result + 368);
    PCSharedCount v3 = (OZSceneNode *)*((void *)this + 42);
    if (v3
      || (uint64_t result = (*(uint64_t (**)(OZSimSystemMoToFoBehavior *))(*(void *)this + 720))(this),
          PCSharedCount v3 = (OZSceneNode *)result,
          (*((void *)this + 42) = result) != 0))
    {
      uint64_t result = OZSimSystemMoToFoBehavior::isSceneNodeAnimated((OZSimSystemMoToFoBehavior *)result, v3);
      if ((result & 1) == 0) {
        *((unsigned char *)this + 344) = 0;
      }
      uint64_t v4 = v3;
      while (v4)
      {
        uint64_t v4 = (OZSceneNode *)*((void *)v4 + 120);
        uint64_t result = OZSimSystemMoToFoBehavior::isSceneNodeAnimated((OZSimSystemMoToFoBehavior *)result, v4);
        if (result)
        {
          *((unsigned char *)this + 416) = 1;
          goto LABEL_13;
        }
      }
      *((unsigned char *)this + 416) = 0;
      OZRenderState::OZRenderState(&v6);
      uint64_t result = *((void *)v3 + 120);
      *((void *)this + 68) = 0x3FF0000000000000;
      *((void *)this + 63) = 0x3FF0000000000000;
      *((void *)this + 58) = 0x3FF0000000000000;
      *((void *)this + 53) = 0x3FF0000000000000;
      *((_OWORD *)this + 27) = 0u;
      *((_OWORD *)this + 28) = 0u;
      *(_OWORD *)((char *)this + 472) = 0u;
      *(_OWORD *)((char *)this + 488) = 0u;
      *((_OWORD *)this + 32) = 0u;
      *((_OWORD *)this + 33) = 0u;
      if (result)
      {
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t, char *, OZRenderState *))(*(void *)result + 1256))(result, (char *)this + 424, &v6);
        }
      }
LABEL_13:
      for (uint64_t i = 0; i != 528; i += 88)
        *((unsigned char *)this + i + 632) = 0;
      *((_DWORD *)this + 270) = 0;
    }
  }
  return result;
}

uint64_t OZSimSystemMoToFoBehavior::updateTransformNode(OZSimSystemMoToFoBehavior *this, OZTransformNode *a2)
{
  *((void *)this + 42) = a2;
  return (*(uint64_t (**)(void))(*(void *)this + 712))();
}

uint64_t OZPolygonAA::getInstance(OZPolygonAA *this)
{
  if (OZPolygonAA::getInstance(void)::once != -1) {
    dispatch_once(&OZPolygonAA::getInstance(void)::once, &__block_literal_global_73);
  }
  return OZPolygonAA::_instance;
}

void ___ZN11OZPolygonAA11getInstanceEv_block_invoke()
{
}

void sub_1B7BADE84(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C4004C6E980);
  _Unwind_Resume(a1);
}

void OZPolygonAA::~OZPolygonAA(OZPolygonAA *this)
{
  *(void *)this = &unk_1F1137EE0;
  PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v4);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v4);
  PCSharedCount v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  PCSingleton::~PCSingleton(this);
}

{
  uint64_t vars8;

  OZPolygonAA::~OZPolygonAA(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZPolygonAA::getEdgeAATexture(OZPolygonAA *this)
{
  uint64_t result = *((void *)this + 1);
  if (!result)
  {
    PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v3);
    OZPolygonAA::createEdgeAATexture(this);
  }
  return result;
}

void sub_1B7BADFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)va);
  _Unwind_Resume(a1);
}

void OZPolygonAA::createEdgeAATexture(OZPolygonAA *this)
{
}

void sub_1B7BAE0F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void OZPolygonAA::generateEdgeAAData(OZPolygonAA *this, unsigned __int8 *a2)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = v2 - 1;
  if (v2 >= 1)
  {
    double v6 = *((double *)this + 4) / (double)v3;
    do
    {
      double v7 = v6 * (double)v3;
      double v8 = 0.0;
      if (v7 < 2.0) {
        double v8 = (exp(fabs(v7 * v7) * -1.5) + -0.00247875218) / 0.997521248;
      }
      uint64_t v9 = *((void *)this + 3);
      if (v9 >= 1)
      {
        unint64_t v10 = v9 + 1;
        do
        {
          double v11 = v6 * (double)(uint64_t)(v10 - 2);
          long double v12 = 0.0;
          if (v11 >= 2.0 || (long double v12 = (exp(fabs(v11 * v11) * -1.5) + -0.00247875218) / 0.997521248, v13 = 0.0, v12 >= 0.0)) {
            double v13 = pow(v12, 1.0 / *((double *)this + 5));
          }
          *a2++ = vcvtmd_s64_f64(v8 * v13 * 255.0 + 0.5 + 0.0000001);
          --v10;
        }
        while (v10 > 1);
      }
    }
    while (v3-- > 0);
  }
}

void OZDocument::OZDocument(OZDocument *this)
{
  *(void *)this = &unk_1F1137F28;
  *((void *)this + 1) = &unk_1F1137F80;
  *((void *)this + 2) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 4);
  *((void *)this + 5) = (char *)this + 40;
  *((void *)this + 6) = (char *)this + 40;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 11);
  *((_DWORD *)this + 24) = 0;
  *((_WORD *)this + 50) = 0;
  *((_DWORD *)this + 26) = 0;
  *((unsigned char *)this + 108) = 0;
  *((_DWORD *)this + 28) = 3;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 15);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 16);
  *((_DWORD *)this + 34) = 0;
  PCString::PCString((PCString *)this + 18, "");
  *((void *)this + 21) = 0;
  *((void *)this + 19) = 0;
  *((unsigned char *)this + 160) = 0;
  *((unsigned char *)this + 256) = 0;
  *((void *)this + 22) = 0;
  *((unsigned char *)this + 184) = 0;
  *(void *)((char *)this + 260) = 0xD00000005;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 34);
  *((unsigned char *)this + 280) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *(_OWORD *)((char *)this + 313) = 0u;
  PCURL::PCURL((OZDocument *)((char *)this + 344), "", 0);
  if (OZDocument::OZDocument(BOOL)::onceToken != -1) {
    dispatch_once(&OZDocument::OZDocument(BOOL)::onceToken, &__block_literal_global_74);
  }
  *((void *)this + 42) = atomic_fetch_add((atomic_ullong *volatile)&OZDocument::_nextTransientDocumentID, 1uLL);
  operator new();
}

void sub_1B7BAE558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PCString *a9, PCString *a10, uint64_t a11, uint64_t a12)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10A1C40A4A8B666);
  PCURL::~PCURL(v19);
  a12 = v12 + 296;
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  PCString::~PCString(v18);
  PCString::~PCString(v17);
  PCString::~PCString(v16);
  PCString::~PCString(v15);
  PCString::~PCString(a9);
  a12 = v12 + 64;
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::__list_imp<unsigned int>::clear(v14);
  PCString::~PCString(a10);
  *(void *)(v12 + 8) = a11;
  uint64_t v21 = *(void *)(v12 + 16);
  if (v21)
  {
    *(void *)(v21 + 8) = 0;
    *(void *)(v12 + 16) = 0;
  }
  _Unwind_Resume(a1);
}

void ___ZN10OZDocumentC2Eb_block_invoke()
{
}

void OZDocument::postNotification(OZDocument *this, int a2)
{
  uint64_t v2 = (OZNotificationManager *)*((void *)this + 21);
  if (v2) {
    OZNotificationManager::postNotification(v2, a2);
  }
}

void OZDocument::OZDocument(OZDocument *this, const OZDocument *a2, int a3)
{
  *(void *)this = &unk_1F1137F28;
  *((void *)this + 1) = &unk_1F1137F80;
  *((void *)this + 2) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 4);
  *((void *)this + 5) = (char *)this + 40;
  *((void *)this + 6) = (char *)this + 40;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 11);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_WORD *)this + 50) = *((_WORD *)a2 + 50);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((unsigned char *)this + 108) = *((unsigned char *)a2 + 108);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 15);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 16);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  PCString::PCString((PCString *)this + 18, (const PCString *)a2 + 18);
  uint64_t v6 = *((void *)a2 + 19);
  char v7 = *((unsigned char *)a2 + 160);
  *((void *)this + 21) = 0;
  *((void *)this + 19) = v6;
  *((unsigned char *)this + 160) = v7;
  *((unsigned char *)this + 184) = 0;
  *((void *)this + 22) = 0;
  *((unsigned char *)this + 256) = *((unsigned char *)a2 + 256);
  *((_DWORD *)this + 65) = *((_DWORD *)a2 + 65);
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 34);
  *((unsigned char *)this + 280) = *((unsigned char *)a2 + 280);
  uint64_t v8 = *((void *)a2 + 36);
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 36) = v8;
  *((void *)this + 37) = 0;
  *((void *)this + 40) = *((void *)a2 + 40);
  *((void *)this + 42) = atomic_fetch_add((atomic_ullong *volatile)&OZDocument::_nextTransientDocumentID, 1uLL);
  PCURL::PCURL((OZDocument *)((char *)this + 344), (const OZDocument *)((char *)a2 + 344));
  if (a3) {
    operator new();
  }
  if (*((void *)a2 + 29)) {
    operator new();
  }
  *((void *)this + 29) = 0;
  if (*(unsigned char *)(theApp + 80))
  {
    *((void *)this + 30) = 0;
    operator new();
  }
  operator new();
}

void sub_1B7BAEA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString *a10, PCString *a11, PCString *a12, uint64_t a13, uint64_t a14)
{
  MEMORY[0x1BA9BFBA0](v15, 0x10A1C40A4A8B666);
  PCURL::~PCURL(v20);
  a14 = v14 + 296;
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  PCString::~PCString(v19);
  PCString::~PCString(v18);
  PCString::~PCString(v17);
  PCString::~PCString(a10);
  PCString::~PCString(a11);
  a14 = v14 + 64;
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::__list_imp<unsigned int>::clear(v16);
  PCString::~PCString(a12);
  *(void *)(v14 + 8) = a13;
  uint64_t v22 = *(void *)(v14 + 16);
  if (v22)
  {
    *(void *)(v22 + 8) = 0;
    *(void *)(v14 + 16) = 0;
  }
  _Unwind_Resume(a1);
}

void OZDocument::copyScene(OZDocument *this, OZScene *a2)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t, OZScene *))(*(void *)v3 + 8))(v3, a2);
  }
  *((void *)this + 3) = 0;
  operator new();
}

void sub_1B7BAEEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v26);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void OZDocument::~OZDocument(PCString *this)
{
  this->CMTime var0 = (__CFString *)&unk_1F1137F28;
  this[1].CMTime var0 = (__CFString *)&unk_1F1137F80;
  if (theApp) {
    OZApplication::documentWillDie(theApp, (OZDocument *)this);
  }
  CMTime var0 = this[3].var0;
  if (var0) {
    (*((void (**)(__CFString *))var0->isa + 1))(var0);
  }
  this[3].CMTime var0 = 0;
  uint64_t v3 = (OZNotificationManager *)this[21].var0;
  if (v3)
  {
    OZNotificationManager::~OZNotificationManager(v3);
    MEMORY[0x1BA9BFBA0]();
  }
  this[21].CMTime var0 = 0;
  uint64_t v4 = this[29].var0;
  if (v4) {
    (*((void (**)(__CFString *))v4->isa + 1))(v4);
  }
  this[29].CMTime var0 = 0;
  uint64_t v5 = this[30].var0;
  if (v5) {
    (*((void (**)(__CFString *))v5->isa + 1))(v5);
  }
  this[30].CMTime var0 = 0;
  uint64_t v6 = this[28].var0;
  if (v6) {
    (*((void (**)(__CFString *))v6->isa + 1))(v6);
  }
  this[28].CMTime var0 = 0;
  char v7 = this[31].var0;
  if (v7) {
    (*((void (**)(__CFString *))v7->isa + 1))(v7);
  }
  this[31].CMTime var0 = 0;
  for (uint64_t i = 24; i != 28; ++i)
  {
    uint64_t v9 = this[i].var0;
    if (v9) {
      (*((void (**)(__CFString *))v9->isa + 1))(v9);
    }
    this[i].CMTime var0 = 0;
  }
  PCURL::~PCURL((PCURL *)&this[43]);
  double v11 = this + 37;
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  PCString::~PCString(this + 34);
  PCString::~PCString(this + 18);
  PCString::~PCString(this + 16);
  PCString::~PCString(this + 15);
  PCString::~PCString(this + 11);
  double v11 = this + 8;
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  std::__list_imp<unsigned int>::clear(&this[5].var0);
  PCString::~PCString(this + 4);
  this[1].CMTime var0 = (__CFString *)&unk_1F1138080;
  unint64_t v10 = this[2].var0;
  if (v10)
  {
    v10->info = 0;
    this[2].CMTime var0 = 0;
  }
}

{
  uint64_t vars8;

  OZDocument::~OZDocument(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZDocument::~OZDocument(PCString *this)
{
}

{
  uint64_t vars8;

  OZDocument::~OZDocument(this - 1);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t *OZScene::begin_t<OZCamera,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7BAF2D4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZDocument::addCPPObserver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(uint64_t **)(a1 + 168);
  if (result) {
    return OZNotificationManager::addCPPObserver(result, a2, a3);
  }
  return result;
}

uint64_t OZDocument::removeCPPObserver(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 168);
  if (result) {
    return OZNotificationManager::removeCPPObserver();
  }
  return result;
}

uint64_t OZDocument::startCaptureModifiedChannels(uint64_t this, const PCString *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 24);
  if (!v4 || !*(unsigned char *)(v4 + 1576))
  {
    int v5 = *(_DWORD *)(this + 96);
    if (!v5)
    {
      PCString::set((PCString *)(this + 88), a2);
      uint64_t v7 = *(void *)(v3 + 64);
      for (uint64_t i = *(void *)(v3 + 72); i != v7; OZChannelRef::~OZChannelRef((void **)(i - 24)))
        ;
      *(void *)(v3 + 72) = v7;
      this = OZChannelBase::setRangeName((OZChannelBase *)v3, a2);
      int v5 = *(_DWORD *)(v3 + 96);
    }
    *(_DWORD *)(v3 + 96) = v5 + 1;
  }
  return this;
}

OZChannelBase *OZDocument::endCaptureModifiedChannels(OZChannelBase *this, const PCString *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *(void *)&this->var3;
  if (!v3 || !*(unsigned char *)(v3 + 1576))
  {
    int v4 = LODWORD(this->var12) - 1;
    LODWORD(this->var12) = v4;
    if (!v4)
    {
      unint64_t var8 = this->var8;
      for (uint64_t i = (void **)this->var9; i != (void **)var8; OZChannelRef::~OZChannelRef(i - 3))
        ;
      v2->var9 = (void *)var8;
      return (OZChannelBase *)OZChannelBase::setRangeName(v2, a2);
    }
  }
  return this;
}

void OZDocument::willModifyChannel(OZDocument *this, OZChannelBase *a2, int a3)
{
  uint64_t v6 = (OZRigWidget *)*((void *)this + 36);
  if (v6) {
    OZRigWidget::willModifyChannel(v6, a2);
  }
  uint64_t v7 = (uint64_t **)*((void *)this + 21);
  if (v7) {
    OZNotificationManager::willModifyChannel(v7, a2, a3);
  }
  uint64_t v8 = *(OZChannelBase **)(*((void *)this + 3) + 1504);
  if (v8 && !*((unsigned char *)this + 280))
  {
    OZChannelBase::setRangeName(v8, 0);
    if (!a2) {
      return;
    }
  }
  else if (!a2)
  {
    return;
  }
  if (*((_DWORD *)this + 24))
  {
    OZChannelRef::OZChannelRef((OZChannelRef *)v19, a2, 0);
    uint64_t v9 = (unsigned __int8 *)*((void *)this + 8);
    unint64_t v10 = (unsigned __int8 *)*((void *)this + 9);
    if (v9 == v10)
    {
      double v11 = (unsigned __int8 *)*((void *)this + 8);
    }
    else
    {
      while (!OZChannelRef::operator==(v9, (unsigned __int8 *)v19))
      {
        v9 += 24;
        if (v9 == v10)
        {
          uint64_t v9 = v10;
          break;
        }
      }
      double v11 = v9;
      uint64_t v9 = (unsigned __int8 *)*((void *)this + 9);
    }
    if (v11 == v9)
    {
      BOOL v12 = !OZChannelBase::testFlag(a2, 8);
      if (v12
        || OZChannelBase::testFlag(a2, 0x2000)
        && (ObjectManipulator = OZChannelBase::getObjectManipulator(a2), (uint64_t v14 = ObjectManipulator) != 0)
        && (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 256))(ObjectManipulator)
        && ((unint64_t v15 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v14 + 256))(v14) + 8),
             long long v20 = xmmword_1B837FEB0,
             (OZFactory::isKindOfClass(v15, (int32x4_t *)&v20) & 1) != 0)
         || (unint64_t v16 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v14 + 256))(v14) + 8),
             long long v20 = xmmword_1B7E791F0,
             ((OZFactory::isKindOfClass(v16, (int32x4_t *)&v20) | v12) & 1) != 0)))
      {
        (*((void (**)(OZChannelBase *, char *))a2->var0 + 43))(a2, (char *)this + 88);
        unint64_t v17 = *((void *)this + 9);
        if (v17 >= *((void *)this + 10))
        {
          uint64_t v18 = std::vector<OZChannelRef>::__push_back_slow_path<OZChannelRef const&>((uint64_t *)this + 8, (const OZChannelRef *)v19);
        }
        else
        {
          OZChannelRef::OZChannelRef(*((std::string **)this + 9), (const OZChannelRef *)v19);
          uint64_t v18 = v17 + 24;
          *((void *)this + 9) = v17 + 24;
        }
        *((void *)this + 9) = v18;
      }
    }
    OZChannelRef::~OZChannelRef(v19);
  }
}

void sub_1B7BAF66C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 72) = v3;
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

uint64_t OZDocument::markFactoriesForSerialization(OZDocument *this, PCSerializerWriteStream *a2)
{
  return (*(uint64_t (**)(void, PCSerializerWriteStream *, void))(**((void **)this + 3) + 32))(*((void *)this + 3), a2, 0);
}

void OZDocument::writeBody(const PCString *this, PCSerializerWriteStream *a2, BOOL a3, uint64_t a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZDocumentScope);
  if (!PCString::empty((PCString *)&this[16]) || LODWORD(this[17].var0))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21);
    TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&TemplateScope);
    if (!PCString::empty((PCString *)&this[16]))
    {
      PCString::PCString(&v30, this + 16);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 35);
      (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v30);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      PCString::~PCString(&v30);
    }
    uint64_t var0_low = LODWORD(this[17].var0);
    if (var0_low)
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 37);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, var0_low);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    }
    PCSerializerWriteStream::popScope((uint64_t)a2);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 224))(a2);
  }
  if (PCString::size((PCString *)&this[18]))
  {
    PCString::PCString(&v29, this + 18);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 39);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v29);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCString::~PCString(&v29);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 224))(a2);
  }
  CMTime var0 = this[19].var0;
  if (var0)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 22);
    (*(void (**)(PCSerializerWriteStream *, __CFString *))(*(void *)a2 + 72))(a2, var0);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  if (LOBYTE(this[20].var0))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 38);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  MainBundle = CFBundleGetMainBundle();
  CFTypeRef ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(MainBundle, @"Build");
  PCURL::PCURL((PCURL *)&v28, ValueForInfoDictionaryKey);
  PCString::PCString(&v27, &v28);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 24);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v27);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCString::~PCString(&v27);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 224))(a2);
  PCString::PCString(&v26, this + 4);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 93);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v26);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCString::~PCString(&v26);
  uint64_t v13 = (OZPreferenceManager *)(*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 224))(a2);
  uint64_t v14 = (TXParagraphStyleFolder_Factory *)OZPreferenceManager::Instance(v13);
  uint64_t v15 = TXParagraphStyleFolder_Factory::version(v14);
  if (v15)
  {
    unint64_t v16 = this[28].var0;
    if (v16)
    {
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t))v16->isa + 2))(this[28].var0, a2, 1);
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))v16->isa + 3))(v16, a2, 1, a4, 1);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      uint64_t v15 = (*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 224))(a2);
    }
  }
  uint64_t v17 = 0;
  char v18 = 0;
  do
  {
    while (1)
    {
      float64x2_t v19 = this[v17 + 24].var0;
      if (!v19 || !BYTE1(v19[8].isa)) {
        break;
      }
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t))v19->isa + 2))(this[v17 + 24].var0, a2, 1);
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))v19->isa + 3))(v19, a2, 1, a4, 1);
      uint64_t v15 = (*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      char v18 = 1;
      if (v17++ == 3) {
        goto LABEL_26;
      }
    }
    ++v17;
  }
  while (v17 != 4);
  if ((v18 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v15 = (*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 224))(a2);
LABEL_27:
  uint64_t v21 = (TXParagraphStyleFolder_Factory *)OZPreferenceManager::Instance((OZPreferenceManager *)v15);
  if (TXParagraphStyleFolder_Factory::version(v21))
  {
    uint64_t v22 = this[29].var0;
    if (v22)
    {
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t))v22->isa + 2))(this[29].var0, a2, 1);
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))v22->isa + 3))(v22, a2, 1, a4, 1);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 224))(a2);
    }
    float64x2_t v23 = this[30].var0;
    if (v23)
    {
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t))v23->isa + 2))(this[30].var0, a2, 1);
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))v23->isa + 3))(v23, a2, 1, a4, 1);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 224))(a2);
    }
    float64x2_t v24 = this[31].var0;
    if (v24)
    {
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t))v24->isa + 2))(this[31].var0, a2, 1);
      (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))v24->isa + 3))(v24, a2, 1, a4, 1);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 224))(a2);
    }
  }
  float64x2_t v25 = this[3].var0;
  if (v25)
  {
    (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t))v25->isa + 2))(v25, a2, 1);
    (*((void (**)(__CFString *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))v25->isa + 3))(v25, a2, 1, a4, a5);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  PCString::~PCString(&v28);
}

void sub_1B7BB0124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, PCString a11, PCString a12, char a13, int a14, PCString a15)
{
}

uint64_t DocTemplateParser::parseBegin(DocTemplateParser *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t DocTemplateParser::parseEnd(DocTemplateParser *this, PCSerializerReadStream *a2)
{
  if (this) {
    (*(void (**)(DocTemplateParser *, PCSerializerReadStream *))(*(void *)this + 8))(this, a2);
  }
  return 1;
}

uint64_t DocTemplateParser::parseElement(DocTemplateParser *this, const PCString *a2, PCStreamElement *a3)
{
  uint64_t v11 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v10);
  int v6 = *((_DWORD *)a3 + 2);
  switch(v6)
  {
    case ' ':
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 32))(a3, (char *)&v11 + 4);
      uint64_t v8 = *((void *)this + 1);
      *(_DWORD *)(v8 + 112) = HIDWORD(v11);
      *(unsigned char *)(v8 + 108) = 0;
      break;
    case '#':
      (*(void (**)(PCStreamElement *, PCString *))(*(void *)a3 + 16))(a3, &v10);
      PCString::set((PCString *)(*((void *)this + 1) + 128), &v10);
      break;
    case '%':
      (*(void (**)(PCStreamElement *, uint64_t *))(*(void *)a3 + 32))(a3, &v11);
      uint64_t v7 = (OZChannelBase *)*((void *)this + 1);
      v7[1].var3 = v11;
      OZChannelBase::setRangeName(v7, a2);
      break;
  }
  PCString::~PCString(&v10);
  return 1;
}

void sub_1B7BB030C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
}

uint64_t OZDocument::parseBegin(OZDocument *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZDocumentScope);
  OZFactories::clearFactoryLoadIDs(*(OZFactories **)(theApp + 32));
  *(void *)(theApp + 48) = *(void *)(theApp + 40);
  uint64_t v3 = *((void *)this + 3);
  *(void *)(v3 + 344) = 0;
  *(_DWORD *)(v3 + 352) = 0;
  OZSceneSettings::setFrameRate(v3 + 336, 0.0, 0);
  *(void *)(v3 + 384) = 0;
  *(void *)((char *)this + 260) = 0;
  int v4 = (OZScene *)*((void *)this + 3);
  int v5 = (long long *)MEMORY[0x1E4F1FA48];
  long long v8 = *MEMORY[0x1E4F1FA48];
  uint64_t v9 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  long long v10 = v8;
  uint64_t v11 = v9;
  OZScene::setTimeRange(v4, (const PCTimeRange *)&v8);
  int v6 = (__n128 *)*((void *)this + 3);
  long long v8 = *v5;
  uint64_t v9 = *((void *)v5 + 2);
  long long v10 = v8;
  uint64_t v11 = v9;
  OZScene::setPlayRange(v6, (const PCTimeRange *)&v8);
  *((_DWORD *)this + 26) = 0;
  return 1;
}

uint64_t OZDocument::parseEnd(OZDocument *this, PCSerializerReadStream *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = (void *)((char *)this + 260);
  if (!*((_DWORD *)this + 65) && !*((_DWORD *)this + 66)) {
    *uint64_t v3 = 0xD00000005;
  }
  uint64_t v4 = *((void *)this + 3);
  if (!*(_DWORD *)(v4 + 344) || !*(_DWORD *)(v4 + 348) || *(double *)(v4 + 368) == 0.0 || *(double *)(v4 + 384) == 0.0)
  {
    *(void *)(v4 + 344) = 0x1E6000002D0;
    OZSceneSettings::setFrameRate(v4 + 336, 30.0, 0);
    *(void *)(v4 + 384) = 0x3FED1745D1745D17;
    this = (OZDocument *)OZSceneSettings::setFieldRenderingMode(v4 + 336, 2);
  }
  unsigned int DefaultProjectDurInFrames = 432000;
  if (!*(unsigned char *)(theApp + 80))
  {
    int v6 = (OZPreferenceManager *)OZPreferenceManager::Instance(this);
    unsigned int DefaultProjectDurInFrames = OZPreferenceManager::getDefaultProjectDurInFrames(v6, *(double *)(v4 + 368));
  }
  if (DefaultProjectDurInFrames >= 0x69780) {
    int32_t v7 = 432000;
  }
  else {
    int32_t v7 = DefaultProjectDurInFrames;
  }
  if (!*(_DWORD *)(v4 + 352)) {
    *(_DWORD *)(v4 + 352) = v7;
  }
  CMTime time1 = *(CMTime *)(*((void *)v2 + 3) + 1376);
  long long v8 = (CMTime *)MEMORY[0x1E4F1FA48];
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (!CMTimeCompare(&time1, &time2))
  {
    uint64_t v9 = *((void *)v2 + 3);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), (__n128 *)&v27);
    operator*(&v27, v7, &time2);
    CMTime time1 = *v8;
    CMTime v29 = time2;
    OZScene::setTimeRange((OZScene *)v9, (const PCTimeRange *)&time1);
  }
  CMTime time1 = *(CMTime *)(OZScene::getPlayRange(*((OZScene **)v2 + 3)) + 24);
  CMTime time2 = *v8;
  if (!CMTimeCompare(&time1, &time2)) {
    OZScene::setPlayRange(*((__n128 **)v2 + 3), (const PCTimeRange *)(*((void *)v2 + 3) + 1352));
  }
  int v10 = *((_DWORD *)v2 + 26);
  switch(v10)
  {
    case 3:
      OZDocument::makeFCPv3Corrections((uint64_t **)v2);
      break;
    case 2:
      OZDocument::makeFCPv2Corrections((uint64_t **)v2);
      break;
    case 1:
      OZDocument::makeFCPv1Corrections((uint64_t **)v2);
      break;
  }
  if (*(_DWORD *)v3 > 2u)
  {
    if (*(_DWORD *)v3 != 3) {
      return 1;
    }
    uint64_t v17 = 0;
    char v18 = (char *)v2 + 192;
    do
    {
      uint64_t v19 = *(void *)&v18[v17];
      int v20 = *(_DWORD *)(v19 + 64);
      char v21 = v20 == 6;
      if (v20 == 6) {
        int v22 = 6;
      }
      else {
        int v22 = 2;
      }
      BOOL v23 = v20 == 0;
      if (v20) {
        int v24 = v22;
      }
      else {
        int v24 = 0;
      }
      *(_DWORD *)(v19 + 68) = v24;
      BOOL v25 = !v23;
      LiGrid::setGroundPlane(v19, v21);
      METimeRemap::setIsOutroOptional(*(METimeRemap **)&v18[v17], v25);
      HGRenderQueue::SetRelaxRenderSerializationForPriorityInversionsFlag(*(HGRenderQueue **)&v18[v17], v21);
      v17 += 8;
    }
    while (v17 != 32);
  }
  else
  {
    uint64_t v11 = 0;
    int v12 = *(_DWORD *)(*((void *)v2 + 3) + 544);
    if (v12 == 6) {
      int v13 = 6;
    }
    else {
      int v13 = 2;
    }
    if (v12) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    uint64_t v15 = (char *)v2 + 192;
    do
    {
      uint64_t v16 = *(void *)&v15[v11];
      *(_DWORD *)(v16 + 64) = v14;
      *(_DWORD *)(v16 + 68) = v14;
      LiGrid::setGroundPlane(v16, v12 == 6);
      METimeRemap::setIsOutroOptional(*(METimeRemap **)&v15[v11], v12 != 0);
      HGRenderQueue::SetRelaxRenderSerializationForPriorityInversionsFlag(*(HGRenderQueue **)&v15[v11], v12 == 6);
      v11 += 8;
    }
    while (v11 != 32);
  }
  if (*(_DWORD *)v3 <= 3u) {
    *(_DWORD *)(*((void *)v2 + 3) + 564) = 2;
  }
  return 1;
}

uint64_t OZDocument::makeFCPv1Corrections(uint64_t **this)
{
  OZScene::begin_t<OZElement,false,true>(this[3], (uint64_t)&__p);
  uint64_t v2 = this[3];
  uint64_t v3 = (uint64_t)(v2 + 150);
  uint64_t v4 = v2[151];
  memset(v57, 0, sizeof(v57));
  int v58 = 1065353216;
  v54[0] = v3;
  v54[1] = v4;
  uint64_t v55 = v3;
  char v56 = 0;
  int64_t var0 = __p.var0.var0;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v57);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&__p.var2);
  OZScene::begin_t<OZFootage,false,true>(this[3], (uint64_t)v54);
  int v6 = this[3];
  int32_t v7 = v6 + 150;
  uint64_t v8 = v6[151];
  memset(v52, 0, sizeof(v52));
  int v53 = 1065353216;
  long long v48 = v7;
  uint64_t v49 = v8;
  uint64_t v50 = v7;
  char v51 = 0;
  uint64_t v9 = (const CMTime *)MEMORY[0x1E4F1FA48];
  while ((uint64_t *)v54[0] != v48)
  {
    if (v54[0] == v55)
    {
      int v10 = 0;
    }
    else
    {
      int v10 = *(char **)(v54[0] + 16);
      if (v10) {
    }
      }
    if (var0 != v3) {
      OZChannel::setValue((OZChannel *)(v10 + 3144), v9, 0.0, 0);
    }
    OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++(v54);
  }
  uint64_t v11 = OZScene::begin_t<OZTransformNode,false,true>(this[3], (uint64_t)v46);
  int v12 = this[3];
  uint64_t v13 = v12[151];
  memset(v44, 0, sizeof(v44));
  int v45 = 1065353216;
  float64x2_t v40 = v12 + 150;
  uint64_t v41 = v13;
  float64x2_t v42 = v12 + 150;
  char v43 = 0;
  if (*((_DWORD *)v12 + 86) == 1280
    && *((_DWORD *)v12 + 87) == 1080
    && fabs(*((double *)v12 + 48) + -1.33333333) < 0.0000001)
  {
    v12[48] = 0x3FF8000000000000;
  }
  __asm { FMOV            V0.2D, #-1.0 }
  long long v34 = _Q0;
  while ((uint64_t *)v46[0] != v40)
  {
    if (v46[0] == v46[2] || (uint64_t v19 = *(const void **)(v46[0] + 16)) == 0) {
      int v20 = 0;
    }
    else {
    unsigned int v21 = (*(uint64_t (**)(char *))(*((void *)v20 + 318) + 832))(v20 + 2544);
    }
    if (v21)
    {
      OZChannel::getKeyframes((OZChannel *)(v20 + 2544), 0, &__p);
      uint64_t v22 = 0;
      uint64_t v23 = 8 * v21;
      do
      {
        double v39 = 0.0;
        OZChannel::getKeyframe((OZChannel *)(v20 + 2544), *(void **)(__p.var0.var0 + v22), (CMTime *)&v36, &v39);
        OZChannel::setKeyframe((OZChannel *)(v20 + 2544), *(void **)(__p.var0.var0 + v22), (const CMTime *)&v36, -v39);
        v22 += 8;
      }
      while (v23 != v22);
      if (__p.var0.var0)
      {
        *(void *)&__p.var0.var1 = __p.var0.var0;
        operator delete((void *)__p.var0.var0);
      }
    }
    double InitialValue = OZChannel::getInitialValue((OZChannel *)(v20 + 2544));
    OZChannel::setInitialValue((OZChannel *)(v20 + 2544), -InitialValue, 0);
    double DefaultValue = OZChannel::getDefaultValue((OZChannel *)(v20 + 2544));
    OZChannel::setDefaultValue((OZChannel *)(v20 + 2544), -DefaultValue);
    if (v20)
    {
      if (v26)
      {
        CMTime v27 = v26;
        if ((*(unsigned int (**)(char *))(*(void *)v26 + 1600))(v26))
        {
          double v36 = 0.0;
          double v37 = 0.0;
          long long v38 = v34;
          OZRenderState::OZRenderState(&__p);
          PCString v28 = (OZDocument *)(*(uint64_t (**)(char *, double *, OZRenderState *))(*(void *)v27 + 1560))(v27, &v36, &__p);
          CMTime v29 = (OZDocument *)OZDocument::correct4CornerChannel(v28, (OZChannelPosition *)(v27 + 14704), v36, v37);
          PCString v30 = (OZDocument *)OZDocument::correct4CornerChannel(v29, (OZChannelPosition *)(v27 + 15408), v36 + *(double *)&v38, v37);
          float64x2_t v31 = (OZDocument *)OZDocument::correct4CornerChannel(v30, (OZChannelPosition *)(v27 + 16112), v36 + *(double *)&v38, v37 + *((double *)&v38 + 1));
          OZDocument::correct4CornerChannel(v31, (OZChannelPosition *)(v27 + 16816), v36, v37 + *((double *)&v38 + 1));
        }
      }
    }
    if (*((_DWORD *)v12 + 86) == 1280
      && *((_DWORD *)v12 + 87) == 1080
      && fabs((*(double (**)(char *))(*(void *)v20 + 1328))(v20) + -1.33333333) < 0.0000001)
    {
      (*(void (**)(char *, double))(*(void *)v20 + 1344))(v20, 1.5);
    }
    uint64_t v11 = OZObject::iterator_t<OZTransformNode,false,true,OZObject::defaultValidator>::operator++(v46);
  }
  float64x2_t v32 = (OZPreferenceManager *)OZPreferenceManager::Instance((OZPreferenceManager *)v11);
  OZPreferenceManager::setCompensateAspectRatio(v32, 1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v44);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v47);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v52);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v57);
}

void sub_1B7BB0C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v61);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v62 - 144);
  _Unwind_Resume(a1);
}

uint64_t OZDocument::makeFCPv2Corrections(uint64_t **this)
{
  uint64_t v2 = (OZPreferenceManager *)OZPreferenceManager::Instance((OZPreferenceManager *)this);
  OZPreferenceManager::setCompensateAspectRatio(v2, 1);
  OZScene::begin_t<OZElement,false,true>(this[3], (uint64_t)v43);
  uint64_t v3 = this[3];
  uint64_t v4 = v3 + 150;
  uint64_t v5 = v3[151];
  long long v40 = 0u;
  long long v41 = 0u;
  int v42 = 1065353216;
  double v36 = v4;
  uint64_t v37 = v5;
  long long v38 = v4;
  char v39 = 0;
  uint64_t v6 = v43[0];
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v40);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v44);
  OZScene::begin_t<OZFootage,false,true>(this[3], (uint64_t)v43);
  int32_t v7 = this[3];
  uint64_t v8 = v7 + 150;
  uint64_t v9 = v7[151];
  long long v40 = 0u;
  long long v41 = 0u;
  int v42 = 1065353216;
  double v36 = v8;
  uint64_t v37 = v9;
  long long v38 = v8;
  char v39 = 0;
  int v10 = (const CMTime *)MEMORY[0x1E4F1FA48];
  while ((uint64_t *)v43[0] != v36)
  {
    if (v43[0] != v43[2])
    {
      uint64_t v11 = *(const void **)(v43[0] + 16);
      if (v11)
      {
        if (v12) {
          BOOL v13 = v6 == (void)v4;
        }
        else {
          BOOL v13 = 1;
        }
        if (!v13) {
          OZChannel::setValue((OZChannel *)(v12 + 3144), v10, 0.0, 0);
        }
      }
    }
    OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++(v43);
  }
  OZScene::begin_t<OZTransformNode,false,true>(this[3], (uint64_t)v34);
  int v14 = this[3];
  uint64_t v15 = v14 + 150;
  uint64_t v16 = v14[151];
  memset(v32, 0, sizeof(v32));
  int v33 = 1065353216;
  PCString v28 = v15;
  uint64_t v29 = v16;
  PCString v30 = v15;
  char v31 = 0;
  while ((uint64_t *)v34[0] != v28)
  {
    if (v34[0] == v34[2])
    {
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = *(void **)(v34[0] + 16);
      if (v17) {
    }
      }
    char v18 = (OZChannel *)(v17 + 318);
    unsigned int v19 = (*(uint64_t (**)(void *))(v17[318] + 832))(v17 + 318);
    if (v19)
    {
      OZChannel::getKeyframes(v18, 0, __p);
      uint64_t v20 = 0;
      uint64_t v21 = 8 * v19;
      do
      {
        double v26 = 0.0;
        OZChannel::getKeyframe(v18, *(void **)((char *)__p[0] + v20), &v25, &v26);
        OZChannel::setKeyframe(v18, *(void **)((char *)__p[0] + v20), &v25, -v26);
        v20 += 8;
      }
      while (v21 != v20);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    double InitialValue = OZChannel::getInitialValue(v18);
    OZChannel::setInitialValue(v18, -InitialValue, 0);
    double DefaultValue = OZChannel::getDefaultValue(v18);
    OZChannel::setDefaultValue(v18, -DefaultValue);
    OZObject::iterator_t<OZTransformNode,false,true,OZObject::defaultValidator>::operator++(v34);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v32);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v35);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v40);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v44);
}

void sub_1B7BB101C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v26);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v27 - 104);
  _Unwind_Resume(a1);
}

uint64_t OZDocument::makeFCPv3Corrections(uint64_t **this)
{
  uint64_t v2 = (OZPreferenceManager *)OZPreferenceManager::Instance((OZPreferenceManager *)this);
  OZPreferenceManager::setCompensateAspectRatio(v2, 1);
  OZScene::begin_t<OZElement,false,true>(this[3], (uint64_t)v15);
  uint64_t v3 = (uint64_t)(this[3] + 150);
  long long v12 = 0u;
  long long v13 = 0u;
  int v14 = 1065353216;
  uint64_t v4 = v15[0];
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v16);
  OZScene::begin_t<OZFootage,false,true>(this[3], (uint64_t)v15);
  uint64_t v5 = (uint64_t)(this[3] + 150);
  long long v12 = 0u;
  long long v13 = 0u;
  int v14 = 1065353216;
  uint64_t v11 = v5;
  uint64_t v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
  while (v15[0] != v11)
  {
    if (v15[0] != v15[2])
    {
      int32_t v7 = *(const void **)(v15[0] + 16);
      if (v7)
      {
        if (v8) {
          BOOL v9 = v4 == v3;
        }
        else {
          BOOL v9 = 1;
        }
        if (!v9) {
          OZChannel::setValue((OZChannel *)(v8 + 3144), v6, 0.0, 0);
        }
      }
    }
    OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++(v15);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v12);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v16);
}

void sub_1B7BB1200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZDocument::parseElement(OZDocument *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  *(void *)unsigned int v19 = 0;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 <= 37)
  {
    if (v6 > 24)
    {
      if (v6 == 25)
      {
        PCSerializerReadStream::getAsUInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)v19);
        if (*((void *)this + 3) && (v19[0] == 3 || v19[0] == 2 || v19[0] == 1)) {
          *((_DWORD *)this + 26) = v19[0];
        }
      }
      else if (v6 == 36)
      {
        PCString::PCString((PCString *)&v18, (const PCString *)this + 34);
        if (PCString::empty((PCString *)&v18)
          && PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v18))
        {
          PCString::set((PCString *)this + 34, (const PCString *)&v18);
        }
        OZDocument::checkVersionForReadStream(this, a2);
LABEL_39:
        PCString::~PCString((PCString *)&v18);
      }
    }
    else
    {
      if (v6 == 21) {
        operator new();
      }
      if (v6 == 22) {
        PCSerializerReadStream::getAsUInt64((uint64_t)a2, (uint64_t)a3, (uint64_t)this + 152);
      }
    }
  }
  else
  {
    switch(v6)
    {
      case 'P':
        if (*(unsigned char *)(theApp + 80)) {
          goto LABEL_33;
        }
        int32_t v7 = (PCSerializer *)*((void *)this + 29);
        if (!v7) {
          operator new();
        }
        goto LABEL_45;
      case 'Q':
        if (*(unsigned char *)(theApp + 80)) {
          goto LABEL_33;
        }
        int32_t v7 = (PCSerializer *)*((void *)this + 30);
        if (!v7) {
          operator new();
        }
        goto LABEL_45;
      case 'R':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return 1;
      case 'S':
        if (!PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 9, (uint64_t)&v19[1]))
        {
          uint64_t v8 = (PCSerializer *)*((void *)this + 24);
          goto LABEL_42;
        }
        if (v19[1] <= 3)
        {
          uint64_t v8 = (PCSerializer *)*((void *)this + v19[1] + 24);
          goto LABEL_42;
        }
LABEL_33:
        (*(void (**)(PCSerializerReadStream *))(*(void *)a2 + 40))(a2);
        break;
      case 'T':
        uint64_t v8 = (PCSerializer *)*((void *)this + 28);
        goto LABEL_42;
      case 'U':
        if (*(unsigned char *)(theApp + 80)) {
          goto LABEL_33;
        }
        int32_t v7 = (PCSerializer *)*((void *)this + 31);
        if (!v7) {
          operator new();
        }
LABEL_45:
        uint64_t v14 = a2;
        uint64_t v8 = v7;
        goto LABEL_46;
      case '[':
        PCSharedCount::PCSharedCount(&v18);
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 116, (uint64_t)&v18);
        uint64_t v17 = 0;
        CStr = PCString::createCStr((PCString *)&v18);
        sscanf(CStr, "%d.%d", (char *)&v17 + 4, &v17);
        int v11 = v17;
        int v10 = HIDWORD(v17);
        *((_DWORD *)a2 + 26) = HIDWORD(v17);
        *((_DWORD *)a2 + 27) = v11;
        free(CStr);
        *((_DWORD *)this + 65) = v10;
        *((_DWORD *)this + 66) = v11;
        OZDocument::checkVersionForReadStream(this, a2);
        goto LABEL_39;
      case '\\':
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v19[1]);
        AttributeAsUUID = (unsigned int *)PCSerializerReadStream::getAttributeAsUUID((uint64_t)a2, (uint64_t)a3, 117);
        if (AttributeAsUUID) {
          Factory = (OZFactory *)OZFactories::findFactory(*(void *)(theApp + 32), AttributeAsUUID);
        }
        else {
          Factory = 0;
        }
        OZFactories::setFactoryLoadID(*(OZFactories **)(theApp + 32), v19[1], Factory);
        (*(void (**)(PCSerializerReadStream *))(*(void *)a2 + 40))(a2);
        if (AttributeAsUUID) {
          MEMORY[0x1BA9BFBA0](AttributeAsUUID, 0x1000C40451B5BE8);
        }
        return 1;
      case ']':
        PCSharedCount::PCSharedCount(&v18);
        if (PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v18)) {
          PCString::set((PCString *)this + 4, (const PCString *)&v18);
        }
        goto LABEL_39;
      default:
        if (v6 == 38)
        {
          int v16 = 0;
          PCSerializerReadStream::getAsUInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v16);
          *((unsigned char *)this + 160) = v16 != 0;
        }
        else if (v6 == 60)
        {
          uint64_t v8 = (PCSerializer *)*((void *)this + 3);
LABEL_42:
          uint64_t v14 = a2;
LABEL_46:
          PCSerializerReadStream::pushHandler(v14, v8);
        }
        break;
    }
  }
  return 1;
}

void sub_1B7BB1670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

void OZDocument::checkVersionForReadStream(OZDocument *this, PCSerializerReadStream *a2)
{
  unsigned int v3 = *((_DWORD *)this + 65);
  unsigned int v4 = *((_DWORD *)this + 66);
  uint64_t v5 = (PCString *)((char *)this + 272);
  PCString::PCString(_8, (const PCString *)this + 34);
  if (!PCString::empty(_8) && (v3 > 5 || v3 == 5 && v4 >= 0xE))
  {
    if (!*(unsigned char *)(theApp + 80)) {
      OZChannelBase::setRangeName((OZChannelBase *)_8, v6);
    }
    (*(void (**)(PCSerializerReadStream *))(*(void *)a2 + 24))(a2);
  }
  PCString::PCString(&v7, "older version");
  if (!PCString::compare(_8, &v7) || !v3) {
    goto LABEL_15;
  }
  if (v3 < 5)
  {
    PCString::~PCString(&v7);
LABEL_14:
    PCString::PCString(&v7, "older version");
    PCString::set(v5, &v7);
LABEL_15:
    PCString::~PCString(&v7);
    goto LABEL_16;
  }
  PCString::~PCString(&v7);
  if (v3 == 5 && v4 < 0xD) {
    goto LABEL_14;
  }
LABEL_16:
  PCString::~PCString(_8);
}

void sub_1B7BB183C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t *OZScene::begin_t<OZElement,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    unsigned int v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7BB1914(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZScene::begin_t<OZFootage,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    unsigned int v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7BB19D0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    unsigned int v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t *OZScene::begin_t<OZTransformNode,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    unsigned int v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZTransformNode,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZTransformNode,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7BB1B38(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZTransformNode,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    unsigned int v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t OZDocument::correct4CornerChannel(OZDocument *this, OZChannelPosition *a2, double a3, double a4)
{
  PCString v7 = (OZChannel *)((char *)a2 + 136);
  unsigned int v8 = (*(uint64_t (**)(char *))(*((void *)a2 + 17) + 832))((char *)a2 + 136);
  if (v8)
  {
    unsigned int v9 = v8;
    OZChannel::getKeyframes(v7, 0, &__p);
    uint64_t v10 = 0;
    uint64_t v11 = 8 * v9;
    do
    {
      double v23 = 0.0;
      OZChannel::getKeyframe(v7, *(void **)((char *)__p + v10), &v22, &v23);
      OZChannel::setKeyframe(v7, *(void **)((char *)__p + v10), &v22, v23 - a3);
      v10 += 8;
    }
    while (v11 != v10);
    if (__p)
    {
      CMTime v25 = __p;
      operator delete(__p);
    }
  }
  long long v12 = (OZChannel *)((char *)a2 + 288);
  unsigned int v13 = (*(uint64_t (**)(char *))(*((void *)a2 + 36) + 832))((char *)a2 + 288);
  if (v13)
  {
    unsigned int v14 = v13;
    OZChannel::getKeyframes(v12, 0, &__p);
    uint64_t v15 = 0;
    uint64_t v16 = 8 * v14;
    do
    {
      double v23 = 0.0;
      OZChannel::getKeyframe(v12, *(void **)((char *)__p + v15), &v22, &v23);
      OZChannel::setKeyframe(v12, *(void **)((char *)__p + v15), &v22, v23 - a4);
      v15 += 8;
    }
    while (v16 != v15);
    if (__p)
    {
      CMTime v25 = __p;
      operator delete(__p);
    }
  }
  double InitialValue = OZChannel::getInitialValue(v7);
  OZChannel::setInitialValue(v7, InitialValue - a3, 0);
  double DefaultValue = OZChannel::getDefaultValue(v7);
  OZChannel::setDefaultValue(v7, DefaultValue - a3);
  double v19 = OZChannel::getInitialValue(v12);
  OZChannel::setInitialValue(v12, v19 - a4, 0);
  double v20 = OZChannel::getDefaultValue(v12);
  return OZChannel::setDefaultValue(v12, v20 - a4);
}

void sub_1B7BB1DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZDocument::open(OZChannelBase *this, const PCURL *a2)
{
  unsigned int v4 = PCXMLReadStream::PCXMLReadStream((PCXMLReadStream *)v13, a2);
  uint64_t v14 = *(void *)(theApp + 16);
  *(unsigned char *)(OZCoreGlobals::getInstance(v4) + 8) = 0;
  if (!this[1].var7) {
    operator new();
  }
  PCSerializerReadStream::pushHandler((PCSerializerReadStream *)v13, (PCSerializer *)this);
  uint64_t v5 = PCXMLReadStream::parse((PCXMLReadStream *)v13);
  if (v5)
  {
    OZChannelBase::setRangeName(this, (const PCString *)a2);
    AnimateFlag = (OZCoreGlobals *)OZSceneSettings::getAnimateFlag((OZSceneSettings *)(*(void *)&this->var3 + 336));
    char v7 = (char)AnimateFlag;
    if (AnimateFlag)
    {
      HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
      AnimateFlag = (OZCoreGlobals *)OZHostApplicationDelegateHandler::wantsToAssertThatLoadedSceneHasAnimateFlagDisabled(HostApplicationDelegate);
      if (AnimateFlag)
      {
        PCURL::getAsFileSystemString((const __CFURL **)a2, &v12);
        unsigned int v9 = PCString::createUTF8Str(&v12);
        PCString::~PCString(&v12);
        printf("WARNING: document has animate flag enabled: %s\n", v9);
        free(v9);
      }
    }
    *(unsigned char *)(OZCoreGlobals::getInstance(AnimateFlag) + 8) = v7;
    var7 = (OZNotificationManager *)this[1].var7;
    if (var7) {
      OZNotificationManager::postNotification(var7, 51);
    }
    PCURL::operator=((const void **)&this[3].var1, (const __CFURL **)a2);
  }
  else
  {
    puts("parse failed");
  }
  PCXMLReadStream::~PCXMLReadStream((PCXMLReadStream *)v13);
  return v5;
}

void sub_1B7BB1F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, char a12)
{
}

void *OZScene::begin_t<OZProjectNode,false,false>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3 = (void *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    unsigned int v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZProjectNode,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZProjectNode,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
  }
  return result;
}

void sub_1B7BB208C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void PCSafe::~PCSafe(PCSafe *this)
{
  *(void *)this = &unk_1F1138080;
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    *(void *)(v1 + 8) = 0;
    *((void *)this + OZDocument::~OZDocument(this - 1) = 0;
  }
}

{
  uint64_t v1;

  *(void *)this = &unk_1F1138080;
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    *(void *)(v1 + 8) = 0;
    *((void *)this + OZDocument::~OZDocument(this - 1) = 0;
  }
  JUMPOUT(0x1BA9BFBA0);
}

void std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unsigned int v4 = (void **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        OZChannelRef::~OZChannelRef(v4 - 3);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    unsigned int v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

void *OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 2;
  uint64_t v3 = *result;
  if (*result == result[2]) {
    goto LABEL_14;
  }
  unsigned int v4 = *(void **)(v3 + 16);
  if ((*(unsigned int (**)(void *))(*v4 + 1056))(v4))
  {
    uint64_t v5 = *v1;
    unsigned int v13 = v4;
    uint64_t v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v5;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1104))(v4);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(void *))(*v4 + 960))(v4))
  {
    uint64_t v6 = *v1;
    unsigned int v13 = v4;
    uint64_t v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v6;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1024))(v4);
    *uint64_t v1 = result;
    return result;
  }
  char v7 = *(void **)(*v1 + 8);
  uint64_t result = (void *)v4[120];
  if (!result || v7 == (void *)*v2)
  {
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = *result;
  if (*((unsigned char *)v1 + 24)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v8 + 1112))();
  }
  else {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v8 + 1032))();
  }
  if (v7 != result)
  {
LABEL_13:
    uint64_t v3 = *v1;
LABEL_14:
    *uint64_t v1 = *(void *)(v3 + 8);
    return result;
  }
  if (*((unsigned char *)v1 + 24)
    && (uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 960))(v4[120]), result))
  {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 1024))(v4[120]);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 0;
  }
  else
  {
    *((unsigned char *)v1 + 24) = 0;
    while (1)
    {
      unsigned int v4 = (void *)v4[120];
      if (!v4) {
        break;
      }
      uint64_t v14 = v4;
      unsigned int v9 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v14);
      uint64_t v10 = v9 + 3;
      if (!v9) {
        uint64_t v10 = v2;
      }
      uint64_t v11 = *v10;
      *uint64_t v1 = v11;
      uint64_t result = (void *)v4[120];
      if (result)
      {
        PCString v12 = *(void **)(v11 + 8);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
        if (v12 == result && v12 != (void *)*v2) {
          continue;
        }
      }
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t std::vector<OZChannelRef>::__push_back_slow_path<OZChannelRef const&>(uint64_t *a1, const OZChannelRef *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unsigned int v13 = v10;
  uint64_t v14 = (std::string *)&v10[24 * v4];
  uint64_t v16 = &v10[24 * v9];
  OZChannelRef::OZChannelRef(v14, a2);
  uint64_t v15 = v14 + 1;
  std::vector<OZChannelRef>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<OZChannelRef>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B7BB2668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<OZChannelRef>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<OZChannelRef>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OZChannelRef>,std::reverse_iterator<OZChannelRef*>,std::reverse_iterator<OZChannelRef*>,std::reverse_iterator<OZChannelRef*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<OZChannelRef>,std::reverse_iterator<OZChannelRef*>,std::reverse_iterator<OZChannelRef*>,std::reverse_iterator<OZChannelRef*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 24;
  while (a3 + v10 != a5)
  {
    PCString v12 = (std::string *)(v11 + v10);
    v10 -= 24;
    OZChannelRef::OZChannelRef(v12, (const OZChannelRef *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<OZChannelRef>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    OZChannelRef::~OZChannelRef((void **)(i - 24));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *OZObject::iterator_t<OZElement,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    uint64_t v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

void *OZObject::iterator_t<OZProjectNode,false,false,OZObject::defaultValidator>::operator++(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = *(void *)(*a1 + 8);
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    unint64_t v4 = *(const void **)(v3 + 16);
    if (v4
    {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 8);
  }
  return a1;
}

PCSharedCount *OZInsertLayerBelowGroupAffectedByBump(LiLayeredMaterial *a1, PCSharedCount *a2)
{
  uint64_t v4 = (*((void *)a1 + 84) - *((void *)a1 + 83)) >> 4;
  while (1)
  {
    BOOL v5 = __OFSUB__(v4, 1);
    LODWORD(v4) = v4 - 1;
    if ((int)v4 < 0 != v5) {
      return LiLayeredMaterial::insertLayer((uint64_t)a1, (int)v4 + 1, a2);
    }
    LiLayeredMaterial::getLayer(a1, v4, &v12);
    int64_t var0 = v12.var0;
    PCSharedCount::~PCSharedCount(&v13);
    if (*((unsigned char *)var0 + 25))
    {
      uint64_t LUTEnd = PCICCTransferFunctionLUT::getLUTEnd((PCICCTransferFunctionLUT *)var0);
      if ((v4 + 1) < 2)
      {
LABEL_9:
        LODWORD(v4) = -1;
      }
      else
      {
        uint64_t v8 = LUTEnd;
        int v9 = v4 - 1;
        while (1)
        {
          LODWORD(v4) = v4 - 1;
          LiLayeredMaterial::getLayer(a1, v4, &v12);
          uint64_t v10 = v12.var0;
          PCSharedCount::~PCSharedCount(&v13);
          if (!*((unsigned char *)v10 + 25)) {
            break;
          }
          if (PCICCTransferFunctionLUT::getLUTEnd((PCICCTransferFunctionLUT *)v10) != v8) {
            return LiLayeredMaterial::insertLayer((uint64_t)a1, (int)v4 + 1, a2);
          }
          --v9;
          if ((int)v4 <= 0) {
            goto LABEL_9;
          }
        }
        LODWORD(v4) = v9;
      }
      return LiLayeredMaterial::insertLayer((uint64_t)a1, (int)v4 + 1, a2);
    }
  }
}

void sub_1B7BB2C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B7BB2C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  JUMPOUT(0x1B7BB2C60);
}

uint64_t getWorkingGamut(OZChannelBase *a1)
{
  if (OZChannelBase::isObjectRef(a1))
  {
    uint64_t v2 = (*((uint64_t (**)(OZChannelBase *))a1->var0 + 3))(a1);
    if (v2)
    {
      uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 272))(v2);
      if (v3)
      {
        (*(void (**)(FxColorDescription *__return_ptr))(*(void *)v3 + 136))(&v9);
        CGColorSpace = (PCColorSpaceCache *)FxColorDescription::getCGColorSpace(&v9);
        uint64_t v5 = CGColorSpace == PCGetWorkingColorSpace((PCColorSpaceCache *)1);
        PCCFRef<CGColorSpace *>::~PCCFRef(&v9._pcColorDesc._colorSpaceRef._obj);
        return v5;
      }
    }
    return 0;
  }
  int64_t var0 = a1->var4.var0;
  if (!var0) {
    return 0;
  }
  uint64_t v7 = (OZFxPlugRenderContextManager *)[(__CFString *)var0 contextManager];
  if (!v7) {
    return 0;
  }
  OZFxRenderContextAgentSentry::OZFxRenderContextAgentSentry((OZFxRenderContextAgentSentry *)&v9, v7);
  if (OZFxRenderContextAgentSentry::getAgent((OZFxPlugRenderContextManager **)&v9, (OZFxPlugSharedBase *)a1)) {
    uint64_t v5 = (*((uint64_t (**)(OZChannelBase *))a1->var0 + 22))(a1);
  }
  else {
    uint64_t v5 = 0;
  }
  OZFxRenderContextAgentSentry::~OZFxRenderContextAgentSentry((OZFxRenderContextAgentSentry *)&v9);
  return v5;
}

void sub_1B7BB2DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B7BB2EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void sub_1B7BB2EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  JUMPOUT(0x1B7BB2ED8);
}

void sub_1B7BB2F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OZFxPlugLockSentinel::~OZFxPlugLockSentinel((OZLocking **)va);
  _Unwind_Resume(a1);
}

void OZSceneNodeFile::OZSceneNodeFile(OZSceneNodeFile *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSceneNode::OZSceneNode(this, a2, a3, a4);
  void *v5 = &unk_1F11380A8;
  v5[2] = &unk_1F11386C8;
  v5[6] = &unk_1F1138920;
  PCURL::PCURL((PCURL *)&v6, @"Footage Inspector Linked Objects");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1088), &v6, (OZChannelFolder *)((char *)this + 448), 0x6Cu, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Channel Do Footage Replace");
  OZChannelButton::OZChannelButton((OZChannelButton *)((char *)this + 1216), (void (*)(void *))OZSceneNodeFile::replaceCallbackStub, this, &v6, (OZChannelFolder *)((char *)this + 448), 0x76u, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Footage Inspector Summary");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1408), &v6, (OZChannelFolder *)((char *)this + 448), 0x6Du, 0, 0);
  PCString::~PCString(&v6);
  *((_DWORD *)this + 384) = 0;
  *((_WORD *)this + 770) = 256;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *((_WORD *)this + 780) = 256;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 196);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1088), 8, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1088), 0x800000);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1088), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 1088));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1408), 8, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1408), 0x800000);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1408), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 1408));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1216), 16, 0);
}

void sub_1B7BB31EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelFolder::~OZChannelFolder(v13);
  OZChannelButton::~OZChannelButton(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  OZSceneNode::~OZSceneNode(v10);
  _Unwind_Resume(a1);
}

void OZSceneNodeFile::OZSceneNodeFile(OZSceneNodeFile *this, OZSceneNodeFile *a2, char a3)
{
  OZSceneNode::OZSceneNode(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F11380A8;
  *(void *)(v5 + 16) = &unk_1F11386C8;
  *(void *)(v5 + 48) = &unk_1F1138920;
  PCString v6 = (OZChannelFolder *)(v5 + 448);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 1088), (const OZChannelFolder *)((char *)a2 + 1088), (OZChannelFolder *)(v5 + 448));
  OZChannelButton::OZChannelButton((OZChannelButton *)((char *)this + 1216), (const OZChannelButton *)((char *)a2 + 1216), v6);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1408), (const OZChannelFolder *)((char *)a2 + 1408), v6);
  *((_DWORD *)this + 384) = *((_DWORD *)a2 + 384);
  *((_WORD *)this + 770) = *((_WORD *)a2 + 770);
  *(_OWORD *)((char *)this + 1544) = 0u;
  *((_WORD *)this + 780) = *((_WORD *)a2 + 780);
  PCString::PCString((PCString *)this + 196, (const PCString *)a2 + 196);
  OZChannelButton::setPrivateData((OZChannelButton *)((char *)this + 1216), this);
  long long v7 = *((_OWORD *)a2 + 13);
  uint64_t v8 = *((void *)a2 + 28);
  long long v9 = *(_OWORD *)((char *)a2 + 232);
  uint64_t v10 = *((void *)a2 + 31);
  OZChannelObjectRootBase::setTimeExtent((OZSceneNodeFile *)((char *)this + 56), (const PCTimeRange *)&v7, 0);
  if (*((void *)a2 + 193)) {
    operator new();
  }
  if (*((void *)a2 + 194)) {
    operator new();
  }
}

void sub_1B7BB342C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v6, 0x60C4044C4A2DFLL);
  PCString::~PCString(v5);
  OZChannelFolder::~OZChannelFolder(v4);
  OZChannelButton::~OZChannelButton(v3);
  OZChannelFolder::~OZChannelFolder(v2);
  OZSceneNode::~OZSceneNode(v1);
  _Unwind_Resume(a1);
}

void OZSceneNodeFile::~OZSceneNodeFile(OZSceneNodeFile *this)
{
  *(void *)this = &unk_1F11380A8;
  *((void *)this + 2) = &unk_1F11386C8;
  *((void *)this + 6) = &unk_1F1138920;
  uint64_t v2 = (PCURL *)*((void *)this + 193);
  if (v2)
  {
    PCURL::~PCURL(v2);
    MEMORY[0x1BA9BFBA0]();
  }
  *((void *)this + 193) = 0;
  uint64_t v3 = (PCURL *)*((void *)this + 194);
  if (v3)
  {
    PCURL::~PCURL(v3);
    MEMORY[0x1BA9BFBA0]();
  }
  *((void *)this + 194) = 0;
  PCString::~PCString((PCString *)this + 196);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1408));
  OZChannelButton::~OZChannelButton((OZChannelButton *)((char *)this + 1216));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1088));

  OZSceneNode::~OZSceneNode(this);
}

void OZSceneNodeFile::operator=(uint64_t a1, const void *a2)
{
  OZSceneNode::operator=(a1, (uint64_t)a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelFolder::operator=(a1 + 1088);
  OZChannelBase::operator=(a1 + 1216, (uint64_t)&v5[152]);
  *(PCString *)(a1 + 1368) = v5[171];
  PCString::set((PCString *)(a1 + 1376), v5 + 172);
  *(PCString *)(a1 + 1384) = v5[173];
  PCString::set((PCString *)(a1 + 1392), v5 + 174);
  *(unsigned char *)(a1 + 1400) = v5[175].var0;
  OZChannelFolder::operator=(a1 + 1408);
  OZChannelButton::setPrivateData((OZChannelButton *)(a1 + 1216), (void *)a1);
  *(unsigned char *)(a1 + 156OZDocument::~OZDocument(this - 1) = BYTE1(v5[195].var0);
  PCString::set((PCString *)(a1 + 1568), v5 + 196);
  *(unsigned char *)(a1 + 1560) = v5[195].var0;
  if (v5[193].var0) {
    operator new();
  }
  if (v5[194].var0) {
    operator new();
  }
}

void sub_1B7BB3718(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZSceneNodeFile::didFinishLoadingIntoScene(OZSceneNodeFile *this)
{
  return OZSceneNode::didFinishLoadingIntoScene((OZSceneNodeFile *)((char *)this - 16));
}

OZScene *OZSceneNodeFile::canDelete(OZSceneNodeFile *this)
{
  uint64_t result = (OZScene *)*((void *)this + 121);
  if (result)
  {
    DependantNodes = (void *)OZScene::getDependantNodes(result, *((_DWORD *)this + 20));
    if (!DependantNodes) {
      return (OZScene *)((*(unsigned int (**)(char *, uint64_t))(*((void *)this + 2) + 56))((char *)this + 16, 1) ^ 1);
    }
    uint64_t v4 = DependantNodes + 1;
    uint64_t v5 = (void *)*DependantNodes;
    if ((void *)*DependantNodes == DependantNodes + 1)
    {
      return (OZScene *)((*(unsigned int (**)(char *, uint64_t))(*((void *)this + 2) + 56))((char *)this + 16, 1) ^ 1);
    }
    else
    {
      while (1)
      {
        Node = OZScene::getNode(*((OZScene **)this + 121), *((_DWORD *)v5 + 7));
        if (Node)
        {
          if ((*(uint64_t (**)(void))(Node[2] + 56))()) {
            break;
          }
        }
        long long v7 = (void *)v5[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            long long v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v5[2];
            BOOL v9 = *v8 == (void)v5;
            uint64_t v5 = v8;
          }
          while (!v9);
        }
        uint64_t v5 = v8;
        if (v8 == v4) {
          return (OZScene *)((*(unsigned int (**)(char *, uint64_t))(*((void *)this + 2) + 56))((char *)this + 16, 1) ^ 1);
        }
      }
      return 0;
    }
  }
  return result;
}

OZScene *non-virtual thunk to'OZSceneNodeFile::canDelete(OZSceneNodeFile *this)
{
  return OZSceneNodeFile::canDelete((OZSceneNodeFile *)((char *)this - 16));
}

uint64_t non-virtual thunk to'OZSceneNodeFile::dirty(OZSceneNodeFile *this)
{
  return OZSceneNode::dirty((OZSceneNodeFile *)((char *)this - 16));
}

uint64_t OZSceneNodeFile::updateModifiedDate(OZSceneNodeFile *this)
{
  return 0;
}

void OZSceneNodeFile::getAssociatedFileURLs(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t OZSceneNodeFile::getAbsoluteFileURL(OZSceneNodeFile *this)
{
  return *((void *)this + 193);
}

void OZSceneNodeFile::setAbsoluteFileURL(OZSceneNodeFile *this, PCURL *a2)
{
  uint64_t v3 = (PCURL *)*((void *)this + 193);
  if (v3)
  {
    PCURL::~PCURL(v3);
    MEMORY[0x1BA9BFBA0]();
  }
  *((void *)this + 193) = 0;
  operator new();
}

void sub_1B7BB38F4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t OZSceneNodeFile::getRelativeFileURL(OZSceneNodeFile *this)
{
  return *((void *)this + 194);
}

void OZSceneNodeFile::setRelativeFileURL(OZSceneNodeFile *this, PCURL *a2)
{
  uint64_t v3 = (PCURL *)*((void *)this + 194);
  if (v3)
  {
    PCURL::~PCURL(v3);
    MEMORY[0x1BA9BFBA0]();
  }
  *((void *)this + 194) = 0;
  operator new();
}

void sub_1B7BB399C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

PCURL *OZSceneNodeFile::getURL@<X0>(OZSceneNodeFile *this@<X0>, PCURL *a2@<X8>)
{
  if (*((unsigned char *)this + 1561)) {
    return PCURL::PCURL(a2, (const PCString *)this + 196, 0);
  }
  else {
    return PCURL::PCURL(a2, *((const PCURL **)this + 193));
  }
}

uint64_t OZSceneNodeFile::setIsFileMissing(uint64_t this, char a2)
{
  *(unsigned char *)(this + 156OZDocument::~OZDocument(this - 1) = a2;
  return this;
}

uint64_t OZSceneNodeFile::isAssociatedFileMissing(uint64_t a1, uint64_t *a2)
{
  (*(void (**)(const PCURL **__return_ptr))(*(void *)a1 + 1512))(&v13);
  uint64_t v3 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v4 = v13;
  uint64_t v5 = v14;
  if (v13 == v14)
  {
    char v7 = 0;
  }
  else
  {
    uint64_t v6 = (void *)v3;
    char v7 = 0;
    do
    {
      PCURL::PCURL((PCURL *)&v15, v4);
      PCURL::getAsFileSystemString((const __CFURL **)&v15, &v12);
      uint64_t v8 = PCString::ns_str(&v12);
      PCString::~PCString(&v12);
      char v9 = [v6 fileExistsAtPath:v8];
      if (a2) {
        char v10 = v9;
      }
      else {
        char v10 = 1;
      }
      if (v10)
      {
        v7 |= v9 ^ 1;
      }
      else
      {
        std::vector<PCURL>::push_back[abi:ne180100](a2, (PCURL *)&v15);
        char v7 = 1;
      }
      PCURL::~PCURL((PCURL *)&v15);
      uint64_t v4 = (const PCURL *)((char *)v4 + 8);
    }
    while (v4 != v5);
  }
  uint64_t v15 = &v13;
  std::vector<PCURL>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  return v7 & 1;
}

void sub_1B7BB3B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  a14 = &a11;
  std::vector<PCURL>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

PCURL *std::vector<PCURL>::push_back[abi:ne180100](uint64_t *a1, PCURL *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = (PCURL *)&v14[8 * v10];
    PCSharedCount v18 = &v14[8 * v13];
    PCURL::PCURL(v16, a2);
    uint64_t v17 = (char *)v16 + 8;
    std::vector<PCURL>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = (PCURL *)std::__split_buffer<PCURL>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = PCURL::PCURL(*(PCURL **)(v4 - 8), a2);
    uint64_t v9 = v7 + 8;
    a1[1] = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void sub_1B7BB3C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void OZSceneNodeFile::getFilename(OZSceneNodeFile *this@<X0>, PCSharedCount *a2@<X8>)
{
  if (*((unsigned char *)this + 1561))
  {
    PCSharedCount::PCSharedCount(a2);
  }
  else
  {
    (*(void (**)(const __CFURL **__return_ptr))(*(void *)this + 1232))(&v3);
    PCURL::getFilename(&v3, (PCString *)a2);
    PCURL::~PCURL((PCURL *)&v3);
  }
}

void sub_1B7BB3CF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

void OZSceneNodeFile::getShortFilename(OZSceneNodeFile *this@<X0>, PCSharedCount *a2@<X8>)
{
  if (*((unsigned char *)this + 1561))
  {
    PCSharedCount::PCSharedCount(a2);
  }
  else
  {
    (*(void (**)(CFURLRef *__return_ptr))(*(void *)this + 1232))(&v3);
    PCURL::getShortFilename(&v3, (PCString *)a2);
    PCURL::~PCURL((PCURL *)&v3);
  }
}

void sub_1B7BB3DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

void OZSceneNodeFile::getExtension(OZSceneNodeFile *this@<X0>, PCSharedCount *a2@<X8>)
{
  if (*((unsigned char *)this + 1561))
  {
    PCSharedCount::PCSharedCount(a2);
  }
  else
  {
    (*(void (**)(const __CFURL **__return_ptr))(*(void *)this + 1232))(&v3);
    PCURL::getExtension(&v3, (PCURL *)a2);
    PCURL::~PCURL((PCURL *)&v3);
  }
}

void sub_1B7BB3E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

void OZSceneNodeFile::getAsFileSystemString(OZSceneNodeFile *this@<X0>, PCSharedCount *a2@<X8>)
{
  if (*((unsigned char *)this + 1561))
  {
    PCSharedCount::PCSharedCount(a2);
  }
  else
  {
    (*(void (**)(const __CFURL **__return_ptr))(*(void *)this + 1232))(&v3);
    PCURL::getAsFileSystemString(&v3, (PCString *)a2);
    PCURL::~PCURL((PCURL *)&v3);
  }
}

void sub_1B7BB3EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

void OZSceneNodeFile::getAsURLString(const PCString *this@<X0>, PCString *a2@<X8>)
{
  if (BYTE1(this[195].var0))
  {
    PCString::PCString(a2, this + 196);
  }
  else
  {
    ((void (*)(const __CFURL **__return_ptr))this->var0[38].data)(&v3);
    PCURL::getAsURLString(&v3, (PCURL *)a2);
    PCURL::~PCURL((PCURL *)&v3);
  }
}

void sub_1B7BB3FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

uint64_t OZSceneNodeFile::fileSize(OZSceneNodeFile *this)
{
  (*(void (**)(PCString *__return_ptr))(*(void *)this + 1264))(&v4);
  uint64_t v1 = [(__CFString *)PCString::ns_str(&v4) stringByResolvingSymlinksInPath];
  PCString::~PCString(&v4);
  uint64_t v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "attributesOfItemAtPath:error:", v1, 0);
  return objc_msgSend((id)objc_msgSend(v2, "objectForKey:", *MEMORY[0x1E4F28390]), "unsignedLongLongValue");
}

void sub_1B7BB4054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZSceneNodeFile::eval()
{
  return 0;
}

uint64_t OZSceneNodeFile::calcHashForState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(unsigned __int8 *)(a1 + 1561);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 48))(a2, v8);
  (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if (!*(unsigned char *)(a1 + 1561))
  {
    (*(void (**)(PCString *__return_ptr, uint64_t))(*(void *)a1 + 1264))(&v10, a1);
    (*(void (**)(uint64_t, PCString *))(*(void *)a2 + 104))(a2, &v10);
    PCString::~PCString(&v10);
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 56))(a2, *(unsigned int *)(a1 + 1536));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 536))(a1, a2, a3, a4, 1);
}

void sub_1B7BB4220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZSceneNodeFile::calcHashForState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZSceneNodeFile::calcHashForState(a1 - 16, a2, a3, a4);
}

void OZSceneNodeFile::replaceCallback(OZChannelBase **this)
{
  ((void (*)(OZChannelBase **))(*this)[12].var11)(this);
  OZChannelBase::setRangeName(this[121], v2);
  var2 = (OZDocument *)this[121][14].var2;

  OZDocument::postNotification(var2, 524336);
}

uint64_t OZSceneNodeFile::isActiveAtTime(OZSceneNodeFile *this, CMTime *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZSceneNodeFile::isActiveAtTime(OZSceneNodeFile *this, CMTime *a2)
{
  return 1;
}

void *OZSceneNodeFile::getHashForStateRN@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, OZRenderParams *a3@<X2>, uint64_t **a4@<X3>, _OWORD *a5@<X8>)
{
  return OZObjectManipulator::getHashForState((_OWORD *)(a1 + 16), a2, a3, a4, a5);
}

_OWORD *OZSceneNodeFile::getStaticHashRN(uint64_t a1, const void *a2, uint64_t **a3)
{
  return OZObjectManipulator::getStaticHash((_OWORD *)(a1 + 16), a2, a3);
}

uint64_t OZSceneNodeFile::parseBegin(OZSceneNodeFile *this, PCSerializerReadStream *a2)
{
  return 0;
}

uint64_t non-virtual thunk to'OZSceneNodeFile::parseBegin(OZSceneNodeFile *this, PCSerializerReadStream *a2)
{
  return 0;
}

uint64_t OZSceneNodeFile::parseEnd(OZSceneNodeFile *this, PCSerializerReadStream *a2)
{
  return 0;
}

uint64_t non-virtual thunk to'OZSceneNodeFile::parseEnd(OZSceneNodeFile *this, PCSerializerReadStream *a2)
{
  return 0;
}

uint64_t OZSceneNodeFile::parseElement(OZSceneNodeFile *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 0;
}

uint64_t non-virtual thunk to'OZSceneNodeFile::parseElement(OZSceneNodeFile *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 0;
}

uint64_t OZSceneNodeFile::isInUse(OZSceneNodeFile *this)
{
  uint64_t result = *((void *)this + 121);
  if (result)
  {
    uint64_t result = OZScene::getDependantNodes((OZScene *)result, *((_DWORD *)this + 20));
    if (result)
    {
      CFURLRef v3 = (void *)(result + 8);
      PCString v4 = *(void **)result;
      if (*(void *)result == result + 8)
      {
        return 0;
      }
      else
      {
        while (1)
        {
          if (OZScene::getObject(*((OZScene **)this + 121), *((_DWORD *)v4 + 7)))
          {
            Object = (const void *)OZScene::getObject(*((OZScene **)this + 121), *((_DWORD *)v4 + 7));
            if (!Object
            {
              break;
            }
          }
          unint64_t v6 = (void *)v4[1];
          if (v6)
          {
            do
            {
              unint64_t v7 = v6;
              unint64_t v6 = (void *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              unint64_t v7 = (void *)v4[2];
              BOOL v8 = *v7 == (void)v4;
              PCString v4 = v7;
            }
            while (!v8);
          }
          PCString v4 = v7;
          if (v7 == v3) {
            return 0;
          }
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t OZSceneNode::setOwner(uint64_t this, OZSceneNode *a2)
{
  *(void *)(this + 960) = a2;
  return this;
}

uint64_t OZSceneNode::calcStaticHash(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 528))(a1, a2, a3, 1);
}

uint64_t OZSceneNodeFile::getIsFileMissing(OZSceneNodeFile *this)
{
  return *((unsigned __int8 *)this + 1561);
}

uint64_t OZSceneNodeFile::getMissingFileURL(OZSceneNodeFile *this)
{
  return (uint64_t)this + 1568;
}

void OZSceneNodeFile::setName(OZSceneNodeFile *this, const PCString *a2)
{
}

uint64_t OZSceneNodeFile::getFilePathForCollectOperation(OZSceneNodeFile *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 1264))();
}

void non-virtual thunk to'OZSceneNodeFile::setName(OZSceneNodeFile *this, const PCString *a2)
{
}

uint64_t non-virtual thunk to'OZSceneNode::calcStaticHash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 16) + 528))();
}

void std::vector<PCURL>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    PCString v4 = (char *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        PCURL::~PCURL((PCURL *)(v4 - 8));
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<PCURL>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCURL>,std::reverse_iterator<PCURL*>,std::reverse_iterator<PCURL*>,std::reverse_iterator<PCURL*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCURL>,std::reverse_iterator<PCURL*>,std::reverse_iterator<PCURL*>,std::reverse_iterator<PCURL*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 8;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (PCURL *)(v11 + v10);
    v10 -= 8;
    PCURL::PCURL(v12, (const PCURL *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<PCURL>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    PCURL::~PCURL((PCURL *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void OZLocking::OZLocking(OZLocking *this)
{
  *(void *)this = &unk_1F10BC940;
  PCSharedMutex::PCSharedMutex((OZLocking *)((char *)this + 8));
  *((void *)this + 14) = 0;
  *((unsigned char *)this + 120) = 0;
  PCMutex::PCMutex((PCMutex *)((char *)this + 128), 1);
  *((void *)this + 16) = &unk_1F10933F0;
}

void sub_1B7BB47AC(_Unwind_Exception *a1)
{
  PCSharedMutex::~PCSharedMutex(v1);
  _Unwind_Resume(a1);
}

char *OZLocking::getLockDependenciesForElement(char *result, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = result;
    uint64_t v26 = result;
    if (result)
    {
      for (uint64_t i = *(void **)(a4 + 8); i; uint64_t i = (void *)*i)
      {
        unint64_t v10 = i[4];
        if ((unint64_t)result >= v10)
        {
          if (v10 >= (unint64_t)result) {
            return result;
          }
          ++i;
        }
      }
      if (a2)
      {
        PCDirectedGraph<OZLocking *>::addEdge(a3, a2, (uint64_t)result);
      }
      else
      {
        uint64_t v27 = result;
        PCString v28 = (unint64_t *)&v27;
        std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::__emplace_unique_key_args<OZLocking *,std::piecewise_construct_t const&,std::tuple<OZLocking * const&>,std::tuple<>>(a3, (unint64_t *)&v27, (uint64_t)&std::piecewise_construct, (uint64_t **)&v28);
      }
      std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, (unint64_t *)&v26, (uint64_t *)&v26);
    }
    else
    {
      uint64_t v26 = (char *)a2;
    }
    uint64_t v11 = v7;
    do
    {
      for (uint64_t j = (char *)*((void *)v11 + 126); j != v11 + 1000; uint64_t j = (char *)*((void *)j + 1))
      {
        unint64_t v13 = (const void *)*((void *)j + 2);
        if (v13)
        {
          if (v14)
          {
            for (k = *(void **)(a4 + 8); k; k = (void *)*k)
            {
              unint64_t v16 = k[4];
              if ((unint64_t)v14 >= v16)
              {
                if (v16 >= (unint64_t)v14) {
                  goto LABEL_24;
                }
                ++k;
              }
            }
            (*(void (**)(void *, char *, uint64_t **, uint64_t))(*(void *)v14 + 48))(v14, v26, a3, a4);
          }
        }
LABEL_24:
        ;
      }
      uint64_t v11 = (char *)*((void *)v11 + 120);
    }
    while (v11);
    if (v17)
    {
      PCSharedCount v18 = v17;
      uint64_t v19 = (*(uint64_t (**)(void *))(*(void *)v17 + 1024))(v17);
      uint64_t v20 = (*(uint64_t (**)(void *))(*(void *)v18 + 1032))(v18);
      if (v19 != v20)
      {
        uint64_t v21 = v20;
        do
        {
          CMTime v22 = *(const void **)(v19 + 16);
          if (v22)
          {
            if (v23) {
              OZLocking::getLockDependenciesForElement(v23, a2, a3, a4);
            }
          }
          uint64_t v19 = *(void *)(v19 + 8);
        }
        while (v19 != v21);
      }
    }
    int v24 = v26;
    CMTime v25 = (OZScene *)(*(uint64_t (**)(char *))(*(void *)v7 + 272))(v7);
    uint64_t result = OZLocking::addLockDependenciesForDependents(v24, v25, (uint64_t)a3, a4);
    if (v8 && v26) {
      return (char *)std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)&v26);
    }
  }
  return result;
}

char *OZLocking::addLockDependenciesForDependents(char *result, OZScene *a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v7 = result;
      if (result)
      {
        uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)result + 256))(result);
        unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8);
        uint64_t result = (char *)OZScene::getDependantNodes(a2, v9);
        if (result)
        {
          unint64_t v10 = result + 8;
          uint64_t v11 = *(void **)result;
          if (*(char **)result != result + 8)
          {
            do
            {
              uint64_t result = (char *)OZScene::getObject(a2, *((_DWORD *)v11 + 7));
              if (result)
              {
                if (result) {
                  uint64_t result = (char *)(*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(*(void *)result + 48))(result, v7, a3, a4);
                }
              }
              uint64_t v12 = (void *)v11[1];
              if (v12)
              {
                do
                {
                  unint64_t v13 = v12;
                  uint64_t v12 = (void *)*v12;
                }
                while (v12);
              }
              else
              {
                do
                {
                  unint64_t v13 = (void *)v11[2];
                  BOOL v14 = *v13 == (void)v11;
                  uint64_t v11 = v13;
                }
                while (!v14);
              }
              uint64_t v11 = v13;
            }
            while (v13 != v10);
          }
        }
      }
    }
  }
  return result;
}

uint64_t OZLocking::reset(OZLocking *this)
{
  uint64_t v2 = (PCMutex *)((char *)this + 128);
  PCMutex::lock((PCMutex *)((char *)this + 128));
  *((void *)this + 14) = 0;
  *((unsigned char *)this + 120) = 0;
  return PCMutex::unlock(v2);
}

uint64_t OZLocking::removeFromLockingGroup(OZLocking *this)
{
  uint64_t v2 = (PCMutex *)((char *)this + 128);
  PCMutex::lock((PCMutex *)((char *)this + 128));
  uint64_t v3 = (OZScene **)*((void *)this + 14);
  if (v3)
  {
    unsigned int v4 = (*(uint64_t (**)(OZLocking *))(*(void *)this + 32))(this);
    OZLockingGroup::remove(v3, v4);
  }
  OZLocking::reset(this);
  return PCMutex::unlock(v2);
}

void sub_1B7BB4DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void OZLockingGroup::remove(OZScene **this, unsigned int a2)
{
  Object = (const void *)OZScene::getObject(this[3], a2);
  if (Object)
  {
    {
      uint64_t v5 = this[1];
      if (v5)
      {
        uint64_t v6 = (uint64_t *)(this + 1);
        do
        {
          unsigned int v7 = *((_DWORD *)v5 + 8);
          BOOL v8 = v7 >= a2;
          if (v7 >= a2) {
            unsigned int v9 = (OZScene **)v5;
          }
          else {
            unsigned int v9 = (OZScene **)((char *)v5 + 8);
          }
          if (v8) {
            uint64_t v6 = (uint64_t *)v5;
          }
          uint64_t v5 = *v9;
        }
        while (*v9);
        if (v6 != (uint64_t *)(this + 1) && *((_DWORD *)v6 + 8) <= a2)
        {
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)this, v6);
          operator delete(v6);
        }
      }
    }
  }
}

uint64_t OZLocking::setLockingGroup(uint64_t result, uint64_t a2)
{
  *(void *)(result + 112) = a2;
  return result;
}

uint64_t OZLockingGroup::OZLockingGroup(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = 0;
  *(void *)uint64_t result = result + 8;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void OZLockingGroup::~OZLockingGroup(OZScene **this)
{
  uint64_t v2 = this + 1;
  uint64_t v3 = *this;
  if (*this != (OZScene *)(this + 1))
  {
    do
    {
      Object = (const void *)OZScene::getObject(this[3], *((_DWORD *)v3 + 8));
      if (Object)
      {
        if (v5) {
          OZLocking::reset(v5);
        }
      }
      uint64_t v6 = (OZScene *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          unsigned int v7 = (OZScene **)v6;
          uint64_t v6 = *(OZScene **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unsigned int v7 = (OZScene **)*((void *)v3 + 2);
          BOOL v8 = *v7 == v3;
          uint64_t v3 = (OZScene *)v7;
        }
        while (!v8);
      }
      uint64_t v3 = (OZScene *)v7;
    }
    while (v7 != v2);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this, this[1]);
}

uint64_t **OZLockingGroup::add(OZScene **this, unsigned int a2)
{
  uint64_t result = (uint64_t **)OZScene::getObject(this[3], a2);
  if (result)
  {
    if (result)
    {
      *((void *)&v5 + OZDocument::~OZDocument(this - 1) = result;
      *(void *)&long long v5 = a2;
      return std::__tree<OZLockingGroup::LockEntry,OZLockingGroup::LockEntryCompare,std::allocator<OZLockingGroup::LockEntry>>::__emplace_unique_key_args<OZLockingGroup::LockEntry,OZLockingGroup::LockEntry const&>((uint64_t **)this, (unsigned int *)&v5, &v5);
    }
  }
  return result;
}

void OZLockingGroup::acquireLocks(OZLockingGroup *this)
{
  OZScene::willAcquireLockingGroup(*((OZScene **)this + 3));
  uint64_t v2 = *(OZScene **)this;
  if (*(OZLockingGroup **)this != (OZLockingGroup *)((char *)this + 8))
  {
    do
    {
      Object = (const void *)OZScene::getObject(*((OZScene **)this + 3), *((_DWORD *)v2 + 8));
      if (Object)
      {
        if (v4) {
          (**v4)(v4);
        }
      }
      long long v5 = (OZLockingGroup *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          long long v5 = *(OZLockingGroup **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (OZLockingGroup *)*((void *)v2 + 2);
          BOOL v7 = *(void *)v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != (OZLockingGroup *)((char *)this + 8));
  }
  atomic_fetch_add((atomic_uint *volatile)this + 8, 1u);
}

void OZLockingGroup::releaseLocks(OZLockingGroup *this)
{
  uint64_t v2 = (void *)((char *)this + 8);
  if ((OZLockingGroup *)((char *)this + 8) != *(OZLockingGroup **)this)
  {
    do
    {
      uint64_t v3 = *v2;
      unsigned int v4 = v2;
      if (*v2)
      {
        do
        {
          uint64_t v5 = v3;
          uint64_t v3 = *(void *)(v3 + 8);
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v5 = v4[2];
          BOOL v6 = *(void *)v5 == (void)v4;
          unsigned int v4 = (void *)v5;
        }
        while (v6);
      }
      Object = (const void *)OZScene::getObject(*((OZScene **)this + 3), *(_DWORD *)(v5 + 32));
      if (Object)
      {
        if (v8) {
          (*(void (**)(void *))(*(void *)v8 + 8))(v8);
        }
      }
      unsigned int v9 = (void *)*v2;
      if (*v2)
      {
        do
        {
          unint64_t v10 = v9;
          unsigned int v9 = (void *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          unint64_t v10 = (void *)v2[2];
          BOOL v6 = *v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (v6);
      }
      uint64_t v2 = v10;
    }
    while (v10 != *(void **)this);
  }
  atomic_fetch_add((atomic_uint *volatile)this + 8, 0xFFFFFFFF);
  uint64_t v11 = (OZScene *)*((void *)this + 3);

  OZScene::didReleaseLockingGroup(v11);
}

void OZLockingGroup::acquireReadLocks(OZLockingGroup *this)
{
  OZScene::willAcquireLockingGroup(*((OZScene **)this + 3));
  uint64_t v2 = *(OZScene **)this;
  if (*(OZLockingGroup **)this != (OZLockingGroup *)((char *)this + 8))
  {
    do
    {
      Object = (const void *)OZScene::getObject(*((OZScene **)this + 3), *((_DWORD *)v2 + 8));
      if (Object)
      {
        if (v4) {
          (*(void (**)(void *))(*(void *)v4 + 16))(v4);
        }
      }
      uint64_t v5 = (OZLockingGroup *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          BOOL v6 = v5;
          uint64_t v5 = *(OZLockingGroup **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          BOOL v6 = (OZLockingGroup *)*((void *)v2 + 2);
          BOOL v7 = *(void *)v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != (OZLockingGroup *)((char *)this + 8));
  }
  atomic_fetch_add((atomic_uint *volatile)this + 8, 1u);
}

void OZLockingGroup::releaseReadLocks(OZLockingGroup *this)
{
  uint64_t v2 = (void *)((char *)this + 8);
  if ((OZLockingGroup *)((char *)this + 8) != *(OZLockingGroup **)this)
  {
    do
    {
      uint64_t v3 = *v2;
      unsigned int v4 = v2;
      if (*v2)
      {
        do
        {
          uint64_t v5 = v3;
          uint64_t v3 = *(void *)(v3 + 8);
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v5 = v4[2];
          BOOL v6 = *(void *)v5 == (void)v4;
          unsigned int v4 = (void *)v5;
        }
        while (v6);
      }
      Object = (const void *)OZScene::getObject(*((OZScene **)this + 3), *(_DWORD *)(v5 + 32));
      if (Object)
      {
        if (v8) {
          (*(void (**)(void *))(*(void *)v8 + 24))(v8);
        }
      }
      unsigned int v9 = (void *)*v2;
      if (*v2)
      {
        do
        {
          unint64_t v10 = v9;
          unsigned int v9 = (void *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          unint64_t v10 = (void *)v2[2];
          BOOL v6 = *v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (v6);
      }
      uint64_t v2 = v10;
    }
    while (v10 != *(void **)this);
  }
  atomic_fetch_add((atomic_uint *volatile)this + 8, 0xFFFFFFFF);
  uint64_t v11 = (OZScene *)*((void *)this + 3);

  OZScene::didReleaseLockingGroup(v11);
}

OZLockingGroup::WriteSentry *OZLockingGroup::WriteSentry::WriteSentry(OZLockingGroup::WriteSentry *this, OZLockingGroup *a2)
{
  *(void *)this = a2;
  if (a2) {
    OZLockingGroup::acquireLocks(a2);
  }
  return this;
}

void OZLockingGroup::WriteSentry::~WriteSentry(OZLockingGroup **this)
{
  uint64_t v1 = *this;
  if (v1) {
    OZLockingGroup::releaseLocks(v1);
  }
}

OZLockingGroup::ReadSentry *OZLockingGroup::ReadSentry::ReadSentry(OZLockingGroup::ReadSentry *this, OZLockingGroup *a2)
{
  *(void *)this = a2;
  if (a2) {
    OZLockingGroup::acquireReadLocks(a2);
  }
  return this;
}

void OZLockingGroup::ReadSentry::~ReadSentry(OZLockingGroup **this)
{
  uint64_t v1 = *this;
  if (v1) {
    OZLockingGroup::releaseReadLocks(v1);
  }
}

uint64_t **std::__tree<OZLockingGroup::LockEntry,OZLockingGroup::LockEntryCompare,std::allocator<OZLockingGroup::LockEntry>>::__emplace_unique_key_args<OZLockingGroup::LockEntry,OZLockingGroup::LockEntry const&>(uint64_t **a1, unsigned int *a2, _OWORD *a3)
{
  BOOL v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        BOOL v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        BOOL v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void OZSceneNode::OZSceneNode(OZSceneNode *this, OZFactory *a2, const PCString *a3, unsigned int NextUniqueID)
{
  *(void *)this = &unk_1F1139198;
  *((void *)this + OZDocument::~OZDocument(this - 1) = a2;
  *((void *)this + 2) = &unk_1F1144468;
  *((void *)this + 3) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZSceneNode *)((char *)this + 32));
  *(void *)this = &unk_1F1138990;
  *((void *)this + 2) = &unk_1F1138E50;
  *((void *)this + 6) = &unk_1F11390A8;
  if (!NextUniqueID) {
    NextUniqueID = OZChannelBase::getNextUniqueID(v7);
  }
  OZChannelSceneNode::OZChannelSceneNode((OZSceneNode *)((char *)this + 56), a3, 0, NextUniqueID, 0);
  PCURL::PCURL((PCURL *)&v8, @"Channel Properties");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 320), &v8, (OZChannelFolder *)((char *)this + 56), 1u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Channel Object");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 448), &v8, (OZChannelFolder *)((char *)this + 56), 2u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Channel Effects");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 576), &v8, (OZChannelFolder *)((char *)this + 56), 3u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Channel Behaviors");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 704), &v8, (OZChannelFolder *)((char *)this + 56), 4u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Channel Styles");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 832), &v8, (OZChannelFolder *)((char *)this + 56), 5u, 0, 0);
  PCString::~PCString(&v8);
  *((_OWORD *)this + 60) = 0u;
  *((void *)this + 122) = (char *)this + 976;
  *((void *)this + 123) = (char *)this + 976;
  *((void *)this + 124) = 0;
  *((void *)this + 125) = (char *)this + 1000;
  *((void *)this + 126) = (char *)this + 1000;
  *((void *)this + 127) = 0;
  *((void *)this + 129) = 0x4014000000000000;
  PCWorkingColorVector::PCWorkingColorVector((OZSceneNode *)((char *)this + 1040));
  *((_DWORD *)this + 270) = 0;
  *((void *)this + 134) = 0;
  *((_OWORD *)this + 66) = 0u;
  OZChannelSceneNode::setSceneNode((uint64_t)this + 56, this);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 0x80000, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 56));
  *((_DWORD *)this + 256) = 0;
  *((unsigned char *)this + 1028) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 576), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 576));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 704), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 704));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 832), 2, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 832), 0x80000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 832));
}

void sub_1B7BB59FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, OZChannelFolder *a11, PCString a12)
{
  std::__list_imp<unsigned int>::clear(v19);
  std::__list_imp<unsigned int>::clear(v18);
  OZChannelFolder::~OZChannelFolder(v17);
  OZChannelFolder::~OZChannelFolder(v16);
  OZChannelFolder::~OZChannelFolder(v15);
  OZChannelFolder::~OZChannelFolder(v14);
  OZChannelFolder::~OZChannelFolder(a11);
  OZChannelSceneNode::~OZChannelSceneNode(v13);
  *(void *)(v12 + 16) = &unk_1F1138080;
  uint64_t v20 = *(void *)(v12 + 24);
  if (v20)
  {
    *(void *)(v20 + 8) = 0;
    *(void *)(v12 + 24) = 0;
  }
  _Unwind_Resume(a1);
}

void OZSceneNode::OZSceneNode(OZSceneNode *this, const OZSceneNode *a2, char a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)this = &unk_1F1139198;
  *((void *)this + OZDocument::~OZDocument(this - 1) = v6;
  *((void *)this + 2) = &unk_1F1144468;
  *((void *)this + 3) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZSceneNode *)((char *)this + 32));
  *(void *)this = &unk_1F1138990;
  *((void *)this + 2) = &unk_1F1138E50;
  *((void *)this + 6) = &unk_1F11390A8;
  OZChannelSceneNode::OZChannelSceneNode((OZSceneNode *)((char *)this + 56), (const OZSceneNode *)((char *)a2 + 56), 0);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 320), (const OZChannelFolder *)((char *)a2 + 320), (OZChannelFolder *)((char *)this + 56));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 448), (const OZChannelFolder *)((char *)a2 + 448), (OZChannelFolder *)((char *)this + 56));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 576), (const OZChannelFolder *)((char *)a2 + 576), (OZChannelFolder *)((char *)this + 56));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 704), (const OZChannelFolder *)((char *)a2 + 704), (OZChannelFolder *)((char *)this + 56));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 832), (const OZChannelFolder *)((char *)a2 + 832), (OZChannelFolder *)((char *)this + 56));
  *((_OWORD *)this + 60) = 0u;
  *((void *)this + 122) = (char *)this + 976;
  *((void *)this + 123) = (char *)this + 976;
  *((void *)this + 124) = 0;
  *((void *)this + 125) = (char *)this + 1000;
  *((void *)this + 126) = (char *)this + 1000;
  *((void *)this + 127) = 0;
  *((void *)this + 129) = *((void *)a2 + 129);
  PCWorkingColorVector::PCWorkingColorVector((OZSceneNode *)((char *)this + 1040));
  *((void *)this + 134) = 0;
  *((_OWORD *)this + 66) = 0u;
  *((_DWORD *)this + 270) = *((_DWORD *)a2 + 270) + 1;
  unsigned int v7 = (OZChannelBase *)OZChannelSceneNode::setSceneNode((uint64_t)this + 56, this);
  *((_DWORD *)this + 256) = *((_DWORD *)a2 + 256);
  *((unsigned char *)this + 1028) = *((unsigned char *)a2 + 1028);
  if ((a3 & 2) != 0)
  {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v7);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 56), NextUniqueID);
  }
}

void sub_1B7BB5D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelFolder *a10, OZChannelFolder *a11, uint64_t a12)
{
  std::__list_imp<unsigned int>::clear(v14);
  std::__list_imp<unsigned int>::clear(v18);
  OZChannelFolder::~OZChannelFolder(v17);
  OZChannelFolder::~OZChannelFolder(v16);
  OZChannelFolder::~OZChannelFolder(v15);
  OZChannelFolder::~OZChannelFolder(a10);
  OZChannelFolder::~OZChannelFolder(a11);
  OZChannelSceneNode::~OZChannelSceneNode(v13);
  *(void *)(v12 + 16) = &unk_1F1138080;
  uint64_t v20 = *(void *)(v12 + 24);
  if (v20)
  {
    *(void *)(v20 + 8) = 0;
    *(void *)(v12 + 24) = 0;
  }
  _Unwind_Resume(a1);
}

void OZSceneNode::~OZSceneNode(OZSceneNode *this)
{
  *(void *)this = &unk_1F1138990;
  *((void *)this + 2) = &unk_1F1138E50;
  *((void *)this + 6) = &unk_1F11390A8;
  uint64_t v2 = (OZSceneNode *)((char *)this + 56);
  int isSolo = OZChannelBase::isSolo((OZChannelBase *)((char *)this + 56));
  while (1)
  {
    uint64_t v4 = *((void *)this + 124);
    if (!v4) {
      break;
    }
    uint64_t v5 = (uint64_t *)*((void *)this + 123);
    uint64_t v6 = (unsigned int *)v5[2];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = v5[1];
    *(void *)v5[1] = v7;
    *((void *)this + 124) = v4 - 1;
    operator delete(v5);
    PCString v8 = (OZScene *)*((void *)this + 121);
    if (v8)
    {
      if (v6) {
        unsigned int v9 = (OZObjectManipulator *)(v6 + 12);
      }
      else {
        unsigned int v9 = 0;
      }
      OZScene::unregisterObject(v8, v9);
      OZScene::removeAllDependencies(*((OZScene **)this + 121), v6[28]);
LABEL_9:
      (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
    }
    else if (v6)
    {
      goto LABEL_9;
    }
  }
  while (1)
  {
    uint64_t v15 = *((void *)this + 127);
    if (!v15) {
      break;
    }
    unint64_t v10 = (uint64_t *)*((void *)this + 126);
    uint64_t v11 = (unsigned int *)v10[2];
    uint64_t v12 = *v10;
    *(void *)(v12 + 8) = v10[1];
    *(void *)v10[1] = v12;
    *((void *)this + 127) = v15 - 1;
    operator delete(v10);
    unint64_t v13 = (OZScene *)*((void *)this + 121);
    if (v13)
    {
      if (v11) {
        BOOL v14 = (OZObjectManipulator *)(v11 + 4);
      }
      else {
        BOOL v14 = 0;
      }
      OZScene::unregisterObject(v13, v14);
      OZScene::removeAllDependencies(*((OZScene **)this + 121), v11[20]);
    }
    else if (!v11)
    {
      continue;
    }
    (*(void (**)(unsigned int *))(*(void *)v11 + 8))(v11);
  }
  OZSceneNode::removeFromParent(this);
  OZSceneNode::removeFromLinked(this);
  (*(void (**)(OZSceneNode *))(*(void *)this + 760))(this);
  unint64_t v16 = (OZSceneNode **)*((void *)this + 121);
  if (v16)
  {
    if (v16[153] == this)
    {
      OZScene::setCurrentObject((OZScene *)v16, 0);
      unint64_t v16 = (OZSceneNode **)*((void *)this + 121);
    }
    if (v16[154] == this)
    {
      OZScene::setActiveLayer((uint64_t)v16, 0);
      unint64_t v16 = (OZSceneNode **)*((void *)this + 121);
    }
    OZScene::unregisterNode((OZScene *)v16, this);
    if (isSolo)
    {
      memset(v33, 0, sizeof(v33));
      memset(v32, 0, 24);
      int v34 = 1065353216;
      long long v29 = 0u;
      long long v30 = 0u;
      memset(v28, 0, 24);
      int v31 = 1065353216;
      memset(v26, 0, sizeof(v26));
      memset(v25, 0, 24);
      int v27 = 1065353216;
      OZScene::begin(*((OZScene **)this + 121), (uint64_t)v21);
      *(_OWORD *)PCString v28 = *(_OWORD *)v21;
      *(_OWORD *)&v28[9] = *(_OWORD *)&v21[9];
      int v31 = v24;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(&v29, v23, 0);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v22);
      OZScene::end_sel(*((OZScene **)this + 121), (uint64_t)v21);
      *(_OWORD *)CMTime v25 = *(_OWORD *)v21;
      *(_OWORD *)&v25[9] = *(_OWORD *)&v21[9];
      int v27 = v24;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v26, v23, 0);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v22);
      *(_OWORD *)float64x2_t v32 = *(_OWORD *)v28;
      *(_OWORD *)&v32[9] = *(_OWORD *)&v28[9];
      int v34 = v31;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v33, (__n128 *)v30, 0);
      while (*(void *)v32 != *(void *)v25)
      {
        if (*(void *)v32 != *(void *)&v32[16])
        {
          uint64_t v18 = *(void *)(*(void *)v32 + 16);
          if (v18)
          {
            if ((*(uint64_t (**)(uint64_t))(*(void *)v18 + 712))(v18))
            {
              if (*(void *)v32 != *(void *)v25) {
                goto LABEL_32;
              }
              break;
            }
          }
        }
        OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v32);
      }
      OZScene::updateSoloFlag(*((OZScene **)this + 121), v17);
LABEL_32:
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v26);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v29);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v33);
    }
  }
  uint64_t v19 = (void *)*((void *)this + 132);
  if (v19)
  {
    *((void *)this + 133) = v19;
    operator delete(v19);
  }
  std::__list_imp<unsigned int>::clear((void *)this + 125);
  std::__list_imp<unsigned int>::clear((void *)this + 122);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 832));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 704));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 576));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 448));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 320));
  OZChannelSceneNode::~OZChannelSceneNode(v2);
  *((void *)this + 2) = &unk_1F1138080;
  uint64_t v20 = *((void *)this + 3);
  if (v20)
  {
    *(void *)(v20 + 8) = 0;
    *((void *)this + 3) = 0;
  }
}

{
  uint64_t vars8;

  OZSceneNode::~OZSceneNode(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZSceneNode::removeFromParent(OZSceneNode *this)
{
  uint64_t v2 = *((void *)this + 120);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 496))(v2);
    uint64_t v3 = **((void **)this + 120);
    if ((*((unsigned char *)this + 1024) & 8) != 0) {
      (*(void (**)(void))(v3 + 1096))();
    }
    else {
      (*(void (**)(void))(v3 + 1000))();
    }
  }
  else
  {
    uint64_t v4 = (OZScene *)*((void *)this + 121);
    if (v4) {
      OZScene::removeRootNode(v4, this);
    }
  }
  uint64_t v5 = *(uint64_t (**)(OZSceneNode *, void))(*(void *)this + 280);

  return v5(this, 0);
}

void *OZSceneNode::removeFromLinked(void *this)
{
  if (this[121])
  {
    uint64_t v1 = this;
    uint64_t v2 = this[132];
    uint64_t v3 = this[133];
    while (v2 != v3)
    {
      this = OZScene::getNode((OZScene *)v1[121], *(_DWORD *)(v3 - 4));
      if (this) {
        this = OZSceneNode::removeLinkedID((OZSceneNode *)this, *((_DWORD *)v1 + 20));
      }
      uint64_t v3 = v1[133] - 4;
      v1[133] = v3;
      uint64_t v2 = v1[132];
    }
  }
  return this;
}

void non-virtual thunk to'OZSceneNode::~OZSceneNode(OZSceneNode *this)
{
}

{
  OZSceneNode::~OZSceneNode((OZSceneNode *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZSceneNode::~OZSceneNode((OZSceneNode *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZSceneNode::~OZSceneNode((OZSceneNode *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZSceneNode::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 1000);
  for (uint64_t i = *(uint64_t **)(a1 + 1008); v4 != i; uint64_t i = *(uint64_t **)(a1 + 1008))
  {
    (*(void (**)(void))(**(void **)(*v4 + 16) + 120))(*(void *)(*v4 + 16));
    uint64_t v4 = (uint64_t *)*v4;
  }
  for (uint64_t j = *(void *)(a1 + 1016); j; uint64_t j = *(void *)(a1 + 1016))
  {
    uint64_t v7 = *(uint64_t **)(a1 + 1008);
    PCString v8 = (unsigned int *)v7[2];
    uint64_t v9 = *v7;
    *(void *)(v9 + 8) = v7[1];
    *(void *)v7[1] = v9;
    *(void *)(a1 + 1016) = j - 1;
    operator delete(v7);
    unint64_t v10 = *(OZScene **)(a1 + 968);
    if (v10)
    {
      if (v8) {
        uint64_t v11 = (OZObjectManipulator *)(v8 + 4);
      }
      else {
        uint64_t v11 = 0;
      }
      OZScene::unregisterObject(v10, v11);
      OZScene::removeAllDependencies(*(OZScene **)(a1 + 968), v8[20]);
    }
    uint64_t v12 = (OZChannelBase *)(*(uint64_t (**)(unsigned int *))(*(void *)v8 + 312))(v8);
    OZChannelFolder::removeDescendant((OZChannelFolder *)(a1 + 704), v12);
    (*(void (**)(unsigned int *))(*(void *)v8 + 8))(v8);
  }
  while (*(void *)(a1 + 992))
  {
    unint64_t v13 = *(unsigned int **)(*(void *)(a1 + 984) + 16);
    (*(void (**)(unsigned int *))(*(void *)v13 + 448))(v13);
    BOOL v14 = *(uint64_t **)(a1 + 984);
    uint64_t v15 = *v14;
    *(void *)(v15 + 8) = v14[1];
    *(void *)v14[1] = v15;
    --*(void *)(a1 + 992);
    operator delete(v14);
    unint64_t v16 = *(OZScene **)(a1 + 968);
    if (v16)
    {
      OZScene::unregisterObject(v16, (OZObjectManipulator *)(v13 + 12));
      OZScene::removeAllDependencies(*(OZScene **)(a1 + 968), v13[28]);
    }
    uint64_t v17 = (OZChannelBase *)(*(uint64_t (**)(unsigned int *))(*(void *)v13 + 240))(v13);
    OZChannelFolder::removeDescendant((OZChannelFolder *)(a1 + 576), v17);
    (*(void (**)(unsigned int *))(*(void *)v13 + 8))(v13);
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 208))(a1, a2, 0);
  OZChannelFolder::operator=(a1 + 56);
  OZChannelFolder::operator=(a1 + 320);
  OZChannelFolder::operator=(a1 + 448);
  OZChannelFolder::operator=(a1 + 576);
  OZChannelFolder::operator=(a1 + 704);
  uint64_t result = OZChannelFolder::operator=(a1 + 832);
  *(_DWORD *)(a1 + 1024) = *(_DWORD *)(a2 + 1024);
  *(unsigned char *)(a1 + 1028) = *(unsigned char *)(a2 + 1028);
  ++*(_DWORD *)(a1 + 1080);
  return result;
}

OZChannelBase *OZSceneNode::finishInitializing(OZSceneNode *this)
{
  return OZChannelFolder::finishInitializing((OZChannelFolder *)((char *)this + 56));
}

char *OZSceneNode::cloneBehaviorsEffects(char *this, const OZSceneNode *a2, uint64_t a3)
{
  uint64_t v5 = this;
  uint64_t v6 = (char *)a2 + 1000;
  if ((const OZSceneNode *)((char *)a2 + 1000) != *((const OZSceneNode **)a2 + 126))
  {
    do
    {
      this = (char *)(*(uint64_t (**)(void, void, uint64_t))(**(void **)(*(void *)(*(void *)v6 + 16)
                                                                                      + 8)
                                                                        + 24))(*(void *)(*(void *)(*(void *)v6 + 16) + 8), *(void *)(*(void *)v6 + 16), a3);
      if (this)
      {
        if (this)
        {
          uint64_t v7 = this;
          PCString v8 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(void *)this + 312))(this);
          OZChannelFolder::push_front((OZChannelFolder *)(v5 + 704), v8);
          uint64_t v9 = operator new(0x18uLL);
          unint64_t v10 = (void *)*((void *)v5 + 126);
          void *v9 = v5 + 1000;
          v9[1] = v10;
          v9[2] = v7;
          *unint64_t v10 = v9;
          *((void *)v5 + 126) = v9;
          ++*((void *)v5 + 127);
          this = (char *)*((void *)v5 + 121);
          if (this)
          {
            OZScene::registerObject((OZScene *)this, (OZObjectManipulator *)(v7 + 16));
            this = (char *)OZScene::addNodeDependency(*((void *)v5 + 121), *((_DWORD *)v7 + 20), *((_DWORD *)v5 + 20));
          }
        }
      }
      uint64_t v6 = *(char **)v6;
    }
    while (v6 != *((char **)a2 + 126));
  }
  if (v5)
  {
    uint64_t v11 = this;
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (char *)a2 + 976;
  if ((const OZSceneNode *)((char *)a2 + 976) != *((const OZSceneNode **)a2 + 123))
  {
    do
    {
      this = (char *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(*(void *)(*(void *)v12 + 16)
                                                                                       + 40)
                                                                         + 24))(*(void *)(*(void *)(*(void *)v12 + 16) + 40), *(void *)(*(void *)v12 + 16) + 32, a3);
      if (this
      {
        unint64_t v13 = this;
        BOOL v14 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(void *)this + 240))(this);
        OZChannelFolder::push_front((OZChannelFolder *)(v5 + 576), v14);
        uint64_t v15 = operator new(0x18uLL);
        unint64_t v16 = (void *)*((void *)v5 + 123);
        void *v15 = v5 + 976;
        v15[1] = v16;
        v15[2] = v13;
        void *v16 = v15;
        *((void *)v5 + 123) = v15;
        ++*((void *)v5 + 124);
        *((void *)v13 + 3) = v11;
        *((void *)v13 + 45) = v5;
        this = (char *)*((void *)v5 + 121);
        if (this)
        {
          OZScene::registerObject((OZScene *)this, (OZObjectManipulator *)(v13 + 48));
          this = (char *)OZScene::addNodeDependency(*((void *)v5 + 121), *((_DWORD *)v13 + 28), *((_DWORD *)v5 + 20));
        }
      }
      else
      {
        unint64_t v13 = v11;
      }
      uint64_t v12 = *(char **)v12;
      uint64_t v11 = v13;
    }
    while (v12 != *((char **)a2 + 123));
  }
  for (uint64_t i = v5 + 1000; i != *((char **)v5 + 126); uint64_t i = *(char **)i)
    this = (char *)(*(uint64_t (**)(void, char *))(**(void **)(*(void *)i + 16) + 96))(*(void *)(*(void *)i + 16), v5);
  return this;
}

void OZSceneNode::copyLinkedIDs(OZSceneNode *this, const OZSceneNode *a2)
{
  uint64_t v2 = (int *)*((void *)a2 + 132);
  uint64_t v3 = (int *)*((void *)a2 + 133);
  while (v2 != v3)
  {
    int v5 = *v2++;
    OZSceneNode::addLinkedID(this, v5);
  }
}

void OZSceneNode::addLinkedID(OZSceneNode *this, int a2)
{
  uint64_t v4 = (char *)*((void *)this + 133);
  unint64_t v5 = *((void *)this + 134);
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = (char *)*((void *)this + 132);
    uint64_t v8 = (v4 - v7) >> 2;
    if ((unint64_t)(v8 + 1) >> 62) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v5 - (void)v7;
    unint64_t v10 = (uint64_t)(v5 - (void)v7) >> 1;
    if (v10 <= v8 + 1) {
      unint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 1072, v11);
      uint64_t v4 = (char *)*((void *)this + 133);
      uint64_t v7 = (char *)*((void *)this + 132);
    }
    else
    {
      uint64_t v12 = 0;
    }
    unint64_t v13 = &v12[4 * v8];
    BOOL v14 = &v12[4 * v11];
    *(_DWORD *)unint64_t v13 = a2;
    uint64_t v6 = v13 + 4;
    while (v4 != v7)
    {
      int v15 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v13 - OZDocument::~OZDocument(this - 1) = v15;
      v13 -= 4;
    }
    *((void *)this + 132) = v13;
    *((void *)this + 133) = v6;
    *((void *)this + 134) = v14;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v4 = a2;
    uint64_t v6 = v4 + 4;
  }
  *((void *)this + 133) = v6;
}

void OZSceneNode::copyLinkedObjects(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZSceneNode.cpp");

  pcAbortImpl();
}

uint64_t OZSceneNode::hitCheck()
{
  return 0;
}

{
  return 0;
}

uint64_t OZSceneNode::getDescendantAtIndex(OZSceneNode *this, int a2)
{
  if (*((void *)this + 124))
  {
    uint64_t v3 = (char *)this + 976;
    uint64_t v4 = (char *)*((void *)this + 123);
    BOOL v5 = v4 != (char *)this + 976;
    int v6 = 0;
    if (v4 != (char *)this + 976 && a2 != 0)
    {
      do
      {
        uint64_t v4 = (char *)*((void *)v4 + 1);
        BOOL v5 = v4 != v3;
      }
      while (v4 != v3 && a2 - 1 != v6++);
    }
    if (v5)
    {
      uint64_t v9 = *((void *)v4 + 2);
      uint64_t v10 = v9 + 48;
      goto LABEL_23;
    }
  }
  else
  {
    int v6 = 0;
  }
  if (!*((void *)this + 127)) {
    return 0;
  }
  unint64_t v11 = (char *)this + 1000;
  for (uint64_t i = *((void *)this + 126); (char *)i != v11 && v6 != a2; uint64_t i = *(void *)(i + 8))
  {
    BOOL v14 = (OZChannelBase *)(*(uint64_t (**)(void))(**(void **)(i + 16) + 312))(*(void *)(i + 16));
    v6 += !OZChannelBase::testFlag(v14, 2);
  }
  if ((char *)i == v11) {
    return 0;
  }
  uint64_t v9 = *(void *)(i + 16);
  uint64_t v10 = v9 + 16;
LABEL_23:
  if (v9) {
    return v10;
  }
  else {
    return 0;
  }
}

uint64_t OZSceneNode::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  uint64_t v4 = *this;
  if (v5)
  {
    int v6 = (*(uint64_t (**)(void))(v5[2423] + 208))();
    uint64_t v4 = *this;
  }
  else
  {
    int v6 = 0;
  }
  int v7 = (*((uint64_t (**)(OZFactory **))v4 + 61))(this);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZSceneNodeWriteScope);
  if (((_BYTE)this[128] & 8) != 0)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 70);
    int v8 = 0;
    int v9 = 1;
  }
  else
  {
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 61);
    }
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 63);
    }
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 66);
    }
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 67);
    }
    else
    {
      unint64_t v11 = *(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16);
      if (!v10)
      {
        v11(a2, 62);
        int v9 = 1;
        int v8 = 1;
        goto LABEL_17;
      }
      v11(a2, 64);
    }
    int v9 = 0;
    int v8 = 0;
  }
LABEL_17:
  uint64_t Name = OZObjectManipulator::getName((OZObjectManipulator *)(this + 2));
  (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 200))(a2, 110, Name);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 111, *((unsigned int *)this + 20));
  if (v9 && ((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0)
  {
    uint64_t v14 = OZFactory::fileRefID(this[1], v13);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 144))(a2, 113, v14);
  }
  if (v5)
  {
    OZFxPlugSharedBase::getPluginUUID(v15 + 2423, &v22);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(void *)a2 + 200))(a2, 7, &v22);
    PCString::~PCString(&v22);
    uint64_t v17 = (*(uint64_t (**)(void *))(v16[2423] + 192))(v16 + 2423);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 152))(a2, 8, v17);
  }
  if (!v6)
  {
    if (!v7) {
      goto LABEL_24;
    }
LABEL_28:
    {
      Internaluint64_t Name = OZFxGenerator::getInternalName(v20);
    }
    else
    {
      Internaluint64_t Name = OZObjectManipulator::getInternalName((OZObjectManipulator *)(this + 2));
    }
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 200))(a2, 118, InternalName);
    if (v8) {
      goto LABEL_25;
    }
    return PCSerializerWriteStream::popScope((uint64_t)a2);
  }
  uint64_t v19 = (*(uint64_t (**)(void))(v5[2423] + 208))();
  (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 152))(a2, 9, v19);
  if (v7) {
    goto LABEL_28;
  }
LABEL_24:
  if (v8)
  {
LABEL_25:
    (*((void (**)(OZFactory **))*this + 146))(this);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 184))(a2, 116);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B7BB73AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZSceneNode::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZSceneNode::writeHeader(this - 6, a2);
}

uint64_t OZSceneNode::writeBody(unsigned int **this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZSceneNodeWriteScope);
  if (this)
  {
    if (v10)
    {
      unint64_t v11 = v10;
      uint64_t v12 = (OZFxPlugSharedBase *)(v10 + 2423);
      if ((*((unsigned int (**)(id *))v10[2423] + 26))(v10 + 2423))
      {
        RootChannelFolder = (OZChannelFolder *)OZFxGenerator::getRootChannelFolder(v11);
        OZFxPlugSharedBase::writeDynamicParams(v12, a2, RootChannelFolder);
      }
    }
  }
  uint64_t v14 = *((unsigned int *)this + 256);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 200);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v14);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  for (uint64_t i = this[132]; i != this[133]; ++i)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 201);
    unsigned int v16 = *i;
    (*(void (**)(PCSerializerWriteStream *, void))(*(void *)a2 + 56))(a2, v16);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  OZChannelObjectRoot::serializeSelfOnly((OZChannelObjectRoot *)(this + 7), a2, a3);
  (*((void (**)(char *, PCSerializerWriteStream *, void))this[42] + 2))((char *)this + 336, a2, 0);
  (*((void (**)(char *, PCSerializerWriteStream *, void, uint64_t, uint64_t))this[42] + 3))((char *)this + 336, a2, 0, 1, a5);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  (*((void (**)(char *, PCSerializerWriteStream *, void))this[58] + 2))((char *)this + 464, a2, 0);
  (*((void (**)(char *, PCSerializerWriteStream *, void, uint64_t, uint64_t))this[58] + 3))((char *)this + 464, a2, 0, 1, a5);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  if (a4)
  {
    for (uint64_t j = (unsigned int **)this[123]; j != this + 122; uint64_t j = (unsigned int **)j[1])
    {
      uint64_t v18 = j[2];
      if (!OZChannelBase::testFlag((OZChannelBase *)(v18 + 22), 8))
      {
        uint64_t v20 = *((void *)v18 + 10);
        uint64_t v19 = v18 + 20;
        (*(void (**)(unsigned int *, PCSerializerWriteStream *, void))(v20 + 16))(v19, a2, 0);
        (*(void (**)(unsigned int *, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v19 + 24))(v19, a2, 0, 1, a5);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      }
    }
    for (k = (unsigned int **)this[126]; k != this + 125; k = (unsigned int **)k[1])
    {
      PCString v22 = k[2];
      if (!OZChannelBase::testFlag((OZChannelBase *)(v22 + 14), 8))
      {
        uint64_t v24 = *((void *)v22 + 6);
        double v23 = v22 + 12;
        (*(void (**)(unsigned int *, PCSerializerWriteStream *, void))(v24 + 16))(v23, a2, 0);
        (*(void (**)(unsigned int *, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v23 + 24))(v23, a2, 0, 1, a5);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      }
    }
  }
  uint64_t result = PCSerializerWriteStream::popScope((uint64_t)a2);
  *((unsigned char *)this + 1028) = 1;
  return result;
}

uint64_t non-virtual thunk to'OZSceneNode::writeBody(unsigned int **this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZSceneNode::writeBody(this - 6, a2, a3, a4, a5);
}

uint64_t OZSceneNode::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  if (!this
  {
    OZFactory::setNeedsSaving(this[1], (const OZFactory *)1);
  }
  if (v4)
  {
    BOOL v5 = (id *)(v4 + 19384);
    if ((*(unsigned int (**)(char *))(*((void *)v4 + 2423) + 208))(v4 + 19384)) {
      OZFxPlugSharedBase::markDynamicParameterFactoriesForSerialization(v5);
    }
  }
  for (uint64_t i = (OZFactory **)this[126]; i != this + 125; uint64_t i = (OZFactory **)i[1])
  {
    int v7 = i[2];
    if (!OZChannelBase::testFlag((OZChannelBase *)((char *)v7 + 56), 8)) {
      (*(void (**)(OZFactory *, PCSerializerWriteStream *, void))(*(void *)v7 + 576))(v7, a2, 0);
    }
  }
  for (uint64_t j = (OZFactory **)this[123]; j != this + 122; uint64_t j = (OZFactory **)j[1])
  {
    int v9 = j[2];
    if (!OZChannelBase::testFlag((OZChannelBase *)((char *)v9 + 88), 8)) {
      (*(void (**)(OZFactory *, PCSerializerWriteStream *, void))(*(void *)v9 + 552))(v9, a2, 0);
    }
  }
  if ((*((unsigned int (**)(OZFactory **))*this + 120))(this))
  {
    uint64_t v10 = (*((uint64_t (**)(OZFactory **))*this + 128))(this);
    uint64_t v11 = (*((uint64_t (**)(OZFactory **))*this + 129))(this);
    if (v10 != v11)
    {
      uint64_t v12 = v11;
      do
      {
        (*(void (**)(void, PCSerializerWriteStream *, void))(**(void **)(v10 + 16) + 456))(*(void *)(v10 + 16), a2, 0);
        uint64_t v10 = *(void *)(v10 + 8);
      }
      while (v10 != v12);
    }
  }
  if ((*((unsigned int (**)(OZFactory **))*this + 132))(this))
  {
    uint64_t v13 = (*((uint64_t (**)(OZFactory **))*this + 138))(this);
    uint64_t v14 = (*((uint64_t (**)(OZFactory **))*this + 139))(this);
    if (v13 != v14)
    {
      uint64_t v15 = v14;
      do
      {
        (*(void (**)(void, PCSerializerWriteStream *, void))(**(void **)(v13 + 16) + 456))(*(void *)(v13 + 16), a2, 0);
        uint64_t v13 = *(void *)(v13 + 8);
      }
      while (v13 != v15);
    }
  }

  return OZChannelObjectRoot::markChannelFactoriesForSerialization((OZChannelObjectRoot *)(this + 7), a2);
}

uint64_t non-virtual thunk to'OZSceneNode::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZSceneNode::markFactoriesForSerialization(this - 6, a2);
}

uint64_t OZSceneNode::parseBegin(OZSceneNode *this, PCSerializerReadStream *a2)
{
  *((void *)this + 133) = *((void *)this + 132);
  return 1;
}

uint64_t non-virtual thunk to'OZSceneNode::parseBegin(OZSceneNode *this, PCSerializerReadStream *a2)
{
  *((void *)this + 127) = *((void *)this + 126);
  return 1;
}

uint64_t OZSceneNode::parseEnd(OZSceneNode *this, PCSerializerReadStream *a2)
{
  OZChannelObjectRoot::parseEnd((OZChannelFolder *)((char *)this + 56), a2);
  for (uint64_t i = (char *)this + 1000; i != *((char **)this + 126); uint64_t i = *(char **)i)
    (*(void (**)(void))(**(void **)(*(void *)i + 16) + 128))(*(void *)(*(void *)i + 16));
  (*(void (**)(OZSceneNode *))(*(void *)this + 88))(this);
  return 1;
}

uint64_t non-virtual thunk to'OZSceneNode::parseEnd(OZSceneNode *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZSceneNode::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  uint64_t v54 = 0;
  PCSharedCount::PCSharedCount(&v53);
  PCSharedCount::PCSharedCount(&v52);
  PCSharedCount::PCSharedCount(&v51);
  double v50 = 0.0;
  unsigned int v49 = 0;
  char v48 = 0;
  if (this)
  {
    if (v6)
    {
      int v7 = (OZFxPlugSharedBase *)(v6 + 2423);
      if ((*(unsigned int (**)(void *))(v6[2423] + 208))(v6 + 2423)) {
        OZFxPlugSharedBase::parseDynamicParamElement(v7, a2, a3);
      }
    }
  }
  OZChannelObjectRoot::parseElement(this + 7, a2, a3);
  int v8 = *((_DWORD *)a3 + 2);
  if (v8 > 199)
  {
    if (v8 == 201)
    {
      LODWORD(v46) = 0;
      PCSerializerReadStream::getAsUInt32((uint64_t)a2, (uint64_t)a3, (uint64_t)&v46);
      uint64_t v19 = (char *)this[133];
      uint64_t v20 = this[134];
      if (v19 >= (char *)v20)
      {
        PCString v22 = this[132];
        uint64_t v23 = (v19 - (char *)v22) >> 2;
        if ((unint64_t)(v23 + 1) >> 62) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v24 = v20 - v22;
        unint64_t v25 = (v20 - v22) >> 1;
        if (v25 <= v23 + 1) {
          unint64_t v25 = v23 + 1;
        }
        if (v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26)
        {
          int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(this + 134), v26);
          uint64_t v19 = (char *)this[133];
          PCString v22 = this[132];
        }
        else
        {
          int v27 = 0;
        }
        uint64_t v37 = (PCSerializer *)&v27[4 * v23];
        long long v38 = (PCSerializer *)&v27[4 * v26];
        *(_DWORD *)uint64_t v37 = v46;
        uint64_t v21 = (PCSerializer *)((char *)v37 + 4);
        while (v19 != (char *)v22)
        {
          int v39 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v37 - OZDocument::~OZDocument(this - 1) = v39;
          uint64_t v37 = (PCSerializer *)((char *)v37 - 4);
        }
        this[132] = v37;
        this[133] = v21;
        this[134] = v38;
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v19 = v46;
        uint64_t v21 = (PCSerializer *)(v19 + 4);
      }
      this[133] = v21;
    }
    else if (v8 == 200)
    {
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 32))(a3, (char *)this + 1024);
    }
  }
  else
  {
    if (v8 != 68)
    {
      if (v8 == 69)
      {
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)&v54);
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v53);
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v54 + 4);
        if (this[127]) {
          int v9 = (OZBehavior *)*((void *)this[125] + 2);
        }
        else {
          int v9 = 0;
        }
        PCString v28 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v54);
        if (v28
        {
          unint64_t v30 = (unint64_t)v29;
          uint64_t v31 = (*(uint64_t (**)(void *, PCSharedCount *, void))(*(void *)v29 + 168))(v29, &v53, HIDWORD(v54));
          if (v31)
          {
            int32x4_t v47 = (int32x4_t)xmmword_1B7E77B90;
            if (OZFactory::isKindOfClass(v30, &v47)) {
              int v9 = 0;
            }
            float64x2_t v32 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 312))(v31);
            OZChannelBase::resetFlag(v32, 64, 0);
            OZSceneNode::insertBehaviorBefore((OZSceneNode *)this, (OZBehavior *)v31, v9);
            PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v31 + 48));
          }
        }
        else
        {
          long long v46 = xmmword_1B837FF20;
          Factory = (const void *)OZFactories::findFactory(*(void *)(theApp + 32), (unsigned int *)&v46);
          if (Factory) {
          uint64_t v34 = (*(uint64_t (**)(const void *, PCSharedCount *, void))(*(void *)Factory + 168))(Factory, &v53, HIDWORD(v54));
          }
          uint64_t v35 = (OZBehavior *)v34;
          if (v34)
          {
            double v36 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v34 + 312))(v34);
            OZChannelBase::resetFlag(v36, 64, 0);
            OZSceneNode::insertBehaviorBefore((OZSceneNode *)this, v35, v9);
            (*(void (**)(PCSerializerReadStream *))(*(void *)a2 + 40))(a2);
          }
        }
      }
      goto LABEL_48;
    }
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)&v54);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v53);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v54 + 4);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 7, (uint64_t)&v52);
    if ((PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 118, (uint64_t)&v51) & 1) == 0) {
      PCString::set((PCString *)&v51, (const PCString *)&v53);
    }
    PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 116, (uint64_t)&v50);
    PCSerializerReadStream::getAttributeAsInt32((uint64_t)a2, (uint64_t)a3, 8, (uint64_t)&v49);
    PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, 9, (uint64_t)&v48);
    uint64_t v10 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v54);
    if (v10)
    {
      if (v11)
      {
        uint64_t v12 = v11;
        if (v13)
        {
          uint64_t v14 = v13;
          BOOL v15 = PCString::empty((PCString *)&v52);
          unsigned int v16 = *(uint64_t (**)(void *, PCSharedCount *, void, void, BOOL))(*(void *)v14 + 200);
          BOOL v17 = v48 != 0;
          if (!v15)
          {
            char v43 = (void *)v16(v14, &v52, HIDWORD(v54), v49, v17);
            int v42 = v43;
            if (v43) {
            else
            }
              float64_t v44 = 0;
            OZFxFilter::setInternalName(v44, (const PCString *)&v51);
LABEL_58:
            if (v42)
            {
              (*(void (**)(void *, double))(*v42 + 624))(v42, v50);
              (*(void (**)(void *, PCSharedCount *, void))(v42[6] + 120))(v42 + 6, &v53, 0);
              int v45 = (OZChannelBase *)(*(uint64_t (**)(void *))(*v42 + 240))(v42);
              OZChannelBase::resetFlag(v45, 64, 0);
              (*((void (**)(PCSerializer **, void *, void))*this + 43))(this, v42, 0);
              PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v42 + 10));
            }
            goto LABEL_48;
          }
          uint64_t v18 = v16(v14, &v51, HIDWORD(v54), v49, v17);
        }
        else
        {
          if (PCString::empty((PCString *)&v52)) {
            long long v41 = &v51;
          }
          else {
            long long v41 = &v52;
          }
          uint64_t v18 = (*(uint64_t (**)(void *, PCSharedCount *, void))(*(void *)v12 + 168))(v12, v41, HIDWORD(v54));
        }
        int v42 = (void *)v18;
        goto LABEL_58;
      }
    }
  }
LABEL_48:
  PCString::~PCString((PCString *)&v51);
  PCString::~PCString((PCString *)&v52);
  PCString::~PCString((PCString *)&v53);
  return 1;
}

void sub_1B7BB864C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, PCString a15, PCString a16, PCString a17)
{
}

uint64_t OZSceneNode::insertBehaviorBefore(OZSceneNode *this, OZBehavior *a2, OZBehavior *a3)
{
  int v6 = (OZBehavior *)((char *)a2 + 16);
  if (((*(uint64_t (**)(char *))(*((void *)a2 + 2) + 48))((char *)a2 + 16) & 1) == 0)
  {
    if (a3 && !(*(unsigned int (**)(void))(*((void *)a3 + 2) + 48))()) {
      goto LABEL_9;
    }
    int v7 = (char *)this + 1000;
    if ((OZSceneNode *)((char *)this + 1000) != *((OZSceneNode **)this + 126))
    {
      while (1)
      {
        int v8 = *(OZBehavior **)(*(void *)v7 + 16);
        if (!(*(unsigned int (**)(void))(*((void *)v8 + 2) + 48))()) {
          break;
        }
        a3 = v8;
        int v7 = *(char **)v7;
        if (v7 == *((char **)this + 126)) {
          goto LABEL_9;
        }
      }
    }
  }
  if (!a3)
  {
    uint64_t v11 = operator new(0x18uLL);
    v11[1] = (char *)this + 1000;
    v11[2] = a2;
    uint64_t v12 = *((void *)this + 125);
    void *v11 = v12;
    *(void *)(v12 + 8) = v11;
    *((void *)this + 125) = v11;
    ++*((void *)this + 127);
    uint64_t v13 = (OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(void *)a2 + 312))(a2);
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 704), v13);
    goto LABEL_16;
  }
LABEL_9:
  int v9 = (uint64_t *)((char *)this + 1000);
  for (uint64_t i = *((void *)this + 126); (uint64_t *)i != v9; uint64_t i = *(void *)(i + 8))
  {
    if (*(OZBehavior **)(i + 16) == a3)
    {
      int v9 = (uint64_t *)i;
      break;
    }
  }
  uint64_t v14 = operator new(0x18uLL);
  void v14[2] = a2;
  uint64_t v15 = *v9;
  *(void *)(v15 + 8) = v14;
  *uint64_t v14 = v15;
  uint64_t *v9 = (uint64_t)v14;
  v14[1] = v9;
  ++*((void *)this + 127);
  unsigned int v16 = (const OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(void *)a3 + 312))(a3);
  BOOL v17 = (OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(void *)a2 + 312))(a2);
  OZChannelFolder::insertDescendantBefore((OZChannelFolder *)((char *)this + 704), v16, v17);
LABEL_16:
  uint64_t v18 = (OZSceneNode *)*((void *)this + 126);
  if (v18 == (OZSceneNode *)((char *)this + 1000)) {
    goto LABEL_23;
  }
  uint64_t v19 = (OZSceneNode *)*((void *)this + 126);
  while (*((OZBehavior **)v19 + 2) != a2)
  {
    uint64_t v19 = (OZSceneNode *)*((void *)v19 + 1);
    if (v19 == (OZSceneNode *)((char *)this + 1000))
    {
      uint64_t v19 = (OZSceneNode *)((char *)this + 1000);
      break;
    }
  }
  if (v19 == v18) {
LABEL_23:
  }
    uint64_t v20 = 0;
  else {
    uint64_t v20 = *(void *)(*(void *)v19 + 16);
  }
  (*(void (**)(OZBehavior *, OZSceneNode *, uint64_t))(*(void *)a2 + 104))(a2, this, v20);
  uint64_t v21 = (OZScene *)*((void *)this + 121);
  if (v21)
  {
    OZScene::registerObject(v21, v6);
    OZScene::addNodeDependency(*((void *)this + 121), *((_DWORD *)a2 + 20), *((_DWORD *)this + 20));
  }
  PCString v22 = *(uint64_t (**)(OZSceneNode *))(*(void *)this + 496);

  return v22(this);
}

uint64_t non-virtual thunk to'OZSceneNode::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

uint64_t OZSceneNode::begin_descendants(OZSceneNode *this)
{
  return 0;
}

uint64_t OZSceneNode::end_descendants(OZSceneNode *this)
{
  return 0;
}

OZChannelBase *OZSceneNode::setIsMask(OZSceneNode *this)
{
  *((_DWORD *)this + 256) |= 8u;
  return OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 56), 0x80000, 0);
}

OZChannelBase *OZSceneNode::clearIsMask(OZSceneNode *this)
{
  *((_DWORD *)this + 256) &= ~8u;
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 0x80000, 0);
}

double OZSceneNode::globalToLocalTime@<D0>(OZSceneNode *this@<X0>, OZChannelBase *a2@<X1>, uint64_t a3@<X8>)
{
  return OZChannelObjectRootBase::globalToLocalTime((OZSceneNode *)((char *)this + 56), a2, a3);
}

double OZSceneNode::localToGlobalTime@<D0>(OZSceneNode *this@<X0>, OZChannelBase *a2@<X1>, uint64_t a3@<X8>)
{
  return OZChannelObjectRootBase::localToGlobalTime((OZSceneNode *)((char *)this + 56), a2, a3);
}

void OZSceneNode::setStartTime(OZSceneNode *this, const CMTime *a2)
{
  (*(void (**)(CMTime *__return_ptr))(*(void *)this + 1128))(&v27);
  *(_OWORD *)&v24.value = *(_OWORD *)&a2->value;
  CMTimeEpoch epoch = a2->epoch;
  long long v25 = v28;
  v24.CMTimeEpoch epoch = epoch;
  uint64_t v26 = v29;
  CMTime v23 = *a2;
  (*(void (**)(OZSceneNode *, CMTime *, void))(*(void *)this + 1136))(this, &v24, 0);
  CMTime v22 = v23;
  (*(void (**)(OZSceneNode *, CMTime *, void))(*(void *)this + 1120))(this, &v22, 0);
  for (uint64_t i = (void *)*((void *)this + 126); i != (void *)((char *)this + 1000); uint64_t i = (void *)i[1])
  {
    int v6 = (OZChannelObjectRootBase *)i[2];
    uint64_t v7 = *(void *)v6;
    int v6 = (OZChannelObjectRootBase *)((char *)v6 + 56);
    (*(void (**)(CMTime *__return_ptr))(v7 + 608))(&v19);
    memset(&v18, 0, sizeof(v18));
    CMTime v14 = v19;
    CMTime v30 = v27;
    PC_CMTimeSaferSubtract(&v14, &v30, (uint64_t)&v18);
    memset(&v17, 0, sizeof(v17));
    CMTime v14 = v24;
    CMTime v30 = v18;
    PC_CMTimeSaferAdd(&v14, &v30, (uint64_t)&v17);
    long long v15 = v20;
    uint64_t v16 = v21;
    CMTime v14 = v17;
    OZChannelObjectRootBase::setTimeExtent(v6, (const PCTimeRange *)&v14, 0);
    CMTime v13 = v17;
    OZChannelObjectRootBase::setTimeOffset((__n128 *)v6, &v13, 0);
  }
  int v8 = (char *)this + 976;
  int v9 = (char *)*((void *)this + 123);
  if (v9 != (char *)this + 976)
  {
    do
    {
      uint64_t v10 = (OZChannelObjectRootBase *)*((void *)v9 + 2);
      uint64_t v11 = *(void *)v10;
      uint64_t v10 = (OZChannelObjectRootBase *)((char *)v10 + 88);
      (*(void (**)(CMTime *__return_ptr))(v11 + 592))(&v19);
      memset(&v18, 0, sizeof(v18));
      CMTime v14 = v19;
      CMTime v30 = v27;
      PC_CMTimeSaferSubtract(&v14, &v30, (uint64_t)&v18);
      memset(&v17, 0, sizeof(v17));
      CMTime v14 = v24;
      CMTime v30 = v18;
      PC_CMTimeSaferAdd(&v14, &v30, (uint64_t)&v17);
      long long v15 = v20;
      uint64_t v16 = v21;
      CMTime v14 = v17;
      OZChannelObjectRootBase::setTimeExtent(v10, (const PCTimeRange *)&v14, 0);
      CMTime v12 = v17;
      OZChannelObjectRootBase::setTimeOffset((__n128 *)v10, &v12, 0);
      int v9 = (char *)*((void *)v9 + 1);
    }
    while (v9 != v8);
  }
}

uint64_t OZSceneNode::masks_begin(OZSceneNode *this)
{
  return 0;
}

uint64_t OZSceneNode::masks_end(OZSceneNode *this)
{
  return 0;
}

double OZSceneNode::begin@<D0>(OZSceneNode *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 1024))(this);
  uint64_t v5 = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 1032))(this);
  double result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

double OZSceneNode::end@<D0>(OZSceneNode *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 1024))(this);
  uint64_t v5 = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 1032))(this);
  double result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

void *OZObject::iterator_t<OZSceneNode,true,true,OZObject::defaultValidator>::operator++(void *a1)
{
  for (uint64_t i = a1; ; a1 = i)
  {
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(a1);
    if (*i == i[2]
      || (*(unsigned int (**)(void))(**(void **)(*i + 16) + 680))(*(void *)(*i + 16))
      && *i != i[2]
      && *(void *)(*i + 16))
    {
      break;
    }
  }
  return i;
}

uint64_t OZSceneNode::setScene(void *a1, uint64_t a2)
{
  a1[121] = a2;
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 1104))(a1);
  uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 1112))(a1);
  if (v4 != v5)
  {
    uint64_t v6 = v5;
    do
    {
      (*(void (**)(void, uint64_t))(**(void **)(v4 + 16) + 280))(*(void *)(v4 + 16), a2);
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v6);
  }
  uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 1024))(a1);
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 1032))(a1);
  memset(v19, 0, sizeof(v19));
  int v20 = 1065353216;
  uint64_t v15 = v7;
  uint64_t v16 = v7;
  uint64_t v17 = v8;
  char v18 = 0;
  (*(void (**)(void *))(*a1 + 1024))(a1);
  uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 1032))(a1);
  memset(v13, 0, sizeof(v13));
  int v14 = 1065353216;
  uint64_t v12 = v9;
  for (uint64_t i = v7; i != v12; v15 = i)
  {
    (*(void (**)(void, uint64_t))(**(void **)(i + 16) + 280))(*(void *)(i + 16), a2);
    uint64_t i = *(void *)(v15 + 8);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v13);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v19);
}

void sub_1B7BB925C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZSceneNode::dirty(OZSceneNode *this)
{
  OZObjectManipulator::dirty((OZSceneNode *)((char *)this + 16));
  uint64_t result = *((void *)this + 120);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 496))(result);
  }
  for (uint64_t i = *((void *)this + 123); (OZSceneNode *)i != (OZSceneNode *)((char *)this + 976); uint64_t i = *(void *)(i + 8))
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(i + 16) + 320))(*(void *)(i + 16));
  uint64_t v4 = (char *)this + 1000;
  for (uint64_t j = *((void *)this + 126); (char *)j != v4; uint64_t j = *(void *)(j + 8))
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(j + 16) + 352))(*(void *)(j + 16));
  return result;
}

uint64_t non-virtual thunk to'OZSceneNode::dirty(OZSceneNode *this)
{
  return OZSceneNode::dirty((OZSceneNode *)((char *)this - 16));
}

double OZSceneNode::invalidateStaticHash(OZSceneNode *this)
{
  OZObjectManipulator::invalidateStaticHash((OZSceneNode *)((char *)this + 16));
  double result = 0.0;
  *((_OWORD *)this + 65) = 0u;
  return result;
}

double non-virtual thunk to'OZSceneNode::invalidateStaticHash(OZSceneNode *this)
{
  OZObjectManipulator::invalidateStaticHash(this);
  double result = 0.0;
  *((_OWORD *)this + 64) = 0u;
  return result;
}

int8x8_t *OZSceneNode::getStaticHashWithoutEffects(int8x8_t *a1, const void *a2, uint64_t a3)
{
  uint64_t v3 = a1 + 130;
  if (!*(void *)&vorr_s8(a1[130], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a1[130].i8, *(int8x16_t *)a1[130].i8, 8uLL)))
  {
    (*(void (**)(const void *))(*(void *)a2 + 40))(a2);
    (*(void (**)(int8x8_t *, const void *, uint64_t, void))(*(void *)a1 + 528))(a1, a2, a3, 0);
    if (!v7) {
      __cxa_bad_cast();
    }
    *(_OWORD *)v3->i8 = *(_OWORD *)PCHashWriteStream::getHash(v7)->i8;
  }
  return v3;
}

void *OZSceneNode::getHashForStateWithoutEffects@<X0>(OZCacheManager *a1@<X0>, const void *a2@<X1>, OZRenderParams *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v8 = a1;
  {
    if (a1)
    {
      PCString::PCString(&v18, "This is a scene node hash without effects.");
      PCHash128::PCHash128((PCHash128 *)OZSceneNode::getHashForStateWithoutEffects(PCSerializerWriteStream &,OZRenderParams const&,std::list<OZObjectManipulator *> &)::withoutEffectsHash, &v18);
      PCString::~PCString(&v18);
    }
  }
  uint64_t v10 = (TXParagraphStyleFolder_Factory *)OZCacheManager::Instance(a1);
  std::list<OZObjectManipulator *>::list(&v18, 10);
  (*(void (**)(const void *))(*(void *)a2 + 40))(a2);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)OZRenderParams::getHash(a3);
  StaticHash = (int *)OZObjectManipulator::getStaticHash(v8 + 1, a2, (uint64_t **)&v18);
  PCHash128::operator+=(v17, StaticHash);
  PCHash128::operator+=(v17, OZSceneNode::getHashForStateWithoutEffects(PCSerializerWriteStream &,OZRenderParams const&,std::list<OZObjectManipulator *> &)::withoutEffectsHash);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v16);
  if (OZChannelBase::isObjectRef((OZChannelBase *)v10))
  {
    Hash = (int8x8_t *)v16;
  }
  else
  {
    (*(void (**)(const void *))(*(void *)a2 + 40))(a2);
    (*(void (**)(_OWORD *, const void *, OZRenderParams *, uint64_t, void))(*(void *)v8 + 536))(v8, a2, a3, a4, 0);
    if (!v13) {
      __cxa_bad_cast();
    }
    int v14 = v13;
    PCHashWriteStream::getHash(v13);
    TXParagraphStyleFolder_Factory::version(v10);
    Hash = PCHashWriteStream::getHash(v14);
  }
  *a5 = *(_OWORD *)Hash->i8;
  return std::__list_imp<unsigned int>::clear(&v18);
}

void sub_1B7BB9710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14)
{
}

double OZSceneNode::calcHashForState(uint64_t a1, void *lpsrc, CMTime *a3, uint64_t **a4, int a5)
{
  if (!v10) {
    __cxa_bad_cast();
  }
  uint64_t v11 = v10;
  long long v35 = *(_OWORD *)&a3->value;
  CMTimeEpoch epoch = a3->epoch;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 16) + 104))(a1 + 16, &v35, 1, 1, 1);
  (*(void (**)(void *, void))(*(void *)lpsrc + 16))(lpsrc, 0);
  (*(void (**)(void *, uint64_t))(*(void *)lpsrc + 48))(lpsrc, v12);
  (*(void (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
  uint64_t v13 = *(unsigned int *)(a1 + 1024);
  (*(void (**)(void *, void))(*(void *)lpsrc + 16))(lpsrc, 0);
  (*(void (**)(void *, uint64_t))(*(void *)lpsrc + 56))(lpsrc, v13);
  (*(void (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
  CMTime v34 = *a3;
  OZChannelObjectRootBase::calcHashForStateSelfOnly((OZChannelObjectRootBase *)(a1 + 56), (PCSerializerWriteStream *)lpsrc, &v34);
  CMTime v34 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 320), (PCSerializerWriteStream *)lpsrc, &v34);
  CMTime v34 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 448), (PCSerializerWriteStream *)lpsrc, &v34);
  CMTime v34 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 832), (PCSerializerWriteStream *)lpsrc, &v34);
  __n128 v33 = *(__n128 *)PCHashWriteStream::getHash(v11)->i8;
  if (a5)
  {
    for (uint64_t i = *(void *)(a1 + 984); i != a1 + 976; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v15 = *(_OWORD **)(i + 16);
      long long v31 = *(_OWORD *)&a3->value;
      CMTimeEpoch v32 = a3->epoch;
      if ((*(unsigned int (**)(_OWORD *, long long *, void, uint64_t, uint64_t))(*(void *)v15 + 280))(v15, &v31, 0, 1, 1))
      {
        OZObjectManipulator::getHashForState(v15 + 3, (uint64_t *)lpsrc, (OZRenderParams *)a3, a4, &v34);
        PCHash128::operator+=((int *)&v33, (int *)&v34);
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1008))(a1))
  {
    for (uint64_t j = *(void *)(a1 + 1008); j != a1 + 1000; uint64_t j = *(void *)(j + 8))
    {
      uint64_t v17 = *(void *)(j + 16);
      uint64_t v19 = *(void *)(v17 + 16);
      PCString v18 = (_OWORD *)(v17 + 16);
      if ((*(unsigned int (**)(_OWORD *, void, uint64_t))(v19 + 24))(v18, 0, 1))
      {
        OZObjectManipulator::getHashForState(v18, (uint64_t *)lpsrc, (OZRenderParams *)a3, a4, &v34);
        PCHash128::operator+=((int *)&v33, (int *)&v34);
      }
    }
  }
  int v20 = *(uint64_t ***)(a1 + 968);
  if (v20)
  {
    *(void *)&v34.timescale = 0;
    v34.CMTimeEpoch epoch = 0;
    v34.CMTimeValue value = (CMTimeValue)&v34.timescale;
    OZScene::getImmediatelyReferencedNodes(v20, *(_DWORD *)(a1 + 80), (uint64_t **)&v34);
    CMTimeValue value = v34.value;
    if ((CMTimeScale *)v34.value != &v34.timescale)
    {
      do
      {
        Node = OZScene::getNode(*(OZScene **)(a1 + 968), *(_DWORD *)(value + 28));
        CMTime v23 = Node;
        if (Node)
        {
          if (Node[120] != a1
            || (CMTimeEpoch v30 = a3->epoch, v29[1] = *(_OWORD *)&a3->value, ((*(uint64_t (**)(void))(Node[2] + 104))() & 1) != 0))
          {
            CMTime v24 = v23 + 2;
            if (!OZObjectManipulator::isInObjectList((uint64_t)v24, (uint64_t)a4))
            {
              OZObjectManipulator::getHashForState(v24, (uint64_t *)lpsrc, (OZRenderParams *)a3, a4, v29);
              PCHash128::operator+=((int *)&v33, (int *)v29);
            }
          }
        }
        long long v25 = *(CMTime **)(value + 8);
        if (v25)
        {
          do
          {
            uint64_t v26 = v25;
            long long v25 = (CMTime *)v25->value;
          }
          while (v25);
        }
        else
        {
          do
          {
            uint64_t v26 = *(CMTime **)(value + 16);
            BOOL v27 = v26->value == value;
            CMTimeValue value = (CMTimeValue)v26;
          }
          while (!v27);
        }
        CMTimeValue value = (CMTimeValue)v26;
      }
      while (v26 != (CMTime *)&v34.timescale);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v34, *(void **)&v34.timescale);
  }
  *(void *)&double result = PCHashWriteStream::setHash((__n128 *)v11, &v33).n128_u64[0];
  return result;
}

void sub_1B7BB9C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *a22)
{
}

void OZSceneNode::calcStaticHash(uint64_t a1, void *lpsrc, uint64_t **a3, int a4)
{
  if (!v8) {
    __cxa_bad_cast();
  }
  uint64_t v9 = v8;
  (*(void (**)(int8x8_t *))(*(void *)v8 + 40))(v8);
  (*(void (**)(uint64_t, int8x8_t *, void, void, uint64_t))(*(void *)a1 + 448))(a1, v9, 0, 0, 1);
  __n128 v25 = *(__n128 *)PCHashWriteStream::getHash(v9)->i8;
  if (a4)
  {
    for (uint64_t i = *(void *)(a1 + 984); i != a1 + 976; uint64_t i = *(void *)(i + 8))
    {
      StaticHash = (int *)OZObjectManipulator::getStaticHash((_OWORD *)(*(void *)(i + 16) + 48), lpsrc, a3);
      PCHash128::operator+=((int *)&v25, StaticHash);
    }
  }
  for (uint64_t j = *(void *)(a1 + 1008); j != a1 + 1000; uint64_t j = *(void *)(j + 8))
  {
    uint64_t v13 = (int *)OZObjectManipulator::getStaticHash((_OWORD *)(*(void *)(j + 16) + 16), lpsrc, a3);
    PCHash128::operator+=((int *)&v25, v13);
  }
  v24[0] = 0;
  v24[1] = 0;
  CMTime v23 = (uint64_t *)v24;
  int v14 = *(uint64_t ***)(a1 + 968);
  if (v14)
  {
    OZScene::getImmediatelyReferencedNodes(v14, *(_DWORD *)(a1 + 80), &v23);
    uint64_t v15 = v23;
    if (v23 != (uint64_t *)v24)
    {
      do
      {
        uint64_t v16 = *(OZScene **)(a1 + 968);
        if (v16)
        {
          Node = (char *)OZScene::getNode(v16, *((_DWORD *)v15 + 7));
          if (Node)
          {
            PCString v18 = Node + 16;
            if (!OZObjectManipulator::isInObjectList((uint64_t)(Node + 16), (uint64_t)a3))
            {
              uint64_t v19 = (int *)OZObjectManipulator::getStaticHash(v18, lpsrc, a3);
              PCHash128::operator+=((int *)&v25, v19);
            }
          }
        }
        int v20 = (uint64_t *)v15[1];
        if (v20)
        {
          do
          {
            uint64_t v21 = v20;
            int v20 = (uint64_t *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            uint64_t v21 = (uint64_t *)v15[2];
            BOOL v22 = *v21 == (void)v15;
            uint64_t v15 = v21;
          }
          while (!v22);
        }
        uint64_t v15 = v21;
      }
      while (v21 != (uint64_t *)v24);
    }
  }
  PCHashWriteStream::setHash((__n128 *)v9, &v25);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v23, v24[0]);
}

void sub_1B7BB9EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

BOOL OZSceneNode::areStaticHashesInvalid(OZSceneNode *this)
{
  if (vorr_s8(*(int8x8_t *)((char *)this + 32), (int8x8_t)*(_OWORD *)&vextq_s8(*((int8x16_t *)this + 2), *((int8x16_t *)this + 2), 8uLL)))
  {
    for (uint64_t i = (void *)*((void *)this + 123); i != (void *)((char *)this + 976); uint64_t i = (void *)i[1])
    {
      if (!*(void *)&vorr_s8(*(int8x8_t *)(i[2] + 64), (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(i[2] + 64), *(int8x16_t *)(i[2] + 64), 8uLL)))return 1; {
    }
      }
    uint64_t v3 = (char *)this + 1000;
    uint64_t v4 = (void *)*((void *)this + 126);
    if (v4 == (void *)((char *)this + 1000))
    {
      return 0;
    }
    else
    {
      do
      {
        int8x8_t v5 = vorr_s8(*(int8x8_t *)(v4[2] + 32), (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v4[2] + 32), *(int8x16_t *)(v4[2] + 32), 8uLL));
        BOOL result = *(void *)&v5 == 0;
        if (!*(void *)&v5) {
          break;
        }
        uint64_t v4 = (void *)v4[1];
      }
      while (v4 != (void *)v3);
    }
  }
  else
  {
    return 1;
  }
  return result;
}

BOOL non-virtual thunk to'OZSceneNode::areStaticHashesInvalid(OZSceneNode *this)
{
  return OZSceneNode::areStaticHashesInvalid((OZSceneNode *)((char *)this - 16));
}

uint64_t OZSceneNode::getSuccessor(OZSceneNode *this)
{
  long long v40 = 0u;
  long long v41 = 0u;
  memset(v39, 0, 24);
  int v42 = 1065353216;
  memset(v37, 0, sizeof(v37));
  memset(v36, 0, 24);
  int v38 = 1065353216;
  memset(v34, 0, sizeof(v34));
  memset(v33, 0, 24);
  int v35 = 1065353216;
  uint64_t v2 = *((void *)this + 120);
  if (v2)
  {
    uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v2 + 1024))(*((void *)this + 120));
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 1032))(v2);
    long long v31 = 0u;
    long long v30 = 0u;
    int v32 = 1065353216;
    *(void *)uint64_t v29 = v3;
    *(void *)&v29[8] = v3;
    *(void *)&v29[16] = v4;
    v29[24] = 0;
    *(_OWORD *)int v39 = *(_OWORD *)v29;
    *(_OWORD *)&v39[9] = *(_OWORD *)&v29[9];
    int v42 = 1065353216;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(&v40, 0, 0);
    *(_OWORD *)__n128 v33 = *(_OWORD *)v39;
    *(_OWORD *)&v33[9] = *(_OWORD *)&v29[9];
    int v35 = v42;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v34, (__n128 *)v41, 0);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v30);
    uint64_t v5 = *((void *)this + 120);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 1024))(v5);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 1032))(v5);
    long long v31 = 0u;
    long long v30 = 0u;
    int v32 = 1065353216;
    *(void *)uint64_t v29 = v7;
    *(void *)&v29[8] = v6;
    *(void *)&v29[16] = v7;
    v29[24] = 0;
    *(_OWORD *)double v36 = *(_OWORD *)v29;
    *(_OWORD *)&v36[9] = *(_OWORD *)&v29[9];
    int v38 = 1065353216;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v37, 0, 0);
  }
  else
  {
    uint64_t v8 = *((void *)this + 121);
    if (!v8) {
      goto LABEL_16;
    }
    uint64_t v9 = v8 + 1200;
    uint64_t v10 = *(void *)(v8 + 1208);
    long long v30 = 0uLL;
    long long v31 = 0uLL;
    int v32 = 1065353216;
    *(void *)uint64_t v29 = v10;
    *(void *)&v29[8] = v10;
    *(void *)&v29[16] = v9;
    v29[24] = 0;
    *(_OWORD *)int v39 = *(_OWORD *)v29;
    *(_OWORD *)&v39[9] = *(_OWORD *)&v29[9];
    int v42 = 1065353216;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(&v40, 0, 0);
    *(_OWORD *)__n128 v33 = *(_OWORD *)v39;
    *(_OWORD *)&v33[9] = *(_OWORD *)&v29[9];
    int v35 = v42;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v34, (__n128 *)v41, 0);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v30);
    uint64_t v11 = *((void *)this + 121);
    uint64_t v12 = v11 + 1200;
    uint64_t v13 = *(void *)(v11 + 1208);
    long long v30 = 0u;
    long long v31 = 0u;
    int v32 = 1065353216;
    *(void *)uint64_t v29 = v12;
    *(void *)&v29[8] = v13;
    *(void *)&v29[16] = v12;
    v29[24] = 0;
    *(_OWORD *)double v36 = *(_OWORD *)v29;
    *(_OWORD *)&v36[9] = *(_OWORD *)&v29[9];
    int v38 = 1065353216;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v37, 0, 0);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v30);
  uint64_t v14 = *(void *)v33;
  if (*(void *)v33 != *(void *)v36)
  {
    uint64_t v15 = v28;
    do
    {
      uint64_t v16 = *(void *)&v33[16];
      if (v14 == *(void *)&v33[16]) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *(OZSceneNode **)(v14 + 16);
      }
      if (v17 == this) {
        break;
      }
      _OWORD *v15 = 0u;
      v15[1] = 0u;
      v28[8] = 1065353216;
      uint64_t v24 = v14;
      uint64_t v25 = *(void *)&v33[8];
      uint64_t v26 = v16;
      char v27 = v33[24];
      *(void *)__n128 v33 = *(void *)(v14 + 8);
      uint64_t v15 = (_OWORD *)std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v15);
      uint64_t v14 = *(void *)v33;
    }
    while (*(void *)v33 != *(void *)v36);
  }
  if (v14 == *(void *)&v33[16]) {
    PCString v18 = 0;
  }
  else {
    PCString v18 = *(OZSceneNode **)(v14 + 16);
  }
  if (v18 == this)
  {
    memset(v22, 0, sizeof(v22));
    int v23 = 1065353216;
    *(void *)__n128 v33 = *(void *)(v14 + 8);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v22);
    if (*(void *)v33 == *(void *)v36)
    {
      uint64_t v21 = (OZSceneNode *)*((void *)this + 120);
      if (v21)
      {
        uint64_t Successor = OZSceneNode::getSuccessor(v21);
        goto LABEL_17;
      }
    }
    else if (*(void *)v33 != *(void *)&v33[16])
    {
      uint64_t Successor = *(void *)(*(void *)v33 + 16);
      goto LABEL_17;
    }
  }
LABEL_16:
  uint64_t Successor = 0;
LABEL_17:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v34);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v37);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v40);
  return Successor;
}

void sub_1B7BBA3D0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

OZSceneNode *OZSceneNode::getRootAncestor(OZSceneNode *this)
{
  do
  {
    uint64_t v1 = this;
    this = (OZSceneNode *)*((void *)this + 120);
  }
  while (this);
  return v1;
}

OZSceneNode *OZSceneNode::getCommonAncestor(OZSceneNode *this, OZSceneNode *a2, int a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    long long v14 = 0u;
    memset(v13, 0, sizeof(v13));
    if (a3) {
      this = (OZSceneNode *)*((void *)this + 120);
    }
    for (uint64_t i = this; i; uint64_t i = (OZSceneNode *)*((void *)i + 120))
      std::deque<OZSceneNode *>::push_back(v13, &i);
    long long v11 = 0u;
    memset(v10, 0, sizeof(v10));
    if (a3) {
      uint64_t v3 = (OZSceneNode *)*((void *)v3 + 120);
    }
    for (uint64_t i = v3; i; uint64_t i = (OZSceneNode *)*((void *)i + 120))
      std::deque<OZSceneNode *>::push_back(v10, &i);
    uint64_t v5 = *((void *)&v14 + 1);
    if (*((void *)&v14 + 1) && (uint64_t v6 = *((void *)&v11 + 1)) != 0)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v3 = v7;
        uint64_t v8 = v5 - 1;
        uint64_t v7 = *(OZSceneNode **)(*(void *)(*((void *)&v13[0] + 1)
                                         + (((unint64_t)(v14 + v8) >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * ((v14 + v8) & 0x1FF));
        if (v7 != *(OZSceneNode **)(*(void *)(*((void *)&v10[0] + 1)
                                               + (((unint64_t)(v6 + v11 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v6 + v11 - 1) & 0x1FF)))
          break;
        *((void *)&v14 + OZDocument::~OZDocument(this - 1) = v8;
        std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](v13, 1);
        --*((void *)&v11 + 1);
        std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](v10, 1);
        uint64_t v5 = *((void *)&v14 + 1);
        if (!*((void *)&v14 + 1))
        {
          uint64_t v3 = v7;
          break;
        }
        uint64_t v6 = *((void *)&v11 + 1);
        uint64_t v3 = v7;
      }
      while (*((void *)&v11 + 1));
    }
    else
    {
      uint64_t v3 = 0;
    }
    std::deque<unsigned long>::~deque[abi:ne180100](v10);
    std::deque<unsigned long>::~deque[abi:ne180100](v13);
  }
  return v3;
}

void sub_1B7BBA594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

BOOL OZSceneNode::isDescendantOf(OZSceneNode *this, const OZSceneNode *a2)
{
  do
    this = (OZSceneNode *)*((void *)this + 120);
  while (this != a2 && this != 0);
  return this != 0;
}

uint64_t OZSceneNode::isDescendantOf360Group(uint64_t this)
{
  if (this)
  {
    uint64_t v1 = (void *)this;
    while (1)
    {
      if (v2)
      {
        if (OZGroup::is360Group(v2)) {
          break;
        }
      }
      uint64_t v1 = (void *)v1[120];
      if (!v1) {
        return 0;
      }
    }
    return 1;
  }
  return this;
}

uint64_t OZSceneNode::getSourceOperationMask(OZSceneNode *this, OZChannelBase *a2, int a3)
{
  uint64_t v3 = (OZChannelBase ***)*((void *)this + 86);
  if (v3)
  {
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    while (v4 != v5)
    {
      if (*v4 == a2) {
        return 3;
      }
      ++v4;
    }
  }
  uint64_t v6 = (OZChannelBase ***)*((void *)this + 102);
  if (v6)
  {
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    while (v7 != v8)
    {
      if (*v7 == a2) {
        return 3;
      }
      ++v7;
    }
  }
  return OZObjectManipulator::getSourceOperationMask((OZSceneNode *)((char *)this + 16), a2, a3);
}

uint64_t non-virtual thunk to'OZSceneNode::getSourceOperationMask(OZSceneNode *this, OZChannelBase *a2, int a3)
{
  return OZSceneNode::getSourceOperationMask((OZSceneNode *)((char *)this - 16), a2, a3);
}

uint64_t OZSceneNode::getPasteEntry(OZSceneNode *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t non-virtual thunk to'OZSceneNode::getPasteEntry(OZSceneNode *this, OZChannelBase *a2)
{
  return 0;
}

void OZSceneNode::allowDrag(OZSceneNode *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  *a5 = 0;
  if (lpsrc)
  {
    if (v12 && *a6 == 1)
    {
      if ((OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)this + 640))(this) == a3)
      {
        uint64_t v16 = (*(uint64_t (**)(OZSceneNode *))(*(void *)v12 + 272))(v12);
        uint64_t v17 = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 272))(this);
        if (a7 == 1 && v16 == v17)
        {
          PCString v18 = (OZChannelObjectRoot *)(*(uint64_t (**)(OZSceneNode *))(*(void *)this + 640))(this);
          if (OZChannelObjectRoot::findNodeRefDescendant(v18, v12, (OZChannelFolder *)v18))
          {
            if ((*(unsigned int (**)(OZSceneNode *))(*(void *)this + 592))(this))
            {
              *a6 = 1;
              int v19 = a4 & 8;
LABEL_58:
              *a5 = v19;
              return;
            }
          }
        }
      }
      return;
    }
    if (v13)
    {
      if ((OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)this + 640))(this) == a3 {
        || a3
      }
      {
        if (*a6 - 1 <= 2)
        {
          uint64_t v24 = (*(uint64_t (**)(uint64_t *))(*v13 + 296))(v13);
          uint64_t v25 = *v13;
          if (v24)
          {
            if ((OZChannelBase *)(*(uint64_t (**)(uint64_t *))(v25 + 240))(v13) == a3
              || !(*(unsigned int (**)(uint64_t *, OZSceneNode *))(*v13 + 528))(v13, this))
            {
              goto LABEL_46;
            }
            goto LABEL_31;
          }
          if (!(*(unsigned int (**)(uint64_t *, OZSceneNode *))(v25 + 528))(v13, this)) {
            goto LABEL_46;
          }
LABEL_42:
          int v32 = a4 & 1;
LABEL_43:
          *a5 = v32;
          if (v32) {
            return;
          }
          goto LABEL_47;
        }
      }
    }
    if (v14 {
      && ((OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)this + 640))(this) == a3
    }
       || a3
    {
      uint64_t v30 = (*(uint64_t (**)(uint64_t *))(*v14 + 336))(v14);
      uint64_t v31 = *v14;
      if (!v30)
      {
        if (!(*(unsigned int (**)(uint64_t *, OZSceneNode *))(v31 + 512))(v14, this)) {
          goto LABEL_46;
        }
        goto LABEL_42;
      }
      if ((OZChannelBase *)(*(uint64_t (**)(uint64_t *))(v31 + 312))(v14) != a3
        && (*(unsigned int (**)(uint64_t *, OZSceneNode *))(*v14 + 512))(v14, this))
      {
LABEL_31:
        if (*a6 == 1
          && (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)this + 640))(this) != a3)
        {
          goto LABEL_46;
        }
        goto LABEL_37;
      }
    }
    else if (v15 && ((*a6 | 2) == 3 || a4 == 1 || *a6 == 2))
    {
      if ((*(uint64_t (**)(void *))(*(void *)v15 + 128))(v15))
      {
LABEL_37:
        int v32 = a4 & 2;
        goto LABEL_43;
      }
      if (!(*(unsigned int (**)(void *, OZSceneNode *))(*(void *)v15 + 104))(v15, this)) {
        goto LABEL_46;
      }
      goto LABEL_42;
    }
  }
LABEL_46:
  if (*a5) {
    return;
  }
LABEL_47:
  if (lpsrc) {
  else
  }
    __n128 v33 = 0;
  BOOL v34 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)this + 640))(this) != a3 || v33 == 0;
  if (v34
    || (int v35 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)this + 640))(this),
        OZChannelBase::isDescendantOf(v33, v35)))
  {
    OZObjectManipulator::allowDrag((OZSceneNode *)((char *)this + 16), lpsrc, a3, a4, a5, a6);
    return;
  }
  double v36 = (OZChannelFolder *)(*(uint64_t (**)(OZSceneNode *))(*(void *)this + 640))(this);
  if (OZChannelFolder::findMatchingDescendant(v36, v33))
  {
    int v19 = a4 & 1;
    goto LABEL_58;
  }
}

void non-virtual thunk to'OZSceneNode::allowDrag(OZSceneNode *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
}

uint64_t OZSceneNode::prepareForDragOperation()
{
  return 1;
}

uint64_t non-virtual thunk to'OZSceneNode::prepareForDragOperation()
{
  return 1;
}

uint64_t OZSceneNode::deleteThis(OZSceneNode *this, OZChannelBase *a2)
{
  if ((OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)this + 640))(this) == a2)
  {
    if (*((void *)this + 121)) {
      (*(void (**)(OZSceneNode *))(*(void *)this + 928))(this);
    }
    OZSceneNode::removeFromParent(this);
    uint64_t v5 = (OZScene *)*((void *)this + 121);
    if (v5) {
      OZScene::unregisterNode(v5, this);
    }
    (*(void (**)(OZSceneNode *))(*(void *)this + 8))(this);
    return 1;
  }
  for (uint64_t i = *((void *)this + 123); ; uint64_t i = *(void *)(i + 8))
  {
    if ((OZSceneNode *)i == (OZSceneNode *)((char *)this + 976)) {
      goto LABEL_17;
    }
    if ((OZChannelBase *)(*(uint64_t (**)(void))(**(void **)(i + 16) + 240))(*(void *)(i + 16)) == a2) {
      break;
    }
  }
  uint64_t v6 = *(OZEffect **)(i + 16);
  if (!v6)
  {
LABEL_17:
    int v9 = 0;
    goto LABEL_18;
  }
  for (uint64_t j = *((void *)this + 126); (OZSceneNode *)j != (OZSceneNode *)((char *)this + 1000); uint64_t j = *(void *)(j + 8))
    (*(void (**)(void, uint64_t))(**(void **)(j + 16) + 152))(*(void *)(j + 16), (uint64_t)v6 + 48);
  OZSceneNode::removeEffect(this, v6);
  (*(void (**)(OZEffect *))(*(void *)v6 + 8))(v6);
  uint64_t v8 = *((void *)this + 121);
  if (v8) {
    OZDocument::postNotification(*(OZDocument **)(v8 + 1584), 16);
  }
  int v9 = 1;
LABEL_18:
  uint64_t v10 = (char *)this + 1000;
  for (k = (char *)*((void *)this + 126); ; k = (char *)*((void *)k + 1))
  {
    if (k == v10)
    {
      if (v9) {
        goto LABEL_38;
      }
      return 0;
    }
    if ((OZChannelBase *)(*(uint64_t (**)(void))(**((void **)k + 2) + 312))(*((void *)k + 2)) == a2) {
      break;
    }
  }
  uint64_t v13 = (unsigned int *)*((void *)k + 2);
  if (!v13)
  {
    if (v9) {
      goto LABEL_38;
    }
    return 0;
  }
  uint64_t v14 = *((void *)this + 126);
  uint64_t v15 = *((void *)k + 2);
  if ((char *)v14 != v10)
  {
    do
    {
      uint64_t v16 = *(unsigned int **)(v14 + 16);
      if (v13 != v16)
      {
        uint64_t v17 = *((void *)k + 2);
        if (v17) {
          uint64_t v18 = v17 + 16;
        }
        else {
          uint64_t v18 = 0;
        }
        (*(void (**)(unsigned int *, uint64_t))(*(void *)v16 + 152))(v16, v18);
      }
      uint64_t v14 = *(void *)(v14 + 8);
    }
    while ((char *)v14 != v10);
    uint64_t v15 = *((void *)k + 2);
  }
  (*(void (**)(uint64_t))(*(void *)v15 + 120))(v15);
  uint64_t v19 = *(void *)k;
  *(void *)(v19 + 8) = *((void *)k + 1);
  **((void **)k + OZDocument::~OZDocument(this - 1) = v19;
  --*((void *)this + 127);
  operator delete(k);
  int v20 = (OZChannelBase *)(*(uint64_t (**)(unsigned int *))(*(void *)v13 + 312))(v13);
  OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 704), v20);
  unint64_t v21 = (OZScene *)*((void *)this + 121);
  if (v21)
  {
    OZScene::unregisterObject(v21, (OZObjectManipulator *)(v13 + 4));
    OZScene::removeAllDependencies(*((OZScene **)this + 121), v13[20]);
  }
  (*(void (**)(unsigned int *))(*(void *)v13 + 8))(v13);
  uint64_t v22 = *((void *)this + 121);
  if (v22) {
    OZDocument::postNotification(*(OZDocument **)(v22 + 1584), 16);
  }
LABEL_38:
  (*(void (**)(OZSceneNode *))(*(void *)this + 496))(this);
  return 1;
}

void OZSceneNode::removeEffect(OZSceneNode *this, OZEffect *a2)
{
  (*(void (**)(OZEffect *))(*(void *)a2 + 448))(a2);
  uint64_t v4 = (char *)*((void *)this + 123);
  if (v4 != (char *)this + 976)
  {
    while (1)
    {
      uint64_t v5 = (OZSceneNode *)*((void *)v4 + 1);
      if (*((OZEffect **)v4 + 2) == a2) {
        break;
      }
      uint64_t v4 = (char *)*((void *)v4 + 1);
      if (v5 == (OZSceneNode *)((char *)this + 976)) {
        goto LABEL_7;
      }
    }
    uint64_t v6 = *(void *)v4;
    *(void *)(v6 + 8) = v5;
    **((void **)v4 + OZDocument::~OZDocument(this - 1) = v6;
    --*((void *)this + 124);
    operator delete(v4);
    OZSceneNode::_sequenceEffectInputs(this);
    uint64_t v7 = (OZChannelBase *)(*(uint64_t (**)(OZEffect *))(*(void *)a2 + 240))(a2);
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 576), v7);
    uint64_t v8 = (OZScene *)*((void *)this + 121);
    if (v8)
    {
      OZScene::unregisterObject(v8, (OZEffect *)((char *)a2 + 48));
      OZScene::removeAllDependencies(*((OZScene **)this + 121), *((_DWORD *)a2 + 28));
    }
  }
LABEL_7:
  (*(void (**)(OZSceneNode *))(*(void *)this + 496))(this);
  uint64_t v9 = *((void *)this + 121);
  if (v9)
  {
    uint64_t v10 = *(OZDocument **)(v9 + 1584);
    OZDocument::postNotification(v10, 16);
  }
}

uint64_t non-virtual thunk to'OZSceneNode::deleteThis(OZSceneNode *this, OZChannelBase *a2)
{
  return OZSceneNode::deleteThis((OZSceneNode *)((char *)this - 16), a2);
}

uint64_t OZSceneNode::copy(OZSceneNode *this, OZChannelBase *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZSceneNode::copy(OZSceneNode *this, OZChannelBase *a2)
{
  return 1;
}

uint64_t OZSceneNode::paste(OZSceneNode *this, OZChannelBase *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZSceneNode::paste(OZSceneNode *this, OZChannelBase *a2)
{
  return 1;
}

uint64_t OZSceneNode::rename(OZSceneNode *this, OZChannelBase *a2, PCString *a3)
{
  return 1;
}

uint64_t non-virtual thunk to'OZSceneNode::rename(OZSceneNode *this, OZChannelBase *a2, PCString *a3)
{
  return 1;
}

uint64_t non-virtual thunk to'OZSceneNode::getSceneNode(OZSceneNode *this)
{
  return (uint64_t)this - 16;
}

BOOL OZSceneNode::isSelected(OZSceneNode *this)
{
  uint64_t v1 = (OZChannelFolder *)((char *)this + 56);
  if (OZChannelBase::testFlag((OZChannelBase *)((char *)this + 56), 1)) {
    return 1;
  }

  return OZChannelFolder::testFoldFlag(v1, 0x2000);
}

BOOL non-virtual thunk to'OZSceneNode::isSelected(OZSceneNode *this)
{
  return OZSceneNode::isSelected((OZSceneNode *)((char *)this - 16));
}

OZChannelBase *OZSceneNode::select(OZSceneNode *this)
{
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 1, 0);
}

OZChannelBase *non-virtual thunk to'OZSceneNode::select(OZSceneNode *this)
{
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 40), 1, 0);
}

OZChannelFolder *OZSceneNode::deselect(OZSceneNode *this)
{
  uint64_t v2 = (OZChannelBase *)((char *)this + 56);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 56), 1, 0);
  OZChannelBase::resetFlag(v2, 0x10000000, 0);

  return OZSceneNode::deselectEffectsAndBehaviors(this);
}

OZChannelFolder *OZSceneNode::deselectEffectsAndBehaviors(OZSceneNode *this)
{
  BOOL result = OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 56), 0x2000);
  for (uint64_t i = *((void *)this + 123); (OZSceneNode *)i != (OZSceneNode *)((char *)this + 976); uint64_t i = *(void *)(i + 8))
    BOOL result = (OZChannelFolder *)(*(uint64_t (**)(void))(**(void **)(i + 16) + 496))(*(void *)(i + 16));
  uint64_t v4 = (char *)this + 1000;
  for (uint64_t j = *((void *)this + 126); (char *)j != v4; uint64_t j = *(void *)(j + 8))
    BOOL result = (OZChannelFolder *)(*(uint64_t (**)(void))(**(void **)(j + 16) + 496))(*(void *)(j + 16));
  return result;
}

OZChannelFolder *non-virtual thunk to'OZSceneNode::deselect(OZSceneNode *this)
{
  return OZSceneNode::deselect((OZSceneNode *)((char *)this - 16));
}

uint64_t OZSceneNode::isAnyParentSelected(OZSceneNode *this)
{
  uint64_t v2 = *((void *)this + 120);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 640))(v2);
  uint64_t v4 = 1;
  if (OZChannelBase::testFlag(v3, 1)) {
    return v4;
  }
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 120) + 704);

  return v5();
}

uint64_t non-virtual thunk to'OZSceneNode::isAnyParentSelected(OZSceneNode *this)
{
  return OZSceneNode::isAnyParentSelected((OZSceneNode *)((char *)this - 16));
}

uint64_t OZSceneNode::getSolo(OZSceneNode *this)
{
  return OZChannelBase::isSolo((OZChannelBase *)((char *)this + 56));
}

uint64_t OZSceneNode::setSolo(OZSceneNode *this, uint64_t a2)
{
  OZChannelBase::solo((OZChannelBase *)((char *)this + 56), a2);
  uint64_t result = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 960))(this);
  if (result)
  {
    uint64_t v5 = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 1032))(this);
    uint64_t result = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 1024))(this);
    if (result != v5)
    {
      uint64_t v6 = result;
      do
      {
        uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 16) + 720))(*(void *)(v6 + 16), a2);
        uint64_t v6 = *(void *)(v6 + 8);
      }
      while (v6 != v5);
    }
  }
  return result;
}

void *OZSceneNode::removeLinkedID(OZSceneNode *this, __int32 a2)
{
  uint64_t v4 = (void *)*((void *)this + 133);
  uint64_t result = wmemchr(*((__int32 **)this + 132), a2, ((uint64_t)v4 - *((void *)this + 132)) >> 2);
  if (result) {
    uint64_t v6 = result;
  }
  else {
    uint64_t v6 = v4;
  }
  uint64_t v7 = (void *)*((void *)this + 133);
  if (v6 != v7)
  {
    uint64_t result = wmemchr(*((__int32 **)this + 132), a2, ((uint64_t)v7 - *((void *)this + 132)) >> 2);
    if (result) {
      uint64_t v8 = (uint64_t)result;
    }
    else {
      uint64_t v8 = (uint64_t)v7;
    }
    uint64_t v9 = *((void *)this + 133);
    uint64_t v10 = v9 - (v8 + 4);
    if (v9 != v8 + 4) {
      uint64_t result = memmove((void *)v8, (const void *)(v8 + 4), v9 - (v8 + 4));
    }
    *((void *)this + 133) = v8 + v10;
  }
  return result;
}

BOOL OZSceneNode::isLinkable(OZSceneNode *this)
{
  return *((void *)this + 132) != *((void *)this + 133);
}

uint64_t OZSceneNode::isLinked(OZSceneNode *this)
{
  uint64_t result = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 736))(this);
  if (result)
  {
    return OZChannelFolder::testFoldFlag((OZChannelFolder *)((char *)this + 56), 0x4000);
  }
  return result;
}

uint64_t OZSceneNode::link(OZSceneNode *this)
{
  uint64_t v2 = (OZChannelFolder *)((char *)this + 56);
  uint64_t result = OZChannelFolder::testFoldFlag((OZChannelFolder *)((char *)this + 56), 0x4000);
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)OZChannelFolder::setFoldFlag(v2, 0x4000);
    if (*((void *)this + 121))
    {
      for (uint64_t i = (unsigned int *)*((void *)this + 132); i != *((unsigned int **)this + 133); ++i)
      {
        uint64_t result = (uint64_t)OZScene::getNode(*((OZScene **)this + 121), *i);
        if (result)
        {
          uint64_t v5 = result;
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 744))(result);
          if ((result & 1) == 0) {
            uint64_t result = (uint64_t)OZChannelFolder::setFoldFlag((OZChannelFolder *)(v5 + 56), 0x4000);
          }
        }
      }
    }
  }
  return result;
}

uint64_t OZSceneNode::unlink(OZSceneNode *this)
{
  uint64_t v2 = (OZChannelFolder *)((char *)this + 56);
  uint64_t result = OZChannelFolder::testFoldFlag((OZChannelFolder *)((char *)this + 56), 0x4000);
  if (result)
  {
    uint64_t result = (uint64_t)OZChannelFolder::resetFoldFlag(v2, 0x4000);
    if (*((void *)this + 121))
    {
      for (uint64_t i = (unsigned int *)*((void *)this + 132); i != *((unsigned int **)this + 133); ++i)
      {
        uint64_t result = (uint64_t)OZScene::getNode(*((OZScene **)this + 121), *i);
        if (result)
        {
          uint64_t v5 = result;
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 744))(result);
          if (result) {
            uint64_t result = (uint64_t)OZChannelFolder::resetFoldFlag((OZChannelFolder *)(v5 + 56), 0x4000);
          }
        }
      }
    }
  }
  return result;
}

uint64_t OZSceneNode::lock(OZSceneNode *this)
{
  uint64_t result = OZObjectManipulator::lock((OZSceneNode *)((char *)this + 16));
  if (*((void *)this + 121))
  {
    for (uint64_t i = (unsigned int *)*((void *)this + 132); i != *((unsigned int **)this + 133); ++i)
    {
      uint64_t result = (uint64_t)OZScene::getNode(*((OZScene **)this + 121), *i);
      if (result)
      {
        uint64_t v4 = result;
        uint64_t result = (*(uint64_t (**)(void))(*(void *)(result + 16) + 56))();
        if ((result & 1) == 0) {
          uint64_t result = OZChannelFolder::lock((OZChannelFolder *)(v4 + 56), 1, 1);
        }
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'OZSceneNode::lock(OZSceneNode *this)
{
  return OZSceneNode::lock((OZSceneNode *)((char *)this - 16));
}

uint64_t OZSceneNode::unlock(OZSceneNode *this)
{
  uint64_t result = OZObjectManipulator::unlock((OZSceneNode *)((char *)this + 16));
  if (*((void *)this + 121))
  {
    for (uint64_t i = (unsigned int *)*((void *)this + 132); i != *((unsigned int **)this + 133); ++i)
    {
      uint64_t result = (uint64_t)OZScene::getNode(*((OZScene **)this + 121), *i);
      if (result)
      {
        uint64_t v4 = result;
        uint64_t result = (*(uint64_t (**)(void))(*(void *)(result + 16) + 56))();
        if (result) {
          uint64_t result = OZChannelFolder::lock((OZChannelFolder *)(v4 + 56), 0, 1);
        }
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'OZSceneNode::unlock(OZSceneNode *this)
{
  return OZSceneNode::unlock((OZSceneNode *)((char *)this - 16));
}

uint64_t OZSceneNode::canBeExported(OZSceneNode *this)
{
  return 0;
}

uint64_t OZSceneNode::isFreezable(OZSceneNode *this)
{
  return 0;
}

BOOL OZSceneNode::isFrozen(OZSceneNode *this)
{
  return OZChannelFolder::testFoldFlag((OZChannelFolder *)((char *)this + 56), 0x8000);
}

uint64_t OZSceneNode::freeze(OZSceneNode *this)
{
  uint64_t v2 = (OZChannelFolder *)((char *)this + 56);
  uint64_t result = OZChannelFolder::testFoldFlag((OZChannelFolder *)((char *)this + 56), 0x8000);
  if ((result & 1) == 0)
  {
    OZChannelFolder::setFoldFlag(v2, 0x8000);
    uint64_t v4 = *(uint64_t (**)(OZSceneNode *))(*(void *)this + 768);
    return v4(this);
  }
  return result;
}

uint64_t OZSceneNode::unfreeze(OZSceneNode *this)
{
  uint64_t v2 = (OZChannelFolder *)((char *)this + 56);
  uint64_t result = OZChannelFolder::testFoldFlag((OZChannelFolder *)((char *)this + 56), 0x8000);
  if (result)
  {
    OZChannelFolder::resetFoldFlag(v2, 0x8000);
    uint64_t v4 = *(uint64_t (**)(OZSceneNode *))(*(void *)this + 776);
    return v4(this);
  }
  return result;
}

void OZSceneNode::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
}

void non-virtual thunk to'OZSceneNode::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
}

void *OZSceneNode::updateReferenceIDs(uint64_t a1, void *a2)
{
  return OZChannelObjectRoot::updateReferenceIDs((void *)(a1 + 56), a2);
}

void *non-virtual thunk to'OZSceneNode::updateReferenceIDs(uint64_t a1, void *a2)
{
  return OZChannelObjectRoot::updateReferenceIDs((void *)(a1 + 40), a2);
}

unsigned int *OZSceneNode::updateLinkedIDs(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::remove_if[abi:ne180100]<std::__wrap_iter<unsigned int *>,removePred>(*(unsigned int **)(a1 + 1056), *(unsigned int **)(a1 + 1064), a2);
  uint64_t v5 = *(unsigned int **)(a1 + 1056);
  if (*(unsigned int **)(a1 + 1064) != result) {
    *(void *)(a1 + 1064) = result;
  }
  if (v5 != result)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v7 = a2 + 8;
    uint64_t v6 = v8;
    do
    {
      if (v6)
      {
        unsigned int v9 = *v5;
        uint64_t v10 = v7;
        uint64_t v11 = v6;
        do
        {
          unsigned int v12 = *(_DWORD *)(v11 + 28);
          BOOL v13 = v12 >= v9;
          if (v12 >= v9) {
            uint64_t v14 = (uint64_t *)v11;
          }
          else {
            uint64_t v14 = (uint64_t *)(v11 + 8);
          }
          if (v13) {
            uint64_t v10 = v11;
          }
          uint64_t v11 = *v14;
        }
        while (*v14);
        if (v10 != v7 && v9 >= *(_DWORD *)(v10 + 28)) {
          unsigned int *v5 = *(_DWORD *)(v10 + 32);
        }
      }
      ++v5;
    }
    while (v5 != result);
  }
  return result;
}

unsigned int *std::remove_if[abi:ne180100]<std::__wrap_iter<unsigned int *>,removePred>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  if (result == a2) {
    return a2;
  }
  uint64_t v3 = result;
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v4 = (void *)(a3 + 8);
  uint64_t v5 = v6;
  while (v5)
  {
    unsigned int v7 = *result;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    do
    {
      unsigned int v10 = *(_DWORD *)(v9 + 28);
      BOOL v11 = v10 >= v7;
      if (v10 >= v7) {
        unsigned int v12 = (uint64_t *)v9;
      }
      else {
        unsigned int v12 = (uint64_t *)(v9 + 8);
      }
      if (v11) {
        uint64_t v8 = (void *)v9;
      }
      uint64_t v9 = *v12;
    }
    while (*v12);
    if (v8 == v4 || *((_DWORD *)v8 + 7) > v7) {
      goto LABEL_17;
    }
    if (++result == a2) {
      return a2;
    }
  }
  uint64_t result = v3;
LABEL_17:
  if (result == a2) {
    return a2;
  }
  BOOL v13 = result + 1;
  if (result + 1 != a2)
  {
    uint64_t v14 = *v4;
    do
    {
      if (v14)
      {
        unsigned int v15 = *v13;
        uint64_t v16 = v4;
        uint64_t v17 = v14;
        do
        {
          unsigned int v18 = *(_DWORD *)(v17 + 28);
          BOOL v19 = v18 >= v15;
          if (v18 >= v15) {
            int v20 = (uint64_t *)v17;
          }
          else {
            int v20 = (uint64_t *)(v17 + 8);
          }
          if (v19) {
            uint64_t v16 = (void *)v17;
          }
          uint64_t v17 = *v20;
        }
        while (*v20);
        if (v16 != v4 && *((_DWORD *)v16 + 7) <= v15) {
          *result++ = v15;
        }
      }
      ++v13;
    }
    while (v13 != a2);
  }
  return result;
}

uint64_t OZSceneNode::didFinishLoadingIntoScene(OZSceneNode *this)
{
  uint64_t v2 = (char *)this + 1000;
  for (uint64_t i = (char *)*((void *)this + 126); v2 != i; uint64_t i = (char *)*((void *)this + 126))
  {
    (*(void (**)(void))(*(void *)(*(void *)(*(void *)v2 + 16) + 16) + 368))();
    uint64_t v2 = *(char **)v2;
  }
  for (uint64_t j = (char *)this + 976; j != *((char **)this + 123); uint64_t j = *(char **)j)
    (*(void (**)(void))(*(void *)(*(void *)(*(void *)j + 16) + 48) + 368))();
  uint64_t v5 = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 1024))(this);
  uint64_t v6 = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 1032))(this);
  if (v5 != v6)
  {
    uint64_t v7 = v6;
    do
    {
      (*(void (**)(void))(**(void **)(v5 + 16) + 848))(*(void *)(v5 + 16));
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != v7);
  }
  uint64_t v8 = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 1104))(this);
  uint64_t result = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 1112))(this);
  if (v8 != result)
  {
    uint64_t v10 = result;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v8 + 16) + 848))(*(void *)(v8 + 16));
      uint64_t v8 = *(void *)(v8 + 8);
    }
    while (v8 != v10);
  }
  return result;
}

uint64_t non-virtual thunk to'OZSceneNode::didFinishLoadingIntoScene(OZSceneNode *this)
{
  return OZSceneNode::didFinishLoadingIntoScene((OZSceneNode *)((char *)this - 16));
}

uint64_t OZSceneNode::didFinishLoadingIntoMotionEffect(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = (uint64_t *)(this + 1000);
  for (uint64_t i = *(uint64_t **)(this + 1008); v2 != i; uint64_t i = *(uint64_t **)(v1 + 1008))
  {
    this = (*(uint64_t (**)(void))(*(void *)(*(void *)(*v2 + 16) + 16) + 384))();
    uint64_t v2 = (uint64_t *)*v2;
  }
  for (uint64_t j = v1 + 976; j != *(void *)(v1 + 984); uint64_t j = *(void *)j)
    this = (*(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)j + 16) + 48) + 384))();
  return this;
}

uint64_t non-virtual thunk to'OZSceneNode::didFinishLoadingIntoMotionEffect(OZSceneNode *this)
{
  return OZSceneNode::didFinishLoadingIntoMotionEffect((uint64_t)this - 16);
}

char *OZSceneNode::didAddToScene(OZSceneNode *this, OZScene *a2)
{
  uint64_t v4 = (char *)this + 1000;
  for (uint64_t i = (char *)*((void *)this + 126); v4 != i; uint64_t i = (char *)*((void *)this + 126))
  {
    (*(void (**)(void, OZScene *))(**(void **)(*(void *)v4 + 16) + 136))(*(void *)(*(void *)v4 + 16), a2);
    uint64_t v4 = *(char **)v4;
  }
  for (uint64_t j = (char *)this + 976; j != *((char **)this + 123); uint64_t j = *(char **)j)
    (*(void (**)(void, OZScene *))(**(void **)(*(void *)j + 16) + 456))(*(void *)(*(void *)j + 16), a2);
  uint64_t ComputedWorkingGamut = OZScene::getComputedWorkingGamut(a2);
  uint64_t v8 = OZScene::dynamicRangeTrackingEnabled(a2);
  uint64_t v9 = (void *)(*(uint64_t (**)(OZSceneNode *))(*(void *)this + 640))(this);

  return OZScene::updateColorChannelsForWorkingGamut((char *)a2, ComputedWorkingGamut, v8, v9);
}

uint64_t OZSceneNode::willRemoveFromScene(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result + 1000;
  for (uint64_t i = *(void *)(result + 1008); i != v4; uint64_t i = *(void *)(i + 8))
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(i + 16) + 144))(*(void *)(i + 16), a2);
  for (uint64_t j = v3 + 976; j != *(void *)(v3 + 984); uint64_t j = *(void *)j)
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)j + 16) + 464))(*(void *)(*(void *)j + 16), a2);
  return result;
}

uint64_t OZSceneNode::didUndoDeleteOfObject(uint64_t this, OZObjectManipulator *a2)
{
  uint64_t v2 = this + 1000;
  uint64_t v3 = *(void *)(this + 1008);
  if (v3 != this + 1000)
  {
    do
    {
      this = (*(uint64_t (**)(void, OZObjectManipulator *))(**(void **)(v3 + 16) + 168))(*(void *)(v3 + 16), a2);
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t OZSceneNode::didUndoLastChange(uint64_t this)
{
  uint64_t v1 = this + 1000;
  for (uint64_t i = *(void *)(this + 1008); i != v1; uint64_t i = *(void *)(i + 8))
    this = (*(uint64_t (**)(void))(**(void **)(i + 16) + 176))(*(void *)(i + 16));
  return this;
}

void *OZSceneNode::willDeleteChannel(void *this, OZChannelBase *lpsrc)
{
  if (lpsrc)
  {
    uint64_t v3 = (uint64_t)this;
    uint64_t v4 = (char *)(this + 125);
    uint64_t v5 = (char *)this[126];
    if (v5 != (char *)(this + 125))
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v5 + 2);
        unint64_t v7 = v6[1];
        long long v13 = xmmword_1B837FF50;
        if (OZFactory::isKindOfClass(v7, (int32x4_t *)&v13))
        {
          (*(void (**)(void *, OZChannelBase *))(*(void *)v8 + 208))(v8, lpsrc);
        }
        uint64_t v5 = (char *)*((void *)v5 + 1);
      }
      while (v5 != v4);
    }
    if (this)
    {
      uint64_t v9 = (uint64_t **)this[14];
      if (v9)
      {
        uint64_t v10 = *v9;
        BOOL v11 = v9[1];
        while (v10 != v11)
        {
          uint64_t v12 = *v10++;
          this = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 888))(v3, v12);
        }
      }
    }
  }
  return this;
}

void *OZSceneNode::didUndoDeleteChannel(void *this, OZChannelBase *lpsrc)
{
  if (lpsrc)
  {
    uint64_t v3 = (uint64_t)this;
    uint64_t v4 = (char *)(this + 125);
    for (uint64_t i = this[126]; (char *)i != v4; uint64_t i = *(void *)(i + 8))
      (*(void (**)(void, OZChannelBase *))(**(void **)(i + 16) + 216))(*(void *)(i + 16), lpsrc);
    if (this)
    {
      uint64_t v6 = (uint64_t **)this[14];
      if (v6)
      {
        unint64_t v7 = *v6;
        uint64_t v8 = v6[1];
        while (v7 != v8)
        {
          uint64_t v9 = *v7++;
          this = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 896))(v3, v9);
        }
      }
    }
  }
  return this;
}

void *OZSceneNode::_sequenceEffectInputs(void *this)
{
  uint64_t v1 = this;
  if (this) {
  uint64_t v2 = v1 + 122;
  }
  uint64_t v3 = (void *)v1[123];
  while (v2 != v3)
  {
    uint64_t v2 = (void *)*v2;
    *(void *)(v2[2] + 24) = this;
    this = (void *)v2[2];
  }
  return this;
}

BOOL OZSceneNode::addEffect(OZSceneNode *this, OZEffect *a2, OZEffect *a3)
{
  if (*((void *)this + 124) > 0x3FuLL) {
    return 0;
  }
  uint64_t v6 = (__n128 *)(*(uint64_t (**)(OZEffect *))(*(void *)a2 + 240))(a2);
  CMTime v12 = *(CMTime *)((char *)this + 208);
  CMTime v13 = *(CMTime *)((char *)this + 232);
  (*(void (**)(CMTime *__return_ptr))(v6->n128_u64[0] + 712))(&v10);
  CMTime time1 = v11;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    (*(void (**)(CMTime *__return_ptr, __n128 *))(v6->n128_u64[0] + 712))(&v10, v6);
    CMTime v13 = v11;
  }
  CMTime v10 = v12;
  OZChannelObjectRootBase::setTimeOffset(v6, &v10, 0);
  OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)v6, (const PCTimeRange *)&v12, 0);
  BOOL inserted = OZSceneNode::_internalInsertEffectAfter(this, a2, a3, 1);
  uint64_t v8 = *((void *)this + 121);
  if (v8) {
    OZDocument::postNotification(*(OZDocument **)(v8 + 1584), 16);
  }
  OZMsgTracerLogFxPlugUsage((OZEffect *)((char *)a2 + 48));
  return inserted;
}

BOOL OZSceneNode::_internalInsertEffectAfter(OZSceneNode *this, OZEffect *a2, OZEffect *a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(OZEffect *))(*(void *)a2 + 296))(a2);
  uint64_t v9 = (char *)this + 976;
  if (a3)
  {
    for (uint64_t i = (char *)*((void *)this + 123); i != v9; uint64_t i = (char *)*((void *)i + 1))
    {
      if (*((OZEffect **)i + 2) == a3)
      {
        uint64_t v9 = i;
        break;
      }
    }
    uint64_t v14 = (uint64_t *)*((void *)v9 + 1);
    unsigned int v15 = operator new(0x18uLL);
    v15[2] = a2;
    uint64_t v16 = *v14;
    *(void *)(v16 + 8) = v15;
    void *v15 = v16;
    *uint64_t v14 = (uint64_t)v15;
    v15[1] = v14;
    ++*((void *)this + 124);
    uint64_t v17 = (const OZChannelBase *)(*(uint64_t (**)(OZEffect *))(*(void *)a3 + 240))(a3);
    unsigned int v18 = (OZChannelBase *)(*(uint64_t (**)(OZEffect *))(*(void *)a2 + 240))(a2);
    OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 576), v17, v18);
  }
  else
  {
    CMTime v11 = operator new(0x18uLL);
    CMTime v12 = (void *)*((void *)this + 123);
    void *v11 = v9;
    v11[1] = v12;
    v11[2] = a2;
    *CMTime v12 = v11;
    *((void *)this + 123) = v11;
    ++*((void *)this + 124);
    CMTime v13 = (OZChannelBase *)(*(uint64_t (**)(OZEffect *))(*(void *)a2 + 240))(a2);
    OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 576), v13);
  }
  *((void *)a2 + 45) = this;
  BOOL v19 = (OZScene *)*((void *)this + 121);
  if (v19)
  {
    OZScene::registerObject(v19, (OZEffect *)((char *)a2 + 48));
    OZScene::addNodeDependency(*((void *)this + 121), *((_DWORD *)a2 + 28), *((_DWORD *)this + 20));
  }
  OZSceneNode::_sequenceEffectInputs(this);
  (*(void (**)(OZSceneNode *))(*(void *)this + 496))(this);
  if (!v8) {
    (*(void (**)(OZEffect *, OZSceneNode *, uint64_t))(*(void *)a2 + 440))(a2, this, a4);
  }
  return v8 == 0;
}

uint64_t OZSceneNode::insertEffectBefore(OZSceneNode *this, OZEffect *a2, OZEffect *a3)
{
  uint64_t v6 = (*(uint64_t (**)(OZEffect *))(*(void *)a2 + 296))(a2);
  unint64_t v7 = (uint64_t *)((char *)this + 976);
  if (a3)
  {
    for (uint64_t i = *((void *)this + 123); (uint64_t *)i != v7; uint64_t i = *(void *)(i + 8))
    {
      if (*(OZEffect **)(i + 16) == a3)
      {
        unint64_t v7 = (uint64_t *)i;
        break;
      }
    }
    CMTime v12 = operator new(0x18uLL);
    v12[2] = a2;
    uint64_t v13 = *v7;
    *(void *)(v13 + 8) = v12;
    *CMTime v12 = v13;
    *unint64_t v7 = (uint64_t)v12;
    v12[1] = v7;
    ++*((void *)this + 124);
    uint64_t v14 = (const OZChannelBase *)(*(uint64_t (**)(OZEffect *))(*(void *)a3 + 240))(a3);
    unsigned int v15 = (OZChannelBase *)(*(uint64_t (**)(OZEffect *))(*(void *)a2 + 240))(a2);
    OZChannelFolder::insertDescendantBefore((OZChannelFolder *)((char *)this + 576), v14, v15);
  }
  else
  {
    uint64_t v9 = operator new(0x18uLL);
    v9[1] = v7;
    v9[2] = a2;
    uint64_t v10 = *((void *)this + 122);
    void *v9 = v10;
    *(void *)(v10 + 8) = v9;
    *((void *)this + 122) = v9;
    ++*((void *)this + 124);
    CMTime v11 = (OZChannelBase *)(*(uint64_t (**)(OZEffect *))(*(void *)a2 + 240))(a2);
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 576), v11);
  }
  *((void *)a2 + 45) = this;
  uint64_t v16 = (OZScene *)*((void *)this + 121);
  if (v16)
  {
    OZScene::registerObject(v16, (OZEffect *)((char *)a2 + 48));
    OZScene::addNodeDependency(*((void *)this + 121), *((_DWORD *)a2 + 28), *((_DWORD *)this + 20));
  }
  OZSceneNode::_sequenceEffectInputs(this);
  uint64_t result = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 496))(this);
  if (!v6)
  {
    unsigned int v18 = *(uint64_t (**)(OZEffect *, OZSceneNode *, void))(*(void *)a2 + 440);
    return v18(a2, this, 0);
  }
  return result;
}

BOOL OZSceneNode::insertEffectAfter(OZSceneNode *this, OZEffect *a2, OZEffect *a3)
{
  return OZSceneNode::_internalInsertEffectAfter(this, a2, a3, 0);
}

uint64_t OZSceneNode::getEffect(OZSceneNode *this, int a2)
{
  uint64_t v2 = (char *)this + 976;
  for (uint64_t i = *((void *)this + 123); (char *)i != v2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t result = *(void *)(i + 16);
    if (*(_DWORD *)(result + 112) == a2) {
      return result;
    }
  }
  return 0;
}

uint64_t OZSceneNode::hasEnabledEffects(OZSceneNode *this)
{
  if (*((unsigned char *)this + 1024)) {
    return 0;
  }
  uint64_t v1 = (char *)this + 976;
  uint64_t v2 = *((void *)this + 123);
  if ((OZSceneNode *)v2 == (OZSceneNode *)((char *)this + 976)) {
    return 0;
  }
  do
  {
    uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(v2 + 16) + 272))(*(void *)(v2 + 16), 0, 1);
    if (result) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while ((char *)v2 != v1);
  return result;
}

void OZSceneNode::addBehavior(OZSceneNode *this, OZBehavior *a2, OZBehavior *a3)
{
  uint64_t v6 = (__n128 *)(*(uint64_t (**)(OZBehavior *))(*(void *)a2 + 312))(a2);
  CMTime v28 = *(CMTime *)((char *)this + 208);
  CMTime v29 = *(CMTime *)((char *)this + 232);
  (*(void (**)(CMTime *__return_ptr))(v6->n128_u64[0] + 712))(&v26);
  CMTime time1 = v27;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    (*(void (**)(CMTime *__return_ptr, __n128 *))(v6->n128_u64[0] + 712))(&v26, v6);
    CMTime v29 = v27;
  }
  CMTime v26 = v28;
  OZChannelObjectRootBase::setTimeOffset(v6, &v26, 0);
  OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)v6, (const PCTimeRange *)&v28, 0);
  if (a3)
  {
    unint64_t v7 = (char *)this + 1000;
    for (uint64_t i = (char *)*((void *)this + 126); i != v7; uint64_t i = (char *)*((void *)i + 1))
    {
      if (*((OZBehavior **)i + 2) == a3)
      {
        unint64_t v7 = i;
        break;
      }
    }
    CMTime v12 = (uint64_t *)*((void *)v7 + 1);
    uint64_t v13 = (const OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(void *)a3 + 312))(a3);
    uint64_t v14 = (OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(void *)a2 + 312))(a2);
    OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 704), v13, v14);
    unsigned int v15 = operator new(0x18uLL);
    v15[2] = a2;
    uint64_t v16 = *v12;
    *(void *)(v16 + 8) = v15;
    void *v15 = v16;
    *CMTime v12 = (uint64_t)v15;
    v15[1] = v12;
  }
  else
  {
    uint64_t v9 = (OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(void *)a2 + 312))(a2);
    OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 704), v9);
    uint64_t v10 = operator new(0x18uLL);
    CMTime v11 = (void *)*((void *)this + 126);
    *uint64_t v10 = (char *)this + 1000;
    v10[1] = v11;
    _OWORD v10[2] = a2;
    void *v11 = v10;
    *((void *)this + 126) = v10;
  }
  ++*((void *)this + 127);
  (*(void (**)(OZBehavior *, OZSceneNode *))(*(void *)a2 + 96))(a2, this);
  uint64_t v17 = (OZScene *)*((void *)this + 121);
  if (v17)
  {
    OZScene::registerObject(v17, (OZBehavior *)((char *)a2 + 16));
    OZScene::addNodeDependency(*((void *)this + 121), *((_DWORD *)a2 + 20), *((_DWORD *)this + 20));
    OZScene::sceneDidChange(*((OZScene **)this + 121));
  }
  (*(void (**)(OZSceneNode *))(*(void *)this + 496))(this);
  uint64_t v18 = *((void *)this + 121);
  if (v18) {
    OZDocument::postNotification(*(OZDocument **)(v18 + 1584), 16);
  }
  BOOL v19 = (_DWORD *)*((void *)a2 + 1);
  int v21 = v19[2];
  int v20 = v19[3];
  int v23 = v19[4];
  int v22 = v19[5];
  if ((v21 != -5795320 || v20 != 2120159703 || v23 != -1426653181 || v22 != -1814655222)
    && (v21 != -691890574 || v20 != -1444998696 || v23 != -1536032758 || v22 != -1783627174)
    && (v21 != 1636967960 || v20 != -943975976 || v23 != -2077360118 || v22 != -1783627174)
    && (v21 != 1123529275 || v20 != -929492521 || v23 != -1588461565 || v22 != -1814655222))
  {
    uint64_t Name = (PCString *)OZObjectManipulator::getName((OZBehavior *)((char *)a2 + 16));
    CStr = PCString::createCStr(Name);
    OZChannelBase::setRangeName((OZChannelBase *)"Behaviors", (const PCString *)CStr);
    free(CStr);
  }
}

void OZSceneNode::removeBehavior(OZSceneNode *this, OZBehavior *a2)
{
  uint64_t v2 = (char *)this + 1000;
  uint64_t v3 = (char *)*((void *)this + 126);
  if (v3 != (char *)this + 1000)
  {
    while (*((OZBehavior **)v3 + 2) != a2)
    {
      uint64_t v3 = (char *)*((void *)v3 + 1);
      if (v3 == v2) {
        return;
      }
    }
    if (v3 != v2)
    {
      (*(void (**)(OZBehavior *))(*(void *)a2 + 120))(a2);
      uint64_t v6 = *(void *)v3;
      *(void *)(v6 + 8) = *((void *)v3 + 1);
      **((void **)v3 + OZDocument::~OZDocument(this - 1) = v6;
      --*((void *)this + 127);
      operator delete(v3);
      unint64_t v7 = (OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(void *)a2 + 312))(a2);
      OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 704), v7);
      uint64_t v8 = (OZScene *)*((void *)this + 121);
      if (v8)
      {
        OZScene::unregisterObject(v8, (OZBehavior *)((char *)a2 + 16));
        OZScene::removeAllDependencies(*((OZScene **)this + 121), *((_DWORD *)a2 + 20));
      }
      (*(void (**)(OZSceneNode *))(*(void *)this + 496))(this);
      uint64_t v9 = *((void *)this + 121);
      if (v9)
      {
        uint64_t v10 = *(OZDocument **)(v9 + 1584);
        OZDocument::postNotification(v10, 16);
      }
    }
  }
}

uint64_t OZSceneNode::insertBehaviorAfter(OZSceneNode *this, OZBehavior *a2, OZBehavior *a3)
{
  uint64_t v6 = (OZBehavior *)((char *)a2 + 16);
  char v7 = (*(uint64_t (**)(char *))(*((void *)a2 + 2) + 48))((char *)a2 + 16);
  if (!a3 || (v7 & 1) != 0)
  {
    if (!a3)
    {
      uint64_t v16 = operator new(0x18uLL);
      uint64_t v17 = (void *)*((void *)this + 126);
      void *v16 = (char *)this + 1000;
      v16[1] = v17;
      v16[2] = a2;
      void *v17 = v16;
      *((void *)this + 126) = v16;
      ++*((void *)this + 127);
      uint64_t v18 = (OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(void *)a2 + 312))(a2);
      OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 704), v18);
      a3 = 0;
      goto LABEL_16;
    }
  }
  else if ((*(unsigned int (**)(void))(*((void *)a3 + 2) + 48))())
  {
    for (uint64_t i = (char *)this + 1000; i != *((char **)this + 126); uint64_t i = *(char **)i)
    {
      a3 = *(OZBehavior **)(*(void *)i + 16);
      if (!(*(unsigned int (**)(void))(*((void *)a3 + 2) + 48))()) {
        break;
      }
    }
  }
  uint64_t v9 = (char *)this + 1000;
  for (uint64_t j = (char *)*((void *)this + 126); j != v9; uint64_t j = (char *)*((void *)j + 1))
  {
    if (*((OZBehavior **)j + 2) == a3)
    {
      uint64_t v9 = j;
      break;
    }
  }
  CMTime v11 = (uint64_t *)*((void *)v9 + 1);
  CMTime v12 = operator new(0x18uLL);
  v12[2] = a2;
  uint64_t v13 = *v11;
  *(void *)(v13 + 8) = v12;
  *CMTime v12 = v13;
  uint64_t *v11 = (uint64_t)v12;
  v12[1] = v11;
  ++*((void *)this + 127);
  uint64_t v14 = (const OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(void *)a3 + 312))(a3);
  unsigned int v15 = (OZChannelBase *)(*(uint64_t (**)(OZBehavior *))(*(void *)a2 + 312))(a2);
  OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 704), v14, v15);
LABEL_16:
  (*(void (**)(OZBehavior *, OZSceneNode *, OZBehavior *))(*(void *)a2 + 104))(a2, this, a3);
  BOOL v19 = (OZScene *)*((void *)this + 121);
  if (v19)
  {
    OZScene::registerObject(v19, v6);
    OZScene::addNodeDependency(*((void *)this + 121), *((_DWORD *)a2 + 20), *((_DWORD *)this + 20));
  }
  int v20 = *(uint64_t (**)(OZSceneNode *))(*(void *)this + 496);

  return v20(this);
}

uint64_t OZSceneNode::getBehavior(OZSceneNode *this, int a2)
{
  uint64_t v2 = (char *)this + 1000;
  for (uint64_t i = *((void *)this + 126); (char *)i != v2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t result = *(void *)(i + 16);
    if (*(_DWORD *)(result + 80) == a2) {
      return result;
    }
  }
  return 0;
}

uint64_t OZSceneNode::isAffectedByBehaviors(OZSceneNode *this)
{
  if ((*((unsigned char *)this + 1024) & 2) != 0) {
    return 0;
  }
  uint64_t v1 = (char *)this + 1000;
  uint64_t v2 = (void *)*((void *)this + 126);
  if (v2 == (void *)((char *)this + 1000)) {
    return 0;
  }
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(v2[2] + 16) + 24))();
    if (result) {
      break;
    }
    uint64_t v2 = (void *)v2[1];
  }
  while (v2 != (void *)v1);
  return result;
}

uint64_t OZSceneNode::isAffectedByBakeableBehaviors(OZSceneNode *this)
{
  if ((*((unsigned char *)this + 1024) & 2) == 0)
  {
    uint64_t v1 = (char *)this + 1000;
    for (uint64_t i = *((void *)this + 126); (char *)i != v1; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v3 = *(void **)(i + 16);
      if ((*(unsigned int (**)(void))(v3[2] + 24))()
        && ((*(uint64_t (**)(void *))(*v3 + 272))(v3) & 1) != 0)
      {
        return 1;
      }
    }
  }
  return 0;
}

void OZSceneNode::bake(OZSceneNode *this)
{
  *(_OWORD *)&v32.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v2 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(_OWORD *)&v33.CMTimeValue value = *(_OWORD *)&v32.value;
  v32.CMTimeEpoch epoch = v2;
  v33.CMTimeEpoch epoch = v2;
  PCURL::PCURL((PCURL *)&v30, @"Undo Convert To Keyframes");
  (*(void (**)(char *, CMTime *, void))(*((void *)this + 2) + 176))((char *)this + 16, &v30, 0);
  PCString::~PCString((PCString *)&v30);
  uint64_t v3 = (char *)this + 1000;
  uint64_t v4 = (char *)*((void *)this + 126);
  if (v4 == (char *)this + 1000) {
    return;
  }
  do
  {
    uint64_t v5 = (void *)*((void *)v4 + 2);
    if (v4 == *((char **)this + 126))
    {
      (*(void (**)(CMTime *__return_ptr, void))(*v5 + 608))(&v30, *((void *)v4 + 2));
      CMTime v32 = v30;
      *(_OWORD *)&v33.CMTimeValue value = *(_OWORD *)&v31.value;
      CMTimeEpoch epoch = v31.epoch;
    }
    else
    {
      (*(void (**)(CMTime *__return_ptr, void))(*v5 + 608))(&v30, *((void *)v4 + 2));
      CMTime v29 = v30;
      __n128 v27 = 0uLL;
      CMTimeEpoch v28 = 0;
      CMTime time1 = v30;
      CMTime time2 = v31;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v27);
      CMTime v26 = v32;
      memset(&v25, 0, sizeof(v25));
      CMTime time1 = v32;
      CMTime time2 = v33;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v25);
      CMTime time1 = v29;
      *(__n128 *)&time2.CMTimeValue value = v27;
      time2.CMTimeEpoch epoch = v28;
      if (!CMTimeCompare(&time1, &time2)) {
        goto LABEL_11;
      }
      CMTime time1 = v26;
      CMTime time2 = v29;
      if (CMTimeCompare(&time1, &time2) >= 1) {
        CMTime v26 = v29;
      }
      CMTime time1 = v25;
      *(__n128 *)&time2.CMTimeValue value = v27;
      time2.CMTimeEpoch epoch = v28;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        *(__n128 *)&v25.CMTimeValue value = v27;
        v25.CMTimeEpoch epoch = v28;
      }
      CMTime v32 = v26;
      CMTime time1 = v25;
      CMTime time2 = v26;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v23);
      *(_OWORD *)&v33.CMTimeValue value = v23;
      CMTimeEpoch epoch = v24;
    }
    v33.CMTimeEpoch epoch = epoch;
LABEL_11:
    CMTime v29 = v33;
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(*((void *)this + 121) + 336), &v27);
    CMTime v30 = v29;
    *(__n128 *)&time1.CMTimeValue value = v27;
    time1.CMTimeEpoch epoch = v28;
    PC_CMTimeSaferAdd(&v30, &time1, (uint64_t)&time2);
    CMTime v33 = time2;
    if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v5[1] + 8), (int32x4_t)xmmword_1B837FC70)))))
    {
      (*(void (**)(void *, CMTime *))(*v5 + 256))(v5, &v32);
    }
    else
    {
      (*(void (**)(void))(v7 + 728))();
    }
    uint64_t v4 = (char *)*((void *)v4 + 1);
  }
  while (v4 != v3);
  uint64_t v8 = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 272))(this);
  __n128 FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), (__n128 *)&v30);
  (*(void (**)(OZSceneNode *, CMTime *, CMTime *, __n128))(*(void *)this + 320))(this, &v32, &v30, FrameDuration);
  v30.CMTimeValue value = (CMTimeValue)&v30;
  *(void *)&v30.timescale = &v30;
  v30.CMTimeEpoch epoch = 0;
  uint64_t v10 = *((void *)this + 126);
  if ((char *)v10 != v3)
  {
    do
    {
      CMTime v11 = *(void **)(v10 + 16);
      if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v11[1] + 8), (int32x4_t)xmmword_1B837FC70)))))
      {
        (*(void (**)(void *))(*v11 + 264))(v11);
        if ((*(unsigned int (**)(void *))(*v11 + 272))(v11))
        {
          CMTime v12 = operator new(0x18uLL);
          v12[1] = &v30;
          v12[2] = v11;
          CMTimeValue value = v30.value;
          *CMTime v12 = v30.value;
          *(void *)(value + 8) = v12;
          v30.CMTimeValue value = (CMTimeValue)v12;
          ++v30.epoch;
        }
      }
      else
      {
        OZChannelBase::setRangeName(v14, v15);
        (*((void (**)(OZChannelBase *))v14->var0 + 33))(v14);
      }
      uint64_t v10 = *(void *)(v10 + 8);
    }
    while ((char *)v10 != v3);
    uint64_t v16 = *(void *)&v30.timescale;
    if (*(CMTime **)&v30.timescale != &v30)
    {
      do
      {
        uint64_t v17 = *(void *)(v16 + 16);
        uint64_t v18 = *((void *)this + 126);
        if ((char *)v18 != v3)
        {
          if (v17) {
            uint64_t v19 = v17 + 16;
          }
          else {
            uint64_t v19 = 0;
          }
          do
          {
            uint64_t v20 = *(void *)(v18 + 16);
            if (v17 != v20) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 152))(v20, v19);
            }
            uint64_t v18 = *(void *)(v18 + 8);
          }
          while ((char *)v18 != v3);
        }
        (*(void (**)(OZSceneNode *, uint64_t))(*(void *)this + 368))(this, v17);
        uint64_t v16 = *(void *)(v16 + 8);
      }
      while ((CMTime *)v16 != &v30);
      for (uint64_t i = *(void *)&v30.timescale; (CMTime *)i != &v30; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v22 = *(void *)(i + 16);
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
        }
      }
    }
  }
  (*(void (**)(OZSceneNode *))(*(void *)this + 496))(this);
  std::__list_imp<unsigned int>::clear(&v30);
}

void sub_1B7BBE0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,PCString a29)
{
}

OZChannelFolder *OZSceneNode::bakeChannels(OZSceneNode *this, const PCTimeRange *a2, const CMTime *a3)
{
  OZChannelFolder::bake((OZChannelFolder *)((char *)this + 320), a2, a3);
  OZChannelFolder::bake((OZChannelFolder *)((char *)this + 448), a2, a3);
  OZChannelFolder::bake((OZChannelFolder *)((char *)this + 576), a2, a3);

  return OZChannelFolder::bake((OZChannelFolder *)((char *)this + 832), a2, a3);
}

uint64_t OZSceneNode::addStyle(uint64_t a1, OZScene **a2)
{
  uint64_t v4 = (OZChannelBase *)(*(uint64_t (**)(void))(*(void *)*a2 + 112))();
  OZChannelFolder::push_front((OZChannelFolder *)(a1 + 832), v4);
  uint64_t v5 = *(OZScene **)(a1 + 968);
  if (v5)
  {
    if (*a2) {
      uint64_t v6 = (OZScene *)((char *)*a2 + 16);
    }
    else {
      uint64_t v6 = 0;
    }
    OZScene::registerObject(v5, v6);
    OZScene::addNodeDependency(*(void *)(a1 + 968), *((_DWORD *)*a2 + 24), *(_DWORD *)(a1 + 80));
    OZStyle::registerAllMaterials(*a2);
    OZScene::addAllDependencies(*(void *)(a1 + 968), (OZChannelFolder *)v4, *((_DWORD *)*a2 + 24));
  }
  (*(void (**)(CMTime *__return_ptr, uint64_t))(*(void *)a1 + 1128))(v9, a1);
  OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)v4, (const PCTimeRange *)v9, 0);
  OZChannelObjectRootBase::getTimeOffset((__n128 *)(a1 + 56), (__n128 *)v9);
  __n128 v7 = OZChannelObjectRootBase::setTimeOffset((__n128 *)v4, v9, 0);
  return (*(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 496))(a1, v7);
}

uint64_t OZSceneNode::removeStyle(OZScene **a1, OZStyle **a2)
{
  uint64_t v4 = (OZChannelFolder *)(a1 + 104);
  uint64_t v5 = (OZChannelBase *)(*(uint64_t (**)(void))(*(void *)*a2 + 112))();
  OZChannelFolder::removeDescendant(v4, v5);
  if (a1[121])
  {
    OZStyle::unregisterAllMaterials(*a2);
    if (*a2) {
      uint64_t v6 = (OZStyle *)((char *)*a2 + 16);
    }
    else {
      uint64_t v6 = 0;
    }
    OZScene::unregisterObject(a1[121], v6);
    OZScene::removeAllDependencies(a1[121], *((_DWORD *)*a2 + 24));
  }
  __n128 v7 = (uint64_t (*)(OZScene **))*((void *)*a1 + 62);

  return v7(a1);
}

uint64_t OZSceneNode::openMedia(OZSceneNode *this)
{
  uint64_t v1 = (char *)this + 976;
  uint64_t v2 = *((void *)this + 123);
  if ((OZSceneNode *)v2 == (OZSceneNode *)((char *)this + 976)) {
    return 0;
  }
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v2 + 16) + 704))(*(void *)(v2 + 16));
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while ((char *)v2 != v1 && result == 0);
  return result;
}

uint64_t OZSceneNode::prerollBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5 = a1 + 976;
  uint64_t v6 = *(void *)(a1 + 984);
  if (v6 == a1 + 976) {
    return 0;
  }
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, double))(**(void **)(v6 + 16) + 744))(*(void *)(v6 + 16), a2, a3, a4, a5);
    uint64_t v6 = *(void *)(v6 + 8);
  }
  while (v6 != v5 && result == 0);
  return result;
}

uint64_t OZSceneNode::prerollEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1 + 976;
  uint64_t v4 = *(void *)(a1 + 984);
  if (v4 == a1 + 976) {
    return 0;
  }
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v4 + 16) + 752))(*(void *)(v4 + 16), a2, a3);
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while (v4 != v3 && result == 0);
  return result;
}

uint64_t OZSceneNode::setRate(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4 = a1 + 976;
  uint64_t v5 = *(void *)(a1 + 984);
  if (v5 == a1 + 976) {
    return 0;
  }
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, double))(**(void **)(v5 + 16) + 760))(*(void *)(v5 + 16), a2, a3, a4);
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while (v5 != v4 && result == 0);
  return result;
}

uint64_t OZSceneNode::scheduleTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a1 + 976;
  uint64_t v6 = *(void *)(a1 + 984);
  if (v6 != a1 + 976)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v6 + 16) + 720))(*(void *)(v6 + 16), a2, a3, a4, a5);
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6 != v5);
  }
  return 0;
}

uint64_t OZSceneNode::remapTokens(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = result + 976;
  uint64_t v5 = *(void *)(result + 984);
  if (v5 != result + 976)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v5 + 16) + 712))(*(void *)(v5 + 16), a2, a3, a4);
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t OZSceneNode::hintTokensWillImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1 + 976;
  uint64_t v5 = *(void *)(a1 + 984);
  if (v5 == a1 + 976) {
    return 0;
  }
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v5 + 16) + 728))(*(void *)(v5 + 16), a2, a3, a4);
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while (v5 != v4 && result == 0);
  return result;
}

uint64_t OZSceneNode::getTokensImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1 + 976;
  uint64_t v5 = *(void *)(a1 + 984);
  if (v5 == a1 + 976) {
    return 0;
  }
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v5 + 16) + 736))(*(void *)(v5 + 16), a2, a3, a4);
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while (v5 != v4 && result == 0);
  return result;
}

uint64_t OZSceneNode::pruneTokensAtTime(uint64_t this, CMTime *a2, const char *a3)
{
  uint64_t v3 = this + 976;
  uint64_t v4 = *(void *)(this + 984);
  if (v4 != this + 976)
  {
    do
    {
      this = (*(uint64_t (**)(void, CMTime *, const char *))(**(void **)(v4 + 16) + 768))(*(void *)(v4 + 16), a2, a3);
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v3);
  }
  return this;
}

uint64_t OZSceneNode::pruneTokensExceptAtTime(uint64_t this, CMTime *a2, const char *a3)
{
  uint64_t v3 = this + 976;
  uint64_t v4 = *(void *)(this + 984);
  if (v4 != this + 976)
  {
    do
    {
      this = (*(uint64_t (**)(void, CMTime *, const char *))(**(void **)(v4 + 16) + 776))(*(void *)(v4 + 16), a2, a3);
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v3);
  }
  return this;
}

uint64_t OZSceneNode::pruneAllTokens(uint64_t this, const char *a2)
{
  uint64_t v2 = this + 976;
  uint64_t v3 = *(void *)(this + 984);
  if (v3 != this + 976)
  {
    do
    {
      this = (*(uint64_t (**)(void, const char *))(**(void **)(v3 + 16) + 784))(*(void *)(v3 + 16), a2);
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t OZSceneNode::getWorkingColorDescription@<X0>(OZSceneNode *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 121);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 136))();
  }
  else {
    return FxGetDefaultWorkingColorDescription(a2);
  }
}

float OZSceneNode::getBlendingGamma(OZSceneNode *this)
{
  uint64_t v1 = *((void *)this + 121);
  if (!v1) {
    return PCRenderModel::getDefaultBlendingGamma(0);
  }
  (*(void (**)(void))(*(void *)v1 + 144))();
  return result;
}

double OZSceneNode::getScenePixelAspectRatio(OZSceneNode *this)
{
  uint64_t v1 = *((void *)this + 121);
  if (v1) {
    return *(double *)(v1 + 384);
  }
  else {
    return 1.0;
  }
}

void *OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 2;
  uint64_t v3 = *result;
  if (*result == result[2]) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void **)(v3 + 16);
  if ((*(unsigned int (**)(void *))(*v4 + 1056))(v4))
  {
    uint64_t v5 = *v1;
    uint64_t v13 = v4;
    uint64_t v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v5;
    float result = (void *)(*(uint64_t (**)(void *))(*v4 + 1104))(v4);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(void *))(*v4 + 960))(v4))
  {
    uint64_t v6 = *v1;
    uint64_t v13 = v4;
    uint64_t v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v6;
    float result = (void *)(*(uint64_t (**)(void *))(*v4 + 1024))(v4);
    *uint64_t v1 = result;
    return result;
  }
  __n128 v7 = *(void **)(*v1 + 8);
  float result = (void *)v4[120];
  if (!result || v7 == (void *)*v2)
  {
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = *result;
  if (*((unsigned char *)v1 + 24)) {
    float result = (void *)(*(uint64_t (**)(void))(v8 + 1112))();
  }
  else {
    float result = (void *)(*(uint64_t (**)(void))(v8 + 1032))();
  }
  if (v7 != result)
  {
LABEL_13:
    uint64_t v3 = *v1;
LABEL_14:
    *uint64_t v1 = *(void *)(v3 + 8);
    return result;
  }
  if (*((unsigned char *)v1 + 24)
    && (float result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 960))(v4[120]), result))
  {
    float result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 1024))(v4[120]);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 0;
  }
  else
  {
    *((unsigned char *)v1 + 24) = 0;
    while (1)
    {
      uint64_t v4 = (void *)v4[120];
      if (!v4) {
        break;
      }
      uint64_t v14 = v4;
      uint64_t v9 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v14);
      uint64_t v10 = v9 + 3;
      if (!v9) {
        uint64_t v10 = v2;
      }
      uint64_t v11 = *v10;
      *uint64_t v1 = v11;
      float result = (void *)v4[120];
      if (result)
      {
        CMTime v12 = *(void **)(v11 + 8);
        float result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
        if (v12 == result && v12 != (void *)*v2) {
          continue;
        }
      }
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t *OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::decrement(uint64_t *result)
{
  uint64_t v1 = (uint64_t **)result;
  uint64_t v2 = (uint64_t *)*result;
  if (*result == result[1])
  {
    uint64_t v4 = (uint64_t *)result[2];
    goto LABEL_8;
  }
  if (v2 == (uint64_t *)result[2]) {
    goto LABEL_11;
  }
  uint64_t v3 = v2[2];
  if (!v3) {
    goto LABEL_11;
  }
  float result = *(uint64_t **)(v3 + 960);
  if (!*((unsigned char *)v1 + 24))
  {
    if (result)
    {
      float result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 1024))(result);
      uint64_t v2 = *v1;
      if (*v1 == result)
      {
        uint64_t v11 = *(uint64_t **)(v3 + 960);
        uint64_t v14 = v11;
        float result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v14);
        CMTime v12 = (uint64_t **)(result + 3);
        if (!result) {
          CMTime v12 = v1 + 2;
        }
        *uint64_t v1 = *v12;
        if (!v11) {
          return result;
        }
        float result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v11 + 1056))(v11);
        if (!result) {
          return result;
        }
        float result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v11 + 1112))(v11);
        goto LABEL_17;
      }
    }
LABEL_11:
    uint64_t v5 = (uint64_t *)*v2;
    *uint64_t v1 = v5;
    uint64_t v6 = v5[2];
    if (!v6) {
      return result;
    }
    while ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 960))(v6))
    {
      __n128 v7 = *v1;
      uint64_t v13 = v6;
      uint64_t v14 = &v13;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v7;
      float result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 1032))(v6);
      *uint64_t v1 = result;
      uint64_t v8 = (uint64_t *)*result;
      *uint64_t v1 = (uint64_t *)*result;
      uint64_t v6 = v8[2];
      if (!v6) {
        return result;
      }
    }
    float result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 1056))(v6);
    if (!result) {
      return result;
    }
    uint64_t v9 = *v1;
    uint64_t v13 = v6;
    uint64_t v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v9;
    float result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 1112))(v6);
LABEL_17:
    *uint64_t v1 = result;
    *uint64_t v1 = (uint64_t *)*result;
    *((unsigned char *)v1 + 24) = 1;
    return result;
  }
  float result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 1104))(result);
  if (*v1 != result)
  {
    uint64_t v4 = (uint64_t *)**v1;
LABEL_8:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v14 = *(uint64_t **)(v3 + 960);
  float result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v14);
  uint64_t v10 = (uint64_t **)(result + 3);
  if (!result) {
    uint64_t v10 = v1 + 2;
  }
  *uint64_t v1 = *v10;
  *((unsigned char *)v1 + 24) = 0;
  return result;
}

void *std::list<OZObjectManipulator *>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a1;
    do
    {
      uint64_t v6 = operator new(0x18uLL);
      v6[1] = a1;
      v6[2] = 0;
      *uint64_t v6 = v5;
      v5[1] = v6;
      *a1 = v6;
      ++v4;
      uint64_t v5 = v6;
      a1[2] = v4;
    }
    while (a2 != v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a1;
    do
    {
      __n128 v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *__n128 v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B7BBF124(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

void std::deque<OZSceneNode *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<OZSceneNode *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<OZSceneNode *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    float64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      char v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        PCSharedCount v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)PCSharedCount v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      char v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  char v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + OZDocument::~OZDocument(this - 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + OZDocument::~OZDocument(this - 1) = v54 + 8 * v26;
  PCSharedCount v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  __n128 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  CMTime v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + OZDocument::~OZDocument(this - 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + OZDocument::~OZDocument(this - 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B7BBF48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL OZRotoshape::canFourCorner(OZRotoshape *this)
{
  BOOL result = 0;
  if (OZElement::canFourCorner((OZElement *)((char *)this + 200)))
  {
    uint64_t v2 = *((void *)this + 4733);
    if (!v2 || !(*(unsigned int (**)(uint64_t))(*(void *)v2 + 64))(v2)) {
      return 1;
    }
  }
  return result;
}

BOOL non-virtual thunk to'OZRotoshape::canFourCorner(OZRotoshape *this)
{
  return OZRotoshape::canFourCorner((OZRotoshape *)((char *)this - 200));
}

uint64_t OZRotoshape::canCrop(OZRotoshape *this)
{
  uint64_t result = OZElement::canCrop((OZElement *)((char *)this + 200));
  if (result)
  {
    uint64_t v3 = *((void *)this + 4733);
    return (!v3 || ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 64))(v3) & 1) == 0)
        && (*((unsigned char *)this + 1224) & 8) == 0;
  }
  return result;
}

uint64_t non-virtual thunk to'OZRotoshape::canCrop(OZRotoshape *this)
{
  return OZRotoshape::canCrop((OZRotoshape *)((char *)this - 200));
}

uint64_t OZRotoshape::updateHiddenChannels(OZRotoshape *this, char a2)
{
  unint64_t v4 = (void *)((char *)this + 37856);
  uint64_t v5 = *((void *)this + 4732);
  if (v5
    && OZChannelBase::testFlag((OZChannelBase *)(v5 + 56), 8)
    && OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 25776), 0, 1)
    && OZChannel::getValueAsInt((OZChannel *)((char *)this + 25904), MEMORY[0x1E4F1FA48], 0.0) - 1 <= 1)
  {
    uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(void))(*(void *)*v4 + 640))(*v4);
    PCSharedCount::PCSharedCount(&v9);
    (*((void (**)(OZChannelBase *, PCSharedCount *))v6->var0 + 43))(v6, &v9);
    PCString::~PCString((PCString *)&v9);
    OZChannelBase::resetFlag(v6, 8, a2);
  }
  uint64_t v7 = v4[1];
  if (v7 && (*(unsigned int (**)(uint64_t))(*(void *)v7 + 64))(v7)) {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 12872), 2, a2);
  }
  else {
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 12872), 2, a2);
  }
  return OZElement::updateHiddenChannels((OZElement *)((char *)this + 200), a2);
}

void sub_1B7BBF754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZRotoshape::updateHiddenChannels(OZRotoshape *this, char a2)
{
  return OZRotoshape::updateHiddenChannels((OZRotoshape *)((char *)this - 200), a2);
}

uint64_t OZRotoshape::hitCheck(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 & 4) != 0 && ((*(uint64_t (**)(void))(*(void *)(a1 + 200) + 680))()) {
    return 0;
  }
  if ((a6 & 2) != 0)
  {
    long long v30 = *(_OWORD *)a3;
    uint64_t v31 = *(void *)(a3 + 16);
    if (!(*(unsigned int (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 360))(a1, &v30, 1, 1, 1))return 0; {
  }
    }
  uint64_t v12 = a1 + 200;
  if (((*(uint64_t (**)(uint64_t))(*(void *)(a1 + 200) + 416))(a1 + 200) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 384))(a1) & 1) != 0
    || OZChannelBase::isEnabled((OZChannelBase *)(a1 + 21760), 1, 1))
  {
    BOOL v13 = OZElement::hitCheck((void *)(a1 + 200), a2, (long long *)a3, a4, (double *)a5, a6) != 0;
  }
  else
  {
    double v15 = a2->f32[0];
    double v28 = a2->f32[1];
    double v29 = v15;
    uint64_t v27 = 0;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, double *, double *, uint64_t *, uint64_t, void))(*(void *)v12 + 1368))(a1 + 200, a4, &v29, &v28, &v27, a3, 0))goto LABEL_17; {
    OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v19);
    }
    CMTime v19 = *(CMTime *)a3;
    v20[0] = *(unsigned char *)(a3 + 202);
    v20[2] = *(unsigned char *)(a3 + 220);
    *(_OWORD *)&v20[8] = *(_OWORD *)(a3 + 24);
    LODWORD(v2OZDocument::~OZDocument(this - 1) = 1;
    int v16 = OZShape::hitCheck(a1 + 18976, &v19);
    PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v23);
    if (v16)
    {
      uint64_t v26 = 0x3FF0000000000000;
      uint64_t v23 = 0x3FF0000000000000;
      *(void *)&v20[16] = 0x3FF0000000000000;
      v19.CMTimeValue value = 0x3FF0000000000000;
      *(_OWORD *)&v19.timescale = 0u;
      *(_OWORD *)int64_t v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      (*(void (**)(uint64_t, CMTime *, uint64_t))(*(void *)v12 + 1256))(v12, &v19, a3);
      double v17 = v28;
      uint64_t v18 = v27;
      *(double *)a5 = v29;
      *(double *)(a5 + 8) = v17;
      *(void *)(a5 + 16) = v18;
      PCMatrix44Tmpl<double>::transform<double>((double *)&v19.value, (double *)a5, (double *)a5);
      BOOL v13 = 1;
    }
    else
    {
LABEL_17:
      BOOL v13 = 0;
    }
  }
  if (v13) {
    return v12;
  }
  else {
    return 0;
  }
}

void sub_1B7BBFA70(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZRotoshape::hitCheck(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return OZRotoshape::hitCheck(a1 - 200, a2, a3, a4, a5, a6);
}

CGColorSpace **OZRotoshape::createSnapSetForCamera(uint64_t a1, const LiCamera *a2, uint64_t **a3, long long *a4, int a5, int a6)
{
  uint64_t v33 = 0x3FF0000000000000;
  uint64_t v30 = 0x3FF0000000000000;
  uint64_t v27 = 0x3FF0000000000000;
  uint64_t v24 = 0x3FF0000000000000;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v12 = a1 + 200;
  (*(void (**)(uint64_t, uint64_t *, long long *))(*(void *)(a1 + 200) + 1256))(a1 + 200, &v24, a4);
  BOOL v13 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 272))(v12);
  OZScene::calcWorldToFilmSpaceMatrixForCamera(v13, a2, v23);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v24, v23);
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v16);
  long long v16 = *a4;
  uint64_t v17 = *((void *)a4 + 2);
  char v18 = *((unsigned char *)a4 + 202);
  char v19 = *((unsigned char *)a4 + 220);
  long long v20 = *(long long *)((char *)a4 + 24);
  int v21 = 1;
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 680))(v12);
  OZMoShape::createSnapSet(a1 + 18976, (double *)&v24, a3, (uint64_t)&v16, a5, a6, v14);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v22);
}

void sub_1B7BBFC48(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

CGColorSpace **non-virtual thunk to'OZRotoshape::createSnapSetForCamera(uint64_t a1, const LiCamera *a2, uint64_t **a3, long long *a4, int a5, int a6)
{
  return OZRotoshape::createSnapSetForCamera(a1 - 200, a2, a3, a4, a5, a6);
}

void OZRotoshape::allowDrag(OZRotoshape *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  *a5 = 0;
  if (!lpsrc
  {
    {
      OZElement::allowDrag((OZElement *)((char *)this + 200), lpsrc, a3, a4, a5, a6, a7);
    }
    else
    {
      *a5 = a4 & 1;
      *a6 = 1;
    }
  }
  else if (v14 != a3)
  {
    *a5 = a4 & 1;
  }
}

void non-virtual thunk to'OZRotoshape::allowDrag(OZRotoshape *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
}

{
  OZRotoshape::allowDrag((OZRotoshape *)((char *)this - 216), a2, a3, a4, a5, a6, a7);
}

uint64_t OZRotoshape::prepareForDragOperation()
{
  return 1;
}

uint64_t non-virtual thunk to'OZRotoshape::prepareForDragOperation()
{
  return 1;
}

{
  return 1;
}

uint64_t OZRotoshape::performDragOperation(OZRotoshape *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  if (lpsrc)
  {
    if (v16)
    {
      uint64_t v17 = v16;
      if ((*((unsigned char *)v16 + 1224) & 8) == 0 && !(*((_DWORD *)this + 306) & 8 | a7 & 0x10))
      {
        PCURL::PCURL((PCURL *)&v31, @"Undo Drop");
        (*(void (**)(char *, __n128 *, void))(*((void *)this + 27) + 176))((char *)this + 216, &v31, 0);
        PCString::~PCString((PCString *)&v31);
        OZRotoshape::applyStyle(this, v17);
        return 1;
      }
    }
    if ((a7 & 0x10) == 0 && a6 == 1)
    {
      uint64_t v19 = (uint64_t)v18;
      if (v18)
      {
        if (a3) {
        else
        }
          long long v20 = 0;
        long long v22 = (char *)this + 200;
        uint64_t v23 = *(void *)((*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200) + 1584);
        PCURL::PCURL((PCURL *)&v31, @"Undo Gradient Change");
        OZDocument::startCaptureModifiedChannels(v23, (const PCString *)&v31);
        PCString::~PCString((PCString *)&v31);
        uint64_t v24 = (char *)this + 23304;
        if (!v20 || v20 == v24)
        {
          PCSharedCount::PCSharedCount((PCSharedCount *)&v31);
          (*(void (**)(char *, __n128 *))(*(void *)v24 + 344))((char *)this + 23304, &v31);
          PCString::~PCString((PCString *)&v31);
          PCSharedCount::PCSharedCount((PCSharedCount *)&v31);
          (*(void (**)(char *, __n128 *))(*((void *)this + 2736) + 344))((char *)this + 21888, &v31);
          PCString::~PCString((PCString *)&v31);
          int v27 = *((_DWORD *)this + 5856);
          OZChannelGradientPositioned::operator=((uint64_t)this + 23304, v19);
          OZChannelFolder::setFoldFlags((OZChannelFolder *)((char *)this + 23304), v27);
          __n128 v31 = *(__n128 *)MEMORY[0x1E4F1FA48];
          uint64_t v32 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          long long v28 = (OZScene *)*((void *)this + 146);
          if (v28) {
            OZScene::getCurrentTime(v28, &v31);
          }
          (*(void (**)(char *, __n128 *, void, double))(*((void *)this + 2736) + 712))((char *)this + 21888, &v31, 0, 1.0);
        }
        else
        {
          int v25 = *((_DWORD *)v20 + 30);
          OZChannelFolder::operator=((uint64_t)v20);
          OZChannelFolder::operator=((uint64_t)(v20 + 128));
          OZChannelFolder::operator=((uint64_t)(v20 + 256));
          OZChannelBase::operator=((uint64_t)(v20 + 384), v19 + 384);
          OZChannelBase::operator=((uint64_t)(v20 + 536), v19 + 536);
          char v26 = *(unsigned char *)(v19 + 796);
          *((_DWORD *)v20 + 198) = *(_DWORD *)(v19 + 792);
          v20[796] = v26;
          OZChannelFolder::setFoldFlags((OZChannelFolder *)v20, v25);
        }
        uint64_t v29 = (*(uint64_t (**)(char *))(*(void *)v22 + 272))(v22);
        OZDocument::endCaptureModifiedChannels(*(OZChannelBase **)(v29 + 1584), v30);
        return 1;
      }
    }
  }

  return OZElement::performDragOperation((OZElement *)((char *)this + 200), lpsrc, a3, a4, a5, a6, a7, a8);
}

void sub_1B7BC0294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
}

uint64_t OZChannelGradientPositioned::operator=(uint64_t a1, uint64_t a2)
{
  OZChannelFolder::operator=(a1);
  OZChannelFolder::operator=(a1 + 128);
  OZChannelFolder::operator=(a1 + 256);
  OZChannelBase::operator=(a1 + 384, a2 + 384);
  OZChannelBase::operator=(a1 + 536, a2 + 536);
  char v4 = *(unsigned char *)(a2 + 796);
  *(_DWORD *)(a1 + 792) = *(_DWORD *)(a2 + 792);
  *(unsigned char *)(a1 + 796) = v4;
  return a1;
}

uint64_t non-virtual thunk to'OZRotoshape::performDragOperation(OZRotoshape *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  return OZRotoshape::performDragOperation((OZRotoshape *)((char *)this - 200), a2, a3, a4, a5, a6, a7, a8);
}

{
  return OZRotoshape::performDragOperation((OZRotoshape *)((char *)this - 216), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OZRotoshape::getPreviewSceneNode(OZRotoshape *this)
{
  if (*((unsigned char *)this + 38097) || *((unsigned char *)this + 38096))
  {
    uint64_t v1 = (OZChannelBase *)PCString::PCString(&v11, "Preview Rotoshape");
    OZChannelBase::getNextUniqueID(v1);
    long long v8 = xmmword_1B837FBE0;
    uint64_t SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v8);
    if (SceneNode) {
      uint64_t v3 = SceneNode - 200;
    }
    else {
      uint64_t v3 = 0;
    }
    PCString::~PCString(&v11);
    OZChannel::setDefaultValue((OZChannel *)(v3 + 27320), 15.0);
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 27320) + 288))(v3 + 27320, 0);
    OZRotoshape::setInterpolation((OZRotoshape *)v3, 1u);
    OZFigTimeForChannelSeconds(&v10, 2.0, 0x40000);
    char v4 = (CMTime *)MEMORY[0x1E4F1FA48];
    long long v8 = *MEMORY[0x1E4F1FA48];
    uint64_t v9 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    (*(void (**)(uint64_t, long long *, void))(*(void *)v3 + 336))(v3, &v8, 0);
    CMTime v7 = *v4;
    OZMoShape::initPPaintTime((void *)(v3 + 18976), &v7, (const PCTimeRange *)&v8);
    CMTime v6 = *v4;
    OZRotoshape::addVertex((OZRotoshape *)v3, &v6, -70.0, 0.0);
  }
  return 0;
}

void sub_1B7BC0694(_Unwind_Exception *a1)
{
  PCString::~PCString((PCString *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZRotoshape::getPreviewSceneNode(OZRotoshape *this)
{
  return OZRotoshape::getPreviewSceneNode((OZRotoshape *)((char *)this - 216));
}

uint64_t OZSceneNode::performDragOperation(OZSceneNode *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  long long v8 = a8;
  char v9 = a7;
  unsigned int v10 = a6;
  if (!lpsrc)
  {
    int v25 = 0;
    goto LABEL_27;
  }
  long long v20 = v19;
  unsigned int v21 = a5 - 1;
  if (a5 != 1 || !v16)
  {
    if (v17 && v21 <= 2)
    {
      char v26 = (OZSceneNode *)(*(uint64_t (**)(void *))(*v17 + 248))(v17);
      if (v26)
      {
        PCURL::PCURL((PCURL *)v90, @"Undo Reorder Filter");
        (*(void (**)(void *, PCString *, uint64_t))(v17[6] + 176))(v17 + 6, v90, 3);
        PCString::~PCString(v90);
        BOOL v84 = v26 != this;
        if (v26 != this)
        {
          for (uint64_t i = *((void *)v26 + 126); (OZSceneNode *)i != (OZSceneNode *)((char *)v26 + 1000); uint64_t i = *(void *)(i + 8))
            (*(void (**)(void, void *))(**(void **)(i + 16) + 152))(*(void *)(i + 16), v17 + 6);
        }
        OZSceneNode::removeEffect(v26, (OZEffect *)v17);
      }
      else
      {
        BOOL v84 = 1;
      }
      char v48 = (void *)*((void *)this + 123);
      if (v48 != (void *)((char *)this + 976))
      {
        uint64_t v49 = v48 + 2;
        if ((OZChannelBase *)(*(uint64_t (**)(void))(*(void *)v48[2] + 240))(v48[2]) == a3)
        {
          uint64_t v50 = 0;
LABEL_73:
          if (a5 == 3) {
            uint64_t v50 = *v49;
          }
LABEL_75:
          if (v26)
          {
            (*(void (**)(OZSceneNode *, void *, uint64_t))(*(void *)this + 352))(this, v17, v50);
            if (v26 == this)
            {
              BOOL v57 = v84;
            }
            else
            {
              long long v55 = (OZScene *)*((void *)this + 121);
              PCURL::PCURL((PCURL *)v90, @"Undo Reorder Filter");
              OZScene::startCaptureModifiedChannels(v55, v90);
              PCString::~PCString(v90);
              char v56 = (__n128 *)(*(uint64_t (**)(void *))(*v17 + 240))(v17);
              *(_OWORD *)&v90[0].int64_t var0 = *((_OWORD *)this + 13);
              CMTimeEpoch v91 = *((void *)this + 28);
              CMTime v92 = *(CMTime *)((char *)this + 232);
              (*(void (**)(CMTime *__return_ptr))(v56->n128_u64[0] + 712))(&v88);
              *(_OWORD *)&v96.CMTimeValue value = *(_OWORD *)&v90[0].var0;
              v96.CMTimeEpoch epoch = v91;
              *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)&v90[0].var0;
              time1.CMTimeEpoch epoch = v91;
              CMTime time2 = v92;
              PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v95);
              CMTime v94 = v88;
              CMTime time1 = v88;
              CMTime time2 = v89;
              PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v93);
              CMTime time1 = v93;
              CMTime time2 = v96;
              BOOL v57 = v84;
              if (CMTimeCompare(&time1, &time2) < 0 || (time1 = v94, CMTime time2 = v95, CMTimeCompare(&time1, &time2) >= 1))
              {
                (*(void (**)(CMTime *__return_ptr, __n128 *))(v56->n128_u64[0] + 712))(&v88, v56);
                CMTime v92 = v89;
                (*(void (**)(CMTime *__return_ptr, __n128 *))(v56->n128_u64[0] + 320))(&v95, v56);
                (*(void (**)(CMTime *__return_ptr, __n128 *))(v56->n128_u64[0] + 712))(&v88, v56);
                CMTime time1 = v88;
                *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)&v90[0].var0;
                time2.CMTimeEpoch epoch = v91;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v94);
                CMTime time1 = v95;
                CMTime time2 = v94;
                PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v96);
                OZChannelObjectRootBase::setTimeOffset(v56, &v96, 0);
                OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)v56, (const PCTimeRange *)v90, 0);
              }
              long long v79 = (OZScene *)*((void *)this + 121);
              char v80 = !v84;
              if (!v79) {
                char v80 = 1;
              }
              if ((v80 & 1) == 0)
              {
                OZScene::selectObject(v79, (OZObjectManipulator *)(v17 + 6), a6 > 1, 0);
                long long v79 = (OZScene *)*((void *)this + 121);
              }
              OZScene::endCaptureModifiedChannels((OZChannelBase **)v79, v58);
            }
          }
          else
          {
            uint64_t v59 = *(void *)(*((void *)this + 121) + 1584);
            PCURL::PCURL((PCURL *)v90, @"Undo Add Filter");
            OZDocument::startCaptureModifiedChannels(v59, v90);
            PCString::~PCString(v90);
            BOOL v57 = v84;
            if ((*(unsigned int (**)(OZSceneNode *, void *, uint64_t))(*(void *)this + 336))(this, v17, v50))
            {
              if ((a7 & 4) != 0)
              {
                uint64_t v61 = (__n128 *)(*(uint64_t (**)(void *))(*v17 + 240))(v17);
                (*(void (**)(PCString *__return_ptr))(v61->n128_u64[0] + 712))(v90);
                OZSceneSettings::getFrameDuration((OZSceneSettings *)(*((void *)this + 121) + 336), (__n128 *)&v88);
                if (PCTimeRange::contains((PCTimeRange *)v90, a8, &v88))
                {
                  OZSceneSettings::getFrameDuration((OZSceneSettings *)(*((void *)this + 121) + 336), (__n128 *)&time1);
                  PCTimeRange::getEnd((PCTimeRange *)v90, &time1, (uint64_t)&v88);
                  OZSceneSettings::getFrameDuration((OZSceneSettings *)(*((void *)this + 121) + 336), (__n128 *)&time2);
                  PCTimeRange::setOffsetEnd((PCTimeRange *)v90, a8, &v88, &time2);
                  OZChannelObjectRootBase::setTimeOffset(v61, a8, 0);
                  OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)v61, (const PCTimeRange *)v90, 0);
                }
              }
              OZDocument::endCaptureModifiedChannels(*(OZChannelBase **)(*((void *)this + 121) + 1584), v60);
              uint64_t v62 = (OZScene *)*((void *)this + 121);
              char v63 = !v84;
              if (!v62) {
                char v63 = 1;
              }
              if ((v63 & 1) == 0) {
                OZScene::selectObject(v62, (OZObjectManipulator *)(v17 + 6), a6 > 1, 0);
              }
            }
            else
            {
              (*(void (**)(void *))(*v17 + 8))(v17);
              OZDocument::endCaptureModifiedChannels(*(OZChannelBase **)(*((void *)this + 121) + 1584), v64);
              uint64_t v17 = 0;
            }
          }
          (*(void (**)(void *, void))(*v17 + 472))(v17, *((void *)this + 121));
          uint64_t v81 = *((void *)this + 121);
          if (!v81) {
            goto LABEL_134;
          }
          OZDocument::postNotification(*(OZDocument **)(v81 + 1584), 16);
          if (!v57) {
            goto LABEL_134;
          }
          goto LABEL_132;
        }
        while (1)
        {
          char v48 = (void *)v48[1];
          if (v48 == (void *)((char *)this + 976)) {
            break;
          }
          uint64_t v50 = *v49;
          uint64_t v49 = v48 + 2;
          if ((OZChannelBase *)(*(uint64_t (**)(void))(*(void *)v48[2] + 240))(v48[2]) == a3) {
            goto LABEL_73;
          }
        }
      }
      uint64_t v50 = 0;
      goto LABEL_75;
    }
    if (v18 && v21 <= 2)
    {
      long long v28 = (OZSceneNode *)(*(uint64_t (**)(void *))(*v18 + 320))(v18);
      if (v28)
      {
        PCURL::PCURL((PCURL *)v90, @"Undo Reorder Behavior");
        (*(void (**)(void *, PCString *, uint64_t))(v18[2] + 176))(v18 + 2, v90, 3);
        PCString::~PCString(v90);
        BOOL v29 = v28 != this;
        if (v28 != this)
        {
          for (uint64_t j = (void *)*((void *)v28 + 126); j != (void *)((char *)v28 + 1000); uint64_t j = (void *)j[1])
          {
            __n128 v31 = (void *)j[2];
            if (v31 != v18) {
              (*(void (**)(void *, void *))(*v31 + 152))(v31, v18 + 2);
            }
          }
        }
        (*(void (**)(OZSceneNode *, void *))(*(void *)v28 + 368))(v28, v18);
      }
      else
      {
        BOOL v29 = 1;
      }
      PCSharedCount v51 = (char *)this + 1000;
      uint64_t v52 = *((void *)this + 126);
      if ((OZSceneNode *)v52 != (OZSceneNode *)((char *)this + 1000))
      {
        PCSharedCount v53 = (OZBehavior **)(v52 + 16);
        if ((OZChannelBase *)(*(uint64_t (**)(void))(**(void **)(v52 + 16) + 312))(*(void *)(v52 + 16)) == a3)
        {
          long long v54 = 0;
LABEL_91:
          if (a5 == 3) {
            long long v54 = *v53;
          }
LABEL_93:
          unint64_t v65 = v18[1];
          *(_OWORD *)&v90[0].int64_t var0 = xmmword_1B7E77B90;
          if (OZFactory::isKindOfClass(v65, (int32x4_t *)v90) && *((void *)this + 127)) {
            long long v54 = *(OZBehavior **)(*(void *)v51 + 16);
          }
          if (this)
          {
            double v67 = v66;
            if (v67)
            {
              if (v68) {
                OZShape::isGeometricShape((OZShape *)(v68 + 18976));
              }
            }
          }
          uint64_t v69 = *((void *)this + 121);
          CMTime v70 = *(OZChannelBase **)(v69 + 1584);
          if (v70)
          {
            if (v28)
            {
              PCURL::PCURL((PCURL *)v90, @"Undo Reorder Behavior");
              OZChannelBase::setRangeName(v70, v90);
              PCString::~PCString(v90);
              OZSceneNode::insertBehaviorAfter(this, (OZBehavior *)v18, v54);
              if (v28 != this)
              {
                CMTime v72 = (OZScene *)*((void *)this + 121);
                PCURL::PCURL((PCURL *)v90, @"Undo Reorder Behavior");
                OZScene::startCaptureModifiedChannels(v72, v90);
                PCString::~PCString(v90);
                CMTime v73 = (__n128 *)(*(uint64_t (**)(void *))(*v18 + 312))(v18);
                *(_OWORD *)&v90[0].int64_t var0 = *((_OWORD *)this + 13);
                CMTimeEpoch v91 = *((void *)this + 28);
                CMTime v92 = *(CMTime *)((char *)this + 232);
                (*(void (**)(CMTime *__return_ptr))(v73->n128_u64[0] + 712))(&v88);
                *(_OWORD *)&v96.CMTimeValue value = *(_OWORD *)&v90[0].var0;
                v96.CMTimeEpoch epoch = v91;
                *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)&v90[0].var0;
                time1.CMTimeEpoch epoch = v91;
                CMTime time2 = v92;
                PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v95);
                CMTime v94 = v88;
                CMTime time1 = v88;
                CMTime time2 = v89;
                PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v93);
                CMTime time1 = v93;
                CMTime time2 = v96;
                if (CMTimeCompare(&time1, &time2) < 0 || (time1 = v94, CMTime time2 = v95, CMTimeCompare(&time1, &time2) >= 1))
                {
                  (*(void (**)(CMTime *__return_ptr, __n128 *))(v73->n128_u64[0] + 712))(&v88, v73);
                  CMTime v92 = v89;
                  (*(void (**)(CMTime *__return_ptr, __n128 *))(v73->n128_u64[0] + 320))(&v95, v73);
                  (*(void (**)(CMTime *__return_ptr, __n128 *))(v73->n128_u64[0] + 712))(&v88, v73);
                  CMTime time1 = v88;
                  *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)&v90[0].var0;
                  time2.CMTimeEpoch epoch = v91;
                  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v94);
                  CMTime time1 = v95;
                  CMTime time2 = v94;
                  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v96);
                  OZChannelObjectRootBase::setTimeOffset(v73, &v96, 0);
                  OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)v73, (const PCTimeRange *)v90, 0);
                }
                long long v82 = (OZScene *)*((void *)this + 121);
                char v83 = !v29;
                if (!v82) {
                  char v83 = 1;
                }
                if ((v83 & 1) == 0)
                {
                  OZScene::selectObject(v82, (OZObjectManipulator *)(v18 + 2), a6 > 1, 0);
                  long long v82 = (OZScene *)*((void *)this + 121);
                }
                OZScene::endCaptureModifiedChannels((OZChannelBase **)v82, v74);
              }
            }
            else
            {
              PCURL::PCURL((PCURL *)v90, @"Undo Add Behavior");
              OZChannelBase::setRangeName(v70, v90);
              PCString::~PCString(v90);
              (*(void (**)(OZSceneNode *, void *, OZBehavior *))(*(void *)this + 360))(this, v18, v54);
              if ((a7 & 4) != 0)
              {
                double v75 = (__n128 *)(*(uint64_t (**)(void *))(*v18 + 312))(v18);
                (*(void (**)(PCString *__return_ptr))(v75->n128_u64[0] + 712))(v90);
                uint64_t v76 = *((void *)this + 121);
                if (v76)
                {
                  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v76 + 336), (__n128 *)&v88);
                  if (PCTimeRange::contains((PCTimeRange *)v90, a8, &v88))
                  {
                    OZSceneSettings::getFrameDuration((OZSceneSettings *)(*((void *)this + 121) + 336), (__n128 *)&time1);
                    PCTimeRange::getEnd((PCTimeRange *)v90, &time1, (uint64_t)&v88);
                    OZSceneSettings::getFrameDuration((OZSceneSettings *)(*((void *)this + 121) + 336), (__n128 *)&time2);
                    PCTimeRange::setOffsetEnd((PCTimeRange *)v90, a8, &v88, &time2);
                    OZChannelObjectRootBase::setTimeOffset(v75, a8, 0);
                    OZChannelObjectRootBase::setTimeExtent((OZChannelObjectRootBase *)v75, (const PCTimeRange *)v90, 0);
                  }
                }
              }
              double v77 = (OZScene *)*((void *)this + 121);
              char v78 = !v29;
              if (!v77) {
                char v78 = 1;
              }
              if ((v78 & 1) == 0) {
                OZScene::selectObject(v77, (OZObjectManipulator *)(v18 + 2), a6 > 1, 0);
              }
              PCURL::PCURL((PCURL *)v90, @"Undo Add Behavior");
              (*(void (**)(void *, PCString *, uint64_t))(v18[2] + 176))(v18 + 2, v90, 1);
              PCString::~PCString(v90);
            }
            OZChannelBase::setRangeName(v70, v71);
            uint64_t v69 = *((void *)this + 121);
            if (!v69) {
              goto LABEL_134;
            }
          }
          OZDocument::postNotification(*(OZDocument **)(v69 + 1584), 16);
          if (!v29) {
            goto LABEL_134;
          }
LABEL_132:
          char v43 = *(OZDocument **)(*((void *)this + 121) + 1584);
          int v44 = 32;
          goto LABEL_133;
        }
        while (1)
        {
          uint64_t v52 = *(void *)(v52 + 8);
          if ((char *)v52 == v51) {
            break;
          }
          long long v54 = *v53;
          PCSharedCount v53 = (OZBehavior **)(v52 + 16);
          if ((OZChannelBase *)(*(uint64_t (**)(void))(**(void **)(v52 + 16) + 312))(*(void *)(v52 + 16)) == a3) {
            goto LABEL_91;
          }
        }
      }
      long long v54 = 0;
      goto LABEL_93;
    }
    char v9 = a7;
    if (v19 && (a4 == 1 || v21 <= 2))
    {
      long long v41 = (OZChannelBase *)*((void *)this + 121);
      if (v41 && !OZChannelBase::isObjectRef(v41))
      {
        PCURL::PCURL((PCURL *)v90, @"Undo Drop");
        (*(void (**)(char *, PCString *, void))(*((void *)this + 2) + 176))((char *)this + 16, v90, 0);
        PCString::~PCString(v90);
      }
      (*(void (**)(OZSceneNode *, void *))(*(void *)this + 376))(this, v20);
      goto LABEL_53;
    }
    unsigned int v10 = a6;
    long long v8 = a8;
LABEL_27:
    if ((OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)this + 640))(this) == a3 && v25 != 0)
    {
      uint64_t v33 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)this + 640))(this);
      if (!OZChannelBase::isDescendantOf(v25, v33))
      {
        BOOL v34 = (OZChannelFolder *)(*(uint64_t (**)(OZSceneNode *))(*(void *)this + 640))(this);
        uint64_t result = (uint64_t)OZChannelFolder::findMatchingDescendant(v34, v25);
        if (!result) {
          return result;
        }
        int v35 = (const void *)result;
        if (!v25->var6)
        {
          if (v36)
          {
            if (v37) {
              OZChannel::setInfo(v36, v37[16]);
            }
          }
        }
        PCSharedCount::PCSharedCount((PCSharedCount *)v90);
        (*(void (**)(const void *, PCString *))(*(void *)v35 + 344))(v35, v90);
        PCString::~PCString(v90);
        if ((v9 & 2) != 0)
        {
          uint64_t v45 = (OZScene *)(*(uint64_t (**)(OZSceneNode *))(*(void *)this + 272))(this);
          __n128 CurrentTime = OZScene::getCurrentTime(v45, (__n128 *)v90);
          (*(void (**)(const void *, PCString *, OZChannelBase *, __n128))(*(void *)v35 + 304))(v35, v90, v25, CurrentTime);
        }
        else
        {
          OZChannelBase::operator=((uint64_t)v35, (uint64_t)v25);
        }
        (*(void (**)(OZSceneNode *))(*(void *)this + 496))(this);
        uint64_t v47 = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 272))(this);
        OZDocument::postNotification(*(OZDocument **)(v47 + 1584), 8);
        return 1;
      }
    }
    return OZObjectManipulator::performDragOperation((OZSceneNode *)((char *)this + 16), lpsrc, a3, a4, a5, v10, v9, v8);
  }
  long long v22 = (OZChannelObjectRoot *)(*(uint64_t (**)(OZSceneNode *))(*(void *)this + 640))(this);
  NodeRefDescendant = OZChannelObjectRoot::findNodeRefDescendant(v22, (OZSceneNode *)v16, (OZChannelFolder *)v22);
  if ((OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)this + 640))(this) != a3) {
    return 0;
  }
  uint64_t v38 = (*(uint64_t (**)(unsigned int *))(*(void *)v16 + 272))(v16);
  uint64_t v39 = (*(uint64_t (**)(OZSceneNode *))(*(void *)this + 272))(this);
  uint64_t result = 0;
  if (a6 == 1 && v38 == v39 && NodeRefDescendant != 0)
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)v90);
    (*(void (**)(void *, PCString *))(*(void *)NodeRefDescendant + 344))(NodeRefDescendant, v90);
    PCString::~PCString(v90);
    (*(void (**)(void *, void, void))(*(void *)NodeRefDescendant + 864))(NodeRefDescendant, v16[20], 0);
LABEL_53:
    uint64_t v42 = *((void *)this + 121);
    if (!v42)
    {
LABEL_134:
      (*(void (**)(OZSceneNode *))(*(void *)this + 496))(this);
      return 1;
    }
    char v43 = *(OZDocument **)(v42 + 1584);
    int v44 = 8;
LABEL_133:
    OZDocument::postNotification(v43, v44);
    goto LABEL_134;
  }
  return result;
}

void sub_1B7BC1D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, PCString a19)
{
}

uint64_t PCTimeRange::contains(PCTimeRange *this, const CMTime *a2, const CMTime *a3)
{
  CMTime time1 = *(CMTime *)this;
  CMTime time2 = *a2;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    CMTime time1 = *(CMTime *)this;
    CMTime time2 = *(CMTime *)((unsigned char *)this + 1);
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v9);
    CMTime time1 = v9;
    CMTime time2 = *a3;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v8);
    CMTime time1 = *a2;
    CMTime time2 = v8;
    if (CMTimeCompare(&time1, &time2) < 1) {
      return 1;
    }
    unsigned int v7 = *((_DWORD *)this + 9);
    if (v7) {
      return (v7 >> 4) & 1;
    }
  }
  return 0;
}

double PCTimeRange::setOffsetEnd(PCTimeRange *this, const CMTime *a2, const CMTime *a3, const CMTime *a4)
{
  long long v6 = *(_OWORD *)&a2->value;
  *((void *)this + 2) = a2->epoch;
  *(_OWORD *)this = v6;
  CMTime v12 = *a3;
  CMTime v11 = *a2;
  PC_CMTimeSaferSubtract(&v12, &v11, (uint64_t)&v8);
  CMTime v12 = v8;
  CMTime v11 = *a4;
  PC_CMTimeSaferAdd(&v12, &v11, (uint64_t)&v9);
  double result = *(double *)&v9;
  *(_OWORD *)((char *)this + 24) = v9;
  *((void *)this + 5) = v10;
  return result;
}

BOOL OZShape::isGeometricShape(OZShape *this)
{
  uint64_t v1 = (OZChannel *)((char *)this + 1072);
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 1072), MEMORY[0x1E4F1FA48], 0.0) == 4
      || OZChannel::getValueAsInt(v1, MEMORY[0x1E4F1FA48], 0.0) == 5;
}

uint64_t non-virtual thunk to'OZSceneNode::performDragOperation(OZSceneNode *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  return OZSceneNode::performDragOperation((OZSceneNode *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

void OZLayeredMaterial::OZLayeredMaterial(OZLayeredMaterial *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZMaterialBase::OZMaterialBase(this, a2, a3, a4);
  *(void *)uint64_t v5 = &unk_1F11391F8;
  *(void *)(v5 + 16) = &unk_1F11393D8;
  *(void *)(v5 + 48) = &unk_1F1139630;
  *(void *)(v5 + 56) = &unk_1F1139688;
  *(unsigned char *)(v5 + 1305) = 0;
  Instance = (OZFactory *)OZMaterialLayersFolder_Factory::getInstance((OZMaterialLayersFolder_Factory *)v5);
  PCURL::PCURL((PCURL *)&v8, @"Material Layers Folder");
  OZMaterialLayersFolder::OZMaterialLayersFolder((OZLayeredMaterial *)((char *)this + 1312), Instance, &v8, (OZChannelFolder *)((char *)this + 152), 0x64u, 0);
  PCString::~PCString(&v8);
  PCString::PCString(&v8, "Material Options");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1440), &v8, (OZChannelFolder *)((char *)this + 152), 0x6Bu, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Layer Shared Transform Channel");
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform((OZLayeredMaterial *)((char *)this + 1568), &v8, (OZChannelFolder *)((char *)this + 152), 0x6Au, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Global Placement Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 5472), &v8, (OZChannelFolder *)((char *)this + 152), 0x6Cu, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, @"Material Randomize Selection Enum");
  PCURL::PCURL((PCURL *)&v7, @"Material Randomize Selection Channel");
  OZChannelEnum::OZChannelEnum((OZLayeredMaterial *)((char *)this + 5600), 1u, &v8, &v7, (OZChannelFolder *)((char *)this + 5472), 0x6Du, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  *((unsigned char *)this + 5856) = 0;
  *(void *)((char *)this + 5860) = 0;
  *((void *)this + 736) = 0;
  *((void *)this + 735) = 0;
  *((void *)this + 734) = (char *)this + 5880;
  *((_DWORD *)this + 1474) = 0;
  OZLayeredMaterial::init(this);
}

void sub_1B7BC2270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  unsigned int v21 = v20;
  long long v22 = v17;
  PCSpinLock::~PCSpinLock(v19);
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(v18, *v21);
  OZChannelEnum::~OZChannelEnum(v22);
  OZChannelFolder::~OZChannelFolder(v16);
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform(v15);
  OZChannelFolder::~OZChannelFolder(v14);
  OZMaterialLayersFolder::~OZMaterialLayersFolder(v13);
  OZMaterialBase::~OZMaterialBase(v12);
  _Unwind_Resume(a1);
}

void sub_1B7BC2308(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
}

void sub_1B7BC2318()
{
}

void sub_1B7BC2320(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
}

void sub_1B7BC2330()
{
}

void sub_1B7BC2338(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
}

void sub_1B7BC2348()
{
}

uint64_t OZMaterialLayersFolder_Factory::getInstance(OZMaterialLayersFolder_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMaterialLayersFolder_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    char v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZMaterialLayersFolder_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMaterialLayersFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMaterialLayersFolder_Factory::_instance;
}

OZChannelBase *OZLayeredMaterial::init(OZLayeredMaterial *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 152), @"TXLayeredMaterialRootFolderController");
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1312), 4718592);
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 1312), @"OZFolderGroupController");
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1696), 2, 0);
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 1440), @"OZMaterialOptionsFolderGroupController");
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1440), 0x2000000000, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1440), 4);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1440), 0x800000);
  OZChannelBase::setInspectorCtlrClassName((OZChannelBase *)((char *)this + 5472), @"OZNonTruncatingFolderGroupController");
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 5472), 0x400000);
  long long v3 = xmmword_1B7E74440;
  OZChannelEnum::setTags((OZLayeredMaterial *)((char *)this + 5600), (char *)&v3, 4);
  OZLayeredMaterial::addDefaultLayer((char *)this);
  return OZLayeredMaterial::updateSharedTransformUIState((uint64_t ***)this);
}

void OZLayeredMaterial::OZLayeredMaterial(OZLayeredMaterial *this, const OZLayeredMaterial *a2, char a3)
{
  OZMaterialBase::OZMaterialBase(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F11391F8;
  *(void *)(v5 + 16) = &unk_1F11393D8;
  *(void *)(v5 + 48) = &unk_1F1139630;
  *(void *)(v5 + 56) = &unk_1F1139688;
  *(unsigned char *)(v5 + 1305) = 0;
  long long v6 = (OZChannelFolder *)(v5 + 152);
  OZMaterialLayersFolder::OZMaterialLayersFolder((OZMaterialLayersFolder *)(v5 + 1312), (const OZChannelBase *)((char *)a2 + 1312), (OZChannelFolder *)(v5 + 152));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1440), (const OZChannelFolder *)((char *)a2 + 1440), v6);
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform((OZLayeredMaterial *)((char *)this + 1568), (const OZLayeredMaterial *)((char *)a2 + 1568), v6);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 5472), (const OZChannelFolder *)((char *)a2 + 5472), v6);
  OZChannelEnum::OZChannelEnum((OZLayeredMaterial *)((char *)this + 5600), (const OZLayeredMaterial *)((char *)a2 + 5600), (OZChannelFolder *)((char *)this + 5472));
  *((unsigned char *)this + 5856) = *((unsigned char *)a2 + 5856);
  *((_DWORD *)this + 1465) = *((_DWORD *)a2 + 1465);
  *((_DWORD *)this + 1466) = 0;
  *((void *)this + 735) = 0;
  *((void *)this + 736) = 0;
  *((void *)this + 734) = (char *)this + 5880;
  *((_DWORD *)this + 1474) = 0;
  OZLayeredMaterial::fixupImageChannelsOffsetChannel((uint64_t)this);
}

void sub_1B7BC2670(_Unwind_Exception *a1)
{
  uint64_t v10 = v9;
  CMTime v11 = v5;
  PCSpinLock::~PCSpinLock(v10);
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(v8, *v11);
  OZChannelEnum::~OZChannelEnum(v7);
  OZChannelFolder::~OZChannelFolder(v6);
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform(v4);
  OZChannelFolder::~OZChannelFolder(v3);
  OZMaterialLayersFolder::~OZMaterialLayersFolder(v2);
  OZMaterialBase::~OZMaterialBase(v1);
  _Unwind_Resume(a1);
}

void sub_1B7BC26E8()
{
}

uint64_t OZLayeredMaterial::fixupImageChannelsOffsetChannel(uint64_t this)
{
  uint64_t v1 = *(uint64_t ***)(this + 1424);
  if (v1)
  {
    char v2 = *v1;
    long long v3 = v1[1];
    if (*v1 != v3)
    {
      uint64_t v4 = this;
      do
      {
        uint64_t v5 = *v2++;
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 760))(v5, v4);
      }
      while (v2 != v3);
    }
  }
  return this;
}

uint64_t OZLayeredMaterial::operator=(uint64_t a1, void *lpsrc)
{
  ++*(_DWORD *)(a1 + 5864);
  if (!v4 {
    || (OZMaterialLayersFolder::copy((OZChannelFolder *)(a1 + 1312), (const OZChannelBase *)(v4 + 1312)),
  }
  {
    __cxa_bad_cast();
  }
  OZChannelFolder::assign((OZChannelFolder *)(a1 + 5472), (const OZChannelBase *)(v6 + 5472));
  uint64_t result = OZMaterialBase::operator=(a1, (uint64_t)lpsrc);
  --*(_DWORD *)(a1 + 5864);
  return result;
}

void sub_1B7BC28D0(_Unwind_Exception *a1)
{
  --*(_DWORD *)(v1 + 5864);
  _Unwind_Resume(a1);
}

void OZLayeredMaterial::~OZLayeredMaterial(OZLayeredMaterial *this)
{
  *(void *)this = &unk_1F11391F8;
  *((void *)this + 2) = &unk_1F11393D8;
  *((void *)this + 6) = &unk_1F1139630;
  *((void *)this + 7) = &unk_1F1139688;
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 1474);
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy((uint64_t)this + 5872, *((void **)this + 735));
  OZChannelEnum::~OZChannelEnum((OZLayeredMaterial *)((char *)this + 5600));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 5472));
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform((OZLayeredMaterial *)((char *)this + 1568));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1440));
  OZMaterialLayersFolder::~OZMaterialLayersFolder((OZLayeredMaterial *)((char *)this + 1312));

  OZMaterialBase::~OZMaterialBase(this);
}

{
  uint64_t vars8;

  OZLayeredMaterial::~OZLayeredMaterial(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZLayeredMaterial::~OZLayeredMaterial(OZLayeredMaterial *this)
{
}

{
  OZLayeredMaterial::~OZLayeredMaterial((OZLayeredMaterial *)((char *)this - 48));
}

{
  OZLayeredMaterial::~OZLayeredMaterial((OZLayeredMaterial *)((char *)this - 56));
}

{
  uint64_t vars8;

  OZLayeredMaterial::~OZLayeredMaterial((OZLayeredMaterial *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZLayeredMaterial::~OZLayeredMaterial((OZLayeredMaterial *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZLayeredMaterial::~OZLayeredMaterial((OZLayeredMaterial *)((char *)this - 56));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZLayeredMaterial::setPresetFromMaterial(OZLayeredMaterial *this, OZMaterialBase *a2)
{
  OZMaterialBase::setPresetFromMaterial(this, a2);
  ++*((_DWORD *)this + 1466);
  unsigned int v4 = *((_DWORD *)this + 44);
  (*(void (**)(OZLayeredMaterial *, OZMaterialBase *))(*(void *)this + 80))(this, a2);
  OZChannelBase::setID((OZChannelBase *)((char *)this + 152), v4);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 152), 8, 0);
  if (a2)
  {
    if (v5)
    {
      long long v6 = v5;
      if (*((unsigned char *)v5 + 5856))
      {
        PCString v7 = (const void *)*((void *)this + 160);
        if (v7)
        {
          if (v8) {
            (*(void (**)(void *, void, uint64_t, double))(v8[41] + 712))(v8 + 41, MEMORY[0x1E4F1FA48], 1, (double)v6[1465]);
          }
        }
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(OZLayeredMaterial *))(*(void *)this + 360))(this);
  --*((_DWORD *)this + 1466);
  return result;
}

void sub_1B7BC2C9C(_Unwind_Exception *a1)
{
  --*(_DWORD *)(v1 + 5864);
  _Unwind_Resume(a1);
}

OZChannelBase *OZLayeredMaterial::setTransformValuesAsDefaults(OZChannelBase *this)
{
  uint64_t result = OZChannelMaterialMapTransform::setCurrentTransformValuesAsDefault(this + 14);
  var10 = this[12].var10;
  if (var10)
  {
    isa = (uint64_t *)var10->isa;
    info = (uint64_t *)var10->info;
    while (isa != info)
    {
      uint64_t v6 = *isa++;
      uint64_t result = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 776))(v6);
    }
  }
  return result;
}

char *OZLayeredMaterial::addDefaultLayer(char *this)
{
  if (!*((_DWORD *)this + 1466))
  {
    uint64_t v1 = (OZChannelBase *)this;
    unsigned int NextUniqueID = (OZMaterialSubstanceLayer_Factory *)OZChannelBase::getNextUniqueID((OZChannelBase *)this);
    uint64_t Instance = OZMaterialSubstanceLayer_Factory::getInstance(NextUniqueID);
    PCURL::PCURL((PCURL *)&v5, @"Material Substance Layer");
    unsigned int v4 = (OZChannelBase *)(*(uint64_t (**)(uint64_t, PCString *, OZMaterialSubstanceLayer_Factory *))(*(void *)Instance + 16))(Instance, &v5, NextUniqueID);
    PCString::~PCString(&v5);
    (*((void (**)(OZChannelBase *, uint64_t))v4->var0 + 112))(v4, 3);
    LOBYTE(v4[1].var2) = 1;
    uint64_t v1 = (OZChannelBase *)((char *)v1 + 1312);
    OZChannelBase::willBeModified(v1, 1);
    return OZChannelFolder::push_front((OZChannelFolder *)v1, v4);
  }
  return this;
}

void sub_1B7BC2E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

OZChannelBase *OZLayeredMaterial::updateSharedTransformUIState(uint64_t ***this)
{
  int v2 = OZLayeredMaterial::doAnyLayersUseSharedTransform((OZLayeredMaterial *)this);
  long long v3 = (OZChannelBase *)(this + 196);
  if (v2) {
    uint64_t result = OZChannelBase::resetFlag(v3, 4227072, 0);
  }
  else {
    uint64_t result = OZChannelBase::setFlag(v3, 4227072, 0);
  }
  PCString v5 = this[178];
  if (v5)
  {
    uint64_t v6 = *v5;
    PCString v7 = v5[1];
    while (v6 != v7)
    {
      uint64_t v8 = *v6++;
      uint64_t result = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 768))(v8);
    }
  }
  return result;
}

uint64_t OZMaterialSubstanceLayer_Factory::getInstance(OZMaterialSubstanceLayer_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMaterialSubstanceLayer_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    unsigned int v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&OZMaterialSubstanceLayer_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMaterialSubstanceLayer_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMaterialSubstanceLayer_Factory::_instance;
}

OZChannelFolder *OZLayeredMaterial::deleteLayer(OZLayeredMaterial *this, unsigned int a2)
{
  long long v3 = (void *)*((void *)this + 178);
  if (a2 >= (unint64_t)((uint64_t)(v3[1] - *v3) >> 3)) {
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  }
  unsigned int v4 = *(OZChannelBase **)(*v3 + 8 * a2);
  uint64_t result = OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 1312), v4);
  if (v4)
  {
    uint64_t v6 = (uint64_t (*)(OZChannelBase *))*((void *)v4->var0 + 1);
    return (OZChannelFolder *)v6(v4);
  }
  return result;
}

const char *OZLayeredMaterial::envMapFilenameAndNormalization(OZLayeredMaterial *this, OZ3DExtrusionProperties *a2)
{
  unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 3944), MEMORY[0x1E4F1FA48], 0.0);
  if (ValueAsInt <= 0xA) {
    return (&OZLayeredMaterial::envMapFilenameAndNormalization(OZ3DExtrusionProperties *)::envs)[2 * ValueAsInt];
  }
  else {
    return "";
  }
}

void OZLayeredMaterial::setupLayeredMaterialEnvironmentMap(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  long long v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!*v2) {
    throw_PCNullPointerException(1);
  }
  LiLayeredMaterial::setUseEnvironmentMap(*v2, 0);
  PCString v7 = *(const void **)(v6 + 1280);
  if (v7)
  {
    if (*(unsigned char *)(v5 + 514))
    {
      if (v8)
      {
        uint64_t v9 = (*(uint64_t (**)(void *))(*(void *)v8 + 272))(v8);
        if (v9)
        {
          uint64_t v10 = (OZ3DExtrusionProperties *)v9;
          if (OZChannelBase::isEnabled((OZChannelBase *)(v9 + 3560), 0, 1))
          {
            if (!*v3) {
              throw_PCNullPointerException(1);
            }
            LiLayeredMaterial::setUseEnvironmentMap(*v3, 1);
            WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)v5);
            OZ3DExtrusionProperties::environmentType(v10);
            if (OZ3DExtrusionProperties::environmentType(v10) == 1)
            {
              PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v19);
              PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v21);
              PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v23);
              PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v25);
              CMTime v12 = (OZChannelBase *)((char *)v10 + 4744);
              OZChannelBase::getHash(v12);
              int v14 = (LiGradientEnvCache *)LiGradientEnvCache::instance(v13);
              if ((LiGradientEnvCache::get(v14, (const PCHash128 *)v18, (LiGradientEnvCache::value_t *)v19) & 1) == 0)
              {
                CMTime v17 = *(CMTime *)v5;
                OZChannelGradient::getGradient((uint64_t **)v12, &v17, 1, WorkingColorSpace, (uint64_t)v27, 0x100u, 0, (PCToneMapMethod *)&kPCNoToneMapMethod);
                BOOL v16 = (LiGradientEnvCache *)LiGradientEnvCache::instance(v15);
                LiGradientEnvCache::add(v16, (const PCHash128 *)v18, v27, (LiGradientEnvCache::value_t *)v19);
              }
              if (v26) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v26);
              }
              if (v24) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v24);
              }
              if (v22) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              }
              if (v20) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v20);
              }
            }
          }
        }
      }
    }
  }
}

void sub_1B7BC3260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  LiGradientEnvCache::value_t::~value_t((LiGradientEnvCache::value_t *)va);
  _Unwind_Resume(a1);
}

void OZLayeredMaterial::makeLiMaterial(uint64_t a1)
{
}

void sub_1B7BC366C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, PCSharedCount *a20)
{
  PCSharedCount::~PCSharedCount(v20);
  PCSharedCount::~PCSharedCount(a20);
  PCLockSentry<PCMutex>::~PCLockSentry(v21 - 104);
  _Unwind_Resume(a1);
}

void OZLayeredMaterial::deleteDefaultLayers(OZLayeredMaterial *this)
{
  BOOL v16 = 0;
  CMTime v17 = 0;
  uint64_t v18 = 0;
  uint64_t v1 = (OZChannelBase ***)*((void *)this + 178);
  char v2 = *v1;
  long long v3 = v1[1];
  if (*v1 != v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (OZChannelFolder *)((char *)this + 1312);
    do
    {
      uint64_t v6 = *v2;
      if (LOBYTE((*v2)[1].var2))
      {
        if (v4 >= v18)
        {
          uint64_t v7 = ((char *)v4 - v16) >> 3;
          if ((unint64_t)(v7 + 1) >> 61) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v8 = ((char *)v18 - v16) >> 2;
          if (v8 <= v7 + 1) {
            unint64_t v8 = v7 + 1;
          }
          if ((unint64_t)((char *)v18 - v16) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v9 = v8;
          }
          if (v9) {
            uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v18, v9);
          }
          else {
            uint64_t v10 = 0;
          }
          CMTime v11 = &v10[8 * v7];
          *(void *)CMTime v11 = v6;
          uint64_t v4 = (OZChannelBase **)(v11 + 8);
          CMTime v12 = v17;
          if (v17 != (OZChannelBase **)v16)
          {
            do
            {
              uint64_t v13 = (uint64_t)*--v12;
              *((void *)v11 - OZDocument::~OZDocument(this - 1) = v13;
              v11 -= 8;
            }
            while (v12 != (OZChannelBase **)v16);
            CMTime v12 = (OZChannelBase **)v16;
          }
          BOOL v16 = v11;
          uint64_t v18 = (OZChannelBase **)&v10[8 * v9];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *v4++ = v6;
        }
        CMTime v17 = v4;
      }
      ++v2;
    }
    while (v2 != v3);
    int v14 = (OZChannelBase **)v16;
    if (v16 != (char *)v4)
    {
      do
      {
        BOOL v15 = *v14;
        OZChannelFolder::removeDescendant(v5, *v14);
        if (v15) {
          (*((void (**)(OZChannelBase *))v15->var0 + 1))(v15);
        }
        ++v14;
      }
      while (v14 != v4);
      uint64_t v4 = (OZChannelBase **)v16;
    }
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_1B7BC3884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZLayeredMaterial::deleteThis(OZLayeredMaterial *this, OZChannelBase *a2)
{
  if (a2
  {
    uint64_t v4 = *(uint64_t (**)(void))(**((void **)this + 160) + 184);
    return v4();
  }
  else
  {
    return OZMaterialBase::deleteThis(this, a2);
  }
}

uint64_t non-virtual thunk to'OZLayeredMaterial::deleteThis(OZLayeredMaterial *this, OZChannelBase *a2)
{
  return OZLayeredMaterial::deleteThis((OZLayeredMaterial *)((char *)this - 16), a2);
}

uint64_t OZLayeredMaterial::doAnyLayersUseSharedTransform(OZLayeredMaterial *this)
{
  uint64_t v1 = (void *)*((void *)this + 178);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1[1];
  if (*v1 == v2) {
    return 0;
  }
  uint64_t v3 = *v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 744))(*(void *)(v3 - 8));
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

void *OZLayeredMaterial::layerThatOwnsChannel(OZLayeredMaterial *this, OZChannel *a2)
{
  while (1)
  {
    this = (OZLayeredMaterial *)*((void *)this + 6);
    if (!this) {
      break;
    }
    if (result) {
      return result;
    }
  }
  return 0;
}

uint64_t OZLayeredMaterial::channelValueWillBeSet(OZLayeredMaterial *this, OZChannel *a2, const CMTime *a3, double a4)
{
  unint64_t v8 = OZLayeredMaterial::layerThatOwnsChannel((OZLayeredMaterial *)a2, a2);
  if (v8) {
    (*(void (**)(void *, OZChannel *, const CMTime *, double))(*(void *)v8 + 720))(v8, a2, a3, a4);
  }

  return OZMaterialBase::channelValueWillBeSet(this, a2, a3, a4);
}

uint64_t OZLayeredMaterial::getImageNodeIDList(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t ***)(result + 1424);
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        uint64_t v6 = *v3++;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 728))(v6, a2);
      }
      while (v3 != v4);
    }
  }
  return result;
}

uint64_t OZLayeredMaterial::getImageAndFillChannelList(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t ***)(result + 1424);
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      do
      {
        uint64_t v6 = *v3++;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 736))(v6, a2);
      }
      while (v3 != v4);
    }
  }
  return result;
}

BOOL OZLayeredMaterial::isSimilarToMaterial(uint64_t **this, OZMaterialBase *a2)
{
  BOOL isSimilarToMaterial = OZMaterialBase::isSimilarToMaterial((OZMaterialBase *)this, a2);
  BOOL v5 = 0;
  if (a2 && isSimilarToMaterial)
  {
    if (v6
      && ((uint64_t v7 = this[178]) == 0 ? (LODWORD(v8) = 0) : (v8 = (unint64_t)(v7[1] - *v7) >> 3),
          (v9 = (void *)v6[178]) == 0 ? (LODWORD(v10) = 0) : (uint64_t v10 = (v9[1] - *v9) >> 3),
          v8 == v10))
    {
      if (v8)
      {
        unint64_t v11 = 0;
        BOOL v5 = 0;
        uint64_t v12 = *v7;
        uint64_t v13 = (v7[1] - *v7) >> 3;
        for (i = v8; i != v11; BOOL v5 = v11 >= i)
        {
          if (v13 == v11) {
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          }
          BOOL v15 = *(const void **)(v12 + 8 * v11);
          if (v15) {
          else
          }
            BOOL v16 = 0;
          if (v11 >= (uint64_t)(v9[1] - *v9) >> 3) {
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          }
          CMTime v17 = *(const void **)(*v9 + 8 * v11);
          if (!v17) {
            break;
          }
          if (!v16) {
            break;
          }
          if (!v18) {
            break;
          }
          if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v16[1] + 8), *(int32x4_t *)(v18[1] + 8))))))break; {
          ++v11;
          }
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void *OZLayeredMaterial::copyMaterial(void *this, OZMaterialBase *lpsrc)
{
  if (lpsrc)
  {
    uint64_t v2 = this;
    if (this)
    {
      uint64_t v3 = this;
      uint64_t v4 = (void *)v2[178];
      if (v4) {
        uint64_t v4 = (void *)((v4[1] - *v4) >> 3);
      }
      BOOL v5 = (void *)this[178];
      if (v5) {
        BOOL v5 = (void *)((v5[1] - *v5) >> 3);
      }
      if (v4 == v5 && v4)
      {
        unint64_t v6 = 0;
        uint64_t v7 = v4;
        do
        {
          unint64_t v8 = (void *)v2[178];
          if (v6 >= (uint64_t)(v8[1] - *v8) >> 3 {
            || ((unint64_t v9 = *(const void **)(*v8 + 8 * v6)) == 0
          }
              ? (uint64_t v10 = 0)
          {
            std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
          }
          this = *(void **)(*v11 + 8 * v6);
          if (this)
          {
            if (v10)
            {
              if (this)
              {
                unsigned int var3 = v10->var3;
                (*((void (**)(OZChannelBase *, void *))v10->var0 + 32))(v10, this);
                this = OZChannelBase::setID(v10, var3);
              }
            }
          }
          ++v6;
        }
        while (v7 != v6);
      }
    }
  }
  return this;
}

void OZLayeredMaterial::makeSequenceChannelFolder(OZLayeredMaterial *this, OZChannelFolder *a2)
{
  uint64_t Name = (const PCString *)OZObjectManipulator::getName((OZLayeredMaterial *)((char *)this + 16));
  PCString::PCString(&v3, Name);
  operator new();
}

void sub_1B7BC4160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  MEMORY[0x1BA9BFBA0](v10, 0x10E1C40138C3426);
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t OZLayeredMaterial::getSequenceChannelsForMaterialLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 1280);
  if (v3) {
    uint64_t v4 = (void *)(v3 - 16);
  }
  else {
    uint64_t v4 = 0;
  }
  BOOL v5 = (void *)v4[60];
  unint64_t v6 = (void *)v4[61];
  if (v5 == v6)
  {
LABEL_8:
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = 0;
    while (*v5 != a1)
    {
      ++v5;
      uint64_t v7 = (v7 + 1);
      if (v5 == v6) {
        goto LABEL_8;
      }
    }
  }
  uint64_t v8 = *(void *)(a1 + 1424);
  unint64_t v9 = *(void **)v8;
  uint64_t v10 = *(void **)(v8 + 8);
  if (*(void **)v8 == v10)
  {
LABEL_13:
    uint64_t v11 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v11 = 0;
    while (*v9 != a2)
    {
      uint64_t v11 = (v11 + 1);
      if (++v9 == v10) {
        goto LABEL_13;
      }
    }
  }
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*v4 + 256))(v4, v11, v7);
}

char *OZLayeredMaterial::writeBody(OZLayeredMaterial *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  uint64_t result = (char *)OZMaterialBase::writeBody(this, a2, a3, a4, a5);
  if (a3)
  {
    uint64_t result = (char *)*((void *)this + 160);
    if (result)
    {
      if (result)
      {
        unint64_t v9 = result;
        TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZLayeredMaterialScope);
        uint64_t ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v9 + 328), MEMORY[0x1E4F1FA48], 0.0);
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 300);
        (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, ValueAsInt);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
        return (char *)PCSerializerWriteStream::popScope((uint64_t)a2);
      }
    }
  }
  return result;
}

char *non-virtual thunk to'OZLayeredMaterial::writeBody(OZLayeredMaterial *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZLayeredMaterial::writeBody((OZLayeredMaterial *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZLayeredMaterial::parseBegin(OZLayeredMaterial *this, PCSerializerReadStream *a2)
{
  OZLayeredMaterial::deleteDefaultLayers(this);
  *((unsigned char *)this + 5856) = 0;
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZLayeredMaterialScope);

  return OZMaterialBase::parseBegin(this, a2);
}

uint64_t non-virtual thunk to'OZLayeredMaterial::parseBegin(OZLayeredMaterial *this, PCSerializerReadStream *a2)
{
  return OZLayeredMaterial::parseBegin((OZLayeredMaterial *)((char *)this - 48), a2);
}

uint64_t OZLayeredMaterial::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  uint64_t v5 = OZMaterialBase::parseElement(this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 300)
  {
    (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 24))(a3, (char *)this + 5860);
    *((unsigned char *)this + 5856) = 1;
  }
  return v5;
}

uint64_t non-virtual thunk to'OZLayeredMaterial::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZLayeredMaterial::parseElement(this - 6, a2, a3);
}

uint64_t OZLayeredMaterial::parseEnd(OZLayeredMaterial *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = OZMaterialBase::parseEnd(this, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1696), 2, 0);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 1568), 0x400000);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 5472), 0x400000);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 1312), 0x80000);
  OZLayeredMaterial::updateSharedTransformUIState((uint64_t ***)this);
  uint64_t v4 = (uint64_t *)*((void *)this + 178);
  if (v4)
  {
    unsigned int v50 = v3;
    uint64_t v6 = *v4;
    uint64_t v5 = v4[1];
    *(void *)&v63[40] = 0x3FF0000000000000;
    *(void *)char v63 = 0x3FF0000000000000;
    *(void *)&v60[40] = 0x3FF0000000000000;
    *(void *)uint64_t v60 = 0x3FF0000000000000;
    memset(&v60[8], 0, 32);
    long long v61 = 0u;
    long long v62 = 0u;
    memset(&v63[8], 0, 32);
    if (v5 != v6)
    {
      uint64_t v7 = (CMTime *)MEMORY[0x1E4F1FA48];
      uint64_t v8 = v5;
      do
      {
        uint64_t v10 = *(const void **)(v8 - 8);
        v8 -= 8;
        unint64_t v9 = v10;
        if (v10)
        {
          if (!v11) {
            goto LABEL_13;
          }
          uint64_t v12 = (OZChannel *)v11;
          uint64_t v13 = (OZChannelBase *)(v11 + 6480);
          int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v11 + 10024), v7, 0.0);
          BOOL v15 = (const CMTime *)((uint64_t (*)(OZChannelBase *))v12[42].var12[26].isa)(v13);
          MaterialTextureTransformer::composeTextureTransform(v7, v15, (const OZChannel2D *)&v12[55].var18, (const OZChannelRotation3D *)&v12[53].var1, (uint64_t)v59);
          if (((uint64_t)v12[43].var0 & 2) == 0 && OZChannel::getValueAsInt(v12 + 13, v7, 0.0) == 2)
          {
            if (ValueAsInt)
            {
              PCMatrix44Tmpl<double>::operator*((uint64_t)v59, (long long *)v60, (uint64_t)&v51);
              long long v62 = v55;
              *(_OWORD *)char v63 = v56;
              *(_OWORD *)&v63[16] = v57;
              *(_OWORD *)&v63[32] = v58;
              *(_OWORD *)uint64_t v60 = v51;
              *(_OWORD *)&v60[16] = v52;
              *(_OWORD *)&v60[32] = v53;
              long long v61 = v54;
            }
            else
            {
              *(void *)&v63[40] = 0x3FF0000000000000;
              *(void *)char v63 = 0x3FF0000000000000;
              *(void *)&v60[40] = 0x3FF0000000000000;
              *(void *)uint64_t v60 = 0x3FF0000000000000;
              memset(&v60[8], 0, 32);
              long long v61 = 0u;
              long long v62 = 0u;
              memset(&v63[8], 0, 32);
            }
            uint64_t v16 = (*((uint64_t (**)(OZChannelBase *))v13->var0 + 104))(v13);
            OZLayeredMaterial::copyTransformDeprecatedImageChannels(v16, v13, &v12[69].var12, ValueAsInt != 0, (long long *)v60, v16);
          }
          unint64_t v9 = *(const void **)(v5 - 8);
          if (v9)
          {
LABEL_13:
            if (!v17) {
              goto LABEL_20;
            }
            uint64_t v18 = v17;
            uint64_t v19 = (OZChannelBase *)(v17 + 1384);
            int v20 = OZChannel::getValueAsInt((OZChannel *)(v17 + 4928), v7, 0.0);
            uint64_t v21 = (const CMTime *)(*(uint64_t (**)(OZChannelBase *))(*((void *)v18 + 173) + 832))(v19);
            MaterialTextureTransformer::composeTextureTransform(v7, v21, (const OZChannel2D *)(v18 + 3408), (const OZChannelRotation3D *)(v18 + 2968), (uint64_t)v59);
            if ((v18[1440] & 2) == 0)
            {
              if (v20)
              {
                PCMatrix44Tmpl<double>::operator*((uint64_t)v59, (long long *)v60, (uint64_t)&v51);
                long long v62 = v55;
                *(_OWORD *)char v63 = v56;
                *(_OWORD *)&v63[16] = v57;
                *(_OWORD *)&v63[32] = v58;
                *(_OWORD *)uint64_t v60 = v51;
                *(_OWORD *)&v60[16] = v52;
                *(_OWORD *)&v60[32] = v53;
                long long v61 = v54;
              }
              else
              {
                *(void *)&v63[40] = 0x3FF0000000000000;
                *(void *)char v63 = 0x3FF0000000000000;
                *(void *)&v60[40] = 0x3FF0000000000000;
                *(void *)uint64_t v60 = 0x3FF0000000000000;
                memset(&v60[8], 0, 32);
                long long v61 = 0u;
                long long v62 = 0u;
                memset(&v63[8], 0, 32);
              }
              long long v22 = (void *)(*(uint64_t (**)(char *))(*(void *)v18 + 912))(v18);
              uint64_t v23 = (*((uint64_t (**)(OZChannelBase *))v19->var0 + 104))(v19);
              OZLayeredMaterial::copyTransformDeprecatedImageChannels(v23, v19, v22, v20 != 0, (long long *)v60, v23);
            }
            unint64_t v9 = *(const void **)(v5 - 8);
            if (v9)
            {
LABEL_20:
              if (!v24) {
                goto LABEL_28;
              }
              uint64_t v25 = v24;
              p_var13 = (OZChannelBase *)&v24[37].var13;
              int v27 = OZChannel::getValueAsInt(v24 + 61, v7, 0.0);
              uint64_t v28 = (const CMTime *)(*((uint64_t (**)(OZChannelBase *))v25[37].var13 + 104))(p_var13);
              MaterialTextureTransformer::composeTextureTransform(v7, v28, (const OZChannel2D *)&v25[51], (const OZChannelRotation3D *)&v25[48].var2, (uint64_t)v59);
              if (((uint64_t)v25[38].var1 & 2) == 0
                && OZChannel::getValueAsInt((OZChannel *)((char *)v25 + 1224), v7, 0.0) == 2)
              {
                if (v27)
                {
                  PCMatrix44Tmpl<double>::operator*((uint64_t)v59, (long long *)v60, (uint64_t)&v51);
                  long long v62 = v55;
                  *(_OWORD *)char v63 = v56;
                  *(_OWORD *)&v63[16] = v57;
                  *(_OWORD *)&v63[32] = v58;
                  *(_OWORD *)uint64_t v60 = v51;
                  *(_OWORD *)&v60[16] = v52;
                  *(_OWORD *)&v60[32] = v53;
                  long long v61 = v54;
                }
                else
                {
                  *(void *)&v63[40] = 0x3FF0000000000000;
                  *(void *)char v63 = 0x3FF0000000000000;
                  *(void *)&v60[40] = 0x3FF0000000000000;
                  *(void *)uint64_t v60 = 0x3FF0000000000000;
                  memset(&v60[8], 0, 32);
                  long long v61 = 0u;
                  long long v62 = 0u;
                  memset(&v63[8], 0, 32);
                }
                uint64_t v29 = (*((uint64_t (**)(OZChannelBase *))p_var13->var0 + 104))(p_var13);
                OZLayeredMaterial::copyTransformDeprecatedImageChannels(v29, p_var13, &v25[64].var13, v27 != 0, (long long *)v60, v29);
              }
              unint64_t v9 = *(const void **)(v5 - 8);
              if (v9)
              {
LABEL_28:
                if (!v30) {
                  goto LABEL_36;
                }
                __n128 v31 = v30;
                uint64_t v32 = (OZChannelBase *)(v30 + 5888);
                int v33 = OZChannel::getValueAsInt((OZChannel *)(v30 + 9432), v7, 0.0);
                BOOL v34 = (const CMTime *)(*(uint64_t (**)(OZChannelBase *))(*((void *)v31 + 736) + 832))(v32);
                MaterialTextureTransformer::composeTextureTransform(v7, v34, (const OZChannel2D *)(v31 + 7912), (const OZChannelRotation3D *)(v31 + 7472), (uint64_t)v59);
                if ((v31[5944] & 2) == 0 && (*(unsigned int (**)(char *))(*(void *)v31 + 912))(v31) == 2)
                {
                  if (v33)
                  {
                    PCMatrix44Tmpl<double>::operator*((uint64_t)v59, (long long *)v60, (uint64_t)&v51);
                    long long v62 = v55;
                    *(_OWORD *)char v63 = v56;
                    *(_OWORD *)&v63[16] = v57;
                    *(_OWORD *)&v63[32] = v58;
                    *(_OWORD *)uint64_t v60 = v51;
                    *(_OWORD *)&v60[16] = v52;
                    *(_OWORD *)&v60[32] = v53;
                    long long v61 = v54;
                  }
                  else
                  {
                    *(void *)&v63[40] = 0x3FF0000000000000;
                    *(void *)char v63 = 0x3FF0000000000000;
                    *(void *)&v60[40] = 0x3FF0000000000000;
                    *(void *)uint64_t v60 = 0x3FF0000000000000;
                    memset(&v60[8], 0, 32);
                    long long v61 = 0u;
                    long long v62 = 0u;
                    memset(&v63[8], 0, 32);
                  }
                  uint64_t v35 = (*((uint64_t (**)(OZChannelBase *))v32->var0 + 104))(v32);
                  OZLayeredMaterial::copyTransformDeprecatedImageChannels(v35, v32, (void *)v31 + 1249, v33 != 0, (long long *)v60, v35);
                }
                unint64_t v9 = *(const void **)(v5 - 8);
                if (v9)
                {
LABEL_36:
                  if (v36)
                  {
                    uint64_t v37 = v36;
                    int v38 = OZChannel::getValueAsInt(v36 + 326, v7, 0.0);
                    BOOL v39 = v38 != 0;
                    MaterialTextureTransformer::composeTextureTransform(v7, (const CMTime *)&v37[327].var13, (const OZChannel2D *)&v37[335].var4, (const OZChannelRotation3D *)&v37[332].var6, (uint64_t)v59);
                    if ((*(unsigned char *)((*((uint64_t (**)(OZChannel *))v37->var0 + 127))(v37) + 56) & 2) != 0
                      || (*((unsigned int (**)(OZChannel *))v37->var0 + 119))(v37) != 1)
                    {
                      BOOL v39 = 0;
                    }
                    else
                    {
                      if (v38)
                      {
                        PCMatrix44Tmpl<double>::operator*((uint64_t)v59, (long long *)v60, (uint64_t)&v51);
                        long long v62 = v55;
                        *(_OWORD *)char v63 = v56;
                        *(_OWORD *)&v63[16] = v57;
                        *(_OWORD *)&v63[32] = v58;
                        *(_OWORD *)uint64_t v60 = v51;
                        *(_OWORD *)&v60[16] = v52;
                        *(_OWORD *)&v60[32] = v53;
                        long long v61 = v54;
                      }
                      else
                      {
                        *(void *)&v63[40] = 0x3FF0000000000000;
                        *(void *)char v63 = 0x3FF0000000000000;
                        *(void *)&v60[40] = 0x3FF0000000000000;
                        *(void *)uint64_t v60 = 0x3FF0000000000000;
                        memset(&v60[8], 0, 32);
                        long long v61 = 0u;
                        long long v62 = 0u;
                        memset(&v63[8], 0, 32);
                      }
                      uint64_t v40 = (OZChannelBase *)(*((uint64_t (**)(OZChannel *))v37->var0 + 127))(v37);
                      long long v41 = (void *)(*((uint64_t (**)(OZChannel *))v37->var0 + 128))(v37);
                      OZLayeredMaterial::copyTransformDeprecatedImageChannels((int)v41, v40, v41, v38 != 0, (long long *)v60, (uint64_t)&v37[327].var13);
                    }
                    if ((*(unsigned char *)((*((uint64_t (**)(OZChannel *))v37->var0 + 129))(v37) + 56) & 2) == 0
                      && (*((unsigned int (**)(OZChannel *))v37->var0 + 120))(v37) == 1)
                    {
                      if (v38) {
                        char v42 = v39;
                      }
                      else {
                        char v42 = 1;
                      }
                      if (v42)
                      {
                        *(void *)&v63[40] = 0x3FF0000000000000;
                        *(void *)char v63 = 0x3FF0000000000000;
                        *(void *)&v60[40] = 0x3FF0000000000000;
                        *(void *)uint64_t v60 = 0x3FF0000000000000;
                        memset(&v60[8], 0, 32);
                        long long v61 = 0u;
                        long long v62 = 0u;
                        memset(&v63[8], 0, 32);
                      }
                      else
                      {
                        PCMatrix44Tmpl<double>::operator*((uint64_t)v59, (long long *)v60, (uint64_t)&v51);
                        long long v62 = v55;
                        *(_OWORD *)char v63 = v56;
                        *(_OWORD *)&v63[16] = v57;
                        *(_OWORD *)&v63[32] = v58;
                        *(_OWORD *)uint64_t v60 = v51;
                        *(_OWORD *)&v60[16] = v52;
                        BOOL v39 = 1;
                        *(_OWORD *)&v60[32] = v53;
                        long long v61 = v54;
                      }
                      char v43 = (OZChannelBase *)(*((uint64_t (**)(OZChannel *))v37->var0 + 129))(v37);
                      int v44 = (void *)(*((uint64_t (**)(OZChannel *))v37->var0 + 130))(v37);
                      OZLayeredMaterial::copyTransformDeprecatedImageChannels((int)v44, v43, v44, v38 != 0, (long long *)v60, (uint64_t)&v37[327].var13);
                    }
                    if (((uint64_t)v37[166].var10 & 2) == 0
                      && (*((unsigned int (**)(OZChannel *))v37->var0 + 121))(v37) == 2)
                    {
                      if (v38) {
                        char v45 = v39;
                      }
                      else {
                        char v45 = 1;
                      }
                      if (v45)
                      {
                        *(void *)&v63[40] = 0x3FF0000000000000;
                        *(void *)char v63 = 0x3FF0000000000000;
                        *(void *)&v60[40] = 0x3FF0000000000000;
                        *(void *)uint64_t v60 = 0x3FF0000000000000;
                        memset(&v60[8], 0, 32);
                        long long v61 = 0u;
                        long long v62 = 0u;
                        memset(&v63[8], 0, 32);
                      }
                      else
                      {
                        PCMatrix44Tmpl<double>::operator*((uint64_t)v59, (long long *)v60, (uint64_t)&v51);
                        long long v62 = v55;
                        *(_OWORD *)char v63 = v56;
                        *(_OWORD *)&v63[16] = v57;
                        *(_OWORD *)&v63[32] = v58;
                        *(_OWORD *)uint64_t v60 = v51;
                        *(_OWORD *)&v60[16] = v52;
                        BOOL v39 = 1;
                        *(_OWORD *)&v60[32] = v53;
                        long long v61 = v54;
                      }
                      unint64_t v46 = (void *)(*((uint64_t (**)(OZChannel *))v37->var0 + 132))(v37);
                      OZLayeredMaterial::copyTransformDeprecatedImageChannels((int)v46, (OZChannelBase *)&v37[166].var3, v46, v38 != 0, (long long *)v60, (uint64_t)&v37[327].var13);
                    }
                    if (((uint64_t)v37[243].var11 & 2) == 0
                      && (*((unsigned int (**)(OZChannel *))v37->var0 + 123))(v37) == 2)
                    {
                      if (v38) {
                        char v47 = v39;
                      }
                      else {
                        char v47 = 1;
                      }
                      if (v47)
                      {
                        *(void *)&v63[40] = 0x3FF0000000000000;
                        *(void *)char v63 = 0x3FF0000000000000;
                        *(void *)&v60[40] = 0x3FF0000000000000;
                        *(void *)uint64_t v60 = 0x3FF0000000000000;
                        memset(&v60[8], 0, 32);
                        long long v61 = 0u;
                        long long v62 = 0u;
                        memset(&v63[8], 0, 32);
                      }
                      else
                      {
                        PCMatrix44Tmpl<double>::operator*((uint64_t)v59, (long long *)v60, (uint64_t)&v51);
                        long long v62 = v55;
                        *(_OWORD *)char v63 = v56;
                        *(_OWORD *)&v63[16] = v57;
                        *(_OWORD *)&v63[32] = v58;
                        *(_OWORD *)uint64_t v60 = v51;
                        *(_OWORD *)&v60[16] = v52;
                        *(_OWORD *)&v60[32] = v53;
                        long long v61 = v54;
                      }
                      char v48 = (void *)(*((uint64_t (**)(OZChannel *))v37->var0 + 140))(v37);
                      OZLayeredMaterial::copyTransformDeprecatedImageChannels((int)v48, (OZChannelBase *)&v37[243].var4, v48, v38 != 0, (long long *)v60, (uint64_t)&v37[327].var13);
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v5 = v8;
      }
      while (v8 != v6);
    }
    return v50;
  }
  return v3;
}

uint64_t OZLayeredMaterial::copyTransformDeprecatedImageChannels(int a1, OZChannelBase *this, void *a3, int a4, long long *a5, uint64_t a6)
{
  OZChannelBase::setFlag(this, 2, 0);
  uint64_t v11 = (OZChannel2D *)(*(uint64_t (**)(void *))(*a3 + 832))(a3);
  if (a4)
  {
    MaterialTextureTransformer::setTextureTransformChannels(MEMORY[0x1E4F1FA48], a5, v11, (uint64_t)(a3 + 610), (OZChannel2D *)(a3 + 462));
  }
  else
  {
    (*(void (**)(void *, uint64_t))(*((void *)v11 + 17) + 256))((void *)v11 + 17, a6 + 136);
    uint64_t v12 = (*(uint64_t (**)(void *))(*a3 + 832))(a3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 + 288) + 256))(v12 + 288, a6 + 288);
    (*(void (**)(void))(a3[627] + 256))();
    (*(void (**)(void))(a3[646] + 256))();
    (*(void (**)(void))(a3[665] + 256))();
    (*(void (**)(void))(a3[479] + 256))();
    (*(void (**)(void))(a3[498] + 256))();
  }
  uint64_t v14 = a3[17];
  uint64_t v13 = a3 + 17;
  (*(void (**)(void *, unsigned int *))(v14 + 256))(v13, &this[1].var3);
  (*(void (**)(void))(v13[701] + 256))();
  (*(void (**)(void))(v13[752] + 256))();
  (*(void (**)(void))(v13[771] + 256))();
  OZChannel::setValue((OZChannel *)(v13 + 229), MEMORY[0x1E4F1FA48], 0.0, 0);
  (*(void (**)(void))(v13[325] + 256))();
  BOOL v15 = *(uint64_t (**)(__n128))(v13[261] + 712);
  v16.n128_u64[0] = 0;

  return v15(v16);
}

uint64_t non-virtual thunk to'OZLayeredMaterial::parseEnd(OZLayeredMaterial *this, PCSerializerReadStream *a2)
{
  return OZLayeredMaterial::parseEnd((OZLayeredMaterial *)((char *)this - 48), a2);
}

uint64_t OZLayeredMaterial::calcStaticHash(uint64_t a1, void *lpsrc)
{
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = (OZMaterialLayerBase *)(*(uint64_t (**)(uint64_t, void *, void, void, uint64_t))(*(void *)a1 + 256))(a1, v4, 0, 0, 1);
  v6.n128_f32[0] = OZMaterialLayerBase::calcTextureScale(v5);
  uint64_t v7 = *(uint64_t (**)(void *, __n128))(*(void *)lpsrc + 80);

  return v7(lpsrc, v6);
}

uint64_t non-virtual thunk to'OZLayeredMaterial::calcStaticHash(uint64_t a1, void *a2)
{
  return OZLayeredMaterial::calcStaticHash(a1 - 16, a2);
}

uint64_t OZLayeredMaterial::calcHashForState(uint64_t a1, PCSerializerWriteStream *a2, CMTime *a3)
{
  CMTime v7 = *a3;
  uint64_t v4 = (OZMaterialLayerBase *)OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 152), a2, &v7);
  float v5 = OZMaterialLayerBase::calcTextureScale(v4);
  return (*(uint64_t (**)(PCSerializerWriteStream *, float))(*(void *)a2 + 80))(a2, v5);
}

uint64_t non-virtual thunk to'OZLayeredMaterial::calcHashForState(uint64_t a1, PCSerializerWriteStream *a2, CMTime *a3)
{
  return OZLayeredMaterial::calcHashForState(a1 - 16, a2, a3);
}

OZFactories *OZLayeredMaterial::markFactoriesForSerialization(OZLayeredMaterial *this, PCSerializerWriteStream *a2, int a3)
{
  OZMaterialBase::markFactoriesForSerialization((OZFactory **)this, a2);

  return OZMaterialLayersFolder::markFactoriesForSerialization((OZChannelFolder *)((char *)this + 1312), a2, a3);
}

OZFactories *non-virtual thunk to'OZLayeredMaterial::markFactoriesForSerialization(OZLayeredMaterial *this, PCSerializerWriteStream *a2, int a3)
{
  OZMaterialBase::markFactoriesForSerialization((OZFactory **)this - 6, a2);

  return OZMaterialLayersFolder::markFactoriesForSerialization((OZChannelFolder *)((char *)this + 1264), a2, a3);
}

uint64_t OZLayeredMaterial::shouldRenumberChannel(OZLayeredMaterial *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t non-virtual thunk to'OZLayeredMaterial::shouldRenumberChannel(OZLayeredMaterial *this, OZChannelBase *a2)
{
  return 0;
}

void OZLayeredMaterial::allowDrag(OZLayeredMaterial *this, OZFactoryBase *lpsrc, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6)
{
  *a5 = 0;
  if (!a3 {
    || a3 == (OZChannelBase *)lpsrc
  }
    || *a6 == 1
  {
    OZMaterialBase::allowDrag(this, lpsrc, a3, a4, a5, a6);
  }
  else
  {
    *a5 = 2;
  }
}

void non-virtual thunk to'OZLayeredMaterial::allowDrag(OZLayeredMaterial *this, OZFactoryBase *a2, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6)
{
}

uint64_t OZLayeredMaterial::performDragOperation(OZLayeredMaterial *this, OZFactoryBase *lpsrc, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const CMTime *a8)
{
  if (lpsrc)
  {
    if (!a3) {
      goto LABEL_9;
    }
  }
  else
  {
    __n128 v16 = 0;
    if (!a3) {
      goto LABEL_9;
    }
  }
  if (!v16 || (uint64_t v18 = v17) == 0)
  {
LABEL_9:
    return OZMaterialBase::performDragOperation(this, lpsrc, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"WARNING: OZLayeredMaterial::performDragOperation: performing layer drag operation on a single material ", 103);
  uint64_t Name = (PCString *)OZObjectManipulator::getName((OZLayeredMaterial *)((char *)this + 16));
  CStr = PCString::createCStr(Name);
  size_t v22 = strlen(CStr);
  uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)CStr, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)". Manipulation of Material Layers should be done by TXTextLayout so it's performed across all style runs. Please check that the UI action that triggered this console spew meant to modify this Material's Layers.\n", 211);
  if ((*(uint64_t (**)(OZLayeredMaterial *))(*(void *)this + 96))(this)) {
    uint64_t v24 = (*(uint64_t (**)(OZLayeredMaterial *))(*(void *)this + 96))(this);
  }
  else {
    uint64_t v24 = *((void *)OZApplication::getCurrentDoc((OZApplication *)theApp) + 3);
  }
  uint64_t v26 = *(void *)(v24 + 1584);
  PCURL::PCURL((PCURL *)&v29, @"Undo Material Change");
  OZDocument::startCaptureModifiedChannels(v26, &v29);
  PCString::~PCString(&v29);
  int v27 = (OZChannelFolder *)((char *)this + 1312);
  OZChannelFolder::removeDescendant(v27, v16);
  if (a5 == 2)
  {
    OZChannelFolder::insertDescendantBefore(v27, v18, v16);
  }
  else if (a5 == 3)
  {
    OZChannelFolder::insertDescendantAfter(v27, v18, v16);
  }
  OZDocument::endCaptureModifiedChannels(*(OZChannelBase **)(v24 + 1584), v28);
  OZDocument::postNotification(*(OZDocument **)(v24 + 1584), 524300);
  return 1;
}

void sub_1B7BC5CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZLayeredMaterial::performDragOperation(OZLayeredMaterial *this, OZFactoryBase *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const CMTime *a8)
{
  return OZLayeredMaterial::performDragOperation((OZLayeredMaterial *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OZLayeredMaterial::getSourceOperationMask(OZLayeredMaterial *this, OZChannelBase *a2, int a3)
{
  if (a2
  {
    if (a3) {
      return 2;
    }
    else {
      return 1;
    }
  }
  else if ((OZChannelBase *)((char *)this + 1440) == a2)
  {
    return 0;
  }
  else
  {
    return OZObjectManipulator::getSourceOperationMask((OZLayeredMaterial *)((char *)this + 16), a2, a3);
  }
}

uint64_t non-virtual thunk to'OZLayeredMaterial::getSourceOperationMask(OZLayeredMaterial *this, OZChannelBase *a2, int a3)
{
  return OZLayeredMaterial::getSourceOperationMask((OZLayeredMaterial *)((char *)this - 16), a2, a3);
}

char *OZLayeredMaterial::moveMaterialLayer(OZLayeredMaterial *this, unsigned int a2, unsigned int a3, int a4)
{
  float v5 = (uint64_t *)*((void *)this + 178);
  uint64_t v6 = *v5;
  unint64_t v7 = (v5[1] - *v5) >> 3;
  if (v7 <= a2 || v7 <= a3) {
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v9 = (OZChannelFolder *)((char *)this + 1312);
  uint64_t v10 = *(OZChannelBase **)(v6 + 8 * a2);
  uint64_t v11 = *(const OZChannelBase **)(v6 + 8 * a3);
  uint64_t result = (char *)OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 1312), v10);
  if (a4 == 2)
  {
    return OZChannelFolder::insertDescendantBefore(v9, v11, v10);
  }
  else if (a4 == 3)
  {
    return OZChannelFolder::insertDescendantAfter(v9, v11, v10);
  }
  return result;
}

uint64_t OZMaterialBase::getInstanceID(OZMaterialBase *this)
{
  return *((unsigned int *)this + 44);
}

uint64_t OZMaterialBase::facetAssignmentChannel(OZMaterialBase *this)
{
  return (uint64_t)this + 568;
}

uint64_t OZMaterialBase::presetChannel(OZMaterialBase *this)
{
  return (uint64_t)this + 416;
}

uint64_t OZMaterialBase::wrapAroundChannel(OZMaterialBase *this)
{
  return (uint64_t)this + 872;
}

uint64_t OZLayeredMaterial::setLoadingMetalGradient(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1305) = a2;
  return this;
}

uint64_t OZLayeredMaterial::isLoadingMetalGradient(OZLayeredMaterial *this)
{
  return *((unsigned __int8 *)this + 1305);
}

int64x2_t OZMaterialBase::getBounds(uint64_t a1, int64x2_t *a2)
{
  int64x2_t result = vdupq_n_s64(0xC044000000000000);
  *a2 = result;
  a2[1] = vdupq_n_s64(0x4054000000000000uLL);
  return result;
}

uint64_t OZImageNode::getImageBoundsWithEffects(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

void std::__call_once_param<std::tuple<OZMaterialLayersFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7BC5F50(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZMaterialLayersFolder_Factory::OZMaterialLayersFolder_Factory(OZMaterialLayersFolder_Factory *this)
{
  long long v3 = xmmword_1B8378BD0;
  long long v4 = xmmword_1B837FFC0;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *uint64_t v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1139778;
  *((void *)this + 16) = &unk_1F1139848;
}

void sub_1B7BC6020(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZMaterialLayersFolder_Factory::create(OZMaterialLayersFolder_Factory *this, const PCString *a2)
{
}

void sub_1B7BC6094(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void OZMaterialLayersFolder_Factory::createCopy(OZMaterialLayersFolder_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7BC614C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void OZMaterialLayersFolder_Factory::createChannelCopy(OZMaterialLayersFolder_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7BC6204(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform(OZChannelMaterialMapTransform *this)
{
  *(void *)this = &unk_1F1146E58;
  *((void *)this + 2) = &unk_1F1147138;
  OZChannelRotation3D::~OZChannelRotation3D((OZChannelMaterialMapTransform *)((char *)this + 3040));
  OZChannelMaterialMapScale::~OZChannelMaterialMapScale((OZChannelMaterialMapTransform *)((char *)this + 1856));
  OZChannelPosition::~OZChannelPosition((OZChannelMaterialMapTransform *)((char *)this + 1152));
  OZChannelEnum::~OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 896));
  OZChannelEnum::~OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 640));
  OZChannelEnum::~OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 384));
  OZChannelEnum::~OZChannelEnum((OZChannelMaterialMapTransform *)((char *)this + 128));

  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)this);
}

{
  uint64_t vars8;

  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelMaterialMapScale::~OZChannelMaterialMapScale(OZChannelMaterialMapScale *this)
{
  *(void *)this = &unk_1F1152C00;
  *((void *)this + 2) = &unk_1F1152F58;
  OZChannel2D::~OZChannel2D((OZChannelMaterialMapScale *)((char *)this + 744));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 592));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 440));

  OZChannel2D::~OZChannel2D(this);
}

{
  uint64_t vars8;

  OZChannelMaterialMapScale::~OZChannelMaterialMapScale(this);

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZMaterialSubstanceLayer_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7BC63A4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZMaterialSubstanceLayer_Factory::OZMaterialSubstanceLayer_Factory(OZMaterialSubstanceLayer_Factory *this)
{
  long long v3 = xmmword_1B7E77A70;
  long long v4 = xmmword_1B837FFD0;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *uint64_t v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F11398A0;
  *((void *)this + 16) = &unk_1F1139970;
}

void sub_1B7BC6474(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZMaterialSubstanceLayer_Factory::create(OZMaterialSubstanceLayer_Factory *this, const PCString *a2)
{
}

void sub_1B7BC64E8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40EB35C6EBLL);
  _Unwind_Resume(a1);
}

void OZMaterialSubstanceLayer_Factory::createCopy(OZMaterialSubstanceLayer_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7BC65A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40EB35C6EBLL);
  _Unwind_Resume(a1);
}

void OZMaterialSubstanceLayer_Factory::createChannelCopy(OZMaterialSubstanceLayer_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7BC6658(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40EB35C6EBLL);
  _Unwind_Resume(a1);
}

uint64_t OZMaterialLayerBase::LayeredMaterialInfo::LayeredMaterialInfo(uint64_t a1, const PCSharedCount *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, long long *a12, char a13, int a14, uint64_t a15)
{
  *(PCSharedCount *)a1 = (PCSharedCount)a2->var0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 8), a2 + 1);
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(unsigned char *)(a1 + 32) = a5;
  *(double *)(a1 + 40) = a9;
  *(void *)(a1 + 48) = a6;
  *(void *)(a1 + 56) = a7;
  *(void *)(a1 + 64) = a8;
  long long v25 = *a12;
  *(_OWORD *)(a1 + 88) = a12[1];
  *(_OWORD *)(a1 + 72) = v25;
  *(double *)(a1 + 104) = a10;
  *(double *)(a1 + 112) = a11;
  *(unsigned char *)(a1 + 120) = a13;
  *(float *)(a1 + 124) = OZMaterialLayerBase::calcTextureScale(v26);
  *(void *)(a1 + 128) = a15;
  *(_DWORD *)(a1 + 136) = a14;
  return a1;
}

void sub_1B7BC6750(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(a1, a2[1]);
    long long v4 = (std::__shared_weak_count *)a2[7];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

void OZTransformNode::OZTransformNode(OZTransformNode *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSceneNode::OZSceneNode((OZSceneNode *)this, a2, a3, a4);
  void *v5 = &unk_1F11399C8;
  v5[2] = &unk_1F1139F78;
  v5[6] = &unk_1F113A1D0;
  PCURL::PCURL((PCURL *)v9, @"Channel Motion");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1088), v9, (OZChannelFolder *)((char *)this + 320), 0x64u, 0, 0);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, @"Channel Position");
  OZChannelPosition3D::OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 1216), v9, (OZChannelFolder *)((char *)this + 1088), 0x65u, 0, 3u);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, @"Channel Rotation");
  OZChannelRotation3D::OZChannelRotation3D((OZChannelRotation3D *)((char *)this + 2104), v9, (OZChannelFolder *)((char *)this + 1088), 0x6Du, 0, 4u, 0, 0);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, @"Channel Velocity");
  OZChannelPosition3D::OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 2960), v9, (OZChannelFolder *)((char *)this + 1088), 0x67u, 0x10008u, 3u);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, @"Channel Rotational Velocity");
  OZChannel3D::OZChannel3D((OZChannel3D *)((char *)this + 3848), v9, (OZChannelFolder *)((char *)this + 1088), 0x6Eu, 0x10008u, 3u, 0, 0);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, @"Channel Scale");
  OZChannelScale3D::OZChannelScale3D((OZChannelScale3D *)((char *)this + 4440), 1.0, 1.0, 1.0, v9, (OZChannelFolder *)((char *)this + 1088), 0x69u, 0);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, @"Channel Shear");
  OZChannelShear::OZChannelShear((OZChannelShear *)((char *)this + 5032), v9, (OZChannelFolder *)((char *)this + 1088), 0x6Au, 0, 2u);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, @"Channel Anchor Point");
  OZChannelPosition3D::OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 5472), v9, (OZChannelFolder *)((char *)this + 1088), 0x6Bu, 0, 3u);
  PCString::~PCString(v9);
  PCURL::PCURL((PCURL *)v9, @"Channel Rotation");
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 6376), v9, (OZChannelFolder *)((char *)this + 1088), 0x66u, 2, 0, 0);
  PCString::~PCString(v9);
  *((void *)this + 795) = 0;
  (*(void (**)(char *, uint64_t))(*((void *)this + 169) + 656))((char *)this + 1352, 4);
  (*(void (**)(char *, uint64_t))(*((void *)this + 188) + 656))((char *)this + 1504, 4);
  (*(void (**)(char *, uint64_t))(*((void *)this + 169) + 480))((char *)this + 1352, 1);
  (*(void (**)(char *, uint64_t))(*((void *)this + 188) + 480))((char *)this + 1504, 1);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2960), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 2960));
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3848), 2, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 3848));
  *((_DWORD *)this + 1592) = 0;
  *(_OWORD *)&v9[0].int64_t var0 = xmmword_1B837FC70;
  Behavior = (const void *)OZApplication::createBehavior(theApp, (unsigned int *)v9);
  if (Behavior) {
  else
  }
    unint64_t v7 = 0;
  unsigned int v8 = OZSimulationBehavior::_MTF_IDGenerator--;
  OZChannelBase::setID((OZChannelBase *)(v7 + 56), v8);
  (*(void (**)(OZTransformNode *, char *, void))(*(void *)this + 360))(this, v7, 0);
}

void sub_1B7BC6CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelScale3D *a10, OZChannelRotation3D *a11, OZChannelPosition3D *a12, PCString a13)
{
  OZChannel::~OZChannel(v19);
  OZChannelPosition3D::~OZChannelPosition3D(v18);
  OZChannelShear::~OZChannelShear(v17);
  OZChannelScale3D::~OZChannelScale3D(a10);
  OZChannel3D::~OZChannel3D(v16);
  OZChannelPosition3D::~OZChannelPosition3D(v15);
  OZChannelRotation3D::~OZChannelRotation3D(a11);
  OZChannelPosition3D::~OZChannelPosition3D(a12);
  OZChannelFolder::~OZChannelFolder(v14);
  OZSceneNode::~OZSceneNode(v13);
  _Unwind_Resume(a1);
}

void OZTransformNode::OZTransformNode(OZTransformNode *this, const OZTransformNode *a2, char a3)
{
  OZSceneNode::OZSceneNode((OZSceneNode *)this, (const OZSceneNode *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F11399C8;
  *(void *)(v5 + 16) = &unk_1F1139F78;
  *(void *)(v5 + 48) = &unk_1F113A1D0;
  uint64_t v6 = (OZChannelFolder *)(v5 + 1088);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 1088), (const OZChannelFolder *)((char *)a2 + 1088), (OZChannelFolder *)(v5 + 320));
  OZChannelPosition3D::OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 1216), (const OZChannelPosition3D *)((char *)a2 + 1216), v6);
  OZChannelRotation3D::OZChannelRotation3D((OZChannelRotation3D *)((char *)this + 2104), (const OZChannelRotation3D *)((char *)a2 + 2104), v6);
  OZChannelPosition3D::OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 2960), (const OZChannelPosition3D *)((char *)a2 + 2960), v6);
  OZChannel3D::OZChannel3D((OZChannel3D *)((char *)this + 3848), (const OZChannel3D *)((char *)a2 + 3848), v6);
  OZChannelScale3D::OZChannelScale3D((OZChannelScale3D *)((char *)this + 4440), (const OZChannelScale3D *)((char *)a2 + 4440), v6);
  OZChannelShear::OZChannelShear((OZChannelShear *)((char *)this + 5032), (const OZChannelShear *)((char *)a2 + 5032), v6);
  OZChannelPosition3D::OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 5472), (const OZChannelPosition3D *)((char *)a2 + 5472), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 6376), (const OZChannelBase *)((char *)a2 + 6376), v6);
  *((void *)this + 797) = &unk_1F11010C0;
  *((void *)this + 799) = &unk_1F1101420;
  *((void *)this + 795) = *((void *)a2 + 795);
  *((_DWORD *)this + 1592) = *((_DWORD *)a2 + 1592);
}

void sub_1B7BC6FDC(_Unwind_Exception *a1)
{
  OZChannelPosition3D::~OZChannelPosition3D(v9);
  OZChannelShear::~OZChannelShear(v8);
  OZChannelScale3D::~OZChannelScale3D(v7);
  OZChannel3D::~OZChannel3D(v6);
  OZChannelPosition3D::~OZChannelPosition3D(v5);
  OZChannelRotation3D::~OZChannelRotation3D(v4);
  OZChannelPosition3D::~OZChannelPosition3D(v3);
  OZChannelFolder::~OZChannelFolder(v2);
  OZSceneNode::~OZSceneNode(v1);
  _Unwind_Resume(a1);
}

void sub_1B7BC7050()
{
}

void sub_1B7BC7058()
{
}

void sub_1B7BC7060()
{
}

void sub_1B7BC7068()
{
}

void OZTransformNode::~OZTransformNode(OZTransformNode *this)
{
  *(void *)this = &unk_1F11399C8;
  *((void *)this + 2) = &unk_1F1139F78;
  *((void *)this + 6) = &unk_1F113A1D0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6376));
  OZChannelPosition3D::~OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 5472));
  OZChannelShear::~OZChannelShear((OZChannelShear *)((char *)this + 5032));
  *((void *)this + 555) = &unk_1F1110838;
  *((void *)this + 557) = &unk_1F1110B90;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 4880));
  OZChannel2D::~OZChannel2D((OZChannel2D *)((char *)this + 4440));
  *((void *)this + 48OZDocument::~OZDocument(this - 1) = &unk_1F1106258;
  *((void *)this + 483) = &unk_1F11065B8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 4288));
  OZChannel2D::~OZChannel2D((OZChannel2D *)((char *)this + 3848));
  OZChannelPosition3D::~OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 2960));
  OZChannelRotation3D::~OZChannelRotation3D((OZChannelRotation3D *)((char *)this + 2104));
  OZChannelPosition3D::~OZChannelPosition3D((OZChannelPosition3D *)((char *)this + 1216));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1088));

  OZSceneNode::~OZSceneNode((OZSceneNode *)this);
}

{
  uint64_t vars8;

  OZTransformNode::~OZTransformNode(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZTransformNode::~OZTransformNode(OZTransformNode *this)
{
}

{
  OZTransformNode::~OZTransformNode((OZTransformNode *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZTransformNode::~OZTransformNode((OZTransformNode *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZTransformNode::~OZTransformNode((OZTransformNode *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZTransformNode::operator=(uint64_t a1, const void *a2)
{
  OZSceneNode::operator=(a1, (uint64_t)a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChannelFolder::operator=(a1 + 1088);
  OZChannelPosition::operator=(a1 + 1216, (uint64_t)(v5 + 304));
  OZChannelPosition::operator=(a1 + 2104, (uint64_t)(v5 + 526));
  OZChannelPosition::operator=(a1 + 2960, (uint64_t)(v5 + 740));
  OZChannelFolder::operator=(a1 + 3848);
  OZChannelBase::operator=(a1 + 3984, (uint64_t)(v5 + 996));
  OZChannelBase::operator=(a1 + 4136, (uint64_t)(v5 + 1034));
  OZChannelBase::operator=(a1 + 4288, (uint64_t)(v5 + 1072));
  OZChannelFolder::operator=(a1 + 4440);
  OZChannelBase::operator=(a1 + 4576, (uint64_t)(v5 + 1144));
  OZChannelBase::operator=(a1 + 4728, (uint64_t)(v5 + 1182));
  OZChannelBase::operator=(a1 + 4880, (uint64_t)(v5 + 1220));
  OZChannelFolder::operator=(a1 + 5032);
  OZChannelBase::operator=(a1 + 5168, (uint64_t)(v5 + 1292));
  OZChannelBase::operator=(a1 + 5320, (uint64_t)(v5 + 1330));
  uint64_t result = OZChannelPosition::operator=(a1 + 5472, (uint64_t)(v5 + 1368));
  *(_DWORD *)(a1 + 6368) = v5[1592];
  return result;
}

double OZTransformNode::copyAtTime(OZTransformNode *this, const OZSceneNode *lpsrc, CMTime *a3)
{
  if (lpsrc) {
  else
  }
    uint64_t v5 = 0;
  OZChannelBase::reset((OZChannelBase *)((char *)this + 1216), 0);
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 1352), a3, 0.0);
  double v7 = v6;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 1504), a3, 0.0);
  double v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 1952), a3, 0.0);
  uint64_t v10 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannelPosition3D::setPosition((OZChannelPosition3D *)((char *)this + 1216), MEMORY[0x1E4F1FA48], v7, v9, v11);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 2104), 0);
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 2240), a3, 0.0);
  (*(void (**)(void))(*((void *)this + 280) + 712))();
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 2392), a3, 0.0);
  (*(void (**)(void))(*((void *)this + 299) + 712))();
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 2544), a3, 0.0);
  (*(void (**)(void))(*((void *)this + 318) + 712))();
  OZChannelBase::reset((OZChannelBase *)((char *)this + 2960), 0);
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 3096), a3, 0.0);
  double v13 = v12;
  double v25 = v12;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 3248), a3, 0.0);
  double v15 = v14;
  double v24 = v14;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 3696), a3, 0.0);
  double v23 = v16;
  OZChannelPosition3D::setPosition((OZChannelPosition3D *)((char *)this + 2960), v10, v13, v15, v16);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 3848), 0);
  OZChannelScale3D::getValue((OZChannelScale3D *)(v5 + 3848), a3, &v25, &v24, &v23, 0.0);
  OZChannel3D::setValue((OZChannel3D *)((char *)this + 3848), a3, v25, v24, v23);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 4440), 0);
  OZChannelScale3D::getValue((OZChannelScale3D *)(v5 + 4440), a3, &v25, &v24, &v23, 0.0);
  OZChannel3D::setValue((OZChannel3D *)((char *)this + 4440), a3, v25, v24, v23);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 5032), 0);
  OZChannel::getValueAsDouble((OZChannel *)v5 + 34, a3, 0.0);
  double v25 = v17;
  OZChannel::getValueAsDouble((OZChannel *)v5 + 35, a3, 0.0);
  double v24 = v18;
  OZChannel::setValue((OZChannel *)this + 34, a3, v25, 0);
  OZChannel::setValue((OZChannel *)this + 35, a3, v24, 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 5472), 0);
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 5608), a3, 0.0);
  double v25 = v19;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 5760), a3, 0.0);
  double v24 = v20;
  OZChannel::getValueAsDouble((OZChannel *)(v5 + 6208), a3, 0.0);
  double v23 = v21;
  OZChannelPosition3D::setPosition((OZChannelPosition3D *)((char *)this + 5472), v10, v25, v24, v21);
  double result = *((double *)v5 + 795);
  *((double *)this + 795) = result;
  return result;
}

uint64_t OZTransformNode::writeBody(OZTransformNode *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZTransformNodeScope);
  double v10 = *((double *)this + 795);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 300);
  (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v10);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v11 = *((unsigned int *)this + 1592);
  if (v11)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 301);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v11);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);

  return OZSceneNode::writeBody((unsigned int **)this, a2, a3, a4, a5);
}

uint64_t non-virtual thunk to'OZTransformNode::writeBody(OZTransformNode *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZTransformNode::writeBody((OZTransformNode *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZTransformNode::parseBegin(OZTransformNode *this, PCSerializerReadStream *a2)
{
  *((_DWORD *)this + 1592) = 0;
  OZSceneNode::parseBegin((OZSceneNode *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZTransformNodeScope);
  return 1;
}

uint64_t non-virtual thunk to'OZTransformNode::parseBegin(OZTransformNode *this, PCSerializerReadStream *a2)
{
  *((_DWORD *)this + 1580) = 0;
  OZSceneNode::parseBegin((OZSceneNode *)((char *)this - 48), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZTransformNodeScope);
  return 1;
}

uint64_t OZTransformNode::parseEnd(OZTransformNode *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 2u) {
    OZChannelBase::operator=((uint64_t)this + 2544, (uint64_t)this + 6376);
  }
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 6376), 2, 0);
  OZSceneNode::parseEnd((OZSceneNode *)this, a2);
  return 1;
}

uint64_t non-virtual thunk to'OZTransformNode::parseEnd(OZTransformNode *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZTransformNode::parseElement(OZTransformNode *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  double v9 = 0.0;
  int v8 = 0;
  OZSceneNode::parseElement((PCSerializer **)this, a2, a3);
  int v5 = *((_DWORD *)a3 + 2);
  if (v5 == 301)
  {
    if ((*(unsigned int (**)(PCStreamElement *, int *))(*(void *)a3 + 32))(a3, &v8)) {
      *((_DWORD *)this + 1592) = v8;
    }
  }
  else if (v5 == 300)
  {
    if ((*(uint64_t (**)(PCStreamElement *, double *))(*(void *)a3 + 64))(a3, &v9))
    {
      double v6 = v9;
      *((double *)this + 795) = v9;
    }
    else
    {
      double v6 = *((double *)this + 795);
    }
    if (v6 == 0.0)
    {
      if ((*(uint64_t (**)(OZTransformNode *))(*(void *)this + 272))(this)) {
        *((void *)this + 795) = *(void *)((*(uint64_t (**)(OZTransformNode *))(*(void *)this + 272))(this)
      }
                                            + 384);
      else {
        *((void *)this + 795) = 0x3FF0000000000000;
      }
    }
  }
  return 1;
}

uint64_t non-virtual thunk to'OZTransformNode::parseElement(OZTransformNode *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

void OZTransformNode::getTranslation(OZTransformNode *this, double *a2, double *a3, const CMTime *a4)
{
  if (a2)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1352), a4, 0.0);
    *(void *)a2 = v8;
  }
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1504), a4, 0.0);
    *(void *)a3 = v9;
  }
}

void OZTransformNode::getTranslation(OZTransformNode *this, double *a2, double *a3, double *a4, const CMTime *a5)
{
  if (a2)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1352), a5, 0.0);
    *(void *)a2 = v10;
  }
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1504), a5, 0.0);
    *(void *)a3 = v11;
  }
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1952), a5, 0.0);
    *(void *)a4 = v12;
  }
}

void OZTransformNode::getTranslation(uint64_t a1, void *a2, CMTime *a3)
{
  if (a2)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 1352), a3, 0.0);
    uint64_t v7 = v6;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 1504), a3, 0.0);
    uint64_t v9 = v8;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 1952), a3, 0.0);
    *a2 = v7;
    a2[1] = v9;
    a2[2] = v10;
  }
}

uint64_t OZTransformNode::setTranslation(OZTransformNode *this, double a2, double a3, const CMTime *a4)
{
  return OZChannelPosition3D::setPosition((OZChannelPosition3D *)((char *)this + 1216), a4, a2, a3, 0.0);
}

uint64_t OZTransformNode::setTranslation(OZTransformNode *this, double a2, double a3, double a4, const CMTime *a5)
{
  return OZChannelPosition3D::setPosition((OZChannelPosition3D *)((char *)this + 1216), a5, a2, a3, a4);
}

uint64_t OZTransformNode::offsetTranslation(OZTransformNode *this, double a2, double a3, const CMTime *a4)
{
  return OZChannelPosition3D::offsetPosition((OZChannelPosition3D *)((char *)this + 1216), a4, a2, a3, 0.0, 1);
}

uint64_t OZTransformNode::offsetTranslation(OZTransformNode *this, double a2, double a3, double a4, const CMTime *a5, char a6)
{
  return OZChannelPosition3D::offsetPosition((OZChannelPosition3D *)((char *)this + 1216), a5, a2, a3, a4, a6);
}

void OZTransformNode::getScale(OZTransformNode *this, double *a2, double *a3, double *a4, const CMTime *a5, int a6)
{
  if (*(OZTransformNode **)&a5[2].timescale == this)
  {
    if (a2) {
      *a2 = 1.0;
    }
    if (a3) {
      *a3 = 1.0;
    }
    if (a4) {
      *a4 = 1.0;
    }
  }
  else
  {
    OZChannelScale3D::getValue((OZChannelScale3D *)((char *)this + 4440), a5, a2, a3, a4, 0.0);
    if (a6)
    {
      uint64_t v12 = (const void *)*((void *)this + 120);
      if (v12)
      {
        if (v13)
        {
          double v15 = 0.0;
          double v16 = 0.0;
          double v14 = 0.0;
          (*(void (**)(void *, double *, double *, double *, const CMTime *, uint64_t))(*(void *)v13 + 1312))(v13, &v16, &v15, &v14, a5, 1);
          if (a2) {
            *a2 = v16 * *a2;
          }
          if (a3) {
            *a3 = v15 * *a3;
          }
          if (a4) {
            *a4 = v14 * *a4;
          }
        }
      }
    }
  }
}

uint64_t OZTransformNode::getScale(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1312))(a1, a2, a2 + 8, a2 + 16, a3, a4);
}

uint64_t OZTransformNode::setScale(OZTransformNode *this, double a2, double a3, double a4, const CMTime *a5)
{
  return OZChannel3D::setValue((OZChannel3D *)((char *)this + 4440), a5, a2, a3, a4);
}

void OZTransformNode::getRotation(uint64_t a1, void *a2, CMTime *a3)
{
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 2240), a3, 0.0);
  uint64_t v7 = v6;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 2392), a3, 0.0);
  uint64_t v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 2544), a3, 0.0);
  *a2 = v7;
  a2[1] = v9;
  a2[2] = v10;
}

void OZTransformNode::getRotationX(OZTransformNode *this, double *a2, const CMTime *a3)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2240), a3, 0.0);
  *(void *)a2 = v4;
}

void OZTransformNode::getRotationY(OZTransformNode *this, double *a2, const CMTime *a3)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2392), a3, 0.0);
  *(void *)a2 = v4;
}

void OZTransformNode::getRotationZ(OZTransformNode *this, double *a2, const CMTime *a3)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2544), a3, 0.0);
  *(void *)a2 = v4;
}

uint64_t OZTransformNode::setRotation(OZTransformNode *this, double a2, const CMTime *a3)
{
  return (*(uint64_t (**)(char *, const CMTime *, void, double))(*((void *)this + 318) + 712))((char *)this + 2544, a3, 0, a2);
}

uint64_t OZTransformNode::setRotation(OZTransformNode *this, double a2, double a3, double a4, const CMTime *a5)
{
  (*(void (**)(double))(*((void *)this + 280) + 712))(a2);
  (*(void (**)(double))(*((void *)this + 299) + 712))(a3);
  uint64_t v8 = *(uint64_t (**)(__n128))(*((void *)this + 318) + 712);
  v9.n128_f64[0] = a4;

  return v8(v9);
}

uint64_t OZTransformNode::setRotation(void *a1, uint64_t a2)
{
  (*(void (**)(double))(a1[280] + 712))(*(double *)a2);
  v4.n128_u64[0] = *(void *)(a2 + 8);
  (*(void (**)(__n128))(a1[299] + 712))(v4);
  v5.n128_u64[0] = *(void *)(a2 + 16);
  uint64_t v6 = *(uint64_t (**)(__n128))(a1[318] + 712);

  return v6(v5);
}

void OZTransformNode::getShear(OZTransformNode *this, double *a2, double *a3, const CMTime *a4)
{
  OZChannel::getValueAsDouble((OZChannel *)this + 34, a4, 0.0);
  *(void *)a2 = v8;
  OZChannel::getValueAsDouble((OZChannel *)this + 35, a4, 0.0);
  *(void *)a3 = v9;
}

uint64_t OZTransformNode::setShear(OZTransformNode *this, double a2, double a3, const CMTime *a4)
{
  OZChannel::setValue((OZChannel *)this + 34, a4, a2, 0);

  return OZChannel::setValue((OZChannel *)this + 35, a4, a3, 0);
}

void OZTransformNode::getPivot(OZTransformNode *this, double *a2, double *a3, double *a4, const CMTime *a5)
{
  if (a2)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 5608), a5, 0.0);
    *(void *)a2 = v10;
  }
  if (a3)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 5760), a5, 0.0);
    *(void *)a3 = v11;
  }
  if (a4)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 6208), a5, 0.0);
    *(void *)a4 = v12;
  }
}

void OZTransformNode::getPivot(uint64_t a1, void *a2, CMTime *a3)
{
  if (a2)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 5608), a3, 0.0);
    uint64_t v7 = v6;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 5760), a3, 0.0);
    uint64_t v9 = v8;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 6208), a3, 0.0);
    *a2 = v7;
    a2[1] = v9;
    a2[2] = v10;
  }
}

uint64_t OZTransformNode::setPivot(OZTransformNode *this, double a2, double a3, double a4, const CMTime *a5)
{
  return OZChannelPosition3D::setPosition((OZChannelPosition3D *)((char *)this + 5472), a5, a2, a3, a4);
}

BOOL OZTransformNode::getCommonAncestorTransforms(OZSceneNode *a1, OZSceneNode *a2, const OZRenderState *a3, uint64_t a4, uint64_t a5)
{
  CommonAncestor = OZSceneNode::getCommonAncestor(a1, a2, 1);
  OZRenderState::OZRenderState(&v44, a3);
  v44.var4 = 1;
  uint64_t v43 = 0x3FF0000000000000;
  uint64_t v40 = 0x3FF0000000000000;
  uint64_t v37 = 0x3FF0000000000000;
  uint64_t v34 = 0x3FF0000000000000;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  if (!a4) {
    goto LABEL_7;
  }
  *(void *)(a4 + 120) = 0x3FF0000000000000;
  *(void *)(a4 + 80) = 0x3FF0000000000000;
  *(void *)(a4 + 40) = 0x3FF0000000000000;
  *(void *)a4 = 0x3FF0000000000000;
  *(_OWORD *)(a4 + 8) = 0uLL;
  *(_OWORD *)(a4 + 24) = 0uLL;
  *(_OWORD *)(a4 + 48) = 0uLL;
  *(_OWORD *)(a4 + 64) = 0uLL;
  *(_OWORD *)(a4 + 88) = 0uLL;
  *(_OWORD *)(a4 + 104) = 0uLL;
  if (!a1)
  {
LABEL_7:
    char v13 = 0;
    if (!a5) {
      return (v13 & 1) == 0;
    }
    goto LABEL_23;
  }
  BOOL v33 = 0;
  if (v11)
  {
    uint64_t v12 = v11;
    if (!(*(unsigned int (**)(void *))(*(void *)v11 + 1640))(v11)
      || (*(unsigned int (**)(void *))(*(void *)v12 + 1632))(v12))
    {
      BOOL v33 = 1;
    }
  }
  (*(void (**)(OZSceneNode *, uint64_t *, OZRenderState *))(*(void *)a1 + 1256))(a1, &v34, &v44);
  v14.n128_f64[0] = PCMatrix44Tmpl<double>::leftMult(a4, (double *)&v34);
  for (unint64_t i = (OZSceneNode *)*((void *)a1 + 120); i != CommonAncestor; unint64_t i = (OZSceneNode *)v17[120])
  {
    if (i)
    {
      double v17 = v16;
      if (v16)
      {
        if (v18)
        {
          double v19 = v18;
          if (!(*(unsigned int (**)(void *))(*(void *)v18 + 1640))(v18)
            || (*(unsigned int (**)(void *))(*(void *)v19 + 1632))(v19))
          {
            BOOL v33 = 1;
          }
        }
      }
    }
    else
    {
      double v17 = 0;
    }
    (*(void (**)(void *, uint64_t *, OZRenderState *))(*v17 + 1256))(v17, &v34, &v44);
    v14.n128_f64[0] = PCMatrix44Tmpl<double>::leftMult(a4, (double *)&v34);
  }
  if (CommonAncestor)
  {
    double v20 = *(double *)((*(uint64_t (**)(OZSceneNode *, __n128))(*(void *)a1 + 272))(a1, v14) + 384);
    if (v20 != 1.0)
    {
      float64x2_t v21 = vmulq_n_f64(*(float64x2_t *)a4, v20);
      float64x2_t v22 = vmulq_n_f64(*(float64x2_t *)(a4 + 16), v20);
      *(float64x2_t *)a4 = v21;
      *(float64x2_t *)(a4 + 16) = v22;
    }
  }
  char v13 = v33;
  if (a5)
  {
LABEL_23:
    *(void *)(a5 + 120) = 0x3FF0000000000000;
    *(void *)(a5 + 80) = 0x3FF0000000000000;
    *(void *)(a5 + 40) = 0x3FF0000000000000;
    *(void *)a5 = 0x3FF0000000000000;
    *(_OWORD *)(a5 + 8) = 0u;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 88) = 0u;
    *(_OWORD *)(a5 + 104) = 0u;
    if (a2)
    {
      if (v23)
      {
        double v24 = v23;
        if (!(*(unsigned int (**)(void *))(*(void *)v23 + 1640))(v23)
          || (*(unsigned int (**)(void *))(*(void *)v24 + 1632))(v24))
        {
          char v13 = 1;
        }
      }
    }
    (*(void (**)(OZSceneNode *, uint64_t *, OZRenderState *))(*(void *)a2 + 1264))(a2, &v34, &v44);
    v25.n128_f64[0] = PCMatrix44Tmpl<double>::rightMult(a5, (double *)&v34);
    for (uint64_t j = (OZSceneNode *)*((void *)a2 + 120); j != CommonAncestor; uint64_t j = (OZSceneNode *)v28[120])
    {
      if (j)
      {
        uint64_t v28 = v27;
        if (v27)
        {
          if (v29)
          {
            uint64_t v30 = v29;
            if (!(*(unsigned int (**)(void *))(*(void *)v29 + 1640))(v29)
              || (*(unsigned int (**)(void *))(*(void *)v30 + 1632))(v30))
            {
              char v13 = 1;
            }
          }
        }
      }
      else
      {
        uint64_t v28 = 0;
      }
      (*(void (**)(void *, uint64_t *, OZRenderState *))(*v28 + 1264))(v28, &v34, &v44);
      v25.n128_f64[0] = PCMatrix44Tmpl<double>::rightMult(a5, (double *)&v34);
    }
    if (CommonAncestor)
    {
      double v31 = 1.0 / *(double *)((*(uint64_t (**)(OZSceneNode *, __n128))(*(void *)a1 + 272))(a1, v25) + 384);
      if (v31 != 1.0)
      {
        *(double *)a5 = v31 * *(double *)a5;
        *(double *)(a5 + 32) = v31 * *(double *)(a5 + 32);
        *(double *)(a5 + 64) = v31 * *(double *)(a5 + 64);
        *(double *)(a5 + 96) = v31 * *(double *)(a5 + 96);
      }
    }
  }
  return (v13 & 1) == 0;
}

double OZTransformNode::getParentPixelAspectRatio(OZTransformNode *this, const OZRenderState *a2, __n128 a3)
{
  __n128 v5 = (const void *)*((void *)this + 120);
  if (v5)
  {
    a3.n128_u64[0] = 1.0;
    if (a2->var9) {
      return a3.n128_f64[0];
    }
    if (v6)
    {
      a3.n128_f64[0] = (*(double (**)(__n128))(*(void *)v6 + 1328))(a3);
      goto LABEL_9;
    }
  }
  else
  {
    a3.n128_u64[0] = 1.0;
    if (a2->var9) {
      return a3.n128_f64[0];
    }
  }
  uint64_t v7 = (*(uint64_t (**)(OZTransformNode *, __n128))(*(void *)this + 272))(this, a3);
  if (v7) {
    a3.n128_u64[0] = *(void *)(v7 + 384);
  }
  else {
    a3.n128_f64[0] = (*(double (**)(__n128))(*(void *)this + 1328))(v8);
  }
LABEL_9:
  if (a3.n128_f64[0] == 0.0) {
    a3.n128_u64[0] = 1.0;
  }
  return a3.n128_f64[0];
}

void OZTransformNode::getTransformMatrix(OZTransformNode *this, uint64_t a2, CMTime *a3)
{
  double v50 = 0.0;
  double v51 = 0.0;
  double v48 = 1.0;
  double v49 = 0.0;
  double v46 = 1.0;
  double v47 = 1.0;
  double v44 = 0.0;
  double v45 = 0.0;
  double v43 = 0.0;
  if (*(OZTransformNode **)&a3[2].timescale == this)
  {
    *(void *)(a2 + 120) = 0x3FF0000000000000;
    *(void *)(a2 + 80) = 0x3FF0000000000000;
    *(void *)(a2 + 40) = 0x3FF0000000000000;
    *(void *)a2 = 0x3FF0000000000000;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    if (BYTE1(a3[8].timescale)) {
      return;
    }
    double v21 = (*(double (**)(OZTransformNode *))(*(void *)this + 1328))(this) / *(double *)&a3[1].epoch;
    goto LABEL_63;
  }
  uint64_t v6 = *(void *)&a3[10].timescale;
  if ((v6 & 0x3800) != 0)
  {
    OZTransformNode::getTranslation(this, &v51, &v50, &v49, a3);
    uint64_t v6 = *(void *)&a3[10].timescale;
  }
  if ((v6 & 0x1C0) != 0)
  {
    (*(void (**)(OZTransformNode *, double *, double *, double *, CMTime *, void))(*(void *)this + 1312))(this, &v48, &v47, &v46, a3, 0);
    uint64_t v6 = *(void *)&a3[10].timescale;
  }
  double v7 = 0.0;
  double v8 = 0.0;
  double v9 = 0.0;
  double v10 = 0.0;
  if ((v6 & 0x38) != 0)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2240), a3, 0.0);
    double v8 = v11;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2392), a3, 0.0);
    double v9 = v12;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2544), a3, 0.0);
    double v10 = v13;
    uint64_t v6 = *(void *)&a3[10].timescale;
  }
  double v14 = 0.0;
  if ((v6 & 0x600) != 0)
  {
    OZChannel::getValueAsDouble((OZChannel *)this + 34, a3, 0.0);
    double v7 = v15;
    OZChannel::getValueAsDouble((OZChannel *)this + 35, a3, 0.0);
    double v14 = v16;
    uint64_t v6 = *(void *)&a3[10].timescale;
  }
  if ((v6 & 7) != 0)
  {
    OZTransformNode::getPivot(this, &v45, &v44, &v43, a3);
    uint64_t v6 = *(void *)&a3[10].timescale;
  }
  if ((~(_WORD)v6 & 0x3FFF) == 0) {
    goto LABEL_35;
  }
  if (v6)
  {
    if ((v6 & 2) != 0) {
      goto LABEL_15;
    }
  }
  else
  {
    double v45 = 0.0;
    if ((v6 & 2) != 0)
    {
LABEL_15:
      if ((v6 & 4) != 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  double v44 = 0.0;
  if ((v6 & 4) == 0) {
LABEL_16:
  }
    double v43 = 0.0;
LABEL_17:
  if ((v6 & 8) == 0) {
    double v8 = 0.0;
  }
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  if ((v6 & 0x20) == 0) {
    double v10 = 0.0;
  }
  if ((v6 & 0x40) != 0)
  {
    if ((v6 & 0x80) != 0) {
      goto LABEL_25;
    }
  }
  else
  {
    double v48 = 1.0;
    if ((v6 & 0x80) != 0)
    {
LABEL_25:
      if ((v6 & 0x100) != 0) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
  }
  double v47 = 1.0;
  if ((v6 & 0x100) == 0) {
LABEL_26:
  }
    double v46 = 1.0;
LABEL_27:
  if ((v6 & 0x200) == 0) {
    double v7 = 0.0;
  }
  if ((v6 & 0x400) == 0) {
    double v14 = 0.0;
  }
  if ((v6 & 0x800) != 0)
  {
    if ((v6 & 0x1000) != 0) {
      goto LABEL_33;
    }
LABEL_73:
    double v50 = 0.0;
    if ((v6 & 0x2000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  double v51 = 0.0;
  if ((v6 & 0x1000) == 0) {
    goto LABEL_73;
  }
LABEL_33:
  if ((v6 & 0x2000) == 0) {
LABEL_34:
  }
    double v49 = 0.0;
LABEL_35:
  v17.n128_f64[0] = (*(double (**)(OZTransformNode *))(*(void *)this + 1328))(this);
  double v18 = v17.n128_f64[0];
  double v19 = (const void *)*((void *)this + 120);
  if (v19) {
  else
  }
    double v20 = 0;
  double v22 = 1.0;
  if (!BYTE1(a3[8].timescale))
  {
    double ParentPixelAspectRatio = OZTransformNode::getParentPixelAspectRatio(this, (const OZRenderState *)a3, v17);
    double v22 = ParentPixelAspectRatio;
    if (v18 != 0.0) {
      double ParentPixelAspectRatio = v18;
    }
    double v48 = v48 * (ParentPixelAspectRatio / v22);
  }
  double v24 = v51;
  if (v51 > -0.0000001 && v51 < 0.0000001)
  {
    double v51 = 0.0;
    double v24 = 0.0;
  }
  double v25 = v50;
  if (v50 > -0.0000001 && v50 < 0.0000001)
  {
    double v50 = 0.0;
    double v25 = 0.0;
  }
  double v26 = v49;
  if (v49 > -0.0000001 && v49 < 0.0000001)
  {
    double v49 = 0.0;
    double v26 = 0.0;
  }
  PCMatrix44Tmpl<double>::setTransformation(a2, 0, 4, v24, v25, v26, v8, v9, v10, v48, v47, v46, v7, v14, v45, v44, v43, v22);
  if (BYTE4(a3[9].value))
  {
    uint64_t v42 = 0x3FF0000000000000;
    uint64_t v39 = 0x3FF0000000000000;
    uint64_t v36 = 0x3FF0000000000000;
    uint64_t v33 = 0x3FF0000000000000;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    (*(void (**)(OZTransformNode *, uint64_t *, CMTime *))(*(void *)this + 1280))(this, &v33, a3);
    PCMatrix44Tmpl<double>::rightMult(a2, (double *)&v33);
  }
  if (v20)
  {
    if (!LODWORD(a3[2].value))
    {
      uint64_t v42 = 0x3FF0000000000000;
      uint64_t v39 = 0x3FF0000000000000;
      uint64_t v36 = 0x3FF0000000000000;
      uint64_t v33 = 0x3FF0000000000000;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      (*(void (**)(void *, uint64_t *, CMTime *))(*(void *)v20 + 1256))(v20, &v33, a3);
      PCMatrix44Tmpl<double>::operator*((uint64_t)&v33, (long long *)a2, (uint64_t)v32);
      if (v32 != (unsigned char *)a2)
      {
        for (uint64_t i = 0; i != 128; i += 32)
        {
          uint64_t v28 = (_OWORD *)(a2 + i);
          long long v29 = *(_OWORD *)&v32[i + 16];
          _OWORD *v28 = *(_OWORD *)&v32[i];
          v28[1] = v29;
        }
      }
    }
    return;
  }
  if (BYTE1(a3[8].timescale)) {
    return;
  }
  double v21 = v22 / *(double *)&a3[1].epoch;
LABEL_63:
  if (v21 != 1.0)
  {
    float64x2_t v30 = vmulq_n_f64(*(float64x2_t *)a2, v21);
    float64x2_t v31 = vmulq_n_f64(*(float64x2_t *)(a2 + 16), v21);
    *(float64x2_t *)a2 = v30;
    *(float64x2_t *)(a2 + 16) = v31;
  }
}

void OZTransformNode::getInvTransformMatrix(OZTransformNode *this, uint64_t a2, CMTime *a3)
{
  if (*(OZTransformNode **)&a3[2].timescale == this)
  {
    *(void *)(a2 + 120) = 0x3FF0000000000000;
    *(void *)(a2 + 80) = 0x3FF0000000000000;
    *(void *)(a2 + 40) = 0x3FF0000000000000;
    *(void *)a2 = 0x3FF0000000000000;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    if (BYTE1(a3[8].timescale)) {
      return;
    }
    double v24 = *(double *)&a3[1].epoch;
    double v25 = v24 / (*(double (**)(OZTransformNode *))(*(void *)this + 1328))(this);
    goto LABEL_60;
  }
  double v49 = 0.0;
  double v50 = 0.0;
  double v47 = 0.0;
  double v48 = 0.0;
  double v45 = 0.0;
  double v46 = 0.0;
  double v43 = 0.0;
  double v44 = 0.0;
  double v42 = 0.0;
  OZTransformNode::getTranslation(this, &v50, &v49, &v48, a3);
  (*(void (**)(OZTransformNode *, double *, double *, double *, CMTime *, void))(*(void *)this + 1312))(this, &v47, &v46, &v45, a3, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2240), a3, 0.0);
  double v7 = v6;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2392), a3, 0.0);
  double v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 2544), a3, 0.0);
  double v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)this + 34, a3, 0.0);
  double v13 = v12;
  OZChannel::getValueAsDouble((OZChannel *)this + 35, a3, 0.0);
  double v15 = v14;
  OZTransformNode::getPivot(this, &v44, &v43, &v42, a3);
  uint64_t v16 = *(void *)&a3[10].timescale;
  if ((~a3[10].timescale & 0x3FFFLL) == 0) {
    goto LABEL_25;
  }
  if (v16)
  {
    if ((v16 & 2) != 0) {
      goto LABEL_5;
    }
  }
  else
  {
    double v44 = 0.0;
    if ((v16 & 2) != 0)
    {
LABEL_5:
      if ((v16 & 4) != 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  double v43 = 0.0;
  if ((v16 & 4) == 0) {
LABEL_6:
  }
    double v42 = 0.0;
LABEL_7:
  if ((v16 & 8) == 0) {
    double v7 = 0.0;
  }
  if ((v16 & 0x10) == 0) {
    double v9 = 0.0;
  }
  if ((v16 & 0x20) == 0) {
    double v11 = 0.0;
  }
  if ((v16 & 0x40) != 0)
  {
    if ((v16 & 0x80) != 0) {
      goto LABEL_15;
    }
LABEL_37:
    double v46 = 1.0;
    if ((v16 & 0x100) != 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  double v47 = 1.0;
  if ((v16 & 0x80) == 0) {
    goto LABEL_37;
  }
LABEL_15:
  if ((v16 & 0x100) == 0) {
LABEL_16:
  }
    double v45 = 1.0;
LABEL_17:
  if ((v16 & 0x200) == 0) {
    double v13 = 0.0;
  }
  if ((v16 & 0x400) == 0) {
    double v15 = 0.0;
  }
  if ((v16 & 0x800) != 0)
  {
    if ((v16 & 0x1000) != 0) {
      goto LABEL_23;
    }
  }
  else
  {
    double v50 = 0.0;
    if ((v16 & 0x1000) != 0)
    {
LABEL_23:
      if ((v16 & 0x2000) != 0) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
  }
  double v49 = 0.0;
  if ((v16 & 0x2000) == 0) {
LABEL_24:
  }
    double v48 = 0.0;
LABEL_25:
  double v17 = (*(double (**)(OZTransformNode *))(*(void *)this + 1328))(this);
  double v18 = (const void *)*((void *)this + 120);
  if (v18)
  {
    double v20 = v19;
    double v21 = (char *)&a3[8].timescale + 1;
    double v22 = 1.0;
    if (!BYTE1(a3[8].timescale))
    {
      if (v19)
      {
        (*(void (**)(void *))(*(void *)v19 + 1328))(v19);
        goto LABEL_45;
      }
LABEL_42:
      uint64_t v26 = (*(uint64_t (**)(OZTransformNode *))(*(void *)this + 272))(this);
      double v20 = 0;
      if (v26) {
        double v23 = *(double *)(v26 + 384);
      }
      else {
        double v23 = v17;
      }
LABEL_45:
      if (v23 == 0.0) {
        double v22 = 1.0;
      }
      else {
        double v22 = v23;
      }
      if (v17 == 0.0) {
        double v27 = v22;
      }
      else {
        double v27 = v17;
      }
      double v47 = v47 * (v27 / v22);
    }
  }
  else
  {
    double v21 = (char *)&a3[8].timescale + 1;
    if (!BYTE1(a3[8].timescale)) {
      goto LABEL_42;
    }
    double v20 = 0;
    double v22 = 1.0;
  }
  PCMatrix44Tmpl<double>::setTransformation(a2, 0, 4, v50, v49, v48, v7, v9, v11, v47, v46, v45, v13, v15, v44, v43, v42, v22);
  PCMatrix44Tmpl<double>::invert((double *)a2, (double *)a2, 0.0);
  if (v20)
  {
    if (!LODWORD(a3[2].value))
    {
      uint64_t v41 = 0x3FF0000000000000;
      uint64_t v38 = 0x3FF0000000000000;
      uint64_t v35 = 0x3FF0000000000000;
      uint64_t v32 = 0x3FF0000000000000;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      (*(void (**)(void *, uint64_t *, CMTime *))(*(void *)v20 + 1264))(v20, &v32, a3);
      PCMatrix44Tmpl<double>::operator*(a2, (long long *)&v32, (uint64_t)v31);
      if (v31 != (unsigned char *)a2)
      {
        for (uint64_t i = 0; i != 128; i += 32)
        {
          long long v29 = (_OWORD *)(a2 + i);
          long long v30 = *(_OWORD *)&v31[i + 16];
          _OWORD *v29 = *(_OWORD *)&v31[i];
          v29[1] = v30;
        }
      }
    }
    return;
  }
  if (*v21) {
    return;
  }
  double v25 = *(double *)&a3[1].epoch / v22;
LABEL_60:
  if (v25 != 1.0)
  {
    *(double *)a2 = v25 * *(double *)a2;
    *(double *)(a2 + 32) = v25 * *(double *)(a2 + 32);
    *(double *)(a2 + 64) = v25 * *(double *)(a2 + 64);
    *(double *)(a2 + 96) = v25 * *(double *)(a2 + 96);
  }
}

double OZTransformNode::getFlattenTransformMatrix(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 120) = 0x3FF0000000000000;
  *(void *)(a2 + 80) = 0x3FF0000000000000;
  *(void *)(a2 + 40) = 0x3FF0000000000000;
  *(void *)a2 = 0x3FF0000000000000;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  return result;
}

double OZTransformNode::getEyeMatrix(void *a1, uint64_t a2, OZRenderState *a3)
{
  OZRenderState::OZRenderState(&v19, a3);
  v19.var4 = 1;
  (*(void (**)(void *, uint64_t, OZRenderState *))(*a1 + 1256))(a1, a2, &v19);
  double v6 = (const void *)a1[120];
  if (v6
  {
    uint64_t v18 = 0x3FF0000000000000;
    uint64_t v15 = 0x3FF0000000000000;
    uint64_t v12 = 0x3FF0000000000000;
    uint64_t v9 = 0x3FF0000000000000;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    (*(void (**)(void))(*(void *)v7 + 1288))();
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)a3[4].var17 + 24))(&v9);
  }
  return PCMatrix44Tmpl<double>::leftMult(a2, (double *)&v9);
}

double OZTransformNode::getInvEyeMatrix(void *a1, uint64_t a2, OZRenderState *a3)
{
  OZRenderState::OZRenderState(&v20, a3);
  v20.var4 = 1;
  (*(void (**)(void *, uint64_t, OZRenderState *))(*a1 + 1264))(a1, a2, &v20);
  double v7 = (const void *)a1[120];
  if (v7
  {
    uint64_t v19 = 0x3FF0000000000000;
    uint64_t v16 = 0x3FF0000000000000;
    uint64_t v13 = 0x3FF0000000000000;
    uint64_t v10 = 0x3FF0000000000000;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    (*(void (**)(void))(*(void *)v8 + 1296))();
  }
  else
  {
    var17 = a3[4].var17;
    if (!var17) {
      return result;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)var17 + 16))(&v10);
  }
  return PCMatrix44Tmpl<double>::rightMult(a2, (double *)&v10);
}

uint64_t OZTransformNode::getFaceProjectionMatrix(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1296))(a1);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  uint64_t v4 = 24;
  *(void *)(a2 + 112) = 0;
  do
  {
    *(void *)(a2 + v4) = 0;
    v4 += 32;
  }
  while (v4 != 120);
  uint64_t v5 = 0;
  uint64_t v6 = a2;
  double v7 = 1.0 / *(double *)(a2 + 120);
  do
  {
    for (uint64_t i = 0; i != 32; i += 16)
      *(float64x2_t *)(v6 + i) = vmulq_n_f64(*(float64x2_t *)(v6 + i), v7);
    ++v5;
    v6 += 32;
  }
  while (v5 != 4);
  double v9 = *(double *)a2;
  double v10 = *(double *)(a2 + 8);
  double v11 = *(double *)(a2 + 32);
  double v12 = *(double *)(a2 + 40);
  double v13 = *(double *)(a2 + 64);
  double v14 = *(double *)(a2 + 72);
  double v15 = *(double *)(a2 + 16);
  double v16 = *(double *)(a2 + 48);
  double v17 = *(double *)(a2 + 80);
  double v18 = sqrt(v15 * v15 + v16 * v16 + v17 * v17);
  if (v18 <= -0.0000001 || v18 >= 0.0000001)
  {
    double v20 = v15 / v18;
    double v21 = v16 / v18;
    double v19 = v17 / v18;
  }
  else
  {
    double v19 = 1.0;
    double v20 = 0.0;
    double v21 = 0.0;
  }
  *(double *)long long v56 = v20;
  *(double *)&v56[1] = v21;
  double v22 = v10 * v10 + v12 * v12 + v14 * v14;
  double v23 = (v9 * v10 + v11 * v12 + v13 * v14) / (sqrt(v9 * v9 + v11 * v11 + v13 * v13) * v22);
  double v24 = v9 - v10 * v23;
  double v25 = v11 - v12 * v23;
  double v26 = v13 - v14 * v23;
  double v27 = v20 * v20 + v21 * v21 + v19 * v19;
  double v28 = (v24 * v20 + v25 * v21 + v26 * v19) / (sqrt(v26 * v26 + v24 * v24 + v25 * v25) * v27);
  double v29 = v24 - v20 * v28;
  double v30 = v25 - v21 * v28;
  double v31 = v26 - v19 * v28;
  double v32 = (v10 * v20 + v12 * v21 + v14 * v19) / (sqrt(v22) * v27);
  double v33 = v10 - v20 * v32;
  double v34 = v12 - v21 * v32;
  double v35 = v14 - v19 * v32;
  double v36 = sqrt(v35 * v35 + v33 * v33 + v34 * v34);
  if (v36 <= -0.0000001 || v36 >= 0.0000001)
  {
    double v44 = v33 / v36;
    double v45 = v34 / v36;
    double v46 = v35 / v36;
  }
  else
  {
    int v37 = fabs(v21) > fabs(v20);
    if (fabs(v19) > fabs(*(double *)&v56[v37])) {
      int v37 = 2;
    }
    if (v37 == 2)
    {
      double v38 = v21 * v21;
      double v43 = -v21;
      double v40 = v19 * v19;
      double v41 = v20 * v20;
      double v39 = v20;
      double v42 = v19;
    }
    else if (v37 == 1)
    {
      double v38 = v19 * v19;
      double v42 = -v20;
      double v40 = v20 * v20;
      double v41 = v21 * v21;
      double v39 = v21;
      double v43 = v19;
    }
    else
    {
      double v38 = v20 * v20;
      double v39 = -v19;
      double v40 = v21 * v21;
      double v41 = v19 * v19;
      double v42 = v21;
      double v43 = v20;
    }
    double v47 = (v20 * v39 + v21 * v42 + v19 * v43) / (v27 * sqrt(v41 + v40 + v38));
    double v48 = v39 - v20 * v47;
    double v49 = v42 - v21 * v47;
    double v50 = v43 - v19 * v47;
    double v51 = sqrt(v50 * v50 + v48 * v48 + v49 * v49);
    double v44 = v48 / v51;
    double v45 = v49 / v51;
    double v46 = v50 / v51;
  }
  double v52 = sqrt(v31 * v31 + v29 * v29 + v30 * v30);
  if (v52 <= -0.0000001 || v52 >= 0.0000001)
  {
    double v53 = v29 / v52;
    double v54 = v30 / v52;
    double v55 = v31 / v52;
  }
  else
  {
    double v53 = v19 * v45 - v21 * v46;
    double v54 = v20 * v46 - v19 * v44;
    double v55 = v21 * v44 - v20 * v45;
  }
  *(double *)a2 = v53;
  *(double *)(a2 + 8) = v44;
  *(double *)(a2 + 32) = v54;
  *(double *)(a2 + 40) = v45;
  *(double *)(a2 + 64) = v55;
  *(double *)(a2 + 72) = v46;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(double *)(a2 + 16) = v20;
  *(double *)(a2 + 48) = v21;
  *(double *)(a2 + 80) = v19;
  *(void *)(a2 + 112) = 0;
  return result;
}

double OZTransformNode::transform(OZTransformNode *this, double *a2, double *a3, const OZRenderState *a4)
{
  uint64_t v18 = 0x3FF0000000000000;
  uint64_t v15 = 0x3FF0000000000000;
  uint64_t v12 = 0x3FF0000000000000;
  uint64_t v9 = 0x3FF0000000000000;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  (*(void (**)(OZTransformNode *, uint64_t *, const OZRenderState *))(*(void *)this + 1256))(this, &v9, a4);
  uint64_t v6 = *(void *)a3;
  double v19 = *a2;
  uint64_t v20 = v6;
  uint64_t v21 = 0;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v9, &v19, &v19);
  double result = v19;
  uint64_t v8 = v20;
  *a2 = v19;
  *(void *)a3 = v8;
  return result;
}

double OZTransformNode::invTransform(OZTransformNode *this, double *a2, double *a3, const OZRenderState *a4)
{
  uint64_t v18 = 0x3FF0000000000000;
  uint64_t v15 = 0x3FF0000000000000;
  uint64_t v12 = 0x3FF0000000000000;
  uint64_t v9 = 0x3FF0000000000000;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  (*(void (**)(OZTransformNode *, uint64_t *, const OZRenderState *))(*(void *)this + 1264))(this, &v9, a4);
  uint64_t v6 = *(void *)a3;
  double v19 = *a2;
  uint64_t v20 = v6;
  uint64_t v21 = 0;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v9, &v19, &v19);
  double result = v19;
  uint64_t v8 = v20;
  *a2 = v19;
  *(void *)a3 = v8;
  return result;
}

double OZTransformNode::transform(OZTransformNode *this, double *a2, double *a3, double *a4, const OZRenderState *a5)
{
  uint64_t v21 = 0x3FF0000000000000;
  uint64_t v18 = 0x3FF0000000000000;
  uint64_t v15 = 0x3FF0000000000000;
  uint64_t v12 = 0x3FF0000000000000;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  (*(void (**)(OZTransformNode *, uint64_t *, const OZRenderState *))(*(void *)this + 1256))(this, &v12, a5);
  uint64_t v8 = *(void *)a3;
  double v9 = *a4;
  uint64_t v22 = *(void *)a2;
  uint64_t v23 = v8;
  double v24 = v9;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v12, (double *)&v22, (double *)&v22);
  uint64_t v10 = v23;
  *(void *)a2 = v22;
  *(void *)a3 = v10;
  double result = v24;
  *a4 = v24;
  return result;
}

double OZTransformNode::invTransform(OZTransformNode *this, double *a2, double *a3, double *a4, const OZRenderState *a5)
{
  uint64_t v21 = 0x3FF0000000000000;
  uint64_t v18 = 0x3FF0000000000000;
  uint64_t v15 = 0x3FF0000000000000;
  uint64_t v12 = 0x3FF0000000000000;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  (*(void (**)(OZTransformNode *, uint64_t *, const OZRenderState *))(*(void *)this + 1264))(this, &v12, a5);
  uint64_t v8 = *(void *)a3;
  double v9 = *a4;
  uint64_t v22 = *(void *)a2;
  uint64_t v23 = v8;
  double v24 = v9;
  PCMatrix44Tmpl<double>::transform<double>((double *)&v12, (double *)&v22, (double *)&v22);
  uint64_t v10 = v23;
  *(void *)a2 = v22;
  *(void *)a3 = v10;
  double result = v24;
  *a4 = v24;
  return result;
}

double *OZTransformNode::transform(uint64_t a1, double *a2)
{
  uint64_t v13 = 0x3FF0000000000000;
  uint64_t v10 = 0x3FF0000000000000;
  uint64_t v7 = 0x3FF0000000000000;
  uint64_t v4 = 0x3FF0000000000000;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 1256))(a1, &v4);
  return PCMatrix44Tmpl<double>::transform<double>((double *)&v4, a2, a2);
}

double *OZTransformNode::invTransform(uint64_t a1, double *a2)
{
  uint64_t v13 = 0x3FF0000000000000;
  uint64_t v10 = 0x3FF0000000000000;
  uint64_t v7 = 0x3FF0000000000000;
  uint64_t v4 = 0x3FF0000000000000;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 1264))(a1, &v4);
  return PCMatrix44Tmpl<double>::transform<double>((double *)&v4, a2, a2);
}

double OZTransformNode::computeSpin@<D0>(OZTransformNode *this@<X0>, CMTime *a2@<X1>, double *a3@<X8>)
{
  *a3 = 0.0;
  a3[1] = 0.0;
  a3[2] = 0.0;
  OZChannelRotation3D::getValueAsEulerAngles((uint64_t)this + 2104, a2, a3, 0.0);
  uint64_t v7 = (const void *)*((void *)this + 120);
  if (v7)
  {
    if (v8)
    {
      long long v19 = *(_OWORD *)&a2->value;
      CMTimeEpoch epoch = a2->epoch;
      (*(void (**)(float64x2_t *__return_ptr))(*(void *)v8 + 1352))(&v21);
      uint64_t v18 = 0x3FF0000000000000;
      uint64_t v15 = 0x3FF0000000000000;
      uint64_t v12 = 0x3FF0000000000000;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      uint64_t v9 = 0x3FF0000000000000;
      PCMatrix44Tmpl<double>::leftRotate((double *)&v9, 4, -v21.f64[0], -v21.f64[1], -v22);
      PCMatrix44Tmpl<double>::transform<double>((double *)&v9, a3, a3);
      *(float64x2_t *)a3 = vaddq_f64(v21, *(float64x2_t *)a3);
      double result = v22 + a3[2];
      a3[2] = result;
    }
  }
  return result;
}

void *OZTransformNode::hitCheck(void *a1, float32x2_t *a2, long long *a3, uint64_t a4, double *a5, char a6)
{
  if (a6 & 4) != 0 && ((*(uint64_t (**)(void *))(*a1 + 680))(a1)) {
    return 0;
  }
  if ((a6 & 2) != 0)
  {
    long long v17 = *a3;
    uint64_t v18 = *((void *)a3 + 2);
    if (!(*(unsigned int (**)(void *, long long *, uint64_t, uint64_t, uint64_t))(a1[2] + 104))(a1 + 2, &v17, 1, 1, 1))return 0; {
  }
    }
  float64x2_t v15 = vcvtq_f64_f32(*a2);
  uint64_t v16 = 0;
  (*(void (**)(double *__return_ptr, void *, float64x2_t *, uint64_t, long long *, void))(*a1 + 1384))(v14, a1, &v15, a4, a3, 0);
  v13[1] = xmmword_1B7E736F0;
  _OWORD v13[2] = xmmword_1B7E736F0;
  v13[0] = xmmword_1B7E736F0;
  (*(void (**)(void *, _OWORD *, long long *))(*a1 + 1360))(a1, v13, a3);
  if (PCRayIntersectsBox(v14, (double *)v13, a5)) {
    return a1;
  }
  else {
    return 0;
  }
}

BOOL OZTransformNode::hitCheck(uint64_t a1, double *a2, uint64_t a3, const LiCamera *a4)
{
  uint64_t v47 = 0x3FF0000000000000;
  uint64_t v44 = 0x3FF0000000000000;
  uint64_t v41 = 0x3FF0000000000000;
  uint64_t v38 = 0x3FF0000000000000;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 1256))(a1, &v38);
  long long v8 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  OZScene::calcWorldToFilmSpaceMatrixForCamera(v8, a4, v37);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v38, v37);
  long long v35 = xmmword_1B7E736F0;
  long long v36 = xmmword_1B7E736F0;
  long long v34 = xmmword_1B7E736F0;
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 1360))(a1, &v34, a3);
  *(void *)&v32.f64[0] = v34;
  *(void *)&v32.f64[1] = v35;
  uint64_t v33 = v36;
  v30.f64[0] = *((float64_t *)&v34 + 1);
  v30.f64[1] = *((float64_t *)&v35 + 1);
  uint64_t v31 = *((void *)&v36 + 1);
  unsigned long long v28 = __PAIR128__(v35, *((unint64_t *)&v34 + 1));
  uint64_t v29 = v36;
  *(void *)&v26.f64[0] = v34;
  v26.f64[1] = *((float64_t *)&v35 + 1);
  uint64_t v27 = v36;
  v24.f64[0] = *((float64_t *)&v34 + 1);
  v24.f64[1] = *((float64_t *)&v35 + 1);
  uint64_t v25 = v36;
  *(void *)&v22.f64[0] = v34;
  *(void *)&v22.f64[1] = v35;
  uint64_t v23 = *((void *)&v36 + 1);
  unsigned long long v20 = __PAIR128__(v35, *((unint64_t *)&v34 + 1));
  uint64_t v21 = *((void *)&v36 + 1);
  *(void *)&v18.f64[0] = v34;
  v18.f64[1] = *((float64_t *)&v35 + 1);
  uint64_t v19 = *((void *)&v36 + 1);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, v32.f64, v32.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, v30.f64, v30.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, (double *)&v28, (double *)&v28);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, v26.f64, v26.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, v24.f64, v24.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, v22.f64, v22.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, (double *)&v20, (double *)&v20);
  PCMatrix44Tmpl<double>::transform<double>((double *)&v38, v18.f64, v18.f64);
  unsigned long long v16 = v28;
  float64x2_t v17 = v32;
  float64x2_t v14 = v24;
  float64x2_t v15 = v26;
  unsigned long long v12 = v20;
  float64x2_t v13 = v22;
  float64x2_t v10 = v30;
  float64x2_t v11 = v18;
  return PCRect<double>::clipLine(a2, &v13, (double *)&v12)
      || PCRect<double>::clipLine(a2, (float64x2_t *)&v12, v10.f64)
      || PCRect<double>::clipLine(a2, &v10, v11.f64)
      || PCRect<double>::clipLine(a2, &v11, v13.f64)
      || PCRect<double>::clipLine(a2, &v17, (double *)&v16)
      || PCRect<double>::clipLine(a2, (float64x2_t *)&v16, v14.f64)
      || PCRect<double>::clipLine(a2, &v14, v15.f64)
      || PCRect<double>::clipLine(a2, &v15, v17.f64)
      || PCRect<double>::clipLine(a2, &v17, v13.f64)
      || PCRect<double>::clipLine(a2, (float64x2_t *)&v16, (double *)&v12)
      || PCRect<double>::clipLine(a2, &v14, v10.f64)
      || PCRect<double>::clipLine(a2, &v15, v11.f64);
}

void OZTransformNode::projectPointToObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1B7BCA8EC()
{
  return 0;
}

float64_t OZTransformNode::calcTranslationRelativeToCamera(uint64_t a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, float64x2_t *a6)
{
  float64_t result = a3[1].f64[0] - a2[1].f64[0];
  *a6 = vsubq_f64(*a3, *a2);
  a6[1].f64[0] = result;
  return result;
}

BOOL OZTransformNode::invTransformRay(uint64_t a1, void *a2)
{
  uint64_t v13 = 0x3FF0000000000000;
  uint64_t v10 = 0x3FF0000000000000;
  uint64_t v7 = 0x3FF0000000000000;
  uint64_t v4 = 0x3FF0000000000000;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 1256))(a1, &v4);
  return PCRay3<double>::invTransform(a2, &v4);
}

void OZTransformNode::computeRay(OZTransformNode *a1@<X0>, uint64_t a2@<X2>, const OZRenderState *a3@<X3>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 80))(a2);
  OZRenderState::OZRenderState(&v41, a3);
  long long v9 = 0;
  v41.var4 = 1;
  OZRenderState __p = 0;
  long long v39 = 0;
  long long v40 = 0;
  var5 = a3->var5;
  if (!a1 || var5 == a1)
  {
LABEL_26:
    if (!var5) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
  long long v9 = 0;
  long long v11 = a1;
  while (1)
  {
    if (v9 >= v40)
    {
      uint64_t v12 = (v9 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v12 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v13 = (v40 - (unsigned char *)__p) >> 2;
      if (v13 <= v12 + 1) {
        unint64_t v13 = v12 + 1;
      }
      if ((unint64_t)(v40 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        float64x2_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v40, v14);
      }
      else {
        float64x2_t v15 = 0;
      }
      unsigned long long v16 = &v15[8 * v12];
      *(void *)unsigned long long v16 = v11;
      long long v9 = v16 + 8;
      float64x2_t v18 = (char *)__p;
      float64x2_t v17 = v39;
      if (v39 != __p)
      {
        do
        {
          uint64_t v19 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v16 - OZDocument::~OZDocument(this - 1) = v19;
          v16 -= 8;
        }
        while (v17 != v18);
        float64x2_t v17 = (char *)__p;
      }
      OZRenderState __p = v16;
      long long v39 = v9;
      long long v40 = &v15[8 * v14];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(void *)long long v9 = v11;
      v9 += 8;
    }
    long long v39 = v9;
    unsigned long long v20 = (const void *)*((void *)v11 + 120);
    if (!v20) {
      break;
    }
    var5 = a3->var5;
    if (v11) {
      BOOL v21 = v11 == var5;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_26;
    }
  }
  var5 = a3->var5;
  if (var5)
  {
LABEL_29:
    double v22 = (*(double (**)(OZTransformNode *))(*(void *)var5 + 1328))(var5);
    uint64_t v37 = 0x3FF0000000000000;
    uint64_t v34 = 0x3FF0000000000000;
    uint64_t v31 = 0x3FF0000000000000;
    uint64_t v28 = 0x3FF0000000000000;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    double v23 = a3->var3 / v22;
    if (v23 != 1.0)
    {
      uint64_t v28 = *(void *)&v23;
      *(double *)&long long v29 = v23 * 0.0;
      *((double *)&v29 + OZDocument::~OZDocument(this - 1) = v23 * 0.0;
      *(double *)&long long v30 = v23 * 0.0;
    }
    PCRay3<double>::transform(a5, (double *)&v28);
    long long v9 = v39;
  }
LABEL_32:
  float64x2_t v24 = (char *)__p;
  while (v9 != v24)
  {
    float64x2_t v26 = (OZTransformNode *)*((void *)v9 - 1);
    v9 -= 8;
    uint64_t v25 = v26;
    if (a4 && v25 == a1) {
      PCRay3<double>::invTransform((void *)a5, a4);
    }
    else {
      (*(void (**)(OZTransformNode *, uint64_t, OZRenderState *))(*(void *)v25 + 1392))(v25, a5, &v41);
    }
    double v27 = *(double *)(a5 + 24) * *(double *)(a5 + 24)
        + *(double *)(a5 + 32) * *(double *)(a5 + 32)
        + *(double *)(a5 + 40) * *(double *)(a5 + 40);
    if (v27 > -0.0000001 && v27 < 0.0000001) {
      break;
    }
  }
  if (__p)
  {
    long long v39 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B7BCACD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZTransformNode::setInitialTransform(uint64_t result, uint64_t a2, _OWORD *a3, const void *a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v9 = result;
    uint64_t v58 = 0x3FF0000000000000;
    uint64_t v55 = 0x3FF0000000000000;
    uint64_t v52 = 0x3FF0000000000000;
    uint64_t v49 = 0x3FF0000000000000;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    if (a4)
    {
      (*(void (**)(const void *, uint64_t *, uint64_t))(*(void *)a4 + 1264))(a4, &v49, a5);
      char v10 = (*(uint64_t (**)(const void *))(*(void *)a4 + 1424))(a4);
      double v11 = 0.0;
      double v12 = 0.0;
      double v13 = 0.0;
      if ((v10 & 1) == 0)
      {
        double v45 = 1.0;
        double v46 = 0.0;
        double v47 = 0.0;
        double v48 = 0.0;
        long long v42 = 0x3FF0000000000000uLL;
        double v44 = 0.0;
        double v43 = 0.0;
        memset(v32, 0, 48);
        LODWORD(v32[6]) = 4;
        memset(&v32[7], 0, 32);
        *(void *)&long long v33 = 0;
        BOOL Transformation = liSafeGetTransformation((long long *)&v49, (uint64_t)v32, &v45);
        _pcCheckGetTransformation((FILE *)Transformation, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZTransformNode.cpp", 1425, v15, v16, v17, v18, v19);
        (*(void (**)(uint64_t, long long *))(*(void *)a2 + 472))(a2, &v42);
        double v20 = v45 * *(double *)&v42 - (v46 * *((double *)&v42 + 1) + v47 * v43 + v48 * v44);
        double v21 = *(double *)&v42 * v46 + v45 * *((double *)&v42 + 1);
        double v22 = v47 * v44;
        double v23 = v43 * v48;
        double v24 = v46 * v43 - *((double *)&v42 + 1) * v47;
        double v47 = *(double *)&v42 * v47 + v45 * v43 + *((double *)&v42 + 1) * v48 - v46 * v44;
        double v48 = v24 + *(double *)&v42 * v48 + v45 * v44;
        double v45 = v20;
        double v46 = v21 + v22 - v23;
        v36.var7.var0[1][2] = 1.0;
        v36.var7.var0[0][1] = 1.0;
        v36.unsigned int var3 = 1.0;
        v36.var0.int64_t var0 = 0x3FF0000000000000;
        memset(&v36.var0.var1, 0, 32);
        memset(&v36.var4, 0, 32);
        memset(&v36.var7.var0[0][2], 0, 32);
        PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&v36, &v45);
        memset(v37, 0, sizeof(v37));
        long long v39 = 0u;
        long long v40 = 0u;
        uint64_t v41 = 0;
        int v38 = 4;
        PCMatrix44Tmpl<double>::getTransformation((long long *)&v36.var0.var0, (uint64_t)v37);
        double v12 = *((double *)&v39 + 1);
        double v11 = *(double *)&v39;
        double v13 = *(double *)&v40;
      }
      OZTransformNode::setRotation((OZTransformNode *)v9, v11, v12, v13, (const CMTime *)a5);
      if (v25 && OZGroup::shouldLockToCamera(v25, *(unsigned __int8 *)(a5 + 242)))
      {
        *(_OWORD *)&v36.var0.int64_t var0 = *a3;
        v36.var0.unsigned int var3 = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t, OZRenderState *, int *, int64_t *, uint64_t, void))(*(void *)v9 + 1368))(v9, a2, &v36, &v36.var0.var1, &v36.var0.var3, a5, 0))
        {
          *(void *)&long long v31 = v36.var0.var0;
        }
        else
        {
          long long v31 = *a3;
          *(_OWORD *)&v36.var0.int64_t var0 = *a3;
          v36.var0.unsigned int var3 = 0;
        }
        double v30 = (*(double (**)(const void *))(*(void *)a4 + 1328))(a4);
        double v27 = *(double *)&v36.var0.var1;
        double v28 = *(double *)&v36.var0.var3;
        long long v29 = (OZChannelPosition3D *)(v9 + 1216);
        double v26 = *(double *)&v31 / v30;
        return OZChannelPosition3D::setPosition(v29, (const CMTime *)a5, v26, v27, v28);
      }
    }
    else
    {
      (*(void (**)(OZRenderState *__return_ptr, uint64_t))(*(void *)a2 + 408))(&v36, a2);
      OZTransformNode::setRotation((OZTransformNode *)v9, *(double *)&v36.var0.var0, *(double *)&v36.var0.var1, *(double *)&v36.var0.var3, (const CMTime *)a5);
    }
    (*(void (**)(double *__return_ptr, uint64_t))(*(void *)a2 + 352))(&v45, a2);
    (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(void *)a2 + 424))(v37, a2);
    PCMatrix44Tmpl<double>::transform<double>((double *)v37, &v45, &v45);
    PCMatrix44Tmpl<double>::transform<double>((double *)&v49, &v45, &v45);
    OZChannelPosition3D::setPosition((OZChannelPosition3D *)(v9 + 1216), (const CMTime *)a5, v45, v46, v47);
    long long v42 = *a3;
    double v43 = 0.0;
    (*(void (**)(uint64_t, uint64_t, long long *, char *, double *, uint64_t, void))(*(void *)v9 + 1368))(v9, a2, &v42, (char *)&v42 + 8, &v43, a5, 0);
    OZRenderState::OZRenderState(&v36, (const OZRenderState *)a5);
    uint64_t v35 = 0x3FF0000000000000;
    v32[10] = 0x3FF0000000000000;
    v32[5] = 0x3FF0000000000000;
    v32[0] = 0x3FF0000000000000;
    memset(&v32[1], 0, 32);
    memset(&v32[6], 0, 32);
    long long v33 = 0u;
    long long v34 = 0u;
    v36.var4 = 1;
    (*(void (**)(uint64_t, void *, OZRenderState *))(*(void *)v9 + 1256))(v9, v32, &v36);
    PCMatrix44Tmpl<double>::transform<double>((double *)v32, (double *)&v42, (double *)&v42);
    double v27 = *((double *)&v42 + 1);
    double v26 = *(double *)&v42;
    double v28 = v43;
    long long v29 = (OZChannelPosition3D *)(v9 + 1216);
    return OZChannelPosition3D::setPosition(v29, (const CMTime *)a5, v26, v27, v28);
  }
  return result;
}

__n128 OZTransformNode::clipOutline(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, int a5, uint64_t a6, uint64_t *a7)
{
  memset(v33, 0, sizeof(v33));
  if ((*(unsigned int (**)(uint64_t, _OWORD *))(*(void *)a2 + 96))(a2, v33))
  {
    uint64_t v32 = 0x3FF0000000000000;
    uint64_t v29 = 0x3FF0000000000000;
    uint64_t v26 = 0x3FF0000000000000;
    uint64_t v23 = 0x3FF0000000000000;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 1256))(a1, &v23, a3);
    float64x2_t v20 = *(float64x2_t *)((char *)&v33[1] + 8);
    double v21 = *((double *)&v33[2] + 1);
    double v22 = -(*((double *)&v33[1] + 1) * *(double *)v33
          + *(double *)&v33[2] * *((double *)v33 + 1)
          + *((double *)&v33[2] + 1) * *(double *)&v33[1]);
    PCMatrix44Tmpl<double>::transform_row<double>((double *)&v23, v20.f64, v20.f64);
    double v13 = vaddvq_f64(vmulq_f64(v20, v20)) + v21 * v21;
    if (v13 <= -1.0e-24 || v13 >= 1.0e-24)
    {
      *(float64x2_t *)((char *)&v33[1] + 8) = v20;
      v33[0] = vdivq_f64(vmulq_n_f64(v20, -v22), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13, 0));
      *((double *)&v33[2] + OZDocument::~OZDocument(this - 1) = v21;
      *(double *)&v33[1] = -(v22 * v21) / v13;
    }
    PCClipLinesToPlane2D((uint64_t)v33, a4, a5, a6, a7);
  }
  else
  {
    std::vector<BOOL>::resize((uint64_t)a7, a5, 0);
    if (a5 >= 1)
    {
      unint64_t v15 = 0;
      uint64_t v16 = (__n128 *)(a6 + 16);
      uint64_t v17 = a4;
      do
      {
        *(void *)(*a7 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        __n128 v18 = *(__n128 *)v17;
        v17 += 2;
        v16[-1] = v18;
        if (a5 - 1 == v15) {
          unint64_t v19 = 0;
        }
        else {
          unint64_t v19 = v15 + 1;
        }
        __n128 result = *(__n128 *)&a4[2 * v19];
        __n128 *v16 = result;
        v16 += 2;
        ++v15;
      }
      while (a5 != v15);
    }
  }
  return result;
}

double *OZTransformNode::clipPoints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  memset(v37, 0, sizeof(v37));
  uint64_t v11 = *a4;
  uint64_t v10 = a4[1];
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a4) >> 3);
  std::vector<BOOL>::resize((uint64_t)a5, v12, 0);
  __n128 result = (double *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)a2 + 96))(a2, v37);
  if (result)
  {
    uint64_t v36 = 0x3FF0000000000000;
    uint64_t v33 = 0x3FF0000000000000;
    uint64_t v30 = 0x3FF0000000000000;
    uint64_t v27 = 0x3FF0000000000000;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 1256))(a1, &v27, a3);
    float64x2_t v24 = *(float64x2_t *)((char *)&v37[1] + 8);
    double v25 = *((double *)&v37[2] + 1);
    double v26 = -(*((double *)&v37[1] + 1) * *(double *)v37
          + *(double *)&v37[2] * *((double *)v37 + 1)
          + *((double *)&v37[2] + 1) * *(double *)&v37[1]);
    __n128 result = PCMatrix44Tmpl<double>::transform_row<double>((double *)&v27, v24.f64, v24.f64);
    double v14 = vaddvq_f64(vmulq_f64(v24, v24)) + v25 * v25;
    if (v14 <= -1.0e-24 || v14 >= 1.0e-24)
    {
      *(float64x2_t *)((char *)&v37[1] + 8) = v24;
      v37[0] = vdivq_f64(vmulq_n_f64(v24, -v26), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v14, 0));
      *((double *)&v37[2] + OZDocument::~OZDocument(this - 1) = v25;
      *(double *)&v37[1] = -(v26 * v25) / v14;
    }
    if (v10 != v11)
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      if (v12 <= 1) {
        unint64_t v12 = 1;
      }
      do
      {
        __n128 result = (double *)PCClipPointToPlane((uint64_t)v37, *a4 + v15);
        uint64_t v17 = *a5;
        unint64_t v18 = v16 >> 6;
        uint64_t v19 = 1 << v16;
        if (result) {
          uint64_t v20 = *(void *)(v17 + 8 * v18) | v19;
        }
        else {
          uint64_t v20 = *(void *)(v17 + 8 * v18) & ~v19;
        }
        *(void *)(v17 + 8 * v18) = v20;
        ++v16;
        v15 += 24;
      }
      while (v12 != v16);
    }
  }
  else if (v10 != v11)
  {
    unint64_t v21 = 0;
    uint64_t v22 = *a5;
    if (v12 <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = v12;
    }
    do
    {
      *(void *)(v22 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      ++v21;
    }
    while (v23 != v21);
  }
  return result;
}

uint64_t OZTransformNode::isAffectedByBehaviors(OZTransformNode *this)
{
  ObjectSimulator = OZTransformNode::getObjectSimulator(this);
  if (!*((unsigned char *)ObjectSimulator + 208) || *((unsigned char *)ObjectSimulator + 372))
  {
    if ((*((unsigned char *)this + 1024) & 2) != 0) {
      return 0;
    }
    uint64_t v3 = *((void *)this + 126);
    if ((OZTransformNode *)v3 == (OZTransformNode *)((char *)this + 1000)) {
      return 0;
    }
    while (1)
    {
      uint64_t v4 = *(void **)(v3 + 16);
      if ((*(unsigned int (**)(void))(v4[2] + 24))())
      {
      }
      uint64_t v3 = *(void *)(v3 + 8);
      if ((OZTransformNode *)v3 == (OZTransformNode *)((char *)this + 1000)) {
        return 0;
      }
    }
  }
  return 1;
}

void *OZTransformNode::getObjectSimulator(OZTransformNode *this)
{
  uint64_t v1 = (OZTransformNode *)((char *)this + 1000);
  uint64_t v2 = (OZTransformNode *)*((void *)this + 126);
  if ((OZTransformNode *)((char *)this + 1000) == v2) {
    return 0;
  }
  do
  {
    uint64_t v1 = *(OZTransformNode **)v1;
    __n128 result = (void *)*((void *)v1 + 2);
    if (result)
    {
      if (result) {
        __n128 result = (void *)result[43];
      }
    }
  }
  while (!result && v1 != v2);
  return result;
}

uint64_t OZTransformNode::isAffectedByBakeableBehaviors(OZTransformNode *this)
{
  ObjectSimulator = OZTransformNode::getObjectSimulator(this);
  if (!*((unsigned char *)ObjectSimulator + 208) || *((unsigned char *)ObjectSimulator + 372))
  {
    if ((*((unsigned char *)this + 1024) & 2) != 0) {
      return 0;
    }
    uint64_t v3 = *((void *)this + 126);
    if ((OZTransformNode *)v3 == (OZTransformNode *)((char *)this + 1000)) {
      return 0;
    }
    while (1)
    {
      uint64_t v4 = *(void **)(v3 + 16);
      if ((*(unsigned int (**)(void))(v4[2] + 24))())
      {
        if ((*(unsigned int (**)(void *))(*v4 + 272))(v4)
        {
          break;
        }
      }
      uint64_t v3 = *(void *)(v3 + 8);
      if ((OZTransformNode *)v3 == (OZTransformNode *)((char *)this + 1000)) {
        return 0;
      }
    }
  }
  return 1;
}

OZChannelBase *OZTransformNode::getChannelFromRefAndVersion(OZTransformNode *this, OZChannelRef *a2, double a3)
{
  __n128 result = OZObjectManipulator::getChannelFromRefAndVersion((OZObjectManipulator *)((char *)this + 16), a2, a3);
  if (result == (OZChannelBase *)((char *)this + 6376)) {
    return (OZChannelBase *)((char *)this + 2544);
  }
  return result;
}

OZChannelBase *non-virtual thunk to'OZTransformNode::getChannelFromRefAndVersion(OZTransformNode *this, OZChannelRef *a2, double a3)
{
  __n128 result = OZObjectManipulator::getChannelFromRefAndVersion((OZObjectManipulator *)this, a2, a3);
  if (result == (OZChannelBase *)((char *)this + 6360)) {
    return (OZChannelBase *)((char *)this + 2528);
  }
  return result;
}

void OZTransformNode::didAddToScene(OZTransformNode *this, OZScene *a2)
{
  OZSceneNode::didAddToScene((OZSceneNode *)this, a2);
  if ((*(double (**)(OZTransformNode *))(*(void *)this + 1328))(this) == 0.0)
  {
    v4.n128_u64[0] = *((void *)a2 + 48);
    long long v5 = *(void (**)(OZTransformNode *, __n128))(*(void *)this + 1344);
    v5(this, v4);
  }
}

OZChannelBase *OZTransformNode::hideOrShowChannelsBasedOnOwner(OZTransformNode *this, const OZSceneNode *a2)
{
  int isDescendantOf360Group = OZSceneNode::isDescendantOf360Group((uint64_t)a2);
  __n128 v4 = (OZChannelBase *)((char *)this + 1088);
  __n128 result = (OZChannelBase *)OZChannelBase::testFlag(v4, 2);
  if (isDescendantOf360Group)
  {
    if ((result & 1) == 0)
    {
      OZChannelBase::setFlag(v4, 2, 1);
      return OZChannelBase::setFlag(v4, 0x8000, 1);
    }
  }
  else if (result)
  {
    OZChannelBase::resetFlag(v4, 2, 1);
    return OZChannelBase::resetFlag(v4, 0x8000, 1);
  }
  return result;
}

OZChannelBase *OZTransformNode::setOwner(OZTransformNode *this, const OZSceneNode *a2)
{
  *((void *)this + 120) = a2;
  return OZTransformNode::hideOrShowChannelsBasedOnOwner(this, a2);
}

uint64_t OZTransformNode::bake(OZTransformNode *this)
{
  OZSceneNode::bake((OZSceneNode *)this);
  uint64_t result = OZChannelBase::getLastUsedUniqueID(v2);
  *((_DWORD *)this + 1592) = result;
  return result;
}

uint64_t OZTransformNode::isInRootWorld(OZTransformNode *this)
{
  while (1)
  {
    uint64_t v2 = (const void *)*((void *)this + 120);
    if (!v2) {
      break;
    }
    if (!v3) {
      break;
    }
    this = v3;
    if ((*(unsigned int (**)(OZTransformNode *))(*(void *)v3 + 1424))(v3)) {
      return 0;
    }
  }
  return 1;
}

uint64_t OZTransformNode::getFourCornerMatrix(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 120) = 0x3FF0000000000000;
  *(void *)(a2 + 80) = 0x3FF0000000000000;
  *(void *)(a2 + 40) = 0x3FF0000000000000;
  *(void *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  return 1;
}

double OZTransformNode::getPixelAspectRatio(OZTransformNode *this)
{
  return *((double *)this + 795);
}

uint64_t OZFontCollection::getFontFamilyIndex(OZFontCollection *this, const PCString *a2)
{
  uint64_t v2 = (PCString *)*((void *)this + 2);
  uint64_t v3 = (__CFString *)((char *)this + 24);
  if (v2 == (PCString *)((char *)this + 24)) {
    return 0;
  }
  uint64_t v5 = 0;
  while (1)
  {
    int v6 = PCString::compare(v2 + 4, a2);
    uint64_t v7 = v6 ? (v5 + 1) : v5;
    if (!v6) {
      break;
    }
    int64_t var0 = v2[1].var0;
    if (var0)
    {
      do
      {
        uint64_t v9 = var0;
        int64_t var0 = (__CFString *)var0->isa;
      }
      while (var0);
    }
    else
    {
      do
      {
        uint64_t v9 = v2[2].var0;
        BOOL v10 = v9->isa == v2;
        uint64_t v2 = (PCString *)v9;
      }
      while (!v10);
    }
    uint64_t v5 = v7;
    uint64_t v2 = (PCString *)v9;
    if (v9 == v3) {
      return 0;
    }
  }
  return v5;
}

void OZElement::OZElement(OZElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZTransformNode::OZTransformNode((OZTransformNode *)this, a2, a3, a4);
  OZImageNode::OZImageNode((OZImageNode *)(v5 + 6528));
  *(void *)this = &unk_1F113A240;
  *((void *)this + 2) = &unk_1F113AB18;
  *((void *)this + 6) = &unk_1F113AD70;
  *((void *)this + 816) = &unk_1F113ADC8;
  PCURL::PCURL((PCURL *)&v89, @"Channel Blending");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 6552), &v89, (OZChannelFolder *)((char *)this + 320), 0xC8u, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v6, @"Channel Opacity");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 6680), 1.0, &v89, (OZChannelFolder *)((char *)this + 6552), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v89);
  uint64_t v7 = (const PCString *)PCBlend::modeMenuString(0);
  PCURL::PCURL((PCURL *)&v89, @"Channel Blend Mode");
  OZChannelBlendMode::OZChannelBlendMode((OZChannelBlendMode *)((char *)this + 6832), 0, v7, &v89, (OZChannelFolder *)((char *)this + 6552), 0xCBu, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v8, @"Channel Light Wrap");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7088), &v89, (OZChannelFolder *)((char *)this + 6552), 0xF1u, 2u, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v9, @"Channel LR Amount");
  uint64_t Instance = (OZElement::OZElement_lrSizeInfo *)OZElement::OZElement_lrSizeImpl::getInstance(v10);
  unint64_t v12 = (OZChannelInfo *)OZElement::OZElement_lrSizeInfo::getInstance(Instance);
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 7216), 10.0, &v89, (OZChannelFolder *)((char *)this + 7088), 0xEEu, 2, (OZChannelImpl *)Instance, v12);
  PCString::~PCString(&v89);
  PCURL::PCURL(v13, @"Channel LR Intensity");
  uint64_t v15 = (OZChannelImpl *)OZElement::OZElement_lrIntensityImpl::getInstance(v14);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 7368), 1.0, &v89, (OZChannelFolder *)((char *)this + 7088), 0xEFu, 2u, v15, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v16, @"Channel LR Intensity Scale");
  unint64_t v18 = (OZChannelImpl *)OZElement::OZElement_lrIntensityScaleImpl::getInstance(v17);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 7520), 1.0, &v89, (OZChannelFolder *)((char *)this + 7088), 0xF2u, 2u, v18, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v19, @"Channel LR Opacity");
  unint64_t v21 = (OZChannelImpl *)OZElement::OZElement_lrOpacityImpl::getInstance(v20);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 7672), 1.0, &v89, (OZChannelFolder *)((char *)this + 7088), 0xF0u, 2u, v21, 0);
  PCString::~PCString(&v89);
  uint64_t v23 = (const PCString *)PCBlend::lightWrapModeMenuString(v22);
  PCURL::PCURL((PCURL *)&v89, @"Channel LR Blend Mode");
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 7824), 0, v23, &v89, (OZChannelFolder *)((char *)this + 7088), 0xEDu, 2, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v24, @"Channel Reflectivity");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 8080), 0.0, &v89, (OZChannelFolder *)((char *)this + 6552), 0xDEu, 0xAu, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v25, @"Channel Preserve Transparency");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 8232), 0, &v89, (OZChannelFolder *)((char *)this + 6552), 0xD9u, 0, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v26, @"Channel Lighting");
  OZLightingFolder::OZLightingFolder((OZLightingFolder *)((char *)this + 8384), &v89, (OZChannelFolder *)((char *)this + 320), 0xE6u, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v27, @"Folder Element Shadows");
  OZFolderElementShadows::OZFolderElementShadows((OZFolderElementShadows *)((char *)this + 9352), &v89, (OZChannelFolder *)((char *)this + 320), 0xEAu, 2u);
  PCString::~PCString(&v89);
  PCURL::PCURL(v28, @"Channel Reflection");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 9936), &v89, (OZChannelFolder *)((char *)this + 320), 0xDFu, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v29, @"Channel Reflectivity");
  long long v31 = (OZChannelImpl *)OZElement::OZElement_reflectivityImpl::getInstance(v30);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 10064), 0.8, &v89, (OZChannelFolder *)((char *)this + 9936), 0xE4u, 0, v31, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v32, @"Channel Reflection Blur");
  long long v34 = (OZChannelImpl *)OZElement::OZElement_reflectionBlurImpl::getInstance(v33);
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 10216), 0.0, &v89, (OZChannelFolder *)((char *)this + 9936), 0xE5u, 0, v34, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v35, @"Channel Reflection Falloff");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 10368), &v89, (OZChannelFolder *)((char *)this + 9936), 0xE0u, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v36, @"Channel Reflection Begin Falloff");
  int v38 = (OZElement::OZElement_reflectionBeginFalloffInfo *)OZElement::OZElement_reflectionBeginFalloffImpl::getInstance(v37);
  long long v39 = (OZChannelInfo *)OZElement::OZElement_reflectionBeginFalloffInfo::getInstance(v38);
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 10496), 0.0, &v89, (OZChannelFolder *)((char *)this + 10368), 0xE1u, 0, (OZChannelImpl *)v38, v39);
  PCString::~PCString(&v89);
  PCURL::PCURL(v40, @"Channel Reflection End Falloff");
  long long v42 = (OZElement::OZElement_reflectionEndFalloffInfo *)OZElement::OZElement_reflectionEndFalloffImpl::getInstance(v41);
  double v43 = (OZChannelInfo *)OZElement::OZElement_reflectionEndFalloffInfo::getInstance(v42);
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 10648), 500.0, &v89, (OZChannelFolder *)((char *)this + 10368), 0xE2u, 0, (OZChannelImpl *)v42, v43);
  PCString::~PCString(&v89);
  PCURL::PCURL(v44, @"Channel Reflection Falloff Exponent");
  double v46 = (OZElement::OZElement_reflectionFalloffExponentInfo *)OZElement::OZElement_reflectionFalloffExponentImpl::getInstance(v45);
  double v47 = (OZChannelInfo *)OZElement::OZElement_reflectionFalloffExponentInfo::getInstance(v46);
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 10800), 1.8, &v89, (OZChannelFolder *)((char *)this + 10368), 0xEBu, 0, (OZChannelImpl *)v46, v47);
  PCString::~PCString(&v89);
  uint64_t v49 = (const PCString *)PCBlend::reflectionModeMenuString(v48);
  PCURL::PCURL((PCURL *)&v89, @"Channel Reflection Blend Mode");
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 10952), v49, &v89, (OZChannelFolder *)((char *)this + 9936), 0xE3u, 0, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v50, @"Channel Casts Reflection Enum");
  PCURL::PCURL((PCURL *)&v88, @"Channel Casts Reflection");
  uint64_t v52 = (OZChannelImpl *)OZElement::OZElement_castsReflectionImpl::getInstance(v51);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 11208), 0, &v89, &v88, (OZChannelFolder *)((char *)this + 6552), 0xECu, 0, v52, 0);
  PCString::~PCString(&v88);
  PCString::~PCString(&v89);
  PCURL::PCURL(v53, @"Channel Color Heading");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 11464), &v89, (OZChannelFolder *)((char *)this + 320), 0xF3u, 0, 0);
  PCString::~PCString(&v89);
  PCString::PCString(v54, "Hidden Channel");
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 11592), 1.0, &v89, (OZChannelFolder *)((char *)this + 11464), 0xF5u, 2, 0, 0);
  PCString::~PCString(&v89);
  PCString::PCString(v55, "Hidden Channel");
  PCString::PCString(&v88, "Hidden Channel");
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 11744), 0, &v89, &v88, (OZChannelFolder *)((char *)this + 11464), 0xF4u, 138, 0, 0);
  PCString::~PCString(&v88);
  PCString::~PCString(&v89);
  PCURL::PCURL(v56, @"Channel Color Conversion Enum");
  PCURL::PCURL((PCURL *)&v88, @"Channel Color Conversion");
  uint64_t v58 = (OZChannelImpl *)OZElement::OZElement_conversionImpl::getInstance(v57);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 12000), 0, &v89, &v88, (OZChannelFolder *)((char *)this + 11464), 0xF6u, 0, v58, 0);
  PCString::~PCString(&v88);
  PCString::~PCString(&v89);
  PCURL::PCURL(v59, @"Channel Color Conversion Type Enum");
  PCURL::PCURL((PCURL *)&v88, @"Channel Color Conversion Type");
  long long v61 = (OZChannelImpl *)OZElement::OZElement_conversionTypeImpl::getInstance(v60);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 12256), 3u, &v89, &v88, (OZChannelFolder *)((char *)this + 11464), 0xF7u, 0, v61, 0);
  PCString::~PCString(&v88);
  PCString::~PCString(&v89);
  PCURL::PCURL(v62, @"Channel Color Conversion Peak Nits");
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 12512), 1000.0, &v89, (OZChannelFolder *)((char *)this + 11464), 0xF8u, 0, 0, 0);
  PCString::~PCString(&v89);
  *((_DWORD *)this + 3166) = -1;
  PCURL::PCURL(v63, @"Channel Drop Shadow");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 12672), &v89, (OZChannelFolder *)((char *)this + 320), 0xD0u, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v64, @"Channel Drop Shadow Color");
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZChannelColorNoAlpha *)((char *)this + 12800), &v89, (OZChannelFolder *)((char *)this + 12672), 0xD2u, 0, 5u);
  PCString::~PCString(&v89);
  PCURL::PCURL(v65, @"Channel Drop Shadow Opacity");
  double v67 = (OZChannelImpl *)OZElement::OZElement_dropShadowOpacityImpl::getInstance(v66);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 13808), 0.75, &v89, (OZChannelFolder *)((char *)this + 12672), 0xD3u, 0, v67, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v68, @"Channel Drop Shadow Blur");
  CMTime v70 = (OZElement::OZElement_dropShadowBlurInfo *)OZElement::OZElement_dropShadowBlurImpl::getInstance(v69);
  CMTime v71 = (OZChannelInfo *)OZElement::OZElement_dropShadowBlurInfo::getInstance(v70);
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 13960), 5.0, &v89, (OZChannelFolder *)((char *)this + 12672), 0xD5u, 0, (OZChannelImpl *)v70, v71);
  PCString::~PCString(&v89);
  PCURL::PCURL(v72, @"Channel Drop Shadow Distance");
  OZRenderState v74 = (OZChannelImpl *)OZElement::OZElement_dropShadowDistanceImpl::getInstance(v73);
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)((char *)this + 14112), 5.0, &v89, (OZChannelFolder *)((char *)this + 12672), 0xD4u, 0, v74, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v75, @"Channel Drop Shadow Angle");
  double v77 = (OZChannelImpl *)OZElement::OZElement_dropShadowAngleImpl::getInstance(v76);
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 14264), 5.49778714, &v89, (OZChannelFolder *)((char *)this + 12672), 0xD6u, 0, v77, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v78, @"Channel Drop Shadow Fixed Source");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 14416), &v89, (OZChannelFolder *)((char *)this + 12672), 0xE8u, 0, 0, 0);
  PCString::~PCString(&v89);
  PCURL::PCURL(v79, @"Channel Four Corner");
  OZChannelQuad::OZChannelQuad((OZChannelQuad *)((char *)this + 14568), &v89, (OZChannelFolder *)((char *)this + 320), 0xCFu, 0, 4u);
  PCString::~PCString(&v89);
  PCURL::PCURL(v80, @"Channel Crop");
  long long v82 = (OZChannelInfo *)OZElement::OZElement_cropInfo::getInstance(v81);
  OZChannelCrop::OZChannelCrop((OZChannelCrop *)((char *)this + 17520), &v89, (OZChannelFolder *)((char *)this + 320), 0xD8u, 0, 4u, 0, v82);
  PCString::~PCString(&v89);
  PCURL::PCURL(v83, @"Channel Timing Group");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18264), &v89, (OZChannelFolder *)((char *)this + 320), 0xE9u, 2u, 0);
  PCString::~PCString(&v89);
  *((void *)this + 2299) = 0;
  *((void *)this + 230OZDocument::~OZDocument(this - 1) = (char *)this + 18408;
  *((void *)this + 2302) = (char *)this + 18408;
  *((void *)this + 2303) = 0;
  PCURL::PCURL(v84, @"Channel Masks");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18432), &v89, (OZChannelFolder *)((char *)this + 56), 0xD7u, 0, 0);
  PCString::~PCString(&v89);
  PCString::PCString(v85, "Channel Freeze Media");
  OZChanFootageRef::OZChanFootageRef((OZChanFootageRef *)((char *)this + 18560), &v89, (OZChannelFolder *)((char *)this + 320), 0xDDu, 10);
  PCString::~PCString(&v89);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)((char *)this + 18720));
  *((void *)this + 2342) = 0xD00000005;
  *((_WORD *)this + 9372) = 0;
  *((void *)this + 2344) = 0;
  *((void *)this + 2346) = 0;
  *((void *)this + 2345) = 0;
  LODWORD(v89.var0) = 0;
  ElementBlendModes = (char *)PCBlend::getElementBlendModes((PCBlend *)&v89, v86);
  OZChannelEnum::setTags((OZChannelEnum *)((char *)this + 6832), ElementBlendModes, (int)v89.var0);
  OZChannelEnum::setTags((OZChannelEnum *)((char *)this + 10952), ElementBlendModes, (int)v89.var0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 9936), 0, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 9936), 15);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 9936));
  OZChannelBase::enable((OZChannelBase *)((char *)this + 10368), 0, 0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 10368), 15);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 10368));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 11464), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 11464));
  OZChannel::setKeyframable((OZChannel *)((char *)this + 11592), 0);
  OZChannel::setValue((OZChannel *)((char *)this + 11592), MEMORY[0x1E4F1FA48], 3.0, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 11744));
  OZChannelBase::enable((OZChannelBase *)((char *)this + 12256), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 12512), 0, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 12512), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 12512), 100.0);
  OZChannel::setMax((OZChannel *)((char *)this + 12512), 10000.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 12512), 100.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 12512), 4000.0);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 12672), 15);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 12672));
  OZChannelBase::enable((OZChannelBase *)((char *)this + 12672), 0, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 14568), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 14568));
  OZChannelBase::enable((OZChannelBase *)((char *)this + 14568), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 17520), 0, 0);
  OZScene::setApplyMotionEffectScaleTo3DObjectRenders((uint64_t)this + 18560, 0);
  *((unsigned char *)this + 18717) = 1;
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 8384), 15);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 8384));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 9352), 15);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 9352));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 9936), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 9936));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 10368), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 10368));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 12672), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 12672));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 14568), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 14568));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 17520), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 17520));
}

void sub_1B7BCCDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, OZChannelFolder *a11, OZChannelFolder *a12, OZChannelBool *a13, OZChannel *a14, OZChannel *a15, OZChannel *a16, OZChannelPercent *a17, OZChannelColorNoAlpha *a18, OZChannelEnum *a19, OZChannelEnum *a20,OZChannel *a21,OZChannel *a22,OZChannel *a23,OZChannel *a24,OZChannelPercent *a25,OZChannelBool *a26,OZChannelPercent *a27,OZChannelEnum *a28,OZChannelPercent *a29,OZChannelPercent *a30,OZChannelFolder *a31,OZChannelBase *a32,OZChannelPercent *a33,OZChannel *a34)
{
  OZChanFootageRef::~OZChanFootageRef(v38);
  OZChannelFolder::~OZChannelFolder(a11);
  std::__list_imp<unsigned int>::clear(v35);
  OZChannelFolder::~OZChannelFolder(a12);
  OZChannelCrop::~OZChannelCrop(v37);
  OZChannelQuad::~OZChannelQuad(v40);
  OZChannelBool::~OZChannelBool(a13);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(a15);
  OZChannel::~OZChannel(a16);
  OZChannelPercent::~OZChannelPercent(a17);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a18);
  OZChannelFolder::~OZChannelFolder(v41);
  OZChannel::~OZChannel(v36);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v42 - 184));
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v42 - 176));
  OZChannel::~OZChannel(*(OZChannel **)(v42 - 152));
  OZChannelFolder::~OZChannelFolder(v39);
  OZChannelEnum::~OZChannelEnum(a20);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v42 - 168));
  OZChannel::~OZChannel(a21);
  OZChannel::~OZChannel(a22);
  OZChannel::~OZChannel(a23);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v42 - 120));
  OZChannel::~OZChannel(a24);
  OZChannelPercent::~OZChannelPercent(a25);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v42 - 112));
  OZFolderElementShadows::~OZFolderElementShadows(*(OZFolderElementShadows **)(v42 - 144));
  OZLightingFolder::~OZLightingFolder(*(OZLightingFolder **)(v42 - 136));
  OZChannelBool::~OZChannelBool(a26);
  OZChannelPercent::~OZChannelPercent(a27);
  OZChannelEnum::~OZChannelEnum(a28);
  OZChannelPercent::~OZChannelPercent(a29);
  OZChannelPercent::~OZChannelPercent(a33);
  OZChannelPercent::~OZChannelPercent(a30);
  OZChannel::~OZChannel(a34);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v42 - 128));
  OZChannelBlendMode::~OZChannelBlendMode(*(OZChannelBlendMode **)(v42 - 160));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v42 - 192));
  OZChannelFolder::~OZChannelFolder(a31);
  OZChannelBase::setRangeName(a32, v44);
  OZTransformNode::~OZTransformNode(v34);
  _Unwind_Resume(a1);
}

void OZElement::OZElement(OZElement *this, const OZElement *a2, uint64_t a3)
{
  OZTransformNode::OZTransformNode((OZTransformNode *)this, (const OZTransformNode *)a2, a3);
  OZImageNode::OZImageNode((OZImageNode *)(v6 + 6528));
  *(void *)this = &unk_1F113A240;
  *((void *)this + 2) = &unk_1F113AB18;
  *((void *)this + 6) = &unk_1F113AD70;
  *((void *)this + 816) = &unk_1F113ADC8;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 6552), (const OZChannelFolder *)((char *)a2 + 6552), (OZChannelFolder *)((char *)this + 320));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 6680), (const OZChannelBase *)((char *)a2 + 6680), (OZChannelFolder *)((char *)this + 6552));
  OZChannelBlendMode::OZChannelBlendMode((OZChannelBlendMode *)((char *)this + 6832), (const OZChannelBlendMode *)((char *)a2 + 6832), (OZChannelFolder *)((char *)this + 6552));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 7088), (const OZChannelFolder *)((char *)a2 + 7088), (OZChannelFolder *)((char *)this + 6552));
  OZChannel::OZChannel((OZChannel *)((char *)this + 7216), (const OZChannelBase *)((char *)a2 + 7216), (OZChannelFolder *)((char *)this + 7088));
  *((void *)this + 902) = &unk_1F1100CF0;
  *((void *)this + 904) = &unk_1F1101050;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 7368), (const OZChannelBase *)((char *)a2 + 7368), (OZChannelFolder *)((char *)this + 7088));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 7520), (const OZChannelBase *)((char *)a2 + 7520), (OZChannelFolder *)((char *)this + 7088));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 7672), (const OZChannelBase *)((char *)a2 + 7672), (OZChannelFolder *)((char *)this + 7088));
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 7824), (const OZChannelEnum *)((char *)a2 + 7824), (OZChannelFolder *)((char *)this + 7088));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 8080), (const OZChannelBase *)((char *)a2 + 8080), (OZChannelFolder *)((char *)this + 6552));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 8232), (const OZChannelBase *)((char *)a2 + 8232), (OZChannelFolder *)((char *)this + 6552));
  OZLightingFolder::OZLightingFolder((OZLightingFolder *)((char *)this + 8384), (const OZLightingFolder *)((char *)a2 + 8384), (OZChannelFolder *)((char *)this + 320));
  OZFolderElementShadows::OZFolderElementShadows((OZFolderElementShadows *)((char *)this + 9352), (const OZFolderElementShadows *)((char *)a2 + 9352), (OZChannelFolder *)((char *)this + 320));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 9936), (const OZChannelFolder *)((char *)a2 + 9936), (OZChannelFolder *)((char *)this + 320));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 10064), (const OZChannelBase *)((char *)a2 + 10064), (OZChannelFolder *)((char *)this + 9936));
  OZChannel::OZChannel((OZChannel *)((char *)this + 10216), (const OZChannelBase *)((char *)a2 + 10216), (OZChannelFolder *)((char *)this + 9936));
  *((void *)this + 1277) = &unk_1F1100CF0;
  *((void *)this + 1279) = &unk_1F1101050;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 10368), (const OZChannelFolder *)((char *)a2 + 10368), (OZChannelFolder *)((char *)this + 9936));
  OZChannel::OZChannel((OZChannel *)((char *)this + 10496), (const OZChannelBase *)((char *)a2 + 10496), (OZChannelFolder *)((char *)this + 10368));
  *((void *)this + 1312) = &unk_1F1100CF0;
  *((void *)this + 1314) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 10648), (const OZChannelBase *)((char *)a2 + 10648), (OZChannelFolder *)((char *)this + 10368));
  *((void *)this + 133OZDocument::~OZDocument(this - 1) = &unk_1F1100CF0;
  *((void *)this + 1333) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 10800), (const OZChannelBase *)((char *)a2 + 10800), (OZChannelFolder *)((char *)this + 10368));
  *((void *)this + 1350) = &unk_1F1100CF0;
  *((void *)this + 1352) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 10952), (const OZChannelEnum *)((char *)a2 + 10952), (OZChannelFolder *)((char *)this + 9936));
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 11208), (const OZChannelEnum *)((char *)a2 + 11208), (OZChannelFolder *)((char *)this + 6552));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 11464), (const OZChannelFolder *)((char *)a2 + 11464), (OZChannelFolder *)((char *)this + 320));
  OZChannel::OZChannel((OZChannel *)((char *)this + 11592), (const OZChannelBase *)((char *)a2 + 11592), (OZChannelFolder *)((char *)this + 11464));
  *((void *)this + 1449) = &unk_1F1100CF0;
  *((void *)this + 145OZDocument::~OZDocument(this - 1) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 11744), (const OZChannelEnum *)((char *)a2 + 11744), (OZChannelFolder *)((char *)this + 11464));
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 12000), (const OZChannelEnum *)((char *)a2 + 12000), (OZChannelFolder *)((char *)this + 11464));
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)((char *)this + 12256), (const OZChannelEnum *)((char *)a2 + 12256), (OZChannelFolder *)((char *)this + 11464));
  OZChannel::OZChannel((OZChannel *)((char *)this + 12512), (const OZChannelBase *)((char *)a2 + 12512), (OZChannelFolder *)((char *)this + 11464));
  *((void *)this + 1564) = &unk_1F1100CF0;
  *((void *)this + 1566) = &unk_1F1101050;
  *((_DWORD *)this + 3166) = -1;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 12672), (const OZChannelFolder *)((char *)a2 + 12672), (OZChannelFolder *)((char *)this + 320));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZChannelColorNoAlpha *)((char *)this + 12800), (const OZChannelColorNoAlpha *)((char *)a2 + 12800), (OZChannelFolder *)((char *)this + 12672));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 13808), (const OZChannelBase *)((char *)a2 + 13808), (OZChannelFolder *)((char *)this + 12672));
  OZChannel::OZChannel((OZChannel *)((char *)this + 13960), (const OZChannelBase *)((char *)a2 + 13960), (OZChannelFolder *)((char *)this + 12672));
  *((void *)this + 1745) = &unk_1F1100CF0;
  *((void *)this + 1747) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 14112), (const OZChannelBase *)a2 + 126, (OZChannelFolder *)((char *)this + 12672));
  *((void *)this + 1764) = &unk_1F1100CF0;
  *((void *)this + 1766) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 14264), (const OZChannelBase *)((char *)a2 + 14264), (OZChannelFolder *)((char *)this + 12672));
  *((void *)this + 1783) = &unk_1F11010C0;
  *((void *)this + 1785) = &unk_1F1101420;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 14416), (const OZChannelBase *)((char *)a2 + 14416), (OZChannelFolder *)((char *)this + 12672));
  OZChannelQuad::OZChannelQuad((OZChannelQuad *)((char *)this + 14568), (const OZChannelQuad *)((char *)a2 + 14568), (OZChannelFolder *)((char *)this + 320));
  OZChannelCrop::OZChannelCrop((OZChannelCrop *)((char *)this + 17520), (const OZChannelCrop *)((char *)a2 + 17520), (OZChannelFolder *)((char *)this + 320));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18264), (const OZChannelFolder *)((char *)a2 + 18264), (OZChannelFolder *)((char *)this + 320));
  *((void *)this + 2299) = *((void *)a2 + 2299);
  *((_DWORD *)this + 4600) = *((_DWORD *)a2 + 4600);
  *((void *)this + 230OZDocument::~OZDocument(this - 1) = (char *)this + 18408;
  *((void *)this + 2302) = (char *)this + 18408;
  *((void *)this + 2303) = 0;
  PCURL::PCURL((PCURL *)&v20, @"Channel Masks");
  uint64_t v19 = (OZChannelBase *)((char *)this + 56);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18432), &v20, (OZChannelFolder *)((char *)this + 56), 0xD7u, 0, 0);
  PCString::~PCString(&v20);
  PCString::PCString(v7, "Channel Freeze Media");
  OZChanFootageRef::OZChanFootageRef((OZChanFootageRef *)((char *)this + 18560), &v20, (OZChannelFolder *)((char *)this + 320), 0xDDu, 10);
  PCString::~PCString(&v20);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)((char *)this + 18720));
  *((void *)this + 2342) = *((void *)a2 + 2342);
  *((_WORD *)this + 9372) = *((_WORD *)a2 + 9372);
  *((void *)this + 2345) = 0;
  *((void *)this + 2346) = 0;
  *((void *)this + 2344) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 18432), 8, 0);
  LODWORD(v20.var0) = 0;
  ElementBlendModes = (char *)PCBlend::getElementBlendModes((PCBlend *)&v20, v8);
  OZChannelEnum::setTags((OZChannelEnum *)((char *)this + 6832), ElementBlendModes, (int)v20.var0);
  OZChannelEnum::setTags((OZChannelEnum *)((char *)this + 10952), ElementBlendModes, (int)v20.var0);
  if ((a3 & 1) == 0)
  {
    BOOL v10 = (char *)a2 + 18408;
    if ((const OZElement *)((char *)a2 + 18408) != *((const OZElement **)a2 + 2302))
    {
      do
      {
        uint64_t v11 = (const void *)(*(uint64_t (**)(void, void, uint64_t))(**(void **)(*(void *)(*(void *)v10 + 16)
                                                                                             + 8)
                                                                               + 24))(*(void *)(*(void *)(*(void *)v10 + 16) + 8), *(void *)(*(void *)v10 + 16), a3);
        if (v11)
        {
          if (v12)
          {
            double v13 = v12;
            double v14 = operator new(0x18uLL);
            uint64_t v15 = (void *)*((void *)this + 2302);
            *double v14 = (char *)this + 18408;
            v14[1] = v15;
            void v14[2] = v13;
            void *v15 = v14;
            *((void *)this + 2302) = v14;
            ++*((void *)this + 2303);
            unint64_t v16 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v13 + 640))(v13);
            OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 18432), v16);
            (*(void (**)(OZSceneNode *, OZElement *))(*(void *)v13 + 256))(v13, this);
            (*(void (**)(OZSceneNode *))(*(void *)v13 + 1040))(v13);
            uint64_t v17 = (OZScene *)*((void *)this + 121);
            if (v17)
            {
              OZScene::registerNode(v17, v13);
              OZScene::addAllDependencies(*((void *)this + 121), v13);
            }
          }
        }
        BOOL v10 = *(char **)v10;
      }
      while (v10 != *((char **)a2 + 2302));
    }
  }
  if ((*((unsigned char *)this + 1024) & 8) != 0) {
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 320), (OZChannelBase *)((char *)this + 12672));
  }
  if ((a3 & 0xA) == 8)
  {
    OZChanSceneNodeRef::operator=((uint64_t)this + 18560, (uint64_t)a2 + 18560);
    *((_OWORD *)this + 1170) = *((_OWORD *)a2 + 1170);
    return;
  }
  if (OZChannelFolder::testFoldFlag((OZChannelFolder *)v19, 0x8000))
  {
    unint64_t v18 = (void (**)(OZElement *))(*(void *)this + 816);
  }
  else
  {
    if (!OZChannelBase::testFlag(v19, 4)) {
      return;
    }
    unint64_t v18 = (void (**)(OZElement *))(*(void *)this + 776);
  }
  (*v18)(this);
}

void sub_1B7BCDE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelFolder *a9, OZChannelCrop *a10, OZChannelQuad *a11, OZChannelBool *a12, OZChannel *a13, OZChannel *a14, OZChannel *a15, OZChannelPercent *a16, OZChannelColorNoAlpha *a17, OZChannel *a18, OZChannelEnum *a19, OZChannelEnum *a20,OZChannelEnum *a21,OZChannel *a22,OZChannelFolder *a23,OZChannelEnum *a24,OZChannel *a25,OZChannel *a26,OZChannel *a27,OZChannelFolder *a28,OZChannel *a29,OZChannelPercent *a30,OZFolderElementShadows *a31,OZLightingFolder *a32,OZChannelBool *a33,OZChannelPercent *a34,OZChannelEnum *a35,OZChannelPercent *a36)
{
  uint64_t v41 = *(void *)(v36 + 18768);
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 24))(v41);
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v36 + 18760);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  OZChanFootageRef::~OZChanFootageRef(*(OZChanFootageRef **)(v39 - 136));
  OZChannelFolder::~OZChannelFolder(v37);
  std::__list_imp<unsigned int>::clear(v38);
  OZChannelFolder::~OZChannelFolder(a9);
  OZChannelCrop::~OZChannelCrop(a10);
  OZChannelQuad::~OZChannelQuad(a11);
  OZChannelBool::~OZChannelBool(a12);
  OZChannel::~OZChannel(a13);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(a15);
  OZChannelPercent::~OZChannelPercent(a16);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(a17);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v39 - 128));
  OZChannel::~OZChannel(a18);
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelEnum::~OZChannelEnum(a20);
  OZChannelEnum::~OZChannelEnum(a21);
  OZChannel::~OZChannel(a22);
  OZChannelFolder::~OZChannelFolder(a23);
  OZChannelEnum::~OZChannelEnum(a24);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v39 - 112));
  OZChannel::~OZChannel(a25);
  OZChannel::~OZChannel(a26);
  OZChannel::~OZChannel(a27);
  OZChannelFolder::~OZChannelFolder(a28);
  OZChannel::~OZChannel(a29);
  OZChannelPercent::~OZChannelPercent(a30);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v39 - 104));
  OZFolderElementShadows::~OZFolderElementShadows(a31);
  OZLightingFolder::~OZLightingFolder(a32);
  OZChannelBool::~OZChannelBool(a33);
  OZChannelPercent::~OZChannelPercent(a34);
  OZChannelEnum::~OZChannelEnum(a35);
  OZChannelPercent::~OZChannelPercent(a36);
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v39 - 208));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v39 - 200));
  OZChannel::~OZChannel(*(OZChannel **)(v39 - 192));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v39 - 184));
  OZChannelBlendMode::~OZChannelBlendMode(*(OZChannelBlendMode **)(v39 - 176));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v39 - 168));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v39 - 160));
  OZChannelBase::setRangeName(*(OZChannelBase **)(v39 - 152), v43);
  OZTransformNode::~OZTransformNode((OZTransformNode *)v36);
  _Unwind_Resume(a1);
}

void OZElement::~OZElement(OZElement *this)
{
  *(void *)this = &unk_1F113A240;
  *((void *)this + 2) = &unk_1F113AB18;
  *((void *)this + 6) = &unk_1F113AD70;
  uint64_t v2 = (OZChannelBase *)((char *)this + 6528);
  *((void *)this + 816) = &unk_1F113ADC8;
  for (uint64_t i = *((void *)this + 2303); i; uint64_t i = *((void *)this + 2303))
  {
    __n128 v4 = (uint64_t *)*((void *)this + 2302);
    uint64_t v5 = (OZSceneNode *)v4[2];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = v4[1];
    *(void *)v4[1] = v6;
    *((void *)this + 2303) = i - 1;
    operator delete(v4);
    uint64_t v7 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v5 + 640))(v5);
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 18432), v7);
    long long v8 = (OZScene *)*((void *)this + 121);
    if (v8)
    {
      OZScene::unregisterNode(v8, v5);
      OZScene::removeAllDependencies(*((OZScene **)this + 121), v5);
    }
    (*(void (**)(OZSceneNode *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v9 = *((void *)this + 2346);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  }
  BOOL v10 = (std::__shared_weak_count *)*((void *)this + 2345);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  OZChanFootageRef::~OZChanFootageRef((OZChanFootageRef *)((char *)this + 18560));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 18432));
  std::__list_imp<unsigned int>::clear((void *)this + 2301);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 18264));
  OZChannelCrop::~OZChannelCrop((OZChannelCrop *)((char *)this + 17520));
  OZChannelQuad::~OZChannelQuad((OZChannelQuad *)((char *)this + 14568));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 14416));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 14264));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 14112));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 13960));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 13808));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZChannelColorNoAlpha *)((char *)this + 12800));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 12672));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 12512));
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)((char *)this + 12256));
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)((char *)this + 12000));
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)((char *)this + 11744));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 11592));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 11464));
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)((char *)this + 11208));
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)((char *)this + 10952));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10800));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10648));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10496));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 10368));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 10216));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 10064));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 9936));
  OZFolderElementShadows::~OZFolderElementShadows((OZFolderElementShadows *)((char *)this + 9352));
  OZLightingFolder::~OZLightingFolder((OZLightingFolder *)((char *)this + 8384));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 8232));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 8080));
  OZChannelEnum::~OZChannelEnum((OZChannelEnum *)((char *)this + 7824));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 7672));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 7520));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 7368));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 7216));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 7088));
  OZChannelBlendMode::~OZChannelBlendMode((OZChannelBlendMode *)((char *)this + 6832));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 6680));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 6552));
  OZChannelBase::setRangeName(v2, v11);

  OZTransformNode::~OZTransformNode((OZTransformNode *)this);
}

uint64_t OZElement::operator=(uint64_t a1, const void *a2)
{
  OZTransformNode::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  uint64_t v6 = v4 + 18744;
  uint64_t v7 = v4 + 13800;
  OZChannelFolder::operator=(a1 + 6552);
  OZChannelBase::operator=(a1 + 6680, (uint64_t)(v5 + 6680));
  OZChannelBase::operator=(a1 + 6832, (uint64_t)(v5 + 6832));
  OZChannelFolder::operator=(a1 + 7088);
  OZChannelBase::operator=(a1 + 7824, (uint64_t)(v5 + 7824));
  OZChannelBase::operator=(a1 + 7216, (uint64_t)(v5 + 7216));
  OZChannelBase::operator=(a1 + 7368, (uint64_t)(v5 + 7368));
  OZChannelBase::operator=(a1 + 7520, (uint64_t)(v5 + 7520));
  OZChannelBase::operator=(a1 + 7672, (uint64_t)(v5 + 7672));
  OZChannelBase::operator=(a1 + 8080, (uint64_t)(v5 + 8080));
  OZChannelBase::operator=(a1 + 8232, (uint64_t)(v5 + 8232));
  OZChannelBase::operator=(a1 + 10064, (uint64_t)(v5 + 10064));
  OZChannelFolder::operator=(a1 + 9936);
  OZChannelBase::operator=(a1 + 10064, (uint64_t)(v5 + 10064));
  OZChannelBase::operator=(a1 + 10216, (uint64_t)(v5 + 10216));
  OZChannelFolder::operator=(a1 + 10368);
  OZChannelBase::operator=(a1 + 10496, (uint64_t)(v5 + 10496));
  OZChannelBase::operator=(a1 + 10648, (uint64_t)(v5 + 10648));
  OZChannelBase::operator=(a1 + 10800, (uint64_t)(v5 + 10800));
  OZChannelBase::operator=(a1 + 10952, (uint64_t)(v5 + 10952));
  OZChannelFolder::operator=(a1 + 11464);
  OZChannelBase::operator=(a1 + 11592, (uint64_t)(v5 + 11592));
  OZChannelBase::operator=(a1 + 11744, (uint64_t)(v5 + 11744));
  OZChannelBase::operator=(a1 + 12000, (uint64_t)(v5 + 12000));
  OZChannelBase::operator=(a1 + 12256, (uint64_t)(v5 + 12256));
  OZChannelBase::operator=(a1 + 12512, (uint64_t)(v5 + 12512));
  OZChannelFolder::operator=(a1 + 12672);
  OZChannelFolder::operator=(a1 + 12800);
  OZChannelBase::operator=(a1 + 12936, (uint64_t)(v5 + 12936));
  OZChannelBase::operator=(a1 + 13088, (uint64_t)(v5 + 13088));
  OZChannelBase::operator=(a1 + 13240, (uint64_t)(v5 + 13240));
  OZChannelBase::operator=(a1 + 13392, (uint64_t)(v5 + 13392));
  OZChannelBase::operator=(a1 + 13544, (uint64_t)(v5 + 13544));
  *(unsigned char *)(a1 + 13800) = *v7;
  OZChannelBase::operator=(a1 + 13808, (uint64_t)(v5 + 13808));
  OZChannelBase::operator=(a1 + 13960, (uint64_t)(v5 + 13960));
  OZChannelBase::operator=(a1 + 14112, (uint64_t)(v5 + 14112));
  OZChannelBase::operator=(a1 + 14264, (uint64_t)(v5 + 14264));
  OZChannelBase::operator=(a1 + 14416, (uint64_t)(v5 + 14416));
  OZChannelFolder::operator=(a1 + 14568);
  OZChannelPosition::operator=(a1 + 14704, (uint64_t)(v5 + 14704));
  OZChannelPosition::operator=(a1 + 15408, (uint64_t)(v5 + 15408));
  OZChannelPosition::operator=(a1 + 16112, (uint64_t)(v5 + 16112));
  OZChannelPosition::operator=(a1 + 16816, (uint64_t)(v5 + 16816));
  OZChannelFolder::operator=(a1 + 17520);
  OZChannelBase::operator=(a1 + 17656, (uint64_t)(v5 + 17656));
  OZChannelBase::operator=(a1 + 17808, (uint64_t)(v5 + 17808));
  OZChannelBase::operator=(a1 + 17960, (uint64_t)(v5 + 17960));
  OZChannelBase::operator=(a1 + 18112, (uint64_t)(v5 + 18112));
  OZChannelFolder::operator=(a1 + 18264);
  *(void *)(a1 + 18392) = *((void *)v5 + 2299);
  *(_DWORD *)(a1 + 18400) = *((_DWORD *)v7 + 1150);
  OZChanSceneNodeRef::operator=(a1 + 18560, (uint64_t)(v5 + 18560));
  *(_OWORD *)(a1 + 18720) = *((_OWORD *)v5 + 1170);
  OZLightingFolder::operator=(a1 + 8384, (uint64_t)(v5 + 8384));
  uint64_t result = OZFolderElementShadows::operator=(a1 + 9352, (uint64_t)(v5 + 9352));
  *(_WORD *)(a1 + 18744) = *v6;
  return result;
}

CGColorSpace **OZElement::copyAtTime(OZElement *this, const OZSceneNode *a2, CMTime *a3)
{
  __n128 v4 = a2;
  CMTime v56 = *a3;
  v6.n128_f64[0] = OZTransformNode::copyAtTime((OZTransformNode *)this, a2, &v56);
  if (v4) {
  int v7 = (*(uint64_t (**)(const OZSceneNode *, __n128))(*(void *)v4 + 1608))(v4, v6);
  }
  OZChannelBase::enable((OZChannelBase *)((char *)this + 17520), v7, 0);
  int v8 = (*(uint64_t (**)(const OZSceneNode *))(*(void *)v4 + 1600))(v4);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 14568), v8, 0);
  uint64_t v9 = (*(uint64_t (**)(const OZSceneNode *))(*(void *)v4 + 1624))(v4);
  (*(void (**)(OZElement *, uint64_t, unsigned char *))(*(void *)this + 1744))(this, v9, v55);
  int isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)v4 + 9936), 0, 1);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 9936), isEnabled, 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 6680), 0);
  OZChannelBase::reset((OZChannelBase *)this + 61, 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 7824), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 7216), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 7368), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 7520), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 7672), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 8080), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 8232), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 10064), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 10216), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 10496), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 10648), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 10800), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 10952), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 12800), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 13808), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 13960), 0);
  OZChannelBase::reset((OZChannelBase *)this + 126, 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 14264), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 14416), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 14568), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 17520), 0);
  OZLightingFolder::reset((OZLightingFolder *)((char *)this + 8384), 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 6680), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 6680), a3, v11, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 6832), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 6832), a3, v12, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 7824), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 7824), a3, v13, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 7216), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 7216), a3, v14, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 7368), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 7368), a3, v15, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 7520), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 7520), a3, v16, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 7672), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 7672), a3, v17, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 8080), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 8080), a3, v18, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 8232), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 8232), a3, v19, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 10064), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 10064), a3, v20, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 10216), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 10216), a3, v21, 0);
  int v22 = OZChannelBase::isEnabled((OZChannelBase *)((char *)v4 + 10368), 1, 1);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 10368), v22, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 10496), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 10496), a3, v23, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 10648), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 10648), a3, v24, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 10800), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 10800), a3, v25, 0);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)v4 + 10952), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 10952), a3, (double)ValueAsInt, 0);
  int v27 = OZChannel::getValueAsInt((OZChannel *)((char *)v4 + 11592), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 11592), a3, (double)v27, 0);
  int v28 = OZChannel::getValueAsInt((OZChannel *)((char *)v4 + 11744), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 11744), a3, (double)v28, 0);
  int v29 = OZChannel::getValueAsInt((OZChannel *)((char *)v4 + 12000), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 12000), a3, (double)v29, 0);
  int v30 = OZChannel::getValueAsInt((OZChannel *)((char *)v4 + 12256), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 12256), a3, (double)v30, 0);
  int v31 = OZChannel::getValueAsInt((OZChannel *)((char *)v4 + 12512), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 12512), a3, (double)v31, 0);
  PCColor::PCColor(&v54);
  OZChannelColorNoAlpha::getColor((const OZSceneNode *)((char *)v4 + 12800), a3, &v54, 0.0);
  OZChannelColorNoAlpha::setColor((OZChannelColorNoAlpha *)((char *)this + 12800), a3, &v54, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 13808), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 13808), a3, v32, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 13960), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 13960), a3, v33, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 14112), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 14112), a3, v34, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 14264), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 14264), a3, v35, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 14416), a3, 0.0);
  OZChannel::setValue((OZChannel *)((char *)this + 14416), a3, v36, 0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 14840), a3, 0.0);
  double v38 = v37;
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 14992), a3, 0.0);
  OZChannelPosition::setPosition((OZChannelPosition *)((char *)this + 14704), a3, v38, v39);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 15544), a3, 0.0);
  double v41 = v40;
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 15696), a3, 0.0);
  OZChannelPosition::setPosition((OZChannelPosition *)((char *)this + 15408), a3, v41, v42);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 16248), a3, 0.0);
  double v44 = v43;
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 16400), a3, 0.0);
  OZChannelPosition::setPosition((OZChannelPosition *)((char *)this + 16112), a3, v44, v45);
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 16952), a3, 0.0);
  double v47 = v46;
  OZChannel::getValueAsDouble((OZChannel *)((char *)v4 + 17104), a3, 0.0);
  OZChannelPosition::setPosition((OZChannelPosition *)((char *)this + 16816), a3, v47, v48);
  double v52 = 0.0;
  double v53 = 0.0;
  double v50 = 0.0;
  double v51 = 0.0;
  OZChannelCrop::getValue((const OZSceneNode *)((char *)v4 + 17520), a3, &v53, &v52, &v51, &v50, 0.0);
  OZChannelCrop::setValue((OZChannelCrop *)((char *)this + 17520), a3, v53, v52, v51, v50);
  *((void *)this + 2299) = *((void *)v4 + 2299);
  *((_DWORD *)this + 4600) = *((_DWORD *)v4 + 4600);
  OZChanSceneNodeRef::operator=((uint64_t)this + 18560, (uint64_t)v4 + 18560);
  *((_OWORD *)this + 1170) = *((_OWORD *)v4 + 1170);
  (*(void (**)(void))(*((void *)this + 1048) + 712))();
  (*(void (**)(char *, uint64_t, CMTime *))(*((void *)this + 1169) + 720))((char *)this + 9352, (uint64_t)v4 + 9352, a3);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v54.var1._obj);
}

void sub_1B7BCF348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,CGColorSpace *a37)
{
}

uint64_t OZElement::isLit(OZElement *this, const OZRenderParams *a2)
{
  if (!*((unsigned char *)a2 + 514)) {
    return 0;
  }
  CMTime v7 = *(CMTime *)a2;
  uint64_t result = OZChannel::getValueAsInt((OZChannel *)this + 56, &v7, 0.0);
  if (result == 2) {
    return 0;
  }
  if (result == 1) {
    return result;
  }
  if (result) {
    return 0;
  }
  uint64_t v5 = (const void *)*((void *)this + 120);
  if (v5
  {
    return (*(uint64_t (**)(void *, const OZRenderParams *))(*(void *)v6 + 1840))(v6, a2);
  }
  else
  {
    return 1;
  }
}

uint64_t OZElement::canBeExported(OZElement *this)
{
  return 1;
}

uint64_t OZElement::isFreezable(OZElement *this)
{
  return 0;
}

const void *OZElement::getFreezeFootage(OZElement *this)
{
  uint64_t result = OZChanSceneNodeRef::getNode((OZChannelBase *)((char *)this + 18560));
  if (result)
  {
  }
  return result;
}

uint64_t OZElement::hasValidFreezeFootage(OZElement *this)
{
  return 0;
}

uint64_t OZElement::hasEnabledMasks(OZElement *this)
{
  if ((*((unsigned char *)this + 1024) & 4) != 0) {
    return 0;
  }
  uint64_t v1 = (char *)this + 18408;
  uint64_t v2 = *((void *)this + 2302);
  if ((OZElement *)v2 == (OZElement *)((char *)this + 18408)) {
    return 0;
  }
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(*(void *)(v2 + 16) + 16) + 24))();
    if (result) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while ((char *)v2 != v1);
  return result;
}

uint64_t OZElement::hasActiveMasks(OZElement *this, const OZRenderState *a2)
{
  uint64_t v2 = (char *)this + 18408;
  uint64_t v3 = *((void *)this + 2302);
  if ((OZElement *)v3 == (OZElement *)((char *)this + 18408)) {
    return 0;
  }
  do
  {
    uint64_t v5 = *(void *)(v3 + 16);
    int64_t var3 = a2->var0.var3;
    long long v7 = *(_OWORD *)&a2->var0.var0;
    uint64_t result = (*(uint64_t (**)(uint64_t, long long *, void))(*(void *)(v5 + 16) + 104))(v5 + 16, &v7, 0);
    if (result) {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 8);
  }
  while ((char *)v3 != v2);
  return result;
}

uint64_t OZElement::hasStencilMask(OZElement *this)
{
  if ((*((unsigned char *)this + 1024) & 4) != 0) {
    return 0;
  }
  uint64_t v1 = (char *)this + 18408;
  uint64_t v2 = *((void *)this + 2302);
  if ((OZElement *)v2 == (OZElement *)((char *)this + 18408)) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = *(void **)(v2 + 16);
    __n128 v4 = v3
    BOOL v5 = !(*(unsigned int (**)(void *, void, uint64_t))(v3[2] + 24))(v3 + 2, 0, 1) || v4 == 0;
    if (!v5 && ((*(uint64_t (**)(void *))(*(void *)v4 + 1248))(v4) & 1) != 0) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 8);
    if ((char *)v2 == v1) {
      return 0;
    }
  }
  return 1;
}

OZScene *OZElement::addMaskAfter(OZElement *this, OZSceneNode *a2, OZSceneNode *a3)
{
  if (a3)
  {
    __n128 v6 = (char *)this + 18408;
    for (uint64_t i = *((void *)this + 2302); (char *)i != v6; uint64_t i = *(void *)(i + 8))
    {
      if (*(OZSceneNode **)(i + 16) == a3)
      {
        if ((char *)i == v6) {
          break;
        }
        int v8 = *(uint64_t **)(i + 8);
        uint64_t v9 = operator new(0x18uLL);
        PCString v9[2] = a2;
        uint64_t v10 = *v8;
        *(void *)(v10 + 8) = v9;
        void *v9 = v10;
        *int v8 = (uint64_t)v9;
        v9[1] = v8;
        goto LABEL_9;
      }
    }
  }
  double v11 = operator new(0x18uLL);
  double v12 = (void *)*((void *)this + 2302);
  void *v11 = (char *)this + 18408;
  v11[1] = v12;
  v11[2] = a2;
  *double v12 = v11;
  *((void *)this + 2302) = v11;
LABEL_9:
  ++*((void *)this + 2303);
  if (a3)
  {
    double v13 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a3 + 640))(a3);
    double v14 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
    OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 18432), v13, v14);
  }
  else
  {
    double v15 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
    OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 18432), v15);
  }
  (*(void (**)(OZSceneNode *, OZElement *))(*(void *)a2 + 256))(a2, this);
  (*(void (**)(OZSceneNode *))(*(void *)a2 + 1040))(a2);
  uint64_t result = (OZScene *)*((void *)this + 121);
  if (result)
  {
    OZScene::registerNode(result, a2);
    uint64_t v17 = *((void *)this + 121);
    return (OZScene *)OZScene::addAllDependencies(v17, a2);
  }
  return result;
}

OZScene *OZElement::addMaskBefore(OZElement *this, OZSceneNode *a2, OZSceneNode *a3)
{
  __n128 v6 = (uint64_t *)((char *)this + 18408);
  if (a3)
  {
    for (uint64_t i = *((void *)this + 2302); (uint64_t *)i != v6; uint64_t i = *(void *)(i + 8))
    {
      if (*(OZSceneNode **)(i + 16) == a3)
      {
        __n128 v6 = (uint64_t *)i;
        break;
      }
    }
  }
  int v8 = operator new(0x18uLL);
  v8[2] = a2;
  uint64_t v9 = *v6;
  *(void *)(v9 + 8) = v8;
  *int v8 = v9;
  *__n128 v6 = (uint64_t)v8;
  v8[1] = v6;
  ++*((void *)this + 2303);
  if (a3)
  {
    uint64_t v10 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a3 + 640))(a3);
    double v11 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
    OZChannelFolder::insertDescendantBefore((OZChannelFolder *)((char *)this + 18432), v10, v11);
  }
  else
  {
    double v12 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 18432), v12);
  }
  (*(void (**)(OZSceneNode *, OZElement *))(*(void *)a2 + 256))(a2, this);
  (*(void (**)(OZSceneNode *))(*(void *)a2 + 1040))(a2);
  uint64_t result = (OZScene *)*((void *)this + 121);
  if (result)
  {
    OZScene::registerNode(result, a2);
    uint64_t v14 = *((void *)this + 121);
    return (OZScene *)OZScene::addAllDependencies(v14, a2);
  }
  return result;
}

OZChannelFolder *OZElement::removeMask(OZElement *this, OZSceneNode *a2)
{
  __n128 v4 = (OZSceneNode **)((char *)this + 18408);
  for (uint64_t i = (OZSceneNode **)*((void *)this + 2302); i != v4; uint64_t i = (OZSceneNode **)i[1])
  {
    if (i[2] == a2)
    {
      if (i != v4)
      {
        (*(void (**)(OZSceneNode *, void))(*(void *)a2 + 256))(a2, 0);
        (*(void (**)(OZSceneNode *))(*(void *)a2 + 1048))(a2);
        __n128 v6 = *i;
        *((void *)v6 + OZDocument::~OZDocument(this - 1) = i[1];
        *(void *)i[1] = v6;
        --*((void *)this + 2303);
        operator delete(i);
        long long v7 = (OZScene *)*((void *)this + 121);
        if (v7)
        {
          OZScene::unregisterNode(v7, a2);
          OZScene::removeAllDependencies(*((OZScene **)this + 121), a2);
        }
      }
      break;
    }
  }
  int v8 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);

  return OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 18432), v8);
}

void *OZElement::getMasks(uint64_t a1, void *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1104))(a1);
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1112))(a1);
  if ((void *)v4 != result)
  {
    __n128 v6 = result;
    long long v7 = (void *)*a2;
    uint64_t v8 = a2[2] + 1;
    do
    {
      uint64_t v9 = *(const void **)(v4 + 16);
      if (!v9
      {
        exception = (PCAssertionException *)__cxa_allocate_exception(0x40uLL);
        PCAssertionException::PCAssertionException(exception);
      }
      uint64_t result = operator new(0x18uLL);
      uint64_t v10 = *(void *)(v4 + 16);
      result[1] = a2;
      result[2] = v10;
      *uint64_t result = v7;
      v7[1] = result;
      *a2 = result;
      a2[2] = v8;
      uint64_t v4 = *(void *)(v4 + 8);
      ++v8;
      long long v7 = result;
    }
    while ((void *)v4 != v6);
  }
  return result;
}

void sub_1B7BCFE18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void PCAssertionException::PCAssertionException(PCAssertionException *this)
{
  PCException::PCException(this);
  *uint64_t v1 = &unk_1F111C8F8;
}

OZChannelBase *OZElement::setIsMask(OZElement *this)
{
  OZSceneNode::setIsMask((OZSceneNode *)this);
  if (*((void *)this + 1590)) {
    OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 320), (OZChannelBase *)((char *)this + 12672));
  }

  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 11208), 2, 0);
}

char *OZElement::clearIsMask(OZElement *this)
{
  uint64_t result = (char *)OZSceneNode::clearIsMask((OZSceneNode *)this);
  if (!*((void *)this + 1590))
  {
    return OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 320), (const OZChannelBase *)((char *)this + 6552), (OZChannelBase *)((char *)this + 12672));
  }
  return result;
}

uint64_t OZElement::acceptsShapeMasks(OZElement *this)
{
  return OZSceneNode::isDescendantOf360Group((uint64_t)this) ^ 1;
}

void OZElement::getImageBoundsWithDropShadow(uint64_t a1, float64x2_t *a2, const CMTime *a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 1488))(a1);

  OZElement::expandBoundsToIncludeDropShadow(a1, a2, a3);
}

void OZElement::expandBoundsToIncludeDropShadow(uint64_t a1, float64x2_t *a2, const CMTime *a3)
{
  if (OZChannelBase::isEnabled((OZChannelBase *)(a1 + 12672), 0, 1))
  {
    float64x2_t v6 = a2[1];
    v34[0] = *a2;
    v34[1] = v6;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 14112), a3, 0.0);
    double v14 = v7;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 14264), a3, 0.0);
    double v9 = v8;
    if (OZChannel::getValueAsInt((OZChannel *)(a1 + 14416), a3, 0.0))
    {
      OZRenderState::OZRenderState(&v33);
      *(_OWORD *)&v33.var0.int64_t var0 = *(_OWORD *)&a3->value;
      v33.var0.int64_t var3 = a3->epoch;
      uint64_t v31 = 0;
      double v32 = 0.0;
      uint64_t v30 = 0;
      (*(void (**)(uint64_t, double *, uint64_t *, uint64_t *, OZRenderState *, uint64_t))(*(void *)a1 + 1312))(a1, &v32, &v31, &v30, &v33, 1);
      double v10 = v32;
      if (v32 <= 0.0) {
        double v10 = 1.0;
      }
      double v14 = v14 / v10;
      uint64_t v29 = 0x3FF0000000000000;
      uint64_t v26 = 0x3FF0000000000000;
      uint64_t v23 = 0x3FF0000000000000;
      uint64_t v20 = 0x3FF0000000000000;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      (*(void (**)(uint64_t, uint64_t *, OZRenderState *))(*(void *)a1 + 1256))(a1, &v20, &v33);
      memset(v15, 0, sizeof(v15));
      int v16 = 4;
      long long v17 = 0u;
      long long v18 = 0u;
      uint64_t v19 = 0;
      PCMatrix44Tmpl<double>::getTransformation((long long *)&v20, (uint64_t)v15);
    }
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 13960), a3, 0.0);
    if (v11.f64[0] > 0.0) {
      PGImaging::gaussianBlurRect(0, a2, v34, v11);
    }
    __double2 v13 = __sincos_stret(v9);
    v12.f64[0] = v13.__cosval;
    v12.f64[1] = v13.__sinval;
    v34[0] = vaddq_f64(vmulq_n_f64(v12, v14), v34[0]);
    PCRect<double>::operator|=(a2, v34);
  }
}

BOOL OZElement::isDropShadowFixedSource(OZElement *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 14416), a2, 0.0) != 0;
}

uint64_t non-virtual thunk to'OZElement::dirty(OZElement *this)
{
  return OZSceneNode::dirty((OZSceneNode *)((char *)this - 16));
}

void *OZElement::hitCheck(void *a1, float32x2_t *a2, long long *a3, uint64_t a4, double *a5, char a6)
{
  float64x2_t v11 = a1;
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if ((a6 & 4) == 0 || ((*(uint64_t (**)(void *))(*a1 + 680))(a1) & 1) == 0)
  {
    if ((a6 & 2) == 0
      || (long long v50 = *a3,
          uint64_t v51 = *((void *)a3 + 2),
          (*(unsigned int (**)(void *, long long *, uint64_t, uint64_t, uint64_t))(v11[2] + 104))(v11 + 2, &v50, 1, 1, 1)))
    {
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v52 = 0u;
      int v12 = (*(uint64_t (**)(void *))(*v11 + 1600))(v11);
      int v13 = *((void **)a3 + 7) == v11 ? 0 : v12;
      if (v13 == 1)
      {
        (*(void (**)(void *, long long *, long long *, long long *, long long *, long long *))(*v11 + 1720))(v11, a3, &v55, &v54, &v53, &v52);
      }
      else
      {
        *(_OWORD *)double v42 = 0uLL;
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)&v42[16] = _Q0;
        (*(void (**)(void *, unsigned char *, long long *))(*v11 + 1488))(v11, v42, a3);
        *(void *)&long long v52 = *(void *)v42;
        *((double *)&v52 + OZDocument::~OZDocument(this - 1) = *(double *)&v42[8] + *(double *)&v42[24];
        *(double *)&long long v53 = *(double *)v42 + *(double *)&v42[16];
        *((double *)&v53 + OZDocument::~OZDocument(this - 1) = *(double *)&v42[8] + *(double *)&v42[24];
        *(double *)&long long v54 = *(double *)v42 + *(double *)&v42[16];
        *((void *)&v54 + OZDocument::~OZDocument(this - 1) = *(void *)&v42[8];
        long long v55 = *(_OWORD *)v42;
      }
      long long v56 = v52;
      uint64_t v49 = 0x3FF0000000000000;
      uint64_t v46 = 0x3FF0000000000000;
      uint64_t v43 = 0x3FF0000000000000;
      *(void *)double v42 = 0x3FF0000000000000;
      memset(&v42[8], 0, 32);
      long long v44 = 0u;
      long long v45 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      (*(void (**)(void *, unsigned char *, long long *))(*v11 + 1256))(v11, v42, a3);
      float64x2_t v40 = vcvtq_f64_f32(*a2);
      uint64_t v41 = 0;
      (*(void (**)(double *__return_ptr, void *, float64x2_t *, uint64_t, long long *, void))(*v11 + 1384))(v36, v11, &v40, a4, a3, 0);
      double v18 = v37 * v37 + v38 * v38 + v39 * v39;
      if (v18 <= -0.0000001 || v18 >= 0.0000001)
      {
        memset(v33, 0, sizeof(v33));
        uint64_t v34 = 0;
        unint64_t v35 = 0xBFF0000000000000;
        PCIntersectRayWithPlane(v36, (double *)v33, a5);
        if (v20)
        {
          uint64_t v21 = 0;
          char v22 = 0;
          double v23 = a5[1];
          long long v24 = (double *)&v52 + 1;
          LODWORD(v25) = 4;
          do
          {
            unsigned int v26 = v25;
            uint64_t v25 = v21;
            double v27 = *v24;
            double v28 = *((double *)&v52 + 2 * v26 + 1);
            _NF = *v24 <= v23 && v23 < v28;
            if (_NF || (v23 < v27 ? (BOOL v30 = v28 > v23) : (BOOL v30 = 1), !v30))
            {
              if (*a5 < *(v24 - 1) + (v23 - v27) * (*((double *)&v52 + 2 * v26) - *(v24 - 1)) / (v28 - v27)) {
                v22 ^= 1u;
              }
            }
            ++v21;
            v24 += 2;
          }
          while (v25 != 4);
          if (v22)
          {
            PCMatrix44Tmpl<double>::transform<double>((double *)v42, a5, a5);
            return v11;
          }
        }
        else
        {
          *(void *)&v31[0] = v52;
          *(void *)&v31[1] = v53;
          v31[2] = *((double *)&v54 + 1);
          v31[3] = *((double *)&v52 + 1);
          long long v32 = xmmword_1B8380060;
          if (PCRayIntersectsBox(v36, v31, a5))
          {
            PCMatrix44Tmpl<double>::transform<double>((double *)v42, a5, a5);
            return v11;
          }
        }
      }
    }
  }
  return 0;
}

BOOL OZElement::hitCheck(uint64_t a1, double *a2, uint64_t a3, const LiCamera *a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  float64x2_t v43 = 0u;
  float64x2_t v44 = 0u;
  float64x2_t v41 = 0u;
  float64x2_t v42 = 0u;
  *(void *)&v38[40] = 0x3FF0000000000000;
  *(void *)double v38 = 0x3FF0000000000000;
  *(void *)&v35[40] = 0x3FF0000000000000;
  *(void *)unint64_t v35 = 0x3FF0000000000000;
  memset(&v35[8], 0, 32);
  long long v36 = 0u;
  long long v37 = 0u;
  memset(&v38[8], 0, 32);
  (*(void (**)(void))(*(void *)a1 + 1256))();
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1600))(a1);
  if (*(void *)(a3 + 56) == a1) {
    int v9 = 0;
  }
  else {
    int v9 = v8;
  }
  if (v9 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, float64x2_t *, float64x2_t *, float64x2_t *, float64x2_t *))(*(void *)a1 + 1720))(a1, a3, &v44, &v43, &v42, &v41);
  }
  else
  {
    float64x2_t v33 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)uint64_t v34 = _Q0;
    (*(void (**)(uint64_t, float64x2_t *, uint64_t))(*(void *)a1 + 1488))(a1, &v33, a3);
    v41.f64[0] = v33.f64[0];
    v41.f64[1] = v33.f64[1] + v34[1];
    v42.f64[0] = v33.f64[0] + v34[0];
    v42.f64[1] = v33.f64[1] + v34[1];
    v43.f64[0] = v33.f64[0] + v34[0];
    v43.f64[1] = v33.f64[1];
    float64x2_t v44 = v33;
  }
  double v15 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  OZScene::calcWorldToFilmSpaceMatrixForCamera(v15, a4, &v33);
  long long v29 = v37;
  long long v30 = *(_OWORD *)v38;
  long long v31 = *(_OWORD *)&v38[16];
  long long v32 = *(_OWORD *)&v38[32];
  long long v25 = *(_OWORD *)v35;
  long long v26 = *(_OWORD *)&v35[16];
  long long v27 = *(_OWORD *)&v35[32];
  long long v28 = v36;
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v25, v33.f64);
  double v16 = *((double *)&v32 + 1) + v41.f64[0] * *(double *)&v31 + v41.f64[1] * *((double *)&v31 + 1);
  double v17 = (*((double *)&v28 + 1) + v41.f64[0] * *(double *)&v27 + v41.f64[1] * *((double *)&v27 + 1)) / v16;
  v41.f64[0] = (*((double *)&v26 + 1) + v41.f64[0] * *(double *)&v25 + v41.f64[1] * *((double *)&v25 + 1)) / v16;
  v41.f64[1] = v17;
  double v18 = v42.f64[0];
  double v19 = *((double *)&v32 + 1) + *(double *)&v31 * v42.f64[0] + *((double *)&v31 + 1) * v42.f64[1];
  v42.f64[0] = (*((double *)&v26 + 1) + *(double *)&v25 * v42.f64[0] + *((double *)&v25 + 1) * v42.f64[1]) / v19;
  v42.f64[1] = (*((double *)&v28 + 1) + *(double *)&v27 * v18 + *((double *)&v27 + 1) * v42.f64[1]) / v19;
  double v20 = v43.f64[0];
  double v21 = *((double *)&v32 + 1) + *(double *)&v31 * v43.f64[0] + *((double *)&v31 + 1) * v43.f64[1];
  v43.f64[0] = (*((double *)&v26 + 1) + *(double *)&v25 * v43.f64[0] + *((double *)&v25 + 1) * v43.f64[1]) / v21;
  v43.f64[1] = (*((double *)&v28 + 1) + *(double *)&v27 * v20 + *((double *)&v27 + 1) * v43.f64[1]) / v21;
  double v22 = v44.f64[0];
  double v23 = *((double *)&v32 + 1) + *(double *)&v31 * v44.f64[0] + *((double *)&v31 + 1) * v44.f64[1];
  v44.f64[0] = (*((double *)&v26 + 1) + *(double *)&v25 * v44.f64[0] + *((double *)&v25 + 1) * v44.f64[1]) / v23;
  v44.f64[1] = (*((double *)&v28 + 1) + *(double *)&v27 * v22 + *((double *)&v27 + 1) * v44.f64[1]) / v23;
  float64x2_t v39 = v42;
  float64x2_t v40 = v41;
  if (PCRect<double>::clipLine(a2, &v40, v39.f64)) {
    return 1;
  }
  float64x2_t v39 = v43;
  float64x2_t v40 = v42;
  if (PCRect<double>::clipLine(a2, &v40, v39.f64)) {
    return 1;
  }
  float64x2_t v39 = v44;
  float64x2_t v40 = v43;
  if (PCRect<double>::clipLine(a2, &v40, v39.f64)) {
    return 1;
  }
  float64x2_t v39 = v41;
  float64x2_t v40 = v44;
  return PCRect<double>::clipLine(a2, &v40, v39.f64);
}

uint64_t OZElement::getDescendantAtIndex(OZElement *this, int a2)
{
  if (!*((void *)this + 2303)) {
    return OZSceneNode::getDescendantAtIndex((OZSceneNode *)this, a2);
  }
  uint64_t v2 = (char *)this + 18408;
  uint64_t v3 = (char *)*((void *)this + 2302);
  BOOL v4 = v3 != (char *)this + 18408;
  if (v3 != (char *)this + 18408 && a2 != 0)
  {
    int v6 = a2 - 1;
    do
    {
      uint64_t v3 = (char *)*((void *)v3 + 1);
      BOOL v8 = v6-- != 0;
      BOOL v4 = v3 != v2;
    }
    while (v3 != v2 && v8);
  }
  if (!v4) {
    return OZSceneNode::getDescendantAtIndex((OZSceneNode *)this, a2);
  }
  uint64_t v9 = *((void *)v3 + 2);
  if (v9) {
    return v9 + 16;
  }
  else {
    return 0;
  }
}

uint64_t OZElement::canIsolateInViewer(OZElement *this)
{
  uint64_t result = (*(uint64_t (**)(OZElement *))(*(void *)this + 272))(this);
  if (result)
  {
    uint64_t v3 = (OZScene *)(*(uint64_t (**)(OZElement *))(*(void *)this + 272))(this);
    int v4 = OZScene::has3DObjects(v3, 0);
    uint64_t result = 0;
    if (v4) {
      return (*((unsigned char *)this + 1024) & 8) == 0;
    }
  }
  return result;
}

uint64_t OZElement::writeBody(OZElement *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZElementScope);
  uint64_t v10 = *((unsigned int *)this + 4598);
  if (v10)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 400);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v10);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  if (*(void *)&vorr_s8(*(int8x8_t *)((char *)this + 18720), (int8x8_t)*(_OWORD *)&vextq_s8(*((int8x16_t *)this + 1170), *((int8x16_t *)this + 1170), 8uLL))&& ((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0)
  {
    PCHash128::getString((PCHash128 *)((char *)this + 18720), &v16);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 401);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v16);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCString::~PCString(&v16);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  if (a4)
  {
    for (uint64_t i = *((void *)this + 2302); (OZElement *)i != (OZElement *)((char *)this + 18408); uint64_t i = *(void *)(i + 8))
    {
      uint64_t v12 = *(void *)(i + 16);
      if (!OZChannelBase::testFlag((OZChannelBase *)(v12 + 56), 8))
      {
        uint64_t v14 = *(void *)(v12 + 48);
        uint64_t v13 = v12 + 48;
        (*(void (**)(uint64_t, PCSerializerWriteStream *, void))(v14 + 16))(v13, a2, 0);
        (*(void (**)(uint64_t, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v13 + 24))(v13, a2, 0, 1, a5);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      }
    }
  }
  return OZTransformNode::writeBody((OZTransformNode *)this, a2, a3, a4, a5);
}

void sub_1B7BD0E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZElement::writeBody(OZElement *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZElement::writeBody((OZElement *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZElement::parseBegin(OZElement *this, PCSerializerReadStream *a2)
{
  *((_DWORD *)this + 4598) = 0;
  int v4 = (OZChannel *)((char *)this + 11592);
  double DefaultValue = OZChannel::getDefaultValue((OZChannel *)((char *)this + 11592));
  OZChannel::setValue(v4, MEMORY[0x1E4F1FA48], DefaultValue, 0);
  OZTransformNode::parseBegin((OZTransformNode *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZElementScope);
  *((void *)this + 2342) = *((void *)a2 + 13);
  return 1;
}

uint64_t non-virtual thunk to'OZElement::parseBegin(OZElement *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZElement::parseEnd(OZElement *this, PCSerializerReadStream *a2)
{
  if (*((void *)this + 124)) {
    *(void *)(*(void *)(*((void *)this + 122) + 16) + 24) = (char *)this + 6528;
  }
  if (*((_DWORD *)a2 + 26) <= 2u) {
    (*(void (**)(char *, double))(*((void *)this + 1745) + 776))((char *)this + 13960, 2.0);
  }
  return 1;
}

uint64_t non-virtual thunk to'OZElement::parseEnd(OZElement *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZElement::parseElement(OZElement *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCSharedCount::PCSharedCount(&v19);
  *(void *)double v18 = 0;
  OZTransformNode::parseElement((OZTransformNode *)this, a2, a3);
  int v6 = *((_DWORD *)a3 + 2);
  switch(v6)
  {
    case 70:
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v18);
      PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v19);
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v18[1]);
      double v7 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v18[0]);
      if (v7)
      {
        if (v8)
        {
          uint64_t v9 = (*(uint64_t (**)(void *, PCSharedCount *, void))(*(void *)v8 + 168))(v8, &v19, v18[1]);
          uint64_t v10 = v9;
          if (v9)
          {
            OZChannelBase::setID((OZChannelBase *)(v9 + 56), v18[1]);
            (*(void (**)(uint64_t, OZElement *))(*(void *)v10 + 256))(v10, this);
            (*(void (**)(uint64_t))(*(void *)v10 + 1040))(v10);
            float64x2_t v11 = operator new(0x18uLL);
            v11[1] = (char *)this + 18408;
            v11[2] = v10;
            uint64_t v12 = *((void *)this + 2301);
            void *v11 = v12;
            *(void *)(v12 + 8) = v11;
            *((void *)this + 230OZDocument::~OZDocument(this - 1) = v11;
            ++*((void *)this + 2303);
            uint64_t v13 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 640))(v10);
            OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 18432), v13);
            uint64_t v14 = (OZScene *)*((void *)this + 121);
            if (v14)
            {
              OZScene::registerNode(v14, (OZSceneNode *)v10);
              OZScene::addAllDependencies(*((void *)this + 121), (OZSceneNode *)v10);
            }
            PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v10 + 48));
          }
        }
      }
      break;
    case 400:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 32))(a3, (char *)this + 18392);
      break;
    case 401:
      PCSharedCount::PCSharedCount(&v17);
      (*(void (**)(PCStreamElement *, PCSharedCount *))(*(void *)a3 + 16))(a3, &v17);
      PCHash128::PCHash128((PCHash128 *)&v16, (const PCString *)&v17);
      *((_OWORD *)this + 1170) = v16;
      PCString::~PCString((PCString *)&v17);
      break;
  }
  PCString::~PCString((PCString *)&v19);
  return 1;
}

void sub_1B7BD1254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, uint64_t a13, PCString a14)
{
}

uint64_t non-virtual thunk to'OZElement::parseElement(OZElement *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

uint64_t OZElement::didFinishLoadingIntoScene(OZElement *this)
{
  OZSceneNode::didFinishLoadingIntoScene((OZSceneNode *)this);

  return OZElement::convertOldColorConversionChannels(this);
}

uint64_t OZElement::convertOldColorConversionChannels(OZElement *this)
{
  uint64_t result = (*(uint64_t (**)(OZElement *))(*(void *)this + 2240))(this);
  if (!result) {
    return result;
  }
  uint64_t v3 = (OZChannel *)((char *)this + 11592);
  uint64_t result = OZChannel::getValueAsUint((OZChannel *)((char *)this + 11592), MEMORY[0x1E4F1FA48], 0.0);
  if (result != 2)
  {
    if (result != 1) {
      return result;
    }
    double v4 = 0.0;
    double v5 = 3.0;
    switch(OZChannel::getValueAsUint((OZChannel *)((char *)this + 11744), MEMORY[0x1E4F1FA48], 0.0))
    {
      case 0u:
        double v5 = (double)(*(int (**)(OZElement *))(*(void *)this + 2232))(this);
        break;
      case 2u:
        double v5 = 0.0;
        goto LABEL_12;
      case 3u:
        double v4 = 1.0;
        double v5 = 1.0;
        break;
      case 5u:
        double v5 = 4.0;
LABEL_12:
        double v4 = 1.0;
        break;
      default:
        break;
    }
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 11744), 138, 0);
    float64x2_t v11 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::setValue((OZChannel *)((char *)this + 12000), MEMORY[0x1E4F1FA48], v4, 0);
    uint64_t v10 = (OZChannel *)((char *)this + 12256);
    uint64_t v9 = v11;
    double v8 = v5;
    goto LABEL_14;
  }
  int v6 = (OZChannel *)((char *)this + 12256);
  int ValueAsInt = OZChannel::getValueAsInt(v6, MEMORY[0x1E4F1FA48], 0.0);
  if (ValueAsInt >= 2)
  {
    double v8 = (double)(ValueAsInt + 1);
    uint64_t v9 = (const CMTime *)MEMORY[0x1E4F1FA48];
    uint64_t v10 = v6;
LABEL_14:
    OZChannel::setValue(v10, v9, v8, 0);
  }
  uint64_t v12 = (const CMTime *)MEMORY[0x1E4F1FA48];

  return OZChannel::setValue(v3, v12, 3.0, 0);
}

uint64_t non-virtual thunk to'OZElement::didFinishLoadingIntoScene(OZElement *this)
{
  uint64_t v1 = (OZElement *)((char *)this - 16);
  OZSceneNode::didFinishLoadingIntoScene((OZSceneNode *)((char *)this - 16));

  return OZElement::convertOldColorConversionChannels(v1);
}

OZElement *OZElement::cachedTexture@<X0>(OZElement *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 2345);
  *a2 = *((void *)this + 2344);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void OZElement::setCachedTexture(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 18752) = v4;
  double v5 = *(std::__shared_weak_count **)(a1 + 18760);
  *(void *)(a1 + 18760) = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(unsigned char *)(a1 + 18745) = 0;
}

uint64_t OZElement::cachedMetalTexture@<X0>(OZElement *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 2346);
  *a2 = result;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t OZElement::setCachedMetalTexture(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 18768);
  uint64_t result = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
      uint64_t result = *a2;
    }
    *(void *)(a1 + 18768) = result;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    }
  }
  *(unsigned char *)(a1 + 18745) = 0;
  return result;
}

uint64_t OZElement::isCachedRenderDirty(OZElement *this)
{
  return *((unsigned __int8 *)this + 18745);
}

OZElement *OZElement::clearCachedRender(OZElement *this)
{
  *((unsigned char *)this + 18745) = 1;
  return this;
}

OZElement *OZElement::cacheRenders(OZElement *this, int a2)
{
  uint64_t v2 = (char *)this + 18744;
  if (a2 && !*v2) {
    *((unsigned char *)this + 18745) = 1;
  }
  *uint64_t v2 = a2;
  return this;
}

uint64_t OZElement::shouldCacheRenders(OZElement *this)
{
  return *((unsigned __int8 *)this + 18744);
}

float OZElement::getDimensions(OZElement *this, float *a2, float *a3, const OZRenderState *a4)
{
  v14[0] = 0;
  v14[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v15 = _Q0;
  (*(void (**)(OZElement *, void *, const OZRenderState *))(*(void *)this + 1488))(this, v14, a4);
  double v11 = *((double *)&v15 + 1);
  float v12 = *(double *)&v15;
  *a2 = v12;
  float result = v11;
  *a3 = result;
  return result;
}

float non-virtual thunk to'OZElement::getDimensions(OZElement *this, float *a2, float *a3, const OZRenderState *a4)
{
  v14[0] = 0;
  v14[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v15 = _Q0;
  (*(void (**)(char *, void *, const OZRenderState *))(*((void *)this - 816) + 1488))((char *)this - 6528, v14, a4);
  double v11 = *((double *)&v15 + 1);
  float v12 = *(double *)&v15;
  *a2 = v12;
  float result = v11;
  *a3 = result;
  return result;
}

float64x2_t OZElement::getImageBoundsWithEffectsAndCrop(void *a1, uint64_t a2, uint64_t a3)
{
  if ((*(uint64_t (**)(void *))(*a1 + 416))(a1)) {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1[123] + 16) + 80))(*(void *)(a1[123] + 16), a2, a3);
  }
  else {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 1520))(a1, a2, a3);
  }
  result.f64[0] = *(float64_t *)(a2 + 16);
  if (result.f64[0] >= 0.0)
  {
    result.f64[0] = *(float64_t *)(a2 + 24);
    if (result.f64[0] >= 0.0)
    {
      if (*(unsigned char *)(a3 + 240))
      {
        OZElement::getMaskBounds(a1, (_OWORD *)a2, a3, (uint64_t)&v24);
        result.f64[0] = v25;
        if (v25 >= 0.0)
        {
          result.f64[0] = v26;
          if (v26 >= 0.0) {
            float64x2_t result = PCRect<double>::operator&=((float64x2_t *)a2, &v24);
          }
        }
      }
      float64_t v23 = 0.0;
      v24.f64[0] = 0.0;
      float64_t v21 = 0.0;
      float64_t v22 = 0.0;
      float64x2_t v7 = 0uLL;
      if (*(unsigned char *)(a3 + 232))
      {
        int v8 = (*(uint64_t (**)(void *, float64x2_t, __n128))(*a1 + 1608))(a1, result, (__n128)0);
        float64x2_t v7 = 0uLL;
        float64x2_t v9 = 0uLL;
        if (v8)
        {
          OZChannelCrop::getValue((OZChannelCrop *)(a1 + 2190), (const CMTime *)a3, v24.f64, &v23, &v22, &v21, 0.0);
          v11.f64[0] = v23;
          v10.f64[0] = v24.f64[0];
          v10.f64[1] = v22;
          __asm { FMOV            V2.2D, #0.5 }
          float64x2_t v17 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
          *(int32x2_t *)&v10.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(v10, _Q2), v17))));
          v11.f64[1] = v21;
          *(int32x2_t *)&v11.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(v11, _Q2), v17))));
          v18.i64[0] = SLODWORD(v11.f64[0]);
          v18.i64[1] = SHIDWORD(v11.f64[0]);
          float64x2_t v7 = vcvtq_f64_s64(v18);
          v18.i64[0] = SLODWORD(v10.f64[0]);
          v18.i64[1] = SHIDWORD(v10.f64[0]);
          float64x2_t v9 = vcvtq_f64_s64(v18);
        }
      }
      else
      {
        float64x2_t v9 = 0uLL;
      }
      double v19 = *(double *)(a2 + 8);
      *(double *)a2 = v9.f64[0] + *(double *)a2;
      *(double *)(a2 + 8) = v9.f64[1] + v19;
      int8x16_t v20 = (int8x16_t)vsubq_f64(*(float64x2_t *)(a2 + 16), vaddq_f64(v7, v9));
      float64x2_t result = (float64x2_t)vbicq_s8(v20, (int8x16_t)vcltzq_f64((float64x2_t)v20));
      *(float64x2_t *)(a2 + 16) = result;
    }
  }
  return result;
}

void OZElement::getMaskBounds(void *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v29 = _Q0;
  *(_OWORD *)(a4 + 16) = _Q0;
  if (a1[2303])
  {
    float v12 = a1 + 2301;
    uint64_t v50 = 0x3FF0000000000000;
    uint64_t v47 = 0x3FF0000000000000;
    uint64_t v44 = 0x3FF0000000000000;
    uint64_t v41 = 0x3FF0000000000000;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    (*(void (**)(void *, uint64_t *))(*a1 + 1264))(a1, &v41);
    uint64_t v13 = (void *)a1[2302];
    if (v13 != v12)
    {
      for (char i = 1; ; char i = 0)
      {
        float64x2_t v39 = 0uLL;
        long long v40 = v29;
        uint64_t v15 = v13[2];
        if (v15)
        {
          if (v16) {
            break;
          }
        }
        if ((*(unsigned char *)(v15 + 1024) & 8) != 0)
        {
          unint64_t v20 = *(void *)(v15 + 8);
          *(_OWORD *)long long v30 = xmmword_1B837FBE0;
          if (OZFactory::isKindOfClass(v20, (int32x4_t *)v30))
          {
            float64_t v21 = (const void *)v13[2];
            if (v21) {
            else
            }
              float64_t v22 = 0;
            uint64_t v24 = v22[25];
            float64_t v23 = (char *)(v22 + 25);
            (*(void (**)(char *, float64x2_t *, uint64_t))(v24 + 1488))(v23, &v39, a3);
            uint64_t v38 = 0x3FF0000000000000;
            uint64_t v35 = 0x3FF0000000000000;
            uint64_t v32 = 0x3FF0000000000000;
            *(void *)long long v30 = 0x3FF0000000000000;
            *(_OWORD *)&v30[8] = 0u;
            long long v31 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            long long v36 = 0u;
            long long v37 = 0u;
            (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)v23 + 1256))(v23, v30, a3);
            PCMatrix44Tmpl<double>::transformRect<double>((double *)v30, v39.f64, (uint64_t)&v39);
            int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v23 + 31784), MEMORY[0x1E4F1FA48], 0.0);
LABEL_21:
            int v25 = ValueAsInt;
            PCMatrix44Tmpl<double>::transformRect<double>((double *)&v41, v39.f64, (uint64_t)&v39);
            switch(v25)
            {
              case 0:
                goto LABEL_16;
              case 1:
                if (i)
                {
                  long long v26 = a2[1];
                  *(_OWORD *)a4 = *a2;
                  *(_OWORD *)(a4 + 16) = v26;
                }
                PCRect<double>::subtract(a4, v39.f64);
                break;
              case 2:
                long long v27 = v40;
                *(float64x2_t *)a4 = v39;
                *(_OWORD *)(a4 + 16) = v27;
                break;
              case 3:
                PCRect<double>::operator&=((float64x2_t *)a4, &v39);
                break;
              default:
                goto LABEL_17;
            }
            goto LABEL_17;
          }
        }
        PCMatrix44Tmpl<double>::transformRect<double>((double *)&v41, v39.f64, (uint64_t)&v39);
LABEL_16:
        PCRect<double>::operator|=((float64x2_t *)a4, &v39);
LABEL_17:
        uint64_t v13 = (void *)v13[1];
        if (v13 == v12) {
          return;
        }
      }
      float64x2_t v17 = v16;
      (*(void (**)(OZImageMask *, float64x2_t *, uint64_t))(*(void *)v16 + 1200))(v16, &v39, a3);
      if ((*(unsigned int (**)(OZImageMask *))(*(void *)v17 + 1248))(v17))
      {
        MaskSource = OZImageMask::getMaskSource(v17);
        if (MaskSource) {
        uint64_t v38 = 0x3FF0000000000000;
        }
        uint64_t v35 = 0x3FF0000000000000;
        uint64_t v32 = 0x3FF0000000000000;
        *(void *)long long v30 = 0x3FF0000000000000;
        *(_OWORD *)&v30[8] = 0u;
        long long v31 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        (*(void (**)(void))(*(void *)MaskSource + 1256))();
        PCMatrix44Tmpl<double>::transformRect<double>((double *)v30, v39.f64, (uint64_t)&v39);
      }
      int ValueAsInt = (*(uint64_t (**)(OZImageMask *))(*(void *)v17 + 1232))(v17);
      goto LABEL_21;
    }
  }
}

float64x2_t OZElement::getBounds(uint64_t a1, float64x2_t *a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 1560))(a1);
  result.f64[0] = a2[1].f64[0];
  if (result.f64[0] >= 0.0)
  {
    result.f64[0] = a2[1].f64[1];
    if (result.f64[0] >= 0.0)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1600))(a1)) {
        BOOL v7 = *(void *)(a3 + 56) == a1;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7 && *(unsigned char *)(a3 + 233) != 0)
      {
        float64x2_t v20 = 0uLL;
        float64x2_t v19 = 0uLL;
        float64x2_t v18 = 0uLL;
        float64x2_t v17 = 0uLL;
        OZElement::getFourCornerPointsInObjectSpace(a1, (CMTime *)a3, a2, v20.f64, v19.f64, &v18, v17.f64);
        int8x16_t v9 = vbslq_s8((int8x16_t)vcgtq_f64(v17, v18), (int8x16_t)v17, (int8x16_t)v18);
        int8x16_t v10 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v9, v19), v9, (int8x16_t)v19);
        int8x16_t v11 = vbslq_s8((int8x16_t)vcgtq_f64((float64x2_t)v10, v20), v10, (int8x16_t)v20);
        int8x16_t v12 = vbslq_s8((int8x16_t)vcgtq_f64(v18, v17), (int8x16_t)v17, (int8x16_t)v18);
        int8x16_t v13 = vbslq_s8((int8x16_t)vcgtq_f64(v19, (float64x2_t)v12), v12, (int8x16_t)v19);
        int8x16_t v14 = vbslq_s8((int8x16_t)vcgtq_f64(v20, (float64x2_t)v13), v13, (int8x16_t)v20);
        int8x16_t v15 = (int8x16_t)vcgtq_f64((float64x2_t)v14, (float64x2_t)v11);
        float64x2_t v16 = (float64x2_t)vbslq_s8(v15, v14, v11);
        float64x2_t result = (float64x2_t)vbslq_s8(v15, v11, v14);
        *a2 = result;
        a2[1] = vsubq_f64(v16, result);
      }
    }
  }
  return result;
}

double OZElement::getFourCornerPointsInObjectSpace(uint64_t a1, CMTime *a2, float64x2_t *a3, double *a4, double *a5, float64x2_t *a6, double *a7)
{
  CMTime v29 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 14840), &v29, 0.0);
  double v14 = v13;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 14992), &v29, 0.0);
  double v15 = a3->f64[1];
  *a4 = v14 + a3->f64[0];
  a4[1] = v16 + v15;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 15544), &v29, 0.0);
  double v18 = v17;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 15696), &v29, 0.0);
  double v19 = a3->f64[1];
  *a5 = v18 + a3->f64[0] + a3[1].f64[0];
  a5[1] = v20 + v19;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 16248), &v29, 0.0);
  float64_t v28 = v21;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 16400), &v29, 0.0);
  v22.f64[0] = v28;
  v22.f64[1] = v23;
  *a6 = vaddq_f64(v22, vaddq_f64(*a3, a3[1]));
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 16952), &v29, 0.0);
  double v25 = v24;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 17104), &v29, 0.0);
  double result = v26 + a3->f64[1] + a3[1].f64[1];
  *a7 = v25 + a3->f64[0];
  a7[1] = result;
  return result;
}

double non-virtual thunk to'OZElement::getBounds(uint64_t a1, float64x2_t *a2, uint64_t a3)
{
  *(void *)&double result = *(_OWORD *)&OZElement::getBounds(a1 - 6528, a2, a3);
  return result;
}

uint64_t OZElement::getBoundsForLinkBehavior@<X0>(OZElement *this@<X0>, const OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 16) = _Q0;
  return (*(uint64_t (**)(OZElement *, uint64_t, const OZRenderState *))(*(void *)this + 1480))(this, a3, a2);
}

double PCRect<double>::subtract(uint64_t a1, double *a2)
{
  *(void *)&_Q0 = *(void *)(a1 + 16);
  if (*(double *)&_Q0 < 0.0) {
    return *(double *)&_Q0;
  }
  double v3 = *(double *)(a1 + 24);
  if (v3 < 0.0) {
    return *(double *)&_Q0;
  }
  double v4 = a2[2];
  if (v4 < 0.0) {
    return *(double *)&_Q0;
  }
  double v5 = a2[3];
  if (v5 < 0.0) {
    return *(double *)&_Q0;
  }
  double v6 = *a2;
  double v7 = *(double *)a1;
  if (*a2 <= *(double *)a1)
  {
    double v14 = v4 + v6;
    double v15 = *(double *)&_Q0 + v7;
    double v16 = a2[1];
    double v9 = *(double *)(a1 + 8);
    if (v16 <= v9)
    {
      double v17 = v16 + v5;
      double v12 = v9 + v3;
      if (v14 >= v15 && v17 >= v12)
      {
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)(a1 + 16) = _Q0;
        return *(double *)&_Q0;
      }
      if (v14 < v15)
      {
        if (v17 < v12) {
          return *(double *)&_Q0;
        }
        goto LABEL_35;
      }
    }
    else if (v14 < v15)
    {
      return *(double *)&_Q0;
    }
    if (v16 + v5 > v9 && v16 < v9) {
      double v20 = v16 + v5;
    }
    else {
      double v20 = *(double *)(a1 + 8);
    }
    double v21 = v9 + v3;
    if (v16 + v5 > v21 && v16 < v21) {
      double v23 = a2[1];
    }
    else {
      double v23 = v21;
    }
    *(double *)&_Q0 = v23 - v20;
    *(double *)(a1 + 8) = v20;
    *(double *)(a1 + 16) = v15 - v7;
    *(void *)(a1 + 24) = _Q0;
  }
  else
  {
    double v8 = a2[1];
    double v9 = *(double *)(a1 + 8);
    BOOL v10 = v8 > v9;
    double v11 = v8 + v5;
    double v12 = v9 + v3;
    if (!v10 && v11 >= v12)
    {
LABEL_35:
      double v27 = v4 + v6;
      if (v27 > v7 && v6 < v7) {
        double v29 = v27;
      }
      else {
        double v29 = *(double *)a1;
      }
      double v30 = *(double *)&_Q0 + v7;
      if (v27 > v30 && v6 < v30) {
        double v30 = *a2;
      }
      *(double *)&_Q0 = v30 - v29;
      *(double *)a1 = v29;
      *(void *)(a1 + 16) = _Q0;
      *(double *)(a1 + 24) = v12 - v9;
    }
  }
  return *(double *)&_Q0;
}

void OZElement::gridFitOffset(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

BOOL OZElement::getProjectedBounds(OZElement *a1, uint64_t a2, double *a3, uint64_t a4)
{
  v27[0] = 0.0;
  v27[1] = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v28 = _Q0;
  (*(void (**)(OZElement *, double *, uint64_t))(*(void *)a1 + 1488))(a1, v27, a4);
  uint64_t v26 = 0x3FF0000000000000;
  uint64_t v23 = 0x3FF0000000000000;
  uint64_t v20 = 0x3FF0000000000000;
  uint64_t v17 = 0x3FF0000000000000;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  if (OZElement::isOwner360(a1))
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = 0;
    (*(void (**)(OZElement *, uint64_t *, uint64_t *, uint64_t *, uint64_t, void))(*(void *)a1 + 1312))(a1, &v16, &v15, &v14, a4, 0);
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v17 = v16;
    uint64_t v20 = v15;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v23 = 0x3FF0000000000000;
    uint64_t v26 = 0x3FF0000000000000;
  }
  else
  {
    (*(void (**)(OZElement *, uint64_t *, uint64_t))(*(void *)a1 + 1256))(a1, &v17, a4);
  }
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v17, a3);
  return PCMatrix44Tmpl<double>::transformRect<double>((double *)&v17, v27, a2);
}

BOOL OZElement::isOwner360(OZElement *this)
{
  uint64_t v1 = (const void *)*((void *)this + 120);
  if (!v1) {
    return 0;
  }
  if (!v2) {
    return 0;
  }

  return OZGroup::is360Group(v2);
}

BOOL OZElement::getDocumentSpaceCorners(void *a1, uint64_t *a2, uint64_t a3)
{
  v23[0] = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v23[1] = _Q0;
  (*(void (**)(void))(a1[816] + 32))();
  corners<double>(v23, a2);
  uint64_t v11 = -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3);
  if (v11)
  {
    uint64_t v22 = 0x3FF0000000000000;
    uint64_t v19 = 0x3FF0000000000000;
    uint64_t v16 = 0x3FF0000000000000;
    uint64_t v13 = 0x3FF0000000000000;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    (*(void (**)(void *, uint64_t *, uint64_t))(*a1 + 1256))(a1, &v13, a3);
    transform<double>((double *)&v13, a2, a2);
  }
  return v11 != 0;
}

void corners<double>(float64x2_t *a1, uint64_t *a2)
{
  std::vector<PCVector3<double>>::resize(a2, 0);
  if (a1[1].f64[0] >= 0.0 && a1[1].f64[1] >= 0.0)
  {
    std::vector<PCVector3<double>>::reserve(a2, 4uLL);
    float64_t v4 = a1->f64[1] + a1[1].f64[1];
    v6.f64[0] = a1->f64[0];
    v6.f64[1] = v4;
    uint64_t v7 = 0;
    LiChannelT<PCVector3<double>>::append(a2, (uint64_t)&v6);
    float64x2_t v6 = vaddq_f64(*a1, a1[1]);
    uint64_t v7 = 0;
    LiChannelT<PCVector3<double>>::append(a2, (uint64_t)&v6);
    float64_t v5 = a1->f64[1];
    v6.f64[0] = a1->f64[0] + a1[1].f64[0];
    v6.f64[1] = v5;
    uint64_t v7 = 0;
    LiChannelT<PCVector3<double>>::append(a2, (uint64_t)&v6);
    float64x2_t v6 = *a1;
    uint64_t v7 = 0;
    LiChannelT<PCVector3<double>>::append(a2, (uint64_t)&v6);
  }
}

void transform<double>(double *a1, void *a2, uint64_t *a3)
{
  int v6 = -1431655765 * ((uint64_t)(a2[1] - *a2) >> 3);
  std::vector<PCVector3<double>>::resize(a3, v6);
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 24 * v6;
    do
    {
      PCMatrix44Tmpl<double>::transform<double>(a1, (double *)(*a2 + v7), (double *)(*a3 + v7));
      v7 += 24;
    }
    while (v8 != v7);
  }
}

BOOL OZElement::getDocumentSpaceBoundary(void *a1, _OWORD *a2, uint64_t a3)
{
  OZRenderState __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  BOOL DocumentSpaceCorners = OZElement::getDocumentSpaceCorners(a1, (uint64_t *)&__p, a3);
  if (DocumentSpaceCorners)
  {
    bounds<double>((uint64_t *)&__p, (uint64_t)a2);
  }
  else
  {
    a2[1] = xmmword_1B7E736F0;
    a2[2] = xmmword_1B7E736F0;
    *a2 = xmmword_1B7E736F0;
  }
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return DocumentSpaceCorners;
}

void sub_1B7BD27E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *bounds<double>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((result[1] - *result) >> 3);
  *(_OWORD *)(a2 + 16) = xmmword_1B7E736F0;
  *(_OWORD *)(a2 + 32) = xmmword_1B7E736F0;
  *(_OWORD *)a2 = xmmword_1B7E736F0;
  if ((int)v3 >= 1)
  {
    unint64_t v3 = v3;
    float64_t v4 = (double *)(v2 + 16);
    double v5 = -1.0;
    double v6 = 1.0;
    double v7 = 1.0;
    double v8 = -1.0;
    double v9 = 1.0;
    double v10 = -1.0;
    do
    {
      double v11 = *(v4 - 2);
      if (v6 <= v5 && v7 <= v8 && v9 <= v10)
      {
        if (v6 >= v11) {
          double v6 = *(v4 - 2);
        }
        if (v5 > v11) {
          double v11 = v5;
        }
        double v14 = *(v4 - 1);
        if (v7 >= v14) {
          double v7 = *(v4 - 1);
        }
        if (v8 <= v14) {
          double v8 = *(v4 - 1);
        }
        if (v9 >= *v4) {
          double v9 = *v4;
        }
        if (v10 <= *v4) {
          double v10 = *v4;
        }
      }
      else
      {
        double v8 = *(v4 - 1);
        double v10 = *v4;
        double v6 = *(v4 - 2);
        double v7 = v8;
        double v9 = *v4;
      }
      *(double *)a2 = v6;
      *(double *)(a2 + 8) = v11;
      *(double *)(a2 + 16) = v7;
      *(double *)(a2 + 24) = v8;
      v4 += 3;
      double v5 = v11;
      *(double *)(a2 + 32) = v9;
      *(double *)(a2 + 40) = v10;
      --v3;
    }
    while (v3);
  }
  return result;
}

double OZElement::getLocalVolume(uint64_t a1, uint64_t a2)
{
  double v12 = 0.0;
  double v13 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v14 = _Q0;
  (*(void (**)(uint64_t, double *))(*(void *)a1 + 1488))(a1, &v12);
  double result = v12;
  double v9 = v13;
  double v10 = v12 + *(double *)&v14;
  double v11 = v13 + *((double *)&v14 + 1);
  *(double *)a2 = v12;
  *(double *)(a2 + 8) = v10;
  *(double *)(a2 + 16) = v9;
  *(double *)(a2 + 24) = v11;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t OZElement::getImageBoundsWithEffects(void *a1, uint64_t a2, uint64_t a3)
{
  if ((*(uint64_t (**)(void *))(*a1 + 416))(a1))
  {
    double v6 = *(uint64_t (**)(void))(**(void **)(a1[123] + 16) + 80);
    return v6();
  }
  else
  {
    double v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 1520);
    return v8(a1, a2, a3);
  }
}

uint64_t non-virtual thunk to'OZElement::getImageBoundsWithEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OZElement::getImageBoundsWithEffects((void *)(a1 - 6528), a2, a3);
}

void OZElement::getFourCornerPointsInObjectSpace(uint64_t a1, long long *a2, double *a3, double *a4, float64x2_t *a5, double *a6)
{
  long long v12 = *a2;
  v40.CMTimeEpoch epoch = *((void *)a2 + 2);
  float64x2_t v38 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  float64x2_t v39 = _Q0;
  *(_OWORD *)&v40.CMTimeValue value = v12;
  (*(void (**)(uint64_t, float64x2_t *, long long *))(*(void *)a1 + 1560))(a1, &v38, a2);
  if (*((unsigned char *)a2 + 233))
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 14840), &v40, 0.0);
    double v19 = v18;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 14992), &v40, 0.0);
    double v21 = v20 + v38.f64[1];
    *a3 = v19 + v38.f64[0];
    a3[1] = v21;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 15544), &v40, 0.0);
    double v23 = v22;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 15696), &v40, 0.0);
    double v25 = v24 + v38.f64[1];
    *a4 = v23 + v38.f64[0] + v39.f64[0];
    a4[1] = v25;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 16248), &v40, 0.0);
    float64_t v37 = v26;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 16400), &v40, 0.0);
    v27.f64[0] = v37;
    v27.f64[1] = v28;
    *a5 = vaddq_f64(v27, vaddq_f64(v38, v39));
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 16952), &v40, 0.0);
    double v30 = v29;
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 17104), &v40, 0.0);
    double v31 = v30 + v38.f64[0];
    double v33 = v32 + v38.f64[1] + v39.f64[1];
  }
  else
  {
    double v34 = v38.f64[1];
    double v31 = v38.f64[0];
    *a3 = v38.f64[0];
    a3[1] = v34;
    double v35 = v39.f64[1];
    double v36 = v31 + v39.f64[0];
    *a4 = v31 + v39.f64[0];
    a4[1] = v34;
    double v33 = v34 + v35;
    a5->f64[0] = v36;
    a5->f64[1] = v33;
  }
  *a6 = v31;
  a6[1] = v33;
}

uint64_t OZElement::getFourCornerMatrix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1600))(a1)) {
    _ZF = *(unsigned char *)(a3 + 233) == 0;
  }
  else {
    _ZF = 1;
  }
  if (_ZF)
  {
    *(void *)(a2 + 120) = 0x3FF0000000000000;
    *(void *)(a2 + 80) = 0x3FF0000000000000;
    *(void *)(a2 + 40) = 0x3FF0000000000000;
    *(void *)a2 = 0x3FF0000000000000;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    uint64_t result = 1;
    *(_OWORD *)(a2 + 104) = 0u;
  }
  else
  {
    v21[0] = 0.0;
    v21[1] = 0.0;
    v20[0] = 0.0;
    v20[1] = 0.0;
    v19[0] = 0.0;
    v19[1] = 0.0;
    v18[0] = 0.0;
    v18[1] = 0.0;
    (*(void (**)(uint64_t, uint64_t, double *, double *, double *, double *))(*(void *)a1 + 1720))(a1, a3, v21, v20, v19, v18);
    float64x2_t v16 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v17 = _Q0;
    (*(void (**)(uint64_t, float64x2_t *, uint64_t))(*(void *)a1 + 1560))(a1, &v16, a3);
    float64x2_t v15 = v16;
    v14.f64[0] = v16.f64[0] + *(double *)&v17;
    v14.f64[1] = v16.f64[1];
    v13.f64[0] = v16.f64[0] + *(double *)&v17;
    v13.f64[1] = v16.f64[1] + *((double *)&v17 + 1);
    v12.f64[0] = v16.f64[0];
    v12.f64[1] = v16.f64[1] + *((double *)&v17 + 1);
    return PCComputeQuadToQuadProjectionMatrix(&v15, &v14, &v13, &v12, v21, v20, v19, v18, a2);
  }
  return result;
}

void OZElement::getCrop(OZElement *this, const CMTime *a2, double *a3, double *a4, double *a5, double *a6)
{
}

void OZElement::getScale(OZElement *this, double *a2, double *a3, double *a4, const CMTime *a5, int a6)
{
  float64x2_t v12 = (const void *)*((void *)this + 120);
  if (v12
  {
    uint64_t v14 = *((void *)this + 121);
    int v15 = *(_DWORD *)(v14 + 344);
    int v16 = *(_DWORD *)(v14 + 348);
    uint64_t v17 = 0;
    (*(void (**)(OZElement *, char *, uint64_t *, const CMTime *))(*(void *)this + 1472))(this, (char *)&v17 + 4, &v17, a5);
    *a2 = (double)v15 / *((float *)&v17 + 1);
    *a3 = (double)v16 / *(float *)&v17;
    *a4 = 1.0;
  }
  else
  {
    OZTransformNode::getScale((OZTransformNode *)this, a2, a3, a4, a5, a6);
  }
}

uint64_t OZElement::getScale(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1312))(a1, a2, a2 + 8, a2 + 16, a3, a4);
}

uint64_t *OZElement::createSnapSetForCamera(uint64_t a1, const LiCamera *a2, uint64_t **a3, uint64_t a4, int a5, int a6)
{
  double v35 = 0.0;
  double v36 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v37 = _Q0;
  (*(void (**)(uint64_t, double *, uint64_t))(*(void *)a1 + 1488))(a1, &v35, a4);
  uint64_t v34 = 0x3FF0000000000000;
  uint64_t v31 = 0x3FF0000000000000;
  uint64_t v28 = 0x3FF0000000000000;
  uint64_t v25 = 0x3FF0000000000000;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 1256))(a1, &v25, a4);
  uint64_t v17 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  OZScene::calcWorldToFilmSpaceMatrixForCamera(v17, a2, v24);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)&v25, v24);
  uint64_t result = (uint64_t *)PCMatrix44Tmpl<double>::transformRect<double>((double *)&v25, &v35, (uint64_t)&v35);
  if (result)
  {
    if (v35 >= -2147483650.0 && v35 <= 2147483650.0)
    {
      double v19 = v35 + *(double *)&v37;
      if (v35 + *(double *)&v37 >= -2147483650.0 && v19 <= 2147483650.0 && v36 >= -2147483650.0 && v36 <= 2147483650.0)
      {
        double v20 = v36 + *((double *)&v37 + 1);
        if (v36 + *((double *)&v37 + 1) >= -2147483650.0
          && *((double *)&v37 + 1) >= 0.0
          && *(double *)&v37 >= 0.0
          && v20 <= 2147483650.0)
        {
          if (a5)
          {
            OZSnap::OZSnap((OZSnap *)v23, 258, (v35 + v19) * 0.5, v36, v20);
            std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v23, (uint64_t)v23);
            OZSnap::OZSnap((OZSnap *)v23, 514, (v36 + v36 + *((double *)&v37 + 1)) * 0.5, v35, v35 + *(double *)&v37);
            uint64_t result = std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v23, (uint64_t)v23);
          }
          if (a6)
          {
            double v21 = *(double *)&v37;
            if (*(double *)&v37 > 2.0)
            {
              double v21 = *(double *)&v37 - (v35 + 1.0 - v35) + -2.0;
              double v35 = v35 + 1.0;
              *(double *)&long long v37 = v21;
            }
            double v22 = *((double *)&v37 + 1);
            if (*((double *)&v37 + 1) > 2.0)
            {
              double v22 = *((double *)&v37 + 1) - (v36 + 1.0 - v36) + -2.0;
              double v36 = v36 + 1.0;
              *((double *)&v37 + OZDocument::~OZDocument(this - 1) = v22;
            }
            if (v21 >= 0.0 && v22 >= 0.0)
            {
              OZSnap::OZSnap((OZSnap *)v23, 257, v35, v36, v36 + v22);
              std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v23, (uint64_t)v23);
              OZSnap::OZSnap((OZSnap *)v23, 260, v35 + *(double *)&v37, v36, v36 + *((double *)&v37 + 1));
              std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v23, (uint64_t)v23);
              OZSnap::OZSnap((OZSnap *)v23, 513, v36, v35, v35 + *(double *)&v37);
              std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v23, (uint64_t)v23);
              OZSnap::OZSnap((OZSnap *)v23, 516, v36 + *((double *)&v37 + 1), v35, v35 + *(double *)&v37);
              return std::__tree<OZSnap>::__emplace_unique_key_args<OZSnap,OZSnap>(a3, (uint64_t)v23, (uint64_t)v23);
            }
          }
        }
      }
    }
  }
  return result;
}

void OZElement::getOpacity(OZElement *this, const CMTime *a2, const OZRenderNode *a3)
{
}

uint64_t OZElement::setOpacity(OZElement *this, double a2, const CMTime *a3)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 6680), a3, a2, 0);
}

uint64_t OZElement::getBlendMode(OZElement *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 6832), a2, 0.0);
}

void *OZElement::getBlendOptions@<X0>(OZElement *this@<X0>, CMTime *a2@<X1>, PCSharedCount *a3@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 2096))(&v15);
  float64x2_t v13 = 0;
  PCSharedCount::PCSharedCount(&v14);
  CMTime v12 = *a2;
  if (&v15 == v16)
  {
LABEL_6:
    if ((*(unsigned int (**)(OZElement *, CMTime *))(*(void *)this + 1576))(this, &v12) == 35) {
      operator new();
    }
  }
  else
  {
    double v6 = &v15;
    while (1)
    {
      uint64_t v7 = *(void *)(*v6 + 16);
      CMTime v11 = v12;
      if ((*(unsigned int (**)(uint64_t, CMTime *, void, uint64_t, uint64_t))(*(void *)v7 + 280))(v7, &v11, 0, 1, 1))
      {
        (*(void (**)(PC_Sp_counted_base **__return_ptr))(**(void **)(*v6 + 16) + 688))(&v9);
        float64x2_t v13 = v9;
        PCSharedCount::PCSharedCount(&v17, &v10);
        PCSharedCount::operator=((uint64_t *)&v14, (uint64_t *)&v17);
        PCSharedCount::~PCSharedCount(&v17);
        PCSharedCount::~PCSharedCount(&v10);
        if (v13) {
          break;
        }
      }
      double v6 = (uint64_t *)*v6;
      if (v6 == v16) {
        goto LABEL_6;
      }
    }
  }
  a3->int64_t var0 = v13;
  PCSharedCount::PCSharedCount(a3 + 1, &v14);
  PCSharedCount::~PCSharedCount(&v14);
  return std::__list_imp<unsigned int>::clear(&v15);
}

void sub_1B7BD371C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  PCSharedCount::~PCSharedCount(v13);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void PCBlendOptions::PCBlendOptions(PCBlendOptions *this)
{
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = 1;
  *(void *)this = &unk_1F113B9A8;
  *((void *)this + 4) = &unk_1F113B9D8;
  *((void *)this + 2) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 3);
  *((_DWORD *)this + 2) = 0;
}

void sub_1B7BD3834(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 48) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void *PCPtr<void>::operator=<PCLightWrapOptions>(void *a1, const PCSharedCount *a2)
{
  if (a2->var0)
  {
    *a1 = (char *)a2->var0 + *(void *)(*(void *)a2->var0 - 16);
    unint64_t v3 = &v5;
    PCSharedCount::PCSharedCount(&v5, a2 + 1);
    PCSharedCount::operator=(a1 + 1, (uint64_t *)&v5);
  }
  else
  {
    *a1 = 0;
    unint64_t v3 = &v6;
    PCSharedCount::PCSharedCount(&v6);
    PCSharedCount::operator=(a1 + 1, (uint64_t *)&v6);
  }
  PCSharedCount::~PCSharedCount(v3);
  return a1;
}

void sub_1B7BD3910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void OZElement::setBlendMode(uint64_t a1, unsigned int a2, CMTime *a3)
{
  if (a2 == 50 || a2 == 43 || a2 == 40 || (a2 & 0xFFFFFFFB) == 41) {
    unsigned int v8 = 0;
  }
  else {
    unsigned int v8 = a2;
  }
  double v9 = (OZChannel *)(a1 + 6832);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 6832), a3, 0.0);
  OZChannel::setValue(v9, a3, (double)v8, 0);
  if (v8 == 35)
  {
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 7088), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 7824), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 7216), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 7368), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 7520), 2, 0);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 7672), 2, 0);
  }
  else
  {
    if (ValueAsInt != 35) {
      return;
    }
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 7088), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 7824), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 7216), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 7368), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 7520), 2, 0);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 7672), 2, 0);
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1)
    && *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1) + 1584))
  {
    CMTime v11 = *(OZDocument **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1) + 1584);
    OZDocument::postNotification(v11, 32);
  }
}

BOOL OZElement::getPreserveTransparency(OZElement *this, const CMTime *a2)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 8232), a2, 0.0) != 0;
}

BOOL OZElement::isFourCornerPinned(OZElement *this)
{
  uint64_t v1 = (OZChannelBase *)((char *)this + 14568);
  int isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 14568), 0, 1);
  BOOL result = 0;
  if (isEnabled) {
    return !OZChannelBase::testFlag(v1, 2);
  }
  return result;
}

BOOL OZElement::isCropped(OZElement *this)
{
  uint64_t v1 = (OZChannelBase *)((char *)this + 17520);
  int isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 17520), 0, 1);
  BOOL result = 0;
  if (isEnabled) {
    return !OZChannelBase::testFlag(v1, 2);
  }
  return result;
}

uint64_t OZElement::alwaysCrop()
{
  return 0;
}

BOOL OZElement::isDropShadowEnabled(OZElement *this)
{
  uint64_t v1 = (OZChannelBase *)((char *)this + 12672);
  int isEnabled = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 12672), 0, 1);
  BOOL result = 0;
  if (isEnabled) {
    return !OZChannelBase::testFlag(v1, 2);
  }
  return result;
}

uint64_t OZElement::isFlattened(OZElement *this)
{
  return 1;
}

uint64_t OZElement::getDimensionType(OZElement *this)
{
  return 0;
}

uint64_t OZElement::doEffectsForcePrecomp(OZElement *this, CMTime *a2)
{
  v14[0] = v14;
  v14[1] = v14;
  void v14[2] = 0;
  int v4 = (*(uint64_t (**)(OZElement *))(*(void *)this + 1640))(this);
  PCSharedCount v5 = (char *)this + 976;
  if ((OZElement *)((char *)this + 976) == *((OZElement **)this + 123))
  {
LABEL_9:
    uint64_t v10 = 0;
  }
  else
  {
    int v6 = v4;
    while (1)
    {
      uint64_t v7 = *(void *)(*(void *)v5 + 16);
      if ((*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v7 + 272))(v7, 0, 1))
      {
        long long v12 = *(_OWORD *)&a2->value;
        CMTimeEpoch epoch = a2->epoch;
        char v8 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v7 + 696))(v7, &v12);
        char v9 = v6 ? v8 : 0;
        if ((v9 & 1) == 0) {
          break;
        }
      }
      PCSharedCount v5 = *(char **)v5;
      if (v5 == *((char **)this + 123)) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = 1;
  }
  std::__list_imp<unsigned int>::clear(v14);
  return v10;
}

void sub_1B7BD3DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZElement::isPrecomposed(OZElement *this, const CMTime *a2)
{
  return 0;
}

BOOL OZElement::canReflect(OZElement *this)
{
  if ((*((unsigned char *)this + 1024) & 8) != 0) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)this + 120);
  if (v2
  {
    return (*(unsigned int (**)(void *))(*(void *)v3 + 1640))(v3) == 1;
  }
  else
  {
    return (*(unsigned int (**)(OZElement *))(*(void *)this + 1640))(this) != 2;
  }
}

uint64_t OZElement::canFourCorner(OZElement *this)
{
  return OZSceneNode::isDescendantOf360Group((uint64_t)this) ^ 1;
}

uint64_t OZElement::canCrop(OZElement *this)
{
  return OZSceneNode::isDescendantOf360Group((uint64_t)this) ^ 1;
}

uint64_t OZElement::canCastReflection(OZElement *this)
{
  if ((*((unsigned char *)this + 1024) & 8) != 0) {
    return 0;
  }
  else {
    return OZSceneNode::isDescendantOf360Group((uint64_t)this) ^ 1;
  }
}

uint64_t OZElement::updateHiddenChannels(OZElement *this, char a2)
{
  int v4 = (*(uint64_t (**)(OZElement *))(*(void *)this + 1832))(this);
  int v5 = OZElement::setReflectionChannels(this);
  int updated = OZElement::updateHiddenFourCornerChannels(this, a2);
  int v7 = OZElement::updateHiddenCropChannels(this, a2);
  return OZElement::updateHiddenCastsReflectionChannel(this, a2) | v7 | updated | v5 | v4;
}

uint64_t OZElement::setReflectionChannels(OZElement *this)
{
  uint64_t v2 = (OZChannelBase *)((char *)this + 9936);
  BOOL v3 = OZChannelBase::testFlag((OZChannelBase *)((char *)this + 9936), 2);
  int v4 = (*(uint64_t (**)(OZElement *))(*(void *)this + 1672))(this);
  int v5 = v3 ^ v4;
  if (((v3 ^ v4) & 1) == 0)
  {
    if (v4) {
      OZChannelBase::resetFlag(v2, 2, 0);
    }
    else {
      OZChannelBase::setFlag(v2, 2, 0);
    }
  }
  return v5 ^ 1u;
}

uint64_t OZElement::updateHiddenFourCornerChannels(OZElement *this, char a2)
{
  int v4 = (OZChannelBase *)((char *)this + 14568);
  BOOL v5 = OZChannelBase::testFlag((OZChannelBase *)((char *)this + 14568), 2);
  int v6 = (*(uint64_t (**)(OZElement *))(*(void *)this + 1680))(this);
  int v7 = v5 ^ v6;
  if (((v5 ^ v6) & 1) == 0)
  {
    if (v6) {
      OZChannelBase::resetFlag(v4, 2, a2);
    }
    else {
      OZChannelBase::setFlag(v4, 2, a2);
    }
  }
  return v7 ^ 1u;
}

uint64_t OZElement::updateHiddenCropChannels(OZElement *this, char a2)
{
  int v4 = (OZChannelBase *)((char *)this + 17520);
  BOOL v5 = OZChannelBase::testFlag((OZChannelBase *)((char *)this + 17520), 2);
  int v6 = (*(uint64_t (**)(OZElement *))(*(void *)this + 1688))(this);
  int v7 = v5 ^ v6;
  if (((v5 ^ v6) & 1) == 0)
  {
    if (v6) {
      OZChannelBase::resetFlag(v4, 2, a2);
    }
    else {
      OZChannelBase::setFlag(v4, 2, a2);
    }
  }
  return v7 ^ 1u;
}

uint64_t OZElement::updateHiddenCastsReflectionChannel(OZElement *this, char a2)
{
  int v4 = (OZChannelBase *)((char *)this + 11208);
  BOOL v5 = OZChannelBase::testFlag((OZChannelBase *)((char *)this + 11208), 2);
  int v6 = (*(uint64_t (**)(OZElement *))(*(void *)this + 1696))(this);
  int v7 = v5 ^ v6;
  if (((v5 ^ v6) & 1) == 0)
  {
    if (v6) {
      OZChannelBase::resetFlag(v4, 2, a2);
    }
    else {
      OZChannelBase::setFlag(v4, 2, a2);
    }
  }
  return v7 ^ 1u;
}

uint64_t OZElement::getColorConversionType(OZElement *this)
{
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 12000), MEMORY[0x1E4F1FA48], 0.0);
  if (ValueAsInt == 1)
  {
    BOOL v5 = (const CMTime *)MEMORY[0x1E4F1FA48];
    return OZChannel::getValueAsInt((OZChannel *)((char *)this + 12256), v5, 0.0);
  }
  else if (ValueAsInt)
  {
    return 3;
  }
  else
  {
    BOOL v3 = *(uint64_t (**)(OZElement *))(*(void *)this + 2232);
    return v3(this);
  }
}

void OZElement::getColorConversionPeakNits(OZElement *this)
{
}

uint64_t OZElement::wantsColorHeadingVisible(OZElement *this)
{
  return 0;
}

uint64_t OZElement::getAutomaticConversionType(OZElement *this)
{
  return 3;
}

void OZElement::getDropShadowDistance(OZElement *this, const CMTime *a2)
{
}

void OZElement::getDropShadowBlur(OZElement *this, const CMTime *a2)
{
}

void OZElement::getDropShadowAngle(OZElement *this, const CMTime *a2)
{
}

void OZElement::getDropShadowOpacity(OZElement *this, const CMTime *a2)
{
}

CGColorSpace **OZElement::getDropShadowColor@<X0>(OZElement *this@<X0>, const CMTime *a2@<X1>, PCColor *a3@<X8>)
{
  return OZChannelColorNoAlpha::getColor((OZChannelColorNoAlpha *)((char *)this + 12800), a2, a3, 0.0);
}

void sub_1B7BD4430(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 48));
  _Unwind_Resume(a1);
}

OZChannelBase *OZElement::setDropShadowEnable(OZElement *this, int a2, const CMTime *a3)
{
  return OZChannelBase::enable((OZChannelBase *)((char *)this + 12672), a2, 0);
}

uint64_t OZElement::setDropShadowDistance(OZElement *this, double a2, const CMTime *a3)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 14112), a3, a2, 0);
}

uint64_t OZElement::setDropShadowBlur(OZElement *this, double a2, const CMTime *a3)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 13960), a3, a2, 0);
}

uint64_t OZElement::setDropShadowAngle(OZElement *this, double a2, const CMTime *a3)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 14264), a3, a2, 0);
}

uint64_t OZElement::setDropShadowColor(OZElement *this, PCColor *a2, const CMTime *a3)
{
  return OZChannelColorNoAlpha::setColor((OZChannelColorNoAlpha *)((char *)this + 12800), a3, a2, 0);
}

double OZElement::projectPointToObject(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, double *a5)
{
  uint64_t v8 = *a4;
  double v9 = *a5;
  uint64_t v22 = *a3;
  uint64_t v23 = v8;
  double v24 = v9;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  double v21 = 0.0;
  (*(void (**)(double *__return_ptr))(*(void *)a1 + 1384))(v15);
  double result = v16 * v16 + v17 * v17 + v18 * v18;
  if (result <= -0.0000001 || result >= 0.0000001)
  {
    memset(v12, 0, sizeof(v12));
    uint64_t v13 = 0;
    unint64_t v14 = 0xBFF0000000000000;
    PCIntersectRayWithPlane(v15, (double *)v12, (double *)&v19);
    uint64_t v11 = v20;
    *a3 = v19;
    *a4 = v11;
    double result = v21;
    *a5 = v21;
  }
  return result;
}

double OZElement::calcTranslationRelativeToCamera(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, OZRenderState *a5, float64x2_t *a6)
{
  OZRenderState::OZRenderState(&v42, a5);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, void *, OZRenderState *, void))(*(void *)a1 + 1384))(v41, a1, a2, a4, &v42, 0);
  float64x2_t v39 = 0uLL;
  double v40 = 0.0;
  memset(v37, 0, sizeof(v37));
  unint64_t v38 = 0xBFF0000000000000;
  PCIntersectRayWithPlane((double *)v41, (double *)v37, v39.f64);
  OZRenderParams::OZRenderParams((OZRenderParams *)v36);
  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 288))(v28, a1);
  OZRenderParams::setWorkingColorDescription(v36, (const FxColorDescription *)v28);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v28);
  float v11 = (*(float (**)(uint64_t))(*(void *)a1 + 296))(a1);
  OZRenderParams::setBlendingGamma((uint64_t)v36, v11);
  OZRenderParams::setState((OZRenderParams *)v36, &v42);
  *(void *)uint64_t v28 = a4;
  if (a4) {
    long long v12 = (PCShared_base *)((char *)a4 + *(void *)(*a4 - 24));
  }
  else {
    long long v12 = 0;
  }
  PCSharedCount::PCSharedCount((PCSharedCount *)&v28[8], v12);
  OZRenderParams::setCamera((uint64_t)v36, (const PCSharedCount *)v28);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v28[8]);
  uint64_t v35 = 0x3FF0000000000000;
  uint64_t v32 = 0x3FF0000000000000;
  uint64_t v29 = 0x3FF0000000000000;
  *(void *)uint64_t v28 = 0x3FF0000000000000;
  memset(&v28[8], 0, 32);
  long long v30 = 0u;
  long long v31 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  (*(void (**)(uint64_t, unsigned char *, CGColorSpace **))(*(void *)a1 + 1288))(a1, v28, v36);
  float64x2_t v26 = v39;
  double v27 = v40;
  PCMatrix44Tmpl<double>::transform<double>((double *)v28, v26.f64, v26.f64);
  float64x2_t v23 = 0uLL;
  double v24 = -1.0;
  double v25 = v27;
  PCMatrix44Tmpl<double>::transform_row<double>((double *)v28, v23.f64, v23.f64);
  (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, void *, OZRenderState *, void))(*(void *)a1 + 1384))(v16, a1, a3, a4, &v42, 0);
  v41[0] = *(_OWORD *)v16;
  v41[1] = *(_OWORD *)&v16[16];
  v41[2] = *(_OWORD *)&v16[32];
  double v13 = vaddvq_f64(vmulq_f64(v23, v23)) + v24 * v24;
  if (v13 <= -1.0e-24 || v13 >= 1.0e-24)
  {
    *(float64x2_t *)&v37[24] = v23;
    unint64_t v38 = *(void *)&v24;
    *(float64x2_t *)long long v37 = vdivq_f64(vmulq_n_f64(v23, -v25), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13, 0));
    *(double *)&double v37[16] = -(v25 * v24) / v13;
  }
  PCIntersectRayWithPlane((double *)v41, (double *)v37, v26.f64);
  v42.var4 = 1;
  v42.var6 = 0;
  uint64_t v22 = 0x3FF0000000000000;
  uint64_t v19 = 0x3FF0000000000000;
  *(void *)&unsigned char v16[40] = 0x3FF0000000000000;
  *(void *)double v16 = 0x3FF0000000000000;
  memset(&v16[8], 0, 32);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  (*(void (**)(uint64_t, unsigned char *, OZRenderState *))(*(void *)a1 + 1256))(a1, v16, &v42);
  PCMatrix44Tmpl<double>::transform<double>((double *)v16, v39.f64, v39.f64);
  PCMatrix44Tmpl<double>::transform<double>((double *)v16, v26.f64, v26.f64);
  double v14 = v27 - v40;
  *a6 = vsubq_f64(v26, v39);
  a6[1].f64[0] = v14;
  OZRenderParams::~OZRenderParams((OZRenderParams *)v36);
  return result;
}

void sub_1B7BD49B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void OZElement::allowDrag(OZElement *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
  *a5 = 0;
  if (!lpsrc
    && ((*(uint64_t (**)(OZElement *))(*(void *)this + 1872))(this) & 1) == 0
    && ((*a6 & 0xFFFFFFFE) != 2 || (*((unsigned char *)v14 + 1024) & 8) == 0))
  {
    OZSceneNode::allowDrag((OZSceneNode *)this, lpsrc, a3, a4, a5, a6, a7);
    return;
  }
  if (!(*(uint64_t (**)(OZElement *))(*(void *)v14 + 272))(v14))
  {
    int v18 = a4 & 1;
    goto LABEL_19;
  }
  if ((OZChannelBase *)(*(uint64_t (**)(OZElement *))(*(void *)v14 + 640))(v14) != a3)
  {
    int v18 = a4 & 2;
LABEL_19:
    *a5 = v18;
  }
}

void non-virtual thunk to'OZElement::allowDrag(OZElement *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, int a7)
{
}

uint64_t OZElement::performDragOperation(OZElement *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  if (!lpsrc) {
    return OZSceneNode::performDragOperation((OZSceneNode *)this, lpsrc, a3, a4, a5, a6, a7, a8);
  }
  if (!v16) {
    return OZSceneNode::performDragOperation((OZSceneNode *)this, lpsrc, a3, a4, a5, a6, a7, a8);
  }
  if ((*((unsigned char *)this + 1024) & 8) != 0) {
    return OZSceneNode::performDragOperation((OZSceneNode *)this, lpsrc, a3, a4, a5, a6, a7, a8);
  }
  unint64_t v17 = v16;
  if ((*((unsigned char *)v16 + 1024) & 8) == 0)
  {
    unint64_t v18 = *((void *)v16 + 1);
    long long v31 = xmmword_1B837FBE0;
    int isKindOfClass = OZFactory::isKindOfClass(v18, (int32x4_t *)&v31);
    if ((a7 & 0x18) == 0 || !isKindOfClass) {
      return OZSceneNode::performDragOperation((OZSceneNode *)this, lpsrc, a3, a4, a5, a6, a7, a8);
    }
  }
  uint64_t v20 = *((void *)v17 + 120);
  uint64_t v21 = *((void *)this + 121);
  if (v21)
  {
    uint64_t v22 = *(OZChannelBase **)(v21 + 1584);
    if (v20) {
      PCURL::PCURL((PCURL *)&v31, @"Undo Reorder");
    }
    else {
      PCURL::PCURL((PCURL *)&v31, @"Undo Drop");
    }
    OZChannelBase::setRangeName(v22, (const PCString *)&v31);
    PCString::~PCString((PCString *)&v31);
  }
  PCSharedCount::PCSharedCount((PCSharedCount *)&v31);
  double v24 = (void *)((char *)v17 + 16);
  (*(void (**)(void *, long long *, void))(*((void *)v17 + 2) + 176))((void *)v17 + 2, &v31, 0);
  PCString::~PCString((PCString *)&v31);
  if (v20)
  {
    unint64_t v25 = *((void *)v17 + 1);
    long long v31 = xmmword_1B837FBE0;
    if (!OZFactory::isKindOfClass(v25, (int32x4_t *)&v31) || (*((unsigned char *)v17 + 1024) & 8) != 0)
    {
      PCURL::PCURL((PCURL *)&v31, @"Undo Reorder");
      (*(void (**)(void *, long long *, uint64_t))(*v24 + 176))((void *)v17 + 2, &v31, 3);
    }
    else
    {
      PCURL::PCURL((PCURL *)&v31, @"Undo Reorder");
      (*(void (**)(void *, long long *, uint64_t))(*v24 + 176))((void *)v17 + 2, &v31, 5);
    }
    PCString::~PCString((PCString *)&v31);
  }
  OZSceneNode::removeFromParent(v17);
  uint64_t v26 = *((void *)this + 2302);
  if ((OZElement *)v26 != (OZElement *)((char *)this + 18408))
  {
    double v27 = (uint64_t *)(v26 + 16);
    if ((OZChannelBase *)(*(uint64_t (**)(void))(**(void **)(v26 + 16) + 640))(*(void *)(v26 + 16)) == a3)
    {
      uint64_t v28 = 0;
LABEL_26:
      if (a5 == 3) {
        uint64_t v28 = *v27;
      }
      goto LABEL_28;
    }
    while (1)
    {
      uint64_t v26 = *(void *)(v26 + 8);
      if ((OZElement *)v26 == (OZElement *)((char *)this + 18408)) {
        break;
      }
      uint64_t v28 = *v27;
      double v27 = (uint64_t *)(v26 + 16);
      if ((OZChannelBase *)(*(uint64_t (**)(void))(**(void **)(v26 + 16) + 640))(*(void *)(v26 + 16)) == a3) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v28 = 0;
LABEL_28:
  (*(void (**)(OZElement *, OZSceneNode *, uint64_t))(*(void *)this + 1080))(this, v17, v28);
  (*(void (**)(OZElement *))(*(void *)this + 496))(this);
  if (!v20)
  {
    PCURL::PCURL((PCURL *)&v31, @"Undo Drop");
    (*(void (**)(void *, long long *, uint64_t))(*v24 + 176))((void *)v17 + 2, &v31, 1);
    PCString::~PCString((PCString *)&v31);
  }
  uint64_t v30 = *((void *)this + 121);
  if (v30)
  {
    OZChannelBase::setRangeName(*(OZChannelBase **)(v30 + 1584), v29);
    OZDocument::postNotification(*(OZDocument **)(*((void *)this + 121) + 1584), 16);
  }
  return 1;
}

void sub_1B7BD50B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
}

uint64_t non-virtual thunk to'OZElement::performDragOperation(OZElement *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  return OZElement::performDragOperation((OZElement *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OZElement::variesOverTime(OZElement *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 416))();
}

uint64_t OZElement::setLithiumTransform(OZElement *this, LiSceneObject *a2, OZRenderState *a3)
{
  uint64_t v19 = 0x3FF0000000000000;
  uint64_t v16 = 0x3FF0000000000000;
  uint64_t v13 = 0x3FF0000000000000;
  uint64_t v10 = 0x3FF0000000000000;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  OZRenderState::OZRenderState(&v9, a3);
  v9.var4 = 1;
  (*(void (**)(OZElement *, uint64_t *, OZRenderState *))(*(void *)this + 1256))(this, &v10, &v9);
  double v7 = 0.0;
  double v8 = 0.0;
  uint64_t v6 = 0;
  (*(void (**)(OZElement *, double *, double *, uint64_t *, OZRenderState *, void))(*(void *)this + 1312))(this, &v8, &v7, &v6, &v9, 0);
  if (OZElement::isOwner360(this))
  {
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v10 = *(void *)&v8;
    uint64_t v13 = *(void *)&v7;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v16 = 0x3FF0000000000000;
    uint64_t v19 = 0x3FF0000000000000;
  }
  uint64_t result = (*(uint64_t (**)(LiSceneObject *, uint64_t *))(*(void *)a2 + 16))(a2, &v10);
  *((unsigned char *)a2 + 564) = v8 * v7 < 0.0;
  return result;
}

uint64_t OZElement::cropImageSourceIfNecessary@<X0>(uint64_t a1@<X0>, const PCSharedCount *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, PCSharedCount *a5@<X8>)
{
  a5->int64_t var0 = a2->var0;
  PCSharedCount::PCSharedCount(a5 + 1, a2 + 1);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 1616))(a1, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1608))(a1);
  if (*(unsigned char *)(a4 + 256)) {
    _ZF = (result | v8) == 0;
  }
  else {
    _ZF = 1;
  }
  if (!_ZF)
  {
    double v20 = 0.0;
    double v18 = 0.0;
    double v19 = 0.0;
    double v17 = 0.0;
    if (result)
    {
      (*(void (**)(uint64_t, uint64_t, double *, double *, double *, double *))(*(void *)a1 + 1728))(a1, a3, &v20, &v19, &v18, &v17);
    }
    else
    {
      double v18 = 0.0;
      double v19 = 0.0;
      double v20 = 0.0;
    }
    long long v15 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v16 = _Q0;
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 1552))(a1, &v15, a3);
    *(double *)&long long v15 = v20 + *(double *)&v15;
    *((double *)&v15 + OZDocument::~OZDocument(this - 1) = v18 + *((double *)&v15 + 1);
    *(double *)&long long v16 = *(double *)&v16 - (v20 + v19);
    *((double *)&v16 + OZDocument::~OZDocument(this - 1) = *((double *)&v16 + 1) - (v18 + v17);
    operator new();
  }
  return result;
}

void sub_1B7BD54F8(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void OZCrop::OZCrop(OZCrop *this)
{
  *((void *)this + 9) = &unk_1F1199AC8;
  *((void *)this + 10) = 0;
  *((unsigned char *)this + 88) = 1;
  LiImageFilter::LiImageFilter(this, (uint64_t *)&off_1F115DCC0);
  *(void *)this = &unk_1F115DBB8;
  *((void *)this + 9) = &unk_1F115DCA0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 56) = _Q0;
}

void sub_1B7BD5600(_Unwind_Exception *a1)
{
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v3);
  _Unwind_Resume(a1);
}

uint64_t OZElement::makeRenderGraphOfElements(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 2016))();
}

void OZElement::makeProjectedImageSource(OZElement *this, OZRenderParams *a2, const OZRenderGraphState *a3)
{
}

void sub_1B7BD5B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,PCSharedCount a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  MEMORY[0x1BA9BFBA0](v49, 0x10A0C403FC0B694);
  PCSharedCount::~PCSharedCount(v48);
  _Unwind_Resume(a1);
}

void OZElement::makeImageSource(OZElement *this, OZRenderParams *a2, const OZRenderGraphState *a3)
{
  (*(void (**)(LiImageSource **__return_ptr))(*(void *)this + 1936))(&v3);
  operator new();
}

void sub_1B7BD5E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MEMORY[0x1BA9BFBA0](v4, 0x10B1C40DE3F20C5);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZElement::makeImageSource(OZElement *this, OZRenderParams *a2, const OZRenderGraphState *a3)
{
}

void OZElement::makeRenderImageSource(OZElement *this, OZRenderParams *a2, const OZRenderGraphState *a3)
{
}

void sub_1B7BD5F34(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40EB6C5396);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZElement::makeRenderImageSource(OZElement *this, OZRenderParams *a2, const OZRenderGraphState *a3)
{
}

void OZElement::makeRender(OZElement *this@<X0>, const OZRenderState *a2@<X1>, const OZRenderGraphState *a3@<X2>, uint64_t a4@<X3>, PCSharedCount *a5@<X8>)
{
  (*(void (**)(OZElement *))(*(void *)this + 1712))(this);
  (*(void (**)(char *, const OZRenderState *, const OZRenderGraphState *, uint64_t))(*((void *)this + 816)
                                                                                             + 160))((char *)this + 6528, a2, a3, a4);
  if ((*(unsigned int (**)(OZElement *))(*(void *)this + 416))(this))
  {
    int64_t var0 = a5->var0;
    PCSharedCount::PCSharedCount(&v21, a5 + 1);
    (*(void (**)(uint64_t *__return_ptr, OZElement *, const OZRenderState *, const OZRenderGraphState *, PC_Sp_counted_base **))(*(void *)this + 2032))(&v10, this, a2, a3, &var0);
    a5->int64_t var0 = (PC_Sp_counted_base *)v10;
    PCSharedCount::PCSharedCount(&v19, (const PCSharedCount *)v11);
    PCSharedCount::operator=((uint64_t *)&a5[1], (uint64_t *)&v19);
    PCSharedCount::~PCSharedCount(&v19);
    PCSharedCount::~PCSharedCount((PCSharedCount *)v11);
    PCSharedCount::~PCSharedCount(&v21);
  }
  (*(void (**)(uint64_t *__return_ptr, OZElement *, PCSharedCount *, const OZRenderState *, const OZRenderGraphState *))(*(void *)this + 1920))(&v10, this, a5, a2, a3);
  a5->int64_t var0 = (PC_Sp_counted_base *)v10;
  PCSharedCount::PCSharedCount(&v19, (const PCSharedCount *)v11);
  PCSharedCount::operator=((uint64_t *)&a5[1], (uint64_t *)&v19);
  PCSharedCount::~PCSharedCount(&v19);
  PCSharedCount::~PCSharedCount((PCSharedCount *)v11);
  if ((*(unsigned int (**)(OZElement *))(*(void *)this + 1864))(this)
    && OZElement::hasActiveMasks(this, a2)
    && !OZElement::isOwner360(this))
  {
    operator new();
  }
  if ((*(unsigned int (**)(OZElement *))(*(void *)this + 1600))(this)
    && (OZElement *)a2->var5 != this
    && a2->var19)
  {
    uint64_t v18 = 0x3FF0000000000000;
    uint64_t v15 = 0x3FF0000000000000;
    uint64_t v12 = 0x3FF0000000000000;
    uint64_t v10 = 0x3FF0000000000000;
    memset(v11, 0, sizeof(v11));
    long long v13 = 0u;
    long long v14 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    if ((*(uint64_t (**)(OZElement *, uint64_t *, const OZRenderState *))(*(void *)this + 1280))(this, &v10, a2))operator new(); {
    PCPtr<LiImageSource>::reset(a5);
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, OZElement *, const OZRenderState *, PCSharedCount *))(*(void *)this + 1944))(&v10, this, a2, a5);
    a5->int64_t var0 = (PC_Sp_counted_base *)v10;
    PCSharedCount::PCSharedCount(&v19, (const PCSharedCount *)v11);
    PCSharedCount::operator=((uint64_t *)&a5[1], (uint64_t *)&v19);
    PCSharedCount::~PCSharedCount(&v19);
    PCSharedCount::~PCSharedCount((PCSharedCount *)v11);
  }
}

void sub_1B7BD659C(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v2);
  PCSharedCount::~PCSharedCount(v1 + 1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZElement::makeRender(OZElement *this@<X0>, const OZRenderState *a2@<X1>, const OZRenderGraphState *a3@<X2>, uint64_t a4@<X3>, PCSharedCount *a5@<X8>)
{
}

void OZElement::addPostEffects(const PCSharedCount *a1@<X2>, PCSharedCount *a2@<X8>)
{
  a2->int64_t var0 = a1->var0;
  PCSharedCount::PCSharedCount(a2 + 1, a1 + 1);
}

void *OZElement::buildFilterRenderGraph@<X0>(PCSharedCount *a1@<X3>, uint64_t a2@<X0>, long long *a3@<X1>, PCSharedCount *a4@<X8>)
{
  a4->int64_t var0 = a1->var0;
  PCSharedCount::PCSharedCount(a4 + 1, a1 + 1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 2096))(&v14, a2);
  if (&v14 != v15)
  {
    double v7 = &v14;
    do
    {
      uint64_t v8 = *(void *)(*v7 + 16);
      long long v12 = *a3;
      uint64_t v13 = *((void *)a3 + 2);
      if ((*(unsigned int (**)(uint64_t, long long *, void, uint64_t, uint64_t))(*(void *)v8 + 280))(v8, &v12, 0, 1, 1))
      {
        (*(void (**)(PCSharedCount *__return_ptr))(**(void **)(*v7 + 16) + 648))(&v10);
        if (v10.var0)
        {
          (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(void *)v10.var0 + 168))(v10.var0, a4->var0);
          PCPtr<LiImageSource>::operator=<TXTextureDecal>(&a4->var0, &v10);
        }
        PCSharedCount::~PCSharedCount(&v11);
      }
      double v7 = (uint64_t *)*v7;
    }
    while (v7 != v15);
  }
  return std::__list_imp<unsigned int>::clear(&v14);
}

void sub_1B7BD6840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  PCSharedCount::~PCSharedCount(v14);
  _Unwind_Resume(a1);
}

uint64_t OZElement::doesTransformFromLocalToScreenSpace(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 2224))();
}

uint64_t OZElement::doesAppliedEffectTransormFromLocalToScreenSpace(uint64_t a1, long long *a2)
{
  long long v11 = *a2;
  uint64_t v12 = *((void *)a2 + 2);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 2096))(&v9);
  uint64_t v2 = v10;
  if (&v9 == v10)
  {
LABEL_6:
    uint64_t v5 = 0;
  }
  else
  {
    BOOL v3 = &v9;
    while (1)
    {
      uint64_t v4 = *(void *)(*v3 + 16);
      long long v7 = v11;
      uint64_t v8 = v12;
      if ((*(unsigned int (**)(uint64_t, long long *, void, uint64_t, uint64_t))(*(void *)v4 + 280))(v4, &v7, 0, 1, 1))
      {
        if ((*(uint64_t (**)(void))(**(void **)(*v3 + 16) + 640))(*(void *)(*v3 + 16))) {
          break;
        }
      }
      BOOL v3 = (uint64_t *)*v3;
      if (v3 == v2) {
        goto LABEL_6;
      }
    }
    uint64_t v5 = 1;
  }
  std::__list_imp<unsigned int>::clear(&v9);
  return v5;
}

void sub_1B7BD69D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OZElement::makeGraphBuilder(OZElement *this, const OZRenderParams *a2)
{
}

void sub_1B7BD6AE0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v2, 0x10A0C403FC0B694);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void *OZElement::setupGraphBuilder(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 960);
  if (result)
  {
    if (result)
    {
      uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 1992);
      return (void *)v2();
    }
  }
  return result;
}

PCSharedCount *OZElement::makeDropShadow@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const PCSharedCount *a3@<X2>, uint64_t a4@<X3>, PCSharedCount *a5@<X8>)
{
  *(_OWORD *)&v22.var0.int64_t var0 = *(_OWORD *)a4;
  v22.var0.var1[1] = *(double *)(a4 + 16);
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 13808), (const CMTime *)&v22, 0.0);
  if (v10 <= -0.0000001 || v10 >= 0.0000001)
  {
    *(_OWORD *)&v22.var0.int64_t var0 = *(_OWORD *)a4;
    v22.var0.var1[1] = *(double *)(a4 + 16);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 14112), (const CMTime *)&v22, 0.0);
    *(_OWORD *)&v22.var0.int64_t var0 = *(_OWORD *)a4;
    v22.var0.var1[1] = *(double *)(a4 + 16);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 14264), (const CMTime *)&v22, 0.0);
    __sincos_stret(v12);
    *(_OWORD *)&v22.var0.int64_t var0 = *(_OWORD *)a4;
    v22.var0.var1[1] = *(double *)(a4 + 16);
    OZChannel::getValueAsInt((OZChannel *)(a1 + 14416), (const CMTime *)&v22, 0.0);
    *(_OWORD *)&v22.var0.int64_t var0 = *(_OWORD *)a4;
    v22.var0.var1[1] = *(double *)(a4 + 16);
    unsigned int v13 = (*(uint64_t (**)(uint64_t, PCColor *))(*(void *)a1 + 1576))(a1, &v22);
    CMTime v21 = *(CMTime *)a4;
    OZElement::getDropShadowColor((OZElement *)a1, &v21, &v22);
    WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a4);
    PCWorkingColor::PCWorkingColor((PCWorkingColor *)&v23, &v22, WorkingColorSpace);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v22.var1._obj);
    *(_OWORD *)&v22.var0.int64_t var0 = *(_OWORD *)a4;
    v22.var0.var1[1] = *(double *)(a4 + 16);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 13960), (const CMTime *)&v22, 0.0);
    if (OZRenderParams::isDynamicRangeTrackingRender((FxColorDescription *)a4)
      && (uint64_t v15 = (FxColorDescription *)OZRenderParams::getWorkingColorDescription((OZRenderParams *)a4),
          FxColorDescription::isHDR(v15)))
    {
      v21.CMTimeValue value = v23;
      *(float *)&v21.timescale = v24;
      uint64_t v16 = OZRenderParams::getWorkingColorSpace((FxColorDescription *)a4);
      uint64_t v17 = OZRenderParams::getWorkingColorSpace((FxColorDescription *)a4);
      WorkingColorDescription = (FxColorDescription *)OZRenderParams::getWorkingColorDescription((OZRenderParams *)a4);
      ToneMapMethod = (PCToneMapMethod *)FxColorDescription::getToneMapMethod(WorkingColorDescription);
      PCColorUtil::transform(ToneMapMethod, &v21.value, v16, 0, v17, 1, (uint64_t)&v22);
      PCWorkingColor::setRGB((float *)&v23, *(float *)&v22.var0.var0, *((float *)&v22.var0.var0 + 1), *(float *)v22.var0.var1);
    }
    else if (OZRenderParams::isRenderForHDR_Deprecated((OZRenderParams *)a4))
    {
      v21.CMTimeValue value = v23;
      *(float *)&v21.timescale = v24;
      double v20 = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a4);
      FxApplyBT2446A((float *)&v21, v20, (float *)&v22.var0.var0);
      PCWorkingColor::setRGB((float *)&v23, *(float *)&v22.var0.var0, *((float *)&v22.var0.var0 + 1), *(float *)v22.var0.var1);
    }
    if (!v13
      || PCBlend::treatsBlackLikeNormal(v13)
      && *(float *)&v23 > -0.00001
      && *(float *)&v23 < 0.00001
      && *((float *)&v23 + 1) > -0.00001
      && *((float *)&v23 + 1) < 0.00001
      && v24 > -0.00001
      && v24 < 0.00001)
    {
      operator new();
    }
    if (!*(void *)a2) {
      throw_PCNullPointerException(1);
    }
    *(unsigned char *)(*(void *)a2 + 12) = 1;
    operator new();
  }
  return PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a5, a3);
}

void sub_1B7BD7670(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v2 - 168));
  _Unwind_Resume(a1);
}

uint64_t OZElement::imageSpace(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2216))(a1)) {
    return 2;
  }
  else {
    return 1;
  }
}

void OZElement::buildRenderGraph(OZElement *this, CMTime *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  CMTime v18 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 6680), &v18, 0.0);
  if (v8 <= -0.0000001 || v8 >= 0.0000001)
  {
    OZRenderState::OZRenderState(&v25, (const OZRenderState *)a2);
    if (!v25.var31) {
      goto LABEL_33;
    }
    uint64_t v9 = (void *)*((void *)v25.var31 + 1);
    if (!v9) {
      goto LABEL_33;
    }
    double v10 = (char *)v25.var31 + 8;
    do
    {
      unint64_t v11 = v9[4];
      BOOL v12 = v11 >= (unint64_t)this;
      if (v11 >= (unint64_t)this) {
        unsigned int v13 = v9;
      }
      else {
        unsigned int v13 = v9 + 1;
      }
      if (v12) {
        double v10 = v9;
      }
      uint64_t v9 = (void *)*v13;
    }
    while (*v13);
    if (v10 == (void *)v25.var31 + 1
      || (unint64_t v14 = v10[4], v14 > (unint64_t)this)
      || v14 == *((void *)v25.var31 + 5))
    {
LABEL_33:
      if ((*(unsigned int (**)(OZElement *))(*(void *)this + 1440))(this))
      {
        (*(void (**)(OZElement *, CMTime *, LiGraphBuilder *))(*(void *)this + 1976))(this, a2, a3);
      }
      else
      {
        double v23 = 0.0;
        double v24 = 0.0;
        double v22 = 0.0;
        (*(void (**)(OZElement *, double *, double *, double *, CMTime *, void))(*(void *)this + 1312))(this, &v24, &v23, &v22, a2, 0);
        v15.n128_f64[0] = v24;
        if ((v24 <= -0.0000001 || v24 >= 0.0000001) && ((v15.n128_f64[0] = v23, v23 <= -0.0000001) || v23 >= 0.0000001)
          || ((*(uint64_t (**)(OZElement *, __n128))(*(void *)this + 1632))(this, v15) & 1) == 0
          && ((v15.n128_f64[0] = v22, v22 <= -0.0000001) || v22 >= 0.0000001))
        {
          char v16 = (*(uint64_t (**)(OZElement *, __n128))(*(void *)this + 2024))(this, v15);
          (*(void (**)(LiImageSource **__return_ptr, OZElement *, CMTime *, const OZRenderGraphState *, void))(*(void *)this + 1936))(&v20, this, a2, a4, 0);
          if (v20)
          {
            OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)&v18, a4);
            (*(void (**)(OZElement *, CMTime *, CMTime *))(*(void *)this + 2064))(this, a2, &v18);
            if (v19) {
              char v17 = v16;
            }
            else {
              char v17 = 0;
            }
            char v19 = v17;
            operator new();
          }
          PCSharedCount::~PCSharedCount(&v21);
        }
      }
    }
  }
}

void sub_1B7BD7F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,PCSharedCount a61)
{
  PCSharedCount::~PCSharedCount(v61);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&a49);
  std::__list_imp<unsigned int>::clear(&a29);
  PCSharedCount::~PCSharedCount(&a61);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZElement::buildRenderGraph(OZElement *this, CMTime *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
}

uint64_t OZElement::shouldDepthClip(OZElement *this)
{
  return 1;
}

void OZElement::setGeodeProperties(OZElement *this, const OZRenderParams *a2, const OZRenderGraphState *a3, LiGeode *a4)
{
  uint64_t DoHighQualityResampling = OZRenderParams::getDoHighQualityResampling(a2);
  (*(void (**)(LiGeode *, uint64_t))(*(void *)a4 + 280))(a4, DoHighQualityResampling);
  if (*(unsigned char *)a3 && (*(unsigned int (**)(OZElement *))(*(void *)this + 1632))(this))
  {
    (*(void (**)(LiGeode *, double))(*(void *)a4 + 192))(a4, *((double *)a3 + 1));
    *((_DWORD *)a4 + 170) = *((_DWORD *)a3 + 12);
    if (*((unsigned char *)a3 + 16))
    {
      (*(void (**)(LiGeode *, double))(*(void *)a4 + 208))(a4, *((double *)a3 + 3));
      (*(void (**)(LiGeode *, double))(*(void *)a4 + 224))(a4, *((double *)a3 + 4));
      (*(void (**)(LiGeode *, double))(*(void *)a4 + 240))(a4, *((double *)a3 + 5));
    }
    if (*((double *)a3 + 7) > 0.0) {
      (*(void (**)(LiGeode *))(*(void *)a4 + 256))(a4);
    }
  }
  else
  {
    (*(void (**)(LiGeode *, double))(*(void *)a4 + 192))(a4, 0.0);
  }
  if (*((unsigned char *)a4 + 552)) {
    BOOL v9 = *((unsigned char *)a3 + 288) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  char v10 = !v9;
  *((unsigned char *)a4 + 552) = v10;
  if (*((unsigned char *)a4 + 553)) {
    BOOL v11 = *((unsigned char *)a3 + 289) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  char v12 = !v11;
  *((unsigned char *)a4 + 553) = v12;
  *((unsigned char *)a4 + 696) = *((unsigned char *)a3 + 88);
  if (*((const OZRenderGraphState **)a3 + 9) != (const OZRenderGraphState *)((char *)a3 + 64)) {
    operator new();
  }
  unsigned int v13 = (void *)*((void *)a2 + 160);
  if (v13) {
    unint64_t v14 = (PCShared_base *)((char *)v13 + *(void *)(*v13 - 24));
  }
  else {
    unint64_t v14 = 0;
  }
  PCSharedCount::PCSharedCount(&v15, v14);
  (*(void (**)(OZElement *, LiGeode *, char *, const OZRenderParams *))(*(void *)this + 2112))(this, a4, (char *)a3 + 224, a2);
  (*(void (**)(OZElement *, const OZRenderParams *, const OZRenderGraphState *, LiGeode *))(*(void *)this + 2048))(this, a2, a3, a4);
  PCSharedCount::~PCSharedCount(&v15);
}

void sub_1B7BD8454(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40FDFE64BCLL);
  _Unwind_Resume(a1);
}

uint64_t OZElement::producesDepth(OZElement *this)
{
  return 0;
}

uint64_t OZElement::isDescendantOfRootLevel3DGroup(OZElement *this)
{
  uint64_t v2 = (const void *)*((void *)this + 120);
  if (v2)
  {
    while (1)
    {
      do
      {
        if (!v3) {
          return 1;
        }
        uint64_t v4 = v3;
        uint64_t v2 = (const void *)v3[120];
      }
      while (v2);
      if ((*(unsigned int (**)(void *))(*v4 + 1640))(v4) != 1) {
        break;
      }
      uint64_t v2 = (const void *)v4[120];
      if (!v2) {
        return 1;
      }
    }
    return 0;
  }
  else
  {
    if (result) {
      return (*(unsigned int (**)(uint64_t))(*(void *)result + 1640))(result) == 1;
    }
  }
  return result;
}

uint64_t OZElement::setGeodeProperties3D(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  int ShowDepth = LiRenderingTechnology::getShowDepth((LiRenderingTechnology *)(a2 + 1316));
  if (ShowDepth) {
    LOBYTE(ShowDepth) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2104))(a1);
  }
  a4[555] = ShowDepth;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2056))(a1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2104))(a1);
    char v8 = result ^ 1;
  }
  else
  {
    char v8 = 0;
  }
  a4[554] = v8;
  a4[556] = 0;
  return result;
}

uint64_t OZElement::modifyGraphState(OZElement *this, CMTime *a2, OZRenderGraphState *a3)
{
  CMTime v18 = *a2;
  uint64_t v5 = (OZChannelBase *)((char *)this + 9936);
  if (OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 9936), 0, 1))
  {
    BOOL v6 = OZChannelBase::testFlag(v5, 2);
    if (!v6 && !*(unsigned char *)a3)
    {
      *(unsigned char *)a3 = !v6;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 10064), &v18, 0.0);
      *((void *)a3 + OZDocument::~OZDocument(this - 1) = v7;
      *((_DWORD *)a3 + 12) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 10952), &v18, 0.0);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 10216), &v18, 0.0);
      *((void *)a3 + 7) = v8;
      *((unsigned char *)a3 + 16) = OZChannelBase::isEnabled((OZChannelBase *)((char *)this + 10368), 1, 1);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 10496), &v18, 0.0);
      *((void *)a3 + 3) = v9;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 10648), &v18, 0.0);
      *((void *)a3 + 4) = v10;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 10800), &v18, 0.0);
      *((void *)a3 + 5) = v11;
    }
  }
  char v12 = (OZChannel *)((char *)this + 11208);
  if (OZChannelBase::testFlag((OZChannelBase *)v12, 2)) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = OZChannel::getValueAsInt(v12, &v18, 0.0);
  }
  BOOL v15 = (result & 0xFFFFFFFD) == 0 && *((unsigned char *)a3 + 288) != 0;
  *((unsigned char *)a3 + 288) = v15;
  BOOL v17 = result < 2 && *((unsigned char *)a3 + 289) != 0;
  *((unsigned char *)a3 + 289) = v17;
  return result;
}

float64x2_t OZElement::getFilmback@<Q0>(OZElement *this@<X0>, const OZRenderState *a2@<X1>, float64x2_t *a3@<X8>)
{
  a3->f64[0] = 0.0;
  a3->f64[1] = 0.0;
  uint64_t v4 = (int32x2_t *)(*(uint64_t (**)(OZElement *, const OZRenderState *))(*(void *)this + 272))(this, a2);
  if (v4)
  {
    float64x2_t result = vcvtq_f64_f32(vcvt_f32_s32(v4[43]));
    *a3 = result;
  }
  return result;
}

void OZElement::getPrecompCamera(OZElement *this@<X0>, CMTime *a2@<X1>, int a3@<W2>, PCSharedCount *a4@<X8>)
{
  int v8 = (*(uint64_t (**)(OZElement *))(*(void *)this + 2072))(this);
  a4->int64_t var0 = 0;
  PCSharedCount::PCSharedCount(a4 + 1);
  PCPtr<LiImageSource>::reset(a4);
  if (a3) {
    int v9 = 2;
  }
  else {
    int v9 = 0;
  }
  if (v8) {
    int v9 = v8;
  }
  if (v9)
  {
    if (v9 == 1) {
      operator new();
    }
    if (v9 == 2) {
      operator new();
    }
    PCPtr<LiImageSource>::reset(a4);
  }
  else
  {
    uint64_t v10 = *(PCShared_base **)&a2[53].timescale;
    if (v10)
    {
      PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)a4, v10);
    }
    else
    {
      uint64_t v11 = (OZScene *)*((void *)this + 121);
      if (v11)
      {
        CMTime v16 = *a2;
        unsigned int ActiveCamera = OZScene::getActiveCamera(v11, &v16);
        Node = OZScene::getNode(v11, ActiveCamera);
        if (Node)
        {
          if (v14)
          {
            CMTime v15 = *a2;
            OZCamera::cameraAtTime(v14, &v15);
          }
        }
      }
    }
  }
}

void sub_1B7BD8BA8(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v2 + 1);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t isChannelNondefault(OZChannelBase *a1)
{
  if ((a1->var7 & 0x1000) != 0)
  {
    if (OZChannelFolder::testFoldFlag((OZChannelFolder *)v5, 0x20000)) {
      return !OZChannelBase::testFlag(v5, 0x8000);
    }
    int64_t var0 = v5[1].var0;
    if (var0)
    {
      uint64_t v7 = (OZChannelBase **)*var0;
      int v8 = (OZChannelBase **)var0[1];
      while (v7 != v8)
      {
        int v9 = *v7;
        if (!OZChannelBase::testFlag(*v7, 0x2000)
          && !OZChannelBase::testFlag(v9, 2)
          && (isChannelNondefault(v9) & 1) != 0)
        {
          return 1;
        }
        ++v7;
      }
    }
    return 0;
  }
  if (!result) {
    return result;
  }
  uint64_t v2 = (OZChannel *)result;
  if (((*(uint64_t (**)(uint64_t))(*(void *)result + 560))(result) & 1) != 0
    || ((*((uint64_t (**)(OZChannel *))v2->var0 + 83))(v2) & 1) != 0)
  {
    return 1;
  }
  uint64_t v12 = (uint64_t)&v12;
  unsigned int v13 = &v12;
  uint64_t v14 = 0;
  OZBehavior::GetBehaviorsAffectingChannel(v2, &v12, 1);
  if (!v14 {
    || v14 == 1
  }
    && (BOOL v3 = (const void *)v13[2]) != 0
  {
    OZChannel::getValueAsDouble(v2, MEMORY[0x1E4F1FA48], 0.0);
    double v11 = vabdd_f64(v10, OZChannel::getDefaultValue(v2));
    std::__list_imp<unsigned int>::clear(&v12);
    return v11 >= 0.0000001;
  }
  std::__list_imp<unsigned int>::clear(&v12);
  return 1;
}

void sub_1B7BD8E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZElement::checkForForcedPrecompose(OZElement *this, OZChannelBase *a2, OZChannelBase *a3)
{
  if ((a2->var7 & 0x1000) != 0)
  {
    if (v7)
    {
      int v8 = *v7;
      int v9 = v7[1];
      while (v8 != v9)
      {
        double v10 = *v8;
        if (!OZChannelBase::testFlag(*v8, 0x2000) && !OZChannelBase::testFlag(v10, 2))
        {
          if (OZChannelBase::testFlag(v10, 2048))
          {
            if (v10 != a3 && OZChannelBase::testFlag(v10, 2048) && (isChannelNondefault(v10) & 1) != 0) {
              return 1;
            }
          }
          else if (OZElement::checkForForcedPrecompose(this, v10, a3))
          {
            return 1;
          }
        }
        ++v8;
      }
    }
  }
  else if (a2 != a3 {
         && OZChannelBase::testFlag(a2, 2048)
  }
         && isChannelNondefault(a2)
         && !OZChannelBase::testFlag(a2, 2))
  {
    return 1;
  }
  return 0;
}

uint64_t OZElement::setOwner(OZElement *this, OZSceneNode *a2)
{
  OZTransformNode::setOwner((OZTransformNode *)this, a2);
  (*(void (**)(OZElement *))(*(void *)this + 1832))(this);
  BOOL v3 = *(uint64_t (**)(OZElement *, void))(*(void *)this + 1704);

  return v3(this, 0);
}

BOOL OZElement::isValidToLightOutside(OZElement *this)
{
  uint64_t v1 = (const void *)*((void *)this + 120);
  if (!v1) {
    return 0;
  }
  if (!v2) {
    return 0;
  }

  return OZGroup::isValidToLightInside(v2);
}

uint64_t OZElement::isValidLightClipPlane(OZElement *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 1848))();
}

BOOL OZElement::setLightChannels(OZElement *this)
{
  uint64_t v2 = (OZChannelBase *)((char *)this + 8384);
  BOOL v3 = OZChannelBase::testFlag((OZChannelBase *)((char *)this + 8384), 2);
  BOOL v4 = OZChannelBase::testFlag((OZChannelBase *)((char *)this + 9352), 2);
  if ((*(unsigned int (**)(OZElement *))(*(void *)this + 1848))(this))
  {
    if (v3) {
      OZChannelBase::resetFlag(v2, 2, 0);
    }
    if (v4) {
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 9352), 2, 0);
    }
    return v3 || v4;
  }
  else
  {
    if (!v3) {
      OZChannelBase::setFlag(v2, 2, 0);
    }
    if (!v4) {
      OZChannelBase::setFlag((OZChannelBase *)((char *)this + 9352), 2, 0);
    }
    return !v3 || !v4;
  }
}

OZElement *OZElement::isInWorldPartition(OZElement *this)
{
  while (1)
  {
    uint64_t v2 = (const void *)*((void *)this + 120);
    if (!v2) {
      break;
    }
    this = v3;
    if (!v3 || (*(unsigned int (**)(OZElement *))(*(void *)v3 + 1424))(v3)) {
      return this;
    }
  }
  return 0;
}

OZElement *OZElement::isInPrecomposedWorld(OZElement *this)
{
  uint64_t v2 = MEMORY[0x1E4F1FA48];
  while (1)
  {
    BOOL v3 = (const void *)*((void *)this + 120);
    if (!v3) {
      break;
    }
    this = v4;
    if (!v4 || (*(unsigned int (**)(OZElement *, uint64_t))(*(void *)v4 + 1656))(v4, v2)) {
      return this;
    }
  }
  return 0;
}

uint64_t OZElement::canBeAffectedByShadows(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)(a2 + 12)) {
    return 0;
  }
  int v6 = *(unsigned __int8 *)(a3 + 515);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 1840))(a1, a3);
  if (!v6 && v7 == 0) {
    return 0;
  }
  uint64_t v9 = *(unsigned int *)(a2 + 12);
  if ((int)v9 < 1) {
    return 0;
  }
  char v10 = 0;
  uint64_t v11 = *(void *)(a2 + 16) + 656;
  do
  {
    BOOL v12 = (*(_DWORD *)v11 - 1) <= 2 && *(unsigned char *)(v11 + 65) != 0;
    v11 += 944;
    v10 |= v12;
    --v9;
  }
  while (v9);
  if ((v10 & 1) != 0
    && ((CMTime v15 = *(CMTime *)a3, !(*(unsigned int (**)(uint64_t, CMTime *))(*(void *)a1 + 1656))(a1, &v15))
     || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 1632))(a1))
    && (int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 9480), &v15, 0.0),
        ValueAsInt | OZChannel::getValueAsInt((OZChannel *)(a1 + 9632), &v15, 0.0)))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

void OZElement::buildLighting(OZElement *this, LiGeode *a2, const LiLightSet *a3, const OZRenderParams *a4)
{
  if (!*((_DWORD *)a3 + 3)
    || ((int v8 = *((unsigned __int8 *)a4 + 515),
         uint64_t v9 = (*(uint64_t (**)(OZElement *, const OZRenderParams *))(*(void *)this + 1840))(this, a4),
         !v8)
      ? (BOOL v10 = v9 == 0)
      : (BOOL v10 = 0),
        v10))
  {
    LiGeode::setLit((uint64_t)a2, 0);
  }
  else
  {
    uint64_t v11 = v9;
    BOOL v12 = OZElement::isInWorldPartition(this);
    OZRenderParams::OZRenderParams((OZRenderParams *)v36, a4);
    uint64_t v35 = 0x3FF0000000000000;
    uint64_t v32 = 0x3FF0000000000000;
    uint64_t v29 = 0x3FF0000000000000;
    uint64_t v26 = 0x3FF0000000000000;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    uint64_t v25 = 0x3FF0000000000000;
    uint64_t v22 = 0x3FF0000000000000;
    uint64_t v19 = 0x3FF0000000000000;
    uint64_t v16 = 0x3FF0000000000000;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    char v38 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    unsigned int v13 = OZElement::isInWorldPartition(this);
    if (v13)
    {
      char v14 = v39;
      char v39 = 1;
      if (v12) {
        (*(void (**)(OZElement *, uint64_t *, unsigned char *))(*(void *)v12 + 1256))(v12, &v16, v36);
      }
      PCMatrix44Tmpl<double>::invert((double *)&v16, (double *)&v16, 0.0);
      char v39 = v14;
      if (OZElement::isInPrecomposedWorld(this) == v12) {
        long long v37 = v12;
      }
    }
    (*(void (**)(OZElement *, uint64_t *, unsigned char *))(*(void *)this + 1256))(this, &v26, v36);
    (*(void (**)(void *__return_ptr, OZElement *, unsigned char *, const LiLightSet *, LiGeode *))(*(void *)this + 2120))(v15, this, v36, a3, a2);
    (*(void (**)(LiGeode *, uint64_t, const LiLightSet *, void *, uint64_t *, BOOL, uint64_t *))(*(void *)a2 + 264))(a2, v11, a3, v15, &v26, v13 != 0, &v16);
    LiMaterialProperties::~LiMaterialProperties((LiMaterialProperties *)v15);
    OZRenderParams::~OZRenderParams((OZRenderParams *)v36);
  }
}

void sub_1B7BD97B4(_Unwind_Exception *a1)
{
}

void *OZElement::buildMaterials@<X0>(OZElement *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(unsigned int *)(a3 + 12);
  if ((int)v9 < 1)
  {
    unsigned __int8 v10 = 0;
  }
  else
  {
    unsigned __int8 v10 = 0;
    uint64_t v11 = *(void *)(a3 + 16) + 656;
    do
    {
      BOOL v12 = (*(_DWORD *)v11 - 1) <= 2 && *(unsigned char *)(v11 + 65) != 0;
      v11 += 944;
      v10 |= v12;
      --v9;
    }
    while (v9);
  }
  int v13 = v10 & (*((unsigned char *)a2 + 515) != 0);
  CMTime v28 = *(CMTime *)a2;
  long long v26 = *a2;
  uint64_t v27 = *((void *)a2 + 2);
  if ((*(uint64_t (**)(OZElement *, long long *))(*(void *)a1 + 1656))(a1, &v26)) {
    int v14 = (*(uint64_t (**)(OZElement *))(*(void *)a1 + 1632))(a1) ^ 1;
  }
  else {
    LOBYTE(v14) = 0;
  }
  char v15 = v13 ^ 1 | v14;
  BOOL v16 = (v15 & 1) == 0 && OZChannel::getValueAsInt((OZChannel *)((char *)a1 + 9480), &v28, 0.0) != 0;
  OZLightingFolder::buildLiMaterialProperties((OZLightingFolder *)((char *)a1 + 8384), &v28, a5);
  *(unsigned char *)(a5 + 98) = (*(uint64_t (**)(OZElement *, long long *))(*(void *)a1 + 1840))(a1, a2);
  if (v15)
  {
    BOOL v17 = 0;
    if (v13)
    {
LABEL_17:
      BOOL v18 = OZChannel::getValueAsInt((OZChannel *)((char *)a1 + 9784), &v28, 0.0) != 0;
      goto LABEL_20;
    }
  }
  else
  {
    BOOL v17 = OZChannel::getValueAsInt((OZChannel *)((char *)a1 + 9632), &v28, 0.0) != 0;
    if (v13) {
      goto LABEL_17;
    }
  }
  BOOL v18 = 0;
LABEL_20:
  *(unsigned char *)(a5 + 10OZDocument::~OZDocument(this - 1) = v16;
  *(unsigned char *)(a5 + 102) = v17;
  *(unsigned char *)(a5 + 103) = v18;
  *(unsigned char *)(a5 + 104) = 0;
  *(double *)(a5 + 112) = (*(double (**)(OZElement *, long long *))(*(void *)a1 + 2144))(a1, a2);
  uint64_t result = (void *)(*(uint64_t (**)(OZElement *, long long *, uint64_t, uint64_t))(*(void *)a1 + 2128))(a1, a2, a5, a4);
  if (v17)
  {
    long long v20 = OZElement::isInPrecomposedWorld(a1);
    long long v21 = OZElement::isInWorldPartition(a1);
    if (v20 && v20 == v21)
    {
      double v22 = *((double *)a2 + 5);
      *(double *)(a5 + 120) = v22 / (*(double (**)(OZElement *))(*(void *)v20 + 1328))(v20);
    }
    uint64_t result = (*(void *(**)(long long *__return_ptr, OZElement *, long long *))(*(void *)a1 + 2136))(&v26, a1, a2);
    if ((long long *)(a5 + 272) != &v26)
    {
      for (uint64_t i = 0; i != 128; i += 32)
      {
        long long v24 = (_OWORD *)(a5 + 272 + i);
        long long v25 = *(long long *)((char *)&v26 + i + 16);
        _OWORD *v24 = *(long long *)((char *)&v26 + i);
        v24[1] = v25;
      }
    }
  }
  return result;
}

void sub_1B7BD9B58(_Unwind_Exception *a1)
{
  LiMaterialProperties::~LiMaterialProperties(v1);
  _Unwind_Resume(a1);
}

double OZElement::castShadowMaxScale(OZElement *this, const OZRenderParams *a2)
{
  int RenderQuality = OZRenderParams::getRenderQuality(a2);
  double result = 2.0;
  if (RenderQuality == 6) {
    return 5.0;
  }
  return result;
}

__n128 OZElement::setShadowBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned __int8 *)(a3 + 101) | *(unsigned __int8 *)(a3 + 102))
  {
    __n128 result = *(__n128 *)(a4 + 704);
    long long v5 = *(_OWORD *)(a4 + 720);
    *(__n128 *)(a3 + 128) = result;
    *(_OWORD *)(a3 + 144) = v5;
  }
  return result;
}

__n128 OZElement::getShadowMat@<Q0>(OZElement *this@<X0>, const OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  OZRenderState::OZRenderState(&v33, a2);
  long long v31 = 0uLL;
  double v32 = 0.0;
  float64x2_t v29 = 0uLL;
  double v30 = 1.0;
  uint64_t v28 = 0x3FF0000000000000;
  uint64_t v25 = 0x3FF0000000000000;
  uint64_t v22 = 0x3FF0000000000000;
  uint64_t v19 = 0x3FF0000000000000;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  *(void *)(a3 + 120) = 0x3FF0000000000000;
  *(void *)(a3 + 80) = 0x3FF0000000000000;
  *(void *)(a3 + 40) = 0x3FF0000000000000;
  *(void *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  OZRenderState::TransformSet::shear((uint64_t *)&v33.var30, 0);
  unint64_t var0 = v33.var30.var0 & 0xFFFFFFFFFFFFFF3FLL;
  v33.var30.var0 &= 0xFFFFFFFFFFFFFF3FLL;
  int v6 = (const void *)*((void *)this + 120);
  if (v6)
  {
    if (v7)
    {
      (*(void (**)(void *, uint64_t, OZRenderState *))(*(void *)v7 + 1256))(v7, a3, &v33);
      unint64_t var0 = v33.var30.var0;
    }
  }
  v33.var4 = 1;
  v33.var30.unint64_t var0 = var0 & 0xFFFFFFFFFFFFFFDFLL;
  (*(void (**)(OZElement *, uint64_t *, OZRenderState *))(*(void *)this + 1256))(this, &v19, &v33);
  int v8 = PCMatrix44Tmpl<double>::transform<double>((double *)&v19, (double *)&v31, (double *)&v31);
  double v9 = v8[2];
  long long v31 = *(_OWORD *)v8;
  double v32 = v9;
  PCMatrix44Tmpl<double>::transform_normal<double>((uint64_t)&v19, v29.f64, &v17);
  double v30 = v18;
  float64x2_t v29 = v17;
  double v10 = sqrt(v17.f64[0] * v17.f64[0] + v17.f64[1] * v17.f64[1] + v18 * v18);
  if (v10 <= -0.000000100000001 || v10 >= 0.000000100000001)
  {
    v29.f64[0] = v17.f64[0] / v10;
    v29.f64[1] = v17.f64[1] / v10;
    double v30 = v18 / v10;
  }
  *(void *)&v17.f64[0] = &v33.var30;
  LODWORD(v17.f64[1]) = 0;
  std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v17, 0xEuLL);
  v33.var30.var0 |= 0x18uLL;
  float64x2_t v11 = (float64x2_t)((__n128 (*)(OZElement *, uint64_t *, OZRenderState *))*(void *)(*(void *)this
                                                                                                + 1256))(this, &v19, &v33);
  double v12 = -(*(double *)&v31 * v29.f64[0] + *((double *)&v31 + 1) * v29.f64[1] + v32 * v30)
      / (v29.f64[0] * v29.f64[0] + v29.f64[1] * v29.f64[1] + v30 * v30);
  v11.f64[0] = *(double *)&v31 - (*(double *)&v31 + v29.f64[0] * v12);
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v19, v11, *((double *)&v31 + 1) - (*((double *)&v31 + 1) + v29.f64[1] * v12), v32 - (v32 + v30 * v12));
  PCMatrix44Tmpl<double>::operator*(a3, (long long *)&v19, (uint64_t)&v17);
  if (&v17 != (float64x2_t *)a3)
  {
    for (uint64_t i = 0; i != 128; i += 32)
    {
      uint64_t v15 = a3 + i;
      __n128 result = *(__n128 *)((char *)&v17 + i);
      long long v16 = *(long long *)((char *)&v17 + i + 16);
      *(__n128 *)uint64_t v15 = result;
      *(_OWORD *)(v15 + 16) = v16;
    }
  }
  return result;
}

uint64_t OZElement::isVisibleInRig(OZElement *this)
{
  uint64_t v2 = (void *)((char *)this + 6680);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 6680), MEMORY[0x1E4F1FA48], 0.0);
  float v4 = v3;
  char v5 = (*(uint64_t (**)(void *))(*((void *)this + 835) + 560))(v2);
  uint64_t result = 1;
  if (v4 > -0.00001 && v4 < 0.00001 && (v5 & 1) == 0)
  {
    uint64_t v14 = (uint64_t)&v14;
    uint64_t v15 = &v14;
    uint64_t v16 = 0;
    OZBehavior::GetBehaviorsAffectingChannel(v2, &v14, 1);
    int v7 = v15;
    if (v15 == &v14) {
      goto LABEL_14;
    }
    char v8 = 0;
    char v9 = 0;
    do
    {
      unint64_t v10 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v7[2] + 344))(v7[2]) + 8);
      long long v17 = xmmword_1B7E77B90;
      if (OZFactory::isKindOfClass(v10, (int32x4_t *)&v17))
      {
        float64x2_t v11 = (const void *)v7[2];
        if (v11)
        {
          if (v12)
          {
            uint64_t ChanBase = OZSingleChannelBehavior::getChanBase(v12);
            if (ChanBase) {
              v9 |= ChanBase == (void)v2;
            }
          }
        }
      }
      else
      {
        v8 |= (*((unsigned char *)this + 1024) & 2) == 0;
      }
      int v7 = (uint64_t *)v7[1];
    }
    while (v7 != &v14);
    if (v8 & 1 | ((v9 & 1) == 0))
    {
LABEL_14:
      std::__list_imp<unsigned int>::clear(&v14);
      return 1;
    }
    else
    {
      std::__list_imp<unsigned int>::clear(&v14);
      return 0;
    }
  }
  return result;
}

void sub_1B7BDA0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_lrSizeImpl::getInstance(OZElement::OZElement_lrSizeImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_lrSizeImpl::getInstance(void)::OZElement_lrSizeImpl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    double v3 = &v4;
    std::__call_once(&OZElement::OZElement_lrSizeImpl::getInstance(void)::OZElement_lrSizeImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_lrSizeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_lrSizeImpl::_OZElement_lrSize;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_lrSizeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_lrSizeImpl::_OZElement_lrSize) {
    operator new();
  }
}

void sub_1B7BDA1C8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZElement::OZElement_lrSizeImpl::OZElement_lrSizeImpl(OZElement::OZElement_lrSizeImpl *this)
{
}

void sub_1B7BDA29C(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_lrSizeInfo::getInstance(OZElement::OZElement_lrSizeInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_lrSizeInfo::getInstance(void)::OZElement_lrSizeInfo_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    double v3 = &v4;
    std::__call_once(&OZElement::OZElement_lrSizeInfo::getInstance(void)::OZElement_lrSizeInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_lrSizeInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_lrSizeInfo::_OZElement_lrSizeInfo;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_lrSizeInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_lrSizeInfo::_OZElement_lrSizeInfo) {
    operator new();
  }
}

void sub_1B7BDA378(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZElement::OZElement_lrSizeInfo *OZElement::OZElement_lrSizeInfo::OZElement_lrSizeInfo(OZElement::OZElement_lrSizeInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 50.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZElement::OZElement_lrSizeInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F113AF50;
  *((void *)this + 10) = &unk_1F113AF70;
  return this;
}

void sub_1B7BDA44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_lrIntensityImpl::getInstance(OZElement::OZElement_lrIntensityImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_lrIntensityImpl::getInstance(void)::OZElement_lrIntensityImpl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_lrIntensityImpl::getInstance(void)::OZElement_lrIntensityImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_lrIntensityImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_lrIntensityImpl::_OZElement_lrIntensity;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_lrIntensityImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_lrIntensityImpl::_OZElement_lrIntensity) {
    operator new();
  }
}

void sub_1B7BDA528(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZElement::OZElement_lrIntensityImpl::OZElement_lrIntensityImpl(OZChannelPercent *this)
{
}

void sub_1B7BDA5FC(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_lrIntensityScaleImpl::getInstance(OZElement::OZElement_lrIntensityScaleImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_lrIntensityScaleImpl::getInstance(void)::OZElement_lrIntensityScaleImpl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_lrIntensityScaleImpl::getInstance(void)::OZElement_lrIntensityScaleImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_lrIntensityScaleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_lrIntensityScaleImpl::_OZElement_lrIntensityScale;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_lrIntensityScaleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_lrIntensityScaleImpl::_OZElement_lrIntensityScale) {
    operator new();
  }
}

void sub_1B7BDA6D8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZElement::OZElement_lrIntensityScaleImpl::OZElement_lrIntensityScaleImpl(OZChannelPercent *this)
{
}

void sub_1B7BDA7AC(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_lrOpacityImpl::getInstance(OZElement::OZElement_lrOpacityImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_lrOpacityImpl::getInstance(void)::OZElement_lrOpacityImpl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_lrOpacityImpl::getInstance(void)::OZElement_lrOpacityImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_lrOpacityImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_lrOpacityImpl::_OZElement_lrOpacity;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_lrOpacityImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_lrOpacityImpl::_OZElement_lrOpacity) {
    operator new();
  }
}

void sub_1B7BDA888(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZElement::OZElement_lrOpacityImpl::OZElement_lrOpacityImpl(OZChannelPercent *this)
{
}

void sub_1B7BDA958(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_reflectivityImpl::getInstance(OZElement::OZElement_reflectivityImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_reflectivityImpl::getInstance(void)::OZElement_reflectivityImpl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_reflectivityImpl::getInstance(void)::OZElement_reflectivityImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_reflectivityImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_reflectivityImpl::_OZElement_reflectivity;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_reflectivityImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_reflectivityImpl::_OZElement_reflectivity) {
    operator new();
  }
}

void sub_1B7BDAA34(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZElement::OZElement_reflectivityImpl::OZElement_reflectivityImpl(OZChannelPercent *this)
{
}

void sub_1B7BDAB14(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_reflectionBlurImpl::getInstance(OZElement::OZElement_reflectionBlurImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_reflectionBlurImpl::getInstance(void)::OZElement_reflectionBlurImpl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_reflectionBlurImpl::getInstance(void)::OZElement_reflectionBlurImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_reflectionBlurImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_reflectionBlurImpl::_OZElement_reflectionBlur;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_reflectionBlurImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_reflectionBlurImpl::_OZElement_reflectionBlur) {
    operator new();
  }
}

void sub_1B7BDABF0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZElement::OZElement_reflectionBlurImpl::OZElement_reflectionBlurImpl(OZElement::OZElement_reflectionBlurImpl *this)
{
}

void sub_1B7BDACC4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_reflectionBeginFalloffImpl::getInstance(OZElement::OZElement_reflectionBeginFalloffImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_reflectionBeginFalloffImpl::getInstance(void)::OZElement_reflectionBeginFalloffImpl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_reflectionBeginFalloffImpl::getInstance(void)::OZElement_reflectionBeginFalloffImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_reflectionBeginFalloffImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_reflectionBeginFalloffImpl::_OZElement_reflectionBeginFalloff;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_reflectionBeginFalloffImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_reflectionBeginFalloffImpl::_OZElement_reflectionBeginFalloff) {
    operator new();
  }
}

void sub_1B7BDADA0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZElement::OZElement_reflectionBeginFalloffImpl::OZElement_reflectionBeginFalloffImpl(OZElement::OZElement_reflectionBeginFalloffImpl *this)
{
}

void sub_1B7BDAE74(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_reflectionBeginFalloffInfo::getInstance(OZElement::OZElement_reflectionBeginFalloffInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_reflectionBeginFalloffInfo::getInstance(void)::OZElement_reflectionBeginFalloffInfo_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_reflectionBeginFalloffInfo::getInstance(void)::OZElement_reflectionBeginFalloffInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_reflectionBeginFalloffInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_reflectionBeginFalloffInfo::_OZElement_reflectionBeginFalloffInfo;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_reflectionBeginFalloffInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_reflectionBeginFalloffInfo::_OZElement_reflectionBeginFalloffInfo) {
    operator new();
  }
}

void sub_1B7BDAF50(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZElement::OZElement_reflectionBeginFalloffInfo *OZElement::OZElement_reflectionBeginFalloffInfo::OZElement_reflectionBeginFalloffInfo(OZElement::OZElement_reflectionBeginFalloffInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZElement::OZElement_reflectionBeginFalloffInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F113B298;
  *((void *)this + 10) = &unk_1F113B2B8;
  return this;
}

void sub_1B7BDB024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_reflectionEndFalloffImpl::getInstance(OZElement::OZElement_reflectionEndFalloffImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_reflectionEndFalloffImpl::getInstance(void)::OZElement_reflectionEndFalloffImpl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_reflectionEndFalloffImpl::getInstance(void)::OZElement_reflectionEndFalloffImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_reflectionEndFalloffImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_reflectionEndFalloffImpl::_OZElement_reflectionEndFalloff;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_reflectionEndFalloffImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_reflectionEndFalloffImpl::_OZElement_reflectionEndFalloff) {
    operator new();
  }
}

void sub_1B7BDB100(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZElement::OZElement_reflectionEndFalloffImpl::OZElement_reflectionEndFalloffImpl(OZElement::OZElement_reflectionEndFalloffImpl *this)
{
}

void sub_1B7BDB1E4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_reflectionEndFalloffInfo::getInstance(OZElement::OZElement_reflectionEndFalloffInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_reflectionEndFalloffInfo::getInstance(void)::OZElement_reflectionEndFalloffInfo_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_reflectionEndFalloffInfo::getInstance(void)::OZElement_reflectionEndFalloffInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_reflectionEndFalloffInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_reflectionEndFalloffInfo::_OZElement_reflectionEndFalloffInfo;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_reflectionEndFalloffInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_reflectionEndFalloffInfo::_OZElement_reflectionEndFalloffInfo) {
    operator new();
  }
}

void sub_1B7BDB2C0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZElement::OZElement_reflectionEndFalloffInfo *OZElement::OZElement_reflectionEndFalloffInfo::OZElement_reflectionEndFalloffInfo(OZElement::OZElement_reflectionEndFalloffInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 1000.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZElement::OZElement_reflectionEndFalloffInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F113B388;
  *((void *)this + 10) = &unk_1F113B3A8;
  return this;
}

void sub_1B7BDB394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_reflectionFalloffExponentImpl::getInstance(OZElement::OZElement_reflectionFalloffExponentImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_reflectionFalloffExponentImpl::getInstance(void)::OZElement_reflectionFalloffExponentImpl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_reflectionFalloffExponentImpl::getInstance(void)::OZElement_reflectionFalloffExponentImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_reflectionFalloffExponentImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_reflectionFalloffExponentImpl::_OZElement_reflectionFalloffExponent;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_reflectionFalloffExponentImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_reflectionFalloffExponentImpl::_OZElement_reflectionFalloffExponent) {
    operator new();
  }
}

void sub_1B7BDB470(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZElement::OZElement_reflectionFalloffExponentImpl::OZElement_reflectionFalloffExponentImpl(OZElement::OZElement_reflectionFalloffExponentImpl *this)
{
}

void sub_1B7BDB554(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_reflectionFalloffExponentInfo::getInstance(OZElement::OZElement_reflectionFalloffExponentInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_reflectionFalloffExponentInfo::getInstance(void)::OZElement_reflectionFalloffExponentInfo_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_reflectionFalloffExponentInfo::getInstance(void)::OZElement_reflectionFalloffExponentInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_reflectionFalloffExponentInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_reflectionFalloffExponentInfo::_OZElement_reflectionFalloffExponentInfo;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_reflectionFalloffExponentInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_reflectionFalloffExponentInfo::_OZElement_reflectionFalloffExponentInfo) {
    operator new();
  }
}

void sub_1B7BDB630(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZElement::OZElement_reflectionFalloffExponentInfo *OZElement::OZElement_reflectionFalloffExponentInfo::OZElement_reflectionFalloffExponentInfo(OZElement::OZElement_reflectionFalloffExponentInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 8.0, 0.1, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZElement::OZElement_reflectionFalloffExponentInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F113B478;
  *((void *)this + 10) = &unk_1F113B498;
  return this;
}

void sub_1B7BDB704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_castsReflectionImpl::getInstance(OZElement::OZElement_castsReflectionImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_castsReflectionImpl::getInstance(void)::OZElement_castsReflectionImpl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_castsReflectionImpl::getInstance(void)::OZElement_castsReflectionImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_castsReflectionImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_castsReflectionImpl::_OZElement_castsReflection;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_castsReflectionImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_castsReflectionImpl::_OZElement_castsReflection) {
    operator new();
  }
}

void sub_1B7BDB7E0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZElement::OZElement_castsReflectionImpl::OZElement_castsReflectionImpl(OZElement::OZElement_castsReflectionImpl *this)
{
}

void sub_1B7BDB8B4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_conversionImpl::getInstance(OZElement::OZElement_conversionImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_conversionImpl::getInstance(void)::OZElement_conversionImpl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_conversionImpl::getInstance(void)::OZElement_conversionImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_conversionImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_conversionImpl::_OZElement_conversion;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_conversionImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_conversionImpl::_OZElement_conversion) {
    operator new();
  }
}

void sub_1B7BDB990(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZElement::OZElement_conversionImpl::OZElement_conversionImpl(OZElement::OZElement_conversionImpl *this)
{
}

void sub_1B7BDBA64(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_conversionTypeImpl::getInstance(OZElement::OZElement_conversionTypeImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_conversionTypeImpl::getInstance(void)::OZElement_conversionTypeImpl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_conversionTypeImpl::getInstance(void)::OZElement_conversionTypeImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_conversionTypeImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_conversionTypeImpl::_OZElement_conversionType;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_conversionTypeImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_conversionTypeImpl::_OZElement_conversionType) {
    operator new();
  }
}

void sub_1B7BDBB40(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZElement::OZElement_conversionTypeImpl::OZElement_conversionTypeImpl(OZElement::OZElement_conversionTypeImpl *this)
{
}

void sub_1B7BDBC14(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_dropShadowOpacityImpl::getInstance(OZElement::OZElement_dropShadowOpacityImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_dropShadowOpacityImpl::getInstance(void)::OZElement_dropShadowOpacityImpl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_dropShadowOpacityImpl::getInstance(void)::OZElement_dropShadowOpacityImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_dropShadowOpacityImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_dropShadowOpacityImpl::_OZElement_dropShadowOpacity;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_dropShadowOpacityImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_dropShadowOpacityImpl::_OZElement_dropShadowOpacity) {
    operator new();
  }
}

void sub_1B7BDBCF0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZElement::OZElement_dropShadowOpacityImpl::OZElement_dropShadowOpacityImpl(OZChannelPercent *this)
{
}

void sub_1B7BDBDC0(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_dropShadowBlurImpl::getInstance(OZElement::OZElement_dropShadowBlurImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_dropShadowBlurImpl::getInstance(void)::OZElement_dropShadowBlurImpl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_dropShadowBlurImpl::getInstance(void)::OZElement_dropShadowBlurImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_dropShadowBlurImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_dropShadowBlurImpl::_OZElement_dropShadowBlur;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_dropShadowBlurImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_dropShadowBlurImpl::_OZElement_dropShadowBlur) {
    operator new();
  }
}

void sub_1B7BDBE9C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZElement::OZElement_dropShadowBlurImpl::OZElement_dropShadowBlurImpl(OZElement::OZElement_dropShadowBlurImpl *this)
{
}

void sub_1B7BDBF70(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_dropShadowBlurInfo::getInstance(OZElement::OZElement_dropShadowBlurInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_dropShadowBlurInfo::getInstance(void)::OZElement_dropShadowBlurInfo_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_dropShadowBlurInfo::getInstance(void)::OZElement_dropShadowBlurInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_dropShadowBlurInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_dropShadowBlurInfo::_OZElement_dropShadowBlurInfo;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_dropShadowBlurInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_dropShadowBlurInfo::_OZElement_dropShadowBlurInfo) {
    operator new();
  }
}

void sub_1B7BDC04C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZElement::OZElement_dropShadowBlurInfo *OZElement::OZElement_dropShadowBlurInfo::OZElement_dropShadowBlurInfo(OZElement::OZElement_dropShadowBlurInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZElement::OZElement_dropShadowBlurInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F113B748;
  *((void *)this + 10) = &unk_1F113B768;
  return this;
}

void sub_1B7BDC120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_dropShadowDistanceImpl::getInstance(OZElement::OZElement_dropShadowDistanceImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_dropShadowDistanceImpl::getInstance(void)::OZElement_dropShadowDistanceImpl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_dropShadowDistanceImpl::getInstance(void)::OZElement_dropShadowDistanceImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_dropShadowDistanceImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_dropShadowDistanceImpl::_OZElement_dropShadowDistance;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_dropShadowDistanceImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_dropShadowDistanceImpl::_OZElement_dropShadowDistance) {
    operator new();
  }
}

void sub_1B7BDC1FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZElement::OZElement_dropShadowDistanceImpl::OZElement_dropShadowDistanceImpl(OZElement::OZElement_dropShadowDistanceImpl *this)
{
}

void sub_1B7BDC2D4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_dropShadowAngleImpl::getInstance(OZElement::OZElement_dropShadowAngleImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_dropShadowAngleImpl::getInstance(void)::OZElement_dropShadowAngleImpl_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_dropShadowAngleImpl::getInstance(void)::OZElement_dropShadowAngleImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_dropShadowAngleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_dropShadowAngleImpl::_OZElement_dropShadowAngle;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_dropShadowAngleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_dropShadowAngleImpl::_OZElement_dropShadowAngle) {
    operator new();
  }
}

void sub_1B7BDC3B0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZElement::OZElement_dropShadowAngleImpl::OZElement_dropShadowAngleImpl(OZChannelAngle *this)
{
}

void sub_1B7BDC498(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZElement::OZElement_cropInfo::getInstance(OZElement::OZElement_cropInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement::OZElement_cropInfo::getInstance(void)::OZElement_cropInfo_once, memory_order_acquire) != -1)
  {
    float v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZElement::OZElement_cropInfo::getInstance(void)::OZElement_cropInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement::OZElement_cropInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement::OZElement_cropInfo::_OZElement_cropInfo;
}

void std::__call_once_param<std::tuple<OZElement::OZElement_cropInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZElement::OZElement_cropInfo::_OZElement_cropInfo) {
    operator new();
  }
}

void sub_1B7BDC574(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZElement::OZElement_cropInfo *OZElement::OZElement_cropInfo::OZElement_cropInfo(OZElement::OZElement_cropInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 200.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZElement::OZElement_cropInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F113B8B0;
  *((void *)this + 10) = &unk_1F113B8D0;
  return this;
}

void sub_1B7BDC648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void PCLightWrapOptions::~PCLightWrapOptions(PCLightWrapOptions *this)
{
  *((void *)this + 4) = &unk_1F1199AC8;
  *((unsigned char *)this + 48) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 5);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'PCLightWrapOptions::~PCLightWrapOptions(PCLightWrapOptions *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v1 + 4) = &unk_1F1199AC8;
  v1[48] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 5);

  JUMPOUT(0x1BA9BFBA0);
}

void PCBlendOptions::~PCBlendOptions(PCSharedCount *this)
{
  this->unint64_t var0 = (PC_Sp_counted_base *)&unk_1F113B9A8;
  this[4].unint64_t var0 = (PC_Sp_counted_base *)&unk_1F113B9D8;
  PCSharedCount::~PCSharedCount(this + 3);
  this[4].unint64_t var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[6].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[5].var0);
}

{
  uint64_t vars8;

  PCBlendOptions::~PCBlendOptions(this);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'PCBlendOptions::~PCBlendOptions(PCBlendOptions *this)
{
}

{
  uint64_t vars8;

  PCBlendOptions::~PCBlendOptions((PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x1BA9BFBA0);
}

void std::vector<PCVector3<double>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    OZRenderState __p = std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v3, a2);
    char v8 = (char *)__p + v5;
    char v9 = (char *)__p + v5;
    unint64_t v10 = (char *)__p + 24 * v6;
    std::vector<PCVector3<double>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8) {
      char v9 = &v8[(v9 - v8 - 24) % 0x18uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1B7BDC96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::list<OZEffect *>::__move_assign(uint64_t *a1, void *a2)
{
  return std::list<OZShapeBehaviorVertexCacheEntry *>::splice((uint64_t)a1, a1, a2);
}

PCSharedCount *PCPtr<LiRenderer>::PCPtr<LiRendererBase>(PCSharedCount *a1, const PCSharedCount *a2)
{
  unint64_t var0 = a2->var0;
  if (a2->var0) {
  a1->unint64_t var0 = var0;
  }
  PCSharedCount::PCSharedCount(a1 + 1, a2 + 1);
  if (!a1->var0)
  {
    PCSharedCount::PCSharedCount(&v6);
    PCSharedCount::operator=((uint64_t *)&a1[1], (uint64_t *)&v6);
    PCSharedCount::~PCSharedCount(&v6);
  }
  return a1;
}

void sub_1B7BDCAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  PCSharedCount::~PCSharedCount(v10);
  _Unwind_Resume(a1);
}

uint64_t FloatRetrieval()
{
  return 0;
}

uint64_t IntRetrieval()
{
  return 0;
}

uint64_t BoolRetrieval()
{
  return 0;
}

uint64_t RGBARetrieval()
{
  return 0;
}

uint64_t RGBRetrieval()
{
  return 0;
}

uint64_t PointRetrieval()
{
  return 0;
}

uint64_t StringRetrieval()
{
  return 0;
}

uint64_t FontRetrieval()
{
  return 0;
}

uint64_t CustomRetrieval()
{
  return 0;
}

uint64_t HistogramRetrieval()
{
  return 0;
}

uint64_t NoOpRetrieval()
{
  return 0;
}

uint64_t getMaterialPlist(void)
{
  {
    getMaterialPlist(void)::materialPlist = loadMaterialPlist();
  }
  return getMaterialPlist(void)::materialPlist;
}

void sub_1B7BDCB84(_Unwind_Exception *a1)
{
}

uint64_t OZGetSubstanceLayerDictionary(void)
{
  MaterialPlist = (void *)getMaterialPlist();

  return [MaterialPlist objectForKey:@"substance"];
}

uint64_t OZGetImageAsset(void *a1, const char *a2)
{
  return [a1 objectForKey:@"image asset"];
}

uint64_t OZGetSpecularShininessAsset(void *a1, const char *a2)
{
  return [a1 objectForKey:@"specular shininess asset"];
}

uint64_t OZGetSpecularIntensityAsset(void *a1, const char *a2)
{
  return [a1 objectForKey:@"specular intensity asset"];
}

id OZCreateURLForAssetLayer(NSDictionary *a1)
{
  char v2 = [(NSDictionary *)a1 objectForKey:@"image asset"];
  if (!v2)
  {
    char v2 = [(NSDictionary *)a1 objectForKey:@"mask asset"];
    if (!v2)
    {
      char v2 = [(NSDictionary *)a1 objectForKey:@"specular angle asset"];
      if (!v2)
      {
        char v2 = [(NSDictionary *)a1 objectForKey:@"specular shininess asset"];
        if (!v2)
        {
          char v2 = [(NSDictionary *)a1 objectForKey:@"specular intensity asset"];
          if (!v2)
          {
            char v2 = [(NSDictionary *)a1 objectForKey:@"gradient asset"];
            if (!v2) {
              return 0;
            }
          }
        }
      }
    }
  }
  OZGetAssetURL(v2, (PCURL *)&v5);
  id v3 = v5;
  PCURL::~PCURL((PCURL *)&v5);
  return v3;
}

void sub_1B7BDCD18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

void OZGetAssetURL(NSDictionary *a1@<X0>, PCURL *a2@<X8>)
{
  id v4 = [(NSDictionary *)a1 objectForKey:@"name"];
  id v5 = [(NSDictionary *)a1 objectForKey:@"extension"];
  id v6 = [(NSDictionary *)a1 objectForKey:@"subdir"];
  if (v6) {
    int v7 = (__CFString *)[@"PhysicalLayerAssets/" stringByAppendingString:v6];
  }
  else {
    int v7 = @"PhysicalLayerAssets";
  }
  char v8 = (void *)[MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.ozone.framework"];
  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v9);
  PCURL::PCURL(a2, (CFTypeRef)[v8 URLForResource:v4 withExtension:v5 subdirectory:v7]);
  PCAutoreleasePool::~PCAutoreleasePool(&v9);
}

void sub_1B7BDCE1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCAutoreleasePool::~PCAutoreleasePool((id *)va);
  _Unwind_Resume(a1);
}

id OZGetAssetWidth(NSDictionary *a1)
{
  id result = [(NSDictionary *)a1 objectForKey:@"width"];
  if (result)
  {
    return (id)[result unsignedIntValue];
  }
  return result;
}

id OZGetAssetHeight(NSDictionary *a1)
{
  id result = [(NSDictionary *)a1 objectForKey:@"height"];
  if (result)
  {
    return (id)[result unsignedIntValue];
  }
  return result;
}

id OZGetAssetIsTransparent(NSDictionary *a1)
{
  id result = [(NSDictionary *)a1 objectForKey:@"transparent"];
  if (result)
  {
    return (id)[result BOOLValue];
  }
  return result;
}

uint64_t loadMaterialPlist(void)
{
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.ozone.framework");
  CFURLRef v1 = CFBundleCopyResourceURL(BundleWithIdentifier, @"OZMaterials", @"plist", 0);
  uint64_t v2 = [objc_alloc(MEMORY[0x1E4F1C9E8]) initWithContentsOfURL:v1];
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

void OZGradientSource::OZGradientSource(OZGradientSource *this)
{
  *((void *)this + 1OZDocument::~OZDocument(this - 1) = &unk_1F1199AC8;
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 104) = 1;
  LiImageFilter::LiImageFilter(this, (uint64_t *)&off_1F113BB28);
  *(void *)this = &unk_1F113BA20;
  *((void *)this + 1OZDocument::~OZDocument(this - 1) = &unk_1F113BB08;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
}

void sub_1B7BDD004(_Unwind_Exception *a1)
{
  *(void *)(v1 + 88) = v2;
  *(unsigned char *)(v1 + 104) = 0;
  PCWeakCount::~PCWeakCount(v3);
  _Unwind_Resume(a1);
}

CGColorSpace **OZGradientSource::getHelium@<X0>(OZGradientSource *this@<X0>, LiAgent *a2@<X1>, void *a3@<X8>)
{
  RequestedColorDescription = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((void *)a2 + 6) + 160));
  FxColorDescription::FxColorDescription(&v21, RequestedColorDescription, CGColorSpace);
  LiAgent::getHeliumInColorDescription(a2, *((LiImageSource **)this + 2), &v21, &v20);
  if (v20)
  {
    float64x2_t v8 = *(float64x2_t *)((char *)this + 40);
    float64x2_t v18 = *(float64x2_t *)((char *)this + 56);
    float64x2_t v19 = v8;
    uint64_t v17 = 0x3FF0000000000000;
    LiAgent::getInversePixelTransform(a2, 0.0, (uint64_t)v16);
    id v9 = (float32x4_t *)*((void *)this + 9);
    uint64_t v10 = FxColorDescription::getCGColorSpace(&v21);
    OZGradient1D::getHeliumGradientTexture(v9, v16, &v17, &v19, &v18, v10);
    if (FxColorDescription::isHDR(&v21))
    {
      FxColorDescription::FxColorDescription((uint64_t)&v14, (uint64_t)&v21, 0);
      FxApplyColorConform(&v15, &v14, &v21, &v13);
      uint64_t v11 = v13;
      if (v15 == v13)
      {
        if (v15) {
          (*(void (**)(void))(*(void *)v15 + 24))();
        }
      }
      else
      {
        if (v15)
        {
          (*(void (**)(void))(*(void *)v15 + 24))();
          uint64_t v11 = v13;
        }
        uint64_t v15 = v11;
      }
      PCCFRef<CGColorSpace *>::~PCCFRef(&v14._pcColorDesc._colorSpaceRef._obj);
    }
    FxApplyGradientBlendRequest();
  }
  *a3 = 0;
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v21._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B7BDD224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, CGColorSpace *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 24))(a10);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&a11);
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 24))(a15);
  }
  uint64_t v17 = *(void *)(v15 - 88);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v15 - 80));
  _Unwind_Resume(a1);
}

void OZGradientSource::~OZGradientSource(PCSharedCount *this)
{
  this->unint64_t var0 = (PC_Sp_counted_base *)off_1F113BB78;
  this[11].unint64_t var0 = (PC_Sp_counted_base *)off_1F113BC60;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F113BB30);
  this[11].unint64_t var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[12].var0);
}

{
  uint64_t vars8;

  this->unint64_t var0 = (PC_Sp_counted_base *)off_1F113BB78;
  this[11].unint64_t var0 = (PC_Sp_counted_base *)off_1F113BC60;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F113BB30);
  this[11].unint64_t var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[12].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'OZGradientSource::~OZGradientSource(OZGradientSource *this)
{
  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->unint64_t var0 = (PC_Sp_counted_base *)off_1F113BB78;
  v1[11].unint64_t var0 = (PC_Sp_counted_base *)off_1F113BC60;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F113BB30);
  v1[11].unint64_t var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[13].var0) = 0;

  PCWeakCount::~PCWeakCount(&v1[12].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->unint64_t var0 = (PC_Sp_counted_base *)off_1F113BB78;
  v1[11].unint64_t var0 = (PC_Sp_counted_base *)off_1F113BC60;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F113BB30);
  v1[11].unint64_t var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[12].var0);

  JUMPOUT(0x1BA9BFBA0);
}

OZChannelBase *OZElement::updateColorConversionChannels(OZElement *this)
{
  id result = (OZChannelBase *)(*(uint64_t (**)(OZElement *))(*(void *)this + 2240))(this);
  if (result)
  {
    id v3 = (OZScene *)(*(uint64_t (**)(OZElement *))(*(void *)this + 272))(this);
    unsigned int v4 = llround(OZScene::getSceneWhiteLevel(v3) * 100.0);
    if (*((_DWORD *)this + 3166) != v4) {
      *((_DWORD *)this + 3166) = v4;
    }
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 12000), MEMORY[0x1E4F1FA48], 0.0))
    {
      OZChannelBase::enable((OZChannelBase *)((char *)this + 12256), 1, 1);
      int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 12256), MEMORY[0x1E4F1FA48], 0.0);
      return OZChannelBase::enable((OZChannelBase *)((char *)this + 12512), ValueAsInt == 2, 1);
    }
    else
    {
      OZChannelBase::enable((OZChannelBase *)((char *)this + 12256), 0, 1);
      unsigned int v6 = (*(uint64_t (**)(OZElement *))(*(void *)this + 2232))(this);
      OZChannel::setValue((OZChannel *)((char *)this + 12256), MEMORY[0x1E4F1FA48], (double)v6, 1);
      int v7 = (OZChannelBase *)((char *)this + 12512);
      OZChannelBase::enable(v7, 0, 1);
      return (OZChannelBase *)OZChannel::resetToDefault((OZChannel *)v7, 1);
    }
  }
  return result;
}

void OZImageNode::OZImageNode(OZImageNode *this)
{
  *(void *)this = &unk_1F113BEF8;
  PCWorkingColorVector::PCWorkingColorVector((OZImageNode *)((char *)this + 8));
  *(void *)this = &unk_1F113BDF8;
}

void OZImageNode::getHeliumGraph()
{
  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v2, "subclass must implement");
  PCString::PCString(&v1, "/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZImageNode.cpp");
  PCException::PCException(exception, &v2, &v1, 49);
  *(void *)exception = &unk_1F10B1208;
}

void sub_1B7BDD8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

float OZImageNode::getDimensions(OZImageNode *this, float *a2, float *a3, const OZRenderState *a4)
{
  v14[0] = 0;
  v14[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v15 = _Q0;
  (*(void (**)(OZImageNode *, void *, const OZRenderState *))(*(void *)this + 16))(this, v14, a4);
  double v11 = *((double *)&v15 + 1);
  float v12 = *(double *)&v15;
  *a2 = v12;
  float result = v11;
  *a3 = result;
  return result;
}

uint64_t OZImageNode::makeImageSource(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 152))();
}

void OZImageNode::makeRender(OZImageNode *this, OZRenderParams *a2, const OZRenderGraphState *a3)
{
}

void sub_1B7BDDA78(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E56B8860);
  _Unwind_Resume(a1);
}

void OZImageNode::makeRenderImageSource(OZImageNode *this, OZRenderParams *a2, const OZRenderGraphState *a3)
{
}

void sub_1B7BDDB40(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E56B8860);
  _Unwind_Resume(a1);
}

void OZImageNode::makeRenderTemporalSource(OZImageNode *this@<X0>, PCSharedCount *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 168))(&v5);
  if (v5) {
    operator new();
  }
  a2->unint64_t var0 = 0;
  PCSharedCount::PCSharedCount(a2 + 1);
  PCSharedCount::~PCSharedCount(&v6);
}

void sub_1B7BDDC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, PCSharedCount a12)
{
  PCSharedCount::~PCSharedCount(v12);
  PCSharedCount::~PCSharedCount(&a12);
  _Unwind_Resume(a1);
}

uint64_t OZLiElementTimeRender::OZLiElementTimeRender(uint64_t a1, uint64_t a2, uint64_t a3, const OZRenderGraphState *a4, const PCSharedCount *a5)
{
  *(void *)(a1 + 344) = &unk_1F1199AC8;
  *(void *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 360) = 1;
  LiImageSource::LiImageSource((LiImageSource *)a1, (uint64_t *)&off_1F115E088);
  *(void *)a1 = &unk_1F115DF98;
  *(void *)(a1 + 344) = &unk_1F115E068;
  *(void *)(a1 + 16) = a2;
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)(a1 + 24), a4);
  *(PCSharedCount *)(a1 + 328) = (PCSharedCount)a5->var0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 336), a5 + 1);
  *(void *)(a1 + 320) = 0;
  return a1;
}

void sub_1B7BDDDB0(_Unwind_Exception *a1)
{
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v1 + 248);
  std::__list_imp<unsigned int>::clear((void *)(v1 + 88));
  OZChannelBase::setRangeName((OZChannelBase *)v1, v3 + 1);
  *(void *)(v1 + 344) = v2;
  *(unsigned char *)(v1 + 360) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 352));
  _Unwind_Resume(a1);
}

void OZImageNode::buildRenderGraph(OZImageNode *this, OZRenderParams *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  (*(void (**)(LiImageSource **__return_ptr))(*(void *)this + 152))(&v4);
  operator new();
}

void sub_1B7BDDEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  PCSharedCount::~PCSharedCount(v7 + 1);
  PCSharedCount::~PCSharedCount(v6);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

__n128 OZRenderNode::getBounds(uint64_t a1, __n128 *a2)
{
  __asm { FMOV            V0.2D, #-1.0 }
  a2[1] = result;
  return result;
}

void OZImageElement::registerRetiming(OZImageElement *this)
{
  {
    OZRetimingUtil::RetimingExaminer::RetimingExaminer((uint64_t)&OZImageElement::registerRetiming(void)::sRetimer);
    OZImageElement::registerRetiming(void)::sRetimer = (uint64_t)&unk_1F113E320;
    __cxa_atexit((void (*)(void *))OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::~RetimingExaminerTemplate, &OZImageElement::registerRetiming(void)::sRetimer, &dword_1B73F3000);
  }
}

void sub_1B7BDE4A8(_Unwind_Exception *a1)
{
}

void OZImageElement::OZImageElement(OZImageElement *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZElement::OZElement((OZElement *)this, a2, a3, a4);
  void *v5 = &unk_1F113BF58;
  v5[2] = &unk_1F113C888;
  v5[6] = &unk_1F113CAE0;
  v5[816] = &unk_1F113CB38;
  PCURL::PCURL((PCURL *)v96, @"Channel Image Element Footage Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 18776), v96, (OZChannelFolder *)((char *)this + 320), 0x144u, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v6, @"Channel Image Element Footage");
  OZChanFootageRefWithPicker::OZChanFootageRefWithPicker((OZImageElement *)((char *)this + 18904), v96, (OZChannelFolder *)((char *)this + 18776), 0x12Cu, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v7, @"Channel Image Element Footage");
  OZChanFootageRefWithPicker::OZChanFootageRefWithPicker((OZImageElement *)((char *)this + 19112), v96, (OZChannelFolder *)((char *)this + 320), 0x12Cu, 0xAu);
  PCString::~PCString(v96);
  PCURL::PCURL(v8, @"Channel Image Element Page Number");
  uint64_t Instance = (OZImageElement::OZImageElement_pageNumberInfo *)OZImageElement::OZImageElement_pageNumberImpl::getInstance(v9);
  double v11 = (OZChannelInfo *)OZImageElement::OZImageElement_pageNumberInfo::getInstance(Instance);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 19320), 1.0, v96, (OZChannelFolder *)((char *)this + 320), 0x12Du, 0, (OZChannelImpl *)Instance, v11);
  PCString::~PCString(v96);
  PCURL::PCURL(v12, @"Channel Image Element Background Color");
  OZChannelColor::OZChannelColor((OZImageElement *)((char *)this + 19472), 1.0, 1.0, 1.0, 1.0, v96, (OZChannelFolder *)((char *)this + 320), 0x12Eu, 0x10002u, 6u);
  PCString::~PCString(v96);
  PCURL::PCURL(v13, @"Channel Image Element Time Scale");
  long long v15 = (OZChannelImpl *)OZImageElement::OZImageElement_timeScaleImpl::getInstance(v14);
  OZChannelDouble::OZChannelDouble((OZImageElement *)((char *)this + 20632), 1.0, v96, (OZChannelFolder *)((char *)this + 320), 0x135u, 4259840, v15, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v16, @"Channel Image Element Time Reverse");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 20784), 0, v96, (OZChannelFolder *)((char *)this + 320), 0x136u, 0x410000u, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v17, @"Channel Image Element Time Remap Enum");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element Time Remap Label");
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 20936), 0, v96, &v95, (OZChannelFolder *)((char *)this + 320), 0x12Fu, 2, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v18, @"Channel Image Element Retime Frame");
  OZChannelRetimeFrame::OZChannelRetimeFrame((OZImageElement *)((char *)this + 21192), 1.0, v96, (OZChannelFolder *)((char *)this + 320), 0x130u, 131074);
  PCString::~PCString(v96);
  PCURL::PCURL(v19, @"Channel Image Element Retime Frame Cache");
  FxColorDescription v21 = (OZChannelImpl *)OZImageElement::OZImageElement_retimeFrameCacheImpl::getInstance(v20);
  OZChannelDouble::OZChannelDouble((OZImageElement *)((char *)this + 21344), 1.0, v96, (OZChannelFolder *)((char *)this + 320), 0x13Fu, 131074, v21, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v22, @"Channel Image Element Retime Sampling Enum");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element Retime Sampling Label");
  OZChannelEnumRetime::OZChannelEnumRetime((OZImageElement *)((char *)this + 21496), v96, &v95, (OZChannelFolder *)((char *)this + 320), 0x131u, 2u);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v23, @"Channel Image Element End Condition Enum");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element End Condition Label");
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 21752), v96, &v95, (OZChannelFolder *)((char *)this + 320), 0x132u, 2u, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v24, @"Channel Image Element Loop Duration");
  long long v26 = (OZChannelImpl *)OZImageElement::OZImageElement_loopDurationImpl::getInstance(v25);
  OZChannelDouble::OZChannelDouble((OZImageElement *)((char *)this + 22008), 0.0, v96, (OZChannelFolder *)((char *)this + 320), 0x133u, 32770, v26, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v27, @"Channel Image Element Duration Cache");
  OZChannelDouble::OZChannelDouble((OZImageElement *)((char *)this + 22160), 0.0, v96, (OZChannelFolder *)((char *)this + 320), 0x140u, 2, 0, 0);
  PCString::~PCString(v96);
  PCSharedCount::PCSharedCount(v28);
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element Layer Number");
  double v30 = (OZImageElement::OZImageElement_layerInfo *)OZImageElement::OZImageElement_layerImpl::getInstance(v29);
  long long v31 = (OZChannelInfo *)OZImageElement::OZImageElement_layerInfo::getInstance(v30);
  OZChannelEnumLayer::OZChannelEnumLayer((OZImageElement *)((char *)this + 22312), v96, &v95, (OZChannelFolder *)((char *)this + 320), 0x134u, 2u, (OZChannelImpl *)v30, v31);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v32, @"Channel Image Element Drop Zone");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 22568), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x137u, 0x80u, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v33, @"Channel Image Element Drop Fit Mode Enum");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element Drop Fit Mode Label");
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 22720), v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x13Du, 0, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCString::PCString(v34, "Passthrough Placeholder");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 22976), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x153u, 0, 0, 0);
  PCString::~PCString(v96);
  double v36 = (OZImageElement::OZImageElement_dropInputIDImpl *)PCString::PCString(v35, "Source ID");
  long long v37 = (OZImageElement::OZImageElement_dropInputIDInfo *)OZImageElement::OZImageElement_dropInputIDImpl::getInstance(v36);
  char v38 = (OZChannelInfo *)OZImageElement::OZImageElement_dropInputIDInfo::getInstance(v37);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 23128), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x154u, 2, (OZChannelImpl *)v37, v38);
  PCString::~PCString(v96);
  PCURL::PCURL(v39, @"Channel Image Element Drop Use Display Aspect");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 23280), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x143u, 0, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v40, @"Channel Image Element Drop Type Enum");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element Drop Type Label");
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 23432), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x141u, 0, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v41, @"Channel Image Element Drop Type Enum (Composition)");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element Drop Type Label");
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 23688), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x14Bu, 136446088, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v42, @"Channel Image Element Drop Type Enum (Generator)");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element Drop Type Label");
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 23944), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x14Cu, 136446088, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v43, @"Channel Image Element Drop Type Enum (Effect)");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element Drop Type Label");
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 24200), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x14Du, 136446088, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v44, @"Channel Image Element Drop Type Enum (Effect, No Off)");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element Drop Type Label");
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 24456), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x14Eu, 136446088, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v45, @"Channel Image Element Drop Type Enum (Title)");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element Drop Type Label");
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 24712), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x14Fu, 136446088, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v46, @"Channel Image Element Drop Type Enum (Title, No Off)");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element Drop Type Label");
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 24968), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x150u, 136446088, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v47, @"Channel Image Element Drop Type Enum (Transition)");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element Drop Type Label");
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 25224), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x151u, 136446088, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v48, @"Channel Image Element Drop Type Enum (Transition, No Off)");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element Drop Type Label");
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 25480), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x152u, 136446088, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v49, @"Channel Image Element Drop Media Type Enum");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element Drop Media Type Label");
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 25736), 0, v96, &v95, (OZChannelFolder *)((char *)this + 448), 0x142u, 0, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v50, @"Channel Image Element Drop Replaced");
  OZChannelBool::OZChannelBool((OZChannelBool *)this + 171, 0, v96, (OZChannelFolder *)((char *)this + 448), 0x138u, 2u, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v51, @"Channel Image Element Drop Fit Factor");
  OZChannelScale::OZChannelScale((OZImageElement *)((char *)this + 26144), 1.0, 1.0, v96, (OZChannelFolder *)((char *)this + 448), 0x13Eu, 2u, 2u, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v52, @"Channel Image Element Drop Pan");
  long long v54 = (OZImageElement::OZImageElement_dropPanInfo *)OZImageElement::OZImageElement_dropPanImpl::getInstance(v53);
  long long v55 = (OZChannelInfo *)OZImageElement::OZImageElement_dropPanInfo::getInstance(v54);
  OZChannelPosition::OZChannelPosition((OZImageElement *)((char *)this + 26584), 0.0, 0.0, v96, (OZChannelFolder *)((char *)this + 448), 0x146u, 0, 2u, (OZChannelImpl *)v54, v55);
  PCString::~PCString(v96);
  PCURL::PCURL(v56, @"Channel Image Element Drop Scale");
  uint64_t v58 = (OZChannelImpl *)OZImageElement::OZImageElement_dropScaleImpl::getInstance(v57);
  OZChannelScale::OZChannelScale((OZImageElement *)((char *)this + 27288), 1.0, 1.0, v96, (OZChannelFolder *)((char *)this + 448), 0x147u, 0, 2u, v58, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v59, @"Channel Image Element Drop Fill Opaque");
  long long v61 = (OZChannelImpl *)OZImageElement::OZImageElement_dropFillOpaqueImpl::getInstance(v60);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 27728), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x148u, 0, v61, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v62, @"Channel Image Element Drop Fill Color");
  OZChannelColor::OZChannelColor((OZImageElement *)((char *)this + 27880), 0.0, 0.0, 0.0, 1.0, v96, (OZChannelFolder *)((char *)this + 448), 0x149u, 0, 6u);
  PCString::~PCString(v96);
  PCURL::PCURL(v63, @"Channel Image Element Drop Clear");
  OZChannelButton::OZChannelButton((OZChannelButton *)((char *)this + 29040), (void (*)(void *))OZImageElement::clearDropZoneCallbackStub, this, v96, (OZChannelFolder *)((char *)this + 448), 0x13Bu, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v64, @"Channel Image Element Drop Width");
  int v66 = (OZImageElement::OZImageElement_dropWidthInfo *)OZImageElement::OZImageElement_dropWidthImpl::getInstance(v65);
  double v67 = (OZChannelInfo *)OZImageElement::OZImageElement_dropWidthInfo::getInstance(v66);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 29232), 1.0, v96, (OZChannelFolder *)((char *)this + 448), 0x139u, 2, (OZChannelImpl *)v66, v67);
  PCString::~PCString(v96);
  PCURL::PCURL(v68, @"Channel Image Element Drop Height");
  CMTime v70 = (OZImageElement::OZImageElement_dropHeightInfo *)OZImageElement::OZImageElement_dropHeightImpl::getInstance(v69);
  CMTime v71 = (OZChannelInfo *)OZImageElement::OZImageElement_dropHeightInfo::getInstance(v70);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 29384), 1.0, v96, (OZChannelFolder *)((char *)this + 448), 0x13Au, 2, (OZChannelImpl *)v70, v71);
  PCString::~PCString(v96);
  PCString::PCString(v72, "Remove Background");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29536), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x155u, 0, 0, 0);
  PCString::~PCString(v96);
  PCString::PCString(v73, "Apply Motion Lights To Subject");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29688), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x156u, 0, 0, 0);
  PCString::~PCString(v96);
  PCString::PCString(v74, "Use Camera Source");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29840), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x157u, 0, 0, 0);
  PCString::~PCString(v96);
  PCString::PCString(v75, "Hidden Channel");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29992), 0, v96, (OZChannelFolder *)((char *)this + 448), 0x14Au, 0xAu, 0, 0);
  PCString::~PCString(v96);
  *((unsigned char *)this + 30144) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZImageElement *)((char *)this + 30148));
  PCURL::PCURL((OZImageElement *)((char *)this + 30168), "", 0);
  uint64_t v76 = MEMORY[0x1E4F1FA48];
  *((_OWORD *)this + 1886) = *MEMORY[0x1E4F1FA48];
  *((void *)this + 3774) = *(void *)(v76 + 16);
  *((_DWORD *)this + 7550) = 0;
  *((void *)this + 3776) = 0;
  *((void *)this + 3778) = 0;
  *((void *)this + 3777) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v94 = _Q0;
  *(_OWORD *)((char *)this + 30232) = _Q0;
  *((_DWORD *)this + 7562) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZImageElement *)((char *)this + 30252));
  *((unsigned char *)this + 30268) = 0;
  *((void *)this + 3784) = 0;
  *(_WORD *)((char *)this + 30289) = 0;
  *((void *)this + 3793) = 0;
  *(_OWORD *)((char *)this + 30296) = 0u;
  *(_OWORD *)((char *)this + 30312) = 0u;
  *(_OWORD *)((char *)this + 30328) = 0u;
  PCURL::PCURL((PCURL *)v96, @"Channel Image Element Cinematography Folder");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 30352), v96, (OZChannelFolder *)((char *)this + 320), 0x158u, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v82, @"Channel Image Element Focus Enum");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element Focus");
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 30480), v96, &v95, (OZChannelFolder *)((char *)this + 30352), 0x159u, 2u, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v83, @"Channel Image Element Aperture");
  OZChannelDouble::OZChannelDouble((OZImageElement *)((char *)this + 30736), 1.4, v96, (OZChannelFolder *)((char *)this + 30352), 0x15Au, 0, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v84, @"Channel Image Element Disparity");
  OZChannelDouble::OZChannelDouble((OZImageElement *)((char *)this + 30888), 0.0, v96, (OZChannelFolder *)((char *)this + 30352), 0x15Bu, 2, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v85, @"Channel Image Element FX Type Mode Enum");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element FX Type");
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 31040), v96, &v95, (OZChannelFolder *)((char *)this + 30352), 0x15Du, 2u, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v86, @"Channel Image Element User Focus Points");
  OZChannelPosition::OZChannelPosition((OZImageElement *)((char *)this + 31296), v96, (OZChannelFolder *)((char *)this + 30352), 0x15Cu, 0, 2u, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v87, @"Channel Image Element Display Mode Enum");
  PCURL::PCURL((PCURL *)&v95, @"Channel Image Element Display Mode");
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 32000), v96, &v95, (OZChannelFolder *)((char *)this + 30352), 0x15Eu, 2u, 0, 0);
  PCString::~PCString(&v95);
  PCString::~PCString(v96);
  PCURL::PCURL(v88, @"Channel Image Element Initialized");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 32256), 0, v96, (OZChannelFolder *)((char *)this + 30352), 0x15Fu, 2u, 0, 0);
  PCString::~PCString(v96);
  PCURL::PCURL(v89, @"Channel Image Element Retimed");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 32408), 0, v96, (OZChannelFolder *)((char *)this + 30352), 0x160u, 2u, 0, 0);
  PCString::~PCString(v96);
  *((void *)this + 4072) = 0;
  *((_OWORD *)this + 2035) = 0u;
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 56), 0x4000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 56));
  OZScene::setApplyMotionEffectScaleTo3DObjectRenders((uint64_t)this + 18904, 0);
  OZChanObjectManipRef::setAlwaysUpdateDefaultValue((uint64_t)this + 18904, 1);
  *((unsigned char *)this + 19096) = 1;
  *(void *)((char *)this + 18396) = 0x100000002;
  OZChannel::setKeyframable((OZChannel *)((char *)this + 29040), 0);
  OZChannel::setDiscrete((OZChannel *)((char *)this + 21192), 0, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 20784), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 20936), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 21496), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 21752), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 21192), 128, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 21344), 128, 0);
  *((unsigned char *)this + 30145) = 0;
  OZImageElement::getRetimingHash(this);
  *(_OWORD *)((char *)this + 30148) = *(_OWORD *)&v96[0].var0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 22976), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 22976), 8, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 22976), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 22976), 128, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23128), 2, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23128), 8, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23128), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23128), 128, 0);
  OZChannelFolder::setKeyframable((OZChannelFolder *)((char *)this + 26584), 0, 0);
  OZChannelFolder::setKeyframable((OZChannelFolder *)((char *)this + 27288), 0, 0);
  OZChannelFolder::setKeyframable((OZChannelFolder *)((char *)this + 27880), 0, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 23688), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23688), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23688), 0x2000000000, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 23944), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23944), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23944), 0x2000000000, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 24200), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24200), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24200), 0x2000000000, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 24456), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24456), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24456), 0x2000000000, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 24712), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24712), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24712), 0x2000000000, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 24968), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24968), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24968), 0x2000000000, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 25224), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 25224), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 25224), 0x2000000000, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 25480), 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 25480), 0x1000000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 25480), 0x2000000000, 0);
  OZImageElement::showHideDropZoneChannels(this, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 22568));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 23432));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 23688));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 23944));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 24200));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 24456));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 24712));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 24968));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 25224));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 25480));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 25736));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 22720));
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 26584));
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 27288));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 27728));
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 27880));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 23280));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 29040));
  OZChannelBase::setRangeName((OZChannelBase *)this, v90);
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 30352), 131076);
  OZChannelBase::setResetCallback((OZChannelBase *)this + 271, (void (*)(OZChannelBase *, void *))OZImageElementCinematographyResetCallback, (uint64_t *)this, 0);
  OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 320), (OZChannelBase *)this + 271);
  OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 320), (const OZChannelBase *)((char *)this + 6552), (OZChannelBase *)this + 271);
  OZChannel::setMin((OZChannel *)((char *)this + 30736), 2.0);
  OZChannel::setMax((OZChannel *)((char *)this + 30736), 16.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 30736), 2.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 30736), 16.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 30736), 0.1);
  OZChannel::setFineDelta((OZChannel *)((char *)this + 30736), 0.01);
  OZChannel::setInterpolation((OZChannel *)((char *)this + 30736), 1);
  CMTimeEpoch v91 = PCString::PCString(v96, "PISliderTransformerAperture");
  CMTime v92 = PCString::cf_str(v91);
  OZChannel::setSliderTransformerName((OZChannel *)((char *)this + 30736), v92);
  PCString::~PCString(v96);
  PCURL::PCURL(v93, @"Channel Image Element Aperture Suffix");
  OZChannel::setSuffix((OZChannel *)((char *)this + 30736), v96);
  PCString::~PCString(v96);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 30888), 0x20000000000, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 30480));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 30888));
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 31296));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 32000));
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 31040));
  *((_DWORD *)this + 8146) = 0;
  *(_OWORD *)((char *)this + 30232) = v94;
  *((void *)this + 3785) = 0;
  *((unsigned char *)this + 30288) = 0;
}

void sub_1B7BDFDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelBool *a10, OZChannelBool *a11, PCURL *a12, OZChannelBool *a13, OZChannelBool *a14, OZChannelBool *a15, OZChannelBool *a16, OZChannelColor *a17, OZChannel *a18, OZChanObjectRefWithPicker *a19, OZChannelFolder *a20,OZChannel *a21,OZChannel *a22,OZChannel2D *a23,OZChannelBool *a24,OZChannel *a25,PCString *a26,OZChannel *a27,OZChannel *a28,uint64_t a29,uint64_t a30,OZChannelPosition *a31,OZChannelEnum *a32,OZChannelEnum *a33,OZChannelBool *a34,OZChannelEnum *a35,OZChannelBool *a36,OZChannelEnum *a37,OZChannelEnum *a38,OZChannelBool *a39,OZChannelEnum *a40,PCString *a41,OZChannel *a42)
{
  PCString::~PCString((PCString *)(v47 - 104));
  uint64_t v49 = *(void **)(v42 + 32560);
  if (v49)
  {
    *(void *)(v42 + 32568) = v49;
    operator delete(v49);
  }
  OZChannelBool::~OZChannelBool(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannelEnum::~OZChannelEnum(v46);
  OZChannelPosition::~OZChannelPosition(a31);
  OZChannelEnum::~OZChannelEnum(a32);
  OZChannel::~OZChannel(v44);
  OZChannel::~OZChannel(v43);
  OZChannelEnum::~OZChannelEnum(a33);
  OZChannelFolder::~OZChannelFolder(v45);
  PCURL::~PCURL(a12);
  OZChannelBool::~OZChannelBool(a13);
  OZChannelBool::~OZChannelBool(a14);
  OZChannelBool::~OZChannelBool(a15);
  OZChannelBool::~OZChannelBool(a16);
  OZChannel::~OZChannel(a21);
  OZChannel::~OZChannel(a22);
  OZChannelButton::~OZChannelButton(*(OZChannelButton **)(v47 - 232));
  OZChannelColor::~OZChannelColor(*(OZChannelColor **)(v47 - 240));
  OZChannelBool::~OZChannelBool(a34);
  OZChannel2D::~OZChannel2D(*(OZChannel2D **)(v47 - 224));
  OZChannelPosition::~OZChannelPosition(*(OZChannelPosition **)(v47 - 216));
  OZChannel2D::~OZChannel2D(a23);
  OZChannelBool::~OZChannelBool(a24);
  OZChannelEnum::~OZChannelEnum(a35);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 192));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 184));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 176));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 168));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 160));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 152));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 144));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 136));
  OZChannelEnum::~OZChannelEnum(a37);
  OZChannelBool::~OZChannelBool(a36);
  OZChannel::~OZChannel(*(OZChannel **)(v47 - 128));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v47 - 120));
  OZChannelEnum::~OZChannelEnum(a38);
  OZChannelBool::~OZChannelBool(a39);
  OZChannelEnum::~OZChannelEnum(a26);
  OZChannel::~OZChannel(a27);
  OZChannel::~OZChannel(a28);
  OZChannelEnum::~OZChannelEnum(a40);
  OZChannelEnum::~OZChannelEnum(a41);
  OZChannel::~OZChannel(a42);
  OZChannelRetimeFrame::~OZChannelRetimeFrame(*(OZChannelRetimeFrame **)(v47 - 208));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v47 - 256));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v47 - 248));
  OZChannel::~OZChannel(a25);
  OZChannelColor::~OZChannelColor(a17);
  OZChannel::~OZChannel(a18);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(a19);
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(*(OZChanObjectRefWithPicker **)(v47 - 200));
  OZChannelFolder::~OZChannelFolder(a20);
  OZElement::~OZElement((OZElement *)v42);
  _Unwind_Resume(a1);
}

void OZImageElement::clearDropZoneCallbackStub(OZImageElement *this, void *a2)
{
  if (this && OZImageElement::isDropZone(this))
  {
    OZImageElement::clearDropZoneCallback(this);
  }
}

OZChannelBase *OZImageElement::showHideDropZoneChannels(OZImageElement *this, int a2)
{
  *((unsigned char *)this + 30249) = 0;
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 22568), 2, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23432), 2, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23688), 2, a2);
  unsigned int v4 = (OZChannelBase *)((char *)this + 23944);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23944), 2, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24200), 2, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24456), 2, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24712), 2, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 24968), 2, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 25224), 2, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 25480), 2, a2);
  uint64_t v5 = *((void *)this + 121);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 1584);
    if (v6)
    {
      if (OZImageElement::isDropZone(this) && OZImageElement::getFootage(this))
      {
        Footage = OZImageElement::getFootage(this);
        (*(void (**)(uint64_t *__return_ptr))(*(void *)Footage + 1232))(&v18);
        int isDefaultDropZoneFootage = OZImageElement::isDefaultDropZoneFootage((const PCURL *)&v18);
        PCURL::~PCURL((PCURL *)&v18);
        switch(*(_DWORD *)(v6 + 320))
        {
          case 1:
            if ((isDefaultDropZoneFootage & 1) == 0) {
              goto LABEL_20;
            }
            break;
          case 2:
            unsigned int v4 = (OZChannelBase *)((char *)this + 25480);
            if (isDefaultDropZoneFootage) {
              goto LABEL_20;
            }
            goto LABEL_9;
          case 3:
            unsigned int v4 = (OZChannelBase *)((char *)this + 24456);
            if ((isDefaultDropZoneFootage & 1) == 0) {
              goto LABEL_15;
            }
            goto LABEL_20;
          case 4:
            unsigned int v4 = (OZChannelBase *)((char *)this + 24968);
            if ((isDefaultDropZoneFootage & 1) == 0) {
              goto LABEL_17;
            }
            goto LABEL_20;
          default:
            char v9 = isDefaultDropZoneFootage;
            if (!isDefaultDropZoneFootage) {
              goto LABEL_19;
            }
            break;
        }
      }
      else
      {
        int v8 = *(_DWORD *)(v6 + 320);
        switch(v8)
        {
          case 1:
            goto LABEL_20;
          case 2:
LABEL_9:
            unsigned int v4 = (OZChannelBase *)((char *)this + 25224);
            goto LABEL_20;
          case 3:
LABEL_15:
            unsigned int v4 = (OZChannelBase *)((char *)this + 24200);
            goto LABEL_20;
          case 4:
LABEL_17:
            unsigned int v4 = (OZChannelBase *)((char *)this + 24712);
            goto LABEL_20;
          default:
            char v9 = 0;
            if (v8) {
              break;
            }
LABEL_19:
            unsigned int v4 = (OZChannelBase *)((char *)this + 23688);
            if ((v9 & 1) == 0) {
LABEL_20:
            }
              OZChannelBase::resetFlag(v4, 2, a2);
            break;
        }
      }
    }
  }
  uint64_t v10 = (OZChannelBase *)((char *)this + 25736);
  if (!OZImageElement::isDropZone(this))
  {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 25736), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 22720), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 26584), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 27288), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 27728), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 27880), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23280), 2, a2);
    uint64_t v10 = (OZChannelBase *)((char *)this + 29040);
LABEL_33:
    __n128 result = OZChannelBase::setFlag(v10, 2, a2);
    goto LABEL_34;
  }
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 25736), 2, a2);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 22720), 2, a2);
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)this + 171, MEMORY[0x1E4F1FA48], 0.0);
  float v12 = (OZChannelBase *)((char *)this + 26584);
  if (ValueAsInt)
  {
    OZChannelBase::resetFlag(v12, 2, a2);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 27288), 2, a2);
  }
  else
  {
    OZChannelBase::setFlag(v12, 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 27288), 2, a2);
  }
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 27728), 2, a2);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 27880), 2, a2);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 23280), 2, a2);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 29040), 2, a2);
  if ((OZImageElement::isInputSource(this) & 1) != 0
    || OZChannel::getValueAsInt((OZChannel *)((char *)this + 22976), MEMORY[0x1E4F1FA48], 0.0))
  {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 22720), 2, a2);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 23280), 2, a2);
  }
  uint64_t v13 = *((void *)this + 121);
  if (!v13) {
    goto LABEL_33;
  }
  uint64_t v14 = *(void *)(v13 + 1584);
  if (!v14) {
    goto LABEL_33;
  }
  if (*(_DWORD *)(v14 + 320) != 2) {
    goto LABEL_33;
  }
  __n128 result = (OZChannelBase *)OZImageElement::isBackgroundDropZone(this);
  if ((result & 1) == 0) {
    goto LABEL_33;
  }
LABEL_34:
  uint64_t v16 = *((void *)this + 121);
  if (v16)
  {
    if (*(void *)(v16 + 1584)) {
      return (OZChannelBase *)OZImageElement::updateDropZoneTypeChannels(this, a2);
    }
  }
  return result;
}

void sub_1B7BE0B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

OZChannelBase *OZImageElementCinematographyResetCallback(OZChannelBase *result, void *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    (*((void (**)(OZChannelBase *, void))result->var0 + 35))(result, 0);
    __n128 result = (OZChannelBase *)OZChannelBase::getObjectManipulator(v2);
    if (result)
    {
      if (result)
      {
        return OZImageElement::didResetCinematography((OZImageElement *)result);
      }
    }
  }
  return result;
}

void OZImageElement::OZImageElement(OZImageElement *this, const OZImageElement *a2, uint64_t a3)
{
  OZElement::OZElement((OZElement *)this, (const OZElement *)a2, a3);
  *(void *)uint64_t v5 = &unk_1F113BF58;
  *(void *)(v5 + 16) = &unk_1F113C888;
  *(void *)(v5 + 48) = &unk_1F113CAE0;
  *(void *)(v5 + 6528) = &unk_1F113CB38;
  uint64_t v6 = (OZChannelFolder *)(v5 + 18776);
  int v7 = (OZChannelFolder *)(v5 + 320);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 18776), (const OZChannelFolder *)((char *)a2 + 18776), (OZChannelFolder *)(v5 + 320));
  OZChanFootageRefWithPicker::OZChanFootageRefWithPicker((OZImageElement *)((char *)this + 18904), (const OZImageElement *)((char *)a2 + 18904), v6);
  OZChanFootageRefWithPicker::OZChanFootageRefWithPicker((OZImageElement *)((char *)this + 19112), (const OZImageElement *)((char *)a2 + 19112), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 19320), (const OZChannelBase *)((char *)a2 + 19320), v7);
  *((void *)this + 2415) = &unk_1F1101490;
  *((void *)this + 2417) = &unk_1F11017F0;
  OZChannelColor::OZChannelColor((OZImageElement *)((char *)this + 19472), (const OZImageElement *)((char *)a2 + 19472), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 20632), (const OZChannelBase *)((char *)a2 + 20632), v7);
  *((void *)this + 2579) = &unk_1F1100CF0;
  *((void *)this + 258OZDocument::~OZDocument(this - 1) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 20784), (const OZChannelBase *)((char *)a2 + 20784), v7);
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 20936), (const OZImageElement *)((char *)a2 + 20936), v7);
  OZChannelRetimeFrame::OZChannelRetimeFrame((OZImageElement *)((char *)this + 21192), (const OZChannelBase *)((char *)a2 + 21192), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 21344), (const OZChannelBase *)((char *)a2 + 21344), v7);
  *((void *)this + 2668) = &unk_1F1100CF0;
  *((void *)this + 2670) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 21496), (const OZImageElement *)((char *)a2 + 21496), v7);
  *((void *)this + 2687) = &unk_1F113DAE8;
  *((void *)this + 2689) = &unk_1F113DE58;
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 21752), (const OZImageElement *)((char *)a2 + 21752), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 22008), (const OZChannelBase *)((char *)a2 + 22008), v7);
  *((void *)this + 275OZDocument::~OZDocument(this - 1) = &unk_1F1100CF0;
  *((void *)this + 2753) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 22160), (const OZChannelBase *)((char *)a2 + 22160), v7);
  *((void *)this + 2770) = &unk_1F1100CF0;
  *((void *)this + 2772) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 22312), (const OZImageElement *)((char *)a2 + 22312), v7);
  *((void *)this + 2789) = &unk_1F113DEC8;
  *((void *)this + 279OZDocument::~OZDocument(this - 1) = &unk_1F113E238;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 22568), (const OZChannelBase *)((char *)a2 + 22568), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 22720), (const OZImageElement *)((char *)a2 + 22720), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 22976), (const OZChannelBase *)((char *)a2 + 22976), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 23128), (const OZChannelBase *)((char *)a2 + 23128), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 289OZDocument::~OZDocument(this - 1) = &unk_1F1101490;
  *((void *)this + 2893) = &unk_1F11017F0;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 23280), (const OZChannelBase *)((char *)a2 + 23280), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 23432), (const OZImageElement *)((char *)a2 + 23432), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 23688), (const OZImageElement *)((char *)a2 + 23688), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 23944), (const OZImageElement *)((char *)a2 + 23944), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 24200), (const OZImageElement *)((char *)a2 + 24200), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 24456), (const OZImageElement *)((char *)a2 + 24456), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 24712), (const OZImageElement *)((char *)a2 + 24712), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 24968), (const OZImageElement *)((char *)a2 + 24968), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 25224), (const OZImageElement *)((char *)a2 + 25224), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 25480), (const OZImageElement *)((char *)a2 + 25480), (OZChannelFolder *)((char *)this + 448));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 25736), (const OZImageElement *)((char *)a2 + 25736), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)this + 171, (const OZChannelBase *)((char *)a2 + 25992), (OZChannelFolder *)((char *)this + 448));
  OZChannelScale::OZChannelScale((OZImageElement *)((char *)this + 26144), (const OZImageElement *)((char *)a2 + 26144), (OZChannelFolder *)((char *)this + 448));
  OZChannelPosition::OZChannelPosition((OZImageElement *)((char *)this + 26584), (const OZImageElement *)((char *)a2 + 26584), (OZChannelFolder *)((char *)this + 448));
  OZChannelScale::OZChannelScale((OZImageElement *)((char *)this + 27288), (const OZImageElement *)((char *)a2 + 27288), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 27728), (const OZChannelBase *)((char *)a2 + 27728), (OZChannelFolder *)((char *)this + 448));
  OZChannelColor::OZChannelColor((OZImageElement *)((char *)this + 27880), (const OZImageElement *)((char *)a2 + 27880), (OZChannelFolder *)((char *)this + 448));
  OZChannelButton::OZChannelButton((OZChannelButton *)((char *)this + 29040), (const OZChannelButton *)((char *)a2 + 29040), (OZChannelFolder *)((char *)this + 448));
  OZChannel::OZChannel((OZChannel *)((char *)this + 29232), (const OZChannelBase *)a2 + 261, (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 3654) = &unk_1F1101490;
  *((void *)this + 3656) = &unk_1F11017F0;
  OZChannel::OZChannel((OZChannel *)((char *)this + 29384), (const OZChannelBase *)((char *)a2 + 29384), (OZChannelFolder *)((char *)this + 448));
  *((void *)this + 3673) = &unk_1F1101490;
  *((void *)this + 3675) = &unk_1F11017F0;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29536), (const OZChannelBase *)((char *)a2 + 29536), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29688), (const OZChannelBase *)((char *)a2 + 29688), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29840), (const OZChannelBase *)((char *)a2 + 29840), (OZChannelFolder *)((char *)this + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29992), (const OZChannelBase *)((char *)a2 + 29992), (OZChannelFolder *)((char *)this + 448));
  *((unsigned char *)this + 30144) = *((unsigned char *)a2 + 30144);
  PCWorkingColorVector::PCWorkingColorVector((OZImageElement *)((char *)this + 30148));
  PCURL::PCURL((OZImageElement *)((char *)this + 30168), (const OZImageElement *)((char *)a2 + 30168));
  long long v8 = *((_OWORD *)a2 + 1886);
  *((void *)this + 3774) = *((void *)a2 + 3774);
  *((_OWORD *)this + 1886) = v8;
  *((_DWORD *)this + 7550) = *((_DWORD *)a2 + 7550);
  *((void *)this + 3777) = 0;
  *((void *)this + 3778) = 0;
  *((void *)this + 3776) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v14 = _Q0;
  *(_OWORD *)((char *)this + 30232) = _Q0;
  *((unsigned char *)this + 30248) = *((unsigned char *)a2 + 30248);
  *((unsigned char *)this + 30250) = *((unsigned char *)a2 + 30250);
  PCWorkingColorVector::PCWorkingColorVector((OZImageElement *)((char *)this + 30252));
  *((unsigned char *)this + 30268) = 0;
  *((void *)this + 3784) = 0;
  *((unsigned char *)this + 30289) = *((unsigned char *)a2 + 30289);
  *((unsigned char *)this + 30290) = 0;
  *((void *)this + 3793) = 0;
  *(_OWORD *)((char *)this + 30312) = 0u;
  *(_OWORD *)((char *)this + 30328) = 0u;
  *(_OWORD *)((char *)this + 30296) = 0u;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 30352), (const OZChannelFolder *)((char *)a2 + 30352), v7);
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 30480), (const OZImageElement *)((char *)a2 + 30480), (OZChannelFolder *)((char *)this + 30352));
  OZChannel::OZChannel((OZChannel *)((char *)this + 30736), (const OZChannelBase *)((char *)a2 + 30736), (OZChannelFolder *)((char *)this + 30352));
  *((void *)this + 3842) = &unk_1F1100CF0;
  *((void *)this + 3844) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 30888), (const OZChannelBase *)((char *)a2 + 30888), (OZChannelFolder *)((char *)this + 30352));
  *((void *)this + 386OZDocument::~OZDocument(this - 1) = &unk_1F1100CF0;
  *((void *)this + 3863) = &unk_1F1101050;
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 31040), (const OZImageElement *)((char *)a2 + 31040), (OZChannelFolder *)((char *)this + 30352));
  OZChannelPosition::OZChannelPosition((OZImageElement *)((char *)this + 31296), (const OZImageElement *)((char *)a2 + 31296), (OZChannelFolder *)((char *)this + 30352));
  OZChannelEnum::OZChannelEnum((OZImageElement *)((char *)this + 32000), (const OZImageElement *)((char *)a2 + 32000), (OZChannelFolder *)((char *)this + 30352));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 32256), (const OZChannelBase *)a2 + 288, (OZChannelFolder *)((char *)this + 30352));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 32408), (const OZChannelBase *)((char *)a2 + 32408), (OZChannelFolder *)((char *)this + 30352));
  *((void *)this + 4072) = 0;
  *((_OWORD *)this + 2035) = 0u;
  *(_OWORD *)((char *)this + 30148) = *(_OWORD *)((char *)a2 + 30148);
  OZChannelButton::setPrivateData((OZChannelButton *)((char *)this + 29040), this);
  *((unsigned char *)this + 30145) = *((unsigned char *)a2 + 30145);
  if ((OZImageElement::hasBeenRetimedFromLastHash(a2) & 1) == 0)
  {
    OZImageElement::getRetimingHash(this);
    *(_OWORD *)((char *)this + 30148) = v15;
  }
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)a2);
  *(_OWORD *)((char *)this + 30232) = v14;
  *((unsigned char *)this + 30249) = 0;
  *((unsigned char *)this + 3025OZDocument::~OZDocument(this - 1) = 0;
  *((void *)this + 3785) = 0;
  *((unsigned char *)this + 30288) = 0;
  *((_DWORD *)this + 8146) = 0;
  if (this != a2) {
    std::vector<OZPtcDecisionInfo>::__assign_with_size[abi:ne180100]<OZPtcDecisionInfo*,OZPtcDecisionInfo*>((char *)this + 32560, *((char **)a2 + 4070), *((void *)a2 + 4071), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4071) - *((void *)a2 + 4070)) >> 4));
  }
  OZChannelFolder::removeDescendant(v7, (OZChannelBase *)this + 271);
  OZChannelFolder::insertDescendantAfter(v7, (const OZChannelBase *)((char *)this + 6552), (OZChannelBase *)this + 271);
  OZChannelBase::setResetCallback((OZChannelBase *)this + 271, (void (*)(OZChannelBase *, void *))OZImageElementCinematographyResetCallback, (uint64_t *)this, 0);
  OZImageElement::ptcCopyScriptData(this, (id *)a2);
}

void sub_1B7BE169C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelEnum *a10, OZChannelPosition *a11, OZChannelEnum *a12, OZChannel *a13, OZChannel *a14, OZChannelEnum *a15, PCURL *a16, OZChannelBool *a17, OZChannelBool *a18, OZChannelBool *a19, OZChannelBool *a20,OZChannel *a21,OZChannel *a22,OZChannelColor *a23,OZChannelBool *a24,OZChannel2D *a25,OZChannelPosition *a26,OZChannel2D *a27,OZChannelBool *a28,OZChannelEnum *a29,OZChannelEnum *a30,OZChannelEnum *a31,OZChannelEnum *a32,OZChannelEnum *a33,OZChannelEnum *a34,OZChannelEnum *a35,OZChannelEnum *a36,OZChannelEnum *a37,OZChannelEnum *a38,OZChannelBool *a39,OZChannel *a40,OZChannelBool *a41,OZChannelEnum *a42)
{
  OZChannelBool::~OZChannelBool(v43);
  OZChannelEnum::~OZChannelEnum(a10);
  OZChannelPosition::~OZChannelPosition(a11);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChannel::~OZChannel(a13);
  OZChannel::~OZChannel(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelFolder::~OZChannelFolder(v44);
  PCURL::~PCURL(a16);
  OZChannelBool::~OZChannelBool(a17);
  OZChannelBool::~OZChannelBool(a18);
  OZChannelBool::~OZChannelBool(a19);
  OZChannelBool::~OZChannelBool(a20);
  OZChannel::~OZChannel(a21);
  OZChannel::~OZChannel(a22);
  OZChannelButton::~OZChannelButton(*(OZChannelButton **)(v45 - 112));
  OZChannelColor::~OZChannelColor(a23);
  OZChannelBool::~OZChannelBool(a24);
  OZChannel2D::~OZChannel2D(a25);
  OZChannelPosition::~OZChannelPosition(a26);
  OZChannel2D::~OZChannel2D(a27);
  OZChannelBool::~OZChannelBool(a28);
  OZChannelEnum::~OZChannelEnum(a29);
  OZChannelEnum::~OZChannelEnum(a30);
  OZChannelEnum::~OZChannelEnum(a31);
  OZChannelEnum::~OZChannelEnum(a32);
  OZChannelEnum::~OZChannelEnum(a33);
  OZChannelEnum::~OZChannelEnum(a34);
  OZChannelEnum::~OZChannelEnum(a35);
  OZChannelEnum::~OZChannelEnum(a36);
  OZChannelEnum::~OZChannelEnum(a37);
  OZChannelEnum::~OZChannelEnum(a38);
  OZChannelBool::~OZChannelBool(a39);
  OZChannel::~OZChannel(a40);
  OZChannelBool::~OZChannelBool(a41);
  OZChannelEnum::~OZChannelEnum(a42);
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v45 - 256));
  OZChannelEnum::~OZChannelEnum(*(PCString **)(v45 - 248));
  OZChannel::~OZChannel(*(OZChannel **)(v45 - 240));
  OZChannel::~OZChannel(*(OZChannel **)(v45 - 232));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v45 - 224));
  OZChannelEnum::~OZChannelEnum(*(PCString **)(v45 - 216));
  OZChannel::~OZChannel(*(OZChannel **)(v45 - 208));
  OZChannelRetimeFrame::~OZChannelRetimeFrame(*(OZChannelRetimeFrame **)(v45 - 200));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v45 - 192));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v45 - 184));
  OZChannel::~OZChannel(*(OZChannel **)(v45 - 176));
  OZChannelColor::~OZChannelColor(*(OZChannelColor **)(v45 - 168));
  OZChannel::~OZChannel(*(OZChannel **)(v45 - 160));
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(*(OZChanObjectRefWithPicker **)(v45 - 152));
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker(*(OZChanObjectRefWithPicker **)(v45 - 144));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v45 - 136));
  OZElement::~OZElement(v42);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::hasBeenRetimedFromLastHash(OZImageElement *this)
{
  OZImageElement::getRetimingHash(this);
  return vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)((char *)this + 30148), v3)))) & 1;
}

void OZImageElement::~OZImageElement(OZImageElement *this, const PCString *a2)
{
  *(void *)this = &unk_1F113BF58;
  *((void *)this + 2) = &unk_1F113C888;
  *((void *)this + 6) = &unk_1F113CAE0;
  *((void *)this + 816) = &unk_1F113CB38;
  OZChannelBase::setRangeName((OZChannelBase *)this, a2);
  int32x4_t v3 = (__CVBuffer *)*((void *)this + 3785);
  if (v3) {
    CVPixelBufferRelease(v3);
  }
  OZImageElement::ptcDeleteScriptData(this);
  unsigned int v4 = (void *)*((void *)this + 4070);
  if (v4)
  {
    *((void *)this + 407OZDocument::~OZDocument(this - 1) = v4;
    operator delete(v4);
  }
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 32408));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 32256));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 32000));
  OZChannelPosition::~OZChannelPosition((OZImageElement *)((char *)this + 31296));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 31040));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 30888));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 30736));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 30480));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 30352));
  PCURL::~PCURL((OZImageElement *)((char *)this + 30168));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 29992));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 29840));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 29688));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 29536));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 29384));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 29232));
  OZChannelButton::~OZChannelButton((OZChannelButton *)((char *)this + 29040));
  *((void *)this + 3485) = &unk_1F1107698;
  *((void *)this + 3487) = &unk_1F1107A08;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 28888));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZImageElement *)((char *)this + 27880));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 27728));
  OZChannel2D::~OZChannel2D((OZImageElement *)((char *)this + 27288));
  OZChannelPosition::~OZChannelPosition((OZImageElement *)((char *)this + 26584));
  OZChannel2D::~OZChannel2D((OZImageElement *)((char *)this + 26144));
  OZChannelBool::~OZChannelBool((OZChannelBool *)this + 171);
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 25736));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 25480));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 25224));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 24968));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 24712));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 24456));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 24200));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 23944));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 23688));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 23432));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 23280));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 23128));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 22976));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 22720));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 22568));
  OZChannelEnum::~OZChannelEnum((PCString *)this + 2789);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 22160));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 22008));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 21752));
  OZChannelEnum::~OZChannelEnum((PCString *)this + 2687);
  OZChannel::~OZChannel((OZChannel *)((char *)this + 21344));
  OZChannelRetimeFrame::~OZChannelRetimeFrame((OZImageElement *)((char *)this + 21192));
  OZChannelEnum::~OZChannelEnum((OZImageElement *)((char *)this + 20936));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 20784));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20632));
  *((void *)this + 2434) = &unk_1F1107698;
  *((void *)this + 2436) = &unk_1F1107A08;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 20480));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZImageElement *)((char *)this + 19472));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 19320));
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZImageElement *)((char *)this + 19112));
  OZChanObjectRefWithPicker::~OZChanObjectRefWithPicker((OZImageElement *)((char *)this + 18904));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 18776));

  OZElement::~OZElement((OZElement *)this);
}

{
  uint64_t vars8;

  OZImageElement::~OZImageElement(this, a2);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZImageElement::~OZImageElement(OZImageElement *this, const PCString *a2)
{
}

{
  OZImageElement::~OZImageElement((OZImageElement *)((char *)this - 48), a2);
}

{
  OZImageElement::~OZImageElement((OZImageElement *)((char *)this - 6528), a2);
}

{
  uint64_t vars8;

  OZImageElement::~OZImageElement((OZImageElement *)((char *)this - 16), a2);

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZImageElement::~OZImageElement((OZImageElement *)((char *)this - 48), a2);

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZImageElement::~OZImageElement((OZImageElement *)((char *)this - 6528), a2);

  JUMPOUT(0x1BA9BFBA0);
}

OZFootage *OZImageElement::operator=(uint64_t a1, const void *a2)
{
  OZElement::operator=(a1, a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  uint64_t v6 = v4 + 28880;
  int v7 = v4 + 18736;
  OZChanObjectRefWithPicker::operator=(a1 + 18904, (uint64_t)(v4 + 18904));
  OZChanObjectRefWithPicker::operator=(a1 + 19112, (uint64_t)(v5 + 19112));
  OZChannelBase::operator=(a1 + 19320, (uint64_t)(v5 + 19320));
  OZChannelFolder::operator=(a1 + 19472);
  OZChannelBase::operator=(a1 + 19608, (uint64_t)(v5 + 19608));
  OZChannelBase::operator=(a1 + 19760, (uint64_t)(v5 + 19760));
  OZChannelBase::operator=(a1 + 19912, (uint64_t)(v5 + 19912));
  OZChannelBase::operator=(a1 + 20064, (uint64_t)(v5 + 20064));
  OZChannelBase::operator=(a1 + 20216, (uint64_t)(v5 + 20216));
  *(unsigned char *)(a1 + 20472) = v7[1736];
  OZChannelBase::operator=(a1 + 20480, (uint64_t)(v5 + 20480));
  OZChannelBase::operator=(a1 + 20632, (uint64_t)(v5 + 20632));
  OZChannelBase::operator=(a1 + 20784, (uint64_t)(v5 + 20784));
  OZChannelBase::operator=(a1 + 20936, (uint64_t)(v5 + 20936));
  OZChannelBase::operator=(a1 + 21192, (uint64_t)(v5 + 21192));
  OZChannelBase::operator=(a1 + 21344, (uint64_t)(v5 + 21344));
  OZChannelBase::operator=(a1 + 21496, (uint64_t)(v5 + 21496));
  OZChannelBase::operator=(a1 + 21752, (uint64_t)(v5 + 21752));
  OZChannelBase::operator=(a1 + 22008, (uint64_t)(v5 + 22008));
  OZChannelBase::operator=(a1 + 22160, (uint64_t)(v5 + 22160));
  OZChannelBase::operator=(a1 + 22312, (uint64_t)(v5 + 22312));
  OZChannelBase::operator=(a1 + 22568, (uint64_t)(v5 + 22568));
  OZChannelBase::operator=(a1 + 22720, (uint64_t)(v5 + 22720));
  OZChannelBase::operator=(a1 + 22976, (uint64_t)(v5 + 22976));
  OZChannelBase::operator=(a1 + 23128, (uint64_t)(v5 + 23128));
  OZChannelBase::operator=(a1 + 23280, (uint64_t)(v5 + 23280));
  OZChannelBase::operator=(a1 + 23432, (uint64_t)(v5 + 23432));
  OZChannelBase::operator=(a1 + 25736, (uint64_t)(v5 + 25736));
  OZChannelBase::operator=(a1 + 29040, (uint64_t)(v5 + 29040));
  *(void *)(a1 + 29192) = *((void *)v5 + 3649);
  PCString::set((PCString *)(a1 + 29200), (const PCString *)v5 + 3650);
  *(void *)(a1 + 29208) = *((void *)v5 + 3651);
  PCString::set((PCString *)(a1 + 29216), (const PCString *)v5 + 3652);
  *(unsigned char *)(a1 + 29224) = v6[344];
  OZChannelButton::setPrivateData((OZChannelButton *)(a1 + 29040), (void *)a1);
  OZChannelBase::operator=(a1 + 25992, (uint64_t)(v5 + 25992));
  OZChannelFolder::operator=(a1 + 26144);
  OZChannelBase::operator=(a1 + 26280, (uint64_t)(v5 + 26280));
  OZChannelBase::operator=(a1 + 26432, (uint64_t)(v5 + 26432));
  OZChannelPosition::operator=(a1 + 26584, (uint64_t)(v5 + 26584));
  OZChannelFolder::operator=(a1 + 27288);
  OZChannelBase::operator=(a1 + 27424, (uint64_t)(v5 + 27424));
  OZChannelBase::operator=(a1 + 27576, (uint64_t)(v5 + 27576));
  OZChannelBase::operator=(a1 + 27728, (uint64_t)(v5 + 27728));
  OZChannelFolder::operator=(a1 + 27880);
  OZChannelBase::operator=(a1 + 28016, (uint64_t)(v5 + 28016));
  OZChannelBase::operator=(a1 + 28168, (uint64_t)(v5 + 28168));
  OZChannelBase::operator=(a1 + 28320, (uint64_t)(v5 + 28320));
  OZChannelBase::operator=(a1 + 28472, (uint64_t)(v5 + 28472));
  OZChannelBase::operator=(a1 + 28624, (uint64_t)(v5 + 28624));
  *(unsigned char *)(a1 + 28880) = *v6;
  OZChannelBase::operator=(a1 + 28888, (uint64_t)(v5 + 28888));
  OZChannelBase::operator=(a1 + 29232, (uint64_t)(v5 + 29232));
  OZChannelBase::operator=(a1 + 29384, (uint64_t)(v5 + 29384));
  OZChannelBase::operator=(a1 + 29536, (uint64_t)(v5 + 29536));
  OZChannelBase::operator=(a1 + 29688, (uint64_t)(v5 + 29688));
  OZChannelBase::operator=(a1 + 29840, (uint64_t)(v5 + 29840));
  *(_OWORD *)(a1 + 30148) = *(_OWORD *)(v5 + 30148);
  *(unsigned char *)(a1 + 30145) = v6[1265];
  PCURL::operator=((const void **)(a1 + 30168), (const __CFURL **)v5 + 3771);
  long long v8 = *((_OWORD *)v5 + 1886);
  *(void *)(a1 + 30192) = *((void *)v5 + 3774);
  *(_OWORD *)(a1 + 30176) = v8;
  *(_DWORD *)(a1 + 30200) = *((_DWORD *)v6 + 330);
  *(_DWORD *)(a1 + 18736) = *(_DWORD *)v7;
  OZChannelBase::operator=(a1 + 29992, (uint64_t)(v5 + 29992));
  *(unsigned char *)(a1 + 30144) = v6[1264];
  *(void *)(a1 + 30208) = 0;
  *(unsigned char *)(a1 + 30248) = v6[1368];
  *(unsigned char *)(a1 + 30249) = 0;
  *(_WORD *)(a1 + 30250) = v6[1370];
  if ((OZImageElement::hasBeenRetimedFromLastHash((OZImageElement *)v5) & 1) == 0)
  {
    OZImageElement::getRetimingHash((OZImageElement *)a1);
    *(_OWORD *)(a1 + 30148) = v10;
  }
  OZChannelFolder::operator=(a1 + 30352);
  OZChannelBase::operator=(a1 + 30480, (uint64_t)(v5 + 30480));
  OZChannelBase::operator=(a1 + 30736, (uint64_t)(v5 + 30736));
  OZChannelBase::operator=(a1 + 30888, (uint64_t)(v5 + 30888));
  OZChannelPosition::operator=(a1 + 31296, (uint64_t)(v5 + 31296));
  OZChannelBase::operator=(a1 + 31040, (uint64_t)(v5 + 31040));
  OZChannelBase::operator=(a1 + 32000, (uint64_t)(v5 + 32000));
  OZChannelBase::operator=(a1 + 32256, (uint64_t)(v5 + 32256));
  OZChannelBase::operator=(a1 + 32408, (uint64_t)(v5 + 32408));
  *(_DWORD *)(a1 + 32584) = 0;
  if (v5 != (char *)a1) {
    std::vector<OZPtcDecisionInfo>::__assign_with_size[abi:ne180100]<OZPtcDecisionInfo*,OZPtcDecisionInfo*>((char *)(a1 + 32560), *((char **)v5 + 4070), *((void *)v5 + 4071), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v5 + 4071) - *((void *)v5 + 4070)) >> 4));
  }

  return OZImageElement::ptcCopyScriptData((OZImageElement *)a1, (id *)v5);
}

void *OZImageElement::getFootage(OZImageElement *this)
{
  __n128 result = (void *)*((void *)this + 3776);
  if (!result)
  {
    __n128 result = OZChanSceneNodeRef::getNode((OZChannelBase *)((char *)this + 18904));
    if (result) {
    *((void *)this + 3776) = result;
    }
    *((void *)this + 3780) = 0xBFF0000000000000;
    *((void *)this + 3779) = 0xBFF0000000000000;
  }
  return result;
}

BOOL OZImageElement::shouldHideRetiming(OZImageElement *this)
{
  if (*((unsigned char *)this + 30290)) {
    return 0;
  }
  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (Footage)
  {
    unsigned int v4 = Footage;
    if (OZFootage::isStill(Footage))
    {
      if ((*(unsigned int (**)(OZFootage *))(*(void *)v4 + 1376))(v4) < 2) {
        return 1;
      }
    }
  }
  BOOL result = OZImageElement::isDropZone(this);
  if (result)
  {
    uint64_t v5 = *((void *)this + 121);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 1584);
      if (v6) {
        return *(_DWORD *)(v6 + 320) > 1u;
      }
    }
    return 0;
  }
  return result;
}

BOOL OZImageElement::isDropZone(OZImageElement *this)
{
  uint64_t v1 = (char *)this + 30248;
  if (*((unsigned char *)this + 30249)) {
    return *v1 != 0;
  }
  BOOL result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 22568), MEMORY[0x1E4F1FA48], 0.0) != 0;
  *uint64_t v1 = result;
  v1[1] = 1;
  return result;
}

uint64_t OZImageElement::canDelete(OZImageElement *this)
{
  if ((*(uint64_t (**)(void))(*((void *)this + 2) + 56))()) {
    return 0;
  }
  else {
    return OZImageElement::isLockedDropZone(this) ^ 1;
  }
}

uint64_t OZImageElement::isLockedDropZone(OZImageElement *this)
{
  if (OZImageElement::isEffectSource(this)
    && *(_DWORD *)(*(void *)((*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this) + 1584)
                 + 320) == 3)
  {
    return 1;
  }

  return OZImageElement::isTransitionSource(this);
}

uint64_t non-virtual thunk to'OZImageElement::canDelete(OZImageElement *this)
{
  return OZImageElement::canDelete((OZImageElement *)((char *)this - 16));
}

uint64_t OZImageElement::canCopy(OZImageElement *this)
{
  if (OZImageElement::isEffectSource(this)) {
    return 0;
  }
  else {
    return OZImageElement::isTransitionSource(this) ^ 1;
  }
}

BOOL OZImageElement::isEffectSource(OZImageElement *this)
{
  BOOL result = OZImageElement::isDropZone(this);
  if (result) {
    return OZChannel::getValueAsInt((OZChannel *)((char *)this + 23432), MEMORY[0x1E4F1FA48], 0.0) == 3;
  }
  return result;
}

uint64_t OZImageElement::isTransitionSource(OZImageElement *this)
{
  uint64_t result = OZImageElement::isDropZone(this);
  if (result)
  {
    int32x4_t v3 = (OZChannel *)((char *)this + 23432);
    uint64_t result = OZChannel::getValueAsInt(v3, MEMORY[0x1E4F1FA48], 0.0);
    if (result != 1) {
      return OZChannel::getValueAsInt(v3, MEMORY[0x1E4F1FA48], 0.0) == 2;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'OZImageElement::canCopy(OZImageElement *this)
{
  uint64_t v1 = (OZImageElement *)((char *)this - 16);
  if (OZImageElement::isEffectSource((OZImageElement *)((char *)this - 16))) {
    return 0;
  }
  else {
    return OZImageElement::isTransitionSource(v1) ^ 1;
  }
}

uint64_t OZImageElement::replaceFootage(OZImageElement *this, const __CFURL **a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 121);
  if (!v3) {
    return 0;
  }
  int v7 = *(OZChannelBase **)(v3 + 1504);
  if (v7) {
    int v7 = (OZChannelBase *)OZChannelBase::setRangeName(v7, (const PCString *)1);
  }
  uint64_t Instance = (PMMediaManager *)PMMediaManager::getInstance((PMMediaManager *)v7);
  uint64_t result = PMMediaManager::findReader(Instance, a2);
  if (result)
  {
    long long v23 = 0;
    if (!PMMediaManager::open(Instance, a2, &v23, 0))
    {
      PCURL::getShortFilename(a2, (PCString *)&v21);
      OZChannelBase::getNextUniqueID(v10);
      *(_OWORD *)&v22[0].CMTimeValue value = xmmword_1B83804B0;
      uint64_t SceneNode = (OZFootage *)OZApplication::createSceneNode(theApp, (unsigned int *)v22);
      PCString::~PCString((PCString *)&v21);
      if (SceneNode)
      {
        OZFootage::setClip(SceneNode, v23, 1, 1, 0);
        PMClip::close(v23);
        float v12 = (OZScene *)*((void *)this + 121);
        PCURL::PCURL((PCURL *)v22, @"Undo Footage Replace");
        OZScene::startCaptureModifiedChannels(v12, (const PCString *)v22);
        PCString::~PCString((PCString *)v22);
        PCURL::PCURL((PCURL *)v22, @"Undo Footage Replace");
        (*(void (**)(char *, CMTime *, void))(*((void *)this + 2) + 176))((char *)this + 16, v22, 0);
        PCString::~PCString((PCString *)v22);
        uint64_t v13 = (OZDocument **)*((void *)this + 121);
        PCURL::PCURL((PCURL *)v22, @"Undo Footage Replace");
        OZScene::addNode(v13, SceneNode, (PCString *)v22, 16, 0, 0);
        PCString::~PCString((PCString *)v22);
        (*(void (**)(CMTime *__return_ptr, OZImageElement *))(*(void *)this + 1128))(v22, this);
        memset(&v21, 0, sizeof(v21));
        __n128 TimeOffset = OZChannelObjectRootBase::getTimeOffset((__n128 *)((char *)this + 56), (__n128 *)&v21);
        (*(void (**)(OZImageElement *, OZFootage *, uint64_t, void, __n128))(*(void *)this + 1448))(this, SceneNode, a3, 0, TimeOffset);
        long long v15 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(void *)this + 640))(this);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(*((void *)this + 121) + 336), (__n128 *)&v20);
        OZRetimingUtil::SetTimeOffsetAndExtent(v15, &v21, v22, &v20, v16);
        uint64_t v17 = (OZChannelBase *)(*(uint64_t (**)(void))(**((void **)this + 120) + 640))();
        OZChannelObjectRoot::recomputeTimeRangeFromChildren(v17, 1, 1, 1, 1, 0);
        float64x2_t v19 = (OZChannelBase **)*((void *)this + 121);
        if (v19[188])
        {
          OZChannelBase::setRangeName(v19[188], (const PCString *)1);
          float64x2_t v19 = (OZChannelBase **)*((void *)this + 121);
        }
        OZScene::endCaptureModifiedChannels(v19, v18);
        if (a3) {
          OZScene::recalcDependencies(*((OZScene **)this + 121));
        }
        OZImageElement::showHideDropZoneChannels(this, 0);
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void sub_1B7BE2C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, uint64_t a13, uint64_t a14, PCString a15)
{
}

uint64_t OZImageElement::setFootage(OZImageElement *this, OZSceneNodeFile *lpsrc, int a3, unsigned int a4)
{
  if (lpsrc) {
  else
  }
    int v7 = 0;
  Footage = OZImageElement::getFootage(this);
  char v9 = Footage;
  if (!Footage)
  {
    double v10 = 1.0;
    if (a3) {
      goto LABEL_6;
    }
LABEL_17:
    OZSceneNode::removeFromLinked(this);
    goto LABEL_18;
  }
  double v10 = (*(double (**)(void *))(*(void *)Footage + 1368))(Footage);
  OZImageElement::ptcResetCinematographyAllChannels(this);
  if (!a3) {
    goto LABEL_17;
  }
LABEL_6:
  double v11 = (OZChannelFolder *)(*(uint64_t (**)(OZImageElement *))(*(void *)this + 640))(this);
  if (OZChannelFolder::testFoldFlag(v11, 0x4000))
  {
    float v12 = (unsigned int *)*((void *)this + 133);
    for (uint64_t i = (unsigned int *)*((void *)this + 132); i != v12; ++i)
    {
      Node = OZScene::getNode(*((OZScene **)this + 121), *i);
      if (Node)
      {
        long long v15 = Node;
        uint64_t v16 = (char *)(Node + 2);
        if (((*(uint64_t (**)(void *, uint64_t))(Node[2] + 56))(Node + 2, 1) & 1) == 0)
        {
          uint64_t v17 = (OZChannelFolder *)(*(uint64_t (**)(void *))(*v15 + 640))(v15);
          if (OZChannelFolder::testFoldFlag(v17, 0x4000))
          {
            if ((*(unsigned int (**)(void *))(*v15 + 744))(v15))
            {
              OZSceneNode::removeFromLinked(v15);
              (*(void (**)(void *))(*v15 + 760))(v15);
            }
            PCURL::PCURL((PCURL *)&time1, @"Undo Footage Replace");
            (*(void (**)(char *, CMTime *, uint64_t))(*(void *)v16 + 176))(v16, &time1, 2);
            PCString::~PCString((PCString *)&time1);
            uint64_t v18 = (*(uint64_t (**)(void *))(*v15 + 640))(v15);
            (*(void (**)(void *, uint64_t))(*v15 + 608))(v15, v18);
          }
        }
      }
    }
  }
LABEL_18:
  OZChanSceneNodeRef::setNode((OZImageElement *)((char *)this + 18904), v7);
  *((void *)this + 3776) = 0;
  *((void *)this + 3780) = 0xBFF0000000000000;
  *((void *)this + 3779) = 0xBFF0000000000000;
  *((unsigned char *)this + 3025OZDocument::~OZDocument(this - 1) = 0;
  unsigned int Pages = OZFootage::getPages(v7);
  *((_DWORD *)this + 7550) = Pages;
  if (Pages)
  {
    OZChannel::setMax((OZChannel *)((char *)this + 19320), (double)Pages);
    LODWORD(v20) = *((_DWORD *)this + 7550);
    OZChannel::setSliderMax((OZChannel *)((char *)this + 19320), (double)v20);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 19320), 2, 0);
  }
  else
  {
    OZChannel::setMax((OZChannel *)((char *)this + 19320), 1.0);
    OZChannel::setSliderMax((OZChannel *)((char *)this + 19320), 1.0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19320), 2, 0);
  }
  OZImageElement::updateLayerChannel(this, 0);
  double v21 = (double)a4;
  uint64_t v22 = (CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::setValue((OZChannel *)((char *)this + 22312), MEMORY[0x1E4F1FA48], v21, 0);
  memset(&v40, 0, sizeof(v40));
  (*(void (**)(CMTime *__return_ptr, OZSceneNode *))(*(void *)v7 + 1648))(&v40, v7);
  memset(&v39, 0, sizeof(v39));
  CMTimeMake(&v39, 1, 30);
  if ((*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this))
  {
    uint64_t v23 = (*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v23 + 336), (__n128 *)&time1);
    CMTime v39 = time1;
  }
  CMTime time1 = v40;
  CMTime time2 = v39;
  if (!CMTimeCompare(&time1, &time2)
    && ((*(uint64_t (**)(void *))(*((void *)v7 + 2) + 288))((void *)v7 + 2) & 1) == 0)
  {
    uint64_t v24 = (*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this);
    uint64_t v25 = (OZPreferenceManager *)OZPreferenceManager::Instance((OZPreferenceManager *)v24);
    if (v24 && OZPreferenceManager::getUseProjectDurationForStills(v25))
    {
      *(_OWORD *)&v40.CMTimeValue value = *(_OWORD *)(v24 + 1376);
      CMTimeEpoch epoch = *(void *)(v24 + 1392);
    }
    else
    {
      OZPreferenceManager::getDefaultStillDuration(&v39, (uint64_t)&time1);
      *(_OWORD *)&v40.CMTimeValue value = *(_OWORD *)&time1.value;
      CMTimeEpoch epoch = time1.epoch;
    }
    v40.CMTimeEpoch epoch = epoch;
  }
  if (v9)
  {
    (*(void (**)(CMTime *__return_ptr, OZImageElement *))(*(void *)this + 1128))(&time2, this);
    CMTime time1 = time2;
    CMTime v38 = v40;
    long long v27 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(void *)this + 640))(this);
    CMTime time2 = time1;
    OZRetimingUtil::SetTimeOffsetAndExtent(v27, &time2, &time1, &v39, v28);
  }
  else
  {
    memset(&v42, 0, sizeof(v42));
    operator*(&v39, &v42, 0.5);
    CMTime time1 = v40;
    CMTime time2 = v42;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v41);
    CMTime time1 = v41;
    CMTime time2 = v39;
    PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v35);
    CMTime time1 = *v22;
    CMTime v38 = v35;
    OZChannelObjectRootBase::setTimeExtent((OZImageElement *)((char *)this + 56), (const PCTimeRange *)&time1, 0);
  }
  if (OZImageElement::isDropZone(this)) {
    OZChannel::setValue((OZChannel *)this + 171, MEMORY[0x1E4F1FA48], (double)(a3 ^ 1u), 0);
  }
  OZImageElement::resetFitMode(this, v10);
  if (!v9)
  {
    float64x2_t v29 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(void *)this + 640))(this);
    OZRetimingUtil::SetDefaultRetimingState(v29, v30);
  }
  OZChannel::getValueAsInt((OZChannel *)((char *)this + 21496), MEMORY[0x1E4F1FA48], 0.0);
  OZImageElement::ptcLoadCinematicScript(this);
  OZImageElement::ptcFillCinematographyDataChannels(this);
  (*(void (**)(OZImageElement *, OZSceneNode *))(*(void *)this + 2272))(this, v7);
  OZImageElement::showHideDropZoneChannels(this, 0);
  OZDocument::postNotification(*(OZDocument **)(*((void *)this + 121) + 1584), 0x80000);
  OZElement::updateColorConversionChannels((OZElement *)this);
  uint64_t result = OZFootage::getDynamicRangeType((PMClip **)v7);
  if (result == 2)
  {
    double MasteringMaxLuminance = OZFootage::getMasteringMaxLuminance(v7);
    if (MasteringMaxLuminance == 0.0) {
      double v33 = 1000.0;
    }
    else {
      double v33 = MasteringMaxLuminance;
    }
    long long v34 = (OZChannel *)((char *)this + 12512);
    OZChannel::setDefaultValue(v34, v33);
    return OZChannel::setValue(v34, MEMORY[0x1E4F1FA48], v33, 0);
  }
  return result;
}

void sub_1B7BE34B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, PCString a19)
{
}

void OZImageElement::updateLayerChannel(OZImageElement *this, char a2)
{
  Footage = OZImageElement::getFootage(this);
  if (Footage)
  {
    uint64_t v5 = Footage;
    if (((*(uint64_t (**)(void *))(*(void *)Footage + 1432))(Footage) & 1) == 0)
    {
      uint64_t v6 = (OZChannelBase *)((char *)this + 22312);
      BOOL v7 = OZChannelBase::testFlag(v6, 4);
      if (v7) {
        OZChannelBase::resetFlag(v6, 4, 1);
      }
      unsigned int v8 = (*(uint64_t (**)(void *))(*(void *)v5 + 1352))(v5);
      unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)v6, MEMORY[0x1E4F1FA48], 0.0);
      if (v8 <= ValueAsInt) {
        unsigned int v10 = ValueAsInt;
      }
      else {
        unsigned int v10 = v8;
      }
      if (v10 >= 2)
      {
        OZChannel::setMax((OZChannel *)v6, (double)v10);
        OZChannel::setSliderMax((OZChannel *)v6, (double)v10);
        OZChannelBase::resetFlag(v6, 2, a2);
        OZChannelEnum::clearStrings((PCString *)v6);
        operator new[]();
      }
      OZChannel::setMax((OZChannel *)v6, 0.0);
      OZChannel::setSliderMax((OZChannel *)v6, 0.0);
      OZChannelBase::setFlag(v6, 2, 1);
      OZChannelEnum::clearStrings((PCString *)v6);
      if (v7) {
        OZChannelBase::setFlag(v6, 4, 1);
      }
    }
  }
}

void sub_1B7BE37E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

CGColorSpace **OZImageElement::resetFitMode(OZImageElement *this, double a2)
{
  uint64_t result = (CGColorSpace **)OZImageElement::getFootage(this);
  if (result)
  {
    uint64_t v5 = result;
    v123[0] = 0;
    v123[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v124 = _Q0;
    OZRenderState::OZRenderState(&v122);
    long long v91 = xmmword_1B7E74760;
    uint64_t v92 = 0x3FF0000000000000;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    uint64_t v96 = 0x3FF0000000000000;
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    int v104 = 0;
    uint64_t v101 = 0;
    uint64_t v102 = 0;
    uint64_t v100 = 0x3FF0000000000000;
    char v103 = 0;
    long long v105 = *MEMORY[0x1E4F1FA48];
    uint64_t v106 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    uint64_t v107 = 0;
    __int16 v108 = 0;
    uint64_t v109 = 0;
    __int16 v110 = 0;
    uint64_t v111 = 0x100000000;
    char v112 = 0;
    $3CC8671D27C23BF42ADDB32F2B5E48AE v113 = 0;
    CMTime v114 = 0;
    __int16 v115 = 768;
    uint64_t v116 = 0x408F400000000000;
    char v117 = 0;
    int v118 = 0;
    char v119 = 0;
    uint64_t v120 = -1;
    __asm { FMOV            V0.2D, #1.0 }
    long long v121 = _Q0;
    OZScene::getCurrentTime(*((OZScene **)this + 121), &v89);
    *(__n128 *)&v122.var0.unint64_t var0 = v89;
    v122.var0.int64_t var3 = v90;
    HIDWORD(v10OZDocument::~OZDocument(this - 1) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 22312), MEMORY[0x1E4F1FA48], 0.0);
    OZFootage::getTextureResolution(v5, (uint64_t)v123, (const CMTime *)&v122, (uint64_t)&v91);
    long long v12 = v124;
    double v13 = (*((double (**)(CGColorSpace **))*v5 + 171))(v5);
    if (!OZImageElement::isDropZone(this))
    {
      OZChannel::setValue((OZChannel *)((char *)this + 29232), MEMORY[0x1E4F1FA48], *(double *)&v12, 0);
      OZChannel::setValue((OZChannel *)((char *)this + 29384), MEMORY[0x1E4F1FA48], *((double *)&v12 + 1), 0);
      OZChannel2D::setValue((OZImageElement *)((char *)this + 26144), MEMORY[0x1E4F1FA48], 1.0, 1.0);
      goto LABEL_8;
    }
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 23432), MEMORY[0x1E4F1FA48], 0.0)
      || OZChannel::getValueAsInt((OZChannel *)((char *)this + 22976), MEMORY[0x1E4F1FA48], 0.0)
      || OZChannel::getValueAsInt((OZChannel *)((char *)this + 29840), MEMORY[0x1E4F1FA48], 0.0))
    {
      long long v14 = (OZChannel *)((char *)this + 29232);
      OZChannel::getValueAsDouble(v14, MEMORY[0x1E4F1FA48], 0.0);
      OZChannel::setValue(v14, MEMORY[0x1E4F1FA48], v15 * a2 / v13, 0);
LABEL_8:
      PCCFRef<CGColorSpace *>::~PCCFRef(&v114);
      return PCCFRef<CGColorSpace *>::~PCCFRef(&v113);
    }
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 29232), MEMORY[0x1E4F1FA48], 0.0);
    double v17 = v16;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 29384), MEMORY[0x1E4F1FA48], 0.0);
    double v73 = v18;
    double v76 = v17;
    double v87 = 0.0;
    double v88 = 0.0;
    double v85 = 0.0;
    double v86 = 0.0;
    double v83 = 0.0;
    double v84 = 0.0;
    double v82 = 0.0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 26280), MEMORY[0x1E4F1FA48], 0.0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 26432), MEMORY[0x1E4F1FA48], 0.0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 27424), MEMORY[0x1E4F1FA48], 0.0);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 27576), MEMORY[0x1E4F1FA48], 0.0);
    if ((*(unsigned int (**)(OZImageElement *))(*(void *)this + 1608))(this)) {
      (*(void (**)(OZImageElement *, OZRenderState *, double *, double *, double *, double *))(*(void *)this + 1728))(this, &v122, &v88, &v87, &v86, &v85);
    }
    OZTransformNode::getPivot((OZTransformNode *)this, &v84, &v83, &v82, (const CMTime *)&v122);
    double v20 = v87;
    double v19 = v88;
    double v21 = v85;
    double v22 = v86;
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 22720), MEMORY[0x1E4F1FA48], 0.0);
    double v24 = v76 - v19 - v20;
    double v25 = v73 - v22 - v21;
    if (ValueAsInt != 1)
    {
      double v26 = v24 * a2;
      if (ValueAsInt == 2)
      {
        double v27 = v26 / v13;
        double v28 = v26 / v13 / *(double *)&v12;
        double v29 = 0.0;
        double v71 = 1.0;
        double v72 = 1.0;
        double v30 = v25;
        double v31 = 0.0;
        double v74 = v25 / *((double *)&v12 + 1);
      }
      else
      {
        double v47 = *(double *)&v12 * v13 / *((double *)&v12 + 1);
        BOOL v48 = v47 > v26 / v25;
        double v49 = v47 * v25 / v13;
        double v50 = v25 / *((double *)&v12 + 1);
        double v51 = v26 / v47;
        if (v48) {
          double v27 = v49;
        }
        else {
          double v27 = v26 / v13;
        }
        if (v48) {
          double v52 = v73 - v22 - v21;
        }
        else {
          double v52 = v51;
        }
        if (!v48) {
          double v50 = v26 / v13 / *(double *)&v12;
        }
        double v29 = 0.0;
        if (v13 * v27 > v26) {
          double v29 = (v13 * v27 - v26) / v13 * 0.5;
        }
        double v30 = v52;
        if (v52 <= v25) {
          double v31 = 0.0;
        }
        else {
          double v31 = (v52 - v25) * 0.5;
        }
        double v72 = 1.0;
        double v74 = v50;
        double v28 = v50;
        double v71 = 1.0;
      }
LABEL_67:
      double v54 = v87;
      double v55 = v88;
      double v69 = v84;
      double v70 = v83;
      double v67 = v86;
      double v68 = v85;
      double v78 = v82;
      OZChannel::setValue((OZChannel *)((char *)this + 29232), MEMORY[0x1E4F1FA48], v27, 0);
      OZChannel::setValue((OZChannel *)((char *)this + 29384), MEMORY[0x1E4F1FA48], v30, 0);
      OZChannel2D::setValue((OZImageElement *)((char *)this + 26144), MEMORY[0x1E4F1FA48], v28, v74);
      OZChannel2D::setValue((OZImageElement *)((char *)this + 27288), MEMORY[0x1E4F1FA48], 1.0 / v72, 1.0 / v71);
      OZChannelPosition::setPosition((OZImageElement *)((char *)this + 26584), MEMORY[0x1E4F1FA48], 0.0, 0.0);
      double v56 = (v69 + (v54 - v55) * 0.5) * a2 / v13;
      double v57 = v70 + (v68 - v67) * 0.5;
      BOOL v58 = v31 != 0.0 || v29 != 0.0;
      if (v58 && ((*(uint64_t (**)(OZImageElement *))(*(void *)this + 1608))(this) & 1) == 0)
      {
        OZChannelBase::enable((OZChannelBase *)((char *)this + 17520), 1, 0);
        OZChannelCrop::setValue((OZImageElement *)((char *)this + 17520), (const CMTime *)&v122, v29, v29, v31, v31);
        OZTransformNode::setPivot((OZTransformNode *)this, v56, v57, v78, (const CMTime *)&v122);
      }
      else
      {
        (*(void (**)(char *, OZRenderState *, double))(*((void *)this + 2207) + 768))((char *)this + 17656, &v122, v29);
        (*(void (**)(char *, OZRenderState *, double))(*((void *)this + 2226) + 768))((char *)this + 17808, &v122, v29);
        (*(void (**)(char *, OZRenderState *, double))(*((void *)this + 2245) + 768))((char *)this + 17960, &v122, v31);
        (*(void (**)(char *, OZRenderState *, double))(*((void *)this + 2264) + 768))((char *)this + 18112, &v122, v31);
        (*(void (**)(char *, OZRenderState *, double))(*((void *)this + 701) + 768))((char *)this + 5608, &v122, v56);
        (*(void (**)(char *, OZRenderState *, double))(*((void *)this + 720) + 768))((char *)this + 5760, &v122, v57);
        (*(void (**)(char *, OZRenderState *, double))(*((void *)this + 776) + 768))((char *)this + 6208, &v122, v78);
      }
      v89.n128_u64[1] = 0;
      int64_t v90 = 0;
      v89.n128_u64[0] = (unint64_t)&v89.n128_u64[1];
      uint64_t v59 = (uint64_t *)(*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this);
      OZScene::getCloneNodes(v59, *((_DWORD *)this + 20), (uint64_t **)&v89);
      unint64_t v60 = v89.n128_u64[0];
      if ((__int8 *)v89.n128_u64[0] != &v89.n128_i8[8])
      {
        do
        {
          long long v61 = (OZScene *)(*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this);
          Node = OZScene::getNode(v61, *(_DWORD *)(v60 + 28));
          if (Node)
          {
            if (v63)
            {
              CMTime v64 = v63;
              if (v58 && (*(unsigned int (**)(OZImageElement *))(*(void *)this + 1608))(this))
              {
                (*(void (**)(void *, uint64_t, void))(v64[2190] + 104))(v64 + 2190, 1, 0);
                OZChannelCrop::setValue((OZChannelCrop *)(v64 + 2190), (const CMTime *)&v122, v29, v29, v31, v31);
                OZTransformNode::setPivot((OZTransformNode *)v64, v56, v57, v78, (const CMTime *)&v122);
              }
              else
              {
                (*(void (**)(void *, OZRenderState *, double))(v64[2207] + 768))(v64 + 2207, &v122, v29);
                (*(void (**)(void *, OZRenderState *, double))(v64[2226] + 768))(v64 + 2226, &v122, v29);
                (*(void (**)(void *, OZRenderState *, double))(v64[2245] + 768))(v64 + 2245, &v122, v31);
                (*(void (**)(void *, OZRenderState *, double))(v64[2264] + 768))(v64 + 2264, &v122, v31);
                (*(void (**)(void *, OZRenderState *, double))(v64[701] + 768))(v64 + 701, &v122, v56);
                (*(void (**)(void *, OZRenderState *, double))(v64[720] + 768))(v64 + 720, &v122, v57);
                (*(void (**)(void *, OZRenderState *, double))(v64[776] + 768))(v64 + 776, &v122, v78);
              }
            }
          }
          unint64_t v65 = *(__n128 **)(v60 + 8);
          if (v65)
          {
            do
            {
              int v66 = v65;
              unint64_t v65 = (__n128 *)v65->n128_u64[0];
            }
            while (v65);
          }
          else
          {
            do
            {
              int v66 = *(__n128 **)(v60 + 16);
              _ZF = v66->n128_u64[0] == v60;
              unint64_t v60 = (unint64_t)v66;
            }
            while (!_ZF);
          }
          unint64_t v60 = (unint64_t)v66;
        }
        while (v66 != (__n128 *)&v89.n128_i8[8]);
      }
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v89, (void *)v89.n128_u64[1]);
      goto LABEL_8;
    }
    double v32 = v24;
    double v80 = 0.0;
    double v81 = 0.0;
    uint64_t v79 = 0;
    (*(void (**)(OZImageElement *, double *, double *, uint64_t *, OZRenderState *, uint64_t))(*(void *)this + 1312))(this, &v81, &v80, &v79, &v122, 1);
    if (v81 >= 1.0 || v81 <= 0.0) {
      double v34 = 1.0;
    }
    else {
      double v34 = 1.0 / v81;
    }
    BOOL v35 = v80 >= 1.0 || v80 <= 0.0;
    double v36 = 1.0 / v80;
    if (v35) {
      double v36 = 1.0;
    }
    double v75 = v36;
    double v77 = v34;
    double v37 = v32;
    double v38 = v25;
    if (v5[1009])
    {
      PGGetCurrentPGContext(&v89);
      double v37 = v32;
      double v38 = v25;
      if (v89.n128_u64[0])
      {
        int v39 = (int)v32;
        int v40 = (int)v25;
        if ((int)v32 > 4096 || (double v37 = v32, v38 = v25, v40 > 4096))
        {
          if (v39 <= v40) {
            int v39 = (int)v25;
          }
          if (v39 <= 1) {
            int v39 = 1;
          }
          double v41 = 4096.0 / (double)v39;
          double v37 = floor(v32 * v41);
          double v38 = floor(v25 * v41);
        }
      }
      if (v89.n128_u64[1])
      {
        double v42 = v37;
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v89.n128_u64[1]);
        double v37 = v42;
      }
    }
    double v43 = v37;
    int v44 = OZChannel::getValueAsInt((OZChannel *)this + 171, MEMORY[0x1E4F1FA48], 0.0);
    double v27 = v43;
    if (v44)
    {
      double v45 = v38;
      double v71 = v38 / *((double *)&v12 + 1);
      double v72 = v43 / *(double *)&v12;
      double v46 = v77;
LABEL_61:
      double v53 = v75;
      goto LABEL_62;
    }
    double v45 = v38;
    double v46 = v77;
    if (*(double *)&v12 >= *((double *)&v12 + 1))
    {
      double v72 = 1.0;
      if (v43 < v32)
      {
        double v46 = v32 * v77 / v43;
        goto LABEL_59;
      }
    }
    else
    {
      double v72 = 1.0;
      if (v38 < v25)
      {
        double v46 = v25 * v75 / v38;
LABEL_59:
        double v27 = *(double *)&v12 * v46;
        double v45 = *((double *)&v12 + 1) * v46;
        double v53 = v46;
        double v71 = 1.0;
LABEL_62:
        double v74 = v53;
        double v29 = 0.0;
        if (v13 * v27 > v32 * a2) {
          double v29 = (v13 * v27 - v32 * a2) / v13 * 0.5;
        }
        double v28 = v46;
        double v30 = v45;
        if (v45 <= v25) {
          double v31 = 0.0;
        }
        else {
          double v31 = (v45 - v25) * 0.5;
        }
        goto LABEL_67;
      }
    }
    double v71 = 1.0;
    goto LABEL_61;
  }
  return result;
}

void sub_1B7BE4598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,CGColorSpace *a54)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a54);
  PCCFRef<CGColorSpace *>::~PCCFRef(v54);
  _Unwind_Resume(a1);
}

OZChannelBase *OZImageElement::didAddToScene(OZImageElement *this, OZScene *a2)
{
  CMTime v22 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  OZTransformNode::didAddToScene((OZTransformNode *)this, a2);
  if (a2)
  {
    OZSceneSettings::OZSceneSettings((OZSceneSettings *)v18, (OZScene *)((char *)a2 + 336));
    unsigned int epoch = v18[0].epoch;
    signed int flags = v18[0].flags;
    CMTimeScale timescale = v18[0].timescale;
    double v7 = v19;
    OZSceneSettings::getFrameDuration((OZScene *)((char *)a2 + 336), (__n128 *)&time2);
    operator*(&time2, &time1, (double)epoch);
    double v8 = (float)timescale;
    double v9 = (float)flags;
    CMTime v22 = time1;
    v18[0].CMTimeValue value = (CMTimeValue)&unk_1F113E428;
    PCString::~PCString(&v21);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v20);
  }
  else
  {
    double v7 = 1.0;
    double v8 = 720.0;
    double v9 = 486.0;
  }
  unsigned int v10 = (CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 29232), MEMORY[0x1E4F1FA48], 0.0);
  double v12 = v11;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 29384), v10, 0.0);
  double v14 = v13;
  if (OZImageElement::isDropZone(this) && (v12 == 1.0 || v14 == 1.0))
  {
    OZChannel::setValue((OZChannel *)((char *)this + 29232), v10, v7 * v8, 0);
    OZChannel::setValue((OZChannel *)((char *)this + 29384), v10, v9, 0);
    OZChannel2D::setValue((OZImageElement *)((char *)this + 26144), v10, 1.0 / v7, 1.0);
    v18[0] = *(CMTime *)((char *)this + 208);
    CMTime time1 = *(CMTime *)((char *)this + 232);
    CMTime time2 = *v10;
    if (!CMTimeCompare(&time1, &time2))
    {
      v18[1] = v22;
      if (a2)
      {
        OZSceneSettings::getFrameDuration((OZScene *)((char *)a2 + 336), (__n128 *)&time1);
        OZRetimingUtil::SetTimeExtent((OZChannelBase *)((char *)this + 56), v18, &time1, v16);
      }
    }
  }
  uint64_t result = OZImageElement::showHideDropZoneChannels(this, 0);
  if (a2)
  {
    if (!*((unsigned char *)a2 + 1576)) {
      return (OZChannelBase *)OZImageElement::ptcLoadCinematicScript(this);
    }
  }
  return result;
}

void sub_1B7BE4844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
}

uint64_t OZImageElement::updateHiddenChannels(OZImageElement *this, char a2)
{
  uint64_t updated = OZElement::updateHiddenChannels((OZElement *)this, a2);
  unsigned int v4 = OZImageElement::isCinematographyAvailable(this);
  BOOL v5 = OZChannelBase::testFlag((OZChannelBase *)this + 271, 2);
  if (v4)
  {
    if (!v5) {
      goto LABEL_7;
    }
    OZChannelBase::resetFlag((OZChannelBase *)this + 271, 2, 0);
  }
  else
  {
    if (v5) {
      goto LABEL_7;
    }
    OZChannelBase::setFlag((OZChannelBase *)this + 271, 2, 0);
  }
  uint64_t updated = 1;
LABEL_7:
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 30480), MEMORY[0x1E4F1FA48], 0.0);
  double v7 = (OZChannelBase *)((char *)this + 31296);
  BOOL v8 = OZChannelBase::testFlag(v7, 2);
  if (ValueAsInt)
  {
    if (v8)
    {
      OZChannelBase::resetFlag(v7, 2, 0);
      return 1;
    }
  }
  else if (!v8)
  {
    OZChannelBase::setFlag(v7, 2, 0);
    return 1;
  }
  return updated;
}

uint64_t OZImageElement::updateRetimingState(OZImageElement *this, OZChannelObjectRoot *a2)
{
  uint64_t v3 = (OZChannelBase *)((char *)this + 56);
  if (OZRetimingUtil::IsAtDefaultRetimingState((OZChannelBase *)((char *)this + 56), a2)
    && !OZRetimingUtil::IsUsingRetimingBehaviors(v3, v4))
  {
    BOOL v5 = (OZChannel *)((char *)this + 32408);
    uint64_t result = OZChannel::getValueAsInt(v5, MEMORY[0x1E4F1FA48], 0.0);
    if (!result) {
      return result;
    }
    double v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
    double v8 = 0.0;
  }
  else
  {
    BOOL v5 = (OZChannel *)((char *)this + 32408);
    if (OZChannel::getValueAsInt(v5, MEMORY[0x1E4F1FA48], 0.0)) {
      return 0;
    }
    double v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
    double v8 = 1.0;
  }
  OZChannel::setValue(v5, v7, v8, 0);
  return 1;
}

float64x2_t OZImageElement::gridFitOffset@<Q0>(OZImageElement *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  if (OZImageElement::isDropZone(a1))
  {
    a3->f64[0] = 0.0;
    a3->f64[1] = 0.0;
  }
  else
  {
    int32x2_t v6 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(*a2)));
    v7.i64[0] = v6.i32[0];
    v7.i64[1] = v6.i32[1];
    __asm { FMOV            V1.2D, #1.0 }
    float64x2_t v13 = vaddq_f64(vsubq_f64(*a2, vcvtq_f64_s64(v7)), _Q1);
    *(int32x2_t *)&_Q1.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v13)));
    v7.i64[0] = SLODWORD(_Q1.f64[0]);
    v7.i64[1] = SHIDWORD(_Q1.f64[0]);
    float64x2_t result = vsubq_f64(v13, vcvtq_f64_s64(v7));
    *a3 = result;
  }
  return result;
}

void *OZImageElement::gridFit(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  float v5 = (float)*(int *)(v4 + 344);
  float v6 = (float)*(int *)(v4 + 348);
  float64x2_t result = (*(void *(**)(CMTime *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 1512))(&v15, a1, a2);
  double v8 = *(double *)&v15.value
     - (float)(v5 * 0.5)
     - (double)(int)vcvtmd_s64_f64(*(double *)&v15.value - (float)(v5 * 0.5))
     + 1.0;
  double v9 = *(double *)&v15.timescale
     - (float)(v6 * 0.5)
     - (double)(int)vcvtmd_s64_f64(*(double *)&v15.timescale - (float)(v6 * 0.5))
     + 1.0;
  double v10 = v9 - (double)(int)vcvtmd_s64_f64(v9);
  float v11 = v8 - (double)(int)vcvtmd_s64_f64(v8);
  float v12 = v10;
  if (v11 <= -0.00001 || v11 >= 0.00001 || v12 <= -0.00001 || v12 >= 0.00001)
  {
    CMTime v15 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    double v13 = v11;
    double v14 = v12;
    OZChannelPosition3D::offsetPosition((OZChannelPosition3D *)(a1 + 5472), &v15, v11, v12, 0.0, 1);
    OZChannel::setDefaultValue((OZChannel *)(a1 + 5608), v13);
    OZChannel::setDefaultValue((OZChannel *)(a1 + 5760), v14);
    return (void *)OZChannel::setDefaultValue((OZChannel *)(a1 + 6208), 0.0);
  }
  return result;
}

CGColorSpace **OZImageElement::gridFit(CGColorSpace **this, OZFootage *a2)
{
  if (a2)
  {
    uint64_t v3 = (uint64_t)this;
    float64x2_t v43 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    float64x2_t v44 = _Q0;
    OZRenderState::OZRenderState(&v42);
    long long v11 = xmmword_1B7E74760;
    uint64_t v12 = 0x3FF0000000000000;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0x3FF0000000000000;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v24 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 0x3FF0000000000000;
    char v23 = 0;
    long long v25 = *MEMORY[0x1E4F1FA48];
    uint64_t v26 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    uint64_t v27 = 0;
    __int16 v28 = 0;
    uint64_t v29 = 0;
    __int16 v30 = 0;
    uint64_t v31 = 0x100000000;
    char v32 = 0;
    double v33 = 0;
    double v34 = 0;
    __int16 v35 = 768;
    uint64_t v36 = 0x408F400000000000;
    char v37 = 0;
    int v38 = 0;
    char v39 = 0;
    uint64_t v40 = -1;
    __asm { FMOV            V0.2D, #1.0 }
    long long v41 = _Q0;
    (*(void (**)(OZFootage *, float64x2_t *, OZRenderState *, long long *))(*(void *)a2 + 1568))(a2, &v43, &v42, &v11);
    __asm { FMOV            V2.2D, #0.5 }
    float64x2_t v43 = vsubq_f64(v43, vaddq_f64(v43, vmulq_f64(v44, _Q2)));
    (*(void (**)(uint64_t, float64x2_t *))(*(void *)v3 + 2264))(v3, &v43);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v34);
    return PCCFRef<CGColorSpace *>::~PCCFRef(&v33);
  }
  return this;
}

void sub_1B7BE4DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CGColorSpace *a32)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a32);
  PCCFRef<CGColorSpace *>::~PCCFRef(v32);
  _Unwind_Resume(a1);
}

void OZImageElement::getOriginalBounds(uint64_t a1, double *a2, const OZRenderState *a3)
{
  Footage = OZImageElement::getFootage((OZImageElement *)a1);
  if (OZImageElement::isDropZone((OZImageElement *)a1))
  {
    int64x2_t v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 29232), MEMORY[0x1E4F1FA48], 0.0);
    unint64_t v9 = vcvtmd_s64_f64(v8 + 0.00001 + 0.0000001);
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 29384), v7, 0.0);
    double v11 = (double)(uint64_t)((v9 & 1) + v9);
    double v12 = (double)(uint64_t)floor(v10 + 0.00001 + 0.0000001);
    *a2 = v11 * -0.5;
    a2[1] = v12 * -0.5;
    a2[2] = v11;
    a2[3] = v12;
  }
  else if (Footage)
  {
    uint64_t v13 = (_OWORD *)(a1 + 30216);
    if (*(double *)(a1 + 30232) >= 0.0 && *(double *)(a1 + 30240) >= 0.0)
    {
      long long v24 = *(_OWORD *)(a1 + 30232);
      *(_OWORD *)a2 = *v13;
      *((_OWORD *)a2 + OZDocument::~OZDocument(this - 1) = v24;
    }
    else
    {
      v60[0] = 0;
      v60[1] = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      float64x2_t v61 = _Q0;
      OZRenderState::OZRenderState(&v59, a3);
      long long v28 = xmmword_1B7E74760;
      uint64_t v29 = 0x3FF0000000000000;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0x3FF0000000000000;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      int v41 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v37 = 0x3FF0000000000000;
      char v40 = 0;
      long long v42 = *MEMORY[0x1E4F1FA48];
      uint64_t v43 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      uint64_t v44 = 0;
      __int16 v45 = 0;
      uint64_t v46 = 0;
      __int16 v47 = 0;
      uint64_t v48 = 0x100000000;
      char v49 = 0;
      double v50 = 0;
      double v51 = 0;
      __int16 v52 = 768;
      uint64_t v53 = 0x408F400000000000;
      char v54 = 0;
      int v55 = 0;
      char v56 = 0;
      uint64_t v57 = -1;
      __asm { FMOV            V0.2D, #1.0 }
      long long v58 = _Q0;
      CMTime var0 = (CMTime)v59.var0;
      OZImageElement::globalToFootageTime((OZImageElement *)a1, &var0, (uint64_t)&v26);
      *(_OWORD *)&v59.var0.CMTime var0 = v26;
      v59.var0.int64_t var3 = v27;
      HIDWORD(v38) = OZChannel::getValueAsInt((OZChannel *)(a1 + 22312), MEMORY[0x1E4F1FA48], 0.0);
      (*(void (**)(void *, void *, OZRenderState *, long long *))(*(void *)Footage + 1568))(Footage, v60, &v59, &v28);
      float64x2_t v20 = v61;
      __asm { FMOV            V1.2D, #-0.5 }
      *(float64x2_t *)a2 = vmulq_f64(v61, _Q1);
      *((float64x2_t *)a2 + OZDocument::~OZDocument(this - 1) = v20;
      long long v22 = *((_OWORD *)a2 + 1);
      _OWORD *v13 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 30232) = v22;
      PCCFRef<CGColorSpace *>::~PCCFRef(&v51);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v50);
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *((_OWORD *)a2 + OZDocument::~OZDocument(this - 1) = _Q0;
  }
}

void sub_1B7BE5070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CGColorSpace *a38)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a38);
  PCCFRef<CGColorSpace *>::~PCCFRef(v38);
  _Unwind_Resume(a1);
}

void OZImageElement::globalToFootageTime(OZImageElement *this@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  Footage = OZImageElement::getFootage(this);
  if (Footage && (*(unsigned int (**)(void *))(*(void *)Footage + 1376))(Footage) == 1)
  {
    uint64_t v7 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)a3 = *MEMORY[0x1E4F1FA48];
    uint64_t v8 = *(void *)(v7 + 16);
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    unint64_t v9 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(void *)this + 640))(this);
    OZRetimingUtil::RemapTimeValue(v9, (OZChannelObjectRoot *)a2, (uint64_t *)a3);
    memset(&v16, 0, sizeof(v16));
    (*(void (**)(CMTime *__return_ptr, OZImageElement *))(*(void *)this + 2304))(&v16, this);
    CMTime time1 = *(CMTime *)a3;
    uint64_t v10 = MEMORY[0x1E4F1FA48];
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)v10;
      uint64_t v8 = *(void *)(v10 + 16);
    }
    else
    {
      CMTime time1 = *(CMTime *)a3;
      CMTime time2 = v16;
      if (CMTimeCompare(&time1, &time2) < 0) {
        return;
      }
      uint64_t v11 = (*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), &v12);
      CMTime time1 = v16;
      *(__n128 *)&time2.CMTimeValue value = v12;
      time2.unsigned int epoch = v13;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
      *(_OWORD *)a3 = v14;
      uint64_t v8 = v15;
    }
  }
  *(void *)(a3 + 16) = v8;
}

void OZImageElement::getRetimedHeliumGraphNoInterpolation(_anonymous_namespace_ *this@<X1>, const OZRenderParams *a2@<X2>, uint64_t a3@<X3>, const void *a4@<X4>, double *a5@<X5>, BOOL *a6@<X6>, void *a7@<X7>, HGBitmapLoader **a8@<X8>)
{
  CMTime v16 = *(CMTime *)a2;
  v17.CMTimeValue value = 0;
  *(CMTime *)a2 = v18;
  *((void *)a2 + 49) = 0;
  *((void *)a2 + 50) = 0;
  OZFootage::getHeliumGraph((uint64_t)this, a2, a3, a4, (FxColorDescription *)a5, (double *)a6, a7, a8);
}

double anonymous namespace'::GetBlendingParams(_anonymous_namespace_ *this, const CMTime *a2, CMTime *a3, CMTime *a4, CMTime *a5, double *a6, BOOL *a7)
{
  OZFootage::getFootageTime(this, a2, a3);
  memset(&v24, 0, sizeof(v24));
  OZFootage::getFrameDuration(this, &v24);
  memset(&v23, 0, sizeof(v23));
  CMTime v26 = *a3;
  CMTime v25 = v24;
  PC_CMTimeFloorToSampleDuration(&v26, &v25, (uint64_t)&v23);
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  CMTime v26 = *a3;
  CMTime v25 = v23;
  PC_CMTimeSaferSubtract(&v26, &v25, (uint64_t)&v21);
  operator/(&v21, (uint64_t)&v24, (uint64_t)&time);
  *(Float64 *)&a5->CMTimeValue value = CMTimeGetSeconds(&time);
  CMTime v19 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (OZFootage::getFieldDominance(this, &v19))
  {
    double v11 = *(double *)&a5->value;
    if (*(double *)&a5->value >= 0.5) {
      double v11 = *(double *)&a5->value + -0.5;
    }
    *(double *)&a5->CMTimeValue value = v11 + v11;
    CMTime v14 = v24;
    PC_CMTimeHalve(&v14, (uint64_t)&v15);
    CMTime v26 = *a3;
    *(_OWORD *)&v25.CMTimeValue value = v15;
    CMTimeEpoch epoch = v16;
  }
  else
  {
    CMTime v26 = *a3;
    *(_OWORD *)&v25.CMTimeValue value = *(_OWORD *)&v24.value;
    CMTimeEpoch epoch = v24.epoch;
  }
  v25.CMTimeEpoch epoch = epoch;
  PC_CMTimeSaferAdd(&v26, &v25, (uint64_t)&v17);
  double result = *(double *)&v17;
  *(_OWORD *)&a4->CMTimeValue value = v17;
  a4->CMTimeEpoch epoch = v18;
  return result;
}

void getMotionBlurTimes(CMTime *a1, int a2, int a3, OZImageElement *a4, OZFootage *this, uint64_t a6, char **a7, double a8)
{
  a7[1] = *a7;
  OZRenderState __p = 0;
  uint64_t v53 = 0;
  char v54 = 0;
  if (a3) {
    int v15 = a2;
  }
  else {
    int v15 = 1;
  }
  memset(&v51, 0, sizeof(v51));
  OZFootage::getFrameDuration(this, &v51);
  memset(&v50, 0, sizeof(v50));
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(a6 + 336), (__n128 *)&v50);
  if (a2)
  {
    int v16 = 0;
    double v17 = a8 / (double)(v15 * a2);
    double v18 = 1.0 / (double)a2;
    do
    {
      memset(&v49, 0, sizeof(v49));
      operator*(&v50, &v47, v17 * (double)v16);
      CMTime v56 = *a1;
      CMTime v55 = v47;
      PC_CMTimeSaferAdd(&v56, &v55, (uint64_t)&v48);
      OZImageElement::globalToFootageTime(a4, &v48, (uint64_t)&v49);
      OZFootage::getFootageTime(this, &v49, &v56);
      LOBYTE(v47.value) = 0;
      unint64_t v19 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CMTime *>,std::__wrap_iter<CMTime *>,CMTime,std::__identity,std::__less<void,void>>((uint64_t)__p, (uint64_t)v53, &v56);
      if (v53 == (char *)v19)
      {
        if ((unint64_t)v54 <= v19)
        {
          unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v53 - (unsigned char *)__p) >> 3);
          unint64_t v24 = v23 + 1;
          if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((v54 - (unsigned char *)__p) >> 3) > v24) {
            unint64_t v24 = 0x5555555555555556 * ((v54 - (unsigned char *)__p) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v54 - (unsigned char *)__p) >> 3) >= 0x555555555555555) {
            unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25) {
            CMTime v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v54, v25);
          }
          else {
            CMTime v26 = 0;
          }
          int64_t v27 = &v26[24 * v23];
          long long v28 = *(_OWORD *)&v56.value;
          *((void *)v27 + 2) = v56.epoch;
          *(_OWORD *)int64_t v27 = v28;
          uint64_t v30 = (char *)__p;
          uint64_t v29 = v53;
          uint64_t v31 = v27;
          if (v53 != __p)
          {
            do
            {
              long long v32 = *(_OWORD *)(v29 - 24);
              *((void *)v31 - OZDocument::~OZDocument(this - 1) = *((void *)v29 - 1);
              *(_OWORD *)(v31 - 24) = v32;
              v31 -= 24;
              v29 -= 24;
            }
            while (v29 != v30);
            uint64_t v29 = (char *)__p;
          }
          uint64_t v22 = v27 + 24;
          OZRenderState __p = v31;
          uint64_t v53 = v27 + 24;
          char v54 = &v26[24 * v25];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          long long v21 = *(_OWORD *)&v56.value;
          *(void *)(v19 + 16) = v56.epoch;
          *(_OWORD *)unint64_t v19 = v21;
          uint64_t v22 = (char *)(v19 + 24);
        }
        uint64_t v53 = v22;
        CMTime v55 = v56;
        unint64_t v33 = (unint64_t)a7[1];
        unint64_t v34 = (unint64_t)a7[2];
        if (v33 >= v34)
        {
          uint64_t v37 = (uint64_t)(v33 - (void)*a7) >> 5;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 59) {
            std::vector<double>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v39 = v34 - (void)*a7;
          if (v39 >> 4 > v38) {
            unint64_t v38 = v39 >> 4;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v40 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40) {
            int v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)(a7 + 2), v40);
          }
          else {
            int v41 = 0;
          }
          long long v42 = (double *)&v41[32 * v37];
          *(CMTime *)long long v42 = v55;
          v42[3] = v18;
          uint64_t v44 = *a7;
          uint64_t v43 = a7[1];
          __int16 v45 = v42;
          if (v43 != *a7)
          {
            do
            {
              long long v46 = *((_OWORD *)v43 - 1);
              *((_OWORD *)v45 - 2) = *((_OWORD *)v43 - 2);
              *((_OWORD *)v45 - OZDocument::~OZDocument(this - 1) = v46;
              v45 -= 4;
              v43 -= 32;
            }
            while (v43 != v44);
            uint64_t v43 = *a7;
          }
          uint64_t v36 = (char *)(v42 + 4);
          *a7 = (char *)v45;
          a7[1] = (char *)(v42 + 4);
          a7[2] = &v41[32 * v40];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          long long v35 = *(_OWORD *)&v56.value;
          *(void *)(v33 + 16) = v56.epoch;
          *(_OWORD *)unint64_t v33 = v35;
          *(double *)(v33 + 24) = v18;
          uint64_t v36 = (char *)(v33 + 32);
        }
        a7[1] = v36;
      }
      else
      {
        uint64_t v20 = (uint64_t)&(*a7)[0x5555555555555560 * ((v19 - (unint64_t)__p) >> 3)];
        *(double *)(v20 + 24) = v18 + *(double *)(v20 + 24);
      }
      ++v16;
    }
    while (v16 != a2);
  }
  if (__p)
  {
    uint64_t v53 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B7BE58BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZImageElement::getRetimedHeliumGraphMotionBlur(OZFootage *this@<X2>, uint64_t *a2@<X0>, uint64_t a3@<X1>, OZRenderParams *a4@<X3>, uint64_t a5@<X4>, const void *a6@<X5>, uint64_t a7@<X6>, double *a8@<X7>, uint64_t *a9@<X8>, void *a10)
{
  unint64_t v40 = 0;
  int v41 = 0;
  uint64_t v42 = 0;
  *(_OWORD *)&v39._pcColorDesc._colorSpaceRef._obuint64_t j = *(_OWORD *)a3;
  *(void *)&v39._pcColorDesc._toneMapMethod._gain = *(void *)(a3 + 16);
  getMotionBlurTimes((CMTime *)&v39, *(_DWORD *)(a3 + 500), *(unsigned __int8 *)(a3 + 496), (OZImageElement *)a2, this, a2[121], &v40, *(double *)(a3 + 504));
  unint64_t v17 = v41 - v40;
  uint64_t WorkingColorDescription = a7;
  if ((unint64_t)(v41 - v40) >= 0x21) {
    uint64_t WorkingColorDescription = OZRenderParams::getWorkingColorDescription(a4);
  }
  unint64_t v19 = *(CGColorSpace **)WorkingColorDescription;
  v39._pcColorDesc._colorSpaceRef._obuint64_t j = v19;
  if (v19) {
    PCCFRefTraits<CGColorSpace *>::retain(v19);
  }
  unint64_t v32 = v17;
  uint64_t v20 = *(void *)(WorkingColorDescription + 8);
  v39._pcColorDesc._toneMapMethod._gain = *(float *)(WorkingColorDescription + 16);
  *(void *)&v39._pcColorDesc._dynamicRange = v20;
  v39._isPremultiplied = *(unsigned char *)(WorkingColorDescription + 24);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 0;
  uint64_t v22 = v40;
  long long v21 = v41;
  if (v40 == v41)
  {
    long long v28 = 0;
    int64_t v27 = 0;
  }
  else
  {
    uint64_t v31 = a9;
    do
    {
      long long v23 = *(_OWORD *)v22;
      *((void *)a4 + 2) = *((void *)v22 + 2);
      *(_OWORD *)a4 = v23;
      *((void *)a4 + 49) = 0;
      *((void *)a4 + 50) = 0;
      OZFootage::getHeliumGraph((uint64_t)this, a4, a5, a6, &v39, a8, a10, &v35);
      unint64_t v33 = v35;
      if (v35) {
        (*(void (**)(HGBitmapLoader *))(*(void *)v35 + 16))(v35);
      }
      FxBalancedBlendRecord::FxBalancedBlendRecord((uint64_t)v34, (uint64_t *)&v33, *((double *)v22 + 3));
      if (v33) {
        (*(void (**)(HGBitmapLoader *))(*(void *)v33 + 24))(v33);
      }
      unint64_t v24 = v37;
      if ((unint64_t)v37 >= v38)
      {
        uint64_t v26 = std::vector<FxBalancedBlendRecord>::__push_back_slow_path<FxBalancedBlendRecord const&>((uint64_t *)&v36, (uint64_t *)v34);
      }
      else
      {
        unint64_t v25 = v34[0];
        OZImageElement::OZImageElement_dropInputIDInfo *v37 = v34[0];
        if (v25) {
          (*((void (**)(void **))*v25 + 2))(v25);
        }
        v24[1] = v34[1];
        uint64_t v26 = (uint64_t)(v24 + 2);
      }
      uint64_t v37 = (void ***)v26;
      if (v34[0]) {
        (*((void (**)(void **))*v34[0] + 3))(v34[0]);
      }
      if (v35) {
        (*(void (**)(HGBitmapLoader *))(*(void *)v35 + 24))(v35);
      }
      v22 += 32;
    }
    while (v22 != v21);
    int64_t v27 = v36;
    long long v28 = (double *)v37;
    a9 = v31;
  }
  makeBalancedBlendTree_RetimeAddBlend6<std::__wrap_iter<FxBalancedBlendRecord *>>(v27, v28, a9);
  if (v32 < 0x21)
  {
    PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)a7, &v39._pcColorDesc._colorSpaceRef._obj);
    *(void *)(a7 + 8) = *(void *)&v39._pcColorDesc._dynamicRange;
    *(float *)(a7 + 16) = v39._pcColorDesc._toneMapMethod._gain;
    *(unsigned char *)(a7 + 24) = v39._isPremultiplied;
  }
  else
  {
    FxApplyColorConform(a9, &v39, (FxColorDescription *)a7, (uint64_t *)v34);
    uint64_t v29 = *a9;
    uint64_t v30 = v34[0];
    if ((void **)*a9 == v34[0])
    {
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
      }
    }
    else
    {
      if (v29)
      {
        (*(void (**)(uint64_t))(*(void *)v29 + 24))(v29);
        uint64_t v30 = v34[0];
      }
      *a9 = (uint64_t)v30;
    }
  }
  *a10 = 0;
  v34[0] = (void **)&v36;
  std::vector<FxBalancedBlendRecord>::__destroy_vector::operator()[abi:ne180100](v34);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v39._pcColorDesc._colorSpaceRef._obj);
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
}

void sub_1B7BE5C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  unint64_t v9 = va_arg(va1, void (***)(void **));
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  if (v9) {
    (*v9)[3]((void **)v9);
  }
  if (*v5) {
    (*(void (**)(void))(*(void *)*v5 + 24))(*v5);
  }
  va_copy((va_list)v9, va1);
  std::vector<FxBalancedBlendRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va2);
  uint64_t v8 = *(void **)(v6 - 104);
  if (v8)
  {
    *(void *)(v6 - 96) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void OZImageElement::getRetimedHeliumGraph(uint64_t a1@<X0>, uint64_t a2@<X1>, OZFootage *a3@<X2>, OZRenderParams *a4@<X3>, uint64_t a5@<X4>, const void *a6@<X5>, double *a7@<X6>, double *a8@<X7>, void *a9@<X8>, void *a10)
{
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 21496), MEMORY[0x1E4F1FA48], 0.0);
  if (*(unsigned char *)(a2 + 513)) {
    int v20 = ValueAsInt;
  }
  else {
    int v20 = 0;
  }
  *a9 = 0;
  if (v20 == 2)
  {
    OZImageElement::getRetimedHeliumGraphMotionBlur(a3, (uint64_t *)a1, a2, a4, a5, a6, (uint64_t)a7, a8, (uint64_t *)&v21, a10);
  }
  else
  {
    if (v20) {
      return;
    }
    OZImageElement::getRetimedHeliumGraphNoInterpolation(a3, a4, a5, a6, a7, (BOOL *)a8, a10, &v21);
  }
  if (v21) {
    *a9 = v21;
  }
}

void OZImageElement::createDropZoneGridHeliumGraph(_anonymous_namespace_ *a1, uint64_t a2, FxColorDescription *a3, uint64_t a4)
{
  FxColorDescription::setDynamicRange(a3, 0);
  *(void *)(a4 + 120) = 0x3FF0000000000000;
  *(void *)(a4 + 80) = 0x3FF0000000000000;
  *(void *)(a4 + 40) = 0x3FF0000000000000;
  *(void *)a4 = 0x3FF0000000000000;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  if (*((_DWORD *)a1 + 80) == 1)
  {
    CGColorSpace = (const OZRenderParams *)FxColorDescription::getCGColorSpace(a3);
  }
  unint64_t v9 = (const OZRenderParams *)FxColorDescription::getCGColorSpace(a3);
}

void sub_1B7BE616C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, CGColorSpace *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va1);
  float v5 = *(std::__shared_weak_count **)(v3 - 56);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::createDropZoneGridBitmap(_anonymous_namespace_ *this, const OZRenderParams *a2, CGColorSpace *a3)
{
  OZRenderParams::getResolution(this, &v3);
  operator new();
}

void sub_1B7BE647C(_Unwind_Exception *exception_object)
{
  __n128 v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void OZImageElement::clearDropZoneCallback(OZImageElement *this)
{
  OZImageElement::isEffectSource(this);
  unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 23432), MEMORY[0x1E4F1FA48], 0.0);
  OZImageElement::defaultDropZoneFootageForType(ValueAsInt, (PCURL *)&v12);
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = (uint64_t *)v11;
  uint64_t v4 = (OZPreferenceManager *)OZPreferenceManager::Instance(v3);
  if (OZPreferenceManager::getRemoveUnusedMedia(v4))
  {
    Footage = OZImageElement::getFootage(this);
    if (Footage)
    {
      LODWORD(v9.var0) = Footage[20];
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(&v10, (unsigned int *)&v9, &v9);
    }
  }
  uint64_t v6 = (OZPreferenceManager *)OZImageElement::replaceFootage(this, &v12, 1);
  if (v6)
  {
    uint64_t v7 = (OZPreferenceManager *)OZPreferenceManager::Instance(v6);
    if (OZPreferenceManager::getRemoveUnusedMedia(v7))
    {
      uint64_t v8 = (OZScene *)*((void *)this + 121);
      PCSharedCount::PCSharedCount(&v9);
      OZScene::deleteUnusedSceneNodeFilesForNodes(v8, &v10, (uint64_t)&v9);
      PCString::~PCString((PCString *)&v9);
    }
    OZDocument::postNotification(*(OZDocument **)(*((void *)this + 121) + 1584), 24);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v10, v11[0]);
  PCURL::~PCURL((PCURL *)&v12);
}

void sub_1B7BE65BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, void *a12)
{
  PCString::~PCString(&a10);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a11, a12);
  PCURL::~PCURL((PCURL *)(v12 - 24));
  _Unwind_Resume(a1);
}

void OZImageElement::defaultDropZoneFootageForType(unsigned int a1@<W0>, PCURL *a2@<X8>)
{
  if (a1 > 3) {
    CFStringRef v3 = 0;
  }
  else {
    CFStringRef v3 = off_1E616DE00[a1];
  }
  CFURLRef v4 = CFBundleCopyResourceURL(*(CFBundleRef *)(theApp + 72), v3, 0, 0);
  PCURL::PCURL(a2, v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1B7BE666C(_Unwind_Exception *a1)
{
  PCURL::~PCURL(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::getDropZoneType(OZImageElement *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 23432), MEMORY[0x1E4F1FA48], 0.0);
}

void OZImageElement::setDropZonePlaceholder(OZImageElement *this)
{
  OZImageElement::isEffectSource(this);
  unsigned int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 23432), MEMORY[0x1E4F1FA48], 0.0);
  OZImageElement::defaultDropZoneFootageForType(ValueAsInt, (PCURL *)&v7);
  uint64_t Instance = (PMMediaManager *)PMMediaManager::getInstance(v3);
  if (PMMediaManager::findReader(Instance, &v7))
  {
    uint64_t v6 = 0;
    if (!PMMediaManager::open(Instance, &v7, &v6, 0))
    {
      Footage = (OZFootage *)OZImageElement::getFootage(this);
      if (Footage) {
        OZFootage::setClip(Footage, v6, 1, 1, 1);
      }
      OZImageElement::showHideDropZoneChannels(this, 0);
    }
  }
  PCURL::~PCURL((PCURL *)&v7);
}

void sub_1B7BE6754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

BOOL OZImageElement::addExtraLighting(OZImageElement *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 29688), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

BOOL OZImageElement::removeBackground(OZImageElement *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 29536), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

BOOL OZImageElement::resizeToMatchInputSource(OZImageElement *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 29840), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

uint64_t *OZScene::begin_t<OZFootageLayer,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  CFStringRef v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    CFURLRef v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZFootageLayer,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZFootageLayer,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7BE68B8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL OZImageElement::isDefaultDropZoneFootageForType(const __CFURL **a1, unsigned int a2)
{
  PCURL::getAsFileSystemString(a1, &v7);
  if (PCString::empty(&v7))
  {
    BOOL v3 = 0;
  }
  else
  {
    if (a2 > 3) {
      CFURLRef v4 = 0;
    }
    else {
      CFURLRef v4 = off_1E616DE00[a2];
    }
    PCURL::PCURL((PCURL *)&v6, v4);
    BOOL v3 = (int)PCString::find(&v7, &v6) >= 0;
    PCString::~PCString(&v6);
  }
  PCString::~PCString(&v7);
  return v3;
}

void sub_1B7BE695C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZImageElement::isDefaultDropZoneFootage(const PCURL *a1)
{
  uint64_t v2 = (const __CFURL **)PCURL::PCURL((PCURL *)v13, a1);
  BOOL isDefaultDropZoneFootageForType = OZImageElement::isDefaultDropZoneFootageForType(v2, 0);
  PCURL::~PCURL((PCURL *)v13);
  if (isDefaultDropZoneFootageForType) {
    return 1;
  }
  PCURL::PCURL((PCURL *)&v12, a1);
  BOOL v4 = OZImageElement::isDefaultDropZoneFootageForType(&v12, 3u);
  PCURL::~PCURL((PCURL *)&v12);
  if (v4) {
    return 1;
  }
  PCURL::PCURL((PCURL *)&v11, a1);
  BOOL v5 = OZImageElement::isDefaultDropZoneFootageForType(&v11, 3u);
  PCURL::~PCURL((PCURL *)&v11);
  if (v5) {
    return 1;
  }
  PCURL::PCURL((PCURL *)&v10, a1);
  BOOL v6 = OZImageElement::isDefaultDropZoneFootageForType(&v10, 1u);
  PCURL::~PCURL((PCURL *)&v10);
  if (v6) {
    return 1;
  }
  PCURL::PCURL((PCURL *)&v9, a1);
  BOOL v7 = OZImageElement::isDefaultDropZoneFootageForType(&v9, 2u);
  PCURL::~PCURL((PCURL *)&v9);
  return v7;
}

void sub_1B7BE6A8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

CMTime *OZImageElement::globalToLocalTime@<X0>(OZImageElement *this@<X0>, CMTime *a2@<X1>, CMTime *a3@<X8>)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20632), MEMORY[0x1E4F1FA48], 0.0);
  Float64 v7 = v6;
  *(_OWORD *)&var60.CMTime var0 = *(_OWORD *)&a2->value;
  var60.var2 = (void **)a2->epoch;
  OZSceneNode::globalToLocalTime(this, &var60, (uint64_t)&var60.var3);
  return operator*((CMTime *)&var60.var3, a3, v7);
}

double OZImageElement::localToGlobalTime@<D0>(OZImageElement *this@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 20632), MEMORY[0x1E4F1FA48], 0.0);
  operator/((long long *)&a2->value, (uint64_t)&v8, v6);
  return OZSceneNode::localToGlobalTime(this, (OZChannelBase *)&v8, a3);
}

void OZImageElement::calculateFrameRequestSettings(OZImageElement *this, const OZRenderParams *a2, const FxColorDescription *a3, OZFootage *a4, OZRenderParams **a5, PMFrameRequest *a6, float *a7, float *a8)
{
}

void sub_1B7BE6F84(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E0C40DE5FDD4ELL);
  _Unwind_Resume(a1);
}

OZChannelBase *OZImageElement::didResetCinematography(OZImageElement *this)
{
  OZImageElement::ptcResetCinematographyAllChannels(this);
  OZImageElement::ptcDeleteScriptData(this);
  OZImageElement::ptcLoadCinematicScript(this);

  return OZImageElement::ptcFillCinematographyDataChannels(this);
}

unint64_t OZImageElement::estimateRenderMemory(OZImageElement *a1, uint64_t a2, unsigned int *a3)
{
  Footage = (OZFootage *)OZImageElement::getFootage(a1);
  if (Footage)
  {
    double v6 = Footage;
    CMTime v48 = 0;
    long long v17 = xmmword_1B7E74760;
    uint64_t v18 = 0x3FF0000000000000;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0x3FF0000000000000;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v30 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v26 = 0x3FF0000000000000;
    char v29 = 0;
    uint64_t v7 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    long long v31 = *MEMORY[0x1E4F1FA48];
    uint64_t v32 = v7;
    uint64_t v33 = 0;
    __int16 v34 = 0;
    uint64_t v35 = 0;
    __int16 v36 = 0;
    uint64_t v37 = 0x100000000;
    char v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    __int16 v41 = 768;
    uint64_t v42 = 0x408F400000000000;
    char v43 = 0;
    int v44 = 0;
    char v45 = 0;
    uint64_t v46 = -1;
    __asm { FMOV            V0.2D, #1.0 }
    long long v47 = _Q0;
    uint64_t WorkingColorDescription = (const FxColorDescription *)OZRenderParams::getWorkingColorDescription((OZRenderParams *)a3);
    OZImageElement::calculateFrameRequestSettings(a1, (const OZRenderParams *)a3, WorkingColorDescription, v6, &v48, (PMFrameRequest *)&v17, &v16, &v15);
  }
  return a3[82] * (unint64_t)a3[81] * a3[84] * ((unint64_t)a3[83] >> 3);
}

void sub_1B7BE7194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CGColorSpace *a34)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a34);
  PCCFRef<CGColorSpace *>::~PCCFRef(v34);
  _Unwind_Resume(a1);
}

void *OZImageElement::reloadResources(OZImageElement *this, PGContext *a2)
{
  double result = OZImageElement::getFootage(this);
  if (result)
  {
    BOOL v3 = *(uint64_t (**)(void))(*(void *)result + 1624);
    return (void *)v3();
  }
  return result;
}

void *OZImageElement::eval(OZImageElement *this, OZRenderParams *a2)
{
  double result = OZImageElement::getFootage(this);
  if (result)
  {
    BOOL v3 = *(uint64_t (**)(void))(*(void *)result + 96);
    return (void *)v3();
  }
  return result;
}

OZImageElement *OZImageElement::hitCheckForDropZoneSource(OZImageElement *a1, float32x2_t *a2, const OZRenderState *a3, uint64_t a4, double *a5, char a6)
{
  CFURLRef v11 = a1;
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (a6 & 4) != 0 && ((*(uint64_t (**)(OZImageElement *))(*(void *)a1 + 680))(a1)) {
    return 0;
  }
  if ((a6 & 2) != 0)
  {
    long long v56 = *(_OWORD *)&a3->var0.var0;
    int64_t var3 = a3->var0.var3;
    if (!(*(unsigned int (**)(void *, long long *, uint64_t, uint64_t, uint64_t))(*((void *)v11 + 2) + 104))((void *)v11 + 2, &v56, 1, 1, 1))return 0; {
  }
    }
  OZRenderParams::OZRenderParams((OZRenderParams *)v55);
  OZRenderParams::setState((OZRenderParams *)v55, a3);
  long long v64 = 0uLL;
  float64x2_t v53 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v54 = _Q0;
  OZImageElement::getDropZoneSourceBounds(v11, &v53, (OZRenderParams *)v55, 0);
  float64x2_t v16 = v53;
  double v17 = v53.f64[1] + *((double *)&v54 + 1);
  *(float64_t *)&long long v58 = v53.f64[0];
  *((double *)&v58 + OZDocument::~OZDocument(this - 1) = v53.f64[1] + *((double *)&v54 + 1);
  double v18 = v53.f64[0] + *(double *)&v54;
  double v59 = v53.f64[0] + *(double *)&v54;
  double v60 = v53.f64[1] + *((double *)&v54 + 1);
  double v61 = v53.f64[0] + *(double *)&v54;
  float64_t v62 = v53.f64[1];
  float64x2_t v63 = v53;
  long long v64 = v58;
  uint64_t v52 = 0x3FF0000000000000;
  uint64_t v49 = 0x3FF0000000000000;
  uint64_t v46 = 0x3FF0000000000000;
  uint64_t v43 = 0x3FF0000000000000;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  (*(void (**)(OZImageElement *, uint64_t *, const OZRenderState *))(*(void *)v11 + 1256))(v11, &v43, a3);
  float64x2_t v41 = vcvtq_f64_f32(*a2);
  uint64_t v42 = 0;
  (*(void (**)(double *__return_ptr, OZImageElement *, float64x2_t *, uint64_t, const OZRenderState *, void))(*(void *)v11 + 1384))(v37, v11, &v41, a4, a3, 0);
  double v19 = v38 * v38 + v39 * v39 + v40 * v40;
  if (v19 <= -0.0000001 || v19 >= 0.0000001)
  {
    memset(v34, 0, sizeof(v34));
    uint64_t v35 = 0;
    unint64_t v36 = 0xBFF0000000000000;
    PCIntersectRayWithPlane(v37, (double *)v34, a5);
    if (v21)
    {
      uint64_t v22 = 0;
      char v23 = 0;
      double v24 = a5[1];
      uint64_t v25 = (double *)&v58 + 1;
      LODWORD(v26) = 4;
      do
      {
        unsigned int v27 = v26;
        uint64_t v26 = v22;
        double v28 = *v25;
        double v29 = *((double *)&v58 + 2 * v27 + 1);
        _NF = *v25 <= v24 && v24 < v29;
        if (_NF || (v24 < v28 ? (BOOL v31 = v29 > v24) : (BOOL v31 = 1), !v31))
        {
          if (*a5 < *(v25 - 1) + (v24 - v28) * (*((double *)&v58 + 2 * v27) - *(v25 - 1)) / (v29 - v28)) {
            v23 ^= 1u;
          }
        }
        ++v22;
        v25 += 2;
      }
      while (v26 != 4);
      if (v23)
      {
        PCMatrix44Tmpl<double>::transform<double>((double *)&v43, a5, a5);
        goto LABEL_8;
      }
    }
    else
    {
      v32[0] = v16.f64[0];
      v32[1] = v18;
      _OWORD v32[2] = v16.f64[1];
      v32[3] = v17;
      long long v33 = xmmword_1B8380060;
      if (PCRayIntersectsBox(v37, v32, a5))
      {
        PCMatrix44Tmpl<double>::transform<double>((double *)&v43, a5, a5);
        goto LABEL_8;
      }
    }
  }
  CFURLRef v11 = 0;
LABEL_8:
  OZRenderParams::~OZRenderParams((OZRenderParams *)v55);
  return v11;
}

void sub_1B7BE7628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void OZImageElement::calcHashForState(OZImageElement *a1, void *a2, const OZRenderParams *a3, uint64_t **a4, uint64_t a5)
{
  Footage = (char *)OZImageElement::getFootage(a1);
  if (Footage)
  {
    CFURLRef v11 = Footage;
    if (!OZImageElement::isDropZone(a1))
    {
      CFURLRef v12 = v11 + 16;
      if (!OZObjectManipulator::isInObjectList((uint64_t)(v11 + 16), (uint64_t)a4))
      {
        if (v13)
        {
          CMTime v14 = v13;
          __n128 v28 = *(__n128 *)PCHashWriteStream::getHash(v13)->i8;
          OZRenderParams::OZRenderParams((OZRenderParams *)&v24, a3);
          long long v22 = 0uLL;
          uint64_t v23 = 0;
          CMTime v21 = *(CMTime *)a3;
          OZImageElement::globalToFootageTime(a1, &v21, (uint64_t)&v22);
          long long v24 = v22;
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          uint64_t v25 = v23;
          OZObjectManipulator::getHashForState(v12, (uint64_t *)a2, (OZRenderParams *)&v24, a4, &v20);
          PCHash128::operator+=((int *)&v28, (int *)&v20);
          (*(void (**)(int8x8_t *))(*(void *)v14 + 40))(v14);
          float v15 = (uint64_t *)operator new(0x18uLL);
          v15[1] = (uint64_t)a4;
          v15[2] = (uint64_t)v12;
          float64x2_t v16 = *a4;
          uint64_t *v15 = (uint64_t)*a4;
          v16[1] = (uint64_t)v15;
          *a4 = v15;
          a4[2] = (uint64_t *)((char *)a4[2] + 1);
          OZTransformNode::calcHashForState(a1, a2, a3, a4, a5);
          double v17 = *a4;
          uint64_t v18 = **a4;
          *(void *)(v18 + 8) = (*a4)[1];
          *(void *)v17[1] = v18;
          a4[2] = (uint64_t *)((char *)a4[2] - 1);
          operator delete(v17);
          Hash = PCHashWriteStream::getHash(v14);
          PCHash128::operator+=((int *)&v28, (int *)Hash);
          PCHashWriteStream::setHash((__n128 *)v14, &v28);
          OZRenderParams::~OZRenderParams((OZRenderParams *)&v24);
          return;
        }
LABEL_10:
        __cxa_bad_cast();
      }
    }
  }
  OZChannelBase::setRangeName((OZChannelBase *)a1, (const PCString *)a3);

  OZTransformNode::calcHashForState(a1, a2, a3, a4, a5);
}

void sub_1B7BE78EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

CGColorSpace **OZImageElement::updatePropertiesFromFootage(OZImageElement *this, OZFootage *a2)
{
  OZImageElement::updateLayerChannel(this, 1);
  (*(void (**)(OZRenderState *__return_ptr, OZFootage *))(*(void *)a2 + 1232))(&v72, a2);
  PCURL::operator=((const void **)this + 3771, (const __CFURL **)&v72);
  PCURL::~PCURL((PCURL *)&v72);
  (*(void (**)(OZRenderState *__return_ptr, OZImageElement *))(*(void *)this + 1128))(&v72, this);
  *((_OWORD *)this + 1886) = *(_OWORD *)&v72.var1;
  *((void *)this + 3774) = *(void *)&v72.var3;
  if (OZImageElement::isInputSource(this))
  {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 26584), 0x1000000000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 27288), 0x1000000000, 1);
  }
  OZRenderState::OZRenderState(&v72);
  long long v42 = xmmword_1B7E74760;
  uint64_t v43 = 0x3FF0000000000000;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0x3FF0000000000000;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  int v54 = 0;
  long long v52 = 0uLL;
  uint64_t v51 = 0x3FF0000000000000;
  char v53 = 0;
  long long v55 = *MEMORY[0x1E4F1FA48];
  uint64_t v56 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  uint64_t v57 = 0;
  __int16 v58 = 0;
  uint64_t v59 = 0;
  __int16 v60 = 0;
  uint64_t v61 = 0x100000000;
  char v62 = 0;
  float64x2_t v63 = 0;
  long long v64 = 0;
  __int16 v65 = 768;
  uint64_t v66 = 0x408F400000000000;
  char v67 = 0;
  int v68 = 0;
  char v69 = 0;
  uint64_t v70 = -1;
  __asm { FMOV            V0.2D, #1.0 }
  long long v71 = _Q0;
  *(void *)((char *)&v52 + 4) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 22312), MEMORY[0x1E4F1FA48], 0.0);
  uint64_t v41 = 0;
  (*(void (**)(OZFootage *, char *, uint64_t *, OZRenderState *, long long *))(*(void *)a2 + 1576))(a2, (char *)&v41 + 4, &v41, &v72, &v42);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 29232), (const CMTime *)&v72, 0.0);
  double v10 = v9;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 29384), (const CMTime *)&v72, 0.0);
  double v12 = v11;
  if (OZImageElement::isDropZone(this) && (v10 == 1.0 || v12 == 1.0))
  {
    OZChannel::setValue((OZChannel *)((char *)this + 29232), MEMORY[0x1E4F1FA48], *((float *)&v41 + 1), 0);
    OZChannel::setValue((OZChannel *)((char *)this + 29384), MEMORY[0x1E4F1FA48], *(float *)&v41, 0);
  }
  unsigned int v13 = *((_DWORD *)this + 4684);
  if (v13 > 2)
  {
    if (v13 == 4)
    {
      uint64_t v25 = (OZChannelFolder *)(*(uint64_t (**)(OZImageElement *))(*(void *)this + 640))(this);
      if (OZChannelFolder::testFoldFlag(v25, 0x4000))
      {
        uint64_t v26 = (__int32 *)*((void *)this + 133);
        for (uint64_t i = (__int32 *)*((void *)this + 132); i != v26; ++i)
        {
          if (!OZScene::getNode(*((OZScene **)this + 121), *i)) {
            OZSceneNode::removeLinkedID(this, *i);
          }
        }
      }
    }
    else if (v13 == 3)
    {
      long long v22 = (OZRetimingUtil *)(*(uint64_t (**)(OZImageElement *))(*(void *)this + 640))(this);
      uint64_t v23 = (*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v23 + 336), &v37);
      OZRetimingUtil::FixLoadedRetimingState(v22, (OZChannelObjectRoot *)&v37, v24);
    }
  }
  else
  {
    CMTime v14 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(void *)this + 640))(this);
    OZRetimingUtil::SetDefaultRetimingState(v14, v15);
    unsigned int ValueAsInt = (OZChannelObjectRoot *)OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 3960), MEMORY[0x1E4F1FA48], 0.0);
    double v17 = (OZRetimingUtil *)(*(uint64_t (**)(OZImageElement *))(*(void *)this + 640))(this);
    OZRetimingUtil::SetEndCondition(v17, ValueAsInt);
    int v18 = OZChannel::getValueAsInt((OZChannel *)((char *)a2 + 4216), MEMORY[0x1E4F1FA48], 0.0);
    double v19 = (OZChannel *)(*(uint64_t (**)(OZImageElement *))(*(void *)this + 640))(this);
    OZRetimingUtil::SetReverse(v19, (OZChannelObjectRoot *)(v18 != 0));
    if ((ValueAsInt - 1) < 3)
    {
      long long v20 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement *))(*(void *)this + 640))(this);
      (*(void (**)(__n128 *__return_ptr, OZFootage *))(*(void *)a2 + 1128))(&v37, a2);
      CMTime v40 = v39;
      OZRetimingUtil::SetLoopOffset(v20, &v40, v21);
    }
    double v38 = *((float *)&v41 + 1);
    *(double *)&v39.CMTimeValue value = *(float *)&v41;
    v37.n128_f64[0] = 0.0 - (*((float *)&v41 + 1) * 0.5 + 0.0);
    v37.n128_f64[1] = 0.0 - (*(float *)&v41 * 0.5 + 0.0);
    (*(void (**)(OZImageElement *, __n128 *))(*(void *)this + 2264))(this, &v37);
  }
  __n128 v28 = (OZRetimingUtil *)(*(uint64_t (**)(OZImageElement *))(*(void *)this + 640))(this);
  uint64_t v29 = (*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v29 + 336), &v37);
  OZRetimingUtil::FixLoopOffset(v28, (OZChannelObjectRoot *)&v37, v30);
  if (*((unsigned char *)this + 30145))
  {
    OZImageElement::getRetimingHash(this);
    *(__n128 *)((char *)this + 30148) = v37;
  }
  BOOL v31 = (*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this)
     && *(void *)((*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this) + 1584)
     && *(unsigned char *)(*(void *)((*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this) + 1584)
                 + 160) != 0;
  if (OZImageElement::isDropZone(this))
  {
    Footage = OZImageElement::getFootage(this);
    __int16 v34 = Footage;
    if (Footage)
    {
      if (((*(uint64_t (**)(unsigned char *))(*(void *)Footage + 1432))(Footage) & 1) != 0
        || (*(unsigned int (**)(unsigned char *))(*(void *)v34 + 1616))(v34)
        && OZImageElement::isBackgroundDropZone(this))
      {
        if (v34[1540]) {
          char v35 = 1;
        }
        else {
          char v35 = v31;
        }
        if ((v35 & 1) == 0)
        {
          if (*((_DWORD *)this + 4684) > 4u) {
            OZImageElement::clearDropZoneCallback(this);
          }
          else {
            OZImageElement::setDropZonePlaceholder(this);
          }
        }
      }
    }
  }
  OZChannelBase::setRangeName((OZChannelBase *)this, v32);
  OZImageElement::showHideDropZoneChannels(this, 1);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v64);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v63);
}

void sub_1B7BE80E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,CGColorSpace *a42)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a42);
  PCCFRef<CGColorSpace *>::~PCCFRef(v42);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::isInputSource(OZImageElement *this)
{
  uint64_t result = OZImageElement::isDropZone(this);
  if (result)
  {
    BOOL v3 = (OZChannel *)((char *)this + 23432);
    if (OZChannel::getValueAsInt(v3, MEMORY[0x1E4F1FA48], 0.0) == 3)
    {
      return 1;
    }
    else
    {
      uint64_t result = OZChannel::getValueAsInt(v3, MEMORY[0x1E4F1FA48], 0.0);
      if (result != 1) {
        return OZChannel::getValueAsInt(v3, MEMORY[0x1E4F1FA48], 0.0) == 2;
      }
    }
  }
  return result;
}

BOOL OZImageElement::isBackgroundDropZone(OZImageElement *this)
{
  BOOL result = OZImageElement::isDropZone(this);
  if (result) {
    return OZChannel::getValueAsInt((OZChannel *)((char *)this + 23432), MEMORY[0x1E4F1FA48], 0.0) == 0;
  }
  return result;
}

__n128 OZImageElement::getNaturalDuration@<Q0>(OZImageElement *this@<X0>, uint64_t a2@<X8>)
{
  Footage = OZImageElement::getFootage(this);
  if (Footage)
  {
    BOOL v4 = *(void (**)(void))(*(void *)Footage + 1648);
    v4();
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
    *(void *)(a2 + 16) = *(void *)(v6 + 16);
  }
  return result;
}

double non-virtual thunk to'OZImageElement::getNaturalDuration@<D0>(OZImageElement *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = OZImageElement::getNaturalDuration((OZImageElement *)((char *)this - 16), a2).n128_u64[0];
  return result;
}

uint64_t OZImageElement::getNaturalDurationFlags(OZImageElement *this)
{
  Footage = OZImageElement::getFootage(this);
  if (!Footage) {
    return 6;
  }
  int v3 = (*(uint64_t (**)(void *))(*(void *)Footage + 1656))(Footage);
  BOOL v4 = (OZRetimingUtil *)(*(uint64_t (**)(OZImageElement *))(*(void *)this + 640))(this);
  return OZRetimingUtil::GetRetimeNaturalDurationFlags(v4, v5) | v3;
}

uint64_t non-virtual thunk to'OZImageElement::getNaturalDurationFlags(OZImageElement *this)
{
  return OZImageElement::getNaturalDurationFlags((OZImageElement *)((char *)this - 16));
}

BOOL OZImageElement::evaluateAlwaysCrop(OZImageElement *this, const OZRenderParams *a2)
{
  BOOL result = OZImageElement::isBackgroundDropZone(this);
  if (result)
  {
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 22976), MEMORY[0x1E4F1FA48], 0.0)
      || OZChannel::getValueAsInt((OZChannel *)((char *)this + 29840), MEMORY[0x1E4F1FA48], 0.0))
    {
      return 0;
    }
    else
    {
      v11[0] = 0.0;
      v11[1] = 0.0;
      __asm { FMOV            V0.2D, #-1.0 }
      float64x2_t v12 = _Q0;
      v10[0] = 0uLL;
      v10[1] = _Q0;
      (*(void (**)(OZImageElement *, double *, const OZRenderParams *))(*(void *)this + 1488))(this, v11, a2);
      OZImageElement::getDropZoneSourceBounds(this, v10, a2, 0);
      return !PCRect<double>::contains(v11, v10[0].f64);
    }
  }
  return result;
}

BOOL OZImageElement::isPassthroughPlaceholder(OZImageElement *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 22976), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

uint64_t OZImageElement::alwaysCrop(unsigned char *a1)
{
  uint64_t v1 = a1 + 30250;
  if (a1[30251]) {
    return *v1 != 0;
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 2328))(a1);
  *uint64_t v1 = result;
  v1[1] = 1;
  return result;
}

BOOL OZImageElement::isDropZoneReplaced(OZChannel *this)
{
  return OZChannel::getValueAsInt(this + 171, MEMORY[0x1E4F1FA48], 0.0) != 0;
}

uint64_t OZImageElement::getDropZoneTypeValue(OZImageElement *this)
{
  if (!OZImageElement::isDropZone(this)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = (const CMTime *)MEMORY[0x1E4F1FA48];

  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 23432), v2, 0.0);
}

uint64_t OZImageElement::updateDropZoneTypeChannels(OZImageElement *this, int a2)
{
  unsigned int DropZoneTypeValue = OZImageElement::getDropZoneTypeValue(this);
  BOOL v5 = (OZChannel *)((char *)this + 23688);
  if (DropZoneTypeValue == -1)
  {
    CMTime v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
    double v10 = 0.0;
    OZChannel::setValue(v5, MEMORY[0x1E4F1FA48], 0.0, a2);
    OZChannel::setValue((OZChannel *)((char *)this + 23944), v8, 0.0, a2);
    OZChannel::setValue((OZChannel *)((char *)this + 24200), v8, 0.0, a2);
    OZChannel::setValue((OZChannel *)((char *)this + 24456), v8, 0.0, a2);
    double v6 = 0.0;
  }
  else
  {
    double v6 = 0.0;
    if (DropZoneTypeValue) {
      double v7 = 0.0;
    }
    else {
      double v7 = 1.0;
    }
    CMTime v8 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannel::setValue(v5, MEMORY[0x1E4F1FA48], v7, a2);
    OZChannel::setValue((OZChannel *)((char *)this + 23944), v8, v7, a2);
    if (DropZoneTypeValue == 3) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = DropZoneTypeValue == 0;
    }
    double v10 = (double)v9;
    if (DropZoneTypeValue == 3) {
      double v6 = 1.0;
    }
    OZChannel::setValue((OZChannel *)((char *)this + 24200), v8, v10, a2);
    OZChannel::setValue((OZChannel *)((char *)this + 24456), v8, v6, a2);
  }
  OZChannel::setValue((OZChannel *)((char *)this + 24712), v8, v10, a2);
  OZChannel::setValue((OZChannel *)((char *)this + 24968), v8, v6, a2);
  DropTypeIndexForunsigned int DropZoneTypeValue = OZImageElement::getDropTypeIndexForDropZoneTypeValue(this, (OZImageElement *)((char *)this + 25224), DropZoneTypeValue);
  OZChannel::setValue((OZChannel *)((char *)this + 25224), v8, (double)DropTypeIndexForDropZoneTypeValue, a2);
  unsigned int v12 = DropZoneTypeValue == 1;
  if (DropZoneTypeValue == 2) {
    unsigned int v12 = 2;
  }

  return OZChannel::setValue((OZChannel *)((char *)this + 25480), v8, (double)v12, a2);
}

uint64_t OZImageElement::getDropTypeIndexForDropZoneTypeValue(OZImageElement *this, const OZChannelEnum *a2, unsigned int a3)
{
  if (a3 == -1) {
    return 0;
  }
  if ((OZImageElement *)((char *)this + 23688) == a2 || (OZImageElement *)((char *)this + 23944) == a2) {
    return a3 == 0;
  }
  if ((OZImageElement *)((char *)this + 24200) == a2 || (OZImageElement *)((char *)this + 24712) == a2)
  {
    if (a3 == 3) {
      return 2;
    }
    else {
      return a3 == 0;
    }
  }
  if ((OZImageElement *)((char *)this + 24456) == a2 || (OZImageElement *)((char *)this + 24968) == a2) {
    return a3 == 3;
  }
  if ((OZImageElement *)((char *)this + 25224) == a2)
  {
    if (a3 < 3) {
      return a3 + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    if ((OZImageElement *)((char *)this + 25480) != a2) {
      return 0;
    }
    if (a3 == 2) {
      return 2;
    }
    else {
      return a3 == 1;
    }
  }
}

uint64_t OZImageElement::getDropZoneInputID(OZImageElement *this)
{
  return OZChannel::getValueAsUint((OZChannel *)((char *)this + 23128), MEMORY[0x1E4F1FA48], 0.0);
}

BOOL OZImageElement::useDisplayAspect(OZImageElement *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 23280), MEMORY[0x1E4F1FA48], 0.0) != 0;
}

CGColorSpace **OZImageElement::resetFitMode(OZImageElement *this)
{
  Footage = OZImageElement::getFootage(this);
  if (Footage) {
    (*(void (**)(void *))(*(void *)Footage + 1368))(Footage);
  }
  else {
    double v3 = 1.0;
  }

  return OZImageElement::resetFitMode(this, v3);
}

uint64_t OZImageElement::resetFitModeToSceneDims(OZImageElement *this, double a2, double a3)
{
  uint64_t result = OZImageElement::isDropZone(this);
  if (result)
  {
    uint64_t v7 = (*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this);
    if (v7)
    {
      OZSceneSettings::OZSceneSettings((OZSceneSettings *)&v12, (const OZSceneSettings *)(v7 + 336));
      double v8 = (float)v13;
      double v9 = (float)v14;
      double v10 = v15;
      unsigned int v12 = &unk_1F113E428;
      PCString::~PCString(&v17);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v16);
    }
    else
    {
      double v10 = 1.0;
      double v9 = 486.0;
      double v8 = 720.0;
    }
    if ((OZImageElement::isInputSource(this) & 1) != 0
      || OZChannel::getValueAsInt((OZChannel *)((char *)this + 22976), MEMORY[0x1E4F1FA48], 0.0)
      || OZChannel::getValueAsInt((OZChannel *)((char *)this + 29840), MEMORY[0x1E4F1FA48], 0.0))
    {
      double v11 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::setValue((OZChannel *)((char *)this + 29232), MEMORY[0x1E4F1FA48], v8 * v10, 1);
      OZChannel2D::setValue((OZImageElement *)((char *)this + 26144), v11, 1.0 / v10, 1.0);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 29840), v11, 0.0)) {
        OZChannel::setValue((OZChannel *)((char *)this + 29384), MEMORY[0x1E4F1FA48], v9, 1);
      }
      return (uint64_t)OZImageElement::resetFitMode(this);
    }
    else
    {
      uint64_t result = OZImageElement::isBackgroundDropZone(this);
      if (result)
      {
        uint64_t result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 23280), MEMORY[0x1E4F1FA48], 0.0);
        if (a3 != a2)
        {
          if (result) {
            return (uint64_t)OZImageElement::resetFitMode(this, a3 / a2);
          }
        }
      }
    }
  }
  return result;
}

void OZImageElement::getIconName(OZImageElement *this@<X0>, PCURL *a2@<X8>)
{
  Footage = OZImageElement::getFootage(this);
  if (!Footage) {
    goto LABEL_3;
  }
  BOOL v4 = Footage;
  if ((*(uint64_t (**)(void *))(*Footage + 1432))(Footage)) {
    goto LABEL_3;
  }
  BOOL v5 = (uint64_t *)v4[1009];
  if (*((unsigned char *)v5 + 1240)
    || ((uint64_t v6 = *v5) == 0 || (*(unsigned int (**)(void))(v6 + 336))())
    && (*(unsigned int (**)(void *))(*v4 + 1376))(v4) >= 2)
  {
    PCURL::PCURL(a2, @"M_LayersList_ObjectIconColor-ImageSequence");
  }
  else
  {
    uint64_t v7 = (PMMediaManager *)(*(void *(**)(const __CFURL **__return_ptr, void *))(*v4 + 1232))(&v11, v4);
    uint64_t Instance = (PMMediaManager *)PMMediaManager::getInstance(v7);
    uint64_t Reader = PMMediaManager::findReader(Instance, &v11);
    if (!Reader)
    {
      PCURL::~PCURL((PCURL *)&v11);
LABEL_3:
      PCURL::PCURL(a2, @"M_LayersList_ObjectIconColor-MissingObject");
      return;
    }
    if ((*(unsigned int (**)(void))(Reader + 232))()) {
      double v10 = @"M_LayersList_ObjectIconColor-Movie";
    }
    else {
      double v10 = @"M_LayersList_ObjectIconColor-Image";
    }
    PCURL::PCURL(a2, v10);
    PCURL::~PCURL((PCURL *)&v11);
  }
}

void sub_1B7BE8C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

void OZImageElement::getIconNameBW(OZImageElement *this@<X0>, PCURL *a2@<X8>)
{
  Footage = OZImageElement::getFootage(this);
  if (!Footage) {
    goto LABEL_3;
  }
  BOOL v4 = Footage;
  if ((*(uint64_t (**)(void *))(*Footage + 1432))(Footage)) {
    goto LABEL_3;
  }
  BOOL v5 = (uint64_t *)v4[1009];
  if (*((unsigned char *)v5 + 1240)
    || ((uint64_t v6 = *v5) == 0 || (*(unsigned int (**)(void))(v6 + 336))())
    && (*(unsigned int (**)(void *))(*v4 + 1376))(v4) >= 2)
  {
    PCURL::PCURL(a2, @"M_LayersList_ObjectIconGrey-ImageSequence");
  }
  else
  {
    uint64_t v7 = (PMMediaManager *)(*(void *(**)(const __CFURL **__return_ptr, void *))(*v4 + 1232))(&v11, v4);
    uint64_t Instance = (PMMediaManager *)PMMediaManager::getInstance(v7);
    uint64_t Reader = PMMediaManager::findReader(Instance, &v11);
    if (!Reader)
    {
      PCURL::~PCURL((PCURL *)&v11);
LABEL_3:
      PCURL::PCURL(a2, @"M_LayersList_ObjectIconGrey-MissingObject");
      return;
    }
    if ((*(unsigned int (**)(void))(Reader + 232))()) {
      double v10 = @"M_LayersList_ObjectIconGrey-Movie";
    }
    else {
      double v10 = @"M_LayersList_ObjectIconGrey-Image";
    }
    PCURL::PCURL(a2, v10);
    PCURL::~PCURL((PCURL *)&v11);
  }
}

void sub_1B7BE8DFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::getIconID(OZImageElement *this)
{
  Footage = OZImageElement::getFootage(this);
  if (!Footage) {
    return 18;
  }
  uint64_t v2 = Footage;
  if ((*(uint64_t (**)(void *))(*Footage + 1432))(Footage)) {
    return 18;
  }
  BOOL v4 = (uint64_t *)v2[1009];
  if (*((unsigned char *)v4 + 1240)) {
    return 5;
  }
  uint64_t v6 = *v4;
  if ((!v6 || (*(unsigned int (**)(void))(v6 + 336))())
    && (*(unsigned int (**)(void *))(*v2 + 1376))(v2) > 1)
  {
    return 5;
  }
  uint64_t v7 = (PMMediaManager *)(*(void *(**)(const __CFURL **__return_ptr, void *))(*v2 + 1232))(&v10, v2);
  uint64_t Instance = (PMMediaManager *)PMMediaManager::getInstance(v7);
  uint64_t Reader = PMMediaManager::findReader(Instance, &v10);
  if (!Reader)
  {
    PCURL::~PCURL((PCURL *)&v10);
    return 18;
  }
  if ((*(unsigned int (**)(void))(Reader + 232))()) {
    uint64_t v3 = 4;
  }
  else {
    uint64_t v3 = 6;
  }
  PCURL::~PCURL((PCURL *)&v10);
  return v3;
}

void sub_1B7BE8F54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

void *OZImageElement::getInput(OZImageElement *this)
{
  uint64_t result = OZImageElement::getFootage(this);
  if (!result)
  {
    return (void *)OZSceneNode::getSuccessor(this);
  }
  return result;
}

BOOL OZImageElement::canCrop(OZElement *this)
{
  if (OZElement::canCrop(this)) {
    return 1;
  }

  return OZImageElement::isDropZone((OZImageElement *)this);
}

double OZImageElement::getPixelAspectRatio(OZImageElement *this)
{
  uint64_t v2 = (const void *)(*(uint64_t (**)(OZImageElement *))(*(void *)this + 2296))(this);
  if (v2
  {
    BOOL v4 = *(void (**)(void))(*(void *)v3 + 1368);
    v4();
  }
  else
  {
    BOOL isDropZone = OZImageElement::isDropZone(this);
    double result = 1.0;
    if (isDropZone) {
      return *(double *)(*((void *)this + 121) + 384);
    }
  }
  return result;
}

BOOL OZImageElement::variesOverTime(OZImageElement *this)
{
  Footage = OZImageElement::getFootage(this);
  if (OZElement::variesOverTime((OZElement *)this)) {
    return 1;
  }
  if (Footage) {
    return (*(unsigned int (**)(void *))(*(void *)Footage + 1376))(Footage) > 1;
  }
  return 0;
}

void OZImageElement::getRetimingHash(OZImageElement *this)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](this);
  uint64_t v3 = v2;
  v10[520] = *(int8x8_t *)MEMORY[0x1E4F143B8];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v10);
  PCHashWriteStream::reset((uint64_t)v10);
  (*(void (**)(void *, int8x8_t *, void))(v1[2581] + 16))(v1 + 2581, v10, 0);
  (*(void (**)(void *, int8x8_t *, void, uint64_t, uint64_t))(v1[2581] + 24))(v1 + 2581, v10, 0, 1, 1);
  (*(void (**)(int8x8_t *))(*(void *)v10 + 24))(v10);
  (*(void (**)(void *, int8x8_t *, void))(v1[2600] + 16))(v1 + 2600, v10, 0);
  (*(void (**)(void *, int8x8_t *, void, uint64_t, uint64_t))(v1[2600] + 24))(v1 + 2600, v10, 0, 1, 1);
  (*(void (**)(int8x8_t *))(*(void *)v10 + 24))(v10);
  (*(void (**)(void *, int8x8_t *, void))(v1[2619] + 16))(v1 + 2619, v10, 0);
  (*(void (**)(void *, int8x8_t *, void, uint64_t, uint64_t))(v1[2619] + 24))(v1 + 2619, v10, 0, 1, 1);
  (*(void (**)(int8x8_t *))(*(void *)v10 + 24))(v10);
  (*(void (**)(void *, int8x8_t *, void))(v1[2651] + 16))(v1 + 2651, v10, 0);
  (*(void (**)(void *, int8x8_t *, void, uint64_t, uint64_t))(v1[2651] + 24))(v1 + 2651, v10, 0, 1, 1);
  (*(void (**)(int8x8_t *))(*(void *)v10 + 24))(v10);
  (*(void (**)(void *, int8x8_t *, void))(v1[2689] + 16))(v1 + 2689, v10, 0);
  (*(void (**)(void *, int8x8_t *, void, uint64_t, uint64_t))(v1[2689] + 24))(v1 + 2689, v10, 0, 1, 1);
  (*(void (**)(int8x8_t *))(*(void *)v10 + 24))(v10);
  (*(void (**)(void *, int8x8_t *, void))(v1[2721] + 16))(v1 + 2721, v10, 0);
  (*(void (**)(void *, int8x8_t *, void, uint64_t, uint64_t))(v1[2721] + 24))(v1 + 2721, v10, 0, 1, 1);
  (*(void (**)(int8x8_t *))(*(void *)v10 + 24))(v10);
  (*(void (**)(void *, int8x8_t *, void))(v1[2753] + 16))(v1 + 2753, v10, 0);
  (*(void (**)(void *, int8x8_t *, void, uint64_t, uint64_t))(v1[2753] + 24))(v1 + 2753, v10, 0, 1, 1);
  (*(void (**)(int8x8_t *))(*(void *)v10 + 24))(v10);
  BOOL v4 = v1 + 125;
  BOOL v5 = (void *)v1[126];
  if (v5 != v1 + 125)
  {
    do
    {
      unint64_t v6 = *(void *)(v5[2] + 8);
      int32x4_t v9 = (int32x4_t)xmmword_1B83804C0;
      if (OZFactory::isKindOfClass(v6, &v9))
      {
        uint64_t v7 = (void *)v5[2];
        uint64_t v8 = v7[6];
        v7 += 6;
        (*(void (**)(void *, int8x8_t *, void))(v8 + 16))(v7, v10, 0);
        (*(void (**)(void *, int8x8_t *, void, uint64_t, uint64_t))(*v7 + 24))(v7, v10, 0, 1, 1);
        (*(void (**)(int8x8_t *))(*(void *)v10 + 24))(v10);
      }
      BOOL v5 = (void *)v5[1];
    }
    while (v5 != v4);
  }
  *uint64_t v3 = *(_OWORD *)PCHashWriteStream::getHash(v10)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v10);
}

void sub_1B7BE9740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)va);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::getMatteBuffer(OZImageElement *this)
{
  return *((void *)this + 3785);
}

uint64_t OZImageElement::shouldRotateMatteBuffer(OZImageElement *this)
{
  return *((unsigned __int8 *)this + 30288);
}

void *HGLazyPDFBitmapLoaderCache::Instance(HGLazyPDFBitmapLoaderCache *this)
{
  {
    pthread_key_create((pthread_key_t *)&HGLazyPDFBitmapLoaderCache::Instance(void)::perThreadInstance, (void (__cdecl *)(void *))PCThreadSpecific<HGLazyPDFBitmapLoaderCache>::destroy);
  }
  uint64_t v1 = pthread_getspecific(HGLazyPDFBitmapLoaderCache::Instance(void)::perThreadInstance);
  if (!v1) {
    operator new();
  }
  return v1;
}

void sub_1B7BE9830(_Unwind_Exception *a1)
{
}

uint64_t HGLazyPDFBitmapLoaderCache::addNode(uint64_t **a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v7 = a2;
  BOOL v4 = std::__tree<std::__value_type<PCHash128,HGRef<HGNode>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,HGRef<HGNode>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,HGRef<HGNode>>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>(a1, (const PCHash128 *)a2, (uint64_t)&std::piecewise_construct, &v7);
  uint64_t v5 = *((void *)v4 + 6);
  uint64_t result = *a3;
  if (v5 != *a3)
  {
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
      uint64_t result = *a3;
    }
    *((void *)v4 + 6) = result;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    }
  }
  return result;
}

HGLazyPDFBitmapLoaderCache *HGLazyPDFBitmapLoaderCache::getNodeForKey@<X0>(HGLazyPDFBitmapLoaderCache *this@<X0>, const PCHash128 *a2@<X1>, HGLazyPDFBitmapLoaderCache **a3@<X8>)
{
  uint64_t result = (HGLazyPDFBitmapLoaderCache *)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>((uint64_t)this, a2);
  if ((HGLazyPDFBitmapLoaderCache *)((char *)this + 8) == result)
  {
    *a3 = 0;
  }
  else
  {
    uint64_t result = (HGLazyPDFBitmapLoaderCache *)*((void *)result + 6);
    *a3 = result;
    if (result)
    {
      unint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (HGLazyPDFBitmapLoaderCache *)v6();
    }
  }
  return result;
}

void OZImageElementFinalizer::~OZImageElementFinalizer(OZImageElementFinalizer *this)
{
  uint64_t v1 = (char *)HGLazyPDFBitmapLoaderCache::Instance(this);
  std::__tree<std::__value_type<PCHash128,HGRef<HGNode>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,HGRef<HGNode>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,HGRef<HGNode>>>>::destroy((uint64_t)v1, *((void **)v1 + 1));
  *(void *)uint64_t v1 = v1 + 8;
  *((void *)v1 + 2) = 0;
  *((void *)v1 + OZDocument::~OZDocument(this - 1) = 0;
}

void OZPDFRender::OZPDFRender(OZPDFRender *this, OZImageElement *a2, const OZRenderParams *a3)
{
  *((void *)this + 182) = &unk_1F1199AC8;
  *((void *)this + 183) = 0;
  *((unsigned char *)this + 1472) = 1;
  LiImageSource::LiImageSource((LiImageSource *)((char *)this + 1440), (uint64_t *)&off_1F113CE28);
  *(void *)this = &unk_1F113CC38;
  *((void *)this + OZDocument::~OZDocument(this - 1) = a2;
  *((void *)this + 180) = &unk_1F113CD30;
  *((void *)this + 182) = &unk_1F113CDF8;
  OZRenderParams::OZRenderParams((OZPDFRender *)((char *)this + 16), a3);
}

void sub_1B7BE9AAC(_Unwind_Exception *a1)
{
  OZChannelBase::setRangeName(v3, (const PCString *)&off_1F113CE28);
  *(void *)(v1 + 1456) = v2;
  *(unsigned char *)(v1 + 1472) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1464));
  _Unwind_Resume(a1);
}

uint64_t OZPDFRender::getBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 1;
}

uint64_t virtual thunk to'OZPDFRender::getBoundary(void *a1, uint64_t a2, uint64_t a3)
{
  return 1;
}

uint64_t OZPDFRender::filteredEdges(OZPDFRender *this)
{
  return 0;
}

uint64_t virtual thunk to'OZPDFRender::filteredEdges(OZPDFRender *this)
{
  return 0;
}

uint64_t OZPDFRender::pixelTransformSupport(OZImageElement **this, const LiRenderParameters *a2)
{
  if (*((unsigned char *)a2 + 144)) {
    return 0;
  }
  Footage = (OZFootage *)OZImageElement::getFootage(this[1]);
  if (Footage && OZFootage::isRenderedAtFixedResolution(Footage)) {
    return 0;
  }
  else {
    return 6;
  }
}

uint64_t virtual thunk to'OZPDFRender::pixelTransformSupport(OZPDFRender *this, const LiRenderParameters *a2)
{
  return OZPDFRender::pixelTransformSupport((OZImageElement **)((char *)this + *(void *)(*(void *)this - 80)), a2);
}

void OZPDFRender::fixPixelTransform(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  LiImageSource::fixPixelTransform(a1 + *(void *)(*(void *)a1 - 24), (uint64_t)a2, a3, a4);
  if (!*(unsigned char *)(a4 + 144))
  {
    Footage = (OZFootage *)OZImageElement::getFootage(*(OZImageElement **)(a1 + 8));
    __n128 v80 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v81 = _Q0;
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = a1 + 16;
    (*(void (**)(void))(*(void *)v14 + 1480))();
    if (Footage)
    {
      if (OZFootage::isRenderedAtFixedResolution(Footage))
      {
        *(_DWORD *)uint64_t v59 = 0;
        LODWORD(v57.f64[0]) = 0;
        *(_OWORD *)long long v71 = *(_OWORD *)v15;
        *(void *)&v71[16] = *(void *)(v15 + 16);
        OZFootage::getFixedResolution(Footage, (unsigned int *)v59, (unsigned int *)&v57, (const CMTime *)v71);
        LODWORD(v16) = *(_DWORD *)v59;
        PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, (double)v16 / *(double *)&v81, (double)__PAIR64__(DWORD1(v81), LODWORD(v57.f64[0])) / *((double *)&v81 + 1), 1.0);
        return;
      }
      LiImagePolygon::LiImagePolygon((LiImagePolygon *)v78);
      LiImagePolygon::set((uint64_t)v78, v80.n128_f64, 0);
      long long v17 = *(_OWORD *)(a3 + 80);
      long long v74 = *(_OWORD *)(a3 + 64);
      long long v75 = v17;
      long long v18 = *(_OWORD *)(a3 + 112);
      long long v76 = *(_OWORD *)(a3 + 96);
      long long v77 = v18;
      long long v19 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)long long v71 = *(_OWORD *)a3;
      *(_OWORD *)&v71[16] = v19;
      long long v20 = *(_OWORD *)(a3 + 48);
      long long v72 = *(_OWORD *)(a3 + 32);
      long long v73 = v20;
      LiAgent::getROI(a2, (__n128 *)v59);
      v21.i64[0] = *(int *)v59;
      v21.i64[1] = *(int *)&v59[4];
      float64x2_t v68 = vcvtq_f64_s64(v21);
      double v69 = (double)*(int *)&v59[8];
      double v70 = (double)*(int *)&v59[12];
      if ((*(_DWORD *)&v59[8] & 0x80000000) == 0 && (*(_DWORD *)&v59[12] & 0x80000000) == 0)
      {
        liTransformAndClip(v68.f64, (double *)a3, v78);
        unint64_t v22 = v79[1] - *v79;
        if ((int)(v22 >> 5) < 1)
        {
          double v27 = 2.22507386e-308;
          double v25 = 2.22507386e-308;
        }
        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = v22 & 0x1FFFFFFFE0;
          double v25 = 2.22507386e-308;
          __asm { FMOV            V0.2D, #1.0 }
          long long v52 = _Q0;
          double v27 = 2.22507386e-308;
          do
          {
            __n128 v28 = (double *)(*v79 + v23);
            *(_OWORD *)uint64_t v59 = v52;
            *(void *)&v59[16] = 0x3FF0000000000000;
            float64x2_t v57 = 0uLL;
            uint64_t v58 = 0;
            getScale((float64x2_t *)a3, v28, (double *)v59, (uint64_t)&v57, 0);
            if (v25 < v57.f64[0]) {
              double v25 = v57.f64[0];
            }
            if (v27 < v57.f64[1]) {
              double v27 = v57.f64[1];
            }
            v23 += 32;
          }
          while (v24 != v23);
        }
        if (*(unsigned char *)(a4 + 132)) {
          int v32 = 2950;
        }
        else {
          int v32 = 1950;
        }
        int v51 = v32;
        double v33 = (double)v32;
        int v34 = 9;
        while (1)
        {
          *(void *)(a3 + 120) = 0x3FF0000000000000;
          *(void *)(a3 + 80) = 0x3FF0000000000000;
          *(void *)(a3 + 40) = 0x3FF0000000000000;
          *(void *)a3 = 0x3FF0000000000000;
          *(_OWORD *)(a3 + 8) = 0u;
          *(_OWORD *)(a3 + 24) = 0u;
          *(_OWORD *)(a3 + 48) = 0u;
          *(_OWORD *)(a3 + 64) = 0u;
          *(_OWORD *)(a3 + 88) = 0u;
          *(_OWORD *)(a3 + 104) = 0u;
          PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, v25, v27, 1.0);
          uint64_t v67 = 0x3FF0000000000000;
          uint64_t v64 = 0x3FF0000000000000;
          uint64_t v61 = 0x3FF0000000000000;
          *(void *)uint64_t v59 = 0x3FF0000000000000;
          *(_OWORD *)&v59[8] = 0u;
          long long v60 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          long long v65 = 0u;
          long long v66 = 0u;
          if (!PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)v59, (double *)a3, 0.0)) {
            goto LABEL_43;
          }
          PCMatrix44Tmpl<double>::operator*((uint64_t)v71, (long long *)v59, (uint64_t)&v57);
          v53.n128_u64[0] = 0;
          LiAgent::makeHeliumXForm((uint64_t)a2, (uint64_t)&v57, &v56);
          if (!v56) {
            goto LABEL_43;
          }
          PGHelium::convertPCMatrix44((long long *)&v57, &v55);
          (*(void (**)(HGTransform *))(*(void *)v55 + 184))(v55);
          (*(void (**)(HGTransform *))(*(void *)v55 + 168))(v55);
          LiAgent::getROI(a2, &v53);
          char v35 = (HGTransformUtils *)HGRectMake4i(v53.n128_u32[0], v53.n128_u32[1], v53.n128_u32[2] + v53.n128_u32[0], v53.n128_u32[3] + v53.n128_u32[1]);
          uint64_t v37 = v36;
          double v38 = v55;
          float v39 = HGTransformUtils::MinW(v35);
          *(void *)&v82.CMTime var0 = v37;
          uint64_t ROI = HGTransformUtils::GetROI(v38, (unint64_t)v35, v82, 1.0, v39);
          uint64_t v42 = v41;
          __n128 v53 = v80;
          long long v54 = v81;
          if (PCMatrix44Tmpl<double>::transformRect<double>((double *)a3, v53.n128_f64, (uint64_t)&v53))
          {
            uint64_t v43 = HGRectMake4i((int)v53.n128_f64[0], (int)v53.n128_f64[1], (int)*(double *)&v54 + (int)v53.n128_f64[0], (int)*((double *)&v54 + 1) + (int)v53.n128_f64[1]);
            uint64_t v45 = HGRectIntersection(ROI, v42, v43, v44);
            if (v46 - (int)v45 > v51)
            {
              double v25 = v25 / ((double)(v46 - (int)v45) / v33);
              int v48 = v47 - HIDWORD(v45);
LABEL_32:
              char v49 = 0;
              if (v48 > v51) {
                double v27 = v27 / ((double)v48 / v33);
              }
              goto LABEL_35;
            }
            int v48 = v47 - HIDWORD(v45);
            if (v47 - HIDWORD(v45) > v51) {
              goto LABEL_32;
            }
          }
          char v49 = 1;
LABEL_35:
          if (v55) {
            (*(void (**)(HGTransform *))(*(void *)v55 + 24))(v55);
          }
          if (v56) {
            (*(void (**)(uint64_t))(*(void *)v56 + 24))(v56);
          }
          if (v34) {
            char v50 = v49;
          }
          else {
            char v50 = 1;
          }
          --v34;
          if (v50) {
            goto LABEL_43;
          }
        }
      }
      if (fabs(*((double *)&v77 + 1) + -1.0) >= 0.0000001)
      {
        float64x2_t v57 = 0uLL;
        uint64_t v58 = 0;
        uint64_t v67 = 0x3FF0000000000000;
        uint64_t v64 = 0x3FF0000000000000;
        uint64_t v61 = 0x3FF0000000000000;
        *(void *)uint64_t v59 = 0x3FF0000000000000;
        *(_OWORD *)&v59[8] = 0u;
        long long v60 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        perspectiveToAffine((float64x2_t *)a3, v57.f64, (double *)v59);
        if (v59 != (unsigned char *)a3)
        {
          for (uint64_t i = 0; i != 128; i += 32)
          {
            int v30 = (_OWORD *)(a3 + i);
            long long v31 = *(_OWORD *)&v59[i + 16];
            _OWORD *v30 = *(_OWORD *)&v59[i];
            v30[1] = v31;
          }
        }
      }
      memset(v59, 0, sizeof(v59));
      float64x2_t v57 = 0uLL;
      uint64_t v58 = 0;
      getScaleTranslate((float64x2_t *)a3, (uint64_t)v59, &v57);
      *(void *)&v59[16] = 0x3FF0000000000000;
      *(void *)(a3 + 120) = 0x3FF0000000000000;
      *(void *)(a3 + 80) = 0x3FF0000000000000;
      *(void *)(a3 + 40) = 0x3FF0000000000000;
      *(void *)a3 = 0x3FF0000000000000;
      *(_OWORD *)(a3 + 8) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 88) = 0u;
      *(_OWORD *)(a3 + 104) = 0u;
      PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, *(double *)v59, *(double *)&v59[8], 1.0);
LABEL_43:
      LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v78);
    }
  }
}

void sub_1B7BEA228(_Unwind_Exception *a1)
{
}

void virtual thunk to'OZPDFRender::fixPixelTransform(void *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
}

CGColorSpace **OZPDFRender::getHelium(OZPDFRender *this, LiAgent *a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](this);
  BOOL v4 = v3;
  uint64_t v5 = v2;
  uint64_t v7 = v6;
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  Footage = (OZFootage *)OZImageElement::getFootage(*(OZImageElement **)(v2 + 8));
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((void *)v4 + 6) + 160));
  OZRenderParams::setWorkingColorSpace((FxColorDescription *)(v5 + 16), CGColorSpace);
  OZRenderParams::setBlendingGamma(v5 + 16, *(float *)(*((void *)v4 + 6) + 192));
  *uint64_t v7 = 0;
  uint64_t RequestedColorDescription = LiAgent::getRequestedColorDescription(v4);
  CFURLRef v11 = *(CGColorSpace **)RequestedColorDescription;
  v58._pcColorDesc._colorSpaceRef._obuint64_t j = v11;
  if (v11) {
    PCCFRefTraits<CGColorSpace *>::retain(v11);
  }
  uint64_t v12 = *(void *)(RequestedColorDescription + 8);
  v58._pcColorDesc._toneMapMethod._gain = *(float *)(RequestedColorDescription + 16);
  *(void *)&v58._pcColorDesc._dynamicRange = v12;
  v58._isPremultiplied = *(unsigned char *)(RequestedColorDescription + 24);
  if (!FxColorDescription::getCGColorSpace(&v58))
  {
    int v13 = (CGColorSpace *)PCColorSpaceCache::cgsRGB(0);
    FxColorDescription::setCGColorSpace(&v58, v13);
  }
  FxColorDescription::setDynamicRange(&v58, 0);
  if (!Footage || !OZFootage::isRenderedAtFixedResolution(Footage))
  {
    v48[0] = 0;
    v48[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    float64x2_t v49 = _Q0;
    (*(void (**)(void, void *, uint64_t))(**(void **)(v5 + 8) + 1480))(*(void *)(v5 + 8), v48, v5 + 16);
    uint64_t v29 = (long long *)*((void *)v4 + 20);
    long long v54 = v29[4];
    long long v55 = v29[5];
    long long v56 = v29[6];
    long long v57 = v29[7];
    long long v50 = *v29;
    long long v51 = v29[1];
    long long v52 = v29[2];
    long long v53 = v29[3];
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v47);
    int v46 = 0;
    int v30 = (OZFootage *)OZImageElement::getFootage(*(OZImageElement **)(v5 + 8));
    if (v30 && OZFootage::isStill(v30))
    {
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)&v59);
      PCHashWriteStream::writeValue((int8x8_t *)&v59, *(const void **)(v5 + 8));
      OZRenderParams::getHashWithoutTime((_DWORD *)(v5 + 16), v45);
      PCHashWriteStream::writeValue((int8x8_t *)&v59, (const PCHash128 *)v45);
      FxHashColorDescription((int8x8_t *)&v59, &v58);
      PCHashWriteStream::writeValue((int8x8_t *)&v59, vcvtpd_s64_f64(v49.f64[0]));
      PCHashWriteStream::writeValue((int8x8_t *)&v59, vcvtpd_s64_f64(v49.f64[1]));
      uint64_t v31 = 0;
      int v32 = &v50;
      do
      {
        for (uint64_t i = 0; i != 32; i += 8)
          PCHashWriteStream::writeValue((int8x8_t *)&v59, *(double *)((char *)v32 + i));
        ++v31;
        v32 += 2;
      }
      while (v31 != 4);
      Hash = (HGLazyPDFBitmapLoaderCache *)PCHashWriteStream::getHash((int8x8_t *)&v59);
      *(_OWORD *)int v47 = *(_OWORD *)Hash;
      char v35 = (HGLazyPDFBitmapLoaderCache *)HGLazyPDFBitmapLoaderCache::Instance(Hash);
      HGLazyPDFBitmapLoaderCache::getNodeForKey(v35, (const PCHash128 *)v47, (HGLazyPDFBitmapLoaderCache **)v45);
      uint64_t v36 = *(int32x2_t **)v45;
      if (*(void *)v45)
      {
        int v46 = *(int32x2_t **)v45;
        PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&v59);
LABEL_28:
        *uint64_t v7 = v36;
        (*(void (**)(int32x2_t *))(*(void *)v36 + 16))(v36);
        (*(void (**)(int32x2_t *))(*(void *)v36 + 24))(v36);
        goto LABEL_29;
      }
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&v59);
    }
    uint64_t v37 = (CGColorSpace *)FxColorDescription::getCGColorSpace(&v58);
    uint64_t v36 = (int32x2_t *)HGObject::operator new(0x890uLL);
    HGLazyPDFBitmapLoader::HGLazyPDFBitmapLoader((HGLazyPDFBitmapLoader *)v36, *(OZImageElement **)(v5 + 8), (const OZRenderParams *)(v5 + 16), v37);
    uint64_t v38 = 0;
    int32x2_t v39 = vshr_n_s32(vadd_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(v49))), (int32x2_t)0x100000001), 1uLL);
    v36[61] = vneg_s32(v39);
    v36[62] = v39;
    do
    {
      CMTime v40 = &v36[v38];
      *(_OWORD *)v40[66].i8 = *(long long *)((char *)&v50 + v38 * 8);
      *(_OWORD *)v40[68].i8 = *(long long *)((char *)&v50 + v38 * 8 + 16);
      v38 += 4;
    }
    while (v38 != 16);
    int v46 = v36;
    (*(void (**)(int32x2_t *))(*(void *)v36 + 16))(v36);
    uint64_t v41 = (OZFootage *)OZImageElement::getFootage(*(OZImageElement **)(v5 + 8));
    if (v41)
    {
      isStill = (HGLazyPDFBitmapLoaderCache *)OZFootage::isStill(v41);
      if (isStill)
      {
        uint64_t v43 = (uint64_t **)HGLazyPDFBitmapLoaderCache::Instance(isStill);
        HGLazyPDFBitmapLoaderCache::addNode(v43, v47, (uint64_t *)&v46);
      }
    }
    (*(void (**)(int32x2_t *))(*(void *)v36 + 24))(v36);
    goto LABEL_28;
  }
  v47[0] = 0;
  v45[0] = 0;
  CMTime v59 = *(CMTime *)(v5 + 16);
  OZFootage::getFixedResolution(Footage, v47, v45, &v59);
  OZRenderParams::OZRenderParams((OZRenderParams *)&v59, (const OZRenderParams *)(v5 + 16));
  if (*(_DWORD *)(*(void *)HGRenderJob::GetRenderNodeList((HGRenderJob *)(v5 + 16)) + 8)) {
    int v14 = 2;
  }
  else {
    int v14 = 1;
  }
  OZRenderParams::setImageType((uint64_t)&v59, v14);
  char v60 = 1;
  long long v61 = 0u;
  long long v62 = 0u;
  OZRenderParams::setWidth((OZRenderParams *)&v59, v47[0]);
  OZRenderParams::setHeight((OZRenderParams *)&v59, v45[0]);
  uint64_t v15 = (long long *)*((void *)v4 + 20);
  long long v16 = v15[3];
  long long v18 = *v15;
  long long v17 = v15[1];
  long long v52 = v15[2];
  long long v53 = v16;
  long long v50 = v18;
  long long v51 = v17;
  long long v19 = v15[7];
  long long v21 = v15[4];
  long long v20 = v15[5];
  long long v56 = v15[6];
  long long v57 = v19;
  long long v54 = v21;
  long long v55 = v20;
  uint64_t v22 = *(void *)(v5 + 8);
  uint64_t HeliumRenderer = LiAgent::getHeliumRenderer((LiRenderParameters **)v4);
  (*(void (**)(void *__return_ptr, uint64_t, CMTime *, uint64_t, FxColorDescription *, long long *))(*(void *)v22 + 2280))(v48, v22, &v59, HeliumRenderer, &v58, &v50);
  if (v48[0]) {
    *uint64_t v7 = (int32x2_t *)v48[0];
  }
  LiAgent::setPixelTransform((uint64_t)v4, (uint64_t)&v50);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v59);
LABEL_29:
  LiAgent::setActualColorDescription((CGColorSpace **)v4, &v58);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v58._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B7BEA830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,CGColorSpace *a35)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a35);
  if (*v35) {
    (*(void (**)(void))(*(void *)*v35 + 24))(*v35);
  }
  _Unwind_Resume(a1);
}

CGColorSpace **virtual thunk to'OZPDFRender::getHelium(OZPDFRender *this, LiAgent *a2)
{
  return OZPDFRender::getHelium((OZPDFRender *)((char *)this + *(void *)(*(void *)this - 184)), a2);
}

unint64_t OZPDFRender::estimateRenderMemory(uint64_t a1, uint64_t a2)
{
  Footage = (OZFootage *)OZImageElement::getFootage(*(OZImageElement **)(a1 + 8));
  if (Footage && (uint64_t v5 = Footage, OZFootage::isRenderedAtFixedResolution(Footage)))
  {
    *(void *)int v14 = 0;
    v10[0] = *(CMTime *)(a1 + 16);
    OZFootage::getFixedResolution(v5, &v14[1], v14, v10);
    OZRenderParams::OZRenderParams((OZRenderParams *)v10, (const OZRenderParams *)(a1 + 16));
    if (*(_DWORD *)(*(void *)HGRenderJob::GetRenderNodeList((HGRenderJob *)(a1 + 16)) + 8)) {
      int v6 = 2;
    }
    else {
      int v6 = 1;
    }
    OZRenderParams::setImageType((uint64_t)v10, v6);
    char v11 = 1;
    long long v12 = 0u;
    long long v13 = 0u;
    OZRenderParams::setWidth((OZRenderParams *)v10, v14[1]);
    OZRenderParams::setHeight((OZRenderParams *)v10, v14[0]);
    unint64_t v7 = OZImageElement::estimateRenderMemory(*(OZImageElement **)(a1 + 8), a2, (unsigned int *)v10);
    OZRenderParams::~OZRenderParams((OZRenderParams *)v10);
    return v7;
  }
  else
  {
    int32x4_t v9 = *(OZImageElement **)(a1 + 8);
    return OZImageElement::estimateRenderMemory(v9, a2, (unsigned int *)(a1 + 16));
  }
}

void sub_1B7BEAAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t virtual thunk to'OZPDFRender::estimateRenderMemory(void *a1, uint64_t a2)
{
  return OZPDFRender::estimateRenderMemory((uint64_t)a1 + *(void *)(*a1 - 136), a2);
}

PCSharedCount *OZImageElement::makeRenderImageSource@<X0>(OZImageElement *this@<X0>, OZRenderParams *a2@<X1>, const OZRenderGraphState *a3@<X2>, PCSharedCount *a4@<X8>)
{
  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (Footage)
  {
    if (OZFootage::isResolutionIndependent(Footage)) {
      operator new();
    }
    OZElement::makeRenderImageSource((OZElement *)this, a2, a3);
  }
  a4->CMTime var0 = 0;

  return PCSharedCount::PCSharedCount(a4 + 1, 0);
}

void sub_1B7BEABE0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E56B8860);
  _Unwind_Resume(a1);
}

PCSharedCount *non-virtual thunk to'OZImageElement::makeRenderImageSource@<X0>(OZImageElement *this@<X0>, OZRenderParams *a2@<X1>, const OZRenderGraphState *a3@<X2>, PCSharedCount *a4@<X8>)
{
  return OZImageElement::makeRenderImageSource((OZImageElement *)((char *)this - 6528), a2, a3, a4);
}

void HGLazyPDFBitmapLoader::HGLazyPDFBitmapLoader(HGLazyPDFBitmapLoader *this, OZImageElement *a2, const OZRenderParams *a3, CGColorSpace *a4)
{
  HGBitmapLoader::HGBitmapLoader(this);
  *(void *)uint64_t v8 = &unk_1F113CE58;
  *(void *)(v8 + 520) = a2;
  *(void *)(v8 + 648) = 0x3FF0000000000000;
  *(void *)(v8 + 608) = 0x3FF0000000000000;
  *(void *)(v8 + 568) = 0x3FF0000000000000;
  *(void *)(v8 + 528) = 0x3FF0000000000000;
  *(_OWORD *)(v8 + 536) = 0u;
  *(_OWORD *)(v8 + 552) = 0u;
  *(_OWORD *)(v8 + 576) = 0u;
  *(_OWORD *)(v8 + 592) = 0u;
  *(_OWORD *)(v8 + 616) = 0u;
  *(_OWORD *)(v8 + 632) = 0u;
  OZRenderParams::OZRenderParams((OZRenderParams *)(v8 + 656), a3);
  PCColorSpaceHandle::PCColorSpaceHandle((HGLazyPDFBitmapLoader *)((char *)this + 2080), a4);
  *(_OWORD *)((char *)this + 2088) = 0u;
  PCMutex::PCMutex((PCMutex *)((char *)this + 2104));
  HGLazyPDFBitmapLoader::generatePlaceHolderBitmap(this);
}

void sub_1B7BEACE0(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  PCMutex::~PCMutex(v5);
  unint64_t v7 = (std::__shared_weak_count *)*((void *)v1 + 262);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(v3);
  OZRenderParams::~OZRenderParams(v2);
  HGBitmapLoader::~HGBitmapLoader(v1);
  _Unwind_Resume(a1);
}

void HGLazyPDFBitmapLoader::generatePlaceHolderBitmap(HGLazyPDFBitmapLoader *this)
{
  OZRenderParams::OZRenderParams((OZRenderParams *)v16, (HGLazyPDFBitmapLoader *)((char *)this + 656));
  OZRenderParams::setWidth((OZRenderParams *)v16, 0);
  OZRenderParams::setHeight((OZRenderParams *)v16, 0);
  OZRenderParams::setImageType((uint64_t)v16, 1);
  v16[360] = 1;
  long long v17 = 0u;
  long long v18 = 0u;
  PCColorSpaceHandle::getCGColorSpace((HGLazyPDFBitmapLoader *)((char *)this + 2080));
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  PCDynamicCast<PCBitmap,PCImage>((uint64_t)&v14, &v13);
  uint64_t v2 = (char *)this + 2088;
  long long v3 = v13;
  long long v13 = 0uLL;
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 262);
  *(_OWORD *)((char *)this + 2088) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (*((void *)&v13 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  int v5 = (*(uint64_t (**)(void))(**(void **)(*(void *)v2 + 64) + 48))(*(void *)(*(void *)v2 + 64));
  uint64_t Format = PGHelium::makeFormat(v5);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)v2 + 64) + 16))(*(void *)(*(void *)v2 + 64));
  uint64_t v8 = HGRectMake4i(0, 0, 0, 0);
  uint64_t v10 = v9;
  char v11 = HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v11, v8, v10, Format, v7);
  long long v12 = (void *)*((void *)this + 51);
  if (v12 == v11)
  {
    if (v11) {
      (*(void (**)(void *))(*(void *)v11 + 24))(v11);
    }
  }
  else
  {
    if (v12) {
      (*(void (**)(void *))(*(void *)v12 + 24))(v12);
    }
    *((void *)this + 5OZDocument::~OZDocument(this - 1) = v11;
  }
  *((unsigned char *)this + 2176) = 1;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)v16);
}

void sub_1B7BEAF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va, a5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  OZRenderParams::~OZRenderParams((OZRenderParams *)va);
  _Unwind_Resume(a1);
}

void HGLazyPDFBitmapLoader::~HGLazyPDFBitmapLoader(HGLazyPDFBitmapLoader *this)
{
  *(void *)this = &unk_1F113CE58;
  uint64_t v2 = (_OWORD *)((char *)this + 2088);
  long long v3 = (std::__shared_weak_count *)*((void *)this + 262);
  *uint64_t v2 = 0u;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  PCMutex::~PCMutex((PCMutex *)((char *)this + 2104));
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 262);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 260);
  OZRenderParams::~OZRenderParams((HGLazyPDFBitmapLoader *)((char *)this + 656));

  HGBitmapLoader::~HGBitmapLoader(this);
}

{
  void *v1;
  uint64_t vars8;

  HGLazyPDFBitmapLoader::~HGLazyPDFBitmapLoader(this);

  HGObject::operator delete(v1);
}

uint64_t HGLazyPDFBitmapLoader::GetDOD(HGLazyPDFBitmapLoader *this, HGRenderer *a2, int a3, HGRect a4)
{
  if (!a3)
  {
    double v5 = (double)*((int *)this + 122);
    double v6 = (double)*((int *)this + 123);
    double v7 = (double)*((int *)this + 124);
    int v8 = *((_DWORD *)this + 125);
    double v9 = *((double *)this + 78);
    double v10 = v9 * v5;
    double v11 = *((double *)this + 79);
    double v12 = v11 * v6;
    double v13 = *((double *)this + 81);
    double v14 = v13 + v9 * v5 + v11 * v6;
    double v15 = *((double *)this + 66);
    double v16 = v15 * v5;
    double v17 = *((double *)this + 67);
    double v18 = v17 * v6;
    double v19 = *((double *)this + 69);
    double v20 = (v19 + v15 * v5 + v17 * v6) / v14;
    double v21 = *((double *)this + 70);
    double v22 = v21 * v5;
    double v23 = *((double *)this + 71);
    double v24 = v23 * v6;
    double v25 = *((double *)this + 73);
    double v26 = (v25 + v22 + v24) / v14;
    double v27 = v9 * v7;
    double v28 = v13 + v27 + v12;
    double v29 = v15 * v7;
    double v30 = (v19 + v29 + v18) / v28;
    double v31 = v21 * v7;
    double v32 = (v25 + v31 + v24) / v28;
    double v33 = v11 * (double)v8;
    double v34 = v13 + v27 + v33;
    double v35 = v17 * (double)v8;
    double v36 = (v19 + v29 + v35) / v34;
    double v37 = v23 * (double)v8;
    double v38 = (v25 + v31 + v37) / v34;
    double v39 = v13 + v10 + v33;
    double v40 = (v19 + v16 + v35) / v39;
    double v41 = v25 + v22 + v37;
    if (v20 <= v30) {
      double v42 = v20;
    }
    else {
      double v42 = v30;
    }
    double v43 = 0.0;
    if (v20 + 0.0 >= v30) {
      double v44 = v20 + 0.0;
    }
    else {
      double v44 = v30;
    }
    if (v26 <= v32) {
      double v45 = v26;
    }
    else {
      double v45 = v32;
    }
    double v46 = v26 + 0.0;
    if (v26 + 0.0 < v32) {
      double v46 = v32;
    }
    double v47 = v44 - v42;
    double v48 = v41 / v39;
    if (v47 < 0.0 || (double v49 = v46 - v45, v46 - v45 < 0.0))
    {
      double v51 = v38;
      double v53 = 0.0;
      double v50 = v36;
    }
    else
    {
      if (v42 <= v36) {
        double v50 = v42;
      }
      else {
        double v50 = v36;
      }
      if (v42 + v47 >= v36) {
        double v36 = v42 + v47;
      }
      if (v45 <= v38) {
        double v51 = v45;
      }
      else {
        double v51 = v38;
      }
      double v52 = v45 + v49;
      if (v45 + v49 < v38) {
        double v52 = v38;
      }
      double v53 = v36 - v50;
      double v54 = 0.0;
      if (v53 < 0.0 || (double v43 = v52 - v51, v43 < 0.0))
      {
        double v55 = 0.0;
LABEL_41:
        BOOL v4 = (long long *)((char *)this + 504);
        *((_DWORD *)this + 126) = vcvtmd_s64_f64(v40 + 0.0000001);
        *((_DWORD *)this + 127) = vcvtmd_s64_f64(v48 + 0.0000001);
        *((_DWORD *)this + 128) = vcvtpd_s64_f64(v55 + v40);
        *((_DWORD *)this + 129) = vcvtpd_s64_f64(v54 + v48);
        return *(void *)v4;
      }
    }
    if (v50 <= v40) {
      double v56 = v50;
    }
    else {
      double v56 = v40;
    }
    if (v53 + v50 >= v40) {
      double v40 = v53 + v50;
    }
    if (v51 <= v48) {
      double v57 = v51;
    }
    else {
      double v57 = v41 / v39;
    }
    if (v43 + v51 >= v48) {
      double v48 = v43 + v51;
    }
    double v55 = v40 - v56;
    double v54 = v48 - v57;
    double v48 = v57;
    double v40 = v56;
    goto LABEL_41;
  }
  BOOL v4 = &HGRectNull;
  return *(void *)v4;
}

uint64_t HGLazyPDFBitmapLoader::RenderPDF(uint64_t this, HGRenderer *a2)
{
  if (*(unsigned char *)(this + 2176) || !*(void *)(this + 408))
  {
    long long v3 = (OZRenderParams *)(this + 656);
    BOOL v4 = (HGNode *)this;
    OZRenderParams::OZRenderParams((OZRenderParams *)v28, (const OZRenderParams *)(this + 656));
    double v19 = v4;
    unint64_t ROI = HGRenderer::GetROI(a2, v4);
    uint64_t v7 = v6;
    int DoHighQualityResampling = OZRenderParams::getDoHighQualityResampling(v3);
    unint64_t v9 = HIDWORD(ROI);
    long long v10 = *((_OWORD *)v19 + 38);
    if (DoHighQualityResampling) {
      int v11 = 3000;
    }
    else {
      int v11 = 2000;
    }
    long long v24 = *((_OWORD *)v19 + 37);
    long long v25 = v10;
    long long v12 = *((_OWORD *)v19 + 40);
    long long v26 = *((_OWORD *)v19 + 39);
    long long v27 = v12;
    float64x2_t v13 = *((float64x2_t *)v19 + 34);
    float64x2_t v20 = *((float64x2_t *)v19 + 33);
    float64x2_t v21 = v13;
    float64x2_t v14 = *((float64x2_t *)v19 + 36);
    int v15 = v7 - ROI;
    int v16 = HIDWORD(v7) - HIDWORD(ROI);
    float64x2_t v22 = *((float64x2_t *)v19 + 35);
    float64x2_t v23 = v14;
    if ((int)v7 - (int)ROI > v11 || v16 > v11)
    {
      double v17 = (double)v11 / (double)v15;
      if (v17 > 1.0) {
        double v17 = 1.0;
      }
      double v18 = (double)v11 / (double)v16;
      LODWORD(ROI) = (int)(v17 * (double)(int)ROI);
      if (v18 > 1.0) {
        double v18 = 1.0;
      }
      LODWORD(v9) = (int)(v18 * (double)(int)v9);
      int v15 = (int)(v17 * (double)(int)v7) - ROI;
      int v16 = (int)(v18 * (double)SHIDWORD(v7)) - v9;
      if (v17 != 1.0)
      {
        float64x2_t v20 = vmulq_n_f64(v20, v17);
        float64x2_t v21 = vmulq_n_f64(v21, v17);
      }
      if (v18 != 1.0)
      {
        float64x2_t v22 = vmulq_n_f64(v22, v18);
        float64x2_t v23 = vmulq_n_f64(v23, v18);
      }
    }
    OZRenderParams::setWidth((OZRenderParams *)v28, v15);
    OZRenderParams::setHeight((OZRenderParams *)v28, v16);
    OZRenderParams::setImageType((uint64_t)v28, 1);
    v28[360] = 1;
    long long v29 = 0u;
    long long v30 = 0u;
    PCMatrix44Tmpl<double>::leftTranslate(&v20, (float64x2_t)COERCE_UNSIGNED_INT64((double)-(int)ROI), (double)-(int)v9, 0.0);
    this = PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)((char *)v19 + 2080));
    __break(1u);
  }
  return this;
}

void sub_1B7BEB44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t HGLazyPDFBitmapLoader::RenderPage(HGLazyPDFBitmapLoader *this, HGPage *a2)
{
  BOOL v4 = *(HGRenderer **)a2;
  uint64_t v5 = *((void *)this + 51);
  if (!v5 || *((unsigned char *)this + 2176))
  {
    HGLazyPDFBitmapLoader::RenderPDF((uint64_t)this, *(HGRenderer **)a2);
    uint64_t v5 = *((void *)this + 51);
  }
  int v7 = *((_DWORD *)a2 + 4);
  int v6 = *((_DWORD *)a2 + 5);
  int v9 = *((_DWORD *)a2 + 6);
  int v8 = *((_DWORD *)a2 + 7);
  uint64_t v10 = *((void *)a2 + 1);
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
    if (!v5) {
      return *((void *)a2 + 1);
    }
  }
  else
  {
    *((void *)a2 + OZDocument::~OZDocument(this - 1) = HGGPURenderer::CreateBuffer((uint64_t)v4, *((HGRect *)a2 + 1), *((unsigned int *)a2 + 8), 0, (*((_DWORD *)this + 4) >> 12) & 1, *((unsigned __int8 *)a2 + 248));
    if (!v5) {
      return *((void *)a2 + 1);
    }
  }
  unint64_t ROI = HGRenderer::GetROI(v4, (HGNode *)this);
  int v13 = v12;
  unint64_t v15 = HIDWORD(ROI);
  double v16 = (double)(v14 - (int)ROI)
      / (double)(*(unsigned int (**)(void))(**((void **)this + 261) + 16))(*((void *)this + 261));
  double v17 = (double)(v13 - (int)v15)
      / (double)(*(unsigned int (**)(void))(**((void **)this + 261) + 24))(*((void *)this + 261));
  uint64_t v18 = (*(uint64_t (**)(HGRenderer *, unint64_t, unint64_t, uint64_t))(*(void *)v4 + 352))(v4, (int)((double)v7 / v16) | ((unint64_t)(int)((double)v6 / v17) << 32), (int)((double)v9 / v16) | ((unint64_t)(int)((double)v8 / v17) << 32), v5);
  (*(void (**)(HGRenderer *, void))(*(void *)v4 + 144))(v4, *((void *)a2 + 1));
  (*(void (**)(HGRenderer *, void, uint64_t, void, void))(*(void *)v4 + 152))(v4, 0, v18, 0, 0);
  if (fabs(v16 + -1.0) < 0.0000001 && fabs(v17 + -1.0) < 0.0000001) {
    HGGPURenderer::Rect(v4, *((HGRect *)a2 + 1));
  }
  (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
  return *((void *)a2 + 1);
}

uint64_t HGLazyPDFBitmapLoader::RenderPageMetal(HGLazyPDFBitmapLoader *this, HGPage *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  BOOL v4 = *(HGRenderer **)a2;
  uint64_t v5 = (HGBitmap *)*((void *)this + 51);
  if (!v5 || *((unsigned char *)this + 2176))
  {
    HGLazyPDFBitmapLoader::RenderPDF((uint64_t)this, *(HGRenderer **)a2);
    uint64_t v5 = (HGBitmap *)*((void *)this + 51);
  }
  int v7 = *((_DWORD *)a2 + 4);
  int v6 = *((_DWORD *)a2 + 5);
  int v9 = *((_DWORD *)a2 + 6);
  int v8 = *((_DWORD *)a2 + 7);
  uint64_t v10 = *((void *)a2 + 1);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
  }
  else {
    *((void *)a2 + OZDocument::~OZDocument(this - 1) = HGGPURenderer::CreateBuffer((uint64_t)v4, *((HGRect *)a2 + 1), *((unsigned int *)a2 + 8), 1, (*((_DWORD *)this + 4) >> 12) & 1, *((unsigned __int8 *)a2 + 248));
  }
  (*(void (**)(HGRenderer *, void))(*(void *)v4 + 144))(v4, 0);
  if (v5)
  {
    uint64_t ROI = HGRenderer::GetROI(v4, (HGNode *)this);
    double v14 = (double)(v13 - HIDWORD(ROI));
    double v15 = (double)(v12 - (int)ROI)
        / (double)(*(unsigned int (**)(void))(**((void **)this + 261) + 16))(*((void *)this + 261));
    uint64_t v16 = (int)((double)v7 / v15);
    int v37 = v9;
    int v38 = v6;
    double v17 = v14
        / (double)(*(unsigned int (**)(void))(**((void **)this + 261) + 24))(*((void *)this + 261));
    uint64_t v18 = (int)((double)v6 / v17);
    uint64_t v19 = (int)((double)v9 / v15);
    *(void *)&v42.CMTime var0 = v16 | (v18 << 32);
    uint64_t v20 = (int)((double)v8 / v17);
    *(void *)&v42.var2 = v19 | (v20 << 32);
    float64x2_t v21 = HGGPURenderer::ConvertToMetalTexture(*(HGMetalTexture ***)a2, v42, v5);
    float64x2_t v22 = (const void *)(*(uint64_t (**)(HGRenderer *, void, HGLazyPDFBitmapLoader *))(*(void *)v4 + 368))(v4, *((void *)this + 8), this);
    if (v22)
    {
      if (v23)
      {
        long long v24 = (HGMetalTexture ***)v23;
        HGMetalHandler::BindBuffer(v23, *((HGBitmap **)a2 + 1));
        __n128 v25 = HGMetalHandler::BindTexture(v24, 0, v21);
        ((void (*)(HGMetalTexture ***, void, void, __n128))(*v24)[9])(v24, 0, 0, v25);
        ((void (*)(HGMetalTexture ***, void, void))(*v24)[6])(v24, 0, 0);
        ((void (*)(HGMetalTexture ***, void))(*v24)[10])(v24, 0);
        ((void (*)(HGMetalTexture ***))(*v24)[11])(v24);
        double v26 = (double)-(int)HGMetalTexture::GetTextureRect((HGMetalTexture *)v21);
        uint64_t TextureRect = HGMetalTexture::GetTextureRect((HGMetalTexture *)v21);
        ((void (*)(HGMetalTexture ***, double, double, double))(*v24)[12])(v24, v26, (double)-HIDWORD(TextureRect), 0.0);
        long long v28 = xmmword_1B7E734D0;
        long long v29 = xmmword_1B7E734D0;
        *(float *)&long long v29 = (float)v7;
        long long v30 = v29;
        *((float *)&v30 + OZDocument::~OZDocument(this - 1) = (float)v8;
        long long v31 = xmmword_1B7E734D0;
        *(float *)&long long v31 = (float)v37;
        long long v32 = v31;
        *((float *)&v32 + OZDocument::~OZDocument(this - 1) = (float)v8;
        *((float *)&v29 + OZDocument::~OZDocument(this - 1) = (float)v38;
        *((float *)&v31 + OZDocument::~OZDocument(this - 1) = (float)v38;
        v40[0] = v30;
        v40[1] = v29;
        long long v33 = xmmword_1B7E734D0;
        *(float *)&long long v33 = (float)(int)v16;
        long long v34 = v33;
        *((float *)&v34 + OZDocument::~OZDocument(this - 1) = (float)(int)v20;
        v40[2] = v32;
        v40[3] = v31;
        *((float *)&v33 + OZDocument::~OZDocument(this - 1) = (float)(int)v18;
        v39[0] = v34;
        v39[1] = v33;
        *(float *)&long long v28 = (float)(int)v19;
        long long v35 = v28;
        *((float *)&v35 + OZDocument::~OZDocument(this - 1) = (float)(int)v20;
        *((float *)&v28 + OZDocument::~OZDocument(this - 1) = (float)(int)v18;
        v39[2] = v35;
        v39[3] = v28;
        HGMetalHandler::PrimitivesDraw((uint64_t)v24, 4u, v40, 4u, v39);
        (*(void (**)(HGRenderer *, HGMetalTexture ***))(*(void *)v4 + 392))(v4, v24);
      }
    }
    (*(void (**)(HGBitmap *))(*(void *)v21 + 24))(v21);
  }
  return *((void *)a2 + 1);
}

string_t HGLazyPDFBitmapLoader::GetProgram(HGLazyPDFBitmapLoader *this, HGRenderer *a2)
{
  if (HGRenderer::GetTarget(a2, 393216) <= 0x60B0F) {
    return 0;
  }
  HGString::sample2d((HGString *)0x60B10, 0, 0, (HGString *)v7);
  string_t v5 = HGString::c_str(v7, v2, v3, v4);
  HGString::~HGString((HGString *)v7);
  return v5;
}

void sub_1B7BEBC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t HGLazyPDFBitmapLoader::RenderTile(HGLazyPDFBitmapLoader *this, HGTile *a2)
{
  uint32x4_t v4 = (HGRenderer *)HGTile::Renderer(a2);
  PCMutex::lock((PCMutex *)((char *)this + 2104));
  if (!*((void *)this + 51) || *((unsigned char *)this + 2176)) {
    HGLazyPDFBitmapLoader::RenderPDF((uint64_t)this, v4);
  }
  PCMutex::unlock((PCMutex *)((char *)this + 2104));
  uint64_t ROI = HGRenderer::GetROI(v4, (HGNode *)this);
  uint64_t v7 = v6;
  unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 261) + 16))(*((void *)this + 261));
  unsigned int v9 = (*(uint64_t (**)(void))(**((void **)this + 261) + 24))(*((void *)this + 261));
  uint64_t v10 = HGGetTBC();
  int v11 = (HGTransform *)HGObject::operator new(0x90uLL);
  HGTransform::HGTransform(v11);
  (*(void (**)(HGTransform *, double, double))(*(void *)v11 + 144))(v11, 1.0 / ((double)((int)v7 - (int)ROI) / (double)v8), 1.0 / ((double)(HIDWORD(v7) - HIDWORD(ROI)) / (double)v9));
  HGSampler::ReadTile(*((void *)a2 + 42));
  (*(void (**)(HGTransform *))(*(void *)v11 + 24))(v11);
  uint64_t v12 = HGGetTBC();
  int v13 = (*((_DWORD *)a2 + 3) - *((_DWORD *)a2 + 1)) * (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
  double v14 = *(void **)(*((void *)a2 + 42) + 416);
  uint64_t v15 = v14[2];
  uint64_t v16 = v14[3] + v12 - v10;
  v14[6] -= v12 - v10;
  *v14 += *(void *)(*((void *)this + 51) + 56) * v13;
  unsigned int v14[2] = v15 - v13;
  void v14[3] = v16;
  return 0;
}

void sub_1B7BEBE5C(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

double OZImageElement::castShadowMaxScale(OZImageElement *this, const OZRenderParams *a2)
{
  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (Footage && OZFootage::hasAlpha(Footage))
  {
    double v5 = OZElement::castShadowMaxScale((OZElement *)this, a2);
    return v5 + v5;
  }
  else
  {
    return OZElement::castShadowMaxScale((OZElement *)this, a2);
  }
}

uint64_t OZImageElement::wantsColorHeadingVisible(OZImageElement *this)
{
  return 1;
}

uint64_t OZImageElement::getAutomaticConversionType(OZImageElement *this)
{
  Footage = (PMClip **)OZImageElement::getFootage(this);
  if (!Footage) {
    goto LABEL_4;
  }
  uint64_t result = OZFootage::getDynamicRangeType(Footage);
  if (result == 2) {
    return result;
  }
  if (result) {
    return 0;
  }
LABEL_4:

  return OZElement::getAutomaticConversionType((OZElement *)this);
}

uint64_t OZImageElement::prerollBegin(OZImageElement *a1, CMTime *a2, uint64_t a3, uint64_t a4, double a5)
{
  OZSceneNode::prerollBegin((uint64_t)a1, (uint64_t)a2, a3, a4, a5);
  Footage = (OZFootage *)OZImageElement::getFootage(a1);
  if (Footage)
  {
    unsigned int v9 = Footage;
    CMTime v16 = *a2;
    if (!OZImageElement::hasSourceObjectForTime(a1, &v16))
    {
      uint64_t v15 = 0;
      PMFrameRequest::PMFrameRequest((uint64_t)v14, a3);
      uint64_t WorkingColorDescription = (const FxColorDescription *)OZRenderParams::getWorkingColorDescription((OZRenderParams *)a2);
      OZImageElement::calculateFrameRequestSettings(a1, (const OZRenderParams *)a2, WorkingColorDescription, v9, &v15, (PMFrameRequest *)v14, &v13, &v12);
    }
  }
  return 0;
}

void sub_1B7BEC0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,CGColorSpace *a39,CGColorSpace *a40)
{
}

OZFootage *OZImageElement::prerollEnd(OZImageElement *this, CMTime *a2, PMFrameRequest *a3)
{
  OZSceneNode::prerollEnd((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (Footage)
  {
    CMTime v13 = *a2;
    if (!OZImageElement::hasSourceObjectForTime(this, &v13))
    {
      float v12 = 0;
      PMFrameRequest::PMFrameRequest((uint64_t)v11, (uint64_t)a3);
      uint64_t WorkingColorDescription = (const FxColorDescription *)OZRenderParams::getWorkingColorDescription((OZRenderParams *)a2);
      OZImageElement::calculateFrameRequestSettings(this, (const OZRenderParams *)a2, WorkingColorDescription, Footage, &v12, (PMFrameRequest *)v11, &v10, &v9);
    }
    return 0;
  }
  return Footage;
}

void sub_1B7BEC204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CGColorSpace *a33,CGColorSpace *a34)
{
}

OZFootage *OZImageElement::setRate(OZImageElement *this, CMTime *a2, PMFrameRequest *a3, double a4)
{
  OZSceneNode::setRate((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4);
  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (Footage)
  {
    CMTime v14 = *a2;
    if (!OZImageElement::hasSourceObjectForTime(this, &v14))
    {
      CMTime v13 = 0;
      PMFrameRequest::PMFrameRequest((uint64_t)v12, (uint64_t)a3);
      uint64_t WorkingColorDescription = (const FxColorDescription *)OZRenderParams::getWorkingColorDescription((OZRenderParams *)a2);
      OZImageElement::calculateFrameRequestSettings(this, (const OZRenderParams *)a2, WorkingColorDescription, Footage, &v13, (PMFrameRequest *)v12, &v11, &v10);
    }
    return 0;
  }
  return Footage;
}

void sub_1B7BEC398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,CGColorSpace *a39,CGColorSpace *a40)
{
}

void OZImageElement::remapTokens(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = a1;
  OZSceneNode::remapTokens(a1, a2, (uint64_t)a3, a4);
  Footage = (_anonymous_namespace_ *)OZImageElement::getFootage((OZImageElement *)v5);
  if (Footage)
  {
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v5 + 21496), MEMORY[0x1E4F1FA48], 0.0);
    if (*(unsigned char *)(a2 + 513)) {
      int v7 = ValueAsInt;
    }
    else {
      int v7 = 0;
    }
    uint64_t v67 = v5;
    switch(v7)
    {
      case 0:
        double v40 = (void *)*a3;
        double v39 = (void *)a3[1];
        if ((void *)*a3 != v39)
        {
          do
          {
            uint64_t v41 = (CMTime *)v40[3];
            if (v41 != (CMTime *)v40[4])
            {
              do
              {
                long long v42 = *(_OWORD *)&v41->value;
                v74.CMTimeEpoch epoch = v41->epoch;
                *(_OWORD *)&v74.CMTimeValue value = v42;
                OZImageElement::globalToFootageTime((OZImageElement *)v5, &v74, (uint64_t)&v75);
                long long v43 = *(_OWORD *)&v75.value;
                v41->CMTimeEpoch epoch = v75.epoch;
                *(_OWORD *)&v41->CMTimeValue value = v43;
                OZFootage::getFootageTime(Footage, v41, &v75);
                long long v44 = *(_OWORD *)&v75.value;
                v41->CMTimeEpoch epoch = v75.epoch;
                *(_OWORD *)&v41->CMTimeValue value = v44;
                ++v41;
              }
              while (v41 != (CMTime *)v40[4]);
              double v39 = (void *)a3[1];
            }
            v40 += 6;
          }
          while (v40 != v39);
        }
        return;
      case 1:
      case 3:
        unsigned int v8 = (void *)*a3;
        if (*a3 == a3[1]) {
          return;
        }
        break;
      case 2:
        memset(&v75, 0, sizeof(v75));
        double v45 = (void *)*a3;
        if (*a3 != a3[1])
        {
          do
          {
            long long v46 = 0uLL;
            memset(&v73, 0, sizeof(v73));
            double v47 = (CMTime *)v45[3];
            long long v66 = (CMTime *)v45[4];
            if (v47 == v66)
            {
              CMTimeEpoch epoch = 0;
            }
            else
            {
              uint64_t v64 = v45;
              do
              {
                getMotionBlurTimes(v47, *(_DWORD *)(a2 + 500), *(unsigned __int8 *)(a2 + 496), (OZImageElement *)v5, Footage, *(void *)(v5 + 968), (char **)&v75, *(double *)(a2 + 504));
                CMTimeValue value = v75.value;
                uint64_t v48 = *(void *)&v75.timescale;
                if (v75.value != *(void *)&v75.timescale)
                {
                  unint64_t v50 = *(void *)&v73.timescale;
                  do
                  {
                    if (v50 >= v73.epoch)
                    {
                      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - v73.value) >> 3);
                      unint64_t v53 = v52 + 1;
                      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
                        std::vector<double>::__throw_length_error[abi:ne180100]();
                      }
                      if (0x5555555555555556 * ((v73.epoch - v73.value) >> 3) > v53) {
                        unint64_t v53 = 0x5555555555555556 * ((v73.epoch - v73.value) >> 3);
                      }
                      if (0xAAAAAAAAAAAAAAABLL * ((v73.epoch - v73.value) >> 3) >= 0x555555555555555) {
                        unint64_t v54 = 0xAAAAAAAAAAAAAAALL;
                      }
                      else {
                        unint64_t v54 = v53;
                      }
                      if (v54) {
                        double v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v73.epoch, v54);
                      }
                      else {
                        double v55 = 0;
                      }
                      double v56 = &v55[24 * v52];
                      long long v57 = *(_OWORD *)value;
                      *((void *)v56 + 2) = *(void *)(value + 16);
                      *(_OWORD *)double v56 = v57;
                      CMTimeValue v59 = v73.value;
                      FxColorDescription v58 = *(char **)&v73.timescale;
                      CMTimeValue v60 = (CMTimeValue)v56;
                      if (*(void *)&v73.timescale != v73.value)
                      {
                        do
                        {
                          long long v61 = *(_OWORD *)(v58 - 24);
                          *(void *)(v60 - 8) = *((void *)v58 - 1);
                          *(_OWORD *)(v60 - 24) = v61;
                          v60 -= 24;
                          v58 -= 24;
                        }
                        while (v58 != (char *)v59);
                        FxColorDescription v58 = (char *)v73.value;
                      }
                      unint64_t v50 = (unint64_t)(v56 + 24);
                      v73.CMTimeValue value = v60;
                      *(void *)&v73.CMTimeScale timescale = v56 + 24;
                      v73.CMTimeEpoch epoch = (CMTimeEpoch)&v55[24 * v54];
                      if (v58) {
                        operator delete(v58);
                      }
                    }
                    else
                    {
                      long long v51 = *(_OWORD *)value;
                      *(void *)(v50 + 16) = *(void *)(value + 16);
                      *(_OWORD *)unint64_t v50 = v51;
                      v50 += 24;
                    }
                    *(void *)&v73.CMTimeScale timescale = v50;
                    value += 32;
                  }
                  while (value != v48);
                }
                ++v47;
                uint64_t v5 = v67;
              }
              while (v47 != v66);
              double v45 = v64;
              double v47 = (CMTime *)v64[3];
              long long v46 = *(_OWORD *)&v73.value;
              CMTimeEpoch epoch = v73.epoch;
            }
            *(_OWORD *)(v45 + 3) = v46;
            CMTimeEpoch v63 = v45[5];
            v45[5] = epoch;
            v73.CMTimeValue value = (CMTimeValue)v47;
            v73.CMTimeEpoch epoch = v63;
            if (v47)
            {
              *(void *)&v73.CMTimeScale timescale = v47;
              operator delete(v47);
            }
            v45 += 6;
          }
          while (v45 != (void *)a3[1]);
          if (v75.value)
          {
            *(void *)&v75.CMTimeScale timescale = v75.value;
            operator delete((void *)v75.value);
          }
        }
        return;
      default:
        return;
    }
    do
    {
      memset(&v75, 0, sizeof(v75));
      float v10 = (void *)v8[3];
      float v9 = (void *)v8[4];
      if (v10 == v9)
      {
        CMTimeEpoch v37 = 0;
        unint64_t v16 = 0;
        CMTimeValue v36 = 0;
      }
      else
      {
        do
        {
          v71.CMTimeValue value = 0;
          long long v11 = *(_OWORD *)v10;
          v69.CMTimeEpoch epoch = v10[2];
          *(_OWORD *)&v69.CMTimeValue value = v11;
          OZImageElement::globalToFootageTime((OZImageElement *)v5, &v69, (uint64_t)&v70);
          CMTime v14 = *(_OWORD **)&v75.timescale;
          if (*(void *)&v75.timescale >= v75.epoch)
          {
            unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)&v75.timescale - v75.value) >> 3);
            unint64_t v18 = v17 + 1;
            if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_92;
            }
            if (0x5555555555555556 * ((v75.epoch - v75.value) >> 3) > v18) {
              unint64_t v18 = 0x5555555555555556 * ((v75.epoch - v75.value) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v75.epoch - v75.value) >> 3) >= 0x555555555555555) {
              unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v19 = v18;
            }
            if (v19) {
              uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v75.epoch, v19);
            }
            else {
              uint64_t v20 = 0;
            }
            float64x2_t v21 = &v20[24 * v17];
            long long v22 = *(_OWORD *)&v73.value;
            *((void *)v21 + 2) = v73.epoch;
            *(_OWORD *)float64x2_t v21 = v22;
            CMTimeValue v24 = v75.value;
            float64x2_t v23 = *(char **)&v75.timescale;
            CMTimeValue v25 = (CMTimeValue)v21;
            if (*(void *)&v75.timescale == v75.value)
            {
              uint64_t v5 = v67;
            }
            else
            {
              uint64_t v5 = v67;
              do
              {
                long long v26 = *(_OWORD *)(v23 - 24);
                *(void *)(v25 - 8) = *((void *)v23 - 1);
                *(_OWORD *)(v25 - 24) = v26;
                v25 -= 24;
                v23 -= 24;
              }
              while (v23 != (char *)v24);
              float64x2_t v23 = (char *)v75.value;
            }
            unint64_t v16 = (unint64_t)(v21 + 24);
            v75.CMTimeValue value = v25;
            *(void *)&v75.CMTimeScale timescale = v21 + 24;
            v75.CMTimeEpoch epoch = (CMTimeEpoch)&v20[24 * v19];
            if (v23) {
              operator delete(v23);
            }
          }
          else
          {
            long long v15 = *(_OWORD *)&v73.value;
            *(void *)(*(void *)&v75.timescale + 16) = v73.epoch;
            *CMTime v14 = v15;
            unint64_t v16 = (unint64_t)v14 + 24;
          }
          *(void *)&v75.CMTimeScale timescale = v16;
          if (*(double *)&v71.value <= -0.0000001 || *(double *)&v71.value >= 0.0000001)
          {
            if (v16 >= v75.epoch)
            {
              unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v75.value) >> 3);
              unint64_t v28 = v27 + 1;
              if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_92:
              }
                std::vector<double>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v75.epoch - v75.value) >> 3) > v28) {
                unint64_t v28 = 0x5555555555555556 * ((v75.epoch - v75.value) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v75.epoch - v75.value) >> 3) >= 0x555555555555555) {
                unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v29 = v28;
              }
              if (v29) {
                long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)&v75.epoch, v29);
              }
              else {
                long long v30 = 0;
              }
              long long v31 = &v30[24 * v27];
              *(_OWORD *)long long v31 = *(_OWORD *)&v71.timescale;
              *((void *)v31 + 2) = v72;
              CMTimeValue v33 = v75.value;
              long long v32 = *(char **)&v75.timescale;
              CMTimeValue v34 = (CMTimeValue)v31;
              if (*(void *)&v75.timescale == v75.value)
              {
                uint64_t v5 = v67;
              }
              else
              {
                uint64_t v5 = v67;
                do
                {
                  long long v35 = *(_OWORD *)(v32 - 24);
                  *(void *)(v34 - 8) = *((void *)v32 - 1);
                  *(_OWORD *)(v34 - 24) = v35;
                  v34 -= 24;
                  v32 -= 24;
                }
                while (v32 != (char *)v33);
                long long v32 = (char *)v75.value;
              }
              unint64_t v16 = (unint64_t)(v31 + 24);
              v75.CMTimeValue value = v34;
              *(void *)&v75.CMTimeScale timescale = v31 + 24;
              v75.CMTimeEpoch epoch = (CMTimeEpoch)&v30[24 * v29];
              if (v32) {
                operator delete(v32);
              }
            }
            else
            {
              *(_OWORD *)unint64_t v16 = *(_OWORD *)&v71.timescale;
              *(void *)(v16 + 16) = v72;
              v16 += 24;
            }
            *(void *)&v75.CMTimeScale timescale = v16;
          }
          v10 += 3;
        }
        while (v10 != v9);
        float v10 = (void *)v8[3];
        CMTimeValue v36 = v75.value;
        CMTimeEpoch v37 = v75.epoch;
      }
      v8[3] = v36;
      v8[4] = v16;
      CMTimeEpoch v38 = v8[5];
      v8[5] = v37;
      v75.CMTimeValue value = (CMTimeValue)v10;
      v75.CMTimeEpoch epoch = v38;
      if (v10)
      {
        *(void *)&v75.CMTimeScale timescale = v10;
        operator delete(v10);
      }
      v8 += 6;
    }
    while (v8 != (void *)a3[1]);
  }
}

void sub_1B7BEC9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  unint64_t v28 = *(void **)(v26 - 136);
  if (v28)
  {
    *(void *)(v26 - 128) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZImageElement::hintTokensWillImage(OZImageElement *a1, OZRenderParams *a2, uint64_t a3, uint64_t a4)
{
  OZSceneNode::hintTokensWillImage((uint64_t)a1, (uint64_t)a2, a3, a4);
  Footage = (OZFootage *)OZImageElement::getFootage(a1);
  if (Footage)
  {
    CMTime v13 = 0;
    PMFrameRequest::PMFrameRequest((uint64_t)v12, a4);
    uint64_t WorkingColorDescription = (const FxColorDescription *)OZRenderParams::getWorkingColorDescription(a2);
    OZImageElement::calculateFrameRequestSettings(a1, a2, WorkingColorDescription, Footage, &v13, (PMFrameRequest *)v12, &v11, &v10);
  }
  return 0;
}

void sub_1B7BECBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,CGColorSpace *a36,CGColorSpace *a37)
{
  *(void *)(v37 - 56) = &a10;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  PCCFRef<CGColorSpace *>::~PCCFRef(&a37);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a36);
  _Unwind_Resume(a1);
}

OZFootage *OZImageElement::getTokensImage(OZImageElement *a1, OZRenderParams *a2, uint64_t a3, uint64_t a4)
{
  OZSceneNode::getTokensImage((uint64_t)a1, (uint64_t)a2, a3, a4);
  Footage = (OZFootage *)OZImageElement::getFootage(a1);
  unsigned int v8 = Footage;
  if (Footage)
  {
    if (*((void *)Footage + 1009))
    {
      CMTime v14 = 0;
      PMFrameRequest::PMFrameRequest((uint64_t)v13, a4);
      uint64_t WorkingColorDescription = (const FxColorDescription *)OZRenderParams::getWorkingColorDescription(a2);
      OZImageElement::calculateFrameRequestSettings(a1, a2, WorkingColorDescription, v8, &v14, (PMFrameRequest *)v13, &v12, &v11);
    }
    return 0;
  }
  return v8;
}

void sub_1B7BECD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,CGColorSpace *a36,CGColorSpace *a37)
{
  *(void *)(v37 - 56) = &a10;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  PCCFRef<CGColorSpace *>::~PCCFRef(&a37);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a36);
  _Unwind_Resume(a1);
}

void *OZImageElement::pruneTokensAtTime(OZImageElement *this, CMTime *a2, const char *a3)
{
  CMTime v9 = *a2;
  OZSceneNode::pruneTokensAtTime((uint64_t)this, &v9, a3);
  uint64_t result = OZImageElement::getFootage(this);
  if (result)
  {
    long long v7 = *(_OWORD *)&a2->value;
    CMTimeEpoch epoch = a2->epoch;
    return (void *)(*(uint64_t (**)(void *, long long *, const char *))(*(void *)result + 160))(result, &v7, a3);
  }
  return result;
}

void *OZImageElement::pruneTokensExceptAtTime(OZImageElement *this, CMTime *a2, const char *a3)
{
  CMTime v9 = *a2;
  OZSceneNode::pruneTokensExceptAtTime((uint64_t)this, &v9, a3);
  uint64_t result = OZImageElement::getFootage(this);
  if (result)
  {
    long long v7 = *(_OWORD *)&a2->value;
    CMTimeEpoch epoch = a2->epoch;
    return (void *)(*(uint64_t (**)(void *, long long *, const char *))(*(void *)result + 168))(result, &v7, a3);
  }
  return result;
}

void *OZImageElement::pruneAllTokens(OZImageElement *this, const char *a2)
{
  OZSceneNode::pruneAllTokens((uint64_t)this, a2);
  uint64_t result = OZImageElement::getFootage(this);
  if (result)
  {
    uint32x4_t v4 = *(uint64_t (**)(void))(*(void *)result + 176);
    return (void *)v4();
  }
  return result;
}

void OZPDFRender::~OZPDFRender(OZPDFRender *this)
{
  *(void *)this = &unk_1F113CC38;
  double v2 = (OZChannelBase *)((char *)this + 1440);
  *((void *)this + 180) = &unk_1F113CD30;
  *((void *)this + 182) = &unk_1F113CDF8;
  OZRenderParams::~OZRenderParams((OZPDFRender *)((char *)this + 16));
  OZChannelBase::setRangeName(v2, (const PCString *)&off_1F113CE28);
  *((void *)this + 182) = &unk_1F1199AC8;
  *((unsigned char *)this + 1472) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 183);
}

{
  OZChannelBase *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F113CC38;
  double v2 = (OZChannelBase *)((char *)this + 1440);
  *((void *)this + 180) = &unk_1F113CD30;
  *((void *)this + 182) = &unk_1F113CDF8;
  OZRenderParams::~OZRenderParams((OZPDFRender *)((char *)this + 16));
  OZChannelBase::setRangeName(v2, (const PCString *)&off_1F113CE28);
  *((void *)this + 182) = &unk_1F1199AC8;
  *((unsigned char *)this + 1472) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 183);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'OZPDFRender::~OZPDFRender(OZPDFRender *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 32);
  *(void *)uint64_t v1 = &unk_1F113CC38;
  *((void *)v1 + 180) = &unk_1F113CD30;
  *((void *)v1 + 182) = &unk_1F113CDF8;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1440), (const PCString *)&off_1F113CE28);
  *((void *)v1 + 182) = &unk_1F1199AC8;
  v1[1472] = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 183);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 32);
  *(void *)uint64_t v1 = &unk_1F113CC38;
  *((void *)v1 + 180) = &unk_1F113CD30;
  *((void *)v1 + 182) = &unk_1F113CDF8;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1440), (const PCString *)&off_1F113CE28);
  *((void *)v1 + 182) = &unk_1F1199AC8;
  v1[1472] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 183);

  JUMPOUT(0x1BA9BFBA0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F113CC38;
  *((void *)v1 + 180) = &unk_1F113CD30;
  *((void *)v1 + 182) = &unk_1F113CDF8;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1440), (const PCString *)&off_1F113CE28);
  *((void *)v1 + 182) = &unk_1F1199AC8;
  v1[1472] = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 183);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F113CC38;
  *((void *)v1 + 180) = &unk_1F113CD30;
  *((void *)v1 + 182) = &unk_1F113CDF8;
  OZRenderParams::~OZRenderParams((OZRenderParams *)(v1 + 16));
  OZChannelBase::setRangeName((OZChannelBase *)(v1 + 1440), (const PCString *)&off_1F113CE28);
  *((void *)v1 + 182) = &unk_1F1199AC8;
  v1[1472] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 183);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZImageElement::OZImageElement_pageNumberImpl::getInstance(OZImageElement::OZImageElement_pageNumberImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_pageNumberImpl::getInstance(void)::OZImageElement_pageNumberImpl_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_pageNumberImpl::getInstance(void)::OZImageElement_pageNumberImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_pageNumberImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_pageNumberImpl::_OZImageElement_pageNumber;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_pageNumberImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_pageNumberImpl::_OZImageElement_pageNumber) {
    operator new();
  }
}

void sub_1B7BED590(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZImageElement::OZImageElement_pageNumberImpl::OZImageElement_pageNumberImpl(OZChannelUint32 *this)
{
}

void sub_1B7BED660(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_pageNumberInfo::getInstance(OZImageElement::OZImageElement_pageNumberInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_pageNumberInfo::getInstance(void)::OZImageElement_pageNumberInfo_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    double v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_pageNumberInfo::getInstance(void)::OZImageElement_pageNumberInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_pageNumberInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_pageNumberInfo::_OZImageElement_pageNumberInfo;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_pageNumberInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_pageNumberInfo::_OZImageElement_pageNumberInfo) {
    operator new();
  }
}

void sub_1B7BED73C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_pageNumberInfo *OZImageElement::OZImageElement_pageNumberInfo::OZImageElement_pageNumberInfo(OZImageElement::OZImageElement_pageNumberInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 1.0, 1.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_pageNumberInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F113D368;
  *((void *)this + 10) = &unk_1F113D388;
  return this;
}

void sub_1B7BED808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_timeScaleImpl::getInstance(OZImageElement::OZImageElement_timeScaleImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_timeScaleImpl::getInstance(void)::OZImageElement_timeScaleImpl_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_timeScaleImpl::getInstance(void)::OZImageElement_timeScaleImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_timeScaleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_timeScaleImpl::_OZImageElement_timeScale;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_timeScaleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_timeScaleImpl::_OZImageElement_timeScale) {
    operator new();
  }
}

void sub_1B7BED8E4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZImageElement::OZImageElement_timeScaleImpl::OZImageElement_timeScaleImpl(OZImageElement::OZImageElement_timeScaleImpl *this)
{
}

void sub_1B7BED9BC(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_retimeFrameCacheImpl::getInstance(OZImageElement::OZImageElement_retimeFrameCacheImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_retimeFrameCacheImpl::getInstance(void)::OZImageElement_retimeFrameCacheImpl_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_retimeFrameCacheImpl::getInstance(void)::OZImageElement_retimeFrameCacheImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_retimeFrameCacheImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_retimeFrameCacheImpl::_OZImageElement_retimeFrameCache;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_retimeFrameCacheImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_retimeFrameCacheImpl::_OZImageElement_retimeFrameCache) {
    operator new();
  }
}

void sub_1B7BEDA98(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZImageElement::OZImageElement_retimeFrameCacheImpl::OZImageElement_retimeFrameCacheImpl(OZImageElement::OZImageElement_retimeFrameCacheImpl *this)
{
}

void sub_1B7BEDB70(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_loopDurationImpl::getInstance(OZImageElement::OZImageElement_loopDurationImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_loopDurationImpl::getInstance(void)::OZImageElement_loopDurationImpl_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_loopDurationImpl::getInstance(void)::OZImageElement_loopDurationImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_loopDurationImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_loopDurationImpl::_OZImageElement_loopDuration;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_loopDurationImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_loopDurationImpl::_OZImageElement_loopDuration) {
    operator new();
  }
}

void sub_1B7BEDC4C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZImageElement::OZImageElement_loopDurationImpl::OZImageElement_loopDurationImpl(OZImageElement::OZImageElement_loopDurationImpl *this)
{
}

void sub_1B7BEDD20(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_layerImpl::getInstance(OZImageElement::OZImageElement_layerImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_layerImpl::getInstance(void)::OZImageElement_layerImpl_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_layerImpl::getInstance(void)::OZImageElement_layerImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_layerImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_layerImpl::_OZImageElement_layer;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_layerImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_layerImpl::_OZImageElement_layer) {
    operator new();
  }
}

void sub_1B7BEDDFC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZImageElement::OZImageElement_layerImpl::OZImageElement_layerImpl(OZImageElement::OZImageElement_layerImpl *this)
{
}

void sub_1B7BEDECC(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_layerInfo::getInstance(OZImageElement::OZImageElement_layerInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_layerInfo::getInstance(void)::OZImageElement_layerInfo_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_layerInfo::getInstance(void)::OZImageElement_layerInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_layerInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_layerInfo::_OZImageElement_layerInfo;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_layerInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_layerInfo::_OZImageElement_layerInfo) {
    operator new();
  }
}

void sub_1B7BEDFA8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_layerInfo *OZImageElement::OZImageElement_layerInfo::OZImageElement_layerInfo(OZImageElement::OZImageElement_layerInfo *this)
{
  PCString::PCString(&v3, "%");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 0.0, 0.01, 0.0001, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_layerInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F113D5C0;
  *((void *)this + 10) = &unk_1F113D5E0;
  return this;
}

void sub_1B7BEE07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropInputIDImpl::getInstance(OZImageElement::OZImageElement_dropInputIDImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_dropInputIDImpl::getInstance(void)::OZImageElement_dropInputIDImpl_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_dropInputIDImpl::getInstance(void)::OZImageElement_dropInputIDImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropInputIDImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropInputIDImpl::_OZImageElement_dropInputID;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropInputIDImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_dropInputIDImpl::_OZImageElement_dropInputID) {
    operator new();
  }
}

void sub_1B7BEE158(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZImageElement::OZImageElement_dropInputIDImpl::OZImageElement_dropInputIDImpl(OZChannelUint32 *this)
{
}

void sub_1B7BEE22C(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropInputIDInfo::getInstance(OZImageElement::OZImageElement_dropInputIDInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_dropInputIDInfo::getInstance(void)::OZImageElement_dropInputIDInfo_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_dropInputIDInfo::getInstance(void)::OZImageElement_dropInputIDInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropInputIDInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropInputIDInfo::_OZImageElement_dropInputIDInfo;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropInputIDInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_dropInputIDInfo::_OZImageElement_dropInputIDInfo) {
    operator new();
  }
}

void sub_1B7BEE308(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_dropInputIDInfo *OZImageElement::OZImageElement_dropInputIDInfo::OZImageElement_dropInputIDInfo(OZImageElement::OZImageElement_dropInputIDInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 7.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_dropInputIDInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F113D6B0;
  *((void *)this + 10) = &unk_1F113D6D0;
  return this;
}

void sub_1B7BEE3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropPanImpl::getInstance(OZImageElement::OZImageElement_dropPanImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_dropPanImpl::getInstance(void)::OZImageElement_dropPanImpl_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_dropPanImpl::getInstance(void)::OZImageElement_dropPanImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropPanImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropPanImpl::_OZImageElement_dropPan;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropPanImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_dropPanImpl::_OZImageElement_dropPan) {
    operator new();
  }
}

void sub_1B7BEE4B0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZImageElement::OZImageElement_dropPanImpl::OZImageElement_dropPanImpl(OZImageElement::OZImageElement_dropPanImpl *this)
{
}

void sub_1B7BEE588(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropPanInfo::getInstance(OZImageElement::OZImageElement_dropPanInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_dropPanInfo::getInstance(void)::OZImageElement_dropPanInfo_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_dropPanInfo::getInstance(void)::OZImageElement_dropPanInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropPanInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropPanInfo::_OZImageElement_dropPanInfo;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropPanInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_dropPanInfo::_OZImageElement_dropPanInfo) {
    operator new();
  }
}

void sub_1B7BEE664(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_dropPanInfo *OZImageElement::OZImageElement_dropPanInfo::OZImageElement_dropPanInfo(OZImageElement::OZImageElement_dropPanInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -500.0, 500.0, 5.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_dropPanInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F113D7A0;
  *((void *)this + 10) = &unk_1F113D7C0;
  return this;
}

void sub_1B7BEE738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropScaleImpl::getInstance(OZImageElement::OZImageElement_dropScaleImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_dropScaleImpl::getInstance(void)::OZImageElement_dropScaleImpl_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_dropScaleImpl::getInstance(void)::OZImageElement_dropScaleImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropScaleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropScaleImpl::_OZImageElement_dropScale;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropScaleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_dropScaleImpl::_OZImageElement_dropScale) {
    operator new();
  }
}

void sub_1B7BEE814(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZImageElement::OZImageElement_dropScaleImpl::OZImageElement_dropScaleImpl(OZImageElement::OZImageElement_dropScaleImpl *this)
{
}

void sub_1B7BEE8EC(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropFillOpaqueImpl::getInstance(OZImageElement::OZImageElement_dropFillOpaqueImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_dropFillOpaqueImpl::getInstance(void)::OZImageElement_dropFillOpaqueImpl_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_dropFillOpaqueImpl::getInstance(void)::OZImageElement_dropFillOpaqueImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropFillOpaqueImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropFillOpaqueImpl::_OZImageElement_dropFillOpaque;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropFillOpaqueImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_dropFillOpaqueImpl::_OZImageElement_dropFillOpaque) {
    operator new();
  }
}

void sub_1B7BEE9C8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZImageElement::OZImageElement_dropFillOpaqueImpl::OZImageElement_dropFillOpaqueImpl(OZChannelBool *this)
{
}

void sub_1B7BEEA98(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropWidthImpl::getInstance(OZImageElement::OZImageElement_dropWidthImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_dropWidthImpl::getInstance(void)::OZImageElement_dropWidthImpl_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_dropWidthImpl::getInstance(void)::OZImageElement_dropWidthImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropWidthImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropWidthImpl::_OZImageElement_dropWidth;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropWidthImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_dropWidthImpl::_OZImageElement_dropWidth) {
    operator new();
  }
}

void sub_1B7BEEB74(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZImageElement::OZImageElement_dropWidthImpl::OZImageElement_dropWidthImpl(OZChannelUint32 *this)
{
}

void sub_1B7BEEC48(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropWidthInfo::getInstance(OZImageElement::OZImageElement_dropWidthInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_dropWidthInfo::getInstance(void)::OZImageElement_dropWidthInfo_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_dropWidthInfo::getInstance(void)::OZImageElement_dropWidthInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropWidthInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropWidthInfo::_OZImageElement_dropWidthInfo;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropWidthInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_dropWidthInfo::_OZImageElement_dropWidthInfo) {
    operator new();
  }
}

void sub_1B7BEED24(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_dropWidthInfo *OZImageElement::OZImageElement_dropWidthInfo::OZImageElement_dropWidthInfo(OZImageElement::OZImageElement_dropWidthInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 1.0, 4294967300.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_dropWidthInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F113D980;
  *((void *)this + 10) = &unk_1F113D9A0;
  return this;
}

void sub_1B7BEEDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropHeightImpl::getInstance(OZImageElement::OZImageElement_dropHeightImpl *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_dropHeightImpl::getInstance(void)::OZImageElement_dropHeightImpl_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_dropHeightImpl::getInstance(void)::OZImageElement_dropHeightImpl_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropHeightImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropHeightImpl::_OZImageElement_dropHeight;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropHeightImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_dropHeightImpl::_OZImageElement_dropHeight) {
    operator new();
  }
}

void sub_1B7BEEED0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZImageElement::OZImageElement_dropHeightImpl::OZImageElement_dropHeightImpl(OZChannelUint32 *this)
{
}

void sub_1B7BEEFA4(_Unwind_Exception *a1)
{
  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::OZImageElement_dropHeightInfo::getInstance(OZImageElement::OZImageElement_dropHeightInfo *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement::OZImageElement_dropHeightInfo::getInstance(void)::OZImageElement_dropHeightInfo_once, memory_order_acquire) != -1)
  {
    uint32x4_t v4 = &v2;
    PCString v3 = &v4;
    std::__call_once(&OZImageElement::OZImageElement_dropHeightInfo::getInstance(void)::OZImageElement_dropHeightInfo_once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement::OZImageElement_dropHeightInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement::OZImageElement_dropHeightInfo::_OZImageElement_dropHeightInfo;
}

void std::__call_once_param<std::tuple<OZImageElement::OZImageElement_dropHeightInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  if (!OZImageElement::OZImageElement_dropHeightInfo::_OZImageElement_dropHeightInfo) {
    operator new();
  }
}

void sub_1B7BEF080(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

OZImageElement::OZImageElement_dropHeightInfo *OZImageElement::OZImageElement_dropHeightInfo::OZImageElement_dropHeightInfo(OZImageElement::OZImageElement_dropHeightInfo *this)
{
  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 1.0, 4294967300.0, 1.0, 1.0, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((OZImageElement::OZImageElement_dropHeightInfo *)((char *)this + 80), 100);
  *(void *)this = &unk_1F113DA70;
  *((void *)this + 10) = &unk_1F113DA90;
  return this;
}

void sub_1B7BEF150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

CGColorSpace **PCGetColorInColorSpace<unsigned char,unsigned char>(CGColorSpace *a1, unsigned int a2, CGColorSpace *a3, unsigned int a4, CGColorSpace *a5, unsigned char *a6, unsigned char *a7, unsigned char *a8)
{
  unsigned int v13 = a3;
  uint64_t result = (CGColorSpace **)PCColorSpaceHandle::isSameColorSpace(a1, a5, a3);
  if (result)
  {
    *a6 = a2;
    *a7 = v13;
    *a8 = a4;
  }
  else
  {
    PCColor::PCColor(&v28, (float)a2 / 255.0, (float)v13 / 255.0, (float)a4 / 255.0, a1);
    uint64_t v27 = 0;
    float v26 = 0.0;
    PCColor::getRGB(&v28, (float *)&v27 + 1, (float *)&v27, &v26, a5);
    int v17 = vcvtmd_s64_f64((float)(*((float *)&v27 + 1) * 255.0) + 0.5 + 0.0000001);
    float v18 = (float)v17;
    if ((float)v17 > 255.0) {
      float v18 = 255.0;
    }
    if (v17 >= 0) {
      char v19 = (int)v18;
    }
    else {
      char v19 = 0;
    }
    *a6 = v19;
    int v20 = vcvtmd_s64_f64((float)(*(float *)&v27 * 255.0) + 0.5 + 0.0000001);
    float v21 = (float)v20;
    if ((float)v20 > 255.0) {
      float v21 = 255.0;
    }
    if (v20 >= 0) {
      char v22 = (int)v21;
    }
    else {
      char v22 = 0;
    }
    *a7 = v22;
    int v23 = vcvtmd_s64_f64((float)(v26 * 255.0) + 0.5 + 0.0000001);
    float v24 = (float)v23;
    if ((float)v23 > 255.0) {
      float v24 = 255.0;
    }
    if (v23 >= 0) {
      char v25 = (int)v24;
    }
    else {
      char v25 = 0;
    }
    *a8 = v25;
    return PCCFRef<CGColorSpace *>::~PCCFRef(&v28.var1._obj);
  }
  return result;
}

void sub_1B7BEF2F4(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 48));
  _Unwind_Resume(a1);
}

void std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7BEF388(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>> *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t PMFrameRequest::PMFrameRequest(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v4;
  long long v5 = *(_OWORD *)(a2 + 120);
  long long v6 = *(_OWORD *)(a2 + 136);
  long long v7 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 165) = *(void *)(a2 + 165);
  *(_OWORD *)(a1 + 152) = v7;
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a1 + 120) = v5;
  unsigned int v8 = *(CGColorSpace **)(a2 + 176);
  *(void *)(a1 + 176) = v8;
  if (v8) {
    PCCFRefTraits<CGColorSpace *>::retain(v8);
  }
  CMTime v9 = *(CGColorSpace **)(a2 + 184);
  *(void *)(a1 + 184) = v9;
  if (v9) {
    PCCFRefTraits<CGColorSpace *>::retain(v9);
  }
  long long v10 = *(_OWORD *)(a2 + 192);
  long long v11 = *(_OWORD *)(a2 + 208);
  long long v12 = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 192) = v10;
  return a1;
}

void sub_1B7BEF500(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

void OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::~RetimingExaminerTemplate(OZRetimingUtil::RetimingExaminer *a1)
{
  OZRetimingUtil::RetimingExaminer::~RetimingExaminer(a1);

  JUMPOUT(0x1BA9BFBA0);
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getTimingGroupChannel(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (v3) {
      return v3 + 18264;
    }
    else {
      return 0;
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getTimeScaleChannel(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      PCString v3 = result;
      if (OZImageElement::shouldHideRetiming((OZImageElement *)result)) {
        return 0;
      }
      else {
        return v3 + 20632;
      }
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getTimeReverseChannel(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      PCString v3 = result;
      if (OZImageElement::shouldHideRetiming((OZImageElement *)result)) {
        return 0;
      }
      else {
        return v3 + 20784;
      }
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getTimeRemapChannel(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      PCString v3 = result;
      if (OZImageElement::shouldHideRetiming((OZImageElement *)result)) {
        return 0;
      }
      else {
        return v3 + 20936;
      }
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getRetimeFrameChannel(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      PCString v3 = result;
      if (OZImageElement::shouldHideRetiming((OZImageElement *)result)) {
        return 0;
      }
      else {
        return v3 + 21192;
      }
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getRetimeFrameCacheChannel(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      PCString v3 = result;
      if (OZImageElement::shouldHideRetiming((OZImageElement *)result)) {
        return 0;
      }
      else {
        return v3 + 21344;
      }
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getEndConditionChannel(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      PCString v3 = result;
      if (OZImageElement::shouldHideRetiming((OZImageElement *)result)) {
        return 0;
      }
      else {
        return v3 + 21752;
      }
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getLoopDurationChannel(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      PCString v3 = result;
      if (OZImageElement::shouldHideRetiming((OZImageElement *)result)) {
        return 0;
      }
      else {
        return v3 + 22008;
      }
    }
  }
  return result;
}

char *OZRetimingUtil::RetimingExaminerTemplate<OZImageElement>::getDurationCacheChannel(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 840))(a2);
  if (result)
  {
    if (result)
    {
      PCString v3 = result;
      if (OZImageElement::shouldHideRetiming((OZImageElement *)result)) {
        return 0;
      }
      else {
        return v3 + 22160;
      }
    }
  }
  return result;
}

char *std::vector<OZPtcDecisionInfo>::__assign_with_size[abi:ne180100]<OZPtcDecisionInfo*,OZPtcDecisionInfo*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  uint64_t v8 = *((void *)result + 2);
  CMTime v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 4) < a4)
  {
    if (v9)
    {
      *((void *)result + OZDocument::~OZDocument(this - 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x555555555555555) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = std::vector<std::pair<CMTime,std::vector<CMTime>>>::__vallocate[abi:ne180100](v7, v12);
    CMTime v14 = (char *)v7[1];
    unsigned int v13 = (void **)(v7 + 1);
    CMTime v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      float v18 = v9;
      char v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unsigned int v13 = (void **)(result + 8);
  long long v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 4) >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[16 * ((v15 - v9) >> 4)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    CMTime v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    float v18 = v9;
    char v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  OZRenderParams *v13 = &v9[v17];
  return result;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<CMTime *>,std::__wrap_iter<CMTime *>,CMTime,std::__identity,std::__less<void,void>>(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t v3 = a1;
  if (a2 != a1)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
    do
    {
      long long v6 = (long long *)(v3 + 24 * (v5 >> 1));
      long long v7 = *v6;
      time1.CMTimeEpoch epoch = *((void *)v6 + 2);
      *(_OWORD *)&time1.CMTimeValue value = v7;
      CMTime v10 = *a3;
      int32_t v8 = CMTimeCompare(&time1, &v10);
      if (v8 >= 0) {
        v5 >>= 1;
      }
      else {
        v5 += ~(v5 >> 1);
      }
      if (v8 < 0) {
        uint64_t v3 = (uint64_t)v6 + 24;
      }
    }
    while (v5);
  }
  return v3;
}

void std::vector<FxBalancedBlendRecord>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = (uint64_t *)**a1;
  if (v2)
  {
    long long v4 = (uint64_t *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 2;
        std::allocator<FxBalancedBlendRecord>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<FxBalancedBlendRecord>::destroy[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

uint64_t std::vector<FxBalancedBlendRecord>::__push_back_slow_path<FxBalancedBlendRecord const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  char v19 = a1 + 2;
  if (v9) {
    CMTime v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v7, v9);
  }
  else {
    CMTime v10 = 0;
  }
  uint64_t v11 = &v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  size_t v17 = v11;
  float v18 = &v10[16 * v9];
  uint64_t v12 = *a2;
  *(void *)uint64_t v11 = *a2;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    unsigned int v13 = v17;
  }
  else
  {
    unsigned int v13 = v11;
  }
  *((void *)v11 + OZDocument::~OZDocument(this - 1) = a2[1];
  size_t v17 = v13 + 16;
  std::vector<FxBalancedBlendRecord>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<FxBalancedBlendRecord>::~__split_buffer(v16);
  return v14;
}

void sub_1B7BEFF1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<FxBalancedBlendRecord>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<FxBalancedBlendRecord>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<FxBalancedBlendRecord>,std::reverse_iterator<FxBalancedBlendRecord*>,std::reverse_iterator<FxBalancedBlendRecord*>,std::reverse_iterator<FxBalancedBlendRecord*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<FxBalancedBlendRecord>,std::reverse_iterator<FxBalancedBlendRecord*>,std::reverse_iterator<FxBalancedBlendRecord*>,std::reverse_iterator<FxBalancedBlendRecord*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + OZDocument::~OZDocument(this - 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  char v17 = 0;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = a3;
    do
    {
      uint64_t v12 = *(void *)(v10 - 16);
      v10 -= 16;
      uint64_t v11 = v12;
      *(void *)(v7 - 16) = v12;
      uint64_t v13 = v7;
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        uint64_t v13 = *((void *)&v19 + 1);
      }
      *(void *)(v7 - 8) = *(void *)(v9 - 8);
      uint64_t v7 = v13 - 16;
      *((void *)&v19 + OZDocument::~OZDocument(this - 1) = v13 - 16;
      uint64_t v9 = v10;
    }
    while (v10 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<FxBalancedBlendRecord>,std::reverse_iterator<FxBalancedBlendRecord*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

void sub_1B7BF0084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<FxBalancedBlendRecord>,std::reverse_iterator<FxBalancedBlendRecord*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<FxBalancedBlendRecord>,std::reverse_iterator<FxBalancedBlendRecord*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<FxBalancedBlendRecord>,std::reverse_iterator<FxBalancedBlendRecord*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *(uint64_t **)(result[2] + 8);
  char v2 = *(uint64_t **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)std::allocator<FxBalancedBlendRecord>::destroy[abi:ne180100](v3, v1);
      v1 += 2;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<FxBalancedBlendRecord>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::__split_buffer<FxBalancedBlendRecord>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 16;
      uint64_t result = std::allocator<FxBalancedBlendRecord>::destroy[abi:ne180100](v4, (uint64_t *)(v1 - 16));
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void makeBalancedBlendTree_RetimeAddBlend6<std::__wrap_iter<FxBalancedBlendRecord *>>(double *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  v28[2] = *MEMORY[0x1E4F143B8];
  float v26 = 0;
  unint64_t v27 = 0;
  char v25 = &v26;
  v28[0] = &v25;
  v28[1] = &v26;
  v23[0] = a3;
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = std::insert_iterator<std::multiset<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>>::operator=[abi:ne180100]((uint64_t)v28, v4);
      v4 += 2;
    }
    while (v4 != a2);
    if (v27 >= 2)
    {
      v23[1] = (void *)(v27 - 5 * (v27 / 6));
      uint64_t v6 = v25;
      if (v27 >= 6) {
        uint64_t v7 = 6;
      }
      else {
        uint64_t v7 = v27;
      }
      MEMORY[0x1F4188790](v5);
      uint64_t v8 = &v23[-2 * v7];
      uint64_t v9 = 0;
      do
      {
        PCSharedCount::PCSharedCount((PCSharedCount *)&v8[v9]);
        v9 += 2;
      }
      while (2 * v7 != v9);
      float64x2_t v23[2] = v23;
      int v24 = 1;
      MEMORY[0x1F4188790](v10);
      uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v13 = 0;
      float v14 = 0.0;
      while (1)
      {
        uint64_t v15 = v6[4];
        unint64_t v16 = &v8[2 * v13];
        uint64_t v17 = *v16;
        if (*v16 != v15)
        {
          if (v17)
          {
            (*(void (**)(void))(*(void *)v17 + 24))(*v16);
            uint64_t v15 = v6[4];
          }
          void *v16 = v15;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
          }
        }
        v16[1] = v6[5];
        float InitialValue = OZConstantNode::getInitialValue((OZConstantNode *)(v6 + 4));
        *(float *)&v12[4 * v13] = InitialValue;
        int v20 = (void *)v6[1];
        if (v20)
        {
          do
          {
            float v21 = v20;
            int v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            float v21 = (void *)v6[2];
            BOOL v22 = *v21 == (void)v6;
            uint64_t v6 = v21;
          }
          while (!v22);
        }
        float v14 = v14 + InitialValue;
        ++v13;
        uint64_t v6 = v21;
        if (v13 == v7) {
          FxSupport::makeRetimeAddBlend6(v18);
        }
      }
    }
  }
  FxBalancedBlendRecord::node((FxBalancedBlendRecord *)(v25 + 4), v23[0]);
  std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::destroy((uint64_t)&v25, v26);
}

void sub_1B7BF070C(_Unwind_Exception *a1)
{
  std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::destroy(v1 - 144, *(void **)(v1 - 136));
  _Unwind_Resume(a1);
}

uint64_t std::insert_iterator<std::multiset<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>>::operator=[abi:ne180100](uint64_t a1, double *a2)
{
  uint64_t v3 = std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__emplace_hint_multi<FxBalancedBlendRecord const&>(*(uint64_t ***)a1, *(void **)(a1 + 8), a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t *std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__emplace_hint_multi<FxBalancedBlendRecord const&>(uint64_t **a1, void *a2, double *a3)
{
  std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__construct_node<FxBalancedBlendRecord const&>((uint64_t)a1, a3, (uint64_t)v9);
  leaf = (uint64_t **)std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__find_leaf(a1, a2, &v8, (OZConstantNode *)(v9[0] + 4));
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v8, leaf, v9[0]);
  BOOL v6 = v9[0];
  v9[0] = 0;
  std::unique_ptr<std::__tree_node<FxBalancedBlendRecord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<FxBalancedBlendRecord,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  return v6;
}

void sub_1B7BF09B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<FxBalancedBlendRecord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<FxBalancedBlendRecord,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__construct_node<FxBalancedBlendRecord const&>@<D0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  BOOL v6 = (double *)operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  double v7 = *a2;
  v6[4] = *a2;
  if (v7 != 0.0) {
    (*(void (**)(double))(**(void **)&v7 + 16))(COERCE_DOUBLE(*(void *)&v7));
  }
  double result = a2[1];
  v6[5] = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B7BF0A54(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<FxBalancedBlendRecord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<FxBalancedBlendRecord,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__find_leaf(void *a1, void *a2, void *a3, OZConstantNode *this)
{
  BOOL v6 = a2;
  if (a1 + 1 != a2)
  {
    double InitialValue = OZConstantNode::getInitialValue((OZConstantNode *)(a2 + 4));
    if (InitialValue < OZConstantNode::getInitialValue(this))
    {
      return std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__find_leaf_low((uint64_t)a1, a3, this);
    }
  }
  if ((void *)*a1 == v6)
  {
    uint64_t v11 = v6;
LABEL_17:
    if (*v6)
    {
      *a3 = v11;
      return v11 + 1;
    }
    else
    {
      *a3 = v6;
    }
    return v6;
  }
  uint64_t v10 = (void *)*v6;
  if (*v6)
  {
    do
    {
      uint64_t v11 = v10;
      uint64_t v10 = (void *)v10[1];
    }
    while (v10);
  }
  else
  {
    uint64_t v12 = v6;
    do
    {
      uint64_t v11 = (void *)v12[2];
      BOOL v13 = *v11 == (void)v12;
      uint64_t v12 = v11;
    }
    while (v13);
  }
  double v14 = OZConstantNode::getInitialValue(this);
  if (v14 >= OZConstantNode::getInitialValue((OZConstantNode *)(v11 + 4))) {
    goto LABEL_17;
  }

  return std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__find_leaf_high((uint64_t)a1, a3, this);
}

void *std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__find_leaf_high(uint64_t a1, void *a2, OZConstantNode *this)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v4;
        double v7 = (OZConstantNode *)(v4 + 4);
        double InitialValue = OZConstantNode::getInitialValue(this);
        if (InitialValue >= OZConstantNode::getInitialValue(v7)) {
          break;
        }
        uint64_t v4 = (void *)*v5;
        double result = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (void *)v5[1];
    }
    while (v4);
    double result = v5 + 1;
  }
  else
  {
    double result = (void *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

void *std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__find_leaf_low(uint64_t a1, void *a2, OZConstantNode *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v4;
        double InitialValue = OZConstantNode::getInitialValue((OZConstantNode *)(v4 + 4));
        if (InitialValue < OZConstantNode::getInitialValue(a3)) {
          break;
        }
        uint64_t v4 = (void *)*v5;
        double result = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (void *)v5[1];
    }
    while (v4);
    double result = v5 + 1;
  }
  else
  {
    double result = (void *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

void std::unique_ptr<std::__tree_node<FxBalancedBlendRecord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<FxBalancedBlendRecord,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<FxBalancedBlendRecord,0>(v2 + 4);
    }
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<FxBalancedBlendRecord,0>(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

uint64_t *std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__emplace_multi<FxBalancedBlendRecord const&>(uint64_t **a1, double *a2)
{
  std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__construct_node<FxBalancedBlendRecord const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::__find_leaf_high((uint64_t)a1, &v6, (OZConstantNode *)(v7[0] + 4));
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<FxBalancedBlendRecord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<FxBalancedBlendRecord,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1B7BF0DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<FxBalancedBlendRecord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<FxBalancedBlendRecord,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::destroy(a1, *a2);
    std::__tree<FxBalancedBlendRecord,OZLessBalancedBlendRecord,std::allocator<FxBalancedBlendRecord>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<FxBalancedBlendRecord,0>(a2 + 4);
    operator delete(a2);
  }
}

uint64_t *OZObject::iterator_t<OZFootageLayer,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZFootageLayer,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    uint64_t v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZFootageLayer,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

void *OZObject::iterator_t<OZFootageLayer,false,true,OZObject::defaultValidator>::increment(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 2;
  uint64_t v3 = *result;
  if (*result == result[2]) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void **)(v3 + 16);
  if ((*(unsigned int (**)(void *))(*v4 + 1056))(v4))
  {
    uint64_t v5 = *v1;
    BOOL v13 = v4;
    double v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v5;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1104))(v4);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(void *))(*v4 + 960))(v4))
  {
    uint64_t v6 = *v1;
    BOOL v13 = v4;
    double v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v6;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1024))(v4);
    *uint64_t v1 = result;
    return result;
  }
  double v7 = *(void **)(*v1 + 8);
  uint64_t result = (void *)v4[120];
  if (!result || v7 == (void *)*v2)
  {
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = *result;
  if (*((unsigned char *)v1 + 24)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v8 + 1112))();
  }
  else {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v8 + 1032))();
  }
  if (v7 != result)
  {
LABEL_13:
    uint64_t v3 = *v1;
LABEL_14:
    *uint64_t v1 = *(void *)(v3 + 8);
    return result;
  }
  if (*((unsigned char *)v1 + 24)
    && (uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 960))(v4[120]), result))
  {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 1024))(v4[120]);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 0;
  }
  else
  {
    *((unsigned char *)v1 + 24) = 0;
    while (1)
    {
      uint64_t v4 = (void *)v4[120];
      if (!v4) {
        break;
      }
      double v14 = v4;
      uint64_t v9 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v14);
      uint64_t v10 = v9 + 3;
      if (!v9) {
        uint64_t v10 = v2;
      }
      uint64_t v11 = *v10;
      *uint64_t v1 = v11;
      uint64_t result = (void *)v4[120];
      if (result)
      {
        uint64_t v12 = *(void **)(v11 + 8);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
        if (v12 == result && v12 != (void *)*v2) {
          continue;
        }
      }
      goto LABEL_13;
    }
  }
  return result;
}

void std::__tree<std::__value_type<PCHash128,HGRef<HGNode>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,HGRef<HGNode>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,HGRef<HGNode>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PCHash128,HGRef<HGNode>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,HGRef<HGNode>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,HGRef<HGNode>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PCHash128,HGRef<HGNode>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,HGRef<HGNode>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,HGRef<HGNode>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<PCHash128 const,HGRef<HGNode>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<PCHash128 const,HGRef<HGNode>>,0>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

uint64_t PCThreadSpecific<HGLazyPDFBitmapLoaderCache>::destroy(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = (void *)(result + 8);
    std::__tree<std::__value_type<PCHash128,HGRef<HGNode>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,HGRef<HGNode>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,HGRef<HGNode>>>>::destroy(result, *(void **)(result + 8));
    *uint64_t v1 = v2;
    v1[2] = 0;
    *uint64_t v2 = 0;
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

_DWORD *std::__tree<std::__value_type<PCHash128,HGRef<HGNode>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,HGRef<HGNode>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,HGRef<HGNode>>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__find_equal<PCHash128>((uint64_t)a1, &v13, a2);
  double v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    double v7 = operator new(0x38uLL);
    v11[1] = a1 + 1;
    uint64_t v9 = *a4;
    v7[8] = **a4;
    v7[9] = v9[1];
    v7[10] = v9[2];
    v7[11] = v9[3];
    *((void *)v7 + 6) = 0;
    char v12 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v13, v8, (uint64_t *)v7);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PCHash128,HGRef<HGNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCHash128,HGRef<HGNode>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<PCHash128,HGRef<HGNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCHash128,HGRef<HGNode>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<PCHash128 const,HGRef<HGNode>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_1B7BF1ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v11 - 56);
  _Unwind_Resume(a1);
}

void sub_1B7BF1BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7BF2104(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2 - 104);
  _Unwind_Resume(a1);
}

uint64_t *OZScene::begin_t<OZ3DEngineSceneElement,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7BF21D4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::operator++@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(a1 + 24);
  *(_OWORD *)(a2 + 32) = 0u;
  while (1)
  {
    uint64_t result = OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::increment((void *)a1);
    if (*(void *)a1 == *(void *)(a1 + 16)) {
      break;
    }
    uint64_t v4 = *(const void **)(*(void *)a1 + 16);
    if (v4)
    {
      if (result) {
        break;
      }
    }
  }
  return result;
}

void sub_1B7BF22AC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_1B7BF24FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7BF26C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v10 + 48));
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    uint64_t v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

void *OZObject::iterator_t<OZ3DEngineSceneElement,false,true,OZObject::defaultValidator>::increment(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 2;
  uint64_t v3 = *result;
  if (*result == result[2]) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void **)(v3 + 16);
  if ((*(unsigned int (**)(void *))(*v4 + 1056))(v4))
  {
    uint64_t v5 = *v1;
    uint64_t v13 = v4;
    double v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v5;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1104))(v4);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(void *))(*v4 + 960))(v4))
  {
    uint64_t v6 = *v1;
    uint64_t v13 = v4;
    double v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v6;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1024))(v4);
    *uint64_t v1 = result;
    return result;
  }
  double v7 = *(void **)(*v1 + 8);
  uint64_t result = (void *)v4[120];
  if (!result || v7 == (void *)*v2)
  {
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = *result;
  if (*((unsigned char *)v1 + 24)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v8 + 1112))();
  }
  else {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v8 + 1032))();
  }
  if (v7 != result)
  {
LABEL_13:
    uint64_t v3 = *v1;
LABEL_14:
    *uint64_t v1 = *(void *)(v3 + 8);
    return result;
  }
  if (*((unsigned char *)v1 + 24)
    && (uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 960))(v4[120]), result))
  {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 1024))(v4[120]);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 0;
  }
  else
  {
    *((unsigned char *)v1 + 24) = 0;
    while (1)
    {
      uint64_t v4 = (void *)v4[120];
      if (!v4) {
        break;
      }
      double v14 = v4;
      uint64_t v9 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v14);
      uint64_t v10 = v9 + 3;
      if (!v9) {
        uint64_t v10 = v2;
      }
      uint64_t v11 = *v10;
      *uint64_t v1 = v11;
      uint64_t result = (void *)v4[120];
      if (result)
      {
        char v12 = *(void **)(v11 + 8);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
        if (v12 == result && v12 != (void *)*v2) {
          continue;
        }
      }
      goto LABEL_13;
    }
  }
  return result;
}

BOOL OZImageElement::hasSourceObjectForTime(OZImageElement *this, CMTime *a2)
{
  BOOL result = OZImageElement::isDropZone(this);
  if (result) {
    return *(unsigned char *)(theApp + 81) && !OZImageElement::isBackgroundDropZone(this);
  }
  return result;
}

uint64_t OZImageElement::openMedia(OZImageElement *this)
{
  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (!Footage) {
    return 0;
  }
  uint64_t v3 = Footage;
  if (*((void *)Footage + 1009)
    || (!(*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this)
     || !*(void *)((*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this) + 1584)
      ? (BOOL v5 = 0)
      : (BOOL v5 = *(unsigned char *)(*(void *)((*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this) + 1584)
                       + 160) != 0),
        OZImageElement::isBackgroundDropZone(this) && (v5 | OZImageElement::isDropZoneReplaced((OZChannel *)this)) != 1))
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = (*(uint64_t (**)(OZFootage *))(*(void *)v3 + 104))(v3);
  }
  OZImageElement::updatePropertiesFromFootage(this, v3);
  return v4;
}

CGColorSpace **OZImageElement::appendFillOpaqueNodes@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, FxColorDescription *a4@<X3>, double *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11 = *a2;
  *a6 = *a2;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  }
  PCColor::PCColor(&v24);
  *(_OWORD *)int v23 = *(_OWORD *)a3;
  *(void *)&unsigned char v23[16] = *(void *)(a3 + 16);
  double Color = OZChannelColor::getColor((OZChannelColor *)(a1 + 27880), (const CMTime *)v23, &v24, 0.0);
  if (!a5)
  {
    uint64_t v19 = *a2;
    uint64_t v21 = v19;
    if (v19) {
      (*(void (**)(uint64_t, double))(*(void *)v19 + 16))(v19, Color);
    }
    appendFillOpaqueNodesHelper((int)&v21, &v24, a4, 0);
  }
  *(_OWORD *)int v23 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&unsigned char v23[16] = _Q0;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 1488))(a1, v23, a3);
  if (PCMatrix44Tmpl<double>::transformRect<double>(a5, (double *)v23, (uint64_t)v23))
  {
    uint64_t v18 = *a2;
    uint64_t v22 = v18;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    appendFillOpaqueNodesHelper((int)&v22, &v24, a4, (double *)v23);
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v24.var1._obj);
}

void sub_1B7BF3084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  _Unwind_Resume(a1);
}

void appendFillOpaqueNodesHelper(int a1, PCColor *a2, FxColorDescription *this, double *a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  FxGetRGBAForRenderingCGI(a2, this, (float *)&v11 + 1, (float *)&v11, (float *)&v10 + 1, (float *)&v10);
  if (a4)
  {
    uint64_t v5 = HGRectMake4i((int)*a4, (int)a4[1], (int)a4[2] + (int)*a4, (int)a4[3] + (int)a4[1]);
    uint64_t v7 = v6;
    uint64_t v8 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
    *(void *)&v12.CMTime var0 = v5;
    *(void *)&v12.var2 = v7;
    HGSolidColor::HGSolidColor(v8, v12);
  }
  uint64_t v9 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
  HGSolidColor::HGSolidColor(v9);
}

void sub_1B7BF3378(_Unwind_Exception *a1)
{
  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

CGColorSpace *OZImageElement::getHeliumGraph@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, float64x2_t *a5@<X4>, CGColorSpace **a6@<X8>)
{
  Footage = (OZFootage *)OZImageElement::getFootage((OZImageElement *)a1);
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
  if (!Footage && OZImageElement::isDropZone((OZImageElement *)a1))
  {
    if (!FxColorDescription::getCGColorSpace((FxColorDescription *)a4)) {
      FxColorDescription::setCGColorSpace((FxColorDescription *)a4, WorkingColorSpace);
    }
    OZImageElement::createDropZoneGridHeliumGraph((_anonymous_namespace_ *)a2, a3, (FxColorDescription *)a4, (uint64_t)a5);
  }
  double v83 = 0;
  if (!OZImageElement::isDropZone((OZImageElement *)a1)) {
    goto LABEL_65;
  }
  if (*(void *)(a1 + 30272))
  {
    int v20 = *(CGColorSpace **)a4;
    *(void *)&long long v50 = v20;
    if (v20) {
      PCCFRefTraits<CGColorSpace *>::retain(v20);
    }
    *((void *)&v50 + OZDocument::~OZDocument(this - 1) = *(void *)(a4 + 8);
    LODWORD(v5OZDocument::~OZDocument(this - 1) = *(_DWORD *)(a4 + 16);
    LOBYTE(v52) = *(unsigned char *)(a4 + 24);
    PCPrint("File %s, line %d should not have been reached:\n\t", v13, v14, v15, v16, v17, v18, v19, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZImageElement.mm");
    pcAbortImpl();
  }
  if (OZImageElement::isBackgroundDropZone((OZImageElement *)a1))
  {
    OZPlaybackEngine::OZPlaybackEngine(&v50, 1);
    if (OZPlaybackEngine::operator==((_DWORD *)(a2 + 940), &v50)
      || (OZPlaybackEngine::OZPlaybackEngine(&v84, 0), OZPlaybackEngine::operator==((_DWORD *)(a2 + 940), &v84)))
    {
      unsigned int PVInputIndex = OZRenderParams::getPVInputIndex((OZRenderParams *)a2, *(_DWORD *)(a1 + 80));
      if (OZImageElement::resizeToMatchInputSource((OZImageElement *)a1)) {
        unsigned int PVInputIndex = 0;
      }
      if ((PVInputIndex & 0x80000000) == 0)
      {
        uint64_t v22 = *(void *)(a2 + 992);
        if (v22)
        {
          if (PVInputIndex < *(_DWORD *)(v22 + 16))
          {
            int v23 = *(CGColorSpace **)a4;
            *(void *)&long long v50 = v23;
            if (v23) {
              PCCFRefTraits<CGColorSpace *>::retain(v23);
            }
            *((void *)&v50 + OZDocument::~OZDocument(this - 1) = *(void *)(a4 + 8);
            LODWORD(v5OZDocument::~OZDocument(this - 1) = *(_DWORD *)(a4 + 16);
            LOBYTE(v52) = *(unsigned char *)(a4 + 24);
            OZImageElement::getHeliumGraphFromInputRef((OZRenderParams *)a2, a1, PVInputIndex, (uint64_t)&v50, a5, (uint64_t *)&v84);
            obuint64_t j = v84._pcColorDesc._colorSpaceRef._obj;
            if (v83 == v84._pcColorDesc._colorSpaceRef._obj)
            {
              if (!v83)
              {
LABEL_86:
                CMTimeValue v36 = (FxColorDescription *)&v50;
                goto LABEL_64;
              }
              (*(void (**)(void))(*(void *)v83 + 24))();
              obuint64_t j = v83;
            }
            else
            {
              if (v83)
              {
                (*(void (**)(void))(*(void *)v83 + 24))();
                obuint64_t j = v84._pcColorDesc._colorSpaceRef._obj;
              }
              double v83 = obj;
            }
            if (obj)
            {
              PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)a4, (CGColorSpace **)&v50);
              *(void *)(a4 + 8) = *((void *)&v50 + 1);
              *(_DWORD *)(a4 + 16) = v51;
              *(unsigned char *)(a4 + 24) = v52;
              *a6 = v83;
              double v83 = 0;
              double v45 = (FxColorDescription *)&v50;
              goto LABEL_68;
            }
            goto LABEL_86;
          }
        }
      }
    }
LABEL_65:
    if (Footage)
    {
      long long v81 = 0;
      long long v50 = xmmword_1B7E74760;
      uint64_t v51 = 0x3FF0000000000000;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v55 = 0x3FF0000000000000;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      int v63 = 0;
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      uint64_t v59 = 0x3FF0000000000000;
      char v62 = 0;
      uint64_t v37 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      long long v64 = *MEMORY[0x1E4F1FA48];
      uint64_t v65 = v37;
      uint64_t v66 = 0;
      __int16 v67 = 0;
      uint64_t v68 = 0;
      __int16 v69 = 0;
      uint64_t v70 = 0x100000000;
      char v71 = 0;
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      __int16 v74 = 768;
      uint64_t v75 = 0x408F400000000000;
      char v76 = 0;
      int v77 = 0;
      char v78 = 0;
      uint64_t v79 = -1;
      __asm { FMOV            V0.2D, #1.0 }
      long long v80 = _Q0;
      uint64_t v49 = 0;
      OZImageElement::calculateFrameRequestSettings((OZImageElement *)a1, (const OZRenderParams *)a2, (const FxColorDescription *)a4, Footage, &v81, (PMFrameRequest *)&v50, (float *)&v49 + 1, (float *)&v49);
    }
    OZFootage::getErrorHeliumGraph((_anonymous_namespace_ *)a2, a3, (FxColorDescription *)a4);
  }
  unsigned int v25 = OZImageElement::getDropZoneType((OZImageElement *)a1) == 2;
  if (OZImageElement::isPassthroughPlaceholder((OZImageElement *)a1)) {
    unsigned int v25 = OZRenderParams::getPVInputIndex((OZRenderParams *)a2, *(_DWORD *)(a1 + 80));
  }
  if (OZImageElement::resizeToMatchInputSource((OZImageElement *)a1)) {
    unsigned int v25 = 0;
  }
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 27728), MEMORY[0x1E4F1FA48], 0.0);
  v84._pcColorDesc._colorSpaceRef._obuint64_t j = *(CGColorSpace **)a4;
  if (v84._pcColorDesc._colorSpaceRef._obj) {
    PCCFRefTraits<CGColorSpace *>::retain(v84._pcColorDesc._colorSpaceRef._obj);
  }
  *(void *)&v84._pcColorDesc._dynamicRange = *(void *)(a4 + 8);
  v84._pcColorDesc._toneMapMethod._gain = *(float *)(a4 + 16);
  v84._isPremultiplied = *(unsigned char *)(a4 + 24);
  if (ValueAsInt) {
    FxColorDescription::setCGColorSpace(&v84, WorkingColorSpace);
  }
  OZRenderParams::getFFInputNode((void *)a2, v25, &v50);
  unint64_t v27 = (CGColorSpace *)v50;
  if (v83 == (CGColorSpace *)v50)
  {
    if (!v83 || ((*(void (**)(CGColorSpace *))(*(void *)v83 + 24))(v83), int v46 = ValueAsInt, !v83))
    {
LABEL_63:
      CMTimeValue v36 = &v84;
LABEL_64:
      PCCFRef<CGColorSpace *>::~PCCFRef(&v36->_pcColorDesc._colorSpaceRef._obj);
      goto LABEL_65;
    }
  }
  else
  {
    if (v83)
    {
      (*(void (**)(CGColorSpace *))(*(void *)v83 + 24))(v83);
      unint64_t v27 = (CGColorSpace *)v50;
    }
    int v46 = ValueAsInt;
    double v83 = v27;
    if (!v27) {
      goto LABEL_63;
    }
  }
  OZRenderParams::getFFInputPixelTransform((OZRenderParams *)a2, v25, (uint64_t)&v50);
  if (&v50 != (long long *)a5)
  {
    for (uint64_t i = 0; i != 8; i += 2)
    {
      f64 = (_OWORD *)a5[i].f64;
      long long v30 = *(long long *)((char *)&v50 + i * 16 + 16);
      _OWORD *f64 = *(long long *)((char *)&v50 + i * 16);
      f64[1] = v30;
    }
  }
  OZPlaybackEngine::OZPlaybackEngine(v48, 0);
  if (OZPlaybackEngine::operator==((_DWORD *)(a2 + 940), v48)) {
    PCMatrix44Tmpl<double>::rightScale(a5->f64, *(double *)(a2 + 1072), *(double *)(a2 + 1072), 1.0);
  }
  if (!FxColorDescription::getCGColorSpace((FxColorDescription *)a4)) {
    FxColorDescription::setCGColorSpace((FxColorDescription *)a4, WorkingColorSpace);
  }
  if (!FxColorDescription::getCGColorSpace(&v84))
  {
    CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)a4);
    FxColorDescription::setCGColorSpace(&v84, CGColorSpace);
  }
  uint64_t WorkingColorDescription = (FxColorDescription *)OZRenderParams::getWorkingColorDescription((OZRenderParams *)a2);
  FxApplyColorConform((uint64_t *)&v83, WorkingColorDescription, &v84, v48);
  CMTimeValue v33 = (CGColorSpace *)v48[0];
  if (v83 == (CGColorSpace *)v48[0])
  {
    if (v83) {
      (*(void (**)(CGColorSpace *))(*(void *)v83 + 24))(v83);
    }
  }
  else
  {
    if (v83)
    {
      (*(void (**)(CGColorSpace *))(*(void *)v83 + 24))(v83);
      CMTimeValue v33 = (CGColorSpace *)v48[0];
    }
    double v83 = v33;
  }
  PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)a4, &v84._pcColorDesc._colorSpaceRef._obj);
  *(void *)(a4 + 8) = *(void *)&v84._pcColorDesc._dynamicRange;
  *(float *)(a4 + 16) = v84._pcColorDesc._toneMapMethod._gain;
  *(unsigned char *)(a4 + 24) = v84._isPremultiplied;
  CMTimeValue v34 = v83;
  if (!v83) {
    goto LABEL_63;
  }
  if (v46)
  {
    HGRect v82 = v83;
    (*(void (**)(CGColorSpace *))(*(void *)v83 + 16))(v83);
    OZImageElement::appendFillOpaqueNodes(a1, (uint64_t *)&v82, a2, &v84, a5->f64, (uint64_t *)&v50);
    long long v35 = (CGColorSpace *)v50;
    if (v83 == (CGColorSpace *)v50)
    {
      if (v83) {
        (*(void (**)(CGColorSpace *))(*(void *)v83 + 24))(v83);
      }
    }
    else
    {
      if (v83) {
        (*(void (**)(CGColorSpace *))(*(void *)v83 + 24))(v83);
      }
      double v83 = v35;
      *(void *)&long long v50 = 0;
    }
    (*(void (**)(CGColorSpace *))(*(void *)v34 + 24))(v34);
    FxApplyColorConform((uint64_t *)&v83, &v84, (FxColorDescription *)a4, (uint64_t *)&v50);
    long long v44 = (CGColorSpace *)v50;
    if (v83 == (CGColorSpace *)v50)
    {
      if (v83) {
        (*(void (**)(CGColorSpace *))(*(void *)v83 + 24))(v83);
      }
    }
    else
    {
      if (v83)
      {
        (*(void (**)(CGColorSpace *))(*(void *)v83 + 24))(v83);
        long long v44 = (CGColorSpace *)v50;
      }
      double v83 = v44;
    }
  }
  OZPlaybackEngine::OZPlaybackEngine(&v50, 0);
  if (OZPlaybackEngine::operator==((_DWORD *)(a2 + 940), &v50)) {
    OZImageElement::isEffectSource((OZImageElement *)a1);
  }
  *a6 = v83;
  double v83 = 0;
  double v45 = &v84;
LABEL_68:
  PCCFRef<CGColorSpace *>::~PCCFRef(&v45->_pcColorDesc._colorSpaceRef._obj);
  BOOL result = v83;
  if (v83) {
    return (CGColorSpace *)(*(uint64_t (**)(CGColorSpace *))(*(void *)v83 + 24))(v83);
  }
  return result;
}

void sub_1B7BF40A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,CGColorSpace *a37)
{
  uint64_t v39 = *(void *)(v37 - 224);
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 24))(v39);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&a37);
  uint64_t v40 = *(void *)(v37 - 232);
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 24))(v40);
  }
  _Unwind_Resume(a1);
}

uint64_t OZRenderParams::getPVInputIndex(OZRenderParams *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 132);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = (uint64_t *)*((void *)this + 132);
  while (1)
  {
    unsigned int v4 = *((_DWORD *)v3 + 7);
    if (v4 <= a2) {
      break;
    }
LABEL_6:
    uint64_t v3 = (uint64_t *)*v3;
    if (!v3) {
      return 0xFFFFFFFFLL;
    }
  }
  if (v4 < a2)
  {
    ++v3;
    goto LABEL_6;
  }
  uint64_t v6 = (_DWORD *)((char *)this + 1056);
  do
  {
    unsigned int v7 = *(_DWORD *)(v2 + 28);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t *)v2;
    }
    else {
      uint64_t v9 = (uint64_t *)(v2 + 8);
    }
    if (v8) {
      uint64_t v6 = (_DWORD *)v2;
    }
    uint64_t v2 = *v9;
  }
  while (*v9);
  if (v6 == (_DWORD *)((char *)this + 1056) || v6[7] > a2) {
    uint64_t v6 = (_DWORD *)((char *)this + 1056);
  }
  return v6[8];
}

void *OZRenderParams::getFFInputNode@<X0>(void *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v3 = this[124];
  if (!v3 || (uint64_t v6 = *(uint64_t **)(v3 + 8), v4 = (uint64_t *)(v3 + 8), (v5 = v6) == 0))
  {
LABEL_8:
    *a3 = 0;
    return this;
  }
  unsigned int v7 = v5;
  while (1)
  {
    unsigned int v8 = *((_DWORD *)v7 + 8);
    if (v8 <= a2) {
      break;
    }
LABEL_7:
    unsigned int v7 = (uint64_t *)*v7;
    if (!v7) {
      goto LABEL_8;
    }
  }
  if (v8 < a2)
  {
    ++v7;
    goto LABEL_7;
  }
  uint64_t v9 = v4;
  do
  {
    unsigned int v10 = *((_DWORD *)v5 + 8);
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      HGRect v12 = (uint64_t **)v5;
    }
    else {
      HGRect v12 = (uint64_t **)(v5 + 1);
    }
    if (v11) {
      uint64_t v9 = v5;
    }
    uint64_t v5 = *v12;
  }
  while (*v12);
  if (v9 == v4 || *((_DWORD *)v9 + 8) > a2) {
    uint64_t v9 = v4;
  }
  this = (void *)v9[5];
  *a3 = this;
  if (this) {
    return (void *)(*(uint64_t (**)(void))(*this + 16))();
  }
  return this;
}

__n128 OZRenderParams::getFFInputPixelTransform@<Q0>(OZRenderParams *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((void *)this + 155);
  if (!v4) {
    throw_PCNullPointerException(1);
  }
  uint64_t v5 = *(void *)(v4 + 72);
  if (!v5)
  {
LABEL_9:
    *(void *)(a3 + 120) = 0x3FF0000000000000;
    *(void *)(a3 + 80) = 0x3FF0000000000000;
    *(void *)(a3 + 40) = 0x3FF0000000000000;
    *(void *)a3 = 0x3FF0000000000000;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
    return result;
  }
  uint64_t v6 = *(uint64_t **)(v4 + 72);
  while (1)
  {
    unsigned int v7 = *((_DWORD *)v6 + 8);
    if (v7 <= a2) {
      break;
    }
LABEL_8:
    uint64_t v6 = (uint64_t *)*v6;
    if (!v6) {
      goto LABEL_9;
    }
  }
  if (v7 < a2)
  {
    ++v6;
    goto LABEL_8;
  }
  uint64_t v9 = v4 + 72;
  uint64_t v10 = v4 + 72;
  do
  {
    unsigned int v11 = *(_DWORD *)(v5 + 32);
    BOOL v12 = v11 >= a2;
    if (v11 >= a2) {
      uint64_t v13 = (uint64_t *)v5;
    }
    else {
      uint64_t v13 = (uint64_t *)(v5 + 8);
    }
    if (v12) {
      uint64_t v10 = v5;
    }
    uint64_t v5 = *v13;
  }
  while (*v13);
  if (v10 == v9 || *(_DWORD *)(v10 + 32) > a2) {
    uint64_t v10 = v9;
  }
  long long v14 = *(_OWORD *)(v10 + 40);
  long long v15 = *(_OWORD *)(v10 + 56);
  long long v16 = *(_OWORD *)(v10 + 88);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v10 + 72);
  *(_OWORD *)(a3 + 48) = v16;
  *(_OWORD *)a3 = v14;
  *(_OWORD *)(a3 + 16) = v15;
  __n128 result = *(__n128 *)(v10 + 104);
  long long v17 = *(_OWORD *)(v10 + 120);
  long long v18 = *(_OWORD *)(v10 + 152);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(v10 + 136);
  *(_OWORD *)(a3 + 112) = v18;
  *(__n128 *)(a3 + 64) = result;
  *(_OWORD *)(a3 + 80) = v17;
  return result;
}

uint64_t OZImageElement::getHeliumGraphFromInputRef@<X0>(OZRenderParams *this@<X1>, uint64_t a2@<X0>, unsigned int a3@<W2>, uint64_t a4@<X3>, float64x2_t *a5@<X4>, uint64_t *a6@<X8>)
{
  *a6 = 0;
  OZRenderParams::getFFInputNode(this, a3, &v40);
  if (*(void *)&v40.f64[0])
  {
    *a6 = *(void *)&v40.f64[0];
    OZRenderParams::getPVInputSize(this, a3, &v37);
    OZRenderParams::getFFInputPixelTransform(this, a3, (uint64_t)&v40);
    if (&v40 != a5)
    {
      for (uint64_t i = 0; i != 8; i += 2)
      {
        BOOL v12 = &a5[i];
        float64x2_t v13 = *(float64x2_t *)((char *)&v40 + i * 16 + 16);
        *BOOL v12 = *(float64x2_t *)((char *)&v40 + i * 16);
        v12[1] = v13;
      }
    }
    OZImageElement::getDropZoneTransformForMediaRef(a2, &v37, &v40, 1.0);
    PCMatrix44Tmpl<double>::rightMult((uint64_t)a5, v40.f64);
    int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a2 + 27728), MEMORY[0x1E4F1FA48], 0.0);
    WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)this);
    long long v16 = *(CGColorSpace **)a4;
    v34._pcColorDesc._colorSpaceRef._obuint64_t j = v16;
    if (v16) {
      PCCFRefTraits<CGColorSpace *>::retain(v16);
    }
    *(void *)&v34._pcColorDesc._dynamicRange = *(void *)(a4 + 8);
    v34._pcColorDesc._toneMapMethod._gain = *(float *)(a4 + 16);
    v34._isPremultiplied = *(unsigned char *)(a4 + 24);
    if (ValueAsInt) {
      FxColorDescription::setCGColorSpace(&v34, WorkingColorSpace);
    }
    if (!FxColorDescription::getCGColorSpace((FxColorDescription *)a4)) {
      FxColorDescription::setCGColorSpace((FxColorDescription *)a4, WorkingColorSpace);
    }
    uint64_t WorkingColorDescription = (FxColorDescription *)OZRenderParams::getWorkingColorDescription(this);
    uint64_t DynamicRange = FxColorDescription::getDynamicRange(WorkingColorDescription);
    FxColorDescription::setDynamicRange(a4, DynamicRange);
    ToneMapMethod = (const PCToneMapMethod *)FxColorDescription::getToneMapMethod(WorkingColorDescription);
    FxColorDescription::setToneMapMethod((FxColorDescription *)a4, ToneMapMethod);
    if (!FxColorDescription::getCGColorSpace(&v34))
    {
      CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)a4);
      FxColorDescription::setCGColorSpace(&v34, CGColorSpace);
    }
    FxApplyColorConform(a6, &v34, (FxColorDescription *)a4, (uint64_t *)&v33);
    uint64_t v21 = *a6;
    uint64_t v22 = v33;
    if (*a6 == (void)v33)
    {
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
      }
    }
    else
    {
      if (v21)
      {
        (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
        uint64_t v22 = v33;
      }
      *a6 = v22;
    }
    PCCFRef<CGColorSpace *>::~PCCFRef(&v34._pcColorDesc._colorSpaceRef._obj);
  }
  if (OZImageElement::removeBackground((OZImageElement *)a2)
    || (uint64_t result = OZImageElement::addExtraLighting((OZImageElement *)a2), result))
  {
    OZImageElement::shouldRotateMatteBuffer((OZImageElement *)a2);
    if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 272))(a2) + 144) == 1)
    {
      OZRenderParams::getFFInputNode(this, 1u, &v40);
      if (*(void *)&v40.f64[0])
      {
        OZRenderParams::getFFInputNode(this, 2u, &v37);
        unint64_t v24 = v37.n128_u64[0];
        if (v37.n128_u64[0]) {
          (*(void (**)(unint64_t))(*(void *)v37.n128_u64[0] + 24))(v37.n128_u64[0]);
        }
        if (*(void *)&v40.f64[0]) {
          (*(void (**)(void))(**(void **)&v40.f64[0] + 24))(*(void *)&v40.f64[0]);
        }
        if (v24)
        {
          OZRenderParams::getFFInputNode(this, 1u, v46);
          OZRenderParams::getFFInputNode(this, 2u, &v45);
          v43[1] = 0;
          v43[2] = 0;
          v43[0] = &unk_1F10AD5F8;
          char v44 = 0;
          unsigned int v25 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 272))(a2);
          float v26 = v25;
          if (v25)
          {
            OZScene::begin_t<OZLight,false,true>(v25, (uint64_t)&v37);
            uint64_t v27 = v26[151];
            memset(v35, 0, sizeof(v35));
            int v36 = 1065353216;
            v34._pcColorDesc._colorSpaceRef._obuint64_t j = (CGColorSpace *)(v26 + 150);
            *(void *)&v34._pcColorDesc._dynamicRange = v27;
            *(void *)&v34._pcColorDesc._toneMapMethod._gain = v26 + 150;
            v34._isPremultiplied = 0;
            while ((CGColorSpace *)v37.n128_u64[0] != v34._pcColorDesc._colorSpaceRef._obj)
            {
              if (v37.n128_u64[0] == v38)
              {
                PCColor v28 = 0;
              }
              else
              {
                PCColor v28 = *(void **)(v37.n128_u64[0] + 16);
                if (v28) {
              }
                }
              OZLight::buildLiLight((OZLight *)v28, (const OZRenderState *)this, (uint64_t)&v40);
              if (!*((unsigned char *)this + 515) && (v41 - 1) <= 2 && v42 != 0) {
                char v42 = 0;
              }
              LiLightSet::add((uint64_t)v43, (const LiLight *)&v40);
              LiLight::~LiLight((PCSharedCount *)&v40);
              OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::operator++((uint64_t *)&v37);
            }
            std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v35);
            std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v39);
          }
          long long v31 = (OZHeMatteNormalCompositeNode *)HGObject::operator new(0x1A0uLL);
          OZHeMatteNormalCompositeNode::OZHeMatteNormalCompositeNode(v31);
        }
      }
    }
    if (OZImageElement::getMatteBuffer((OZImageElement *)a2))
    {
LABEL_47:
      long long v30 = (OZHeMatteInt8 *)HGObject::operator new(0x1B0uLL);
      OZHeMatteInt8::OZHeMatteInt8(v30);
    }
    OZRenderParams::getFFInputNode(this, 1u, &v40);
    uint64_t result = *(void *)&v40.f64[0];
    if (*(void *)&v40.f64[0])
    {
      (*(void (**)(void))(**(void **)&v40.f64[0] + 24))(*(void *)&v40.f64[0]);
      goto LABEL_47;
    }
  }
  return result;
}

void sub_1B7BF57EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  unint64_t v13 = STACK[0x2F8];
  PCSharedCount::~PCSharedCount(v10);
  if (v13) {
    (*(void (**)(unint64_t))(*(void *)v13 + 24))(v13);
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v11 - 208);
  uint64_t v14 = *(void *)(v11 - 176);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  uint64_t v15 = *(void *)(v11 - 168);
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  if (*a10) {
    (*(void (**)(void))(*(void *)*a10 + 24))(*a10);
  }
  _Unwind_Resume(a1);
}

CGColorSpace *non-virtual thunk to'OZImageElement::getHeliumGraph@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, float64x2_t *a5@<X4>, CGColorSpace **a6@<X8>)
{
  return OZImageElement::getHeliumGraph(a1 - 6528, a2, a3, a4, a5, a6);
}

OZFootage *OZImageElement::getElementFieldDominance(OZImageElement *this, CMTime *a2, const OZRenderParams *a3)
{
  uint64_t result = (OZFootage *)OZImageElement::getFootage(this);
  if (result)
  {
    CMTime v5 = *a2;
    return (OZFootage *)OZFootage::getFieldDominance(result, &v5);
  }
  return result;
}

void OZImageElement::getFitScale(OZImageElement *this@<X0>, const OZRenderState *a2@<X1>, double *a3@<X8>)
{
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)a3 = _Q0;
  uint64_t v10 = a3 + 1;
  if (OZImageElement::getDropZoneType(this))
  {
    Footage = (OZFootage *)OZImageElement::getFootage(this);
    if (Footage)
    {
      BOOL v12 = Footage;
      unint64_t v13 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 29232), MEMORY[0x1E4F1FA48], 0.0);
      double v15 = v14;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 29384), v13, 0.0);
      double v17 = v16;
      uint64_t v23 = 0;
      (*(void (**)(OZFootage *, char *, uint64_t *, const OZRenderState *))(*(void *)v12 + 1504))(v12, (char *)&v23 + 4, &v23, a2);
      if (!OZFootage::isResolutionIndependent(v12))
      {
        uint64_t v18 = vcvtmd_s64_f64(v15 + 0.00001 + 0.0000001);
        uint64_t v19 = vcvtmd_s64_f64(v17 + 0.00001 + 0.0000001);
        if (v18 != (uint64_t)*((float *)&v23 + 1) || v19 != (uint64_t)*(float *)&v23)
        {
          double v21 = (float)((float)v19 / *(float *)&v23);
          *a3 = (float)((float)v18 / *((float *)&v23 + 1));
          a3[1] = v21;
        }
      }
    }
  }
  else
  {
    uint64_t v22 = (const CMTime *)MEMORY[0x1E4F1FA48];
    OZChannelPosition::getPosition((OZImageElement *)((char *)this + 26144), v22, a3, v10, 0.0);
  }
}

void OZImageElement::getDropZoneTransform(OZImageElement *this@<X0>, OZRenderState *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 120) = 0x3FF0000000000000;
  *(void *)(a3 + 80) = 0x3FF0000000000000;
  *(void *)(a3 + 40) = 0x3FF0000000000000;
  *(void *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  OZRenderState::OZRenderState(&v30, a2);
  uint64_t v6 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 26720), MEMORY[0x1E4F1FA48], 0.0);
  float64_t v8 = v7;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 26872), v6, 0.0);
  double v10 = v9;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 27424), v6, 0.0);
  double v12 = v11;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 27576), v6, 0.0);
  double v14 = v13;
  unsigned int PVInputIndex = OZRenderParams::getPVInputIndex((OZRenderParams *)a2, *((_DWORD *)this + 20));
  uint64_t v16 = *(void *)&a2[3].var8;
  if (!v16 || (PVInputIndex & 0x80000000) != 0 || PVInputIndex >= *(_DWORD *)(v16 + 16))
  {
    OZImageElement::getFitScale(this, &v30, v27);
    PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, v27[0], v27[1], 1.0);
  }
  else
  {
    float64x2_t v28 = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v29 = _Q0;
    OZImageElement::getFootageBounds((uint64_t)this, &v28, (OZRenderParams *)a2, 0);
    v26[0] = v28;
    v26[1] = v29;
    OZImageElement::getFitMatrixForMediaRef((uint64_t)this, (uint64_t)v26, (uint64_t)v27, 1.0);
    if (v27 != (double *)a3)
    {
      for (uint64_t i = 0; i != 16; i += 4)
      {
        uint64_t v23 = (_OWORD *)(a3 + i * 8);
        long long v24 = *(_OWORD *)&v27[i + 2];
        _OWORD *v23 = *(_OWORD *)&v27[i];
        v23[1] = v24;
      }
    }
  }
  float64x2_t v25 = PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, v12, v14, 1.0);
  v25.f64[0] = v8;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)a3, v25, v10, 0.0);
}

void OZImageElement::getFootageBounds(uint64_t a1, float64x2_t *a2, OZRenderParams *a3, int a4)
{
  if (OZImageElement::isDropZone((OZImageElement *)a1)
    && *(unsigned char *)(theApp + 81)
    && (PVInputIndex = OZRenderParams::getPVInputIndex(a3, *(_DWORD *)(a1 + 80)), (uint64_t v9 = *((void *)a3 + 124)) != 0)
    && (PVInputIndex & 0x80000000) == 0
    && PVInputIndex < *(_DWORD *)(v9 + 16))
  {
    OZRenderParams::getPVInputSize(a3, PVInputIndex, (__n128 *)&v56);
    float64x2_t v10 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)&v56.var0.var3));
    __asm { FMOV            V1.2D, #0.5 }
    *a2 = vsubq_f64((float64x2_t)0, vaddq_f64(vmulq_f64(v10, _Q1), (float64x2_t)0));
    a2[1] = v10;
  }
  else
  {
    Footage = OZImageElement::getFootage((OZImageElement *)a1);
    if (Footage)
    {
      double v17 = Footage;
      OZRenderState::OZRenderState(&v56, (const OZRenderState *)a3);
      OZRenderState::OZRenderState(&v55, &v56);
      long long v24 = xmmword_1B7E74760;
      uint64_t v25 = 0x3FF0000000000000;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0x3FF0000000000000;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      int v37 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v33 = 0x3FF0000000000000;
      char v36 = 0;
      long long v38 = *MEMORY[0x1E4F1FA48];
      uint64_t v39 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      uint64_t v40 = 0;
      __int16 v41 = 0;
      uint64_t v42 = 0;
      __int16 v43 = 0;
      uint64_t v44 = 0x100000000;
      char v45 = 0;
      int v46 = 0;
      double v47 = 0;
      __int16 v48 = 768;
      uint64_t v49 = 0x408F400000000000;
      char v50 = 0;
      int v51 = 0;
      char v52 = 0;
      uint64_t v53 = -1;
      __asm { FMOV            V0.2D, #1.0 }
      long long v54 = _Q0;
      CMTime var0 = (CMTime)v55.var0;
      OZImageElement::globalToFootageTime((OZImageElement *)a1, &var0, (uint64_t)&v22);
      *(_OWORD *)&v55.var0.CMTime var0 = v22;
      v55.var0.int64_t var3 = v23;
      HIDWORD(v34) = OZChannel::getValueAsInt((OZChannel *)(a1 + 22312), MEMORY[0x1E4F1FA48], 0.0);
      if (a4) {
        (*(void (**)(void *, float64x2_t *, OZRenderState *, long long *))(*v17 + 1568))(v17, a2, &v55, &v24);
      }
      else {
        OZFootage::getTextureResolution(v17, (uint64_t)a2, (const CMTime *)&v55, (uint64_t)&v24);
      }
      __asm { FMOV            V2.2D, #0.5 }
      *a2 = vsubq_f64(*a2, vaddq_f64(*a2, vmulq_f64(a2[1], _Q2)));
      PCCFRef<CGColorSpace *>::~PCCFRef(&v47);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v46);
    }
    else
    {
      __asm { FMOV            V0.2D, #-1.0 }
      a2[1] = _Q0;
    }
  }
}

void sub_1B7BF62E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CGColorSpace *a38)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a38);
  PCCFRef<CGColorSpace *>::~PCCFRef(v38);
  _Unwind_Resume(a1);
}

void OZImageElement::getFitMatrixForMediaRef(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(void *)(a3 + 120) = 0x3FF0000000000000;
  *(void *)(a3 + 80) = 0x3FF0000000000000;
  *(void *)(a3 + 40) = 0x3FF0000000000000;
  *(void *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  Footage = OZImageElement::getFootage((OZImageElement *)a1);
  if (Footage)
  {
    double v9 = (*(double (**)(void *))(*(void *)Footage + 1368))(Footage);
    OZRenderState::OZRenderState(&v41);
    OZScene::getCurrentTime(*(OZScene **)(a1 + 968), &v39);
    *(__n128 *)&v41.var0.CMTime var0 = v39;
    v41.var0.int64_t var3 = v40;
    double v10 = *(double *)(a2 + 16);
    double v11 = *(double *)(a2 + 24);
    if (OZImageElement::isBackgroundDropZone((OZImageElement *)a1)
      && !OZImageElement::isPassthroughPlaceholder((OZImageElement *)a1)
      && !OZImageElement::resizeToMatchInputSource((OZImageElement *)a1))
    {
      double v12 = (const CMTime *)MEMORY[0x1E4F1FA48];
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 29232), MEMORY[0x1E4F1FA48], 0.0);
      double v14 = v13;
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 29384), v12, 0.0);
      double v16 = v15;
      double v38 = 0.0;
      v39.n128_u64[0] = 0;
      double v36 = 0.0;
      double v37 = 0.0;
      double v34 = 0.0;
      double v35 = 0.0;
      double v33 = 0.0;
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 26280), v12, 0.0);
      OZChannel::getValueAsDouble((OZChannel *)(a1 + 26432), v12, 0.0);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1608))(a1)) {
        (*(void (**)(uint64_t, OZRenderState *, __n128 *, double *, double *, double *))(*(void *)a1 + 1728))(a1, &v41, &v39, &v38, &v37, &v36);
      }
      OZTransformNode::getPivot((OZTransformNode *)a1, &v35, &v34, &v33, (const CMTime *)&v41);
      double v17 = v14 - v39.n128_f64[0] - v38;
      double v18 = v16 - v37 - v36;
      int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 22720), MEMORY[0x1E4F1FA48], 0.0);
      if (ValueAsInt == 2)
      {
        double v21 = v9 * v17 / a4 / v10;
        double v23 = v18 / v11;
        goto LABEL_37;
      }
      if (ValueAsInt == 1)
      {
        double v29 = v17;
        double v31 = 0.0;
        double v32 = 0.0;
        uint64_t v30 = 0;
        (*(void (**)(uint64_t, double *, double *, uint64_t *, OZRenderState *, uint64_t))(*(void *)a1 + 1312))(a1, &v32, &v31, &v30, &v41, 1);
        if (v32 >= 1.0 || v32 <= 0.0) {
          double v21 = 1.0;
        }
        else {
          double v21 = 1.0 / v32;
        }
        if (v31 >= 1.0 || v31 <= 0.0) {
          double v23 = 1.0;
        }
        else {
          double v23 = 1.0 / v31;
        }
        double v24 = v10 * v21;
        double v25 = v11 * v23;
        int v26 = (int)(v10 * v21);
        int v27 = (int)(v11 * v23);
        if (v26 > 4096 || v27 > 4096)
        {
          if (v26 <= v27) {
            int v26 = (int)(v11 * v23);
          }
          if (v26 <= 1) {
            int v26 = 1;
          }
          double v28 = 4096.0 / (double)v26;
          double v24 = floor(v24 * v28);
          double v25 = floor(v25 * v28);
        }
        if (OZImageElement::isDropZoneReplaced((OZChannel *)a1)) {
          goto LABEL_37;
        }
        if (v10 >= v11)
        {
          if (v24 >= v29)
          {
LABEL_37:
            PCMatrix44Tmpl<double>::rightScale((double *)a3, 1.0 / v21, 1.0 / v23, 1.0);
            if (a4 != 1.0)
            {
              *(double *)a3 = *(double *)a3 * a4;
              *(double *)(a3 + 32) = *(double *)(a3 + 32) * a4;
              *(double *)(a3 + 64) = *(double *)(a3 + 64) * a4;
              *(double *)(a3 + 96) = *(double *)(a3 + 96) * a4;
            }
            return;
          }
          double v21 = v29 * v21 / v24;
        }
        else
        {
          if (v25 >= v18) {
            goto LABEL_37;
          }
          double v21 = v18 * v23 / v25;
        }
      }
      else if (v10 * a4 / v11 <= v9 * v17 / v18)
      {
        double v21 = v9 * v17 / a4 / v10;
      }
      else
      {
        double v21 = v18 / v11;
      }
      double v23 = v21;
      goto LABEL_37;
    }
  }
}

double OZImageElement::getDropZoneTransformForMediaRef@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, float64x2_t *a3@<X8>, double a4@<D0>)
{
  long long v6 = a2[1];
  v17[0] = *a2;
  v17[1] = v6;
  OZImageElement::getFitMatrixForMediaRef(a1, (uint64_t)v17, (uint64_t)a3, a4);
  double v7 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 26720), MEMORY[0x1E4F1FA48], 0.0);
  float64_t v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 26872), v7, 0.0);
  double v11 = v10;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 27424), v7, 0.0);
  double v13 = v12;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 27576), v7, 0.0);
  float64x2_t v15 = PCMatrix44Tmpl<double>::leftScale(a3, v13, v14, 1.0);
  v15.f64[0] = v9;

  *(void *)&double result = *(_OWORD *)&PCMatrix44Tmpl<double>::leftTranslate(a3, v15, v11, 0.0);
  return result;
}

__n128 OZRenderParams::getPVInputSize@<Q0>(OZRenderParams *this@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  uint64_t v3 = (char *)*((void *)this + 126);
  if (!v3)
  {
LABEL_7:
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    a3[1] = result;
    return result;
  }
  uint64_t v4 = (uint64_t *)*((void *)this + 126);
  while (1)
  {
    unsigned int v5 = *((_DWORD *)v4 + 8);
    if (v5 <= a2) {
      break;
    }
LABEL_6:
    uint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      goto LABEL_7;
    }
  }
  if (v5 < a2)
  {
    ++v4;
    goto LABEL_6;
  }
  double v10 = (char *)this + 1008;
  do
  {
    unsigned int v11 = *((_DWORD *)v3 + 8);
    _CF = v11 >= a2;
    if (v11 >= a2) {
      double v13 = (char **)v3;
    }
    else {
      double v13 = (char **)(v3 + 8);
    }
    if (_CF) {
      double v10 = v3;
    }
    uint64_t v3 = *v13;
  }
  while (*v13);
  if (v10 == (char *)this + 1008 || *((_DWORD *)v10 + 8) > a2) {
    double v10 = (char *)this + 1008;
  }
  __n128 result = *(__n128 *)(v10 + 40);
  __n128 v14 = *(__n128 *)(v10 + 56);
  *a3 = result;
  a3[1] = v14;
  return result;
}

BOOL OZImageElement::getDropZoneSourceBounds(OZImageElement *a1, float64x2_t *a2, OZRenderParams *a3, int a4)
{
  OZImageElement::getFootageBounds((uint64_t)a1, a2, a3, a4);
  OZImageElement::getDropZoneTransform(a1, (OZRenderState *)a3, (uint64_t)v8);
  return PCMatrix44Tmpl<double>::transformRect<double>(v8, a2->f64, (uint64_t)a2);
}

uint64_t OZImageElement::scheduleTokens()
{
  return 0;
}

uint64_t OZImageElement::setLightParameters(PCArray_base *a1, uint64_t a2, void *a3, double *a4, uint64_t a5)
{
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  int v6 = *(_DWORD *)(a2 + 12);
  if (v6 < 1)
  {
    int v10 = 0;
LABEL_22:
    uint64_t v32 = (v10 + 3);
    do
    {
      (*(void (**)(void, uint64_t, double, double, double, double))(*(void *)*a3 + 96))(*a3, v32, 0.0, 0.0, 0.0, 0.0);
      uint64_t v32 = (v32 + 1);
    }
    while (v32 != 7);
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 0;
    if (v6 >= 4) {
      uint64_t v11 = 4;
    }
    else {
      uint64_t v11 = v6;
    }
    do
    {
      if (v9 >= *(int *)(a2 + 12)) {
        PCArray_base::badIndex(a1);
      }
      LiLight::LiLight((LiLight *)v42, (const LiLight *)(*(void *)(a2 + 16) + 944 * v9));
      int v12 = v47;
      if (v47 != 3)
      {
        uint64_t v40 = v49;
        uint64_t v41 = 0x3FF0000000000000;
        long long v38 = 0u;
        long long v39 = v48;
        long long v37 = 0u;
        PCMatrix44Tmpl<double>::transform<double>(a4, (double *)&v39, (double *)&v37);
        PCMatrix44Tmpl<double>::transform_normal<double>(a5, v46, &v35);
        double v14 = v46[3];
        float v15 = v43;
        float v16 = v44;
        float v17 = v45;
        CMTime var0 = v42[75].var0;
        if (v12 == 2)
        {
          float v19 = *(double *)&v42[72].var0;
          float v20 = *(double *)&v42[73].var0;
          float v21 = *(double *)&v42[74].var0;
          (*(void (**)(void, uint64_t, float, float, float, float))(*(void *)*a3 + 96))(*a3, 19, v19, v20, v21, 1.0);
          double v23 = *((double *)&v37 + 1);
          double v22 = *(double *)&v37;
          v13.n128_u32[0] = 1.0;
          double v24 = *(double *)&v38;
        }
        else
        {
          double v25 = sqrt(v35.f64[0] * v35.f64[0] + v35.f64[1] * v35.f64[1] + v36 * v36);
          if (v25 < 0.000000100000001 && v25 > -0.000000100000001) {
            double v25 = 1.0;
          }
          double v24 = v36 / v25;
          double v23 = v35.f64[1] / v25;
          double v22 = v35.f64[0] / v25;
          v13.n128_u64[0] = 0;
        }
        float v27 = v24;
        float v28 = v23;
        float v29 = v22;
        (*(void (**)(void, void, float, float, float, __n128))(*(void *)*a3 + 96))(*a3, (v10 + 7), v29, v28, v27, v13);
        float v30 = v14;
        (*(void (**)(void, void, float, float, float, float))(*(void *)*a3 + 96))(*a3, (v10 + 3), v15 * v30, v16 * v30, v17 * v30, 1.0);
        float v31 = *(double *)&var0;
        *((_DWORD *)&v52 + v10) = v12;
        *((float *)&v50 + v10) = v31;
        if (v10 >= 4)
        {
          LiLight::~LiLight(v42);
          goto LABEL_26;
        }
        ++v10;
      }
      LiLight::~LiLight(v42);
      ++v9;
    }
    while (v9 != v11);
    if (v10 <= 3) {
      goto LABEL_22;
    }
  }
LABEL_26:
  (*(void (**)(void, uint64_t, float, float, float, float))(*(void *)*a3 + 96))(*a3, 17, (float)(int)v52, (float)SHIDWORD(v52), (float)(int)v53, (float)SHIDWORD(v53));
  return (*(uint64_t (**)(void, uint64_t, float, float, float, float))(*(void *)*a3 + 96))(*a3, 18, *(float *)&v50, *((float *)&v50 + 1), *(float *)&v51, *((float *)&v51 + 1));
}

void sub_1B7BF6C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  LiLight::~LiLight((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t *OZScene::begin_t<OZLight,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7BF6D00(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    uint64_t v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

OZFootage *OZImageElement::didFinishLoadingIntoScene(OZImageElement *this)
{
  OZElement::didFinishLoadingIntoScene((OZElement *)this);
  __n128 result = (OZFootage *)OZImageElement::getFootage(this);
  if (result)
  {
    uint64_t v3 = result;
    if ((*(unsigned int (**)(OZFootage *))(*(void *)result + 1432))(result)) {
      OZChannel::setMax((OZChannel *)((char *)this + 22312), 3.40282347e38);
    }
    OZImageElement::updatePropertiesFromFootage(this, v3);
    return OZImageElement::ptcLoadCinematicScript(this);
  }
  return result;
}

OZFootage *OZImageElement::ptcLoadCinematicScript(OZImageElement *this)
{
  __n128 result = (OZFootage *)OZImageElement::getFootage(this);
  if (result)
  {
    uint64_t v4 = result;
    __n128 result = (OZFootage *)OZFootage::isCinematographyAvailable(result, v3);
    if (result)
    {
      int v6 = (OZChannelBase *)*((void *)v4 + 1009);
      uint64_t v7 = OZChannelBase::setRangeName(v6, v5);
      OZFootage::ensureClipIsOpen(v4);
      __n128 result = (OZFootage *)(*(uint64_t (**)(uint64_t *, __CFString *))(*(void *)v7 + 344))(&v10, v6[10].var12);
      if (result)
      {
        *((void *)this + 3787) = v10;
        id v8 = objc_alloc_init(MEMORY[0x1E4F92200]);
        v9[0] = 0;
        v9[1] = v9;
        PCString v9[2] = 0x2020000000;
        v9[3] = 0;
        operator new();
      }
    }
  }
  return result;
}

void sub_1B7BF705C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1000C40A9FC9F90);
  _Unwind_Resume(a1);
}

OZFootage *non-virtual thunk to'OZImageElement::didFinishLoadingIntoScene(OZImageElement *this)
{
  return OZImageElement::didFinishLoadingIntoScene((OZImageElement *)((char *)this - 16));
}

uint64_t OZImageElement::writeBody(id *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZImageElementScope);
  if (OZImageElement::getFootage((OZImageElement *)this))
  {
    uint64_t v10 = *((unsigned int *)this + 7550);
    if (v10)
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 2);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v10);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    }
  }
  uint64_t v11 = OZImageElement::hasBeenRetimedFromLastHash((OZImageElement *)this) ^ 1;
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v11);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  if (this[3789])
  {
    PCAsciiStream::PCAsciiStream((PCAsciiStream *)v19);
    uint64_t v12 = [this[3789] changesDictionary];
    uint64_t v20 = 0;
    __n128 v13 = (void *)[MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v12 requiringSecureCoding:1 error:&v20];
    PCAsciiStream::write((PCAsciiStream *)v19, (unsigned char *)[v13 bytes], objc_msgSend(v13, "length"));
    PCAsciiStream::close((PCAsciiStream *)v19);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 5);
    (*(void (**)(PCSerializerWriteStream *, void))(*(void *)a2 + 48))(a2, 0);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCAsciiStream::getString((PCAsciiStream *)v19, &v18);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 6);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v18);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCString::~PCString(&v18);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v19);
  }
  if (this[3788])
  {
    PCAsciiStream::PCAsciiStream((PCAsciiStream *)v19);
    uint64_t v14 = [this[3788] changesDictionary];
    uint64_t v20 = 0;
    float v15 = (void *)[MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v14 requiringSecureCoding:1 error:&v20];
    PCAsciiStream::write((PCAsciiStream *)v19, (unsigned char *)[v15 bytes], objc_msgSend(v15, "length"));
    PCAsciiStream::close((PCAsciiStream *)v19);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 5);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCAsciiStream::getString((PCAsciiStream *)v19, &v17);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 6);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v17);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCString::~PCString(&v17);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v19);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  return OZElement::writeBody((OZElement *)this, a2, a3, a4, a5);
}

void sub_1B7BF75E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11)
{
}

uint64_t non-virtual thunk to'OZImageElement::writeBody(id *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZImageElement::writeBody(this - 6, a2, a3, a4, a5);
}

uint64_t OZImageElement::parseBegin(OZImageElement *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 30290) = 1;
  *((_DWORD *)this + 8146) = 0;
  OZElement::parseBegin((OZElement *)this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZImageElementScope);
  return 1;
}

uint64_t non-virtual thunk to'OZImageElement::parseBegin(OZImageElement *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 30242) = 1;
  *((_DWORD *)this + 8134) = 0;
  OZElement::parseBegin((OZElement *)((char *)this - 48), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZImageElementScope);
  return 1;
}

uint64_t OZImageElement::parseEnd(OZImageElement *this, PCSerializerReadStream *a2)
{
  uint64_t v4 = (BOOL *)this + 30144;
  OZElement::parseEnd((OZElement *)this, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 21192), 0x20000, 1);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 21344), 0x20000, 1);
  if (OZChanObjectManipRef::getObjectID((OZChannel *)((char *)this + 19112))
    && !OZChanObjectManipRef::getObjectID((OZChannel *)((char *)this + 18904)))
  {
    OZChanObjectRefWithPicker::assign((OZImageElement *)((char *)this + 18904), (const OZChannelBase *)((char *)this + 19112));
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 18904), 10, 0);
    OZChanObjectManipRef::setObjectID((OZChannelBase *)((char *)this + 19112), 0, 0);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 19112), 10, 0);
  }
  v4[146] = 0;
  if (*((_DWORD *)a2 + 26) == 5 && *((_DWORD *)a2 + 27) >= 7u) {
    OZChannel::setValue((OZChannel *)((char *)this + 29992), MEMORY[0x1E4F1FA48], 1.0, 0);
  }
  unsigned int v5 = (const CMTime *)MEMORY[0x1E4F1FA48];
  OZChannel::setValue((OZChannel *)((char *)this + 29992), MEMORY[0x1E4F1FA48], 0.0, 0);
  BOOL *v4 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 29992), v5, 0.0) != 0;
  if (OZImageElement::isBackgroundDropZone(this))
  {
    CFStringRef v6 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier");
    if (v6 && CFStringCompare(v6, @"com.apple.FinalCutApp", 1uLL) == kCFCompareEqualTo)
    {
      (*(void (**)(PCSerializerReadStream *))(*(void *)a2 + 24))(a2);
      return 0;
    }
    uint64_t v7 = (*(uint64_t (**)(OZImageElement *))(*(void *)this + 272))(this);
    if (v7)
    {
      id v8 = *(const __CFURL ***)(v7 + 1584);
      if (v8)
      {
        OZDocument::getFilename(v8, (PCURL *)&v12);
        PCURL::PCURL((PCURL *)&v11, &v12, 0);
        if (OZDocumentBundleFormatUtils::isMotionDocURLInMotionBundle((OZDocumentBundleFormatUtils *)&v11, v9))
        {
          (*(void (**)(PCSerializerReadStream *))(*(void *)a2 + 24))(a2);
          PCURL::~PCURL((PCURL *)&v11);
          PCString::~PCString(&v12);
          return 0;
        }
        PCURL::~PCURL((PCURL *)&v11);
        PCString::~PCString(&v12);
      }
    }
  }
  return 1;
}

void sub_1B7BF7924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZImageElement::parseEnd(OZImageElement *this, PCSerializerReadStream *a2)
{
  return OZImageElement::parseEnd((OZImageElement *)((char *)this - 48), a2);
}

uint64_t OZImageElement::parseElement(OZImageElement *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  CFStringRef v6 = (_DWORD *)((char *)this + 30200);
  uint64_t v24 = 0;
  OZElement::parseElement((OZElement *)this, a2, a3);
  switch(*((_DWORD *)a3 + 2))
  {
    case 1:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 32))(a3, (char *)&v24 + 4);
      v22[0] = 0;
      __n128 v7 = ((__n128 (*)(void))*(void *)(**(void **)(*((void *)this + 2803) + 8) + 256))();
      v7.n128_u32[0] = HIDWORD(v24);
      double v8 = (double)v7.n128_u64[0];
      if (v8 > 0.0)
      {
        OZChannel::setMax((OZChannel *)((char *)this + 22312), v8);
        LODWORD(v9) = HIDWORD(v24);
        double v8 = (double)v9;
      }
      OZChannel::setValue((OZChannel *)((char *)this + 22312), MEMORY[0x1E4F1FA48], v8, 0);
      break;
    case 2:
      (*(void (**)(PCStreamElement *, uint64_t *))(*(void *)a3 + 32))(a3, &v24);
      uint64_t v10 = (OZChannel *)((char *)this + 19320);
      if (v24)
      {
        OZChannel::setMax(v10, (double)v24);
        LODWORD(v1OZDocument::~OZDocument(this - 1) = v24;
        OZChannel::setSliderMax(v10, (double)v11);
        OZChannelBase::resetFlag((OZChannelBase *)v10, 2, 0);
      }
      else
      {
        OZChannel::setMax(v10, 1.0);
        OZChannel::setSliderMax(v10, 1.0);
        OZChannelBase::setFlag((OZChannelBase *)v10, 2, 0);
      }
      break;
    case 3:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 72))(a3, (char *)this + 30145);
      break;
    case 5:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 32))(a3, (char *)this + 32584);
      break;
    case 6:
      PCSharedCount::PCSharedCount(&v23);
      PCSerializerReadStream::getAsString((uint64_t)a2, (uint64_t)a3, (uint64_t)&v23);
      PCAsciiStream::PCAsciiStream((PCAsciiStream *)v22);
      unsigned int v12 = PCString::size((PCString *)&v23);
      __n128 v13 = malloc_type_malloc(v12, 0xC651110DuLL);
      CStr = PCString::createCStr((PCString *)&v23);
      PCAsciiStream::open((PCAsciiStream *)v22, CStr);
      unsigned int v15 = PCString::size((PCString *)&v23);
      unint64_t v16 = PCAsciiStream::read((PCAsciiStream *)v22, v13, v15);
      PCAsciiStream::close((PCAsciiStream *)v22);
      free(CStr);
      PCString v17 = (NSData *)[MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:v13 length:v16];
      int v18 = v6[596];
      if (v18 == 1)
      {

        *((void *)this + 3790) = (id)OZImageElement::decodeScriptFromData(v20, v17);
      }
      else if (!v18)
      {

        *((void *)this + 379OZDocument::~OZDocument(this - 1) = (id)OZImageElement::decodeScriptFromData(v19, v17);
      }
      PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v22);
      PCString::~PCString((PCString *)&v23);
      break;
    default:
      break;
  }
  *CFStringRef v6 = v24;
  return 1;
}

void sub_1B7BF7C80(_Unwind_Exception *a1)
{
  PCString::~PCString((PCString *)(v1 - 64));
  _Unwind_Resume(a1);
}

uint64_t OZImageElement::decodeScriptFromData(OZImageElement *this, NSData *a2)
{
  uint64_t v6 = 0;
  uint64_t v2 = (void *)[objc_alloc(MEMORY[0x1E4F28DC0]) initForReadingFromData:a2 error:&v6];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = [v2 decodePropertyListForKey:*MEMORY[0x1E4F284E8]];
  [v3 finishDecoding];

  return v4;
}

uint64_t non-virtual thunk to'OZImageElement::parseElement(OZImageElement *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

OZChannelBase *OZImageElement::isCinematographyAvailable(OZImageElement *this)
{
  __n128 result = (OZChannelBase *)OZImageElement::getFootage(this);
  if (result)
  {
    return OZFootage::isCinematographyAvailable((OZFootage *)result, v2);
  }
  return result;
}

void OZImageElement::ptcRefreshCinematographyInternalDataFromScript(OZImageElement *this)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void *)*((void *)this + 3789);
  if (v1)
  {
    *((void *)this + 407OZDocument::~OZDocument(this - 1) = *((void *)this + 4070);
    memset(&v40, 0, sizeof(v40));
    CMTime start = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    CMTime duration = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F0];
    CMTimeRangeMake(&v40, &start, &duration);
    CMTimeRange v37 = v40;
    obuint64_t j = (id)[v1 decisionsInTimeRange:&v37];
    long long v36 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    uint64_t v3 = (OZCurrentThread *)[obj countByEnumeratingWithState:&v33 objects:v41 count:16];
    uint64_t v4 = v3;
    if (v3)
    {
      unsigned int v5 = (char **)((char *)this + 32560);
      uint64_t v6 = *(void *)v34;
      do
      {
        __n128 v7 = 0;
        do
        {
          if (*(void *)v34 != v6) {
            objc_enumerationMutation(obj);
          }
          double v8 = *(void **)(*((void *)&v33 + 1) + 8 * (void)v7);
          memset(&v32[8], 0, 40);
          *(void *)uint64_t v32 = [v8 trackIdentifier];
          *(void *)&v32[8] = [v8 groupIdentifier];
          if (v8) {
            [v8 time];
          }
          else {
            memset(&v32[16], 0, 24);
          }
          v32[40] = [v8 isUserDecision];
          v32[41] = [v8 isStrongDecision];
          v32[42] = [v8 isGroupDecision];
          unint64_t v9 = (_OWORD *)*((void *)this + 4071);
          unint64_t v10 = *((void *)this + 4072);
          if ((unint64_t)v9 >= v10)
          {
            unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - *v5) >> 4);
            unint64_t v15 = v14 + 1;
            if (v14 + 1 > 0x555555555555555) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)*v5) >> 4);
            if (2 * v16 > v15) {
              unint64_t v15 = 2 * v16;
            }
            if (v16 >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v17 = 0x555555555555555;
            }
            else {
              unint64_t v17 = v15;
            }
            if (v17) {
              int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>((uint64_t)this + 32576, v17);
            }
            else {
              int v18 = 0;
            }
            float v19 = &v18[48 * v14];
            long long v20 = *(_OWORD *)v32;
            long long v21 = *(_OWORD *)&v32[32];
            *((_OWORD *)v19 + OZDocument::~OZDocument(this - 1) = *(_OWORD *)&v32[16];
            *((_OWORD *)v19 + 2) = v21;
            *(_OWORD *)float v19 = v20;
            double v22 = (char *)*((void *)this + 4071);
            PCSharedCount v23 = (char *)*((void *)this + 4070);
            uint64_t v24 = v19;
            if (v22 != v23)
            {
              do
              {
                long long v25 = *((_OWORD *)v22 - 3);
                long long v26 = *((_OWORD *)v22 - 1);
                *((_OWORD *)v24 - 2) = *((_OWORD *)v22 - 2);
                *((_OWORD *)v24 - OZDocument::~OZDocument(this - 1) = v26;
                *((_OWORD *)v24 - 3) = v25;
                v24 -= 48;
                v22 -= 48;
              }
              while (v22 != v23);
              double v22 = *v5;
            }
            *((void *)this + 4070) = v24;
            __n128 v13 = v19 + 48;
            *((void *)this + 407OZDocument::~OZDocument(this - 1) = v19 + 48;
            *((void *)this + 4072) = &v18[48 * v17];
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            long long v11 = *(_OWORD *)v32;
            long long v12 = *(_OWORD *)&v32[32];
            v9[1] = *(_OWORD *)&v32[16];
            PCString v9[2] = v12;
            _OWORD *v9 = v11;
            __n128 v13 = v9 + 3;
          }
          *((void *)this + 407OZDocument::~OZDocument(this - 1) = v13;
          __n128 v7 = (OZCurrentThread *)((char *)v7 + 1);
        }
        while (v7 != v4);
        uint64_t v3 = (OZCurrentThread *)[obj countByEnumeratingWithState:&v33 objects:v41 count:16];
        uint64_t v4 = v3;
      }
      while (v3);
    }
    uint64_t v27 = *((void *)this + 121);
    if (v27)
    {
      float v28 = *(OZDocument **)(v27 + 1584);
      if (v28)
      {
        uint64_t Instance = OZCurrentThread::getInstance(v3);
        if (PCThread::isSelf(*(_opaque_pthread_t ***)(Instance + 8)))
        {
          OZDocument::postNotification(v28, 8);
        }
        else
        {
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = *(void *)"";
          block[2] = ___ZN14OZImageElement46ptcRefreshCinematographyInternalDataFromScriptEv_block_invoke;
          block[3] = &__block_descriptor_40_e5_v8__0l;
          block[4] = v28;
          dispatch_async(MEMORY[0x1E4F14428], block);
        }
      }
    }
  }
}

void ___ZN14OZImageElement46ptcRefreshCinematographyInternalDataFromScriptEv_block_invoke(uint64_t a1)
{
}

OZChannelBase *OZImageElement::ptcRefreshCinematographyDataChannels(OZImageElement *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (Footage && (OZFootage::isCinematographyAvailable(Footage, v3) & 1) != 0)
  {
    __n128 result = OZChannelBase::resetFlag((OZChannelBase *)this + 271, 2, 1);
    unsigned int v5 = (void *)*((void *)this + 3789);
    if (v5)
    {
      OZImageElement::ptcSyncChangesDictionaryFromScript(this);
      OZImageElement::ptcRefreshCinematographyInternalDataFromScript(this);
      uint64_t v6 = (OZChannel *)((char *)this + 30888);
      OZChannel::deleteAllKeyframes((OZChannel *)((char *)this + 30888), MEMORY[0x1E4F1FA48]);
      memset(&v24, 0, sizeof(v24));
      (*(void (**)(CMTime *__return_ptr, OZImageElement *))(*(void *)this + 1128))(&v21, this);
      CMTime v22 = v21;
      (*(void (**)(CMTime *__return_ptr, OZImageElement *, CMTime *))(*(void *)this + 1144))(&start, this, &v22);
      (*(void (**)(void *__return_ptr, OZImageElement *))(*(void *)this + 1128))(v18, this);
      CMTime duration = v19;
      CMTimeRangeMake(&v24, &start, &duration);
      CMTimeRange v17 = v24;
      __n128 v7 = (void *)[v5 framesInTimeRange:&v17];
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      __n128 result = (OZChannelBase *)[v7 countByEnumeratingWithState:&v13 objects:v25 count:16];
      if (result)
      {
        double v8 = result;
        uint64_t v9 = *(void *)v14;
        do
        {
          unint64_t v10 = 0;
          do
          {
            if (*(void *)v14 != v9) {
              objc_enumerationMutation(v7);
            }
            long long v11 = *(void **)(*((void *)&v13 + 1) + 8 * (void)v10);
            memset(&v21, 0, sizeof(v21));
            if (v11) {
              [v11 time];
            }
            [v11 focusDistance];
            OZChannel::appendKeyframe(v6, &v21, v12);
            unint64_t v10 = (OZChannelBase *)((char *)v10 + 1);
          }
          while (v8 != v10);
          __n128 result = (OZChannelBase *)[v7 countByEnumeratingWithState:&v13 objects:v25 count:16];
          double v8 = result;
        }
        while (result);
      }
    }
  }
  else
  {
    return OZChannelBase::setFlag((OZChannelBase *)this + 271, 2, 1);
  }
  return result;
}

void OZImageElement::ptcResetCinematographyDataChannels(OZImageElement *this)
{
  *((void *)this + 407OZDocument::~OZDocument(this - 1) = *((void *)this + 4070);
}

void OZImageElement::ptcResetCinematographyUserChannels(OZImageElement *this)
{
  OZChannelBase::reset((OZChannelBase *)((char *)this + 31296), 0);
  OZChannelBase::reset((OZChannelBase *)((char *)this + 31040), 0);

  OZChannelBase::reset((OZChannelBase *)((char *)this + 32000), 0);
}

void OZImageElement::ptcResetCinematographyAllChannels(OZImageElement *this)
{
  OZImageElement::ptcResetCinematographyDataChannels(this);

  OZImageElement::ptcResetCinematographyUserChannels(this);
}

uint64_t ___ZN14OZImageElement22ptcLoadCinematicScriptEv_block_invoke(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 & 1) == 0) {
    NSLog(&cfstr_ScriptengineEr.isa, a3);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  unsigned int v5 = *(PCSemaphore **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);

  return PCSemaphore::signal(v5);
}

OZChannelBase *OZImageElement::ptcFillCinematographyDataChannels(OZImageElement *this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  Footage = (OZFootage *)OZImageElement::getFootage(this);
  if (Footage)
  {
    uint64_t v4 = (OZChannelBase **)Footage;
    unsigned __int8 v5 = OZFootage::isCinematographyAvailable(Footage, v3);
    uint64_t v6 = (OZChannelBase *)((char *)this + 30352);
    if (v5)
    {
      OZChannelBase::resetFlag(v6, 2, 0);
      __n128 result = (OZChannelBase *)OZChannel::getValueAsInt((OZChannel *)((char *)this + 32256), MEMORY[0x1E4F1FA48], 0.0);
      if (!result)
      {
        OZChannelBase::setRangeName(v4[1009], v8);
        __n128 result = (OZChannelBase *)OZFootage::ensureClipIsOpen((OZFootage *)v4);
        uint64_t v9 = (void *)*((void *)this + 3789);
        if (v9)
        {
          memset(&v31, 0, sizeof(v31));
          (*(void (**)(CMTime *__return_ptr, OZImageElement *))(*(void *)this + 1128))(&v28, this);
          CMTime v29 = v28;
          (*(void (**)(CMTime *__return_ptr, OZImageElement *, CMTime *))(*(void *)this + 1144))(&start, this, &v29);
          (*(void (**)(CMTime *__return_ptr, OZImageElement *))(*(void *)this + 1128))(&v25, this);
          CMTime duration = v26;
          CMTimeRangeMake(&v31, &start, &duration);
          CMTimeRange v24 = v31;
          unint64_t v10 = (void *)[v9 framesInTimeRange:&v24];
          long long v20 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          uint64_t v11 = [v10 countByEnumeratingWithState:&v20 objects:v32 count:16];
          if (v11)
          {
            uint64_t v12 = v11;
            uint64_t v13 = *(void *)v21;
            double v14 = 0.0;
            do
            {
              for (uint64_t i = 0; i != v12; ++i)
              {
                if (*(void *)v21 != v13) {
                  objc_enumerationMutation(v10);
                }
                long long v16 = *(void **)(*((void *)&v20 + 1) + 8 * i);
                memset(&v25, 0, sizeof(v25));
                if (v16) {
                  [v16 time];
                }
                [v16 aperture];
                double v18 = v17;
                if (vabdd_f64(v14, v17) >= 0.0000001)
                {
                  OZChannel::appendKeyframe((OZChannel *)((char *)this + 30736), &v25, v18);
                  CMTime v28 = v25;
                  double v14 = v18;
                }
              }
              uint64_t v12 = [v10 countByEnumeratingWithState:&v20 objects:v32 count:16];
            }
            while (v12);
          }
          CMTime v19 = (OZChannel *)((char *)this + 30736);
          if (OZChannel::getNumberOfKeyframes(v19) == 1) {
            OZChannel::deleteAllKeyframes(v19, &v28);
          }
          return (OZChannelBase *)OZChannel::setDefaultToCurrentValue(v19);
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v6 = (OZChannelBase *)((char *)this + 30352);
  }

  return OZChannelBase::setFlag(v6, 2, 0);
}

uint64_t OZImageElement::ptcSyncChangesDictionaryFromScript(OZImageElement *this)
{
  uint64_t v2 = (void *)*((void *)this + 3790);
  if (v2)
  {

    *((void *)this + 379OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 3791);
  if (v3)
  {

    *((void *)this + 379OZDocument::~OZDocument(this - 1) = 0;
  }
  *((void *)this + 379OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = objc_msgSend((id)objc_msgSend(*((id *)this + 3788), "changesDictionary"), "copy");
  uint64_t result = objc_msgSend((id)objc_msgSend(*((id *)this + 3789), "changesDictionary"), "copy");
  *((void *)this + 379OZDocument::~OZDocument(this - 1) = result;
  return result;
}

OZFootage *OZImageElement::ptcCopyScriptData(OZImageElement *this, id *a2)
{
  OZImageElement::ptcDeleteScriptData(this);
  *((void *)this + 3792) = [a2[3792] copy];
  *((void *)this + 3793) = [a2[3793] copy];
  *((void *)this + 379OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = [a2[3790] copy];
  *((void *)this + 379OZDocument::~OZDocument(this - 1) = [a2[3791] copy];

  return OZImageElement::ptcLoadCinematicScript(this);
}

void OZImageElement::ptcDeleteScriptData(OZImageElement *this)
{
  uint64_t v2 = (void *)*((void *)this + 3792);
  if (v2)
  {

    *((void *)this + 3792) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 3793);
  if (v3)
  {

    *((void *)this + 3793) = 0;
  }
  uint64_t v4 = (void *)*((void *)this + 3790);
  if (v4)
  {

    *((void *)this + 379OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  }
  unsigned __int8 v5 = (void *)*((void *)this + 3791);
  if (v5)
  {

    *((void *)this + 379OZDocument::~OZDocument(this - 1) = 0;
  }
  uint64_t v6 = (void *)*((void *)this + 3788);
  if (v6)
  {

    *((void *)this + 3788) = 0;
  }
  __n128 v7 = (void *)*((void *)this + 3789);
  if (v7)
  {

    *((void *)this + 3789) = 0;
  }
}

void *OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::increment(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 2;
  uint64_t v3 = *result;
  if (*result == result[2]) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void **)(v3 + 16);
  if ((*(unsigned int (**)(void *))(*v4 + 1056))(v4))
  {
    uint64_t v5 = *v1;
    uint64_t v13 = v4;
    double v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v5;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1104))(v4);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(void *))(*v4 + 960))(v4))
  {
    uint64_t v6 = *v1;
    uint64_t v13 = v4;
    double v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v6;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1024))(v4);
    *uint64_t v1 = result;
    return result;
  }
  __n128 v7 = *(void **)(*v1 + 8);
  uint64_t result = (void *)v4[120];
  if (!result || v7 == (void *)*v2)
  {
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = *result;
  if (*((unsigned char *)v1 + 24)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v8 + 1112))();
  }
  else {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v8 + 1032))();
  }
  if (v7 != result)
  {
LABEL_13:
    uint64_t v3 = *v1;
LABEL_14:
    *uint64_t v1 = *(void *)(v3 + 8);
    return result;
  }
  if (*((unsigned char *)v1 + 24)
    && (uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 960))(v4[120]), result))
  {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 1024))(v4[120]);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 0;
  }
  else
  {
    *((unsigned char *)v1 + 24) = 0;
    while (1)
    {
      uint64_t v4 = (void *)v4[120];
      if (!v4) {
        break;
      }
      double v14 = v4;
      uint64_t v9 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v14);
      unint64_t v10 = v9 + 3;
      if (!v9) {
        unint64_t v10 = v2;
      }
      uint64_t v11 = *v10;
      *uint64_t v1 = v11;
      uint64_t result = (void *)v4[120];
      if (result)
      {
        uint64_t v12 = *(void **)(v11 + 8);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
        if (v12 == result && v12 != (void *)*v2) {
          continue;
        }
      }
      goto LABEL_13;
    }
  }
  return result;
}

void initializeMotionInternal(void)
{
  OZCacheManager::setHosted((OZCacheManager *)1);
  PGInitPGContext();
  PGInitTextures();
  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v0);
  if (!theApp) {
    operator new();
  }
  PCAutoreleasePool::~PCAutoreleasePool(&v0);
}

void sub_1B7BF8E04(_Unwind_Exception *a1)
{
  PCAutoreleasePool::~PCAutoreleasePool((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

uint64_t OZXWaitForAsyncInitialization()
{
  {
  }
  else
  {
    initializeMotionInternal();
  }
}

void sub_1B7BF8EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t OZXSetHostDelegate(void *a1)
{
  return 1;
}

void sub_1B7BF8F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t OZXCopyDocument(void *a1, void *a2)
{
  *a2 = 0;
  if (a1 && *a1)
  {
    objc_opt_new();
    RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
    PCMutex::lock(RenderEngineMutex);
    operator new();
  }
  return 0;
}

void sub_1B7BF906C(void *a1)
{
}

void sub_1B7BF90A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCMutex *a9)
{
}

void OZXLoadDocument()
{
  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v2.var10);
  v2.unint64_t var8 = OZX_getRenderEngineMutex();
  PCMutex::lock((PCMutex *)v2.var8);
  LOBYTE(v2.var9) = 1;
  PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)&v2.var4);
  id v0 = (OZApplication *)theApp;
  if (!*(unsigned char *)(theApp + 80)) {
    *(unsigned char *)(theApp + 8OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1;
  }
  CurrentDoc = (OZDocument *)OZApplication::getCurrentDoc(v0);
  OZApplication::setPerThreadCurrentDoc((OZApplication *)theApp, CurrentDoc);
  OZApplication::newDocument((OZApplication *)theApp);
}

void sub_1B7BF9370(void *a1, int a2, int a3, char a4, OZChannelBase *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (!a11) {
    *(unsigned char *)(*(void *)v21 + 8OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  }
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)&a17);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!a21) {
    JUMPOUT(0x1B7BF9344);
  }
  JUMPOUT(0x1B7BF9338);
}

void sub_1B7BF9414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  PCConsoleLock::~PCConsoleLock((PCMutex **)va);
  JUMPOUT(0x1B7BF93BCLL);
}

uint64_t OZXOpenDocumentMedia(uint64_t a1)
{
  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v6);
  if (a1)
  {
    RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
    PCMutex::lock(RenderEngineMutex);
    uint64_t v3 = 1;
    uint64_t v4 = *(OZScene **)(*(void *)a1 + 24);
    if (v4)
    {
      uint64_t v3 = OZScene::openMedia(v4) != 0;
      if (!RenderEngineMutex) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    if (RenderEngineMutex) {
LABEL_7:
    }
      PCMutex::unlock(RenderEngineMutex);
  }
  else
  {
    uint64_t v3 = 7;
  }
LABEL_8:
  PCAutoreleasePool::~PCAutoreleasePool(&v6);
  return v3;
}

void sub_1B7BF94C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1B7BF94A4);
  }
  JUMPOUT(0x1B7BF9498);
}

void sub_1B7BF94EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, PCMutex *);
  uint64_t v5 = va_arg(va1, void);
  PCConsoleLock::~PCConsoleLock((PCMutex **)va);
  PCAutoreleasePool::~PCAutoreleasePool((id *)va1);
  _Unwind_Resume(a1);
}

void *OZScene::begin_t<OZFootageLayer,false,false>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZFootageLayer,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZFootageLayer,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
  }
  return result;
}

void sub_1B7BF95B8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZSceneNode::begin_t<OZFootage,false,true>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1024))(a1);
  uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032))(a1);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 24) = 0;
  if ((uint64_t *)v4 != result)
  {
    id v6 = *(const void **)(v4 + 16);
    if (!v6) {
      return OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7BF96D8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void OZXFreeDocument(void *a1, int a2)
{
  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v11);
  if (a1)
  {
    RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
    uint64_t v9 = RenderEngineMutex;
    PCMutex::lock(RenderEngineMutex);
    char v10 = 1;
    PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v8);
    id v6 = (OZChannelBase *)a1[1];
    if (v6)
    {
      uint64_t v7 = OZChannelBase::setRangeName(v6, v5);
      MEMORY[0x1BA9BFBA0](v7, 0xC400A2AC0F1);
    }
    a1[1] = 0;
    if (a2)
    {
      if (*a1) {
        (*(void (**)(void))(*(void *)*a1 + 8))(*a1);
      }
      *a1 = 0;
    }
    MEMORY[0x1BA9BFBA0](a1, 0xA0C40E93CF5C4);
    [+[PMObjectCache sharedInstance] clearCache];
    +[PMObjectCache releaseSharedInstance];
    PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v8);
    if (RenderEngineMutex) {
      PCMutex::unlock(RenderEngineMutex);
    }
  }
  PCAutoreleasePool::~PCAutoreleasePool(&v11);
}

void sub_1B7BF97F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a14) {
    JUMPOUT(0x1B7BF97D8);
  }
  JUMPOUT(0x1B7BF97CCLL);
}

void sub_1B7BF9844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCConsoleLock::~PCConsoleLock((PCMutex **)va);
  JUMPOUT(0x1B7BF9804);
}

void OZXGetRenderGraph(OZScene *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, GLRenderer *a4@<X3>, PCString *a5@<X5>, CGColorSpace **a6@<X8>)
{
  OZRenderParams::setFFInputContext(a2, a3);
  if (a5)
  {
    if (v11)
    {
      LiHelium::getDefaultGPU(v11, &v28);
      v27._pcColorDesc._colorSpaceRef._obuint64_t j = v28._pcColorDesc._colorSpaceRef._obj;
      *(void *)&v27._pcColorDesc._dynamicRange = *(void *)&v28._pcColorDesc._dynamicRange;
      if (*(void *)&v28._pcColorDesc._dynamicRange) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v28._pcColorDesc._dynamicRange + 8), 1uLL, memory_order_relaxed);
      }
      OZRenderParams::setRenderDevice(a2, (uint64_t *)&v27);
      if (*(void *)&v27._pcColorDesc._dynamicRange) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v27._pcColorDesc._dynamicRange);
      }
      if (*(void *)&v28._pcColorDesc._dynamicRange) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v28._pcColorDesc._dynamicRange);
      }
      uint64_t v12 = 0;
      goto LABEL_18;
    }
  }
  HGComputeDeviceManager::GetCPUComputeDevice(v11, &v28);
  v27._pcColorDesc._colorSpaceRef._obuint64_t j = v28._pcColorDesc._colorSpaceRef._obj;
  *(void *)&v27._pcColorDesc._dynamicRange = *(void *)&v28._pcColorDesc._dynamicRange;
  if (*(void *)&v28._pcColorDesc._dynamicRange) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v28._pcColorDesc._dynamicRange + 8), 1uLL, memory_order_relaxed);
  }
  OZRenderParams::setRenderDevice(a2, (uint64_t *)&v27);
  if (*(void *)&v27._pcColorDesc._dynamicRange) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v27._pcColorDesc._dynamicRange);
  }
  *(_DWORD *)(a2 + 32OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1;
  uint64_t v13 = *(std::__shared_weak_count **)&v28._pcColorDesc._dynamicRange;
  if (a5)
  {
    uint64_t v12 = 0;
    if (!*(void *)&v28._pcColorDesc._dynamicRange) {
      goto LABEL_17;
    }
  }
  else
  {
    obuint64_t j = (uint64_t)v28._pcColorDesc._colorSpaceRef._obj;
    float v30 = *(std::__shared_weak_count **)&v28._pcColorDesc._dynamicRange;
    if (*(void *)&v28._pcColorDesc._dynamicRange) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v28._pcColorDesc._dynamicRange + 8), 1uLL, memory_order_relaxed);
    }
    PGHelium::acquireRenderer(&obj, &v27);
    a5 = (PCString *)v27._pcColorDesc._colorSpaceRef._obj;
    uint64_t v12 = *(std::__shared_weak_count **)&v27._pcColorDesc._dynamicRange;
    v27._pcColorDesc._colorSpaceRef._obuint64_t j = 0;
    *(void *)&v27._pcColorDesc._dynamicRange = 0;
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    uint64_t v13 = *(std::__shared_weak_count **)&v28._pcColorDesc._dynamicRange;
    if (!*(void *)&v28._pcColorDesc._dynamicRange) {
      goto LABEL_17;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
LABEL_17:
  if (!a5)
  {
    long long v16 = (HGSolidColor *)HGObject::operator new(0x1A0uLL);
    HGSolidColor::HGSolidColor(v16);
  }
LABEL_18:
  int v14 = ((uint64_t (*)(PCString *, uint64_t))a5->var0[4].isa)(a5, 19);
  switch(v14)
  {
    case 24:
      HGUserJob::SetPriority(a2 + 1316, 0);
      unsigned int v15 = 5;
      break;
    case 27:
      HGUserJob::SetPriority(a2 + 1316, 2);
      unsigned int v15 = 13;
      break;
    case 28:
      HGUserJob::SetPriority(a2 + 1316, 3);
      unsigned int v15 = 16;
      break;
    default:
      unsigned int v15 = 3;
      break;
  }
  *(_DWORD *)(a2 + 216) = v15;
  *(_DWORD *)(a2 + 34OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v15;
  *(_OWORD *)(a2 + 392) = 0u;
  *(_OWORD *)(a2 + 408) = 0u;
  int BitsPerChannel = PCPixelFormat::getBitsPerChannel(v15);
  OZRenderParams::setDepth((OZRenderParams *)a2, BitsPerChannel);
  int isRenderForHDR_Deprecated = OZRenderParams::isRenderForHDR_Deprecated((OZRenderParams *)a2);
  OZScene::setRawWorkingGamut((uint64_t)a1, isRenderForHDR_Deprecated);
  obuint64_t j = 0;
  RenderModel = (PCRenderModel *)OZScene::getRenderModel(a1);
  if (!PCRenderModel::is_iOS(RenderModel))
  {
    uint64_t WorkingColorDescription = OZRenderParams::getWorkingColorDescription((OZRenderParams *)a2);
    (*(void (**)(FxColorDescription *__return_ptr, OZScene *))(*(void *)a1 + 136))(&v28, a1);
    LODWORD(WorkingColorDescription) = operator!=(WorkingColorDescription, (uint64_t)&v28, v21);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v28._pcColorDesc._colorSpaceRef._obj);
    if (WorkingColorDescription)
    {
      OutputColorDescription = OZRenderParams::getOutputColorDescription((OZRenderParams *)a2);
      long long v23 = *(CGColorSpace **)OutputColorDescription;
      v28._pcColorDesc._colorSpaceRef._obuint64_t j = v23;
      if (v23) {
        PCCFRefTraits<CGColorSpace *>::retain(v23);
      }
      uint64_t v24 = *((void *)OutputColorDescription + 1);
      v28._pcColorDesc._toneMapMethod._gain = *((float *)OutputColorDescription + 4);
      *(void *)&v28._pcColorDesc._dynamicRange = v24;
      v28._isPremultiplied = OutputColorDescription[24];
      (*(void (**)(FxColorDescription *__return_ptr, OZScene *))(*(void *)a1 + 136))(&v27, a1);
      OZRenderParams::setWorkingColorDescription((CGColorSpace **)a2, &v27);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v27._pcColorDesc._colorSpaceRef._obj);
      OZRenderParams::setOutputColorDescription((CGColorSpace **)a2, &v28);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v28._pcColorDesc._colorSpaceRef._obj);
    }
  }
  GLRenderer::getFrameNode(a4, a1, (HGRenderJob *)a2, a5, &obj, (uint64_t *)&v28);
  CMTime v25 = v28._pcColorDesc._colorSpaceRef._obj;
  if (obj)
  {
    CMTime v26 = (HGNode *)HGObject::operator new(0x1A0uLL);
    HGNode::HGNode(v26);
    if (v25 == (CGColorSpace *)v26)
    {
      if (v25) {
        (*(void (**)(CGColorSpace *))(*(void *)v25 + 24))(v25);
      }
    }
    else
    {
      if (v25) {
        (*(void (**)(CGColorSpace *))(*(void *)v25 + 24))(v25);
      }
      CMTime v25 = (CGColorSpace *)v26;
    }
  }
  *a6 = v25;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1B7BF9CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 24))(v20);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
  }
  _Unwind_Resume(exception_object);
}

void OZXGetDocInfo(uint64_t a1, uint64_t a2)
{
  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v10);
  if (a1 && *(void *)a1)
  {
    RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
    PCMutex::lock(RenderEngineMutex);
    uint64_t v5 = *(void *)(*(void *)a1 + 24);
    *(void *)(a2 + 144) = 0;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 8OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(void *)(a2 + 4) = *(void *)(v5 + 344);
    BOOL v6 = OZSceneSettings::is360Project((OZSceneSettings *)(v5 + 336));
    *(_DWORD *)(a2 + 12) = v6;
    int BitDepth = OZSceneSettings::getBitDepth((OZSceneSettings *)v6);
    *(_DWORD *)(a2 + 16) = PCBitDepth::getBitsPerChannel(BitDepth);
    *(_DWORD *)(a2 + 2OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 4;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(v5 + 352);
    *(void *)(a2 + 32) = *(void *)(v5 + 368);
    *(_DWORD *)(a2 + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *(unsigned __int8 *)(v5 + 376);
    *(void *)(a2 + 48) = *(void *)(v5 + 384);
    *(_DWORD *)(a2 + 56) = 0;
    if (!*(unsigned char *)(*(void *)a1 + 160) || (int v8 = *(_DWORD *)(v5 + 688)) == 0 || v8 == 2 && *(_DWORD *)(v5 + 480))
    {
      int v9 = *(_DWORD *)(v5 + 480);
      if ((v9 - 1) < 2) {
        *(_DWORD *)(a2 + 56) = v9;
      }
    }
    *(void *)(a2 + 6OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *(void *)(v5 + 528);
    *(void *)(a2 + 72) = *(void *)(v5 + 536);
    *(_DWORD *)a2 = 1;
    if (RenderEngineMutex) {
      PCMutex::unlock(RenderEngineMutex);
    }
  }
  PCAutoreleasePool::~PCAutoreleasePool(&v10);
}

void sub_1B7BF9F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  PCAutoreleasePool::~PCAutoreleasePool((id *)va);
  _Unwind_Resume(a1);
}

void sub_1B7BF9F54(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1B7BF9F20);
  }
  JUMPOUT(0x1B7BF9F14);
}

void sub_1B7BF9F74(uint64_t a1, ...)
{
  va_start(va, a1);
  PCConsoleLock::~PCConsoleLock((PCMutex **)va);
  JUMPOUT(0x1B7BF9F44);
}

uint64_t OZXGetSceneDuration(uint64_t a1, _DWORD *a2, void *a3, __n128 *a4)
{
  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v16);
  if (a1 && *(void *)a1)
  {
    RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
    int v14 = RenderEngineMutex;
    PCMutex::lock(RenderEngineMutex);
    char v15 = 1;
    uint64_t v9 = *(void *)(*(void *)a1 + 24);
    *a2 = *(_DWORD *)(v9 + 352);
    *a3 = *(void *)(v9 + 368);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), &v12);
    uint64_t v10 = 0;
    *a4 = v12;
    a4[1].n128_u64[0] = v13;
    if (RenderEngineMutex) {
      PCMutex::unlock(RenderEngineMutex);
    }
  }
  else
  {
    uint64_t v10 = 7;
  }
  PCAutoreleasePool::~PCAutoreleasePool(&v16);
  return v10;
}

void sub_1B7BFA058(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    JUMPOUT(0x1B7BFA030);
  }
  JUMPOUT(0x1B7BFA01CLL);
}

void sub_1B7BFA07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, PCMutex *);
  uint64_t v7 = va_arg(va1, void);
  PCConsoleLock::~PCConsoleLock((PCMutex **)va);
  PCAutoreleasePool::~PCAutoreleasePool((id *)va1);
  _Unwind_Resume(a1);
}

void *OZXSetTargetDisplayAspectRatio(void *result, double a2)
{
  if (result)
  {
    OZChannelBase v2 = result;
    if (*result)
    {
      RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
      PCMutex::lock(RenderEngineMutex);
      uint64_t v5 = *(void *)(*v2 + 24);
      if (v5) {
        OZScene::setTargetDisplayAspectRatio(v5, a2, 0, 0);
      }
      return (void *)PCMutex::unlock(RenderEngineMutex);
    }
  }
  return result;
}

void sub_1B7BFA11C(void *a1)
{
}

void sub_1B7BFA128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCMutex *a9)
{
}

void *OZXSetTargetDisplayAspectRatioWithNativeSize(void *result, double a2, double a3, double a4)
{
  if (result)
  {
    uint64_t v4 = result;
    if (*result)
    {
      RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
      PCMutex::lock(RenderEngineMutex);
      uint64_t v9 = *(void *)(*v4 + 24);
      if (v9) {
        OZScene::setTargetDisplayAspectRatioWithNativeSize(v9, a2, a3, a4, 0);
      }
      return (void *)PCMutex::unlock(RenderEngineMutex);
    }
  }
  return result;
}

void sub_1B7BFA1D0(void *a1)
{
}

void sub_1B7BFA1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCMutex *a9)
{
}

uint64_t OZXMarkerCount(uint64_t result)
{
  if (result)
  {
    if (*(void *)result) {
      return *(unsigned int *)(*(void *)(*(void *)(*(void *)result + 24) + 1136) + 24);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t OZXGetMarkerFigTimeOfType(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 24);
  uint64_t v5 = *(void **)(v4 + 1136);
  if (v5[3] <= (unint64_t)a2) {
    return 11;
  }
  int v8 = (void *)v5[1];
  uint64_t v9 = v5 + 2;
  BOOL v10 = v8 != v9;
  BOOL v11 = v8 == v9 || a2 == 0;
  if (!v11)
  {
    do
    {
      __n128 v12 = (void *)v8[1];
      unint64_t v13 = v8;
      if (v12)
      {
        do
        {
          int v8 = v12;
          __n128 v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v8 = (void *)v13[2];
          BOOL v11 = *v8 == (void)v13;
          unint64_t v13 = v8;
        }
        while (!v11);
      }
      BOOL v10 = v8 != v9;
      if (v8 == v9) {
        break;
      }
      --a2;
    }
    while (a2);
  }
  if (!v10) {
    return 11;
  }
  __n128 v22 = 0uLL;
  uint64_t v23 = 0;
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), &v22);
  int v14 = *((_DWORD *)v8 + 27);
  if (a3 != -1 && v14 != a3) {
    return 11;
  }
  long long v16 = *(_OWORD *)(v8 + 5);
  *(void *)(a4 + 16) = v8[7];
  *(_OWORD *)a4 = v16;
  long long v17 = *((_OWORD *)v8 + 4);
  *(void *)(a4 + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v8[10];
  *(_OWORD *)(a4 + 24) = v17;
  *(_DWORD *)(a4 + 64) = *((_DWORD *)v8 + 26);
  *(_DWORD *)(a4 + 68) = v14;
  Label = (PCString *)OZTimeMarker::getLabel((OZTimeMarker *)(v8 + 4));
  uint64_t v19 = PCString::cf_str(Label);
  *(void *)(a4 + 48) = CFStringCreateCopy(0, v19);
  uint64_t v20 = PCString::cf_str((PCString *)v8 + 12);
  CFStringRef Copy = CFStringCreateCopy(0, v20);
  uint64_t result = 0;
  *(void *)(a4 + 56) = Copy;
  return result;
}

void sub_1B7BFA374(void *a1)
{
}

uint64_t OZXGetMarkerFigTime(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return OZXGetMarkerFigTimeOfType(a1, a2, -1, a3);
}

uint64_t OZXGetDropZone(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  *a3 = 0;
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(OZScene **)(*(void *)a1 + 24);
  if (!v3) {
    return 7;
  }
  OZScene::getAllDropZones(v3, &v8);
  BOOL v6 = v8;
  if (a2 >= (unint64_t)((v9 - v8) >> 2))
  {
    if (v8)
    {
      uint64_t v9 = v8;
      operator delete(v8);
    }
    return 11;
  }
  else
  {
    *a3 = *(_DWORD *)&v8[4 * a2];
    uint64_t v9 = v6;
    operator delete(v6);
    return 0;
  }
}

void sub_1B7BFA420(void *a1)
{
}

uint64_t OZXGetDropZoneIDMap(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (a2 && v3)
  {
    OZScene::getAllDropZonesMap(*(OZScene **)(*(void *)a1 + 24), (uint64_t)&v8);
    uint64_t v4 = a2 + 8;
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a2, *(void **)(a2 + 8));
    uint64_t v5 = v9;
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v5;
    uint64_t v6 = v10;
    *(void *)(a2 + 16) = v10;
    if (v6)
    {
      v5[2] = v4;
      int v8 = &v9;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v5 = 0;
    }
    else
    {
      *(void *)a2 = v4;
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v8, v5);
  }
  if (v3) {
    return 0;
  }
  else {
    return 7;
  }
}

void sub_1B7BFA4F0(void *a1)
{
}

uint64_t OZXIsValidImageSequencePath(uint64_t a1)
{
  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v25);
  if (a1 && *(void *)a1)
  {
    RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
    v23[5] = RenderEngineMutex;
    PCMutex::lock(RenderEngineMutex);
    char v24 = 1;
    uint64_t v3 = *(void **)(*(void *)a1 + 24);
    if (!v3)
    {
      uint64_t v7 = 7;
      if (!RenderEngineMutex) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    OZScene::begin_t<OZFootageLayer,false,false>(v3, (uint64_t)v22);
    uint64_t v4 = v3[151];
    memset(v20, 0, sizeof(v20));
    int v21 = 1065353216;
    v18[5] = v3 + 150;
    v18[6] = v4;
    v18[7] = v3 + 150;
    char v19 = 0;
    if ((void *)v22[0] == v3 + 150)
    {
      uint64_t v7 = 0;
    }
    else
    {
      if (v22[0] == v22[2] || (uint64_t v5 = *(const void **)(v22[0] + 16)) == 0) {
        uint64_t v6 = 0;
      }
      else {
      OZSceneNode::begin_t<OZFootage,false,true>((uint64_t)v6, (uint64_t)v17);
      }
      (*(void (**)(void *))(*(void *)v6 + 1024))(v6);
      uint64_t v8 = (*(uint64_t (**)(void *))(*(void *)v6 + 1032))(v6);
      uint64_t v7 = 0;
      memset(v15, 0, sizeof(v15));
      int v16 = 1065353216;
      uint64_t v14 = v8;
      while (!v7 && v17[0] != v14)
      {
        uint64_t v10 = (const __CFURL **)(*(uint64_t (**)(void))(v9 + 1408))();
        uint64_t v7 = (uint64_t)v10;
        if (v10)
        {
          if (PCURL::isSequence(v10))
          {
            int SequenceStart = PCURL::getSequenceStart((const __CFURL **)v7);
            URLforIndex = (id *)PCURL::getURLforIndex((const __CFURL **)v7, SequenceStart);
            if (URLforIndex)
            {
              if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "isReadableFileAtPath:", objc_msgSend(*URLforIndex, "path")))uint64_t v7 = 0; {
              else
              }
                uint64_t v7 = 3;
            }
            else
            {
              uint64_t v7 = 3;
            }
          }
          else
          {
            uint64_t v7 = 0;
          }
        }
        OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++(v17);
      }
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v15);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v18);
    }
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v20);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v23);
    if (RenderEngineMutex) {
LABEL_27:
    }
      PCMutex::unlock(RenderEngineMutex);
  }
  else
  {
    uint64_t v7 = 7;
  }
LABEL_28:
  PCAutoreleasePool::~PCAutoreleasePool(&v25);
  return v7;
}

void sub_1B7BFA840(void *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2 - 144);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!*(void *)(v2 - 104)) {
    JUMPOUT(0x1B7BFA814);
  }
  JUMPOUT(0x1B7BFA808);
}

void sub_1B7BFA8D0()
{
  PCConsoleLock::~PCConsoleLock((PCMutex **)(v0 - 104));
  JUMPOUT(0x1B7BFA860);
}

uint64_t OZXSetImageSequencePath(uint64_t a1, PCString *a2)
{
  PCAutoreleasePool::PCAutoreleasePool((PCAutoreleasePool *)&v33);
  if (!a1 || !*(void *)a1)
  {
    uint64_t v4 = 7;
    goto LABEL_6;
  }
  if (PCString::empty(a2))
  {
    uint64_t v4 = 11;
    goto LABEL_6;
  }
  RenderEngineMutex = (PCMutex *)OZX_getRenderEngineMutex();
  v31[5] = RenderEngineMutex;
  PCMutex::lock(RenderEngineMutex);
  char v32 = 1;
  uint64_t v7 = *(void **)(*(void *)a1 + 24);
  if (!v7)
  {
    uint64_t v4 = 7;
    if (!RenderEngineMutex) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
  OZScene::begin_t<OZFootageLayer,false,false>(v7, (uint64_t)v30);
  uint64_t v8 = v7[151];
  memset(v28, 0, sizeof(v28));
  int v29 = 1065353216;
  v26[5] = v7 + 150;
  v26[6] = v8;
  v26[7] = v7 + 150;
  char v27 = 0;
  if ((void *)v30[0] != v7 + 150)
  {
    if (v30[0] == v30[2] || (uint64_t v9 = *(const void **)(v30[0] + 16)) == 0) {
      uint64_t v10 = 0;
    }
    else {
    OZSceneNode::begin_t<OZFootage,false,true>((uint64_t)v10, (uint64_t)v25);
    }
    uint64_t v11 = (*(uint64_t (**)(void *))(*(void *)v10 + 1024))(v10);
    uint64_t v12 = (*(uint64_t (**)(void *))(*(void *)v10 + 1032))(v10);
    memset(v23, 0, sizeof(v23));
    int v24 = 1065353216;
    uint64_t v19 = v12;
    uint64_t v20 = v11;
    uint64_t v21 = v12;
    char v22 = 0;
    while (v25[0] != v19)
    {
      uint64_t v14 = (const __CFURL **)(*(uint64_t (**)(void))(*(void *)v13 + 1424))();
      char v15 = v14;
      if (v14 && PCURL::isSequence(v14))
      {
        PCURL::getFilename(v15, &v18);
        PCString::PCString(&v17, a2);
        PCString::append(&v17, "/");
        PCString::append(&v17, &v18);
        PCURL::PCURL((PCURL *)&v16, &v17, 0);
        (*(void (**)(void *, uint64_t *))(*(void *)v13 + 1400))(v13, &v16);
        PCURL::~PCURL((PCURL *)&v16);
        PCString::~PCString(&v17);
        PCString::~PCString(&v18);
      }
      OZObject::iterator_t<OZFootage,false,true,OZObject::defaultValidator>::operator++(v25);
    }
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v23);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v26);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v28);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v31);
  uint64_t v4 = 0;
  if (RenderEngineMutex) {
LABEL_23:
  }
    PCMutex::unlock(RenderEngineMutex);
LABEL_6:
  PCAutoreleasePool::~PCAutoreleasePool(&v33);
  return v4;
}

void sub_1B7BFAC68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v21);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v22 - 144);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!*(void *)(v22 - 104)) {
    JUMPOUT(0x1B7BFA938);
  }
  JUMPOUT(0x1B7BFAC58);
}

void sub_1B7BFAD2C()
{
  PCConsoleLock::~PCConsoleLock((PCMutex **)(v0 - 104));
  JUMPOUT(0x1B7BFAC8CLL);
}

uint64_t OZXSetDropZoneOpacityAnimation(uint64_t a1, unsigned int a2, double a3, double a4)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v4 = *(OZScene **)(*(void *)a1 + 24);
  if (!v4) {
    return 7;
  }
  Object = (const void *)OZScene::getObject(v4, a2);
  if (!Object) {
    return 11;
  }
  if (!v8) {
    return 11;
  }
  uint64_t v9 = (OZChannel *)(v8 + 6680);
  FirstEnabledKeyframe = (void *)OZChannel::getFirstEnabledKeyframe((OZChannel *)(v8 + 6680));
  OZChannel::setKeyframeValue(v9, FirstEnabledKeyframe, a3);
  LastEnabledKeyframe = (void *)OZChannel::getLastEnabledKeyframe(v9);
  OZChannel::setKeyframeValue(v9, LastEnabledKeyframe, a4);
  return 0;
}

uint64_t OZXSetDropZoneScaleAnimation(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v6 = *(OZScene **)(*(void *)a1 + 24);
  if (!v6) {
    return 7;
  }
  Object = (const void *)OZScene::getObject(v6, a2);
  if (!Object) {
    return 11;
  }
  if (!v12) {
    return 11;
  }
  unint64_t v13 = (OZChannel *)v12;
  uint64_t v14 = (OZChannel *)(v12 + 4576);
  FirstEnabledKeyframe = (void *)OZChannel::getFirstEnabledKeyframe((OZChannel *)(v12 + 4576));
  OZChannel::setKeyframeValue(v14, FirstEnabledKeyframe, a3);
  unint64_t v13 = (OZChannel *)((char *)v13 + 4728);
  uint64_t v16 = (void *)OZChannel::getFirstEnabledKeyframe(v13);
  OZChannel::setKeyframeValue(v13, v16, a4);
  LastEnabledKeyframe = (void *)OZChannel::getLastEnabledKeyframe(v14);
  OZChannel::setKeyframeValue(v14, LastEnabledKeyframe, a5);
  PCString v18 = (void *)OZChannel::getLastEnabledKeyframe(v13);
  OZChannel::setKeyframeValue(v13, v18, a6);
  return 0;
}

uint64_t OZXSetDropZoneTranslationAnimation(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v6 = *(OZScene **)(*(void *)a1 + 24);
  if (!v6) {
    return 7;
  }
  Object = (const void *)OZScene::getObject(v6, a2);
  if (!Object) {
    return 11;
  }
  if (!v12) {
    return 11;
  }
  unint64_t v13 = (OZChannel *)v12;
  uint64_t v14 = (OZChannel *)(v12 + 1352);
  FirstEnabledKeyframe = (void *)OZChannel::getFirstEnabledKeyframe((OZChannel *)(v12 + 1352));
  OZChannel::setKeyframeValue(v14, FirstEnabledKeyframe, a3);
  unint64_t v13 = (OZChannel *)((char *)v13 + 1504);
  uint64_t v16 = (void *)OZChannel::getFirstEnabledKeyframe(v13);
  OZChannel::setKeyframeValue(v13, v16, a4);
  LastEnabledKeyframe = (void *)OZChannel::getLastEnabledKeyframe(v14);
  OZChannel::setKeyframeValue(v14, LastEnabledKeyframe, a5);
  PCString v18 = (void *)OZChannel::getLastEnabledKeyframe(v13);
  OZChannel::setKeyframeValue(v13, v18, a6);
  return 0;
}

uint64_t OZXSetShapeRGBColor(uint64_t a1, double a2, double a3, double a4)
{
  if (!a1) {
    return 7;
  }
  if (!*(void *)a1) {
    return 7;
  }
  uint64_t v4 = *(OZScene **)(*(void *)a1 + 24);
  if (!v4) {
    return 7;
  }
  OZScene::begin(*(OZScene **)(*(void *)a1 + 24), (uint64_t)v21);
  OZScene::end_sel(v4, (uint64_t)v19);
  float v8 = a2;
  float v9 = a3;
  float v10 = a4;
  uint64_t v11 = 4;
  uint64_t v12 = MEMORY[0x1E4F1FA48];
  while (v21[0] != v19[0])
  {
    if (v21[0] != v21[2])
    {
      unint64_t v13 = *(const void **)(v21[0] + 16);
      if (v13)
      {
        if (v14)
        {
          char v15 = v14;
          DeviceRGB = CGColorSpaceCreateDeviceRGB();
          PCColor::PCColor(&v18, v8, v9, v10, 1.0, DeviceRGB);
          (*(void (**)(void *, uint64_t, PCColor *, uint64_t))(v15[3270] + 840))(v15 + 3270, v12, &v18, 1);
          CGColorSpaceRelease(DeviceRGB);
          PCCFRef<CGColorSpace *>::~PCCFRef(&v18.var1._obj);
          uint64_t v11 = 0;
        }
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v21);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v20);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v22);
  return v11;
}

void sub_1B7BFB25C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
}

void *OZObject::iterator_t<OZFootageLayer,false,false,OZObject::defaultValidator>::operator++(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = *(void *)(*a1 + 8);
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    uint64_t v4 = *(const void **)(v3 + 16);
    if (v4
    {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 8);
  }
  return a1;
}

uint64_t OZX_getRenderEngineMutex(void)
{
}

void OZX_prepareForRender(void *a1, CMTime *a2, int a3, int a4, int a5, float a6, float a7, uint64_t a8, uint64_t a9, char a10, unsigned int a11, int a12, char a13, unsigned int a14, HGComputeDeviceManager *a15)
{
  HIDWORD(v76) = a3;
  OZCacheManager::setConservative(1);
  if ((a13 & 1) == 0)
  {
    v83[0] = 0;
    BOOL MemoryInfo = PCInfo::getMemoryInfo(0, 0, 0, 0, 0, 0, 0, v83, v76);
    if (v83[0] >= 0xC0000001)
    {
      uint64_t v20 = (OZCacheManager *)OZCacheManager::Instance((OZCacheManager *)MemoryInfo);
      OZCacheManager::clearTextureCache(v20);
      uint64_t v22 = (OZCacheManager *)OZCacheManager::Instance(v21);
      OZCacheManager::clearMetalTextureCache(v22);
      int v24 = (ProShade::Snippet *)OZSceneList::instance(v23);
      id v25 = (PCMutex *)ProShade::Snippet::code(v24);
      long long v105 = v25;
      CMTime v26 = (OZSceneList *)PCMutex::lock(v25);
      LOBYTE(v106) = 1;
      char v27 = (OZChannelBase *)OZSceneList::instance(v26);
      LabelCtlrClassuint64_t Name = OZChannelBase::getLabelCtlrClassName(v27);
      int v29 = (OZSceneList *)OZSceneList::instance((OZSceneList *)LabelCtlrClassName);
      uint64_t v30 = OZSceneList::end(v29);
      if (LabelCtlrClassName != (__CFString *)v30)
      {
        do
        {
          isa = (OZScene *)LabelCtlrClassName[1].isa;
          char v32 = (PGContext *)PGGetPerThreadContext();
          OZScene::reloadResources(isa, v32);
          info = (char *)LabelCtlrClassName->info;
          if (info)
          {
            do
            {
              data = info;
              info = *(char **)info;
            }
            while (info);
          }
          else
          {
            do
            {
              data = LabelCtlrClassName->data;
              BOOL v35 = *(void *)data == (void)LabelCtlrClassName;
              LabelCtlrClassuint64_t Name = (__CFString *)data;
            }
            while (!v35);
          }
          LabelCtlrClassuint64_t Name = (__CFString *)data;
        }
        while (data != (char *)v30);
      }
      long long v36 = (ProGL *)PCMutex::unlock(v25);
      ProGL::clearTexturePool(v36);
    }
  }
  PGPerThreadSetCurrentContextSentry::PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v118);
  CMTimeRange v37 = *(OZScene **)(*a1 + 24);
  OZSceneSettings::OZSceneSettings((OZSceneSettings *)&v105, (OZScene *)((char *)v37 + 336));
  if (!a1[1]) {
    operator new();
  }
  PCImageAttributes::PCImageAttributes((PCImageAttributes *)&v99);
  if (a12) {
    int v38 = 2;
  }
  else {
    int v38 = 1;
  }
  uint64_t v100 = v106;
  uint64_t v101 = 0x400000008;
  int v99 = v38;
  int v102 = 3;
  int v104 = 3553;
  LiRenderingTechnology::LiRenderingTechnology((LiRenderingTechnology *)&v97);
  switch(a5)
  {
    case 0:
      int BitsPerChannel = PCBitDepth::getBitsPerChannel(0);
      int v40 = 3;
      goto LABEL_22;
    case 1:
      int BitsPerChannel = PCBitDepth::getBitsPerChannel(2);
      int v40 = 13;
      goto LABEL_22;
    case 2:
      int BitsPerChannel = PCBitDepth::getBitsPerChannel(3);
      int v40 = 16;
LABEL_22:
      LODWORD(v10OZDocument::~OZDocument(this - 1) = BitsPerChannel;
      goto LABEL_24;
  }
  int v40 = 3;
LABEL_24:
  int v102 = v40;
  CMTimeEpoch epoch = a2->epoch;
  *(_OWORD *)a15 = *(_OWORD *)&a2->value;
  *((void *)a15 + 2) = epoch;
  *(_OWORD *)((char *)a15 + 392) = 0uLL;
  *(double *)double v83 = a6;
  *(double *)&v83[1] = a7;
  OZRenderParams::setResolution(a15, v83);
  OZRenderParams::setImageAttr((uint64_t)a15, (uint64_t)&v99);
  uint64_t v42 = (_OWORD *)((char *)a15 + 392);
  *((unsigned char *)a15 + 488) = a4;
  *((void *)a15 + 5) = v107;
  long long v43 = v109;
  *(_OWORD *)((char *)a15 + 52OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v108;
  *(_OWORD *)((char *)a15 + 536) = v43;
  *(_OWORD *)((char *)a15 + 552) = v110;
  *(_OWORD *)((char *)a15 + 392) = 0u;
  *(_OWORD *)((char *)a15 + 408) = 0u;
  float v44 = PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)a15 + 71, &v111);
  *((_DWORD *)a15 + 144) = v112;
  long long v45 = v98[0];
  *(_OWORD *)((char *)a15 + 1316) = v97;
  *(_OWORD *)((char *)a15 + 1332) = v45;
  *(_OWORD *)((char *)a15 + 1346) = *(_OWORD *)((char *)v98 + 14);
  *((_DWORD *)a15 + 54) = v40;
  *(_OWORD *)((char *)a15 + 392) = 0u;
  *(_OWORD *)((char *)a15 + 408) = 0u;
  v96[0] = 0;
  v96[1] = 0;
  if (a12)
  {
    HGComputeDeviceManager::GetGPUComputeDeviceForCGLVirtualScreen((HGComputeDeviceManager *)a14, v83);
    long long v46 = *(_OWORD *)v83;
    v83[0] = 0;
    v83[1] = 0;
    int v47 = (std::__shared_weak_count *)v96[1];
    *(_OWORD *)uint64_t v96 = v46;
    if (v47)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      int v47 = (std::__shared_weak_count *)v83[1];
      if (v83[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v83[1]);
      }
      if (v96[0]) {
        goto LABEL_38;
      }
    }
    else if ((void)v46)
    {
      goto LABEL_38;
    }
    GPUComputeDeviceList = HGComputeDeviceManager::GetGPUComputeDeviceList((HGComputeDeviceManager *)v47);
    uint64_t v53 = *(HGComputeDeviceManager **)*GPUComputeDeviceList;
    uint64_t v52 = *(atomic_ullong **)(*GPUComputeDeviceList + 8);
    if (v52) {
      atomic_fetch_add_explicit(v52 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v50 = (std::__shared_weak_count *)v96[1];
    v96[0] = v53;
    v96[1] = (HGComputeDeviceManager *)v52;
    if (v50) {
      goto LABEL_37;
    }
  }
  else
  {
    HGComputeDeviceManager::GetCPUComputeDevice((HGComputeDeviceManager *)v44, v83);
    long long v48 = *(_OWORD *)v83;
    v83[0] = 0;
    v83[1] = 0;
    uint64_t v49 = (std::__shared_weak_count *)v96[1];
    *(_OWORD *)uint64_t v96 = v48;
    if (v49)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      uint64_t v50 = (std::__shared_weak_count *)v83[1];
      if (v83[1]) {
LABEL_37:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
  }
LABEL_38:
  OZRenderParams::setRenderDevice((uint64_t)a15, (uint64_t *)v96);
  (*(void (**)(FxColorDescription *__return_ptr, OZScene *))(*(void *)v37 + 136))(&space, v37);
  v94._pcColorDesc._colorSpaceRef._obuint64_t j = space._pcColorDesc._colorSpaceRef._obj;
  if (space._pcColorDesc._colorSpaceRef._obj) {
    PCCFRefTraits<CGColorSpace *>::retain(space._pcColorDesc._colorSpaceRef._obj);
  }
  *(void *)&v94._pcColorDesc._dynamicRange = *(void *)&space._pcColorDesc._dynamicRange;
  v94._pcColorDesc._toneMapMethod._gain = space._pcColorDesc._toneMapMethod._gain;
  v94._isPremultiplied = space._isPremultiplied;
  OZRenderParams::setOutputColorDescription((CGColorSpace **)a15, &v94);
  OZRenderParams::setWorkingColorDescription((CGColorSpace **)a15, &space);
  float v54 = (*(float (**)(OZScene *))(*(void *)v37 + 144))(v37);
  OZRenderParams::setBlendingGamma((uint64_t)a15, v54);
  OZRenderParams::setRenderIsForHDR_Deprecated((uint64_t)a15, a10);
  if (a11 >= 2) {
    int v55 = 2;
  }
  else {
    int v55 = a11;
  }
  OZRenderParams::setStillImageInverseToneMapOperator_Deprecated((uint64_t)a15, v55);
  *((void *)a15 + 8OZDocument::~OZDocument(this - 1) = 0;
  *((int32x2_t *)a15 + 82) = vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32((float32x2_t)__PAIR64__(LODWORD(a7), LODWORD(a6)), vcvt_f32_s32((int32x2_t)v106))), (float64x2_t)0))));
  uint64_t v56 = *(void *)(*a1 + 8 * *(int *)(*(void *)(*a1 + 224) + 12) + 192);
  OZExportSettings::OZExportSettings((OZExportSettings *)v83, (OZScene *)((char *)v37 + 640));
  if (!*(unsigned char *)(*a1 + 160))
  {
    if (HIDWORD(v76) == 1)
    {
      int v64 = 2;
      OZRenderParams::setRenderQuality((uint64_t)a15, 2);
    }
    else
    {
      if (HIDWORD(v76) == 2)
      {
        OZRenderParams::setRenderQuality((uint64_t)a15, 6);
        OZRenderParams::setTextRenderQuality((uint64_t)a15, 6);
        OZRenderParams::setDoHighQualityResampling(a15, 1);
        char v59 = 1;
        OZRenderParams::setDoShapeAntialiasing(a15, 1);
LABEL_64:
        OZRenderParams::setDo3DIntersectionAntialiasing(a15, v59);
        goto LABEL_65;
      }
      OZRenderParams::setRenderQuality((uint64_t)a15, 0);
      int v64 = 0;
    }
    OZRenderParams::setTextRenderQuality((uint64_t)a15, v64);
    OZRenderParams::setDoHighQualityResampling(a15, 0);
    OZRenderParams::setDoShapeAntialiasing(a15, 1);
    char v59 = 0;
    goto LABEL_64;
  }
  int RenderQuality = OZExportSettings::getRenderQuality((OZExportSettings *)v83);
  if (RenderQuality == 10) {
    int v58 = *(_DWORD *)(v56 + 64);
  }
  else {
    int v58 = OZExportSettings::getRenderQuality((OZExportSettings *)v83);
  }
  OZRenderParams::setRenderQuality((uint64_t)a15, v58);
  if (RenderQuality == 10) {
    int v60 = *(_DWORD *)(v56 + 68);
  }
  else {
    int v60 = v84;
  }
  OZRenderParams::setTextRenderQuality((uint64_t)a15, v60);
  if (RenderQuality == 10) {
    int v61 = *(unsigned __int8 *)(v56 + 72);
  }
  else {
    int v61 = v85;
  }
  OZRenderParams::setDoHighQualityResampling(a15, v61 != 0);
  char v62 = (char *)(v56 + 73);
  if (RenderQuality != 10) {
    char v62 = v86;
  }
  OZRenderParams::setDoShapeAntialiasing(a15, *v62);
  int v63 = (char *)(v56 + 74);
  if (RenderQuality != 10) {
    int v63 = &v86[1];
  }
  OZRenderParams::setDo3DIntersectionAntialiasing(a15, *v63);
LABEL_65:
  if (v87 == 2) {
    BOOL v65 = *(unsigned char *)(v56 + 76) != 0;
  }
  else {
    BOOL v65 = v87 == 0;
  }
  *((unsigned char *)a15 + 496) = v65;
  *((_DWORD *)a15 + 125) = v114;
  *((void *)a15 + 63) = v115;
  _OWORD *v42 = 0u;
  *(_OWORD *)((char *)a15 + 408) = 0u;
  if (v88 == 2) {
    BOOL v66 = *(unsigned char *)(v56 + 77) != 0;
  }
  else {
    BOOL v66 = v88 == 0;
  }
  *((unsigned char *)a15 + 513) = v66;
  if (v90 == 2) {
    BOOL v67 = *(unsigned char *)(v56 + 78) != 0;
  }
  else {
    BOOL v67 = v90 == 0;
  }
  *((unsigned char *)a15 + 514) = v67;
  if (v91 == 2) {
    BOOL v68 = *(unsigned char *)(v56 + 79) != 0;
  }
  else {
    BOOL v68 = v91 == 0;
  }
  *((unsigned char *)a15 + 515) = v68;
  if (v92 == 2) {
    BOOL v69 = *(unsigned char *)(v56 + 80) != 0;
  }
  else {
    BOOL v69 = v92 == 0;
  }
  *((unsigned char *)a15 + 516) = v69;
  if (OZScene::isDepthOfFieldSupported(v37))
  {
    if (v93 == 2) {
      BOOL v70 = *(unsigned char *)(v56 + 81) != 0;
    }
    else {
      BOOL v70 = v93 == 0;
    }
  }
  else
  {
    BOOL v70 = 0;
  }
  *((unsigned char *)a15 + 517) = v70;
  *((unsigned char *)a15 + 512) = v116;
  _OWORD *v42 = 0u;
  *(_OWORD *)((char *)a15 + 408) = 0u;
  if (a4)
  {
    *((_DWORD *)a15 + 123) = v113;
    *((unsigned char *)a15 + 488) = (*(_DWORD *)&v86[3] & 0xFFFFFFFD) == 0;
    _OWORD *v42 = 0uLL;
    *(_OWORD *)((char *)a15 + 408) = 0uLL;
  }
  if (*(unsigned char *)(*a1 + 160))
  {
    unsigned int v71 = v89;
    if (v89 == 20)
    {
      lpsrc = *(void **)(v56 + 96);
      PCSharedCount::PCSharedCount(&v82, (const PCSharedCount *)(v56 + 104));
      OZRenderParams::setCamera((uint64_t)a15, (const PCSharedCount *)&lpsrc);
      PCSharedCount::~PCSharedCount(&v82);
    }
    else
    {
      if (v89 >= 0xB)
      {
        lpsrc = 0;
        PCSharedCount::PCSharedCount(&v82);
        Node = OZScene::getNode(v37, v71);
        if (Node
        {
          operator new();
        }
        operator new();
      }
      unsigned int ActiveCamera = OZScene::getActiveCamera(v37, a2);
      __int16 v74 = OZScene::getNode(v37, ActiveCamera);
      if (v74)
      {
        if (v75)
        {
          CMTime v80 = *a2;
          OZCamera::cameraAtTime(v75, &v80);
        }
      }
    }
    *((unsigned char *)a15 + 1312) = 0;
    _OWORD *v42 = 0u;
    *(_OWORD *)((char *)a15 + 408) = 0u;
  }
  *((unsigned char *)a15 + 242) = OZSceneSettings::is360Project((OZSceneSettings *)&v105);
  OZExportSettings::~OZExportSettings((OZExportSettings *)v83);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v94._pcColorDesc._colorSpaceRef._obj);
  PCCFRef<CGColorSpace *>::~PCCFRef(&space._pcColorDesc._colorSpaceRef._obj);
  if (v96[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96[1]);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v103);
  long long v105 = (PCMutex *)&unk_1F113E428;
  PCString::~PCString(&v117);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v111);
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)v118);
}

void sub_1B7BFBDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, PCSharedCount a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,CGColorSpace *a37,uint64_t a38,uint64_t a39,uint64_t a40,CGColorSpace *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,CGColorSpace *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,PCString a63)
{
  PCSharedCount::~PCSharedCount(v63 + 1);
  PCSharedCount::~PCSharedCount(&a20);
  OZExportSettings::~OZExportSettings((OZExportSettings *)&a27);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a37);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a41);
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&a57);
  OZSceneSettings::~OZSceneSettings(&a63);
  PGPerThreadSetCurrentContextSentry::~PGPerThreadSetCurrentContextSentry((PGPerThreadSetCurrentContextSentry *)(v64 - 128));
  _Unwind_Resume(a1);
}

void ___ZN17PCSingletonObjectI16PCRecursiveMutexN12_GLOBAL__N_122PCSingletonObjectTag26ELi0EE6objectEv_block_invoke()
{
}

void sub_1B7BFBFC4(_Unwind_Exception *a1)
{
  PCSingleton::~PCSingleton(v1);
  MEMORY[0x1BA9BFBA0](v1, 0x1081C40EAC9FDC4);
  _Unwind_Resume(a1);
}

void PCSingletonObject<PCRecursiveMutex,anonymous namespace'::PCSingletonObjectTag26,0>::~PCSingletonObject(uint64_t a1)
{
  *(void *)a1 = &unk_1F113E3E0;
  PCMutex::~PCMutex((PCMutex *)(a1 + 8));

  PCSingleton::~PCSingleton((PCSingleton *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F113E3E0;
  PCMutex::~PCMutex((PCMutex *)(a1 + 8));
  PCSingleton::~PCSingleton((PCSingleton *)a1);

  JUMPOUT(0x1BA9BFBA0);
}

void OZFontManagerBase::getDefaultSystemFont(PCString *a1@<X8>)
{
  CFStringRef v3 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F42A30], "systemFontOfSize:weight:", 48.0, *MEMORY[0x1E4F43908]), "fontName");
  a1->CMTime var0 = 0;

  PCString::set(a1, v3);
}

void OZFontManagerBase::getDefaultSystemFontFace(OZFontManagerBase *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 18);
  if (!v4)
  {
    CFStringRef v5 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F42A30], "systemFontOfSize:weight:", 48.0, *MEMORY[0x1E4F43908]), "fontName");
    v9.CMTime var0 = 0;
    PCString::set(&v9, v5);
    (*(void (**)(long long *__return_ptr, OZFontManagerBase *, PCString *))(*(void *)this + 56))(&v10, this, &v9);
    long long v6 = v10;
    long long v10 = 0uLL;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 19);
    *((_OWORD *)this + 9) = v6;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      if (*((void *)&v10 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
      }
    }
    PCString::~PCString(&v9);
    uint64_t v4 = *((void *)this + 18);
  }
  uint64_t v8 = *((void *)this + 19);
  *a2 = v4;
  a2[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1B7BFC204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZFontManagerBase::getDefaultFontSize(OZFontManagerBase *this)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
  (*(void (**)(PCString *__return_ptr, OZFontManagerBase *))(*(void *)this + 40))(&v5, this);
  CFStringRef v3 = PCString::ns_str(&v5);
  PCString::~PCString(&v5);
  uint64_t result = [v2 integerForKey:v3];
  if (!result)
  {
    [v2 setObject:@"48" forKey:v3];
    return [v2 integerForKey:v3];
  }
  return result;
}

void sub_1B7BFC2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZFontManagerBase::initFonts(OZFontManagerBase *this)
{
  uint64_t v2 = (PCMutex *)((char *)this + 64);
  PCMutex::lock((PCMutex *)((char *)this + 64));
  if (!*((unsigned char *)this + 136)) {
    *((unsigned char *)this + 136) = 1;
  }
  return PCMutex::unlock(v2);
}

void OZDocument::getFilename(const __CFURL **this@<X0>, PCURL *a2@<X8>)
{
}

void OZNotificationManager::OZNotificationManager(OZNotificationManager *this, OZDocument *a2, int a3)
{
  *(void *)this = this;
  *((void *)this + OZDocument::~OZDocument(this - 1) = this;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = (char *)this + 32;
  *((void *)this + 5) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 16) = 0;
  *((unsigned char *)this + 136) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 14) = a2;
  *((_WORD *)this + 6OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((void *)this + 13) = [[OZNotificationStub alloc] initWithOZDocument:a2 useTimer:0];
  *((void *)this + 16) = 0;
  OZNotificationManager::setIsProcessingAutomatically(this, a3);
}

void sub_1B7BFC988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 72);
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<std::pair<OZChannelRef,unsigned int>>::destroy(v11, *(void ***)(v10 + 32));
  std::__list_imp<unsigned int>::clear((void *)v10);
  _Unwind_Resume(a1);
}

void OZNotificationManager::setIsProcessingAutomatically(OZNotificationManager *this, int a2)
{
  if (*((unsigned __int8 *)this + 121) != a2)
  {
    char v2 = a2;
    uint64_t v4 = (void *)*((void *)this + 13);
    if (a2)
    {
      [v4 createTimer];
      OZNotificationManager::createRunLoopObserver(this);
    }
    else
    {
      [v4 releaseTimer];
      OZNotificationManager::deleteRunLoopObserver(this);
    }
    *((unsigned char *)this + 12OZDocument::~OZDocument(this - 1) = v2;
  }
}

void OZNotificationManager::~OZNotificationManager(OZNotificationManager *this)
{
  OZNotificationManager::deleteRunLoopObserver(this);
  [*((id *)this + 13) releaseTimer];

  char v2 = (void **)((char *)this + 72);
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100](&v2);
  char v2 = (void **)((char *)this + 48);
  std::vector<OZChannelRef>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::pair<OZChannelRef,unsigned int>>::destroy((uint64_t)this + 24, *((void ***)this + 4));
  std::__list_imp<unsigned int>::clear(this);
}

void OZNotificationManager::deleteRunLoopObserver(OZNotificationManager *this)
{
  char v2 = (__CFRunLoopObserver *)*((void *)this + 16);
  if (v2)
  {
    CFRunLoopObserverInvalidate(v2);
    CFRelease(*((CFTypeRef *)this + 16));
    *((void *)this + 16) = 0;
  }
}

void *OZNotificationManager::addObserver(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = a1;
  while (1)
  {
    uint64_t v8 = (uint64_t *)v8[1];
    if (v8 == a1) {
      break;
    }
    if (v8[3] < a3)
    {
      uint64_t result = operator new(0x30uLL);
      result[2] = a2;
      result[3] = a3;
      *((_DWORD *)result + 9) = 0;
      *((_DWORD *)result + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
      *((_DWORD *)result + 8) = a4;
      uint64_t v10 = *v8;
      *(void *)(v10 + 8) = result;
      *uint64_t result = v10;
      *uint64_t v8 = (uint64_t)result;
      result[1] = v8;
      goto LABEL_6;
    }
  }
  uint64_t result = operator new(0x30uLL);
  result[2] = a2;
  result[3] = a3;
  *((_DWORD *)result + 9) = 0;
  *((_DWORD *)result + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((_DWORD *)result + 8) = a4;
  uint64_t v11 = *a1;
  *uint64_t result = *a1;
  result[1] = a1;
  *(void *)(v11 + 8) = result;
  *a1 = (uint64_t)result;
LABEL_6:
  ++a1[2];
  if (a4)
  {
    uint64_t result = *(void **)(a1[14] + 176);
    if (result)
    {
      return result;
    }
  }
  return result;
}

void *OZNotificationManager::addCPPObserver(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return OZNotificationManager::addObserver(a1, a2, a3, 0);
}

void OZNotificationManager::removeObserver(OZNotificationManager *this, void *a2)
{
  char v2 = this;
  while (1)
  {
    this = (OZNotificationManager *)*((void *)this + 1);
    if (this == v2) {
      break;
    }
    if (*((void **)this + 2) == a2)
    {
      if (this != v2)
      {
        int v3 = *((_DWORD *)this + 8);
        uint64_t v4 = *(void *)this;
        *(void *)(v4 + 8) = *((void *)this + 1);
        **((void **)this + OZDocument::~OZDocument(this - 1) = v4;
        --*((void *)v2 + 2);
        operator delete(this);
        PCString v5 = *(void **)(*((void *)v2 + 14) + 176);
        if (v5 && v3 != 0)
        {
        }
      }
      return;
    }
  }
}

void OZNotificationManager::processNotifications(OZNotificationManager *this)
{
  if (!*((unsigned char *)this + 136))
  {
    if (*((unsigned char *)this + 121))
    {
      [*((id *)this + 13) releaseTimer];
      [*((id *)this + 13) createTimer];
    }
    if (*((void *)this + 16))
    {
      char v2 = (__CFRunLoop *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CAC0], "currentRunLoop"), "getCFRunLoop");
      CFRunLoopRemoveObserver(v2, *((CFRunLoopObserverRef *)this + 16), (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
    }
    int v3 = *((_DWORD *)this + 24);
    if (v3)
    {
      *((_DWORD *)this + 24) = 0;
      if ((v3 & 0x20) != 0)
      {
        std::__tree<std::pair<OZChannelRef,unsigned int>>::destroy((uint64_t)this + 24, *((void ***)this + 4));
        *((void *)this + 3) = (char *)this + 32;
        *((void *)this + 4) = 0;
        *((void *)this + 5) = 0;
        uint64_t v4 = (std::string *)*((void *)this + 6);
        for (uint64_t i = (std::string *)*((void *)this + 7);
              i != v4;
        *((void *)this + 7) = v4;
      }
      else
      {
        uint64_t v4 = (std::string *)*((void *)this + 7);
      }
      if (*((std::string **)this + 6) == v4)
      {
        long long v6 = (OZNotificationManager *)*((void *)this + 3);
        if (v6 != (OZNotificationManager *)((char *)this + 32))
        {
          do
          {
            uint64_t v7 = (OZNotificationManager *)((char *)v6 + 32);
            if ((unint64_t)v4 >= *((void *)this + 8))
            {
              uint64_t v4 = (std::string *)std::vector<OZChannelRef>::__push_back_slow_path<OZChannelRef const&>((uint64_t *)this + 6, v7);
            }
            else
            {
              OZChannelRef::OZChannelRef(v4++, v7);
              *((void *)this + 7) = v4;
            }
            *((void *)this + 7) = v4;
            uint64_t v8 = (OZNotificationManager *)*((void *)v6 + 1);
            if (v8)
            {
              do
              {
                PCString v9 = v8;
                uint64_t v8 = *(OZNotificationManager **)v8;
              }
              while (v8);
            }
            else
            {
              do
              {
                PCString v9 = (OZNotificationManager *)*((void *)v6 + 2);
                BOOL v10 = *(void *)v9 == (void)v6;
                long long v6 = v9;
              }
              while (!v10);
            }
            long long v6 = v9;
          }
          while (v9 != (OZNotificationManager *)((char *)this + 32));
        }
      }
      for (uint64_t j = *((void *)this + 1); (OZNotificationManager *)j != this; uint64_t j = *(void *)(j + 8))
      {
        int v12 = *(_DWORD *)(j + 40);
        int v13 = v3;
        if (v12)
        {
          int v13 = v3 & ~v12;
          *(_DWORD *)(j + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
        }
        int v14 = *(_DWORD *)(j + 36);
        uint64_t v15 = v13 & ~v14;
        if ((v13 & ~v14) != 0)
        {
          uint64_t v16 = *(void **)(j + 16);
          if (*(_DWORD *)(j + 32) == 1) {
            [v16 notify:v15];
          }
          else {
            (*(void (**)(void *, uint64_t))(*(void *)v16 + 16))(v16, v15);
          }
        }
      }
      if ((v3 & 0x800008) == 8)
      {
        if (*((unsigned char *)this + 120))
        {
          *((unsigned char *)this + 12OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
LABEL_69:
          if ((v3 & 0xC) != 4)
          {
            std::__tree<std::pair<OZChannelRef,unsigned int>>::destroy((uint64_t)this + 24, *((void ***)this + 4));
            *((void *)this + 3) = (char *)this + 32;
            *((void *)this + 4) = 0;
            *((void *)this + 5) = 0;
            uint64_t v32 = *((void *)this + 6);
            for (uint64_t k = *((void *)this + 7); k != v32; OZChannelRef::~OZChannelRef((void **)(k - 24)))
              ;
            *((void *)this + 7) = v32;
          }
          return;
        }
        PCString v17 = (char *)*((void *)this + 3);
        PCColor v18 = (char *)this + 32;
        if (v17 != (char *)this + 32)
        {
          uint64_t v19 = (char *)*((void *)this + 3);
          while (*((_DWORD *)v19 + 14) != 1)
          {
            uint64_t v20 = (char *)*((void *)v19 + 1);
            if (v20)
            {
              do
              {
                uint64_t v21 = v20;
                uint64_t v20 = *(char **)v20;
              }
              while (v20);
            }
            else
            {
              do
              {
                uint64_t v21 = (char *)*((void *)v19 + 2);
                BOOL v10 = *(void *)v21 == (void)v19;
                uint64_t v19 = v21;
              }
              while (!v10);
            }
            uint64_t v19 = v21;
            if (v21 == v18) {
              goto LABEL_51;
            }
          }
          uint64_t v23 = *((void *)this + 9);
          uint64_t v22 = *((void *)this + 10);
          if (v22 != v23)
          {
            do
              OZChannelRef::~OZChannelRef((void **)(v22 - 24));
            while (v22 != v23);
            PCString v17 = (char *)*((void *)this + 3);
          }
          *((void *)this + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v23;
LABEL_51:
          if (v17 != v18)
          {
            do
            {
              if (*((_DWORD *)v17 + 14) == 1 && !*(unsigned char *)(*((void *)this + 14) + 101))
              {
                int v24 = (const OZChannelRef *)(v17 + 32);
                unint64_t v25 = *((void *)this + 10);
                if (v25 >= *((void *)this + 11))
                {
                  uint64_t v26 = std::vector<OZChannelRef>::__push_back_slow_path<OZChannelRef const&>((uint64_t *)this + 9, v24);
                }
                else
                {
                  OZChannelRef::OZChannelRef(*((std::string **)this + 10), v24);
                  uint64_t v26 = v25 + 24;
                  *((void *)this + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v25 + 24;
                }
                *((void *)this + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v26;
              }
              char v27 = (char *)*((void *)v17 + 1);
              if (v27)
              {
                do
                {
                  FxColorDescription v28 = v27;
                  char v27 = *(char **)v27;
                }
                while (v27);
              }
              else
              {
                do
                {
                  FxColorDescription v28 = (char *)*((void *)v17 + 2);
                  BOOL v10 = *(void *)v28 == (void)v17;
                  PCString v17 = v28;
                }
                while (!v10);
              }
              PCString v17 = v28;
            }
            while (v28 != v18);
          }
        }
      }
      if ((v3 & 0x800000) != 0)
      {
        uint64_t v30 = *((void *)this + 9);
        for (uint64_t m = *((void *)this + 10); m != v30; OZChannelRef::~OZChannelRef((void **)(m - 24)))
          ;
        *((void *)this + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v30;
      }
      goto LABEL_69;
    }
  }
}

void sub_1B7BFCFB4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v2;
  _Unwind_Resume(a1);
}

void sub_1B7BFCFBC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 56) = v2;
  _Unwind_Resume(a1);
}

void OZNotificationManager::postNotification(OZNotificationManager *this, int a2)
{
  if (theApp)
  {
    if (*(unsigned char *)(theApp + 80)
      || !*((unsigned char *)this + 121)
      || (uint64_t Instance = OZCurrentThread::getInstance(this), PCThread::isSelf(*(_opaque_pthread_t ***)(Instance + 8))))
    {
      int v4 = *((_DWORD *)this + 24);
      *((_DWORD *)this + 24) = v4 | a2;
      if (a2 && !v4)
      {
        if (*((void *)this + 16))
        {
          PCString v5 = (__CFRunLoop *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CAC0], "currentRunLoop"), "getCFRunLoop");
          CFRunLoopAddObserver(v5, *((CFRunLoopObserverRef *)this + 16), (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
        }
        long long v6 = (void *)*((void *)this + 13);
        [v6 fire];
      }
    }
    else
    {
      NSLog(&cfstr_TriedToPostANo.isa);
    }
  }
}

void OZNotificationManager::willModifyChannel(uint64_t **this, const OZChannelBase *a2, int a3)
{
  if (theApp)
  {
    if (*(unsigned char *)(theApp + 80)
      || !*((unsigned char *)this + 121)
      || (uint64_t Instance = OZCurrentThread::getInstance((OZCurrentThread *)this),
          PCThread::isSelf(*(_opaque_pthread_t ***)(Instance + 8))))
    {
      if (!*((unsigned char *)this[14] + 101))
      {
        OZChannelRef::OZChannelRef((OZChannelRef *)v9, a2, 0);
        OZChannelRef::OZChannelRef(&v7, (const OZChannelRef *)v9);
        int v8 = a3;
        if (this + 4 == std::__tree<std::pair<OZChannelRef,unsigned int>>::find<std::pair<OZChannelRef,unsigned int>>((uint64_t)(this + 3), (uint64_t)&v7))std::__tree<std::pair<OZChannelRef,unsigned int>>::__emplace_unique_key_args<std::pair<OZChannelRef,unsigned int>,std::pair<OZChannelRef,unsigned int> const&>(this + 3, (uint64_t)&v7, (const OZChannelRef *)&v7); {
        OZChannelRef::~OZChannelRef((void **)&v7.__r_.__value_.__l.__data_);
        }
        OZChannelRef::~OZChannelRef(v9);
      }
    }
    else
    {
      NSLog(&cfstr_TriedToPostANo.isa);
    }
  }
}

void sub_1B7BFD164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

void OZNotificationManager::clearLastModifiedChannels(OZNotificationManager *this)
{
  uint64_t v2 = *((void *)this + 10);
  uint64_t v3 = *((void *)this + 9);
  while (v2 != v3)
    OZChannelRef::~OZChannelRef((void **)(v2 - 24));
  *((void *)this + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v3;
}

BOOL OZNotificationManager::wasChannelModified(OZNotificationManager *this, const OZChannelRef *a2)
{
  uint64_t v2 = (unsigned __int8 *)*((void *)this + 3);
  uint64_t v3 = (char *)this + 32;
  if (v2 == (unsigned __int8 *)((char *)this + 32)) {
    return 0;
  }
  while (1)
  {
    BOOL result = OZChannelRef::operator==(v2 + 32, (unsigned __int8 *)a2);
    if (result) {
      break;
    }
    long long v6 = (unsigned __int8 *)*((void *)v2 + 1);
    if (v6)
    {
      do
      {
        std::string v7 = v6;
        long long v6 = *(unsigned __int8 **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        std::string v7 = (unsigned __int8 *)*((void *)v2 + 2);
        BOOL v8 = *(void *)v7 == (void)v2;
        uint64_t v2 = v7;
      }
      while (!v8);
    }
    uint64_t v2 = v7;
    if (v7 == (unsigned __int8 *)v3) {
      return result;
    }
  }
  return 1;
}

BOOL OZNotificationManager::wasChannelModified(OZNotificationManager *this, const OZChannelBase *a2)
{
  OZChannelRef::OZChannelRef((OZChannelRef *)v5, a2, 0);
  BOOL v3 = OZNotificationManager::wasChannelModified(this, (const OZChannelRef *)v5);
  OZChannelRef::~OZChannelRef(v5);
  return v3;
}

void sub_1B7BFD2A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

void OZNotificationManager::createRunLoopObserver(OZNotificationManager *this)
{
  uint64_t v2 = (__CFRunLoop *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CAC0], "currentRunLoop"), "getCFRunLoop");
  context.version = 0;
  context.info = this;
  memset(&context.retain, 0, 24);
  BOOL v3 = CFRunLoopObserverCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0xA0uLL, 1u, 0, (CFRunLoopObserverCallBack)updateRunLoopObserver, &context);
  *((void *)this + 16) = v3;
  if (v3) {
    CFRunLoopAddObserver(v2, v3, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
  }
}

void updateRunLoopObserver(__CFRunLoopObserver *a1, unint64_t a2, OZNotificationManager *this)
{
}

void std::__tree<std::pair<OZChannelRef,unsigned int>>::destroy(uint64_t a1, void **a2)
{
  if (a2)
  {
    std::__tree<std::pair<OZChannelRef,unsigned int>>::destroy(a1, *a2);
    std::__tree<std::pair<OZChannelRef,unsigned int>>::destroy(a1, a2[1]);
    OZChannelRef::~OZChannelRef(a2 + 4);
    operator delete(a2);
  }
}

void *std::__tree<std::pair<OZChannelRef,unsigned int>>::find<std::pair<OZChannelRef,unsigned int>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  BOOL v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  long long v6 = (void *)(a1 + 8);
  do
  {
    BOOL v7 = std::less<std::pair<OZChannelRef,unsigned int>>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2);
    BOOL v8 = v3 + 1;
    if (!v7)
    {
      BOOL v8 = v3;
      long long v6 = v3;
    }
    BOOL v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::pair<OZChannelRef,unsigned int>>::operator()[abi:ne180100](v5, a2, (uint64_t)(v6 + 4))) {
    return v2;
  }
  return v6;
}

BOOL std::less<std::pair<OZChannelRef,unsigned int>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (OZChannelRef::operator<((void *)a2, (void *)a3)) {
    return 1;
  }
  if (OZChannelRef::operator<((void *)a3, (void *)a2)) {
    return 0;
  }
  return *(_DWORD *)(a2 + 24) < *(_DWORD *)(a3 + 24);
}

uint64_t *std::__tree<std::pair<OZChannelRef,unsigned int>>::__emplace_unique_key_args<std::pair<OZChannelRef,unsigned int>,std::pair<OZChannelRef,unsigned int> const&>(uint64_t **a1, uint64_t a2, const OZChannelRef *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::pair<OZChannelRef,unsigned int>>::__find_equal<std::pair<OZChannelRef,unsigned int>>((uint64_t)a1, &v10, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    BOOL v7 = v5;
    std::__tree<std::pair<OZChannelRef,unsigned int>>::__construct_node<std::pair<OZChannelRef,unsigned int> const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    long long v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::pair<OZChannelRef,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::pair<OZChannelRef,unsigned int>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void *std::__tree<std::pair<OZChannelRef,unsigned int>>::__find_equal<std::pair<OZChannelRef,unsigned int>>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        BOOL v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::pair<OZChannelRef,unsigned int>>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4))) {
          break;
        }
        int v4 = (void *)*v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::pair<OZChannelRef,unsigned int>>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      int v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    BOOL v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__tree<std::pair<OZChannelRef,unsigned int>>::__construct_node<std::pair<OZChannelRef,unsigned int> const&>(uint64_t a1@<X0>, const OZChannelRef *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  OZChannelRef::OZChannelRef((std::string *)(v6 + 32), a2);
  *((_DWORD *)v6 + 14) = *((_DWORD *)a2 + 6);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B7BFD640(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::pair<OZChannelRef,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::pair<OZChannelRef,unsigned int>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::pair<OZChannelRef,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::pair<OZChannelRef,unsigned int>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      OZChannelRef::~OZChannelRef(v2 + 4);
    }
    operator delete(v2);
  }
}

PCString *std::list<PCString>::~list(PCString *a1)
{
  return a1;
}

__CFString **OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs(OZDocumentBundleFormatUtils *this)
{
  v8[1] = *(PCString *)MEMORY[0x1E4F143B8];
  {
    PCString::PCString(&v3, "52A68C6D-B49C-41AA-B3EA-03945D0C8EB4");
    PCString::PCString(&v4, "920273EF-948C-4556-8EB8-8EFEF7A34111");
    PCString::PCString(&v5, "23723AD7-62C4-4ED0-A8C6-FA5A2D7162E4");
    PCString::PCString(&v6, "14B39AEF-607D-42DF-98DD-DB3DD345E925");
    PCString::PCString(&v7, "9C13F991-BC99-4DC8-B150-381D7CCE183B");
    PCString::PCString(v8, "267EDBAB-297C-4BF4-B741-A166B5997C9B");
    std::list<PCString>::list(&OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs(void)::unsupportedFxPlugUUIDs, &v3, 6);
    for (uint64_t i = 40; i != -8; i -= 8)
      PCString::~PCString((PCString *)((char *)&v3 + i));
    __cxa_atexit((void (*)(void *))std::list<PCString>::~list, &OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs(void)::unsupportedFxPlugUUIDs, &dword_1B73F3000);
  }
  return &OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs(void)::unsupportedFxPlugUUIDs;
}

void sub_1B7BFD83C(_Unwind_Exception *a1)
{
  for (uint64_t i = 40; i != -8; i -= 8)
    PCString::~PCString((PCString *)(v1 + i));
  _Unwind_Resume(a1);
}

__CFString **OZDocumentBundleFormatUtils::unsupportedFxPlugGroupUUIDs(OZDocumentBundleFormatUtils *this)
{
  v2[1] = *(PCString *)MEMORY[0x1E4F143B8];
  {
    PCString::PCString(v2, "50CDA38A-311B-493D-8BD3-AFD5ACE9DA4A");
    std::list<PCString>::list(&OZDocumentBundleFormatUtils::unsupportedFxPlugGroupUUIDs(void)::unsupportedFxPlugGroupUUIDs, v2, 1);
    PCString::~PCString(v2);
    __cxa_atexit((void (*)(void *))std::list<PCString>::~list, &OZDocumentBundleFormatUtils::unsupportedFxPlugGroupUUIDs(void)::unsupportedFxPlugGroupUUIDs, &dword_1B73F3000);
  }
  return &OZDocumentBundleFormatUtils::unsupportedFxPlugGroupUUIDs(void)::unsupportedFxPlugGroupUUIDs;
}

void sub_1B7BFD96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
}

CFComparisonResult OZDocumentBundleFormatUtils::isSupportedFxPlug(OZDocumentBundleFormatUtils *this, const PCString *a2, const PCString *a3, const PCString *a4)
{
  if (this) {
    return 0;
  }
  PCString v7 = OZDocumentBundleFormatUtils::unsupportedFxPlugGroupUUIDs(this);
  OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs((OZDocumentBundleFormatUtils *)v7);
  for (uint64_t i = (PCString *)qword_1E9EE62E8;
        i != (PCString *)&OZDocumentBundleFormatUtils::unsupportedFxPlugGroupUUIDs(void)::unsupportedFxPlugGroupUUIDs;
        uint64_t i = (PCString *)i[1].var0)
  {
    CFComparisonResult result = PCString::compare(i + 2, a2);
    if (!result) {
      return result;
    }
  }
  for (uint64_t j = (PCString *)qword_1E9EE62C8;
        j != (PCString *)&OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs(void)::unsupportedFxPlugUUIDs;
        uint64_t j = (PCString *)j[1].var0)
  {
    if (!PCString::compare(j + 2, a3)) {
      return (unint64_t)(j == (PCString *)&OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs(void)::unsupportedFxPlugUUIDs);
    }
  }
  uint64_t j = (PCString *)&OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs(void)::unsupportedFxPlugUUIDs;
  return (unint64_t)(j == (PCString *)&OZDocumentBundleFormatUtils::unsupportedFxPlugUUIDs(void)::unsupportedFxPlugUUIDs);
}

BOOL OZDocumentBundleFormatUtils::isMotionDocURLInMotionBundle(OZDocumentBundleFormatUtils *this, const PCURL *a2)
{
  return +[PCMotionBundle bundleURLForProjectFileURL:*(void *)this] != 0;
}

void std::__list_imp<PCString>::clear(PCString *a1)
{
  if (a1[2].var0)
  {
    CMTime var0 = a1->var0;
    PCString v3 = (PCString *)a1[1].var0;
    PCString v4 = v3->var0;
    v4->info = a1->var0->info;
    *(void *)var0->info = v4;
    a1[2].CMTime var0 = 0;
    if (v3 != a1)
    {
      do
      {
        PCString v5 = v3[1].var0;
        PCString::~PCString(v3 + 2);
        operator delete(v3);
        PCString v3 = (PCString *)v5;
      }
      while (v5 != (__CFString *)a1);
    }
  }
}

__n128 std::list<PCUUID>::push_back(__n128 **a1, __n128 *a2)
{
  PCString v4 = (__n128 *)operator new(0x20uLL);
  __n128 result = *a2;
  v4[1] = *a2;
  unint64_t v6 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(void *)(v6 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

__CFString **std::list<PCString>::list(__CFString **a1, const PCString *a2, uint64_t a3)
{
  *a1 = (__CFString *)a1;
  a1[1] = (__CFString *)a1;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      unint64_t v6 = std::__list_imp<PCString>::__create_node[abi:ne180100]<PCString const&>((uint64_t)a1, 0, 0, a2);
      PCString v7 = *a1;
      v6->CMTime var0 = *a1;
      v6[1].CMTime var0 = (__CFString *)a1;
      v7->info = (uint64_t)v6;
      *a1 = (__CFString *)v6;
      a1[2] = (__CFString *)((char *)a1[2] + 1);
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_1B7BFDBAC(_Unwind_Exception *a1)
{
  std::__list_imp<PCString>::clear(v1);
  _Unwind_Resume(a1);
}

PCString *std::__list_imp<PCString>::__create_node[abi:ne180100]<PCString const&>(uint64_t a1, __CFString *a2, __CFString *a3, const PCString *a4)
{
  PCString v7 = (PCString *)operator new(0x18uLL);
  v7->CMTime var0 = a2;
  v7[1].CMTime var0 = a3;
  PCString::PCString(v7 + 2, a4);
  return v7;
}

void sub_1B7BFDC0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void OZScene::destroyObjectiveCClasses(id *this)
{
}

uint64_t OZScene::setVideoOrientation(uint64_t a1, int a2)
{
  PCString v4 = (PCMutex *)(a1 + 160);
  PCMutex::lock((PCMutex *)(a1 + 160));
  *(_DWORD *)(a1 + 148) = a2;
  return PCMutex::unlock(v4);
}

uint64_t OZScene::setApplyMotionEffectScaleTo3DObjectRenders(uint64_t this, char a2)
{
  *(unsigned char *)(this + 152) = a2;
  return this;
}

uint64_t OZScene::setARFrameForObject(OZScene *this, Li3DEngineImageSource *a2)
{
  PCString v4 = (PCMutex *)((char *)this + 160);
  PCMutex::lock((PCMutex *)((char *)this + 160));
  Li3DEngineImageSource::setVideoOrientation((uint64_t)a2, *((_DWORD *)this + 37));
  return PCMutex::unlock(v4);
}

void sub_1B7BFDCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t OZScene::getSceneComposer(OZScene *this)
{
  uint64_t result = *((void *)this + 233);
  if (!result)
  {
    uint64_t result = objc_opt_new();
    *((void *)this + 233) = result;
  }
  return result;
}

uint64_t *OZScene::begin_t<OZSceneNodeFile,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  PCString v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    PCString v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZSceneNodeFile,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZSceneNodeFile,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7BFDDD0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZSceneNodeFile,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZSceneNodeFile,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    PCString v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZSceneNodeFile,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t OZScene::setupFxPlugRenderContext(OZScene *this, const OZRenderParams *a2)
{
  OZScene::begin_all(this, (uint64_t)v21);
  while (1)
  {
    OZScene::end_all_sel(this, (uint64_t)v17);
    if (v24 != v19[2])
    {
LABEL_6:
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v20);
      goto LABEL_9;
    }
    if (v24 < 2)
    {
      PCString v4 = (uint64_t *)v17;
      PCString v3 = v21;
    }
    else
    {
      PCString v3 = &v23;
      PCString v4 = (uint64_t *)v19;
      if (v24 != 3)
      {
        PCString v3 = &v22;
        PCString v4 = &v18;
        if (v24 != 2) {
          goto LABEL_6;
        }
      }
    }
    uint64_t v5 = *v3;
    uint64_t v6 = *v4;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v20);
    if (v5 == v6) {
      return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v25);
    }
LABEL_9:
    if (v24 < 2)
    {
      uint64_t v7 = v21[0];
      if (v21[0] == v21[2]) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }
    if (v24 != 2)
    {
      if (v24 != 3) {
        goto LABEL_21;
      }
      uint64_t v7 = v23;
LABEL_14:
      uint64_t v8 = *(void *)(v7 + 16);
      if (!v8) {
        goto LABEL_21;
      }
      uint64_t v9 = (const void *)(v8 + 16);
      goto LABEL_18;
    }
    uint64_t v10 = *(void *)(v22 + 16);
    if (!v10) {
      goto LABEL_21;
    }
    uint64_t v9 = (const void *)(v10 + 48);
LABEL_18:
    if (v11)
    {
      uint64_t v12 = [v11[4] contextManager];
      if (v12) {
        OZFxPlugRenderContextManager::pushContext(v12, (uint64_t)a2, 1);
      }
    }
LABEL_21:
    OZObject::all_iterator_t<OZObjectManipulator,false,true,OZObject::defaultAllValidator>::operator++(v21, (uint64_t)v15);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v16);
  }
}

void sub_1B7BFE058(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1 - 128);
  _Unwind_Resume(a1);
}

void *OZObject::all_iterator_t<OZObjectManipulator,false,true,OZObject::defaultAllValidator>::operator++@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_DWORD *)(a2 + 8OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1065353216;
  *(void *)(a2 + 32) = a1[4];
  *(_DWORD *)(a2 + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *((_DWORD *)a1 + 10);
  *(_OWORD *)(a2 + 48) = 0u;
  do
  {
    while (1)
    {
      uint64_t result = OZObject::all_iterator_t<OZObjectManipulator,false,true,OZObject::defaultAllValidator>::increment(a1);
      unsigned int v5 = *((_DWORD *)a1 + 10);
      if (v5 < 2) {
        break;
      }
      if (v5 == 2)
      {
        uint64_t v6 = a1[3];
        goto LABEL_9;
      }
      if (v5 == 3)
      {
        uint64_t v6 = a1[4];
        goto LABEL_9;
      }
    }
    uint64_t v6 = *a1;
    if (*a1 == a1[2]) {
      return result;
    }
LABEL_9:
    ;
  }
  while (!*(void *)(v6 + 16));
  return result;
}

void sub_1B7BFE114(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::teardownFxPlugRenderContext(OZScene *this)
{
  OZScene::begin_all(this, (uint64_t)v19);
  while (1)
  {
    OZScene::end_all_sel(this, (uint64_t)v15);
    if (v22 != v17[2])
    {
LABEL_6:
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v18);
      goto LABEL_9;
    }
    if (v22 < 2)
    {
      long long v3 = (uint64_t *)v15;
      uint64_t v2 = v19;
    }
    else
    {
      uint64_t v2 = &v21;
      long long v3 = (uint64_t *)v17;
      if (v22 != 3)
      {
        uint64_t v2 = &v20;
        long long v3 = &v16;
        if (v22 != 2) {
          goto LABEL_6;
        }
      }
    }
    uint64_t v4 = *v2;
    uint64_t v5 = *v3;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v18);
    if (v4 == v5) {
      return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v23);
    }
LABEL_9:
    if (v22 < 2)
    {
      uint64_t v6 = v19[0];
      if (v19[0] == v19[2]) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }
    if (v22 != 2)
    {
      if (v22 != 3) {
        goto LABEL_21;
      }
      uint64_t v6 = v21;
LABEL_14:
      uint64_t v7 = *(void *)(v6 + 16);
      if (!v7) {
        goto LABEL_21;
      }
      uint64_t v8 = (const void *)(v7 + 16);
      goto LABEL_18;
    }
    uint64_t v9 = *(void *)(v20 + 16);
    if (!v9) {
      goto LABEL_21;
    }
    uint64_t v8 = (const void *)(v9 + 48);
LABEL_18:
    if (v10)
    {
      uint64_t v11 = (OZFxPlugRenderContextManager *)[v10[4] contextManager];
      if (v11) {
        OZFxPlugRenderContextManager::popContext(v11);
      }
    }
LABEL_21:
    OZObject::all_iterator_t<OZObjectManipulator,false,true,OZObject::defaultAllValidator>::operator++(v19, (uint64_t)v13);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v14);
  }
}

void sub_1B7BFE2E4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1 - 128);
  _Unwind_Resume(a1);
}

void *OZObject::iterator_t<OZSceneNodeFile,false,true,OZObject::defaultValidator>::increment(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 2;
  uint64_t v3 = *result;
  if (*result == result[2]) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void **)(v3 + 16);
  if ((*(unsigned int (**)(void *))(*v4 + 1056))(v4))
  {
    uint64_t v5 = *v1;
    int v13 = v4;
    uint64_t v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v5;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1104))(v4);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(void *))(*v4 + 960))(v4))
  {
    uint64_t v6 = *v1;
    int v13 = v4;
    uint64_t v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v6;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1024))(v4);
    *uint64_t v1 = result;
    return result;
  }
  uint64_t v7 = *(void **)(*v1 + 8);
  uint64_t result = (void *)v4[120];
  if (!result || v7 == (void *)*v2)
  {
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = *result;
  if (*((unsigned char *)v1 + 24)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v8 + 1112))();
  }
  else {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v8 + 1032))();
  }
  if (v7 != result)
  {
LABEL_13:
    uint64_t v3 = *v1;
LABEL_14:
    *uint64_t v1 = *(void *)(v3 + 8);
    return result;
  }
  if (*((unsigned char *)v1 + 24)
    && (uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 960))(v4[120]), result))
  {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 1024))(v4[120]);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 0;
  }
  else
  {
    *((unsigned char *)v1 + 24) = 0;
    while (1)
    {
      uint64_t v4 = (void *)v4[120];
      if (!v4) {
        break;
      }
      uint64_t v14 = v4;
      uint64_t v9 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v14);
      uint64_t v10 = v9 + 3;
      if (!v9) {
        uint64_t v10 = v2;
      }
      uint64_t v11 = *v10;
      *uint64_t v1 = v11;
      uint64_t result = (void *)v4[120];
      if (result)
      {
        uint64_t v12 = *(void **)(v11 + 8);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
        if (v12 == result && v12 != (void *)*v2) {
          continue;
        }
      }
      goto LABEL_13;
    }
  }
  return result;
}

void *OZObject::all_iterator_t<OZObjectManipulator,true,true,OZObject::defaultAllValidator>::increment(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 2;
  uint64_t v3 = *result;
  if (*result == result[2])
  {
    uint64_t v3 = *(void *)(v3 + 8);
    *uint64_t result = v3;
  }
  switch(*((_DWORD *)result + 10))
  {
    case 0:
      uint64_t v4 = *(void **)(v3 + 16);
      if (((*(uint64_t (**)(void *))(*v4 + 960))(v4) & 1) == 0
        && ((*(uint64_t (**)(void *))(*v4 + 1056))(v4) & 1) == 0
        && !v4[124]
        && !v4[127])
      {
        uint64_t result = (void *)v4[120];
        if (result)
        {
          uint64_t v25 = *(void **)(*v1 + 8);
          uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
          if (v25 == result && v25 != (void *)*v2) {
            goto LABEL_24;
          }
        }
        goto LABEL_30;
      }
      uint64_t v5 = *v1;
      FxColorDescription v28 = v4;
      int v29 = &v28;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 6), &v28, (uint64_t)&std::piecewise_construct, &v29)[3] = v5;
      if ((*(unsigned int (**)(void *))(*v4 + 960))(v4)) {
        *uint64_t v1 = (*(uint64_t (**)(void *))(*v4 + 1024))(v4);
      }
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1056))(v4);
      if (result)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1104))(v4);
        *uint64_t v1 = result;
        int v6 = 1;
        goto LABEL_49;
      }
      if (v4[124]) {
        goto LABEL_34;
      }
      if (v4[127]) {
        goto LABEL_46;
      }
      return result;
    case 1:
      uint64_t v7 = *(void **)(v3 + 8);
      FxColorDescription v28 = *(void **)(v3 + 16);
      uint64_t v4 = v28;
      uint64_t v8 = result + 6;
      int v29 = &v28;
      uint64_t result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(result + 6), &v28, (uint64_t)&std::piecewise_construct, &v29);
      result[3] = v3;
      if (v4[124])
      {
LABEL_34:
        uint64_t v17 = v4[123];
        goto LABEL_35;
      }
      if (v4[127])
      {
LABEL_46:
        uint64_t v23 = v4[126];
        goto LABEL_47;
      }
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 1112))(v4[120]);
      if (v7 != result || v7 == (void *)*v2) {
        goto LABEL_30;
      }
      uint64_t v9 = (void *)v4[120];
      if (v9[124]) {
        goto LABEL_61;
      }
      if (!v9[127])
      {
        *((_DWORD *)v1 + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
        goto LABEL_68;
      }
      goto LABEL_65;
    case 2:
      uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)(result[3] + 16) + 248))(*(void *)(result[3] + 16));
      uint64_t v4 = result;
      uint64_t v10 = *(void **)(v1[3] + 8);
      v1[3] = v10;
      if (v10 != result + 122) {
        goto LABEL_24;
      }
      uint64_t v11 = (void *)result[126];
      v1[4] = v11;
      if (v11 != result + 125) {
        goto LABEL_48;
      }
LABEL_31:
      *((_DWORD *)v1 + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
      if ((*(unsigned int (**)(void *))(*v4 + 960))(v4))
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1024))(v4);
        *uint64_t v1 = result;
        return result;
      }
      int v29 = v4;
      uint64_t v8 = v1 + 6;
      uint64_t result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 6, &v29);
      uint64_t v18 = result + 3;
      if (!result) {
        uint64_t v18 = v2;
      }
      uint64_t v19 = (void *)*v18;
      *uint64_t v1 = *v18;
      uint64_t v20 = (void *)v1[2];
      if (v19 == v20) {
        return result;
      }
      uint64_t v21 = (void *)v19[1];
      uint64_t result = (void *)v4[120];
      if (result) {
        BOOL v22 = v21 == v20;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        *uint64_t v1 = v21;
        return result;
      }
      uint64_t v24 = *result;
      if ((v4[128] & 8) == 0)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void))(v24 + 1032))();
        if (v21 == result)
        {
          do
          {
LABEL_24:
            uint64_t v4 = (void *)v4[120];
            if (!v4) {
              return result;
            }
            int v29 = v4;
            int v13 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 6, &v29);
            uint64_t v14 = v13 + 3;
            if (!v13) {
              uint64_t v14 = v2;
            }
            uint64_t v15 = *v14;
            *uint64_t v1 = v15;
            uint64_t result = (void *)v4[120];
            if (!result) {
              break;
            }
            uint64_t v16 = *(void **)(v15 + 8);
            uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
            if (v16 != result) {
              break;
            }
          }
          while (v16 != (void *)*v2);
        }
LABEL_30:
        *uint64_t v1 = *(void *)(*v1 + 8);
        return result;
      }
      uint64_t result = (void *)(*(uint64_t (**)(void))(v24 + 1112))();
      if (v21 != result)
      {
        *((_DWORD *)v1 + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1;
        goto LABEL_30;
      }
      uint64_t v9 = (void *)v4[120];
      if (v9[124])
      {
LABEL_61:
        int v29 = v9;
        uint64_t result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v8, &v29);
        uint64_t v26 = result + 3;
        if (!result) {
          uint64_t v26 = v2;
        }
        *uint64_t v1 = *v26;
        uint64_t v17 = v9[123];
LABEL_35:
        v1[3] = v17;
        int v6 = 2;
LABEL_49:
        *((_DWORD *)v1 + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v6;
        return result;
      }
      if (v9[127])
      {
LABEL_65:
        int v29 = v9;
        uint64_t result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v8, &v29);
        char v27 = result + 3;
        if (!result) {
          char v27 = v2;
        }
        *uint64_t v1 = *v27;
        uint64_t v23 = v9[126];
LABEL_47:
        v1[4] = v23;
LABEL_48:
        int v6 = 3;
        goto LABEL_49;
      }
LABEL_68:
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*v9 + 960))(v9);
      if (!result) {
        goto LABEL_24;
      }
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 1024))(v4[120]);
      *uint64_t v1 = result;
      *((_DWORD *)v1 + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
      return result;
    case 3:
      uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)(result[4] + 16) + 320))(*(void *)(result[4] + 16));
      uint64_t v4 = result;
      uint64_t v12 = *(void **)(v1[4] + 8);
      v1[4] = v12;
      if (v12 != result + 125) {
        goto LABEL_24;
      }
      goto LABEL_31;
    default:
      uint64_t v4 = 0;
      goto LABEL_24;
  }
}

uint64_t OZObject::all_iterator_t<OZObjectManipulator,true,true,OZObject::defaultAllValidator>::typeCheck(uint64_t *a1)
{
  unsigned int v2 = *((_DWORD *)a1 + 10);
  if (v2 < 2)
  {
    uint64_t v3 = *a1;
    if (*a1 == a1[2]) {
      return 1;
    }
    goto LABEL_6;
  }
  if (v2 != 2)
  {
    if (v2 != 3)
    {
      unsigned int v8 = 0;
      goto LABEL_18;
    }
    uint64_t v3 = a1[4];
LABEL_6:
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4)
    {
      uint64_t v5 = v4 + 16;
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  uint64_t v6 = *(void *)(a1[3] + 16);
  if (v6)
  {
    uint64_t v5 = v6 + 48;
LABEL_10:
    if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 216))(v5))
    {
      uint64_t v7 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 216))(v5);
      unsigned int v8 = 1;
      uint64_t result = OZChannelBase::testFlag(v7, 1);
      if (!result) {
        return result;
      }
    }
    else
    {
      unsigned int v8 = 1;
    }
    goto LABEL_17;
  }
LABEL_13:
  unsigned int v8 = 0;
LABEL_17:
  unsigned int v2 = *((_DWORD *)a1 + 10);
LABEL_18:
  if (v2 < 2)
  {
    uint64_t v10 = *a1;
    if (*a1 != a1[2]) {
      goto LABEL_23;
    }
    return 0;
  }
  if (v2 == 2)
  {
    uint64_t v11 = *(void *)(a1[3] + 16);
    uint64_t v12 = v11 + 48;
    goto LABEL_26;
  }
  if (v2 != 3) {
    return 0;
  }
  uint64_t v10 = a1[4];
LABEL_23:
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = v11 + 16;
LABEL_26:
  if (v11) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v13) {
    return v8;
  }
  else {
    return 0;
  }
}

void *OZObject::all_iterator_t<OZObjectManipulator,false,true,OZObject::defaultAllValidator>::increment(void *result)
{
  uint64_t v1 = result;
  unsigned int v2 = result + 2;
  uint64_t v3 = *result;
  if (*result == result[2])
  {
    uint64_t v3 = *(void *)(v3 + 8);
    *uint64_t result = v3;
  }
  switch(*((_DWORD *)result + 10))
  {
    case 0:
      uint64_t v4 = *(void **)(v3 + 16);
      if (((*(uint64_t (**)(void *))(*v4 + 960))(v4) & 1) == 0
        && ((*(uint64_t (**)(void *))(*v4 + 1056))(v4) & 1) == 0
        && !v4[124]
        && !v4[127])
      {
        uint64_t result = (void *)v4[120];
        if (result)
        {
          uint64_t v25 = *(void **)(*v1 + 8);
          uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
          if (v25 == result && v25 != (void *)*v2) {
            goto LABEL_24;
          }
        }
        goto LABEL_30;
      }
      uint64_t v5 = *v1;
      FxColorDescription v28 = v4;
      int v29 = &v28;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 6), &v28, (uint64_t)&std::piecewise_construct, &v29)[3] = v5;
      if ((*(unsigned int (**)(void *))(*v4 + 960))(v4)) {
        *uint64_t v1 = (*(uint64_t (**)(void *))(*v4 + 1024))(v4);
      }
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1056))(v4);
      if (result)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1104))(v4);
        *uint64_t v1 = result;
        int v6 = 1;
        goto LABEL_49;
      }
      if (v4[124]) {
        goto LABEL_34;
      }
      if (v4[127]) {
        goto LABEL_46;
      }
      return result;
    case 1:
      uint64_t v7 = *(void **)(v3 + 8);
      FxColorDescription v28 = *(void **)(v3 + 16);
      uint64_t v4 = v28;
      unsigned int v8 = result + 6;
      int v29 = &v28;
      uint64_t result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(result + 6), &v28, (uint64_t)&std::piecewise_construct, &v29);
      result[3] = v3;
      if (v4[124])
      {
LABEL_34:
        uint64_t v17 = v4[123];
        goto LABEL_35;
      }
      if (v4[127])
      {
LABEL_46:
        uint64_t v23 = v4[126];
        goto LABEL_47;
      }
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 1112))(v4[120]);
      if (v7 != result || v7 == (void *)*v2) {
        goto LABEL_30;
      }
      uint64_t v9 = (void *)v4[120];
      if (v9[124]) {
        goto LABEL_61;
      }
      if (!v9[127])
      {
        *((_DWORD *)v1 + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
        goto LABEL_68;
      }
      goto LABEL_65;
    case 2:
      uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)(result[3] + 16) + 248))(*(void *)(result[3] + 16));
      uint64_t v4 = result;
      uint64_t v10 = *(void **)(v1[3] + 8);
      v1[3] = v10;
      if (v10 != result + 122) {
        goto LABEL_24;
      }
      uint64_t v11 = (void *)result[126];
      v1[4] = v11;
      if (v11 != result + 125) {
        goto LABEL_48;
      }
LABEL_31:
      *((_DWORD *)v1 + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
      if ((*(unsigned int (**)(void *))(*v4 + 960))(v4))
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1024))(v4);
        *uint64_t v1 = result;
        return result;
      }
      int v29 = v4;
      unsigned int v8 = v1 + 6;
      uint64_t result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 6, &v29);
      uint64_t v18 = result + 3;
      if (!result) {
        uint64_t v18 = v2;
      }
      uint64_t v19 = (void *)*v18;
      *uint64_t v1 = *v18;
      uint64_t v20 = (void *)v1[2];
      if (v19 == v20) {
        return result;
      }
      uint64_t v21 = (void *)v19[1];
      uint64_t result = (void *)v4[120];
      if (result) {
        BOOL v22 = v21 == v20;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        *uint64_t v1 = v21;
        return result;
      }
      uint64_t v24 = *result;
      if ((v4[128] & 8) == 0)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void))(v24 + 1032))();
        if (v21 == result)
        {
          do
          {
LABEL_24:
            uint64_t v4 = (void *)v4[120];
            if (!v4) {
              return result;
            }
            int v29 = v4;
            uint64_t v13 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 6, &v29);
            uint64_t v14 = v13 + 3;
            if (!v13) {
              uint64_t v14 = v2;
            }
            uint64_t v15 = *v14;
            *uint64_t v1 = v15;
            uint64_t result = (void *)v4[120];
            if (!result) {
              break;
            }
            uint64_t v16 = *(void **)(v15 + 8);
            uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
            if (v16 != result) {
              break;
            }
          }
          while (v16 != (void *)*v2);
        }
LABEL_30:
        *uint64_t v1 = *(void *)(*v1 + 8);
        return result;
      }
      uint64_t result = (void *)(*(uint64_t (**)(void))(v24 + 1112))();
      if (v21 != result)
      {
        *((_DWORD *)v1 + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1;
        goto LABEL_30;
      }
      uint64_t v9 = (void *)v4[120];
      if (v9[124])
      {
LABEL_61:
        int v29 = v9;
        uint64_t result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v8, &v29);
        uint64_t v26 = result + 3;
        if (!result) {
          uint64_t v26 = v2;
        }
        *uint64_t v1 = *v26;
        uint64_t v17 = v9[123];
LABEL_35:
        v1[3] = v17;
        int v6 = 2;
LABEL_49:
        *((_DWORD *)v1 + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v6;
        return result;
      }
      if (v9[127])
      {
LABEL_65:
        int v29 = v9;
        uint64_t result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v8, &v29);
        char v27 = result + 3;
        if (!result) {
          char v27 = v2;
        }
        *uint64_t v1 = *v27;
        uint64_t v23 = v9[126];
LABEL_47:
        v1[4] = v23;
LABEL_48:
        int v6 = 3;
        goto LABEL_49;
      }
LABEL_68:
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*v9 + 960))(v9);
      if (!result) {
        goto LABEL_24;
      }
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 1024))(v4[120]);
      *uint64_t v1 = result;
      *((_DWORD *)v1 + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
      return result;
    case 3:
      uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)(result[4] + 16) + 320))(*(void *)(result[4] + 16));
      uint64_t v4 = result;
      uint64_t v12 = *(void **)(v1[4] + 8);
      v1[4] = v12;
      if (v12 != result + 125) {
        goto LABEL_24;
      }
      goto LABEL_31;
    default:
      uint64_t v4 = 0;
      goto LABEL_24;
  }
}

void OZSceneSettings::OZSceneSettings(OZSceneSettings *this)
{
  *(void *)this = &unk_1F113E428;
  *((void *)this + 7) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 16) = -1;
  *((_WORD *)this + 34) = 0;
  *((_DWORD *)this + 18) = -1;
  unsigned int v2 = (char *)this + 80;
  PCColor::PCColor((PCColor *)((char *)this + 80));
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 23);
  if (*(unsigned char *)(theApp + 81))
  {
    *((void *)this + OZDocument::~OZDocument(this - 1) = 0x1E0000002D0;
    *((void *)this + 32) = -1;
    uint64_t v4 = (CGColorSpace *)PCColorSpaceCache::cgsRGB((PCColorSpaceCache *)*((unsigned int *)this + 14));
    PCColor::PCColor(&v16, 0.0, 0.0, 0.0, 0.0, v4);
    long long v5 = *(_OWORD *)&v16.var0.var1[1];
    *(_OWORD *)unsigned int v2 = *(_OWORD *)&v16.var0.var0;
    *((_OWORD *)v2 + OZDocument::~OZDocument(this - 1) = v5;
    *((_OWORD *)v2 + 2) = *(_OWORD *)&v16.var0.var1[3];
    int v6 = (CGColorSpace *)*((void *)this + 16);
    obuint64_t j = v16.var1._obj;
    if (v6 && v6 != v16.var1._obj)
    {
      PCCFRefTraits<CGColorSpace *>::release(v6);
      obuint64_t j = v16.var1._obj;
    }
    *((void *)this + 16) = obj;
    v16.var1._obuint64_t j = 0;
    PCCFRef<CGColorSpace *>::~PCCFRef(&v16.var1._obj);
    int v8 = *((_DWORD *)this + 2);
  }
  else
  {
    uint64_t v9 = (OZPreferenceManager *)OZPreferenceManager::Instance(v3);
    *((_DWORD *)this + 2) = OZPreferenceManager::getDefaultProjectWidth(v9);
    *((_DWORD *)this + 3) = OZPreferenceManager::getDefaultProjectHeight(v9);
    OZChannelBase::setRangeName((OZChannelBase *)v9, (const PCString *)v2);
    uint64_t v10 = (CGColorSpace *)PCColorSpaceCache::cgsRGB((PCColorSpaceCache *)*((unsigned int *)this + 14));
    PCColor::PCColor(&v16, (const PCColor *)v2, v10);
    long long v11 = *(_OWORD *)&v16.var0.var1[1];
    *(_OWORD *)unsigned int v2 = *(_OWORD *)&v16.var0.var0;
    *((_OWORD *)v2 + OZDocument::~OZDocument(this - 1) = v11;
    *((_OWORD *)v2 + 2) = *(_OWORD *)&v16.var0.var1[3];
    uint64_t v12 = (CGColorSpace *)*((void *)this + 16);
    uint64_t v13 = v16.var1._obj;
    if (v12 && v12 != v16.var1._obj)
    {
      PCCFRefTraits<CGColorSpace *>::release(v12);
      uint64_t v13 = v16.var1._obj;
    }
    *((void *)this + 16) = v13;
    v16.var1._obuint64_t j = 0;
    PCCFRef<CGColorSpace *>::~PCCFRef(&v16.var1._obj);
    uint64_t v14 = *((void *)this + 1);
    *((void *)this + 32) = v14;
    int v8 = v14;
  }
  *((_DWORD *)this + 34) = 0;
  *((unsigned char *)this + 14OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1;
  *((_DWORD *)this + 4) = 150;
  *((unsigned char *)this + 2OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 4) = 0x403E000000000000;
  *((unsigned char *)this + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((void *)this + 6) = 0x3FF0000000000000;
  *((void *)this + 24) = 0x400000002;
  *((void *)this + 25) = 0x40E5888000000000;
  uint64_t v15 = MEMORY[0x1E4F1FA48];
  *((_OWORD *)this + 17) = *MEMORY[0x1E4F1FA48];
  *((void *)this + 36) = *(void *)(v15 + 16);
  *((unsigned char *)this + 296) = 0;
  *((void *)this + 18) = 0x800000002;
  *((void *)this + 19) = 0x3FF0000000000000;
  *((unsigned char *)this + 16OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((void *)this + 2OZDocument::~OZDocument(this - 1) = 0x4000000000000000;
  *((_DWORD *)this + 44) = 2;
  *((_DWORD *)this + 53) = 0;
  *((unsigned char *)this + 22OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((_DWORD *)this + 57) = 3;
  *((unsigned char *)this + 232) = 0;
  *((_DWORD *)this + 59) = v8;
  *((unsigned char *)this + 24OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((unsigned char *)this + 264) = 1;
  *((void *)this + 3OZDocument::~OZDocument(this - 1) = 0x4059000000000000;
  *((_DWORD *)this + 67) = 0;
}

void sub_1B7BFF728(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  PCCFRef<CGColorSpace *>::~PCCFRef(v4);
  PCString::~PCString(v2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 128));
  _Unwind_Resume(a1);
}

uint64_t OZSceneSettings::OZSceneSettings(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F113E428;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 2OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(unsigned char *)(a1 + 69) = 0;
  *(_DWORD *)(a1 + 72) = -1;
  long long v4 = *(_OWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 8OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v4;
  int v6 = *(CGColorSpace **)(a2 + 128);
  *(void *)(a1 + 128) = v6;
  if (v6) {
    PCCFRefTraits<CGColorSpace *>::retain(v6);
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 14OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *(unsigned char *)(a2 + 140);
  uint64_t v7 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v7;
  *(unsigned char *)(a1 + 16OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  PCString::PCString((PCString *)(a1 + 184), (const PCString *)(a2 + 184));
  uint64_t v8 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 20OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v8;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(unsigned char *)(a1 + 22OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *(unsigned char *)(a2 + 220);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(unsigned char *)(a1 + 24OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *(unsigned char *)(a2 + 240);
  uint64_t v9 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v9;
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
  uint64_t v10 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)(a1 + 272) = *MEMORY[0x1E4F1FA48];
  *(void *)(a1 + 288) = *(void *)(v10 + 16);
  *(unsigned char *)(a1 + 296) = 0;
  return a1;
}

void sub_1B7BFF8E4(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

uint64_t OZSceneSettings::setFrameRate(uint64_t this, double a2, char a3)
{
  *(double *)(this + 32) = a2;
  int v3 = vcvtmd_s64_f64(a2 + 0.5 + 0.0000001);
  *(unsigned char *)(this + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = a3;
  double v4 = a2 - (double)v3;
  if (v4 > -0.1 && v3 == 30)
  {
    double v6 = 30.0;
    if (v4 < 0.0) {
      goto LABEL_17;
    }
  }
  if (v4 > -0.1 && v3 == 24)
  {
    double v6 = 24.0;
    if (v4 < 0.0) {
      goto LABEL_17;
    }
  }
  if (v4 > -0.1 && v3 == 60 && v4 < 0.0)
  {
    double v6 = 60.0;
LABEL_17:
    *(double *)(this + 32) = v6;
    *(unsigned char *)(this + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1;
  }
  return this;
}

CMTime *OZSceneSettings::GetFrameDuration@<X0>(OZSceneSettings *this@<X0>, double a2@<D0>, CMTime *a3@<X8>)
{
  int32_t v3 = 120000;
  signed int v4 = vcvtmd_s64_f64(a2 + 0.5 + 0.0000001);
  if (v4 == 30 && (this & 1) != 0)
  {
    int64_t v5 = 4004;
  }
  else if (v4 == 24 && (this & 1) != 0)
  {
    int64_t v5 = 5005;
  }
  else if (v4 == 60 && (this & 1) != 0)
  {
    int64_t v5 = 2002;
  }
  else
  {
    if (v4)
    {
      if (600 / v4 * v4 == 600)
      {
        int64_t v5 = (uint64_t)(600 / v4) << 8;
        int32_t v3 = 153600;
        return CMTimeMake(a3, v5, v3);
      }
      int32_t v3 = v4 << 8;
    }
    else
    {
      int32_t v3 = 7680;
    }
    int64_t v5 = 256;
  }
  return CMTimeMake(a3, v5, v3);
}

uint64_t OZSceneSettings::setHostAppProjectHeight(uint64_t this, int a2)
{
  *(_DWORD *)(this + 26OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = a2;
  return this;
}

uint64_t OZSceneSettings::getHostAppProjectHeight(OZSceneSettings *this)
{
  uint64_t result = *((unsigned int *)this + 65);
  if (result == -1) {
    return *((unsigned int *)this + 3);
  }
  return result;
}

__n128 OZSceneSettings::getFrameDuration@<Q0>(OZSceneSettings *this@<X0>, __n128 *a2@<X8>)
{
  if (!*((unsigned char *)this + 296))
  {
    OZSceneSettings::GetFrameDuration((OZSceneSettings *)*((unsigned __int8 *)this + 40), (double)(int)vcvtmd_s64_f64(*((double *)this + 4) + 0.5 + 0.0000001), &v5);
    *(CMTime *)((char *)this + 272) = v5;
    *((unsigned char *)this + 296) = 1;
  }
  __n128 result = *((__n128 *)this + 17);
  *a2 = result;
  a2[1].n128_u64[0] = *((void *)this + 36);
  return result;
}

double OZSceneSettings::getDisplayFrameRate(OZSceneSettings *this)
{
  double result = *((double *)this + 4);
  if (*((unsigned char *)this + 40)) {
    return (double)(int)vcvtmd_s64_f64(result * 100.0 + 0.5 + 0.0000001) * 0.01;
  }
  return result;
}

uint64_t OZSceneSettings::getBitDepth(OZSceneSettings *this)
{
  if (*(unsigned char *)(theApp + 81)) {
    return 2;
  }
  unsigned int v2 = (OZPreferenceManager *)OZPreferenceManager::Instance(this);
  OZPreferenceManager::getRenderingTechnology(v2, (uint64_t)v3);
  return HGGLBlendingInfo::GetDstAlphaFactor((HGGLBlendingInfo *)v3);
}

uint64_t OZSceneSettings::dynamicRangeTrackingEnabled(OZSceneSettings *this)
{
  return *((unsigned __int8 *)this + 68);
}

uint64_t OZSceneSettings::setFieldRenderingMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 144) = a2;
  return result;
}

uint64_t OZSceneSettings::getAnimateFlag(OZSceneSettings *this)
{
  return *((unsigned __int8 *)this + 220);
}

uint64_t OZSceneSettings::setAnimateFlag(OZSceneSettings *this, char a2)
{
  *((unsigned char *)this + 22OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = a2;
  uint64_t result = OZCoreGlobals::getInstance(this);
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t OZSceneSettings::get360ProjectMode(OZSceneSettings *this)
{
  return *((unsigned int *)this + 67);
}

BOOL OZSceneSettings::is360Project(OZSceneSettings *this)
{
  return *((_DWORD *)this + 67) != 0;
}

uint64_t OZSceneSettings::setRawWorkingGamut(uint64_t result, int a2)
{
  *(_DWORD *)(result + 56) = a2;
  if (a2 != 1) {
    *(_DWORD *)(result + 64) = 0;
  }
  return result;
}

uint64_t OZSceneSettings::writeHeader(OZSceneSettings *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZSceneSettingsScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 74);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZSceneSettings::writeBody(OZSceneSettings *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZSceneSettingsScope);
  uint64_t v4 = *((unsigned int *)this + 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v4);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v5 = *((unsigned int *)this + 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v6 = *((unsigned int *)this + 4);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 4);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v6);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v7 = *((unsigned __int8 *)this + 20);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 42);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v7);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  double v8 = *((double *)this + 4);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 5);
  (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v8);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v9 = *((unsigned __int8 *)this + 40);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 6);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v9);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  double v10 = *((double *)this + 6);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 9);
  (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v10);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v11 = *((unsigned int *)this + 14);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 47);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v11);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v12 = *((unsigned int *)this + 15);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 48);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v12);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v13 = *((unsigned int *)this + 16);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 50);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v13);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 10);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  PCColor::getColorSpace((PCColor *)((char *)this + 80), &v36);
  PCColor::getRGBA((PCColor *)((char *)this + 80), (float *)&v38 + 1, (float *)&v38, (float *)&v37 + 1, (float *)&v37, (const PCColorSpaceHandle *)&v36);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v36);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, float))(*(void *)a2 + 176))(a2, 1, *((float *)&v38 + 1));
  (*(void (**)(PCSerializerWriteStream *, uint64_t, float))(*(void *)a2 + 176))(a2, 2, *(float *)&v38);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, float))(*(void *)a2 + 176))(a2, 3, *((float *)&v37 + 1));
  (*(void (**)(PCSerializerWriteStream *, uint64_t, float))(*(void *)a2 + 176))(a2, 4, *(float *)&v37);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v14 = *((unsigned int *)this + 48);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 11);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v14);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v15 = (8 * *((_DWORD *)this + 49));
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 12);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v15);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v16 = *((unsigned int *)this + 36);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 15);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v16);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v17 = *((unsigned int *)this + 37);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 17);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v17);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  double v18 = *((double *)this + 19);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 18);
  (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v18);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v19 = *((unsigned __int8 *)this + 160);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 45);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v19);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v20 = *((unsigned int *)this + 6);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 20);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v20);
  uint64_t v21 = (OZPreferenceManager *)(*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  BOOL v22 = (TXParagraphStyleFolder_Factory *)OZPreferenceManager::Instance(v21);
  if (TXParagraphStyleFolder_Factory::version(v22))
  {
    PCString::PCString(&v35, (const PCString *)this + 23);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 25);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v35);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCString::~PCString(&v35);
  }
  uint64_t v23 = *((unsigned int *)this + 34);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 38);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v23);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v24 = *((unsigned int *)this + 44);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 35);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v24);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v25 = *((unsigned int *)this + 53);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 34);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v25);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v26 = *((unsigned __int8 *)this + 220);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 39);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v26);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v28 = OZChannelBase::setRangeName((OZChannelBase *)*((unsigned int *)this + 57), v27);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 41);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v28);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v29 = *((unsigned __int8 *)this + 240);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 43);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v29);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  double v30 = *((double *)this + 31);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 51);
  (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v30);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v31 = *((unsigned __int8 *)this + 68);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 52);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v31);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v32 = *((unsigned __int8 *)this + 69);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 53);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v32);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  if (!*((unsigned char *)this + 264))
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 44);
    (*(void (**)(PCSerializerWriteStream *, void))(*(void *)a2 + 48))(a2, 0);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  uint64_t v33 = *((unsigned int *)this + 67);
  if (v33)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 49);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v33);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B7C00D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t OZSceneSettings::parseBegin(OZSceneSettings *this, PCSerializerReadStream *a2)
{
  *((unsigned char *)this + 14OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((_DWORD *)this + 34) = 0;
  *((unsigned char *)this + 264) = 1;
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZSceneSettingsScope);
  return 1;
}

uint64_t OZSceneSettings::parseEnd(OZSceneSettings *this, PCSerializerReadStream *a2)
{
  if (!*((unsigned char *)this + 140))
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    PCColor::getColorSpace((PCColor *)((char *)this + 80), &v8);
    PCColor::getRGBA((PCColor *)((char *)this + 80), (float *)&v10 + 1, (float *)&v10, (float *)&v9 + 1, (float *)&v9, (const PCColorSpaceHandle *)&v8);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v8);
    if (*(float *)&v9 <= 0.0)
    {
      int v4 = 0;
    }
    else
    {
      int v4 = 2;
      if (*((float *)&v10 + 1) <= 0.0 && *(float *)&v10 <= 0.0) {
        int v4 = 2 * (*((float *)&v9 + 1) > 0.0);
      }
    }
    *((_DWORD *)this + 34) = v4;
    *((unsigned char *)this + 14OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1;
    PCColor::setAlpha((PCColor *)((char *)this + 80), 1.0);
  }
  unsigned int v5 = *((_DWORD *)a2 + 26);
  if (v5 < 5 || (v5 == 5 ? (BOOL v6 = *((_DWORD *)a2 + 27) > 0xAu) : (BOOL v6 = 1), !v6))
  {
    if (*((_DWORD *)this + 15) == -1 && *((_DWORD *)this + 14) == 1) {
      *((_DWORD *)this + 15) = 3;
    }
    *((_DWORD *)this + 16) = 0;
  }
  if (*((_DWORD *)this + 14) != 1) {
    *((_DWORD *)this + 16) = 0;
  }
  return 1;
}

void sub_1B7C00E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t OZSceneSettings::parseElement(OZSceneSettings *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  switch(*((_DWORD *)a3 + 2))
  {
    case 2:
      BOOL v6 = (char *)this + 8;
      goto LABEL_28;
    case 3:
      BOOL v6 = (char *)this + 12;
      goto LABEL_28;
    case 4:
      uint64_t v7 = (char *)this + 16;
      goto LABEL_32;
    case 5:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 64))(a3, (char *)this + 32);
      goto LABEL_7;
    case 6:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 72))(a3, (char *)this + 40);
LABEL_7:
      if (*((_DWORD *)a2 + 26) <= 4u)
      {
        OZSceneSettings::getFrameDuration(this, (__n128 *)&v24);
        PCSerializerReadStream::setTimeScale(a2, (const CMTime *)&v24);
      }
      return 1;
    case 9:
      double v8 = (char *)this + 48;
      goto LABEL_49;
    case 0xA:
      double v27 = 0.0;
      double v28 = 0.0;
      double v26 = 0.0;
      double v25 = 1.0;
      if (*((_DWORD *)a2 + 26) > 3u) {
        uint64_t v9 = PCColorSpaceCache::cgsRGB((PCColorSpaceCache *)*((unsigned int *)this + 14));
      }
      else {
        uint64_t v9 = PCColorSpaceCache::cgGenericRGB(this);
      }
      uint64_t v14 = (CGColorSpace *)v9;
      (*(void (**)(PCStreamElement *, uint64_t, double *))(*(void *)a3 + 144))(a3, 1, &v28);
      (*(void (**)(PCStreamElement *, uint64_t, double *))(*(void *)a3 + 144))(a3, 2, &v27);
      (*(void (**)(PCStreamElement *, uint64_t, double *))(*(void *)a3 + 144))(a3, 3, &v26);
      (*(void (**)(PCStreamElement *, uint64_t, double *))(*(void *)a3 + 144))(a3, 4, &v25);
      float v15 = v28;
      float v16 = v27;
      float v17 = v26;
      float v18 = v25;
      PCColor::setRGBA((PCColor *)((char *)this + 80), v15, v16, v17, v18, v14);
      if (v14 != (CGColorSpace *)PCColorSpaceCache::cgsRGB((PCColorSpaceCache *)*((unsigned int *)this + 14)))
      {
        uint64_t v19 = (CGColorSpace *)PCColorSpaceCache::cgsRGB((PCColorSpaceCache *)*((unsigned int *)this + 14));
        PCColor::PCColor(&v24, (const PCColor *)((char *)this + 80), v19);
        long long v20 = *(_OWORD *)&v24.var0.var1[1];
        *((_OWORD *)this + 5) = *(_OWORD *)&v24.var0.var0;
        *((_OWORD *)this + 6) = v20;
        *((_OWORD *)this + 7) = *(_OWORD *)&v24.var0.var1[3];
        uint64_t v21 = (CGColorSpace *)*((void *)this + 16);
        obuint64_t j = v24.var1._obj;
        if (v21 && v21 != v24.var1._obj)
        {
          PCCFRefTraits<CGColorSpace *>::release(v21);
          obuint64_t j = v24.var1._obj;
        }
        *((void *)this + 16) = obj;
        v24.var1._obuint64_t j = 0;
        PCCFRef<CGColorSpace *>::~PCCFRef(&v24.var1._obj);
      }
      return 1;
    case 0xB:
      uint64_t v7 = (char *)this + 192;
      goto LABEL_32;
    case 0xC:
      uint64_t v10 = (_DWORD *)((char *)this + 196);
      if ((*(unsigned int (**)(PCStreamElement *, char *))(*(void *)a3 + 32))(a3, (char *)this + 196)) {
        *v10 >>= 3;
      }
      return 1;
    case 0xF:
      uint64_t v7 = (char *)this + 144;
      goto LABEL_32;
    case 0x11:
      uint64_t v7 = (char *)this + 148;
      goto LABEL_32;
    case 0x12:
      double v8 = (char *)this + 152;
      goto LABEL_49;
    case 0x13:
      v24.var0.int var0 = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(void *)a3 + 32))(a3, &v24);
      return 1;
    case 0x14:
      uint64_t v7 = (char *)this + 24;
      goto LABEL_32;
    case 0x19:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 16))(a3, (char *)this + 184);
      return 1;
    case 0x1D:
      LOBYTE(v24.var0.varOZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(void *)a3 + 72))(a3, &v24);
      if (LOBYTE(v24.var0.var0))
      {
        if (*((unsigned char *)this + 140))
        {
          int v11 = *((_DWORD *)this + 34);
          if (v11 <= 1) {
            int v11 = 1;
          }
        }
        else
        {
          int v11 = 1;
        }
LABEL_62:
        *((_DWORD *)this + 34) = v11;
      }
      else if (!*((unsigned char *)this + 140))
      {
        *((_DWORD *)this + 34) = 0;
      }
LABEL_63:
      *((unsigned char *)this + 14OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1;
      return 1;
    case 0x1E:
      uint64_t v7 = (char *)this + 208;
      goto LABEL_32;
    case 0x22:
      uint64_t v7 = (char *)this + 212;
      goto LABEL_32;
    case 0x23:
      BOOL v6 = (char *)this + 176;
LABEL_28:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 24))(a3, v6);
      return 1;
    case 0x24:
      LOBYTE(v24.var0.varOZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(void *)a3 + 72))(a3, &v24);
      if (!LOBYTE(v24.var0.var0)) {
        return 1;
      }
      int v11 = 2;
      goto LABEL_62;
    case 0x25:
      uint64_t v7 = (char *)this + 216;
LABEL_32:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 32))(a3, v7);
      return 1;
    case 0x26:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 32))(a3, (char *)this + 136);
      goto LABEL_63;
    case 0x27:
      uint64_t v12 = (char *)this + 220;
      goto LABEL_52;
    case 0x28:
      v24.var0.int var0 = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(void *)a3 + 56))(a3, &v24);
      return 1;
    case 0x29:
      v24.var0.int var0 = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(void *)a3 + 32))(a3, &v24);
      *((_DWORD *)this + 57) = PCColorSpaceCache::intToColorSpaceID(v24.var0.var0, 3u);
      return 1;
    case 0x2A:
      uint64_t v12 = (char *)this + 20;
      goto LABEL_52;
    case 0x2B:
      uint64_t v12 = (char *)this + 240;
      goto LABEL_52;
    case 0x2C:
      uint64_t v12 = (char *)this + 264;
      goto LABEL_52;
    case 0x2D:
      uint64_t v12 = (char *)this + 160;
      goto LABEL_52;
    case 0x2E:
      v24.var0.int var0 = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(void *)a3 + 24))(a3, &v24);
      int var0 = v24.var0.var0 > 2;
      goto LABEL_44;
    case 0x2F:
      v24.var0.int var0 = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(void *)a3 + 24))(a3, &v24);
      int var0 = v24.var0.var0;
LABEL_44:
      *((_DWORD *)this + 14) = var0;
      return 1;
    case 0x30:
      v24.var0.int var0 = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(void *)a3 + 24))(a3, &v24);
      *((_DWORD *)this + 15) = v24.var0.var0;
      return 1;
    case 0x31:
      v24.var0.int var0 = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(void *)a3 + 32))(a3, &v24);
      *((_DWORD *)this + 67) = v24.var0.var0;
      return 1;
    case 0x32:
      v24.var0.int var0 = 0;
      (*(void (**)(PCStreamElement *, PCColor *))(*(void *)a3 + 24))(a3, &v24);
      *((_DWORD *)this + 16) = v24.var0.var0;
      return 1;
    case 0x33:
      double v8 = (char *)this + 248;
LABEL_49:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 64))(a3, v8);
      return 1;
    case 0x34:
      uint64_t v12 = (char *)this + 68;
      goto LABEL_52;
    case 0x35:
      uint64_t v12 = (char *)this + 69;
LABEL_52:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 72))(a3, v12);
      break;
    default:
      return 1;
  }
  return 1;
}

void sub_1B7C01578(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

OZImageElement *OZRetimingBehavior::didAddToNode(OZRetimingBehavior *this, OZSceneNode *a2)
{
  uint64_t result = (OZImageElement *)OZChannelBehavior::didAddToNode(this, a2);
  if (!*((unsigned char *)this + 544))
  {
    uint64_t result = (OZImageElement *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 272))(a2);
    if (result)
    {
      OZRetimingBehavior::addRetimingNode(this, a2);
      if (result) {
        uint64_t result = (OZImageElement *)OZImageElement::updateRetimingState(result, v5);
      }
      *((unsigned char *)this + 544) = 1;
    }
  }
  return result;
}

void OZMaterialLayerSequenceFolder::getImagePosition(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = 0;
}

__n128 OZMaterialLayerSequenceFolder::getImageScale(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __asm { FMOV            V0.2D, #1.0 }
  *a3 = result;
  return result;
}

void OZMaterialLayerSequenceFolder::getImageRotation(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void OZChannelMaterialLayerMap::~OZChannelMaterialLayerMap(OZChannelMaterialLayerMap *this)
{
  *(void *)this = &unk_1F1143100;
  *((void *)this + 2) = &unk_1F1143458;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6304));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 6152));
  OZChannelEnum::~OZChannelEnum((OZChannelMaterialLayerMap *)((char *)this + 5896));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 5744));
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform((OZChannelMaterialLayerMap *)((char *)this + 1840));
  OZChannelEnum::~OZChannelEnum((OZChannelMaterialLayerMap *)((char *)this + 1584));

  OZChannelImageWithOptions::~OZChannelImageWithOptions(this);
}

{
  uint64_t vars8;

  OZChannelMaterialLayerMap::~OZChannelMaterialLayerMap(this);

  JUMPOUT(0x1BA9BFBA0);
}

void sub_1B7C019EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCURL::~PCURL((PCURL *)va);
  _Unwind_Resume(a1);
}

void sub_1B7C01B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, int a12, __int16 a13, char a14, char a15)
{
}

PCURL *std::unique_ptr<PCURL>::reset[abi:ne180100](PCURL **a1, PCURL *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    PCURL::~PCURL(result);
    JUMPOUT(0x1BA9BFBA0);
  }
  return result;
}

void METimeRemap::METimeRemap(METimeRemap *this)
{
  *(_DWORD *)&this->_isEndTimeAligned = 0;
  *(_DWORD *)&this->_isIntroOptional = 0;
  this->_pBuildInEnableChan = 0;
  this->_pBuildOutEnableChan = 0;
}

__n128 METimeRemap::setIntroDuration(METimeRemap *this, const CMTime *a2)
{
  __n128 result = *(__n128 *)&a2->value;
  this->_introDuration.CMTimeEpoch epoch = a2->epoch;
  *(__n128 *)&this->_introDuration.CMTimeValue value = result;
  return result;
}

__n128 METimeRemap::setOutroDuration(METimeRemap *this, const CMTime *a2)
{
  __n128 result = *(__n128 *)&a2->value;
  this->_outroDuration.CMTimeEpoch epoch = a2->epoch;
  *(__n128 *)&this->_outroDuration.CMTimeValue value = result;
  return result;
}

__n128 METimeRemap::setScaleableDuration(METimeRemap *this, const CMTime *a2)
{
  __n128 result = *(__n128 *)&a2->value;
  this->_scaleableDuration.CMTimeEpoch epoch = a2->epoch;
  *(__n128 *)&this->_scaleableDuration.CMTimeValue value = result;
  return result;
}

METimeRemap *METimeRemap::setIsOutroOptional(METimeRemap *this, BOOL a2)
{
  this->_isOutroOptional = a2;
  return this;
}

METimeRemap *METimeRemap::setIsLoop(METimeRemap *this, BOOL a2)
{
  this->_isLoop = a2;
  return this;
}

METimeRemap *METimeRemap::setForceDisableLoop(METimeRemap *this, BOOL a2)
{
  this->_forceDisableLoop = a2;
  return this;
}

BOOL METimeRemap::forceDisableLoop(METimeRemap *this)
{
  return this->_forceDisableLoop;
}

METimeRemap *METimeRemap::setForceDisableBuildAnimation(METimeRemap *this, BOOL a2)
{
  this->_forceDisableBuildAnimation = a2;
  return this;
}

BOOL METimeRemap::forceDisableBuildAnimation(METimeRemap *this)
{
  return this->_forceDisableBuildAnimation;
}

METimeRemap *METimeRemap::setBuildEnableChannels(METimeRemap *this, OZChannelBool *a2, OZChannelBool *a3)
{
  this->_pBuildInEnableChan = a2;
  this->_pBuildOutEnableChan = a3;
  return this;
}

uint64_t METimeRemap::shouldShowIntro(METimeRemap *this)
{
  if (this->_isIntroOptional)
  {
    pBuildInEnableChan = this->_pBuildInEnableChan;
    if (!pBuildInEnableChan) {
      return 0;
    }
    CMTimeMakeWithSeconds(&v5, 0.0, 30);
    uint64_t result = OZChannel::getValueAsInt((OZChannel *)pBuildInEnableChan, &v5, 0.0);
    if (!result) {
      return result;
    }
  }
  CMTimeMakeWithSeconds(&v4, 0.0, 30);
  CMTime time1 = (CMTime)this->_introDuration;
  CMTime time2 = v4;
  uint64_t result = CMTimeCompare(&time1, &time2);
  if (result) {
    return !this->_forceDisableBuildAnimation;
  }
  return result;
}

uint64_t METimeRemap::shouldShowOutro(METimeRemap *this)
{
  if (this->_isOutroOptional)
  {
    pBuildOutEnableChan = this->_pBuildOutEnableChan;
    if (!pBuildOutEnableChan) {
      return 0;
    }
    CMTimeMakeWithSeconds(&v5, 0.0, 30);
    uint64_t result = OZChannel::getValueAsInt((OZChannel *)pBuildOutEnableChan, &v5, 0.0);
    if (!result) {
      return result;
    }
  }
  CMTimeMakeWithSeconds(&v4, 0.0, 30);
  CMTime time1 = (CMTime)this->_outroDuration;
  CMTime time2 = v4;
  uint64_t result = CMTimeCompare(&time1, &time2);
  if (result) {
    return !this->_forceDisableBuildAnimation;
  }
  return result;
}

double METimeRemap::motionTimeFromComponentTime@<D0>(METimeRemap *this@<X0>, const CMTime *a2@<X1>, const CMTimeRange *a3@<X2>, CMTime *a4@<X3>, uint64_t a5@<X8>)
{
  int shouldShowIntro = METimeRemap::shouldShowIntro(this);
  memset(&v21, 0, sizeof(v21));
  CMTime time1 = *a2;
  CMTime time2 = a3->start;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v21);
  if (this->_isLoop && !this->_forceDisableLoop)
  {
    if (a4)
    {
      CMTimeMake(&time1, 1, 1);
      *a4 = time1;
    }
    if (!shouldShowIntro)
    {
      memset(&v20, 0, sizeof(v20));
      operator/((long long *)&v21.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&v20);
      CMTimeMake(&v15, 1, 1);
      CMTime time1 = v20;
      CMTime time2 = v15;
      PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v16);
      CMTime time1 = v20;
      CMTime time2 = v16;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
      operator*((long long *)&v17.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&v18);
      CMTime time1 = (CMTime)this->_introDuration;
      CMTime time2 = v18;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
      CMTimeEpoch epoch = v19.epoch;
      CMTime v21 = v19;
      double result = *(double *)&v19.value;
      *(_OWORD *)a5 = *(_OWORD *)&v19.value;
LABEL_35:
      *(void *)(a5 + 16) = epoch;
      return result;
    }
    CMTime time1 = v21;
    CMTime time2 = (CMTime)this->_introDuration;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      memset(&v20, 0, sizeof(v20));
      CMTime time1 = v21;
      CMTime time2 = (CMTime)this->_introDuration;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v20);
      CMTime time1 = v20;
      CMTime time2 = (CMTime)this->_scaleableDuration;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        memset(&v19, 0, sizeof(v19));
        operator/((long long *)&v20.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&v19);
        CMTimeMake(&v14, 1, 1);
        CMTime time1 = v19;
        CMTime time2 = v14;
        PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v15);
        CMTime time1 = v19;
        CMTime time2 = v15;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v16);
        operator*((long long *)&v16.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&v17);
        CMTime time1 = (CMTime)this->_introDuration;
        CMTime time2 = v17;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v18);
        CMTime v21 = v18;
      }
    }
LABEL_34:
    double result = *(double *)&v21.value;
    *(_OWORD *)a5 = *(_OWORD *)&v21.value;
    CMTimeEpoch epoch = v21.epoch;
    goto LABEL_35;
  }
  if ((METimeRemap::shouldShowIntro(this) & 1) == 0 && (METimeRemap::shouldShowOutro(this) & 1) == 0)
  {
    if (a4)
    {
      operator/((long long *)&a3->duration.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&time1);
      *a4 = time1;
    }
    operator*((long long *)&this->_scaleableDuration.value, (uint64_t)&v21, (uint64_t)&v19);
    operator/((long long *)&v19.value, (uint64_t)&a3->duration, (uint64_t)&v20);
    CMTime time1 = (CMTime)this->_introDuration;
    *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)&v20.value;
    CMTimeEpoch v11 = v20.epoch;
    goto LABEL_39;
  }
  if ((METimeRemap::shouldShowIntro(this) & 1) == 0 && METimeRemap::shouldShowOutro(this))
  {
    memset(&v20, 0, sizeof(v20));
    CMTime time1 = a3->duration;
    CMTime time2 = (CMTime)this->_outroDuration;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v20);
    CMTime time1 = v21;
    CMTime time2 = v20;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      if (a4)
      {
        operator/((long long *)&v20.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&time1);
        *a4 = time1;
      }
      operator*((long long *)&this->_scaleableDuration.value, (uint64_t)&v21, (uint64_t)&v18);
      operator/((long long *)&v18.value, (uint64_t)&v20, (uint64_t)&v19);
      CMTime time1 = (CMTime)this->_introDuration;
      *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)&v19.value;
      CMTimeEpoch v11 = v19.epoch;
LABEL_39:
      time2.CMTimeEpoch epoch = v11;
      return PC_CMTimeSaferAdd(&time1, &time2, a5);
    }
    goto LABEL_15;
  }
  if (METimeRemap::shouldShowIntro(this) && (METimeRemap::shouldShowOutro(this) & 1) == 0)
  {
    CMTime time1 = v21;
    CMTime time2 = (CMTime)this->_introDuration;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      memset(&v20, 0, sizeof(v20));
      CMTime time1 = a3->duration;
      CMTime time2 = (CMTime)this->_introDuration;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v20);
      memset(&v19, 0, sizeof(v19));
      CMTime time1 = v21;
      CMTime time2 = (CMTime)this->_introDuration;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v19);
      memset(&v18, 0, sizeof(v18));
      operator*((long long *)&this->_scaleableDuration.value, (uint64_t)&v19, (uint64_t)&time1);
      operator/((long long *)&time1.value, (uint64_t)&v20, (uint64_t)&v18);
      if (a4)
      {
        operator/((long long *)&v20.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&time1);
        *a4 = time1;
      }
      CMTime time1 = (CMTime)this->_introDuration;
      *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)&v18.value;
      CMTimeEpoch v11 = v18.epoch;
      goto LABEL_39;
    }
    goto LABEL_32;
  }
  CMTime time1 = v21;
  CMTime time2 = (CMTime)this->_introDuration;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
LABEL_32:
    if (a4)
    {
      CMTimeMake(&time1, 1, 1);
      *a4 = time1;
    }
    goto LABEL_34;
  }
  memset(&v20, 0, sizeof(v20));
  CMTime time1 = a3->duration;
  CMTime time2 = (CMTime)this->_outroDuration;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v20);
  CMTime time1 = v21;
  CMTime time2 = v20;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    memset(&v19, 0, sizeof(v19));
    CMTime time1 = a3->duration;
    CMTime time2 = (CMTime)this->_introDuration;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v18);
    CMTime time1 = v18;
    CMTime time2 = (CMTime)this->_outroDuration;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v19);
    memset(&v18, 0, sizeof(v18));
    CMTime time1 = v21;
    CMTime time2 = (CMTime)this->_introDuration;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v18);
    if (a4)
    {
      operator/((long long *)&v19.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&time1);
      *a4 = time1;
    }
    operator*((long long *)&this->_scaleableDuration.value, (uint64_t)&v18, (uint64_t)&v16);
    operator/((long long *)&v16.value, (uint64_t)&v19, (uint64_t)&v17);
    CMTime time1 = (CMTime)this->_introDuration;
    *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)&v17.value;
    CMTimeEpoch v11 = v17.epoch;
    goto LABEL_39;
  }
LABEL_15:
  if (a4)
  {
    CMTimeMake(&time1, 1, 1);
    *a4 = time1;
  }
  CMTime time1 = (CMTime)this->_introDuration;
  CMTime time2 = (CMTime)this->_scaleableDuration;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v18);
  CMTime time1 = v18;
  CMTime time2 = v21;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
  CMTime time1 = v19;
  CMTime time2 = v20;
  return PC_CMTimeSaferSubtract(&time1, &time2, a5);
}

double METimeRemap::componentTimeFromMotionTime@<D0>(METimeRemap *this@<X0>, const CMTime *a2@<X1>, const CMTimeRange *a3@<X2>, uint64_t a4@<X8>)
{
  if (this->_isLoop && !this->_forceDisableLoop) {
    goto LABEL_18;
  }
  if ((METimeRemap::shouldShowIntro(this) & 1) == 0 && (METimeRemap::shouldShowOutro(this) & 1) == 0)
  {
    CMTime time1 = *a2;
    CMTime time2 = (CMTime)this->_introDuration;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
    operator*((long long *)&a3->duration.value, (uint64_t)&v17, (uint64_t)&time1);
    p_scaleableDuration = &this->_scaleableDuration;
    goto LABEL_15;
  }
  if ((METimeRemap::shouldShowIntro(this) & 1) != 0 || !METimeRemap::shouldShowOutro(this))
  {
    if (METimeRemap::shouldShowIntro(this) && (METimeRemap::shouldShowOutro(this) & 1) == 0)
    {
      CMTime time1 = *a2;
      CMTime time2 = (CMTime)this->_introDuration;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        long long v17 = 0uLL;
        CMTimeEpoch v18 = 0;
        CMTime time1 = a3->duration;
        CMTime time2 = (CMTime)this->_introDuration;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
        CMTime time1 = *a2;
        CMTime time2 = (CMTime)this->_introDuration;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v14);
        operator*(&v17, (uint64_t)&v14, (uint64_t)&v15);
        operator/((long long *)&v15.value, (uint64_t)&this->_scaleableDuration, (uint64_t)&v16);
        *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)&v16.value;
        CMTimeEpoch epoch = v16.epoch;
        goto LABEL_20;
      }
    }
    else
    {
      CMTime time1 = *a2;
      CMTime time2 = (CMTime)this->_introDuration;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        long long v17 = 0uLL;
        CMTimeEpoch v18 = 0;
        CMTime time1 = a3->duration;
        CMTime time2 = (CMTime)this->_outroDuration;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
        double v8 = (CMTime *)&this->_scaleableDuration;
        CMTime time1 = (CMTime)this->_introDuration;
        CMTime time2 = (CMTime)this->_scaleableDuration;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
        CMTime time1 = *a2;
        CMTime time2 = v19;
        if (CMTimeCompare(&time1, &time2) >= 1) {
          goto LABEL_13;
        }
        memset(&v16, 0, sizeof(v16));
        CMTime time1 = a3->duration;
        CMTime time2 = (CMTime)this->_introDuration;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v19);
        CMTime time1 = v19;
        CMTime time2 = (CMTime)this->_outroDuration;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v16);
        CMTime time1 = *a2;
        CMTime time2 = (CMTime)this->_introDuration;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)v13);
        operator*((long long *)&v16.value, (uint64_t)v13, (uint64_t)&v14);
        operator/(&v14, (uint64_t)&this->_scaleableDuration, (uint64_t)&v15);
        *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)&v15.value;
        CMTimeEpoch epoch = v15.epoch;
LABEL_20:
        time1.CMTimeEpoch epoch = epoch;
        *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)&this->_introDuration.value;
        CMTimeEpoch v10 = this->_introDuration.epoch;
        goto LABEL_21;
      }
    }
LABEL_18:
    CMTime v19 = *a2;
    goto LABEL_22;
  }
  long long v17 = 0uLL;
  CMTimeEpoch v18 = 0;
  CMTime time1 = a3->duration;
  CMTime time2 = (CMTime)this->_outroDuration;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v17);
  double v8 = (CMTime *)&this->_scaleableDuration;
  CMTime time1 = (CMTime)this->_introDuration;
  CMTime time2 = (CMTime)this->_scaleableDuration;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
  CMTime time1 = *a2;
  CMTime time2 = v19;
  if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
  {
LABEL_13:
    CMTime time1 = *a2;
    CMTime time2 = (CMTime)this->_introDuration;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
    CMTime time1 = v15;
    CMTime time2 = *v8;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v16);
    CMTime time1 = v16;
    *(_OWORD *)&time2.CMTimeValue value = v17;
    CMTimeEpoch v10 = v18;
LABEL_21:
    time2.CMTimeEpoch epoch = v10;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v19);
    goto LABEL_22;
  }
  CMTime time1 = *a2;
  CMTime time2 = (CMTime)this->_introDuration;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v16);
  operator*(&v17, (uint64_t)&v16, (uint64_t)&time1);
  p_scaleableDuration = &this->_scaleableDuration;
LABEL_15:
  operator/((long long *)&time1.value, (uint64_t)p_scaleableDuration, (uint64_t)&v19);
LABEL_22:
  CMTime time1 = v19;
  CMTime time2 = a3->start;
  return PC_CMTimeSaferAdd(&time1, &time2, a4);
}

void OZApplication::OZApplication(OZApplication *this, void *a2)
{
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 13);
  PCMutex::PCMutex((PCMutex *)((char *)this + 112));
  int32_t v3 = (HGComputeDeviceManager *)PCMutex::PCMutex((PCMutex *)((char *)this + 184));
  CMTime v4 = FxDeviceComputeActiveGPUsSet(v3);
  *((void *)this + 32) = v4;
  if (OZChannelBase::isObjectRef((OZChannelBase *)v4)) {
    FxDeviceLogActiveSet(*((void **)this + 32));
  }
  operator new();
}

void sub_1B7C03174(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v5, 0x80C40B8603338);
  PCMutex::~PCMutex(v4);
  PCMutex::~PCMutex(v3);
  PCString::~PCString(v2);
  double v8 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 48) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void OZApplication::initialize(OZChannelBase *this, const PCString *a2)
{
  unsigned int v2 = this;
  if (!LOBYTE(this->var10)) {
    this = (OZChannelBase *)OZChannelBase::setRangeName(this, a2);
  }
  int32_t v3 = (OZPreferenceManager *)OZPreferenceManager::Instance((OZPreferenceManager *)this);
  ContentPath = OZPreferenceManager::getContentPath(v3);
  uint64_t Instance = (OZSceneNode_Factory *)OZFactories::getInstance((OZFactories *)ContentPath);
  v2->var4.int var0 = (__CFString *)Instance;
  BOOL v6 = (OZFactory *)OZSceneNode_Factory::getInstance(Instance);
  uint64_t v7 = (OZTransformNode_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v6);
  double v8 = (OZFactory *)OZTransformNode_Factory::getInstance(v7);
  uint64_t v9 = (OZElement_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v8);
  CMTimeEpoch v10 = (OZFactory *)OZElement_Factory::getInstance(v9);
  CMTimeEpoch v11 = (OZRotoshape_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v10);
  uint64_t v12 = (OZFactory *)OZRotoshape_Factory::getInstance(v11);
  uint64_t v13 = (OZFootage_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v12);
  long long v14 = (OZFactory *)OZFootage_Factory::getInstance(v13);
  CMTime v15 = (OZLayer_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v14);
  CMTime v16 = (OZFactory *)OZLayer_Factory::getInstance(v15);
  long long v17 = (OZFootageLayer_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v16);
  CMTimeEpoch v18 = (OZFactory *)OZFootageLayer_Factory::getInstance(v17);
  CMTime v19 = (OZGroup_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v18);
  CMTime v20 = (OZFactory *)OZGroup_Factory::getInstance(v19);
  CMTime v21 = (OZImageElement_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v20);
  BOOL v22 = (OZFactory *)OZImageElement_Factory::getInstance(v21);
  uint64_t v23 = (OZImageMask_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v22);
  PCColor v24 = (OZFactory *)OZImageMask_Factory::getInstance(v23);
  double v25 = (OZCamera_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v24);
  double v26 = (OZFactory *)OZCamera_Factory::getInstance(v25);
  double v27 = (OZLight_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v26);
  double v28 = (OZFactory *)OZLight_Factory::getInstance(v27);
  uint64_t v29 = (OZBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v28);
  double v30 = (OZFactory *)OZBehavior_Factory::getInstance(v29);
  uint64_t v31 = (OZNULLBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v30);
  uint64_t v32 = (OZFactory *)OZNULLBehavior_Factory::getInstance(v31);
  uint64_t v33 = (OZSimulationBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v32);
  long long v34 = (OZFactory *)OZSimulationBehavior_Factory::getInstance(v33);
  PCString v35 = (OZShapeBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v34);
  long long v36 = (OZFactory *)OZShapeBehavior_Factory::getInstance(v35);
  uint64_t v37 = (OZWriteOnBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v36);
  uint64_t v38 = (OZFactory *)OZWriteOnBehavior_Factory::getInstance(v37);
  long long v39 = (OZReflexiveBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v38);
  int v40 = (OZFactory *)OZReflexiveBehavior_Factory::getInstance(v39);
  uint64_t v41 = (OZTransitiveBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v40);
  uint64_t v42 = (OZFactory *)OZTransitiveBehavior_Factory::getInstance(v41);
  long long v43 = (OZChannelBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v42);
  float v44 = (OZFactory *)OZChannelBehavior_Factory::getInstance(v43);
  long long v45 = (OZSingleChannelBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v44);
  long long v46 = (OZFactory *)OZSingleChannelBehavior_Factory::getInstance(v45);
  int v47 = (OZMotionToForcesBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v46);
  long long v48 = (OZFactory *)OZMotionToForcesBehavior_Factory::getInstance(v47);
  uint64_t v49 = (OZSimSystemMoToFoBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v48);
  uint64_t v50 = (OZFactory *)OZSimSystemMoToFoBehavior_Factory::getInstance(v49);
  uint64_t v51 = (OZCollisionBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v50);
  uint64_t v52 = (OZFactory *)OZCollisionBehavior_Factory::getInstance(v51);
  uint64_t v53 = (OZRetimingBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v52);
  float v54 = (OZFactory *)OZRetimingBehavior_Factory::getInstance(v53);
  int v55 = (OZRig_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v54);
  uint64_t v56 = (OZFactory *)OZRig_Factory::getInstance(v55);
  uint64_t v57 = (OZRigWidget_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v56);
  int v58 = (OZFactory *)OZRigWidget_Factory::getInstance(v57);
  char v59 = (OZRigWidgetAspectRatio_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v58);
  int v60 = (OZFactory *)OZRigWidgetAspectRatio_Factory::getInstance(v59);
  int v61 = (OZRigBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v60);
  char v62 = (OZFactory *)OZRigBehavior_Factory::getInstance(v61);
  int v63 = (OZProjectNode_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v62);
  uint64_t v64 = (OZFactory *)OZProjectNode_Factory::getInstance(v63);
  BOOL v65 = (OZLinkBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v64);
  BOOL v66 = (OZFactory *)OZLinkBehavior_Factory::getInstance(v65);
  BOOL v67 = (OZMotionPathBehavior_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v66);
  BOOL v68 = (OZFactory *)OZMotionPathBehavior_Factory::getInstance(v67);
  BOOL v69 = (OZFxGenerator_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v68);
  BOOL v70 = (OZFactory *)OZFxGenerator_Factory::getInstance(v69);
  unsigned int v71 = (OZGradientGenerator_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v70);
  uint64_t v72 = (OZFactory *)OZGradientGenerator_Factory::getInstance(v71);
  uint64_t v73 = (OZCloneGenerator_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v72);
  __int16 v74 = (OZFactory *)OZCloneGenerator_Factory::getInstance(v73);
  uint64_t v75 = (OZEffect_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v74);
  char v76 = (OZFactory *)OZEffect_Factory::getInstance(v75);
  int v77 = (OZFxFilter_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v76);
  char v78 = (OZFactory *)OZFxFilter_Factory::getInstance(v77);
  uint64_t v79 = (OZChanElementOrFootageRef_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v78);
  CMTime v80 = (OZFactory *)OZChanElementOrFootageRef_Factory::getInstance(v79);
  long long v81 = (OZChanRotoshapeRef_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v80);
  PCSharedCount v82 = (OZFactory *)OZChanRotoshapeRef_Factory::getInstance(v81);
  double v83 = (OZChannelImageWithOptions_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v82);
  int v84 = (OZFactory *)OZChannelImageWithOptions_Factory::getInstance(v83);
  unsigned __int8 v85 = (OZChanRotoshapeRefWithPicker_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v84);
  double v86 = (OZFactory *)OZChanRotoshapeRefWithPicker_Factory::getInstance(v85);
  int v87 = (OZ3DEngineSceneElement_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v86);
  int v88 = (OZFactory *)OZ3DEngineSceneElement_Factory::getInstance(v87);
  unsigned int v89 = (OZ3DEngineSceneFile_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v88);
  int v90 = (OZFactory *)OZ3DEngineSceneFile_Factory::getInstance(v89);
  int v91 = (OZARFaceAnchorElement_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v90);
  int v92 = (OZFactory *)OZARFaceAnchorElement_Factory::getInstance(v91);
  int v93 = (OZ3DEnginePlaneElement_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v92);
  FxColorDescription v94 = (OZFactory *)OZ3DEnginePlaneElement_Factory::getInstance(v93);
  uint64_t v95 = (OZARPlaneAnchorElement_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v94);
  uint64_t v96 = (OZFactory *)OZARPlaneAnchorElement_Factory::getInstance(v95);
  long long v97 = (OZEnvironmentMeshSceneElement_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v96);
  uint64_t v98 = (OZFactory *)OZEnvironmentMeshSceneElement_Factory::getInstance(v97);
  int v99 = (OZARPersonAnchorElement_Factory *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v98);
  uint64_t v100 = (OZFactory *)OZARPersonAnchorElement_Factory::getInstance(v99);
  uint64_t v101 = (OZImageElement *)OZFactories::addFactory((uint64_t **)v2->var4.var0, v100);
  OZImageElement::registerRetiming(v101);
  OZ3DEngineSceneElement::registerRetiming(v102);

  OZCloneGenerator::registerRetiming(v103);
}

uint64_t OZSceneNode_Factory::getInstance(OZSceneNode_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZSceneNode_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZSceneNode_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZSceneNode_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZSceneNode_Factory::_instance;
}

uint64_t OZTransformNode_Factory::getInstance(OZTransformNode_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZTransformNode_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZTransformNode_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZTransformNode_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZTransformNode_Factory::_instance;
}

uint64_t OZElement_Factory::getInstance(OZElement_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZElement_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZElement_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZElement_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZElement_Factory::_instance;
}

uint64_t OZRotoshape_Factory::getInstance(OZRotoshape_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRotoshape_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZRotoshape_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRotoshape_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRotoshape_Factory::_instance;
}

uint64_t OZFootage_Factory::getInstance(OZFootage_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFootage_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZFootage_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFootage_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFootage_Factory::_instance;
}

uint64_t OZLayer_Factory::getInstance(OZLayer_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLayer_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZLayer_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLayer_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLayer_Factory::_instance;
}

uint64_t OZFootageLayer_Factory::getInstance(OZFootageLayer_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZFootageLayer_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZFootageLayer_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZFootageLayer_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZFootageLayer_Factory::_instance;
}

uint64_t OZGroup_Factory::getInstance(OZGroup_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGroup_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZGroup_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGroup_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGroup_Factory::_instance;
}

uint64_t OZImageElement_Factory::getInstance(OZImageElement_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageElement_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZImageElement_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageElement_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageElement_Factory::_instance;
}

uint64_t OZImageMask_Factory::getInstance(OZImageMask_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZImageMask_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZImageMask_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZImageMask_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZImageMask_Factory::_instance;
}

uint64_t OZCamera_Factory::getInstance(OZCamera_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCamera_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZCamera_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCamera_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCamera_Factory::_instance;
}

uint64_t OZLight_Factory::getInstance(OZLight_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLight_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZLight_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLight_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLight_Factory::_instance;
}

uint64_t OZBehavior_Factory::getInstance(OZBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZBehavior_Factory::_instance;
}

uint64_t OZNULLBehavior_Factory::getInstance(OZNULLBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZNULLBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZNULLBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZNULLBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZNULLBehavior_Factory::_instance;
}

uint64_t OZSimulationBehavior_Factory::getInstance(OZSimulationBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZSimulationBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZSimulationBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZSimulationBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZSimulationBehavior_Factory::_instance;
}

uint64_t OZShapeBehavior_Factory::getInstance(OZShapeBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZShapeBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZShapeBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZShapeBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZShapeBehavior_Factory::_instance;
}

uint64_t OZWriteOnBehavior_Factory::getInstance(OZWriteOnBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZWriteOnBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZWriteOnBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZWriteOnBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZWriteOnBehavior_Factory::_instance;
}

uint64_t OZReflexiveBehavior_Factory::getInstance(OZReflexiveBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZReflexiveBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZReflexiveBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZReflexiveBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZReflexiveBehavior_Factory::_instance;
}

uint64_t OZTransitiveBehavior_Factory::getInstance(OZTransitiveBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZTransitiveBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZTransitiveBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZTransitiveBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZTransitiveBehavior_Factory::_instance;
}

uint64_t OZChannelBehavior_Factory::getInstance(OZChannelBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZChannelBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelBehavior_Factory::_instance;
}

uint64_t OZSingleChannelBehavior_Factory::getInstance(OZSingleChannelBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZSingleChannelBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZSingleChannelBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZSingleChannelBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZSingleChannelBehavior_Factory::_instance;
}

uint64_t OZMotionToForcesBehavior_Factory::getInstance(OZMotionToForcesBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionToForcesBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZMotionToForcesBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionToForcesBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionToForcesBehavior_Factory::_instance;
}

uint64_t OZSimSystemMoToFoBehavior_Factory::getInstance(OZSimSystemMoToFoBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZSimSystemMoToFoBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZSimSystemMoToFoBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZSimSystemMoToFoBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZSimSystemMoToFoBehavior_Factory::_instance;
}

uint64_t OZCollisionBehavior_Factory::getInstance(OZCollisionBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCollisionBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZCollisionBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCollisionBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCollisionBehavior_Factory::_instance;
}

uint64_t OZRetimingBehavior_Factory::getInstance(OZRetimingBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRetimingBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZRetimingBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRetimingBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRetimingBehavior_Factory::_instance;
}

uint64_t OZRig_Factory::getInstance(OZRig_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRig_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZRig_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRig_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRig_Factory::_instance;
}

uint64_t OZRigWidget_Factory::getInstance(OZRigWidget_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRigWidget_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZRigWidget_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidget_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidget_Factory::_instance;
}

uint64_t OZRigWidgetAspectRatio_Factory::getInstance(OZRigWidgetAspectRatio_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRigWidgetAspectRatio_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZRigWidgetAspectRatio_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigWidgetAspectRatio_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigWidgetAspectRatio_Factory::_instance;
}

uint64_t OZRigBehavior_Factory::getInstance(OZRigBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZRigBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZRigBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZRigBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZRigBehavior_Factory::_instance;
}

uint64_t OZProjectNode_Factory::getInstance(OZProjectNode_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZProjectNode_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZProjectNode_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZProjectNode_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZProjectNode_Factory::_instance;
}

uint64_t OZLinkBehavior_Factory::getInstance(OZLinkBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLinkBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZLinkBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLinkBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLinkBehavior_Factory::_instance;
}

uint64_t OZMotionPathBehavior_Factory::getInstance(OZMotionPathBehavior_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMotionPathBehavior_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZMotionPathBehavior_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMotionPathBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMotionPathBehavior_Factory::_instance;
}

uint64_t OZFxGenerator_Factory::getInstance(OZFxGenerator_Factory *this)
{
  if (!OZFxGenerator_Factory::_instance) {
    operator new();
  }
  return OZFxGenerator_Factory::_instance;
}

void sub_1B7C04310(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

uint64_t OZGradientGenerator_Factory::getInstance(OZGradientGenerator_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZGradientGenerator_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZGradientGenerator_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZGradientGenerator_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZGradientGenerator_Factory::_instance;
}

uint64_t OZCloneGenerator_Factory::getInstance(OZCloneGenerator_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZCloneGenerator_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZCloneGenerator_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCloneGenerator_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCloneGenerator_Factory::_instance;
}

uint64_t OZEffect_Factory::getInstance(OZEffect_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZEffect_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZEffect_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZEffect_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZEffect_Factory::_instance;
}

uint64_t OZFxFilter_Factory::getInstance(OZFxFilter_Factory *this)
{
  if (!OZFxFilter_Factory::_instance) {
    operator new();
  }
  return OZFxFilter_Factory::_instance;
}

void sub_1B7C044CC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

uint64_t OZChanElementOrFootageRef_Factory::getInstance(OZChanElementOrFootageRef_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChanElementOrFootageRef_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZChanElementOrFootageRef_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChanElementOrFootageRef_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChanElementOrFootageRef_Factory::_instance;
}

uint64_t OZChanRotoshapeRef_Factory::getInstance(OZChanRotoshapeRef_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChanRotoshapeRef_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZChanRotoshapeRef_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChanRotoshapeRef_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChanRotoshapeRef_Factory::_instance;
}

uint64_t OZChannelImageWithOptions_Factory::getInstance(OZChannelImageWithOptions_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelImageWithOptions_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZChannelImageWithOptions_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelImageWithOptions_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelImageWithOptions_Factory::_instance;
}

uint64_t OZ3DEngineSceneElement_Factory::getInstance(OZ3DEngineSceneElement_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZ3DEngineSceneElement_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZ3DEngineSceneElement_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZ3DEngineSceneElement_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZ3DEngineSceneElement_Factory::_instance;
}

uint64_t OZ3DEngineSceneFile_Factory::getInstance(OZ3DEngineSceneFile_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZ3DEngineSceneFile_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZ3DEngineSceneFile_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZ3DEngineSceneFile_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZ3DEngineSceneFile_Factory::_instance;
}

uint64_t OZARFaceAnchorElement_Factory::getInstance(OZARFaceAnchorElement_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZARFaceAnchorElement_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZARFaceAnchorElement_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZARFaceAnchorElement_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZARFaceAnchorElement_Factory::_instance;
}

uint64_t OZ3DEnginePlaneElement_Factory::getInstance(OZ3DEnginePlaneElement_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZ3DEnginePlaneElement_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZ3DEnginePlaneElement_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZ3DEnginePlaneElement_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZ3DEnginePlaneElement_Factory::_instance;
}

uint64_t OZARPlaneAnchorElement_Factory::getInstance(OZARPlaneAnchorElement_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZARPlaneAnchorElement_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZARPlaneAnchorElement_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZARPlaneAnchorElement_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZARPlaneAnchorElement_Factory::_instance;
}

uint64_t OZEnvironmentMeshSceneElement_Factory::getInstance(OZEnvironmentMeshSceneElement_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZEnvironmentMeshSceneElement_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZEnvironmentMeshSceneElement_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZEnvironmentMeshSceneElement_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZEnvironmentMeshSceneElement_Factory::_instance;
}

uint64_t OZARPersonAnchorElement_Factory::getInstance(OZARPersonAnchorElement_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZARPersonAnchorElement_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    CMTime v4 = &v2;
    int32_t v3 = &v4;
    std::__call_once(&OZARPersonAnchorElement_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZARPersonAnchorElement_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZARPersonAnchorElement_Factory::_instance;
}

void OZApplication::setHostApplicationDelegate(OZApplication *this, void *a2)
{
  PCMutex::lock((PCMutex *)((char *)this + 184));
  if (*(void *)this)
  {
    uint64_t v4 = OZChannelBase::setRangeName(*(OZChannelBase **)this, v3);
    MEMORY[0x1BA9BFBA0](v4, 0x80C40B8603338);
    *(void *)this = 0;
  }
  operator new();
}

void sub_1B7C049CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x1BA9BFBA0](v9, 0x80C40B8603338);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t OZApplication::getHostApplicationDelegate(OZApplication *this)
{
  char v2 = (PCMutex *)((char *)this + 184);
  PCMutex::lock((PCMutex *)((char *)this + 184));
  uint64_t v3 = *(void *)this;
  PCMutex::unlock(v2);
  return v3;
}

void OZApplication::newDocument(OZApplication *this)
{
}

void sub_1B7C04A84(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40388DFA4ELL);
  _Unwind_Resume(a1);
}

uint64_t OZApplication::createSceneNode(uint64_t a1, unsigned int *a2)
{
  Factory = (const void *)OZFactories::findFactory(*(void *)(a1 + 32), a2);
  if (!Factory) {
    return 0;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 168);

  return v4();
}

uint64_t OZApplication::createBehavior(uint64_t a1, unsigned int *a2)
{
  Factory = (const void *)OZFactories::findFactory(*(void *)(a1 + 32), a2);
  if (!Factory) {
    return 0;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 168);

  return v4();
}

{
  const void *Factory;
  void *v3;
  uint64_t v4;
  OZChannelBase *v5;
  uint64_t NextUniqueID;
  PCString v8;

  Factory = (const void *)OZFactories::findFactory(*(void *)(a1 + 32), a2);
  if (!Factory) {
    return 0;
  }
  uint64_t v4 = (uint64_t)v3;
  if (v3)
  {
    uint64_t v5 = (OZChannelBase *)(*(void *(**)(PCString *__return_ptr, void *))(*(void *)v3 + 40))(&v8, v3);
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v5);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, PCString *, uint64_t))(*(void *)v4 + 168))(v4, &v8, NextUniqueID);
    PCString::~PCString(&v8);
  }
  return v4;
}

void sub_1B7C04D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZApplication::createStyle(uint64_t a1, unsigned int *a2)
{
  Factory = (const void *)OZFactories::findFactory(*(void *)(a1 + 32), a2);
  if (!Factory) {
    return 0;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 168);

  return v4();
}

void std::__call_once_param<std::tuple<OZSceneNode_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C04E2C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZSceneNode_Factory::OZSceneNode_Factory(OZSceneNode_Factory *this)
{
  long long v4 = xmmword_1B8380BC0;
  long long v3 = 0uLL;
  uint64_t v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 128), 0);
  *(void *)this = &unk_1F113E4B0;
  *((void *)this + 16) = &unk_1F113E568;
}

void sub_1B7C04EE0(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PCString *OZSceneNode_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-MissingObject");
}

PCString *OZSceneNode_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-MissingObject");
}

void std::__call_once_param<std::tuple<OZTransformNode_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C04F60(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZTransformNode_Factory::OZTransformNode_Factory(OZTransformNode_Factory *this)
{
  long long v3 = xmmword_1B8380BC0;
  long long v4 = xmmword_1B7E78C30;
  uint64_t v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 128), 0);
  *(void *)this = &unk_1F113E5C0;
  *((void *)this + 16) = &unk_1F113E678;
}

void sub_1B7C05018(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZElement_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C05078(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZElement_Factory::OZElement_Factory(OZElement_Factory *this)
{
  long long v3 = xmmword_1B7E78C30;
  long long v4 = xmmword_1B7E78B90;
  uint64_t v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 128), 0);
  *(void *)this = &unk_1F113E6D0;
  *((void *)this + 16) = &unk_1F113E788;
}

void sub_1B7C05130(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZRotoshape_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C05190(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZRotoshape_Factory::OZRotoshape_Factory(OZRotoshape_Factory *this)
{
  long long v3 = xmmword_1B7E78B90;
  long long v4 = xmmword_1B837FBE0;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F113E7E0;
  *((void *)this + 16) = &unk_1F113E8B0;
  *((void *)this + 17) = 0;
}

void sub_1B7C05260(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZRotoshape_Factory::~OZRotoshape_Factory(OZRotoshape_Factory *this)
{
  OZRotoshape_Factory::~OZRotoshape_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F113E7E0;
  uint64_t v2 = (OZRotoshape_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F113E8B0;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZRotoshape_Factory::create(OZRotoshape_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v14, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v13, (const PCString *)@"Motion Effect");
  uint64_t v6 = *((void *)this + 17);
  if (v6) {
    uint64_t v7 = v6 + 200;
  }
  else {
    uint64_t v7 = 0;
  }
  double v8 = (OZChannelBase *)(*(uint64_t (**)(OZRotoshape_Factory *, uint64_t, uint64_t))(*(void *)this + 24))(this, v7, 40);
  uint64_t v9 = v8;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v8);
  }
  OZChannelBase::setID((OZChannelBase *)&v9->var7, NextUniqueID);
  CMTimeEpoch v10 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v9->var0 + 80))(v9);
  OZChannelBase::setName(v10, a2, 0);
  (*((void (**)(OZChannelBase *))v9->var0 + 115))(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&v13, v11);
  return v9;
}

void sub_1B7C05474(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C408B2AE773, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZRotoshape_Factory::createCopy(OZRotoshape_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C055C8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C408B2AE773);
  _Unwind_Resume(a1);
}

void OZRotoshape_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZRotoshape_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Rotoshape Short Desc");
}

PCString *OZRotoshape_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-SplineShape");
}

PCString *OZRotoshape_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-SplineShape");
}

uint64_t OZRotoshape_Factory::getIconIDInternal(OZRotoshape_Factory *this)
{
  return 14;
}

PCString *OZRotoshape_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_Shape_Icon");
}

void OZRotoshape_Factory::createNodeCopy(OZRotoshape_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C056EC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C408B2AE773);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZRotoshape_Factory::~OZRotoshape_Factory(OZRotoshape_Factory *this)
{
}

{
  uint64_t vars8;

  OZRotoshape_Factory::~OZRotoshape_Factory((OZRotoshape_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZFootage_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C05848(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZFootage_Factory::OZFootage_Factory(OZFootage_Factory *this)
{
  long long v3 = xmmword_1B8380BD0;
  long long v4 = xmmword_1B83804B0;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F113E908;
  *((void *)this + 16) = &unk_1F113E9D8;
  *((void *)this + 17) = 0;
}

void sub_1B7C05918(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZFootage_Factory::~OZFootage_Factory(OZFootage_Factory *this)
{
  OZFootage_Factory::~OZFootage_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F113E908;
  uint64_t v2 = (OZFootage_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F113E9D8;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZFootage_Factory::create(OZFootage_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZFootage_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C05B20(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C405F7C6635, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZFootage_Factory::createCopy(OZFootage_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C05C74(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405F7C6635);
  _Unwind_Resume(a1);
}

void OZFootage_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZFootage_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Footage Short Desc");
}

void OZFootage_Factory::createNodeCopy(OZFootage_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C05D60(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405F7C6635);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZFootage_Factory::~OZFootage_Factory(OZFootage_Factory *this)
{
}

{
  uint64_t vars8;

  OZFootage_Factory::~OZFootage_Factory((OZFootage_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZLayer_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C05EBC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZLayer_Factory::OZLayer_Factory(OZLayer_Factory *this)
{
  long long v3 = xmmword_1B8380BF0;
  long long v4 = xmmword_1B8380BE0;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F113EA30;
  *((void *)this + 16) = &unk_1F113EB00;
  *((void *)this + 17) = 0;
}

void sub_1B7C05F8C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZLayer_Factory::~OZLayer_Factory(OZLayer_Factory *this)
{
  OZLayer_Factory::~OZLayer_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F113EA30;
  uint64_t v2 = (OZLayer_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F113EB00;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZLayer_Factory::create(OZLayer_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZLayer_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C06194(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C40017E444ALL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZLayer_Factory::createCopy(OZLayer_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C062E8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40017E444ALL);
  _Unwind_Resume(a1);
}

void OZLayer_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZLayer_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Layer Short Desc");
}

PCString *OZLayer_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-3DGroup");
}

PCString *OZLayer_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-3DGroup");
}

void OZLayer_Factory::createNodeCopy(OZLayer_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C063F4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40017E444ALL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZLayer_Factory::~OZLayer_Factory(OZLayer_Factory *this)
{
}

{
  uint64_t vars8;

  OZLayer_Factory::~OZLayer_Factory((OZLayer_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZFootageLayer_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C06550(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZFootageLayer_Factory::OZFootageLayer_Factory(OZFootageLayer_Factory *this)
{
  long long v3 = xmmword_1B8380BC0;
  long long v4 = xmmword_1B8380C00;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F113EB58;
  *((void *)this + 16) = &unk_1F113EC28;
  *((void *)this + 17) = 0;
}

void sub_1B7C06620(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZFootageLayer_Factory::~OZFootageLayer_Factory(OZFootageLayer_Factory *this)
{
  OZFootageLayer_Factory::~OZFootageLayer_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F113EB58;
  uint64_t v2 = (OZFootageLayer_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F113EC28;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZFootageLayer_Factory::create(OZFootageLayer_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZFootageLayer_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C06828(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C40A27F4032, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZFootageLayer_Factory::createCopy(OZFootageLayer_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0697C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40A27F4032);
  _Unwind_Resume(a1);
}

void OZFootageLayer_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZFootageLayer_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Footage Layer Short Desc");
}

void OZFootageLayer_Factory::createNodeCopy(OZFootageLayer_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C06A68(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40A27F4032);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZFootageLayer_Factory::~OZFootageLayer_Factory(OZFootageLayer_Factory *this)
{
}

{
  uint64_t vars8;

  OZFootageLayer_Factory::~OZFootageLayer_Factory((OZFootageLayer_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZGroup_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C06BC4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZGroup_Factory::OZGroup_Factory(OZGroup_Factory *this)
{
  long long v3 = xmmword_1B7E78B90;
  long long v4 = xmmword_1B8380BF0;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F113EC80;
  *((void *)this + 16) = &unk_1F113ED50;
  *((void *)this + 17) = 0;
}

void sub_1B7C06C94(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZGroup_Factory::~OZGroup_Factory(OZGroup_Factory *this)
{
  OZGroup_Factory::~OZGroup_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F113EC80;
  uint64_t v2 = (OZGroup_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F113ED50;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZGroup_Factory::create(OZGroup_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZGroup_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C06E9C(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C40017E444ALL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZGroup_Factory::createCopy(OZGroup_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C06FF0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40017E444ALL);
  _Unwind_Resume(a1);
}

void OZGroup_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZGroup_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Group Short Desc");
}

void OZGroup_Factory::createNodeCopy(OZGroup_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C070DC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40017E444ALL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZGroup_Factory::~OZGroup_Factory(OZGroup_Factory *this)
{
}

{
  uint64_t vars8;

  OZGroup_Factory::~OZGroup_Factory((OZGroup_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZImageElement_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C07238(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZImageElement_Factory::OZImageElement_Factory(OZImageElement_Factory *this)
{
  long long v3 = xmmword_1B7E78B90;
  long long v4 = xmmword_1B8380C10;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F113EDA8;
  *((void *)this + 16) = &unk_1F113EE78;
  *((void *)this + 17) = 0;
}

void sub_1B7C07308(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZImageElement_Factory::~OZImageElement_Factory(OZImageElement_Factory *this)
{
  OZImageElement_Factory::~OZImageElement_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F113EDA8;
  uint64_t v2 = (OZImageElement_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F113EE78;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZImageElement_Factory::create(OZImageElement_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZImageElement_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C07510(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C40804CB178, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZImageElement_Factory::createCopy(OZImageElement_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C07664(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40804CB178);
  _Unwind_Resume(a1);
}

void OZImageElement_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZImageElement_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Image Element Short Desc");
}

PCString *OZImageElement_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Movie");
}

PCString *OZImageElement_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Movie");
}

void OZImageElement_Factory::createNodeCopy(OZImageElement_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C07770(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40804CB178);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZImageElement_Factory::~OZImageElement_Factory(OZImageElement_Factory *this)
{
}

{
  uint64_t vars8;

  OZImageElement_Factory::~OZImageElement_Factory((OZImageElement_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZImageMask_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C078CC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZImageMask_Factory::OZImageMask_Factory(OZImageMask_Factory *this)
{
  long long v3 = xmmword_1B8380BC0;
  long long v4 = xmmword_1B8380C20;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F113EED0;
  *((void *)this + 16) = &unk_1F113EFA0;
  *((void *)this + 17) = 0;
}

void sub_1B7C0799C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZImageMask_Factory::~OZImageMask_Factory(OZImageMask_Factory *this)
{
  OZImageMask_Factory::~OZImageMask_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F113EED0;
  uint64_t v2 = (OZImageMask_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F113EFA0;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZImageMask_Factory::create(OZImageMask_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZImageMask_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C07BA4(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C402CA23E7BLL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZImageMask_Factory::createCopy(OZImageMask_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C07CF8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C402CA23E7BLL);
  _Unwind_Resume(a1);
}

void OZImageMask_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZImageMask_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Image Mask Short Desc");
}

PCString *OZImageMask_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-ImageMask");
}

PCString *OZImageMask_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-ImageMask");
}

uint64_t OZImageMask_Factory::getIconIDInternal(OZImageMask_Factory *this)
{
  return 16;
}

void OZImageMask_Factory::createNodeCopy(OZImageMask_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C07E0C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C402CA23E7BLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZImageMask_Factory::~OZImageMask_Factory(OZImageMask_Factory *this)
{
}

{
  uint64_t vars8;

  OZImageMask_Factory::~OZImageMask_Factory((OZImageMask_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZCamera_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C07F68(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZCamera_Factory::OZCamera_Factory(OZCamera_Factory *this)
{
  long long v3 = xmmword_1B7E78C30;
  long long v4 = xmmword_1B837FEA0;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F113EFF8;
  *((void *)this + 16) = &unk_1F113F0C8;
  *((void *)this + 17) = 0;
}

void sub_1B7C08038(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZCamera_Factory::~OZCamera_Factory(OZCamera_Factory *this)
{
  OZCamera_Factory::~OZCamera_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F113EFF8;
  uint64_t v2 = (OZCamera_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F113F0C8;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZCamera_Factory::create(OZCamera_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZCamera_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C08240(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C4059BDEAAALL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZCamera_Factory::createCopy(OZCamera_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C08394(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4059BDEAAALL);
  _Unwind_Resume(a1);
}

void OZCamera_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZCamera_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Camera Short Desc");
}

PCString *OZCamera_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Camera");
}

PCString *OZCamera_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Camera");
}

uint64_t OZCamera_Factory::getIconIDInternal(OZCamera_Factory *this)
{
  return 21;
}

void OZCamera_Factory::createNodeCopy(OZCamera_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C084A8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4059BDEAAALL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZCamera_Factory::~OZCamera_Factory(OZCamera_Factory *this)
{
}

{
  uint64_t vars8;

  OZCamera_Factory::~OZCamera_Factory((OZCamera_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZLight_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C08604(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZLight_Factory::OZLight_Factory(OZLight_Factory *this)
{
  long long v3 = xmmword_1B7E78C30;
  long long v4 = xmmword_1B8380C30;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F113F120;
  *((void *)this + 16) = &unk_1F113F1F0;
  *((void *)this + 17) = 0;
}

void sub_1B7C086D4(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZLight_Factory::~OZLight_Factory(OZLight_Factory *this)
{
  OZLight_Factory::~OZLight_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F113F120;
  uint64_t v2 = (OZLight_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F113F1F0;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZLight_Factory::create(OZLight_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZLight_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C088DC(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C40CC0084FBLL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZLight_Factory::createCopy(OZLight_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C08A30(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40CC0084FBLL);
  _Unwind_Resume(a1);
}

void OZLight_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZLight_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Light Short Desc");
}

PCString *OZLight_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Light");
}

PCString *OZLight_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Light");
}

uint64_t OZLight_Factory::getIconIDInternal(OZLight_Factory *this)
{
  return 22;
}

void OZLight_Factory::createNodeCopy(OZLight_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C08B44(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40CC0084FBLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZLight_Factory::~OZLight_Factory(OZLight_Factory *this)
{
}

{
  uint64_t vars8;

  OZLight_Factory::~OZLight_Factory((OZLight_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C08CA0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZBehavior_Factory::OZBehavior_Factory(OZBehavior_Factory *this)
{
  long long v4 = xmmword_1B837FF40;
  long long v3 = 0uLL;
  uint64_t v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 128), 0);
  *(void *)this = &unk_1F113F248;
  *((void *)this + 16) = &unk_1F113F300;
}

void sub_1B7C08D54(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PCString *OZBehavior_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Behavior");
}

PCString *OZBehavior_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Behavior");
}

PCString *OZBehavior_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_Behavior_Icon");
}

void std::__call_once_param<std::tuple<OZNULLBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C08DE4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZNULLBehavior_Factory::OZNULLBehavior_Factory(OZNULLBehavior_Factory *this)
{
  long long v4 = xmmword_1B837FF40;
  long long v5 = xmmword_1B837FF20;
  long long v3 = xmmword_1B8380BC0;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F113F358;
  *((void *)this + 18) = &unk_1F113F438;
}

void sub_1B7C08EAC(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZNULLBehavior_Factory::create(OZNULLBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7C08F48(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4085EF43AALL);
  _Unwind_Resume(a1);
}

void OZNULLBehavior_Factory::createCopy(OZNULLBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0900C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4085EF43AALL);
  _Unwind_Resume(a1);
}

void OZNULLBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZNULLBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "NULL");
}

void OZNULLBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
}

PCString *OZNULLBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Nothing");
}

void OZNULLBehavior_Factory::createBehaviorCopy(OZNULLBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7C09120(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4085EF43AALL);
  _Unwind_Resume(a1);
}

void OZNULLBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZSimulationBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C091A8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZSimulationBehavior_Factory::OZSimulationBehavior_Factory(OZSimulationBehavior_Factory *this)
{
  long long v4 = xmmword_1B837FF40;
  long long v5 = xmmword_1B8380C40;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F113F490;
  *((void *)this + 18) = &unk_1F113F570;
}

void sub_1B7C09270(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZSimulationBehavior_Factory::create(OZSimulationBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7C092E4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4085EF43AALL);
  _Unwind_Resume(a1);
}

void OZSimulationBehavior_Factory::createCopy(OZSimulationBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C093A8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4085EF43AALL);
  _Unwind_Resume(a1);
}

void OZSimulationBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZSimulationBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Simulation Behavior");
}

void OZSimulationBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
}

PCString *OZSimulationBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Simulations");
}

void OZSimulationBehavior_Factory::createBehaviorCopy(OZSimulationBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7C094BC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4085EF43AALL);
  _Unwind_Resume(a1);
}

void OZSimulationBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZShapeBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C09544(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZShapeBehavior_Factory::OZShapeBehavior_Factory(OZShapeBehavior_Factory *this)
{
  long long v4 = xmmword_1B837FF40;
  long long v5 = xmmword_1B8380C50;
  long long v3 = xmmword_1B837FBE0;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F113F5C8;
  *((void *)this + 18) = &unk_1F113F6A8;
}

void sub_1B7C0960C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZShapeBehavior_Factory::create(OZShapeBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7C096A8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C408986AE54);
  _Unwind_Resume(a1);
}

void OZShapeBehavior_Factory::createCopy(OZShapeBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0976C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C408986AE54);
  _Unwind_Resume(a1);
}

void OZShapeBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZShapeBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Shape Behavior");
}

void OZShapeBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
}

PCString *OZShapeBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Shape");
}

void OZShapeBehavior_Factory::createBehaviorCopy(OZShapeBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7C09880(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C408986AE54);
  _Unwind_Resume(a1);
}

void OZShapeBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZWriteOnBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C09908(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZWriteOnBehavior_Factory::OZWriteOnBehavior_Factory(OZWriteOnBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8380C60;
  long long v3 = xmmword_1B837FBE0;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F113F700;
  *((void *)this + 18) = &unk_1F113F7E0;
}

void sub_1B7C099D0(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZWriteOnBehavior_Factory::create(OZWriteOnBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7C09A6C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40873BD1AELL);
  _Unwind_Resume(a1);
}

void OZWriteOnBehavior_Factory::createCopy(OZWriteOnBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C09B30(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40873BD1AELL);
  _Unwind_Resume(a1);
}

void OZWriteOnBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZWriteOnBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Write On Behavior");
}

void OZWriteOnBehavior_Factory::createBehaviorCopy(OZWriteOnBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7C09C1C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40873BD1AELL);
  _Unwind_Resume(a1);
}

void OZWriteOnBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZReflexiveBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C09CA4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZReflexiveBehavior_Factory::OZReflexiveBehavior_Factory(OZReflexiveBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380C40;
  long long v5 = xmmword_1B8380C70;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F113F838;
  *((void *)this + 18) = &unk_1F113F918;
}

void sub_1B7C09D6C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZReflexiveBehavior_Factory::create(OZReflexiveBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7C09DE0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C403759C362);
  _Unwind_Resume(a1);
}

void OZReflexiveBehavior_Factory::createCopy(OZReflexiveBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C09EA4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C403759C362);
  _Unwind_Resume(a1);
}

void OZReflexiveBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZReflexiveBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Reflexive Behavior");
}

void OZReflexiveBehavior_Factory::createBehaviorCopy(OZReflexiveBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7C09F90(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C403759C362);
  _Unwind_Resume(a1);
}

void OZReflexiveBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZTransitiveBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0A018(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZTransitiveBehavior_Factory::OZTransitiveBehavior_Factory(OZTransitiveBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380C40;
  long long v5 = xmmword_1B8380C80;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F113F970;
  *((void *)this + 18) = &unk_1F113FA50;
}

void sub_1B7C0A0E0(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZTransitiveBehavior_Factory::create(OZTransitiveBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7C0A154(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40FECF0589);
  _Unwind_Resume(a1);
}

void OZTransitiveBehavior_Factory::createCopy(OZTransitiveBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0A218(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40FECF0589);
  _Unwind_Resume(a1);
}

void OZTransitiveBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZTransitiveBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Transitive Behavior");
}

void OZTransitiveBehavior_Factory::createBehaviorCopy(OZTransitiveBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7C0A304(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40FECF0589);
  _Unwind_Resume(a1);
}

void OZTransitiveBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZChannelBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0A38C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZChannelBehavior_Factory::OZChannelBehavior_Factory(OZChannelBehavior_Factory *this)
{
  long long v4 = xmmword_1B837FF40;
  long long v5 = xmmword_1B7E78BB0;
  long long v3 = xmmword_1B7E78B90;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F113FAA8;
  *((void *)this + 18) = &unk_1F113FB88;
}

void sub_1B7C0A454(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelBehavior_Factory::create(OZChannelBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7C0A4F0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C401116CFA0);
  _Unwind_Resume(a1);
}

void OZChannelBehavior_Factory::createCopy(OZChannelBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0A5B4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C401116CFA0);
  _Unwind_Resume(a1);
}

void OZChannelBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZChannelBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Channel Behavior");
}

void OZChannelBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
}

PCString *OZChannelBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Parameter");
}

PCString *OZChannelBehavior_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-ParameterBehavior");
}

PCString *OZChannelBehavior_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-ParameterBehavior");
}

uint64_t OZChannelBehavior_Factory::getIconIDInternal(OZChannelBehavior_Factory *this)
{
  return 11;
}

void OZChannelBehavior_Factory::createBehaviorCopy(OZChannelBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7C0A6F0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C401116CFA0);
  _Unwind_Resume(a1);
}

void OZChannelBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZSingleChannelBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0A778(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior_Factory::OZSingleChannelBehavior_Factory(OZSingleChannelBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B837FF50;
  long long v3 = xmmword_1B7E78B90;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F113FBE0;
  *((void *)this + 18) = &unk_1F113FCC0;
}

void sub_1B7C0A840(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior_Factory::create(OZSingleChannelBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7C0A8DC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior_Factory::createCopy(OZSingleChannelBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0A9A0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZSingleChannelBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Single Channel Behavior");
}

PCString *OZSingleChannelBehavior_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_ParameterBehavior_Icon");
}

void OZSingleChannelBehavior_Factory::createBehaviorCopy(OZSingleChannelBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7C0AA9C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E10956EDLL);
  _Unwind_Resume(a1);
}

void OZSingleChannelBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZMotionToForcesBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0AB24(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZMotionToForcesBehavior_Factory::OZMotionToForcesBehavior_Factory(OZMotionToForcesBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380C40;
  long long v5 = xmmword_1B837FC70;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F113FD18;
  *((void *)this + 18) = &unk_1F113FDF8;
}

void sub_1B7C0ABEC(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZMotionToForcesBehavior_Factory::create(OZMotionToForcesBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7C0AC60(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4081481180);
  _Unwind_Resume(a1);
}

void OZMotionToForcesBehavior_Factory::createCopy(OZMotionToForcesBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0AD24(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4081481180);
  _Unwind_Resume(a1);
}

void OZMotionToForcesBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZMotionToForcesBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Motion To Forces Behavior");
}

void OZMotionToForcesBehavior_Factory::createBehaviorCopy(OZMotionToForcesBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7C0AE10(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4081481180);
  _Unwind_Resume(a1);
}

void OZMotionToForcesBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZSimSystemMoToFoBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0AE98(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZSimSystemMoToFoBehavior_Factory::OZSimSystemMoToFoBehavior_Factory(OZSimSystemMoToFoBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380C40;
  long long v5 = xmmword_1B8380C90;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F113FE50;
  *((void *)this + 18) = &unk_1F113FF30;
}

void sub_1B7C0AF60(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZSimSystemMoToFoBehavior_Factory::create(OZSimSystemMoToFoBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7C0AFD4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C18A6D9DLL);
  _Unwind_Resume(a1);
}

void OZSimSystemMoToFoBehavior_Factory::createCopy(OZSimSystemMoToFoBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0B098(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C18A6D9DLL);
  _Unwind_Resume(a1);
}

void OZSimSystemMoToFoBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZSimSystemMoToFoBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Sim System Motion To Forces Behavior");
}

void OZSimSystemMoToFoBehavior_Factory::createBehaviorCopy(OZSimSystemMoToFoBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7C0B184(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C18A6D9DLL);
  _Unwind_Resume(a1);
}

void OZSimSystemMoToFoBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZCollisionBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0B20C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZCollisionBehavior_Factory::OZCollisionBehavior_Factory(OZCollisionBehavior_Factory *this)
{
  long long v4 = xmmword_1B8380C70;
  long long v5 = xmmword_1B8380CA0;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F113FF88;
  *((void *)this + 18) = &unk_1F1140068;
}

void sub_1B7C0B2D4(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZCollisionBehavior_Factory::create(OZCollisionBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7C0B348(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C403759C362);
  _Unwind_Resume(a1);
}

void OZCollisionBehavior_Factory::createCopy(OZCollisionBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0B40C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C403759C362);
  _Unwind_Resume(a1);
}

void OZCollisionBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZCollisionBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Collision Behavior");
}

void OZCollisionBehavior_Factory::createBehaviorCopy(OZCollisionBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7C0B4F8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C403759C362);
  _Unwind_Resume(a1);
}

void OZCollisionBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZRetimingBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0B580(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZRetimingBehavior_Factory::OZRetimingBehavior_Factory(OZRetimingBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B83804C0;
  long long v3 = xmmword_1B7E78B90;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F11400C0;
  *((void *)this + 18) = &unk_1F11401A0;
}

void sub_1B7C0B648(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZRetimingBehavior_Factory::create(OZRetimingBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7C0B6E4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40AC65C9CALL);
  _Unwind_Resume(a1);
}

void OZRetimingBehavior_Factory::createCopy(OZRetimingBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0B7A8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40AC65C9CALL);
  _Unwind_Resume(a1);
}

PCString *OZRetimingBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "NULL Desc");
}

void OZRetimingBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
}

PCString *OZRetimingBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Retiming");
}

void OZRetimingBehavior_Factory::createBehaviorCopy(OZRetimingBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7C0B8A4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40AC65C9CALL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZRig_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0B914(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZRig_Factory::OZRig_Factory(OZRig_Factory *this)
{
  long long v3 = xmmword_1B8380BC0;
  long long v4 = xmmword_1B837FE90;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F11401F8;
  *((void *)this + 16) = &unk_1F11402C8;
  *((void *)this + 17) = 0;
}

void sub_1B7C0B9E4(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZRig_Factory::~OZRig_Factory(OZRig_Factory *this)
{
  OZRig_Factory::~OZRig_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F11401F8;
  uint64_t v2 = (OZRig_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F11402C8;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZRig_Factory::create(OZRig_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZRig_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C0BBEC(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C4029BB6CCDLL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZRig_Factory::createCopy(OZRig_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0BD40(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4029BB6CCDLL);
  _Unwind_Resume(a1);
}

void OZRig_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZRig_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Rig Short Desc");
}

PCString *OZRig_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Rig");
}

PCString *OZRig_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Rig");
}

uint64_t OZRig_Factory::getIconIDInternal(OZRig_Factory *this)
{
  return 31;
}

void OZRig_Factory::createNodeCopy(OZRig_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C0BE54(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4029BB6CCDLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZRig_Factory::~OZRig_Factory(OZRig_Factory *this)
{
}

{
  uint64_t vars8;

  OZRig_Factory::~OZRig_Factory((OZRig_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZRigWidget_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0BFB0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZRigWidget_Factory::OZRigWidget_Factory(OZRigWidget_Factory *this)
{
  long long v3 = xmmword_1B8380BC0;
  long long v4 = xmmword_1B7E77B80;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1140320;
  *((void *)this + 16) = &unk_1F11403F0;
  *((void *)this + 17) = 0;
}

void sub_1B7C0C080(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZRigWidget_Factory::~OZRigWidget_Factory(OZRigWidget_Factory *this)
{
  OZRigWidget_Factory::~OZRigWidget_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1140320;
  uint64_t v2 = (OZRigWidget_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F11403F0;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZRigWidget_Factory::create(OZRigWidget_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZRigWidget_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C0C288(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C40FCF65154, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZRigWidget_Factory::createCopy(OZRigWidget_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0C3DC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40FCF65154);
  _Unwind_Resume(a1);
}

void OZRigWidget_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZRigWidget_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Rig Widget Short Desc");
}

PCString *OZRigWidget_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-RigSlider");
}

PCString *OZRigWidget_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-RigSlider");
}

uint64_t OZRigWidget_Factory::getIconIDInternal(OZRigWidget_Factory *this)
{
  return 32;
}

void OZRigWidget_Factory::createNodeCopy(OZRigWidget_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C0C4F0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40FCF65154);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZRigWidget_Factory::~OZRigWidget_Factory(OZRigWidget_Factory *this)
{
}

{
  uint64_t vars8;

  OZRigWidget_Factory::~OZRigWidget_Factory((OZRigWidget_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZRigWidgetAspectRatio_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0C64C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZRigWidgetAspectRatio_Factory::OZRigWidgetAspectRatio_Factory(OZRigWidgetAspectRatio_Factory *this)
{
  long long v3 = xmmword_1B7E77B80;
  long long v4 = xmmword_1B8380CB0;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1140448;
  *((void *)this + 16) = &unk_1F1140518;
  *((void *)this + 17) = 0;
}

void sub_1B7C0C71C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZRigWidgetAspectRatio_Factory::~OZRigWidgetAspectRatio_Factory(OZRigWidgetAspectRatio_Factory *this)
{
  OZRigWidgetAspectRatio_Factory::~OZRigWidgetAspectRatio_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1140448;
  uint64_t v2 = (OZRigWidgetAspectRatio_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F1140518;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZRigWidgetAspectRatio_Factory::create(OZRigWidgetAspectRatio_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZRigWidgetAspectRatio_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C0C924(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C40FCF65154, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZRigWidgetAspectRatio_Factory::createCopy(OZRigWidgetAspectRatio_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0CA78(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40FCF65154);
  _Unwind_Resume(a1);
}

void OZRigWidgetAspectRatio_Factory::createNodeCopy(OZRigWidgetAspectRatio_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C0CB3C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40FCF65154);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZRigWidgetAspectRatio_Factory::~OZRigWidgetAspectRatio_Factory(OZRigWidgetAspectRatio_Factory *this)
{
}

{
  uint64_t vars8;

  OZRigWidgetAspectRatio_Factory::~OZRigWidgetAspectRatio_Factory((OZRigWidgetAspectRatio_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZRigBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0CC98(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZRigBehavior_Factory::OZRigBehavior_Factory(OZRigBehavior_Factory *this)
{
  long long v3 = xmmword_1B837FF50;
  long long v4 = xmmword_1B7E77B90;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1140570;
  *((void *)this + 18) = &unk_1F1140650;
}

void sub_1B7C0CD50(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZRigBehavior_Factory::create(OZRigBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7C0CDEC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E5612C0BLL);
  _Unwind_Resume(a1);
}

void OZRigBehavior_Factory::createCopy(OZRigBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0CEB0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E5612C0BLL);
  _Unwind_Resume(a1);
}

void OZRigBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZRigBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Rig Behavior Name");
}

void OZRigBehavior_Factory::createBehaviorCopy(OZRigBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7C0CF9C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E5612C0BLL);
  _Unwind_Resume(a1);
}

void OZRigBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZProjectNode_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0D024(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZProjectNode_Factory::OZProjectNode_Factory(OZProjectNode_Factory *this)
{
  long long v3 = xmmword_1B8380BC0;
  long long v4 = xmmword_1B837FE80;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F11406A8;
  *((void *)this + 16) = &unk_1F1140778;
  *((void *)this + 17) = 0;
}

void sub_1B7C0D0F4(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZProjectNode_Factory::~OZProjectNode_Factory(OZProjectNode_Factory *this)
{
  OZProjectNode_Factory::~OZProjectNode_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F11406A8;
  uint64_t v2 = (OZProjectNode_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F1140778;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZProjectNode_Factory::create(OZProjectNode_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZProjectNode_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C0D2FC(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C40692255DDLL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZProjectNode_Factory::createCopy(OZProjectNode_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0D450(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40692255DDLL);
  _Unwind_Resume(a1);
}

void OZProjectNode_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZProjectNode_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Project Node Name");
}

PCString *OZProjectNode_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_MotionDocument-Small");
}

void OZProjectNode_Factory::createNodeCopy(OZProjectNode_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C0D54C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40692255DDLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZProjectNode_Factory::~OZProjectNode_Factory(OZProjectNode_Factory *this)
{
}

{
  uint64_t vars8;

  OZProjectNode_Factory::~OZProjectNode_Factory((OZProjectNode_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZLinkBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0D6A8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZLinkBehavior_Factory::OZLinkBehavior_Factory(OZLinkBehavior_Factory *this)
{
  long long v3 = xmmword_1B837FF50;
  long long v4 = xmmword_1B8380CC0;
  OZChannelBehaviorFactory::OZChannelBehaviorFactory((uint64_t)this, &v4, &v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F11407D0;
  *((void *)this + 18) = &unk_1F11408B0;
}

void sub_1B7C0D760(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZLinkBehavior_Factory::create(OZLinkBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7C0D7FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F3C400454B7C1);
  _Unwind_Resume(a1);
}

void OZLinkBehavior_Factory::createCopy(OZLinkBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0D8C0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F3C400454B7C1);
  _Unwind_Resume(a1);
}

void OZLinkBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZLinkBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Link Behavior");
}

void OZLinkBehavior_Factory::createBehaviorCopy(OZLinkBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7C0D9AC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F3C400454B7C1);
  _Unwind_Resume(a1);
}

void OZLinkBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void std::__call_once_param<std::tuple<OZMotionPathBehavior_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0DA34(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40B6B76874);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior_Factory::OZMotionPathBehavior_Factory(OZMotionPathBehavior_Factory *this)
{
  long long v4 = xmmword_1B7E78BB0;
  long long v5 = xmmword_1B8380CD0;
  long long v3 = xmmword_1B7E78C30;
  OZBehaviorFactory::OZBehaviorFactory((uint64_t)this, &v5, &v4, (__n128 *)&v3, 0);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 144), 0);
  *(void *)this = &unk_1F1140908;
  *((void *)this + 18) = &unk_1F11409E8;
}

void sub_1B7C0DAFC(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior_Factory::create(OZMotionPathBehavior_Factory *this, const PCString *a2)
{
}

void sub_1B7C0DB98(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4077FEC95DLL);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior_Factory::createCopy(OZMotionPathBehavior_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0DC5C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4077FEC95DLL);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZMotionPathBehavior_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Motion Path Behavior");
}

void OZMotionPathBehavior_Factory::getCategoryName(PCString *a1@<X8>)
{
}

PCString *OZMotionPathBehavior_Factory::getEnglishCategoryName@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Basic Motion");
}

void OZMotionPathBehavior_Factory::createBehaviorCopy(OZMotionPathBehavior_Factory *this, OZBehavior *a2)
{
}

void sub_1B7C0DD70(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4077FEC95DLL);
  _Unwind_Resume(a1);
}

void OZMotionPathBehavior_Factory::longDescription(PCString *a1@<X8>)
{
}

void OZFxGenerator_Factory::OZFxGenerator_Factory(OZFxGenerator_Factory *this)
{
  long long v3 = xmmword_1B8380CF0;
  long long v4 = xmmword_1B8380CE0;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1140A40;
  *((void *)this + 16) = &unk_1F1140B20;
}

void sub_1B7C0DE58(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZFxGenerator_Factory::createCopy(OZFxGenerator_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0DF80(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F3C40A32CEB6FLL);
  _Unwind_Resume(a1);
}

void OZFxGenerator_Factory::description(PCURL *a1@<X8>)
{
}

PCString *OZFxGenerator_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Generator Short Desc");
}

void OZFxGenerator_Factory::createNodeCopy(OZFxGenerator_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C0E074(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F3C40A32CEB6FLL);
  _Unwind_Resume(a1);
}

void OZFxGenerator_Factory::create(OZFxGenerator_Factory *this, const PCString *a2)
{
}

void sub_1B7C0E110(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F3C40A32CEB6FLL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZGradientGenerator_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0E180(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZGradientGenerator_Factory::OZGradientGenerator_Factory(OZGradientGenerator_Factory *this)
{
  long long v3 = xmmword_1B8380CE0;
  long long v4 = xmmword_1B8380D00;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1140B78;
  *((void *)this + 16) = &unk_1F1140C48;
  *((void *)this + 17) = 0;
}

void sub_1B7C0E250(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZGradientGenerator_Factory::~OZGradientGenerator_Factory(OZGradientGenerator_Factory *this)
{
  OZGradientGenerator_Factory::~OZGradientGenerator_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1140B78;
  uint64_t v2 = (OZGradientGenerator_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F1140C48;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZGradientGenerator_Factory::create(OZGradientGenerator_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZGradientGenerator_Factory *, void, uint64_t))(*(void *)this
                                                                                                  + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C0E458(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F3C40A32CEB6FLL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZGradientGenerator_Factory::createCopy(OZGradientGenerator_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0E5AC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F3C40A32CEB6FLL);
  _Unwind_Resume(a1);
}

void OZGradientGenerator_Factory::description(PCString *a1@<X8>)
{
}

void OZGradientGenerator_Factory::createNodeCopy(OZGradientGenerator_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C0E688(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F3C40A32CEB6FLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZGradientGenerator_Factory::~OZGradientGenerator_Factory(OZGradientGenerator_Factory *this)
{
}

{
  uint64_t vars8;

  OZGradientGenerator_Factory::~OZGradientGenerator_Factory((OZGradientGenerator_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZCloneGenerator_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0E7E4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZCloneGenerator_Factory::OZCloneGenerator_Factory(OZCloneGenerator_Factory *this)
{
  long long v3 = xmmword_1B7E78B90;
  long long v4 = xmmword_1B8380D10;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1140CA0;
  *((void *)this + 16) = &unk_1F1140D70;
  *((void *)this + 17) = 0;
}

void sub_1B7C0E8B4(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZCloneGenerator_Factory::~OZCloneGenerator_Factory(OZCloneGenerator_Factory *this)
{
  OZCloneGenerator_Factory::~OZCloneGenerator_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1140CA0;
  uint64_t v2 = (OZCloneGenerator_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F1140D70;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZCloneGenerator_Factory::create(OZCloneGenerator_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZCloneGenerator_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C0EABC(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C40EA6D2BFALL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZCloneGenerator_Factory::createCopy(OZCloneGenerator_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0EC10(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40EA6D2BFALL);
  _Unwind_Resume(a1);
}

void OZCloneGenerator_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZCloneGenerator_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Clone Short Desc");
}

PCString *OZCloneGenerator_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Generator");
}

PCString *OZCloneGenerator_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Generator");
}

PCString *OZCloneGenerator_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_Generator_Icon");
}

void OZCloneGenerator_Factory::createNodeCopy(OZCloneGenerator_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C0ED2C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40EA6D2BFALL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZCloneGenerator_Factory::~OZCloneGenerator_Factory(OZCloneGenerator_Factory *this)
{
}

{
  uint64_t vars8;

  OZCloneGenerator_Factory::~OZCloneGenerator_Factory((OZCloneGenerator_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZEffect_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0EE88(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZEffect_Factory::OZEffect_Factory(OZEffect_Factory *this)
{
  long long v4 = xmmword_1B837FF30;
  long long v3 = 0uLL;
  uint64_t v2 = OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 128), 0);
  *(void *)this = &unk_1F1140DC8;
  *((void *)this + 16) = &unk_1F1140E80;
}

void sub_1B7C0EF3C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

PCString *OZEffect_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-Filter");
}

PCString *OZEffect_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-Filter");
}

uint64_t OZEffect_Factory::getIconIDInternal(OZEffect_Factory *this)
{
  return 13;
}

PCString *OZEffect_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_Filter_Icon");
}

void OZFxFilter_Factory::OZFxFilter_Factory(OZFxFilter_Factory *this)
{
  long long v3 = xmmword_1B837FF30;
  long long v4 = xmmword_1B8380D20;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *uint64_t v2 = &unk_1F1140FD8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1140ED8;
  *((void *)this + 16) = &unk_1F1140FB8;
}

void sub_1B7C0F034(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZFxFilter_Factory::createCopy(OZFxFilter_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0F0E8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F3C406FB3AC82);
  _Unwind_Resume(a1);
}

void OZFxFilter_Factory::description(PCURL *a1@<X8>)
{
}

PCString *OZFxFilter_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "ProPlug Filter Desc");
}

void OZFxFilter_Factory::createEffectCopy(OZFxFilter_Factory *this, OZEffect *a2)
{
}

void sub_1B7C0F1DC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F3C406FB3AC82);
  _Unwind_Resume(a1);
}

void OZFxFilter_Factory::create(OZFxFilter_Factory *this, const PCString *a2)
{
}

void sub_1B7C0F2A4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F3C406FB3AC82);
  _Unwind_Resume(a1);
}

void OZFxFilter_Factory::createEffect(OZFxFilter_Factory *this, const PCString *a2)
{
}

void sub_1B7C0F368(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F3C406FB3AC82);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChanElementOrFootageRef_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0F3D8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChanElementOrFootageRef_Factory::OZChanElementOrFootageRef_Factory(OZChanElementOrFootageRef_Factory *this)
{
  long long v3 = xmmword_1B8380D40;
  long long v4 = xmmword_1B8380D30;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *uint64_t v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F11410A8;
  *((void *)this + 16) = &unk_1F1141178;
}

void sub_1B7C0F4A8(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChanElementOrFootageRef_Factory::create(OZChanElementOrFootageRef_Factory *this, const PCString *a2)
{
}

void sub_1B7C0F51C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

void OZChanElementOrFootageRef_Factory::createCopy(OZChanElementOrFootageRef_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0F5D4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

void OZChanElementOrFootageRef_Factory::createChannelCopy(OZChanElementOrFootageRef_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7C0F68C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChanRotoshapeRef_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0F6FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChanRotoshapeRef_Factory::OZChanRotoshapeRef_Factory(OZChanRotoshapeRef_Factory *this)
{
  long long v3 = xmmword_1B8378A10;
  long long v4 = xmmword_1B8380D50;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *uint64_t v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F11411D0;
  *((void *)this + 16) = &unk_1F11412A0;
}

void sub_1B7C0F7CC(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChanRotoshapeRef_Factory::create(OZChanRotoshapeRef_Factory *this, const PCString *a2)
{
}

void sub_1B7C0F840(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

void OZChanRotoshapeRef_Factory::createCopy(OZChanRotoshapeRef_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0F8F8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

void OZChanRotoshapeRef_Factory::createChannelCopy(OZChanRotoshapeRef_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7C0F9B0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40C262540ALL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZChannelImageWithOptions_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0FA20(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions_Factory::OZChannelImageWithOptions_Factory(OZChannelImageWithOptions_Factory *this)
{
  long long v3 = xmmword_1B7E77A70;
  long long v4 = xmmword_1B8380D60;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *uint64_t v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F11412F8;
  *((void *)this + 16) = &unk_1F11413C8;
}

void sub_1B7C0FAF0(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions_Factory::create(OZChannelImageWithOptions_Factory *this, const PCString *a2)
{
}

void sub_1B7C0FB64(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C409B34391DLL);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions_Factory::createCopy(OZChannelImageWithOptions_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C0FC1C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C409B34391DLL);
  _Unwind_Resume(a1);
}

void OZChannelImageWithOptions_Factory::createChannelCopy(OZChannelImageWithOptions_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7C0FCD4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C409B34391DLL);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<OZ3DEngineSceneElement_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C0FD44(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneElement_Factory::OZ3DEngineSceneElement_Factory(OZ3DEngineSceneElement_Factory *this)
{
  long long v3 = xmmword_1B7E78B90;
  long long v4 = xmmword_1B8380A90;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1141420;
  *((void *)this + 16) = &unk_1F11414F0;
  *((void *)this + 17) = 0;
}

void sub_1B7C0FE14(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneElement_Factory::~OZ3DEngineSceneElement_Factory(OZ3DEngineSceneElement_Factory *this)
{
  OZ3DEngineSceneElement_Factory::~OZ3DEngineSceneElement_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1141420;
  uint64_t v2 = (OZ3DEngineSceneElement_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F11414F0;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZ3DEngineSceneElement_Factory::create(OZ3DEngineSceneElement_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZ3DEngineSceneElement_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C1001C(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C408C1AE853, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneElement_Factory::createCopy(OZ3DEngineSceneElement_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C10170(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C408C1AE853);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneElement_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZ3DEngineSceneElement_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "3D Scene Element Short Desc");
}

PCString *OZ3DEngineSceneElement_Factory::getIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconColor-SplineShape");
}

PCString *OZ3DEngineSceneElement_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-3DObject");
}

PCString *OZ3DEngineSceneElement_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_3DObject_Icon");
}

void OZ3DEngineSceneElement_Factory::createNodeCopy(OZ3DEngineSceneElement_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C1028C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C408C1AE853);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZ3DEngineSceneElement_Factory::~OZ3DEngineSceneElement_Factory(OZ3DEngineSceneElement_Factory *this)
{
}

{
  uint64_t vars8;

  OZ3DEngineSceneElement_Factory::~OZ3DEngineSceneElement_Factory((OZ3DEngineSceneElement_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZ3DEngineSceneFile_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C103E8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFile_Factory::OZ3DEngineSceneFile_Factory(OZ3DEngineSceneFile_Factory *this)
{
  long long v3 = xmmword_1B8380BC0;
  long long v4 = xmmword_1B8380D70;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1141548;
  *((void *)this + 16) = &unk_1F1141618;
  *((void *)this + 17) = 0;
}

void sub_1B7C104B8(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFile_Factory::~OZ3DEngineSceneFile_Factory(OZ3DEngineSceneFile_Factory *this)
{
  OZ3DEngineSceneFile_Factory::~OZ3DEngineSceneFile_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1141548;
  uint64_t v2 = (OZ3DEngineSceneFile_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F1141618;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZ3DEngineSceneFile_Factory::create(OZ3DEngineSceneFile_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZ3DEngineSceneFile_Factory *, void, uint64_t))(*(void *)this
                                                                                                  + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C106C0(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C402CAECB46, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFile_Factory::createCopy(OZ3DEngineSceneFile_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C10814(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C402CAECB46);
  _Unwind_Resume(a1);
}

void OZ3DEngineSceneFile_Factory::description(PCString *a1@<X8>)
{
}

PCString *OZ3DEngineSceneFile_Factory::unlocalizedDescription@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "3D Scene File Short Desc");
}

void OZ3DEngineSceneFile_Factory::createNodeCopy(OZ3DEngineSceneFile_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C10900(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C402CAECB46);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZ3DEngineSceneFile_Factory::~OZ3DEngineSceneFile_Factory(OZ3DEngineSceneFile_Factory *this)
{
}

{
  uint64_t vars8;

  OZ3DEngineSceneFile_Factory::~OZ3DEngineSceneFile_Factory((OZ3DEngineSceneFile_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZARFaceAnchorElement_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C10A5C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZARFaceAnchorElement_Factory::OZARFaceAnchorElement_Factory(OZARFaceAnchorElement_Factory *this)
{
  long long v3 = xmmword_1B8380A90;
  long long v4 = xmmword_1B8380D80;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1141670;
  *((void *)this + 16) = &unk_1F1141740;
  *((void *)this + 17) = 0;
}

void sub_1B7C10B2C(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZARFaceAnchorElement_Factory::~OZARFaceAnchorElement_Factory(OZARFaceAnchorElement_Factory *this)
{
  OZARFaceAnchorElement_Factory::~OZARFaceAnchorElement_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1141670;
  uint64_t v2 = (OZARFaceAnchorElement_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F1141740;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZARFaceAnchorElement_Factory::create(OZARFaceAnchorElement_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZARFaceAnchorElement_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C10D34(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C40ED398990, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZARFaceAnchorElement_Factory::createCopy(OZARFaceAnchorElement_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C10E88(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40ED398990);
  _Unwind_Resume(a1);
}

PCString *OZARFaceAnchorElement_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Plane");
}

PCString *OZARFaceAnchorElement_Factory::getIconNameBWInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_LayersList_ObjectIconGrey-SplineShape");
}

PCString *OZARFaceAnchorElement_Factory::getLibraryIconNameInternal@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "M_Library_Shape_Icon");
}

void OZARFaceAnchorElement_Factory::createNodeCopy(OZARFaceAnchorElement_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C10F7C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40ED398990);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZARFaceAnchorElement_Factory::~OZARFaceAnchorElement_Factory(OZARFaceAnchorElement_Factory *this)
{
}

{
  uint64_t vars8;

  OZARFaceAnchorElement_Factory::~OZARFaceAnchorElement_Factory((OZARFaceAnchorElement_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZ3DEnginePlaneElement_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C110D8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZ3DEnginePlaneElement_Factory::OZ3DEnginePlaneElement_Factory(OZ3DEnginePlaneElement_Factory *this)
{
  long long v3 = xmmword_1B8380A90;
  long long v4 = xmmword_1B8380D90;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1141798;
  *((void *)this + 16) = &unk_1F1141868;
  *((void *)this + 17) = 0;
}

void sub_1B7C111A8(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZ3DEnginePlaneElement_Factory::~OZ3DEnginePlaneElement_Factory(OZ3DEnginePlaneElement_Factory *this)
{
  OZ3DEnginePlaneElement_Factory::~OZ3DEnginePlaneElement_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1141798;
  uint64_t v2 = (OZ3DEnginePlaneElement_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F1141868;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZ3DEnginePlaneElement_Factory::create(OZ3DEnginePlaneElement_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZ3DEnginePlaneElement_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C113B0(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C4098A97AEELL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZ3DEnginePlaneElement_Factory::createCopy(OZ3DEnginePlaneElement_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C11504(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4098A97AEELL);
  _Unwind_Resume(a1);
}

PCString *OZ3DEnginePlaneElement_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "3D Plane Element Short Desc");
}

void OZ3DEnginePlaneElement_Factory::createNodeCopy(OZ3DEnginePlaneElement_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C115D8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4098A97AEELL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZ3DEnginePlaneElement_Factory::~OZ3DEnginePlaneElement_Factory(OZ3DEnginePlaneElement_Factory *this)
{
}

{
  uint64_t vars8;

  OZ3DEnginePlaneElement_Factory::~OZ3DEnginePlaneElement_Factory((OZ3DEnginePlaneElement_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZARPlaneAnchorElement_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C11734(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZARPlaneAnchorElement_Factory::OZARPlaneAnchorElement_Factory(OZARPlaneAnchorElement_Factory *this)
{
  long long v3 = xmmword_1B8380A90;
  long long v4 = xmmword_1B8380DA0;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F11418C0;
  *((void *)this + 16) = &unk_1F1141990;
  *((void *)this + 17) = 0;
}

void sub_1B7C11804(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZARPlaneAnchorElement_Factory::~OZARPlaneAnchorElement_Factory(OZARPlaneAnchorElement_Factory *this)
{
  OZARPlaneAnchorElement_Factory::~OZARPlaneAnchorElement_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F11418C0;
  uint64_t v2 = (OZARPlaneAnchorElement_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F1141990;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZARPlaneAnchorElement_Factory::create(OZARPlaneAnchorElement_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZARPlaneAnchorElement_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C11A0C(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C40245721ACLL, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZARPlaneAnchorElement_Factory::createCopy(OZARPlaneAnchorElement_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C11B60(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40245721ACLL);
  _Unwind_Resume(a1);
}

PCString *OZARPlaneAnchorElement_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Plane Anchor");
}

void OZARPlaneAnchorElement_Factory::createNodeCopy(OZARPlaneAnchorElement_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C11C34(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40245721ACLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZARPlaneAnchorElement_Factory::~OZARPlaneAnchorElement_Factory(OZARPlaneAnchorElement_Factory *this)
{
}

{
  uint64_t vars8;

  OZARPlaneAnchorElement_Factory::~OZARPlaneAnchorElement_Factory((OZARPlaneAnchorElement_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZEnvironmentMeshSceneElement_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C11D90(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZEnvironmentMeshSceneElement_Factory::OZEnvironmentMeshSceneElement_Factory(OZEnvironmentMeshSceneElement_Factory *this)
{
  long long v3 = xmmword_1B8380A90;
  long long v4 = xmmword_1B8380DB0;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F11419E8;
  *((void *)this + 16) = &unk_1F1141AB8;
  *((void *)this + 17) = 0;
}

void sub_1B7C11E60(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZEnvironmentMeshSceneElement_Factory::~OZEnvironmentMeshSceneElement_Factory(OZEnvironmentMeshSceneElement_Factory *this)
{
  OZEnvironmentMeshSceneElement_Factory::~OZEnvironmentMeshSceneElement_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F11419E8;
  uint64_t v2 = (OZEnvironmentMeshSceneElement_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F1141AB8;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZEnvironmentMeshSceneElement_Factory::create(OZEnvironmentMeshSceneElement_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZEnvironmentMeshSceneElement_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C12068(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C4079491FA7, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZEnvironmentMeshSceneElement_Factory::createCopy(OZEnvironmentMeshSceneElement_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C121BC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4079491FA7);
  _Unwind_Resume(a1);
}

PCString *OZEnvironmentMeshSceneElement_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Environment Mesh");
}

void OZEnvironmentMeshSceneElement_Factory::createNodeCopy(OZEnvironmentMeshSceneElement_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C12290(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C4079491FA7);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZEnvironmentMeshSceneElement_Factory::~OZEnvironmentMeshSceneElement_Factory(OZEnvironmentMeshSceneElement_Factory *this)
{
}

{
  uint64_t vars8;

  OZEnvironmentMeshSceneElement_Factory::~OZEnvironmentMeshSceneElement_Factory((OZEnvironmentMeshSceneElement_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZARPersonAnchorElement_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C123EC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C409129CFF6);
  _Unwind_Resume(a1);
}

void OZARPersonAnchorElement_Factory::OZARPersonAnchorElement_Factory(OZARPersonAnchorElement_Factory *this)
{
  long long v3 = xmmword_1B8380A90;
  long long v4 = xmmword_1B8380DC0;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 0);
  *uint64_t v2 = &unk_1F10ADA60;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1141B10;
  *((void *)this + 16) = &unk_1F1141BE0;
  *((void *)this + 17) = 0;
}

void sub_1B7C124BC(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZARPersonAnchorElement_Factory::~OZARPersonAnchorElement_Factory(OZARPersonAnchorElement_Factory *this)
{
  OZARPersonAnchorElement_Factory::~OZARPersonAnchorElement_Factory(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSingleton *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1141B10;
  uint64_t v2 = (OZARPersonAnchorElement_Factory *)((char *)this + 128);
  *((void *)this + 16) = &unk_1F1141BE0;
  long long v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 17) = 0;
  PCSingleton::~PCSingleton(v2);

  OZFactory::~OZFactory((OZFactory *)this);
}

OZChannelBase *OZARPersonAnchorElement_Factory::create(OZARPersonAnchorElement_Factory *this, const PCString *a2, unsigned int NextUniqueID)
{
  if (!*((void *)this + 17))
  {
    OZChannelBase::setRangeName((OZChannelBase *)&v12, (const PCString *)@"Motion Effect");
    operator new();
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v11, (const PCString *)@"Motion Effect");
  uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(OZARPersonAnchorElement_Factory *, void, uint64_t))(*(void *)this + 24))(this, *((void *)this + 17), 40);
  uint64_t v7 = v6;
  if (!NextUniqueID) {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v6);
  }
  OZChannelBase::setID((OZChannelBase *)&v7->var7, NextUniqueID);
  double v8 = (OZChannelBase *)(*((uint64_t (**)(OZChannelBase *))v7->var0 + 80))(v7);
  OZChannelBase::setName(v8, a2, 0);
  (*((void (**)(OZChannelBase *))v7->var0 + 115))(v7);
  OZChannelBase::setRangeName((OZChannelBase *)&v11, v9);
  return v7;
}

void sub_1B7C126C4(_Unwind_Exception *a1, int a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MEMORY[0x1BA9BFBA0](v13, 0x10F1C40324BC503, a3, a4);
  OZChannelBase::setRangeName((OZChannelBase *)&a13, v15);
  _Unwind_Resume(a1);
}

void OZARPersonAnchorElement_Factory::createCopy(OZARPersonAnchorElement_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C12818(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40324BC503);
  _Unwind_Resume(a1);
}

PCString *OZARPersonAnchorElement_Factory::description@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "Person Anchor");
}

void OZARPersonAnchorElement_Factory::createNodeCopy(OZARPersonAnchorElement_Factory *this, OZSceneNode *a2)
{
}

void sub_1B7C128EC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C40324BC503);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZARPersonAnchorElement_Factory::~OZARPersonAnchorElement_Factory(OZARPersonAnchorElement_Factory *this)
{
}

{
  uint64_t vars8;

  OZARPersonAnchorElement_Factory::~OZARPersonAnchorElement_Factory((OZARPersonAnchorElement_Factory *)((char *)this - 128));

  JUMPOUT(0x1BA9BFBA0);
}

void OZ3DEngineScenePlacementBehavior::OZ3DEngineScenePlacementBehavior(OZ3DEngineScenePlacementBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OZBehavior::OZBehavior(this, a2, a3, a4);
  OZLocking::OZLocking((OZLocking *)(v5 + 336));
  *(void *)this = &unk_1F1141C38;
  *((void *)this + 2) = &unk_1F1141ED0;
  *((void *)this + 6) = &unk_1F1142128;
  *((void *)this + 42) = &unk_1F1142180;
  PCString::PCString(&v7, "Relative To");
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZ3DEngineScenePlacementBehavior *)((char *)this + 536), &v7, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Left;Center;Right");
  PCString::PCString(&v6, "Alignment");
  OZChannelEnum::OZChannelEnum((OZ3DEngineScenePlacementBehavior *)((char *)this + 696), 4u, &v7, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Distance");
  OZChannelDouble::OZChannelDouble((OZ3DEngineScenePlacementBehavior *)((char *)this + 952), 1000.0, &v7, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Face Camera");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1104), 0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Fix Y");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1256), 0, &v7, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v7);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 952), -2000.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 952), 2000.0);
  int v8 = 2;
  v7.int var0 = (__CFString *)0x400000001;
  OZChannelEnum::setTags((OZ3DEngineScenePlacementBehavior *)((char *)this + 696), (char *)&v7, 3);
}

void sub_1B7C12C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelBool::~OZChannelBool(v18);
  OZChannelBool::~OZChannelBool(v17);
  OZChannel::~OZChannel(v16);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v14);
  OZLocking::~OZLocking(v13);
  OZBehavior::~OZBehavior(v12);
  _Unwind_Resume(a1);
}

void OZ3DEngineScenePlacementBehavior::OZ3DEngineScenePlacementBehavior(OZ3DEngineScenePlacementBehavior *this, const OZ3DEngineScenePlacementBehavior *a2, char a3)
{
  OZBehavior::OZBehavior(this, a2, a3);
  OZLocking::OZLocking((OZLocking *)(v5 + 336));
  *(void *)this = &unk_1F1141C38;
  *((void *)this + 2) = &unk_1F1141ED0;
  *((void *)this + 6) = &unk_1F1142128;
  *((void *)this + 42) = &unk_1F1142180;
  OZChanTransformNodeRef::OZChanTransformNodeRef((OZ3DEngineScenePlacementBehavior *)((char *)this + 536), (const OZ3DEngineScenePlacementBehavior *)((char *)a2 + 536), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((OZ3DEngineScenePlacementBehavior *)((char *)this + 696), (const OZ3DEngineScenePlacementBehavior *)((char *)a2 + 696), (OZChannelFolder *)((char *)this + 56));
  OZChannel::OZChannel((OZChannel *)((char *)this + 952), (const OZChannelBase *)((char *)a2 + 952), (OZChannelFolder *)((char *)this + 56));
  *((void *)this + 119) = &unk_1F1100CF0;
  *((void *)this + 12OZDocument::~OZDocument(this - 1) = &unk_1F1101050;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1104), (const OZChannelBase *)((char *)a2 + 1104), (OZChannelFolder *)((char *)this + 56));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1256), (const OZChannelBase *)((char *)a2 + 1256), (OZChannelFolder *)((char *)this + 56));
}

void sub_1B7C12ED8(_Unwind_Exception *a1)
{
  OZChannelBool::~OZChannelBool(v6);
  OZChannel::~OZChannel(v5);
  OZChannelEnum::~OZChannelEnum(v4);
  OZChanTransformNodeRef::~OZChanTransformNodeRef(v3);
  OZLocking::~OZLocking(v2);
  OZBehavior::~OZBehavior(v1);
  _Unwind_Resume(a1);
}

void sub_1B7C12F34()
{
}

void OZ3DEngineScenePlacementBehavior::~OZ3DEngineScenePlacementBehavior(OZ3DEngineScenePlacementBehavior *this)
{
  *(void *)this = &unk_1F1141C38;
  *((void *)this + 2) = &unk_1F1141ED0;
  *((void *)this + 6) = &unk_1F1142128;
  *((void *)this + 42) = &unk_1F1142180;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1256));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1104));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 952));
  OZChannelEnum::~OZChannelEnum((OZ3DEngineScenePlacementBehavior *)((char *)this + 696));
  OZChanTransformNodeRef::~OZChanTransformNodeRef((OZ3DEngineScenePlacementBehavior *)((char *)this + 536));
  *((void *)this + 42) = &unk_1F10BC940;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 464));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 344));

  OZBehavior::~OZBehavior(this);
}

{
  uint64_t vars8;

  OZ3DEngineScenePlacementBehavior::~OZ3DEngineScenePlacementBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZ3DEngineScenePlacementBehavior::~OZ3DEngineScenePlacementBehavior(OZ3DEngineScenePlacementBehavior *this)
{
}

{
  OZ3DEngineScenePlacementBehavior::~OZ3DEngineScenePlacementBehavior((OZ3DEngineScenePlacementBehavior *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZ3DEngineScenePlacementBehavior::~OZ3DEngineScenePlacementBehavior((OZ3DEngineScenePlacementBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZ3DEngineScenePlacementBehavior::~OZ3DEngineScenePlacementBehavior((OZ3DEngineScenePlacementBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZ3DEngineScenePlacementBehavior::operator=(uint64_t a1, const void *a2)
{
  OZBehavior::operator=(a1, (uint64_t)a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v4;
  OZChanSceneNodeRef::operator=(a1 + 536, (uint64_t)v4 + 536);

  return OZChannelBase::operator=(a1 + 952, (uint64_t)v5 + 952);
}

void *OZ3DEngineScenePlacementBehavior::didAddToNode(void *this, OZSceneNode *lpsrc)
{
  if (lpsrc)
  {
    uint64_t v3 = (uint64_t)this;
    if (this) {
      *(void *)(v3 + 328) = lpsrc;
    }
  }
  return this;
}

uint64_t OZ3DEngineScenePlacementBehavior::getLockDependencies(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  PCString v7 = (char *)(result + 336);
  for (uint64_t i = *(void **)(a4 + 8); i; uint64_t i = (void *)*i)
  {
    unint64_t v9 = i[4];
    if ((unint64_t)v7 >= v9)
    {
      if (v9 >= (unint64_t)v7) {
        return result;
      }
      ++i;
    }
  }
  char v11 = (char *)(result + 336);
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, (unint64_t *)&v11, (uint64_t *)&v11);
  CMTimeEpoch v10 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 336))(v6);
  OZLocking::addLockDependenciesForDependents(v7, v10, a3, a4);
  char v11 = v7;
  return std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)&v11);
}

uint64_t non-virtual thunk to'OZ3DEngineScenePlacementBehavior::getLockDependencies(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OZ3DEngineScenePlacementBehavior::getLockDependencies(a1 - 336, a2, a3, a4);
}

uint64_t OZ3DEngineScenePlacementBehavior::getLockingGroups(OZ3DEngineScenePlacementBehavior *this)
{
  uint64_t result = (*(uint64_t (**)(OZ3DEngineScenePlacementBehavior *))(*(void *)this + 336))(this);
  if (result) {
    return (*(uint64_t (**)(OZ3DEngineScenePlacementBehavior *))(*(void *)this + 336))(this) + 1784;
  }
  return result;
}

uint64_t non-virtual thunk to'OZ3DEngineScenePlacementBehavior::getLockingGroups(OZ3DEngineScenePlacementBehavior *this)
{
  uint64_t v1 = (char *)this - 336;
  uint64_t result = (*(uint64_t (**)(char *))(*((void *)this - 42) + 336))((char *)this - 336);
  if (result) {
    return (*(uint64_t (**)(char *))(*(void *)v1 + 336))(v1) + 1784;
  }
  return result;
}

void OZMaterialLayersFolder::OZMaterialLayersFolder(OZMaterialLayersFolder *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChannelVaryingFolder::OZChannelVaryingFolder(this, a2, a3, a4, a5, a6);
  *(void *)uint64_t v6 = &unk_1F1142200;
  *(void *)(v6 + 16) = &unk_1F11424D8;
  *(void *)(v6 + 56) &= ~0x10000uLL;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v6);
}

void sub_1B7C1347C(_Unwind_Exception *a1)
{
  OZChannelVaryingFolder::~OZChannelVaryingFolder(v1);
  _Unwind_Resume(a1);
}

void OZMaterialLayersFolder::OZMaterialLayersFolder(OZMaterialLayersFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelVaryingFolder::OZChannelVaryingFolder(this, a2, a3, a4);
  *(void *)uint64_t v4 = &unk_1F1142200;
  *(void *)(v4 + 16) = &unk_1F11424D8;
  *(void *)(v4 + 56) &= ~0x10000uLL;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v4);
}

void sub_1B7C13508(_Unwind_Exception *a1)
{
  OZChannelVaryingFolder::~OZChannelVaryingFolder(v1);
  _Unwind_Resume(a1);
}

void OZMaterialLayersFolder::OZMaterialLayersFolder(OZMaterialLayersFolder *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChannelVaryingFolder::OZChannelVaryingFolder(this, a2, a3);
  *uint64_t v3 = &unk_1F1142200;
  v3[2] = &unk_1F11424D8;
}

void OZMaterialLayersFolder::clone(OZMaterialLayersFolder *this)
{
}

void sub_1B7C135FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZMaterialLayersFolder::~OZMaterialLayersFolder(OZMaterialLayersFolder *this)
{
}

{
  uint64_t vars8;

  OZChannelVaryingFolder::~OZChannelVaryingFolder((OZChannelFolder *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZMaterialLayersFolder::~OZMaterialLayersFolder(OZChannelFolder *this)
{
  OZChannelVaryingFolder::~OZChannelVaryingFolder(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZMaterialLayersFolder::writeBody(OZChannelFolder *this, PCSerializerWriteStream *a2, BOOL a3, int a4)
{
  return OZChannelVaryingFolder::writeBody(this, a2, a3, a4);
}

uint64_t non-virtual thunk to'OZMaterialLayersFolder::writeBody(OZMaterialLayersFolder *this, PCSerializerWriteStream *a2, BOOL a3, int a4)
{
  return OZChannelVaryingFolder::writeBody((OZChannelFolder *)((char *)this - 16), a2, a3, a4);
}

void OZMaterialLayersFolder::copy(OZChannelFolder *this, const OZChannelBase *a2)
{
  OZChannelFolder::copy(this, a2);
  OZChannelVaryingFolder::resetToDefault((OZChannelVaryingFolder *)this);
  if (v4)
  {
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    while (v5 != v6)
    {
      uint64_t v7 = *v5++;
      int v8 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 248))(v7);
      v8->var6 = this;
      OZChannelFolder::push_back(this, v8);
    }
  }
  else
  {
    uint64_t v9 = *((void *)this + 14);
    if (v9)
    {
      CMTimeEpoch v10 = *(void **)v9;
      if (*(void *)v9)
      {
        *(void *)(v9 + 8) = v10;
        operator delete(v10);
      }
      MEMORY[0x1BA9BFBA0](v9, 0x80C40D6874129);
    }
    *((void *)this + 14) = 0;
  }
}

void OZMaterialLayersFolder::assign(OZChannelBase *this, const OZChannelBase *a2)
{
  uint64_t v2 = a2;
  OZChannelBase::assign(this, a2);
  if (v2) {
  OZChannelVaryingFolder::resetToDefault((OZChannelVaryingFolder *)this);
  }
  int var0 = v2[1].var0;
  if (var0)
  {
    uint64_t v5 = (char *)*var0;
    uint64_t v6 = (char *)var0[1];
    while (v5 != v6)
    {
      uint64_t v7 = (OZChannelBase *)(*(uint64_t (**)(void))(**(void **)v5 + 248))();
      v7->var6 = (OZChannelFolder *)this;
      v5 += 8;
      (*((void (**)(void))v7->var0 + 32))();
      OZChannelFolder::push_back((OZChannelFolder *)this, v7);
    }
  }
  else
  {
    int v8 = this[1].var0;
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8)
      {
        v8[1] = v9;
        operator delete(v9);
      }
      MEMORY[0x1BA9BFBA0](v8, 0x80C40D6874129);
    }
    this[1].int var0 = 0;
  }
}

char *OZMaterialLayersFolder::resetToDefault(OZMaterialLayersFolder *this)
{
  OZChannelVaryingFolder::resetToDefault(this);
  uint64_t result = (char *)OZChannelBase::getObjectManipulator((OZChannelBase *)this);
  if (result)
  {
    if (result)
    {
      return OZLayeredMaterial::addDefaultLayer(result);
    }
  }
  return result;
}

OZFactories *OZMaterialLayersFolder::markFactoriesForSerialization(OZChannelFolder *this, PCSerializerWriteStream *a2, int a3)
{
  uint64_t result = (OZFactories *)OZChannelFolder::markFactoriesForSerialization(this, a2);
  if (a3)
  {
    uint64_t Instance = OZFactories::getInstance(result);
    long long v7 = xmmword_1B837FFC0;
    Factory = (OZFactory *)OZFactories::findFactory(Instance, (unsigned int *)&v7);
    return (OZFactories *)OZFactory::setNeedsSaving(Factory, (const OZFactory *)1);
  }
  return result;
}

OZFactories *non-virtual thunk to'OZMaterialLayersFolder::markFactoriesForSerialization(OZMaterialLayersFolder *this, PCSerializerWriteStream *a2, int a3)
{
  return OZMaterialLayersFolder::markFactoriesForSerialization((OZChannelFolder *)((char *)this - 16), a2, a3);
}

uint64_t OZMaterialLayersFolder::writeHeader(OZChannelBase *this, OZFactory *a2, int a3)
{
  if (a3)
  {
    uint64_t Instance = OZFactories::getInstance((OZFactories *)this);
    long long v11 = xmmword_1B837FFC0;
    Factory = (OZFactory *)OZFactories::findFactory(Instance, (unsigned int *)&v11);
    var1 = this->var1;
    uint64_t v9 = (const OZFactory *)OZFactory::fileRefID(Factory, v8);
    OZFactory::setFileRefID(var1, v9);
  }
  return OZChannelBase::writeHeader(this, a2, 1);
}

uint64_t non-virtual thunk to'OZMaterialLayersFolder::writeHeader(OZMaterialLayersFolder *this, OZFactory *a2, int a3)
{
  return OZMaterialLayersFolder::writeHeader((OZChannelBase *)((char *)this - 16), a2, a3);
}

uint64_t OZMaterialLayersFolder::parseBegin(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = OZChannelVaryingFolder::parseBegin(this, a2);
  if (v3) {
    OZChannelVaryingFolder::resetToDefault((OZChannelVaryingFolder *)this);
  }
  return v3;
}

uint64_t non-virtual thunk to'OZMaterialLayersFolder::parseBegin(OZMaterialLayersFolder *this, PCSerializerReadStream *a2)
{
  uint64_t v2 = (OZMaterialLayersFolder *)((char *)this - 16);
  uint64_t v3 = OZChannelVaryingFolder::parseBegin((OZChannelFolder *)((char *)this - 16), a2);
  if (v3) {
    OZChannelVaryingFolder::resetToDefault(v2);
  }
  return v3;
}

uint64_t OZMaterialLayersFolder::parseEnd(OZMaterialLayersFolder *this, PCSerializerReadStream *a2)
{
  *((void *)this + 7) &= ~0x10000uLL;
  uint64_t v4 = (const void ***)*((void *)this + 14);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (*v4 != v6)
  {
    do
    {
      if (*v5) {
      ++v5;
      }
    }
    while (v5 != v6);
  }

  return OZChannelVaryingFolder::parseEnd((OZChannelFolder *)this, a2);
}

uint64_t non-virtual thunk to'OZMaterialLayersFolder::parseEnd(OZMaterialLayersFolder *this, PCSerializerReadStream *a2)
{
  return OZMaterialLayersFolder::parseEnd((OZMaterialLayersFolder *)((char *)this - 16), a2);
}

unint64_t OZMaterialLayersFolder::indexOfDescendant(OZMaterialLayersFolder *this, OZChannelBase *a2)
{
  uint64_t v2 = (OZChannelBase ***)*((void *)this + 14);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = v3;
  if (v3 != v4)
  {
    while (*v5 != a2)
    {
      if (++v5 == v4)
      {
        uint64_t v5 = v4;
        return (unint64_t)((char *)v5 - (char *)v3) >> 3;
      }
    }
  }
  return (unint64_t)((char *)v5 - (char *)v3) >> 3;
}

void OZTimelineState::OZTimelineState(OZTimelineState *this)
{
  *(void *)this = &unk_1F1142548;
  uint64_t v2 = MEMORY[0x1E4F1FA48];
  long long v3 = *MEMORY[0x1E4F1FA48];
  *((_OWORD *)this + 2) = *MEMORY[0x1E4F1FA48];
  uint64_t v4 = *(void *)(v2 + 16);
  *((void *)this + 6) = v4;
  *(_OWORD *)((char *)this + 56) = v3;
  *((void *)this + 9) = v4;
  uint64_t v5 = (OZPreferenceManager *)OZPreferenceManager::Instance(this);
  *((unsigned char *)this + 8) = OZPreferenceManager::getTimelineDisplayVideo(v5);
  *((unsigned char *)this + 9) = OZPreferenceManager::getTimelineDisplayAudio(v5);
  *((unsigned char *)this + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = OZPreferenceManager::getTimelineDisplayKeyframes(v5);
  *((unsigned char *)this + 1OZDocument::~OZDocument(this - 1) = OZPreferenceManager::getTimelineDisplayMasks(v5);
  *((unsigned char *)this + 12) = OZPreferenceManager::getTimelineDisplayBehaviors(v5);
  *((unsigned char *)this + 13) = OZPreferenceManager::getTimelineDisplayEffects(v5);
  *((double *)this + 2) = OZPreferenceManager::getTimelineVideoVerticalZoom(v5);
  *((double *)this + 3) = OZPreferenceManager::getTimelineAudioVerticalZoom(v5);
}

__n128 OZTimelineState::OZTimelineState(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = &unk_1F1142548;
  *(_DWORD *)(a1 + 8) = a2->n128_u32[2];
  *(_WORD *)(a1 + 12) = a2->n128_u16[6];
  __n128 result = a2[1];
  uint64_t v3 = MEMORY[0x1E4F1FA48];
  long long v4 = *MEMORY[0x1E4F1FA48];
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(v3 + 16);
  *(void *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 72) = v5;
  return result;
}

uint64_t OZTimelineState::writeHeader(OZTimelineState *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZTimelineStateScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 81);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZTimelineState::writeBody(OZTimelineState *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZTimelineStateScope);
  uint64_t v4 = *((unsigned __int8 *)this + 8);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v4);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v5 = *((unsigned __int8 *)this + 9);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v6 = *((unsigned __int8 *)this + 10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v6);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v7 = *((unsigned __int8 *)this + 11);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 4);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v7);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v8 = *((unsigned __int8 *)this + 12);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 5);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v8);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v9 = *((unsigned __int8 *)this + 13);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 6);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v9);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  double v10 = *((double *)this + 2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 7);
  (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v10);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  double v11 = *((double *)this + 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 8);
  (*(void (**)(PCSerializerWriteStream *, double))(*(void *)a2 + 88))(a2, v11);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 9);
  CMTime v16 = *(CMTime *)((char *)this + 32);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, CMTime *))(*(void *)a2 + 208))(a2, 1, &v16);
  CMTime v16 = *(CMTime *)((char *)this + 32);
  CMTime v15 = *(CMTime *)((char *)this + 56);
  double v12 = PC_CMTimeSaferAdd(&v16, &v15, (uint64_t)v14);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, unsigned char *, double))(*(void *)a2 + 208))(a2, 2, v14, v12);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZTimelineState::parseBegin(OZTimelineState *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZTimelineState::parseEnd(OZTimelineState *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZTimelineState::parseElement(OZTimelineState *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  switch(*((_DWORD *)a3 + 2))
  {
    case 1:
      uint64_t v5 = (char *)this + 8;
      goto LABEL_8;
    case 2:
      uint64_t v5 = (char *)this + 9;
      goto LABEL_8;
    case 3:
      uint64_t v5 = (char *)this + 10;
      goto LABEL_8;
    case 4:
      uint64_t v5 = (char *)this + 11;
      goto LABEL_8;
    case 5:
      uint64_t v5 = (char *)this + 12;
      goto LABEL_8;
    case 6:
      uint64_t v5 = (char *)this + 13;
LABEL_8:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 72))(a3, v5);
      return 0;
    case 7:
      uint64_t v6 = (char *)this + 16;
      goto LABEL_11;
    case 8:
      uint64_t v6 = (char *)this + 24;
LABEL_11:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 64))(a3, v6);
      return 0;
    case 9:
      if (*((_DWORD *)a2 + 26) < 5u)
      {
        double v13 = 0.0;
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, double *))(*(void *)a3 + 144))(a3, 1, &v13))
        {
          CMTime v16 = *(CMTime *)((char *)a2 + 112);
          operator*(&v16, &v17, v13);
          *(CMTime *)((char *)this + 32) = v17;
        }
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, double *))(*(void *)a3 + 144))(a3, 2, &v13))
        {
          CMTime v11 = *(CMTime *)((char *)a2 + 112);
          operator*(&v11, &v12, v13 + -1.0);
          *(_OWORD *)&v10.CMTimeValue value = *((_OWORD *)a2 + 7);
          v10.CMTimeEpoch epoch = *((void *)a2 + 16);
          CMTime v17 = v12;
          CMTime v16 = *(CMTime *)((char *)this + 32);
          PC_CMTimeSaferSubtract(&v17, &v16, (uint64_t)&v14);
          CMTime v17 = v14;
          CMTime v16 = v10;
          PC_CMTimeSaferAdd(&v17, &v16, (uint64_t)&v15);
          *(_OWORD *)((char *)this + 56) = *(_OWORD *)&v15.value;
          CMTimeEpoch epoch = v15.epoch;
          goto LABEL_21;
        }
      }
      else
      {
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, CMTime *))(*(void *)a3 + 168))(a3, 1, &v15))
        {
          *(CMTime *)((char *)this + 32) = v15;
        }
        if ((*(unsigned int (**)(PCStreamElement *, uint64_t, CMTime *))(*(void *)a3 + 168))(a3, 2, &v15))
        {
          CMTime v16 = *(CMTime *)((char *)this + 32);
          CMTime v17 = v15;
          PC_CMTimeSaferSubtract(&v17, &v16, (uint64_t)&v14);
          *(_OWORD *)((char *)this + 56) = *(_OWORD *)&v14.value;
          CMTimeEpoch epoch = v14.epoch;
LABEL_21:
          *((void *)this + 9) = epoch;
        }
      }
      return 0;
    default:
      return 0;
  }
}

void OZTimelineState::~OZTimelineState(OZTimelineState *this)
{
}

void OZScene::OZScene(OZScene *this, OZDocument *a2)
{
  *(void *)this = &unk_1F10A7F98;
  *((void *)this + OZDocument::~OZDocument(this - 1) = &unk_1F113BEF8;
  PCWorkingColorVector::PCWorkingColorVector((OZScene *)((char *)this + 16));
  *(void *)this = &unk_1F11425B8;
  *((void *)this + OZDocument::~OZDocument(this - 1) = &unk_1F1142660;
  *((_DWORD *)this + 8) = -1;
  PCSharedMutex::PCSharedMutex((OZScene *)((char *)this + 40));
  PCMutex::PCMutex((PCMutex *)((char *)this + 160));
  PCSharedMutex::PCSharedMutex((OZScene *)((char *)this + 232));
  OZSceneSettings::OZSceneSettings((OZScene *)((char *)this + 336));
  OZExportSettings::OZExportSettings((OZScene *)((char *)this + 640));
  OZPublishSettings::OZPublishSettings((OZScene *)((char *)this + 720), this);
  PCURL::PCURL((PCURL *)&v16, @"Channel Scene Root");
  OZChannelObjectRoot::OZChannelObjectRoot((OZScene *)((char *)this + 920), &v16, 0, 0x270Fu, 0);
  PCString::~PCString(&v16);
  *((void *)this + 15OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = (char *)this + 1200;
  *((void *)this + 15OZDocument::~OZDocument(this - 1) = (char *)this + 1200;
  *((void *)this + 152) = 0;
  *((void *)this + 157) = 0;
  *((void *)this + 156) = 0;
  *((void *)this + 155) = (char *)this + 1248;
  *((void *)this + 16OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((void *)this + 159) = 0;
  *((void *)this + 158) = (char *)this + 1272;
  *((_DWORD *)this + 322) = 0;
  *((_OWORD *)this + 8OZDocument::~OZDocument(this - 1) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_DWORD *)this + 332) = 1065353216;
  *((_DWORD *)this + 334) = 0;
  *((void *)this + 168) = 0;
  uint64_t v4 = (long long *)MEMORY[0x1E4F1FA48];
  *(_OWORD *)((char *)this + 1352) = *MEMORY[0x1E4F1FA48];
  *((void *)this + 17OZDocument::~OZDocument(this - 1) = *((void *)v4 + 2);
  long long v5 = *v4;
  *((_OWORD *)this + 86) = *v4;
  uint64_t v6 = *((void *)v4 + 2);
  *((void *)this + 174) = v6;
  *(_OWORD *)((char *)this + 140OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v5;
  *((void *)this + 177) = v6;
  *((_OWORD *)this + 89) = v5;
  *((void *)this + 18OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v6;
  *(_OWORD *)((char *)this + 1448) = v5;
  *((void *)this + 183) = v6;
  *((_OWORD *)this + 92) = v5;
  *((void *)this + 186) = v6;
  *((_DWORD *)this + 374) = 0;
  *((unsigned char *)this + 150OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  OZGuideSet::OZGuideSet((OZScene *)((char *)this + 1512));
  *((void *)this + 196) = 0;
  *((_OWORD *)this + 97) = 0u;
  *(_WORD *)((char *)this + 1577) = 256;
  *((void *)this + 198) = a2;
  PCWorkingColorVector::PCWorkingColorVector((OZScene *)((char *)this + 1596));
  PCMutex::PCMutex((PCMutex *)((char *)this + 1616));
  *((void *)this + 213) = 0;
  *((void *)this + 212) = 0;
  *((void *)this + 21OZDocument::~OZDocument(this - 1) = (char *)this + 1696;
  *((_DWORD *)this + 428) = 0;
  *((void *)this + 215) = (char *)this + 1720;
  *((void *)this + 216) = (char *)this + 1720;
  *((void *)this + 217) = 0;
  *((void *)this + 22OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((void *)this + 219) = 0;
  *((void *)this + 218) = (char *)this + 1752;
  *((unsigned char *)this + 1776) = 0;
  *((_DWORD *)this + 445) = 2;
  *((void *)this + 223) = 0;
  *((void *)this + 225) = 0;
  *((void *)this + 224) = 0;
  *((unsigned char *)this + 1809) = 0;
  uint64_t v7 = (OZPreferenceManager *)PCRenderModel::PCRenderModel((char *)this + 1816, 0);
  *((_WORD *)this + 924) = 0;
  *((void *)this + 193) = 0;
  *((unsigned char *)this + 1576) = 0;
  *((_WORD *)this + 789) = 0;
  *((void *)this + 188) = 0;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *((void *)this + 232) = 0;
  *((void *)this + 234) = 0;
  *((void *)this + 233) = 0;
  *(_OWORD *)((char *)this + 1176) = *v4;
  *((void *)this + 149) = *((void *)v4 + 2);
  *((_DWORD *)this + 398) = 0;
  *((_DWORD *)this + 443) = 0;
  atomic_store(0, (unsigned __int8 *)this + 1808);
  if (!*(unsigned char *)(theApp + 80))
  {
    uint64_t v8 = (OZPreferenceManager *)OZPreferenceManager::Instance(v7);
    RecordWhilePlaybacuint64_t k = (OZPreferenceManager *)OZPreferenceManager::getRecordWhilePlayback(v8);
    if (RecordWhilePlayback) {
      *((_DWORD *)this + 398) |= 1u;
    }
    CMTime v10 = (OZPreferenceManager *)OZPreferenceManager::Instance(RecordWhilePlayback);
    RecordingOptions = (OZPreferenceManager *)OZPreferenceManager::getRecordingOptions(v10);
    if (RecordingOptions)
    {
      CMTime v12 = (OZPreferenceManager *)OZPreferenceManager::Instance(RecordingOptions);
      double v13 = (OZPreferenceManager *)OZPreferenceManager::getRecordingOptions(v12);
      if (v13 == 1)
      {
        int v14 = 2;
      }
      else
      {
        CMTime v15 = (OZPreferenceManager *)OZPreferenceManager::Instance(v13);
        if (OZPreferenceManager::getRecordingOptions(v15) != 2) {
          goto LABEL_10;
        }
        int v14 = 4;
      }
      *((_DWORD *)this + 398) = *((_DWORD *)this + 398) & 0xFFFFFFF9 | v14;
    }
  }
LABEL_10:
  operator new();
}

void sub_1B7C14AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PCSpinLock *a9, uint64_t a10, void **a11, OZPublishSettings *a12, OZExportSettings *a13, PCString *a14, std::mutex *a15, PCMutex *a16, std::mutex *a17, PCString a18)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v21 + 1832));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v21 + 1824));
  double v27 = *(void **)(v21 + 1784);
  if (v27)
  {
    *(void *)(v21 + 1792) = v27;
    operator delete(v27);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v21 + 1744, *v22);
  std::__list_imp<unsigned int>::clear(v18);
  PCSpinLock::~PCSpinLock((PCSpinLock *)(v21 + 1712));
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(v21 + 1688, *v20);
  PCMutex::~PCMutex(v25);
  double v28 = *(void **)(v21 + 1552);
  if (v28)
  {
    *(void *)(v21 + 156OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v28;
    operator delete(v28);
  }
  std::__tree<OZGuide>::destroy(v21 + 1520, *(void **)(v21 + 1528));
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v21 + 1296);
  PCSpinLock::~PCSpinLock((PCSpinLock *)(v21 + 1288));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v21 + 1264, *v19);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v21 + 1240, *a11);
  std::__list_imp<unsigned int>::clear(v24);
  OZChannelObjectRoot::~OZChannelObjectRoot(v23);
  OZPublishSettings::~OZPublishSettings(a12);
  OZExportSettings::~OZExportSettings(a13);
  OZSceneSettings::~OZSceneSettings(a14);
  PCSharedMutex::~PCSharedMutex(a15);
  PCMutex::~PCMutex(a16);
  PCSharedMutex::~PCSharedMutex(a17);
  _Unwind_Resume(a1);
}

uint64_t OZScene::setFlag(uint64_t this, int a2)
{
  *(_DWORD *)(this + 1592) |= a2;
  return this;
}

void *OZScene::addRootNode(OZScene *this, OZSceneNode *a2)
{
  __n128 result = OZScene::getNode(this, *((_DWORD *)a2 + 20));
  if (!result)
  {
    uint64_t v5 = *(void *)(*((void *)this + 151) + 16);
    if (v5
      && (unint64_t v6 = *(void *)(v5 + 8),
          long long v10 = xmmword_1B837FE80,
          OZFactory::isKindOfClass(v6, (int32x4_t *)&v10)))
    {
      return OZScene::addRootNodeAfter(this, a2, *(OZSceneNode **)(*((void *)this + 151) + 16));
    }
    else
    {
      uint64_t v7 = operator new(0x18uLL);
      uint64_t v8 = (void *)*((void *)this + 151);
      *uint64_t v7 = (char *)this + 1200;
      v7[1] = v8;
      v7[2] = a2;
      *uint64_t v8 = v7;
      *((void *)this + 15OZDocument::~OZDocument(this - 1) = v7;
      ++*((void *)this + 152);
      uint64_t v9 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
      OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 920), v9);
      OZScene::registerNode(this, a2);
      return (void *)OZScene::addAllDependencies((uint64_t)this, a2);
    }
  }
  return result;
}

uint64_t OZSceneList::instance(OZSceneList *this)
{
}

void sub_1B7C14DAC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40A64E3564);
  _Unwind_Resume(a1);
}

uint64_t OZSceneList::addScene(uint64_t **this, OZScene *a2)
{
  uint64_t v5 = a2;
  uint64_t v3 = (PCMutex *)(this + 1);
  PCMutex::lock((PCMutex *)(this + 1));
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(this + 10, (unint64_t *)&v5, (uint64_t *)&v5);
  return PCMutex::unlock(v3);
}

void sub_1B7C14E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZScene::OZScene(OZScene *this, const OZScene *a2, OZDocument *a3)
{
  *(void *)this = &unk_1F10A7F98;
  *((void *)this + OZDocument::~OZDocument(this - 1) = &unk_1F113BEF8;
  PCWorkingColorVector::PCWorkingColorVector((OZScene *)((char *)this + 16));
  *(void *)this = &unk_1F11425B8;
  *((void *)this + OZDocument::~OZDocument(this - 1) = &unk_1F1142660;
  *((_DWORD *)this + 8) = -1;
  PCSharedMutex::PCSharedMutex((OZScene *)((char *)this + 40));
  PCMutex::PCMutex((PCMutex *)((char *)this + 160));
  PCSharedMutex::PCSharedMutex((OZScene *)((char *)this + 232));
  OZSceneSettings::OZSceneSettings((OZScene *)((char *)this + 336), (const OZScene *)((char *)a2 + 336));
  OZExportSettings::OZExportSettings((OZScene *)((char *)this + 640));
  OZPublishSettings::OZPublishSettings((OZScene *)((char *)this + 720), (const OZScene *)((char *)a2 + 720), this);
  OZChannelObjectRoot::OZChannelObjectRoot((OZScene *)((char *)this + 920), (const OZScene *)((char *)a2 + 920), 0);
  *((void *)this + 15OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = (char *)this + 1200;
  *((void *)this + 15OZDocument::~OZDocument(this - 1) = (char *)this + 1200;
  *((void *)this + 152) = 0;
  *((void *)this + 157) = 0;
  *((void *)this + 156) = 0;
  *((void *)this + 155) = (char *)this + 1248;
  *((void *)this + 16OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((void *)this + 159) = 0;
  *((void *)this + 158) = (char *)this + 1272;
  *((_DWORD *)this + 322) = 0;
  *((_OWORD *)this + 8OZDocument::~OZDocument(this - 1) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_DWORD *)this + 332) = 1065353216;
  *((_DWORD *)this + 334) = 0;
  *((void *)this + 168) = 0;
  long long v6 = *(_OWORD *)((char *)a2 + 1352);
  *((void *)this + 17OZDocument::~OZDocument(this - 1) = *((void *)a2 + 171);
  *(_OWORD *)((char *)this + 1352) = v6;
  long long v7 = *((_OWORD *)a2 + 86);
  *((void *)this + 174) = *((void *)a2 + 174);
  *((_OWORD *)this + 86) = v7;
  long long v8 = *(_OWORD *)((char *)a2 + 1400);
  *((void *)this + 177) = *((void *)a2 + 177);
  *(_OWORD *)((char *)this + 140OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v8;
  long long v9 = *((_OWORD *)a2 + 89);
  *((void *)this + 18OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *((void *)a2 + 180);
  *((_OWORD *)this + 89) = v9;
  uint64_t v10 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)((char *)this + 1448) = *MEMORY[0x1E4F1FA48];
  *((void *)this + 183) = *(void *)(v10 + 16);
  *((_OWORD *)this + 92) = *(_OWORD *)v10;
  *((void *)this + 186) = *(void *)(v10 + 16);
  *((_DWORD *)this + 374) = *((_DWORD *)a2 + 374);
  *((unsigned char *)this + 150OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *((unsigned char *)a2 + 1500);
  OZGuideSet::OZGuideSet((OZScene *)((char *)this + 1512));
  *((void *)this + 196) = 0;
  *((_OWORD *)this + 97) = 0u;
  *(_WORD *)((char *)this + 1577) = 256;
  *((void *)this + 198) = a3;
  PCWorkingColorVector::PCWorkingColorVector((OZScene *)((char *)this + 1596));
  PCMutex::PCMutex((PCMutex *)((char *)this + 1616));
  *((void *)this + 213) = 0;
  *((void *)this + 212) = 0;
  *((void *)this + 21OZDocument::~OZDocument(this - 1) = (char *)this + 1696;
  *((_DWORD *)this + 428) = 0;
  *((void *)this + 215) = (char *)this + 1720;
  *((void *)this + 216) = (char *)this + 1720;
  *((void *)this + 217) = 0;
  *((void *)this + 22OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((void *)this + 219) = 0;
  *((void *)this + 218) = (char *)this + 1752;
  unsigned __int8 v11 = atomic_load((unsigned __int8 *)a2 + 1776);
  *((unsigned char *)this + 1776) = v11 & 1;
  *((_DWORD *)this + 445) = *((_DWORD *)a2 + 445);
  *((void *)this + 224) = 0;
  *((void *)this + 225) = 0;
  *((void *)this + 223) = 0;
  *((unsigned char *)this + 1809) = 0;
  PCRenderModel::PCRenderModel((OZScene *)((char *)this + 1816), (const OZScene *)((char *)a2 + 1816));
  unsigned int v13 = 0;
  *((_WORD *)this + 924) = 0;
  *((void *)this + 193) = 0;
  *((unsigned char *)this + 1576) = 0;
  *((unsigned char *)this + 1579) = 0;
  *((void *)this + 188) = 0;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *((void *)this + 232) = 0;
  *((void *)this + 234) = 0;
  *((void *)this + 233) = 0;
  *(_OWORD *)((char *)this + 1176) = *(_OWORD *)v10;
  *((void *)this + 149) = *(void *)(v10 + 16);
  *((_DWORD *)this + 398) = 0;
  *((_DWORD *)this + 443) = *((_DWORD *)a2 + 443);
  atomic_store(0, (unsigned __int8 *)this + 1808);
  if (!*(unsigned char *)(theApp + 80))
  {
    int v14 = (OZPreferenceManager *)OZPreferenceManager::Instance(v12);
    RecordWhilePlaybacuint64_t k = (OZPreferenceManager *)OZPreferenceManager::getRecordWhilePlayback(v14);
    if (RecordWhilePlayback) {
      *((_DWORD *)this + 398) |= 1u;
    }
    PCString v16 = (OZPreferenceManager *)OZPreferenceManager::Instance(RecordWhilePlayback);
    RecordingOptions = (OZPreferenceManager *)OZPreferenceManager::getRecordingOptions(v16);
    if (RecordingOptions)
    {
      CMTimeEpoch v18 = (OZPreferenceManager *)OZPreferenceManager::Instance(RecordingOptions);
      CMTime v19 = (OZPreferenceManager *)OZPreferenceManager::getRecordingOptions(v18);
      if (v19 == 1)
      {
        unsigned int v13 = *((_DWORD *)this + 398) & 0xFFFFFFF9 | 2;
LABEL_10:
        *((_DWORD *)this + 398) = v13;
        goto LABEL_11;
      }
      CMTime v20 = (OZPreferenceManager *)OZPreferenceManager::Instance(v19);
      int v21 = OZPreferenceManager::getRecordingOptions(v20);
      unsigned int v13 = *((_DWORD *)this + 398);
      if (v21 == 2)
      {
        unsigned int v13 = v13 & 0xFFFFFFF9 | 4;
        goto LABEL_10;
      }
    }
    else
    {
      unsigned int v13 = *((_DWORD *)this + 398);
    }
  }
LABEL_11:
  *((_DWORD *)this + 398) = v13 | *((_DWORD *)a2 + 398) & 0xFFFFFE68;
  *((unsigned char *)this + 1768) = 0;
  PCURL::PCURL((PCURL *)&v28, @"Project Node Name");
  unsigned int NextUniqueID = (const PCString *)OZChannelBase::getNextUniqueID(v22);
  PCColor v24 = (OZSceneNode *)OZProjectNode::create((OZProjectNode *)&v28, NextUniqueID);
  PCString::~PCString(&v28);
  double v25 = (OZSceneList *)OZScene::addRootNode(this, v24);
  double v26 = (uint64_t **)OZSceneList::instance(v25);
  OZSceneList::addScene(v26, this);
  *((unsigned char *)this + 152) = 1;
  *((_DWORD *)this + 36) = 0;
  OZChannelBase::setRangeName((OZChannelBase *)this, v27);
}

void sub_1B7C15268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PCSpinLock *a9, uint64_t a10, OZChannelObjectRoot *a11, OZPublishSettings *a12, OZExportSettings *a13, PCString *a14, std::mutex *a15, PCMutex *a16, std::mutex *a17, PCString a18)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v21 + 1832));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v21 + 1824));
  double v27 = *(void **)(v21 + 1784);
  if (v27)
  {
    *(void *)(v21 + 1792) = v27;
    operator delete(v27);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v21 + 1744, *v23);
  std::__list_imp<unsigned int>::clear(v18);
  PCSpinLock::~PCSpinLock((PCSpinLock *)(v21 + 1712));
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy(v21 + 1688, *v22);
  PCMutex::~PCMutex(v25);
  PCString v28 = *(void **)(v21 + 1552);
  if (v28)
  {
    *(void *)(v21 + 156OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v28;
    operator delete(v28);
  }
  std::__tree<OZGuide>::destroy(v21 + 1520, *(void **)(v21 + 1528));
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v21 + 1296);
  PCSpinLock::~PCSpinLock((PCSpinLock *)(v21 + 1288));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v21 + 1264, *v20);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v21 + 1240, *v19);
  std::__list_imp<unsigned int>::clear(v24);
  OZChannelObjectRoot::~OZChannelObjectRoot(a11);
  OZPublishSettings::~OZPublishSettings(a12);
  OZExportSettings::~OZExportSettings(a13);
  OZSceneSettings::~OZSceneSettings(a14);
  PCSharedMutex::~PCSharedMutex(a15);
  PCMutex::~PCMutex(a16);
  PCSharedMutex::~PCSharedMutex(a17);
  _Unwind_Resume(a1);
}

void OZScene::~OZScene(OZScene *this)
{
  *(void *)this = &unk_1F11425B8;
  *((void *)this + OZDocument::~OZDocument(this - 1) = &unk_1F1142660;
  *((unsigned char *)this + 1848) = 1;
  *((unsigned char *)this + 1578) = 0;
  uint64_t v2 = (OZSceneList *)OZSceneList::instance(this);
  OZSceneList::removeScene(v2, this);
  OZScene::clearLockingGroups(this);
  uint64_t v3 = (OZRenderManager *)*((void *)this + 188);
  if (v3)
  {
    OZRenderManager::~OZRenderManager(v3);
    MEMORY[0x1BA9BFBA0]();
    *((void *)this + 188) = 0;
  }
  while (1)
  {
    uint64_t v7 = *((void *)this + 152);
    if (!v7) {
      break;
    }
    uint64_t v4 = (uint64_t *)*((void *)this + 151);
    uint64_t v5 = (OZSceneNode *)v4[2];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = v4[1];
    *(void *)v4[1] = v6;
    *((void *)this + 152) = v7 - 1;
    operator delete(v4);
    OZScene::unregisterNode(this, v5);
    OZScene::removeAllDependencies(this, v5);
    if (v5) {
      (*(void (**)(OZSceneNode *))(*(void *)v5 + 8))(v5);
    }
  }
  long long v8 = (uint64_t **)((char *)this + 1264);
  while (*((void *)this + 160))
  {
    long long v9 = *v8;
    uint64_t v10 = (*v8)[5];
    std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)this + 158, *v8);
    operator delete(v9);
    if (v10)
    {
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v10, *(void **)(v10 + 8));
      MEMORY[0x1BA9BFBA0](v10, 0x1020C4062D53EE8);
    }
  }
  OZScene::destroyObjectiveCClasses((id *)this);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 229);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 228);
  unsigned __int8 v11 = (void *)*((void *)this + 223);
  if (v11)
  {
    *((void *)this + 224) = v11;
    operator delete(v11);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1744, *((void **)this + 219));
  std::__list_imp<unsigned int>::clear((void *)this + 215);
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 428);
  std::__tree<std::__value_type<PCHash128,LiTextureStoreToken>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,LiTextureStoreToken>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,LiTextureStoreToken>>>::destroy((uint64_t)this + 1688, *((void **)this + 212));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 1616));
  CMTime v12 = (void *)*((void *)this + 194);
  if (v12)
  {
    *((void *)this + 195) = v12;
    operator delete(v12);
  }
  std::__tree<OZGuide>::destroy((uint64_t)this + 1520, *((void **)this + 191));
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)this + 1296);
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 322);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1264, *((void **)this + 159));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 1240, *((void **)this + 156));
  std::__list_imp<unsigned int>::clear((void *)this + 150);
  OZChannelObjectRoot::~OZChannelObjectRoot((OZScene *)((char *)this + 920));
  OZPublishSettings::~OZPublishSettings((OZScene *)((char *)this + 720));
  OZExportSettings::~OZExportSettings((OZScene *)((char *)this + 640));
  *((void *)this + 42) = &unk_1F113E428;
  PCString::~PCString((PCString *)this + 65);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 58);
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 232));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 160));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 40));
}

{
  uint64_t vars8;

  OZScene::~OZScene(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZSceneList::removeScene(OZSceneList *this, OZScene *a2)
{
  uint64_t v5 = a2;
  uint64_t v3 = (PCMutex *)((char *)this + 8);
  PCMutex::lock((PCMutex *)((char *)this + 8));
  std::__tree<OZLocking *>::__erase_unique<OZLocking *>((uint64_t)this + 80, (unint64_t *)&v5);
  return PCMutex::unlock(v3);
}

void sub_1B7C156B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZScene::clearLockingGroups(OZScene *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 40);
  PCSharedMutex::lock((std::mutex *)((char *)this + 40));
  uint64_t v3 = (OZLockingGroup **)*((void *)this + 223);
  uint64_t v4 = (OZLockingGroup **)*((void *)this + 224);
  if (v3 != v4)
  {
    do
    {
      if (*v3)
      {
        OZLockingGroup::~OZLockingGroup(*v3);
        MEMORY[0x1BA9BFBA0]();
      }
      ++v3;
    }
    while (v3 != v4);
    uint64_t v3 = (OZLockingGroup **)*((void *)this + 223);
  }
  *((void *)this + 224) = v3;
  uint64_t v5 = *((void *)this + 151);
  memset(v16, 0, sizeof(v16));
  int v17 = 1065353216;
  v14[0] = v5;
  v14[1] = v5;
  unsigned int v14[2] = (char *)this + 1200;
  char v15 = 0;
  memset(v12, 0, sizeof(v12));
  int v13 = 1065353216;
  while ((OZScene *)v14[0] != (OZScene *)((char *)this + 1200))
  {
    uint64_t v6 = *(void **)(v14[0] + 16);
    if (v7) {
      OZLocking::reset(v7);
    }
    long long v8 = v6 + 125;
    for (uint64_t i = (void *)v6[126]; i != v8; uint64_t i = (void *)i[1])
    {
      uint64_t v10 = (const void *)i[2];
      if (v10)
      {
        if (v11) {
          OZLocking::reset(v11);
        }
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v14);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v12);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v16);
  PCSharedMutex::unlock(v2);
}

void sub_1B7C1589C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

OZObjectManipulator ***OZScene::unregisterNode(OZScene *this, OZSceneNode *a2)
{
  (*(void (**)(OZSceneNode *, OZScene *))(*(void *)a2 + 872))(a2, this);
  if (OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, *((_DWORD *)a2 + 20)))
  {
    unint64_t v4 = *(void *)((*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 664))(a2) + 8);
    long long v25 = xmmword_1B7E78220;
    if (OZFactory::isKindOfClass(v4, (int32x4_t *)&v25))
    {
      if ((*(unsigned int (**)(OZSceneNode *))(*(void *)a2 + 248))(a2)
        && (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 664))(a2))
      {
        --*((_DWORD *)this + 443);
      }
    }
  }
  OZScene::OZNodeMap::removeNode((os_unfair_lock_s *)this + 322, (OZSceneNode *)((char *)a2 + 16));
  uint64_t v5 = (char *)*((void *)this + 159);
  if (v5)
  {
    unsigned int v6 = *((_DWORD *)a2 + 20);
    uint64_t v7 = (char *)this + 1272;
    do
    {
      unsigned int v8 = *((_DWORD *)v5 + 8);
      BOOL v9 = v8 >= v6;
      if (v8 >= v6) {
        uint64_t v10 = (char **)v5;
      }
      else {
        uint64_t v10 = (char **)(v5 + 8);
      }
      if (v9) {
        uint64_t v7 = v5;
      }
      uint64_t v5 = *v10;
    }
    while (*v10);
    if (v7 != (char *)this + 1272 && v6 >= *((_DWORD *)v7 + 8))
    {
      uint64_t v11 = *((void *)v7 + 5);
      std::__tree<unsigned int>::erase((uint64_t **)v11, *(uint64_t **)v11, (uint64_t *)(v11 + 8));
      std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)this + 158, (uint64_t *)v7);
      operator delete(v7);
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v11, *(void **)(v11 + 8));
      MEMORY[0x1BA9BFBA0](v11, 0x1020C4062D53EE8);
    }
  }
  for (uint64_t i = (void *)*((void *)a2 + 123); i != (void *)((char *)a2 + 976); uint64_t i = (void *)i[1])
  {
    uint64_t v13 = i[2];
    if (v13) {
      int v14 = (OZObjectManipulator *)(v13 + 48);
    }
    else {
      int v14 = 0;
    }
    OZScene::unregisterObject(this, v14);
  }
  for (uint64_t j = (void *)*((void *)a2 + 126); j != (void *)((char *)a2 + 1000); uint64_t j = (void *)j[1])
  {
    uint64_t v16 = j[2];
    if (v16) {
      int v17 = (OZObjectManipulator *)(v16 + 16);
    }
    else {
      int v17 = 0;
    }
    OZScene::unregisterObject(this, v17);
  }
  if ((*(unsigned int (**)(OZSceneNode *))(*(void *)a2 + 1056))(a2))
  {
    uint64_t v18 = (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 1104))(a2);
    for (uint64_t k = (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 1112))(a2);
          v18 != k;
          uint64_t k = (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 1112))(a2))
    {
      CMTime v20 = *(OZSceneNode **)(v18 + 16);
      OZScene::unregisterNode(this, v20);
      OZScene::removeAllDependencies(this, v20);
      uint64_t v18 = *(void *)(v18 + 8);
    }
  }
  if ((*(unsigned int (**)(OZSceneNode *))(*(void *)a2 + 960))(a2))
  {
    uint64_t v21 = (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 1032))(a2);
    uint64_t v22 = (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 1024))(a2);
    if (v22 != v21)
    {
      uint64_t v23 = v22;
      do
      {
        OZScene::unregisterNode(this, *(OZSceneNode **)(v23 + 16));
        uint64_t v23 = *(void *)(v23 + 8);
      }
      while (v23 != v21);
    }
  }
  if (*((unsigned char *)this + 1578)) {
    atomic_store(1u, (unsigned __int8 *)this + 1808);
  }
  if (*((OZSceneNode **)this + 153) == a2)
  {
    OZScene::clearSelection(this);
    *((void *)this + 153) = 0;
  }
  if (*((OZSceneNode **)this + 154) == a2) {
    *((void *)this + 154) = 0;
  }
  return OZScene::removeObjectFromLoadObjectsWithDuplicateIDs((OZObjectManipulator ***)this, (OZSceneNode *)((char *)a2 + 16));
}

OZScene *OZScene::removeAllDependencies(OZScene *this, OZSceneNode *a2)
{
  if (a2)
  {
    uint64_t v3 = this;
    OZScene::removeAllDependencies(this, *((_DWORD *)a2 + 20));
    unint64_t v4 = (OZChannelFolder *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
    unsigned int v5 = *((_DWORD *)a2 + 20);
    return OZScene::removeAllDependencies(v3, v4, v5);
  }
  return this;
}

void non-virtual thunk to'OZScene::~OZScene(OZScene *this)
{
}

{
  uint64_t vars8;

  OZScene::~OZScene((OZScene *)((char *)this - 8));

  JUMPOUT(0x1BA9BFBA0);
}

double OZScene::getTimeForFrame@<D0>(OZScene *this@<X0>, double a2@<D0>, __n128 *a3@<X8>)
{
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  OZSceneSettings::getFrameDuration((OZScene *)((char *)this + 336), a3);
  double result = (double)a3->n128_i64[0] * a2;
  a3->n128_u64[0] = (uint64_t)result;
  return result;
}

__n128 OZScene::getSceneSettings(OZScene *this, OZExportSettings *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 198) + 8 * *(int *)(*(void *)(*((void *)this + 198) + 224) + 12) + 192);
  *((_DWORD *)a2 + 4) = *(_DWORD *)(v3 + 32);
  *((unsigned char *)a2 + 32) = 1;
  OZExportSettings::setRenderQuality((uint64_t)a2, *(_DWORD *)(v3 + 64));
  *((_DWORD *)a2 + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *(_DWORD *)(v3 + 68);
  *((unsigned char *)a2 + 44) = *(unsigned char *)(v3 + 72);
  *(_WORD *)((char *)a2 + 45) = *(_WORD *)(v3 + 73);
  *((void *)a2 + 6) = 0x200000002;
  int v4 = *(_DWORD *)(v3 + 240);
  *((_DWORD *)a2 + 14) = 2;
  *((_DWORD *)a2 + 15) = v4;
  result.n128_u64[0] = 0x200000002;
  result.n128_u64[1] = 0x200000002;
  *((__n128 *)a2 + 4) = result;
  return result;
}

uint64_t OZScene::isChannelPublished(OZScene *this, OZChannelBase *a2)
{
  return OZPublishSettings::isChannelPublished((OZScene *)((char *)this + 720), a2);
}

void *OZScene::getNode(OZScene *this, unsigned int a2)
{
  __n128 result = (void *)OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, a2);
  if (result)
  {
  }
  return result;
}

float64x2_t OZScene::getSceneBounds(uint64_t a1, float64x2_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 344);
    v3.i64[0] = (int)v2;
    v3.i64[1] = SHIDWORD(v2);
    float64x2_t result = vcvtq_f64_s64(v3);
    __asm { FMOV            V1.2D, #-0.5 }
    *a2 = vmulq_f64(result, _Q1);
    a2[1] = result;
  }
  return result;
}

void OZScene::setTimeRange(OZScene *this, const PCTimeRange *a2)
{
  if ((OZScene *)((char *)this + 1352) != a2)
  {
    long long v4 = *(_OWORD *)a2;
    *((void *)this + 17OZDocument::~OZDocument(this - 1) = *((void *)a2 + 2);
    *(_OWORD *)((char *)this + 1352) = v4;
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    *((void *)this + 174) = *((void *)a2 + 5);
    *((_OWORD *)this + 86) = v5;
  }
  if (*((double *)this + 46) <= 0.0) {
    goto LABEL_8;
  }
  if ((*((_DWORD *)a2 + 9) & 0x1D) != 1
    || (OZSceneSettings::getFrameDuration((OZScene *)((char *)this + 336), &v9), (v9.n128_u8[12] & 0x1D) != 1))
  {
    puts("OZScene::setTimeRange range is not numeric, setting num frames to 1.");
LABEL_8:
    unsigned int Seconds = 1;
    goto LABEL_9;
  }
  __n128 v9 = *(__n128 *)((char *)a2 + 24);
  uint64_t v10 = *((void *)a2 + 5);
  OZSceneSettings::getFrameDuration((OZScene *)((char *)this + 336), &v7);
  operator/((long long *)&v9, (uint64_t)&v7, (uint64_t)&time);
  unsigned int Seconds = CMTimeGetSeconds(&time);
LABEL_9:
  *((_DWORD *)this + 88) = Seconds;
}

uint64_t OZScene::getPlayRange(OZScene *this)
{
  if (*((_DWORD *)this + 8) == -1) {
    return (uint64_t)this + 1400;
  }
  else {
    return (uint64_t)this + 1448;
  }
}

__n128 OZScene::setPlayRange(__n128 *this, const PCTimeRange *a2)
{
  if (this[2].n128_u32[0] == -1)
  {
    if (&this[87].n128_i8[8] != (__int8 *)a2)
    {
      __n128 v4 = *(__n128 *)a2;
      this[88].n128_u64[1] = *((void *)a2 + 2);
      *(__n128 *)((char *)this + 140OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v4;
      __n128 result = *(__n128 *)((char *)a2 + 24);
      this[90].n128_u64[0] = *((void *)a2 + 5);
      this[89] = result;
    }
  }
  else if (&this[90].n128_i8[8] != (__int8 *)a2)
  {
    __n128 v2 = *(__n128 *)a2;
    this[91].n128_u64[1] = *((void *)a2 + 2);
    *(__n128 *)((char *)this + 1448) = v2;
    __n128 result = *(__n128 *)((char *)a2 + 24);
    this[93].n128_u64[0] = *((void *)a2 + 5);
    this[92] = result;
  }
  return result;
}

__n128 OZScene::getCurrentTime@<Q0>(OZScene *this@<X0>, __n128 *a2@<X8>)
{
  a2[1].n128_u64[0] = *((void *)this + 149);
  __n128 result = *(__n128 *)((char *)this + 1176);
  *a2 = result;
  return result;
}

uint64_t OZScene::setTargetDisplayAspectRatio(uint64_t this, double a2, int a3, BOOL *a4)
{
  int v5 = *(_DWORD *)(this + 344);
  double v6 = *(double *)(this + 384);
  double v7 = (float)*(int *)(this + 348);
  double v8 = v6 * (float)v5 / v7;
  if (vabdd_f64(a2, v8) >= 0.0000001)
  {
    unsigned int v9 = vcvtmd_s64_f64(v7 * a2 / v6 + 0.5 + 0.0000001);
    if (v5 == v9)
    {
      if (a4) {
        goto LABEL_3;
      }
      return this;
    }
    if (a4) {
      *a4 = 1;
    }
    if (*(unsigned char *)(this + 568))
    {
      if (*(_DWORD *)(this + 572) != v9)
      {
LABEL_14:
        *(_DWORD *)(this + 344) = v9;
        return OZScene::targetDisplayAspectRatioHasChanged((OZScene *)this, v8, a2, a3);
      }
      char v10 = 0;
    }
    else
    {
      *(_DWORD *)(this + 572) = v5;
      char v10 = 1;
    }
    *(unsigned char *)(this + 568) = v10;
    goto LABEL_14;
  }
  if (a4) {
LABEL_3:
  }
    *a4 = 0;
  return this;
}

uint64_t OZScene::targetDisplayAspectRatioHasChanged(OZScene *this, double a2, double a3, int a4)
{
  memset(v33, 0, sizeof(v33));
  memset(v32, 0, 24);
  int v34 = 1065353216;
  memset(v30, 0, sizeof(v30));
  memset(v29, 0, 24);
  int v31 = 1065353216;
  OZScene::begin_t<OZImageElement,false,true>((uint64_t *)this, (uint64_t)v25);
  *(_OWORD *)uint64_t v32 = *(_OWORD *)v25;
  *(_OWORD *)&v32[9] = *(_OWORD *)&v25[9];
  int v34 = v28;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v33, (__n128 *)v27, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v26);
  uint64_t v8 = *((void *)this + 151);
  long long v26 = 0u;
  long long v27 = 0u;
  int v28 = 1065353216;
  *(void *)long long v25 = (char *)this + 1200;
  *(void *)&v25[8] = v8;
  *(void *)&v25[16] = (char *)this + 1200;
  v25[24] = 0;
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v25;
  *(_OWORD *)&v29[9] = *(_OWORD *)&v25[9];
  int v31 = 1065353216;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v30, 0, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v26);
  while (*(void *)v32 != *(void *)v29)
  {
    if (*(void *)v32 == *(void *)&v32[16] || (unsigned int v9 = *(const void **)(*(void *)v32 + 16)) == 0) {
      char v10 = 0;
    }
    else {
    if ((OZImageElement::isInputSource(v10) & 1) != 0
      || OZImageElement::isPassthroughPlaceholder(v10)
      || OZImageElement::isBackgroundDropZone(v10) && OZImageElement::useDisplayAspect(v10)
      || OZImageElement::resizeToMatchInputSource(v10))
    {
      OZImageElement::resetFitModeToSceneDims(v10, a2, a3);
    }
    OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)v32);
  }
  long long v26 = 0u;
  long long v27 = 0u;
  memset(v23, 0, sizeof(v23));
  memset(v22, 0, 24);
  int v24 = 1065353216;
  uint64_t v11 = *((void *)this + 151);
  long long v19 = 0u;
  long long v20 = 0u;
  int v21 = 1065353216;
  *(void *)uint64_t v18 = v11;
  *(void *)&void v18[8] = v11;
  *(void *)&unsigned char v18[16] = (char *)this + 1200;
  v18[24] = 0;
  *(_OWORD *)&v25[9] = *(_OWORD *)&v18[9];
  *(_OWORD *)long long v25 = *(_OWORD *)v18;
  int v28 = 1065353216;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(&v26, 0, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v19);
  uint64_t v12 = *((void *)this + 151);
  long long v19 = 0u;
  long long v20 = 0u;
  int v21 = 1065353216;
  *(void *)uint64_t v18 = (char *)this + 1200;
  *(void *)&void v18[8] = v12;
  *(void *)&unsigned char v18[16] = (char *)this + 1200;
  v18[24] = 0;
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v18;
  *(_OWORD *)&v22[9] = *(_OWORD *)&v18[9];
  int v24 = 1065353216;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v23, 0, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v19);
  while (*(void *)v25 != *(void *)v22)
  {
    (*(void (**)(void))(**(void **)(*(void *)v25 + 16) + 912))(*(void *)(*(void *)v25 + 16));
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v25);
  }
  long long v19 = 0u;
  long long v20 = 0u;
  memset(v18, 0, 24);
  int v21 = 1065353216;
  OZScene::begin_t<OZProjectNode,false,true>((uint64_t *)this, (uint64_t)v15);
  *(_OWORD *)uint64_t v18 = v15[0];
  *(_OWORD *)&v18[9] = *(_OWORD *)((char *)v15 + 9);
  int v21 = v17;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(&v19, v16[2], 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v16);
  OZRigWidgetAspectRatio::setTargetDisplayAspectRatio(v13[136], a3, a4);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v23);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v26);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v30);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v33);
}

void sub_1B7C165A0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::setTargetDisplayAspectRatioWithNativeSize(uint64_t this, double a2, double a3, double a4, int a5)
{
  int v6 = *(_DWORD *)(this + 344);
  double v7 = *(double *)(this + 384);
  int v8 = *(_DWORD *)(this + 348);
  if (a2 <= 1.0) {
    a3 = floor(a2 * a4 / v7 + 0.5 + 0.0000001);
  }
  else {
    a4 = floor(a3 / a2 / v7 + 0.5 + 0.0000001);
  }
  int v9 = (int)a4;
  if (v6 != (int)a3 || v8 != v9)
  {
    *(_DWORD *)(this + 344) = (int)a3;
    *(_DWORD *)(this + 348) = v9;
    return OZScene::targetDisplayAspectRatioHasChanged((OZScene *)this, v7 * (float)v6 / (float)v8, a2, a5);
  }
  return this;
}

uint64_t *OZScene::begin_t<OZImageElement,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7C16770(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    uint64_t v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t *OZScene::begin_t<OZProjectNode,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZProjectNode,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZProjectNode,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7C168D8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::setCurrentObject(OZScene *this, OZSceneNode *a2)
{
  uint64_t result = OZScene::clearSelection(this);
  if (a2) {
    uint64_t result = (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 688))(a2);
  }
  *((void *)this + 153) = a2;
  return result;
}

uint64_t OZScene::clearSelection(OZScene *this)
{
  OZScene::begin_sel(this, (uint64_t)v6);
  memset(v4, 0, sizeof(v4));
  int v5 = 1065353216;
  while ((OZScene *)v6[0] != (OZScene *)((char *)this + 1200))
  {
    (*(void (**)(void))(**(void **)(v6[0] + 16) + 696))(*(void *)(v6[0] + 16));
    OZObject::iterator_t<OZSceneNode,true,true,OZObject::defaultValidator>::operator++(v6);
  }
  uint64_t v2 = *(OZNotificationManager **)(*((void *)this + 198) + 168);
  if (v2) {
    OZNotificationManager::clearLastModifiedChannels(v2);
  }
  *((void *)this + 153) = 0;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v4);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v7);
}

void sub_1B7C16A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v14);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZScene::setActiveLayer(uint64_t result, uint64_t a2)
{
  *(void *)(result + 1232) = a2;
  return result;
}

uint64_t OZScene::begin_all_sel@<X0>(OZScene *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)this + 151);
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 8OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = (char *)this + 1200;
  *(_DWORD *)(a2 + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  for (uint64_t result = OZObject::all_iterator_t<OZObjectManipulator,true,true,OZObject::defaultAllValidator>::typeCheck((uint64_t *)a2);
        (result & 1) == 0;
        uint64_t result = OZObject::all_iterator_t<OZObjectManipulator,true,true,OZObject::defaultAllValidator>::typeCheck((uint64_t *)a2))
  {
    OZObject::all_iterator_t<OZObjectManipulator,true,true,OZObject::defaultAllValidator>::increment((void *)a2);
  }
  return result;
}

void sub_1B7C16ABC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

double OZScene::end_all_sel@<D0>(OZScene *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 151);
  double result = 0.0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 8OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1065353216;
  *(void *)a2 = (char *)this + 1200;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = (char *)this + 1200;
  *(_DWORD *)(a2 + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  return result;
}

OZScene *OZScene::selectObject(OZScene *this, OZObjectManipulator *a2, char a3, char a4)
{
  if (!a2) {
    return this;
  }
  uint64_t v7 = this;
  if ((a3 & 1) == 0) {
    OZScene::clearSelection(this);
  }
  (*(void (**)(OZObjectManipulator *))(*(void *)a2 + 304))(a2);
  if (v8)
  {
    uint64_t v9 = (*(uint64_t (**)(void *))(*(void *)v8 + 320))(v8);
LABEL_8:
    char v10 = (OZChannelFolder *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 640))(v9);
    this = (OZScene *)OZChannelFolder::setFoldFlag(v10, 0x2000);
    goto LABEL_9;
  }
  if (this)
  {
    uint64_t v9 = (*(uint64_t (**)(OZScene *))(*(void *)this + 248))(this);
    goto LABEL_8;
  }
LABEL_9:
  *((void *)v7 + 153) = 0;
  if ((a3 & 1) == 0)
  {
    this = (OZScene *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)a2 + 232))(a2);
    *((void *)v7 + 153) = this;
    if ((a4 & 1) == 0)
    {
      uint64_t v11 = this;
      if (this
      {
LABEL_15:
        *((void *)v7 + 154) = this;
      }
      else
      {
        while (1)
        {
          uint64_t v11 = (OZScene *)*((void *)v11 + 120);
          if (!v11) {
            break;
          }
          if (this) {
            goto LABEL_15;
          }
        }
      }
    }
  }
  return this;
}

void *OZScene::begin_sel@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = this + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if ((void *)v3 != this + 150)
  {
    this = (void *)(*(uint64_t (**)(void))(**(void **)(v3 + 16) + 680))(*(void *)(v3 + 16));
    if (!this || *(void *)a2 == *(void *)(a2 + 16) || !*(void *)(*(void *)a2 + 16)) {
      return OZObject::iterator_t<OZSceneNode,true,true,OZObject::defaultValidator>::operator++((void *)a2);
    }
  }
  return this;
}

void sub_1B7C16E04(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

double OZScene::end_sel@<D0>(OZScene *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 151);
  double result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = (char *)this + 1200;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = (char *)this + 1200;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t OZScene::startCaptureModifiedChannels(OZScene *this, const PCString *a2)
{
  return OZDocument::startCaptureModifiedChannels(*((void *)this + 198), a2);
}

OZChannelBase *OZScene::endCaptureModifiedChannels(OZChannelBase **this, const PCString *a2)
{
  return OZDocument::endCaptureModifiedChannels(this[198], a2);
}

uint64_t OZScene::updateSoloFlag(OZScene *this, OZSceneNode *a2)
{
  memset(v28, 0, sizeof(v28));
  memset(v27, 0, 24);
  int v29 = 1065353216;
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, 24);
  int v26 = 1065353216;
  OZScene::begin_v<OZSceneNode,false,true,OZSoloChildNodeValidator>(this, a2, (uint64_t)v20);
  *(_OWORD *)long long v27 = *(_OWORD *)v20;
  *(_OWORD *)&v27[9] = *(_OWORD *)&v20[9];
  int v29 = v23;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v28, (__n128 *)v22, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v21);
  uint64_t v3 = *((void *)this + 151);
  long long v21 = 0u;
  long long v22 = 0u;
  int v23 = 1065353216;
  *(void *)long long v20 = (char *)this + 1200;
  *(void *)&v20[8] = v3;
  *(void *)&v20[16] = (char *)this + 1200;
  unsigned char v20[24] = 0;
  *(_OWORD *)int v24 = *(_OWORD *)v20;
  *(_OWORD *)&v24[9] = *(_OWORD *)&v20[9];
  int v26 = 1065353216;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v25, 0, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v21);
  while (*(void *)v27 != *(void *)v24)
  {
    if (*(void *)v27 != *(void *)&v27[16])
    {
      uint64_t v5 = *(void *)(*(void *)v27 + 16);
      if (v5)
      {
        int v6 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 640))(v5);
        OZChannelBase::resetFlag(v6, 0x100000, 0);
      }
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZSoloChildNodeValidator>::operator++(v27, v4);
  }
  long long v21 = 0u;
  long long v22 = 0u;
  memset(v20, 0, 24);
  int v23 = 1065353216;
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, 24);
  int v19 = 1065353216;
  OZScene::begin_v<OZSceneNode,false,true,OZSoloNodeValidator>((uint64_t)this, v4, (uint64_t)v13);
  *(_OWORD *)long long v20 = *(_OWORD *)v13;
  *(_OWORD *)&v20[9] = *(_OWORD *)&v13[9];
  int v23 = v16;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(&v21, (__n128 *)v15, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v14);
  uint64_t v7 = *((void *)this + 151);
  long long v14 = 0u;
  long long v15 = 0u;
  int v16 = 1065353216;
  *(void *)uint64_t v13 = (char *)this + 1200;
  *(void *)&unsigned char v13[8] = v7;
  *(void *)&v13[16] = (char *)this + 1200;
  unsigned char v13[24] = 0;
  *(_OWORD *)int v17 = *(_OWORD *)v13;
  *(_OWORD *)&v17[9] = *(_OWORD *)&v13[9];
  int v19 = 1065353216;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v18, 0, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v14);
  int v9 = *((_DWORD *)this + 398);
  if (*(void *)v20 == *(void *)v17)
  {
    *((_DWORD *)this + 398) = v9 & 0xFFFFFFDF;
  }
  else
  {
    *((_DWORD *)this + 398) = v9 | 0x20;
    while (*(void *)v20 != *(void *)v17)
    {
      if (*(void *)v20 != *(void *)&v20[16])
      {
        uint64_t v10 = *(void *)(*(void *)v20 + 16);
        if (v10)
        {
          uint64_t v11 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 640))(v10);
          OZChannelBase::setChildSolo(v11, 1);
        }
      }
      OZObject::iterator_t<OZSceneNode,false,true,OZSoloNodeValidator>::operator++(v20, v8);
    }
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v18);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v21);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v25);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v28);
}

void sub_1B7C17138(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::begin_v<OZSceneNode,false,true,OZSoloNodeValidator>@<X0>(uint64_t result@<X0>, OZSceneNode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(result + 1208);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 1065353216;
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = result + 1200;
  *(unsigned char *)(a3 + 24) = 0;
  if (v4 != result + 1200)
  {
    uint64_t v5 = *(void *)(v4 + 16);
    if (!v5) {
      return (uint64_t)OZObject::iterator_t<OZSceneNode,false,true,OZSoloNodeValidator>::operator++((void *)a3, a2);
    }
    int v6 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 640))(v5);
    double result = OZChannelBase::isSolo(v6);
    if ((result & 1) == 0) {
      return (uint64_t)OZObject::iterator_t<OZSceneNode,false,true,OZSoloNodeValidator>::operator++((void *)a3, a2);
    }
  }
  return result;
}

void sub_1B7C1724C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *OZObject::iterator_t<OZSceneNode,false,true,OZSoloNodeValidator>::operator++(void *a1, OZSceneNode *a2)
{
  for (uint64_t i = a1; ; a1 = i)
  {
    OZObject::iterator_t<OZSceneNode,false,true,OZSoloNodeValidator>::increment(a1, a2);
    if (*i == i[2]) {
      break;
    }
    uint64_t v3 = *(void *)(*i + 16);
    if (v3)
    {
      uint64_t v4 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 640))(v3);
      if (OZChannelBase::isSolo(v4)) {
        break;
      }
    }
  }
  return i;
}

void *OZScene::begin_v<OZSceneNode,false,true,OZSoloChildNodeValidator>@<X0>(void *result@<X0>, OZSceneNode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (void *)result[151];
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 1065353216;
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = result + 150;
  *(unsigned char *)(a3 + 24) = 0;
  if (v4 != result + 150)
  {
    uint64_t v5 = v4[2];
    if (!v5) {
      return OZObject::iterator_t<OZSceneNode,false,true,OZSoloChildNodeValidator>::operator++((void *)a3, a2);
    }
    int v6 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 640))(v5);
    double result = (void *)OZChannelBase::testFlag(v6, 0x100000);
    if ((result & 1) == 0) {
      return OZObject::iterator_t<OZSceneNode,false,true,OZSoloChildNodeValidator>::operator++((void *)a3, a2);
    }
  }
  return result;
}

void sub_1B7C17378(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *OZObject::iterator_t<OZSceneNode,false,true,OZSoloChildNodeValidator>::operator++(void *a1, OZSceneNode *a2)
{
  for (uint64_t i = a1; ; a1 = i)
  {
    OZObject::iterator_t<OZSceneNode,false,true,OZSoloNodeValidator>::increment(a1, a2);
    if (*i == i[2]) {
      break;
    }
    uint64_t v3 = *(void *)(*i + 16);
    if (v3)
    {
      uint64_t v4 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 640))(v3);
      if (OZChannelBase::testFlag(v4, 0x100000)) {
        break;
      }
    }
  }
  return i;
}

void *OZScene::addRootNodeAfter(OZScene *this, OZSceneNode *a2, OZSceneNode *a3)
{
  double result = OZScene::getNode(this, *((_DWORD *)a2 + 20));
  if (!result)
  {
    uint64_t v7 = (char *)*((void *)this + 151);
    if (!a3) {
      a3 = (OZSceneNode *)*((void *)v7 + 2);
    }
    int v8 = (char *)this + 1200;
    if (v7 != (char *)this + 1200)
    {
      while (*((OZSceneNode **)v7 + 2) != a3)
      {
        uint64_t v7 = (char *)*((void *)v7 + 1);
        if (v7 == v8) {
          goto LABEL_10;
        }
      }
    }
    if (v7 != v8)
    {
      int v9 = (uint64_t *)*((void *)v7 + 1);
      uint64_t v10 = operator new(0x18uLL);
      float64x2_t v10[2] = a2;
      uint64_t v11 = *v9;
      *(void *)(v11 + 8) = v10;
      *uint64_t v10 = v11;
      uint64_t *v9 = (uint64_t)v10;
      v10[1] = v9;
      ++*((void *)this + 152);
      uint64_t v12 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a3 + 640))(a3);
      uint64_t v13 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
      OZChannelFolder::insertDescendantAfter((OZChannelFolder *)((char *)this + 920), v12, v13);
    }
LABEL_10:
    OZScene::registerNode(this, a2);
    return (void *)OZScene::addAllDependencies((uint64_t)this, a2);
  }
  return result;
}

void *OZScene::registerNode(OZScene *this, OZSceneNode *a2)
{
  uint64_t v4 = (os_unfair_lock_s *)((char *)this + 1288);
  uint64_t v5 = (OZSceneNode *)OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, *((_DWORD *)a2 + 20));
  int v6 = v5;
  if (*((unsigned char *)this + 1576)) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    goto LABEL_12;
  }
  int v8 = (char *)a2 + 16;
  if (v5 == (OZSceneNode *)((char *)a2 + 16)) {
    goto LABEL_13;
  }
  int v9 = (char **)*((void *)this + 195);
  uint64_t v10 = (char **)*((void *)this + 194);
  if (v10 == v9)
  {
LABEL_10:
    uint64_t v11 = (char **)*((void *)this + 195);
  }
  else
  {
    uint64_t v11 = (char **)*((void *)this + 194);
    uint64_t v12 = v11;
    while (*v12 != v8)
    {
      ++v12;
      ++v11;
      if (v12 == v9) {
        goto LABEL_10;
      }
    }
  }
  if (v9 == v11)
  {
    unint64_t v30 = *((void *)this + 196);
    if ((unint64_t)v9 >= v30)
    {
      uint64_t v32 = v9 - v10;
      if ((unint64_t)(v32 + 1) >> 61) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v33 = v30 - (void)v10;
      uint64_t v34 = v33 >> 2;
      if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
        uint64_t v34 = v32 + 1;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v34;
      }
      if (v35) {
        long long v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 1568, v35);
      }
      else {
        long long v36 = 0;
      }
      uint64_t v37 = (char **)&v36[8 * v32];
      uint64_t v38 = &v36[8 * v35];
      OZWriteOnBehavior_Factory *v37 = v8;
      int v31 = v37 + 1;
      long long v39 = (char *)*((void *)this + 195);
      int v40 = (char *)*((void *)this + 194);
      if (v39 != v40)
      {
        do
        {
          uint64_t v41 = (char *)*((void *)v39 - 1);
          v39 -= 8;
          *--uint64_t v37 = v41;
        }
        while (v39 != v40);
        long long v39 = (char *)*((void *)this + 194);
      }
      *((void *)this + 194) = v37;
      *((void *)this + 195) = v31;
      *((void *)this + 196) = v38;
      if (v39) {
        operator delete(v39);
      }
    }
    else
    {
      uint64_t *v9 = v8;
      int v31 = v9 + 1;
    }
    *((void *)this + 195) = v31;
    if (v6)
    {
LABEL_13:
      if (result) {
        return result;
      }
    }
  }
  else
  {
LABEL_12:
    if (v5) {
      goto LABEL_13;
    }
  }
  if (a2) {
    long long v14 = (OZSceneNode *)((char *)a2 + 16);
  }
  else {
    long long v14 = 0;
  }
  OZScene::OZNodeMap::setNode(v4, v14);
  (*(void (**)(OZSceneNode *, OZScene *))(*(void *)a2 + 280))(a2, this);
  (*(void (**)(OZSceneNode *, OZScene *))(*(void *)a2 + 864))(a2, this);
  unint64_t v15 = *(void *)((*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 664))(a2) + 8);
  *(_OWORD *)int v47 = xmmword_1B7E78220;
  if (OZFactory::isKindOfClass(v15, (int32x4_t *)v47)
    && (*(unsigned int (**)(OZSceneNode *))(*(void *)a2 + 248))(a2)
    && (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 664))(a2))
  {
    ++*((_DWORD *)this + 443);
  }
  for (uint64_t i = (void *)*((void *)a2 + 123); i != (void *)((char *)a2 + 976); uint64_t i = (void *)i[1])
  {
    uint64_t v17 = i[2];
    if (v17) {
      uint64_t v18 = (OZObjectManipulator *)(v17 + 48);
    }
    else {
      uint64_t v18 = 0;
    }
    OZScene::registerObject(this, v18);
  }
  for (uint64_t j = (void *)*((void *)a2 + 126); j != (void *)((char *)a2 + 1000); uint64_t j = (void *)j[1])
  {
    uint64_t v20 = j[2];
    if (v20) {
      long long v21 = (OZObjectManipulator *)(v20 + 16);
    }
    else {
      long long v21 = 0;
    }
    OZScene::registerObject(this, v21);
  }
  if ((*(unsigned int (**)(OZSceneNode *))(*(void *)a2 + 1056))(a2))
  {
    uint64_t v22 = (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 1104))(a2);
    for (uint64_t k = (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 1112))(a2);
          v22 != k;
          uint64_t k = (*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 1112))(a2))
    {
      int v24 = *(OZSceneNode **)(v22 + 16);
      OZScene::registerNode(this, v24);
      OZScene::addAllDependencies((uint64_t)this, v24);
      uint64_t v22 = *(void *)(v22 + 8);
    }
  }
  if ((*(unsigned int (**)(OZSceneNode *))(*(void *)a2 + 960))(a2))
  {
    memset(v48, 0, sizeof(v48));
    memset(v47, 0, 24);
    int v49 = 1065353216;
    OZSceneNode::end(a2, (uint64_t)v45);
    OZSceneNode::begin(a2, (uint64_t)v42);
    *(_OWORD *)int v47 = v42[0];
    *(_OWORD *)&v47[9] = *(_OWORD *)((char *)v42 + 9);
    int v49 = v44;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v48, v43[2], 0);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v43);
    while (*(void *)v47 != v45[0])
    {
      if (*(void *)v47 == *(void *)&v47[16]) {
        long long v25 = 0;
      }
      else {
        long long v25 = *(OZSceneNode **)(*(void *)v47 + 16);
      }
      OZScene::registerNode(this, v25);
      OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v47);
    }
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v46);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v48);
  }
  if ((*(unsigned char *)((*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2) + 56) & 0x40) != 0)
  {
    if (!*(unsigned char *)(theApp + 80))
    {
      int v26 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
      uint64_t ObjectManipulator = (OZChannelBase *)OZChannelBase::getObjectManipulator(v26);
      OZChannelBase::setRangeName(ObjectManipulator, v28);
    }
    int v29 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
    OZChannelBase::setNameUnset(v29, 0);
  }
  if (*((unsigned char *)this + 1578)) {
    atomic_store(1u, (unsigned __int8 *)this + 1808);
  }
  return (void *)OZScene::sceneDidChange(this);
}

void sub_1B7C17BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v5);
  _Unwind_Resume(a1);
}

uint64_t OZScene::addAllDependencies(uint64_t this, OZSceneNode *a2)
{
  if (a2)
  {
    uint64_t v2 = this;
    if ((*(_DWORD *)(this + 1592) & 0x10) == 0)
    {
      uint64_t v4 = *((void *)a2 + 120);
      if (v4) {
        OZScene::addNodeDependency(this, *((_DWORD *)a2 + 20), *(_DWORD *)(v4 + 80));
      }
      uint64_t v5 = (OZChannelFolder *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
      unsigned int v6 = *((_DWORD *)a2 + 20);
      return OZScene::addAllDependencies(v2, v5, v6);
    }
  }
  return this;
}

void *OZScene::addRootNodeBefore(OZScene *this, OZSceneNode *a2, OZSceneNode *a3)
{
  double result = OZScene::getNode(this, *((_DWORD *)a2 + 20));
  if (result) {
    return result;
  }
  if (!a3) {
    goto LABEL_14;
  }
  uint64_t v7 = (char *)this + 1200;
  int v8 = (char *)*((void *)this + 151);
  if (v8 == (char *)this + 1200)
  {
    int v8 = (char *)this + 1200;
LABEL_11:
    uint64_t v9 = (char *)*((void *)v8 + 1);
    goto LABEL_12;
  }
  uint64_t v9 = (char *)*((void *)this + 151);
  while (*((OZSceneNode **)v9 + 2) != a3)
  {
    uint64_t v9 = (char *)*((void *)v9 + 1);
    if (v9 == v7)
    {
      uint64_t v9 = (char *)this + 1200;
      break;
    }
  }
  if (v9 == v8) {
    goto LABEL_11;
  }
LABEL_12:
  if (v9 == v7)
  {
LABEL_14:
    uint64_t v14 = operator new(0x18uLL);
    v14[1] = (char *)this + 1200;
    unsigned int v14[2] = a2;
    uint64_t v15 = *((void *)this + 150);
    *uint64_t v14 = v15;
    *(void *)(v15 + 8) = v14;
    *((void *)this + 15OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v14;
    ++*((void *)this + 152);
    uint64_t v16 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
    OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 920), v16);
    goto LABEL_15;
  }
  uint64_t v10 = operator new(0x18uLL);
  float64x2_t v10[2] = a2;
  uint64_t v11 = *(void *)v9;
  *(void *)(v11 + 8) = v10;
  *uint64_t v10 = v11;
  *(void *)uint64_t v9 = v10;
  v10[1] = v9;
  ++*((void *)this + 152);
  uint64_t v12 = (const OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a3 + 640))(a3);
  uint64_t v13 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);
  OZChannelFolder::insertDescendantBefore((OZChannelFolder *)((char *)this + 920), v12, v13);
LABEL_15:
  OZScene::registerNode(this, a2);

  return (void *)OZScene::addAllDependencies((uint64_t)this, a2);
}

OZChannelFolder *OZScene::removeRootNode(OZScene *this, OZSceneNode *a2)
{
  uint64_t v4 = (OZSceneNode **)((char *)this + 1200);
  for (uint64_t i = (OZSceneNode **)*((void *)this + 151); i != v4; uint64_t i = (OZSceneNode **)i[1])
  {
    if (i[2] == a2)
    {
      if (i != v4)
      {
        unsigned int v6 = *i;
        *((void *)v6 + OZDocument::~OZDocument(this - 1) = i[1];
        *(void *)i[1] = v6;
        --*((void *)this + 152);
        operator delete(i);
      }
      break;
    }
  }
  OZScene::unregisterNode(this, a2);
  uint64_t v7 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)a2 + 640))(a2);

  return OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 920), v7);
}

void OZScene::addNode(OZDocument **this, OZSceneNode *a2, PCString *a3, __int16 a4, int a5, OZSceneNode *a6)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  Node = OZScene::getNode((OZScene *)this, *((_DWORD *)a2 + 20));
  if (v13)
  {
    uint64_t v14 = v13;
    OZScene::begin_t<OZFootageLayer,false,true>((uint64_t *)this, (uint64_t)&v54.var1);
    if (v54.var1 != *(OZFactory **)&v54.var3 {
      && (uint64_t v15 = (const void *)*((void *)v54.var1 + 2)) != 0
    }
    {
    }
    else
    {
      PCURL::PCURL((PCURL *)&v54, @"Footage Layer Name");
      OZChannelBase::getNextUniqueID(v17);
      *(_OWORD *)&v54.var11 = xmmword_1B8380C00;
      uint64_t SceneNode = (OZSceneNode *)OZApplication::createSceneNode(theApp, (unsigned int *)&v54.var11);
      PCString::~PCString((PCString *)&v54);
      if (!SceneNode)
      {
        std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v54.var5);
        return;
      }
      OZScene::addRootNodeAfter((OZScene *)this, SceneNode, *((OZSceneNode **)this[150] + 2));
      if ((a4 & 0x10) != 0)
      {
        if (PCString::empty(a3)) {
          PCURL::PCURL((PCURL *)&v54.var11, @"Undo Paste");
        }
        else {
          PCString::PCString((PCString *)&v54.var11, a3);
        }
        (*(void (**)(void *, __CFString **, uint64_t))(*((void *)SceneNode + 2) + 176))((void *)SceneNode + 2, &v54.var11, 1);
        PCString::~PCString((PCString *)&v54.var11);
      }
    }
    if (Node)
    {
      if ((a4 & 0x10) != 0)
      {
        if (PCString::empty(a3)) {
          PCURL::PCURL((PCURL *)&v54.var11, @"Undo Reorder");
        }
        else {
          PCString::PCString((PCString *)&v54.var11, a3);
        }
        (*(void (**)(char *, __CFString **, uint64_t))(*((void *)a2 + 2) + 176))((char *)a2 + 16, &v54.var11, 3);
        PCString::~PCString((PCString *)&v54.var11);
      }
      OZSceneNode::removeFromParent(a2);
    }
    uint64_t v21 = *(void *)SceneNode;
    if (a5) {
      uint64_t v22 = (void (**)(OZSceneNode *, const void *, OZSceneNode *))(v21 + 992);
    }
    else {
      uint64_t v22 = (void (**)(OZSceneNode *, const void *, OZSceneNode *))(v21 + 984);
    }
    (*v22)(SceneNode, v14, a6);
    if (v23)
    {
      int v24 = v23;
      (*(void (**)(__CFString **__return_ptr))(*(void *)v23 + 1280))(&v54.var11);
      OZFootage::getFormatName(v24, (PCSharedCount *)&v54);
      (*(void (**)(PCString *__return_ptr, OZFootage *))(*(void *)v24 + 1288))(&v53, v24);
      OZFootage::getDisplayWidth(v24);
      OZFootage::getDisplayHeight(v24);
      OZChannelBase::setRangeName((OZChannelBase *)&v54.var11, (const PCString *)&v54);
      PCString::~PCString(&v53);
      PCString::~PCString((PCString *)&v54);
      PCString::~PCString((PCString *)&v54.var11);
    }
    if (v25)
    {
      int v26 = v25;
      char v27 = (*(uint64_t (**)(void))(v25[2] + 288))();
      snprintf((char *)&v54.var11, 0x40uLL, "%d", v27 & 1);
      (*(void (**)(OZChannelBase *__return_ptr, void *))(*v26 + 1280))(&v54, v26);
      (*(void (**)(PCString *__return_ptr, void *))(*v26 + 1288))(&v53, v26);
      OZChannelBase::setRangeName(&v54, &v53);
      PCString::~PCString(&v53);
      PCString::~PCString((PCString *)&v54);
    }
    goto LABEL_38;
  }
  {
    if ((a4 & 0x20) == 0 || (uint64_t v18 = this[154]) == 0)
    {
      PCURL::PCURL((PCURL *)&v54.var11, @"Layer Name");
      OZChannelBase::getNextUniqueID(v19);
      *(_OWORD *)&v54.var1 = xmmword_1B8380BE0;
      uint64_t v18 = (OZSceneNode *)OZApplication::createSceneNode(theApp, (unsigned int *)&v54.var1);
      PCString::~PCString((PCString *)&v54.var11);
      if (!v18) {
        return;
      }
      if (a5) {
        OZScene::addRootNodeBefore((OZScene *)this, v18, a6);
      }
      else {
        OZScene::addRootNodeAfter((OZScene *)this, v18, a6);
      }
      if (!this[154])
      {
        this[154] = v18;
        OZScene::clearSelection((OZScene *)this);
        (*(void (**)(OZSceneNode *))(*(void *)v18 + 688))(v18);
        this[153] = v18;
      }
      OZGroup::setToDefaultDimensionType(v18, 0);
      if ((a4 & 0x10) != 0)
      {
        if (PCString::empty(a3)) {
          PCURL::PCURL((PCURL *)&v54.var1, @"Undo Paste");
        }
        else {
          PCString::PCString((PCString *)&v54.var1, a3);
        }
        (*(void (**)(void *, OZFactory **, uint64_t))(*((void *)v18 + 2) + 176))((void *)v18 + 2, &v54.var1, 1);
        PCString::~PCString((PCString *)&v54.var1);
      }
    }
    if (Node)
    {
      if ((a4 & 0x10) != 0)
      {
        if (PCString::empty(a3)) {
          PCURL::PCURL((PCURL *)&v54.var1, @"Undo Reorder");
        }
        else {
          PCString::PCString((PCString *)&v54.var1, a3);
        }
        (*(void (**)(char *, OZFactory **, uint64_t))(*((void *)a2 + 2) + 176))((char *)a2 + 16, &v54.var1, 3);
        PCString::~PCString((PCString *)&v54.var1);
      }
      OZSceneNode::removeFromParent(a2);
    }
    uint64_t v29 = *(void *)v18;
    if (a5) {
      (*(void (**)(OZSceneNode *, OZSceneNode *, void))(v29 + 992))(v18, a2, 0);
    }
    else {
      (*(void (**)(OZSceneNode *, OZSceneNode *, void))(v29 + 984))(v18, a2, 0);
    }
    unint64_t v30 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v18 + 640))(v18);
    OZChannelObjectRoot::recomputeTimeRangeFromChildren(v30, 1, 1, 1, 1, 0);
    OZDocument::postNotification(this[198], 32);
    goto LABEL_61;
  }
  {
    OZScene::begin_t<OZAudioLayer,false,true>((uint64_t *)this, (uint64_t)&v54.var1);
    if (v54.var1 == *(OZFactory **)&v54.var3 {
      || (uint64_t v20 = (const void *)*((void *)v54.var1 + 2)) == 0
    }
    {
      OZScene::addRootNode((OZScene *)this, a2);
    }
LABEL_38:
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v54.var5);
LABEL_61:
    if ((a4 & 0x10) != 0 && !Node)
    {
      if (PCString::empty(a3)) {
        PCURL::PCURL((PCURL *)&v54.var1, @"Undo Paste");
      }
      else {
        PCString::PCString((PCString *)&v54.var1, a3);
      }
      (*(void (**)(char *, OZFactory **, uint64_t))(*((void *)a2 + 2) + 176))((char *)a2 + 16, &v54.var1, 1);
      PCString::~PCString((PCString *)&v54.var1);
    }
LABEL_67:
    OZScene::addAllDependencies((uint64_t)this, a2);
    return;
  }
  {
    if ((a4 & 0x20) != 0) {
      int v28 = this[154];
    }
    else {
      int v28 = 0;
    }
    if (Node)
    {
      if ((a4 & 0x10) != 0)
      {
        if (PCString::empty(a3)) {
          PCURL::PCURL((PCURL *)&v54.var1, @"Undo Reorder");
        }
        else {
          PCString::PCString((PCString *)&v54.var1, a3);
        }
        (*(void (**)(char *, OZFactory **, uint64_t))(*((void *)a2 + 2) + 176))((char *)a2 + 16, &v54.var1, 3);
        PCString::~PCString((PCString *)&v54.var1);
      }
      OZSceneNode::removeFromParent(a2);
    }
    if (v28)
    {
      uint64_t v34 = *(void *)v28;
      if (a5) {
        (*(void (**)(OZDocument *, OZSceneNode *, OZSceneNode *))(v34 + 992))(v28, a2, a6);
      }
      else {
        (*(void (**)(OZDocument *, OZSceneNode *, OZSceneNode *))(v34 + 984))(v28, a2, a6);
      }
      unint64_t v35 = (OZChannelBase *)(*(uint64_t (**)(OZDocument *))(*(void *)v28 + 640))(v28);
      OZChannelObjectRoot::recomputeTimeRangeFromChildren(v35, 1, 1, 1, 1, 0);
    }
    else
    {
      OZScene::addRootNodeAfter((OZScene *)this, a2, a6);
    }
    goto LABEL_61;
  }
  unint64_t v31 = *((void *)a2 + 1);
  long long v52 = xmmword_1B8380C30;
  if ((OZFactory::isKindOfClass(v31, (int32x4_t *)&v52) & 1) != 0
    || (unint64_t v32 = *((void *)a2 + 1),
        long long v51 = xmmword_1B837FE90,
        OZFactory::isKindOfClass(v32, (int32x4_t *)&v51)))
  {
    if ((a4 & 0x20) != 0) {
      uint64_t v33 = this[154];
    }
    else {
      uint64_t v33 = 0;
    }
    if (Node)
    {
      if ((a4 & 0x10) != 0)
      {
        if (PCString::empty(a3)) {
          PCURL::PCURL((PCURL *)&v54.var1, @"Undo Reorder");
        }
        else {
          PCString::PCString((PCString *)&v54.var1, a3);
        }
        (*(void (**)(char *, OZFactory **, uint64_t))(*((void *)a2 + 2) + 176))((char *)a2 + 16, &v54.var1, 3);
        PCString::~PCString((PCString *)&v54.var1);
      }
      OZSceneNode::removeFromParent(a2);
    }
    if (v33)
    {
      uint64_t v36 = *(void *)v33;
      if (a5)
      {
LABEL_100:
        (*(void (**)(OZDocument *, OZSceneNode *, OZSceneNode *))(v36 + 992))(v33, a2, a6);
LABEL_104:
        uint64_t v37 = (OZChannelBase *)(*(uint64_t (**)(OZDocument *))(*(void *)v33 + 640))(v33);
        OZChannelObjectRoot::recomputeTimeRangeFromChildren(v37, 1, 1, 1, 1, 0);
        goto LABEL_61;
      }
LABEL_103:
      (*(void (**)(OZDocument *, OZSceneNode *, OZSceneNode *))(v36 + 984))(v33, a2, a6);
      goto LABEL_104;
    }
    if (a5) {
      goto LABEL_102;
    }
    goto LABEL_105;
  }
  {
    if ((a4 & 0x20) != 0) {
      uint64_t v33 = this[154];
    }
    else {
      uint64_t v33 = 0;
    }
    if (Node)
    {
      if ((a4 & 0x10) != 0)
      {
        if (PCString::empty(a3)) {
          PCURL::PCURL((PCURL *)&v54.var1, @"Undo Reorder");
        }
        else {
          PCString::PCString((PCString *)&v54.var1, a3);
        }
        (*(void (**)(char *, OZFactory **, uint64_t))(*((void *)a2 + 2) + 176))((char *)a2 + 16, &v54.var1, 3);
        PCString::~PCString((PCString *)&v54.var1);
      }
      OZSceneNode::removeFromParent(a2);
    }
    if (v33)
    {
      uint64_t v36 = *(void *)v33;
      if (a5) {
        goto LABEL_100;
      }
      goto LABEL_103;
    }
    if (a5)
    {
LABEL_102:
      OZScene::addRootNodeBefore((OZScene *)this, a2, a6);
      goto LABEL_61;
    }
LABEL_105:
    OZScene::addRootNodeAfter((OZScene *)this, a2, a6);
    goto LABEL_61;
  }
  BOOL v38 = 0;
  if ((a4 & 0x20) != 0)
  {
    uint64_t v41 = this[154];
    if ((a4 & 0x400) != 0 && v41)
    {
      uint64_t v42 = this[154];
      BOOL v38 = OZGroup::is360Group(v41);
      uint64_t v41 = v42;
    }
    uint64_t v50 = v41;
    if (v41)
    {
      if (!v38)
      {
        long long v43 = 0;
        goto LABEL_142;
      }
    }
  }
  PCURL::PCURL((PCURL *)&v54.var11, @"Layer Name");
  OZChannelBase::getNextUniqueID(v39);
  *(_OWORD *)&v54.var1 = xmmword_1B8380BE0;
  int v40 = (OZSceneNode *)OZApplication::createSceneNode(theApp, (unsigned int *)&v54.var1);
  PCString::~PCString((PCString *)&v54.var11);
  uint64_t v50 = v40;
  if (v40)
  {
    if (v38)
    {
      OZScene::addRootNode((OZScene *)this, v40);
    }
    else if (a5)
    {
      OZScene::addRootNodeBefore((OZScene *)this, v40, a6);
    }
    else
    {
      OZScene::addRootNodeAfter((OZScene *)this, v40, a6);
    }
    int v44 = v40;
    this[154] = v40;
    if ((a4 & 0x140) == 0)
    {
      OZScene::clearSelection((OZScene *)this);
      (*(void (**)(OZSceneNode *))(*(void *)v40 + 688))(v40);
      this[153] = v40;
      OZDocument::postNotification(this[198], 32);
      int v44 = v40;
    }
    OZGroup::setToDefaultDimensionType(v44, 0);
    if ((a4 & 0x10) != 0)
    {
      if (PCString::empty(a3)) {
        PCURL::PCURL((PCURL *)&v54.var1, @"Undo Paste");
      }
      else {
        PCString::PCString((PCString *)&v54.var1, a3);
      }
      long long v43 = v40;
      (*(void (**)(void *, OZFactory **, uint64_t))(*((void *)v40 + 2) + 176))((void *)v40 + 2, &v54.var1, 1);
      PCString::~PCString((PCString *)&v54.var1);
    }
    else
    {
      long long v43 = v40;
    }
LABEL_142:
    if (Node)
    {
      if ((a4 & 0x10) != 0)
      {
        if (PCString::empty(a3)) {
          PCURL::PCURL((PCURL *)&v54.var1, @"Undo Reorder");
        }
        else {
          PCString::PCString((PCString *)&v54.var1, a3);
        }
        (*(void (**)(char *, OZFactory **, uint64_t))(*((void *)a2 + 2) + 176))((char *)a2 + 16, &v54.var1, 3);
        PCString::~PCString((PCString *)&v54.var1);
      }
      OZSceneNode::removeFromParent(a2);
    }
    if (!v43)
    {
      long long v45 = this[153];
      while (v45)
      {
        uint64_t v46 = (OZDocument *)*((void *)v45 + 120);
        if (!v46) {
          break;
        }
        long long v45 = v46;
        if (v43) {
          goto LABEL_156;
        }
      }
      long long v43 = 0;
    }
LABEL_156:
    if (v43) {
      int v47 = v43;
    }
    else {
      int v47 = v50;
    }
    uint64_t v48 = *(void *)v47;
    if (a5) {
      (*(void (**)(OZSceneNode *, OZSceneNode *, OZSceneNode *))(v48 + 992))(v47, a2, a6);
    }
    else {
      (*(void (**)(OZSceneNode *, OZSceneNode *, OZSceneNode *))(v48 + 984))(v47, a2, a6);
    }
    int v49 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v47 + 640))(v47);
    OZChannelObjectRoot::recomputeTimeRangeFromChildren(v49, 1, 1, 1, 1, 0);
    if (Node) {
      goto LABEL_67;
    }
    goto LABEL_61;
  }
}

void sub_1B7C19144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, PCString a15, PCString a16, PCString a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t *OZScene::begin_t<OZAudioLayer,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZAudioLayer,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZAudioLayer,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7C192BC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::getObject(OZScene *this, unsigned int a2)
{
  return OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, a2);
}

void OZScene::OZNodeMap::setNode(os_unfair_lock_s *this, OZObjectManipulator *a2)
{
  uint64_t v4 = (*(uint64_t (**)(OZObjectManipulator *))(*(void *)a2 + 256))(a2);
  uint64_t v5 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
  uint32_t v6 = v5;
  PCSpinLock::lock(this);
  OZChannelBase::updateIDGenerator(v5);
  uint64_t v7 = &v6;
  std::__hash_table<std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OZObjectManipulator *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)&this[2], &v6, (uint64_t)&std::piecewise_construct, &v7)[3] = a2;
  this[12]._os_unfair_lock_opaque = v6;
  *(void *)&this[14]._os_unfair_lock_opaque = a2;
  PCSpinLock::unlock(this);
}

void sub_1B7C193BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

uint64_t OZScene::incNum3DTextObjects(uint64_t this)
{
  return this;
}

void OZScene::registerObject(OZScene *this, OZObjectManipulator *a2)
{
  uint64_t v4 = (*(uint64_t (**)(OZObjectManipulator *))(*(void *)a2 + 256))(a2);
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
  uint32_t v6 = (OZObjectManipulator *)OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, v5);
  uint64_t v7 = v6;
  if (!*((unsigned char *)this + 1576)) {
    goto LABEL_15;
  }
  BOOL v8 = *(unsigned char *)(theApp + 80) || v6 == 0;
  if (v8 || v6 == a2) {
    goto LABEL_15;
  }
  uint64_t v10 = (OZObjectManipulator **)*((void *)this + 195);
  uint64_t v11 = (OZObjectManipulator **)*((void *)this + 194);
  if (v11 == v10)
  {
LABEL_13:
    uint64_t v12 = (OZObjectManipulator **)*((void *)this + 195);
  }
  else
  {
    uint64_t v12 = (OZObjectManipulator **)*((void *)this + 194);
    uint64_t v13 = v12;
    while (*v13 != a2)
    {
      ++v13;
      ++v12;
      if (v13 == v10) {
        goto LABEL_13;
      }
    }
  }
  if (v10 != v12)
  {
LABEL_15:
    if (v6) {
      return;
    }
    goto LABEL_16;
  }
  unint64_t v16 = *((void *)this + 196);
  if ((unint64_t)v10 >= v16)
  {
    uint64_t v18 = v10 - v11;
    if ((unint64_t)(v18 + 1) >> 61) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = v16 - (void)v11;
    uint64_t v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
      uint64_t v20 = v18 + 1;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21) {
      uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 1568, v21);
    }
    else {
      uint64_t v22 = 0;
    }
    int v23 = &v22[8 * v18];
    int v24 = &v22[8 * v21];
    *(void *)int v23 = a2;
    uint64_t v17 = v23 + 8;
    long long v25 = (char *)*((void *)this + 195);
    int v26 = (char *)*((void *)this + 194);
    if (v25 != v26)
    {
      do
      {
        uint64_t v27 = *((void *)v25 - 1);
        v25 -= 8;
        *((void *)v23 - OZDocument::~OZDocument(this - 1) = v27;
        v23 -= 8;
      }
      while (v25 != v26);
      long long v25 = (char *)*((void *)this + 194);
    }
    *((void *)this + 194) = v23;
    *((void *)this + 195) = v17;
    *((void *)this + 196) = v24;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    *uint64_t v10 = a2;
    uint64_t v17 = v10 + 1;
  }
  *((void *)this + 195) = v17;
  if (!v7)
  {
LABEL_16:
    OZScene::OZNodeMap::setNode((os_unfair_lock_s *)this + 322, a2);
    if ((*(unsigned char *)((*(uint64_t (**)(OZObjectManipulator *))(*(void *)a2 + 216))(a2) + 56) & 0x40) != 0)
    {
      OZChannelBase::setRangeName((OZChannelBase *)a2, v14);
      uint64_t v15 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)a2 + 216))(a2);
      OZChannelBase::setNameUnset(v15, 0);
    }
  }
}

uint64_t OZScene::dirtyLockDependencies(uint64_t this)
{
  if (*(unsigned char *)(this + 1578)) {
    atomic_store(1u, (unsigned __int8 *)(this + 1808));
  }
  return this;
}

uint64_t OZScene::sceneDidChange(OZScene *this)
{
  uint64_t v1 = *((void *)this + 151);
  memset(v25, 0, sizeof(v25));
  int v26 = 1065353216;
  v22[0] = v1;
  v22[1] = v1;
  int v23 = (char *)this + 1200;
  char v24 = 0;
  memset(v20, 0, sizeof(v20));
  int v21 = 1065353216;
  unint64_t v16 = (char *)this + 1200;
  uint64_t v17 = v1;
  uint64_t v18 = (char *)this + 1200;
  char v19 = 0;
  while ((char *)v22[0] != v16)
  {
    if ((char *)v22[0] == v23) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *(OZSceneNode **)(v22[0] + 16);
    }
    for (uint64_t i = (void *)*((void *)v2 + 123); i != (void *)((char *)v2 + 976); uint64_t i = (void *)i[1])
      (*(void (**)(void))(*(void *)(i[2] + 48) + 376))();
    for (uint64_t j = (void *)*((void *)v2 + 126); j != (void *)((char *)v2 + 1000); uint64_t j = (void *)j[1])
      (*(void (**)(void))(*(void *)(j[2] + 16) + 376))();
    if ((*(unsigned int (**)(OZSceneNode *))(*(void *)v2 + 1056))(v2))
    {
      for (uint64_t k = (*(uint64_t (**)(OZSceneNode *))(*(void *)v2 + 1104))(v2);
            k != (*(uint64_t (**)(OZSceneNode *))(*(void *)v2 + 1112))(v2);
            uint64_t k = *(void *)(k + 8))
      {
        (*(void (**)(void))(*(void *)(*(void *)(k + 16) + 16) + 376))();
      }
    }
    if ((*(unsigned int (**)(OZSceneNode *))(*(void *)v2 + 960))(v2))
    {
      memset(v14, 0, sizeof(v14));
      memset(v13, 0, 24);
      int v15 = 1065353216;
      OZSceneNode::end(v2, (uint64_t)v11);
      OZSceneNode::begin(v2, (uint64_t)v8);
      *(_OWORD *)uint64_t v13 = v8[0];
      *(_OWORD *)&PCSharedCount v13[9] = *(_OWORD *)((char *)v8 + 9);
      int v15 = v10;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v14, v9[2], 0);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v9);
      while (*(void *)v13 != v11[0])
      {
        if (*(void *)v13 != *(void *)&v13[16])
        {
          uint64_t v6 = *(void *)(*(void *)v13 + 16);
          if (v6) {
            (*(void (**)(void))(*(void *)(v6 + 16) + 376))();
          }
        }
        OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v13);
      }
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v12);
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v14);
    }
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v22);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v25);
}

void sub_1B7C1999C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::decNum3DTextObjects(uint64_t this)
{
  return this;
}

void OZScene::OZNodeMap::removeNode(os_unfair_lock_s *this, OZObjectManipulator *a2)
{
  uint64_t v3 = (*(uint64_t (**)(OZObjectManipulator *))(*(void *)a2 + 256))(a2);
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 56))(v3);
  PCSpinLock::lock(this);
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::find<unsigned int>(&this[2]._os_unfair_lock_opaque, &v5);
  if (v4)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OZObjectManipulator *>>>::erase(&this[2]._os_unfair_lock_opaque, v4);
    this[12]._os_unfair_lock_opaque = 0;
    *(void *)&this[14]._os_unfair_lock_opaque = 0;
  }
  else if (!this)
  {
    return;
  }
  PCSpinLock::unlock(this);
}

void sub_1B7C19AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_unfair_lock_s *a9)
{
}

void OZScene::unregisterObject(OZScene *this, OZObjectManipulator *a2)
{
  uint64_t v4 = (*(uint64_t (**)(OZObjectManipulator *))(*(void *)a2 + 256))(a2);
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
  uint64_t v6 = (OZObjectManipulator **)*((void *)this + 194);
  uint64_t v7 = (OZObjectManipulator **)*((void *)this + 195);
  if (v6 != v7)
  {
    while (*v6 != a2)
    {
      if (++v6 == v7)
      {
        uint64_t v6 = (OZObjectManipulator **)*((void *)this + 195);
        break;
      }
    }
  }
  if (v6 == v7)
  {
    OZScene::OZNodeMap::removeNode((os_unfair_lock_s *)this + 322, a2);
    uint64_t v9 = (char *)*((void *)this + 159);
    if (v9)
    {
      int v10 = (uint64_t **)((char *)this + 1264);
      uint64_t v11 = (char *)this + 1272;
      uint64_t v12 = (char *)this + 1272;
      do
      {
        unsigned int v13 = *((_DWORD *)v9 + 8);
        BOOL v14 = v13 >= v5;
        if (v13 >= v5) {
          int v15 = (char **)v9;
        }
        else {
          int v15 = (char **)(v9 + 8);
        }
        if (v14) {
          uint64_t v12 = v9;
        }
        uint64_t v9 = *v15;
      }
      while (*v15);
      if (v12 != v11 && v5 >= *((_DWORD *)v12 + 8))
      {
        uint64_t v16 = *((void *)v12 + 5);
        std::__tree<unsigned int>::erase((uint64_t **)v16, *(uint64_t **)v16, (uint64_t *)(v16 + 8));
        std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v10, (uint64_t *)v12);
        operator delete(v12);
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v16, *(void **)(v16 + 8));
        JUMPOUT(0x1BA9BFBA0);
      }
    }
  }
  else
  {
    int64_t v8 = (char *)v7 - (char *)(v6 + 1);
    if (v7 != v6 + 1) {
      memmove(v6, v6 + 1, (char *)v7 - (char *)(v6 + 1));
    }
    *((void *)this + 195) = (char *)v6 + v8;
  }
}

OZObjectManipulator ***OZScene::removeObjectFromLoadObjectsWithDuplicateIDs(OZObjectManipulator ***this, OZObjectManipulator *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = this[194];
  uint64_t v4 = this[195];
  if (v3 != v4)
  {
    while (*v3 != a2)
    {
      if (++v3 == v4)
      {
        uint64_t v3 = this[195];
        break;
      }
    }
  }
  if (v3 != v4)
  {
    int64_t v5 = (char *)v4 - (char *)(v3 + 1);
    if (v4 != v3 + 1) {
      this = (OZObjectManipulator ***)memmove(v3, v3 + 1, (char *)v4 - (char *)(v3 + 1));
    }
    v2[195] = (OZObjectManipulator **)((char *)v3 + v5);
  }
  return this;
}

uint64_t OZScene::addNodeDependency(uint64_t this, unsigned int a2, unsigned int a3)
{
  unsigned int v11 = a3;
  unsigned int v12 = a2;
  if ((*(unsigned char *)(this + 1592) & 0x10) == 0)
  {
    uint64_t v3 = this;
    uint64_t v4 = *(void *)(this + 1272);
    if (!v4) {
      goto LABEL_13;
    }
    uint64_t v5 = this + 1272;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        int64_t v8 = (uint64_t *)v4;
      }
      else {
        int64_t v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }
    while (*v8);
    if (v5 == this + 1272 || *(_DWORD *)(v5 + 32) > a2) {
LABEL_13:
    }
      operator new();
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*(uint64_t ***)(v5 + 40), &v11, &v11);
    uint64_t v9 = (const void *)OZScene::OZNodeMap::operator[](v3 + 1288, v12);
    this = OZScene::OZNodeMap::operator[](v3 + 1288, v11);
    if (v9)
    {
      int v10 = (const void *)this;
      if (this)
      {
        if (this)
        {
          if (this)
          {
            if (*(unsigned char *)(v3 + 1578)) {
              atomic_store(1u, (unsigned __int8 *)(v3 + 1808));
            }
          }
        }
      }
    }
  }
  return this;
}

BOOL OZScene::testFlag(OZScene *this, int a2)
{
  return (*((_DWORD *)this + 398) & a2) != 0;
}

uint64_t OZScene::addAllDependencies(uint64_t this, OZChannelFolder *a2, unsigned int a3)
{
  if ((*(unsigned char *)(this + 1592) & 0x10) == 0)
  {
    uint64_t v3 = (uint64_t *)*((void *)a2 + 14);
    if (v3)
    {
      uint64_t v4 = *v3;
      if (*v3 != v3[1])
      {
        uint64_t v6 = this;
        do
        {
          BOOL v7 = *(const void **)v4;
          uint64_t v8 = *(void *)(*(void *)v4 + 56);
          if ((v8 & 0x1000) != 0)
          {
            if ((v8 & 0x2000) != 0)
            {
              OZScene::addNodeDependency(v6, *((_DWORD *)v16 + 6), a3);
              unsigned int v15 = *((_DWORD *)v16 + 6);
              BOOL v14 = (OZScene *)v6;
              unsigned int v13 = v16;
            }
            else
            {
              BOOL v14 = (OZScene *)v6;
              unsigned int v15 = a3;
            }
            this = OZScene::addAllDependencies(v14, v13, v15);
            goto LABEL_14;
          }
          this = (*(uint64_t (**)(const void *))(*(void *)v7 + 112))(v7);
          if (this)
          {
            unint64_t v9 = *(void *)(*(void *)v4 + 8);
            long long v23 = xmmword_1B8380D40;
            int isKindOfClass = OZFactory::isKindOfClass(v9, (int32x4_t *)&v23);
            unsigned int v11 = *(void **)v4;
            if (isKindOfClass)
            {
              if (v11) {
              else
              }
                unsigned int v12 = 0;
              if (!OZChanObjectManipRef::getObjectID(v12)
                || !OZChanObjectManipRef::getObject((OZChannelBase *)v12))
              {
                goto LABEL_29;
              }
            }
            else
            {
              unint64_t v17 = v11[1];
              long long v23 = xmmword_1B8381310;
              int v18 = OZFactory::isKindOfClass(v17, (int32x4_t *)&v23);
              char v19 = *(void **)v4;
              if (!v18)
              {
                unint64_t v20 = v19[1];
                long long v23 = xmmword_1B8381320;
                this = OZFactory::isKindOfClass(v20, (int32x4_t *)&v23);
                if (!this) {
                  goto LABEL_14;
                }
                char v19 = *(void **)v4;
              }
              if (v19) {
              else
              }
                unsigned int v12 = 0;
              if (!OZChanObjectManipRef::getObjectID(v12))
              {
LABEL_29:
                this = OZChanObjectManipRef::getObject((OZChannelBase *)v12);
                if (this) {
                  this = (*((uint64_t (**)(OZChannel *, void, void))v12->var0 + 108))(v12, 0, 0);
                }
                goto LABEL_14;
              }
            }
            uint64_t Object = OZChanObjectManipRef::getObject((OZChannelBase *)v12);
            if (!(*((unsigned int (**)(OZChannel *, uint64_t))v12->var0 + 109))(v12, Object)) {
              goto LABEL_29;
            }
            unsigned int ObjectID = OZChanObjectManipRef::getObjectID(v12);
            this = OZScene::addNodeDependency(v6, ObjectID, a3);
          }
LABEL_14:
          v4 += 8;
        }
        while (v4 != v3[1]);
      }
    }
  }
  return this;
}

void OZScene::removeAllDependencies(OZScene *this, unsigned int a2)
{
  unsigned int v16 = a2;
  uint64_t v2 = (uint64_t **)((char *)this + 1264);
  uint64_t v3 = (uint64_t *)((char *)this + 1272);
  uint64_t v4 = (char *)*((void *)this + 159);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)((char *)this + 1272);
    do
    {
      unsigned int v6 = *((_DWORD *)v4 + 8);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        uint64_t v8 = (char **)v4;
      }
      else {
        uint64_t v8 = (char **)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = (uint64_t *)v4;
      }
      uint64_t v4 = *v8;
    }
    while (*v8);
    if (v5 != v3 && *((_DWORD *)v5 + 8) <= a2)
    {
      uint64_t v9 = v5[5];
      std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)this + 158, v5);
      operator delete(v5);
      if (v9)
      {
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v9, *(void **)(v9 + 8));
        MEMORY[0x1BA9BFBA0](v9, 0x1020C4062D53EE8);
      }
    }
  }
  int v10 = *v2;
  if (*v2 != v3)
  {
    do
    {
      uint64_t v11 = v10[5];
      std::__tree<unsigned int>::__erase_unique<unsigned int>(v11, &v16);
      unsigned int v12 = (uint64_t *)v10[1];
      if (*(void *)(v11 + 16))
      {
        if (v12)
        {
          do
          {
            unsigned int v13 = v12;
            unsigned int v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            unsigned int v13 = (uint64_t *)v10[2];
            BOOL v14 = *v13 == (void)v10;
            int v10 = v13;
          }
          while (!v14);
        }
      }
      else
      {
        unsigned int v15 = v10;
        if (v12)
        {
          do
          {
            unsigned int v13 = v12;
            unsigned int v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            unsigned int v13 = (uint64_t *)v15[2];
            BOOL v14 = *v13 == (void)v15;
            unsigned int v15 = v13;
          }
          while (!v14);
        }
        std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v2, v10);
        operator delete(v10);
        if (v11)
        {
          std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v11, *(void **)(v11 + 8));
          MEMORY[0x1BA9BFBA0](v11, 0x1020C4062D53EE8);
        }
      }
      int v10 = v13;
    }
    while (v13 != v3);
  }
}

OZScene *OZScene::removeAllDependencies(OZScene *this, OZChannelFolder *a2, unsigned int a3)
{
  uint64_t v3 = (uint64_t *)*((void *)a2 + 14);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3 != v3[1])
    {
      unsigned int v6 = this;
      do
      {
        BOOL v7 = *(const void **)v4;
        uint64_t v8 = *(void *)(*(void *)v4 + 56);
        if ((v8 & 0x1000) != 0)
        {
          if ((v8 & 0x2000) != 0)
          {
            OZScene::removeAllDependencies(v6, *((_DWORD *)v16 + 6));
            unsigned int v15 = *((_DWORD *)v16 + 6);
            BOOL v14 = v6;
            unsigned int v13 = v16;
          }
          else
          {
            BOOL v14 = v6;
            unsigned int v15 = a3;
          }
          this = (OZScene *)OZScene::removeAllDependencies(v14, v13, v15);
          goto LABEL_13;
        }
        this = (OZScene *)(*(uint64_t (**)(const void *))(*(void *)v7 + 112))(v7);
        if (this)
        {
          unint64_t v9 = *(void *)(*(void *)v4 + 8);
          long long v20 = xmmword_1B8380D40;
          int isKindOfClass = OZFactory::isKindOfClass(v9, (int32x4_t *)&v20);
          uint64_t v11 = *(void **)v4;
          if (isKindOfClass)
          {
            if (v11)
            {
              goto LABEL_18;
            }
            goto LABEL_19;
          }
          unint64_t v17 = v11[1];
          long long v20 = xmmword_1B8381330;
          this = (OZScene *)OZFactory::isKindOfClass(v17, (int32x4_t *)&v20);
          if (this)
          {
            uint64_t v11 = *(void **)v4;
            if (*(void *)v4)
            {
LABEL_18:
LABEL_20:
              this = (OZScene *)OZChanObjectManipRef::getObjectID(v18);
              if (this)
              {
                unsigned int ObjectID = OZChanObjectManipRef::getObjectID(v18);
                this = (OZScene *)OZScene::removeNodeDependency(v6, ObjectID, a3);
              }
              goto LABEL_13;
            }
LABEL_19:
            int v18 = 0;
            goto LABEL_20;
          }
        }
LABEL_13:
        v4 += 8;
      }
      while (v4 != v3[1]);
    }
  }
  return this;
}

const void *OZScene::removeNodeDependency(OZScene *this, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = (char *)*((void *)this + 159);
  if (v6)
  {
    BOOL v7 = (char *)this + 1272;
    do
    {
      unsigned int v8 = *((_DWORD *)v6 + 8);
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        int v10 = (char **)v6;
      }
      else {
        int v10 = (char **)(v6 + 8);
      }
      if (v9) {
        BOOL v7 = v6;
      }
      unsigned int v6 = *v10;
    }
    while (*v10);
    if (v7 != (char *)this + 1272 && *((_DWORD *)v7 + 8) <= a2)
    {
      uint64_t v11 = *((void *)v7 + 5);
      uint64_t v12 = *(void *)(v11 + 8);
      if (v12)
      {
        uint64_t v13 = v11 + 8;
        do
        {
          unsigned int v14 = *(_DWORD *)(v12 + 28);
          BOOL v15 = v14 >= a3;
          if (v14 >= a3) {
            unsigned int v16 = (uint64_t *)v12;
          }
          else {
            unsigned int v16 = (uint64_t *)(v12 + 8);
          }
          if (v15) {
            uint64_t v13 = v12;
          }
          uint64_t v12 = *v16;
        }
        while (*v16);
        if (v13 != v11 + 8 && *(_DWORD *)(v13 + 28) <= a3)
        {
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(*((uint64_t ***)v7 + 5), (uint64_t *)v13);
          operator delete((void *)v13);
        }
      }
      if (!*(void *)(v11 + 16))
      {
        std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)this + 158, (uint64_t *)v7);
        operator delete(v7);
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v11, *(void **)(v11 + 8));
        MEMORY[0x1BA9BFBA0](v11, 0x1020C4062D53EE8);
      }
    }
  }
  unint64_t v17 = (const void *)OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, a2);
  double result = (const void *)OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, a3);
  if (v17)
  {
    char v19 = result;
    if (result) {
      BOOL v20 = v19 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    if (!v20)
    {
      if (result)
      {
        if (*((unsigned char *)this + 1578)) {
          atomic_store(1u, (unsigned __int8 *)this + 1808);
        }
      }
    }
  }
  return result;
}

uint64_t OZScene::recalcDependencies(OZScene *this)
{
  char v2 = *((unsigned char *)this + 1578);
  *((unsigned char *)this + 1578) = 0;
  if (*((void *)this + 160))
  {
    uint64_t v3 = (uint64_t **)((char *)this + 1264);
    do
    {
      uint64_t v4 = *v3;
      uint64_t v5 = (*v3)[5];
      std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)this + 158, *v3);
      operator delete(v4);
      if (v5)
      {
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v5, *(void **)(v5 + 8));
        MEMORY[0x1BA9BFBA0](v5, 0x1020C4062D53EE8);
      }
    }
    while (*((void *)this + 160));
  }
  unsigned int v6 = (char *)this + 1200;
  uint64_t v7 = *((void *)this + 151);
  memset(v16, 0, sizeof(v16));
  int v17 = 1065353216;
  uint64_t v12 = v7;
  uint64_t v13 = v7;
  unsigned int v14 = (char *)this + 1200;
  char v15 = 0;
  memset(v10, 0, sizeof(v10));
  int v11 = 1065353216;
  while ((char *)v7 != v6)
  {
    if ((char *)v7 == v14) {
      unsigned int v8 = 0;
    }
    else {
      unsigned int v8 = *(OZSceneNode **)(v7 + 16);
    }
    OZScene::addAllDependencies((uint64_t)this, v8);
    uint64_t v7 = *(void *)(v12 + 8);
    uint64_t v12 = v7;
    unsigned int v6 = (char *)this + 1200;
  }
  *((unsigned char *)this + 1578) = v2;
  if (atomic_exchange((atomic_uchar *volatile)this + 1808, 0)) {
    OZScene::computeLockDependencies(this);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v10);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v16);
}

void sub_1B7C1A904(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::getDependantNodes(OZScene *this, unsigned int a2)
{
  uint64_t v2 = (char *)*((void *)this + 159);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (char *)this + 1272;
  do
  {
    unsigned int v4 = *((_DWORD *)v2 + 8);
    BOOL v5 = v4 >= a2;
    if (v4 >= a2) {
      unsigned int v6 = (char **)v2;
    }
    else {
      unsigned int v6 = (char **)(v2 + 8);
    }
    if (v5) {
      uint64_t v3 = v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 != (char *)this + 1272 && *((_DWORD *)v3 + 8) <= a2) {
    return *((void *)v3 + 5);
  }
  else {
    return 0;
  }
}

const void *OZScene::getCloneNodes(uint64_t *a1, unsigned int a2, uint64_t **a3)
{
  double result = (const void *)OZScene::OZNodeMap::operator[]((uint64_t)(a1 + 161), a2);
  if (result)
  {
    if (result)
    {
      unsigned int v6 = (void *)result;
      OZScene::begin_t<OZCloneGenerator,false,true>(a1, (uint64_t)v29);
      uint64_t v7 = a1[151];
      memset(v27, 0, sizeof(v27));
      int v28 = 1065353216;
      long long v23 = a1 + 150;
      uint64_t v24 = v7;
      long long v25 = a1 + 150;
      char v26 = 0;
      unsigned int v8 = a3 + 1;
      while ((uint64_t *)v29[0] != v23)
      {
        if (v29[0] != v29[2])
        {
          BOOL v9 = *(const void **)(v29[0] + 16);
          if (v9)
          {
            if (v10)
            {
              int v11 = v10;
              if (OZCloneGenerator::getSourceNode(v10) == v6)
              {
                unsigned int v12 = *((_DWORD *)v11 + 20);
                uint64_t v13 = *v8;
                if (!*v8) {
                  goto LABEL_20;
                }
                unsigned int v14 = a3 + 1;
                do
                {
                  unsigned int v15 = *((_DWORD *)v13 + 7);
                  BOOL v16 = v15 >= v12;
                  if (v15 >= v12) {
                    int v17 = v13;
                  }
                  else {
                    int v17 = v13 + 1;
                  }
                  if (v16) {
                    unsigned int v14 = (uint64_t **)v13;
                  }
                  uint64_t v13 = (uint64_t *)*v17;
                }
                while (*v17);
                if (v14 == v8 || v12 < *((_DWORD *)v14 + 7))
                {
LABEL_20:
                  unsigned int v22 = *((_DWORD *)v11 + 20);
                  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a3, &v22, &v22);
                  OZScene::getCloneNodes(a1, *((unsigned int *)v11 + 20), a3);
                }
              }
            }
          }
        }
        OZObject::iterator_t<OZCloneGenerator,false,true,OZObject::defaultValidator>::operator++(v29);
      }
      if (v18)
      {
        char v19 = v18;
        uint64_t v20 = (*(uint64_t (**)(void *))(*(void *)v18 + 1024))(v18);
        uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v19 + 1032))(v19);
        while (v20 != v21)
        {
          OZScene::getCloneNodes(a1, *(unsigned int *)(*(void *)(v20 + 16) + 80), a3);
          uint64_t v20 = *(void *)(v20 + 8);
        }
      }
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v27);
      return (const void *)std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v30);
    }
  }
  return result;
}

void sub_1B7C1AC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v16);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *OZScene::begin_t<OZCloneGenerator,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    unsigned int v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZCloneGenerator,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZCloneGenerator,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    }
  }
  return result;
}

void sub_1B7C1ACFC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<OZCloneGenerator,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    uint64_t v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t OZScene::getReferencedNodes(uint64_t result, int a2, uint64_t **a3)
{
  uint64_t v3 = *(void **)(result + 1264);
  unsigned int v4 = (void *)(result + 1272);
  if (v3 != (void *)(result + 1272))
  {
    uint64_t v7 = result;
    unsigned int v8 = a3 + 1;
    do
    {
      BOOL v9 = (void *)v3[5];
      unsigned int v12 = (void *)*v9;
      int v10 = v9 + 1;
      int v11 = v12;
      if (v12 != v10)
      {
        unsigned int v13 = *((_DWORD *)v3 + 8);
        while (1)
        {
          unsigned int v24 = v13;
          if (*((_DWORD *)v11 + 7) == a2)
          {
            uint64_t v14 = *v8;
            if (!*v8) {
              break;
            }
            unsigned int v15 = v8;
            do
            {
              unsigned int v16 = *(_DWORD *)(v14 + 28);
              BOOL v17 = v16 >= v13;
              if (v16 >= v13) {
                int v18 = (uint64_t *)v14;
              }
              else {
                int v18 = (uint64_t *)(v14 + 8);
              }
              if (v17) {
                unsigned int v15 = (void *)v14;
              }
              uint64_t v14 = *v18;
            }
            while (*v18);
            if (v15 == v8 || v13 < *((_DWORD *)v15 + 7)) {
              break;
            }
          }
          char v19 = (void *)v11[1];
          if (v19)
          {
            do
            {
              uint64_t v20 = v19;
              char v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              uint64_t v20 = (void *)v11[2];
              BOOL v21 = *v20 == (void)v11;
              int v11 = v20;
            }
            while (!v21);
          }
          int v11 = v20;
          if (v20 == v10) {
            goto LABEL_25;
          }
        }
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a3, &v24, &v24);
        double result = OZScene::getReferencedNodes(v7, v24, a3);
      }
LABEL_25:
      unsigned int v22 = (void *)v3[1];
      if (v22)
      {
        do
        {
          long long v23 = v22;
          unsigned int v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          long long v23 = (void *)v3[2];
          BOOL v21 = *v23 == (void)v3;
          uint64_t v3 = v23;
        }
        while (!v21);
      }
      uint64_t v3 = v23;
    }
    while (v23 != v4);
  }
  return result;
}

uint64_t **OZScene::getImmediatelyReferencedNodes(uint64_t **result, int a2, uint64_t **a3)
{
  uint64_t v3 = result[158];
  unsigned int v4 = result + 159;
  if (v3 != (uint64_t *)(result + 159))
  {
    do
    {
      uint64_t v7 = (void *)v3[5];
      int v10 = (void *)*v7;
      unsigned int v8 = v7 + 1;
      BOOL v9 = v10;
      if (v10 != v8)
      {
        while (*((_DWORD *)v9 + 7) != a2)
        {
          int v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              unsigned int v12 = v11;
              int v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              unsigned int v12 = (void *)v9[2];
              BOOL v13 = *v12 == (void)v9;
              BOOL v9 = v12;
            }
            while (!v13);
          }
          BOOL v9 = v12;
          if (v12 == v8) {
            goto LABEL_12;
          }
        }
        double result = std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a3, (unsigned int *)v3 + 8, (_DWORD *)v3 + 8);
      }
LABEL_12:
      uint64_t v14 = (uint64_t *)v3[1];
      if (v14)
      {
        do
        {
          unsigned int v15 = v14;
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          unsigned int v15 = (uint64_t *)v3[2];
          BOOL v13 = *v15 == (void)v3;
          uint64_t v3 = v15;
        }
        while (!v13);
      }
      uint64_t v3 = v15;
    }
    while (v15 != (uint64_t *)v4);
  }
  return result;
}

void *OZObject::reverse_iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator*(void *a1)
{
  if (*a1 == a1[2]) {
    return 0;
  }
  uint64_t v1 = *(const void **)(*a1 + 16);
  if (!v1) {
    return 0;
  }
  else {
}
  }

void *OZObject::reverse_iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(void *a1)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (void *)a1[2];
  unsigned int v4 = (void *)*a1;
  if ((void *)*a1 == v3)
  {
LABEL_6:
    *a1 = v2;
  }
  else
  {
    while (1)
    {
      unsigned int v4 = (void *)*v4;
      *a1 = v4;
      if (v4 == v2) {
        break;
      }
      BOOL v5 = (const void *)v4[2];
      if (v5)
      {
        {
          break;
        }
      }
      if (v4 == v3) {
        goto LABEL_6;
      }
    }
  }
  return a1;
}

float64x2_t OZScene::getBounds(uint64_t a1, float64x2_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 344);
  v3.i64[0] = (int)v2;
  v3.i64[1] = SHIDWORD(v2);
  float64x2_t result = vcvtq_f64_s64(v3);
  __asm { FMOV            V1.2D, #-0.5 }
  *a2 = vmulq_f64(result, _Q1);
  a2[1] = result;
  return result;
}

float64x2_t non-virtual thunk to'OZScene::getBounds(uint64_t a1, float64x2_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 336);
  v3.i64[0] = (int)v2;
  v3.i64[1] = SHIDWORD(v2);
  float64x2_t result = vcvtq_f64_s64(v3);
  __asm { FMOV            V1.2D, #-0.5 }
  *a2 = vmulq_f64(result, _Q1);
  a2[1] = result;
  return result;
}

double OZScene::getPixelAspectRatioRN(OZScene *this)
{
  return *((double *)this + 48);
}

double non-virtual thunk to'OZScene::getPixelAspectRatioRN(OZScene *this)
{
  return *((double *)this + 47);
}

void OZScene::getHashForState(OZScene *this, PCSerializerWriteStream *a2, const OZRenderParams *a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](this);
  BOOL v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v3;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  {
    Hash = (_DWORD *)OZRenderParams::getHash(v5);
    int v10 = Hash[1];
    v18[0] = *Hash;
    v18[1] = v10;
    int v11 = Hash[3];
    int v19 = Hash[2];
    int v20 = v11;
    v17[0] = v18[0];
    v17[1] = v10;
    _OWORD v17[2] = v19;
    v17[3] = v11;
    StaticHash = OZScene::getStaticHash((OZScene *)v8, v7);
    PCHash128::operator+=(v17, (int *)StaticHash);
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v16);
    PCMutex::lock((PCMutex *)(v8 + 1616));
    BOOL v13 = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(v8 + 1688, (const PCHash128 *)v18);
    if ((void *)(v8 + 1696) == v13)
    {
      PCMutex::unlock((PCMutex *)(v8 + 1616));
    }
    else
    {
      unsigned int v15 = (PCMutex *)v13[6];
      uint64_t v14 = (std::__shared_weak_count *)v13[7];
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      PCMutex::unlock((PCMutex *)(v8 + 1616));
      PCMutex::lock(v15);
      PCMutex::unlock(v15);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
    operator new();
  }
  __cxa_bad_cast();
}

void sub_1B7C1B5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZScene::getHashForStateRN(uint64_t a1, PCSerializerWriteStream *a2, const OZRenderParams *a3)
{
}

os_unfair_lock_s *OZScene::getStaticHash(OZScene *this, PCSerializerWriteStream *a2)
{
  uint64_t v2 = (os_unfair_lock_s *)MEMORY[0x1F4188790](this);
  unsigned int v4 = v3;
  BOOL v5 = v2;
  v26[520] = *MEMORY[0x1E4F143B8];
  unsigned int v6 = v2 + 428;
  long long v25 = v2 + 428;
  PCSpinLock::lock(v2 + 428);
  if (!(v5[400]._os_unfair_lock_opaque | v5[399]._os_unfair_lock_opaque | v5[401]._os_unfair_lock_opaque | v5[402]._os_unfair_lock_opaque))
  {
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v24);
    if (!v7) {
      __cxa_bad_cast();
    }
    uint64_t v8 = v7;
    OZScene::begin_t<OZElement,false,false>(v5, (uint64_t)v22);
    uint64_t v9 = *(void *)&v5[302]._os_unfair_lock_opaque;
    memset(v20, 0, sizeof(v20));
    int v21 = 1065353216;
    unsigned int v16 = v5 + 300;
    uint64_t v17 = v9;
    int v18 = v5 + 300;
    char v19 = 0;
    (*(void (**)(__n128 *))(v8->n128_u64[0] + 40))(v8);
    while ((os_unfair_lock_s *)v22[0] != v16)
    {
      if (v22[0] != v22[2])
      {
        int v10 = *(const void **)(v22[0] + 16);
        if (v10)
        {
          if (v11)
          {
            unsigned int v12 = v11;
            PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v26);
            v15[0] = (uint64_t *)v15;
            v15[1] = (uint64_t *)v15;
            _OWORD v15[2] = 0;
            StaticHash = (int *)OZObjectManipulator::getStaticHash(v12 + 1, v26, v15);
            PCHash128::operator+=((int *)&v24, StaticHash);
            std::__list_imp<unsigned int>::clear(v15);
            PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v26);
          }
        }
      }
      OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(v22);
    }
    OZScene::getStaticLightHash(v26, (OZScene *)v5);
    PCHash128::operator+=((int *)&v24, (int *)v26);
    OZScene::getStaticCameraHash(v26, (OZScene *)v5);
    PCHash128::operator+=((int *)&v24, (int *)v26);
    OZScene::getStaticProjectNodeHash(v26, (OZScene *)v5);
    PCHash128::operator+=((int *)&v24, (int *)v26);
    PCHashWriteStream::setHash(v8, &v24);
    *(_OWORD *)&v5[399]._os_unfair_lock_opaque = *(_OWORD *)PCHashWriteStream::getHash((int8x8_t *)v8)->i8;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v20);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v23);
  }
  PCSpinLock::unlock(v6);
  return v5 + 399;
}

void sub_1B7C1B974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,os_unfair_lock_s *a33)
{
}

os_unfair_lock_s *non-virtual thunk to'OZScene::getStaticHashRN(uint64_t a1, PCSerializerWriteStream *a2)
{
  return OZScene::getStaticHash((OZScene *)(a1 - 8), a2);
}

uint64_t OZScene::hitCheckDepthOrdered(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  long long v43 = 0;
  int v44 = 0;
  uint64_t v45 = 0;
  std::vector<std::pair<OZSceneNode *,PCVector3<double>>>::resize((uint64_t *)&v43, (a7[1] - *a7) >> 3);
  uint64_t v13 = *a7;
  if ((int)((unint64_t)(a7[1] - *a7) >> 3) >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = (uint64_t)v43;
    do
    {
      uint64_t v17 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v13 + 8 * v15)
                                                                                           + 936))(*(void *)(v13 + 8 * v15), a2, a3, a4, v16 + v14 + 8, a6);
      uint64_t v16 = (uint64_t)v43;
      *(void *)&v43[v14] = v17;
      ++v15;
      uint64_t v13 = *a7;
      v14 += 32;
    }
    while (v15 < (int)((unint64_t)(a7[1] - *a7) >> 3));
  }
  *(void *)&unsigned char v42[40] = 0x3FF0000000000000;
  *(void *)uint64_t v42 = 0x3FF0000000000000;
  uint64_t v39 = 0x3FF0000000000000;
  double v36 = 1.0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v40 = 0u;
  float64x2_t v41 = 0u;
  memset(&v42[8], 0, 32);
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a4 + 24))(&v34, a4);
  for (uint64_t i = 0; i != 128; i += 32)
  {
    char v19 = (_OWORD *)((char *)&v36 + i);
    long long v20 = *(long long *)((char *)&v34 + i + 16);
    _OWORD *v19 = *(long long *)((char *)&v34 + i);
    v19[1] = v20;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a4 + 632))(a4) == 1)
  {
    double v21 = (*(double (**)(uint64_t))(*(void *)a4 + 504))(a4);
    if (v21 <= -0.0000001 || v21 >= 0.0000001)
    {
      double v22 = (*(double (**)(uint64_t))(*(void *)a4 + 320))(a4);
      if (v22 != 0.0)
      {
        float64x2_t v41 = vsubq_f64(v41, vmulq_n_f64(*(float64x2_t *)&v42[16], v22));
        *(float64x2_t *)uint64_t v42 = vsubq_f64(*(float64x2_t *)v42, vmulq_n_f64(*(float64x2_t *)&v42[32], v22));
      }
    }
  }
  uint64_t v23 = v43;
  __n128 v24 = v44;
  if ((int)((unint64_t)(v44 - v43) >> 5) >= 1)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    double v28 = 3.40282347e38;
    do
    {
      if (*(void *)&v23[v25])
      {
        long long v34 = *(_OWORD *)&v23[v25 + 8];
        double v35 = *(double *)&v23[v25 + 24];
        PCMatrix44Tmpl<double>::transform<double>(&v36, (double *)&v34, (double *)&v34);
        double v29 = sqrt(*(double *)&v34 * *(double *)&v34 + *((double *)&v34 + 1) * *((double *)&v34 + 1) + v35 * v35);
        if (v29 < v28)
        {
          double v28 = v29;
          int v27 = v26;
        }
        uint64_t v23 = v43;
        __n128 v24 = v44;
      }
      ++v26;
      v25 += 32;
    }
    while (v26 < (int)((unint64_t)(v24 - v23) >> 5));
    if (v27 != -1)
    {
      uint64_t v30 = &v23[32 * v27];
      long long v31 = *(_OWORD *)(v30 + 8);
      *(void *)(a5 + 16) = *((void *)v30 + 3);
      *(_OWORD *)a5 = v31;
      uint64_t v32 = *(void *)v30;
      if (!v23) {
        return v32;
      }
      goto LABEL_22;
    }
  }
  uint64_t v32 = 0;
  if (v23)
  {
LABEL_22:
    int v44 = v23;
    operator delete(v23);
  }
  return v32;
}

void sub_1B7C1BD38(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!*(void *)(v1 - 120)) {
    JUMPOUT(0x1B7C1BD10);
  }
  JUMPOUT(0x1B7C1BD08);
}

void sub_1B7C1BD50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(void *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<OZSceneNode *,PCVector3<double>>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = (a1[1] - *a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      a1[1] = *a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<std::pair<OZSceneNode *,PCVector3<double>>>::__append(a1, a2 - v2);
  }
}

uint64_t OZScene::OZNodeMap::operator[](uint64_t a1, unsigned int a2)
{
  unsigned int v7 = a2;
  PCSpinLock::lock((os_unfair_lock_t)a1);
  if (*(_DWORD *)(a1 + 48) == a2)
  {
    uint64_t v4 = *(void *)(a1 + 56);
  }
  else
  {
    BOOL v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::find<unsigned int>((void *)(a1 + 8), &v7);
    if (v5) {
      uint64_t v4 = v5[3];
    }
    else {
      uint64_t v4 = 0;
    }
    *(_DWORD *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v4;
  }
  PCSpinLock::unlock((os_unfair_lock_t)a1);
  return v4;
}

void sub_1B7C1BE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_unfair_lock_s *a9)
{
}

uint64_t OZScene::getAllDropZones@<X0>(OZScene *this@<X0>, char **a2@<X8>)
{
  OZScene::begin_t<OZImageElement,false,true>((uint64_t *)this, (uint64_t)v21);
  memset(v19, 0, sizeof(v19));
  int v20 = 1065353216;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  while ((OZScene *)v21[0] != (OZScene *)((char *)this + 1200))
  {
    if (v21[0] == v21[2] || (uint64_t v4 = *(const void **)(v21[0] + 16)) == 0) {
      BOOL v5 = 0;
    }
    else {
    if (OZImageElement::isDropZone(v5))
    {
      int v6 = *((_DWORD *)v5 + 20);
      uint64_t v8 = a2[1];
      unint64_t v7 = (unint64_t)a2[2];
      if ((unint64_t)v8 >= v7)
      {
        int v10 = *a2;
        uint64_t v11 = (v8 - *a2) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v7 - (void)v10;
        if (v13 >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a2 + 2), v14);
          int v10 = *a2;
          uint64_t v8 = a2[1];
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v16 = &v15[4 * v11];
        *(_DWORD *)uint64_t v16 = v6;
        uint64_t v9 = v16 + 4;
        while (v8 != v10)
        {
          int v17 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v16 - OZDocument::~OZDocument(this - 1) = v17;
          v16 -= 4;
        }
        *a2 = v16;
        a2[1] = v9;
        a2[2] = &v15[4 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v8 = v6;
        uint64_t v9 = v8 + 4;
      }
      a2[1] = v9;
    }
    OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::operator++(v21);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v19);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v22);
}

void sub_1B7C1C024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  int v17 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v17;
    operator delete(v17);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v15);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZScene::getAllDropZonesMap@<X0>(OZScene *this@<X0>, uint64_t a2@<X8>)
{
  OZScene::begin_t<OZImageElement,false,true>((uint64_t *)this, (uint64_t)v23);
  uint64_t v4 = *((void *)this + 151);
  memset(v21, 0, sizeof(v21));
  int v22 = 1065353216;
  int v17 = (char *)this + 1200;
  uint64_t v18 = v4;
  char v19 = (char *)this + 1200;
  char v20 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  unsigned int v16 = 0;
  while (*(char **)v23 != v17)
  {
    if (*(void *)v23 == *(void *)&v23[16] || (BOOL v5 = *(const void **)(*(void *)v23 + 16)) == 0) {
      int v6 = 0;
    }
    else {
    if (OZImageElement::isDropZone(v6))
    {
      int v7 = *((_DWORD *)v6 + 20);
      *(void *)uint64_t v13 = &v16;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)a2, &v16, (uint64_t)&std::piecewise_construct, (unsigned int **)v13)+ 8) = v7;
      if (OZImageElement::getDropZoneInputID(v6))
      {
        OZScene::begin_t<OZImageElement,false,true>((uint64_t *)this, (uint64_t)v13);
        *(_OWORD *)uint64_t v23 = *(_OWORD *)v13;
        *(_OWORD *)&v23[9] = *(_OWORD *)&v13[9];
        int v25 = v15;
        std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v24, v14[2], 0);
        std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v14);
        while (*(char **)v23 != v17)
        {
          if (*(void *)v23 == *(void *)&v23[16] || (uint64_t v8 = *(const void **)(*(void *)v23 + 16)) == 0) {
            uint64_t v9 = 0;
          }
          else {
          if (OZImageElement::isDropZone(v9))
          {
            int v10 = *((_DWORD *)v9 + 20);
            unsigned int DropZoneInputID = OZImageElement::getDropZoneInputID(v9);
            *(void *)uint64_t v13 = &DropZoneInputID;
            *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)a2, &DropZoneInputID, (uint64_t)&std::piecewise_construct, (unsigned int **)v13)+ 8) = v10;
          }
          OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)v23);
        }
        break;
      }
      ++v16;
    }
    OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::operator++((uint64_t *)v23);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v21);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v24);
}

void sub_1B7C1C2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a14);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v33, *(void **)(v33 + 8));
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v34);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t OZScene::reloadResources(OZScene *this, PGContext *a2)
{
  OZScene::begin_t<OZElement,false,true>((uint64_t *)this, (uint64_t)v8);
  if (v8[0] != v8[2])
  {
    uint64_t v3 = *(const void **)(v8[0] + 16);
    if (v3)
    {
            i;
      {
        (*(void (**)(void *, PGContext *))(*(void *)i + 1456))(i, a2);
        BOOL v5 = OZObject::iterator_t<OZElement,false,true,OZObject::defaultValidator>::operator++(v8);
        if (*v5 == v5[2]) {
          break;
        }
        int v6 = *(const void **)(*v5 + 16);
        if (!v6) {
          break;
        }
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v9);
}

void sub_1B7C1C484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZScene::markFactoriesForSerialization(OZScene *this, PCSerializerWriteStream *a2)
{
  uint64_t v4 = *((void *)this + 151);
  BOOL v5 = (char *)this + 1200;
  memset(v14, 0, sizeof(v14));
  int v15 = 1065353216;
  uint64_t v10 = v4;
  uint64_t v11 = v4;
  unint64_t v12 = (char *)this + 1200;
  char v13 = 0;
  memset(v8, 0, sizeof(v8));
  int v9 = 1065353216;
  int v7 = (char *)this + 1200;
  while ((char *)v4 != v5)
  {
    (*(void (**)(void, PCSerializerWriteStream *, void))(**(void **)(v4 + 16) + 456))(*(void *)(v4 + 16), a2, 0);
    uint64_t v4 = *(void *)(v10 + 8);
    uint64_t v10 = v4;
    BOOL v5 = v7;
  }
  OZPublishSettings::markFactoriesForSerialization((OZScene *)((char *)this + 720), a2, 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v8);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v14);
}

void sub_1B7C1C590(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::writeHeader(OZScene *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZSceneScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 60);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZScene::writeBody(OZScene *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  __n128 v62 = 0uLL;
  uint64_t v63 = 0;
  uint64_t v8 = (char *)this + 336;
  OZSceneSettings::getFrameDuration((OZScene *)((char *)this + 336), &v62);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZSceneScope);
  int Size = PVPerfStats::FrameStats::GetSize((OZScene *)((char *)this + 1816));
  uint64_t v10 = (PVPerfStats::FrameStats *)PCGetDefaultRenderModel();
  if (Size != PVPerfStats::FrameStats::GetSize(v10))
  {
    uint64_t v11 = PVPerfStats::FrameStats::GetSize((OZScene *)((char *)this + 1816));
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 10);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v11);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  (*(void (**)(char *, PCSerializerWriteStream *, void))(*(void *)v8 + 16))(v8, a2, 0);
  (*(void (**)(char *, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v8 + 24))(v8, a2, 0, 1, a5);
  unint64_t v12 = (OZPreferenceManager *)(*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  char v13 = (TXParagraphStyleFolder_Factory *)OZPreferenceManager::Instance(v12);
  if (TXParagraphStyleFolder_Factory::version(v13))
  {
    {
      OZExportSettings::OZExportSettings((OZExportSettings *)&OZScene::writeBody(PCSerializerWriteStream &,BOOL,BOOL,BOOL)::defaultExportSettings);
      __cxa_atexit((void (*)(void *))OZExportSettings::~OZExportSettings, &OZScene::writeBody(PCSerializerWriteStream &,BOOL,BOOL,BOOL)::defaultExportSettings, &dword_1B73F3000);
    }
    uint64_t v14 = (char *)this + 640;
    if (OZExportSettings::operator!=((uint64_t)this + 640, (uint64_t)&OZScene::writeBody(PCSerializerWriteStream &,BOOL,BOOL,BOOL)::defaultExportSettings))
    {
      (*(void (**)(char *, PCSerializerWriteStream *, void))(*(void *)v14 + 16))((char *)this + 640, a2, 0);
      (*(void (**)(char *, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v14 + 24))((char *)this + 640, a2, 0, 1, a5);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    }
  }
  (*(void (**)(char *, PCSerializerWriteStream *, void))(*((void *)this + 90) + 16))((char *)this + 720, a2, 0);
  (*(void (**)(char *, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*((void *)this + 90) + 24))((char *)this + 720, a2, 0, 1, a5);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v61 = *((void *)this + 149);
  long long v60 = *(_OWORD *)((char *)this + 1176);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *, long long *))(*(void *)a2 + 112))(a2, &v60);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v15 = *((void *)this + 153);
  if (v15)
  {
    uint64_t v16 = *(unsigned int *)(v15 + 80);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 2);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v16);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  uint64_t v17 = *((void *)this + 154);
  if (v17)
  {
    uint64_t v18 = *(unsigned int *)(v17 + 80);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 3);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v18);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 4);
  long long v55 = *(_OWORD *)((char *)this + 1352);
  uint64_t v56 = (char *)*((void *)this + 171);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, long long *))(*(void *)a2 + 208))(a2, 1, &v55);
  long long v55 = *((_OWORD *)this + 86);
  uint64_t v56 = (char *)*((void *)this + 174);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, long long *))(*(void *)a2 + 208))(a2, 2, &v55);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 5);
  long long v55 = *(_OWORD *)((char *)this + 1400);
  uint64_t v56 = (char *)*((void *)this + 177);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, long long *))(*(void *)a2 + 208))(a2, 1, &v55);
  long long v55 = *((_OWORD *)this + 89);
  uint64_t v56 = (char *)*((void *)this + 180);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, long long *))(*(void *)a2 + 208))(a2, 2, &v55);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v19 = *((unsigned int *)this + 398);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 9);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v19);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v20 = *((void *)this + 142);
  if (v20)
  {
    (*(void (**)(void, PCSerializerWriteStream *, void))(*(void *)v20 + 16))(*((void *)this + 142), a2, 0);
    (*(void (**)(uint64_t, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v20 + 24))(v20, a2, 0, 1, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  (*(void (**)(char *, PCSerializerWriteStream *, void))(*((void *)this + 189) + 16))((char *)this + 1512, a2, 0);
  (*(void (**)(char *, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*((void *)this + 189) + 24))((char *)this + 1512, a2, 0, 1, 1);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  double v21 = (char *)*((void *)this + 151);
  memset(v58, 0, sizeof(v58));
  int v59 = 1065353216;
  *(void *)&long long v55 = v21;
  *((void *)&v55 + OZDocument::~OZDocument(this - 1) = v21;
  uint64_t v56 = (char *)this + 1200;
  char v57 = 0;
  memset(v53, 0, sizeof(v53));
  int v54 = 1065353216;
  int v49 = (char *)this + 1200;
  uint64_t v50 = v21;
  long long v51 = (char *)this + 1200;
  char v52 = 0;
  if (v21 != (char *)this + 1200)
  {
    while (v21 != v56)
    {
      uint64_t v22 = *((void *)v21 + 2);
      if (!v22
      {
        goto LABEL_20;
      }
LABEL_22:
      double v21 = *(char **)(v55 + 8);
      *(void *)&long long v55 = v21;
      if (v21 == v49) {
        goto LABEL_23;
      }
    }
    uint64_t v22 = 0;
LABEL_20:
    if (!OZChannelBase::testFlag((OZChannelBase *)(v22 + 56), 8))
    {
      uint64_t v24 = *(void *)(v22 + 48);
      uint64_t v23 = v22 + 48;
      (*(void (**)(uint64_t, PCSerializerWriteStream *, void))(v24 + 16))(v23, a2, 0);
      (*(void (**)(uint64_t, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v23 + 24))(v23, a2, 0, 1, a5);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    }
    goto LABEL_22;
  }
LABEL_23:
  OZScene::begin_t<OZAudioLayer,false,false>(this, (uint64_t)v47);
  char v25 = 0;
  uint64_t v26 = *((void *)this + 151);
  memset(v45, 0, sizeof(v45));
  int v46 = 1065353216;
  float64x2_t v41 = (char *)this + 1200;
  uint64_t v42 = v26;
  long long v43 = (char *)this + 1200;
  char v44 = 0;
  while ((char *)v47[0] != v41)
  {
    if (v47[0] == v47[2] || (int v27 = *(const void **)(v47[0] + 16)) == 0)
    {
      double v28 = 0;
      if (v25) {
        goto LABEL_31;
      }
LABEL_30:
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 224))(a2);
      goto LABEL_31;
    }
    if ((v25 & 1) == 0) {
      goto LABEL_30;
    }
LABEL_31:
    if (!OZChannelBase::testFlag((OZChannelBase *)(v28 + 56), 8))
    {
      uint64_t v30 = *((void *)v28 + 6);
      double v29 = v28 + 48;
      (*(void (**)(char *, PCSerializerWriteStream *, void))(v30 + 16))(v29, a2, 0);
      (*(void (**)(char *, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v29 + 24))(v29, a2, 0, 1, a5);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    }
    char v25 = 1;
    OZObject::iterator_t<OZAudioLayer,false,false,OZObject::defaultValidator>::operator++(v47);
  }
  OZScene::begin_t<OZFootageLayer,false,false>(this, (uint64_t)v39);
  char v31 = 0;
  int v38 = 1065353216;
  memset(v37, 0, sizeof(v37));
  while ((OZScene *)v39[0] != (OZScene *)((char *)this + 1200))
  {
    if (v39[0] == v39[2] || (uint64_t v32 = *(const void **)(v39[0] + 16)) == 0)
    {
      uint64_t v33 = 0;
      if (v31) {
        goto LABEL_42;
      }
LABEL_41:
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 224))(a2);
      goto LABEL_42;
    }
    if ((v31 & 1) == 0) {
      goto LABEL_41;
    }
LABEL_42:
    if (!OZChannelBase::testFlag((OZChannelBase *)(v33 + 56), 8))
    {
      uint64_t v35 = *((void *)v33 + 6);
      uint64_t v34 = v33 + 48;
      (*(void (**)(char *, PCSerializerWriteStream *, void))(v35 + 16))(v34, a2, 0);
      (*(void (**)(char *, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*(void *)v34 + 24))(v34, a2, 0, 1, a5);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    }
    char v31 = 1;
    OZObject::iterator_t<OZFootageLayer,false,false,OZObject::defaultValidator>::operator++(v39);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v37);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v40);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v45);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v48);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v53);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v58);
}

void sub_1B7C1D3A0(_Unwind_Exception *a1)
{
}

void *OZScene::begin_t<OZAudioLayer,false,false>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZAudioLayer,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZAudioLayer,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
  }
  return result;
}

void sub_1B7C1D4CC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *OZObject::iterator_t<OZAudioLayer,false,false,OZObject::defaultValidator>::operator++(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = *(void *)(*a1 + 8);
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    uint64_t v4 = *(const void **)(v3 + 16);
    if (v4
    {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 8);
  }
  return a1;
}

uint64_t OZScene::parseBegin(OZScene *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZSceneScope);
  *((void *)this + 193) = 0;
  *((unsigned char *)this + 1576) = 1;
  *((_DWORD *)this + 443) = 0;
  OZScene::begin_t<OZProjectNode,false,false>(this, (uint64_t)v6);
  if (v6[0] != v6[2])
  {
    uint64_t v3 = *(const void **)(v6[0] + 16);
    if (v3)
    {
      {
        OZScene::removeRootNode(this, v4);
        if (v4) {
          (*(void (**)(OZSceneNode *))(*(void *)v4 + 8))(v4);
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v7);
  return 1;
}

void sub_1B7C1D6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void OZScene::renumberObjectsWithDuplicateIDs(OZScene *this, const void ****a2)
{
  if (a2)
  {
    if (v4)
    {
      BOOL v5 = v4;
      unsigned int var3 = v4->var3;
      uint64_t v6 = OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, var3);
      uint64_t ObjectManipulator = (OZChannelBase *)OZChannelBase::getObjectManipulator(v5);
      if ((OZChannelBase *)v6 != ObjectManipulator)
      {
        unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(ObjectManipulator);
        OZChannelBase::setID(v5, NextUniqueID);
        v15[0] = 0;
        v15[1] = 0;
        uint64_t v14 = (uint64_t *)v15;
        p_unsigned int var3 = &var3;
        *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(&v14, &var3, (uint64_t)&std::piecewise_construct, &p_var3)+ 8) = NextUniqueID;
        uint64_t v9 = OZChannelBase::getObjectManipulator(v5);
        (*(void (**)(uint64_t, uint64_t **))(*(void *)v9 + 360))(v9, &v14);
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v14, v15[0]);
      }
    }
    uint64_t v10 = a2[14];
    if (v10)
    {
      unint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      if (*v10 != v11)
      {
        do
        {
          if ((*((unsigned char *)*v12 + 57) & 0x10) != 0)
          {
            OZScene::renumberObjectsWithDuplicateIDs(this, v13);
            uint64_t v11 = v10[1];
          }
          ++v12;
        }
        while (v12 != v11);
      }
    }
  }
}

void sub_1B7C1D8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t OZScene::parseEnd(OZScene *this, const OZChannelFolder *a2)
{
  uint64_t v3 = (void *)((char *)this + 920);
  OZChannelBase::updateIDGenerator((OZChannelBase *)((char *)this + 920), a2);
  OZRenderState __p = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(&__p, *((const void **)this + 194), *((void *)this + 195), (uint64_t)(*((void *)this + 195) - *((void *)this + 194)) >> 3);
  *((void *)this + 195) = *((void *)this + 194);
  uint64_t v4 = __p;
  BOOL v5 = v22;
  if (__p != v22)
  {
    do
    {
      uint64_t v6 = (void *)*v4;
      uint64_t v7 = (const void ****)(*(uint64_t (**)(void))(*(void *)*v4 + 216))(*v4);
      OZScene::renumberObjectsWithDuplicateIDs(this, v7);
      if (v8) {
        OZScene::registerNode(this, v8);
      }
      else {
        OZScene::registerObject(this, (OZObjectManipulator *)v6);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  *((void *)this + 153) = OZScene::getNode(this, *((_DWORD *)this + 386));
  Node = OZScene::getNode(this, *((_DWORD *)this + 387));
  if (Node) {
  *((void *)this + 154) = Node;
  }
  *((unsigned char *)this + 1576) = 0;
  OZScene::begin_t<OZProjectNode,false,false>(this, (uint64_t)v19);
  if (v19[0] == v19[2] {
    || (uint64_t v10 = *(const void **)(v19[0] + 16)) == 0
  }
  {
    PCURL::PCURL((PCURL *)&v18, @"Project Node Name");
    unsigned int NextUniqueID = (const PCString *)OZChannelBase::getNextUniqueID(v11);
    char v13 = (OZSceneNode *)OZProjectNode::create((OZProjectNode *)&v18, NextUniqueID);
    PCString::~PCString(&v18);
    OZScene::addRootNode(this, v13);
  }
  for (uint64_t i = *((void *)this + 151); (OZScene *)i != (OZScene *)((char *)this + 1200); uint64_t i = *(void *)(i + 8))
    (*(void (**)(void))(**(void **)(i + 16) + 848))(*(void *)(i + 16));
  OZPublishSettings::didFinishLoadingIntoScene((OZScene *)((char *)this + 720));
  OZScene::has3DObjects(this, 1);
  OZScene::recalcDependencies(this);
  uint64_t ComputedWorkingGamut = OZScene::getComputedWorkingGamut(this);
  uint64_t v16 = OZSceneSettings::dynamicRangeTrackingEnabled((OZScene *)((char *)this + 336));
  OZScene::updateColorChannelsForWorkingGamut((char *)this, ComputedWorkingGamut, v16, v3);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v20);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_1B7C1DBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t OZScene::has3DObjects(OZScene *this, int a2)
{
  if (a2)
  {
    OZScene::begin_t<OZCamera,false,true>((uint64_t *)this, (uint64_t)v22);
    uint64_t v3 = *((void *)this + 151);
    memset(v20, 0, sizeof(v20));
    int v21 = 1065353216;
    uint64_t v16 = (char *)this + 1200;
    uint64_t v17 = v3;
    PCString v18 = (char *)this + 1200;
    char v19 = 0;
    while (1)
    {
      uint64_t v4 = v22[0];
      BOOL v5 = v16;
      if ((char *)v22[0] == v16) {
        break;
      }
      if (v22[0] != v22[2])
      {
        uint64_t v6 = *(const void **)(v22[0] + 16);
        if (v6)
        {
          {
            break;
          }
        }
      }
      OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::operator++(v22);
    }
    OZScene::begin_t<OZLight,false,true>((uint64_t *)this, (uint64_t)v14);
    memset(v12, 0, sizeof(v12));
    int v13 = 1065353216;
    while (1)
    {
      uint64_t v7 = v14[0];
      if ((OZScene *)v14[0] == (OZScene *)((char *)this + 1200)) {
        break;
      }
      if (v14[0] != v14[2])
      {
        uint64_t v8 = *(const void **)(v14[0] + 16);
        if (v8)
        {
          {
            break;
          }
        }
      }
      OZObject::iterator_t<OZLight,false,true,OZObject::defaultValidator>::operator++(v14);
    }
    BOOL v10 = (char *)v4 != v5 || v7 != (void)this + 1200;
    *((unsigned char *)this + 1768) = v10;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v12);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v15);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v20);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v23);
  }
  return *((unsigned __int8 *)this + 1768);
}

void sub_1B7C1DDF8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2 - 120);
  _Unwind_Resume(a1);
}

char *OZScene::updateColorChannelsForWorkingGamut(char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    uint64_t v7 = result;
    if (result)
    {
      uint64_t v8 = result;
      if (a2) {
        int v9 = a3;
      }
      else {
        int v9 = 1;
      }
      BOOL v10 = (OZChannel *)(result + 136);
      OZChannel::setSliderMin((OZChannel *)(result + 136), 0.0);
      if (v9) {
        double v11 = 1.0;
      }
      else {
        double v11 = 4.0;
      }
      OZChannel::setSliderMax(v10, v11);
      OZChannel::setSliderMin((OZChannel *)(v8 + 288), 0.0);
      OZChannel::setSliderMax((OZChannel *)(v8 + 288), v11);
      unint64_t v12 = (OZChannel *)(v8 + 440);
      OZChannel::setSliderMin(v12, 0.0);
      float64x2_t result = (char *)OZChannel::setSliderMax(v12, v11);
    }
    int v13 = (char ***)a4[14];
    if (v13)
    {
      uint64_t v15 = *v13;
      uint64_t v14 = v13[1];
      if (*v13 != v14)
      {
        do
        {
          float64x2_t result = *v15;
          if (((*v15)[57] & 0x10) != 0)
          {
            float64x2_t result = (char *)OZScene::updateColorChannelsForWorkingGamut(v7, a2, a3, v16);
            uint64_t v14 = v13[1];
          }
          ++v15;
        }
        while (v15 != v14);
      }
    }
  }
  return result;
}

uint64_t OZScene::getComputedWorkingGamut(OZScene *this)
{
  if (OZSceneSettings::dynamicRangeTrackingEnabled((OZScene *)((char *)this + 336)))
  {
    unsigned int SanitizedViewGamut = OZScene::getSanitizedViewGamut(this);
    if (SanitizedViewGamut >= 6) {
      return 1;
    }
    else {
      return dword_1B83814C0[SanitizedViewGamut];
    }
  }
  else
  {
    uint64_t v4 = (std::mutex *)((char *)this + 232);
    PCSharedMutex::lock_shared((std::mutex *)((char *)this + 232));
    uint64_t v3 = *((unsigned int *)this + 98);
    PCSharedMutex::unlock_shared(v4);
  }
  return v3;
}

uint64_t OZScene::dynamicRangeTrackingEnabled(OZScene *this)
{
  return OZSceneSettings::dynamicRangeTrackingEnabled((OZScene *)((char *)this + 336));
}

uint64_t OZScene::parseElement(OZScene *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCSharedCount::PCSharedCount(&v32);
  Float64 v30 = 0.0;
  uint64_t v31 = 0;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 > 60)
  {
    switch(v6)
    {
      case '=':
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v32);
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v31 + 4);
        *(_OWORD *)&v27.CMTimeValue value = xmmword_1B8380BE0;
        uint64_t SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v27);
        goto LABEL_26;
      case '>':
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)&v31);
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v32);
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v31 + 4);
        uint64_t v15 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v31);
        if (!v15) {
          break;
        }
        if (!v16) {
          break;
        }
        uint64_t SceneNode = (*(uint64_t (**)(void *, PCSharedCount *, void))(*(void *)v16 + 168))(v16, &v32, HIDWORD(v31));
LABEL_26:
        uint64_t v17 = (OZSceneNode *)SceneNode;
        if (SceneNode)
        {
          OZChannelBase::setID((OZChannelBase *)(SceneNode + 56), HIDWORD(v31));
          PCString v18 = operator new(0x18uLL);
          v18[1] = (char *)this + 1200;
          _DWORD v18[2] = v17;
          uint64_t v19 = *((void *)this + 150);
          void *v18 = v19;
          *(void *)(v19 + 8) = v18;
          *((void *)this + 15OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v18;
          ++*((void *)this + 152);
          uint64_t v20 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v17 + 640))(v17);
          OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 920), v20);
          int v21 = (OZChannelBase *)(*(uint64_t (**)(OZSceneNode *))(*(void *)v17 + 640))(v17);
          OZChannelBase::resetFlag(v21, 64, 0);
          OZScene::registerNode(this, v17);
          OZScene::addAllDependencies((uint64_t)this, v17);
          double v11 = (OZSceneNode *)((char *)v17 + 48);
LABEL_34:
          PCSerializerReadStream::pushHandler(a2, v11);
        }
        break;
      case '?':
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v32);
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v31 + 4);
        *(_OWORD *)&v27.CMTimeValue value = xmmword_1B8380BF0;
        uint64_t SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v27);
        goto LABEL_26;
      case '@':
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v32);
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v31 + 4);
        *(_OWORD *)&v27.CMTimeValue value = xmmword_1B8381340;
        uint64_t SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v27);
        goto LABEL_26;
      case 'B':
        PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v32);
        PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v31 + 4);
        *(_OWORD *)&v27.CMTimeValue value = xmmword_1B8380C00;
        uint64_t SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v27);
        goto LABEL_26;
      case 'H':
        uint64_t v22 = (PCSerializer *)*((void *)this + 142);
        if (!v22) {
          operator new();
        }
        PCSerializerReadStream::pushHandler(a2, v22);
        break;
      case 'J':
        double v11 = (OZScene *)((char *)this + 336);
        goto LABEL_34;
      case 'K':
        double v11 = (OZScene *)((char *)this + 1512);
        goto LABEL_34;
      default:
        break;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        if (*((_DWORD *)a2 + 26) >= 5u) {
          goto LABEL_52;
        }
        if ((*(unsigned int (**)(PCStreamElement *, Float64 *))(*(void *)a3 + 64))(a3, &v30))
        {
          double v7 = v30;
          memset(&v27, 0, sizeof(v27));
          OZSceneSettings::getFrameDuration((OZScene *)((char *)this + 336), (__n128 *)&v27);
          v27.CMTimeValue value = (uint64_t)(v7 * (double)v27.value);
          uint64_t v8 = (_OWORD *)((char *)this + 1176);
          *((void *)this + 149) = v27.epoch;
          long long v9 = *(_OWORD *)&v27.value;
LABEL_54:
          *uint64_t v8 = v9;
          break;
        }
        if (*((_DWORD *)a2 + 26) < 5u) {
          break;
        }
LABEL_52:
        if ((*(unsigned int (**)(PCStreamElement *, long long *))(*(void *)a3 + 88))(a3, &v28))
        {
          uint64_t v8 = (_OWORD *)((char *)this + 1176);
          *((void *)this + 149) = v29;
          long long v9 = v28;
          goto LABEL_54;
        }
        break;
      case 2:
        unint64_t v12 = (char *)this + 1544;
        goto LABEL_19;
      case 3:
        unint64_t v12 = (char *)this + 1548;
        goto LABEL_19;
      case 4:
        uint64_t v13 = *(void *)a3;
        if (*((_DWORD *)a2 + 26) < 5u)
        {
          if ((*(unsigned int (**)(PCStreamElement *, uint64_t, Float64 *))(v13 + 144))(a3, 1, &v30))
          {
            CMTime v26 = *(CMTime *)((char *)a2 + 112);
            operator*(&v26, &v27, v30);
            *(CMTime *)((char *)this + 1352) = v27;
          }
          if ((*(unsigned int (**)(PCStreamElement *, uint64_t, Float64 *))(*(void *)a3 + 144))(a3, 2, &v30))
          {
            CMTime v26 = *(CMTime *)((char *)a2 + 112);
            operator*(&v26, &v27, v30);
            *((_OWORD *)this + 86) = *(_OWORD *)&v27.value;
            CMTimeEpoch epoch = v27.epoch;
            goto LABEL_40;
          }
        }
        else
        {
          if ((*(unsigned int (**)(PCStreamElement *, uint64_t, long long *))(v13 + 168))(a3, 1, &v28))
          {
            *((void *)this + 17OZDocument::~OZDocument(this - 1) = v29;
            *(_OWORD *)((char *)this + 1352) = v28;
          }
          if ((*(unsigned int (**)(PCStreamElement *, uint64_t, long long *))(*(void *)a3 + 168))(a3, 2, &v28))
          {
            *((_OWORD *)this + 86) = v28;
            CMTimeEpoch epoch = v29;
LABEL_40:
            *((void *)this + 174) = epoch;
          }
        }
LABEL_41:
        uint64_t v24 = *(void *)a3;
        if (*((_DWORD *)a2 + 26) < 5u)
        {
          if ((*(unsigned int (**)(PCStreamElement *, uint64_t, Float64 *))(v24 + 144))(a3, 1, &v30))
          {
            CMTime v26 = *(CMTime *)((char *)a2 + 112);
            operator*(&v26, &v27, v30);
            *(CMTime *)((char *)this + 140OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v27;
          }
          if ((*(unsigned int (**)(PCStreamElement *, uint64_t, Float64 *))(*(void *)a3 + 144))(a3, 2, &v30))
          {
            CMTime v26 = *(CMTime *)((char *)a2 + 112);
            operator*(&v26, &v27, v30);
            *((_OWORD *)this + 89) = *(_OWORD *)&v27.value;
            CMTimeEpoch v25 = v27.epoch;
            goto LABEL_50;
          }
        }
        else
        {
          if ((*(unsigned int (**)(PCStreamElement *, uint64_t, long long *))(v24 + 168))(a3, 1, &v28))
          {
            *((void *)this + 177) = v29;
            *(_OWORD *)((char *)this + 140OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v28;
          }
          if ((*(unsigned int (**)(PCStreamElement *, uint64_t, long long *))(*(void *)a3 + 168))(a3, 2, &v28))
          {
            *((_OWORD *)this + 89) = v28;
            CMTimeEpoch v25 = v29;
LABEL_50:
            *((void *)this + 18OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v25;
            break;
          }
        }
        break;
      case 5:
        goto LABEL_41;
      case 6:
      case 7:
      case 8:
        break;
      case 9:
        unint64_t v12 = (char *)this + 1592;
LABEL_19:
        (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 32))(a3, v12);
        break;
      default:
        if (v6 == 33)
        {
          double v11 = (OZScene *)((char *)this + 640);
        }
        else
        {
          if (v6 != 34) {
            break;
          }
          double v11 = (OZScene *)((char *)this + 720);
        }
        goto LABEL_34;
    }
  }
  PCString::~PCString((PCString *)&v32);
  return 1;
}

void sub_1B7C1E858(_Unwind_Exception *a1)
{
  PCString::~PCString((PCString *)(v1 - 56));
  _Unwind_Resume(a1);
}

double OZScene::begin@<D0>(OZScene *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 151);
  double result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = (char *)this + 1200;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

double OZScene::begin_all@<D0>(OZScene *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 151);
  double result = 0.0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 8OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1065353216;
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = (char *)this + 1200;
  *(_DWORD *)(a2 + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  return result;
}

void OZScene::willModifyChannel(OZDocument **this, OZChannelBase *a2, int a3)
{
}

uint64_t OZScene::deleteUnusedSceneNodeFilesForNodes(OZScene *this, void *a2, uint64_t a3)
{
  OZRenderState __p = 0;
  CMTime v27 = 0;
  long long v28 = 0;
  if (!a2) {
    return 0;
  }
  BOOL v5 = a2 + 1;
  int v6 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      Node = OZScene::getNode(this, *((_DWORD *)v6 + 7));
      if (Node)
      {
        if (v8)
        {
          long long v9 = v8;
          if (((*(uint64_t (**)(_DWORD *))(*(void *)v8 + 1336))(v8) & 1) == 0)
          {
            int v10 = v9[20];
            double v11 = v27;
            if (v27 >= v28)
            {
              uint64_t v13 = (char *)__p;
              uint64_t v14 = (v27 - (unsigned char *)__p) >> 2;
              unint64_t v15 = v14 + 1;
              if ((unint64_t)(v14 + 1) >> 62) {
                std::vector<double>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v16 = v28 - (unsigned char *)__p;
              if ((v28 - (unsigned char *)__p) >> 1 > v15) {
                unint64_t v15 = v16 >> 1;
              }
              if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v17 = v15;
              }
              if (v17)
              {
                PCString v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v28, v17);
                uint64_t v13 = (char *)__p;
                double v11 = v27;
              }
              else
              {
                PCString v18 = 0;
              }
              uint64_t v19 = &v18[4 * v14];
              *(_DWORD *)uint64_t v19 = v10;
              unint64_t v12 = v19 + 4;
              while (v11 != v13)
              {
                int v20 = *((_DWORD *)v11 - 1);
                v11 -= 4;
                *((_DWORD *)v19 - OZDocument::~OZDocument(this - 1) = v20;
                v19 -= 4;
              }
              OZRenderState __p = v19;
              CMTime v27 = v12;
              long long v28 = &v18[4 * v17];
              if (v13) {
                operator delete(v13);
              }
            }
            else
            {
              *(_DWORD *)CMTime v27 = v10;
              unint64_t v12 = v11 + 4;
            }
            CMTime v27 = v12;
          }
        }
      }
      int v21 = (void *)v6[1];
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          int v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)v6[2];
          BOOL v23 = *v22 == (void)v6;
          int v6 = v22;
        }
        while (!v23);
      }
      int v6 = v22;
    }
    while (v22 != v5);
  }
  uint64_t v24 = OZScene::deleteSceneNodeFiles((OZDocument **)this, (__int32 **)&__p, a3);
  if (__p)
  {
    CMTime v27 = (char *)__p;
    operator delete(__p);
  }
  return v24;
}

void sub_1B7C1EB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZScene::duplicateSelected(OZScene *this)
{
  OZScene::begin_all_sel(this, (uint64_t)v83);
  unsigned int v2 = 0;
  uint64_t v3 = *((void *)this + 151);
  memset(v81, 0, sizeof(v81));
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  int v82 = 1065353216;
  v77[0] = (char *)this + 1200;
  v77[1] = v3;
  v77[2] = (char *)this + 1200;
  unsigned int v80 = 0;
  OZRenderState __p = 0;
  uint64_t v75 = 0;
  char v76 = 0;
  v73[0] = 0;
  v73[1] = 0;
  unsigned int v71 = 0;
  uint64_t v72 = v73;
  BOOL v69 = 0;
  BOOL v70 = 0;
  while (1)
  {
    if (v86 == v2)
    {
      if (v2 >= 2)
      {
        BOOL v5 = &v84;
        uint64_t v4 = &v78;
        if (v2 == 3)
        {
          BOOL v5 = &v85;
          uint64_t v4 = &v79;
        }
      }
      else
      {
        uint64_t v4 = v77;
        BOOL v5 = v83;
      }
      if (*v5 == *v4) {
        break;
      }
    }
    if (v86 >= 2)
    {
      if (v86 == 2)
      {
        uint64_t v7 = *(void *)(v84 + 16);
        uint64_t v8 = v7 + 48;
        goto LABEL_14;
      }
      uint64_t v6 = v85;
    }
    else
    {
      uint64_t v6 = v83[0];
    }
    uint64_t v7 = *(void *)(v6 + 16);
    uint64_t v8 = v7 + 16;
LABEL_14:
    if (v7) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 256))(v9);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 56))(v10);
    int v12 = v11;
    uint64_t v13 = v75;
    if (v75 >= v76)
    {
      unint64_t v15 = (char *)__p;
      uint64_t v16 = (v75 - (unsigned char *)__p) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        std::vector<double>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = v76 - (unsigned char *)__p;
      if ((v76 - (unsigned char *)__p) >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v76, v19);
        unint64_t v15 = (char *)__p;
        uint64_t v13 = v75;
      }
      else
      {
        int v20 = 0;
      }
      int v21 = &v20[4 * v16];
      *(_DWORD *)int v21 = v12;
      uint64_t v14 = v21 + 4;
      while (v13 != v15)
      {
        int v22 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v21 - OZDocument::~OZDocument(this - 1) = v22;
        v21 -= 4;
      }
      OZRenderState __p = v21;
      uint64_t v75 = v14;
      char v76 = &v20[4 * v19];
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v75 = v11;
      uint64_t v14 = v13 + 4;
    }
    uint64_t v75 = v14;
    do
      OZObject::all_iterator_t<OZObjectManipulator,true,true,OZObject::defaultAllValidator>::increment(v83);
    while ((OZObject::all_iterator_t<OZObjectManipulator,true,true,OZObject::defaultAllValidator>::typeCheck(v83) & 1) == 0);
    unsigned int v2 = v80;
  }
  uint64_t v67 = v75 - (unsigned char *)__p;
  if (v75 != __p)
  {
    OZChannelBase::setRangeName(*((OZChannelBase **)this + 188), (const PCString *)1);
    uint64_t v23 = 0;
    if ((unint64_t)(v67 >> 2) <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = v67 >> 2;
    }
    do
    {
      CMTimeEpoch v25 = (const void *)OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, *((_DWORD *)__p + v23));
      if ((*(uint64_t (**)(const void *))(*(void *)v25 + 96))(v25))
      {
        if (v26)
        {
          CMTimeEpoch v29 = (uint64_t *)v26[120];
          Float64 v30 = (const void *)(*(uint64_t (**)(void, void *, void))(*(void *)v26[1] + 24))(v26[1], v26, 0);
          if (v30) {
          else
          }
            uint64_t v31 = 0;
          uint64_t v35 = v31 + 16;
          OZObjectManipulator::appendCopyToName((OZObjectManipulator *)(v31 + 16));
          double v36 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(void *)v31 + 640))(v31);
          OZChannelBase::setNameUnset(v36, 1);
          if ((*(unsigned int (**)(void *, uint64_t))(v26[2] + 56))(v26 + 2, 1)) {
            (*(void (**)(char *))(*(void *)v31 + 776))(v31);
          }
          (*(void (**)(char *, void ***, void))(*(void *)v31 + 824))(v31, &v72, 0);
          long long v37 = v70;
          if (v70 >= v71)
          {
            uint64_t v39 = (v70 - (unsigned char *)v69) >> 3;
            if ((unint64_t)(v39 + 1) >> 61) {
              std::vector<double>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v40 = (v71 - (unsigned char *)v69) >> 2;
            if (v40 <= v39 + 1) {
              unint64_t v40 = v39 + 1;
            }
            if ((unint64_t)(v71 - (unsigned char *)v69) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v41 = v40;
            }
            if (v41) {
              uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v71, v41);
            }
            else {
              uint64_t v42 = 0;
            }
            int v47 = &v42[8 * v39];
            *(void *)int v47 = v35;
            int v38 = v47 + 8;
            int v49 = (char *)v69;
            uint64_t v48 = v70;
            if (v70 != v69)
            {
              do
              {
                uint64_t v50 = *((void *)v48 - 1);
                v48 -= 8;
                *((void *)v47 - OZDocument::~OZDocument(this - 1) = v50;
                v47 -= 8;
              }
              while (v48 != v49);
              uint64_t v48 = (char *)v69;
            }
            BOOL v69 = v47;
            BOOL v70 = v38;
            unsigned int v71 = &v42[8 * v41];
            if (v48) {
              operator delete(v48);
            }
          }
          else
          {
            *(void *)BOOL v70 = v35;
            int v38 = v37 + 8;
          }
          BOOL v70 = v38;
          if (v29)
          {
            uint64_t v51 = *v29;
            if ((v26[128] & 8) != 0) {
              char v52 = (void (**)(uint64_t *, void *, void *))(v51 + 1088);
            }
            else {
              char v52 = (void (**)(uint64_t *, void *, void *))(v51 + 992);
            }
            (*v52)(v29, v31, v26);
          }
          else
          {
            OZScene::addRootNodeBefore(this, (OZSceneNode *)v31, (OZSceneNode *)v26);
          }
          PCURL::PCURL((PCURL *)&v68, @"Undo Duplicate");
          (*(void (**)(char *, PCString *, uint64_t))(*(void *)v35 + 176))(v31 + 16, &v68, 1);
          PCString::~PCString(&v68);
          if (v67 == 4) {
            OZScene::selectObject(this, (OZObjectManipulator *)(v31 + 16), 0, 0);
          }
          (*(void (**)(char *, void *, void, uint64_t, void))(*(void *)v31 + 224))(v31, v26, 0, 1, 0);
          if (v53)
          {
            int v54 = v53;
            if (OZImageElement::isBackgroundDropZone(v53))
            {
              long long v55 = (OZChannelBase *)((char *)v54 + 18904);
              OZChannelBase::resetFlag(v55, 0x1000000000, 1);
              OZPublishSettings::addChannel((OZScene *)((char *)this + 720), v55);
              OZDocument::postNotification(*((OZDocument **)this + 198), 0x8000000);
            }
          }
        }
        else if (v27)
        {
          PCSharedCount v32 = (OZSceneNode *)((uint64_t (*)(void **))(*v27)[40])(v27);
          uint64_t v33 = (const void *)(*(uint64_t (**)(void *, void **, uint64_t))(*v27[1] + 24))(v27[1], v27, 2);
          if (v33) {
          else
          }
            uint64_t v34 = 0;
          uint64_t v56 = v34 + 16;
          OZObjectManipulator::appendCopyToName((OZObjectManipulator *)(v34 + 16));
          char v57 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(void *)v34 + 312))(v34);
          OZChannelBase::setNameUnset(v57, 1);
          if (((unsigned int (*)(void **, uint64_t))v27[2][7])(v27 + 2, 1)) {
            (*(void (**)(char *))(*(void *)v56 + 80))(v34 + 16);
          }
          if (v32)
          {
            OZSceneNode::insertBehaviorBefore(v32, (OZBehavior *)v34, (OZBehavior *)v27);
            PCURL::PCURL((PCURL *)&v68, @"Undo Duplicate");
            (*(void (**)(char *, PCString *, uint64_t))(*(void *)v56 + 176))(v34 + 16, &v68, 1);
            PCString::~PCString(&v68);
            if (v67 == 4) {
              OZScene::selectObject(this, (OZObjectManipulator *)(v34 + 16), 0, 0);
            }
          }
          OZRigBehavior::DuplicateAffectingRigBehaviors((OZRigBehavior *)(v27 + 2), (OZObjectManipulator *)(v34 + 16), v58);
        }
        else
        {
          long long v43 = v28;
          if (v28)
          {
            uint64_t v44 = ((uint64_t (*)(void **))(*v28)[31])(v28);
            uint64_t v45 = (const void *)(*(uint64_t (**)(void *, void **, uint64_t))(*v43[5] + 24))(v43[5], v43 + 4, 2);
            if (v45) {
            else
            }
              int v46 = 0;
            int v59 = v46 + 48;
            OZObjectManipulator::appendCopyToName((OZObjectManipulator *)(v46 + 48));
            long long v60 = (OZChannelBase *)(*(uint64_t (**)(char *))(*(void *)v46 + 240))(v46);
            OZChannelBase::setNameUnset(v60, 1);
            if (((unsigned int (*)(void **, uint64_t))v43[6][7])(v43 + 6, 1)) {
              (*(void (**)(char *))(*(void *)v59 + 80))(v46 + 48);
            }
            if (v44)
            {
              (*(void (**)(uint64_t, char *, void **))(*(void *)v44 + 344))(v44, v46, v43);
              PCURL::PCURL((PCURL *)&v68, @"Undo Duplicate");
              (*(void (**)(char *, PCString *, uint64_t))(*(void *)v59 + 176))(v46 + 48, &v68, 1);
              PCString::~PCString(&v68);
              if (v67 == 4) {
                OZScene::selectObject(this, (OZObjectManipulator *)(v46 + 48), 0, 0);
              }
            }
            OZRigBehavior::DuplicateAffectingRigBehaviors((OZRigBehavior *)(v43 + 6), (OZObjectManipulator *)(v46 + 48), v61);
          }
        }
      }
      ++v23;
    }
    while (v23 != v24);
    uint64_t v62 = 0;
    do
    {
      uint64_t v63 = OZScene::OZNodeMap::operator[]((uint64_t)this + 1288, *((_DWORD *)__p + v62));
      (*(void (**)(uint64_t))(*(void *)v63 + 312))(v63);
      ++v62;
    }
    while (v24 != v62);
    uint64_t v64 = (void **)v69;
    if (v70 != v69)
    {
      unint64_t v65 = 0;
      do
      {
        (*(void (**)(void *, void ***))(*v64[v65] + 360))(v64[v65], &v72);
        ++v65;
        uint64_t v64 = (void **)v69;
      }
      while (v65 < (v70 - (unsigned char *)v69) >> 3);
    }
    OZDocument::postNotification(*((OZDocument **)this + 198), 48);
  }
  if (v69)
  {
    BOOL v70 = (char *)v69;
    operator delete(v69);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v72, v73[0]);
  if (__p)
  {
    uint64_t v75 = (char *)__p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v81);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v87);
}

void sub_1B7C1F7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14, void *__p, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,void *a21,uint64_t a22)
{
  PCString::~PCString(&a14);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a18, a19);
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v22 - 128);
  _Unwind_Resume(a1);
}

uint64_t OZScene::deleteSceneNodeFiles(OZDocument **this, __int32 **a2, uint64_t a3)
{
  long long v55 = 0;
  uint64_t v56 = 0;
  int v54 = (uint64_t *)&v55;
  uint64_t v3 = (char *)a2[1] - (char *)*a2;
  if (!v3)
  {
LABEL_69:
    uint64_t v36 = 1;
    goto LABEL_70;
  }
  uint64_t v5 = 0;
  unint64_t v6 = v3 >> 2;
  uint64_t v7 = this + 159;
  if (v6 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = v6;
  }
  do
  {
    uint64_t v9 = *v7;
    if (*v7)
    {
      unsigned int v10 = (*a2)[v5];
      int v11 = v7;
      do
      {
        unsigned int v12 = *(_DWORD *)(v9 + 32);
        BOOL v13 = v12 >= v10;
        if (v12 >= v10) {
          uint64_t v14 = (uint64_t *)v9;
        }
        else {
          uint64_t v14 = (uint64_t *)(v9 + 8);
        }
        if (v13) {
          int v11 = (void *)v9;
        }
        uint64_t v9 = *v14;
      }
      while (*v14);
      if (v11 != v7 && *((_DWORD *)v11 + 8) <= v10)
      {
        unint64_t v15 = (void *)v11[5];
        if (v15)
        {
          uint64_t v18 = (void *)*v15;
          uint64_t v16 = v15 + 1;
          unint64_t v17 = v18;
          if (v18 != v16)
          {
            do
            {
              Node = OZScene::getNode((OZScene *)this, *((_DWORD *)v17 + 7));
              int v20 = Node;
              if (Node)
              {
                {
                  unint64_t v21 = v20[1];
                  int32x4_t v53 = (int32x4_t)xmmword_1B8381360;
                  if ((OZFactory::isKindOfClass(v21, &v53) & 1) == 0) {
                    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(&v54, (unsigned int *)v17 + 7, (_DWORD *)v17 + 7);
                  }
                }
              }
              uint64_t v22 = (void *)v17[1];
              if (v22)
              {
                do
                {
                  uint64_t v23 = v22;
                  uint64_t v22 = (void *)*v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  uint64_t v23 = (void *)v17[2];
                  BOOL v24 = *v23 == (void)v17;
                  unint64_t v17 = v23;
                }
                while (!v24);
              }
              unint64_t v17 = v23;
            }
            while (v23 != v16);
          }
        }
      }
    }
    ++v5;
  }
  while (v5 != v8);
  if (!v56 || (OZChannelBase::isObjectRef((OZChannelBase *)this) & 1) != 0)
  {
    CMTimeEpoch v25 = this[153];
    if (v25)
    {
      unsigned __int32 v26 = *((_DWORD *)v25 + 20);
      CMTime v27 = v55;
      if (!v55) {
        goto LABEL_41;
      }
      long long v28 = &v55;
      do
      {
        CMTimeEpoch v29 = v27;
        Float64 v30 = v28;
        unsigned __int32 v31 = *((_DWORD *)v27 + 7);
        PCSharedCount v32 = v27 + 1;
        if (v31 >= v26)
        {
          PCSharedCount v32 = v29;
          long long v28 = (void **)v29;
        }
        CMTime v27 = (void *)*v32;
      }
      while (v27);
      if (v28 == &v55) {
        goto LABEL_41;
      }
      if (v31 < v26) {
        CMTimeEpoch v29 = v30;
      }
      if (v26 < *((_DWORD *)v29 + 7)) {
LABEL_41:
      }
        long long v28 = &v55;
      uint64_t v33 = a2[1];
      uint64_t v34 = wmemchr(*a2, v26, v33 - *a2);
      if (v28 == &v55)
      {
        if (v34) {
          long long v37 = v34;
        }
        else {
          long long v37 = v33;
        }
        BOOL v35 = v37 != a2[1];
      }
      else
      {
        BOOL v35 = 1;
      }
    }
    else
    {
      BOOL v35 = 0;
    }
    int v38 = (OZChannelBase *)this[188];
    if (v38) {
      OZChannelBase::setRangeName(v38, (const PCString *)1);
    }
    uint64_t v39 = v54;
    if (v54 != (uint64_t *)&v55)
    {
      do
      {
        uint64_t v40 = OZScene::OZNodeMap::operator[]((uint64_t)(this + 161), *((_DWORD *)v39 + 7));
        uint64_t v41 = v40;
        if (v40)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v40 + 176))(v40, a3, 2);
          uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 216))(v41);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 184))(v41, v42);
        }
        long long v43 = (uint64_t *)v39[1];
        if (v43)
        {
          do
          {
            uint64_t v44 = v43;
            long long v43 = (uint64_t *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            uint64_t v44 = (uint64_t *)v39[2];
            BOOL v24 = *v44 == (void)v39;
            uint64_t v39 = v44;
          }
          while (!v24);
        }
        uint64_t v39 = v44;
      }
      while (v44 != (uint64_t *)&v55);
    }
    for (uint64_t i = 0; i != v8; ++i)
    {
      uint64_t v46 = OZScene::OZNodeMap::operator[]((uint64_t)(this + 161), (*a2)[i]);
      uint64_t v47 = v46;
      if (v46)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v46 + 176))(v46, a3, 2);
        uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 216))(v47);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 184))(v47, v48);
      }
    }
    if (v35)
    {
      OZScene::clearSelection((OZScene *)this);
      this[153] = 0;
      int v49 = 48;
    }
    else
    {
      int v49 = 16;
    }
    OZDocument::postNotification(this[198], v49);
    goto LABEL_69;
  }
  uint64_t v36 = 0;
LABEL_70:
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v54, v55);
  return v36;
}

void sub_1B7C1FCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

uint64_t OZScene::unusedSceneNodeFileIDs@<X0>(OZScene *this@<X0>, char **a2@<X8>)
{
  OZScene::begin_t<OZSceneNodeFile,false,true>((uint64_t *)this, (uint64_t)v21);
  memset(v19, 0, sizeof(v19));
  int v20 = 1065353216;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  while ((OZScene *)v21[0] != (OZScene *)((char *)this + 1200))
  {
    if (v21[0] == v21[2] || (uint64_t v4 = *(const void **)(v21[0] + 16)) == 0) {
      uint64_t v5 = 0;
    }
    else {
    if (((*(uint64_t (**)(_DWORD *))(*(void *)v5 + 1336))(v5) & 1) == 0)
    {
      int v6 = v5[20];
      uint64_t v8 = a2[1];
      unint64_t v7 = (unint64_t)a2[2];
      if ((unint64_t)v8 >= v7)
      {
        unsigned int v10 = *a2;
        uint64_t v11 = (v8 - *a2) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<double>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v7 - (void)v10;
        if (v13 >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a2 + 2), v14);
          unsigned int v10 = *a2;
          uint64_t v8 = a2[1];
        }
        else
        {
          unint64_t v15 = 0;
        }
        uint64_t v16 = &v15[4 * v11];
        *(_DWORD *)uint64_t v16 = v6;
        uint64_t v9 = v16 + 4;
        while (v8 != v10)
        {
          int v17 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v16 - OZDocument::~OZDocument(this - 1) = v17;
          v16 -= 4;
        }
        *a2 = v16;
        a2[1] = v9;
        a2[2] = &v15[4 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v8 = v6;
        uint64_t v9 = v8 + 4;
      }
      a2[1] = v9;
    }
    OZObject::iterator_t<OZSceneNodeFile,false,true,OZObject::defaultValidator>::operator++(v21);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v19);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v22);
}

void sub_1B7C1FF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  int v17 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v17;
    operator delete(v17);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v15);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OZScene::dirty(OZScene *this)
{
  uint64_t v1 = *((void *)this + 151);
  memset(v8, 0, sizeof(v8));
  int v9 = 1065353216;
  v6[0] = v1;
  v6[1] = v1;
  v6[2] = (char *)this + 1200;
  char v7 = 0;
  memset(v4, 0, sizeof(v4));
  int v5 = 1065353216;
  uint64_t v3 = (char *)this + 1200;
  while ((char *)v6[0] != v3)
  {
    (*(void (**)(void))(**(void **)(v6[0] + 16) + 496))(*(void *)(v6[0] + 16));
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v6);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v4);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v8);
}

void sub_1B7C20020(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

double OZScene::invalidateStaticHash(OZScene *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 1596) = 0u;
  return result;
}

void *OZScene::begin_t<OZElement,false,false>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
  }
  return result;
}

void sub_1B7C200F8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *OZObject::iterator_t<OZElement,false,false,OZObject::defaultValidator>::operator++(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = *(void *)(*a1 + 8);
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    uint64_t v4 = *(const void **)(v3 + 16);
    if (v4
    {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 8);
  }
  return a1;
}

uint64_t OZScene::getStaticLightHash(OZScene *this)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](this);
  uint64_t v3 = (int *)v2;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  PCWorkingColorVector::PCWorkingColorVector(v2);
  OZScene::begin_t<OZLight,false,false>(v1, (uint64_t)v15);
  uint64_t v4 = v1[151];
  memset(v13, 0, sizeof(v13));
  int v14 = 1065353216;
  int v9 = v1 + 150;
  uint64_t v10 = v4;
  uint64_t v11 = v1 + 150;
  char v12 = 0;
  while ((void *)v15[0] != v9)
  {
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v17);
    v8[0] = (uint64_t *)v8;
    v8[1] = (uint64_t *)v8;
    _OWORD v8[2] = 0;
    if (v15[0] == v15[2])
    {
      int v5 = 0;
    }
    else
    {
      int v5 = *(_OWORD **)(v15[0] + 16);
      if (v5) {
    }
      }
    StaticHash = (int *)OZObjectManipulator::getStaticHash(v5 + 1, v17, v8);
    PCHash128::operator+=(v3, StaticHash);
    OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v15);
    std::__list_imp<unsigned int>::clear(v8);
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v17);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v13);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v16);
}

void sub_1B7C20364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t OZScene::getStaticCameraHash(OZScene *this)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](this);
  uint64_t v3 = (int *)v2;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  PCWorkingColorVector::PCWorkingColorVector(v2);
  OZScene::begin_t<OZCamera,false,false>(v1, (uint64_t)v15);
  uint64_t v4 = v1[151];
  memset(v13, 0, sizeof(v13));
  int v14 = 1065353216;
  int v9 = v1 + 150;
  uint64_t v10 = v4;
  uint64_t v11 = v1 + 150;
  char v12 = 0;
  while ((void *)v15[0] != v9)
  {
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v17);
    v8[0] = (uint64_t *)v8;
    v8[1] = (uint64_t *)v8;
    _OWORD v8[2] = 0;
    if (v15[0] == v15[2])
    {
      int v5 = 0;
    }
    else
    {
      int v5 = *(_OWORD **)(v15[0] + 16);
      if (v5) {
    }
      }
    StaticHash = (int *)OZObjectManipulator::getStaticHash(v5 + 1, v17, v8);
    PCHash128::operator+=(v3, StaticHash);
    OZObject::iterator_t<OZCamera,false,false,OZObject::defaultValidator>::operator++(v15);
    std::__list_imp<unsigned int>::clear(v8);
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v17);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v13);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v16);
}

void sub_1B7C2054C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t OZScene::getStaticProjectNodeHash(OZScene *this)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](this);
  uint64_t v3 = (int *)v2;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  PCWorkingColorVector::PCWorkingColorVector(v2);
  OZScene::begin_t<OZProjectNode,false,false>(v1, (uint64_t)v15);
  uint64_t v4 = v1[151];
  memset(v13, 0, sizeof(v13));
  int v14 = 1065353216;
  int v9 = v1 + 150;
  uint64_t v10 = v4;
  uint64_t v11 = v1 + 150;
  char v12 = 0;
  while ((void *)v15[0] != v9)
  {
    PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v17);
    v8[0] = (uint64_t *)v8;
    v8[1] = (uint64_t *)v8;
    _OWORD v8[2] = 0;
    if (v15[0] == v15[2])
    {
      int v5 = 0;
    }
    else
    {
      int v5 = *(_OWORD **)(v15[0] + 16);
      if (v5) {
    }
      }
    StaticHash = (int *)OZObjectManipulator::getStaticHash(v5 + 1, v17, v8);
    PCHash128::operator+=(v3, StaticHash);
    OZObject::iterator_t<OZProjectNode,false,false,OZObject::defaultValidator>::operator++(v15);
    std::__list_imp<unsigned int>::clear(v8);
    PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v17);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v13);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v16);
}

void sub_1B7C20734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t OZScene::getLightHashForState(OZScene *this, const OZRenderParams *a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](this);
  uint64_t v4 = v3;
  int v5 = (void *)v2;
  char v7 = (int *)v6;
  v25[520] = *MEMORY[0x1E4F143B8];
  PCWorkingColorVector::PCWorkingColorVector(v6);
  OZScene::begin_t<OZLight,false,false>(v5, (uint64_t)v22);
  uint64_t v8 = v5[151];
  memset(v20, 0, sizeof(v20));
  int v21 = 1065353216;
  uint64_t v16 = v5 + 150;
  uint64_t v17 = v8;
  uint64_t v18 = v5 + 150;
  char v19 = 0;
  while ((void *)v22[0] != v16)
  {
    if (v22[0] == v23)
    {
      int v9 = 0;
    }
    else
    {
      int v9 = *(void **)(v22[0] + 16);
      if (v9) {
    }
      }
    uint64_t v15 = *((void *)v4 + 2);
    long long v14 = *(_OWORD *)v4;
    if ((*(unsigned int (**)(void))(v9[2] + 104))())
    {
      PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v25);
      v13[0] = (uint64_t *)v13;
      v13[1] = (uint64_t *)v13;
      _OWORD v13[2] = 0;
      if (v22[0] == v23)
      {
        uint64_t v10 = 0;
      }
      else
      {
        uint64_t v10 = *(_OWORD **)(v22[0] + 16);
        if (v10) {
      }
        }
      OZObjectManipulator::getHashForState(v10 + 1, v25, v4, v13, &v12);
      PCHash128::operator+=(v7, (int *)&v12);
      std::__list_imp<unsigned int>::clear(v13);
      PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v25);
    }
    OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v22);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v20);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v24);
}

void sub_1B7C209C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

uint64_t OZScene::getActiveCamera(OZScene *this, const CMTime *a2)
{
  OZScene::begin_t<OZCamera,false,true>((uint64_t *)this, (uint64_t)v24);
  uint64_t v4 = *((void *)this + 151);
  memset(v22, 0, sizeof(v22));
  int v23 = 1065353216;
  uint64_t v18 = (char *)this + 1200;
  uint64_t v19 = v4;
  int v20 = (char *)this + 1200;
  char v21 = 0;
  CMTime v17 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
  __n128 v15 = 0uLL;
  CMTimeEpoch v16 = 0;
  OZSceneSettings::getFrameDuration((OZScene *)((char *)this + 336), &v15);
  int v5 = 0;
  while ((char *)v24[0] != v18)
  {
    if (v24[0] == v24[2] || (int v6 = *(const void **)(v24[0] + 16)) == 0) {
      char v7 = 0;
    }
    else {
    CMTimeEpoch epoch = a2->epoch;
    }
    uint64_t v8 = v7[2];
    long long v13 = *(_OWORD *)&a2->value;
    if ((*(uint64_t (**)(void *, long long *, uint64_t, uint64_t, uint64_t))(v8 + 104))(v7 + 2, &v13, 1, 1, 1))
    {
      int v5 = v7;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7[2] + 24))(v7 + 2, 1, 1))
    {
      memset(&v12, 0, sizeof(v12));
      (*(void (**)(CMTime *__return_ptr, void *))(*v7 + 1128))(v11, v7);
      CMTime time2 = v11[0];
      CMTime v27 = v11[1];
      PC_CMTimeSaferAdd(&time2, &v27, (uint64_t)&v26);
      CMTime time2 = v26;
      *(__n128 *)&v27.CMTimeValue value = v15;
      v27.CMTimeEpoch epoch = v16;
      PC_CMTimeSaferSubtract(&time2, &v27, (uint64_t)&v12);
      v11[0] = v12;
      CMTime time2 = v17;
      if (CMTimeCompare(v11, &time2) >= 1)
      {
        CMTime v17 = v12;
        int v5 = v7;
      }
    }
    OZObject::iterator_t<OZCamera,false,true,OZObject::defaultValidator>::operator++(v24);
  }
  if (!v5)
  {
    uint64_t v9 = 0;
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v9 = *((unsigned int *)v5 + 20);
LABEL_16:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v22);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v25);
  return v9;
}

void sub_1B7C20CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v41);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void *OZScene::begin_t<OZLight,false,false>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
  }
  return result;
}

void sub_1B7C20DB0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = *(void *)(*a1 + 8);
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    uint64_t v4 = *(const void **)(v3 + 16);
    if (v4
    {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 8);
  }
  return a1;
}

void *OZScene::begin_t<OZCamera,false,false>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZCamera,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZCamera,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
  }
  return result;
}

void sub_1B7C20F1C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *OZObject::iterator_t<OZCamera,false,false,OZObject::defaultValidator>::operator++(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = *(void *)(*a1 + 8);
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    uint64_t v4 = *(const void **)(v3 + 16);
    if (v4
    {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 8);
  }
  return a1;
}

uint64_t OZScene::containsActiveLights(OZScene *this, const OZGroup *a2)
{
  OZScene::begin_t<OZLight,false,false>(this, (uint64_t)v25);
  uint64_t v4 = *((void *)this + 151);
  memset(v23, 0, sizeof(v23));
  int v24 = 1065353216;
  uint64_t v19 = (char *)this + 1200;
  uint64_t v20 = v4;
  char v21 = (char *)this + 1200;
  char v22 = 0;
  while ((char *)v25[0] != v19)
  {
    if (v25[0] == v25[2])
    {
      int v5 = 0;
    }
    else
    {
      int v5 = *(void **)(v25[0] + 16);
      if (v5) {
    }
      }
    uint64_t v18 = *((void *)this + 149);
    *(_OWORD *)&v17[40] = *(_OWORD *)((char *)this + 1176);
    if ((*(uint64_t (**)(void))(v5[2] + 104))())
    {
      uint64_t v13 = 1;
      goto LABEL_29;
    }
    OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v25);
  }
  OZScene::begin_t<OZGroup,false,false>(this, (uint64_t)v15);
  if (v15[0] != v16 {
    && (int v6 = *(const void **)(v15[0] + 16)) != 0
  }
  {
    while (1)
    {
      if (v15[0] != v16)
      {
        char v7 = *(const void **)(v15[0] + 16);
        uint64_t v8 = v7
        if (v8 != a2)
        {
          if (((*(uint64_t (**)(void))(v9 + 1424))() & 1) == 0)
          {
            if (v15[0] == v16)
            {
              uint64_t v10 = 0;
            }
            else
            {
              uint64_t v10 = *(void **)(v15[0] + 16);
              if (v10) {
            }
              }
            if (OZGroup::containsActiveLights((OZGroup *)v10, a2)) {
              break;
            }
          }
        }
      }
      uint64_t v11 = OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v15);
      if (*v11 != v11[2])
      {
        CMTime v12 = *(const void **)(*v11 + 16);
        if (v12)
        {
          {
            continue;
          }
        }
      }
      goto LABEL_26;
    }
    uint64_t v13 = 1;
  }
  else
  {
LABEL_26:
    uint64_t v13 = 0;
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v17);
LABEL_29:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v23);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v26);
  return v13;
}

void sub_1B7C21370(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2 - 104);
  _Unwind_Resume(a1);
}

void *OZScene::begin_t<OZGroup,false,false>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    uint64_t v4 = (const void *)v3[2];
    if (!v4) {
      return OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
    if (!result) {
      return OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++((void *)a2);
    }
  }
  return result;
}

void sub_1B7C21450(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = *(void *)(*a1 + 8);
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    uint64_t v4 = *(const void **)(v3 + 16);
    if (v4
    {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 8);
  }
  return a1;
}

uint64_t OZScene::containsActiveShadowLights(OZScene *this, const OZGroup *a2)
{
  OZScene::begin_t<OZLight,false,false>(this, (uint64_t)v24);
  uint64_t v4 = *((void *)this + 151);
  memset(v22, 0, sizeof(v22));
  int v23 = 1065353216;
  uint64_t v18 = (char *)this + 1200;
  uint64_t v19 = v4;
  uint64_t v20 = (char *)this + 1200;
  char v21 = 0;
  int v5 = (const CMTime *)MEMORY[0x1E4F1FA48];
  while ((char *)v24[0] != v18)
  {
    if (v24[0] == v25)
    {
      int v6 = 0;
    }
    else
    {
      int v6 = *(void **)(v24[0] + 16);
      if (v6) {
    }
      }
    uint64_t v17 = *((void *)this + 149);
    *(_OWORD *)&unsigned char v16[40] = *(_OWORD *)((char *)this + 1176);
    if ((*(unsigned int (**)(void))(v6[2] + 104))())
    {
      if (v24[0] == v25)
      {
        char v7 = 0;
      }
      else
      {
        char v7 = *(char **)(v24[0] + 16);
        if (v7) {
      }
        }
      if (OZFolderLightShadow::hasShadows((OZChannelBase *)(v7 + 8776), v5))
      {
        uint64_t v13 = 1;
        goto LABEL_27;
      }
    }
    OZObject::iterator_t<OZLight,false,false,OZObject::defaultValidator>::operator++(v24);
  }
  OZScene::begin_t<OZGroup,false,false>(this, (uint64_t)v15);
  if (v15[0] != v15[2] {
    && (uint64_t v8 = *(const void **)(v15[0] + 16)) != 0
  }
  {
    uint64_t v10 = v9;
    while (v10 == a2
         || ((*(uint64_t (**)(const OZGroup *))(*(void *)v10 + 1424))(v10) & 1) != 0
         || (OZGroup::containsActiveShadowLights(v10, a2) & 1) == 0)
    {
      uint64_t v11 = OZObject::iterator_t<OZGroup,false,false,OZObject::defaultValidator>::operator++(v15);
      if (*v11 != v11[2])
      {
        CMTime v12 = *(const void **)(*v11 + 16);
        if (v12)
        {
          if (v10) {
            continue;
          }
        }
      }
      goto LABEL_24;
    }
    uint64_t v13 = 1;
  }
  else
  {
LABEL_24:
    uint64_t v13 = 0;
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v16);
LABEL_27:
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v22);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v26);
  return v13;
}

void sub_1B7C21834(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2 - 120);
  _Unwind_Resume(a1);
}

_DWORD *OZScene::createGrid(OZScene *this, const LiCamera *a2, LiGraphBuilder *a3)
{
  uint64_t v4 = (OZPreferenceManager *)OZPreferenceManager::Instance(this);
  OZPreferenceManager::getGroundPlaneSpacing(v4);
  memset(v8, 0, 24);
  double result = addGrids(v8, a2, 1.0);
  for (uint64_t i = 0; i != 3; ++i)
  {
    double v7 = *(double *)&v8[i];
    if (v7 <= -0.0000001 || v7 >= 0.0000001) {
      operator new();
    }
  }
  return result;
}

void sub_1B7C21D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, CGColorSpace **a12)
{
  PCSharedCount::~PCSharedCount(a10);
  PCSharedCount::~PCSharedCount(v13);
  PCCFRef<CGColorSpace *>::~PCCFRef(a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

_DWORD *addGrids(_DWORD *result, const void *a2, double a3)
{
  uint64_t v4 = result;
  if (a3 >= 0.0) {
    double v5 = a3;
  }
  else {
    double v5 = 0.0;
  }
  if (v5 <= -0.0000001 || v5 >= 0.0000001)
  {
    uint64_t v6 = 1;
    while (a2)
    {
      if (!v7)
      {
        if (result && (int v10 = result[124] - 2, v10 <= 5)) {
          uint64_t v6 = qword_1B83814D8[v10];
        }
        else {
          uint64_t v6 = 1;
        }
        break;
      }
      uint64_t v8 = v7;
      double Time = LiAnimCamera::getTime(v7);
      double result = (_DWORD *)addGrids(v4, *((void *)v8 + 62), v5 * (1.0 - Time));
      a2 = (const void *)*((void *)v8 + 64);
      if (v5 * Time >= 0.0) {
        double v5 = v5 * Time;
      }
      else {
        double v5 = 0.0;
      }
      if (v5 > -0.0000001 && v5 < 0.0000001) {
        return result;
      }
    }
    *(double *)&v4[2 * v6] = fmin(v5 + *(double *)&v4[2 * v6], 1.0);
  }
  return result;
}

uint64_t OZScene::getWorkingColorSpace(OZScene *this)
{
  uint64_t v1 = (char *)this + 1816;
  int ComputedWorkingGamut = OZScene::getComputedWorkingGamut(this);

  return PCRenderModel::getWorkingColorSpace((uint64_t)v1, ComputedWorkingGamut);
}

void OZScene::buildSceneRenderGraph(OZScene *this, OZRenderParams *a2)
{
  uint64_t v4 = (void *)*((void *)a2 + 160);
  if (v4)
  {
    v14.int var0 = (PC_Sp_counted_base *)*((void *)a2 + 160);
    PCSharedCount::PCSharedCount(&v15, (PCShared_base *)((char *)v4 + *(void *)(*v4 - 24)));
    PCPtr<OZSceneCamera>::PCPtr<LiCamera>((PCSharedCount *)&v10, &v14);
    int64_t value = v10._introDuration.value;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v10._introDuration.timescale);
    if (value)
    {
      int var0 = (LiCamera *)v14.var0;
      PCSharedCount::PCSharedCount(&v12, &v15);
      if (OZSceneCamera::isValid((OZSceneCamera *)value))
      {
        v10._scaleableDuration.int64_t value = (int64_t)&unk_1F1199AC8;
        *(void *)&v10._scaleableDuration.CMTimeScale timescale = 0;
        LOBYTE(v10._scaleableDuration.epoch) = 1;
        v10._introDuration.int64_t value = (int64_t)off_1F114CEF0;
        *(int64_t *)((char *)&v10._introDuration.value + *((void *)off_1F114CEF0 - 3)) = (int64_t)off_1F114CEF8;
        uint64_t v6 = off_1F114CEE0;
        v10._introDuration.int64_t value = (int64_t)off_1F114CEE8;
        double v7 = off_1F114CF08;
        *(int64_t *)((char *)&v10._introDuration.value + (void)*(off_1F114CEE8 - 3)) = (int64_t)off_1F114CF00;
        v10._introDuration.int64_t value = (int64_t)v6;
        *(int64_t *)((char *)&v10._introDuration.value + *(v6 - 3)) = (int64_t)v7;
        v10._introDuration.int64_t value = (int64_t)&unk_1F114CBA8;
        v10._scaleableDuration.int64_t value = (int64_t)&unk_1F114CEC0;
        int64_t v8 = *(void *)(value + 40);
        long long v9 = *(_OWORD *)(value + 24);
        *(_OWORD *)&v10._introDuration.CMTimeScale timescale = *(_OWORD *)(value + 8);
        *(_OWORD *)&v10._outroDuration.int64_t value = v9;
        v10._outroDuration.CMTimeEpoch epoch = v8;
        LiRenderingTechnology::setRasterizeEdges((uint64_t)&v10, 0);
        CMTime v13 = *(CMTime *)a2;
        METimeRemap::setOutroDuration(&v10, &v13);
        operator new();
      }
      PCMakePtr<LiSimpleCamera>();
    }
    if (*((unsigned char *)a2 + 242))
    {
      *(_OWORD *)&v10._introDuration.int64_t value = *(_OWORD *)a2;
      v10._introDuration.CMTimeEpoch epoch = *((void *)a2 + 2);
      OZScene::makeActiveCamera(this, (const CMTime *)&v10);
    }
    *((void *)a2 + 32) = (char *)this + 1240;
    *(_OWORD *)((char *)a2 + 392) = 0u;
    *(_OWORD *)((char *)a2 + 408) = 0u;
    operator new();
  }
  if (!*((unsigned char *)this + 1500))
  {
    *(_OWORD *)&v10._introDuration.int64_t value = *(_OWORD *)a2;
    v10._introDuration.CMTimeEpoch epoch = *((void *)a2 + 2);
    *((_DWORD *)this + 374) = OZScene::getActiveCamera(this, (const CMTime *)&v10);
    *((unsigned char *)this + 150OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1;
  }
  operator new();
}

void sub_1B7C238A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, PCSharedCount *a15, uint64_t a16, uint64_t a17, PCSharedCount *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,PCSharedCount a48)
{
  PCSharedCount::~PCSharedCount(&a48);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&STACK[0x258]);
  PCSharedCount::~PCSharedCount(v48);
  PCSharedCount::~PCSharedCount(a15);
  _Unwind_Resume(a1);
}

double OZRenderParams::setActiveCamera(uint64_t a1, const PCSharedCount *a2)
{
  *(PCSharedCount *)(a1 + 1296) = (PCSharedCount)a2->var0;
  uint64_t v3 = (uint64_t *)(a1 + 1304);
  PCSharedCount::PCSharedCount(&v5, a2 + 1);
  PCSharedCount::operator=(v3, (uint64_t *)&v5);
  PCSharedCount::~PCSharedCount(&v5);
  double result = 0.0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  return result;
}

void sub_1B7C23C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

void OZScene::makeActiveCamera(OZScene *this, const CMTime *a2)
{
  v2._introDuration.int64_t value = (int64_t)this;
  *(_DWORD *)&v2._isLoop = 0;
  PCMakePtr<OZSceneCamera,OZScene *,OZViewCameraType>();
}

void sub_1B7C24008(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1 + 1);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t OZScene::begin_all_t<OZRigBehavior,false,true>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 1208);
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 8OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1065353216;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = a1 + 1200;
  *(_DWORD *)(a2 + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  for (uint64_t result = OZObject::all_iterator_t<OZRigBehavior,false,true,OZObject::defaultAllValidator>::typeCheck(a2);
        (result & 1) == 0;
        uint64_t result = OZObject::all_iterator_t<OZRigBehavior,false,true,OZObject::defaultAllValidator>::typeCheck(a2))
  {
    OZObject::all_iterator_t<OZRigBehavior,false,true,OZObject::defaultAllValidator>::increment((void *)a2);
  }
  return result;
}

void sub_1B7C240C4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void OZRenderParams::setShadowLights(OZRenderParams *this, const LiLightSet *a2)
{
  uint64_t v3 = *((void *)this + 155);
  if (!v3) {
    throw_PCNullPointerException(1);
  }
  int v4 = *((_DWORD *)a2 + 3);
  if (*(_DWORD *)(v3 + 40) >= v4) {
    int v5 = *(_DWORD *)(v3 + 40);
  }
  else {
    int v5 = (2 * v4) | 1;
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(v3 + 32, v4, v5);
  if (*((int *)a2 + 3) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      LiLight::operator=(*(void *)(v3 + 48) + v6, *((void *)a2 + 2) + v6);
      ++v7;
      v6 += 944;
    }
    while (v7 < *((int *)a2 + 3));
  }
  *(unsigned char *)(v3 + 56) = *((unsigned char *)a2 + 24);
}

void PCMakePtr<Li3DGroupForEquirect,LiCamera *,int,int>()
{
}

void sub_1B7C2425C(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void OZScene::calcWorldToFilmSpaceMatrixForCamera(OZScene *this@<X0>, const LiCamera *a2@<X1>, _OWORD *a3@<X8>)
{
  *(void *)&unsigned char v37[40] = 0x3FF0000000000000;
  *(void *)long long v37 = 0x3FF0000000000000;
  *(void *)&v34[40] = 0x3FF0000000000000;
  *(void *)uint64_t v34 = 0x3FF0000000000000;
  memset(&v34[8], 0, 32);
  long long v35 = 0u;
  long long v36 = 0u;
  memset(&v37[8], 0, 32);
  uint64_t v6 = *(void *)a2;
  if (v7)
  {
    if (!OZSceneCamera::isValid(v7))
    {
      LiSimpleCamera::LiSimpleCamera((LiSimpleCamera *)&src);
      v22[0] = (__n128)vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)((char *)this + 344)));
      LiSimpleCamera::setFilmback((__n128 *)&src, v22);
      LiSimpleCamera::setPixelAspectRatio((uint64_t)&src, *((double *)this + 48));
      OZScene::calcWorldToFilmSpaceMatrixForCamera(this, (const LiCamera *)&src);
      LiSimpleCamera::~LiSimpleCamera((LiSimpleCamera *)&src, v21);
      return;
    }
    uint64_t v6 = *(void *)a2;
  }
  float64x2_t v8 = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)((char *)this + 344)));
  __asm { FMOV            V1.2D, #-0.5 }
  v23[0] = vmulq_f64(v8, _Q1);
  v23[1] = v8;
  uint64_t v33 = 0x3FF0000000000000;
  uint64_t v30 = 0x3FF0000000000000;
  uint64_t v27 = 0x3FF0000000000000;
  uint64_t src = 0x3FF0000000000000;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  (*(void (**)(const LiCamera *, _OWORD *, uint64_t *))(v6 + 296))(a2, v23, &src);
  (*(void (**)(__n128 *__return_ptr, const LiCamera *))(*(void *)a2 + 48))(v22, a2);
  for (uint64_t i = 0; i != 8; i += 2)
  {
    PCSharedCount v15 = (__n128 *)&v34[i * 16];
    __n128 v16 = v22[i + 1];
    __n128 *v15 = v22[i];
    v15[1] = v16;
  }
  PCMatrix44Tmpl<double>::leftMult((uint64_t)v34, (double *)&src);
  long long v17 = *(_OWORD *)v37;
  a3[4] = v36;
  a3[5] = v17;
  long long v18 = *(_OWORD *)&v37[32];
  a3[6] = *(_OWORD *)&v37[16];
  a3[7] = v18;
  long long v19 = *(_OWORD *)&v34[16];
  *a3 = *(_OWORD *)v34;
  a3[1] = v19;
  long long v20 = v35;
  a3[2] = *(_OWORD *)&v34[32];
  a3[3] = v20;
}

void sub_1B7C244C8(void *a1)
{
  __cxa_begin_catch(a1);
  *(_OWORD *)(v3 - 144) = 0u;
  *(_OWORD *)(v3 - 128) = 0u;
  *(_OWORD *)(v3 - 192) = 0u;
  *(_OWORD *)(v3 - 176) = 0u;
  *(_OWORD *)(v3 - 16OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0u;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *(void *)(v3 - 112) = 0x3FF0000000000000;
  *(void *)(v3 - 72) = 0x3FF0000000000000;
  long long v4 = *(_OWORD *)(v3 - 112);
  v1[4] = *(_OWORD *)(v3 - 128);
  v1[5] = v4;
  long long v5 = *(_OWORD *)(v3 - 80);
  v1[6] = *(_OWORD *)(v3 - 96);
  v1[7] = v5;
  long long v6 = *(_OWORD *)(v3 - 176);
  *uint64_t v1 = *(_OWORD *)(v3 - 192);
  v1[1] = v6;
  long long v7 = *(_OWORD *)(v3 - 144);
  v1[2] = *(_OWORD *)(v3 - 160);
  v1[3] = v7;
  __cxa_end_catch();
  JUMPOUT(0x1B7C244ACLL);
}

void sub_1B7C24514(_Unwind_Exception *a1, const PCString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

double *PCQuat<double>::setRotation(double *a1, double *a2, double *a3)
{
  double v4 = *a2;
  double v5 = a2[1];
  double v6 = *a3;
  double v7 = a3[1];
  double v8 = a2[2];
  double v9 = a3[2];
  double v10 = v4 * v4 + v5 * v5 + v8 * v8;
  double v11 = (*a2 * *a3 + v5 * v7 + v8 * v9) / sqrt(v10 * (v6 * v6 + v7 * v7 + v9 * v9));
  if (v11 <= 0.99999)
  {
    if (v11 >= -0.99999)
    {
      double v22 = v5 * v9 - v7 * v8;
      double v23 = v6 * v8 - v4 * v9;
      double v24 = v4 * v7 - v6 * v5;
      double v25 = sqrt((1.0 - v11) * 0.5 / (v22 * v22 + v23 * v23 + v24 * v24));
      *a1 = sqrt((v11 + 1.0) * 0.5);
      a1[1] = v22 * v25;
      a1[2] = v23 * v25;
      a1[3] = v24 * v25;
    }
    else
    {
      double v12 = sqrt(v10);
      if (v12 < 0.000000100000001 && v12 > -0.000000100000001) {
        double v12 = 1.0;
      }
      double v14 = v4 / v12;
      double v15 = v5 / v12;
      double v16 = v8 / v12;
      double v17 = v15 * 0.0;
      double v18 = v15 * 0.0 - v16 * 0.0;
      double v19 = v16 - v14 * 0.0;
      a1[1] = v18;
      a1[2] = v19;
      long long v20 = a1 + 1;
      double v21 = v14 * 0.0 - v15;
      a1[3] = v21;
      if (sqrt(v21 * v21 + v18 * v18 + v19 * v19) < 0.00001)
      {
        a1[1] = v17 - v16;
        a1[2] = v16 * 0.0 - v14 * 0.0;
        a1[3] = v14 - v17;
      }
      *a1 = 0.0;
      PCVector3<double>::normalize(v20, 0.000000100000001);
    }
  }
  else
  {
    *a1 = 1.0;
    a1[1] = 0.0;
    a1[2] = 0.0;
    a1[3] = 0.0;
  }
  return a1;
}

BOOL OZScene::isDepthOfFieldSupported(OZScene *this)
{
  return OZSceneSettings::get360ProjectMode((OZScene *)((char *)this + 336)) == 0;
}

uint64_t OZScene::setNeedsDesperationMode(atomic_uchar *this, unsigned __int8 a2)
{
  return atomic_exchange(this + 1776, a2) & 1;
}

uint64_t OZScene::inDesperationMode(OZScene *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 1776);
  return v1 & 1;
}

uint64_t OZScene::openMedia(OZScene *this)
{
  OZScene::rbegin_t<OZSceneNode,false,true>((uint64_t *)this, (uint64_t)v23);
  uint64_t v2 = 0;
  uint64_t v3 = *((void *)this + 151);
  memset(v21, 0, sizeof(v21));
  int v22 = 1065353216;
  double v17 = (char *)this + 1200;
  uint64_t v18 = v3;
  double v19 = (char *)this + 1200;
  char v20 = 0;
  while ((char *)v23[0] != v17)
  {
    if (v23[0] == v24 || (double v4 = *(const void **)(v23[0] + 16)) == 0)
    {
      BOOL v16 = 0;
      goto LABEL_9;
    }
    BOOL v16 = 0;
    if (v7)
    {
      char v10 = OZFootage::isInUseByUnreplacedDropZonesOnly(v7, &v16);
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = 0;
      if (v5)
      {
LABEL_15:
        if (OZElement::isVisibleInRig(v5)) {
          goto LABEL_27;
        }
      }
    }
    if (v7)
    {
      char v14 = v16 ? 0 : v10;
      if ((v14 & 1) == 0)
      {
        OZFootage::setNeedsDZFileOpen((uint64_t)v7, 1);
        double v5 = (OZElement *)v7;
LABEL_27:
        uint64_t v13 = (*(uint64_t (**)(OZElement *))(*(void *)v5 + 104))(v5);
LABEL_28:
        uint64_t v2 = v13;
        goto LABEL_29;
      }
    }
    if (v8)
    {
      double v5 = v8;
      if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*((void *)v8 + 2) + 24))((uint64_t)v8 + 16, 1, 1))goto LABEL_27; {
    }
      }
    double v5 = v9;
    if (v9) {
      goto LABEL_27;
    }
    double v5 = v6;
    if (v6) {
      goto LABEL_27;
    }
LABEL_9:
    if ((TXParagraphStyleFolder_Factory::version(this) & 1) == 0 && v23[0] != v24)
    {
      double v11 = *(const void **)(v23[0] + 16);
      if (v11)
      {
        if (v12)
        {
          uint64_t v13 = (*(uint64_t (**)(void *))(*(void *)v12 + 104))(v12);
          goto LABEL_28;
        }
      }
    }
LABEL_29:
    OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::decrement(v23);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v21);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v25);
  return v2;
}

void sub_1B7C24A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(a3);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *OZScene::rbegin_t<OZSceneNode,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(void *)a2 = result + 150;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = result + 150;
  *(unsigned char *)(a2 + 24) = 0;
  if (result + 150 != v2) {
    return OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::decrement((uint64_t *)a2);
  }
  return result;
}

void sub_1B7C24AFC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *OZScene::addSimulator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1720;
  uint64_t result = operator new(0x18uLL);
  result[1] = v4;
  result[2] = a2;
  uint64_t v6 = *(void *)(a1 + 1720);
  *uint64_t result = v6;
  *(void *)(v6 + 8) = result;
  *(void *)(a1 + 172OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = result;
  ++*(void *)(a1 + 1736);
  return result;
}

void *OZScene::removeSimulator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return std::list<OZCPPObserver *>::remove(a1 + 1720, &v3);
}

void *std::list<OZCPPObserver *>::remove(uint64_t a1, void *a2)
{
  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  _OWORD v10[2] = 0;
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 != (void *)a1)
  {
    do
    {
      uint64_t v6 = (void *)v2[1];
      uint64_t v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (void *)a1)
        {
          BOOL v8 = 1;
LABEL_8:
          uint64_t v6 = (void *)a1;
        }
        else
        {
          while (1)
          {
            uint64_t v7 = v6[2];
            BOOL v8 = v7 == v5;
            if (v7 != v5) {
              break;
            }
            uint64_t v6 = (void *)v6[1];
            if (v6 == (void *)a1) {
              goto LABEL_8;
            }
          }
        }
        std::list<std::shared_ptr<TXTextStyle>>::splice((uint64_t)v10, v10, a1, v2, v6);
        if (!v8) {
          uint64_t v6 = (void *)v6[1];
        }
      }
      uint64_t v2 = v6;
    }
    while (v6 != (void *)a1);
  }
  return std::__list_imp<unsigned int>::clear(v10);
}

void sub_1B7C24C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

CGImageRef OZScene::setCustomEnvironmentMap(OZScene *this, CGImageRef image)
{
  uint64_t v4 = (CGImage *)*((void *)this + 234);
  if (v4) {
    CGImageRelease(v4);
  }
  *((void *)this + 234) = image;

  return CGImageRetain(image);
}

uint64_t OZScene::getCustomEnvironmentMap(OZScene *this)
{
  return *((void *)this + 234);
}

void OZSceneList::OZSceneList(OZSceneList *this)
{
  PCSingleton::PCSingleton(this, 0);
  *(void *)uint64_t v2 = &unk_1F11426C0;
  PCMutex::PCMutex((PCMutex *)(v2 + 8));
  *((void *)this + 12) = 0;
  *((void *)this + 1OZDocument::~OZDocument(this - 1) = 0;
  *((void *)this + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = (char *)this + 88;
}

void sub_1B7C24D10(_Unwind_Exception *a1)
{
  PCSingleton::~PCSingleton(v1);
  _Unwind_Resume(a1);
}

void OZSceneList::~OZSceneList(OZSceneList *this)
{
  *(void *)this = &unk_1F11426C0;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  PCMutex::~PCMutex((PCMutex *)((char *)this + 8));

  PCSingleton::~PCSingleton(this);
}

{
  uint64_t vars8;

  OZSceneList::~OZSceneList(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZSceneList::end(OZSceneList *this)
{
  return (uint64_t)this + 88;
}

uint64_t OZScene::getSanitizedViewGamut(OZScene *this)
{
  uint64_t result = *((unsigned int *)this + 99);
  if (result == -1)
  {
    if (OZSceneSettings::dynamicRangeTrackingEnabled((OZScene *)((char *)this + 336)))
    {
      if (*((unsigned char *)this + 405)) {
        return 5;
      }
      else {
        return 0;
      }
    }
    else
    {
      int RawWorkingGamut = OZScene::getRawWorkingGamut(this);
      return PCGetColorGamut(RawWorkingGamut);
    }
  }
  return result;
}

uint64_t OZScene::getRawWorkingGamut(OZScene *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 232);
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 232));
  uint64_t v3 = *((unsigned int *)this + 98);
  PCSharedMutex::unlock_shared(v2);
  return v3;
}

void OZScene::setRawWorkingGamut(uint64_t a1, int a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 232);
  PCSharedMutex::lock((std::mutex *)(a1 + 232));
  OZSceneSettings::setRawWorkingGamut(a1 + 336, a2);
  PCSharedMutex::unlock(v4);
}

void sub_1B7C24ECC(_Unwind_Exception *a1)
{
  PCSharedMutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::getWorkingColorDescription@<X0>(OZScene *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 1816;
  int ComputedWorkingGamut = OZScene::getComputedWorkingGamut(this);
  WorkingColorSpace = (CGColorSpace *)PCRenderModel::getWorkingColorSpace((uint64_t)v4, ComputedWorkingGamut);
  Sceneuint64_t DynamicRange = OZScene::getSceneDynamicRange(this);
  unint64_t SceneToneMapMethod = OZScene::getSceneToneMapMethod(this);
  return FxColorDescription::FxColorDescription(a2, WorkingColorSpace, SceneDynamicRange, &SceneToneMapMethod, 1);
}

uint64_t OZScene::getSceneDynamicRange(OZScene *this)
{
  uint64_t result = OZSceneSettings::dynamicRangeTrackingEnabled((OZScene *)((char *)this + 336));
  if (result) {
    return (OZScene::getSanitizedViewGamut(this) & 0xFFFFFFFE) == 4;
  }
  return result;
}

unint64_t OZScene::getSceneToneMapMethod(OZScene *this)
{
  if (OZSceneSettings::dynamicRangeTrackingEnabled((OZScene *)((char *)this + 336)))
  {
    *(float *)v2.i32 = OZScene::getSceneWhiteLevel(this);
    double WhiteGainForHLGLevel = PCColorUtil::getWhiteGainForHLGLevel(v3, v2);
    uint64_t v5 = 5;
  }
  else
  {
    uint64_t v5 = 0;
    LODWORD(WhiteGainForHLGLevel) = 0;
  }
  return v5 | ((unint64_t)LODWORD(WhiteGainForHLGLevel) << 32);
}

uint64_t non-virtual thunk to'OZScene::getWorkingColorDescription@<X0>(OZScene *this@<X0>, uint64_t a2@<X8>)
{
  return OZScene::getWorkingColorDescription((OZScene *)((char *)this - 8), a2);
}

float OZScene::getSceneWhiteLevel(OZScene *this)
{
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, 24);
  int v11 = 1065353216;
  OZScene::begin_t<OZProjectNode,false,true>((uint64_t *)this, (uint64_t)v6);
  *(_OWORD *)double v9 = v6[0];
  *(_OWORD *)&v9[9] = *(_OWORD *)((char *)v6 + 9);
  int v11 = v8;
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v10, v7[2], 0);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v7);
  float v1 = 0.75;
  if (*(void *)v9 != *(void *)&v9[16])
  {
    int32x2_t v2 = *(const void **)(*(void *)v9 + 16);
    if (v2)
    {
      if (v3)
      {
        OZProjectNode::getHDRWhiteLevel(v3);
        float v1 = v4;
      }
    }
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v10);
  return v1;
}

void sub_1B7C250FC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t OZScene::getRenderModel(OZScene *this)
{
  return (uint64_t)this + 1816;
}

float OZScene::getBlendingGamma(OZScene *this)
{
  uint64_t v1 = (char *)this + 1816;
  int ComputedWorkingGamut = OZScene::getComputedWorkingGamut(this);

  return PCRenderModel::getBlendingGamma((uint64_t)v1, ComputedWorkingGamut);
}

float non-virtual thunk to'OZScene::getBlendingGamma(OZScene *this)
{
  uint64_t v1 = (char *)this + 1808;
  int ComputedWorkingGamut = OZScene::getComputedWorkingGamut((OZScene *)((char *)this - 8));

  return PCRenderModel::getBlendingGamma((uint64_t)v1, ComputedWorkingGamut);
}

void OZScene::computeLockDependencies(OZScene *this)
{
  int32x2_t v2 = (OZChannelBase *)*((void *)this + 188);
  if (v2) {
    OZChannelBase::setRangeName(v2, (const PCString *)1);
  }
  PCSharedMutex::lock((std::mutex *)((char *)this + 40));
  uint64_t v3 = (OZLockingGroup **)*((void *)this + 223);
  double v4 = (OZLockingGroup **)*((void *)this + 224);
  if (v3 != v4)
  {
    do
    {
      if (*v3)
      {
        OZLockingGroup::~OZLockingGroup(*v3);
        MEMORY[0x1BA9BFBA0]();
      }
      ++v3;
    }
    while (v3 != v4);
    uint64_t v3 = (OZLockingGroup **)*((void *)this + 223);
  }
  *((void *)this + 224) = v3;
  OZScene::buildLockDependencyGraphForScene(this, v5);
  OZScene::buildLockingGroups((uint64_t)this, (uint64_t)v5);
  uint64_t v7 = (void **)&v6;
  std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::destroy((uint64_t)v5, (void *)v5[1]);
  PCSharedMutex::unlock((std::mutex *)((char *)this + 40));
}

void sub_1B7C25284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PCDirectedGraph<OZLocking *>::~PCDirectedGraph((uint64_t)va);
  PCSharedMutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t OZScene::buildLockDependencyGraphForScene@<X0>(OZScene *this@<X0>, void *a2@<X8>)
{
  a2[1] = 0;
  *a2 = a2 + 1;
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  uint64_t v3 = *((void *)this + 151);
  memset(v12, 0, sizeof(v12));
  int v13 = 1065353216;
  v9[0] = v3;
  v9[1] = v3;
  char v10 = (char *)this + 1200;
  char v11 = 0;
  memset(v7, 0, sizeof(v7));
  int v8 = 1065353216;
  uint64_t v6 = (char *)this + 1200;
  while ((char *)v9[0] != v6)
  {
    if ((char *)v9[0] == v10) {
      double v4 = 0;
    }
    else {
      double v4 = *(char **)(v9[0] + 16);
    }
    OZScene::addLockDependencyGraphForSceneNode((int)this, (uint64_t)a2, v4);
    LODWORD(this) = OZObject::iterator_t<OZSceneNode,false,true,OZObject::defaultValidator>::increment(v9);
  }
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v7);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v12);
}

void sub_1B7C25384(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v2);
  PCDirectedGraph<OZLocking *>::~PCDirectedGraph(v1);
  _Unwind_Resume(a1);
}

void OZScene::buildLockingGroups(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 32);
  if (v2 == v3)
  {
    PCDirectedGraph<OZLocking *>::findStronglyConnectedComponents((uint64_t **)a2);
    uint64_t v2 = *(void *)(a2 + 24);
    uint64_t v3 = *(void *)(a2 + 32);
  }
  if (v2 != v3) {
    operator new();
  }
}

void sub_1B7C25558(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1020C407E778586);
  _Unwind_Resume(a1);
}

uint64_t PCDirectedGraph<OZLocking *>::~PCDirectedGraph(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::vector<Vec3f>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::destroy(a1, *(void **)(a1 + 8));
  return a1;
}

void OZScene::addLockDependencyGraphForSceneNode(int a1, uint64_t a2, char *lpsrc)
{
  uint64_t v5 = lpsrc + 1000;
  uint64_t v6 = (char *)*((void *)lpsrc + 126);
  if (v6 == lpsrc + 1000) {
    goto LABEL_7;
  }
  do
  {
    uint64_t v7 = (const void *)*((void *)v6 + 2);
    if (v7)
    {
      if (v8)
      {
        double v9 = v8;
        OZLocking::reset(v8);
        int v13 = 0;
        uint64_t v14 = 0;
        double v12 = &v13;
        (*(void (**)(OZLocking *, void, uint64_t, void ***))(*(void *)v9 + 48))(v9, 0, a2, &v12);
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v12, v13);
      }
    }
    uint64_t v6 = (char *)*((void *)v6 + 1);
  }
  while (v6 != v5);
  if (lpsrc)
  {
LABEL_7:
    if (v10)
    {
      char v11 = v10;
      OZLocking::reset(v10);
      int v13 = 0;
      uint64_t v14 = 0;
      double v12 = &v13;
      (*(void (**)(OZLocking *, void, uint64_t, void ***))(*(void *)v11 + 48))(v11, 0, a2, &v12);
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v12, v13);
    }
  }
}

void sub_1B7C25774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void OZScene::willAcquireLockingGroup(OZScene *this)
{
}

void OZScene::didReleaseLockingGroup(OZScene *this)
{
}

void PCMakePtr<OZSceneCamera,OZScene *,OZViewCameraType>()
{
}

void sub_1B7C25828(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40287C748ELL);
  _Unwind_Resume(a1);
}

void OZScene::render(OZScene *this, OZRenderParams *a2)
{
  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v3, "function deprecated");
  PCException::PCException(exception, &v3);
  *(void *)exception = &unk_1F10B1208;
}

void sub_1B7C258C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZScene::end_descendants(OZScene *this)
{
  return (uint64_t)this + 1200;
}

void std::__tree<OZGuide>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<OZGuide>::destroy(a1, *a2);
    std::__tree<OZGuide>::destroy(a1, a2[1]);
    (*(void (**)(void))a2[4])();
    operator delete(a2);
  }
}

void PCRenderModel::PCRenderModel(PCRenderModel *this, const PCRenderModel *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  double v4 = (CGColorSpace *)*((void *)a2 + 1);
  *((void *)this + OZDocument::~OZDocument(this - 1) = v4;
  if (v4) {
    PCCFRefTraits<CGColorSpace *>::retain(v4);
  }
  uint64_t v5 = (CGColorSpace *)*((void *)a2 + 2);
  *((void *)this + 2) = v5;
  if (v5) {
    PCCFRefTraits<CGColorSpace *>::retain(v5);
  }
  *((void *)this + 3) = *((void *)a2 + 3);
}

void sub_1B7C259F8(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<PCMutex>::shared_ptr[abi:ne180100]<PCMutex,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B7C25A74(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<PCMutex>::shared_ptr[abi:ne180100]<PCMutex,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<PCMutex *,std::shared_ptr<PCMutex>::__shared_ptr_default_delete<PCMutex,PCMutex>,std::allocator<PCMutex>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<PCMutex *,std::shared_ptr<PCMutex>::__shared_ptr_default_delete<PCMutex,PCMutex>,std::allocator<PCMutex>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

void *OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 2;
  uint64_t v3 = *result;
  if (*result == result[2]) {
    goto LABEL_14;
  }
  double v4 = *(void **)(v3 + 16);
  if ((*(unsigned int (**)(void *))(*v4 + 1056))(v4))
  {
    uint64_t v5 = *v1;
    int v13 = v4;
    uint64_t v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v5;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1104))(v4);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(void *))(*v4 + 960))(v4))
  {
    uint64_t v6 = *v1;
    int v13 = v4;
    uint64_t v14 = &v13;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v6;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1024))(v4);
    *uint64_t v1 = result;
    return result;
  }
  uint64_t v7 = *(void **)(*v1 + 8);
  uint64_t result = (void *)v4[120];
  if (!result || v7 == (void *)*v2)
  {
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = *result;
  if (*((unsigned char *)v1 + 24)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v8 + 1112))();
  }
  else {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v8 + 1032))();
  }
  if (v7 != result)
  {
LABEL_13:
    uint64_t v3 = *v1;
LABEL_14:
    *uint64_t v1 = *(void *)(v3 + 8);
    return result;
  }
  if (*((unsigned char *)v1 + 24)
    && (uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 960))(v4[120]), result))
  {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 1024))(v4[120]);
    *uint64_t v1 = result;
    *((unsigned char *)v1 + 24) = 0;
  }
  else
  {
    *((unsigned char *)v1 + 24) = 0;
    while (1)
    {
      double v4 = (void *)v4[120];
      if (!v4) {
        break;
      }
      uint64_t v14 = v4;
      double v9 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v14);
      char v10 = v9 + 3;
      if (!v9) {
        char v10 = v2;
      }
      uint64_t v11 = *v10;
      *uint64_t v1 = v11;
      uint64_t result = (void *)v4[120];
      if (result)
      {
        double v12 = *(void **)(v11 + 8);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
        if (v12 == result && v12 != (void *)*v2) {
          continue;
        }
      }
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t *OZObject::iterator_t<OZProjectNode,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    uint64_t v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

void *OZObject::iterator_t<OZSceneNode,false,true,OZSoloNodeValidator>::increment(void *result, OZSceneNode *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result + 2;
  uint64_t v4 = *result;
  if (*result == result[2]) {
    goto LABEL_17;
  }
  uint64_t v5 = *(OZSoloNodeValidator **)(v4 + 16);
  BOOL v6 = OZSoloNodeValidator::recurseInto(v5, a2);
  if ((*(unsigned int (**)(OZSoloNodeValidator *))(*(void *)v5 + 1056))(v5)) {
    BOOL v7 = !v6;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v9 = *v2;
    BOOL v16 = v5;
    double v17 = &v16;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v2 + 4), &v16, (uint64_t)&std::piecewise_construct, &v17)[3] = v9;
    uint64_t result = (void *)(*(uint64_t (**)(OZSoloNodeValidator *))(*(void *)v5 + 1104))(v5);
    *uint64_t v2 = result;
    *((unsigned char *)v2 + 24) = 1;
    return result;
  }
  if (((*(unsigned int (**)(OZSoloNodeValidator *))(*(void *)v5 + 960))(v5) & v6) == 1)
  {
    uint64_t v8 = *v2;
    BOOL v16 = v5;
    double v17 = &v16;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v2 + 4), &v16, (uint64_t)&std::piecewise_construct, &v17)[3] = v8;
    uint64_t result = (void *)(*(uint64_t (**)(OZSoloNodeValidator *))(*(void *)v5 + 1024))(v5);
    *uint64_t v2 = result;
    return result;
  }
  char v10 = *(void **)(*v2 + 8);
  uint64_t result = (void *)*((void *)v5 + 120);
  if (!result || v10 == (void *)*v3)
  {
    *uint64_t v2 = v10;
    return result;
  }
  uint64_t v11 = *result;
  if (*((unsigned char *)v2 + 24)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v11 + 1112))();
  }
  else {
    uint64_t result = (void *)(*(uint64_t (**)(void))(v11 + 1032))();
  }
  if (v10 != result)
  {
LABEL_16:
    uint64_t v4 = *v2;
LABEL_17:
    *uint64_t v2 = *(void *)(v4 + 8);
    return result;
  }
  if (*((unsigned char *)v2 + 24)
    && (uint64_t result = (void *)(*(uint64_t (**)(void))(**((void **)v5 + 120) + 960))(*((void *)v5 + 120)),
        (result & v6) == 1))
  {
    uint64_t result = (void *)(*(uint64_t (**)(void))(**((void **)v5 + 120) + 1024))(*((void *)v5 + 120));
    *uint64_t v2 = result;
    *((unsigned char *)v2 + 24) = 0;
  }
  else
  {
    *((unsigned char *)v2 + 24) = 0;
    while (1)
    {
      uint64_t v5 = (OZSoloNodeValidator *)*((void *)v5 + 120);
      if (!v5) {
        break;
      }
      double v17 = v5;
      double v12 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v2 + 4, &v17);
      int v13 = v12 + 3;
      if (!v12) {
        int v13 = v3;
      }
      uint64_t v14 = *v13;
      *uint64_t v2 = v14;
      uint64_t result = (void *)*((void *)v5 + 120);
      if (result)
      {
        double v15 = *(void **)(v14 + 8);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
        if (v15 == result && v15 != (void *)*v3) {
          continue;
        }
      }
      goto LABEL_16;
    }
  }
  return result;
}

BOOL OZSoloNodeValidator::recurseInto(OZSoloNodeValidator *this, OZSceneNode *a2)
{
}

uint64_t *OZObject::iterator_t<OZAudioLayer,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(a1);
  for (uint64_t i = *a1; *a1 != a1[2]; uint64_t i = *a1)
  {
    uint64_t v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<OZImageElement,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t *std::__tree<unsigned int>::erase(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      BOOL v6 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(a1, v4);
      operator delete(v4);
      uint64_t v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t std::__tree<unsigned int>::__erase_unique<unsigned int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 28);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      BOOL v7 = (uint64_t *)v2;
    }
    else {
      BOOL v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28)) {
    return 0;
  }
  std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

void std::vector<std::pair<OZSceneNode *,PCVector3<double>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>(v4, v12);
    }
    else {
      int v13 = 0;
    }
    OZRenderState __p = v13;
    double v15 = &v13[32 * v10];
    double v17 = &v13[32 * v12];
    bzero(v15, 32 * a2);
    BOOL v16 = &v15[32 * a2];
    std::vector<std::pair<OZSceneNode *,PCVector3<double>>>::__swap_out_circular_buffer(a1, &__p);
    if (v16 != v15) {
      v16 += (v15 - v16 + 31) & 0xFFFFFFFFFFFFFFE0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1B7C265CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::pair<OZSceneNode *,PCVector3<double>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OZObjectManipulator *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x20uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  char v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    char v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B7C2689C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,OZObjectManipulator *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,OZObjectManipulator *>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<TXTextObject>>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  OZRenderState __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::__map_value_compare<OZChannelObjectRoot *,std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>,std::less<OZChannelObjectRoot *>,true>,std::allocator<std::__value_type<OZChannelObjectRoot *,OZRetimingUtil::RootInfo>>>::destroy(a1, a2[1]);
    unint64_t v4 = (void *)a2[18];
    if (v4)
    {
      a2[19] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void *std::__tree<OZTimeMarker>::find<OZTimeMarker>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    int v6 = OZTimeMarker::operator<((uint64_t)(v3 + 4), a2);
    unint64_t v7 = v3 + 1;
    if (!v6)
    {
      unint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || OZTimeMarker::operator<(a2, (uint64_t)(v5 + 4))) {
    return v2;
  }
  return v5;
}

uint64_t *std::__tree<OZTimeMarker>::__emplace_unique_key_args<OZTimeMarker,OZTimeMarker const&>(uint64_t **a1, uint64_t a2, const OZTimeMarker *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<OZTimeMarker>::__find_equal<OZTimeMarker>((uint64_t)a1, &v10, a2);
  int v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = v5;
    std::__tree<OZTimeMarker>::__construct_node<OZTimeMarker const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    int v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<OZTimeMarker,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<OZTimeMarker,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void *std::__tree<OZTimeMarker>::__find_equal<OZTimeMarker>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!OZTimeMarker::operator<(a3, (uint64_t)(v4 + 4))) {
          break;
        }
        unint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!OZTimeMarker::operator<(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      unint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

OZTimeMarker *std::__tree<OZTimeMarker>::__construct_node<OZTimeMarker const&>@<X0>(uint64_t a1@<X0>, const OZTimeMarker *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = OZTimeMarker::OZTimeMarker((OZTimeMarker *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B7C26B50(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<OZTimeMarker,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<OZTimeMarker,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<OZTimeMarker,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<OZTimeMarker,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void (****)(void))a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      (*v2[4])();
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<PCHash128,PCMutexRef>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCMutexRef>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCMutexRef>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(a1, a2);
  unint64_t v4 = (std::__shared_weak_count *)a2[7];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  operator delete(a2);
  return v3;
}

PCSharedCount *PCPtr<OZSceneCamera>::PCPtr<LiCamera>(PCSharedCount *a1, const PCSharedCount *a2)
{
  int var0 = a2->var0;
  if (a2->var0) {
  a1->int var0 = var0;
  }
  PCSharedCount::PCSharedCount(a1 + 1, a2 + 1);
  if (!a1->var0)
  {
    PCSharedCount::PCSharedCount(&v6);
    PCSharedCount::operator=((uint64_t *)&a1[1], (uint64_t *)&v6);
    PCSharedCount::~PCSharedCount(&v6);
  }
  return a1;
}

void sub_1B7C26CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  PCSharedCount::~PCSharedCount(v10);
  _Unwind_Resume(a1);
}

uint64_t OZObject::all_iterator_t<OZRigBehavior,false,true,OZObject::defaultAllValidator>::typeCheck(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 40);
  if (v1 < 2)
  {
    if (*(void *)a1 == *(void *)(a1 + 16)) {
      return 1;
    }
    uint64_t result = *(void *)(*(void *)a1 + 16);
    if (!result) {
      return result;
    }
LABEL_11:
    ptrdiff_t v4 = -2;
  }
  if (v1 == 2)
  {
    uint64_t result = *(void *)(*(void *)(a1 + 24) + 16);
    if (!result) {
      return result;
    }
    goto LABEL_11;
  }
  if (v1 == 3)
  {
    uint64_t result = *(void *)(*(void *)(a1 + 32) + 16);
    if (!result) {
      return result;
    }
    ptrdiff_t v4 = 0;
  }
  return 0;
}

void *OZObject::all_iterator_t<OZRigBehavior,false,true,OZObject::defaultAllValidator>::increment(void *result)
{
  unsigned int v1 = result;
  uint64_t v2 = result + 2;
  uint64_t v3 = *result;
  if (*result == result[2])
  {
    uint64_t v3 = *(void *)(v3 + 8);
    *uint64_t result = v3;
  }
  switch(*((_DWORD *)result + 10))
  {
    case 0:
      ptrdiff_t v4 = *(void **)(v3 + 16);
      if (((*(uint64_t (**)(void *))(*v4 + 960))(v4) & 1) == 0
        && ((*(uint64_t (**)(void *))(*v4 + 1056))(v4) & 1) == 0
        && !v4[124]
        && !v4[127])
      {
        uint64_t result = (void *)v4[120];
        if (result)
        {
          uint64_t v25 = *(void **)(*v1 + 8);
          uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
          if (v25 == result && v25 != (void *)*v2) {
            goto LABEL_24;
          }
        }
        goto LABEL_30;
      }
      uint64_t v5 = *v1;
      long long v28 = v4;
      long long v29 = &v28;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 6), &v28, (uint64_t)&std::piecewise_construct, &v29)[3] = v5;
      if ((*(unsigned int (**)(void *))(*v4 + 960))(v4)) {
        *unsigned int v1 = (*(uint64_t (**)(void *))(*v4 + 1024))(v4);
      }
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1056))(v4);
      if (result)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1104))(v4);
        *unsigned int v1 = result;
        int v6 = 1;
        goto LABEL_49;
      }
      if (v4[124]) {
        goto LABEL_34;
      }
      if (v4[127]) {
        goto LABEL_46;
      }
      return result;
    case 1:
      unint64_t v7 = *(void **)(v3 + 8);
      long long v28 = *(void **)(v3 + 16);
      ptrdiff_t v4 = v28;
      uint64_t v8 = result + 6;
      long long v29 = &v28;
      uint64_t result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(result + 6), &v28, (uint64_t)&std::piecewise_construct, &v29);
      result[3] = v3;
      if (v4[124])
      {
LABEL_34:
        uint64_t v17 = v4[123];
        goto LABEL_35;
      }
      if (v4[127])
      {
LABEL_46:
        uint64_t v23 = v4[126];
        goto LABEL_47;
      }
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 1112))(v4[120]);
      if (v7 != result || v7 == (void *)*v2) {
        goto LABEL_30;
      }
      uint8x8_t v9 = (void *)v4[120];
      if (v9[124]) {
        goto LABEL_61;
      }
      if (!v9[127])
      {
        *((_DWORD *)v1 + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
        goto LABEL_68;
      }
      goto LABEL_65;
    case 2:
      uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)(result[3] + 16) + 248))(*(void *)(result[3] + 16));
      ptrdiff_t v4 = result;
      uint64_t v10 = *(void **)(v1[3] + 8);
      v1[3] = v10;
      if (v10 != result + 122) {
        goto LABEL_24;
      }
      uint64_t v11 = (void *)result[126];
      v1[4] = v11;
      if (v11 != result + 125) {
        goto LABEL_48;
      }
LABEL_31:
      *((_DWORD *)v1 + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
      if ((*(unsigned int (**)(void *))(*v4 + 960))(v4))
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*v4 + 1024))(v4);
        *unsigned int v1 = result;
        return result;
      }
      long long v29 = v4;
      uint64_t v8 = v1 + 6;
      uint64_t result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 6, &v29);
      size_t v18 = result + 3;
      if (!result) {
        size_t v18 = v2;
      }
      uint64_t v19 = (void *)*v18;
      *unsigned int v1 = *v18;
      char v20 = (void *)v1[2];
      if (v19 == v20) {
        return result;
      }
      unint64_t v21 = (void *)v19[1];
      uint64_t result = (void *)v4[120];
      if (result) {
        BOOL v22 = v21 == v20;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        *unsigned int v1 = v21;
        return result;
      }
      uint64_t v24 = *result;
      if ((v4[128] & 8) == 0)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void))(v24 + 1032))();
        if (v21 == result)
        {
          do
          {
LABEL_24:
            ptrdiff_t v4 = (void *)v4[120];
            if (!v4) {
              return result;
            }
            long long v29 = v4;
            float v13 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 6, &v29);
            float v14 = v13 + 3;
            if (!v13) {
              float v14 = v2;
            }
            uint64_t v15 = *v14;
            *unsigned int v1 = v15;
            uint64_t result = (void *)v4[120];
            if (!result) {
              break;
            }
            unint64_t v16 = *(void **)(v15 + 8);
            uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 1032))(result);
            if (v16 != result) {
              break;
            }
          }
          while (v16 != (void *)*v2);
        }
LABEL_30:
        *unsigned int v1 = *(void *)(*v1 + 8);
        return result;
      }
      uint64_t result = (void *)(*(uint64_t (**)(void))(v24 + 1112))();
      if (v21 != result)
      {
        *((_DWORD *)v1 + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1;
        goto LABEL_30;
      }
      uint8x8_t v9 = (void *)v4[120];
      if (v9[124])
      {
LABEL_61:
        long long v29 = v9;
        uint64_t result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v8, &v29);
        long long v26 = result + 3;
        if (!result) {
          long long v26 = v2;
        }
        *unsigned int v1 = *v26;
        uint64_t v17 = v9[123];
LABEL_35:
        v1[3] = v17;
        int v6 = 2;
LABEL_49:
        *((_DWORD *)v1 + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v6;
        return result;
      }
      if (v9[127])
      {
LABEL_65:
        long long v29 = v9;
        uint64_t result = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v8, &v29);
        uint64_t v27 = result + 3;
        if (!result) {
          uint64_t v27 = v2;
        }
        *unsigned int v1 = *v27;
        uint64_t v23 = v9[126];
LABEL_47:
        v1[4] = v23;
LABEL_48:
        int v6 = 3;
        goto LABEL_49;
      }
LABEL_68:
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*v9 + 960))(v9);
      if (!result) {
        goto LABEL_24;
      }
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v4[120] + 1024))(v4[120]);
      *unsigned int v1 = result;
      *((_DWORD *)v1 + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
      return result;
    case 3:
      uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)(result[4] + 16) + 320))(*(void *)(result[4] + 16));
      ptrdiff_t v4 = result;
      unint64_t v12 = *(void **)(v1[4] + 8);
      v1[4] = v12;
      if (v12 != result + 125) {
        goto LABEL_24;
      }
      goto LABEL_31;
    default:
      ptrdiff_t v4 = 0;
      goto LABEL_24;
  }
}

void PCDirectedGraph<OZLocking *>::findStronglyConnectedComponents(uint64_t **a1)
{
  int v19 = 0;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v17 = v18;
  memset(v16, 0, sizeof(v16));
  v15[0] = 0;
  v15[1] = 0;
  v13[1] = 0;
  float v14 = v15;
  unint64_t v12 = v13;
  v13[0] = 0;
  unsigned int v1 = a1 + 1;
  uint64_t v2 = *a1;
  if (*a1 == (uint64_t *)(a1 + 1))
  {
    uint8x8_t v9 = 0;
  }
  else
  {
    do
    {
      unint64_t v10 = v2[4];
      std::set<OZLocking *>::set[abi:ne180100](v11, (uint64_t)(v2 + 5));
      for (uint64_t i = v15[0]; i; uint64_t i = (void *)*i)
      {
        unint64_t v5 = i[4];
        if (v10 >= v5)
        {
          if (v5 >= v10) {
            goto LABEL_8;
          }
          ++i;
        }
      }
      PCDirectedGraph<OZLocking *>::dfs(a1, v10, &v19, (uint64_t)&v17, v16, (uint64_t)&v14, &v12);
LABEL_8:
      std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v11, (void *)v11[1]);
      int v6 = (uint64_t *)v2[1];
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          int v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (uint64_t *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != (uint64_t *)v1);
    uint8x8_t v9 = (void *)v13[0];
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v12, v9);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v14, v15[0]);
  std::deque<unsigned long>::~deque[abi:ne180100](v16);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v17, v18[0]);
}

void sub_1B7C27618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, void);
  unint64_t v10 = va_arg(va1, void *);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  float v14 = va_arg(va2, void *);
  uint64_t v15 = va_arg(va2, void);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v5, a4);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)va, v10);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)va1, v14);
  std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t *)va2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v6 - 64, *(void **)(v6 - 56));
  _Unwind_Resume(a1);
}

void PCDirectedGraph<OZLocking *>::dfs(uint64_t **a1, uint64_t a2, int *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t **a7)
{
  unint64_t v64 = a2;
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, &v64, (uint64_t *)&v64);
  std::deque<OZLocking *>::push_back(a5, &v64);
  int v13 = *a3 + 1;
  *a3 = v13;
  OZRenderState __p = &v64;
  *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(a7, &v64, (uint64_t)&std::piecewise_construct, (void **)&__p)+ 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v13;
  int v14 = *a3;
  OZRenderState __p = &v64;
  *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>((uint64_t **)a6, &v64, (uint64_t)&std::piecewise_construct, (void **)&__p)+ 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v14;
  int v59 = (uint64_t *)a1;
  OZRenderState __p = &v64;
  uint64_t v15 = std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::__emplace_unique_key_args<OZLocking *,std::piecewise_construct_t const&,std::tuple<OZLocking * const&>,std::tuple<>>(a1, &v64, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
  unint64_t v16 = (uint64_t *)v15[5];
  uint64_t v17 = v15 + 6;
  if (v16 == v15 + 6) {
    goto LABEL_26;
  }
  do
  {
    unint64_t v18 = v16[4];
    unint64_t v63 = v18;
    int v19 = *(void **)(a6 + 8);
    if (!v19)
    {
LABEL_7:
      PCDirectedGraph<OZLocking *>::dfs(v59);
      OZRenderState __p = &v64;
      unint64_t v21 = std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(a7, &v64, (uint64_t)&std::piecewise_construct, (void **)&__p);
      OZRenderState __p = &v63;
      BOOL v22 = a7;
      goto LABEL_8;
    }
    while (1)
    {
      unint64_t v20 = v19[4];
      if (v18 >= v20) {
        break;
      }
LABEL_6:
      int v19 = (void *)*v19;
      if (!v19) {
        goto LABEL_7;
      }
    }
    if (v20 < v18)
    {
      ++v19;
      goto LABEL_6;
    }
    long long v28 = *(void **)(a4 + 8);
    if (!v28) {
      goto LABEL_12;
    }
    while (2)
    {
      unint64_t v29 = v28[4];
      if (v18 < v29)
      {
LABEL_23:
        long long v28 = (void *)*v28;
        if (!v28) {
          goto LABEL_12;
        }
        continue;
      }
      break;
    }
    if (v29 < v18)
    {
      ++v28;
      goto LABEL_23;
    }
    OZRenderState __p = &v64;
    unint64_t v21 = std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(a7, &v64, (uint64_t)&std::piecewise_construct, (void **)&__p);
    OZRenderState __p = &v63;
    BOOL v22 = (uint64_t **)a6;
LABEL_8:
    int v23 = *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(v22, &v63, (uint64_t)&std::piecewise_construct, (void **)&__p)+ 10);
    if (v23 >= *((_DWORD *)v21 + 10)) {
      int v24 = *((_DWORD *)v21 + 10);
    }
    else {
      int v24 = v23;
    }
    OZRenderState __p = &v64;
    *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(a7, &v64, (uint64_t)&std::piecewise_construct, (void **)&__p)+ 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v24;
LABEL_12:
    uint64_t v25 = (uint64_t *)v16[1];
    if (v25)
    {
      do
      {
        long long v26 = v25;
        uint64_t v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      do
      {
        long long v26 = (uint64_t *)v16[2];
        BOOL v27 = *v26 == (void)v16;
        unint64_t v16 = v26;
      }
      while (!v27);
    }
    unint64_t v16 = v26;
  }
  while (v26 != v17);
LABEL_26:
  OZRenderState __p = &v64;
  int v30 = *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(a7, &v64, (uint64_t)&std::piecewise_construct, (void **)&__p)+ 10);
  OZRenderState __p = &v64;
  if (v30 == *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>((uint64_t **)a6, &v64, (uint64_t)&std::piecewise_construct, (void **)&__p)+ 10))
  {
    OZRenderState __p = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    while (1)
    {
      unint64_t v31 = a5[5] + a5[4] - 1;
      uint64_t v32 = *(void *)(a5[1] + ((v31 >> 6) & 0x3FFFFFFFFFFFFF8));
      unint64_t v33 = v31 & 0x1FF;
      uint64_t v34 = *(void *)(v32 + 8 * v33);
      long long v35 = v61;
      if (v34 == v64) {
        break;
      }
      if (v61 >= v62)
      {
        uint64_t v37 = ((char *)v61 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v37 + 1) >> 61) {
          goto LABEL_68;
        }
        unint64_t v38 = ((char *)v62 - (unsigned char *)__p) >> 2;
        if (v38 <= v37 + 1) {
          unint64_t v38 = v37 + 1;
        }
        if ((unint64_t)((char *)v62 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          uint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v62, v39);
          uint64_t v34 = *(void *)(v32 + 8 * v33);
        }
        else
        {
          uint64_t v40 = 0;
        }
        uint64_t v41 = (uint64_t *)&v40[8 * v37];
        uint64_t *v41 = v34;
        long long v36 = v41 + 1;
        long long v43 = (char *)__p;
        uint64_t v42 = (char *)v61;
        if (v61 != __p)
        {
          do
          {
            uint64_t v44 = *((void *)v42 - 1);
            v42 -= 8;
            *--uint64_t v41 = v44;
          }
          while (v42 != v43);
          uint64_t v42 = (char *)__p;
        }
        OZRenderState __p = v41;
        uint64_t v61 = v36;
        uint64_t v62 = (uint64_t *)&v40[8 * v39];
        if (v42) {
          operator delete(v42);
        }
      }
      else
      {
        *uint64_t v61 = v34;
        long long v36 = v35 + 1;
      }
      uint64_t v61 = v36;
      unint64_t v45 = a5[5] + a5[4] - 1;
      std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)(*(void *)(a5[1] + ((v45 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v45 & 0x1FF)));
      --a5[5];
      std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](a5, 1);
    }
    if (v61 >= v62)
    {
      uint64_t v47 = ((char *)v61 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v47 + 1) >> 61) {
LABEL_68:
      }
        std::vector<double>::__throw_length_error[abi:ne180100]();
      unint64_t v48 = ((char *)v62 - (unsigned char *)__p) >> 2;
      if (v48 <= v47 + 1) {
        unint64_t v48 = v47 + 1;
      }
      if ((unint64_t)((char *)v62 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v48;
      }
      if (v49)
      {
        uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v62, v49);
        uint64_t v34 = v64;
      }
      else
      {
        uint64_t v50 = 0;
      }
      uint64_t v51 = (uint64_t *)&v50[8 * v47];
      char v52 = &v50[8 * v49];
      uint64_t *v51 = v34;
      uint64_t v46 = v51 + 1;
      int v54 = (char *)__p;
      int32x4_t v53 = (char *)v61;
      if (v61 != __p)
      {
        do
        {
          uint64_t v55 = *((void *)v53 - 1);
          v53 -= 8;
          *--uint64_t v51 = v55;
        }
        while (v53 != v54);
        int32x4_t v53 = (char *)__p;
      }
      OZRenderState __p = v51;
      uint64_t v61 = v46;
      uint64_t v62 = (uint64_t *)v52;
      if (v53) {
        operator delete(v53);
      }
    }
    else
    {
      *uint64_t v61 = v34;
      uint64_t v46 = v35 + 1;
    }
    uint64_t v61 = v46;
    std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, &v64);
    --a5[5];
    std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](a5, 1);
    uint64_t v56 = v59 + 3;
    unint64_t v57 = v59[4];
    if (v57 >= v59[5])
    {
      uint64_t v58 = std::vector<std::vector<OZLocking *>>::__push_back_slow_path<std::vector<OZLocking *> const&>(v56, (uint64_t)&__p);
    }
    else
    {
      std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>((uint64_t)v56, (uint64_t)&__p);
      uint64_t v58 = v57 + 24;
    }
    v59[4] = v58;
    if (__p)
    {
      uint64_t v61 = (uint64_t *)__p;
      operator delete(__p);
    }
  }
}

void sub_1B7C27B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<OZLocking *>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<OZLocking *>::insert[abi:ne180100]<std::__tree_const_iterator<OZLocking *,std::__tree_node<OZLocking *,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1B7C27BC4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<OZLocking *>::insert[abi:ne180100]<std::__tree_const_iterator<OZLocking *,std::__tree_node<OZLocking *,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    ptrdiff_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<OZLocking *>::__emplace_hint_unique_key_args<OZLocking *,OZLocking * const&>(v5, v6, v4 + 4, v4 + 4);
      unint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          ptrdiff_t v4 = v8;
        }
        while (!v9);
      }
      ptrdiff_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<OZLocking *>::__emplace_hint_unique_key_args<OZLocking *,OZLocking * const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<OZLocking *>::__find_equal<OZLocking *>(a1, a2, &v11, &v10, a3);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    unint64_t v7 = (uint64_t *)operator new(0x28uLL);
    int v7[4] = *a4;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<OZLocking *>::__find_equal<OZLocking *>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        int v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    unint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          unint64_t v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        unint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    int v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    unint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          unint64_t v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        unint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      unint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::deque<OZLocking *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<OZLocking *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<OZLocking *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    BOOL v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      BOOL v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    BOOL v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + OZDocument::~OZDocument(this - 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + OZDocument::~OZDocument(this - 1) = v54 + 8 * v26;
  int32x4_t v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  BOOL v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + OZDocument::~OZDocument(this - 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + OZDocument::~OZDocument(this - 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B7C281EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<OZLocking *>>::__construct_one_at_end[abi:ne180100]<std::vector<OZLocking *> const&>(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(void **)(a1 + 8);
  *BOOL v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B7C28284(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<OZLocking *>>::__push_back_slow_path<std::vector<OZLocking *> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + OZDocument::~OZDocument(this - 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<OZLocking *>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B7C28390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<OZLocking *>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<OZLocking *>>,std::reverse_iterator<std::vector<OZLocking *>*>,std::reverse_iterator<std::vector<OZLocking *>*>,std::reverse_iterator<std::vector<OZLocking *>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<OZLocking *>>,std::reverse_iterator<std::vector<OZLocking *>*>,std::reverse_iterator<std::vector<OZLocking *>*>,std::reverse_iterator<std::vector<OZLocking *>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + OZDocument::~OZDocument(this - 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  CMTime v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<OZLocking *>>,std::reverse_iterator<std::vector<OZLocking *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<OZLocking *>>,std::reverse_iterator<std::vector<OZLocking *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::shared_ptr<PCMutex>::shared_ptr[abi:ne180100]<PCMutex,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void OZLayeredMaterialSequenceFolder::OZLayeredMaterialSequenceFolder(OZLayeredMaterialSequenceFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, 0);
  *(void *)uint64_t v4 = &unk_1F11427C0;
  *(void *)(v4 + 16) = &unk_1F1142A98;
  *(void *)(v4 + 56) &= ~0x10000uLL;
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v4);
}

void sub_1B7C28594(_Unwind_Exception *a1)
{
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

void OZLayeredMaterialSequenceFolder::OZLayeredMaterialSequenceFolder(OZLayeredMaterialSequenceFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)this, a2, a3, a4, a5, 0);
  *(void *)uint64_t v6 = &unk_1F11427C0;
  *((void *)v6 + 2) = &unk_1F1142A98;
  *((void *)v6 + 7) &= ~0x10000uLL;
  *((void *)this + OZDocument::~OZDocument(this - 1) = OZLayeredMaterialSequenceFolder_Factory::getInstance(v6);
  (*(void (**)(OZLayeredMaterialSequenceFolder *))(*(void *)this + 128))(this);
}

void sub_1B7C2864C(_Unwind_Exception *a1)
{
  OZChannelFolder::~OZChannelFolder(v1);
  _Unwind_Resume(a1);
}

uint64_t OZLayeredMaterialSequenceFolder_Factory::getInstance(OZLayeredMaterialSequenceFolder_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZLayeredMaterialSequenceFolder_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZLayeredMaterialSequenceFolder_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZLayeredMaterialSequenceFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZLayeredMaterialSequenceFolder_Factory::_instance;
}

void OZLayeredMaterialSequenceFolder::clone(OZLayeredMaterialSequenceFolder *this)
{
}

void sub_1B7C28754(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZLayeredMaterialSequenceFolder::~OZLayeredMaterialSequenceFolder(OZLayeredMaterialSequenceFolder *this)
{
}

{
  uint64_t vars8;

  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZLayeredMaterialSequenceFolder::~OZLayeredMaterialSequenceFolder(OZChannelFolder *this)
{
  OZChannelFolder::~OZChannelFolder(this);

  JUMPOUT(0x1BA9BFBA0);
}

void *OZLayeredMaterialSequenceFolder::deleteLayerSequenceFolders(void *this)
{
  uint64_t v1 = this[14];
  if (v1)
  {
    char v2 = *(void ***)v1;
    uint64_t v3 = *(void ***)(v1 + 8);
    if (*(void ***)v1 != v3)
    {
      uint64_t v4 = this;
      do
      {
        this = *v2;
        if (*v2) {
          this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        }
        ++v2;
      }
      while (v2 != v3);
      uint64_t v1 = v4[14];
      char v2 = *(void ***)v1;
    }
    *(void *)(v1 + 8) = v2;
  }
  return this;
}

unsigned char *non-virtual thunk to'OZLayeredMaterialSequenceFolder::markFactoriesForSerialization(OZLayeredMaterialSequenceFolder *this, PCSerializerWriteStream *a2)
{
  return OZChannelFolder::markFactoriesForSerialization((OZChannelFolder *)((char *)this - 16), a2);
}

uint64_t non-virtual thunk to'OZLayeredMaterialSequenceFolder::parseElement(OZLayeredMaterialSequenceFolder *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZChannelFolder::parseElement((OZChannelFolder *)((char *)this - 16), a2, a3);
}

uint64_t OZLayeredMaterialSequenceFolder::writeHeader(OZLayeredMaterialSequenceFolder *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZLayeredMaterialSequenceScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 110);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(void *)a2 + 200))(a2, 110, (char *)this + 32);
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0) {
    (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 111, *((unsigned int *)this + 6));
  }
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 160))(a2, 112, *((void *)this + 7));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0)
  {
    uint64_t v5 = OZFactory::fileRefID(*((OZFactory **)this + 1), v4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 144))(a2, 113, v5);
  }

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZLayeredMaterialSequenceFolder::writeHeader(OZLayeredMaterialSequenceFolder *this, PCSerializerWriteStream *a2)
{
  return OZLayeredMaterialSequenceFolder::writeHeader((OZLayeredMaterialSequenceFolder *)((char *)this - 16), a2);
}

void std::__call_once_param<std::tuple<OZLayeredMaterialSequenceFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C28A78(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZLayeredMaterialSequenceFolder_Factory::OZLayeredMaterialSequenceFolder_Factory(OZLayeredMaterialSequenceFolder_Factory *this)
{
  long long v3 = xmmword_1B7E77A70;
  long long v4 = xmmword_1B7E7AC20;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1142B08;
  *((void *)this + 16) = &unk_1F1142BD8;
}

void sub_1B7C28B48(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZLayeredMaterialSequenceFolder_Factory::create(OZLayeredMaterialSequenceFolder_Factory *this, const PCString *a2)
{
}

void sub_1B7C28BBC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void OZLayeredMaterialSequenceFolder_Factory::createCopy(OZLayeredMaterialSequenceFolder_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C28CB0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void OZLayeredMaterialSequenceFolder_Factory::createChannelCopy(OZLayeredMaterialSequenceFolder_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7C28DA4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void OZHeMatteNormalCompositeNode::OZHeMatteNormalCompositeNode(OZHeMatteNormalCompositeNode *this)
{
}

void OZHeMatteNormalCompositeNode::~OZHeMatteNormalCompositeNode(HGNode *this)
{
  HgcMatteNormalComposite::~HgcMatteNormalComposite(this);

  HGObject::operator delete(v1);
}

void OZHeMatteInt8::OZHeMatteInt8(OZHeMatteInt8 *this)
{
}

void OZHeMatteInt8::~OZHeMatteInt8(HGNode *this)
{
  HgcMatteInt8::~HgcMatteInt8(this);

  HGObject::operator delete(v1);
}

void OZChannelMaterialLayerMap::OZChannelMaterialLayerMap(OZChannelMaterialLayerMap *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelMaterialLayerMap_Factory::getInstance(this);
  OZChannelImageWithOptions::OZChannelImageWithOptions(this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F1143100;
  *((void *)this + 2) = &unk_1F1143458;
  PCURL::PCURL((PCURL *)&v12, @"Material Bump Map Type Enum");
  PCURL::PCURL((PCURL *)&v11, @"Material Bump Map Type Selection");
  OZChannelEnum::OZChannelEnum((OZChannelMaterialLayerMap *)((char *)this + 1584), 0, &v12, &v11, (OZChannelFolder *)this, 0xCu, 0, 0, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, @"Channel Map Transform Label");
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform((OZChannelMaterialLayerMap *)((char *)this + 1840), &v12, (OZChannelFolder *)this, 7u, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, @"Channel Map Invert Label");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 5744), 0, &v12, (OZChannelFolder *)this, 8u, 2u, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, @"Material Wrap Around Enum");
  PCURL::PCURL((PCURL *)&v11, @"Material Wrap Around");
  OZChannelEnum::OZChannelEnum((OZChannelMaterialLayerMap *)((char *)this + 5896), 0, &v12, &v11, (OZChannelFolder *)this, 9u, 0, 0, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, @"Channel Map White Level");
  OZChannelDouble::OZChannelDouble((OZChannelMaterialLayerMap *)((char *)this + 6152), 1.0, &v12, (OZChannelFolder *)this, 0xAu, 0, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, @"Channel Map Black Level");
  OZChannelDouble::OZChannelDouble((OZChannelMaterialLayerMap *)((char *)this + 6304), 0.0, &v12, (OZChannelFolder *)this, 0xBu, 0, 0, 0);
  PCString::~PCString(&v12);
  OZChannelMaterialLayerMap::init(this);
}

void sub_1B7C2947C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  int v19 = v17;
  OZChannel::~OZChannel(v19);
  OZChannel::~OZChannel(v18);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelBool::~OZChannelBool(v15);
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v12);
  _Unwind_Resume(a1);
}

void sub_1B7C2951C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
}

void sub_1B7C2952C()
{
}

void sub_1B7C29534(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
}

void sub_1B7C29544()
{
}

void sub_1B7C2954C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
}

void sub_1B7C2956C()
{
}

uint64_t OZChannelMaterialLayerMap_Factory::getInstance(OZChannelMaterialLayerMap_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelMaterialLayerMap_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&OZChannelMaterialLayerMap_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelMaterialLayerMap_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelMaterialLayerMap_Factory::_instance;
}

OZChannelBase *OZChannelMaterialLayerMap::init(OZChannelMaterialLayerMap *this)
{
  char v2 = (OZChannelBase *)((char *)this + 136);
  long long v3 = (OZChannelBase *)((char *)this + 624);
  OZChannelMoveableImage::setOffsetChannel((uint64_t)this + 136, (OZChannelMaterialLayerMap *)((char *)this + 624));
  OZChannel::setKeyframable((OZChannel *)((char *)this + 320), 0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 320), 100.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 6152), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 6152), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 6304), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 6304), 1.0);
  OZChannelBase::setFlag(v3, 2, 0);
  LayeredMaterial = (OZLayeredMaterial *)GetLayeredMaterial((OZChannelBase *)this);
  OZChannelMaterialLayerMap::setImageChannelOffsetChannel(this, LayeredMaterial);
  uint64_t result = OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1584), 2, 0);
  if (*(unsigned char *)(theApp + 81))
  {
    return OZChannelBase::setFlag(v2, 0x400000, 0);
  }
  return result;
}

void OZChannelMaterialLayerMap::OZChannelMaterialLayerMap(OZChannelMaterialLayerMap *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelImageWithOptions::OZChannelImageWithOptions(this, a2, a3, a4);
  void *v5 = &unk_1F1143100;
  v5[2] = &unk_1F1143458;
  PCURL::PCURL((PCURL *)&v7, @"Material Bump Map Type Enum");
  PCURL::PCURL((PCURL *)&v6, @"Material Bump Map Type Selection");
  OZChannelEnum::OZChannelEnum((OZChannelMaterialLayerMap *)((char *)this + 1584), 0, &v7, &v6, (OZChannelFolder *)this, 0xCu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Map Transform Label");
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform((OZChannelMaterialLayerMap *)((char *)this + 1840), &v7, (OZChannelFolder *)this, 7u, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Map Invert Label");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 5744), 0, &v7, (OZChannelFolder *)this, 8u, 2u, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Material Wrap Around Enum");
  PCURL::PCURL((PCURL *)&v6, @"Material Wrap Around");
  OZChannelEnum::OZChannelEnum((OZChannelMaterialLayerMap *)((char *)this + 5896), 0, &v7, &v6, (OZChannelFolder *)this, 9u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Map White Level");
  OZChannelDouble::OZChannelDouble((OZChannelMaterialLayerMap *)((char *)this + 6152), 1.0, &v7, (OZChannelFolder *)this, 0xAu, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, @"Channel Map Black Level");
  OZChannelDouble::OZChannelDouble((OZChannelMaterialLayerMap *)((char *)this + 6304), 0.0, &v7, (OZChannelFolder *)this, 0xBu, 0, 0, 0);
  PCString::~PCString(&v7);
  OZChannelMaterialLayerMap::init(this);
}

void sub_1B7C299A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  int v19 = v17;
  OZChannel::~OZChannel(v19);
  OZChannel::~OZChannel(v18);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelBool::~OZChannelBool(v15);
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform(v14);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v12);
  _Unwind_Resume(a1);
}

void sub_1B7C29A48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
}

void sub_1B7C29A58()
{
}

void sub_1B7C29A60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
}

void sub_1B7C29A70()
{
}

void sub_1B7C29A78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
}

void sub_1B7C29A98()
{
}

void OZChannelMaterialLayerMap::OZChannelMaterialLayerMap(OZChannelMaterialLayerMap *this, const OZChannelMaterialLayerMap *a2, OZChannelFolder *a3)
{
  OZChannelImageWithOptions::OZChannelImageWithOptions(this, a2, a3);
  void *v5 = &unk_1F1143100;
  v5[2] = &unk_1F1143458;
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 198), (const OZChannelMaterialLayerMap *)((char *)a2 + 1584), (OZChannelFolder *)this);
  OZChannelMaterialMapTransform::OZChannelMaterialMapTransform((OZChannelMaterialLayerMap *)((char *)this + 1840), (const OZChannelMaterialLayerMap *)((char *)a2 + 1840), (OZChannelFolder *)this);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 5744), (const OZChannelBase *)((char *)a2 + 5744), (OZChannelFolder *)this);
  OZChannelEnum::OZChannelEnum((OZChannelMaterialLayerMap *)((char *)this + 5896), (const OZChannelMaterialLayerMap *)((char *)a2 + 5896), (OZChannelFolder *)this);
  OZChannel::OZChannel((OZChannel *)((char *)this + 6152), (const OZChannelBase *)((char *)a2 + 6152), (OZChannelFolder *)this);
  *((void *)this + 769) = &unk_1F1100CF0;
  *((void *)this + 77OZDocument::~OZDocument(this - 1) = &unk_1F1101050;
  OZChannel::OZChannel((OZChannel *)((char *)this + 6304), (const OZChannelBase *)((char *)a2 + 6304), (OZChannelFolder *)this);
  *((void *)this + 788) = &unk_1F1100CF0;
  *((void *)this + 79OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = &unk_1F1101050;
  (*(void (**)(OZChannelMaterialLayerMap *, const OZChannelMaterialLayerMap *, uint64_t))(*(void *)this
                                                                                                  + 232))(this, a2, 1);
}

void sub_1B7C29C58(_Unwind_Exception *a1)
{
  OZChannel::~OZChannel(v7);
  OZChannel::~OZChannel(v6);
  OZChannelEnum::~OZChannelEnum(v5);
  OZChannelBool::~OZChannelBool(v4);
  OZChannelMaterialMapTransform::~OZChannelMaterialMapTransform(v3);
  OZChannelEnum::~OZChannelEnum(v2);
  OZChannelImageWithOptions::~OZChannelImageWithOptions(v1);
  _Unwind_Resume(a1);
}

void sub_1B7C29CBC()
{
}

void sub_1B7C29CC4()
{
}

void OZChannelMaterialLayerMap::clone(OZChannelMaterialLayerMap *this)
{
}

void sub_1B7C29D1C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C407E530223);
  _Unwind_Resume(a1);
}

void *GetLayeredMaterial(OZChannelBase *a1)
{
  uint64_t result = (void *)OZChannelBase::getObjectManipulator(a1);
  if (result)
  {
  }
  return result;
}

uint64_t OZChannelMaterialLayerMap::copy(OZChannelMaterialLayerMap *this, const OZChannelBase *a2, uint64_t a3)
{
  char v3 = a3;
  long long v4 = a2;
  OZChannelImageWithOptions::copy(this, a2, a3);
  if (v4) {
  OZChannelEnum::copy((PCString *)this + 198, (const OZChannelBase *)((char *)v4 + 1584), v3);
  }
  OZChannelMaterialMapTransform::copy((OZChannelMaterialLayerMap *)((char *)this + 1840), (const OZChannelBase *)((char *)v4 + 1840), v3);
  OZChannel::copy((OZChannel *)((char *)this + 5744), (const OZChannelBase *)((char *)v4 + 5744), v3);
  OZChannelEnum::copy((PCString *)this + 737, (const OZChannelBase *)((char *)v4 + 5896), v3);
  OZChannel::copy((OZChannel *)((char *)this + 6152), (const OZChannelBase *)((char *)v4 + 6152), v3);
  OZChannel::copy((OZChannel *)((char *)this + 6304), (const OZChannelBase *)((char *)v4 + 6304), v3);
  LayeredMaterial = (OZLayeredMaterial *)GetLayeredMaterial((OZChannelBase *)this);

  return OZChannelMaterialLayerMap::setImageChannelOffsetChannel(this, LayeredMaterial);
}

uint64_t OZChannelMaterialLayerMap::setImageChannelOffsetChannel(OZChannelMaterialLayerMap *this, OZLayeredMaterial *a2)
{
  int ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1968), MEMORY[0x1E4F1FA48], 0.0);
  if (a2 && ValueAsInt) {
    uint64_t v5 = (OZLayeredMaterial *)((char *)a2 + 2720);
  }
  else {
    uint64_t v5 = (OZChannel2D *)(*(uint64_t (**)(OZChannelMaterialLayerMap *))(*(void *)this + 832))(this);
  }

  return OZChannelMoveableImage::setOffsetChannel((uint64_t)this + 136, v5);
}

uint64_t OZChannelMaterialLayerMap::parseEnd(OZChannelMaterialLayerMap *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = OZChannelImageWithOptions::parseEnd((OZChannelFolder *)this, a2);
  LayeredMaterial = (OZLayeredMaterial *)GetLayeredMaterial((OZChannelBase *)this);
  OZChannelMaterialLayerMap::setImageChannelOffsetChannel(this, LayeredMaterial);
  if (*(unsigned char *)(theApp + 81)) {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 136), 0x400000, 0);
  }
  return v3;
}

uint64_t non-virtual thunk to'OZChannelMaterialLayerMap::parseEnd(OZChannelMaterialLayerMap *this, PCSerializerReadStream *a2)
{
  return OZChannelMaterialLayerMap::parseEnd((OZChannelMaterialLayerMap *)((char *)this - 16), a2);
}

uint64_t OZChannelMaterialLayerMap::willSetSharedTransform(OZChannelMaterialLayerMap *this, double a2, OZLayeredMaterial *a3)
{
  if (a2 != 1.0 || a3 == 0) {
    uint64_t v5 = (OZChannel2D *)(*(uint64_t (**)(OZChannelMaterialLayerMap *, OZLayeredMaterial *))(*(void *)this + 832))(this, a3);
  }
  else {
    uint64_t v5 = (OZLayeredMaterial *)((char *)a3 + 2720);
  }

  return OZChannelMoveableImage::setOffsetChannel((uint64_t)this + 136, v5);
}

uint64_t OZChannelMaterialLayerMap::getOffset(OZChannelMaterialLayerMap *this)
{
  return (uint64_t)this + 2992;
}

void non-virtual thunk to'OZChannelMaterialLayerMap::~OZChannelMaterialLayerMap(OZChannelMaterialLayerMap *this)
{
}

{
  uint64_t vars8;

  OZChannelMaterialLayerMap::~OZChannelMaterialLayerMap((OZChannelMaterialLayerMap *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZChannelMaterialLayerMap_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C2A110(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelMaterialLayerMap_Factory::OZChannelMaterialLayerMap_Factory(OZChannelMaterialLayerMap_Factory *this)
{
  long long v3 = xmmword_1B8380D60;
  long long v4 = xmmword_1B8381590;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F11434C8;
  *((void *)this + 16) = &unk_1F1143598;
}

void sub_1B7C2A1E0(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelMaterialLayerMap_Factory::create(OZChannelMaterialLayerMap_Factory *this, const PCString *a2)
{
}

void sub_1B7C2A254(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C407E530223);
  _Unwind_Resume(a1);
}

void OZChannelMaterialLayerMap_Factory::createCopy(OZChannelMaterialLayerMap_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C2A30C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C407E530223);
  _Unwind_Resume(a1);
}

void OZChannelMaterialLayerMap_Factory::createChannelCopy(OZChannelMaterialLayerMap_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7C2A3C4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C407E530223);
  _Unwind_Resume(a1);
}

void OZRotoshape::addVertex(OZRotoshape *this, CMTime *a2, double a3, double a4)
{
  CMTime v4 = *a2;
  OZShape::addVertex((OZRotoshape *)((char *)this + 18976), &v4, a3, a4);
}

uint64_t OZRotoshape::addVertices(uint64_t a1, CMTime *a2, uint64_t a3)
{
  CMTime v4 = *a2;
  return OZShape::addVertices(a1 + 18976, &v4, a3);
}

uint64_t OZRotoshape::deleteAll(OZRotoshape *this)
{
  return OZShape::deleteAll((OZRotoshape *)((char *)this + 18976));
}

CGColorSpace **OZRotoshape::closeCurve(OZRotoshape *this)
{
  CMTime v5 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  char v2 = (char *)this + 200;
  if ((*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200))
  {
    long long v3 = (OZScene *)(*(uint64_t (**)(char *))(*(void *)v2 + 272))(v2);
    OZScene::getCurrentTime(v3, (__n128 *)&v5);
  }
  return OZShape::closeCurve((OZRotoshape *)((char *)this + 18976), &v5);
}

CGColorSpace **OZRotoshape::finishCurve(OZRotoshape *this)
{
  CMTime v5 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  char v2 = (char *)this + 200;
  if ((*(uint64_t (**)(char *))(*((void *)this + 25) + 272))((char *)this + 200))
  {
    long long v3 = (OZScene *)(*(uint64_t (**)(char *))(*(void *)v2 + 272))(v2);
    OZScene::getCurrentTime(v3, (__n128 *)&v5);
  }
  return OZMoShape::finishCurve((OZRotoshape *)((char *)this + 18976), &v5);
}

uint64_t OZRotoshape::setInterpolation(OZRotoshape *this, unsigned int a2)
{
  return OZShape::setInterpolation((OZRotoshape *)((char *)this + 18976), a2);
}

uint64_t OZMaterialGenericSubstanceIF::selection(OZMaterialGenericSubstanceIF *this)
{
  uint64_t v1 = (OZChannel *)(*(uint64_t (**)(OZMaterialGenericSubstanceIF *))(*(void *)this + 72))(this);
  char v2 = (const CMTime *)MEMORY[0x1E4F1FA48];

  return OZChannel::getValueAsInt(v1, v2, 0.0);
}

uint64_t OZMaterialGenericSubstanceIF::getColor(OZMaterialGenericSubstanceIF *this, const CMTime *a2, PCColor *a3)
{
  long long v3 = *(uint64_t (**)(__n128))(*(void *)(*(uint64_t (**)(OZMaterialGenericSubstanceIF *))(*(void *)this + 32))(this)
                                        + 824);
  v4.n128_u64[0] = 0;

  return v3(v4);
}

uint64_t OZGetNewFontID(const __CFString *a1)
{
  uint64_t v2 = OZGetNewFontID(__CFString const*)::ID++;
  if (CFStringCompare(a1, @"MarkerFelt-Wide", 0)
    && CFStringCompare(a1, @"AmericanTypewriter", 0)
    && CFStringCompare(a1, @"Cracked", 0)
    && CFStringCompare(a1, @"PortagoITCTT", 0)
    && CFStringCompare(a1, @"BodoniOrnamentsITCTT", 0)
    && CFStringCompare(a1, @"Webdings", 0)
    && CFStringCompare(a1, @"Wingdings-Regular", 0))
  {
    CFStringCompare(a1, @"ACaslonPro-Regular", 0);
  }
  return v2;
}

void OZFontManagerBase::OZFontManagerBase(OZFontManagerBase *this)
{
  *(void *)this = &unk_1F1143638;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 6) = 0;
  *((void *)this + 5) = (char *)this + 48;
  *((void *)this + 7) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  PCMutex::PCMutex((PCMutex *)((char *)this + 64), 1);
  *((void *)this + 8) = &unk_1F10933F0;
  *((unsigned char *)this + 136) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
}

void sub_1B7C2A868(_Unwind_Exception *a1)
{
  CMTime v5 = v3;
  std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::destroy(v2, *v4);
  PCString v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void OZFontManagerBase::~OZFontManagerBase(OZFontManagerBase *this)
{
  *(void *)this = &unk_1F1143638;
  uint64_t SystemFonts = OZFontManagerBase::getSystemFonts(this);
  if (SystemFonts)
  {
    long long v3 = *(const PCString **)(SystemFonts + 16);
    __n128 v4 = (__CFString *)(SystemFonts + 24);
    if (v3 != (const PCString *)(SystemFonts + 24))
    {
      do
      {
        PCString::PCString(&v14, v3 + 4);
        int var0 = (OZFontFamily *)v3[5].var0;
        uint64_t v15 = var0;
        if (var0)
        {
          OZFontFamily::~OZFontFamily(var0);
          MEMORY[0x1BA9BFBA0]();
        }
        uint64_t v15 = 0;
        PCString::~PCString(&v14);
        PCString v6 = v3[1].var0;
        if (v6)
        {
          do
          {
            PCString v7 = v6;
            PCString v6 = (__CFString *)v6->isa;
          }
          while (v6);
        }
        else
        {
          do
          {
            PCString v7 = v3[2].var0;
            BOOL v8 = v7->isa == v3;
            long long v3 = (const PCString *)v7;
          }
          while (!v8);
        }
        long long v3 = (const PCString *)v7;
      }
      while (v7 != v4);
    }
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 1);
  uint64_t v10 = (uint64_t *)*((void *)this + 2);
  while (v9 != v10)
  {
    uint64_t v11 = *v9;
    if (*v9)
    {
      std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::destroy(v11 + 16, *(PCString **)(v11 + 24));
      PCString::~PCString((PCString *)(v11 + 8));
      PCString::~PCString((PCString *)v11);
      MEMORY[0x1BA9BFBA0]();
    }
    ++v9;
  }
  PCString v12 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  PCMutex::~PCMutex((PCMutex *)((char *)this + 64));
  std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::destroy((uint64_t)this + 40, *((PCString **)this + 6));
  long long v13 = (void *)*((void *)this + 1);
  if (v13)
  {
    *((void *)this + 2) = v13;
    operator delete(v13);
  }
}

uint64_t OZFontManagerBase::getSystemFonts(OZFontManagerBase *this)
{
  uint64_t v2 = (PCMutex *)((char *)this + 64);
  PCMutex::lock((PCMutex *)((char *)this + 64));
  uint64_t v3 = *((void *)this + 4);
  PCMutex::unlock(v2);
  return v3;
}

uint64_t OZFontManagerBase::addFontFace(uint64_t a1, uint64_t *a2)
{
  __n128 v4 = (PCMutex *)(a1 + 64);
  PCMutex::lock((PCMutex *)(a1 + 64));
  uint64_t v11 = (PCString *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a2 + 16))(*a2, v5);
  PCString v6 = std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>((PCString *)(a1 + 40), v11, (uint64_t)&std::piecewise_construct, (const PCString **)&v11);
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)v6[6];
  v6[5] = v8;
  v6[6] = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return PCMutex::unlock(v4);
}

void sub_1B7C2AB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t OZFontManagerBase::purgeCachedFonts(OZFontManagerBase *this)
{
  uint64_t v2 = (PCMutex *)((char *)this + 64);
  PCMutex::lock((PCMutex *)((char *)this + 64));
  uint64_t v5 = (uint64_t **)*((void *)this + 5);
  uint64_t v3 = (uint64_t **)((char *)this + 40);
  __n128 v4 = (uint64_t *)v5;
  if (v5 != v3 + 1)
  {
    do
    {
      uint64_t v6 = v4[6];
      if (v6 && !*(void *)(v6 + 8))
      {
        uint64_t v8 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v3, v4);
        std::__destroy_at[abi:ne180100]<std::pair<PCString const,std::shared_ptr<OZFontFace>>,0>((PCString *)v4 + 4);
        operator delete(v4);
      }
      else
      {
        uint64_t v7 = (uint64_t *)v4[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (uint64_t *)v4[2];
            BOOL v9 = *v8 == (void)v4;
            __n128 v4 = v8;
          }
          while (!v9);
        }
      }
      __n128 v4 = v8;
    }
    while (v8 != (uint64_t *)(v3 + 1));
  }
  return PCMutex::unlock(v2);
}

uint64_t OZFontManagerBase::getFontFace@<X0>(const PCString *this@<X0>, PCString *a2@<X1>, __CFString **a3@<X8>)
{
  uint64_t v6 = (PCMutex *)&this[8];
  PCMutex::lock((PCMutex *)&this[8]);
  uint64_t v7 = std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::find<PCString>(this + 5, a2);
  if (&this[6] == v7)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    int var0 = v7[6].var0;
    *a3 = v7[5].var0;
    a3[1] = var0;
    if (var0) {
      atomic_fetch_add_explicit(&var0->info, 1uLL, memory_order_relaxed);
    }
  }
  return PCMutex::unlock(v6);
}

void sub_1B7C2AC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t OZFontManager::getInstance(OZFontManager *this)
{
  if (OZFontManager::getInstance(void)::once != -1) {
    dispatch_once(&OZFontManager::getInstance(void)::once, &__block_literal_global_77);
  }
  return OZFontManager::_instance;
}

void ___ZN13OZFontManager11getInstanceEv_block_invoke()
{
}

void sub_1B7C2AD44(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40C08B20B1);
  _Unwind_Resume(a1);
}

void OZFontManager::OZFontManager(OZFontManager *this)
{
  OZFontManagerBase::OZFontManagerBase(this);
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 160), 0);
  *(void *)this = &unk_1F11436B0;
  *((void *)this + 2OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = &unk_1F1143708;
}

void sub_1B7C2ADD4(_Unwind_Exception *a1)
{
  OZFontManagerBase::~OZFontManagerBase(v1);
  _Unwind_Resume(a1);
}

uint64_t OZFontManager::cleanup(OZFontManager *this)
{
  uint64_t result = OZFontManager::_instance;
  if (OZFontManager::_instance) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)OZFontManager::_instance + 8))(OZFontManager::_instance);
  }
  OZFontManager::_instance = 0;
  return result;
}

PCString *OZFontManager::getDefaultFontKey@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "OZFontManager::kDefaultFont");
}

PCString *OZFontManager::getDefaultFontSizeKey@<X0>(PCString *a1@<X8>)
{
  return PCString::PCString(a1, "OZFontManager::kDefaultFontSize");
}

void OZFontManager::~OZFontManager(OZFontManager *this)
{
  PCSingleton::~PCSingleton((OZFontManager *)((char *)this + 160));

  OZFontManagerBase::~OZFontManagerBase(this);
}

{
  uint64_t vars8;

  PCSingleton::~PCSingleton((OZFontManager *)((char *)this + 160));
  OZFontManagerBase::~OZFontManagerBase(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZFontManager::~OZFontManager(OZFontManager *this)
{
  uint64_t v1 = (OZFontManager *)((char *)this - 160);
  PCSingleton::~PCSingleton(this);

  OZFontManagerBase::~OZFontManagerBase(v1);
}

{
  OZFontManagerBase *v1;
  uint64_t vars8;

  uint64_t v1 = (OZFontManager *)((char *)this - 160);
  PCSingleton::~PCSingleton(this);
  OZFontManagerBase::~OZFontManagerBase(v1);

  JUMPOUT(0x1BA9BFBA0);
}

void std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::destroy(uint64_t a1, PCString *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::destroy(a1, a2[1].var0);
    std::__destroy_at[abi:ne180100]<std::pair<PCString const,std::shared_ptr<OZFontFace>>,0>(a2 + 4);
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<PCString const,std::shared_ptr<OZFontFace>>,0>(PCString *this)
{
  int var0 = this[2].var0;
  if (var0) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)var0);
  }

  PCString::~PCString(this);
}

uint64_t *std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::__emplace_unique_key_args<PCString,std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(PCString *a1, PCString *this, uint64_t a3, const PCString **a4)
{
  uint64_t v6 = std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__find_equal<PCString>(a1, &v11, this);
  int var0 = (uint64_t *)v6->var0;
  if (!v6->var0)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v11, v8, v10[0]);
    int var0 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return var0;
}

void std::__tree<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::__map_value_compare<PCString,std::__value_type<PCString,std::shared_ptr<OZFontFace>>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,std::shared_ptr<OZFontFace>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<PCString const&>,std::tuple<>>(uint64_t a1@<X0>, const PCString **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (PCString *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  PCString::PCString(v6 + 4, *a2);
  v6[5].int var0 = 0;
  v6[6].int var0 = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B7C2B10C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCString,std::shared_ptr<OZFontFace>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(PCString **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<PCString const,std::shared_ptr<OZFontFace>>,0>(v2 + 4);
    }
    operator delete(v2);
  }
}

void OZViewerState::OZViewerState(OZViewerState *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + OZDocument::~OZDocument(this - 1) = (char *)this + 16;
  *(void *)this = &unk_1F1143770;
  *((void *)this + 3) = 0;
  *((void *)this + 12) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 13);
  *((void *)this + 14) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 15);
  for (uint64_t i = 0; i != 96; i += 16)
  {
    *(void *)((char *)this + i + 128) = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)((char *)this + i + 136));
  }
  *((void *)this + 28) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 29);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 31);
  *(void *)((char *)this + 26OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((_DWORD *)this + 8) = 0;
  if (*(unsigned char *)(theApp + 80))
  {
    *((unsigned char *)this + 36) = 0;
    *((_DWORD *)this + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
    *((unsigned char *)this + 48) = 0;
  }
  else
  {
    __n128 v4 = (OZPreferenceManager *)OZPreferenceManager::Instance(v3);
    BOOL DynamicResolution = OZPreferenceManager::getDynamicResolution(v4);
    int v6 = *(unsigned __int8 *)(theApp + 80);
    *((unsigned char *)this + 36) = DynamicResolution;
    *((_DWORD *)this + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
    *((unsigned char *)this + 48) = 0;
    if (!v6)
    {
      uint64_t v8 = (OZPreferenceManager *)OZPreferenceManager::Instance((OZPreferenceManager *)DynamicResolution);
      OSCOptions = (OZPreferenceManager *)OZPreferenceManager::getOSCOptions(v8);
      int v10 = *(unsigned __int8 *)(theApp + 80);
      *((_DWORD *)this + 13) = OSCOptions;
      if (!v10)
      {
        uint64_t v11 = (OZPreferenceManager *)OZPreferenceManager::Instance(OSCOptions);
        OverlayOptions = (OZPreferenceManager *)OZPreferenceManager::getOverlayOptions(v11);
        int v13 = *(unsigned __int8 *)(theApp + 80);
        *((_DWORD *)this + 14) = OverlayOptions;
        if (!v13)
        {
          PCString v14 = (OZPreferenceManager *)OZPreferenceManager::Instance(OverlayOptions);
          ShowToolInfo = (OZPreferenceManager *)OZPreferenceManager::getShowToolInfo(v14);
          int v16 = *(unsigned __int8 *)(theApp + 80);
          *((unsigned char *)this + 6OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = (_BYTE)ShowToolInfo;
          if (v16)
          {
            char CompensateAspectRatio = 1;
          }
          else
          {
            uint64_t v17 = (OZPreferenceManager *)OZPreferenceManager::Instance(ShowToolInfo);
            char CompensateAspectRatio = OZPreferenceManager::getCompensateAspectRatio(v17);
          }
LABEL_9:
          *((unsigned char *)this + 6OZDocument::~OZDocument(this - 1) = CompensateAspectRatio;
          *((void *)this + 8) = 0x200000002;
          *((_DWORD *)this + 18) = 256;
          *((unsigned char *)this + 76) = 0;
          *(_DWORD *)((char *)this + 77) = 16843009;
          *((unsigned char *)this + 8OZDocument::~OZDocument(this - 1) = 0;
          operator new();
        }
LABEL_8:
        char CompensateAspectRatio = 1;
        *((unsigned char *)this + 6OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1;
        goto LABEL_9;
      }
LABEL_7:
      *((_DWORD *)this + 14) = 0;
      goto LABEL_8;
    }
  }
  *((_DWORD *)this + 13) = 0;
  goto LABEL_7;
}

void sub_1B7C2B474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PCSharedCount *a9)
{
  PCString::~PCString(v13);
  PCSharedCount::~PCSharedCount(v12);
  for (uint64_t i = 216; i != 120; i -= 16)
    PCSharedCount::~PCSharedCount((PCSharedCount *)(v10 + i));
  PCSharedCount::~PCSharedCount(v11);
  PCSharedCount::~PCSharedCount(a9);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v9, *v14);
  _Unwind_Resume(a1);
}

void OZViewerState::OZViewerState(OZViewerState *this, const OZViewerState *a2)
{
  *((void *)this + 2) = 0;
  *((void *)this + OZDocument::~OZDocument(this - 1) = (char *)this + 16;
  *(void *)this = &unk_1F1143770;
  *((void *)this + 3) = 0;
  *((void *)this + 12) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 13);
  *((void *)this + 14) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 15);
  for (uint64_t i = 0; i != 96; i += 16)
  {
    *(void *)((char *)this + i + 128) = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)((char *)this + i + 136));
  }
  *((void *)this + 28) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 29);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 31);
  *(void *)((char *)this + 26OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((unsigned char *)this + 36) = *((unsigned char *)a2 + 36);
  *((_DWORD *)this + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *((_DWORD *)a2 + 10);
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 48);
  *(void *)((char *)this + 52) = *(void *)((char *)a2 + 52);
  *((_WORD *)this + 3OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *((_WORD *)a2 + 30);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((_WORD *)this + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *((_WORD *)a2 + 40);
  operator new();
}

void sub_1B7C2B7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, PCSharedCount *a11)
{
  PCString::~PCString(v15);
  PCSharedCount::~PCSharedCount(v14);
  for (uint64_t i = 216; i != 120; i -= 16)
    PCSharedCount::~PCSharedCount((PCSharedCount *)(v13 + i));
  PCSharedCount::~PCSharedCount(a10);
  PCSharedCount::~PCSharedCount(a11);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v11, *v12);
  _Unwind_Resume(a1);
}

void *OZViewerState::getPanZoomSettings(uint64_t a1, int a2)
{
  int v15 = a2;
  uint64_t v3 = (void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    goto LABEL_11;
  }
  __n128 v4 = (void *)(a1 + 16);
  do
  {
    int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 < a2;
    if (v5 >= a2) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      __n128 v4 = (void *)v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == v3 || *((_DWORD *)v4 + 8) > a2)
  {
LABEL_11:
    int v16 = &v15;
    uint64_t v8 = std::__tree<std::__value_type<OZViewCameraType,OZViewPanZoomSettings>,std::__map_value_compare<OZViewCameraType,std::__value_type<OZViewCameraType,OZViewPanZoomSettings>,std::less<OZViewCameraType>,true>,std::allocator<std::__value_type<OZViewCameraType,OZViewPanZoomSettings>>>::__emplace_unique_key_args<OZViewCameraType,std::piecewise_construct_t const&,std::tuple<OZViewCameraType const&>,std::tuple<>>((uint64_t **)(a1 + 8), &v15, (uint64_t)&std::piecewise_construct, &v16);
    v8[5] = (uint64_t *)0x3FF0000000000000;
    *((_DWORD *)v8 + 12) = 2;
    *((_DWORD *)v8 + 17) = 0;
    *(_OWORD *)((char *)v8 + 52) = v14;
    *((unsigned char *)v8 + 72) = 1;
    uint64_t v9 = *v3;
    if (!*v3) {
      goto LABEL_21;
    }
    __n128 v4 = v3;
    do
    {
      int v10 = *(_DWORD *)(v9 + 32);
      BOOL v11 = v10 < v15;
      if (v10 >= v15) {
        PCString v12 = (uint64_t *)v9;
      }
      else {
        PCString v12 = (uint64_t *)(v9 + 8);
      }
      if (!v11) {
        __n128 v4 = (void *)v9;
      }
      uint64_t v9 = *v12;
    }
    while (*v12);
    if (v4 == v3 || v15 < *((_DWORD *)v4 + 8)) {
LABEL_21:
    }
      __n128 v4 = v3;
  }
  return v4 + 5;
}

uint64_t OZOrthoCamera::OZOrthoCamera(uint64_t a1, int a2, _OWORD *a3)
{
  *(void *)(a1 + 52OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = &unk_1F1199AC8;
  *(void *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 536) = 1;
  LiSimpleCamera::LiSimpleCamera((LiSimpleCamera *)a1, (uint64_t *)&off_1F1143B40);
  *(void *)a1 = &unk_1F11437E8;
  *(void *)(a1 + 52OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = &unk_1F1143B20;
  *(void *)(a1 + 464) = 0x3FF0000000000000;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 48OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *(void *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = a2;
  *(_OWORD *)(a1 + 504) = *a3;
  LiSimpleCamera::setCameraModel(a1, 1);
  (*(void (**)(uint64_t, double))(*(void *)a1 + 512))(a1, 0.0);
  (*(void (**)(uint64_t, _OWORD *))(*(void *)a1 + 288))(a1, a3);
  (*(void (**)(uint64_t))(*(void *)a1 + 768))(a1);
  return a1;
}

void sub_1B7C2BAD4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 52OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v2;
  *(unsigned char *)(v1 + 536) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 528));
  _Unwind_Resume(a1);
}

uint64_t OZViewerState::writeHeader(OZViewerState *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZViewerStateScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 83);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 152))(a2, 9, *((unsigned int *)this + 21));

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZViewerState::writeBody(OZViewerState *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZViewerStateScope);
  uint64_t v4 = *((unsigned int *)this + 8);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v4);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v5 = *((unsigned __int8 *)this + 36);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 52);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v6 = *((unsigned int *)this + 10);
  if (v6 <= 1)
  {
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v6);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  uint64_t v7 = *((unsigned int *)this + 14);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 5);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v7);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v8 = *((unsigned int *)this + 13);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 6);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v8);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v9 = *((unsigned __int8 *)this + 61);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 7);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v9);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v10 = *((unsigned __int8 *)this + 75);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 9);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v10);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v11 = *((unsigned __int8 *)this + 76);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v11);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v12 = *((unsigned __int8 *)this + 77);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 11);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v12);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v13 = *((unsigned __int8 *)this + 78);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 8);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v13);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v14 = *((unsigned __int8 *)this + 79);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 26);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v14);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v15 = *((unsigned __int8 *)this + 80);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 27);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v15);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v16 = *((unsigned __int8 *)this + 81);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 28);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v16);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v17 = *((unsigned __int8 *)this + 88);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 16);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v17);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v18 = *((unsigned int *)this + 16);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 17);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v18);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v19 = *((unsigned int *)this + 17);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 20);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v19);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v20 = *((unsigned __int8 *)this + 72);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v20);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v21 = *((unsigned __int8 *)this + 73);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 22);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v21);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v22 = *((unsigned __int8 *)this + 74);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 23);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v22);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v23 = *((unsigned int *)this + 60);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 29);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v23);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCString::PCString(&v43, (const PCString *)this + 31);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 30);
  (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v43);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCString::~PCString(&v43);
  uint64_t v24 = *((unsigned __int8 *)this + 258);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 53);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v24);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  float64x2_t v41 = (float64x2_t)0x3FF0000000000000uLL;
  float64x2_t v42 = 0uLL;
  double v38 = 0.0;
  double v39 = 0.0;
  double v40 = 0.0;
  uint64_t v25 = *((void *)this + 14);
  if (!v25) {
    throw_PCNullPointerException(1);
  }
  (*(void (**)(uint64_t, float64x2_t *))(*(void *)v25 + 472))(v25, &v41);
  uint64_t v26 = *((void *)this + 14);
  if (!v26) {
    throw_PCNullPointerException(1);
  }
  (*(void (**)(uint64_t, double *))(*(void *)v26 + 440))(v26, &v38);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v41, (float64x2_t)xmmword_1B7E733D0), (int32x4_t)vceqzq_f64(v42))))) & 1) != 0|| v38 != 0.0|| v39 != 0.0|| v40 != 1000.0)
  {
    writeCamera(a2, *((LiSimpleCamera **)this + 14), 1);
  }
  BOOL v27 = (const PCSharedCount *)((char *)this + 128);
  uint64_t v28 = -6;
  do
  {
    PCPtr<OZOrthoCamera>::PCPtr<LiSimpleCamera>((PCSharedCount *)&v36, v27);
    if (v36 && (*(unsigned int (**)(LiSimpleCamera *))(*(void *)v36 + 784))(v36)) {
      writeCamera(a2, v36, (v28 + 8));
    }
    PCSharedCount::~PCSharedCount(&v37);
    v27 += 2;
  }
  while (!__CFADD__(v28++, 1));
  long long v30 = (double *)*((void *)this + 1);
  long long v31 = (char *)this + 16;
  if (v30 != (double *)v31)
  {
    do
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 45);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 152))(a2, 46, *((unsigned int *)v30 + 8));
      (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 47, v30[5]);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 49, v30[7]);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 184))(a2, 50, v30[8]);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 152))(a2, 48, *((unsigned int *)v30 + 12));
      (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 152))(a2, 51, *((unsigned __int8 *)v30 + 72));
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      long long v32 = (char *)*((void *)v30 + 1);
      if (v32)
      {
        do
        {
          unint64_t v33 = v32;
          long long v32 = *(char **)v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          unint64_t v33 = (char *)*((void *)v30 + 2);
          BOOL v34 = *(void *)v33 == (void)v30;
          long long v30 = (double *)v33;
        }
        while (!v34);
      }
      long long v30 = (double *)v33;
    }
    while (v33 != v31);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B7C2CAA8(_Unwind_Exception *a1)
{
  PCString::~PCString((PCString *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t writeCamera(PCSerializerWriteStream *a1, LiSimpleCamera *a2, uint64_t a3)
{
  double v14 = 0.0;
  double v15 = 0.0;
  double v16 = 0.0;
  double v10 = 1.0;
  double v11 = 0.0;
  double v12 = 0.0;
  double v13 = 0.0;
  (*(void (**)(LiSimpleCamera *, double *))(*(void *)a2 + 440))(a2, &v14);
  (*(void (**)(LiSimpleCamera *, double *))(*(void *)a2 + 472))(a2, &v10);
  (*(void (**)(void *__return_ptr, LiSimpleCamera *))(*(void *)a2 + 272))(v9, a2);
  double v7 = *(double *)v9;
  double v6 = *(double *)&v9[1];
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a1 + 16))(a1, 31);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a1 + 152))(a1, 32, a3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a1 + 16))(a1, 33);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a1 + 184))(a1, 34, v14);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a1 + 184))(a1, 35, v15);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a1 + 184))(a1, 36, v16);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a1 + 24))(a1);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a1 + 16))(a1, 37);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a1 + 184))(a1, 38, v10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a1 + 184))(a1, 39, v11);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a1 + 184))(a1, 40, v12);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a1 + 184))(a1, 41, v13);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a1 + 24))(a1);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a1 + 16))(a1, 42);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a1 + 184))(a1, 43, v7);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a1 + 184))(a1, 44, v6);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a1 + 24))(a1);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a1 + 24))(a1);
  return (*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a1 + 224))(a1);
}

uint64_t OZViewerState::parseBegin(OZViewerState *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZViewerState::parseEnd(OZViewerState *this, PCSerializerReadStream *a2)
{
  if (*((unsigned char *)this + 256) && !*((void *)this + 28) && PCString::empty((PCString *)this + 31)) {
    *((unsigned char *)this + 256) = 0;
  }
  PCPtr<LiImageSource>::reset((void *)this + 28);
  return 1;
}

uint64_t OZViewerState::parseElement(OZViewerState *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  switch(*((_DWORD *)a3 + 2))
  {
    case 1:
      PanZoomSettings = OZViewerState::getPanZoomSettings((uint64_t)this, 0);
      goto LABEL_20;
    case 2:
      uint64_t v8 = OZViewerState::getPanZoomSettings((uint64_t)this, 0);
      LODWORD(v2OZDocument::~OZDocument(this - 1) = 0;
      (*(void (**)(PCStreamElement *, uint64_t *))(*(void *)a3 + 24))(a3, &v21);
      int v9 = v21;
      goto LABEL_42;
    case 3:
      LODWORD(v2OZDocument::~OZDocument(this - 1) = 0;
      (*(void (**)(PCStreamElement *, uint64_t *))(*(void *)a3 + 32))(a3, &v21);
      int v10 = v21;
      if ((int)v21 >= 2) {
        int v10 = 2;
      }
      *((_DWORD *)this + 8) = v10;
      return 0;
    case 4:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 24))(a3, (char *)this + 40);
      return 0;
    case 5:
      double v11 = (char *)this + 56;
      goto LABEL_24;
    case 6:
      double v11 = (char *)this + 52;
      goto LABEL_24;
    case 7:
      double v7 = (char *)this + 61;
      goto LABEL_45;
    case 8:
      double v7 = (char *)this + 78;
      goto LABEL_45;
    case 9:
      double v7 = (char *)this + 75;
      goto LABEL_45;
    case 0xA:
      double v7 = (char *)this + 76;
      goto LABEL_45;
    case 0xB:
      double v7 = (char *)this + 77;
      goto LABEL_45;
    case 0xC:
      PanZoomSettings = OZViewerState::getPanZoomSettings((uint64_t)this, 0) + 2;
      goto LABEL_20;
    case 0xD:
      PanZoomSettings = OZViewerState::getPanZoomSettings((uint64_t)this, 0) + 3;
LABEL_20:
      (*(void (**)(PCStreamElement *, void *))(*(void *)a3 + 64))(a3, PanZoomSettings);
      return 0;
    case 0xE:
      double v7 = (char *)(OZViewerState::getPanZoomSettings((uint64_t)this, 0) + 4);
      goto LABEL_45;
    case 0x10:
      double v7 = (char *)this + 88;
      goto LABEL_45;
    case 0x11:
      LODWORD(v2OZDocument::~OZDocument(this - 1) = 0;
      (*(void (**)(PCStreamElement *, uint64_t *))(*(void *)a3 + 32))(a3, &v21);
      *((_DWORD *)this + 16) = v21;
      return 0;
    case 0x14:
      double v11 = (char *)this + 68;
LABEL_24:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 32))(a3, v11);
      return 0;
    case 0x15:
      double v7 = (char *)this + 72;
      goto LABEL_45;
    case 0x16:
      double v7 = (char *)this + 73;
      goto LABEL_45;
    case 0x17:
      double v7 = (char *)this + 74;
      goto LABEL_45;
    case 0x1A:
      double v7 = (char *)this + 79;
      goto LABEL_45;
    case 0x1B:
      double v7 = (char *)this + 80;
      goto LABEL_45;
    case 0x1C:
      double v7 = (char *)this + 81;
      goto LABEL_45;
    case 0x1D:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 32))(a3, (char *)this + 240);
      if (*((_DWORD *)this + 60) >= 0xBu) {
        *((_DWORD *)this + 6OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
      }
      *((unsigned char *)this + 256) = 1;
      return 0;
    case 0x1E:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 16))(a3, (char *)this + 248);
      return 0;
    case 0x1F:
      int v25 = 0;
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 32, (uint64_t)&v25);
      if ((v25 - 2) <= 5) {
        operator new();
      }
      if (v25 == 1)
      {
        uint64_t v19 = (void *)((char *)this + 224);
        PCPtr<LiImageSource>::operator=<TXTextureDecal>((PC_Sp_counted_base **)this + 28, (const PCSharedCount *)this + 14);
        uint64_t v20 = *((void *)this + 28);
        if (!v20) {
          throw_PCNullPointerException(1);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 640))(v20, 1);
        if (!*v19) {
          throw_PCNullPointerException(1);
        }
        (*(void (**)(void, double))(*(void *)*v19 + 512))(*v19, 45.0);
      }
      return 0;
    case 0x21:
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 34, (uint64_t)&v21);
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 35, (uint64_t)&v22);
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 36, (uint64_t)&v23);
      uint64_t v12 = *((void *)this + 28);
      if (v12) {
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 448))(v12, &v21);
      }
      return 0;
    case 0x25:
      uint64_t v21 = 0x3FF0000000000000;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 38, (uint64_t)&v21);
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 39, (uint64_t)&v22);
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 40, (uint64_t)&v23);
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 41, (uint64_t)&v24);
      uint64_t v13 = *((void *)this + 28);
      if (v13) {
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 480))(v13, &v21);
      }
      return 0;
    case 0x2A:
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 43, (uint64_t)&v21);
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 44, (uint64_t)&v22);
      uint64_t v14 = *((void *)this + 28);
      if (v14) {
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 288))(v14, &v21);
      }
      return 0;
    case 0x2D:
      LODWORD(v2OZDocument::~OZDocument(this - 1) = 0;
      int v25 = 0;
      PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 46, (uint64_t)&v21);
      uint64_t v8 = OZViewerState::getPanZoomSettings((uint64_t)this, v21);
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 47, (uint64_t)v8);
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 49, (uint64_t)(v8 + 2));
      PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 50, (uint64_t)(v8 + 3));
      PCSerializerReadStream::getAttributeAsInt32((uint64_t)a2, (uint64_t)a3, 48, (uint64_t)&v25);
      PCSerializerReadStream::getAttributeAsBool((uint64_t)a2, (uint64_t)a3, 51, (uint64_t)(v8 + 4));
      int v9 = v25;
LABEL_42:
      *((_DWORD *)v8 + 2) = v9;
      return 0;
    case 0x34:
      double v15 = (BOOL *)this + 36;
      double v16 = (OZPreferenceManager *)(*(uint64_t (**)(PCStreamElement *, char *))(*(void *)a3 + 72))(a3, (char *)this + 36);
      uint64_t v17 = (OZPreferenceManager *)OZPreferenceManager::Instance(v16);
      OZPreferenceManager::adjustDynamicResolution(v17, v15);
      return 0;
    case 0x35:
      double v7 = (char *)this + 258;
LABEL_45:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 72))(a3, v7);
      break;
    default:
      return 0;
  }
  return 0;
}

void sub_1B7C2D680(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40AC1445C7);
  _Unwind_Resume(a1);
}

void *PCPtr<LiSimpleCamera>::operator=<LiCamera>(void *a1, const void **a2)
{
  if (!*a2)
  {
    *a1 = 0;
    goto LABEL_5;
  }
  *a1 = v4;
  if (!v4)
  {
LABEL_5:
    double v6 = &v9;
    PCSharedCount::PCSharedCount(&v9);
    PCSharedCount::operator=(a1 + 1, (uint64_t *)&v9);
    goto LABEL_6;
  }
  uint64_t v5 = (const PCSharedCount *)(a2 + 1);
  double v6 = &v8;
  PCSharedCount::PCSharedCount(&v8, v5);
  PCSharedCount::operator=(a1 + 1, (uint64_t *)&v8);
LABEL_6:
  PCSharedCount::~PCSharedCount(v6);
  return a1;
}

void sub_1B7C2D83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
}

void OZViewerState::~OZViewerState(OZViewerState *this)
{
  OZViewerState::~OZViewerState(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  PCSharedCount *v2;
  uint64_t i;

  *(void *)this = &unk_1F1143770;
  uint64_t v2 = (PCSharedCount *)((char *)this + 232);
  PCString::~PCString((PCString *)this + 31);
  PCSharedCount::~PCSharedCount(v2);
  for (uint64_t i = 216; i != 120; i -= 16)
    PCSharedCount::~PCSharedCount((PCSharedCount *)((char *)this + i));
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 15);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 13);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
}

void OZOrthoCamera::~OZOrthoCamera(OZOrthoCamera *this)
{
  LiSimpleCamera::~LiSimpleCamera(this, (const PCString *)&off_1F1143B40);
  *(void *)(v1 + 52OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 536) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 528));
}

{
  uint64_t v1;
  uint64_t vars8;

  LiSimpleCamera::~LiSimpleCamera(this, (const PCString *)&off_1F1143B40);
  *(void *)(v1 + 52OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 536) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 528));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZOrthoCamera::resetRotation(OZOrthoCamera *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(*((_DWORD *)this + 124))
  {
    case 2:
      long long v8 = xmmword_1B8381680;
      goto LABEL_5;
    case 3:
      long long v8 = xmmword_1B8381660;
LABEL_5:
      long long v9 = xmmword_1B8381670;
      goto LABEL_11;
    case 4:
      *((void *)this + 6OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
      *((void *)this + 6OZDocument::~OZDocument(this - 1) = 0;
      long long v10 = xmmword_1B8381650;
      goto LABEL_8;
    case 5:
      *((void *)this + 6OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
      *((void *)this + 6OZDocument::~OZDocument(this - 1) = 0;
      long long v10 = xmmword_1B8380AB0;
LABEL_8:
      *((_OWORD *)this + 29) = v10;
      break;
    case 6:
      *((void *)this + 6OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
      *((void *)this + 6OZDocument::~OZDocument(this - 1) = 0;
      *((void *)this + 58) = 0x3FF0000000000000;
      *((void *)this + 59) = 0;
      break;
    case 7:
      long long v8 = xmmword_1B7E733D0;
      long long v9 = xmmword_1B8381640;
LABEL_11:
      *((_OWORD *)this + 29) = v9;
      *((_OWORD *)this + 3OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v8;
      break;
    default:
      PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Ozone/CompositorObject/OZOrthoCamera.h");
      pcAbortImpl();
  }
  double v11 = *(uint64_t (**)(void))(*(void *)this + 480);

  return v11();
}

uint64_t OZOrthoCamera::reset(OZOrthoCamera *this)
{
  (*(void (**)(OZOrthoCamera *, uint64_t))(*(void *)this + 640))(this, 1);
  (*(void (**)(OZOrthoCamera *, double))(*(void *)this + 512))(this, 0.0);
  (*(void (**)(OZOrthoCamera *))(*(void *)this + 768))(this);
  memset(v3, 0, sizeof(v3));
  (*(void (**)(OZOrthoCamera *, void *))(*(void *)this + 448))(this, v3);
  return (*(uint64_t (**)(OZOrthoCamera *, char *))(*(void *)this + 288))(this, (char *)this + 504);
}

BOOL OZOrthoCamera::isModified(OZOrthoCamera *this)
{
  double v5 = 1.0;
  double v6 = 0.0;
  double v7 = 0.0;
  double v8 = 0.0;
  memset(v4, 0, sizeof(v4));
  (*(void (**)(void))(*(void *)this + 472))();
  (*(void (**)(OZOrthoCamera *, void *))(*(void *)this + 440))(this, v4);
  (*(void (**)(uint64_t *__return_ptr, OZOrthoCamera *))(*(void *)this + 272))(&v3, this);
  return *((double *)this + 58) != v5
      || *((double *)this + 59) != v6
      || *((double *)this + 60) != v7
      || *((double *)this + 61) != v8;
}

void virtual thunk to'OZOrthoCamera::~OZOrthoCamera(OZOrthoCamera *this)
{
  LiSimpleCamera::~LiSimpleCamera((OZOrthoCamera *)((char *)this + *(void *)(*(void *)this - 24)), (const PCString *)&off_1F1143B40);
  *(void *)(v1 + 52OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = &unk_1F1199AC8;
  *(unsigned char *)(v1 + 536) = 0;
  uint64_t v2 = (PC_Sp_counted_base **)(v1 + 528);

  PCWeakCount::~PCWeakCount(v2);
}

{
  OZOrthoCamera::~OZOrthoCamera((OZOrthoCamera *)((char *)this + *(void *)(*(void *)this - 24)));
}

uint64_t **std::__tree<std::__value_type<OZViewCameraType,OZViewPanZoomSettings>,std::__map_value_compare<OZViewCameraType,std::__value_type<OZViewCameraType,OZViewPanZoomSettings>,std::less<OZViewCameraType>,true>,std::allocator<std::__value_type<OZViewCameraType,OZViewPanZoomSettings>>>::__emplace_unique_key_args<OZViewCameraType,std::piecewise_construct_t const&,std::tuple<OZViewCameraType const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  double v7 = a1 + 1;
  double v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        double v6 = *v9;
        double v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      double v6 = v9[1];
      if (!v6)
      {
        double v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    double v11 = operator new(0x50uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0x3FF0000000000000;
    v11[12] = 2;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 8) = 0;
    *((unsigned char *)v11 + 72) = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

PCSharedCount *PCPtr<OZOrthoCamera>::PCPtr<LiSimpleCamera>(PCSharedCount *a1, const PCSharedCount *a2)
{
  int var0 = a2->var0;
  if (a2->var0) {
  a1->int var0 = var0;
  }
  PCSharedCount::PCSharedCount(a1 + 1, a2 + 1);
  if (!a1->var0)
  {
    PCSharedCount::PCSharedCount(&v6);
    PCSharedCount::operator=((uint64_t *)&a1[1], (uint64_t *)&v6);
    PCSharedCount::~PCSharedCount(&v6);
  }
  return a1;
}

void sub_1B7C2DFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  PCSharedCount::~PCSharedCount(v10);
  _Unwind_Resume(a1);
}

void OZPreferenceManager::OZPreferenceManager(OZPreferenceManager *this)
{
  PCSingleton::PCSingleton(this, 0);
  *uint64_t v1 = &unk_1F1144388;
  uint64_t v2 = (int *)(v1 + 1);
  LiRenderingTechnology::LiRenderingTechnology((LiRenderingTechnology *)(v1 + 1));
  uint64_t v3 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v4 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  [v4 setObject:@"200" forKey:@"OZPreferenceManager::NumUndoLevels"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::DisplayTimecode"];
  [v4 setObject:@"1" forKey:@"OZPreferenceManager::FirstFrameNumber"];
  [v4 setObject:@"10" forKey:@"OZPreferenceManager::DefaultProjectDuration"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::IsDefaultProjectDurInFrames"];
  [v4 setObject:&unk_1F11EC460 forKey:@"OZPreferenceManager::DefaultProjectFrameRate"];
  [v4 setObject:@"720" forKey:@"OZPreferenceManager::DefaultProjectWidth"];
  [v4 setObject:@"480" forKey:@"OZPreferenceManager::DefaultProjectHeight"];
  [v4 setObject:&unk_1F11EC478 forKey:@"OZPreferenceManager::TimeDisplayMode"];
  [v4 setObject:@"10" forKey:@"OZPreferenceManager::DefaultStillDuration"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::IsDefaultStillDurInFrames"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::useProjectDurForStills"];
  [v4 setObject:@"1" forKey:@"OZPreferenceManager::LargeStills"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::showTooltips"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::CacheFootageFlag"];
  [v4 setObject:@"0.2" forKey:@"OZPreferenceManager::DropPaletteDelay"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::DropAtTime"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::AudioSyncMode"];
  [v4 setObject:@"1" forKey:@"OZPreferenceManager::AudioScrubLoopingFlag"];
  [v4 setObject:@"1" forKey:@"OZPreferenceManager::TimeViewUpdateMode"];
  [v4 setObject:@"1" forKey:@"OZPreferenceManager::TimelineThumbnailMode"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::PreviewBackground"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::InfoBarShowColor"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::InfoBarShowCoordinates"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::InfoBarShowFrameRate"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::InfoBarColorMode"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::LimitFrameRate"];
  [v4 setObject:@"16" forKey:@"OZPreferenceManager::CheckerSize"];
  [v4 setObject:@"0.75" forKey:@"OZPreferenceManager::FullViewOpacity"];
  [v4 setObject:@"80" forKey:@"OZPreferenceManager::GridSpacing"];
  [v4 setObject:@"0.93" forKey:@"OZPreferenceManager::SafeZonesActionPercentage"];
  [v4 setObject:@"0.9" forKey:@"OZPreferenceManager::SafeZonesTitlePercentage"];
  [v4 setObject:@"16" forKey:@"OZPreferenceManager::CheckerSize"];
  [v4 setObject:@"3" forKey:@"OZPreferenceManager::SnapTo"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::ViewMode"];
  uint64_t v5 = objc_msgSend(NSString, "stringWithFormat:", @"%d", 30);
  uint64_t v6 = objc_msgSend(NSString, "stringWithFormat:", @"%d", 12);
  uint64_t v7 = objc_msgSend(NSString, "stringWithFormat:", @"%d", 125440);
  [v4 setObject:v5 forKey:@"OZPreferenceManager::OSCOptions"];
  [v4 setObject:v6 forKey:@"OZPreferenceManager::OverlayOptions"];
  [v4 setObject:v7 forKey:@"OZPreferenceManager::OverlayOptions2"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::ShowToolInfo"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::CompensateAspectRatio"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::Renderer"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::BitDepth"];
  [v4 setObject:@"10" forKey:@"OZPreferenceManager::PrefetchAmount"];
  [v4 setObject:@"80" forKey:@"OZPreferenceManager::CachePercentage"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::PreloadFootage"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::UseOffscreenContext"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::FieldRenderingMode"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::Use2DRenderer"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::ReflectionEnabled"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::AbortSlowRenders"];
  [v4 setObject:@"None" forKey:@"OZPreferenceManager::VideoOutputComponent"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::VideoOutputDuringPlayback"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::VideoOutputDynamic"];
  [v4 setObject:@"1" forKey:@"OZPreferenceManager::VideoOutputEnabled"];
  [v4 setObject:&stru_1F119C770 forKey:@"OZPreferenceManager::3rdPartyPath"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::LibraryCreateIcons"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::LibraryFolderDisplay"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::LibraryClickToPlay"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::RemoveUnusedMedia"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::LayersPreviewColumn"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::LayersOpacityColumn"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::LayersBlendColumn"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::LayersDisplayMasks"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::LayersDisplayBehaviors"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::LayersDisplayEffects"];
  [v4 setObject:@"1.8" forKey:@"OZPreferenceManager::LayersVerticalZoom"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::MediaPreviewColumn"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::MediaTypeColumn"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::MediaDurationColumn"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::MediaInUseColumn"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::MediaFrameSizeColumn"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::MediaCompressorColumn"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::MediaDepthColumn"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::MediaFrameRateColumn"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::MediaDataRateColumn"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::MediaAudioRateColumn"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::MediaAudioFormatColumn"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::MediaFileSizeColumn"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::MediaFileCreatedColumn"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::MediaFileModifiedColumn"];
  [v4 setObject:@"1.8" forKey:@"OZPreferenceManager::MediaVerticalZoom"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::TimelineDisplayVideo"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::TimelineDisplayAudio"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::TimelineDisplayKeyframes"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::TimelineDisplayMasks"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::TimelineDisplayBehaviors"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::TimelineDisplayEffects"];
  [v4 setObject:@"1.555555555" forKey:@"OZPreferenceManager::TimelineVideoVerticalZoom"];
  [v4 setObject:@"1.555555555" forKey:@"OZPreferenceManager::TimelineAudioVerticalZoom"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::CurveEditorAutoZoom"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::CurveEditorSnapping"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::CurveEditorDisplayAudioWaveform"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::CurveEditorSnapshotChannels"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::LockKeyframesIntime"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::AllowSubframKeyframing"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::AudioEditorScrubbingCheck"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::AudioEditorRegionCheck"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::AudioEditorShowPanningCheck"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::AudioEditorShowVolumeCheck"];
  [v4 setObject:@"1" forKey:@"OZPreferenceManager::PlayMode"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::AudioMuted"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::Autosave"];
  [v4 setObject:@"15" forKey:@"OZPreferenceManager::AutosaveInterval"];
  [v4 setObject:@"40" forKey:@"OZPreferenceManager::AutosaveCopiesPerProject"];
  objc_msgSend(v4, "setObject:forKey:", OZPreferenceManager::getDefaultFreezeCacheVaultPath((OZPreferenceManager *)objc_msgSend(v4, "setObject:forKey:", @"25", @"OZPreferenceManager::AutosaveMaxProjects")), @"OZPreferenceManager::FreezeCacheVaultPath");
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::RotoshapeIsFillEnabled"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::RotoshapeIsOutlineEnabled"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::RotoshapeMaskColor"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::RotoshapeRoundness"];
  [v4 setObject:@"100" forKey:@"OZPreferenceManager::RotoshapeCurvature"];
  [v4 setObject:@"10" forKey:@"OZPreferenceManager::RotoshapeOutlineWidth"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::RotomaskBlendMode"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::RotomaskFeather"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::RotomaskRoundness"];
  [v4 setObject:@"100" forKey:@"OZPreferenceManager::RotomaskCurvature"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::IsRecordingWriteOn"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::IsSmoothing"];
  [v4 setObject:@"10" forKey:@"OZPreferenceManager::StrokeWidth"];
  [v4 setObject:@"Width" forKey:@"OZPreferenceManager::ApplyPenPressureTo"];
  [v4 setObject:@"Nothing" forKey:@"OZPreferenceManager::ApplyPenSpeedTo"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::GroundPlaneVisible"];
  [v4 setObject:@"80" forKey:@"OZPreferenceManager::GroundPlaneSpacing"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::DefaultGroupType"];
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::InsetViewMode"];
  [v4 setObject:@"0.3" forKey:@"OZPreferenceManager::InsetViewSize"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::TaskListAutocloses"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::SometimesSelectParentGroup"];
  if (![v3 objectForKey:@"OZPreferenceManager::TextSpellCheckMode"]) {
    [v4 setObject:@"YES" forKey:@"OZPreferenceManager::TextSpellCheckMode"];
  }
  if (![v3 objectForKey:@"OZPreferenceManager::TextGrammarCheckMode"]) {
    [v4 setObject:@"YES" forKey:@"OZPreferenceManager::TextGrammarCheckMode"];
  }
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::UseHeliumInCanvas"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::UseTexturedCanvas"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::DynamicResolution"];
  [v4 setObject:@"MAYBE" forKey:@"OZPreferenceManager::OverrideDynamicResolution"];
  LiRenderingTechnology::LiRenderingTechnology((LiRenderingTechnology *)v23);
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithInt:", PVPerfStats::FrameStats::GetSize((PVPerfStats::FrameStats *)v23)), @"OZPreferenceManager::RenderingTechnology");
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::NumberOfCores"];
  if (LiRenderingTechnology::getDefocusIntersections((LiRenderingTechnology *)v23)) {
    int v8 = @"YES";
  }
  else {
    int v8 = @"NO";
  }
  [v4 setObject:v8 forKey:@"OZPreferenceManager::DefocusIntersections"];
  if (LiRenderingTechnology::getRasterizeEdges((LiRenderingTechnology *)v23)) {
    long long v9 = @"YES";
  }
  else {
    long long v9 = @"NO";
  }
  [v4 setObject:v9 forKey:@"OZPreferenceManager::RasterizeEdges"];
  if (LiRenderingTechnology::getEnableMetalRendering((LiRenderingTechnology *)v23)) {
    int v10 = @"YES";
  }
  else {
    int v10 = @"NO";
  }
  [v4 setObject:v10 forKey:@"OZPreferenceManager::EnableMetalRendering"];
  if (LiRenderingTechnology::getEnableHgc2Shaders((LiRenderingTechnology *)v23)) {
    double v11 = @"YES";
  }
  else {
    double v11 = @"NO";
  }
  [v4 setObject:v11 forKey:@"EnableHgc2Shaders"];
  if (LiRenderingTechnology::getDebugShaders((LiRenderingTechnology *)v23)) {
    uint64_t v12 = @"YES";
  }
  else {
    uint64_t v12 = @"NO";
  }
  [v4 setObject:v12 forKey:@"OZPreferenceManager::DebugShaders"];
  if (LiRenderingTechnology::getPrintShaders((LiRenderingTechnology *)v23)) {
    uint64_t v13 = @"YES";
  }
  else {
    uint64_t v13 = @"NO";
  }
  [v4 setObject:v13 forKey:@"OZPreferenceManager::PrintShaders"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::EnableMetalOSCs"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::TemplatesSkipPreviews"];
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", 0), @"NSProHighlightFPOPreference");
  [v4 setObject:@"0" forKey:@"OZPreferenceManager::TextureResolution"];
  [v4 setObject:@"YES" forKey:@"OZPreferenceManager::CompressMaterials"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::HasConvertedAutosaves"];
  [v4 setObject:&stru_1F119C770 forKey:@"OZPreferenceManager::LastNavigatedImportDirectory"];
  [v4 setObject:@"NO" forKey:@"OZPreferenceManager::HMDOutput"];
  [v4 setObject:@"YES" forKey:@"ANIMAL_STYLE"];
  [v3 registerDefaults:v4];
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "addSuiteNamed:", @"com.apple.proapps");
  v22.int var0 = 0;
  PCString::set(&v22, @"OZPreferenceManager::RasterizeEdges");
  char v14 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", PCString::ns_str(&v22));
  LiRenderingTechnology::setRasterizeEdges((uint64_t)v2, v14);
  PCString::~PCString(&v22);
  v22.int var0 = 0;
  PCString::set(&v22, @"OZPreferenceManager::EnableMetalRendering");
  char v15 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", PCString::ns_str(&v22));
  LiRenderingTechnology::setEnableMetalRendering((uint64_t)v2, v15);
  PCString::~PCString(&v22);
  v22.int var0 = 0;
  PCString::set(&v22, @"EnableHgc2Shaders");
  char v16 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", PCString::ns_str(&v22));
  LiRenderingTechnology::setEnableHgc2Shaders((uint64_t)v2, v16);
  PCString::~PCString(&v22);
  v22.int var0 = 0;
  PCString::set(&v22, @"OZPreferenceManager::CPURendering");
  int v17 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", PCString::ns_str(&v22));
  LiRenderingTechnology::setFlagAtIndex(v2, 1, v17);
  PCString::~PCString(&v22);
  v22.int var0 = 0;
  PCString::set(&v22, @"OZPreferenceManager::DebugShaders");
  char v18 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", PCString::ns_str(&v22));
  LiRenderingTechnology::setDebugShaders((uint64_t)v2, v18);
  PCString::~PCString(&v22);
  v22.int var0 = 0;
  PCString::set(&v22, @"OZPreferenceManager::PrintShaders");
  uint64_t v19 = (OZChannelBase *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", PCString::ns_str(&v22));
  PCString::~PCString(&v22);
  LiRenderingTechnology::setPrintShaders((uint64_t)v2, (char)v19);
  OZChannelBase::setRangeName(v19, v20);
  uint64_t v21 = (PCString *)theApp;
  PCURL::PCURL((PCURL *)&v22, @"/Library/Application Support/Final Cut Pro");
  PCString::set(v21 + 13, &v22);
  PCString::~PCString(&v22);
}

void sub_1B7C2F1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  PCSingleton::~PCSingleton(v10);
  _Unwind_Resume(a1);
}

uint64_t OZPreferenceManager::getDefaultFreezeCacheVaultPath(OZPreferenceManager *this)
{
  id v1 = [(NSArray *)NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1) objectAtIndex:0];
  uint64_t v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "bundleIdentifier");

  return [v1 stringByAppendingPathComponent:v2];
}

__CFString *OZPreferenceManager::getContentPath(OZPreferenceManager *this)
{
  return @"/Library/Application Support/Final Cut Pro";
}

void OZPreferenceManager::~OZPreferenceManager(OZPreferenceManager *this)
{
  *(void *)this = &unk_1F1144388;

  PCSingleton::~PCSingleton(this);
}

{
  uint64_t vars8;

  OZPreferenceManager::~OZPreferenceManager(this);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZPreferenceManager::Instance(OZPreferenceManager *this)
{
  if (OZPreferenceManager::Instance(void)::once != -1) {
    dispatch_once(&OZPreferenceManager::Instance(void)::once, &__block_literal_global_78);
  }
  return OZPreferenceManager::_instance;
}

void ___ZN19OZPreferenceManager8InstanceEv_block_invoke()
{
}

void sub_1B7C2F3CC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1081C4094CEE6C2);
  _Unwind_Resume(a1);
}

double OZPreferenceManager::getFirstFrameNumber(OZPreferenceManager *this)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "floatForKey:", @"OZPreferenceManager::FirstFrameNumber");
  return v1;
}

double OZPreferenceManager::getDefaultProjectDurInFrames(OZPreferenceManager *this, double a2)
{
  double v2 = ceil(a2 + -0.01);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "floatForKey:", @"OZPreferenceManager::DefaultProjectDuration");
  double v4 = v3;
  int v5 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", @"OZPreferenceManager::IsDefaultProjectDurInFrames");
  double v6 = 1.0;
  if (!v5) {
    double v6 = v2;
  }
  return v6 * v4;
}

uint64_t OZPreferenceManager::getDefaultProjectWidth(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "integerForKey:", @"OZPreferenceManager::DefaultProjectWidth");
}

uint64_t OZPreferenceManager::getDefaultProjectHeight(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "integerForKey:", @"OZPreferenceManager::DefaultProjectHeight");
}

uint64_t OZPreferenceManager::getUseProjectDurationForStills(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::useProjectDurForStills"];
}

CMTime *OZPreferenceManager::getDefaultStillDuration@<X0>(const CMTime *a1@<X1>, uint64_t a2@<X8>)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "floatForKey:", @"OZPreferenceManager::DefaultStillDuration");
  double v6 = v5;
  uint64_t result = (CMTime *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", @"OZPreferenceManager::IsDefaultStillDurInFrames");
  if (result)
  {
    *(_OWORD *)a2 = *(_OWORD *)&a1->value;
    *(void *)(a2 + 16) = a1->epoch;
    *(void *)a2 = (uint64_t)(v6 * (double)*(uint64_t *)a2);
  }
  else
  {
    uint64_t result = PC_CMTimeMakeWithSecondsRoundToNearest(a1->timescale, &v8, v6);
    *(CMTime *)a2 = v8;
  }
  return result;
}

uint64_t OZPreferenceManager::getRemoveUnusedMedia(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::RemoveUnusedMedia"];
}

uint64_t OZPreferenceManager::getSafeZonesTitlePercentage(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 floatForKey:@"OZPreferenceManager::SafeZonesTitlePercentage"];
}

uint64_t OZPreferenceManager::getOSCOptions(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "integerForKey:", @"OZPreferenceManager::OSCOptions");
}

uint64_t OZPreferenceManager::getOverlayOptions(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
  int v2 = [v1 integerForKey:@"OZPreferenceManager::OverlayOptions"];
  return [v1 integerForKey:@"OZPreferenceManager::OverlayOptions2"] | v2;
}

uint64_t OZPreferenceManager::getShowToolInfo(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::ShowToolInfo"];
}

uint64_t OZPreferenceManager::getCompensateAspectRatio(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::CompensateAspectRatio"];
}

uint64_t OZPreferenceManager::setCompensateAspectRatio(OZPreferenceManager *this, uint64_t a2)
{
  float v3 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v3 setBool:a2 forKey:@"OZPreferenceManager::CompensateAspectRatio"];
}

uint64_t OZPreferenceManager::getCachePercentage(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "integerForKey:", @"OZPreferenceManager::CachePercentage");
}

void OZPreferenceManager::getContentPath(OZPreferenceManager *this, PCString *a2)
{
}

uint64_t OZPreferenceManager::getLayersPreviewColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::LayersPreviewColumn"];
}

uint64_t OZPreferenceManager::getLayersOpacityColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::LayersOpacityColumn"];
}

uint64_t OZPreferenceManager::getLayersBlendColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::LayersBlendColumn"];
}

uint64_t OZPreferenceManager::getLayersDisplayMasks(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::LayersDisplayMasks"];
}

uint64_t OZPreferenceManager::getLayersDisplayBehaviors(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::LayersDisplayBehaviors"];
}

uint64_t OZPreferenceManager::getLayersDisplayEffects(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::LayersDisplayEffects"];
}

double OZPreferenceManager::getLayersVerticalZoom(OZPreferenceManager *this)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "floatForKey:", @"OZPreferenceManager::LayersVerticalZoom");
  return v1;
}

uint64_t OZPreferenceManager::getMediaPreviewColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::MediaPreviewColumn"];
}

uint64_t OZPreferenceManager::getMediaTypeColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::MediaTypeColumn"];
}

uint64_t OZPreferenceManager::getMediaDurationColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::MediaDurationColumn"];
}

uint64_t OZPreferenceManager::getMediaInUseColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::MediaInUseColumn"];
}

uint64_t OZPreferenceManager::getMediaFrameSizeColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::MediaFrameSizeColumn"];
}

uint64_t OZPreferenceManager::getMediaCompressorColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::MediaCompressorColumn"];
}

uint64_t OZPreferenceManager::getMediaDepthColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::MediaDepthColumn"];
}

uint64_t OZPreferenceManager::getMediaFrameRateColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::MediaFrameRateColumn"];
}

uint64_t OZPreferenceManager::getMediaDataRateColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::MediaDataRateColumn"];
}

uint64_t OZPreferenceManager::getMediaAudioRateColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::MediaAudioRateColumn"];
}

uint64_t OZPreferenceManager::getMediaAudioFormatColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::MediaAudioFormatColumn"];
}

uint64_t OZPreferenceManager::getMediaFileSizeColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::MediaFileSizeColumn"];
}

uint64_t OZPreferenceManager::getMediaFileCreatedColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::MediaFileCreatedColumn"];
}

uint64_t OZPreferenceManager::getMediaFileModifiedColumn(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::MediaFileModifiedColumn"];
}

double OZPreferenceManager::getMediaVerticalZoom(OZPreferenceManager *this)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "floatForKey:", @"OZPreferenceManager::MediaVerticalZoom");
  return v1;
}

uint64_t OZPreferenceManager::getTimelineDisplayVideo(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::TimelineDisplayVideo"];
}

uint64_t OZPreferenceManager::getTimelineDisplayAudio(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::TimelineDisplayAudio"];
}

uint64_t OZPreferenceManager::getTimelineDisplayKeyframes(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::TimelineDisplayKeyframes"];
}

uint64_t OZPreferenceManager::getTimelineDisplayMasks(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::TimelineDisplayMasks"];
}

uint64_t OZPreferenceManager::getTimelineDisplayBehaviors(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::TimelineDisplayBehaviors"];
}

uint64_t OZPreferenceManager::getTimelineDisplayEffects(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::TimelineDisplayEffects"];
}

double OZPreferenceManager::getTimelineVideoVerticalZoom(OZPreferenceManager *this)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "floatForKey:", @"OZPreferenceManager::TimelineVideoVerticalZoom");
  return v1;
}

double OZPreferenceManager::getTimelineAudioVerticalZoom(OZPreferenceManager *this)
{
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "floatForKey:", @"OZPreferenceManager::TimelineAudioVerticalZoom");
  return v1;
}

uint64_t OZPreferenceManager::getRecordWhilePlayback(OZPreferenceManager *this)
{
  if (!objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "objectForKey:", @"OZPreferenceManager::RecordWhilePlayback"))return 1; {
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
  }

  return [v1 BOOLForKey:@"OZPreferenceManager::RecordWhilePlayback"];
}

uint64_t OZPreferenceManager::getRecordingOptions(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "integerForKey:", @"OZPreferenceManager::RecordingOptions");
}

uint64_t OZPreferenceManager::getStrokeApplyPenPressureTo(OZPreferenceManager *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  float v1 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "stringForKey:", @"OZPreferenceManager::ApplyPenPressureTo");
  ApplyPenPropertyToValues = (void *)getApplyPenPropertyToValues();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t result = [ApplyPenPropertyToValues countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (result)
  {
    uint64_t v4 = result;
    int v5 = 0;
    uint64_t v6 = *(void *)v10;
    while (2)
    {
      uint64_t v7 = 0;
      int v8 = v5 + v4;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(ApplyPenPropertyToValues);
        }
        if ([v1 isEqualToString:*(void *)(*((void *)&v9 + 1) + 8 * v7)]) {
          return (v5 + v7);
        }
        ++v7;
      }
      while (v4 != v7);
      uint64_t result = [ApplyPenPropertyToValues countByEnumeratingWithState:&v9 objects:v13 count:16];
      uint64_t v4 = result;
      int v5 = v8;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t getApplyPenPropertyToValues(void)
{
  {
    getApplyPenPropertyToValues(void)::uint64_t result = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", @"Nothing", @"Width", @"Opacity", @"Spacing", @"Angle", @"Jitter", 0);
  }
  return getApplyPenPropertyToValues(void)::result;
}

void sub_1B7C30098(_Unwind_Exception *a1)
{
}

uint64_t OZPreferenceManager::getStrokeApplyPenSpeedTo(OZPreferenceManager *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  float v1 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "stringForKey:", @"OZPreferenceManager::ApplyPenSpeedTo");
  ApplyPenPropertyToValues = (void *)getApplyPenPropertyToValues();
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t result = [ApplyPenPropertyToValues countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (result)
  {
    uint64_t v4 = result;
    int v5 = 0;
    uint64_t v6 = *(void *)v10;
    while (2)
    {
      uint64_t v7 = 0;
      int v8 = v5 + v4;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(ApplyPenPropertyToValues);
        }
        if ([v1 isEqualToString:*(void *)(*((void *)&v9 + 1) + 8 * v7)]) {
          return (v5 + v7);
        }
        ++v7;
      }
      while (v4 != v7);
      uint64_t result = [ApplyPenPropertyToValues countByEnumeratingWithState:&v9 objects:v13 count:16];
      uint64_t v4 = result;
      int v5 = v8;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t OZPreferenceManager::isGroundPlaneVisible(OZPreferenceManager *this)
{
  float v1 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];

  return [v1 BOOLForKey:@"OZPreferenceManager::GroundPlaneVisible"];
}

uint64_t OZPreferenceManager::getGroundPlaneSpacing(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "integerForKey:", @"OZPreferenceManager::GroundPlaneSpacing");
}

uint64_t OZPreferenceManager::getDefaultGroupType(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "integerForKey:", @"OZPreferenceManager::DefaultGroupType");
}

__n128 OZPreferenceManager::getRenderingTechnology@<Q0>(OZPreferenceManager *this@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)((char *)this + 40);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

BOOL OZPreferenceManager::getDynamicResolution(OZPreferenceManager *this)
{
  float v1 = (OZPreferenceManager *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", @"OZPreferenceManager::DynamicResolution");
  BOOL v3 = (char)v1;
  OZPreferenceManager::adjustDynamicResolution(v1, &v3);
  return v3;
}

uint64_t OZPreferenceManager::adjustDynamicResolution(OZPreferenceManager *this, BOOL *a2)
{
  BOOL v3 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "stringForKey:", @"OZPreferenceManager::OverrideDynamicResolution");
  if (![v3 caseInsensitiveCompare:@"YES"]) {
    *a2 = 1;
  }
  uint64_t result = [v3 caseInsensitiveCompare:@"NO"];
  if (!result) {
    *a2 = 0;
  }
  return result;
}

uint64_t OZPreferenceManager::getTextureResolution(OZPreferenceManager *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "integerForKey:", @"OZPreferenceManager::TextureResolution");
}

void OZExportSettings::OZExportSettings(OZExportSettings *this)
{
  *(void *)this = &unk_1F11443E0;
  *(_OWORD *)((char *)this + 8) = xmmword_1B83816C0;
  *((void *)this + 3) = 0x300000003;
  *((unsigned char *)this + 32) = 1;
  *(void *)((char *)this + 36) = 0x60000000ALL;
  *((_WORD *)this + 22) = 257;
  *((unsigned char *)this + 46) = 1;
  *(void *)&long long v1 = 0x200000002;
  *((void *)&v1 + OZDocument::~OZDocument(this - 1) = 0x200000002;
  *((_OWORD *)this + 3) = xmmword_1B83816D0;
  *((_OWORD *)this + 4) = v1;
}

void OZExportSettings::~OZExportSettings(OZExportSettings *this)
{
}

void OZExportSettings::OZExportSettings(OZExportSettings *this, const OZExportSettings *a2)
{
  *(void *)this = &unk_1F11443E0;
  *(_OWORD *)((char *)this + 12) = *(_OWORD *)((char *)a2 + 12);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((unsigned char *)this + 32) = *((unsigned char *)a2 + 32);
  *(void *)((char *)this + 36) = *(void *)((char *)a2 + 36);
  *((_WORD *)this + 22) = *((_WORD *)a2 + 22);
  *((unsigned char *)this + 46) = *((unsigned char *)a2 + 46);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
}

BOOL OZExportSettings::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
      && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
      && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44)
      && *(unsigned __int8 *)(a1 + 45) == *(unsigned __int8 *)(a2 + 45)
      && *(unsigned __int8 *)(a1 + 46) == *(unsigned __int8 *)(a2 + 46)
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
      && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52)
      && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56)
      && *(_DWORD *)(a1 + 60) == *(_DWORD *)(a2 + 60)
      && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
      && *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68)
      && *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)
      && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76);
}

BOOL OZExportSettings::operator!=(uint64_t a1, uint64_t a2)
{
  return !OZExportSettings::operator==(a1, a2);
}

uint64_t OZExportSettings::getRenderQuality(OZExportSettings *this)
{
  if (*((_DWORD *)this + 9) == 10) {
    return 10;
  }
  uint64_t result = *((unsigned int *)this + 10);
  int v3 = *((unsigned __int8 *)this + 44);
  if (v3 != (result == 6)
    || *((unsigned char *)this + 45) != (result != 0)
    || *((unsigned __int8 *)this + 46) != v3)
  {
    return 8;
  }
  return result;
}

uint64_t OZExportSettings::setRenderQuality(uint64_t result, int a2)
{
  *(_DWORD *)(result + 36) = a2;
  if (a2 != 8)
  {
    *(_DWORD *)(result + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = a2;
    *(unsigned char *)(result + 44) = a2 > 5;
    *(unsigned char *)(result + 45) = a2 > 1;
    *(unsigned char *)(result + 46) = a2 > 5;
  }
  return result;
}

uint64_t OZExportSettings::writeHeader(OZExportSettings *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZExportSettingsScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 33);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void OZExportSettings::writeBody(OZExportSettings *this, PCSerializerWriteStream *a2)
{
  PCAsciiStream::PCAsciiStream((PCAsciiStream *)v26);
  PCAsciiStream::PCAsciiStream((PCAsciiStream *)v25);
  PCSharedCount::PCSharedCount(&v24);
  PCSharedCount::PCSharedCount((PCSharedCount *)&v23);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZExportSettingsScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 100);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v4 = *((unsigned int *)this + 3);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 5);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v4);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v5 = *((unsigned int *)this + 4);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v6 = *((unsigned int *)this + 5);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 11);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v6);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v7 = *((unsigned int *)this + 6);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 22);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v7);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v8 = *((unsigned int *)this + 7);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 23);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v8);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v9 = *((unsigned __int8 *)this + 32);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 12);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v9);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v10 = *((unsigned int *)this + 9);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 13);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v10);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v11 = *((unsigned int *)this + 10);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 14);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v11);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v12 = *((unsigned __int8 *)this + 44);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 15);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v12);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v13 = *((unsigned __int8 *)this + 45);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 16);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v13);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v14 = *((unsigned __int8 *)this + 46);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 17);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v14);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v15 = *((unsigned int *)this + 12);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 19);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v15);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v16 = *((unsigned int *)this + 13);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 20);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v16);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v17 = *((unsigned int *)this + 14);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 21);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v17);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v18 = *((unsigned int *)this + 15);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 40);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v18);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v19 = *((unsigned int *)this + 16);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 41);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v19);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v20 = *((unsigned int *)this + 17);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 42);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v20);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v21 = *((unsigned int *)this + 18);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 43);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v21);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v22 = *((unsigned int *)this + 19);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 44);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 56))(a2, v22);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  PCSerializerWriteStream::popScope((uint64_t)a2);
  PCString::~PCString(&v23);
  PCString::~PCString((PCString *)&v24);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v25);
  PCAsciiStream::~PCAsciiStream((PCAsciiStream *)v26);
}

void sub_1B7C31164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

uint64_t OZExportSettings::parseBegin(OZExportSettings *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZExportSettings::parseEnd(OZExportSettings *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZExportSettings::parseElement(OZExportSettings *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v4 = *((_DWORD *)a3 + 2);
  switch(v4)
  {
    case 5:
      uint64_t v5 = (char *)this + 12;
      goto LABEL_26;
    case 6:
    case 7:
    case 8:
    case 9:
    case 18:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return 1;
    case 10:
      uint64_t v5 = (char *)this + 16;
      goto LABEL_26;
    case 11:
      uint64_t v5 = (char *)this + 20;
      goto LABEL_26;
    case 12:
      uint64_t v6 = (char *)this + 32;
      goto LABEL_13;
    case 13:
      uint64_t v5 = (char *)this + 36;
      goto LABEL_26;
    case 14:
      uint64_t v5 = (char *)this + 40;
      goto LABEL_26;
    case 15:
      uint64_t v6 = (char *)this + 44;
      goto LABEL_13;
    case 16:
      uint64_t v6 = (char *)this + 45;
      goto LABEL_13;
    case 17:
      uint64_t v6 = (char *)this + 46;
LABEL_13:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 72))(a3, v6);
      return 1;
    case 19:
      uint64_t v5 = (char *)this + 48;
      goto LABEL_26;
    case 20:
      uint64_t v5 = (char *)this + 52;
      goto LABEL_26;
    case 21:
      uint64_t v5 = (char *)this + 56;
      goto LABEL_26;
    case 22:
      uint64_t v7 = (char *)this + 24;
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 32))(a3, (char *)this + 24);
      unsigned int v8 = *((_DWORD *)this + 6);
      goto LABEL_19;
    case 23:
      uint64_t v7 = (char *)this + 28;
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 32))(a3, (char *)this + 28);
      unsigned int v8 = *((_DWORD *)this + 7);
LABEL_19:
      if (v8 >= 0xF) {
        *(_DWORD *)uint64_t v7 = 3;
      }
      return 1;
    case 40:
      uint64_t v5 = (char *)this + 60;
      goto LABEL_26;
    case 41:
      uint64_t v5 = (char *)this + 64;
      goto LABEL_26;
    case 42:
      uint64_t v5 = (char *)this + 68;
      goto LABEL_26;
    case 43:
      uint64_t v5 = (char *)this + 72;
      goto LABEL_26;
    case 44:
      uint64_t v5 = (char *)this + 76;
      goto LABEL_26;
    default:
      if (v4 != 100) {
        return 1;
      }
      uint64_t v5 = (char *)this + 8;
LABEL_26:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 32))(a3, v5);
      return 1;
  }
}

unint64_t OZObjectManipulator::isEnabled(OZObjectManipulator *this, int a2, int a3)
{
  uint64_t v5 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 216))(this);

  return OZChannelBase::isEnabled(v5, a2, a3);
}

uint64_t OZObjectManipulator::enable(OZObjectManipulator *this)
{
  long long v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 216))(this)
                           + 104);

  return v1();
}

uint64_t OZObjectManipulator::disable(OZObjectManipulator *this)
{
  long long v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 216))(this)
                           + 104);

  return v1();
}

uint64_t OZObjectManipulator::isHidden(OZObjectManipulator *this)
{
  return (*(unsigned __int8 *)((*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 216))(this) + 56) >> 1) & 1;
}

uint64_t OZObjectManipulator::isLocked(OZObjectManipulator *this, char a2)
{
  int v3 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 216))(this);

  return OZChannelBase::isLocked(v3, a2);
}

unint64_t OZObjectManipulator::isAnyAncestorLocked(OZObjectManipulator *this)
{
  long long v1 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 216))(this);

  return OZChannelBase::isAnyAncestorLocked(v1);
}

uint64_t OZObjectManipulator::lock(OZObjectManipulator *this)
{
  long long v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 216))(this)
                           + 96);

  return v1();
}

uint64_t OZObjectManipulator::unlock(OZObjectManipulator *this)
{
  long long v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 216))(this)
                           + 96);

  return v1();
}

uint64_t OZObjectManipulator::canDelete(OZObjectManipulator *this)
{
  return (*(unsigned int (**)(OZObjectManipulator *, uint64_t))(*(void *)this + 56))(this, 1) ^ 1;
}

unint64_t OZObjectManipulator::isActiveAtTime(OZObjectManipulator *this, CMTime *a2, int a3, int a4, int a5)
{
  uint64_t v10 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 216))(this);
  uint64_t v11 = v10;
  if (!a5 || (unint64_t result = OZChannelBase::isEnabled(v10, a3, a4), result))
  {
    uint64_t v13 = (*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 264))(this);
    if (!v13) {
      return 1;
    }
    uint64_t v14 = (OZSceneSettings *)(v13 + 336);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v13 + 336), &v20);
    CMTime v17 = *a2;
    *(__n128 *)&time1.int64_t value = v20;
    time1.CMTimeEpoch epoch = v21;
    PC_CMTimeFloorToSampleDuration(&v17, &time1, (uint64_t)&time2);
    *a2 = time2;
    (*((void (**)(CMTime *__return_ptr, OZChannelBase *))v11->var0 + 89))(&v17, v11);
    OZSceneSettings::getFrameDuration(v14, &v15);
    CMTime time1 = v17;
    CMTime time2 = *a2;
    if (CMTimeCompare(&time1, &time2) > 0) {
      return 0;
    }
    CMTime time1 = v17;
    CMTime time2 = v18;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
    *(__n128 *)&time1.int64_t value = v20;
    time1.CMTimeEpoch epoch = v21;
    *(__n128 *)&time2.int64_t value = v15;
    time2.CMTimeEpoch epoch = v16;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v19);
    CMTime time1 = *a2;
    CMTime time2 = v19;
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      if ((v18.flags & 1) == 0) {
        return 0;
      }
      return (v18.flags >> 4) & 1;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

unint64_t OZObjectManipulator::isActiveInTimeRange(OZObjectManipulator *this, const PCTimeRange *a2, int a3, int a4, int a5)
{
  uint64_t v10 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 216))(this);
  uint64_t v11 = v10;
  if (!a5 || (unint64_t result = OZChannelBase::isEnabled(v10, a3, a4), result))
  {
    if ((*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 264))(this))
    {
      memset(&v17, 0, sizeof(v17));
      uint64_t v13 = (*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 264))(this);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v13 + 336), (__n128 *)&v17);
      v14.n128_f64[0] = PCTimeRange::getRangeEnclosingWholeFrames(a2, &v17, (uint64_t)v16);
      (*((void (**)(CMTime *__return_ptr, OZChannelBase *, __n128))v11->var0 + 89))(v15, v11, v14);
      CMTime v21 = v15[0];
      CMTime time1 = v15[0];
      CMTime time2 = v15[1];
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v20);
      CMTime v19 = v16[0];
      CMTime time1 = v16[0];
      CMTime time2 = v16[1];
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v18);
      CMTime time1 = v18;
      CMTime time2 = v21;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        return 0;
      }
      else
      {
        CMTime time1 = v19;
        CMTime time2 = v20;
        return CMTimeCompare(&time1, &time2) < 1;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t OZObjectManipulator::getName(OZObjectManipulator *this)
{
  return (*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 216))(this) + 32;
}

uint64_t OZObjectManipulator::getInternalName(OZObjectManipulator *this)
{
  uint64_t v1 = (*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 216))(this);
  if (*(void *)(v1 + 40)) {
    return *(void *)(v1 + 40);
  }
  else {
    return v1 + 32;
  }
}

void OZObjectManipulator::setName(OZObjectManipulator *this, const PCString *a2, int a3)
{
  uint64_t v5 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 216))(this);
  if (a3)
  {
    PCURL::PCURL((PCURL *)&v6, @"Undo Name Change");
    (*((void (**)(OZChannelBase *, PCString *))v5->var0 + 43))(v5, &v6);
    PCString::~PCString(&v6);
  }
  OZChannelBase::setName(v5, a2, 0);
}

void sub_1B7C31D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void OZObjectManipulator::appendCopyToName(OZObjectManipulator *this)
{
  long long v2 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 216))(this);
  {
    PCURL::PCURL((PCURL *)&v8, @"Object Name Copy");
    PCString::PCString(&v7, "%@");
    int v3 = PCString::find(&v8, &v7);
    PCString::~PCString(&v7);
    PCString::erase(&v8, v3, 2u);
    PCString::PCString(&v7, &v2->var4);
    if ((PCString::find(&v7, &v8) & 0x80000000) != 0)
    {
      uint64_t v4 = localizedString(@"Object Name Copy", 0);
      uint64_t v5 = (const void *)[NSString stringWithValidatedFormat:v4, @"%@", 0, PCString::ns_str(&v7) validFormatSpecifiers error];
      PCURL::PCURL((PCURL *)&v6, v5);
      OZChannelBase::setName(v2, &v6, 0);
      PCString::~PCString(&v6);
    }
    PCString::~PCString(&v7);
    PCString::~PCString(&v8);
  }
}

void sub_1B7C31F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, PCString a12)
{
}

uint64_t OZObjectManipulator::getSourceOperationMask(OZObjectManipulator *this, OZChannelBase *a2, int a3)
{
  if (a3) {
    unsigned int v3 = 9;
  }
  else {
    unsigned int v3 = 1;
  }
  if (a2) {
    return v3;
  }
  else {
    return 0;
  }
}

void OZObjectManipulator::getPasteEntry(OZObjectManipulator *this, OZChannelBase *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1B7C31FA8()
{
  return 0;
}

void OZObjectManipulator::allowDrag(OZObjectManipulator *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int *a5, unsigned int *a6)
{
  *a5 = 0;
  if (lpsrc)
  {
    if (v9)
    {
      if (*(unsigned char *)a6)
      {
        uint64_t v10 = v9;
        if ((*((unsigned int (**)(OZChannelBase *, void *))a3->var0 + 33))(a3, v9))
        {
          if ((*((unsigned int (**)(OZChannelBase *, void *))a3->var0 + 34))(a3, v10))
          {
            *a5 = 1;
            *a6 = 1;
          }
        }
      }
    }
  }
}

uint64_t OZObjectManipulator::prepareForDragOperation()
{
  return 1;
}

uint64_t OZObjectManipulator::performDragOperation(OZObjectManipulator *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, const CMTime *a8)
{
  if (!lpsrc) {
    return 0;
  }
  if (result)
  {
    uint64_t v12 = result;
    uint64_t result = (*((uint64_t (**)(OZChannelBase *, uint64_t))a3->var0 + 33))(a3, result);
    if (result)
    {
      PCSharedCount::PCSharedCount((PCSharedCount *)&v16);
      (*((void (**)(OZChannelBase *, __n128 *))a3->var0 + 43))(a3, &v16);
      PCString::~PCString((PCString *)&v16);
      if ((a7 & 2) != 0)
      {
        uint64_t v13 = (OZScene *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 264))(this);
        __n128 CurrentTime = OZScene::getCurrentTime(v13, &v16);
        (*((void (**)(OZChannelBase *, __n128 *, uint64_t, __n128))a3->var0 + 38))(a3, &v16, v12, CurrentTime);
      }
      else
      {
        (*((void (**)(OZChannelBase *, uint64_t))a3->var0 + 58))(a3, 1);
        (*((void (**)(OZChannelBase *, uint64_t))a3->var0 + 39))(a3, v12);
      }
      (*(void (**)(OZObjectManipulator *))(*(void *)this + 424))(this);
      uint64_t v15 = (*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 264))(this);
      OZDocument::postNotification(*(OZDocument **)(v15 + 1584), 8);
      return 1;
    }
  }
  return result;
}

void sub_1B7C32338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZObjectManipulator::addToUndo(OZObjectManipulator *this, const PCString *a2)
{
  uint64_t result = (*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 232))(this);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)((*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 232))(this)
                                         + 16)
                             + 176);
    return v4();
  }
  return result;
}

OZChannelBase *OZObjectManipulator::getChannelFromRefAndVersion(OZObjectManipulator *this, OZChannelRef *a2, double a3)
{
  uint64_t v5 = (*(uint64_t (**)(OZObjectManipulator *, double))(*(void *)this + 216))(this, a3);
  if (!a2 || !v5) {
    return 0;
  }
  PCString v6 = (OZChannelBase *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 216))(this);

  return OZChannelRef::getChannel(a2, v6);
}

BOOL OZObjectManipulator::shouldRenumberChannel(OZObjectManipulator *this, OZChannelBase *a2)
{
  return a2->var3 >> 4 > 0x270;
}

int8x8_t *OZObjectManipulator::dirty(OZObjectManipulator *this)
{
  (*(void (**)(OZObjectManipulator *))(*(void *)this + 432))(this);
  uint64_t result = (int8x8_t *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 264))(this);
  if (result)
  {
    unsigned int v3 = (OZScene *)result;
    uint64_t v4 = (*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 256))(this);
    unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
    uint64_t result = (int8x8_t *)OZScene::getDependantNodes(v3, v5);
    if (result)
    {
      PCString v6 = result + 1;
      PCString v7 = (int8x8_t *)*result;
      if ((int8x8_t *)*result != &result[1])
      {
        do
        {
          uint64_t result = (int8x8_t *)OZScene::getObject(v3, v7[3].u32[1]);
          if (result
            && *(void *)&vorr_s8(result[2], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)result[2].i8, *(int8x16_t *)result[2].i8, 8uLL)))
          {
            uint64_t result = (int8x8_t *)(*(uint64_t (**)(int8x8_t *))(*(void *)result + 424))(result);
          }
          PCString v8 = (int8x8_t *)v7[1];
          if (v8)
          {
            do
            {
              uint64_t v9 = v8;
              PCString v8 = (int8x8_t *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              uint64_t v9 = (int8x8_t *)v7[2];
              BOOL v10 = *v9 == (void)v7;
              PCString v7 = v9;
            }
            while (!v10);
          }
          PCString v7 = v9;
        }
        while (v9 != v6);
      }
    }
  }
  return result;
}

double OZObjectManipulator::invalidateStaticHash(OZObjectManipulator *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if ((*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 264))(this))
  {
    unsigned int v3 = (OZScene *)(*(uint64_t (**)(OZObjectManipulator *))(*(void *)this + 264))(this);
    return OZScene::invalidateStaticHash(v3);
  }
  return result;
}

_OWORD *OZObjectManipulator::getStaticHash(_OWORD *a1, const void *a2, uint64_t **a3)
{
  PCString v6 = (uint64_t *)operator new(0x18uLL);
  v6[1] = (uint64_t)a3;
  _OWORD v6[2] = (uint64_t)a1;
  PCString v7 = *a3;
  *PCString v6 = (uint64_t)*a3;
  v7[1] = (uint64_t)v6;
  *a3 = v6;
  a3[2] = (uint64_t *)((char *)a3[2] + 1);
  if ((*(unsigned int (**)(_OWORD *))(*(void *)a1 + 456))(a1))
  {
    (*(void (**)(const void *))(*(void *)a2 + 40))(a2);
    (*(void (**)(_OWORD *, const void *, uint64_t **))(*(void *)a1 + 440))(a1, a2, a3);
    if (!v8) {
      __cxa_bad_cast();
    }
    a1[1] = *(_OWORD *)PCHashWriteStream::getHash(v8)->i8;
  }
  uint64_t v9 = *a3;
  uint64_t v10 = **a3;
  *(void *)(v10 + 8) = (*a3)[1];
  *(void *)v9[1] = v10;
  a3[2] = (uint64_t *)((char *)a3[2] - 1);
  operator delete(v9);
  return a1 + 1;
}

void *OZObjectManipulator::getHashForState@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X1>, OZRenderParams *a3@<X2>, uint64_t **a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10 = (uint64_t *)operator new(0x18uLL);
  v10[1] = (uint64_t)a4;
  _OWORD v10[2] = (uint64_t)a1;
  uint64_t v11 = *a4;
  *uint64_t v10 = (uint64_t)*a4;
  v11[1] = (uint64_t)v10;
  *a4 = v10;
  a4[2] = (uint64_t *)((char *)a4[2] + 1);
  (*(void (**)(uint64_t *))(*a2 + 40))(a2);
  std::list<OZObjectManipulator *>::list(v21, 10);
  *(_OWORD *)CMTime v20 = *(_OWORD *)OZRenderParams::getHash(a3);
  StaticHash = (int *)OZObjectManipulator::getStaticHash(a1, a2, v21);
  PCHash128::operator+=(v20, StaticHash);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v19);
  uint64_t v13 = *a2;
  if (!v14) {
    __cxa_bad_cast();
  }
  uint64_t v15 = v14;
  (*(void (**)(uint64_t *))(v13 + 40))(a2);
  (*(void (**)(_OWORD *, uint64_t *, OZRenderParams *, uint64_t **))(*(void *)a1 + 448))(a1, a2, a3, a4);
  PCHashWriteStream::getHash(v15);
  __n128 v16 = *a4;
  uint64_t v17 = **a4;
  *(void *)(v17 + 8) = (*a4)[1];
  *(void *)v16[1] = v17;
  a4[2] = (uint64_t *)((char *)a4[2] - 1);
  operator delete(v16);
  *a5 = *(_OWORD *)PCHashWriteStream::getHash(v15)->i8;
  return std::__list_imp<unsigned int>::clear(v21);
}

void sub_1B7C32A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL OZObjectManipulator::isInObjectList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 8) != a2)
  {
    uint64_t v2 = *(void *)(a2 + 8);
    while (*(void *)(v2 + 16) != a1)
    {
      uint64_t v2 = *(void *)(v2 + 8);
      if (v2 == a2)
      {
        uint64_t v2 = a2;
        return v2 != a2;
      }
    }
  }
  return v2 != a2;
}

uint64_t OZObjectManipulator::setNameOfMaterial(OZObjectManipulator *this, const PCString *a2, OZMaterialBase *a3)
{
  return (*(uint64_t (**)(char *, const PCString *, void))(*((void *)a3 + 2) + 120))((char *)a3 + 16, a2, 0);
}

void OZChannelFontBase::checkAndConvertToSystemFont(OZChannelFontBase *this@<X0>, PCString *a2@<X1>, CGFloat a3@<D0>, PCString *a4@<X8>)
{
  if ([(__CFString *)PCString::ns_str(a2) hasPrefix:@".SF"])
  {
    PCString v8 = PCString::cf_str(a2);
    CTFontRef v9 = OZCreateFontWithName(v8, a3, 0);
    if (v9)
    {
      *((_DWORD *)this + 166) = 2;
      CFRelease(v9);
LABEL_12:
      PCString::PCString(a4, a2);
      return;
    }
    uint64_t v12 = PCString::cf_str(a2);
    uint64_t v11 = (void *)[MEMORY[0x1E4F42A30] systemFontOfSize:a3 weight:OZGetSystemFontWeightFromName(v12)];
  }
  else
  {
    uint64_t v10 = [MEMORY[0x1E4F42A30] fontWithName:PCString::ns_str(a2) size:72.0];
    if (!v10 && ![(__CFString *)PCString::ns_str(a2) hasPrefix:@".SF"])
    {
      *((_DWORD *)this + 166) = 3;
      goto LABEL_12;
    }
    *((_DWORD *)this + 166) = 2;
    uint64_t v11 = (void *)v10;
  }
  CFStringRef v13 = (const __CFString *)[v11 fontName];
  a4->int var0 = 0;

  PCString::set(a4, v13);
}

void OZProjectNode::OZProjectNode(OZProjectNode *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZSceneNode::OZSceneNode(this, a2, a3, a4);
  void *v5 = &unk_1F11446C0;
  v5[2] = &unk_1F1144B90;
  v5[6] = &unk_1F1144DE8;
  PCString::PCString(v11, "DAR Subobject");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 1096), v11, (OZChannelFolder *)((char *)this + 448), 0x64u, 0xAu, 0);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, @"Channel Project Build In Enable");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1224), 1, v11, (OZChannelFolder *)((char *)this + 448), 0x65u, 0, 0, 0);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, @"Channel Project Build Out Enable");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1376), 1, v11, (OZChannelFolder *)((char *)this + 448), 0x66u, 0, 0, 0);
  PCString::~PCString(v11);
  PCURL::PCURL((PCURL *)v11, @"Channel Project HDR White Level");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1528), 0.75, v11, (OZChannelFolder *)((char *)this + 320), 0x67u, 0, 0, 0);
  PCString::~PCString(v11);
  *((unsigned char *)this + 168OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 56), 0x80000, 0);
  OZChannelFolder::resetFoldFlag((OZChannelFolder *)((char *)this + 56), 0x20000);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 56));
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1528), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 1528), 0.5);
  OZChannelBase::updateIDGenerator((OZChannelBase *)*((unsigned int *)this + 20));
  uint64_t v6 = theApp;
  *(_OWORD *)&v11[0].int var0 = xmmword_1B8380CB0;
  PCURL::PCURL((PCURL *)&v10, @"Rig Widget Short Desc");
  OZChannelBase::getNextUniqueID(v7);
  *((void *)this + 136) = OZApplication::createSceneNode(v6, (unsigned int *)v11);
  PCString::~PCString(&v10);
  PCString v8 = (OZChannelBase *)(*(uint64_t (**)(void))(**((void **)this + 136) + 640))();
  OZChannelBase::setNameUnset(v8, 0);
  CTFontRef v9 = (OZChannelBase *)(*(uint64_t (**)(void))(**((void **)this + 136) + 640))(*((void *)this + 136));
  OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 1096), v9);
  (*(void (**)(void, OZProjectNode *))(**((void **)this + 136) + 256))(*((void *)this + 136), this);
}

void sub_1B7C32F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
  OZChannelPercent::~OZChannelPercent(v15);
  OZChannelBool::~OZChannelBool(v14);
  OZChannelBool::~OZChannelBool(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  OZSceneNode::~OZSceneNode(v11);
  _Unwind_Resume(a1);
}

void OZProjectNode::OZProjectNode(OZProjectNode *this, OZProjectNode *a2, char a3)
{
  OZSceneNode::OZSceneNode(this, a2, a3);
  *(void *)uint64_t v5 = &unk_1F11446C0;
  *(void *)(v5 + 16) = &unk_1F1144B90;
  *(void *)(v5 + 48) = &unk_1F1144DE8;
  uint64_t v6 = (OZChannelFolder *)(v5 + 1096);
  PCString v7 = (OZChannelFolder *)(v5 + 448);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 1096), (const OZChannelFolder *)((char *)a2 + 1096), (OZChannelFolder *)(v5 + 448));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1224), (const OZChannelBase *)((char *)a2 + 1224), v7);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 1376), (const OZChannelBase *)((char *)a2 + 1376), v7);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1528), (const OZChannelBase *)((char *)a2 + 1528), (OZChannelFolder *)((char *)this + 320));
  *((unsigned char *)this + 168OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *((unsigned char *)a2 + 1680);
  OZChannelBase::updateIDGenerator((OZChannelBase *)*((unsigned int *)this + 20));
  uint64_t v8 = *((void *)a2 + 136);
  if (v8)
  {
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(v8 + 8) + 24))(*(void *)(v8 + 8));
    *((void *)this + 136) = v9;
  }
  else
  {
    uint64_t v10 = theApp;
    long long v15 = xmmword_1B8380CB0;
    PCURL::PCURL((PCURL *)&v14, @"Rig Widget Short Desc");
    OZChannelBase::getNextUniqueID(v11);
    *((void *)this + 136) = OZApplication::createSceneNode(v10, (unsigned int *)&v15);
    PCString::~PCString(&v14);
    uint64_t v9 = *((void *)this + 136);
  }
  uint64_t v12 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 640))(v9);
  OZChannelBase::setNameUnset(v12, 0);
  CFStringRef v13 = (OZChannelBase *)(*(uint64_t (**)(void))(**((void **)this + 136) + 640))(*((void *)this + 136));
  OZChannelFolder::push_front(v6, v13);
  (*(void (**)(void, OZProjectNode *))(**((void **)this + 136) + 256))(*((void *)this + 136), this);
}

void sub_1B7C33218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelPercent::~OZChannelPercent(v14);
  OZChannelBool::~OZChannelBool(v13);
  OZChannelBool::~OZChannelBool(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  OZSceneNode::~OZSceneNode(v10);
  _Unwind_Resume(a1);
}

void OZProjectNode::~OZProjectNode(OZProjectNode *this)
{
  *(void *)this = &unk_1F11446C0;
  *((void *)this + 2) = &unk_1F1144B90;
  *((void *)this + 6) = &unk_1F1144DE8;
  uint64_t v2 = *((void *)this + 136);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 136) = 0;
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1528));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1376));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 1224));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 1096));

  OZSceneNode::~OZSceneNode(this);
}

{
  uint64_t vars8;

  OZProjectNode::~OZProjectNode(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZProjectNode::~OZProjectNode(OZProjectNode *this)
{
}

{
  OZProjectNode::~OZProjectNode((OZProjectNode *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZProjectNode::~OZProjectNode((OZProjectNode *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZProjectNode::~OZProjectNode((OZProjectNode *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZProjectNode::create(OZProjectNode *this, const PCString *a2)
{
  long long v3 = xmmword_1B837FE80;
  return OZApplication::createSceneNode(theApp, (unsigned int *)&v3);
}

uint64_t OZProjectNode::operator=(uint64_t a1, const void *a2)
{
  OZSceneNode::operator=(a1, (uint64_t)a2);
  if (!v4) {
    __cxa_bad_cast();
  }
  *(unsigned char *)(a1 + 168OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *((unsigned char *)v4 + 1680);
  if (*(void *)(a1 + 1088))
  {
    uint64_t v5 = *((void *)v4 + 136);
    uint64_t v6 = *(void *)(a1 + 1088);
    return OZRigWidget::operator=(v6, v5);
  }
  else
  {
    uint64_t v8 = theApp;
    long long v12 = xmmword_1B8380CB0;
    PCURL::PCURL((PCURL *)&v11, @"Rig Widget Short Desc");
    OZChannelBase::getNextUniqueID(v9);
    *(void *)(a1 + 1088) = OZApplication::createSceneNode(v8, (unsigned int *)&v12);
    PCString::~PCString(&v11);
    uint64_t v10 = (OZChannelBase *)(*(uint64_t (**)(void))(**(void **)(a1 + 1088) + 640))();
    OZChannelFolder::push_front((OZChannelFolder *)(a1 + 1096), v10);
    return (*(uint64_t (**)(void))(**(void **)(a1 + 1088) + 256))();
  }
}

void sub_1B7C33604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

OZChannelBase *OZProjectNode::didCreateCopyForCopyOnWrite(OZChannelBase *this)
{
  var10 = this[9].var10;
  if (var10)
  {
    uint64_t v2 = this;
    this = (OZChannelBase *)LODWORD(this->var10);
    if (this >= LODWORD(var10[2].data))
    {
      uint64_t updated = OZChannelBase::updateIDGenerator(this);
      uint64_t v4 = v2[9].var10;
      unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(updated);
      return OZChannelBase::setID((OZChannelBase *)&v4[1].length, NextUniqueID);
    }
  }
  return this;
}

void OZProjectNode::didAddToScene(OZProjectNode *this, OZScene *a2)
{
  OZChannelFolder::push_back((OZChannelFolder *)((char *)this + 448), (OZChannelBase *)((char *)a2 + 752));
  uint64_t v4 = (OZSceneNode *)*((void *)this + 136);
  if (v4)
  {
    OZScene::registerNode(a2, v4);
  }
}

OZObjectManipulator ***OZProjectNode::willRemoveFromScene(OZObjectManipulator ***this, OZScene *a2)
{
  *((void *)a2 + 10OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  if (!*((unsigned char *)this + 1680)) {
    return OZScene::unregisterNode(a2, (OZSceneNode *)this[136]);
  }
  return this;
}

uint64_t OZProjectNode::didFinishLoadingIntoScene(OZProjectNode *this)
{
  OZSceneNode::didFinishLoadingIntoScene(this);
  uint64_t result = *((void *)this + 136);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 848))(result);
  }
  *((unsigned char *)this + 168OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  return result;
}

uint64_t non-virtual thunk to'OZProjectNode::didFinishLoadingIntoScene(OZProjectNode *this)
{
  return OZProjectNode::didFinishLoadingIntoScene((OZProjectNode *)((char *)this - 16));
}

uint64_t OZProjectNode::didFinishLoadingIntoMotionEffect(OZProjectNode *this)
{
  OZSceneNode::didFinishLoadingIntoMotionEffect((uint64_t)this);
  uint64_t result = *((void *)this + 136);
  if (result)
  {
    long long v3 = *(uint64_t (**)(void))(*(void *)result + 856);
    return v3();
  }
  return result;
}

uint64_t non-virtual thunk to'OZProjectNode::didFinishLoadingIntoMotionEffect(OZProjectNode *this)
{
  return OZProjectNode::didFinishLoadingIntoMotionEffect((OZProjectNode *)((char *)this - 16));
}

uint64_t OZProjectNode::getSourceOperationMask(OZProjectNode *this, OZChannelBase *a2, int a3)
{
  uint64_t v6 = (*(uint64_t (**)(OZProjectNode *))(*(void *)this + 272))(this) + 752;
  PCString v7 = a2;
  do
    PCString v7 = (OZChannelBase *)v7->var6;
  while ((OZChannelBase *)v6 != v7 && v7 != 0);
  if ((OZChannelBase *)v6 == v7) {
    return 2;
  }

  return OZSceneNode::getSourceOperationMask(this, a2, a3);
}

uint64_t non-virtual thunk to'OZProjectNode::getSourceOperationMask(OZProjectNode *this, OZChannelBase *a2, int a3)
{
  return OZProjectNode::getSourceOperationMask((OZProjectNode *)((char *)this - 16), a2, a3);
}

uint64_t OZProjectNode::allowDrag(uint64_t this, OZFactoryBase *lpsrc, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6)
{
  *a5 = 0;
  if (lpsrc)
  {
    uint64_t v10 = this;
    if (this)
    {
      if (*a6 - 1 <= 2)
      {
        uint64_t v11 = this;
        this = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 272))(v10);
        uint64_t v12 = this + 752;
        do
          uint64_t v11 = *(void *)(v11 + 48);
        while (v12 != v11 && v11 != 0);
        if (v12 == v11)
        {
          if (*a6 - 2 < 2
            || *a6 == 1
            && (a3->var7 & 0x1000) != 0
            && (this = (*((uint64_t (**)(OZChannelBase *))a3->var0 + 15))(a3), (this & 1) == 0))
          {
            *a5 = a4 & 2;
          }
        }
      }
    }
  }
  return this;
}

uint64_t non-virtual thunk to'OZProjectNode::allowDrag(OZProjectNode *this, OZFactoryBase *a2, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6)
{
  return OZProjectNode::allowDrag((uint64_t)this - 16, a2, a3, a4, a5, a6);
}

uint64_t OZProjectNode::prepareForDragOperation()
{
  return 1;
}

uint64_t non-virtual thunk to'OZProjectNode::prepareForDragOperation()
{
  return 1;
}

uint64_t OZProjectNode::performDragOperation(OZProjectNode *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, int a5, unsigned int a6, unsigned int a7, const CMTime *a8)
{
  if (!lpsrc) {
    return 0;
  }
  if (!result) {
    return result;
  }
  uint64_t v11 = (OZChannelBase *)result;
  uint64_t v12 = *(OZChannelFolder **)(result + 48);
  if (a5 == 1)
  {
    if ((a3->var7 & 0x1000) != 0)
    {
      OZChannelFolder::removeDescendant(v12, v11);
      PCString v14 = v16;
      long long v15 = 0;
      goto LABEL_12;
    }
    return 0;
  }
  var6 = a3->var6;
  if (a5 != 2)
  {
    if (a5 == 3)
    {
      OZChannelFolder::removeDescendant(*(OZChannelFolder **)(result + 48), (OZChannelBase *)result);
      PCString v14 = var6;
      long long v15 = a3;
LABEL_12:
      OZChannelFolder::insertDescendantAfter(v14, v15, v11);
      return 1;
    }
    return 0;
  }
  OZChannelFolder::removeDescendant(*(OZChannelFolder **)(result + 48), (OZChannelBase *)result);
  OZChannelFolder::insertDescendantBefore(var6, a3, v11);
  return 1;
}

uint64_t OZProjectNode::writeBody(OZProjectNode *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a4)
  {
    uint64_t v10 = *((void *)this + 136);
    if (v10)
    {
      if (!OZChannelBase::testFlag((OZChannelBase *)(v10 + 56), 8))
      {
        TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZProjectNodeScope);
        uint64_t v11 = (void *)*((void *)this + 136);
        uint64_t v12 = v11[6];
        v11 += 6;
        (*(void (**)(void *, PCSerializerWriteStream *, void))(v12 + 16))(v11, a2, 0);
        (*(void (**)(void *, PCSerializerWriteStream *, void, uint64_t, uint64_t))(*v11 + 24))(v11, a2, 0, 1, 1);
        (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
        PCSerializerWriteStream::popScope((uint64_t)a2);
      }
    }
  }

  return OZSceneNode::writeBody((unsigned int **)this, a2, a3, a4, a5);
}

uint64_t non-virtual thunk to'OZProjectNode::writeBody(OZProjectNode *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZProjectNode::writeBody((OZProjectNode *)((char *)this - 48), a2, a3, a4, a5);
}

OZFactory *OZProjectNode::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  OZSceneNode::markFactoriesForSerialization(this, a2);
  uint64_t result = this[136];
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 456);
    return (OZFactory *)v4();
  }
  return result;
}

OZFactory *non-virtual thunk to'OZProjectNode::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZProjectNode::markFactoriesForSerialization(this - 6, a2);
}

uint64_t OZProjectNode::parseBegin(OZProjectNode *this, PCSerializerReadStream *a2)
{
  uint64_t v4 = (OZChannelFolder *)((char *)this + 1096);
  uint64_t v5 = (OZChannelBase *)(*(uint64_t (**)(void))(**((void **)this + 136) + 640))(*((void *)this + 136));
  OZChannelFolder::removeDescendant(v4, v5);
  uint64_t v6 = (OZScene *)(*(uint64_t (**)(OZProjectNode *))(*(void *)this + 272))(this);
  if (v6)
  {
    PCString v7 = v6;
    OZScene::unregisterNode(v6, *((OZSceneNode **)this + 136));
    OZScene::removeAllDependencies(v7, *((OZSceneNode **)this + 136));
  }
  uint64_t v8 = *((void *)this + 136);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *((void *)this + 136) = 0;
  *((unsigned char *)this + 168OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 1;
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZProjectNodeScope);

  return OZSceneNode::parseBegin(this, a2);
}

uint64_t non-virtual thunk to'OZProjectNode::parseBegin(OZProjectNode *this, PCSerializerReadStream *a2)
{
  return OZProjectNode::parseBegin((OZProjectNode *)((char *)this - 48), a2);
}

uint64_t non-virtual thunk to'OZProjectNode::parseEnd(OZProjectNode *this, PCSerializerReadStream *a2)
{
  return OZSceneNode::parseEnd((OZProjectNode *)((char *)this - 48), a2);
}

uint64_t OZProjectNode::parseElement(OZProjectNode *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCSharedCount::PCSharedCount(&v17);
  *(void *)__n128 v16 = 0;
  if (*((_DWORD *)a3 + 2) == 62)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 113, (uint64_t)v16);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 110, (uint64_t)&v17);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v16[1]);
    uint64_t v6 = (const void *)OZFactories::lookupFactory(*(OZFactories **)(theApp + 32), v16[0]);
    if (v6)
    {
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = (OZScene *)(*(uint64_t (**)(OZProjectNode *))(*(void *)this + 272))(this);
        uint64_t v10 = (*(uint64_t (**)(void *, PCSharedCount *, void))(*(void *)v8 + 168))(v8, &v17, v16[1]);
        *((void *)this + 136) = v11;
        uint64_t v12 = (OZChannelBase *)(*(uint64_t (**)(void))(*(void *)v11 + 640))();
        OZChannelBase::setNameUnset(v12, 0);
        CFStringRef v13 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 640))(v10);
        OZChannelFolder::push_front((OZChannelFolder *)((char *)this + 1096), v13);
        (*(void (**)(uint64_t, OZProjectNode *))(*(void *)v10 + 256))(v10, this);
        if (v9)
        {
          OZScene::registerNode(v9, (OZSceneNode *)v10);
          OZScene::addAllDependencies((uint64_t)v9, (OZSceneNode *)v10);
        }
        PCSerializerReadStream::pushHandler(a2, (PCSerializer *)(v10 + 48));
      }
    }
  }
  uint64_t v14 = OZSceneNode::parseElement((PCSerializer **)this, a2, a3);
  PCString::~PCString((PCString *)&v17);
  return v14;
}

void sub_1B7C340F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZProjectNode::parseElement(OZProjectNode *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZProjectNode::parseElement((OZProjectNode *)((char *)this - 48), a2, a3);
}

void OZProjectNode::getHDRWhiteLevel(OZProjectNode *this)
{
}

uint64_t OZRigWidget::operator=(uint64_t a1, uint64_t a2)
{
  OZSceneNode::operator=(a1, a2);
  *(void *)(a1 + 1088) = *(void *)(a2 + 1088);
  OZChannelFolder::operator=(a1 + 1096);
  long long v4 = *(_OWORD *)(a2 + 1224);
  *(void *)(a1 + 124OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *(void *)(a2 + 1240);
  *(_OWORD *)(a1 + 1224) = v4;
  OZChannelBase::operator=(a1 + 1248, a2 + 1248);
  OZChannelFolder::operator=(a1 + 1400);
  if (a1 == a2)
  {
    int v6 = *(_DWORD *)(a2 + 1576);
    *(_WORD *)(a1 + 158OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *(_WORD *)(a2 + 1580);
    *(_DWORD *)(a1 + 1576) = v6;
  }
  else
  {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)(a1 + 1528), *(char **)(a2 + 1528), *(void *)(a2 + 1536), (uint64_t)(*(void *)(a2 + 1536) - *(void *)(a2 + 1528)) >> 3);
    std::list<unsigned int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<unsigned int,void *>,std::__list_const_iterator<unsigned int,void *>>((uint64_t *)(a1 + 1552), *(void *)(a2 + 1560), a2 + 1552);
    int v5 = *(_DWORD *)(a2 + 1576);
    *(_WORD *)(a1 + 158OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *(_WORD *)(a2 + 1580);
    *(_DWORD *)(a1 + 1576) = v5;
    std::list<OZRigEditModeEntry>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZRigEditModeEntry,void *>,std::__list_const_iterator<OZRigEditModeEntry,void *>>((uint64_t *)(a1 + 1584), *(void *)(a2 + 1592), a2 + 1584);
  }
  return a1;
}

uint64_t *std::list<unsigned int>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<unsigned int,void *>,std::__list_const_iterator<unsigned int,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = (uint64_t *)a1[1]; a2 != a3 && i != a1; uint64_t i = (uint64_t *)i[1])
  {
    *((_DWORD *)i + 4) = *(_DWORD *)(a2 + 16);
    a2 = *(void *)(a2 + 8);
  }
  if (i == a1) {
    return std::list<unsigned int>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<unsigned int,void *>,std::__list_const_iterator<unsigned int,void *>>((uint64_t)a1, a1, a2, a3);
  }
  else {
    return std::list<std::pair<CMTime,double>>::erase((uint64_t)a1, i, a1);
  }
}

uint64_t *std::list<unsigned int>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<unsigned int,void *>,std::__list_const_iterator<unsigned int,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x18uLL);
    uint64_t v9 = v8;
    *uint64_t v8 = 0;
    v8[1] = 0;
    *((_DWORD *)v8 + 4) = *(_DWORD *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      uint64_t v12 = v8;
      do
      {
        uint64_t v8 = operator new(0x18uLL);
        *uint64_t v8 = v12;
        v8[1] = 0;
        *((_DWORD *)v8 + 4) = *(_DWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        uint64_t v12 = v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    void *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1B7C3431C(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B7C3433C(_Unwind_Exception *a1)
{
}

uint64_t *std::list<OZRigEditModeEntry>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZRigEditModeEntry,void *>,std::__list_const_iterator<OZRigEditModeEntry,void *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  int v6 = (uint64_t *)a1[1];
  if (a2 != a3 && v6 != a1)
  {
    do
    {
      OZRigEditModeEntry::operator=((std::string *)(v6 + 2), (const std::string *)(v4 + 16));
      uint64_t v4 = *(void *)(v4 + 8);
      int v6 = (uint64_t *)v6[1];
    }
    while (v4 != a3 && v6 != a1);
  }
  if (v6 == a1)
  {
    return std::list<OZRigEditModeEntry>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZRigEditModeEntry,void *>,std::__list_const_iterator<OZRigEditModeEntry,void *>>((uint64_t)a1, a1, v4, a3);
  }
  else
  {
    return (uint64_t *)std::list<OZRigEditModeEntry>::erase((uint64_t)a1, (void **)v6, (void **)a1);
  }
}

uint64_t *std::list<OZRigEditModeEntry>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZRigEditModeEntry,void *>,std::__list_const_iterator<OZRigEditModeEntry,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = std::__list_imp<OZRigEditModeEntry>::__create_node[abi:ne180100]<OZRigEditModeEntry const&>(a1, 0, 0, a3 + 16);
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      uint64_t v12 = (uint64_t)v8;
      do
      {
        uint64_t v8 = std::__list_imp<OZRigEditModeEntry>::__create_node[abi:ne180100]<OZRigEditModeEntry const&>(a1, v12, 0, v10 + 16);
        *(void *)(v12 + 8) = v8;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        uint64_t v12 = (uint64_t)v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    void *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1B7C344D4(void *a1)
{
  __cxa_begin_catch(a1);
  std::list<OZRigEditModeEntry>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZRigEditModeEntry,void *>,std::__list_const_iterator<OZRigEditModeEntry,void *>>(v1);
  __cxa_rethrow();
}

void sub_1B7C344E8(_Unwind_Exception *a1)
{
}

void **std::list<OZRigEditModeEntry>::erase(uint64_t a1, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    int v6 = (void **)*a3;
    PCString v7 = *a2;
    v7[1] = *((void *)*a3 + 1);
    *v6[1] = v7;
    do
    {
      uint64_t v8 = (void **)v4[1];
      --*(void *)(a1 + 16);
      OZChannelRef::~OZChannelRef(v4 + 2);
      operator delete(v4);
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

void *std::__list_imp<OZRigEditModeEntry>::__create_node[abi:ne180100]<OZRigEditModeEntry const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  PCString v7 = operator new(0x30uLL);
  *PCString v7 = a2;
  v7[1] = a3;
  OZRigEditModeEntry::OZRigEditModeEntry(v7 + 2, a4);
  return v7;
}

void sub_1B7C345C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::list<OZRigEditModeEntry>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<OZRigEditModeEntry,void *>,std::__list_const_iterator<OZRigEditModeEntry,void *>>(void **a1)
{
  do
  {
    uint64_t v2 = (void **)*a1;
    OZChannelRef::~OZChannelRef(a1 + 2);
    operator delete(a1);
    a1 = v2;
  }
  while (v2);
}

void OZChanObjectManipRef::OZChanObjectManipRef(OZChanObjectManipRef *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChanObjectManipRef_Factory::getInstance(this);
  OZChanObjectRef::OZChanObjectRef(this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F1144E58;
  *((void *)this + 2) = &unk_1F11451D8;
  *((unsigned char *)this + 154) = 0;
  *((void *)this + 7) |= 0x1000010000uLL;
  *((_WORD *)this + 76) = 1;
}

uint64_t OZChanObjectManipRef_Factory::getInstance(OZChanObjectManipRef_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChanObjectManipRef_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&OZChanObjectManipRef_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChanObjectManipRef_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChanObjectManipRef_Factory::_instance;
}

void OZChanObjectManipRef::OZChanObjectManipRef(OZChanObjectManipRef *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChanObjectRef::OZChanObjectRef(this, a2, a3, a4, a5, a6);
  *(void *)uint64_t v6 = &unk_1F1144E58;
  *(void *)(v6 + 16) = &unk_1F11451D8;
  *(unsigned char *)(v6 + 154) = 0;
  *(void *)(v6 + 56) |= 0x1000010000uLL;
  *(_WORD *)(v6 + 152) = 1;
}

void OZChanObjectManipRef::OZChanObjectManipRef(OZChanObjectManipRef *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChanObjectRef::OZChanObjectRef(this, a2, a3, a4);
  *(void *)uint64_t v4 = &unk_1F1144E58;
  *(void *)(v4 + 16) = &unk_1F11451D8;
  *(unsigned char *)(v4 + 154) = 0;
  *(void *)(v4 + 56) |= 0x1000010000uLL;
  *(_WORD *)(v4 + 152) = 1;
}

void OZChanObjectManipRef::OZChanObjectManipRef(OZChanObjectManipRef *this, const OZChannelBase *a2, OZChannelFolder *a3)
{
  OZChanObjectRef::OZChanObjectRef(this, a2, a3);
  *(void *)uint64_t v4 = &unk_1F1144E58;
  *(void *)(v4 + 16) = &unk_1F11451D8;
  *(unsigned char *)(v4 + 154) = 0;
  *(_WORD *)(v4 + 152) = a2[1].var5;
  *(unsigned char *)(v4 + 154) = BYTE2(a2[1].var5);
}

void non-virtual thunk to'OZChanObjectManipRef::~OZChanObjectManipRef(OZChanObjectManipRef *this)
{
}

{
  uint64_t vars8;

  OZChanObjectRef::~OZChanObjectRef((OZChanObjectManipRef *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void OZChanObjectManipRef::~OZChanObjectManipRef(OZChanObjectManipRef *this)
{
  OZChanObjectRef::~OZChanObjectRef(this);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChanObjectManipRef::clone(OZChanObjectManipRef *this)
{
}

void sub_1B7C349B8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4060806C75);
  _Unwind_Resume(a1);
}

uint64_t OZChanObjectManipRef::getObjectID(OZChannel *this)
{
  return OZChannel::getValueAsUint(this, MEMORY[0x1E4F1FA48], 0.0);
}

uint64_t OZChanObjectManipRef::setObjectID(OZChannelBase *this, unsigned int a2, uint64_t a3)
{
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (!ObjectManipulator
    || (uint64_t v8 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator),
        !a2)
    || !v8)
  {
    double v11 = 0.0;
    v7.n128_u64[0] = 0;
    uint64_t result = (*((uint64_t (**)(OZChannelBase *, void, uint64_t, __n128))this->var0 + 89))(this, MEMORY[0x1E4F1FA48], a3, v7);
LABEL_7:
    if (!BYTE1(this[1].var5)) {
      return result;
    }
    goto LABEL_8;
  }
  uint64_t Object = OZScene::getObject(v8, a2);
  if ((*((unsigned int (**)(OZChannelBase *, uint64_t))this->var0 + 109))(this, Object))
  {
    double v11 = (double)a2;
    v10.n128_f64[0] = (double)a2;
    uint64_t result = (*((uint64_t (**)(OZChannelBase *, void, uint64_t, __n128))this->var0 + 89))(this, MEMORY[0x1E4F1FA48], a3, v10);
    goto LABEL_7;
  }
  uint64_t result = (*((uint64_t (**)(OZChannelBase *, void))this->var0 + 92))(this, MEMORY[0x1E4F1FA48]);
  if (!BYTE1(this[1].var5)) {
    return result;
  }
  double v11 = (double)a2;
LABEL_8:

  return OZChannel::setDefaultValue((OZChannel *)this, v11);
}

uint64_t OZChanObjectManipRef::getObject(OZChannelBase *this)
{
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (!ObjectManipulator) {
    return 0;
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (OZScene *)v3;
  unsigned int ValueAsUint = OZChannel::getValueAsUint((OZChannel *)this, MEMORY[0x1E4F1FA48], 0.0);

  return OZScene::getObject(v4, ValueAsUint);
}

uint64_t OZChanObjectManipRef::setObject(OZChanObjectManipRef *this, OZObjectManipulator *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = (*(uint64_t (**)(OZObjectManipulator *))(*(void *)a2 + 256))(a2);
    a2 = (OZObjectManipulator *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  }
  uint64_t v6 = *(uint64_t (**)(OZChanObjectManipRef *, OZObjectManipulator *, uint64_t))(*(void *)this + 864);

  return v6(this, a2, a3);
}

uint64_t OZChanObjectManipRef::canReferenceObject(OZChannelBase *this, const OZObjectManipulator *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  uint64_t v5 = ObjectManipulator
     ? (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator)
     : 0;
  if (v5 != (*(uint64_t (**)(const OZObjectManipulator *))(*(void *)a2 + 264))(a2)) {
    return 0;
  }
  uint64_t v7 = OZChannelBase::getObjectManipulator(this);
  if (!v7) {
    return 1;
  }
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)v7 + 408);

  return v8();
}

uint64_t OZChanObjectManipRef::setAlwaysUpdateDefaultValue(uint64_t this, char a2)
{
  *(unsigned char *)(this + 153) = a2;
  return this;
}

void std::__call_once_param<std::tuple<OZChanObjectManipRef_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C34E54(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChanObjectManipRef_Factory::OZChanObjectManipRef_Factory(OZChanObjectManipRef_Factory *this)
{
  long long v3 = xmmword_1B8378DB0;
  long long v4 = xmmword_1B8381730;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1145248;
  *((void *)this + 16) = &unk_1F1145318;
}

void sub_1B7C34F24(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChanObjectManipRef_Factory::create(OZChanObjectManipRef_Factory *this, const PCString *a2)
{
}

void sub_1B7C34FF4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4060806C75);
  _Unwind_Resume(a1);
}

void OZChanObjectManipRef_Factory::createCopy(OZChanObjectManipRef_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C350FC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4060806C75);
  _Unwind_Resume(a1);
}

void OZChanObjectManipRef_Factory::createChannelCopy(OZChanObjectManipRef_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7C35204(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4060806C75);
  _Unwind_Resume(a1);
}

_DWORD *OZPlaybackEngine::OZPlaybackEngine(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  result[1] = 0;
  return result;
}

double OZPlaybackEngine::OZPlaybackEngine(void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

double OZPlaybackEngine::operator=(double *a1, double *a2)
{
  if (a1 != a2)
  {
    double result = *a2;
    *a1 = *a2;
  }
  return result;
}

BOOL OZPlaybackEngine::operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void OZRenderParams::OZRenderParams(OZRenderParams *this)
{
  char v2 = OZRenderState::OZRenderState((OZRenderState *)this);
  LOBYTE(v2[1].var0.varOZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  PCImageAttributes::PCImageAttributes((PCImageAttributes *)&v2[1].var5);
  PCWorkingColorVector::PCWorkingColorVector((OZRenderParams *)((char *)this + 392));
  PCWorkingColorVector::PCWorkingColorVector((OZRenderParams *)((char *)this + 408));
  *((unsigned char *)this + 424) = 1;
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 54) = v3;
  *((void *)this + 55) = v4;
  *((void *)this + 56) = v3;
  *((void *)this + 57) = v4;
  *(void *)&long long v5 = 0x200000002;
  *((void *)&v5 + OZDocument::~OZDocument(this - 1) = 0x200000002;
  *((_OWORD *)this + 29) = v5;
  *((_DWORD *)this + 12OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 16842752;
  *((_DWORD *)this + 123) = 0;
  *((unsigned char *)this + 496) = 0;
  *((_DWORD *)this + 12OZDocument::~OZDocument(this - 1) = 0;
  *((unsigned char *)this + 488) = 0;
  *((_DWORD *)this + 125) = 6;
  *((void *)this + 63) = 0x3FF0000000000000;
  *((_DWORD *)this + 128) = 16842752;
  *((_WORD *)this + 258) = 1;
  uint64_t v7 = PCColor::CLEAR(v6);
  long long v8 = *(_OWORD *)v7;
  long long v9 = *((_OWORD *)v7 + 2);
  *(_OWORD *)((char *)this + 536) = *((_OWORD *)v7 + 1);
  *(_OWORD *)((char *)this + 552) = v9;
  *(_OWORD *)((char *)this + 52OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v8;
  __n128 v10 = (CGColorSpace *)*((void *)v7 + 6);
  *((void *)this + 7OZDocument::~OZDocument(this - 1) = v10;
  if (v10) {
    PCCFRefTraits<CGColorSpace *>::retain(v10);
  }
  *((_DWORD *)this + 144) = 0;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((void *)this + 75) = 0xBFF0000000000000;
  *((void *)this + 76) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((void *)this + 79) = 0xBFF0000000000000;
  *((void *)this + 8OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 648) = xmmword_1B7E74760;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((void *)this + 85) = 0xBFF0000000000000;
  *((void *)this + 86) = 0xBFF0000000000000;
  *((unsigned char *)this + 696) = 0;
  *((_DWORD *)this + 175) = 0;
  PCColorDescription::PCColorDescription((PCColorDescription *)((char *)this + 704));
  *((unsigned char *)this + 728) = 1;
  *((float *)this + 184) = PCRenderModel::getDefaultBlendingGamma(v11);
  PCColorDescription::PCColorDescription((PCColorDescription *)this + 31);
  *((unsigned char *)this + 768) = 1;
  *((_DWORD *)this + 194) = 0;
  *((unsigned char *)this + 78OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((_DWORD *)this + 20OZDocument::~OZDocument(this - 1) = 0;
  *((_OWORD *)this + 49) = 0u;
  *((unsigned char *)this + 80OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *((void *)this + 116) = 0x3FF0000000000000;
  *((void *)this + 11OZDocument::~OZDocument(this - 1) = 0x3FF0000000000000;
  *((void *)this + 106) = 0x3FF0000000000000;
  *((void *)this + 10OZDocument::~OZDocument(this - 1) = 0x3FF0000000000000;
  *((_OWORD *)this + 5OZDocument::~OZDocument(this - 1) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *((unsigned char *)this + 936) = 0;
  *(void *)((char *)this + 94OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  *(_OWORD *)((char *)this + 952) = 0u;
  uint64_t v12 = (long long *)MEMORY[0x1E4F1F9F8];
  long long v13 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)((char *)this + 968) = *MEMORY[0x1E4F1F9F8];
  uint64_t v14 = *((void *)v12 + 2);
  *((void *)this + 123) = v14;
  *((void *)this + 124) = 0;
  *((_OWORD *)this + 63) = 0u;
  *((void *)this + 125) = (char *)this + 1008;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *((void *)this + 128) = (char *)this + 1032;
  *((_OWORD *)this + 66) = 0u;
  *((void *)this + 13OZDocument::~OZDocument(this - 1) = (char *)this + 1056;
  *((void *)this + 134) = 0x3FF0000000000000;
  *((void *)this + 135) = 0;
  *((_OWORD *)this + 68) = v13;
  *((void *)this + 138) = v14;
  *(_OWORD *)((char *)this + 1112) = v13;
  *((void *)this + 14OZDocument::~OZDocument(this - 1) = v14;
  *((_OWORD *)this + 7OZDocument::~OZDocument(this - 1) = v13;
  *((void *)this + 144) = v14;
  uint64_t v15 = *((void *)v12 + 2);
  *((void *)this + 147) = v15;
  long long v16 = *v12;
  *(_OWORD *)((char *)this + 116OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *v12;
  *((void *)this + 15OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v15;
  *((_OWORD *)this + 74) = v16;
  *((_DWORD *)this + 302) = 0;
  *((_WORD *)this + 606) = 1;
  *((_WORD *)this + 616) = 0;
  *((_OWORD *)this + 76) = 0u;
  operator new();
}

void sub_1B7C35654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, CGColorSpace **a11, CGColorSpace **a12)
{
  if (*v20) {
    (*(void (**)(void))(*(void *)*v20 + 24))(*v20);
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v19);
  PCSharedCount::~PCSharedCount(v18);
  PCSharedCount::~PCSharedCount(v17);
  PCSharedCount::~PCSharedCount(v16);
  uint64_t v22 = *(std::__shared_weak_count **)(v12 + 1224);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v12 + 1048, *v14);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v13, *v15);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v12 + 1000, *a10);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v12 + 792));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v12 + 784));
  PCCFRef<CGColorSpace *>::~PCCFRef(a11);
  PCCFRef<CGColorSpace *>::~PCCFRef(a12);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v12 + 568));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v12 + 344));
  PCString v23 = *(std::__shared_weak_count **)(v12 + 312);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  PCSharedCount v24 = *(std::__shared_weak_count **)(v12 + 296);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

double OZRenderParams::setWidth(OZRenderParams *this, int a2)
{
  *((_DWORD *)this + 8OZDocument::~OZDocument(this - 1) = a2;
  double result = 0.0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return result;
}

double OZRenderParams::setHeight(OZRenderParams *this, int a2)
{
  *((_DWORD *)this + 82) = a2;
  double result = 0.0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return result;
}

double OZRenderParams::setDepth(OZRenderParams *this, int a2)
{
  *((_DWORD *)this + 83) = a2;
  double result = 0.0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return result;
}

double OZRenderParams::setImageType(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 32OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  return result;
}

double OZRenderParams::setNumChannels(OZRenderParams *this, int a2)
{
  *((_DWORD *)this + 84) = a2;
  double result = 0.0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return result;
}

uint64_t OZRenderParams::deleteControl(OZRenderParams *this)
{
  uint64_t result = *((void *)this + 34);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 34) = 0;
  return result;
}

uint64_t OZRenderParams::getHash(OZRenderParams *this)
{
  if (!(*((_DWORD *)this + 99) | *((_DWORD *)this + 98) | *((_DWORD *)this + 100) | *((_DWORD *)this + 101))) {
    OZRenderParams::calcHash(this);
  }
  return (uint64_t)this + 392;
}

void OZRenderParams::calcHash(OZRenderParams *this)
{
}

void sub_1B7C359D8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1091C40E2C1B576);
  _Unwind_Resume(a1);
}

_DWORD *OZRenderParams::getHashWithoutTime@<X0>(_DWORD *this@<X0>, _DWORD *a2@<X8>)
{
  int v3 = this[102];
  int v4 = this[103];
  int v5 = this[104];
  int v6 = this[105];
  if (!(v4 | v3 | v5 | v6)) {
    operator new();
  }
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return this;
}

void sub_1B7C35AF0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x1091C40E2C1B576);
  _Unwind_Resume(a1);
}

float64x2_t OZRenderParams::getRenderBounds@<Q0>(OZRenderParams *this@<X0>, uint64_t a2@<X8>)
{
  if (*((double *)this + 75) <= 0.0)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)((char *)this + 324);
    v5.i64[0] = v4;
    v5.i64[1] = HIDWORD(v4);
    float64x2_t result = vcvtq_f64_u64(v5);
    *(float64x2_t *)(a2 + 16) = result;
  }
  else
  {
    float64x2_t result = *(float64x2_t *)((char *)this + 584);
    long long v3 = *(_OWORD *)((char *)this + 600);
    *(float64x2_t *)a2 = result;
    *(_OWORD *)(a2 + 16) = v3;
  }
  return result;
}

float64x2_t OZRenderParams::getRenderGate@<Q0>(OZRenderParams *this@<X0>, uint64_t a2@<X8>)
{
  if (*((double *)this + 79) <= 0.0)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)((char *)this + 324);
    v5.i64[0] = v4;
    v5.i64[1] = HIDWORD(v4);
    float64x2_t result = vcvtq_f64_u64(v5);
    *(float64x2_t *)(a2 + 16) = result;
  }
  else
  {
    float64x2_t result = *(float64x2_t *)((char *)this + 616);
    long long v3 = *(_OWORD *)((char *)this + 632);
    *(float64x2_t *)a2 = result;
    *(_OWORD *)(a2 + 16) = v3;
  }
  return result;
}

void OZRenderParams::getPixelTransform(OZRenderParams *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 12OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0x3FF0000000000000;
  *(void *)(a2 + 8OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0x3FF0000000000000;
  *(void *)(a2 + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0x3FF0000000000000;
  *(void *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  if (*((unsigned char *)this + 936))
  {
    long long v3 = (char *)this + 808;
    if ((OZRenderParams *)((char *)this + 808) != (OZRenderParams *)a2)
    {
      for (uint64_t i = 0; i != 128; i += 32)
      {
        uint64x2_t v5 = (_OWORD *)(a2 + i);
        long long v6 = *(_OWORD *)&v3[i + 16];
        _OWORD *v5 = *(_OWORD *)&v3[i];
        v5[1] = v6;
      }
    }
  }
  else
  {
    v7.f64[0] = *((float64_t *)this + 79);
    if (v7.f64[0] <= 0.0)
    {
      uint64_t v9 = *(void *)((char *)this + 324);
      v10.i64[0] = v9;
      v10.i64[1] = HIDWORD(v9);
      float64x2_t v7 = vcvtq_f64_u64(v10);
      float64x2_t v8 = 0uLL;
    }
    else
    {
      float64x2_t v8 = *(float64x2_t *)((char *)this + 616);
      v7.f64[1] = *((float64_t *)this + 80);
    }
    float64x2_t v11 = *(float64x2_t *)((char *)this + 24);
    float64x2_t v24 = vmulq_f64(v8, v11);
    float64x2_t v25 = vmulq_f64(v7, v11);
    double v12 = *((double *)this + 5);
    uint64_t v13 = (void *)*((void *)this + 160);
    uint64_t v22 = v13;
    double v20 = v24.f64[0];
    double v21 = v25.f64[0];
    if (v13) {
      uint64_t v14 = (PCShared_base *)((char *)v13 + *(void *)(*v13 - 24));
    }
    else {
      uint64_t v14 = 0;
    }
    PCSharedCount::PCSharedCount(&v23, v14);
    if (v22)
    {
      double v15 = v12 / (*(double (**)(void *))(*v22 + 688))(v22);
      v24.f64[0] = v15 * v20;
      v25.f64[0] = v15 * v21;
      (*(void (**)(void *, float64x2_t *, uint64_t))(*v22 + 296))(v22, &v24, a2);
      double v16 = 1.0 / v15;
      if (1.0 / v15 != 1.0)
      {
        float64x2_t v17 = vmulq_n_f64(*(float64x2_t *)a2, v16);
        float64x2_t v18 = vmulq_n_f64(*(float64x2_t *)(a2 + 16), v16);
        *(float64x2_t *)a2 = v17;
        *(float64x2_t *)(a2 + 16) = v18;
      }
      double v19 = 1.0 / v12;
      if (1.0 / v12 != 1.0)
      {
        *(double *)a2 = v19 * *(double *)a2;
        *(double *)(a2 + 32) = v19 * *(double *)(a2 + 32);
        *(double *)(a2 + 64) = v19 * *(double *)(a2 + 64);
        *(double *)(a2 + 96) = v19 * *(double *)(a2 + 96);
      }
    }
    PCSharedCount::~PCSharedCount(&v23);
  }
}

void sub_1B7C35D98(_Unwind_Exception *a1)
{
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

__n128 OZRenderParams::getResolution@<Q0>(OZRenderParams *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 24);
  *a2 = result;
  return result;
}

BOOL OZRenderParams::hasROI(OZRenderParams *this)
{
  return *((_DWORD *)this + 164) > 0;
}

float64_t OZRenderParams::getROI@<D0>(OZRenderParams *this@<X0>, float64x2_t *a2@<X8>)
{
  if (*((int *)this + 164) < 1)
  {
    OZRenderParams::getPixelTransform(this, (uint64_t)&v19);
    v5.f64[0] = *((float64_t *)this + 75);
    if (v5.f64[0] <= 0.0)
    {
      LODWORD(v5.f64[0]) = *((_DWORD *)this + 81);
      *(double *)&unint64_t v7 = (double)*(unint64_t *)&v5.f64[0];
      LODWORD(v5.f64[0]) = *((_DWORD *)this + 82);
      double v8 = (double)*(unint64_t *)&v5.f64[0];
      v6.f64[0] = 0.0;
      float64x2_t v5 = (float64x2_t)v7;
      v6.f64[1] = v8;
    }
    else
    {
      v6.f64[0] = *((float64_t *)this + 73);
      v5.f64[1] = *((float64_t *)this + 74);
      v6.f64[1] = *((float64_t *)this + 76);
    }
    float64x2_t v9 = *(float64x2_t *)((char *)this + 24);
    float64x2_t v10 = vmulq_f64(v5, v9);
    float64x2_t v11 = vmulq_f64(v6, v9);
    v9.f64[0] = v11.f64[0];
    v9.f64[1] = v10.f64[1];
    float64x2_t v4 = vaddq_f64(v10, v11);
    __asm { FMOV            V1.2D, #0.5 }
    float64x2_t v17 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
    *(int32x2_t *)&v9.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(v9, _Q1), v17))));
    *(int32x2_t *)&v4.f64[0] = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(v4, _Q1), v17)))), *(int32x2_t *)&v9.f64[0]);
    a2->f64[0] = v9.f64[0];
    a2->f64[1] = v4.f64[0];
  }
  else
  {
    float64x2_t v4 = *(float64x2_t *)((char *)this + 648);
    *a2 = v4;
  }
  return v4.f64[0];
}

uint64_t OZRenderParams::layoutElementAtSize(uint64_t a1, uint64_t a2, int *a3)
{
  double v41 = 0.0;
  double v42 = 0.0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v43 = _Q0;
  (*(void (**)(uint64_t, double *, uint64_t))(*(void *)a2 + 16))(a2, &v41, a1);
  double v10 = *(double *)&v43;
  if (*(double *)&v43 < 0.0) {
    return 0;
  }
  double v11 = *((double *)&v43 + 1);
  if (*((double *)&v43 + 1) < 0.0) {
    return 0;
  }
  uint64_t v12 = 0;
  int v13 = *a3;
  *(_DWORD *)(a1 + 324) = *a3;
  int v14 = a3[1];
  *(_DWORD *)(a1 + 328) = v14;
  *(void *)(a1 + 648) = 0;
  *(_DWORD *)(a1 + 656) = v13;
  *(_DWORD *)(a1 + 66OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v14;
  int v15 = a3[1];
  double v16 = (double)*a3 / v10;
  if (v16 > (double)v15 / v11) {
    double v16 = (double)v15 / v11;
  }
  *(double *)(a1 + 432) = v16;
  *(double *)(a1 + 44OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v16;
  *(double *)(a1 + 448) = v16;
  *(double *)(a1 + 456) = v16;
  *(double *)(a1 + 24) = v16;
  *(double *)(a1 + 32) = v16;
  *(_OWORD *)(a1 + 392) = 0uLL;
  *(_OWORD *)(a1 + 408) = 0uLL;
  double v17 = v41 - (v10 * 0.5 + v41);
  double v18 = v42 - (v11 * 0.5 + v42);
  double v19 = v16 * v17;
  double v20 = v16 * v18;
  double v21 = v10 * v16;
  double v22 = v11 * v16;
  double v23 = v19 + (double)v13 * 0.5 + 0.0;
  double v24 = v20 + (double)v14 * 0.5 + 0.0;
  *(double *)(a1 + 664) = v23;
  *(double *)(a1 + 672) = v24;
  *(double *)(a1 + 68OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v21;
  *(double *)(a1 + 688) = v22;
  uint64_t v31 = 0;
  long long v29 = 0uLL;
  uint64_t v33 = 0;
  long long v35 = 0uLL;
  uint64_t v39 = 0;
  uint64_t v40 = 0x3FF0000000000000;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  double v28 = v21 / v10;
  double v30 = v23 - v17 * v21 / v10;
  double v32 = v22 / v11;
  double v34 = v24 - v18 * v22 / v11;
  long long v36 = xmmword_1B7E733D0;
  do
  {
    float64x2_t v25 = (_OWORD *)(a1 + 808 + v12);
    long long v26 = *(long long *)((char *)&v29 + v12 + 8);
    _OWORD *v25 = *(_OWORD *)((char *)&v28 + v12);
    v25[1] = v26;
    v12 += 32;
  }
  while (v12 != 128);
  uint64_t result = 1;
  *(unsigned char *)(a1 + 936) = 1;
  return result;
}

double OZRenderParams::setImageAttr(uint64_t a1, uint64_t a2)
{
  PCImageAttributes::operator=(a1 + 320, a2);
  uint64_t v3 = *(void *)(a1 + 384);
  if (PGGetPerThreadContext() == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  *(void *)(a1 + 384) = v4;
  double result = 0.0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  return result;
}

PGContext *OZRenderParams::setImageContext(OZRenderParams *this, PGContext *a2)
{
  double result = (PGContext *)PGGetPerThreadContext();
  if (result == a2) {
    float64x2_t v5 = 0;
  }
  else {
    float64x2_t v5 = a2;
  }
  *((void *)this + 48) = v5;
  return result;
}

uint64_t OZRenderParams::getImageContext(OZRenderParams *this)
{
  uint64_t result = *((void *)this + 48);
  if (!result) {
    return PGGetPerThreadContext();
  }
  return result;
}

CGColorSpace **OZRenderParams::setWorkingColorDescription(CGColorSpace **this, const FxColorDescription *a2)
{
  uint64_t result = PCCFRef<CGColorSpace *>::operator=(this + 88, &a2->_pcColorDesc._colorSpaceRef._obj);
  float64x2_t v5 = *(CGColorSpace **)&a2->_pcColorDesc._dynamicRange;
  *((_DWORD *)this + 18OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = LODWORD(a2->_pcColorDesc._toneMapMethod._gain);
  this[89] = v5;
  *((unsigned char *)this + 728) = a2->_isPremultiplied;
  return result;
}

uint64_t OZRenderParams::getWorkingColorDescription(OZRenderParams *this)
{
  return (uint64_t)this + 704;
}

CGColorSpace **OZRenderParams::setWorkingColorDescriptionFromRenderNode(uint64_t a1, uint64_t a2, int a3)
{
  (*(void (**)(CGColorSpace **__return_ptr, uint64_t))(*(void *)a2 + 64))(v6, a2);
  FxColorDescription::FxColorDescription((uint64_t)v7, (uint64_t)v6, a3);
  PCCFRef<CGColorSpace *>::~PCCFRef(v6);
  PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)(a1 + 704), v7);
  *(CGColorSpace **)(a1 + 712) = v7[1];
  *(_DWORD *)(a1 + 72OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v8;
  *(unsigned char *)(a1 + 728) = v9;
  return PCCFRef<CGColorSpace *>::~PCCFRef(v7);
}

void sub_1B7C361F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t OZRenderParams::isDynamicRangeTrackingRender(FxColorDescription *this)
{
  uint64_t v1 = this + 22;
  if (FxColorDescription::isSDR(this + 22)) {
    return 1;
  }

  return FxColorDescription::isHDR(v1);
}

uint64_t OZRenderParams::setWorkingColorSpace(FxColorDescription *this, CGColorSpace *a2)
{
  return FxColorDescription::setCGColorSpace(this + 22, a2);
}

uint64_t OZRenderParams::getWorkingColorSpace(FxColorDescription *this)
{
  return FxColorDescription::getCGColorSpace(this + 22);
}

BOOL OZRenderParams::hasWorkingColorSpace(FxColorDescription *this)
{
  return FxColorDescription::getCGColorSpace(this + 22) != 0;
}

uint64_t OZRenderParams::getWorkingGamut(OZRenderParams *this)
{
  return *((unsigned int *)this + 194);
}

uint64_t OZRenderParams::wantsHLGToPQPostProcessingStep(OZRenderParams *this)
{
  return *((unsigned __int8 *)this + 780);
}

uint64_t OZRenderParams::setWorkingGamut(uint64_t result, int a2)
{
  *(_DWORD *)(result + 776) = a2;
  return result;
}

CGColorSpace **OZRenderParams::setOutputColorDescription(CGColorSpace **this, const FxColorDescription *a2)
{
  uint64_t result = PCCFRef<CGColorSpace *>::operator=(this + 93, &a2->_pcColorDesc._colorSpaceRef._obj);
  float64x2_t v5 = *(CGColorSpace **)&a2->_pcColorDesc._dynamicRange;
  *((_DWORD *)this + 19OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = LODWORD(a2->_pcColorDesc._toneMapMethod._gain);
  this[94] = v5;
  *((unsigned char *)this + 768) = a2->_isPremultiplied;
  return result;
}

char *OZRenderParams::getOutputColorDescription(OZRenderParams *this)
{
  char v2 = (char *)this + 744;
  if (FxColorDescription::getCGColorSpace((FxColorDescription *)((char *)this + 744))) {
    return v2;
  }
  else {
    return (char *)this + 704;
  }
}

uint64_t OZRenderParams::setRenderIsForHDR_Deprecated(uint64_t this, char a2)
{
  *(unsigned char *)(this + 80OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = a2;
  return this;
}

uint64_t OZRenderParams::isRenderForHDR_Deprecated(OZRenderParams *this)
{
  return *((unsigned __int8 *)this + 800);
}

uint64_t OZRenderParams::setStillImageInverseToneMapOperator_Deprecated(uint64_t result, int a2)
{
  *(_DWORD *)(result + 804) = a2;
  return result;
}

uint64_t OZRenderParams::getStillImageInverseToneMapOperator_Deprecated(OZRenderParams *this)
{
  return *((unsigned int *)this + 201);
}

uint64_t OZRenderParams::setBlendingGamma(uint64_t this, float a2)
{
  *(float *)(this + 736) = a2;
  return this;
}

float OZRenderParams::getBlendingGamma(OZRenderParams *this)
{
  return *((float *)this + 184);
}

double OZRenderParams::setState(OZRenderParams *this, const OZRenderState *a2)
{
  OZRenderState::operator=((uint64_t)this, (long long *)&a2->var0.var0);
  double var1 = a2->var1;
  double var2 = a2->var2;
  *((double *)this + 54) = var1;
  *((double *)this + 55) = var2;
  *((double *)this + 56) = var1;
  *((double *)this + 57) = var2;
  double result = 0.0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return result;
}

double OZRenderParams::setResolution(_OWORD *a1, _OWORD *a2)
{
  a1[27] = *a2;
  a1[28] = *a2;
  *(_OWORD *)((char *)a1 + 24) = *a2;
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 392) = 0u;
  *(_OWORD *)((char *)a1 + 408) = 0u;
  return result;
}

double OZRenderParams::setResolutionDynamic(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(_OWORD *)(a1 + 448) = *a2;
  if (*(unsigned char *)(a1 + 424))
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 448);
    *(void *)&long long v2 = 0;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_OWORD *)(a1 + 408) = 0u;
  }
  return *(double *)&v2;
}

double OZRenderParams::setRenderQuality(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 464) = a2;
  *(_DWORD *)(a1 + 468) = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  return result;
}

uint64_t OZRenderParams::getRenderQuality(OZRenderParams *this)
{
  uint64_t v1 = 468;
  if (!*((unsigned char *)this + 424)) {
    uint64_t v1 = 464;
  }
  return *(unsigned int *)((char *)this + v1);
}

double OZRenderParams::setTextRenderQuality(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 472) = a2;
  *(_DWORD *)(a1 + 476) = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  return result;
}

uint64_t OZRenderParams::getTextRenderQuality(OZRenderParams *this)
{
  uint64_t v1 = 476;
  if (!*((unsigned char *)this + 424)) {
    uint64_t v1 = 472;
  }
  return *(unsigned int *)((char *)this + v1);
}

double OZRenderParams::setDoHighQualityResampling(OZRenderParams *this, char a2)
{
  *((unsigned char *)this + 48OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = a2;
  *((unsigned char *)this + 48OZDocument::~OZDocument(this - 1) = a2;
  double result = 0.0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return result;
}

uint64_t OZRenderParams::getDoHighQualityResampling(OZRenderParams *this)
{
  uint64_t v1 = 480;
  if (*((unsigned char *)this + 424)) {
    uint64_t v1 = 481;
  }
  return *((unsigned __int8 *)this + v1);
}

double OZRenderParams::setDoShapeAntialiasing(OZRenderParams *this, char a2)
{
  *((unsigned char *)this + 482) = a2;
  *((unsigned char *)this + 483) = a2;
  double result = 0.0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return result;
}

uint64_t OZRenderParams::getDoShapeAntialiasing(OZRenderParams *this)
{
  uint64_t v1 = 482;
  if (*((unsigned char *)this + 424)) {
    uint64_t v1 = 483;
  }
  return *((unsigned __int8 *)this + v1);
}

double OZRenderParams::setDo3DIntersectionAntialiasing(OZRenderParams *this, char a2)
{
  *((unsigned char *)this + 484) = a2;
  *((unsigned char *)this + 485) = a2;
  double result = 0.0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return result;
}

uint64_t OZRenderParams::getDo3DIntersectionAntialiasing(OZRenderParams *this)
{
  uint64_t v1 = 484;
  if (*((unsigned char *)this + 424)) {
    uint64_t v1 = 485;
  }
  return *((unsigned __int8 *)this + v1);
}

BOOL OZRenderParams::getReducedResolutionMedia(OZRenderParams *this)
{
  return *((unsigned char *)this + 424) && *((unsigned char *)this + 486) != 0;
}

uint64_t OZRenderParams::setReducedResolutionOverride(uint64_t this, char a2)
{
  *(unsigned char *)(this + 487) = a2;
  return this;
}

BOOL OZRenderParams::getReducedResolutionOverride(OZRenderParams *this)
{
  return *((unsigned char *)this + 424) && *((unsigned char *)this + 487) != 0;
}

void OZRenderParams::setDestinationDevice(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 296);
  *(void *)(a1 + 288) = v3;
  *(void *)(a1 + 296) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void OZRenderParams::setRenderDevice(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 312);
  *(void *)(a1 + 304) = v3;
  *(void *)(a1 + 312) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *OZRenderParams::getRenderGPU@<X0>(OZRenderParams *this@<X0>, void *a2@<X8>)
{
  double result = (void *)*((void *)this + 38);
  if (result
  {
    uint64_t v5 = *((void *)this + 39);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void OZRenderParams::SharedInfo::~SharedInfo(OZRenderParams::SharedInfo *this)
{
  *(void *)this = &unk_1F1145378;
  *((void *)this + 1OZDocument::~OZDocument(this - 1) = &unk_1F11453A8;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 64, *((void **)this + 9));
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 32);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
  *((void *)this + 1OZDocument::~OZDocument(this - 1) = &unk_1F1199AC8;
  *((unsigned char *)this + 104) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 12);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F1145378;
  *((void *)this + 1OZDocument::~OZDocument(this - 1) = &unk_1F11453A8;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 64, *((void **)this + 9));
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 32);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
  *((void *)this + 1OZDocument::~OZDocument(this - 1) = &unk_1F1199AC8;
  *((unsigned char *)this + 104) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 12);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'OZRenderParams::SharedInfo::~SharedInfo(OZRenderParams::SharedInfo *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F1145378;
  *((void *)v1 + 1OZDocument::~OZDocument(this - 1) = &unk_1F11453A8;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v1 + 64), *((void **)v1 + 9));
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)(v1 + 32));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v1 + 8), *((void **)v1 + 2));
  *((void *)v1 + 1OZDocument::~OZDocument(this - 1) = &unk_1F1199AC8;
  v1[104] = 0;

  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 12);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F1145378;
  *((void *)v1 + 1OZDocument::~OZDocument(this - 1) = &unk_1F11453A8;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v1 + 64), *((void **)v1 + 9));
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)(v1 + 32));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)(v1 + 8), *((void **)v1 + 2));
  *((void *)v1 + 1OZDocument::~OZDocument(this - 1) = &unk_1F1199AC8;
  v1[104] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 12);

  JUMPOUT(0x1BA9BFBA0);
}

__n128 OZRotoshape::makeShapeRenderState@<Q0>(OZRotoshape *this@<X0>, const OZRenderState *a2@<X1>, CGColorSpaceRef space@<X2>, float a4@<S0>, uint64_t a5@<X8>)
{
  uint64_t v8 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)a5 = *MEMORY[0x1E4F1FA48];
  *(void *)(a5 + 16) = *(void *)(v8 + 16);
  *(_WORD *)(a5 + 24) = 0;
  *(unsigned char *)(a5 + 26) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a5 + 32) = _Q0;
  *(_DWORD *)(a5 + 48) = 2;
  *(void *)(a5 + 64) = 0;
  *(void *)(a5 + 72) = 0;
  *(void *)(a5 + 56) = 0;
  PCColorSpaceHandle::PCColorSpaceHandle((PCColorSpaceHandle *)(a5 + 80), space);
  *(float *)(a5 + 88) = a4;
  *(_OWORD *)a5 = *(_OWORD *)&a2->var0.var0;
  *(void *)(a5 + 16) = a2->var0.var3;
  *(unsigned char *)(a5 + 24) = a2->var10;
  *(unsigned char *)(a5 + 26) = a2->var16;
  __n128 result = *(__n128 *)&a2->var1;
  *(__n128 *)(a5 + 32) = result;
  *(_DWORD *)(a5 + 48) = 1;
  return result;
}

void OZRotoshapeRender::OZRotoshapeRender(OZRotoshapeRender *this, OZRotoshape *a2, const OZRenderParams *a3)
{
  *((void *)this + 184) = &unk_1F1199AC8;
  *((void *)this + 185) = 0;
  *((unsigned char *)this + 1488) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1F11454D8);
  *(void *)this = &unk_1F11453F0;
  *((void *)this + 184) = &unk_1F11454B8;
  *((void *)this + 2) = a2;
  OZRenderParams::OZRenderParams((OZRotoshapeRender *)((char *)this + 24), a3);
  *((void *)this + 18OZDocument::~OZDocument(this - 1) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 182);
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a3);
  float BlendingGamma = OZRenderParams::getBlendingGamma(a3);
  OZRotoshape::makeShapeRenderState(a2, (const OZRenderState *)a3, WorkingColorSpace, BlendingGamma, (uint64_t)v8);
  *((unsigned char *)this + 1464) = OZShape::shouldDrawOnlyParticles((uint64_t)a2 + 18976, v8);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v9);
  OZChannelBase::setRangeName((OZChannelBase *)a3, &v10);
  operator new();
}

void sub_1B7C36C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v8 - 72));
  PCSharedCount::~PCSharedCount(v7);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)va);
  OZRenderParams::~OZRenderParams((OZRenderParams *)va1);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x6C8]);
  std::__list_imp<unsigned int>::clear(&STACK[0x628]);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&STACK[0x718]);
  PCSharedCount::~PCSharedCount(v6);
  OZRenderParams::~OZRenderParams(v5);
  OZChannelBase::setRangeName((OZChannelBase *)v3, (const PCString *)&off_1F11454D8);
  *(void *)(v3 + 1472) = v4;
  *(unsigned char *)(v3 + 1488) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v3 + 1480));
  _Unwind_Resume(a1);
}

uint64_t OZRotoshapeRender::getBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 1464))
  {
    uint64_t v3 = *(void *)(a1 + 1448);
    if (!v3) {
      throw_PCNullPointerException(1);
    }
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 24);
    return v4();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 232))(*(void *)(a1 + 16), a3, a1 + 24);
    return 1;
  }
}

uint64_t OZRotoshapeRender::estimateRenderMemory(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 1464)) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 1448);
  if (!v1) {
    throw_PCNullPointerException(1);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 112);

  return v2();
}

uint64_t OZRotoshapeRender::pixelTransformSupport(OZRotoshapeRender *this, const LiRenderParameters *a2)
{
  if (*((unsigned char *)a2 + 144)) {
    return 0;
  }
  else {
    return 6;
  }
}

CGColorSpace **OZRotoshapeRender::getHelium@<X0>(OZRotoshapeRender *this@<X0>, LiAgent *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = (OZRotoshape *)*((void *)this + 2);
  float64x2_t v6 = (FxColorDescription *)((char *)this + 24);
  if (*((unsigned char *)this + 1464))
  {
    OZRotoshape::prepForGetHelium(*((OZRotoshape **)this + 2), a2, v6);
    uint64_t v8 = (LiImageSource *)*((void *)this + 181);
    if (!v8) {
      throw_PCNullPointerException(1);
    }
    return (CGColorSpace **)LiImageSource::getHeliumPublic(a3, v8, a2);
  }
  else
  {
    uint64_t DoShapeAntialiasing = OZRenderParams::getDoShapeAntialiasing((OZRotoshapeRender *)((char *)this + 24));
    return OZRotoshape::getHelium(v5, (const OZRenderState *)v6, a2, v6, DoShapeAntialiasing, (HGHWMultiBlend **)a3);
  }
}

CGColorSpace **OZRotoshape::prepForGetHelium(OZRotoshape *this, LiAgent *a2, FxColorDescription *a3)
{
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(a3);
  float BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)a3);
  OZRotoshape::makeShapeRenderState(this, (const OZRenderState *)a3, WorkingColorSpace, BlendingGamma, (uint64_t)v15);
  unint64_t v7 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v14, v7);
  PCString v11[2] = v15[2];
  void v11[3] = v15[3];
  void v11[4] = v15[4];
  v11[0] = v15[0];
  v11[1] = v15[1];
  CGColorSpaceRef v12 = space;
  if (space) {
    PCCFRefTraits<CGColorSpace *>::retain(space);
  }
  uint64_t v8 = (OZRotoshape *)((char *)this + 18976);
  int v13 = v17;
  CurrentRenderParams = (OZShapeRenderParams *)OZShape::getCurrentRenderParams((uint64_t)v8, (uint64_t)v11);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v12);
  OZMoShape::validateChannels(v8, (const CMTime *)v15, CurrentRenderParams, 0, 1);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v14);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&space);
}

void sub_1B7C37070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CGColorSpace *a33)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(v33);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a22);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a33);
  _Unwind_Resume(a1);
}

CGColorSpace **OZRotoshape::getHelium@<X0>(OZRotoshape *this@<X0>, const OZRenderState *a2@<X1>, LiAgent *a3@<X2>, FxColorDescription *a4@<X4>, uint64_t a5@<X3>, HGHWMultiBlend **a6@<X8>)
{
  __n128 result = OZRotoshape::_getHeliumInternal(this, a2, a3, a4, a5, a6);
  if (*a6)
  {
    PCColorDescription::PCColorDescription(&space._pcColorDesc);
    space._isPremultiplied = 1;
    if (LiAgent::isDynamicRangeTrackingRender((FxColorDescription **)a3))
    {
      uint64_t RequestedColorDescription = LiAgent::getRequestedColorDescription(a3);
      FxColorDescription::FxColorDescription((uint64_t)&v17, RequestedColorDescription, 0);
      double v11 = v17;
      if (space._pcColorDesc._colorSpaceRef._obj)
      {
        if (space._pcColorDesc._colorSpaceRef._obj != v17)
        {
          PCCFRefTraits<CGColorSpace *>::release(space._pcColorDesc._colorSpaceRef._obj);
          double v11 = v17;
        }
      }
      space._pcColorDesc._colorSpaceRef._obuint64_t j = v11;
      int v17 = 0;
      space._pcColorDesc._dynamicRange = v18;
      space._pcColorDesc._toneMapMethod = v19;
      space._isPremultiplied = v20;
      PCCFRef<CGColorSpace *>::~PCCFRef(&v17);
    }
    else
    {
      RequestedColorSpace = (CGColorSpace *)LiAgent::getRequestedColorSpace(a3);
      FxMakeLegacyColorDescription(RequestedColorSpace, 1, (uint64_t)&v17);
      int v13 = v17;
      if (space._pcColorDesc._colorSpaceRef._obj && space._pcColorDesc._colorSpaceRef._obj != v17)
      {
        PCCFRefTraits<CGColorSpace *>::release(space._pcColorDesc._colorSpaceRef._obj);
        int v13 = v17;
      }
      space._pcColorDesc._colorSpaceRef._obuint64_t j = v13;
      int v17 = 0;
      space._pcColorDesc._dynamicRange = v18;
      space._pcColorDesc._toneMapMethod = v19;
      space._isPremultiplied = v20;
      PCCFRef<CGColorSpace *>::~PCCFRef(&v17);
      if (OZRenderParams::isRenderForHDR_Deprecated((OZRenderParams *)a4))
      {
        WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(a4);
        FxApplySDRToHDR((uint64_t)a6, WorkingColorSpace, 1, (uint64_t *)&v17);
        uint64_t v15 = *a6;
        uint64_t v16 = v17;
        if (*a6 == v17)
        {
          if (v15) {
            (*(void (**)(HGHWMultiBlend *))(*(void *)v15 + 24))(v15);
          }
        }
        else
        {
          if (v15)
          {
            (*(void (**)(HGHWMultiBlend *))(*(void *)v15 + 24))(v15);
            uint64_t v16 = v17;
          }
          *a6 = v16;
        }
      }
    }
    LiAgent::setActualColorDescription((CGColorSpace **)a3, &space);
    return PCCFRef<CGColorSpace *>::~PCCFRef(&space._pcColorDesc._colorSpaceRef._obj);
  }
  return result;
}

void sub_1B7C3726C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a2) {
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  if (*v5) {
    (*(void (**)(void))(*(void *)*v5 + 24))(*v5);
  }
  _Unwind_Resume(a1);
}

void OZRotoshape::getBorderSize(OZRotoshape *this, const OZRenderState *a2, double *a3, double *a4)
{
  uint64_t v8 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::ReadSentry::ReadSentry((OZLockingGroup::ReadSentry *)v16, v8);
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v9);
  long long v9 = *(_OWORD *)&a2->var0.var0;
  int64_t var3 = a2->var0.var3;
  BOOL var10 = a2->var10;
  BOOL var16 = a2->var16;
  long long v13 = *(_OWORD *)&a2->var1;
  int v14 = 1;
  OZShape::getBorderSize((uint64_t)this + 18976, (uint64_t)&v9, a3, a4);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v15);
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)v16);
}

void sub_1B7C373C0(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)(v2 - 40));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZRotoshape::getBorderSize(OZRotoshape *this, const OZRenderState *a2, double *a3, double *a4)
{
}

CGColorSpace **OZRotoshape::setLithiumTransform(OZRotoshape *this, LiSceneObject *a2, OZRenderState *a3)
{
  OZElement::setLithiumTransform((OZElement *)((char *)this + 200), a2, a3);
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a3);
  float BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)a3);
  OZRotoshape::makeShapeRenderState(this, a3, WorkingColorSpace, BlendingGamma, (uint64_t)v20);
  BOOL shouldDrawOnlyParticles = OZShape::shouldDrawOnlyParticles((uint64_t)this + 18976, (CMTime *)v20);
  __n128 result = PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)v21);
  if (shouldDrawOnlyParticles)
  {
    long long v10 = *(_OWORD *)((char *)a2 + 88);
    v20[4] = *(_OWORD *)((char *)a2 + 72);
    v21[0] = v10;
    long long v11 = *(_OWORD *)((char *)a2 + 120);
    v21[1] = *(_OWORD *)((char *)a2 + 104);
    _OWORD v21[2] = v11;
    long long v12 = *(_OWORD *)((char *)a2 + 24);
    v20[0] = *(_OWORD *)((char *)a2 + 8);
    v20[1] = v12;
    long long v13 = *(_OWORD *)((char *)a2 + 56);
    _OWORD v20[2] = *(_OWORD *)((char *)a2 + 40);
    v20[3] = v13;
    (*(void (**)(void))(**((void **)this + 4732) + 1912))();
    long long v14 = *(_OWORD *)((char *)a2 + 88);
    void v19[4] = *(_OWORD *)((char *)a2 + 72);
    v19[5] = v14;
    long long v15 = *(_OWORD *)((char *)a2 + 120);
    v19[6] = *(_OWORD *)((char *)a2 + 104);
    v19[7] = v15;
    long long v16 = *(_OWORD *)((char *)a2 + 24);
    v19[0] = *(_OWORD *)((char *)a2 + 8);
    v19[1] = v16;
    long long v17 = *(_OWORD *)((char *)a2 + 56);
    _OWORD v19[2] = *(_OWORD *)((char *)a2 + 40);
    uint64_t v19[3] = v17;
    PCMatrix44Tmpl<double>::operator*((uint64_t)v20, v19, (uint64_t)v18);
    return (CGColorSpace **)(*(uint64_t (**)(LiSceneObject *, unsigned char *))(*(void *)a2 + 16))(a2, v18);
  }
  return result;
}

void sub_1B7C37564(_Unwind_Exception *exception_object)
{
}

CGColorSpace **non-virtual thunk to'OZRotoshape::setLithiumTransform(OZRotoshape *this, LiSceneObject *a2, OZRenderState *a3)
{
  return OZRotoshape::setLithiumTransform((OZRotoshape *)((char *)this - 200), a2, a3);
}

uint64_t OZRotoshape::isPrecomposed(OZRotoshape *this, const CMTime *a2)
{
  if ((*(uint64_t (**)(void))(*((void *)this + 860) + 496))()) {
    return 1;
  }
  uint64_t v4 = (char *)this + 200;
  if (((*(uint64_t (**)(char *))(*((void *)this + 25) + 416))((char *)this + 200) & 1) != 0
    || ((*(uint64_t (**)(char *))(*(void *)v4 + 1864))((char *)this + 200) & 1) != 0
    || ((*(uint64_t (**)(char *, const CMTime *))(*(void *)v4 + 1592))((char *)this + 200, a2) & 1) != 0
    || ((*(uint64_t (**)(OZRotoshape *))(*(void *)this + 384))(this) & 1) != 0
    || ((*(uint64_t (**)(OZRotoshape *))(*(void *)this + 392))(this) & 1) != 0)
  {
    return 1;
  }
  float64x2_t v6 = *(uint64_t (**)(OZRotoshape *))(*(void *)this + 400);

  return v6(this);
}

uint64_t non-virtual thunk to'OZRotoshape::isPrecomposed(OZRotoshape *this, const CMTime *a2)
{
  return OZRotoshape::isPrecomposed((OZRotoshape *)((char *)this - 200), a2);
}

uint64_t OZRotoshape::shouldPrecompose(OZRotoshape *this, OZRenderState *a2)
{
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&var0);
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a2->var0;
  BOOL var10 = a2->var10;
  BOOL var16 = a2->var16;
  long long v9 = *(_OWORD *)&a2->var1;
  int v10 = 1;
  if (OZShape::shouldDrawFillAndParticles((uint64_t)this + 18976, (CMTime *)&var0)
    || OZShape::shouldDrawOnlyParticles((uint64_t)this + 18976, (CMTime *)&var0)
    && ((*(uint64_t (**)(void))(**((void **)this + 4733) + 64))(*((void *)this + 4733)) & 1) != 0)
  {
    uint64_t v4 = (*(uint64_t (**)(OZRotoshape *, OZRenderState *))(*(void *)this + 104))(this, a2);
  }
  else
  {
    uint64_t v4 = 0;
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v11);
  return v4;
}

void sub_1B7C3786C(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

uint64_t OZRotoshape::areEffectsAppliedInScreenSpace(OZRotoshape *this)
{
  uint64_t result = *((void *)this + 4733);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

uint64_t non-virtual thunk to'OZRotoshape::areEffectsAppliedInScreenSpace(OZRotoshape *this)
{
  uint64_t result = *((void *)this + 3892);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

double OZRotoshape::castShadowMaxScale(OZRotoshape *this, const OZRenderParams *a2)
{
  long long v6 = *(_OWORD *)a2;
  uint64_t v7 = *((void *)a2 + 2);
  int v4 = (*(uint64_t (**)(OZRotoshape *, long long *))(*(void *)this + 104))(this, &v6);
  double result = 1.0;
  if (v4) {
    return OZElement::castShadowMaxScale((OZElement *)((char *)this + 200), a2);
  }
  return result;
}

double non-virtual thunk to'OZRotoshape::castShadowMaxScale(OZRotoshape *this, const OZRenderParams *a2)
{
  return OZRotoshape::castShadowMaxScale((OZRotoshape *)((char *)this - 200), a2);
}

uint64_t OZRotoshape::doesTransformFromLocalToScreenSpace(OZRotoshape *this, OZRenderState *a2)
{
  OZRenderState::OZRenderState(&v10, a2);
  if (OZRotoshape::shouldPrecompose(this, &v10)) {
    return 1;
  }
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace((FxColorDescription *)a2);
  float BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)a2);
  OZRotoshape::makeShapeRenderState(this, a2, WorkingColorSpace, BlendingGamma, (uint64_t)v8);
  BOOL shouldDrawOnlyParticles = OZShape::shouldDrawOnlyParticles((uint64_t)this + 18976, v8);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v9);
  if (shouldDrawOnlyParticles) {
    return (*(uint64_t (**)(void, OZRenderState *))(**((void **)this + 4732) + 2216))(*((void *)this + 4732), a2);
  }
  else {
    return OZElement::doesTransformFromLocalToScreenSpace((uint64_t)this + 200);
  }
}

void sub_1B7C37A58(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZRotoshape::doesTransformFromLocalToScreenSpace(OZRotoshape *this, OZRenderState *a2)
{
  return OZRotoshape::doesTransformFromLocalToScreenSpace((OZRotoshape *)((char *)this - 200), a2);
}

uint64_t OZRotoshape::setGeodeProperties3D(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  OZElement::setGeodeProperties3D(a1 + 200, a2, a3, a4);
  uint64_t v6 = *(void *)(a1 + 37864);
  if (v6)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 72))(v6);
    }
  }
  else
  {
    uint64_t result = 0;
  }
  a4[556] = result;
  return result;
}

uint64_t non-virtual thunk to'OZRotoshape::setGeodeProperties3D(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  return OZRotoshape::setGeodeProperties3D(a1 - 200, a2, a3, a4);
}

CGColorSpace **OZRotoshape::buildRenderGraph(OZRotoshape *this, FxColorDescription *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(a2);
  float BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)a2);
  OZRotoshape::makeShapeRenderState(this, (const OZRenderState *)a2, WorkingColorSpace, BlendingGamma, (uint64_t)v22);
  BOOL shouldDrawOnlyParticles = OZShape::shouldDrawOnlyParticles((uint64_t)this + 18976, v22);
  OZRenderState::OZRenderState(&v21, (const OZRenderState *)a2);
  int shouldPrecompose = OZRotoshape::shouldPrecompose(this, &v21);
  if (((shouldPrecompose | !shouldDrawOnlyParticles) & 1) == 0) {
    int shouldPrecompose = (*(uint64_t (**)(void))(**((void **)this + 4733) + 64))(*((void *)this + 4733));
  }
  if (shouldPrecompose) {
    LiGraphBuilder::partitionWorld((uint64_t)a3);
  }
  OZRenderGraphState::OZRenderGraphState((OZRenderGraphState *)v17, a4);
  LiGraphBuilder::getCurrentLocalToWorld(a3, (uint64_t)v16);
  for (uint64_t i = 0; i != 128; i += 32)
  {
    long long v13 = &v17[i];
    long long v14 = *(_OWORD *)&v16[i + 16];
    *((_OWORD *)v13 + 6) = *(_OWORD *)&v16[i];
    *((_OWORD *)v13 + 7) = v14;
  }
  if (shouldDrawOnlyParticles
    && (*(unsigned int (**)(void))(**((void **)this + 4733) + 64))(*((void *)this + 4733)))
  {
    char v19 = 0;
  }
  OZElement::buildRenderGraph((OZElement *)((char *)this + 200), (CMTime *)a2, a3, (const OZRenderGraphState *)v17);
  if (shouldPrecompose) {
    LiGraphBuilder::partitionWorld((uint64_t)a3);
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v20);
  std::__list_imp<unsigned int>::clear(v18);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v23);
}

void sub_1B7C37CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&a54);
  std::__list_imp<unsigned int>::clear(&a34);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v54 - 80));
  _Unwind_Resume(a1);
}

CGColorSpace **non-virtual thunk to'OZRotoshape::buildRenderGraph(OZRotoshape *this, FxColorDescription *a2, LiGraphBuilder *a3, const OZRenderGraphState *a4)
{
  return OZRotoshape::buildRenderGraph((OZRotoshape *)((char *)this - 200), a2, a3, a4);
}

{
  return OZRotoshape::buildRenderGraph((OZRotoshape *)((char *)this - 6728), a2, a3, a4);
}

void OZRotoshape::makeRenderImageSource(OZRotoshape *this, OZRenderState *a2, const OZRenderGraphState *a3)
{
  OZRenderState::OZRenderState(&v6, a2);
  if (OZRotoshape::shouldPrecompose(this, &v6))
  {
    OZChannelBase::setRangeName((OZChannelBase *)a2, &v5);
    operator new();
  }
  operator new();
}

void sub_1B7C38308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  PCSharedCount::~PCSharedCount(v7 + 1);
  PCSharedCount::~PCSharedCount(v9);
  PCSharedCount::~PCSharedCount(v8);
  Render360GroupAsEquirectSentry::~Render360GroupAsEquirectSentry((Render360GroupAsEquirectSentry *)va);
  PCSharedCount::~PCSharedCount(v6);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&STACK[0x368]);
  std::__list_imp<unsigned int>::clear(&STACK[0x2C8]);
  LiGraphBuilder::~LiGraphBuilder((LiGraphBuilder *)&STACK[0x3B8]);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZRotoshape::makeRenderImageSource(OZRotoshape *this, OZRenderState *a2, const OZRenderGraphState *a3)
{
}

{
  OZRotoshape::makeRenderImageSource((OZRotoshape *)((char *)this - 6728), a2, a3);
}

void OZRotoshape::getOriginalBounds(Li3DEngineScene *a1, long long *a2, uint64_t a3)
{
  CMTime time = *(CMTime *)a3;
  double Seconds = CMTimeGetSeconds(&time);
  long long v24 = 0uLL;
  double v22 = &unk_1F10AD590;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v25 = _Q1;
  if (OZValueCache<OZBoundsCacheItem>::find((uint64_t)a1 + 38128, (uint64_t)&v22, Seconds))
  {
    if (a2)
    {
      long long v11 = v25;
      *a2 = v24;
      a2[1] = v11;
    }
  }
  else
  {
    long long v12 = (OZLockingGroup *)Li3DEngineScene::sceneManager(a1);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v21, v12);
    OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v14);
    long long v14 = *(_OWORD *)a3;
    uint64_t v15 = *(void *)(a3 + 16);
    char v16 = *(unsigned char *)(a3 + 202);
    char v17 = *(unsigned char *)(a3 + 220);
    long long v18 = *(_OWORD *)(a3 + 24);
    int v19 = 1;
    OZMoShape::getOriginalBounds((uint64_t)a1 + 18976, (uint64_t)a2, &v14);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v20);
    if (a2)
    {
      long long v13 = a2[1];
      long long v24 = *a2;
      long long v25 = v13;
      OZValueCache<OZBoundsCacheItem>::add((uint64_t)a1 + 38128, (uint64_t)&v22);
    }
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v21);
  }
}

void sub_1B7C385DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZRotoshape::getOriginalBounds(uint64_t a1, long long *a2, uint64_t a3)
{
}

CGColorSpace **OZRotoshape::getUIBounds(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = a1 + 18976;
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v7);
  long long v7 = *a3;
  uint64_t v8 = *((void *)a3 + 2);
  char v9 = *((unsigned char *)a3 + 202);
  char v10 = *((unsigned char *)a3 + 220);
  long long v11 = *(long long *)((char *)a3 + 24);
  int v12 = 1;
  OZMoShape::getUIBounds(v5, a2, (uint64_t)&v7);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v13);
}

void sub_1B7C3869C(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

CGColorSpace **non-virtual thunk to'OZRotoshape::getUIBounds(uint64_t a1, uint64_t a2, long long *a3)
{
  return OZRotoshape::getUIBounds(a1 - 200, a2, a3);
}

CGColorSpace **OZRotoshape::getOriginalBoundsNoLock(uint64_t a1, float64x2_t *a2, long long *a3, uint64_t a4)
{
  uint64_t v7 = a1 + 18976;
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v9);
  long long v9 = *a3;
  uint64_t v10 = *((void *)a3 + 2);
  char v11 = *((unsigned char *)a3 + 202);
  char v12 = *((unsigned char *)a3 + 220);
  long long v13 = *(long long *)((char *)a3 + 24);
  int v14 = 1;
  OZMoShape::getShapeBounds(v7, a2, (uint64_t)&v9, a4);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v15);
}

void sub_1B7C38758(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

uint64_t OZRotoshape::getProjectedBounds(uint64_t a1, uint64_t a2, double *a3, uint64_t a4)
{
  uint64_t v8 = a1 + 18976;
  OZShapeRenderState::OZShapeRenderState((OZShapeRenderState *)&v13);
  CMTime v13 = *(CMTime *)a4;
  v14[0] = *(unsigned char *)(a4 + 202);
  void v14[2] = *(unsigned char *)(a4 + 220);
  *(_OWORD *)&unsigned char v14[8] = *(_OWORD *)(a4 + 24);
  LODWORD(v15) = 1;
  LODWORD(v8) = OZShape::shouldDrawOnlyParticles(v8, &v13);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v17);
  if (!v8) {
    return OZElement::getProjectedBounds((OZElement *)(a1 + 200), a2, a3, a4);
  }
  uint64_t v20 = 0x3FF0000000000000;
  uint64_t v17 = 0x3FF0000000000000;
  *(void *)&v14[16] = 0x3FF0000000000000;
  v13.int64_t value = 0x3FF0000000000000;
  *(_OWORD *)&v13.CMTimeScale timescale = 0u;
  *(_OWORD *)int v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v10 = *(void *)(a1 + 200);
  uint64_t v9 = a1 + 200;
  (*(void (**)(uint64_t, CMTime *, uint64_t))(v10 + 1256))(v9, &v13, a4);
  double v11 = PCMatrix44Tmpl<double>::leftMult((uint64_t)&v13, a3);
  return (*(uint64_t (**)(void, uint64_t, CMTime *, uint64_t, double))(**(void **)(v9 + 37664) + 56))(*(void *)(v9 + 37664), a2, &v13, a4, v11);
}

void sub_1B7C388D0(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZRotoshape::getProjectedBounds(uint64_t a1, uint64_t a2, double *a3, uint64_t a4)
{
  return OZRotoshape::getProjectedBounds(a1 - 200, a2, a3, a4);
}

double OZRotoshape::calcHashForState(uint64_t a1, void *lpsrc, uint64_t a3, uint64_t **a4, int a5)
{
  if (!v10) {
    __cxa_bad_cast();
  }
  (*(void (**)(void *, void))(*(void *)v10 + 56))(v10, *(unsigned int *)(a3 + 332));

  return OZSceneNode::calcHashForState(a1 + 200, lpsrc, (CMTime *)a3, a4, a5);
}

double non-virtual thunk to'OZRotoshape::calcHashForState(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4, int a5)
{
  return OZRotoshape::calcHashForState(a1 - 200, a2, a3, a4, a5);
}

double OZRotoshape::calcHashForStateSelfOnly(OZRotoshape *this, PCSerializerWriteStream *lpsrc, CMTime *a3)
{
  if (!v6) {
    __cxa_bad_cast();
  }
  uint64_t v7 = v6;
  CMTime v10 = *a3;
  (*(void (**)(char *, PCSerializerWriteStream *, CMTime *))(*((void *)this + 580) + 448))((char *)this + 4640, lpsrc, &v10);
  CMTime v10 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)((char *)this + 6752), lpsrc, &v10);
  CMTime v10 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)((char *)this + 1032), lpsrc, &v10);
  uint64_t v8 = *((void *)this + 88) & 0x8000;
  (*(void (**)(PCSerializerWriteStream *, void))(*(void *)lpsrc + 16))(lpsrc, 0);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)lpsrc + 72))(lpsrc, v8);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)lpsrc + 24))(lpsrc);
  CMTime v10 = *a3;
  OZMoShape::calcHashForState((OZRotoshape *)((char *)this + 18976), lpsrc, &v10);
  *(_OWORD *)&v10.int64_t value = *(_OWORD *)PCHashWriteStream::getHash(v7)->i8;
  *(void *)&double result = PCHashWriteStream::setHash((__n128 *)v7, (__n128 *)&v10).n128_u64[0];
  return result;
}

CGColorSpace **OZRotoshape::_getHeliumInternal@<X0>(OZRotoshape *this@<X0>, const OZRenderState *a2@<X1>, LiAgent *a3@<X2>, FxColorDescription *a4@<X4>, uint64_t a5@<X3>, HGHWMultiBlend **a6@<X8>)
{
  char v12 = (long long *)*((void *)a3 + 20);
  long long v13 = v12[3];
  long long v15 = *v12;
  long long v14 = v12[1];
  v55[2] = v12[2];
  v55[3] = v13;
  v55[0] = v15;
  v55[1] = v14;
  long long v16 = v12[7];
  long long v18 = v12[4];
  long long v17 = v12[5];
  v55[6] = v12[6];
  v55[7] = v16;
  v55[4] = v18;
  v55[5] = v17;
  uint64_t v54 = 0x3FF0000000000000;
  uint64_t v51 = 0x3FF0000000000000;
  uint64_t v48 = 0x3FF0000000000000;
  uint64_t v45 = 0x3FF0000000000000;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  LiAgent::getInversePixelTransform(a3, 0.0, (uint64_t)v34);
  for (uint64_t i = 0; i != 128; i += 32)
  {
    uint64_t v20 = (_OWORD *)((char *)&v45 + i);
    long long v21 = *(_OWORD *)&v34[i + 16];
    _OWORD *v20 = *(_OWORD *)&v34[i];
    v20[1] = v21;
  }
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(a4);
  float BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)a4);
  OZRotoshape::makeShapeRenderState(this, a2, WorkingColorSpace, BlendingGamma, (uint64_t)&v36);
  uint64_t HeliumRenderer = LiAgent::getHeliumRenderer((LiRenderParameters **)a3);
  BOOL v37 = *(_DWORD *)(*(void *)LiAgent::getRenderDevice((LiRenderParameters **)a3) + 8) == 0;
  double v42 = a3;
  long long v43 = a4;
  unsigned int RenderQuality = OZRenderParams::getRenderQuality((OZRenderParams *)a4);
  if (RenderQuality > 6) {
    int v25 = 2;
  }
  else {
    int v25 = *(_DWORD *)&asc_1B83817C0[4 * RenderQuality];
  }
  int v40 = v25;
  if (OZRenderParams::getReducedResolutionMedia((OZRenderParams *)a4)) {
    goto LABEL_7;
  }
  double v27 = v38;
  if (v38 > v39) {
    double v27 = v39;
  }
  float v28 = v27;
  if (v28 <= 0.3)
  {
    char v26 = 2;
    goto LABEL_15;
  }
  if (v28 < 1.0 && v28 > 0.3)
  {
LABEL_7:
    char v26 = 1;
LABEL_15:
    v40 <<= v26;
  }
  long long v29 = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(a4);
  LiAgent::setActualColorSpace(a3, v29);
  OZMoShape::getHelium((uint64_t)this + 18976, (uint64_t)&v36, (uint64_t)v55, (uint64_t)&v45, a5, &v35);
  if (v35)
  {
    *a6 = v35;
  }
  else
  {
    OZShapeRenderParams::OZShapeRenderParams((OZShapeRenderParams *)v34);
    double v30 = (OZLockingGroup *)Li3DEngineScene::sceneManager(this);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)&v33, v30);
    int HeliumParameters = OZShape::getHeliumParameters((uint64_t)this + 18976, (uint64_t)&v36, v55, (uint64_t)&v45, a5, (uint64_t)v34);
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&v33);
    if (HeliumParameters) {
      OZShape::getHeliumRender((uint64_t)this + 18976, &v36, (double *)v55, &v45, (uint64_t)v34, a6);
    }
    else {
      *a6 = 0;
    }
    OZShapeRenderParams::~OZShapeRenderParams((OZShapeRenderParams *)v34);
    if (v35) {
      (*(void (**)(HGBitmapLoader *))(*(void *)v35 + 24))(v35);
    }
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v44);
}

void sub_1B7C38E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  OZShapeRenderParams::~OZShapeRenderParams((OZShapeRenderParams *)va);
  if (STACK[0x538]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x538] + 24))(STACK[0x538]);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&STACK[0x590]);
  _Unwind_Resume(a1);
}

uint64_t OZRotoshape::reloadResources(OZRotoshape *this, PGContext *a2)
{
  return OZShape::reloadResources((OZRotoshape *)((char *)this + 18976));
}

uint64_t non-virtual thunk to'OZRotoshape::reloadResources(OZRotoshape *this, PGContext *a2)
{
  return OZShape::reloadResources((OZRotoshape *)((char *)this + 18776));
}

void OZRotoshape::buildLighting(OZRotoshape *this, LiGeode *a2, const LiLightSet *a3, FxColorDescription *a4)
{
  uint64_t v8 = (char *)this + 18976;
  WorkingColorSpace = (CGColorSpace *)OZRenderParams::getWorkingColorSpace(a4);
  float BlendingGamma = OZRenderParams::getBlendingGamma((OZRenderParams *)a4);
  OZRotoshape::makeShapeRenderState(this, (const OZRenderState *)a4, WorkingColorSpace, BlendingGamma, (uint64_t)v13);
  int shouldDrawParticles = OZShape::shouldDrawParticles((uint64_t)v8, v13);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v14);
  uint64_t v12 = *((void *)this + 4733);
  if (!v12 || (shouldDrawParticles & (*(unsigned int (**)(uint64_t))(*(void *)v12 + 64))(v12) & 1) == 0) {
    OZElement::buildLighting((OZElement *)((char *)this + 200), a2, a3, (const OZRenderParams *)a4);
  }
}

void sub_1B7C39014(_Unwind_Exception *a1)
{
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 80));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'OZRotoshape::buildLighting(OZRotoshape *this, LiGeode *a2, const LiLightSet *a3, FxColorDescription *a4)
{
}

void *OZRotoshape::buildMaterials@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double result = OZElement::buildMaterials((OZElement *)(a1 + 200), a2, a3, a4, a5);
  if (*(unsigned char *)(a5 + 101))
  {
    double result = (void *)OZRenderParams::getRenderQuality((OZRenderParams *)a2);
    *(unsigned char *)(a5 + 104) = result == 6;
  }
  return result;
}

void sub_1B7C39078(_Unwind_Exception *a1)
{
  LiMaterialProperties::~LiMaterialProperties(v1);
  _Unwind_Resume(a1);
}

void *non-virtual thunk to'OZRotoshape::buildMaterials@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return OZRotoshape::buildMaterials(a1 - 200, a2, a3, a4, a5);
}

uint64_t OZRotoshape::openMedia(OZRotoshape *this)
{
  return OZMoShape::openMedia((OZRotoshape *)((char *)this + 18976));
}

uint64_t non-virtual thunk to'OZRotoshape::openMedia(OZRotoshape *this)
{
  return OZMoShape::openMedia((OZRotoshape *)((char *)this + 18776));
}

uint64_t OZRotoshape::prerollBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  OZSceneNode::prerollBegin(a1 + 200, a2, a3, a4, a5);

  return OZMoShape::prerollBegin(a1 + 18976);
}

uint64_t non-virtual thunk to'OZRotoshape::prerollBegin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  OZSceneNode::prerollBegin(a1, a2, a3, a4, a5);

  return OZMoShape::prerollBegin(a1 + 18776);
}

uint64_t OZRotoshape::prerollEnd(OZRotoshape *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  OZSceneNode::prerollEnd((uint64_t)this + 200, (uint64_t)a2, (uint64_t)a3);

  return OZMoShape::prerollEnd((uint64_t)this + 18976);
}

uint64_t non-virtual thunk to'OZRotoshape::prerollEnd(OZRotoshape *this, const OZRenderParams *a2, PMFrameRequest *a3)
{
  OZSceneNode::prerollEnd((uint64_t)this, (uint64_t)a2, (uint64_t)a3);

  return OZMoShape::prerollEnd((uint64_t)this + 18776);
}

uint64_t OZRotoshape::setRate(OZRotoshape *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  OZSceneNode::setRate((uint64_t)this + 200, (uint64_t)a2, (uint64_t)a3, a4);

  return OZMoShape::setRate((uint64_t)this + 18976);
}

uint64_t non-virtual thunk to'OZRotoshape::setRate(OZRotoshape *this, const OZRenderParams *a2, PMFrameRequest *a3, double a4)
{
  OZSceneNode::setRate((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4);

  return OZMoShape::setRate((uint64_t)this + 18776);
}

uint64_t OZRotoshape::scheduleTokens(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4, uint64_t a5)
{
  memset(v11, 0, sizeof(v11));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v11, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)(a1 + 200) + 184))(a1 + 200, a2, v11, a4);
  OZSceneNode::scheduleTokens(a1 + 200, a2, (uint64_t)v11, a4, a5);
  uint64_t v9 = OZMoShape::scheduleTokens(a1 + 18976);
  uint64_t v12 = (void **)v11;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  return v9;
}

void sub_1B7C393F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZRotoshape::scheduleTokens(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4, uint64_t a5)
{
  return OZRotoshape::scheduleTokens(a1 - 200, a2, a3, a4, a5);
}

uint64_t OZRotoshape::hintTokensWillImage(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4)
{
  memset(v9, 0, sizeof(v9));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v9, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)(a1 + 200) + 184))(a1 + 200, a2, v9, a4);
  OZSceneNode::hintTokensWillImage(a1 + 200, a2, (uint64_t)v9, a4);
  uint64_t v7 = OZMoShape::hintTokensWillImage(a1 + 18976);
  CMTime v10 = (void **)v9;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  return v7;
}

void sub_1B7C394FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZRotoshape::hintTokensWillImage(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4)
{
  return OZRotoshape::hintTokensWillImage(a1 - 200, a2, a3, a4);
}

uint64_t OZRotoshape::getTokensImage(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4)
{
  memset(v9, 0, sizeof(v9));
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__init_with_size[abi:ne180100]<std::pair<CMTime,std::vector<CMTime>>*,std::pair<CMTime,std::vector<CMTime>>*>(v9, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)(a1 + 200) + 184))(a1 + 200, a2, v9, a4);
  OZSceneNode::getTokensImage(a1 + 200, a2, (uint64_t)v9, a4);
  uint64_t TokensImage = OZMoShape::getTokensImage(a1 + 18976);
  CMTime v10 = (void **)v9;
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  return TokensImage;
}

void sub_1B7C39604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::pair<CMTime,std::vector<CMTime>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZRotoshape::getTokensImage(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4)
{
  return OZRotoshape::getTokensImage(a1 - 200, a2, a3, a4);
}

uint64_t OZRotoshape::pruneTokensAtTime(OZRotoshape *this, CMTime *a2, const char *a3)
{
  CMTime v8 = *a2;
  OZSceneNode::pruneTokensAtTime((uint64_t)this + 200, &v8, a3);
  CMTime v7 = *a2;
  return OZMoShape::pruneTokensAtTime((OZRotoshape *)((char *)this + 18976), &v7, a3);
}

uint64_t non-virtual thunk to'OZRotoshape::pruneTokensAtTime(OZRotoshape *this, CMTime *a2, const char *a3)
{
  CMTime v8 = *a2;
  OZSceneNode::pruneTokensAtTime((uint64_t)this, &v8, a3);
  CMTime v7 = *a2;
  return OZMoShape::pruneTokensAtTime((OZRotoshape *)((char *)this + 18776), &v7, a3);
}

uint64_t OZRotoshape::pruneTokensExceptAtTime(OZRotoshape *this, CMTime *a2, const char *a3)
{
  CMTime v8 = *a2;
  OZSceneNode::pruneTokensExceptAtTime((uint64_t)this + 200, &v8, a3);
  CMTime v7 = *a2;
  return OZMoShape::pruneTokensExceptAtTime((OZRotoshape *)((char *)this + 18976), &v7, a3);
}

uint64_t non-virtual thunk to'OZRotoshape::pruneTokensExceptAtTime(OZRotoshape *this, CMTime *a2, const char *a3)
{
  CMTime v8 = *a2;
  OZSceneNode::pruneTokensExceptAtTime((uint64_t)this, &v8, a3);
  CMTime v7 = *a2;
  return OZMoShape::pruneTokensExceptAtTime((OZRotoshape *)((char *)this + 18776), &v7, a3);
}

uint64_t OZRotoshape::pruneAllTokens(OZRotoshape *this, const char *a2)
{
  OZSceneNode::pruneAllTokens((uint64_t)this + 200, a2);

  return OZMoShape::pruneAllTokens((OZRotoshape *)((char *)this + 18976), a2);
}

uint64_t non-virtual thunk to'OZRotoshape::pruneAllTokens(OZRotoshape *this, const char *a2)
{
  OZSceneNode::pruneAllTokens((uint64_t)this, a2);

  return OZMoShape::pruneAllTokens((OZRotoshape *)((char *)this + 18776), a2);
}

void OZRotoshapeRender::~OZRotoshapeRender(PCSharedCount *this)
{
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F11453F0;
  this[184].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F11454B8;
  PCSharedCount::~PCSharedCount(this + 182);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[3]);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F11454D8);
  this[184].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[186].varOZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  PCWeakCount::~PCWeakCount(&this[185].var0);
}

{
  uint64_t vars8;

  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F11453F0;
  this[184].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F11454B8;
  PCSharedCount::~PCSharedCount(this + 182);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&this[3]);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1F11454D8);
  this[184].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(this[186].varOZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  PCWeakCount::~PCWeakCount(&this[185].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void virtual thunk to'OZRotoshapeRender::~OZRotoshapeRender(OZRotoshapeRender *this)
{
  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F11453F0;
  v1[184].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F11454B8;
  PCSharedCount::~PCSharedCount(v1 + 182);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v1[3]);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F11454D8);
  v1[184].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[186].varOZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;

  PCWeakCount::~PCWeakCount(&v1[185].var0);
}

{
  PCSharedCount *v1;
  uint64_t vars8;

  uint64_t v1 = (PCSharedCount *)((char *)this + *(void *)(*(void *)this - 24));
  v1->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F11453F0;
  v1[184].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F11454B8;
  PCSharedCount::~PCSharedCount(v1 + 182);
  OZRenderParams::~OZRenderParams((OZRenderParams *)&v1[3]);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1F11454D8);
  v1[184].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1199AC8;
  LOBYTE(v1[186].varOZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  PCWeakCount::~PCWeakCount(&v1[185].var0);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelObjectRoot::OZChannelObjectRoot(OZChannelObjectRoot *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  OZChannelObjectRootBase::OZChannelObjectRootBase(this, a2, a3, a4, a5, a6);
  v7->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1145680;
  v7[2].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1145A18;
  v7[28].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&v7[28];
  v7[29].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&v7[28];
  v7[30].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
  PCSharedCount::PCSharedCount(v7 + 31);
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
}

void sub_1B7C39C1C(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelObjectRoot::OZChannelObjectRoot(OZChannelObjectRoot *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZChannelObjectRoot_Factory::getInstance(this);
  OZChannelObjectRootBase::OZChannelObjectRootBase(this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F1145680;
  *((void *)this + 2) = &unk_1F1145A18;
  *((void *)this + 28) = (char *)this + 224;
  *((void *)this + 29) = (char *)this + 224;
  *((void *)this + 3OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 31);
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
}

void sub_1B7C39CF0(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelObjectRoot_Factory::getInstance(OZChannelObjectRoot_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZChannelObjectRoot_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&OZChannelObjectRoot_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelObjectRoot_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelObjectRoot_Factory::_instance;
}

void OZChannelObjectRoot::OZChannelObjectRoot(OZChannelObjectRoot *this, const OZChannelObjectRoot *a2, OZChannelFolder *a3)
{
  OZChannelObjectRootBase::OZChannelObjectRootBase(this, a2, a3);
  v5->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1145680;
  v5[2].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1145A18;
  v5[28].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&v5[28];
  v5[29].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&v5[28];
  v5[30].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
  PCSharedCount::PCSharedCount(v5 + 31);
  *((void *)this + 26) = 0;
  if (*((void *)a2 + 27)) {
    operator new();
  }
  *((void *)this + 27) = 0;
}

void sub_1B7C39E44(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v4, 0x10A1C40A4A8B666);
  PCString::~PCString(v3);
  std::__list_imp<unsigned int>::clear(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelObjectRoot::OZChannelObjectRoot(OZChannelObjectRoot *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZChannelObjectRootBase::OZChannelObjectRootBase(this, a2, a3, a4);
  v5->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1145680;
  v5[2].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&unk_1F1145A18;
  v5[28].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&v5[28];
  v5[29].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (PC_Sp_counted_base *)&v5[28];
  v5[30].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
  PCSharedCount::PCSharedCount(v5 + 31);
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
}

void sub_1B7C39F18(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v2);
  OZChannelObjectRootBase::~OZChannelObjectRootBase(v1);
  _Unwind_Resume(a1);
}

void OZChannelObjectRoot::~OZChannelObjectRoot(PCString *this)
{
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)&unk_1F1145680;
  this[2].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)&unk_1F1145A18;
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = this[27].var0;
  if (var0) {
    (*((void (**)(__CFString *))var0->isa + 1))(var0);
  }
  this[27].$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = 0;
  PCString::~PCString(this + 31);
  std::__list_imp<unsigned int>::clear(&this[28].var0);

  OZChannelObjectRootBase::~OZChannelObjectRootBase((OZChannelObjectRootBase *)this);
}

{
  uint64_t vars8;

  OZChannelObjectRoot::~OZChannelObjectRoot(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZChannelObjectRoot::~OZChannelObjectRoot(PCString *this)
{
}

{
  uint64_t vars8;

  OZChannelObjectRoot::~OZChannelObjectRoot(this - 2);

  JUMPOUT(0x1BA9BFBA0);
}

void OZChannelObjectRoot::clone(OZChannelObjectRoot *this)
{
}

void sub_1B7C3A0B0(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4036B7AAD6);
  _Unwind_Resume(a1);
}

uint64_t OZChannelObjectRoot::compare(OZChannelObjectRoot *this, const OZChannelBase *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  if (result)
  {
    uint64_t v4 = result;
    if (*((void *)this + 26) == *(void *)(result + 208)
      && OZChannelObjectRootBase::compare(this, (const OZChannelBase *)result))
    {
      uint64_t v5 = (void *)*((void *)this + 27);
      uint64_t v6 = *(void *)(v4 + 216);
      if (v5)
      {
        if (v6 && v5[3] == *(void *)(v6 + 24))
        {
          CMTime v7 = (void *)v5[1];
          CMTime v8 = v5 + 2;
          if (v7 != v5 + 2)
          {
            uint64_t v9 = *(void **)(v6 + 8);
            while (OZTimeMarker::operator==((uint64_t)(v7 + 4), (uint64_t)(v9 + 4)))
            {
              CMTime v10 = (void *)v7[1];
              double v11 = v7;
              if (v10)
              {
                do
                {
                  CMTime v7 = v10;
                  CMTime v10 = (void *)*v10;
                }
                while (v10);
              }
              else
              {
                do
                {
                  CMTime v7 = (void *)v11[2];
                  BOOL v12 = *v7 == (void)v11;
                  double v11 = v7;
                }
                while (!v12);
              }
              long long v13 = (void *)v9[1];
              if (v13)
              {
                do
                {
                  long long v14 = v13;
                  long long v13 = (void *)*v13;
                }
                while (v13);
              }
              else
              {
                do
                {
                  long long v14 = (void *)v9[2];
                  BOOL v12 = *v14 == (void)v9;
                  uint64_t v9 = v14;
                }
                while (!v12);
              }
              uint64_t result = 1;
              uint64_t v9 = v14;
              if (v7 == v8) {
                return result;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      else if (!v6)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void OZChannelObjectRoot::copy(OZChannelObjectRoot *this, const OZChannelBase *a2)
{
  OZChannelObjectRootBase::copy(this, a2);
  if (a2)
  {
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *((void *)this + 27);
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      *((void *)this + 27) = 0;
      if (v5[27]) {
        operator new();
      }
      *((void *)this + 27) = 0;
    }
  }
}

void sub_1B7C3A328(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

uint64_t OZChannelObjectRoot::recomputeTimeRangeFromChildren(OZChannelBase *this, int a2, int a3, char a4, BOOL a5, BOOL a6)
{
  uint64_t ObjectManipulator = (const void *)OZChannelBase::getObjectManipulator(this);
  if (ObjectManipulator) {
  else
  }
    BOOL v13 = 1;
  if ((OZChannelBase::isLocked(this, 1) & 1) == 0
    && !OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x10000)
    && !OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x40000))
  {
    $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = this[1].var0;
    if (var0)
    {
      long long v16 = (const void **)*var0;
      long long v15 = (const void **)var0[1];
      if (*var0 != v15)
      {
        *(_OWORD *)&v24.int64_t value = *MEMORY[0x1E4F1FA10];
        v24.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA10] + 16);
        do
        {
          if (*v16)
          {
            if (v17)
            {
              long long v18 = v17;
              if (a2) {
                OZChannelObjectRoot::recomputeTimeRangeFromChildren(v17, 1, 0, v13 & a4, a5, a6);
              }
              long long v22 = *((_OWORD *)v18 + 8);
              CMTimeEpoch v23 = *((void *)v18 + 18);
              CMTime time1 = v24;
              CMTime time2 = *(CMTime *)((char *)v18 + 128);
              if (CMTimeCompare(&time1, &time2) >= 1)
              {
                *(_OWORD *)&v24.int64_t value = v22;
                v24.CMTimeEpoch epoch = v23;
              }
            }
          }
          ++v16;
        }
        while (v16 != v15);
      }
    }
  }
  if (a3)
  {
    var6 = this->var6;
    if (var6)
    {
      if (v20) {
        OZChannelObjectRoot::recomputeTimeRangeFromChildren(v20, 0, 1, 0, a5, a6);
      }
    }
  }
  return 0;
}

uint64_t OZChannelObjectRoot::resetTimeIndependentFlagIfNeeded(OZChannelObjectRoot *this, int a2, int a3)
{
  uint64_t result = OZChannelBase::isLocked((OZChannelBase *)this, 1);
  if (result) {
    return result;
  }
  if (!a3) {
    goto LABEL_5;
  }
  uint64_t v7 = *((void *)this + 6);
  if (v7)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v7 + 704))(v7, 0, 1);
LABEL_5:
    if (!a2) {
      return result;
    }
  }
  CMTime v8 = (const void ***)*((void *)this + 14);
  if (!v8 || (v9 = *v8, CMTime v10 = v8[1], *v8 == v10))
  {
    uint64_t result = OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x10000);
    if (result)
    {
      return (uint64_t)OZChannelFolder::resetFoldFlag((OZChannelFolder *)this, 0x10000);
    }
  }
  else
  {
    char v11 = 0;
    CMTime v19 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
    CMTime v18 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
    BOOL v12 = (CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      if (*v9)
      {
        if (v13)
        {
          (*(void (**)(void *, uint64_t, void))(*(void *)v13 + 704))(v13, 1, 0);
          if (*v9)
          {
            if (v14)
            {
              if ((v14[56] & 2) == 0)
              {
                (*(void (**)(CMTime *__return_ptr))(*(void *)v14 + 712))(&v16);
                CMTime time1 = v17;
                CMTime time2 = *v12;
                if (CMTimeCompare(&time1, &time2) >= 1)
                {
                  CMTime time2 = v16;
                  CMTime time1 = v19;
                  if (CMTimeCompare(&time1, &time2) >= 1) {
                    CMTime v19 = v16;
                  }
                  CMTime time1 = v16;
                  CMTime time2 = v17;
                  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v15);
                  CMTime time1 = v18;
                  CMTime time2 = v15;
                  if (CMTimeCompare(&time1, &time2) < 0)
                  {
                    CMTime time1 = v16;
                    CMTime time2 = v17;
                    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v18);
                  }
                  char v11 = 1;
                }
              }
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v10);
    if ((v11 & 1) == 0) {
      goto LABEL_24;
    }
    CMTime v16 = *(CMTime *)((char *)this + 152);
    CMTime time1 = v19;
    uint64_t result = CMTimeCompare(&v16, &time1);
    if (!result)
    {
      CMTime v16 = *(CMTime *)((char *)this + 152);
      CMTime time1 = *(CMTime *)((char *)this + 176);
      PC_CMTimeSaferAdd(&v16, &time1, (uint64_t)&time2);
      CMTime v16 = time2;
      CMTime time1 = v18;
      uint64_t result = CMTimeCompare(&v16, &time1);
      if (!result)
      {
LABEL_24:
        uint64_t result = OZChannelFolder::testFoldFlag((OZChannelFolder *)this, 0x10000);
        if (result) {
          return (uint64_t)OZChannelFolder::resetFoldFlag((OZChannelFolder *)this, 0x10000);
        }
      }
    }
  }
  return result;
}

uint64_t OZChannelObjectRoot::setTimeMarkers(void *a1, uint64_t a2)
{
  (*(void (**)(void *, uint64_t))(*a1 + 464))(a1, 1);
  uint64_t result = a1[27];
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  a1[27] = a2;
  return result;
}

void *OZChannelObjectRoot::addBehavior(void *a1, uint64_t a2)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v5 = a1[28];
  a1 += 28;
  result[1] = a1;
  result[2] = a2;
  *uint64_t result = v5;
  *(void *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

void *OZChannelObjectRoot::insertBehaviorAfter(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 28;
  if (a3)
  {
    for (uint64_t i = (uint64_t *)a1[29]; i != v5; uint64_t i = (uint64_t *)i[1])
    {
      if (i[2] == a3)
      {
        if (v5 != i) {
          uint64_t v5 = (uint64_t *)i[1];
        }
        break;
      }
    }
    uint64_t result = operator new(0x18uLL);
    result[2] = a2;
    uint64_t v9 = *v5;
    *(void *)(v9 + 8) = result;
    *uint64_t result = v9;
    uint64_t *v5 = (uint64_t)result;
    result[1] = v5;
  }
  else
  {
    uint64_t result = operator new(0x18uLL);
    result[1] = v5;
    result[2] = a2;
    uint64_t v8 = *v5;
    *uint64_t result = *v5;
    *(void *)(v8 + 8) = result;
    uint64_t *v5 = (uint64_t)result;
  }
  ++a1[30];
  return result;
}

void OZChannelObjectRoot::removeBehavior(void *a1, uint64_t a2)
{
  char v2 = a1 + 28;
  for (uint64_t i = (uint64_t *)a1[29]; i != v2; uint64_t i = (uint64_t *)i[1])
  {
    if (i[2] == a2)
    {
      if (v2 != i)
      {
        uint64_t v4 = *i;
        *(void *)(v4 + 8) = i[1];
        *(void *)i[1] = v4;
        --a1[30];
        operator delete(i);
      }
      return;
    }
  }
}

void OZChannelObjectRoot::renumberIDs(OZChannelBase *a1, uint64_t **a2, int a3)
{
  v11[0] = 0;
  v11[1] = 0;
  CMTime v10 = v11;
  unsigned int var3 = a1->var3;
  unsigned int v9 = var3;
  if (a2) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = (uint64_t **)&v10;
  }
  if (var3 >> 4 > 0x270)
  {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(a1);
    OZChannelBase::setID(a1, NextUniqueID);
    unsigned int v8 = a1->var3;
    BOOL v12 = &v9;
    *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v6, &v9, (uint64_t)&std::piecewise_construct, &v12)+ 8) = v8;
  }
  enumerateIDs(v6, a1);
  if (a3) {
    updateReferenceIDsRecursive(v6, (uint64_t)a1);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v10, v11[0]);
}

void sub_1B7C3AC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t **enumerateIDs(uint64_t **result, OZChannelBase *a2)
{
  $3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a2[1].var0;
  if (var0)
  {
    uint64_t v3 = result;
    uint64_t result = (uint64_t **)OZChannelBase::getObjectManipulator(a2);
    uint64_t v4 = (OZChannelBase **)*var0;
    if (*var0 != var0[1])
    {
      uint64_t v5 = result;
      do
      {
        uint64_t v6 = *v4;
        unsigned int var3 = (*v4)->var3;
        unsigned int v10 = var3;
        if (!v5 && var3 >> 4 > 0x270) {
          goto LABEL_8;
        }
        if (!v5) {
          goto LABEL_10;
        }
        uint64_t result = (uint64_t **)((uint64_t (*)(uint64_t **, OZChannelBase *))(*v5)[44])(v5, v6);
        uint64_t v6 = *v4;
        if (result)
        {
LABEL_8:
          unsigned int NextUniqueID = OZChannelBase::getNextUniqueID((OZChannelBase *)result);
          OZChannelBase::setID(v6, NextUniqueID);
          unsigned int v9 = (*v4)->var3;
          char v11 = &v10;
          uint64_t result = (uint64_t **)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v3, &v10, (uint64_t)&std::piecewise_construct, &v11);
          *((_DWORD *)result + 8) = v9;
          uint64_t v6 = *v4;
        }
        if (v6)
        {
LABEL_10:
          if (result) {
            uint64_t result = (uint64_t **)enumerateIDs(v3, result);
          }
        }
        ++v4;
      }
      while (v4 != var0[1]);
    }
  }
  return result;
}

void *updateReferenceIDsRecursive(void *result, uint64_t a2)
{
  char v2 = *(void ****)(a2 + 112);
  if (v2)
  {
    uint64_t v3 = *v2;
    if (*v2 != v2[1])
    {
      uint64_t v4 = result;
      uint64_t v5 = result + 1;
      do
      {
        uint64_t result = *v3;
        if (*v3)
        {
          if (v6)
          {
            uint64_t v7 = (OZChannel *)v6;
            uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(v6);
            if (ObjectManipulator)
            {
              int v9 = 0;
              if ((*(unsigned int (**)(uint64_t, void))(*(void *)ObjectManipulator + 56))(ObjectManipulator, 0))
              {
                (*((void (**)(OZChannel *, void, void))v7->var0 + 12))(v7, 0, 0);
                int v9 = 1;
              }
            }
            else
            {
              int v9 = 0;
            }
            unsigned int ObjectID = OZChanObjectManipRef::getObjectID(v7);
            uint64_t v12 = *v5;
            if (*v5)
            {
              BOOL v13 = v5;
              do
              {
                unsigned int v14 = *(_DWORD *)(v12 + 28);
                BOOL v15 = v14 >= ObjectID;
                if (v14 >= ObjectID) {
                  CMTime v16 = (uint64_t *)v12;
                }
                else {
                  CMTime v16 = (uint64_t *)(v12 + 8);
                }
                if (v15) {
                  BOOL v13 = (void *)v12;
                }
                uint64_t v12 = *v16;
              }
              while (*v16);
              if (v13 != v5 && ObjectID >= *((_DWORD *)v13 + 7))
              {
                LODWORD(v1OZDocument::~OZDocument(this - 1) = *((_DWORD *)v13 + 8);
                (*((void (**)(OZChannel *, void, void, double))v7->var0 + 89))(v7, MEMORY[0x1E4F1FA48], 0, (double)v11);
              }
            }
            if (v9) {
              (*((void (**)(OZChannel *, uint64_t, void))v7->var0 + 12))(v7, 1, 0);
            }
          }
          uint64_t result = *v3;
          if (*v3)
          {
            if (result)
            {
              CMTime v17 = result;
              if (v18)
              {
                uint64_t v19 = OZChannelBase::getObjectManipulator(v18);
                uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v19 + 360))(v19, v4);
              }
              else
              {
                uint64_t result = (void *)updateReferenceIDsRecursive(v4, v17);
              }
            }
          }
        }
        ++v3;
      }
      while (v3 != v2[1]);
    }
  }
  return result;
}

void *OZChannelObjectRoot::updateReferenceIDs(void *result, void *a2)
{
  if (a2) {
    return updateReferenceIDsRecursive(a2, (uint64_t)result);
  }
  return result;
}

void *OZChannelObjectRoot::findNodeRefDescendant(OZChannelObjectRoot *this, OZSceneNode *a2, OZChannelFolder *a3)
{
  uint64_t v3 = (const void ***)*((void *)a3 + 14);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 == v5) {
    return 0;
  }
  if (a2) {
    unsigned int v8 = (char *)a2 + 16;
  }
  else {
    unsigned int v8 = 0;
  }
  while (1)
  {
    int v9 = *v4;
    if (*v4)
    {
      if (!v10) {
        goto LABEL_18;
      }
      unint64_t v11 = v10;
      if ((*(uint64_t (**)(void *, char *))(*(void *)v10 + 872))(v10, v8)) {
        return v11;
      }
      int v9 = *v4;
      if (*v4)
      {
LABEL_18:
        if (v12)
        {
          uint64_t NodeRefDescendant = OZChannelObjectRoot::findNodeRefDescendant(this, a2, v12);
          if (NodeRefDescendant) {
            return (void *)NodeRefDescendant;
          }
        }
      }
    }
    if (++v4 == v5) {
      return 0;
    }
  }
}

OZChannelBehavior *OZChannelObjectRoot::rootUndoWillReplace(OZChannelObjectRoot *this, OZChannelBase *a2)
{
  uint64_t result = OZChannelBehavior::GetSceneNodeFromChan((OZChannelBehavior *)a2, a2);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 888);
    return (OZChannelBehavior *)v3();
  }
  return result;
}

OZChannelBehavior *OZChannelObjectRoot::rootUndoDidReplace(OZChannelObjectRoot *this, OZChannelBase *a2)
{
  uint64_t result = OZChannelBehavior::GetSceneNodeFromChan((OZChannelBehavior *)a2, a2);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 896);
    return (OZChannelBehavior *)v3();
  }
  return result;
}

void OZChannelObjectRoot::willModifyChannel(OZChannelObjectRoot *this, OZChannelBase *a2, int a3)
{
  uint64_t v5 = (*(uint64_t (**)(OZChannelObjectRoot *))(*(void *)this + 840))(this);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 264))(v5);
    if (v7)
    {
      unsigned int v8 = (OZDocument **)v7;
      if (!*(unsigned char *)(v7 + 1576))
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 424))(v6);
        OZScene::willModifyChannel(v8, a2, a3);
      }
    }
  }
}

uint64_t OZChannelObjectRoot::checkSolo(OZChannelBase *this)
{
  uint64_t result = OZChannelBase::getObjectManipulator(this);
  if (result)
  {
    char v2 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)result + 264))(result);
    return v2 && OZScene::testFlag(v2, 32);
  }
  return result;
}

uint64_t OZChannelObjectRoot::shouldAddKeypointAt0(OZChannelObjectRoot *this, const CMTime *a2)
{
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)this);
  CMTime time1 = *(CMTime *)((char *)this + 152);
  CMTime v8 = *a2;
  int32_t v5 = CMTimeCompare(&time1, &v8);
  uint64_t result = 0;
  if (v5 && ObjectManipulator)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator);
    if (result)
    {
      uint64_t v7 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator);
      return !OZScene::testFlag(v7, 128);
    }
  }
  return result;
}

uint64_t OZChannelObjectRoot::isChannelAffectedByBehaviors(OZChannelObjectRoot *this, OZChannelBase *a2, OZChannelBase *a3)
{
  return OZBehavior::IsChannelAffectedByBehaviors((OZBehavior *)a2, a3);
}

uint64_t OZChannelObjectRoot::isChannelAffectedBySelectedBehaviors(OZChannelObjectRoot *this, OZChannelBase *a2)
{
  uint64_t v7 = (uint64_t)&v7;
  CMTime v8 = &v7;
  uint64_t v9 = 0;
  OZBehavior::GetBehaviorsAffectingChannel(a2, &v7, 1);
  uint64_t v2 = 0;
  uint64_t v3 = v8;
  if (v9 && v8 != &v7)
  {
    do
    {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3[2] + 480))(v3[2]);
      uint64_t v2 = v4;
      uint64_t v3 = (uint64_t *)v3[1];
      if (v3 == &v7) {
        char v5 = 1;
      }
      else {
        char v5 = v4;
      }
    }
    while ((v5 & 1) == 0);
  }
  std::__list_imp<unsigned int>::clear(&v7);
  return v2;
}

void sub_1B7C3B630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelObjectRoot::isChannelRigged(OZChannelObjectRoot *this, OZChannelBase *a2)
{
  return OZRigWidget::IsChannelRigged((OZRigWidget *)a2, a2);
}

BOOL OZChannelObjectRoot::isObjectSelected(OZChannelBase *this)
{
  uint64_t ObjectManipulator = (void *)OZChannelBase::getObjectManipulator(this);
  if (ObjectManipulator {
    && (uint64_t v3 = ObjectManipulator,
  }
        uint64_t v4 = *ObjectManipulator,
  {
    uint64_t v5 = (*(uint64_t (**)(void *))(v4 + 232))(v3);
    uint64_t v6 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 640))(v5);
    return OZChannelBase::testFlag(v6, 1);
  }
  else
  {
    return OZChannelObjectRootBase::isObjectSelected(this);
  }
}

uint64_t OZChannelObjectRoot::getDefaultParameterColorSpaceID(OZChannelBase *this)
{
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (!ObjectManipulator) {
    return 3;
  }
  uint64_t v2 = ObjectManipulator;
  if (!(*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator)) {
    return 3;
  }
  uint64_t v3 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 264))(v2);
  OZScene::getComputedWorkingGamut(v3);

  return PCGetUIColorSpaceID();
}

uint64_t OZChannelObjectRoot::getWorkingGamut(OZChannelBase *this)
{
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (!ObjectManipulator) {
    return 0;
  }
  uint64_t v2 = ObjectManipulator;
  if (!(*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator)) {
    return 0;
  }
  uint64_t v3 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 264))(v2);

  return OZScene::getComputedWorkingGamut(v3);
}

void OZChannelObjectRoot::getFrameDuration(OZChannelBase *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (ObjectManipulator
    && (uint64_t v4 = ObjectManipulator,
        (*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator)))
  {
    uint64_t v5 = (OZSceneSettings *)((*(uint64_t (**)(uint64_t))(*(void *)v4 + 264))(v4) + 336);
    OZSceneSettings::getFrameDuration(v5, a2);
  }
  else
  {
    CMTimeMake((CMTime *)a2, 1, 30);
  }
}

double OZChannelObjectRoot::adjustToFrameDuration(OZChannelObjectRoot *this, const CMTime *a2)
{
  double result = OZChannelObjectRootBase::adjustToFrameDuration(this, a2);
  if (*((void *)this + 27)) {
    operator new();
  }
  return result;
}

void sub_1B7C3BABC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

void OZChannelObjectRoot::getCurrentTime(OZChannelBase *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)a3 = *MEMORY[0x1E4F1FA48];
  *(void *)(a3 + 16) = *(void *)(v6 + 16);
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (ObjectManipulator)
  {
    uint64_t v8 = ObjectManipulator;
    if ((*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator))
    {
      uint64_t v9 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 264))(v8);
      __n128 CurrentTime = OZScene::getCurrentTime(v9, &v14);
      if (a2)
      {
        *(__n128 *)a3 = v14;
        uint64_t v11 = v15;
      }
      else
      {
        (*((void (**)(long long *__return_ptr, OZChannelBase *, __n128 *, __n128))this->var0 + 41))(&v12, this, &v14, CurrentTime);
        *(_OWORD *)a3 = v12;
        uint64_t v11 = v13;
      }
      *(void *)(a3 + 16) = v11;
    }
  }
}

__n128 OZChannelObjectRoot::getGlobalTimeRange@<Q0>(OZChannelBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1E4F1FA48];
  long long v4 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
  uint64_t v5 = *(void *)(v3 + 16);
  *(void *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(void *)(a2 + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = v5;
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  if (ObjectManipulator)
  {
    uint64_t v8 = ObjectManipulator;
    if ((*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator))
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 264))(v8);
      if (v9 + 1352 != a2)
      {
        long long v10 = *(_OWORD *)(v9 + 1352);
        *(void *)(a2 + 16) = *(void *)(v9 + 1368);
        *(_OWORD *)a2 = v10;
        __n128 result = *(__n128 *)(v9 + 1376);
        *(void *)(a2 + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *(void *)(v9 + 1392);
        *(__n128 *)(a2 + 24) = result;
      }
    }
  }
  return result;
}

uint64_t OZChannelObjectRoot::wasChannelModified(OZChannelBase *this, OZChannelBase *a2, BOOL *a3)
{
  uint64_t v23 = (uint64_t)&v23;
  CMTime v24 = &v23;
  uint64_t v25 = 0;
  if (a3) {
    *a3 = 0;
  }
  uint64_t ObjectManipulator = OZChannelBase::getObjectManipulator(this);
  uint64_t v6 = ObjectManipulator;
  if (!ObjectManipulator) {
    goto LABEL_25;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(void *)ObjectManipulator + 264))(ObjectManipulator)) {
    goto LABEL_25;
  }
  uint64_t v7 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v6 + 264))(v6) + 1584);
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v8 = *(OZNotificationManager **)(v7 + 168);
  uint64_t v9 = (uint64_t *)(v7 + 296);
  if (v8) {
    long long v10 = (uint64_t *)((char *)v8 + 48);
  }
  else {
    long long v10 = v9;
  }
  if (v8 && OZNotificationManager::wasChannelModified(v8, a2))
  {
    uint64_t v11 = 1;
    goto LABEL_26;
  }
  if (!OZChannel::isChannelAffectedByBehaviors((OZChannel *)a2, 1)) {
    goto LABEL_25;
  }
  std::__list_imp<unsigned int>::clear(&v23);
  OZBehavior::GetBehaviorsAffectingChannel(a2, &v23, 1);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 264))(v6) + 920;
  do
  {
    uint64_t v13 = (OZChannelBase *)v12;
    uint64_t v12 = *(void *)(v12 + 48);
  }
  while (v12);
  uint64_t v14 = *v10;
  if (v10[1] == *v10)
  {
LABEL_25:
    uint64_t v11 = 0;
    goto LABEL_26;
  }
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  while (1)
  {
    Channel = OZChannelRef::getChannel((OZChannelRef *)(v14 + 24 * v15), v13);
    ChannelRootBase = (OZChannelBase *)OZChannelBase::getChannelRootBase(Channel);
    uint64_t v19 = (const void *)OZChannelBase::getObjectManipulator(ChannelRootBase);
    if (v19)
    {
      long long v21 = v24;
      if (v20)
      {
        if (v24 != &v23)
        {
          while ((void *)v21[2] != v20)
          {
            long long v21 = (uint64_t *)v21[1];
            if (v21 == &v23) {
              goto LABEL_24;
            }
          }
          if (v21 != &v23) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v14 = *v10;
    uint64_t v15 = ++v16;
    if (0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 3) <= v16) {
      goto LABEL_25;
    }
  }
  uint64_t v11 = 1;
  if (a3) {
    *a3 = 1;
  }
LABEL_26:
  std::__list_imp<unsigned int>::clear(&v23);
  return v11;
}

void sub_1B7C3BF5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OZChannelObjectRoot::writeBody(OZChannelObjectRoot *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelObjectRootScope);
  uint64_t v10 = *((void *)this + 27);
  if (v10)
  {
    (*(void (**)(void, PCSerializerWriteStream *, uint64_t))(*(void *)v10 + 16))(*((void *)this + 27), a2, a3);
    (*(void (**)(uint64_t, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 24))(v10, a2, a3, 1, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  PCSerializerWriteStream::popScope((uint64_t)a2);

  return OZChannelObjectRootBase::writeBody(this, a2, a3, a4, a5);
}

uint64_t non-virtual thunk to'OZChannelObjectRoot::writeBody(OZChannelObjectRoot *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return OZChannelObjectRoot::writeBody((OZChannelObjectRoot *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t OZChannelObjectRoot::serializeSelfOnly(OZChannelObjectRoot *this, PCSerializerWriteStream *a2, uint64_t a3)
{
  OZChannelObjectRootBase::serializeSelfOnly(this, a2);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZChannelObjectRootScope);
  uint64_t v6 = *((void *)this + 27);
  if (v6)
  {
    (*(void (**)(uint64_t, PCSerializerWriteStream *, uint64_t))(*(void *)v6 + 16))(v6, a2, a3);
    (*(void (**)(uint64_t, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2, a3, 1, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZChannelObjectRoot::parseBegin(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChannelObjectRoot::parseBegin(OZChannelObjectRoot *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelObjectRoot::parseEnd(OZChannelFolder *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t non-virtual thunk to'OZChannelObjectRoot::parseEnd(OZChannelObjectRoot *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZChannelObjectRoot::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  OZChannelObjectRootBase::parseElement((OZChannelObjectRootBase *)this, a2, a3);
  if (*((_DWORD *)a3 + 2) == 72)
  {
    uint64_t v6 = this[27];
    if (!v6) {
      operator new();
    }
    uint64_t v8 = (void *)*((void *)v6 + 2);
    uint64_t v7 = (void *)((char *)v6 + 16);
    std::__tree<OZGuide>::destroy((uint64_t)(v7 - 1), v8);
    *(v7 - OZDocument::~OZDocument(this - 1) = v7;
    *uint64_t v7 = 0;
    v7[1] = 0;
    PCSerializerReadStream::pushHandler(a2, this[27]);
  }
  return 1;
}

void sub_1B7C3C2D8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'OZChannelObjectRoot::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return 1;
}

void std::__call_once_param<std::tuple<OZChannelObjectRoot_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C3C368(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZChannelObjectRoot_Factory::OZChannelObjectRoot_Factory(OZChannelObjectRoot_Factory *this)
{
  long long v3 = xmmword_1B8378C40;
  long long v4 = xmmword_1B83817E0;
  uint64_t v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *uint64_t v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1145A88;
  *((void *)this + 16) = &unk_1F1145B58;
}

void sub_1B7C3C438(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZChannelObjectRoot_Factory::create(OZChannelObjectRoot_Factory *this, const PCString *a2)
{
}

void sub_1B7C3C4AC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4036B7AAD6);
  _Unwind_Resume(a1);
}

void OZChannelObjectRoot_Factory::createCopy(OZChannelObjectRoot_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C3C564(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4036B7AAD6);
  _Unwind_Resume(a1);
}

void OZChannelObjectRoot_Factory::createChannelCopy(OZChannelObjectRoot_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7C3C61C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C4036B7AAD6);
  _Unwind_Resume(a1);
}

OZChannelBase *OZMaterialSubstanceLayerSequenceFolder::init(OZMaterialSubstanceLayerSequenceFolder *this)
{
  uint64_t v2 = (OZChannelBase *)((char *)this + 1136);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 1136), 0, 0);
  long long v3 = (OZChannelBase *)((char *)this + 128);
  OZChannelBase::enable(v3, 0, 0);
  OZChannelBase::resetFlag(v2, 16, 0);
  OZChannelBase::setFlag(v2, 0x100000000, 0);
  OZChannelBase::saveStateAsDefault(v2);
  OZChannelBase::resetFlag(v3, 16, 0);
  OZChannelBase::setFlag(v3, 0x100000000, 0);

  return OZChannelFolder::saveStateAsDefault((OZChannelFolder *)v3);
}

void OZMaterialSubstanceLayerSequenceFolder::OZMaterialSubstanceLayerSequenceFolder(OZMaterialSubstanceLayerSequenceFolder *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZMaterialLayerSequenceFolder::OZMaterialLayerSequenceFolder(this, a2, a3, a4);
  void *v5 = &unk_1F1145BB0;
  v5[2] = &unk_1F1145EB8;
  PCURL::PCURL((PCURL *)&v6, @"Material Plastic Color");
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 128), 0.8, 0.8, 0.8, &v6, (OZChannelFolder *)this, 1u, 2u, 5u);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Material Generic Alpha");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1136), 1.0, &v6, (OZChannelFolder *)this, 2u, 2u, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Channel Map Position Label");
  OZChannelPosition::OZChannelPosition((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 1288), 0.0, 0.0, &v6, (OZChannelFolder *)this, 3u, 2u, 2u, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Channel Map Scale Label");
  OZChannelScale::OZChannelScale((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 1992), 1.0, 1.0, &v6, (OZChannelFolder *)this, 4u, 2u, 2u, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, @"Channel Map Rotation Label");
  OZChannelRotation3D::OZChannelRotation3D((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 2432), 0.0, 0.0, 0.0, &v6, (OZChannelFolder *)this, 5u, 2u, 4u, 0, 0);
  PCString::~PCString(&v6);
  OZMaterialSubstanceLayerSequenceFolder::init(this);
}

void sub_1B7C3C914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  unsigned int v16 = v15;
  OZChannelRotation3D::~OZChannelRotation3D(v16);
  OZChannel2D::~OZChannel2D(v14);
  OZChannelPosition::~OZChannelPosition(v13);
  OZChannelPercent::~OZChannelPercent(v12);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v11);
  OZMaterialLayerSequenceFolder::~OZMaterialLayerSequenceFolder(v10);
  _Unwind_Resume(a1);
}

void sub_1B7C3C984(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7C3C994()
{
}

void sub_1B7C3C99C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7C3C9AC()
{
}

void sub_1B7C3C9B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7C3C9C4()
{
}

void OZMaterialSubstanceLayerSequenceFolder::OZMaterialSubstanceLayerSequenceFolder(OZMaterialSubstanceLayerSequenceFolder *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  uint64_t Instance = (OZFactory *)OZMaterialSubstanceLayerSequenceFolder_Factory::getInstance(this);
  OZMaterialLayerSequenceFolder::OZMaterialLayerSequenceFolder(this, Instance, a2, a3, a4, a5);
  *(void *)this = &unk_1F1145BB0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1145EB8;
  PCURL::PCURL((PCURL *)&v11, @"Material Plastic Color");
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 128), 0.8, 0.8, 0.8, &v11, (OZChannelFolder *)this, 1u, 2u, 5u);
  PCString::~PCString(&v11);
  PCURL::PCURL((PCURL *)&v11, @"Material Generic Alpha");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1136), 1.0, &v11, (OZChannelFolder *)this, 2u, 2u, 0, 0);
  PCString::~PCString(&v11);
  PCURL::PCURL((PCURL *)&v11, @"Channel Map Position Label");
  OZChannelPosition::OZChannelPosition((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 1288), 0.0, 0.0, &v11, (OZChannelFolder *)this, 3u, 2u, 2u, 0, 0);
  PCString::~PCString(&v11);
  PCURL::PCURL((PCURL *)&v11, @"Channel Map Scale Label");
  OZChannelScale::OZChannelScale((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 1992), 1.0, 1.0, &v11, (OZChannelFolder *)this, 4u, 2u, 2u, 0, 0);
  PCString::~PCString(&v11);
  PCURL::PCURL((PCURL *)&v11, @"Channel Map Rotation Label");
  OZChannelRotation3D::OZChannelRotation3D((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 2432), 0.0, 0.0, 0.0, &v11, (OZChannelFolder *)this, 5u, 2u, 4u, 0, 0);
  PCString::~PCString(&v11);
  OZMaterialSubstanceLayerSequenceFolder::init(this);
}

void sub_1B7C3CC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  unsigned int v16 = v15;
  OZChannelRotation3D::~OZChannelRotation3D(v16);
  OZChannel2D::~OZChannel2D(v14);
  OZChannelPosition::~OZChannelPosition(v13);
  OZChannelPercent::~OZChannelPercent(v12);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v11);
  OZMaterialLayerSequenceFolder::~OZMaterialLayerSequenceFolder(v10);
  _Unwind_Resume(a1);
}

void sub_1B7C3CC98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7C3CCA8()
{
}

void sub_1B7C3CCB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7C3CCC0()
{
}

void sub_1B7C3CCC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

void sub_1B7C3CCD8()
{
}

uint64_t OZMaterialSubstanceLayerSequenceFolder_Factory::getInstance(OZMaterialSubstanceLayerSequenceFolder_Factory *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&OZMaterialSubstanceLayerSequenceFolder_Factory::_instanceOnce, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&OZMaterialSubstanceLayerSequenceFolder_Factory::_instanceOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZMaterialSubstanceLayerSequenceFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZMaterialSubstanceLayerSequenceFolder_Factory::_instance;
}

void OZMaterialSubstanceLayerSequenceFolder::OZMaterialSubstanceLayerSequenceFolder(OZMaterialSubstanceLayerSequenceFolder *this, const OZMaterialSubstanceLayerSequenceFolder *a2, OZChannelFolder *a3)
{
  OZMaterialLayerSequenceFolder::OZMaterialLayerSequenceFolder(this, (const OZChannelBase *)a2, a3);
  void *v5 = &unk_1F1145BB0;
  v5[2] = &unk_1F1145EB8;
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((OZChannelColorNoAlpha *)(v5 + 16), (const OZMaterialSubstanceLayerSequenceFolder *)((char *)a2 + 128), (OZChannelFolder *)this);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1136), (const OZChannelBase *)((char *)a2 + 1136), (OZChannelFolder *)this);
  OZChannelPosition::OZChannelPosition((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 1288), (const OZMaterialSubstanceLayerSequenceFolder *)((char *)a2 + 1288), (OZChannelFolder *)this);
  OZChannelScale::OZChannelScale((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 1992), (const OZMaterialSubstanceLayerSequenceFolder *)((char *)a2 + 1992), (OZChannelFolder *)this);
  OZChannelRotation3D::OZChannelRotation3D((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 2432), (const OZMaterialSubstanceLayerSequenceFolder *)((char *)a2 + 2432), (OZChannelFolder *)this);
}

void sub_1B7C3CE24(_Unwind_Exception *a1)
{
  OZChannel2D::~OZChannel2D(v5);
  OZChannelPosition::~OZChannelPosition(v4);
  OZChannelPercent::~OZChannelPercent(v3);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(v2);
  OZMaterialLayerSequenceFolder::~OZMaterialLayerSequenceFolder(v1);
  _Unwind_Resume(a1);
}

void OZMaterialSubstanceLayerSequenceFolder::~OZMaterialSubstanceLayerSequenceFolder(OZMaterialSubstanceLayerSequenceFolder *this)
{
  OZMaterialSubstanceLayerSequenceFolder::~OZMaterialSubstanceLayerSequenceFolder(this);

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F1145BB0;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1145EB8;
  OZChannelRotation3D::~OZChannelRotation3D((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 2432));
  OZChannel2D::~OZChannel2D((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 1992));
  OZChannelPosition::~OZChannelPosition((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 1288));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1136));
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha((OZMaterialSubstanceLayerSequenceFolder *)((char *)this + 128));

  OZMaterialLayerSequenceFolder::~OZMaterialLayerSequenceFolder(this);
}

void OZMaterialSubstanceLayerSequenceFolder::getImagePosition(uint64_t a1, const CMTime *a2, void *a3, double a4)
{
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 1424), a2, a4);
  uint64_t v9 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 1576), a2, a4);
  *a3 = v9;
  a3[1] = v10;
}

void OZMaterialSubstanceLayerSequenceFolder::getImageScale(OZChannel *a1, const CMTime *a2, void *a3, double a4)
{
  if (a3)
  {
    OZChannel::getValueAsDouble(a1 + 14, a2, a4);
    uint64_t v9 = v8;
    OZChannel::getValueAsDouble(a1 + 15, a2, a4);
    *a3 = v9;
    a3[1] = v10;
  }
}

void OZMaterialSubstanceLayerSequenceFolder::getImageRotation(uint64_t a1, const CMTime *a2, void *a3, double a4)
{
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 2568), a2, a4);
  *a3 = v8;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 2720), a2, a4);
  a3[1] = v9;
  OZChannel::getValueAsDouble((OZChannel *)(a1 + 2872), a2, a4);
  a3[2] = v10;
}

uint64_t OZMaterialSubstanceLayerSequenceFolder::translationChannel(OZMaterialSubstanceLayerSequenceFolder *this)
{
  return (uint64_t)this + 1288;
}

uint64_t OZMaterialSubstanceLayerSequenceFolder::scaleChannel(OZMaterialSubstanceLayerSequenceFolder *this)
{
  return (uint64_t)this + 1992;
}

uint64_t OZMaterialSubstanceLayerSequenceFolder::rotationChannel(OZMaterialSubstanceLayerSequenceFolder *this)
{
  return (uint64_t)this + 2432;
}

void non-virtual thunk to'OZMaterialSubstanceLayerSequenceFolder::~OZMaterialSubstanceLayerSequenceFolder(OZMaterialSubstanceLayerSequenceFolder *this)
{
}

{
  uint64_t vars8;

  OZMaterialSubstanceLayerSequenceFolder::~OZMaterialSubstanceLayerSequenceFolder((OZMaterialSubstanceLayerSequenceFolder *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

void std::__call_once_param<std::tuple<OZMaterialSubstanceLayerSequenceFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
}

void sub_1B7C3D088(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void OZMaterialSubstanceLayerSequenceFolder_Factory::OZMaterialSubstanceLayerSequenceFolder_Factory(OZMaterialSubstanceLayerSequenceFolder_Factory *this)
{
  long long v3 = xmmword_1B7E78290;
  long long v4 = xmmword_1B8381830;
  char v2 = (void *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *char v2 = &unk_1F10A81A8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(void *)this = &unk_1F1145F28;
  *((void *)this + 16) = &unk_1F1145FF8;
}

void sub_1B7C3D158(_Unwind_Exception *a1)
{
  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void OZMaterialSubstanceLayerSequenceFolder_Factory::create(OZMaterialSubstanceLayerSequenceFolder_Factory *this, const PCString *a2)
{
}

void sub_1B7C3D1CC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405A68DC6ELL);
  _Unwind_Resume(a1);
}

void OZMaterialSubstanceLayerSequenceFolder_Factory::createCopy(OZMaterialSubstanceLayerSequenceFolder_Factory *this, OZFactoryBase *a2)
{
}

void sub_1B7C3D284(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405A68DC6ELL);
  _Unwind_Resume(a1);
}

void OZMaterialSubstanceLayerSequenceFolder_Factory::createChannelCopy(OZMaterialSubstanceLayerSequenceFolder_Factory *this, OZChannelBase *a2)
{
}

void sub_1B7C3D33C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10F1C405A68DC6ELL);
  _Unwind_Resume(a1);
}

void OZTimeMarker::OZTimeMarker(OZTimeMarker *this)
{
  *(void *)this = &unk_1F1146050;
  uint64_t v2 = MEMORY[0x1E4F1FA48];
  long long v3 = *MEMORY[0x1E4F1FA48];
  *((void *)this + 3) = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(_OWORD *)((char *)this + 8) = v3;
  *((_OWORD *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)v2;
  *((void *)this + 6) = *(void *)(v2 + 16);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 8);
  *((void *)this + 9) = 1;
}

void sub_1B7C3D480(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZTimeMarker::OZTimeMarker(OZTimeMarker *this, const OZTimeMarker *a2)
{
  *(void *)this = &unk_1F1146050;
  long long v4 = *(_OWORD *)((char *)a2 + 8);
  *((void *)this + 3) = *((void *)a2 + 3);
  *(_OWORD *)((char *)this + 8) = v4;
  long long v5 = *((_OWORD *)a2 + 2);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((_OWORD *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = v5;
  PCString::PCString((PCString *)this + 7, (const PCString *)a2 + 7);
  PCString::PCString((PCString *)this + 8, (const PCString *)a2 + 8);
  *((void *)this + 9) = *((void *)a2 + 9);
}

void sub_1B7C3D524(_Unwind_Exception *a1)
{
  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void OZTimeMarker::~OZTimeMarker(PCString *this)
{
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)&unk_1F1146050;
  uint64_t v1 = this + 7;
  PCString::~PCString(this + 8);
  PCString::~PCString(v1);
}

{
  PCString *v1;
  uint64_t vars8;

  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)&unk_1F1146050;
  uint64_t v1 = this + 7;
  PCString::~PCString(this + 8);
  PCString::~PCString(v1);

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZTimeMarker::operator<(uint64_t a1, uint64_t a2)
{
  CMTime time1 = *(CMTime *)(a1 + 8);
  CMTime v3 = *(CMTime *)(a2 + 8);
  return CMTimeCompare(&time1, &v3) >> 31;
}

BOOL OZTimeMarker::operator==(uint64_t a1, uint64_t a2)
{
  CMTime time1 = *(CMTime *)(a1 + 8);
  CMTime v5 = *(CMTime *)(a2 + 8);
  if (CMTimeCompare(&time1, &v5)) {
    return 0;
  }
  CMTime time1 = *(CMTime *)(a1 + 32);
  CMTime v5 = *(CMTime *)(a2 + 32);
  return !CMTimeCompare(&time1, &v5)
      && !PCString::compare((PCString *)(a1 + 56), (const PCString *)(a2 + 56))
      && !PCString::compare((PCString *)(a1 + 64), (const PCString *)(a2 + 64))
      && *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)
      && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76);
}

PCSharedCount *OZTimeMarker::getLabel(OZTimeMarker *this)
{
  switch(*((_DWORD *)this + 19))
  {
    case 3:
      {
        PCSharedCount::PCSharedCount(&OZTimeMarker::getLabel(void)const::sBuildInMandatoryLabel);
        __cxa_atexit((void (*)(void *))PCString::~PCString, &OZTimeMarker::getLabel(void)const::sBuildInMandatoryLabel, &dword_1B73F3000);
      }
      uint64_t v1 = &OZTimeMarker::getLabel(void)const::sBuildInMandatoryLabel;
      if (PCString::empty((PCString *)&OZTimeMarker::getLabel(void)const::sBuildInMandatoryLabel))
      {
        PCURL::PCURL((PCURL *)&v3, @"Marker Build In Mandatory");
        PCString::set((PCString *)&OZTimeMarker::getLabel(void)const::sBuildInMandatoryLabel, &v3);
        goto LABEL_24;
      }
      break;
    case 4:
      {
        PCSharedCount::PCSharedCount(&OZTimeMarker::getLabel(void)const::sBuildInOptionalLabel);
        __cxa_atexit((void (*)(void *))PCString::~PCString, &OZTimeMarker::getLabel(void)const::sBuildInOptionalLabel, &dword_1B73F3000);
      }
      uint64_t v1 = &OZTimeMarker::getLabel(void)const::sBuildInOptionalLabel;
      if (PCString::empty((PCString *)&OZTimeMarker::getLabel(void)const::sBuildInOptionalLabel))
      {
        PCURL::PCURL((PCURL *)&v3, @"Marker Build In Optional");
        PCString::set((PCString *)&OZTimeMarker::getLabel(void)const::sBuildInOptionalLabel, &v3);
        goto LABEL_24;
      }
      break;
    case 5:
      {
        PCSharedCount::PCSharedCount(&OZTimeMarker::getLabel(void)const::sBuildOutMandatoryLabel);
        __cxa_atexit((void (*)(void *))PCString::~PCString, &OZTimeMarker::getLabel(void)const::sBuildOutMandatoryLabel, &dword_1B73F3000);
      }
      uint64_t v1 = &OZTimeMarker::getLabel(void)const::sBuildOutMandatoryLabel;
      if (PCString::empty((PCString *)&OZTimeMarker::getLabel(void)const::sBuildOutMandatoryLabel))
      {
        PCURL::PCURL((PCURL *)&v3, @"Marker Build Out Mandatory");
        PCString::set((PCString *)&OZTimeMarker::getLabel(void)const::sBuildOutMandatoryLabel, &v3);
        goto LABEL_24;
      }
      break;
    case 6:
      {
        PCSharedCount::PCSharedCount(&OZTimeMarker::getLabel(void)const::sBuildOutOptionalLabel);
        __cxa_atexit((void (*)(void *))PCString::~PCString, &OZTimeMarker::getLabel(void)const::sBuildOutOptionalLabel, &dword_1B73F3000);
      }
      uint64_t v1 = &OZTimeMarker::getLabel(void)const::sBuildOutOptionalLabel;
      if (PCString::empty((PCString *)&OZTimeMarker::getLabel(void)const::sBuildOutOptionalLabel))
      {
        PCURL::PCURL((PCURL *)&v3, @"Marker Build Out Optional");
        PCString::set((PCString *)&OZTimeMarker::getLabel(void)const::sBuildOutOptionalLabel, &v3);
        goto LABEL_24;
      }
      break;
    case 7:
      {
        PCSharedCount::PCSharedCount(&OZTimeMarker::getLabel(void)const::sLoopEndLabel);
        __cxa_atexit((void (*)(void *))PCString::~PCString, &OZTimeMarker::getLabel(void)const::sLoopEndLabel, &dword_1B73F3000);
      }
      uint64_t v1 = &OZTimeMarker::getLabel(void)const::sLoopEndLabel;
      if (PCString::empty((PCString *)&OZTimeMarker::getLabel(void)const::sLoopEndLabel))
      {
        PCURL::PCURL((PCURL *)&v3, @"Marker Project Loop End");
        PCString::set((PCString *)&OZTimeMarker::getLabel(void)const::sLoopEndLabel, &v3);
        goto LABEL_24;
      }
      break;
    case 8:
      {
        PCSharedCount::PCSharedCount(&OZTimeMarker::getLabel(void)const::sPosterFrameLabel);
        __cxa_atexit((void (*)(void *))PCString::~PCString, &OZTimeMarker::getLabel(void)const::sPosterFrameLabel, &dword_1B73F3000);
      }
      uint64_t v1 = &OZTimeMarker::getLabel(void)const::sPosterFrameLabel;
      if (PCString::empty((PCString *)&OZTimeMarker::getLabel(void)const::sPosterFrameLabel))
      {
        PCURL::PCURL((PCURL *)&v3, @"Marker Project Poster Frame");
        PCString::set((PCString *)&OZTimeMarker::getLabel(void)const::sPosterFrameLabel, &v3);
        goto LABEL_24;
      }
      break;
    case 9:
      {
        PCSharedCount::PCSharedCount(&OZTimeMarker::getLabel(void)const::sTextEditLabel);
        __cxa_atexit((void (*)(void *))PCString::~PCString, &OZTimeMarker::getLabel(void)const::sTextEditLabel, &dword_1B73F3000);
      }
      uint64_t v1 = &OZTimeMarker::getLabel(void)const::sTextEditLabel;
      if (PCString::empty((PCString *)&OZTimeMarker::getLabel(void)const::sTextEditLabel))
      {
        PCURL::PCURL((PCURL *)&v3, @"Marker Text Edit");
        PCString::set((PCString *)&OZTimeMarker::getLabel(void)const::sTextEditLabel, &v3);
LABEL_24:
        PCString::~PCString(&v3);
      }
      break;
    default:
      uint64_t v1 = (PCSharedCount *)((char *)this + 56);
      break;
  }
  return v1;
}

void sub_1B7C3DC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t OZTimeMarker::writeHeader(OZTimeMarker *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZTimeMarkerScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 73);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZTimeMarker::writeBody(OZTimeMarker *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZTimeMarkerScope);
  uint64_t v12 = *((void *)this + 3);
  long long v11 = *(_OWORD *)((char *)this + 8);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 1);
  (*(void (**)(PCSerializerWriteStream *, long long *))(*(void *)a2 + 112))(a2, &v11);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  CMTime time1 = *(CMTime *)((char *)this + 32);
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    CMTime time1 = *(CMTime *)((char *)this + 8);
    CMTime time2 = *(CMTime *)((char *)this + 32);
    double v4 = PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)v10);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, double))(*(void *)a2 + 16))(a2, 2, v4);
    (*(void (**)(PCSerializerWriteStream *, unsigned char *))(*(void *)a2 + 112))(a2, v10);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  }
  if (!PCString::empty((PCString *)this + 7) && !*((_DWORD *)this + 19))
  {
    PCString::PCString(&v9, (const PCString *)this + 7);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 3);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v9);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCString::~PCString(&v9);
  }
  if (!PCString::empty((PCString *)this + 8))
  {
    PCString::PCString(&v8, (const PCString *)this + 8);
    (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 4);
    (*(void (**)(PCSerializerWriteStream *, PCString *))(*(void *)a2 + 104))(a2, &v8);
    (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
    PCString::~PCString(&v8);
  }
  uint64_t v5 = *((unsigned int *)this + 18);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 5);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v5);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  uint64_t v6 = *((unsigned int *)this + 19);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 6);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 48))(a2, v6);
  (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B7C3E190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11)
{
}

uint64_t OZTimeMarker::parseBegin(OZTimeMarker *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZTimeMarker::parseEnd(OZTimeMarker *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t OZTimeMarker::parseElement(OZTimeMarker *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  switch(*((_DWORD *)a3 + 2))
  {
    case 1:
      if (*((_DWORD *)a2 + 26) < 5u)
      {
        v14.int value = 0;
        (*(void (**)(PCStreamElement *, CMTime *))(*(void *)a3 + 64))(a3, &v14);
        CMTime v15 = *(CMTime *)((char *)a2 + 112);
        operator*(&v15, &v16, *(Float64 *)&v14.value);
      }
      else
      {
        (*(void (**)(PCStreamElement *, CMTime *))(*(void *)a3 + 88))(a3, &v16);
      }
      *(CMTime *)((char *)this + 8) = v16;
      break;
    case 2:
      if (*((_DWORD *)a2 + 26) < 5u)
      {
        double v12 = 0.0;
        (*(void (**)(PCStreamElement *, double *))(*(void *)a3 + 64))(a3, &v12);
        CMTime v10 = *(CMTime *)((char *)a2 + 112);
        operator*(&v10, &v11, v12 + -1.0);
        *(_OWORD *)&v9.int value = *((_OWORD *)a2 + 7);
        v9.CMTimeEpoch epoch = *((void *)a2 + 16);
        CMTime v16 = v11;
        CMTime v15 = *(CMTime *)((char *)this + 8);
        PC_CMTimeSaferSubtract(&v16, &v15, (uint64_t)&v13);
        CMTime v16 = v13;
        CMTime v15 = v9;
        PC_CMTimeSaferAdd(&v16, &v15, (uint64_t)&v14);
        *((_OWORD *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)&v14.value;
        CMTimeEpoch epoch = v14.epoch;
      }
      else
      {
        (*(void (**)(PCStreamElement *, CMTime *))(*(void *)a3 + 88))(a3, &v14);
        CMTime v15 = *(CMTime *)((char *)this + 8);
        CMTime v16 = v14;
        PC_CMTimeSaferSubtract(&v16, &v15, (uint64_t)&v13);
        *((_OWORD *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)&v13.value;
        CMTimeEpoch epoch = v13.epoch;
      }
      *((void *)this + 6) = epoch;
      break;
    case 3:
      uint64_t v6 = (char *)this + 56;
      goto LABEL_8;
    case 4:
      uint64_t v6 = (char *)this + 64;
LABEL_8:
      (*(void (**)(PCStreamElement *, char *))(*(void *)a3 + 16))(a3, v6);
      break;
    case 5:
      LODWORD(v16.value) = 0;
      (*(void (**)(PCStreamElement *, CMTime *))(*(void *)a3 + 24))(a3, &v16);
      *((_DWORD *)this + 18) = v16.value;
      break;
    case 6:
      LODWORD(v15.value) = 0;
      (*(void (**)(PCStreamElement *, CMTime *))(*(void *)a3 + 24))(a3, &v15);
      int value = v15.value;
      *((_DWORD *)this + 19) = v15.value;
      if (value == 1)
      {
        *((_DWORD *)this + 19) = 0;
        PCURL::PCURL((PCURL *)&v16, @"Marker DVD Menu Loop Label");
        PCString::set((PCString *)this + 7, (const PCString *)&v16);
        PCString::~PCString((PCString *)&v16);
        int value = *((_DWORD *)this + 19);
      }
      if (value == 2)
      {
        *((_DWORD *)this + 19) = 0;
        PCURL::PCURL((PCURL *)&v16, @"Marker DVD Alpha Transition Label");
        PCString::set((PCString *)this + 7, (const PCString *)&v16);
        PCString::~PCString((PCString *)&v16);
      }
      break;
    default:
      return 0;
  }
  return 0;
}

void sub_1B7C3E570(_Unwind_Exception *a1)
{
  PCString::~PCString((PCString *)(v1 - 48));
  _Unwind_Resume(a1);
}

void OZTimeMarkerSet::OZTimeMarkerSet(OZTimeMarkerSet *this)
{
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1F11460A8;
  *((void *)this + OZDocument::~OZDocument(this - 1) = (char *)this + 16;
}

uint64_t *std::set<OZTimeMarker>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<OZTimeMarker>::insert[abi:ne180100]<std::__tree_const_iterator<OZTimeMarker,std::__tree_node<OZTimeMarker,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1B7C3E60C(_Unwind_Exception *a1)
{
  std::__tree<OZGuide>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void OZTimeMarkerSet::OZTimeMarkerSet(OZTimeMarkerSet *this, const OZTimeMarkerSet *a2)
{
  *(void *)this = &unk_1F11460A8;
}

char *OZTimeMarkerSet::findNextMarker(OZTimeMarkerSet *this, CMTime *a2)
{
  uint64_t v2 = (char *)*((void *)this + 1);
  PCString v3 = (char *)this + 16;
  CMTime v8 = *a2;
  if (v2 != (char *)this + 16)
  {
    while (!ozTimeLessThanOffset::operator()(&v8, (uint64_t)(v2 + 32)))
    {
      double v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          double v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
      if (v5 == v3) {
        return v3;
      }
    }
  }
  return v2;
}

uint64_t OZTimeMarkerSet::writeHeader(OZTimeMarkerSet *this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZTimeMarkerSetScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 72);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZTimeMarkerSet::writeBody(OZTimeMarkerSet *this, PCSerializerWriteStream *a2, uint64_t a3)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZTimeMarkerSetScope);
  BOOL v6 = (OZTimeMarkerSet *)*((void *)this + 1);
  if (v6 != (OZTimeMarkerSet *)((char *)this + 16))
  {
    do
    {
      (*(void (**)(void *, PCSerializerWriteStream *, uint64_t))(*((void *)v6 + 4) + 16))((void *)v6 + 4, a2, a3);
      (*(void (**)(void *, PCSerializerWriteStream *, uint64_t, uint64_t, uint64_t))(*((void *)v6 + 4) + 24))((void *)v6 + 4, a2, a3, 1, 1);
      (*(void (**)(PCSerializerWriteStream *))(*(void *)a2 + 24))(a2);
      uint64_t v7 = (OZTimeMarkerSet *)*((void *)v6 + 1);
      if (v7)
      {
        do
        {
          CMTime v8 = v7;
          uint64_t v7 = *(OZTimeMarkerSet **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          CMTime v8 = (OZTimeMarkerSet *)*((void *)v6 + 2);
          BOOL v9 = *(void *)v8 == (void)v6;
          BOOL v6 = v8;
        }
        while (!v9);
      }
      BOOL v6 = v8;
    }
    while (v8 != (OZTimeMarkerSet *)((char *)this + 16));
  }

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t OZTimeMarkerSet::parseBegin(OZTimeMarkerSet *this, PCSerializerReadStream *a2)
{
  return 0;
}

uint64_t OZTimeMarkerSet::parseEnd(uint64_t **this, PCSerializerReadStream *a2)
{
  if (OZTimeMarkerSet::_reading)
  {
    std::__tree<OZTimeMarker>::__emplace_unique_key_args<OZTimeMarker,OZTimeMarker const&>(this + 1, OZTimeMarkerSet::_reading, (const OZTimeMarker *)OZTimeMarkerSet::_reading);
    if (OZTimeMarkerSet::_reading) {
      (*(void (**)(uint64_t))(*(void *)OZTimeMarkerSet::_reading + 8))(OZTimeMarkerSet::_reading);
    }
  }
  OZTimeMarkerSet::_reading = 0;
  return 0;
}

uint64_t OZTimeMarkerSet::parseElement(uint64_t **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  if (*((_DWORD *)a3 + 2) == 73)
  {
    if (!OZTimeMarkerSet::_reading) {
      operator new();
    }
    std::__tree<OZTimeMarker>::__emplace_unique_key_args<OZTimeMarker,OZTimeMarker const&>(this + 1, OZTimeMarkerSet::_reading, (const OZTimeMarker *)OZTimeMarkerSet::_reading);
    PCSerializerReadStream::pushHandler(a2, (PCSerializer *)OZTimeMarkerSet::_reading);
  }
  return 0;
}

void sub_1B7C3E9C8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9BFBA0](v1, 0x10E1C40E1CD183DLL);
  _Unwind_Resume(a1);
}

void OZTimeMarkerSet::~OZTimeMarkerSet(OZTimeMarkerSet *this)
{
}

{
  uint64_t vars8;

  std::__tree<OZGuide>::destroy((uint64_t)this + 8, *((void **)this + 2));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t *std::set<OZTimeMarker>::insert[abi:ne180100]<std::__tree_const_iterator<OZTimeMarker,std::__tree_node<OZTimeMarker,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    double v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    BOOL v6 = result + 1;
    do
    {
      __n128 result = std::__tree<OZTimeMarker>::__emplace_hint_unique_key_args<OZTimeMarker,OZTimeMarker const&>(v5, v6, (uint64_t)(v4 + 4), (const OZTimeMarker *)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          CMTime v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          CMTime v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          double v4 = v8;
        }
        while (!v9);
      }
      double v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<OZTimeMarker>::__emplace_hint_unique_key_args<OZTimeMarker,OZTimeMarker const&>(uint64_t **a1, uint64_t *a2, uint64_t a3, const OZTimeMarker *a4)
{
  BOOL v6 = std::__tree<OZTimeMarker>::__find_equal<OZTimeMarker>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    CMTime v8 = (uint64_t **)v6;
    std::__tree<OZTimeMarker>::__construct_node<OZTimeMarker const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<OZTimeMarker,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<OZTimeMarker,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::__tree<OZTimeMarker>::__find_equal<OZTimeMarker>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, uint64_t a5)
{
  BOOL v9 = a1 + 1;
  if (a1 + 1 != (uint64_t **)a2)
  {
    CMTime time1 = *(CMTime *)(a5 + 8);
    CMTime v20 = *(CMTime *)(a2 + 5);
    if ((CMTimeCompare(&time1, &v20) & 0x80000000) == 0)
    {
      CMTime time1 = *(CMTime *)(a2 + 5);
      CMTime v20 = *(CMTime *)(a5 + 8);
      if ((CMTimeCompare(&time1, &v20) & 0x80000000) == 0)
      {
        *a3 = a2;
        *a4 = (uint64_t)a2;
        return a4;
      }
      a4 = a2 + 1;
      uint64_t v13 = a2[1];
      if (v13)
      {
        CMTime v14 = (uint64_t *)a2[1];
        do
        {
          CMTime v15 = (uint64_t **)v14;
          CMTime v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        CMTime v18 = a2;
        do
        {
          CMTime v15 = (uint64_t **)v18[2];
          BOOL v17 = *v15 == v18;
          CMTime v18 = (uint64_t *)v15;
        }
        while (!v17);
      }
      if (v15 == v9) {
        goto LABEL_27;
      }
      CMTime time1 = *(CMTime *)(a5 + 8);
      CMTime v20 = *(CMTime *)(v15 + 5);
      if (CMTimeCompare(&time1, &v20) < 0)
      {
        uint64_t v13 = *a4;
LABEL_27:
        if (v13)
        {
          *a3 = (uint64_t *)v15;
          return (uint64_t *)v15;
        }
        else
        {
          *a3 = a2;
        }
        return a4;
      }
      return std::__tree<OZTimeMarker>::__find_equal<OZTimeMarker>((uint64_t)a1, a3, a5);
    }
  }
  if (*a1 == a2)
  {
    double v12 = a2;
  }
  else
  {
    uint64_t v11 = (uint64_t *)*a2;
    if (*a2)
    {
      do
      {
        double v12 = v11;
        uint64_t v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      CMTime v16 = a2;
      do
      {
        double v12 = (uint64_t *)v16[2];
        BOOL v17 = *v12 == (void)v16;
        CMTime v16 = v12;
      }
      while (v17);
    }
    CMTime time1 = *(CMTime *)(v12 + 5);
    CMTime v20 = *(CMTime *)(a5 + 8);
    if ((CMTimeCompare(&time1, &v20) & 0x80000000) == 0) {
      return std::__tree<OZTimeMarker>::__find_equal<OZTimeMarker>((uint64_t)a1, a3, a5);
    }
  }
  if (*a2)
  {
    *a3 = v12;
    return v12 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

BOOL ozTimeLessThanOffset::operator()(CMTime *a1, uint64_t a2)
{
  CMTime v5 = *(CMTime *)(a2 + 8);
  CMTime time1 = *a1;
  if ((CMTimeCompare(&time1, &v5) & 0x80000000) == 0) {
    return 0;
  }
  CMTime v5 = *(CMTime *)(a2 + 8);
  CMTime time1 = *a1;
  return CMTimeCompare(&time1, &v5) != 0;
}

void OZRenderState::OZRenderState(OZRenderState *this)
{
  long long v2 = *MEMORY[0x1E4F1FA48];
  this->var0.unsigned int var3 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(_OWORD *)&this->var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v2;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)&this->double var1 = _Q0;
  this->unsigned int var3 = 1.0;
  this->var4 = 0;
  this->var5 = 0;
  this->var6 = 0;
  this->var7.var0[3][3] = 1.0;
  this->var7.var0[2][2] = 1.0;
  this->var7.var0[1][1] = 1.0;
  this->var7.var0[0][0] = 1.0;
  *(_OWORD *)&this->var7.var0[0][1] = 0u;
  *(_OWORD *)&this->var7.var0[0][3] = 0u;
  *(_OWORD *)&this->var7.var0[1][2] = 0u;
  *(_OWORD *)&this->var7.var0[2][0] = 0u;
  *(_OWORD *)&this->var7.var0[2][3] = 0u;
  *(_OWORD *)&this->var7.var0[3][1] = 0u;
  this->unint64_t var8 = 1;
  this->var14 = 0;
  this->var13 = 0;
  *(_DWORD *)&this->var9 = 0;
  this->var15 = 3;
  this->BOOL var16 = 0;
  this->var17 = 0;
  *(_WORD *)&this->var18 = 257;
  this->var20 = 1;
  *(_DWORD *)&this->var21 = 0;
  *(_DWORD *)&this->var25 = 1;
  this->var29 = 3;
  OZRenderState::TransformSet::TransformSet((OZRenderState::TransformSet *)&this->var30);
  this->var31 = 0;
}

void OZRenderState::OZRenderState(OZRenderState *this, const OZRenderState *a2)
{
  long long v2 = *(_OWORD *)&a2->var0.var0;
  this->var0.unsigned int var3 = a2->var0.var3;
  *(_OWORD *)&this->var0.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = v2;
  *(_OWORD *)&this->double var1 = *(_OWORD *)&a2->var1;
  this->unsigned int var3 = a2->var3;
  this->var4 = a2->var4;
  this->var5 = a2->var5;
  this->var6 = a2->var6;
  long long v3 = *(_OWORD *)&a2->var7.var0[0][0];
  long long v4 = *(_OWORD *)&a2->var7.var0[0][2];
  long long v5 = *(_OWORD *)&a2->var7.var0[1][0];
  *(_OWORD *)&this->var7.var0[1][2] = *(_OWORD *)&a2->var7.var0[1][2];
  *(_OWORD *)&this->var7.var0[1][0] = v5;
  *(_OWORD *)&this->var7.var0[0][2] = v4;
  *(_OWORD *)&this->var7.var0[0][0] = v3;
  long long v6 = *(_OWORD *)&a2->var7.var0[2][0];
  long long v7 = *(_OWORD *)&a2->var7.var0[2][2];
  long long v8 = *(_OWORD *)&a2->var7.var0[3][0];
  *(_OWORD *)&this->var7.var0[3][2] = *(_OWORD *)&a2->var7.var0[3][2];
  *(_OWORD *)&this->var7.var0[3][0] = v8;
  *(_OWORD *)&this->var7.var0[2][2] = v7;
  *(_OWORD *)&this->var7.var0[2][0] = v6;
  *(_DWORD *)&this->unint64_t var8 = *(_DWORD *)&a2->var8;
  *(_WORD *)&this->var12 = *(_WORD *)&a2->var12;
  this->var14 = a2->var14;
  this->var15 = a2->var15;
  this->BOOL var16 = a2->var16;
  this->var17 = a2->var17;
  *(void *)&this->var18 = *(void *)&a2->var18;
  *(_WORD *)&this->var26 = *(_WORD *)&a2->var26;
  this->var28 = a2->var28;
  this->var29 = a2->var29;
  this->var30.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = a2->var30.var0;
  this->var31 = a2->var31;
}

double OZRenderState::operator=(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 4OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *((void *)a2 + 5);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
  if (a2 != (long long *)a1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (uint64_t)a2 + 72;
    uint64_t v5 = a1 + 72;
    do
    {
      for (uint64_t i = 0; i != 32; i += 8)
        *(void *)(v5 + i) = *(void *)(v4 + i);
      ++v3;
      v5 += 32;
      v4 += 32;
    }
    while (v3 != 4);
  }
  *(_DWORD *)(a1 + 20OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *((_DWORD *)a2 + 50);
  *(_WORD *)(a1 + 204) = *((_WORD *)a2 + 102);
  *(void *)(a1 + 208) = *((void *)a2 + 26);
  *(_DWORD *)(a1 + 216) = *((_DWORD *)a2 + 54);
  *(unsigned char *)(a1 + 22OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *((unsigned char *)a2 + 220);
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  double result = *((double *)a2 + 29);
  *(double *)(a1 + 23OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = result;
  *(_WORD *)(a1 + 24OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = *((_WORD *)a2 + 120);
  *(unsigned char *)(a1 + 24OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((unsigned char *)a2 + 242);
  *(_DWORD *)(a1 + 244) = *((_DWORD *)a2 + 61);
  *(void *)(a1 + 248) = *((void *)a2 + 31);
  *(void *)(a1 + 256) = *((void *)a2 + 32);
  return result;
}

uint64_t *OZRenderState::TransformSet::pivot(uint64_t *this, int a2)
{
  uint64_t v2 = *this | 7;
  if (!a2) {
    uint64_t v2 = *this & 0x3FF8;
  }
  *this = v2;
  return this;
}

uint64_t *OZRenderState::TransformSet::rotation(uint64_t *this, int a2)
{
  uint64_t v2 = *this | 0x38;
  if (!a2) {
    uint64_t v2 = *this & 0x3FC7;
  }
  *this = v2;
  return this;
}

uint64_t *OZRenderState::TransformSet::scale(uint64_t *this, int a2)
{
  uint64_t v2 = *this | 0x1C0;
  if (!a2) {
    uint64_t v2 = *this & 0x3E3F;
  }
  *this = v2;
  return this;
}

uint64_t *OZRenderState::TransformSet::shear(uint64_t *this, int a2)
{
  uint64_t v2 = *this | 0x600;
  if (!a2) {
    uint64_t v2 = *this & 0x39FF;
  }
  *this = v2;
  return this;
}

uint64_t *OZRenderState::TransformSet::translation(uint64_t *this, int a2)
{
  uint64_t v2 = *this | 0x3800;
  if (!a2) {
    uint64_t v2 = *this & 0x7FF;
  }
  *this = v2;
  return this;
}

double OZRenderState::setEyeMatrix(OZRenderState *this, const LiCamera *a2)
{
  this->var6 = 1;
  (*(void (**)(void *__return_ptr, const LiCamera *))(*(void *)a2 + 16))(v12, a2);
  p_var7 = &this->var7;
  if (v12 != (void *)p_var7)
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      long long v6 = (_OWORD *)((char *)p_var7 + i * 8);
      long long v7 = *(_OWORD *)&v12[i + 2];
      *long long v6 = *(_OWORD *)&v12[i];
      v6[1] = v7;
    }
  }
  if (!(*(unsigned int (**)(const LiCamera *))(*(void *)a2 + 632))(a2))
  {
    double v9 = (*(double (**)(const LiCamera *))(*(void *)a2 + 320))(a2);
    v8.n128_f64[0] = PCMatrix44Tmpl<double>::rightTranslate((double *)p_var7, 0.0, 0.0, -v9);
  }
  double v10 = (*(double (**)(const LiCamera *, __n128))(*(void *)a2 + 488))(a2, v8);
  return PCMatrix44Tmpl<double>::rightScale((double *)p_var7, v10, v10, v10);
}

OZRenderState::TransformSet *OZRenderState::TransformSet::TransformSet(OZRenderState::TransformSet *this)
{
  *(void *)this = 0;
  uint64_t v3 = this;
  int v4 = 0;
  std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v3, 0xEuLL);
  return this;
}

void OZBehavior::OZBehavior(OZBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  *(void *)this = &unk_1F1139198;
  *((void *)this + OZDocument::~OZDocument(this - 1) = a2;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1144468;
  *((void *)this + 3) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZBehavior *)((char *)this + 32));
  *(void *)this = &unk_1F1146160;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F11463E0;
  *((void *)this + 6) = &unk_1F1146638;
  OZChannelBehaviorRoot::OZChannelBehaviorRoot((OZBehavior *)((char *)this + 56), a3, 0, a4, 0);
  OZChannelSceneNode::setSceneNode((uint64_t)this + 56, this);
  *((void *)this + 4OZDocument::~OZDocument(this - 1) = 0;
  *((_WORD *)this + 16OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
}

void sub_1B7C3F3F4(_Unwind_Exception *a1)
{
  OZChannelBehaviorRoot::~OZChannelBehaviorRoot(v2);
  *(void *)(v1 + 16) = &unk_1F1138080;
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    *(void *)(v1 + 24) = 0;
  }
  _Unwind_Resume(a1);
}

void OZBehavior::OZBehavior(OZBehavior *this, const OZBehavior *a2, char a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)this = &unk_1F1139198;
  *((void *)this + OZDocument::~OZDocument(this - 1) = v6;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1144468;
  *((void *)this + 3) = 0;
  PCWorkingColorVector::PCWorkingColorVector((OZBehavior *)((char *)this + 32));
  *(void *)this = &unk_1F1146160;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F11463E0;
  *((void *)this + 6) = &unk_1F1146638;
  OZChannelBehaviorRoot::OZChannelBehaviorRoot((OZBehavior *)((char *)this + 56), (const OZBehavior *)((char *)a2 + 56), 0);
  long long v7 = (OZChannelBase *)OZChannelSceneNode::setSceneNode((uint64_t)this + 56, this);
  *((void *)this + 4OZDocument::~OZDocument(this - 1) = 0;
  *((_WORD *)this + 16OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  if ((a3 & 2) != 0)
  {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v7);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 56), NextUniqueID);
  }
}

void sub_1B7C3F558(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 16) = &unk_1F1138080;
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2)
  {
    *(void *)(v2 + 8) = 0;
    *(void *)(v1 + 24) = 0;
  }
  _Unwind_Resume(exception_object);
}

void OZBehavior::~OZBehavior(OZBehavior *this)
{
  *(void *)this = &unk_1F1146160;
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F11463E0;
  *((void *)this + 6) = &unk_1F1146638;
  OZChannelBehaviorRoot::~OZChannelBehaviorRoot((OZBehavior *)((char *)this + 56));
  *((void *)this + OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = &unk_1F1138080;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    *(void *)(v2 + 8) = 0;
    *((void *)this + 3) = 0;
  }
}

{
  uint64_t vars8;

  OZBehavior::~OZBehavior(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZBehavior::~OZBehavior(OZBehavior *this)
{
}

{
  OZBehavior::~OZBehavior((OZBehavior *)((char *)this - 48));
}

{
  uint64_t vars8;

  OZBehavior::~OZBehavior((OZBehavior *)((char *)this - 16));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZBehavior::~OZBehavior((OZBehavior *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZBehavior::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 3OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *(_OWORD *)(a2 + 32);
  uint64_t result = OZChannelBehaviorRoot::operator=(a1 + 56, a2 + 56);
  *(unsigned char *)(a1 + 32OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = 0;
  return result;
}

uint64_t OZBehavior::isActiveAtTime(OZBehavior *this, CMTime *a2, BOOL a3, BOOL a4, int a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a5 || (uint64_t result = (*(uint64_t (**)(void))(*((void *)this + 2) + 24))(), result))
  {
    uint64_t v8 = *((void *)this + 41);
    if (v8 && (*(unsigned char *)(v8 + 1024) & 2) != 0)
    {
      return 0;
    }
    else
    {
      __n128 v13 = 0uLL;
      CMTimeEpoch v14 = 0;
      OZBehavior::getFrameDuration(this, &v13);
      CMTime v19 = *a2;
      *(__n128 *)&time1.int value = v13;
      time1.CMTimeEpoch epoch = v14;
      PC_CMTimeFloorToSampleDuration(&v19, &time1, (uint64_t)&time2);
      *a2 = time2;
      CMTimeValue v9 = *((void *)this + 29);
      v19.CMTimeEpoch epoch = *((void *)this + 28);
      CMTimeValue v20 = v9;
      CMTimeFlags v10 = *((_DWORD *)this + 61);
      CMTimeScale v21 = *((_DWORD *)this + 60);
      *(_OWORD *)&v19.int value = *((_OWORD *)this + 13);
      long long v11 = *((_OWORD *)this + 13);
      CMTimeEpoch v12 = *((void *)this + 31);
      *(_OWORD *)&time1.int value = v11;
      time1.CMTimeEpoch epoch = v19.epoch;
      CMTime time2 = *a2;
      if (CMTimeCompare(&time1, &time2) > 0) {
        goto LABEL_6;
      }
      CMTime time1 = v19;
      time2.int value = v20;
      time2.CMTimeScale timescale = v21;
      time2.signed int flags = v10;
      time2.CMTimeEpoch epoch = v12;
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v16);
      CMTime time1 = v16;
      *(__n128 *)&time2.int value = v13;
      time2.CMTimeEpoch epoch = v14;
      PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
      CMTime time1 = *a2;
      CMTime time2 = v15;
      if (CMTimeCompare(&time1, &time2) <= 0 || (v10 & 1) != 0 && (v10 & 0x10) != 0)
      {
        return 1;
      }
      else
      {
LABEL_6:
        time1.int value = v20;
        time1.CMTimeScale timescale = v21;
        time1.signed int flags = v10;
        time1.CMTimeEpoch epoch = v12;
        CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
        return CMTimeCompare(&time1, &time2) < 1;
      }
    }
  }
  return result;
}

__n128 OZBehavior::getFrameDuration@<Q0>(OZBehavior *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(OZBehavior *))(*(void *)this + 336))(this);
  if (v3)
  {
    uint64_t v4 = (OZSceneSettings *)(v3 + 336);
    result.n128_u64[0] = OZSceneSettings::getFrameDuration(v4, a2).n128_u64[0];
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *a2 = *(__n128 *)MEMORY[0x1E4F1FA48];
    a2[1].n128_u64[0] = *(void *)(v6 + 16);
  }
  return result;
}

uint64_t non-virtual thunk to'OZBehavior::isActiveAtTime(OZBehavior *this, CMTime *a2, BOOL a3, BOOL a4, int a5)
{
  return OZBehavior::isActiveAtTime((OZBehavior *)((char *)this - 16), a2, a3, 0, a5);
}

uint64_t OZBehavior::isActiveInTimeRange(OZBehavior *this, const PCTimeRange *a2, BOOL a3, BOOL a4, int a5)
{
  if (!a5 || (uint64_t result = (*(uint64_t (**)(void))(*((void *)this + 2) + 24))(), result))
  {
    uint64_t v8 = *((void *)this + 41);
    if (v8 && (*(unsigned char *)(v8 + 1024) & 2) != 0)
    {
      return 0;
    }
    else
    {
      memset(&v11, 0, sizeof(v11));
      OZBehavior::getFrameDuration(this, (__n128 *)&v11);
      PCTimeRange::getRangeEnclosingWholeFrames(a2, &v11, (uint64_t)v10);
      *(_OWORD *)&v9.int value = *(_OWORD *)((char *)this + 232);
      v9.CMTimeEpoch epoch = *((void *)this + 31);
      CMTime v15 = *(CMTime *)((char *)this + 208);
      CMTime time1 = *(CMTime *)((char *)this + 208);
      CMTime time2 = *(CMTime *)((char *)this + 232);
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v14);
      CMTime v13 = v10[0];
      CMTime time1 = v10[0];
      CMTime time2 = v10[1];
      PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v12);
      CMTime time1 = v12;
      CMTime time2 = v15;
      if (CMTimeCompare(&time1, &time2) < 0 || (time1 = v13, CMTime time2 = v14, CMTimeCompare(&time1, &time2) >= 1))
      {
        CMTime time1 = v9;
        CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
        return CMTimeCompare(&time1, &time2) < 1;
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'OZBehavior::isActiveInTimeRange(OZBehavior *this, const PCTimeRange *a2, BOOL a3, BOOL a4, int a5)
{
  return OZBehavior::isActiveInTimeRange((OZBehavior *)((char *)this - 16), a2, a3, 0, a5);
}

uint64_t OZBehavior::getSceneNode(OZBehavior *this)
{
  return *((void *)this + 41);
}

{
  return *((void *)this + 41);
}

uint64_t non-virtual thunk to'OZBehavior::getSceneNode(OZBehavior *this)
{
  return *((void *)this + 39);
}

uint64_t OZBehavior::getScene(OZBehavior *this)
{
  uint64_t result = *((void *)this + 41);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 272))();
  }
  return result;
}

uint64_t non-virtual thunk to'OZBehavior::getScene(OZBehavior *this)
{
  uint64_t result = *((void *)this + 39);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 272))();
  }
  return result;
}

uint64_t OZBehavior::getSourceOperationMask(OZBehavior *this, OZChannelBase *a2, int a3)
{
  if ((OZChannelBase *)((char *)this + 56) == a2 && (uint64_t v4 = *((void *)this + 41)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v4 + 552))(*((void *)this + 41));
  }
  else {
    return OZObjectManipulator::getSourceOperationMask((OZBehavior *)((char *)this + 16), a2, a3);
  }
}

uint64_t non-virtual thunk to'OZBehavior::getSourceOperationMask(OZBehavior *this, OZChannelBase *a2, int a3)
{
  return OZBehavior::getSourceOperationMask((OZBehavior *)((char *)this - 16), a2, a3);
}

void OZBehavior::getPasteEntry(OZBehavior *this, OZChannelBase *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1B7C3FD44()
{
  return 0;
}

void non-virtual thunk to'OZBehavior::getPasteEntry(OZBehavior *this, OZChannelBase *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1B7C3FD90()
{
  return 0;
}

char *OZBehavior::allowDrag(char *this, OZFactoryBase *lpsrc, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6, int a7)
{
  CMTime v13 = this;
  if (lpsrc)
  {
    *a5 = 0;
    if (this && a7 == 1 && *a6 == 1)
    {
      if (v13 + 56 == (char *)a3)
      {
        CMTime v14 = (OZSceneNode *)this;
        uint64_t v15 = (*(uint64_t (**)(char *))(*(void *)this + 272))(this);
        this = (char *)(*(uint64_t (**)(char *))(*(void *)v13 + 336))(v13);
        if ((char *)v15 == this)
        {
          this = (char *)OZChannelObjectRoot::findNodeRefDescendant((OZChannelObjectRoot *)a3, v14, (OZChannelFolder *)a3);
          if (this)
          {
            *a6 = 1;
            *a5 = a4 & 8;
          }
        }
      }
      return this;
    }
    if (v13 + 56 != (char *)a3) {
      return this;
    }
    if (this) {
      return this;
    }
  }
  else
  {
    *a5 = 0;
    if (this + 56 != (char *)a3) {
      return this;
    }
  }
  this = (char *)*((void *)v13 + 41);
  if (this && (*a6 | 2) == 3)
  {
    CMTime v16 = *(uint64_t (**)(void))(*(void *)this + 568);
    return (char *)v16();
  }
  return this;
}

char *non-virtual thunk to'OZBehavior::allowDrag(OZBehavior *this, OZFactoryBase *a2, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6, int a7)
{
  return OZBehavior::allowDrag((char *)this - 16, a2, a3, a4, a5, a6, a7);
}

uint64_t OZBehavior::prepareForDragOperation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 + 56 == a3 && (uint64_t v4 = *(void *)(a1 + 328)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v4 + 576))();
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'OZBehavior::prepareForDragOperation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 + 40 == a3 && (uint64_t v4 = *(void *)(a1 + 312)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v4 + 576))();
  }
  else {
    return 0;
  }
}

uint64_t OZBehavior::performDragOperation(OZBehavior *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, int a5, int a6, unsigned int a7, const CMTime *a8)
{
  if (lpsrc)
  {
    if (a6 == 1 && a5 == 1)
    {
      CMTime v13 = (unsigned int *)v12;
      if (v12)
      {
        uint64_t NodeRefDescendant = OZChannelObjectRoot::findNodeRefDescendant((OZBehavior *)((char *)this + 56), v12, (OZChannelFolder *)((char *)this + 56));
        if ((OZChannelBase *)((char *)this + 56) == a3)
        {
          uint64_t v15 = NodeRefDescendant;
          uint64_t v16 = (*(uint64_t (**)(unsigned int *))(*(void *)v13 + 272))(v13);
          if (v16 == (*(uint64_t (**)(OZBehavior *))(*(void *)this + 336))(this) && v15 != 0)
          {
            PCSharedCount::PCSharedCount(&v21);
            (*(void (**)(void *, PCSharedCount *))(*(void *)v15 + 344))(v15, &v21);
            PCString::~PCString((PCString *)&v21);
            (*(void (**)(OZBehavior *))(*(void *)this + 352))(this);
            (*(void (**)(void *, void, void))(*(void *)v15 + 864))(v15, v13[20], 0);
            if ((*(uint64_t (**)(OZBehavior *))(*(void *)this + 336))(this))
            {
              uint64_t v18 = (*(uint64_t (**)(OZBehavior *))(*(void *)this + 336))(this);
              OZDocument::postNotification(*(OZDocument **)(v18 + 1584), 8);
            }
            return 1;
          }
        }
        return 0;
      }
    }
  }
  if ((OZChannelBase *)((char *)this + 56) != a3) {
    return 0;
  }
  uint64_t result = *((void *)this + 41);
  if (result)
  {
    CMTimeValue v20 = *(uint64_t (**)(void))(*(void *)result + 584);
    return v20();
  }
  return result;
}

void sub_1B7C4037C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZBehavior::performDragOperation(OZBehavior *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, int a5, int a6, unsigned int a7, const CMTime *a8)
{
  return OZBehavior::performDragOperation((OZBehavior *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OZBehavior::deleteThis(OZBehavior *this, OZChannelBase *a2)
{
  if ((OZChannelBase *)((char *)this + 56) == a2 && (uint64_t v3 = *((void *)this + 41)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v3 + 608))();
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'OZBehavior::deleteThis(OZBehavior *this, OZChannelBase *a2)
{
  if ((OZChannelBase *)((char *)this + 40) == a2 && (uint64_t v3 = *((void *)this + 39)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v3 + 608))();
  }
  else {
    return 0;
  }
}

uint64_t OZBehavior::copy(OZBehavior *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t non-virtual thunk to'OZBehavior::copy(OZBehavior *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t OZBehavior::paste(OZBehavior *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t non-virtual thunk to'OZBehavior::paste(OZBehavior *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t OZBehavior::rename(OZBehavior *this, OZChannelBase *a2, PCString *a3)
{
  return 0;
}

uint64_t non-virtual thunk to'OZBehavior::rename(OZBehavior *this, OZChannelBase *a2, PCString *a3)
{
  return 0;
}

BOOL OZBehavior::isSelected(OZBehavior *this)
{
  return OZChannelBase::testFlag((OZChannelBase *)((char *)this + 56), 1);
}

BOOL non-virtual thunk to'OZBehavior::isSelected(OZBehavior *this)
{
  return OZChannelBase::testFlag((OZChannelBase *)((char *)this + 40), 1);
}

OZChannelBase *OZBehavior::select(OZBehavior *this)
{
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 56), 1, 0);
}

OZChannelBase *non-virtual thunk to'OZBehavior::select(OZBehavior *this)
{
  return OZChannelBase::setFlag((OZChannelBase *)((char *)this + 40), 1, 0);
}

OZChannelBase *OZBehavior::deselect(OZBehavior *this)
{
  uint64_t v1 = (OZChannelBase *)((char *)this + 56);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 56), 1, 0);

  return OZChannelBase::resetFlag(v1, 0x10000000, 0);
}

OZChannelBase *non-virtual thunk to'OZBehavior::deselect(OZBehavior *this)
{
  uint64_t v1 = (OZChannelBase *)((char *)this + 40);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 40), 1, 0);

  return OZChannelBase::resetFlag(v1, 0x10000000, 0);
}

uint64_t OZBehavior::isAnyParentSelected(OZBehavior *this)
{
  uint64_t v2 = *((void *)this + 41);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 640))(v2);
  uint64_t v4 = 1;
  if (OZChannelBase::testFlag(v3, 1)) {
    return v4;
  }
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 41) + 704);

  return v5();
}

uint64_t non-virtual thunk to'OZBehavior::isAnyParentSelected(OZBehavior *this)
{
  return OZBehavior::isAnyParentSelected((OZBehavior *)((char *)this - 16));
}

int8x8_t *OZBehavior::dirty(OZBehavior *this)
{
  OZObjectManipulator::dirty((OZBehavior *)((char *)this + 16));
  uint64_t result = (int8x8_t *)*((void *)this + 41);
  if (result
    && *(void *)&vorr_s8(result[4], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)result[4].i8, *(int8x16_t *)result[4].i8, 8uLL)))
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 496);
    return (int8x8_t *)v3();
  }
  return result;
}

int8x8_t *non-virtual thunk to'OZBehavior::dirty(OZBehavior *this)
{
  return OZBehavior::dirty((OZBehavior *)((char *)this - 16));
}

double OZBehavior::calcStaticHash(uint64_t a1, void *lpsrc, uint64_t **a3)
{
  if (!v6) {
    __cxa_bad_cast();
  }
  long long v7 = v6;
  (*(void (**)(int8x8_t *))(*(void *)v6 + 40))(v6);
  (*(void (**)(uint64_t, void *, void, void, uint64_t))(*(void *)a1 + 568))(a1, lpsrc, 0, 0, 1);
  __n128 v20 = *(__n128 *)PCHashWriteStream::getHash(v7)->i8;
  uint64_t v8 = *(void *)(a1 + 328);
  if (v8 && (*(uint64_t (**)(uint64_t))(*(void *)v8 + 272))(v8))
  {
    CMTime v9 = (uint64_t **)(*(uint64_t (**)(void))(**(void **)(a1 + 328) + 272))(*(void *)(a1 + 328));
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v18 = (uint64_t *)v19;
    OZScene::getImmediatelyReferencedNodes(v9, *(_DWORD *)(a1 + 80), &v18);
    CMTimeFlags v10 = v18;
    if (v18 != (uint64_t *)v19)
    {
      do
      {
        Node = (char *)OZScene::getNode((OZScene *)v9, *((_DWORD *)v10 + 7));
        if (Node)
        {
          CMTime v12 = Node + 16;
          if (!OZObjectManipulator::isInObjectList((uint64_t)(Node + 16), (uint64_t)a3))
          {
            StaticHash = (int *)OZObjectManipulator::getStaticHash(v12, lpsrc, a3);
            PCHash128::operator+=((int *)&v20, StaticHash);
          }
        }
        CMTime v14 = (uint64_t *)v10[1];
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            CMTime v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            uint64_t v15 = (uint64_t *)v10[2];
            BOOL v16 = *v15 == (void)v10;
            CMTimeFlags v10 = v15;
          }
          while (!v16);
        }
        CMTimeFlags v10 = v15;
      }
      while (v15 != (uint64_t *)v19);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v18, v19[0]);
  }
  *(void *)&double result = PCHashWriteStream::setHash((__n128 *)v7, &v20).n128_u64[0];
  return result;
}

void sub_1B7C408AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

double non-virtual thunk to'OZBehavior::calcStaticHash(uint64_t a1, void *a2, uint64_t **a3)
{
  return OZBehavior::calcStaticHash(a1 - 16, a2, a3);
}

double OZBehavior::calcHashForState(uint64_t a1, void *lpsrc, CMTime *a3, uint64_t **a4)
{
  if (!v8) {
    __cxa_bad_cast();
  }
  CMTime v9 = v8;
  long long v28 = *(_OWORD *)&a3->value;
  CMTimeEpoch epoch = a3->epoch;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 296))(a1, &v28, 1, 1, 1);
  (*(void (**)(void *, void))(*(void *)lpsrc + 16))(lpsrc, 0);
  (*(void (**)(void *, uint64_t))(*(void *)lpsrc + 48))(lpsrc, v10);
  (*(void (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
  CMTime v31 = *a3;
  OZChannelFolder::calcHashForState((OZChannelFolder *)(a1 + 56), (PCSerializerWriteStream *)lpsrc, &v31);
  uint64_t v27 = *(void *)(a1 + 224);
  long long v26 = *(_OWORD *)(a1 + 208);
  (*(void (**)(void *, void))(*(void *)lpsrc + 16))(lpsrc, 0);
  (*(void (**)(void *, long long *))(*(void *)lpsrc + 112))(lpsrc, &v26);
  (*(void (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
  CMTime v31 = *(CMTime *)(a1 + 208);
  CMTime v30 = *(CMTime *)(a1 + 232);
  double v11 = PC_CMTimeSaferAdd(&v31, &v30, (uint64_t)v25);
  (*(void (**)(void *, void, double))(*(void *)lpsrc + 16))(lpsrc, 0, v11);
  (*(void (**)(void *, unsigned char *))(*(void *)lpsrc + 112))(lpsrc, v25);
  (*(void (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
  __n128 TimeOffset = OZChannelObjectRootBase::getTimeOffset((__n128 *)(a1 + 56), &v24);
  (*(void (**)(void *, void, __n128))(*(void *)lpsrc + 16))(lpsrc, 0, TimeOffset);
  (*(void (**)(void *, __n128 *))(*(void *)lpsrc + 112))(lpsrc, &v24);
  (*(void (**)(void *))(*(void *)lpsrc + 24))(lpsrc);
  CMTime v31 = *a3;
  (*(void (**)(void *, CMTime *))(*(void *)lpsrc + 112))(lpsrc, &v31);
  __n128 v23 = *(__n128 *)PCHashWriteStream::getHash(v9)->i8;
  uint64_t v13 = *(void *)(a1 + 328);
  if (v13 && (*(uint64_t (**)(uint64_t))(*(void *)v13 + 272))(v13))
  {
    CMTime v14 = (uint64_t **)(*(uint64_t (**)(void))(**(void **)(a1 + 328) + 272))(*(void *)(a1 + 328));
    *(void *)&v30.CMTimeScale timescale = 0;
    v30.CMTimeEpoch epoch = 0;
    v30.CMTimeValue value = (CMTimeValue)&v30.timescale;
    OZScene::getImmediatelyReferencedNodes(v14, *(_DWORD *)(a1 + 80), (uint64_t **)&v30);
    CMTimeValue value = v30.value;
    if ((CMTimeScale *)v30.value != &v30.timescale)
    {
      do
      {
        Node = (char *)OZScene::getNode((OZScene *)v14, *(_DWORD *)(value + 28));
        if (Node)
        {
          BOOL v17 = Node + 16;
          if (!OZObjectManipulator::isInObjectList((uint64_t)(Node + 16), (uint64_t)a4))
          {
            OZObjectManipulator::getHashForState(v17, (uint64_t *)lpsrc, (OZRenderParams *)a3, a4, &v22);
            PCHash128::operator+=((int *)&v23, (int *)&v22);
          }
        }
        uint64_t v18 = *(CMTime **)(value + 8);
        if (v18)
        {
          do
          {
            CMTime v19 = v18;
            uint64_t v18 = (CMTime *)v18->value;
          }
          while (v18);
        }
        else
        {
          do
          {
            CMTime v19 = *(CMTime **)(value + 16);
            BOOL v20 = v19->value == value;
            CMTimeValue value = (CMTimeValue)v19;
          }
          while (!v20);
        }
        CMTimeValue value = (CMTimeValue)v19;
      }
      while (v19 != (CMTime *)&v30.timescale);
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v30, *(void **)&v30.timescale);
  }
  *(void *)&double result = PCHashWriteStream::setHash((__n128 *)v9, &v23).n128_u64[0];
  return result;
}

void sub_1B7C40DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,void *a28)
{
}

double non-virtual thunk to'OZBehavior::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4)
{
  return OZBehavior::calcHashForState(a1 - 16, a2, a3, a4);
}

unint64_t OZBehavior::canAddToSceneNode(OZBehavior *this, OZSceneNode *a2)
{
  return OZBehavior::CanAddToSceneNode((unsigned int *)(*((void *)this + 1) + 8), (uint64_t)a2);
}

unint64_t OZBehavior::CanAddToSceneNode(unsigned int *a1, uint64_t a2)
{
  Factory = (const void *)OZFactories::findFactory(*(void *)(theApp + 32), a1);
  unsigned int v5 = v4[32];
  unsigned int v6 = v4[33];
  unsigned int v7 = v4[34];
  unsigned int v8 = v4[35];
  if (!(v6 | v5 | v7 | v8)) {
    return 1;
  }
  BOOL v11 = v5 == 1940067709 && v6 == -2144595497 && v7 == -1993998333 && v8 == -1821964494;
  if (v11 && (OZSceneNode::isDescendantOf360Group(a2) & 1) != 0) {
    return 0;
  }
  unint64_t v13 = *(void *)(a2 + 8);
  v14.i64[0] = __PAIR64__(v6, v5);
  v14.i64[1] = __PAIR64__(v8, v7);
  return OZFactory::isKindOfClass(v13, &v14);
}

uint64_t OZBehavior::IsChannelAffectedByBehaviors(OZBehavior *this, const OZChannelBase *a2)
{
  if ((*((void *)this + 7) & 0x1000) != 0)
  {
    if (!v9 || *v9 == v9[1])
    {
      char IsChannelAffectedByBehaviors = 0;
    }
    else
    {
      char IsChannelAffectedByBehaviors = 0;
      uint64_t v11 = *v9 + 8;
      do
      {
        if (!OZChannelBase::testFlag(*(OZChannelBase **)(v11 - 8), 2)) {
          char IsChannelAffectedByBehaviors = OZBehavior::IsChannelAffectedByBehaviors(*(OZBehavior **)(v11 - 8), a2, v12);
        }
        BOOL v13 = v11 == v9[1];
        v11 += 8;
        BOOL v13 = !v13 && (IsChannelAffectedByBehaviors & 1) == 0;
      }
      while (v13);
    }
    return IsChannelAffectedByBehaviors & 1;
  }
  else
  {
    if (v3)
    {
      OZChannel::enumerateCurveProcessingNodes(v3, &v15);
      uint64_t v4 = v15;
      if (v15 == v16)
      {
        uint64_t v8 = 0;
        if (!v15) {
          return v8;
        }
        goto LABEL_29;
      }
      while (1)
      {
        unsigned int v5 = *v4;
        if (*v4)
        {
          if (v6)
          {
            if ((*(uint64_t (**)(void))(*(void *)(v6[1] + 16) + 24))()) {
              break;
            }
          }
          if (a2)
          {
            if (v7)
            {
              if (OZSimulationCurveNode::anyAffectingBehaviors(v7)) {
                break;
              }
            }
          }
        }
        if (++v4 == v16)
        {
          uint64_t v8 = 0;
          goto LABEL_28;
        }
      }
      uint64_t v8 = 1;
LABEL_28:
      uint64_t v4 = v15;
      if (v15)
      {
LABEL_29:
        BOOL v16 = v4;
        operator delete(v4);
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

void sub_1B7C41124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OZBehavior::GetBehaviorsAffectingChannel(void *a1, void *a2, uint64_t a3)
{
  if ((a1[7] & 0x1000) != 0)
  {
    if (v21)
    {
      for (uint64_t i = *v21; i != v21[1]; ++i)
      {
        if (!a3 || !OZChannelBase::testFlag(*i, 2)) {
          OZBehavior::GetBehaviorsAffectingChannel(*i, a2, a3);
        }
      }
    }
  }
  else
  {
    if (v5)
    {
      OZChannel::enumerateCurveProcessingNodes(v5, &v26);
      unsigned int v6 = v26;
      unsigned int v7 = v27;
      if (v26 != v27)
      {
        do
        {
          uint64_t v8 = *v6;
          if (*v6)
          {
            if (v9)
            {
              uint64_t v10 = v9[1];
              for (uint64_t j = (void *)a2[1]; j != a2; uint64_t j = (void *)j[1])
              {
                if (j[2] == v10)
                {
                  if (j != a2) {
                    goto LABEL_12;
                  }
                  break;
                }
              }
              BOOL v12 = operator new(0x18uLL);
              v12[1] = a2;
              _OWORD v12[2] = v10;
              BOOL v13 = (void *)*a2;
              *BOOL v12 = *a2;
              v13[1] = v12;
              *a2 = v12;
              ++a2[2];
            }
LABEL_12:
            if (v14)
            {
              uint64_t v23 = (uint64_t)&v23;
              __n128 v24 = &v23;
              uint64_t v25 = 0;
              if (a3) {
                OZSimulationCurveNode::getVisibleAffectingBehaviors((uint64_t)v14, &v23);
              }
              else {
                OZSimulationCurveNode::getAllAffectingBehaviors((uint64_t)v14, &v23);
              }
              uint64_t v15 = v24;
              if (v24 != &v23)
              {
                BOOL v16 = (void *)*a2;
                uint64_t v17 = a2[2];
                do
                {
                  uint64_t v18 = (void *)a2[1];
                  uint64_t v19 = v15[2];
                  while (v18 != a2)
                  {
                    if (v18[2] == v19)
                    {
                      if (v18 != a2) {
                        goto LABEL_24;
                      }
                      break;
                    }
                    uint64_t v18 = (void *)v18[1];
                  }
                  BOOL v20 = operator new(0x18uLL);
                  v20[1] = a2;
                  _OWORD v20[2] = v19;
                  void *v20 = v16;
                  v16[1] = v20;
                  *a2 = v20;
                  ++v17;
                  BOOL v16 = v20;
                  a2[2] = v17;
LABEL_24:
                  uint64_t v15 = (uint64_t *)v15[1];
                }
                while (v15 != &v23);
              }
              std::__list_imp<unsigned int>::clear(&v23);
              unsigned int v7 = v27;
            }
          }
          ++v6;
        }
        while (v6 != v7);
        unsigned int v6 = v26;
      }
      if (v6)
      {
        uint64_t v27 = v6;
        operator delete(v6);
      }
    }
  }
}

void sub_1B7C41400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OZBehavior::isUltimatelyAffectedBy(uint64_t a1, OZChannelBase *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 16;
  if (OZObjectManipulator::isInObjectList(a1 + 16, a3)) {
    return 0;
  }
  uint64_t v8 = operator new(0x18uLL);
  v8[1] = a3;
  _OWORD v8[2] = v6;
  CMTime v9 = *(uint64_t **)a3;
  *uint64_t v8 = *(void *)a3;
  v9[1] = (uint64_t)v8;
  *(void *)a3 = v8;
  ++*(void *)(a3 + 16);
  if (v6 == OZChannelBase::getObjectManipulator(a2)) {
    return 1;
  }
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 312))(a1);
  if (OZBehavior::IsChanAAffectedByChanB(v10, (uint64_t)a2, a3)) {
    return 1;
  }
  uint64_t v24 = (uint64_t)&v24;
  uint64_t v25 = &v24;
  uint64_t v26 = 0;
  uint64_t v21 = (uint64_t)&v21;
  long long v22 = &v21;
  uint64_t v23 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 520))(a1, &v21);
  for (uint64_t i = v22; i != &v21; uint64_t i = (uint64_t *)i[1])
  {
    BOOL v12 = (OZChannelBase *)i[2];
    uint64_t Object = OZChanObjectManipRef::getObject(v12);
    (*(void (**)(uint64_t, OZChannelBase *, uint64_t, uint64_t *))(*(void *)a1 + 528))(a1, v12, Object, &v24);
  }
  int32x4_t v14 = v25;
  if (v25 != &v24)
  {
    uint64_t v15 = v25;
    do
    {
      uint64_t v16 = v15[2];
      if ((OZChannelBase *)v16 == a2)
      {
LABEL_17:
        uint64_t v7 = 1;
        goto LABEL_22;
      }
      if ((*(unsigned char *)(v16 + 57) & 0x10) != 0)
      {
        uint64_t v17 = a2;
        while (1)
        {
          uint64_t v17 = (OZChannelBase *)v17->var6;
          if (!v17) {
            break;
          }
          if (v17 == (OZChannelBase *)v16) {
            goto LABEL_17;
          }
        }
      }
      uint64_t v15 = (uint64_t *)v15[1];
    }
    while (v15 != &v24);
    while (v14 != &v24)
    {
      if (OZBehavior::IsChanAAffectedByChanB((void *)v14[2], (uint64_t)a2, a3)) {
        goto LABEL_17;
      }
      int32x4_t v14 = (uint64_t *)v14[1];
    }
  }
  uint64_t v18 = *(uint64_t **)a3;
  uint64_t v19 = **(void **)a3;
  *(void *)(v19 + 8) = *(void *)(*(void *)a3 + 8);
  *(void *)v18[1] = v19;
  --*(void *)(a3 + 16);
  operator delete(v18);
  uint64_t v7 = 0;
LABEL_22:
  std::__list_imp<unsigned int>::clear(&v21);
  std::__list_imp<unsigned int>::clear(&v24);
  return v7;
}

void sub_1B7C41674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t OZBehavior::IsChanAAffectedByChanB(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1 == (void *)a2) {
    return 1;
  }
  if ((*(unsigned char *)(a2 + 57) & 0x10) == 0)
  {
    std::list<OZObjectManipulator *>::list(v13, a3);
    uint64_t v10 = (uint64_t)&v10;
    uint64_t v11 = &v10;
    uint64_t v12 = 0;
    OZBehavior::GetBehaviorsAffectingChannel(a1, &v10, 0);
    uint64_t v6 = v11;
    if (v11 != &v10)
    {
      while ((OZBehavior::isUltimatelyAffectedBy(v6[2], (void *)a2, (uint64_t)v13) & 1) == 0)
      {
        uint64_t v6 = (uint64_t *)v6[1];
        if (v6 == &v10) {
          goto LABEL_6;
        }
      }
      std::__list_imp<unsigned int>::clear(&v10);
      std::__list_imp<unsigned int>::clear(v13);
      return 1;
    }
LABEL_6:
    std::__list_imp<unsigned int>::clear(&v10);
    std::__list_imp<unsigned int>::clear(v13);
    return 0;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v8 = (void *)*v7;
  if (*v7 == v7[1]) {
    return 0;
  }
  do
  {
    uint64_t result = OZBehavior::IsChanAAffectedByChanB(a1, *v8, a3);
    if (result) {
      break;
    }
    ++v8;
  }
  while (v8 != (void *)v7[1]);
  return result;
}

void sub_1B7C417E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t OZBehavior::isUltimatelyAffectedBy(uint64_t a1, void *a2, uint64_t a3)
{
  if (OZObjectManipulator::isInObjectList(a1 + 16, a3)) {
    return 0;
  }
  if ((a2[7] & 0x1000) != 0)
  {
    if (!v9) {
      return 0;
    }
    uint64_t v10 = (void *)*v9;
    if (*v9 == v9[1]) {
      return 0;
    }
    do
    {
      uint64_t result = OZBehavior::isUltimatelyAffectedBy(a1, *v10, a3);
      if (result) {
        break;
      }
      ++v10;
    }
    while (v10 != (void *)v9[1]);
  }
  else
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 536);
    return v8(a1, v7, a3);
  }
  return result;
}

double OZBehavior::getSceneFrameRate(OZBehavior *this)
{
  uint64_t v1 = (*(uint64_t (**)(OZBehavior *))(*(void *)this + 336))(this);
  if (v1) {
    return *(double *)(v1 + 368);
  }
  else {
    return 0.0;
  }
}

__n128 OZBehavior::getNaturalDuration@<Q0>(OZBehavior *this@<X0>, __n128 *a2@<X8>)
{
  if ((*(uint64_t (**)(OZBehavior *))(*(void *)this + 336))(this))
  {
    uint64_t v4 = (OZSceneSettings *)((*(uint64_t (**)(OZBehavior *))(*(void *)this + 336))(this) + 336);
    result.n128_u64[0] = OZSceneSettings::getFrameDuration(v4, a2).n128_u64[0];
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F1FA48];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1FA48];
    *a2 = *(__n128 *)MEMORY[0x1E4F1FA48];
    a2[1].n128_u64[0] = *(void *)(v6 + 16);
  }
  return result;
}

double non-virtual thunk to'OZBehavior::getNaturalDuration@<D0>(OZBehavior *this@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = OZBehavior::getNaturalDuration((OZBehavior *)((char *)this - 16), a2).n128_u64[0];
  return result;
}

uint64_t OZBehavior::isEnabledAndUseBehaviors(OZBehavior *this)
{
  uint64_t v1 = *((void *)this + 41);
  if (v1 && (*(unsigned char *)(v1 + 1024) & 2) != 0) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(void))(*((void *)this + 2) + 24))();
  }
}

uint64_t OZBehavior::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  uint64_t v4 = (OZChannelObjectRoot *)(this + 7);
  if (!OZChannelBase::testFlag((OZChannelBase *)(this + 7), 8)) {
    OZFactory::setNeedsSaving(this[1], (const OZFactory *)1);
  }

  return OZChannelObjectRoot::markChannelFactoriesForSerialization(v4, a2);
}

uint64_t non-virtual thunk to'OZBehavior::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZBehavior::markFactoriesForSerialization(this - 6, a2);
}

uint64_t OZBehavior::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZBehaviorScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(void *)a2 + 16))(a2, 69);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, char *))(*(void *)a2 + 200))(a2, 110, (char *)this + 88);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, void))(*(void *)a2 + 144))(a2, 111, *((unsigned int *)this + 20));
  if (((*(uint64_t (**)(PCSerializerWriteStream *))(*(void *)a2 + 232))(a2) & 1) == 0)
  {
    uint64_t v5 = OZFactory::fileRefID(this[1], v4);
    (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(void *)a2 + 144))(a2, 113, v5);
  }

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZBehavior::writeHeader(OZFactory **this, PCSerializerWriteStream *a2)
{
  return OZBehavior::writeHeader(this - 6, a2);
}

uint64_t OZBehavior::writeBody(OZBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&OZBehaviorScope);
  OZChannelObjectRoot::writeBody((OZBehavior *)((char *)this + 56), a2, 0, 1, a5);

  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t non-virtual thunk to'OZBehavior::writeBody(OZBehavior *this, PCSerializerWriteStream *a2, BOOL a3, BOOL a4, uint64_t a5)
{
  return OZBehavior::writeBody((OZBehavior *)((char *)this - 48), a2, 0, 0, a5);
}

uint64_t OZBehavior::parseBegin(OZBehavior *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZBehaviorScope);

  return OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 56), a2);
}

uint64_t non-virtual thunk to'OZBehavior::parseBegin(OZBehavior *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&OZBehaviorScope);

  return OZChannelObjectRoot::parseBegin((OZChannelFolder *)((char *)this + 8), a2);
}

uint64_t OZBehavior::parseEnd(OZBehavior *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = (OZChannelFolder *)((char *)this + 56);
  (*(void (**)(OZBehavior *))(*(void *)this + 88))(this);

  return OZChannelObjectRoot::parseEnd(v3, a2);
}

uint64_t non-virtual thunk to'OZBehavior::parseEnd(OZBehavior *this, PCSerializerReadStream *a2)
{
  uint64_t v3 = (char *)this - 48;
  (*(void (**)(char *))(*((void *)this - 6) + 88))((char *)this - 48);

  return OZChannelObjectRoot::parseEnd((OZChannelFolder *)(v3 + 56), a2);
}

uint64_t OZBehavior::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  PCSharedCount::PCSharedCount(&v8);
  uint64_t v6 = OZChannelObjectRoot::parseElement(this + 7, a2, a3);
  PCString::~PCString((PCString *)&v8);
  return v6;
}

void sub_1B7C41E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
}

uint64_t non-virtual thunk to'OZBehavior::parseElement(PCSerializer **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return OZBehavior::parseElement(this - 6, a2, a3);
}

void sub_1B7C41F34(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t OZEffect_Base::areEffectsAppliedInScreenSpace(OZEffect_Base *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 144))();
  }
  return result;
}

void OZEffect::OZEffect(OZEffect *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  OZImageNode::OZImageNode(this);
  *PCSharedCount v8 = &unk_1F1146D80;
  CMTime v8[3] = 0;
  void v8[4] = &unk_1F1139198;
  v8[5] = a2;
  CMTime v9 = v8 + 6;
  v8[6] = &unk_1F1144468;
  v8[7] = 0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(v8 + 8));
  *(void *)this = &unk_1F11466D8;
  *((void *)this + 4) = &unk_1F1146A00;
  *((void *)this + 6) = &unk_1F1146A60;
  *((void *)this + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = &unk_1F1146CB8;
  OZChannelObjectRoot::OZChannelObjectRoot((OZEffect *)((char *)this + 88), a3, 0, a4, 0);
  *((void *)this + 43) = 0x4014000000000000;
  *((unsigned char *)this + 35OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = 0;
  *((void *)this + 37) = v9;
  *((void *)this + 3) = 0;
  *((void *)this + 45) = 0;
}

void sub_1B7C420C8(_Unwind_Exception *a1, const PCString *a2)
{
  v2->var6 = (OZChannelFolder *)&unk_1F1138080;
  unint64_t var7 = v2->var7;
  if (var7)
  {
    *(void *)(var7 + 8) = 0;
    v2->unint64_t var7 = 0;
  }
  OZChannelBase::setRangeName(v2, a2);
  _Unwind_Resume(a1);
}

void OZEffect::OZEffect(OZEffect *this, const OZEffect *a2, char a3)
{
  OZImageNode::OZImageNode(this);
  *uint64_t v6 = &unk_1F1146D80;
  void v6[3] = 0;
  uint64_t v7 = *((void *)a2 + 5);
  void v6[4] = &unk_1F1139198;
  v6[5] = v7;
  PCSharedCount v8 = v6 + 6;
  v6[6] = &unk_1F1144468;
  v6[7] = 0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(v6 + 8));
  *(void *)this = &unk_1F11466D8;
  *((void *)this + 4) = &unk_1F1146A00;
  *((void *)this + 6) = &unk_1F1146A60;
  *((void *)this + 1OZChannelBase::reset((OZChannelBase *)((char *)this + 30888), 0) = &unk_1F1146CB8;
  CMTime v9 = (OZChannelBase *)OZChannelObjectRoot::OZChannelObjectRoot((OZEffect *)((char *)this + 88), (const OZEffect *)((char *)a2 + 88), 0);
  *((void *)this + 43) = *((void *)a2 + 43);
  *((unsigned char *)this + 35OZChannelObjectRoot::~OZChannelObjectRoot(this - 2) = *((unsigned char *)a2 + 352);
  *((void *)this + 37) = v8;
  *((void *)this + 3) = 0;
  *((void *)this + 45) = 0;
  if ((a3 & 2) != 0)
  {
    unsigned int NextUniqueID = OZChannelBase::getNextUniqueID(v9);
    OZChannelBase::setID((OZChannelBase *)((char *)this + 88), NextUniqueID);
  }
}

void sub_1B7C42270(_Unwind_Exception *a1)
{
  OZChannelObjectRoot::~OZChannelObjectRoot(v2);
  v1->var6 = (OZChannelFolder *)&unk_1F1138080;
  unint64_t var7 = v1->var7;
  if (var7)
  {
    *(void *)(var7 + 8) = 0;
    v1->unint64_t var7 = 0;
  }
  OZChannelBase::setRangeName(v1, v4);
  _Unwind_Resume(a1);
}

void OZEffect::~OZEffect(OZChannelBase *this)
{
  this->$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (void **)&unk_1F11466D8;
  this->var4.$3CC8671D27C23BF42ADDB32F2B5E48AE var0 = (__CFString *)&unk_1F1146A00;
  this->var6 = (OZChannelFolder *)&unk_1F1146A60;
  this->BOOL var10 = (__CFString *)&unk_1F1146CB8;
  OZChannelObjectRoot::~OZChannelObjectRoot((OZChannelObjectRoot *)&this->var11);
  this->var6 = (OZChannelFolder *)&unk_1F1138080;
  unint64_t var7 = this->var7;
  if (var7)
  {
    *(void *)(var7 + 8) = 0;
    this->unint64_t var7 = 0;
  }

  OZChannelBase::setRangeName(this, v2);
}

{
  uint64_t vars8;

  OZEffect::~OZEffect(this);

  JUMPOUT(0x1BA9BFBA0);
}

void non-virtual thunk to'OZEffect::~OZEffect(OZEffect *this)
{
}

{
  OZEffect::~OZEffect((OZChannelBase *)((char *)this - 48));
}

{
  OZEffect::~OZEffect((OZChannelBase *)((char *)this - 80));
}

{
  uint64_t vars8;

  OZEffect::~OZEffect((OZChannelBase *)((char *)this - 32));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZEffect::~OZEffect((OZChannelBase *)((char *)this - 48));

  JUMPOUT(0x1BA9BFBA0);
}

{
  uint64_t vars8;

  OZEffect::~OZEffect((OZChannelBase *)((char *)this - 80));

  JUMPOUT(0x1BA9BFBA0);
}

uint64_t OZEffect::isEnabled(OZEffect *this, int a2, int a3)
{
  int isEnabled = OZObjectManipulator::isEnabled((OZEffect *)((char *)this + 48), a2, a3);
  return isEnabled & (*(unsigned int (**)(OZEffect *))(*(void *)this + 264))(this);
}

uint64_t non-virtual thunk to'OZEffect::isEnabled(OZEffect *this, int a2, int a3)
{
  int isEnabled = OZObjectManipulator::isEnabled(this, a2, a3);
  return isEnabled & (*(unsigned int (**)(char *))(*((void *)this - 6) + 264))((char *)this - 48);
}

uint64_t OZEffect::isConnectionValid(OZEffect *this)
{
  return 1;
}

uint64_t OZEffect::isActiveAtTime(OZEffect *this, CMTime *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a5
    || (uint64_t result = (*(uint64_t (**)(OZEffect *, uint64_t, uint64_t))(*(void *)this + 272))(this, a3, a4),
        result))
  {
    uint64_t v8 = *((void *)this + 45);
    if (!v8 || (*(unsigned char *)(v8 + 1024) & 1) == 0)
    {
      uint64_t result = (*(uint64_t (**)(OZEffect *))(*(void *)this + 296))(this);
      if (!result) {
        return result;
      }
      CMTime v9 = (OZSceneSettings *)(result + 336);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(result + 336), &v16);
      CMTime v20 = *a2;
      *(__n128 *)&time1.CMTimeValue value = v16;
      time1.CMTimeEpoch epoch = v17;
      PC_CMTimeFloorToSampleDuration(&v20, &time1, (uint64_t)&time2);
      *a2 = time2;
      *(_OWORD *)&v20.CMTimeValue value = *((_OWORD *)this + 15);
      CMTimeValue v10 = *((void *)this + 33);
      v20.CMTimeEpoch epoch = *((void *)this + 32);
      CMTimeValue v21 = v10;
      CMTimeScale v22 = *((_DWORD *)this + 68);
      CMTimeFlags v11 = *((_DWORD *)this + 69);
      CMTimeEpoch v12 = *((void *)this + 35);
      OZSceneSettings::getFrameDuration(v9, &v13);
      CMTime time1 = v20;
      CMTime time2 = *a2;
      if (CMTimeCompare(&time1, &time2) <= 0)
      {
        CMTime time1 = v20;
        time2.CMTimeValue value = v21;
        time2.CMTimeScale timescale = v22;
        time2.signed int flags = v11;
        time2.CMTimeEpoch epoch = v12;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v16);
        *(__n128 *)&time1.CMTimeValue value = v16;
        time1.CMTimeEpoch epoch = v17;
        *(__n128 *)&time2.CMTimeValue value = v13;
        time2.CMTimeEpoch epoch = v14;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v15);
        CMTime time1 = *a2;
        CMTime time2 = v15;
        if (CMTimeCompare(&time1, &time2) < 1) {
          return 1;
        }
        if (v11) {
          return (v11 >> 4) & 1;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t non-virtual thunk to'OZEffect::isActiveAtTime(OZEffect *this, CMTime *a2, uint64_t a3, uint64_t a4, int a5)
{
  return OZEffect::isActiveAtTime((OZEffect *)((char *)this - 48), a2, a3, a4, a5);
}

uint64_t OZEffect::isActiveInTimeRange(OZEffect *this, const PCTimeRange *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!a5
    || (uint64_t result = (*(uint64_t (**)(OZEffect *, uint64_t, uint64_t))(*(void *)this + 272))(this, a3, a4),
        result))
  {
    uint64_t v8 = *((void *)this + 45);
    if (v8 && (*(unsigned char *)(v8 + 1024) & 1) != 0) {
      return 0;
    }
    memset(&v11, 0, sizeof(v11));
    uint64_t v9 = (*(uint64_t (**)(OZEffect *))(*(void *)this + 296))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), (__n128 *)&v11);
    PCTimeRange::getRangeEnclosingWholeFrames(a2, &v11, (uint64_t)v10);
    CMTime v15 = *(CMTime *)((unsigned char *)this + 10);
    CMTime time1 = *(CMTime *)((unsigned char *)this + 10);
    CMTime time2 = *(CMTime *)((unsigned char *)this + 11);
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v14);
    CMTime v13 = v10[0];
    CMTime time1 = v10[0];
    CMTime time2 = v10[1];
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v12);
    CMTime time1 = v12;
    CMTime time2 = v15;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      return 0;
    }
    else
    {
      CMTime time1 = v13;
      CMTime time2 = v14;
      return CMTimeCompare(&time1, &time2) < 1;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'OZEffect::isActiveInTimeRange(OZEffect *this, const PCTimeRange *a2, uint64_t a3, uint64_t a4, int a5)
{
  return OZEffect::isActiveInTimeRange((OZEffect *)((char *)this - 48), a2, a3, a4, a5);
}

__n128 OZEffect::getBounds(uint64_t a1, __n128 *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    (*(void (**)(void))(*(void *)v2 + 16))();
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    a2[1] = result;
  }
  return result;
}

uint64_t OZEffect::getResolution(OZEffect *this, double *a2, double *a3)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    return (*(uint64_t (**)(uint64_t, double *, double *))(*(void *)result + 112))(result, a2, a3);
  }
  *a2 = 1.0;
  *a3 = 1.0;
  return result;
}

void OZEffect::getHelium(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t OZEffect::getSceneNode(OZEffect *this)
{
  return *((void *)this + 45);
}

uint64_t non-virtual thunk to'OZEffect::getSceneNode(OZEffect *this)
{
  return *((void *)this + 39);
}

uint64_t OZEffect::getSceneNodeConst(OZEffect *this)
{
  return *((void *)this + 45);
}

uint64_t OZEffect::getWorkingColorDescription@<X0>(OZEffect *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(OZEffect *))(*(void *)this + 256))(this);
  if (v3)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 288);
    return v4();
  }
  else
  {
    return FxGetDefaultWorkingColorDescription(a2);
  }
}

float OZEffect::getBlendingGamma(OZEffect *this)
{
  uint64_t v1 = (*(uint64_t (**)(OZEffect *))(*(void *)this + 256))(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)v1 + 296);
    v2();
  }
  else
  {
    return PCRenderModel::getDefaultBlendingGamma(0);
  }
  return result;
}

uint64_t OZEffect::getDimensions(OZEffect *this, float *a2, float *a3, const OZRenderState *a4)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    return (*(uint64_t (**)(uint64_t, float *, float *, const OZRenderState *))(*(void *)result + 96))(result, a2, a3, a4);
  }
  *a2 = 0.0;
  *a3 = 0.0;
  return result;
}

uint64_t OZEffect::getSourceOperationMask(OZEffect *this, OZChannelBase *a2, int a3)
{
  if ((OZChannelBase *)((char *)this + 88) == a2 && (uint64_t v4 = *((void *)this + 45)) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v4 + 552))(*((void *)this + 45));
  }
  else {
    return OZObjectManipulator::getSourceOperationMask((OZEffect *)((char *)this + 48), a2, a3);
  }
}

uint64_t non-virtual thunk to'OZEffect::getSourceOperationMask(OZEffect *this, OZChannelBase *a2, int a3)
{
  return OZEffect::getSourceOperationMask((OZEffect *)((char *)this - 48), a2, a3);
}

void OZEffect::getPasteEntry(OZEffect *this, OZChannelBase *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1B7C42C58()
{
  return 0;
}

void non-virtual thunk to'OZEffect::getPasteEntry(OZEffect *this, OZChannelBase *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1B7C42CA4()
{
  return 0;
}

OZEffect *OZEffect::allowDrag(OZEffect **this, OZFactoryBase *lpsrc, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6, int a7)
{
  if (lpsrc)
  {
    *a5 = 0;
    if (result && a7 == 1 && *a6 == 1)
    {
      if (this + 11 == (OZEffect **)a3)
      {
        CMTime v15 = result;
        uint64_t v16 = (*(uint64_t (**)(OZEffect *))(*(void *)result + 272))(result);
        uint64_t result = (OZEffect *)(*((uint64_t (**)(OZEffect **))*this + 37))(this);
        if ((OZEffect *)v16 == result)
        {
          uint64_t result = (OZEffect *)OZChannelObjectRoot::findNodeRefDescendant((OZChannelObjectRoot *)a3, v15, (OZChannelFolder *)a3);
          if (result)
          {
            *a6 = 1;
            *a5 = a4 & 8;
          }
        }
      }
      return result;
    }
  }
  else
  {
    *a5 = 0;
  }
  if (this + 11 == (OZEffect **)a3
    || (uint64_t result = (OZEffect *)OZChannelBase::getChannelRootBase(a3), result == (OZEffect *)(this + 11)))
  {
    if (!lpsrc
    {
      uint64_t result = this[45];
      if (result)
      {
        if ((*a6 | 2) == 3)
        {
          CMTimeEpoch v17 = *(uint64_t (**)(void))(*(void *)result + 568);
          return (OZEffect *)v17();
        }
      }
    }
  }
  return result;
}

OZEffect *non-virtual thunk to'OZEffect::allowDrag(OZEffect **this, OZFactoryBase *a2, OZChannelBase *a3, char a4, unsigned int *a5, unsigned int *a6, int a7)
{
  return OZEffect::allowDrag(this - 6, a2, a3, a4, a5, a6, a7);
}

uint64_t OZEffect::prepareForDragOperation(uint64_t a1, int a2, OZChannelBase *this)
{
  if ((OZChannelBase *)(a1 + 88) != this && OZChannelBase::getChannelRootBase(this) != (void *)(a1 + 88)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 360);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 576);

  return v5();
}

uint64_t non-virtual thunk to'OZEffect::prepareForDragOperation(uint64_t a1, int a2, OZChannelBase *a3)
{
  return OZEffect::prepareForDragOperation(a1 - 48, a2, a3);
}

uint64_t OZEffect::performDragOperation(OZEffect *this, OZFactoryBase *lpsrc, OZChannelBase *a3, unsigned int a4, int a5, int a6, unsigned int a7, const CMTime *a8)
{
  if (lpsrc)
  {
    if (a6 == 1 && a5 == 1)
    {
      CMTime v13 = (unsigned int *)v12;
      if (v12)
      {
        uint64_t NodeRefDescendant = OZChannelObjectRoot::findNodeRefDescendant((OZEffect *)((char *)this + 88), v12, (OZChannelFolder *)((char *)this + 88));
        if ((OZChannelBase *)((char *)this + 88) == a3)
        {
          CMTime v15 = NodeRefDescendant;
          uint64_t v16 = (*(uint64_t (**)(unsigned int *))(*(void *)v13 + 272))(v13);
          if (v16 == (*(uint64_t (**)(OZEffect *))(*(void *)this + 296))(this) && v15 != 0)
          {
            uint64_t result = (*(uint64_t (**)(void *, unsigned int *))(*(void *)v15 + 872))(v15, v13 + 4);
            if (result)
            {
              PCSharedCount::PCSharedCount(&v21);
              (*(void (**)(void *, PCSharedCount *))(*(void *)v15 + 344))(v15, &v21);
              PCString::~PCString((PCString *)&v21);
              (*(void (**)(OZEffect *))(*(void *)this + 320))(this);
              (*(void (**)(void *, void, void))(*(void *)v15 + 864))(v15, v13[20], 0);
              if ((*(uint64_t (**)(OZEffect *))(*(void *)this + 296))(this))
              {
                uint64_t v19 = (*(uint64_t (**)(OZEffect *))(*(void *)this + 296))(this);
                OZDocument::postNotification(*(OZDocument **)(v19 + 1584), 8);
              }
              return 1;
            }
            return result;
          }
        }
        return 0;
      }
    }
  }
  if ((OZChannelBase *)((char *)this + 88) != a3 && OZChannelBase::getChannelRootBase(a3) != (char *)this + 88) {
    return 0;
  }
  uint64_t result = *((void *)this + 45);
  if (result)
  {
    CMTime v20 = *(uint64_t (**)(void))(*(void *)result + 584);
    return v20();
  }
  return result;
}